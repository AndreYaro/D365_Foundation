<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRSalesTableController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRSalesTableController</c> class handles logic behind
/// several buttons on the <c>SalesTable</c> form.
/// </summary>
class MCRSalesTableController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesTable      salesTable;
        SalesLine       salesLine;

        if (_args && _args.record())
        {
            switch (_args.record().TableId)
            {
                case tableNum(SalesTable):
                    salesTable = _args.record();

                    if (_args.parmEnumType() == enumNum(MCRSalesTableControl))
                    {
                        switch (_args.parmEnum())
                        {
                            case MCRSalesTableControl::Recalculate:
                                MCRSalesTableController::recalculateRetailPricesDiscounts(salesTable);
                                break;
                            case MCRSalesTableControl::Recap:
                                {
                                    FormRun formRun = _args.caller() as FormRun;
                                    FormControl modify;
                                    if (formRun != null)
                                    {
                                        modify = formRun.design(1).controlName('Modify');
                                    }

                                    if (RetailSalesTableShareModifyButtonStatusToMCRSalesOrderRecapFlight::instance().isEnabled() && modify != null)
                                    {
                                        boolean showModify = modify.enabled() && modify.visible();

                                        if (formRun.design(1).controlName('GridHeader').visible())
                                        {
                                            showModify = false;
                                        }

                                        using (RetailSalesTableButtonStatusContext context = RetailSalesTableButtonStatusContext::construct())
                                        {
                                            context.parmIsModifyButtonEnabled(showModify);
                                            SalesTableForm::mcrShowOrderRecap(salesTable);
                                        }
                                    }
                                    else
                                    {
                                        SalesTableForm::mcrShowOrderRecap(salesTable);
                                    }
                                    break;
                                }
                            case MCRSalesTableControl::RemovePriceLock:
                                MCRSalesTableController::unlockPriceForOrder(salesTable);
                                break;
                            default:
                                throw error("@SYS104799");
                        }
                    }
                    break;
                case tableNum(SalesLine):
                    salesLine = _args.record();
                    MCRContinuityCustHeader::callContinuityCustHeaderForm(salesLine.InventTransId);
                    break;
                case tableNum(MCRSalesLine):
                    MCRSalesTableController::promptForGiftCardUpdate(_args.record());
                    break;
                default:
                    throw error("@SYS104799");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForGiftCardUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the gift card update dialog.
    /// </summary>
    /// <param name="_mcrSalesLine">
    /// The <c>MCRSalesLine</c> record being updated with gift card information.
    /// </param>
    public static void promptForGiftCardUpdate(MCRSalesLine _mcrSalesLine)
    {
        Args                credArgs;
        FormRun             credFormRun;
        MCRSalesLine        mcrSalesLineReturned;
        MCRSalesLine        mcrSalesLineLocal;

        credArgs = new Args();

        credArgs.name(formStr(MCRGiftCardUpdatePromptDialog));
        credArgs.record(_mcrSalesLine);
        credFormRun = classfactory.formRunClass(credArgs);
        credFormRun.run();
        credFormRun.wait();

        if (credFormRun.closedOk())
        {
            ttsBegin;
            mcrSalesLineLocal       = _mcrSalesLine;
            mcrSalesLineReturned    = credArgs.record();
            mcrSalesLineLocal.GiftCardNumber         = mcrSalesLineReturned.GiftCardNumber;
            mcrSalesLineLocal.GiftCardType           = mcrSalesLineReturned.GiftCardType;
            mcrSalesLineLocal.GiftCardBuyerName      = mcrSalesLineReturned.GiftCardBuyerName;
            mcrSalesLineLocal.GiftCardRecipientName  = mcrSalesLineReturned.GiftCardRecipientName;
            mcrSalesLineLocal.GiftCardBuyerEmail     = mcrSalesLineReturned.GiftCardBuyerEmail;
            mcrSalesLineLocal.GiftCardRecipientEmail = mcrSalesLineReturned.GiftCardRecipientEmail;
            mcrSalesLineLocal.GiftCardGiftMessage    = mcrSalesLineReturned.GiftCardGiftMessage;
            mcrSalesLineLocal.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateRetailPricesDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the retail recalculator logic for the passed sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for which this method recalculates retail values.
    /// </param>
    public static void recalculateRetailPricesDiscounts(SalesTable _salesTable)
    {
        RetailSalesTable retailSalesTable = _salesTable.retailSalesTable();
        RetailSalesOrderCalculator::setPricesDiscountsOnOrderOnServer(_salesTable.SalesId, retailSalesTable.TotalManualDiscountPercentage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockPriceForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove the price lock for all non-invoiced lines in given sales order.
    /// </summary>
    internal static void unlockPriceForOrder(SalesTable _salesTable)
    {
        SalesLine salesLine;
        RetailSalesLine retailSalesLine;

        retailSalesLine.skipDataMethods(true);
        retailSalesLine.skipEvents(true);
        retailSalesLine.skipDatabaseLog(true);

        update_recordset retailSalesLine
            setting IsPriceLocked = NoYes::No
            exists join salesLine
            where salesLine.RecId == retailSalesLine.SalesLine
                && salesLine.SalesId == _salesTable.SalesId
                && salesLine.SalesStatus != SalesStatus::Invoiced
                && retailSalesLine.FulfillmentStatus != RetailFulfillmentLineStatus::PartiallyInvoiced;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>