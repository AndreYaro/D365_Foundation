<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgDaysTotalWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgDaysTotalWorkflowCancelManager</c> class is used to cancel a total workflow of the day.
/// </summary>
/// <remarks>
///    This class inherits from the <c>WorkflowCancelManager</c> class and handles the update of the total
///    record of the day when the cancel button has been clicked. The days total is set into a pending
///    cancellation status and this is presented to the user immediately. The default dialog and cancel
///    functionality from the <c>WorkflowCancelManager</c> class is reused.
/// </remarks>
public class JmgDaysTotalWorkflowCancelManager extends WorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow status to not submitted on the days total that is canceled.
    /// </summary>
    /// <param name="_args">
    /// An argument that references the record that to be canceled.
    /// </param>
    /// <remarks>
    /// This method rereads the record from the data source because this is changed when submitting a
    /// workflow and these changes may not be refreshed in the client.The workflow state and workflow
    /// status is set to pending cancelation and the record is updated and refreshed in the client.
    /// </remarks>
    public void updateDocument(Args _args)
    {
        JmgStampJournalTable    jmgStampJournalTable;

        if (_args.record() is JmgStampJournalTable)
        {
            jmgStampJournalTable = _args.record() as JmgStampJournalTable;
            jmgStampJournalTable.reread();
        }
        else if (_args.record() is WorkflowTrackingStatusTable)
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = _args.record() as WorkflowTrackingStatusTable;
            workflowTrackingStatusTable.reread();

            if (workflowTrackingStatusTable.ContextTableId == tableNum(JmgStampJournalTable))
            {
                jmgStampJournalTable = JmgStampJournalTable::findRecId(workflowTrackingStatusTable.ContextRecId);
            }
        }

        if (jmgStampJournalTable)
        {
            ttsbegin;
            jmgStampJournalTable.selectForUpdate(true);
            jmgStampJournalTable.WorkflowStatus = JmgDaysTotalWorkflowStatus::NotSubmitted;
            jmgStampJournalTable.update();
            ttscommit;

            FormDataSource jmgStampJournalTable_DS = FormDataUtil::getFormDataSource(jmgStampJournalTable);
            if (jmgStampJournalTable_DS)
            {
                jmgStampJournalTable_DS.research(true);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgDaysTotalWorkflowCancelManager construct()
    {
        return new JmgDaysTotalWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JmgDaysTotalWorkflowCancelManager workflowCancelManager = JmgDaysTotalWorkflowCancelManager::construct();

        workflowCancelManager.run(_args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>