<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdateProcessReceiptTransactionListsCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
final internal class InventUpdateProcessReceiptTransactionListsCache
{
    private List processReceiptTransactionsForTransIssueQtyMovementList;
    private List processReceiptTransactionsForTransIssueQtyParametersList;

    private ListIterator movementListIterator;
    private ListIterator parametersListIterator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasElements</Name>
				<Source><![CDATA[
    private boolean hasElements()
    {
        if (!movementListIterator                                       ||
            !parametersListIterator                                     ||
            !processReceiptTransactionsForTransIssueQtyMovementList     ||
            !processReceiptTransactionsForTransIssueQtyParametersList)
        {
            warning("Unexpected error, please disable toggle InventUpdateDelayProcessReceiptTransactionToggle and try again.\n");
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (movementListIterator.more() && parametersListIterator.more())
        {
            return true;
        }
        
        // Need to reset the list literator because the processed elements are deleted and list iterator points to the end even the new element has been inserted.
        if (!processReceiptTransactionsForTransIssueQtyMovementList.empty() && !processReceiptTransactionsForTransIssueQtyParametersList.empty())
        {
            movementListIterator =  new ListIterator(processReceiptTransactionsForTransIssueQtyMovementList);
            parametersListIterator = new ListIterator(processReceiptTransactionsForTransIssueQtyParametersList);
            return movementListIterator.more() && parametersListIterator.more();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCacheValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void processCacheValue()
    {
        InventUpdateProcessReceiptTransactionListsCache cacheInstance = InventUpdateProcessReceiptTransactionListsCache::getInstanceFromCache();
        if (cacheInstance)
        {
            cacheInstance.processReceiptTransactionsForTransIssueQty();
            cacheInstance.removeCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReceiptTransactionsForTransIssueQty</Name>
				<Source><![CDATA[
    private void processReceiptTransactionsForTransIssueQty()
    {
        // Position of storaged parameters in container
        const int inventDimReceiptOrigPos = 1;
        const int inventDimParmPos = 2;
        const int inventDimReceiptNewPos = 3;
        const int qtyRemainPos = 4;
        const int cwQtyRemainPos = 5;
        const int infologPos = 6;

        if (InventUpdateDelayProcessReceiptTransactionToggle::instance().IsEnabled()
        &&  movementListIterator
        &&  parametersListIterator)
        {
            while (this.hasElements())
            {
                InventMovement movementReceipt = movementListIterator.value() as InventMovement;
                container parametersCon = parametersListIterator.value();

                // Delete the data from the list to avoid duplicated processing
                movementListIterator.delete();
                parametersListIterator.delete();

                InventUpdate::processReceiptTransactionsForTransIssueQtyHelper(movementReceipt,
                        conPeek(parametersCon, inventDimReceiptOrigPos),
                        conPeek(parametersCon, inventDimParmPos),
                        conPeek(parametersCon, inventDimReceiptNewPos),
                        conPeek(parametersCon, qtyRemainPos),
                        conPeek(parametersCon, cwQtyRemainPos),
                        conPeek(parametersCon, infologPos));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void insert(InventMovement _movementReceipt, container _conParameters)
    {
        if (movementListIterator && parametersListIterator)
        {
            movementListIterator.insert(_movementReceipt);
            parametersListIterator.insert(_conParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        processReceiptTransactionsForTransIssueQtyMovementList = new List(Types::Class);
        processReceiptTransactionsForTransIssueQtyParametersList = new List(Types::Container);

        movementListIterator =  new ListIterator(processReceiptTransactionsForTransIssueQtyMovementList);
        parametersListIterator = new ListIterator(processReceiptTransactionsForTransIssueQtyParametersList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstanceFromCache</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventUpdateProcessReceiptTransactionListsCache getInstanceFromCache()
    {
        if (!InventUpdateDelayProcessReceiptTransactionToggle::instance().IsEnabled())
        {
            return null;
        }

        if (appl.ttsLevel() == 0)
        {
            // TTS level should always be greater than zero when this class is used
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        InventUpdateProcessReceiptTransactionListsCache instance;
        SysTransactionScope transactionScope;

        str cacheScope = InventUpdateProcessReceiptTransactionListsCache::getCacheScope();
        str cacheKey = InventUpdateProcessReceiptTransactionListsCache::getCacheKey();

        if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
        {
            instance = SysTransactionScopeCache::get(cacheScope, cacheKey, null);
        }

        return instance;   
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheInstance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void cacheInstance()
    {
        if (InventUpdateDelayProcessReceiptTransactionToggle::instance().IsEnabled())
        {
            if (appl.ttsLevel() == 0)
            {
                // TTS level should always be greater than zero when this class is used
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            InventUpdateProcessReceiptTransactionListsCache instance;
            SysTransactionScope transactionScope;

            str cacheScope = InventUpdateProcessReceiptTransactionListsCache::getCacheScope();
            str cacheKey = InventUpdateProcessReceiptTransactionListsCache::getCacheKey();

            if (SysTransactionScopeCache::isSet(cacheScope, cacheKey))
            {
                instance = SysTransactionScopeCache::get(cacheScope, cacheKey, null);
            }

            if (!instance)
            {
                instance = new InventUpdateProcessReceiptTransactionListsCache();
                instance.init();
          
                // Cache for future use in this transaction scope
                SysTransactionScopeCache::set(cacheScope, cacheKey, instance);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScope</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static str getCacheScope()
    {
        return classStr(InventUpdateProcessReceiptTransactionListsCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static str getCacheKey()
    {
        return strFmt('%1#%2', InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId(), curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCache</Name>
				<Source><![CDATA[
    private void removeCache()
    {
        SysTransactionScopeCache::remove(InventUpdateProcessReceiptTransactionListsCache::getCacheScope(),
                InventUpdateProcessReceiptTransactionListsCache::getCacheKey());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>