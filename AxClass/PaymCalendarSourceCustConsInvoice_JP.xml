<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourceCustConsInvoice_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourceCustConsInvoice_JP</c> class provides an interface used to find
/// payment calendars when the source is the <c>PaymCalendarSourceCustConsInvoice_JP</c> table.
/// </summary>
public class PaymCalendarSourceCustConsInvoice_JP implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress
{
    private CustConsInvoice_JP custConsInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        CustTable custTable;
        CustBankAccount custBankAccount;

        custTable = CustTable::findByCompany(custConsInvoice.dataAreaId, custConsInvoice.CustTable);
        custBankAccount = CustBankAccount::findByCompany(custTable.DataAreaId, custTable.AccountNum, custTable.BankAccount);

        return LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to the third party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        CustTable custTable;

        custTable = CustTable::findByCompany(custConsInvoice.DataAreaId, custConsInvoice.CustTable);

        return custTable.postalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the payment calendar derivation source instance for the specified record.
    /// </summary>
    /// <param name="_custConsInvoice">
    /// A populated <c>CustConsInvoice_JP</c> table buffer that specifies the initialization data.
    /// </param>
    public void initialize(CustConsInvoice_JP _custConsInvoice)
    {
        custConsInvoice = _custConsInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return PaymCalendarModuleType::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return custConsInvoice.getCustInvoiceJourWithSmallestId().salesTable().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return custConsInvoice.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return custConsInvoice.PaymTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceCustConsInvoice_JP</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceCustConsInvoice_JP</c> class.
    /// </returns>
    private static PaymCalendarSourceCustConsInvoice_JP construct()
    {
        return new PaymCalendarSourceCustConsInvoice_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_custConsInvoice">
    /// The customer consolidated invoice table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    /// <remarks>
    /// If no adjustment is needed, the original date is returned. An empty record ID is returned
    /// for the payment calendar and calendar rule whenever a calendar is not found.
    /// </remarks>
    public static PaymCalendarAdjustedDate getAdjustedDueDate(
        DueDate _dueDate,
        PaymentDueDateUpdatePolicy _updatePolicy,
        CustConsInvoice_JP _custConsInvoice)
    {
        return PaymCalendarSourceCustConsInvoice_JP::getAdjustedDueDatePrivate(_dueDate, _updatePolicy, _custConsInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDueDatePrivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the adjusted due date so it falls on a business day per calendar rules.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_custConsInvoice">
    /// The customer consolidated invoice table buffer that specifies the calendar source.
    /// </param>
    /// <returns>
    /// An instance of <c>PaymCalendarAdjustedDate</c> which contains the adjusted due date
    /// together with the calendar and rule that was applied when adjusting the date.
    /// </returns>
    public static PaymCalendarAdjustedDate getAdjustedDueDatePrivate(
        DueDate _dueDate,
        PaymentDueDateUpdatePolicy _updatePolicy,
        CustConsInvoice_JP _custConsInvoice)
    {
        PaymCalendarSourceCustConsInvoice_JP calendarSource;
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarAdjustedDate paymCalendarAdjustedDate;

        paymCalendarProcessor = PaymCalendarProcessor::construct();
        calendarSource = PaymCalendarSourceCustConsInvoice_JP::newCalendarSource(_custConsInvoice);
        paymCalendarAdjustedDate = paymCalendarProcessor.getAdjustedDate(_dueDate, _updatePolicy, calendarSource);

        return paymCalendarAdjustedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceCustConsInvoice_JP</c> class.
    /// </summary>
    /// <param name="_custConsInvoice">
    /// The <c>CustConsInvoice_JP</c> record to load.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceCustConsInvoice_JP</c> class.
    /// </returns>
    public static PaymCalendarSourceCustConsInvoice_JP newCalendarSource(CustConsInvoice_JP _custConsInvoice)
    {
        PaymCalendarSourceCustConsInvoice_JP paymCalendarSourceCustConsInvoice;

        paymCalendarSourceCustConsInvoice = PaymCalendarSourceCustConsInvoice_JP::construct();
        paymCalendarSourceCustConsInvoice.initialize(_custConsInvoice);

        return paymCalendarSourceCustConsInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>