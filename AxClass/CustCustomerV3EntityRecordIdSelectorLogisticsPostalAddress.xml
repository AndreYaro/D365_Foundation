<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCustomerV3EntityRecordIdSelectorLogisticsPostalAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadataAttribute(identifierStr(TableName), tableStr(LogisticsPostalAddress))]
[ExportMetadataAttribute(identifierStr(EntityName), dataentityviewstr(CustCustomerV3Entity))]
[ExportAttribute(identifierstr(Dynamics.AX.Application.IBusinessEventsTableToEntityRecordIdSelector))]
internal final class CustCustomerV3EntityRecordIdSelectorLogisticsPostalAddress implements IBusinessEventsTableToEntityRecordIdSelector
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEntityRecordIdsImpactedByTableChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List getEntityRecordIdsImpactedByTableChange(BusinessEventsDefinition _eventDefinition, BusinessEventsActions _changeType, RecId _changedRecordId)
    {
        // Only process default address changes for types that are mapped and retun null for mappings not known.
        List impactedRecIds = null;

        if (_eventDefinition.DataSourceName == dataEntityDataSourceStr(CustCustomerV3Entity, DirPartyBaseEntity))
        {
            impactedRecIds = new List(Types::Int64);

            CustTable custTable;
            DirPartyTable dirPartyTable;
            LogisticsPostalAddress logisticsPostalAddress;

            while select RecId from custTable
                exists join dirPartyTable
                    where dirPartyTable.RecId == custTable.Party
                exists join logisticsPostalAddress
                    where logisticsPostalAddress.RecId == _changedRecordId
                        && logisticsPostalAddress.Location == dirPartyTable.PrimaryAddressLocation
            {
                impactedRecIds.addEnd(custTable.RecId);
            }
        }
        else
        {
            LogisticsLocationRoleType roleType = LogisticsLocationRoleType::None;

            // This mapping is defined in CustCustomerV3Entity::getEntityDataSourceToFieldMapping.
            // That definition and this mappy need to stay in sync.
            if (_eventDefinition.DataSourceName == identifierStr(DirPartyBaseEntity5))
            {
                roleType = LogisticsLocationRoleType::Invoice;
            }
            else if (_eventDefinition.DataSourceName == identifierStr(DirPartyBaseEntity6))
            {
                roleType = LogisticsLocationRoleType::Delivery;
            }

            if (roleType != LogisticsLocationRoleType::None)
            {
                impactedRecIds = new List(Types::Int64);

                CustTable custTable;
                LogisticsPostalAddress logisticsPostalAddress;
                DirPartyLocation partyLocation;
                DirPartyLocationRole partyLocationRole;
                LogisticsLocationRole locationRole;

                while select RecId from custTable
                    exists join partyLocation
                        where partyLocation.Party == custTable.Party
                    exists join logisticsPostalAddress
                        where logisticsPostalAddress.RecId == _changedRecordId
                            && logisticsPostalAddress.Location == partyLocation.Location
                    exists join partyLocationRole
                        where partyLocationRole.PartyLocation == partyLocation.RecId
                    exists join locationRole
                        where locationRole.RecId == partyLocationRole.LocationRole
                            && locationRole.Type == roleType
                {
                    impactedRecIds.addEnd(custTable.RecId);
                }
            }
        }

        return impactedRecIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>