<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyTableNode_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the hierarchy table node tree for tax report.
/// </summary>
class TaxReportHrchyTableNode_IN extends TaxReportHrchyNode_IN
{
    //Fields for TableNode
    RefTableId          refTableId;
    RefFieldId          refFieldId;
    refRecId            refTableRecId;

    #LOCALMACRO.CurrentList
        refTableId,
        refFieldId,
        refTableRecId
    ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeTypeLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table label of the node.
    /// </summary>
    /// <returns>
    /// The label for node type.
    /// </returns>
    public str getNodeTypeLabel()
    {
        return new DictTable(refTableId).label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();

        this.parmNodeType(TaxReportHierarchyNodeType_IN::TableNode);
        this.parmClassId(classNum(TaxReportHrchyTableNode_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefFieldId</Name>
				<Source><![CDATA[
        public RefFieldId parmRefFieldId(RefFieldId _refFieldId = 0)
    {
        if (refFieldId == 0 && _refFieldId != 0)
        {
            refFieldId = _refFieldId;
        }
        return refFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
        public RefTableId parmRefTableId(RefTableId _refTableId = 0)
    {
        if (refTableId == 0 && _refTableId != 0)
        {
            refTableId = _refTableId;
        }
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableRecId</Name>
				<Source><![CDATA[
        public RefRecId parmRefTableRecId(RefRecId _refTableRecId = 0)
    {
        Common record;
        if (refTableRecId == 0 && _refTableRecId != 0)
        {
            refTableRecId = _refTableRecId;
        }

        if (_refTableRecId != 0)
        {
            //Need to set DisplayValue and fake comboDisplayValue
            record = TaxReportHierarchyHelper_IN::findNodeValueReferenceTableRecord(refTableId, refTableRecId);
            if (record)
            {
                // record will be NA if the related table record is deleted, e.g. a deleted tax component
                this.parmDisplayValue(record.getFieldValue(new DictField(refTableId, refFieldId).name()));
                this.parmComboDisplayValue(int642str(_refTableRecId));
            }
        }

        return refTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persist</Name>
				<Source><![CDATA[
        public void persist()
    {
        TaxReportHierarchyNode_IN  tableNode;

        super();

        tableNode = TaxReportHierarchyNode_IN::find(this.parmRecId(), true);
        if (tableNode.RecId)
        {
            ttsBegin;

            tableNode.RefTableId = refTableId;
            tableNode.RefFieldId = refFieldId;
            tableNode.RefTableRecId = refTableRecId;
            tableNode.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static TaxReportHrchyTableNode_IN construct()
    {
        TaxReportHrchyTableNode_IN reportHierarchyNode = new TaxReportHrchyTableNode_IN();
        return reportHierarchyNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromBaseNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new <c>TaxReportHrchyTableNode_IN</c> from the <c>TaxReportHrchyNode_IN</c> instance.
    /// </summary>
    /// <param name="_baseNode">
    /// The <c>TaxReportHrchyNode_IN</c> instance.
    /// </param>
    /// <returns>
    /// The new <c>TaxReportHrchyTableNode_IN</c>.
    /// </returns>
    public static TaxReportHrchyTableNode_IN constructFromBaseNode(TaxReportHrchyNode_IN _baseNode)
    {
        TaxReportHrchyTableNode_IN tableNode = new TaxReportHrchyTableNode_IN();
        tableNode.parmNodeId(_baseNode.parmNodeId());
        tableNode.parmCanMatch(_baseNode.parmCanMatch());
        tableNode.parmCanSettle(_baseNode.parmCanSettle());
        tableNode.parmCanPost(_baseNode.parmCanPost());
        tableNode.parmNodeType(_baseNode.parmNodeType());
        tableNode.parmParentId(_baseNode.parmParentId());
        tableNode.parmClassId(_baseNode.parmClassId());
        tableNode.parmDisplayValue(_baseNode.parmDisplayValue());
        tableNode.parmComboDisplayValue(_baseNode.parmComboDisplayValue());
        tableNode.parmComboDisplayValueStr(_baseNode.parmComboDisplayValueStr());
        tableNode.parmLevel(_baseNode.parmLevel());
        tableNode.parmLeftId(_baseNode.parmLeftId());
        tableNode.parmRightId(_baseNode.parmRightId());
        tableNode.parmTaxReportHierarchyVersion(_baseNode.parmTaxReportHierarchyVersion());
        tableNode.parmRecId(_baseNode.parmRecId());

        return tableNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>