<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingCacheTableEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handlers for table events.
/// </summary>
internal class RetailPricingCacheTableEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>handleRetailPeriodicDiscountLineWriteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles caching behavior when <c>RetailPeriodicDiscountLine</c> is written.
    /// </summary>
    /// <param name = "sender">Table buffer which triggers the event.</param>
    /// <param name = "e">Data arguments.</param>
    [DataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Inserted),
        DataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Deleting),
        DataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Updating)]
    public static void handleRetailPeriodicDiscountLineWriteEvent(Common sender, DataEventArgs e)
    {
        RetailPeriodicDiscountLine discountLine = sender;
        RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(discountLine.OfferId);
        RetailPricingCacheManager::clearCategoryLineCacheForPeriodicDiscount(discount.RecId);
        RetailPricingCacheForDataManager::clearCache();
        RetailPricingCacheForLookupDataManager::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRetailPeriodicDiscountDeleteEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles caching behavior when <c>RetailPeriodicDiscount</c> is deleted.
    /// </summary>
    /// <param name = "sender">Table buffer which triggers the event.</param>
    /// <param name = "e">Data arguments.</param>
    [DataEventHandler(tableStr(RetailPeriodicDiscount), DataEventType::Deleting)]
    public static void handleRetailPeriodicDiscountDeleteEvent(Common sender, DataEventArgs e)
    {
        RetailPricingCacheManager::clearCategoryLineCacheForPeriodicDiscount(sender.RecId);
        RetailPricingCacheManager::clearDiscountCache();
        RetailPricingCacheForDataManager::clearCache();
        RetailPricingCacheForLookupDataManager::clearCache();

    }

]]></Source>
			</Method>
			<Method>
				<Name>Post_RetailPeriodicDiscount_modifiedField</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(RetailPeriodicDiscount), tableMethodStr(RetailPeriodicDiscount, modifiedField))]
    public static void Post_RetailPeriodicDiscount_modifiedField(XppPrePostArgs _args)
    {
        FieldId _fieldId = _args.getArg('_fieldId');

        switch (_fieldId)
        {
            case fieldNum(RetailPeriodicDiscount, Status):
                RetailPricingCacheManager::clearDiscountCache();
                RetailPricingCacheForDataManager::clearCache();
                RetailPricingCacheForLookupDataManager::clearCache();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Post_RetailPeriodicDiscount_update</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(RetailPeriodicDiscount), tableMethodStr(RetailPeriodicDiscount, validateWrite))]
    public static void Post_RetailPeriodicDiscount_update(XppPrePostArgs _args)
    {
        boolean validated = _args.getReturnValue();

        if (validated)
        {
            RetailPricingCacheManager::clearDiscountCache();
            RetailPricingCacheForDataManager::clearCache();
            RetailPricingCacheForLookupDataManager::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateTaxIntervalCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the tax interval cache when the underlying tables have a record inserted, updated, or deleted.
    /// Tax data changes infrequently so we will not take a large performance hit.
    /// </summary>
    /// <param name="args">The event handler arguments</param>
    [PostHandlerFor(tableStr(TaxGroupData), tableMethodStr(TaxGroupData, insert)), PostHandlerFor(tableStr(TaxGroupData), tableMethodStr(TaxGroupData, update)), PostHandlerFor(tableStr(TaxGroupData), tableMethodStr(TaxGroupData, delete)),
    PostHandlerFor(tableStr(TaxOnItem), tableMethodStr(TaxOnItem, insert)), PostHandlerFor(tableStr(TaxOnItem), tableMethodStr(TaxOnItem, update)), PostHandlerFor(tableStr(TaxOnItem), tableMethodStr(TaxOnItem, delete)),
    PostHandlerFor(tableStr(TaxTable), tableMethodStr(TaxTable, insert)), PostHandlerFor(tableStr(TaxTable), tableMethodStr(TaxTable, update)), PostHandlerFor(tableStr(TaxTable), tableMethodStr(TaxTable, delete)),
    PostHandlerFor(tableStr(TaxData), tableMethodStr(TaxData, insert)), PostHandlerFor(tableStr(TaxData), tableMethodStr(TaxData, update)), PostHandlerFor(tableStr(TaxData), tableMethodStr(TaxData, delete))]
    public static void invalidateTaxIntervalCache(XppPrePostArgs args)
    {
        RetailPricingCacheManager::clearTaxIntervalCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Post_EcoResProductCategory_Write</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(EcoResProductCategory), DataEventType::Inserted),
     DataEventHandler(tableStr(EcoResProductCategory), DataEventType::Updated),
     DataEventHandler(tableStr(EcoResProductCategory), DataEventType::Deleted)]
    public static void Post_EcoResProductCategory_Write(Common _record, DataEventArgs _args)
    {
        RetailPricingCacheManager::clearCategoriesCache();
        RetailPricingCacheForDataManager::clearCache();
        RetailPricingCacheForLookupDataManager::clearCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>