<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettlementClosedDateUpgradeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustSettlementClosedDateUpgradeService implements CustVendSettlementIClosedUpgradeService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static CustSettlementClosedDateUpgradeService construct()
    {
        return new CustSettlementClosedDateUpgradeService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleCustVend getModule()
    {
        return ModuleCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransFilterTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateCustVendTransFilterTable(TmpDataAreaRecIdFilter _custVendTransFilter, date _minDate)
    {
        DataAreaId currentCompany = curExt();
        TableId custTransTableId = tableNum(CustTrans);
        CustTrans custTrans;

        insert_recordset _custVendTransFilter (RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, custTransTableId, RecId
                from custTrans
                    where custTrans.Closed >= _minDate
                        && custTrans.AmountMST > 0.00
                        && (custTrans.TransType == LedgerTransType::Sales
                            || custTrans.TransType == LedgerTransType::CollectionLetter
                            || custTrans.TransType == LedgerTransType::Payment
                            || custTrans.TransType == LedgerTransType::Cust
                            || custTrans.TransType == LedgerTransType::GeneralJournal
                            || custTrans.TransType == LedgerTransType::Project
                            || custTrans.TransType == LedgerTransType::CollectionLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendSettlementFilterTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateCustVendSettlementFilterTable(TmpDataAreaRecIdFilter _settlementFilter,
        date _minDate,
        RefRecId _minCustVendTransRecId,
        RefRecId _maxCustVendTransRecid)
    {
        DataAreaId currentCompany = curExt();

        TableId custTransTableId = tableNum(CustTrans);
        CustTrans custTrans;

        TmpDataAreaRecIdFilter custTransFilter;
        insert_recordset custTransFilter (RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, custTransTableId, RecId
                from custTrans
                    where custTrans.Closed >= _minDate
                        && custTrans.AmountMST > 0.00
                        && custTrans.RecId >= _minCustVendTransRecId
                        && custTrans.RecId <= _maxCustVendTransRecid
                        && (custTrans.TransType == LedgerTransType::Sales
                            || custTrans.TransType == LedgerTransType::CollectionLetter
                            || custTrans.TransType == LedgerTransType::Payment
                            || custTrans.TransType == LedgerTransType::Cust
                            || custTrans.TransType == LedgerTransType::GeneralJournal
                            || custTrans.TransType == LedgerTransType::Project
                            || custTrans.TransType == LedgerTransType::CollectionLetter);

        TableId custSettlementTableId = tableNum(CustSettlement);
        CustSettlement custSettlement;
        insert_recordset _settlementFilter(RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, custSettlementTableId, maxof(Recid)
                from custSettlement
                    group by custSettlement.TransRecId
                exists join custTransFilter
                    where custTransFilter.RefRecId == custSettlement.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlementClosedDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateSettlementClosedDate(TmpDataAreaRecIdFilter _settlementFilter)
    {
        CustTrans custTrans;
        CustSettlement custSettlement;

        custSettlement.skipAosValidation(true);
        custSettlement.skipBusinessEvents(true);
        custSettlement.skipDatabaseLog(true);
        custSettlement.skipDataMethods(true);
        custSettlement.skipEvents(true);

        // TransOpen needs a RecId value, but at this point the CustTransOpen record has already been deleted.
        // We use the CustSettlement.RecId as a unique identifier for the upgraded settlement data.
        // We could use a single value (e.g. 1) for TransOpen, but that would cause over-counting of amounts for invoices that had been
        // settled more than once (e.g. partially settled for amounts less than the total amount) in the CustSettlementSumByOpenTransView.
        update_recordset custSettlement
            setting ClosedDate = custTrans.Closed,
                TransType = custTrans.TransType,
                TransOpen = custSettlement.RecId
            join _settlementFilter
                where _settlementFilter.RefRecId == custSettlement.RecId
                    && custSettlement.ClosedDate == dateNull()
            join custTrans
                where custTrans.RecId == custSettlement.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUpgrade</Name>
				<Source><![CDATA[
    public NoYes allowUpgrade()
    {
        return PayPredActivation::isActive() || CashflowInsightsActivation::isActive();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>