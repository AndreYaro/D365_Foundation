<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountBalSheetByDimDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerAccountBalSheetByDimDP_CN</c> class is the base report data provider class for the
/// account balance sheet by dimensions report.
/// </summary>
class LedgerAccountBalSheetByDimDP_CN
{
    //Tmp table
    CustVendLedgerBalanceTmp_CN ledgerBalanceTmp;
    container dimensionAttributeNameCon;

    //Report parameters
    FromDate        fromDate;
    ToDate          toDate;
    MainAccountNum  fromAccount;
    MainAccountNum  toAccount;
    CurrentOperationsTax postingLayer;

    Map         openingBalanceMap;
    Map         periodBalanceMap;
    Map         ledgerDimensionMap;
    set         keySet;

    private const int DebitAmountPosition = 1;
    private const int CreditAmountPosition = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertLedgerBalanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertLedgerBalanceTmp()
    {
        Amount              amountDebitLocal;
        Amount              amountCreditLocal;
        Amount              beginningBalanceAmountLocal;
        Amount              endingBalanceAmountLocal;
        SetEnumerator       setEnumerator = keySet.getEnumerator();
        container           keyContainerLocal;

        while (setEnumerator.moveNext())
        {
            amountDebitLocal            = 0;
            amountCreditLocal           = 0;
            BeginningBalanceAmountLocal = 0;
            endingBalanceAmountLocal    = 0;

            keyContainerLocal = setEnumerator.current();
            ledgerBalanceTmp.LedgerDimension = ledgerDimensionMap.lookup(keyContainerLocal);

            if (openingBalanceMap.exists(keyContainerLocal))
            {
                BeginningBalanceAmountLocal     = openingBalanceMap.lookup(keyContainerLocal);
            }

            if (periodBalanceMap.exists(keyContainerLocal))
            {
                [amountDebitLocal, amountCreditLocal] = periodBalanceMap.lookup(keyContainerLocal);
            }

            endingBalanceAmountLocal = BeginningBalanceAmountLocal + amountDebitLocal + amountCreditLocal;

            ledgerBalanceTmp.BeginBalance   = BeginningBalanceAmountLocal;
            ledgerBalanceTmp.DebitAmount    = amountDebitLocal;
            ledgerBalanceTmp.CreditAmount   = -amountCreditLocal;
            ledgerBalanceTmp.EndBalance     = endingBalanceAmountLocal;
            ledgerBalanceTmp.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTmpTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data for the temporary table.
    /// </summary>
    /// <param name="isBeginning">
    /// A Boolean value that indicates whether the data is a beginning balance.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void prepareTmpTableData(boolean isBeginning)
    {
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        MainAccount                             mainAccount;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        Amount                                  amountInDebit;
        Amount                                  amountInCredit;
        Amount                                  amountInDebitOfOthers;
        Amount                                  amountInCreditOfOthers;
        container                               keyContainerLocal;
        container                               periodAmountContainerLocal;
        RecId                                   currentChartofAccountRecId;

        currentChartofAccountRecId  = LedgerChartOfAccounts::current();

        while select AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
            order by generalJournalAccountEntry.LedgerDimension, generalJournalAccountEntry.IsCredit
        join dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
        exists join generalJournalEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && generalJournalEntry.PostingLayer == postingLayer
                && generalJournalEntry.Ledger == Ledger::current()
                && ((isBeginning == true && generalJournalEntry.AccountingDate < fromDate)
                    || (isBeginning == false && generalJournalEntry.AccountingDate >= fromDate && generalJournalEntry.AccountingDate <= toDate))
        exists join mainAccount
            where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
                && mainAccount.MainAccountId >= fromAccount
                && mainAccount.MainAccountId <= toAccount
                && mainAccount.LedgerChartOfAccounts == currentChartofAccountRecId
        {
            keyContainerLocal = conNull();
            for (int i = 1; i <= conLen(dimensionAttributeNameCon); i++)
            {
                Name dimensionAttributeName = conPeek(dimensionAttributeNameCon, i);
                FieldId dimensionValueFieldId = DimensionAttributeValueCombination::getDimensionValueFieldId(dimensionAttributeName);
                keyContainerLocal += dimensionAttributeValueCombination.(dimensionValueFieldId);
            }

            if (isBeginning)
            {
                if (openingBalanceMap.exists(keyContainerLocal))
                {
                    openingBalanceMap.insert(
                        keyContainerLocal,
                        openingBalanceMap.lookup(keyContainerLocal) + generalJournalAccountEntry.AccountingCurrencyAmount);
                }
                else
                {
                    openingBalanceMap.insert(keyContainerLocal, generalJournalAccountEntry.AccountingCurrencyAmount);
                }
            }
            else
            {
                periodAmountContainerLocal = [0, 0];
                if (periodBalanceMap.exists(keyContainerLocal))
                {
                    periodAmountContainerLocal = periodBalanceMap.lookup(keyContainerLocal);
                    if (generalJournalAccountEntry.IsCredit)
                    {
                        amountInCredit = conPeek(periodAmountContainerLocal, CreditAmountPosition) + generalJournalAccountEntry.AccountingCurrencyAmount;
                        periodAmountContainerLocal = conPoke(periodAmountContainerLocal, CreditAmountPosition, amountInCredit);
                    }
                    else
                    {
                        amountInDebit = conPeek(periodAmountContainerLocal, DebitAmountPosition) + generalJournalAccountEntry.AccountingCurrencyAmount;
                        periodAmountContainerLocal = conPoke(periodAmountContainerLocal, DebitAmountPosition, amountInDebit);
                    }
                    periodBalanceMap.insert(keyContainerLocal, periodAmountContainerLocal);
                }
                else
                {
                    //if does not exist, then insert the map
                    if (generalJournalAccountEntry.IsCredit)
                    {
                        amountInCredit = generalJournalAccountEntry.AccountingCurrencyAmount;
                        periodAmountContainerLocal = conPoke(periodAmountContainerLocal, CreditAmountPosition, amountInCredit);
                    }
                    else
                    {
                        amountInDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
                        periodAmountContainerLocal = conPoke(periodAmountContainerLocal, DebitAmountPosition, amountInDebit);
                    }
                    periodBalanceMap.insert(keyContainerLocal, periodAmountContainerLocal);
                }
            }

            if (!keySet.in(keyContainerLocal))
            {
                keySet.add(keyContainerLocal);
                ledgerDimensionMap.insert(keyContainerLocal, dimensionAttributeValueCombination.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <param name = "_contract">
    /// The instance of <c>LedgerAccountBalSheetByDimContract_CN</c> .
    /// </param>
    /// <param name = "_finDimDataContract">
    /// The instance of <c>ERFinDimensionsRunDataContract</c> .
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendLedgerBalanceTmp_CN prepareData(LedgerAccountBalSheetByDimContract_CN _contract, ERFinDimensionsRunDataContract _finDimDataContract = null)
    {
        fromDate        = _contract.parmFromDate();
        toDate          = _contract.parmToDate();
        fromAccount     = _contract.parmFromAccount();
        toAccount       = _contract.parmToAccount();
        postingLayer    = _contract.parmPostingLayer();

        if (!fromAccount)
        {
            fromAccount = this.setMainAccountNum(true);
        }

        if (!toAccount)
        {
            toAccount = this.setMainAccountNum(false);
        }

        // Get dimesion attributes from the dimension set
        if (_finDimDataContract)
        {
            ERFinancialDimensionsHelper eRFinancialDimensionsHelper = ERFinancialDimensionsHelper::construct();
            List dimensionAttributeNameList = eRFinancialDimensionsHelper.getValidDimensionSequenceFromFinDimDetailsRunContract(_finDimDataContract);
            if (dimensionAttributeNameList)
            {
                ListEnumerator enumerator = dimensionAttributeNameList.getEnumerator();
                while (enumerator.moveNext())
                {
                    dimensionAttributeNameCon += enumerator.current();
                }
            }
        }

        openingBalanceMap   = new Map(Types::Container, Types::Real);
        periodBalanceMap    = new Map(Types::Container, Types::Container);
        ledgerDimensionMap  = new Map(Types::Container, Types::Int64);
        keySet              = new Set(Types::Container);

        //Calculate beginning balance
        this.prepareTmpTableData(true);

        //Calculate period balance
        this.prepareTmpTableData(false);

        //Insert data to tmp table
        this.insertLedgerBalanceTmp();

        select firstOnly recId from ledgerBalanceTmp;
        if (ledgerBalanceTmp.RecId == 0)
        {
            ledgerBalanceTmp.clear();
            ledgerBalanceTmp.insert();
        }

        return ledgerBalanceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the from account or the to account values if they are empty.
    /// </summary>
    /// <param name="isFromAccount">
    /// A Boolean value that indicates whether the account is a from account.
    /// </param>
    /// <returns>
    /// The main account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MainAccountNum setMainAccountNum(boolean isFromAccount)
    {
        MainAccount mainAccount;

        if (isFromAccount)
        {
            select minOf(MainAccountId) from mainAccount
                where mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts();
        }
        else
        {
            select maxOf(MainAccountId) from mainAccount
                where mainAccount.LedgerChartOfAccounts == Ledger::chartOfAccounts();
        }

        return mainAccount.MainAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets from account for this report.
    /// </summary>
    /// <returns>From account.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MainAccountNum getFromAccount()
    {
        return fromAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets to account for this report.
    /// </summary>
    /// <returns>To account.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MainAccountNum getToAccount()
    {
        return toAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>