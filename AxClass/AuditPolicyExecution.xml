<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>AuditPolicyExecution</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
///    The <c>AuditPolicyExecution</c> class provides a dialog to execute audit rules.
/// </summary>
class AuditPolicyExecution extends RunBaseBatch implements BatchRetryable
{
    AuditPolicyBatchTaskBundle          auditPolicyBatchTaskBundle;
    boolean                             testMode;
    DialogField                         dialogAuditPolicyName;
    DialogField                         dialogBatchBundleSize;
    Integer                             batchBundleSize;
    List                                assembledBatchTaskBundleList;
    RefRecId                            numberSeqTableRecId;
    RefRecId                            policyLegalEntityId;
    SysPolicy                           currentSysPolicy;
    SysPolicy                           sysPolicy;
    SysPolicyName                       auditPolicyName;
    SysPolicySourceDocumentRule         sdRuleTest;
    SysPolicySourceDocumentRuleType     sdRuleType;
    utcdatetime                         documentSelectionFromDate;
    utcdatetime                         documentSelectionToDate;
    utcdatetime                         executionTime;

    private const int CurrentVersion = 4;

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>buildRuleTypeSelectQuery</Name>
        <Source><![CDATA[
    private Query buildRuleTypeSelectQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        query = new Query();
        query.addDataSource(tableNum(SysPolicyTypeSourceDocumentQuery));

        qbds = query.dataSourceTable(tableNum(SysPolicyTypeSourceDocumentQuery));
        if (qbds)
        {
            qbds.addSelectionField(fieldNum(SysPolicyTypeSourceDocumentQuery, RecId));
            qbds.addSelectionField(fieldNum(SysPolicyTypeSourceDocumentQuery, PolicyType));
            qbds.addSelectionField(fieldNum(SysPolicyTypeSourceDocumentQuery, SourceRelationType));
            qbds.addRange(fieldNum(SysPolicyTypeSourceDocumentQuery, PolicyType)).value(queryValue(sysPolicy.PolicyType));
            qbds.addDataSource(tableNum(SysPolicySourceDocumentRuleType));

            qbds = query.dataSourceTable(tableNum(SysPolicySourceDocumentRuleType));
            if (qbds)
            {
                qbds.addSelectionField(fieldNum(SysPolicySourceDocumentRuleType, PolicyTypeSourceDocumentQuery));
                qbds.addSelectionField(fieldNum(SysPolicySourceDocumentRuleType, LegalEntityAttribute));
                qbds.addSelectionField(fieldNum(SysPolicySourceDocumentRuleType, DateAttribute));
                qbds.addSelectionField(fieldNum(SysPolicySourceDocumentRuleType, RecId));
                qbds.addSelectionField(fieldNum(SysPolicySourceDocumentRuleType, QueryClassification));
                if (testMode)
                {
                    qbds.addRange(fieldNum(SysPolicySourceDocumentRuleType, RecId)).value(queryValue(sdRuleTest.PolicyRuleType));
                }
                qbds.relations(true);
            }
        }

        return query;
    }

]]></Source>
      </Method>
      <Method>
        <Name>canGoBatch</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Determines whether the job can be executed in batch.
    /// </summary>
    /// <returns>
    ///    true if the job can be executed in batch; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createTask</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the task for the <c>AuditPolicyExecutionTask</c> class.
    /// </summary>
    /// <param name="_ruleRecordID">
    /// The record ID of the policy rule.
    /// </param>
    /// <param name="_docmentID">
    /// The record ID of the legal document.
    /// </param>
    /// <param name="_instanceID">
    /// The instance ID of current job execution.
    /// </param>
    /// <param name="_organizations">
    /// A collection that contains the list of Legal entities; optional.
    /// </param>
    private void createTask(RefRecId _ruleRecordID, RefRecId _docmentID, RefRecId _instanceID, Array _organizations = null)
    {
        AuditPolicyExecutionTask auditPolicyExecutionTask;

        //creating new task
        auditPolicyExecutionTask = AuditPolicyExecutionTask::construct(_ruleRecordID, _docmentID, _instanceID);
        auditPolicyExecutionTask.parmCurrentBatch(this.parmCurrentBatch());
        auditPolicyExecutionTask.parmExecutionTime(this.parmExecutionTime());
        auditPolicyExecutionTask.setDocumentSelectionFromDate(documentSelectionFromDate);
        auditPolicyExecutionTask.setDocumentSelectionToDate(documentSelectionToDate);

        switch (sdRuleType.QueryClassification)
        {
            case QueryClassification::Aggregate:
            case QueryClassification::Duplicate:
            case QueryClassification::Sampling:
                auditPolicyExecutionTask.setLegalEntityList(_organizations);
                break;
        }

        if (testMode)
        {
            auditPolicyExecutionTask.setTestMode();
            auditPolicyExecutionTask.setTestSourceDocumentRule(sdRuleTest);
            auditPolicyExecutionTask.setTestSourceDocumentRuleType(sdRuleType);
            auditPolicyExecutionTask.runOperation();
        }
        else if (this.parmCurrentBatch().BatchJobId == 0)
        {
            auditPolicyExecutionTask.runOperation();
        }
        else
        {
            //checking the current status of bundle capacity.
            if (auditPolicyBatchTaskBundle.isFull())
            {
                // Inserting filled bundle at the end of the list.
                assembledBatchTaskBundleList.addEnd(auditPolicyBatchTaskBundle);
                // creating new bundle
                auditPolicyBatchTaskBundle = AuditPolicyBatchTaskBundle::construct(batchBundleSize);
            }
            //adding the task to the bundle
            auditPolicyBatchTaskBundle.addTask(auditPolicyExecutionTask);
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates the user interface of the <c>AuditPolicyExecution</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the dialog box to display.
    /// </returns>
    Object dialog()
    {
        DialogRunbase       dialogRunbase;
        DialogGroup         dialogGroupBatchBundleSize;

        dialogRunbase = super();

        dialogRunbase.caption("@SYS323738");
        dialogAuditPolicyName = dialogRunbase.addFieldValue(extendedTypeStr(Description), auditPolicyName, "@SYS316915",    "@SYS322730");
        dialogAuditPolicyName.enabled(false);

        dialogGroupBatchBundleSize = dialogRunbase.addGroup("@SYS322731");
        dialogBatchBundleSize = dialogRunbase.addFieldValue(extendedTypeStr(Integer), batchBundleSize, "@SYS322729",    "@SYS322732");
        // saving the execution date time of current batch execution.
        this.parmExecutionTime(DateTimeUtil::utcNow());

        return dialogRunbase;
    }

]]></Source>
      </Method>
      <Method>
        <Name>getFromDialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Transfers values from dialog fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    /// true if super(), otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        auditPolicyName = dialogAuditPolicyName.value();
        batchBundleSize = dialogBatchBundleSize.value();
        this.batchInfo().parmBatchExecute(true);

        return ret;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initDocumentIDList</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates an array that contains root entity records.
    /// </summary>
    /// <param name="_sourceTableId">
    ///    The table ID of the table that contains the source document information.
    /// </param>
    /// <param name="_sdRuleType">
    ///    A buffer of the <c>SysPolicySourceDocumentRuleType</c> table that contains the policy rule
    ///    information.
    /// </param>
    /// <param name="_arrOrganization">
    ///    A collection that contains the list of legal entities.
    /// </param>
    /// <param name="_fromdate">
    ///    The from date of the document selection.
    /// </param>
    /// <param name="_todate">
    ///    The to date of the document selection.
    /// </param>
    /// <returns>
    ///    An array that contains the root entity records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Array initDocumentIDList(RefTableId                      _sourceTableId,
                                    SysPolicySourceDocumentRuleType _sdRuleType,
                                    Array                           _arrOrganization,
                                    utcdatetime                     _fromdate,
                                    utcdatetime                     _todate)
    {
        Array                            documentIdList = new Array(Types::Int64);
        Common                           rootEntityTable;
        Query                            query;
        QueryRun                         queryRun;
        QueryBuildDataSource             qbds;
        int                              indexValue = 1;

        query = new Query();
        qbds = query.addDataSource(_sourceTableId);

        AuditPolicyExecution::addDateAndLegalEntityRange(query,
                                                         _arrOrganization,
                                                         _fromdate,
                                                         _todate,
                                                         _sourceTableId,
                                                         _sdRuleType);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            rootEntityTable = queryRun.getNo(1);
            // store the document IDs in an array
            documentIdList.value(indexValue, rootEntityTable.RecId);
            indexValue++;
        }

        return documentIdList;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initDocumentSelectionFromDate</Name>
        <Source><![CDATA[
    /// <summary>
    /// Sets the document selection from date for the violation record.
    /// </summary>
    /// <param name="_auditPolicyAdditionalOption">
    /// An object of the <c>AuditPolicyAdditionalOption</c> table that contains the from and to dates.
    /// </param>
    /// <returns>
    /// The from date of document selection.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The from date is later than the current system date.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected utcdatetime initDocumentSelectionFromDate(AuditPolicyAdditionalOption _auditPolicyAdditionalOption)
    {
        if ( _auditPolicyAdditionalOption.DocumentSelectionFromDate > this.parmExecutionTime())
        {
            throw error(strFmt("@SYS319399", sysPolicy.Name));
        }
        else
        {
            documentSelectionFromDate = _auditPolicyAdditionalOption.DocumentSelectionFromDate;
            return _auditPolicyAdditionalOption.DocumentSelectionFromDate;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>initDocumentSelectionToDate</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Sets the document selection to date for the violation record.
    /// </summary>
    /// <param name="_auditPolicyAdditionalOption">
    ///    An object of the <c>AuditPolicyAdditionalOption</c> table that contains the from and to dates.
    /// </param>
    /// <returns>
    ///    The to date of document selection.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected utcdatetime initDocumentSelectionToDate(AuditPolicyAdditionalOption _auditPolicyAdditionalOption)
    {
        documentSelectionToDate = this.parmExecutionTime();

        if (_auditPolicyAdditionalOption.DocumentSelectionToDate &&
            _auditPolicyAdditionalOption.DocumentSelectionToDate < this.parmExecutionTime())
        {
            documentSelectionToDate = _auditPolicyAdditionalOption.DocumentSelectionToDate;
        }

        return documentSelectionToDate;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initParmDefault</Name>
        <Source><![CDATA[
    /// <summary>
    /// Initializes the class variables by using the default value.
    /// </summary>
    public void initParmDefault()
    {
        super();
        batchBundleSize = 1000;
    }

]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    public container pack()
    {
        //find the current policy name because it is replaced by last packed value;
        sysPolicy = currentSysPolicy;

        return [CurrentVersion, batchBundleSize, sysPolicy, testMode, buf2Con(sdRuleTest), documentSelectionFromDate, documentSelectionToDate, buf2Con(this.parmCurrentBatch())];
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmExecutionTime</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected utcdatetime parmExecutionTime(utcdatetime _executionTime = executionTime)
    {
        executionTime = _executionTime;
        return executionTime;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Executes the audit policy.
    /// </summary>
    public void run()
    {
        Array                               organizations        = new Array(Types::String);
        Array                               documentIdList       = new Array(Types::Int64);
        boolean                             isActivePolicyFound;
        int                                 currentRecordNumber=0;
        int                                 loop = 0;
        int                                 policyRuleLoop = 0;
        int64                               documentId;
        Integer                             rulecount = 0;
        Query                               ruleTypeQuery;
        QueryRun                            ruleTypeQueryRun;
        RefRecId                            orgID[];
        RefRecId                            ruleRecordID;
        SysPolicyTypeSourceDocumentQuery    sdQuery;
        utcdatetime                         minDateValue = DateTimeUtil::minValue();
        utcdatetime                         maxDateValue = DateTimeUtil::maxValue();
        int documentCount;

        assembledBatchTaskBundleList = new List(Types::Class);
        auditPolicyBatchTaskBundle = AuditPolicyBatchTaskBundle::construct(batchBundleSize);

        if (testMode)
        {
            this.parmExecutionTime(minDateValue);
        }
        else
        {
            this.parmExecutionTime(DateTimeUtil::utcNow());
        }

        // Init Number Sequence for a unique instance ID to be stored on each violation record.
        // Groups of records that violate the same rule will have the same instance ID.
        // Aggregates and Duplicates fall into that category.
        numberSeqTableRecId = AuditPolicyExecution::createNumberSeq(this.parmCurrentBatch().BatchJobId);

        sysPolicy = SysPolicy::find(sysPolicy.RecId);

        // Set the document selection date range
        if (!testMode)
        {
            AuditPolicyAdditionalOption auditPolicyAdditionalOption;

            select auditPolicyAdditionalOption
                where  auditPolicyAdditionalOption.Policy == sysPolicy.RecId;

            this.initDocumentSelectionToDate(auditPolicyAdditionalOption);

            try
            {
                this.initDocumentSelectionFromDate(auditPolicyAdditionalOption);
            }
            catch (Exception::Error)
            {
                return;
            }
        }

        ruleTypeQuery = this.buildRuleTypeSelectQuery();
        // Loop over each rule type for a given policy type
        if (ruleTypeQuery && ruleTypeQuery.dataSourceCount() == 2)
        {
            ruleTypeQueryRun = new QueryRun(ruleTypeQuery);
            if (ruleTypeQueryRun)
            {
                while (ruleTypeQueryRun.next())
                {
                    sdRuleType = ruleTypeQueryRun.get(tableNum(SysPolicySourceDocumentRuleType));
                    sdQuery    = ruleTypeQueryRun.get(tableNum(SysPolicyTypeSourceDocumentQuery));

                    //  If in testMode, use the rule recid passed in to the class; if not, get a list of active rules for document selection time period
                    if (testMode)
                    {
                        ruleRecordID = sdRuleTest.RecId;
                    }
                    else
                    {
                        ruleRecordID = AuditPolicyExecution::getActiveRuleForPolicy(sysPolicy.RecId, sdRuleType.RecId, documentSelectionToDate);
                    }

                    // Skip Keyword and List rule types if they do not have corresponding data in
                    // AuditPolicyListKeyword and AuditPolicyListParty
                    if ((sdRuleType.QueryClassification == QueryClassification::KeywordSearch &&
                         !AuditPolicyListKeyword::existsForPolicyRule(ruleRecordID)) ||
                        (sdRuleType.QueryClassification == QueryClassification::ListSearch &&
                         !AuditPolicyListParty::existsForPolicyRule(ruleRecordID)))
                    {
                        continue;
                    }

                    //find the organization list associate with the current policy rule type.
                    organizations = SysPolicies::getAssociatedOrganizationList(sysPolicy.RecId, sdRuleType.RecId, documentSelectionToDate, testMode);

                    if (organizations.lastIndex() > 0)
                    {
                        // saving the LE id of policy LE.
                        policyLegalEntityId = organizations.value(1);

                        //get the list of documents that are candidates for audit for the current policy rule type.
                        if (sdRuleType.QueryClassification == QueryClassification::Conditional ||
                            sdRuleType.QueryClassification == QueryClassification::KeywordSearch ||
                            sdRuleType.QueryClassification == QueryClassification::ListSearch)
                        {
                            documentIdList = this.initDocumentIDList(tableName2id(sdQuery.SourceRelationType), sdRuleType, organizations, documentSelectionFromDate, documentSelectionToDate);
                            documentCount = documentIdList.lastIndex();
                        }

                        // Converting Array into RecID[] type
                        for (loop = 1; loop <= organizations.lastIndex(); loop++)
                        {
                            orgID[loop] = organizations.value(loop);
                        }

                        if (ruleRecordID)
                        {
                            isActivePolicyFound = true;

                            switch (sdRuleType.QueryClassification)
                            {
                                case QueryClassification::Aggregate:
                                case QueryClassification::Duplicate:
                                case QueryClassification::Sampling:
                                    this.createTask(ruleRecordID, 0, numberSeqTableRecId, organizations);
                                    break;
                                default:
                                    // loop over the set of documents that are candidates for auditing purpose
                                    for (loop = 1; loop <= documentIdList.lastIndex(); loop++)
                                    {
                                        documentId = documentIdList.value(loop);
                                        this.createTask(ruleRecordID, documentId, numberSeqTableRecId);
                                    }
                            }
                        }
                    }
                }
            }
        }

        if (isActivePolicyFound)
        {
            if (this.parmCurrentBatch().BatchJobId != 0 && !testMode)
            {
                // Schedule the batch to different threads
                this.scheduleBundledTasks(documentCount);
            }
            else
            {
                // Delete the numbersequence created for Audit violation records
                AuditPolicyExecution::deleteNumberSequence(numberSeqTableRecId);
            }
        }
        else
        {
            checkFailed(strFmt("@SYS329999", sysPolicy.Name));
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>runsImpersonated</Name>
        <Source><![CDATA[
    /// <summary>
    /// Indicates whether the job can be executed in impersonate mode.
    /// </summary>
    /// <returns>
    /// true if the job can be executed in impersonate mode; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>scheduleBundledTasks</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Schedules the bundled tasks to be executed by the batch framework.
    /// </summary>
    /// <param name = "_documentCount">
    ///    The document count.
    /// </param>
    /// <remarks>
    ///    Each bundle is added as a runtime task to the current batch job that is specified by the batch
    ///    instance given in the constructor.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void scheduleBundledTasks(int _documentCount)
    {
        BatchHeader            batchHeader; // Header for batch job that hosts batch tasks
        ListEnumerator         enumerator;
        BatchTaskBundle        bundle; // Stores a pointer to the bundle currently being assembled.
        AuditPolicyCaseBuilder auditPolicyCaseBuilder;
        int                    bundleCount = 0;

        auditPolicyCaseBuilder = AuditPolicyCaseBuilder::construct(this.parmCurrentBatch().BatchJobId, this.parmExecutionTime(), numberSeqTableRecId, sysPolicy.RecId, _documentCount);
        auditPolicyCaseBuilder.parmPolicyLegalEntityId(policyLegalEntityId);

        batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        if (!auditPolicyBatchTaskBundle.isEmpty())
        {
            // Add the unfinished bundle to the list if it isn't empty.
            assembledBatchTaskBundleList.addEnd(auditPolicyBatchTaskBundle);
        }

        // adding the case creation job.
        batchHeader.addRuntimeTask(auditPolicyCaseBuilder, this.parmCurrentBatch().RecId);
        // Loop through the list of bundled tasks.
        enumerator = assembledBatchTaskBundleList.getEnumerator();

        while (enumerator.moveNext())
        {
            // Queue the bundle.
            bundleCount++;
            bundle = enumerator.current();
            batchHeader.addRuntimeTask(bundle, this.parmCurrentBatch().RecId);
            batchHeader.addDependency(auditPolicyCaseBuilder, bundle, BatchDependencyStatus::FinishedOrError);
        }

        // Schedule the bundles.
        batchHeader.save();
        info(strFmt("@SYS330000", sysPolicy.Name, bundleCount, _documentCount));
    }

]]></Source>
      </Method>
      <Method>
        <Name>setAuditPolicyName</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Sets the policy name for an audit.
    /// </summary>
    /// <param name="_auditPolicyName">
    ///    The name of the policy.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setAuditPolicyName(SysPolicyName _auditPolicyName)
    {
        auditPolicyName = _auditPolicyName;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setSysPolicy</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Sets the policy information for an audit.
    /// </summary>
    /// <param name="_sysPolicy">
    ///    A buffer of the <c>SysPolicy</c> table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setSysPolicy(SysPolicy _sysPolicy)
    {
        currentSysPolicy = _sysPolicy;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setTestDocumentSelectionFromDate</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Sets the document selection from date for test mode.
    /// </summary>
    /// <param name="_documentSelectionFromDate">
    ///     The from date value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTestDocumentSelectionFromDate(utcdatetime _documentSelectionFromDate)
    {
        documentSelectionFromDate = _documentSelectionFromDate;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setTestDocumentSelectionToDate</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Sets the document selection to date for test mode.
    /// </summary>
    /// <param name="_documentSelectionToDate">
    ///     The to date value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTestDocumentSelectionToDate(utcdatetime _documentSelectionToDate)
    {
        documentSelectionToDate = _documentSelectionToDate;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setTestMode</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Sets the test mode variable value to true.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTestMode()
    {
        testMode = true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setTestSourceDocumentRule</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Sets the <c>SysPolicySourceDocumentRule</c> table test buffer for test mode.
    /// </summary>
    /// <param name="_sdRuleTest">
    ///     The <c>SysPolicySourceDocumentRule</c> table test buffer.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTestSourceDocumentRule(SysPolicySourceDocumentRule _sdRuleTest)
    {
        sdRuleTest = _sdRuleTest;
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        const int Version2 = 2;

        Version version = RunBase::getVersion(_packedClass);
        container sdRuleTestContainer;
        container currentBatchContainer;

        switch (version)
        {
            case CurrentVersion:
                [version, batchBundleSize, sysPolicy, testMode, sdRuleTestContainer,  documentSelectionFromDate, documentSelectionToDate, currentBatchContainer] = _packedClass;

                sdRuleTest = con2Buf(sdRuleTestContainer);
                this.parmCurrentBatch(con2Buf(currentBatchContainer));

                break;

            case Version2:
                [version, batchBundleSize, sysPolicy] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>addDateAndLegalEntityRange</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Adds the date and legal entity range to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query to which the date and legal entity ranges have to be added.
    /// </param>
    /// <param name="_legalEntityList">
    ///    The list of legal entities to add to the query range.
    /// </param>
    /// <param name="_fromdate">
    ///    The from date of the document selection.
    /// </param>
    /// <param name="_todate">
    ///    The to date of the document selection.
    /// </param>
    /// <param name="_source">
    ///    The name of the table that contains the source document.
    /// </param>
    /// <param name="_sdRuleType">
    ///    A <c>SysPolicySourceDocumentRuleType</c> table buffer that contains the policy rule information.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void addDateAndLegalEntityRange(Query                             _query,
                                                  Array                             _legalEntityList,
                                                  utcdatetime                       _fromdate,
                                                  utcdatetime                       _todate,
                                                  TableId                           _source,
                                                  SysPolicySourceDocumentRuleType   _sdRuleType)
    {
        int                     i;
        QueryBuildDataSource    qbds;

        qbds = _query.dataSourceTable(_source);
        if (qbds)
        {
            // Add date to the query range
            _query.addQueryFilter(qbds, _sdRuleType.DateAttribute).value(strFmt('%1..%2', queryValue(_fromdate), queryValue(_todate)));

            // Add legal entity to the query range
            _query.allowCrossCompany(true);
            for (i = 1; i <= _legalEntityList.lastIndex(); i++)
            {
                if (_sdRuleType.LegalEntityAttribute == 'DATAAREAID')
                {
                    _query.addCompanyRange(CompanyInfo::findRecId(_legalEntityList.value(i)).DataArea);
                }
                else
                {
                    _query.addQueryFilter(qbds, _sdRuleType.LegalEntityAttribute).value(queryValue(_legalEntityList.value(i)));
                }
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AuditPolicyExecution construct()
    {
        AuditPolicyExecution auditPolicyExecution = new AuditPolicyExecution();
        return auditPolicyExecution;
    }

]]></Source>
      </Method>
      <Method>
        <Name>createNumberSeq</Name>
        <Source><![CDATA[
    /// <summary>
    ///     Creates a <c>NumberSequenceTable</c> record for the Audit violation records.
    /// </summary>
    /// <param name="_batchId">
    ///     The record Id of the current batch.
    /// </param>
    /// <returns>
    ///     The record ID of the <c>NumberSequenceTable</c> record created.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RefRecId createNumberSeq(RefRecId _batchId)
    {
        int                 i = 1;
        NumberSeqScope      numberSeqScope = NumberSeqScopeFactory::createGlobalScope();
        NumberSequenceTable numberSeqTable;

        numberSeqTable.NumberSequenceScope  = numberSeqScope.getId();
        numberSeqTable.NumberSequence       = int642str(_batchId) + "@SYS319403";

        while (NumberSequenceTable::existByNaturalKey(numberSeqTable.NumberSequence, numberSeqTable.NumberSequenceScope))
        {
            numberSeqTable.NumberSequence   = "@SYS319403" + int2str(i);
            i++;
        }

        numberSeqTable.Lowest               = 1;
        numberSeqTable.Highest              = 9999999;
        numberSeqTable.NextRec              = 1;
        numberSeqTable.Continuous           = NoYes::No;
        numberSeqTable.Cyclic               = NoYes::No;
        numberSeqTable.CleanAtAccess        = NoYes::No;
        numberSeqTable.CleanInterval        = 0;
        numberSeqTable.Format               = '########';
        numberSeqTable.insert();

        return numberSeqTable.RecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>deleteNumberSequence</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Deletes the number sequence.
    /// </summary>
    /// <param name="_numberSeqTableRecId">
    ///    The record ID of the number sequence.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteNumberSequence(RefRecId _numberSeqTableRecId)
    {
        NumberSequenceTable                 numberSeqTable;

        ttsbegin;
        numberSeqTable = NumberSequenceTable::find(_numberSeqTableRecId, true);
        if (numberSeqTable)
        {
            numberSeqTable.delete();
        }
        ttscommit;
    }

]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS323738";
    }

]]></Source>
      </Method>
      <Method>
        <Name>getActiveRuleForPolicy</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Gets the active rule for the specified policy, policy rule type, and the effective date.
    /// </summary>
    /// <param name="_policyRecId">
    ///    The record ID of the <c>SysPolicy</c> record that is currently being executed.
    /// </param>
    /// <param name="_ruleTypeRecId">
    ///    The record ID of the <c>SysPolicyRuleType</c> record that is being applied on the policy specified.
    /// </param>
    /// <param name="_effectiveDate">
    ///    The date range for which the rule was active.
    /// </param>
    /// <returns>
    ///    The rule record ID.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RefRecId getActiveRuleForPolicy(RefRecId _policyRecId, RefRecId _ruleTypeRecId, utcdatetime _effectiveDate)
    {
        SysPolicy       policy;
        SysPolicyRule   policyRule;
        utcdatetime     minDateValue = DateTimeUtil::minValue();
        utcdatetime     maxDateValue = DateTimeUtil::maxValue();

        select firstonly validTimeState(minDateValue, maxDateValue) RecId from policyRule
            where policyRule.ValidFrom      <= _effectiveDate &&
                  policyRule.ValidTo        >= _effectiveDate &&
                  policyRule.PolicyRuleType == _ruleTypeRecId
            join RecId from policy
                where policyRule.Policy == policy.RecId &&
                      policy.RecId      == _policyRecId &&
                      policy.IsActive   == NoYes::Yes;

        return policyRule.RecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args args)
    {
        AuditPolicyExecution    auditPolicyExecution = AuditPolicyExecution::construct();
        SysPolicy               sysPolicy;

        if (args && args.record().TableId == tableNum(SysPolicy) && args.record().RecId != 0)
        {
            sysPolicy = args.record();
            auditPolicyExecution.setAuditPolicyName(sysPolicy.Name);
            auditPolicyExecution.setSysPolicy(sysPolicy);
        }
        else
        {
            throw error(strFmt("@SYS68912",funcName()));
        }

        if (auditPolicyExecution.prompt())
        {
            auditPolicyExecution.setSysPolicy(sysPolicy);

            auditPolicyExecution.runOperation();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>