<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceCFDICustInvoiceJourRefProcessor_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceCFDIRetailStatementRefProcessor_MX</c> class operates with incomplete CFDI UUID references for Retail Customer order related EInvoices and transform them to <c>EInvoiceCFDIReference_MX</c> records.
/// </summary>
[RetailEInvoiceCFDIRefProcessorAttribute_MX(tableStr(CustInvoiceJour))]
class RetailEInvoiceCFDICustInvoiceJourRefProcessor_MX extends RetailEInvoiceCFDIRefProcessor_MX
{
    CustInvoiceJour custInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCFDIStatementReference</Name>
				<Source><![CDATA[
    public void createCFDIStatementReference()
    {
        this.createCFDIReturnStatementReference(custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEInvoiceJour</Name>
				<Source><![CDATA[
    protected void initFromEInvoiceJour(EInvoiceJour_MX _eInvoiceJour)
    {
        super(_eInvoiceJour);
        custInvoiceJour = eInvoiceJour.invoiceJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIReturnStatementReference</Name>
				<Source><![CDATA[
    protected void createCFDIReturnStatementReference(CustInvoiceJour _custInvoiceJour)
    {
        if (eInvoiceJour.IsReturn)
        {
            RetailEInvoiceCFDIReference_MX retailEInvoiceCFDIReference;
            RefRecId eInvoiceJourRecId = eInvoiceJour.RecId;
        
            CustInvoiceTrans custInvoiceTrans, custInvoiceTransOrig;
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin, inventTransOriginOrig;

            EInvoiceCFDIReferenceType_MX insertReferenceType = EInvoiceCFDIReferenceType_MX::GoodsReturn;
            
            TableId custInvoiceJourTableId = tableNum(CustInvoiceJour);
            insert_recordset retailEInvoiceCFDIReference
                (RefTableId, RefRecId, ReferenceType, EInvoiceJour)
                select custInvoiceJourTableId, ParentRecId, insertReferenceType, eInvoiceJourRecId from custInvoiceTransOrig
                    group by ParentRecId
                exists join inventTransOriginOrig
                    where inventTransOriginOrig.InventTransId == custInvoiceTransOrig.InventTransId
                exists join inventTrans
                    where inventTrans.ReturnInventTransOrigin == inventTransOriginOrig.RecId
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                exists join custInvoiceTrans
                    where custInvoiceTrans.InventTransId == inventTransOrigin.InventTransId
                        && custInvoiceTrans.ParentRecId == _custInvoiceJour.RecId;

            select firstOnly RecId from retailEInvoiceCFDIReference
                where retailEInvoiceCFDIReference.EInvoiceJour == eInvoiceJourRecId;
        
            if (retailEInvoiceCFDIReference)
            {
                info(strFmt("@RetailEInvoiceCFDI:EInvoiceForCustomerInvoiceCreatedInStatusDraft", custInvoiceJour.InvoiceId));
                eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::Draft;
                eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Blank;
                eInvoiceJour.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEInvoiceReturnReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills return references by information from EInvoice.
    /// </summary>
    /// <param name="_targetStatmentJour">
    /// A reference to <c>RetailStatementJour</c> to limit processed record set; optional.
    /// </param>
    /// <remarks>
    /// The UUID of original EINvoice can be absent on the stage of EInvoice creation for return.
    /// Moreover The retail statement can be abcent on the stage.
    /// The procedure searches statement and related EInvoice based on saved information about returned transaction and update reference by UUID in case it is found
    /// </remarks>
    public static void updateEInvoiceReturnReferences(RefRecId _targetEInvoiceJourRecId = 0) 
    {
        EInvoiceJour_MX eInvoice;
        EInvoiceJour_MX origEInvoice;
        RetailEInvoiceCFDIReference_MX reference;

        update_recordSet reference
            setting CFDIUUID = origEInvoice.CFDIUUID
            where !reference.CFDIUUID
                && (! _targetEInvoiceJourRecId || reference.EInvoiceJour == _targetEInvoiceJourRecId)
                && reference.ReferenceType == EInvoiceCFDIReferenceType_MX::GoodsReturn
            join CFDIUUID from origEInvoice
                where origEInvoice.CFDIUUID
                   && origEInvoice.RefTableId == reference.RefTableId
                   && origEInvoice.RefRecId   == reference.RefRecId
            exists join eInvoice
                where eInvoice.RecId == reference.EInvoiceJour
                    && eInvoice.RefTableId == tableNum(CustInvoiceJour)
                    && eInvoice.CFDIStatus == EInvoiceCFDIStatus_MX::Draft
                    && eInvoice.IsReturn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>