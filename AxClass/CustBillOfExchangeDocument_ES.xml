<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeDocument_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustBillOfExchangeDocument_ES</c> class handles the Spanish bill of exchange.
/// </summary>
public class CustBillOfExchangeDocument_ES extends CustOutPaym
{
    // The following fields can be persisted to a container as they are primitive data types.
    BankBillOfExchangeNumMethod noteNumMethod;
    BankBillOfExchangeStartNum nextNoteNum;
    BankBillOfExchangeQty numOfBlankNote;
    BankBillOfExchangeNum noteNum;
    Num mask;
    BankBillOfExchangeQty numOfTestNotes;
    BankBillOfExchangeStartNum firstNoteNum;
    Counter specTransLines;

    ReportPosition slipTop1;
    ReportPosition slipTop2;
    ReportPosition slipHeight;
    ReportPosition noteTop;
    Counter numOfSlips;

    // The following fields cannot be persisted to a container as they are object type.
    TmpBankBillOfExchangePrintout tmpBankBillOfExchangePrintout;

    DialogField dialogAccountId;
    DialogField dialogFromNoteNum;
    DialogField dialogNumOfBlankNote;
    DialogField dialogCity;

    Set createdNoteNumbers;

    // This list defines how the object is serialized and unserialized as it is sent across the wire. This
    // list should contain all non-object types defined on this class declaration.
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        noteNumMethod,
        nextNoteNum,
        numOfBlankNote,
        noteNum,
        mask,
        numOfTestNotes,
        firstNoteNum,
        specTransLines,
        slipTop1,
        slipTop2,
        slipHeight,
        noteTop,
        numOfSlips
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Opens a printer settings dialog box for the specified payment document type.
    /// </summary>
    /// <param name="_documentType">
    ///     The payment document type.
    /// </param>
    /// <returns>
    ///     true if the printer settings dialog box was closed with the OK button; otherwise, false.
    /// </returns>
    public boolean callPrinterSettings(PaymDocumentType _documentType)
    {
        SRSPrintDestinationSettings printSettings;
        boolean ok;

        if (_documentType == PaymDocumentType::Document)
        {
            printSettings = new SRSPrintDestinationSettings();
            printSettings.unpack(this.getPrinterSettings(_documentType));

            printSettings.fromPage(1);
            printSettings.toPage(99999999);
            printSettings.printMediumType(SRSPrintMediumType::Printer);

            ok = SrsReportRunUtil::showSettingsDialog(printSettings);

            if (ok)
            {
                this.updatePrinterSettings(_documentType, printSettings.pack());
            }
        }
        else
        {
            ok = super(_documentType);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the state of the internal variables as well as _ledgerJournalTrans parameter.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///      The transaction detail information pertaining to a journal.
    /// </param>
    /// <returns>
    ///     True if the journal lines and internal variables are correct; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDataOk(LedgerJournalTrans _ledgerJournalTrans)
    {
        setPrefix(strFmt("@SYS25866", _ledgerJournalTrans.Voucher));

        if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Cust)
        {
            return checkFailed(strFmt("@SYS78853", LedgerJournalACType::Cust));
        }

        if (_ledgerJournalTrans.CustTransId &&
            !CustTrans::find(_ledgerJournalTrans.CustTransId).Approved &&
            (_ledgerJournalTrans.SettleVoucher != SettlementType::None))
        {
            return checkFailed("@SYS3508");
        }

        if (!accountId)
        {
            return checkFailed("@SYS24651");
        }

        if (!BankAccountTable::find(accountId))
        {
            return checkFailed(strFmt("@SYS27061", accountId));
        }

        if (!nextNoteNum)
        {
            return checkFailed("@SYS79242");
        }

        if (BankBillOfExchangeTable::find(accountId, this.formatNoteNum(nextNoteNum)).DocumentStatus != BankBillOfExchangeStatus::Created)
        {
            return checkFailed(strFmt("@SYS79234", nextNoteNum));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if values in lines of journal are correct and if journal type is Draw or Redraw.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     Transactions of the journal.
    /// </param>
    /// <param name="_progress">
    ///     Class handles run form.
    /// </param>
    /// <returns>
    ///     True if the values are more than zero, if Journal Type is Draw or Redraw
    ///     and if bank parameters are correct; otherwise, false.
    /// </returns>
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null,
                                RunbaseProgress _progress = null)
    {
        AmountMST paymAmountMST = _ledgerJournalTrans.calcAmountMST();

        if (paymAmountMST == 0)
        {
            return checkFailed(strFmt("@SYS82275", _ledgerJournalTrans.Voucher));
        }

        if (paymAmountMST > 0 &&
            _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::CustBillOfExchangeRedraw)
        {
            return checkFailed(strFmt("@SYS79383", _ledgerJournalTrans.Voucher));
        }

        BankAccountTable bankAccountTable = BankAccountTable::find(_ledgerJournalTrans.BankAccountId);

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::CustBillOfExchangeDraw &&
            _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::CustBillOfExchangeRedraw)
        {
            return checkFailed(strFmt("@SYS113318", LedgerJournalType::CustBillOfExchangeDraw, LedgerJournalType::CustBillOfExchangeRedraw));
        }

        if (!_ledgerJournalTrans.BankBillOfExchangeNum &&
            _ledgerJournalTrans.CurrencyCode != bankAccountTable.CurrencyCode &&
            !bankAccountTable.BankMultiCurrency)
        {
            return checkFailed("@SYS113319");
        }

        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTrans(_ledgerJournalTrans,
                                                                                                    LedgerJournalVoucher::Voucher,
                                                                                                    NoYes::No,
                                                                                                    NoYes::No,
                                                                                                    NoYes::No);

        ledgerJournalCheckPost.parmShowErrorOk(false);
        ledgerJournalCheckPost.parmCheckPaymStatus(false);

        if (_progress)
        {
            ledgerJournalCheckPost.progress(_progress);
        }

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

        return ledgerJournalCheckPost.tableErrorLog() == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    public void close()
    {
        this.printDocument();

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(CustBillOfExchange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToMm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the bank bill of exchange length to millimeters(mm).
    /// </summary>
    /// <param name="_value">
    ///     The magnitude of bill of exchange length.
    /// </param>
    /// <param name="_unit">
    ///      The unit of measurement of bill of exchange length.
    /// </param>
    /// <returns>
    ///     The length of bank's bill of exchange in millimeters(mm).
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankBillOfExchangeLength convertToMm(BankBillOfExchangeLength _value,
                                                PrintPaperSizeUnit _unit)
    {
        return units2mm(_value, _unit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method should return the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c>
    /// classes.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public ClassId custVendOutPaymRecordRootClassId()
    {
        return classNum(CustOutPaymRecord_BOE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///     interface.
    /// </summary>
    /// <returns>
    ///     A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///     A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///     in the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        this.initNoteDialog();

        dialogAccountId = dialog.addFieldValue(extendedTypeStr(CompanyBankAccountId), accountId);
        dialogFromNoteNum = dialog.addFieldValue(extendedTypeStr(BankBillOfExchangeStartNum), firstNoteNum, "@SYS4083");
        dialogNumOfBlankNote = dialog.addFieldValue(extendedTypeStr(BankBillOfExchangeQty), numOfBlankNote, "@SYS79382");

        dialogAccountId.allowEdit(false);
        dialogFromNoteNum.allowEdit(noteNumMethod == BankBillOfExchangeNumMethod::Free);

        this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNote</Name>
				<Source><![CDATA[
    private void fillNote(BankBillOfExchangeNum _bankBillOfExchangeNum,
                            LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean firstNote = true;

        CustTable custTableLocal = CustTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        BankAccountTable bankAccountTable = BankAccountTable::find(accountId);
        CustBankAccount custBankAccount = CustBankAccount::find(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.CustVendBankAccountId);
        BankBillOfExchangeLayout bankBillOfExchangeLayout = BankBillOfExchangeLayout::find(accountId);
        Currency currency = Currency::find(bankAccountTable.CurrencyCode);
        Counter slipLines = this.slipTxtLines(bankBillOfExchangeLayout);
        Counter totalSpecLines = SpecTrans::getSpecTransCount(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);
        Counter startLines = 0;
        Counter endLines = slipLines;

        specTransLines = 0;
        AmountCur amountCur;
        if (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::CustBillOfExchangeRedraw ||
            _ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::CustBillOfExchangeDraw)
        {
            amountCur = _ledgerJournalTrans.AmountCurCredit - _ledgerJournalTrans.AmountCurDebit;
        }
        else
        {
            amountCur = _ledgerJournalTrans.AmountCurDebit - _ledgerJournalTrans.AmountCurCredit;
        }

        BankBillOfExchangeTable::setBillOfExchangeDocStatus(accountId,
                                                            _bankBillOfExchangeNum,
                                                            BankBillOfExchangeStatus::Printed,
                                                            _ledgerJournalTrans.TransDate,
                                                            _ledgerJournalTrans.Voucher,
                                                            _ledgerJournalTrans.parmAccount(),
                                                            _ledgerJournalTrans.CurrencyCode,
                                                            amountCur);

        if (slipLines < 7)
        {
            totalSpecLines = 0;
        }

        Counter notesLines;
        AmountCur decAmountCur;
        LogisticsPostalAddress postalAddress;
        while (specTransLines < totalSpecLines || totalSpecLines == 0)
        {
            postalAddress = custTableLocal.postalAddress();
            tmpBankBillOfExchangePrintout.clear();
            tmpBankBillOfExchangePrintout.RecipientName = custTableLocal.name();
            tmpBankBillOfExchangePrintout.Address = postalAddress.Address;
            tmpBankBillOfExchangePrintout.CountryRegionId = postalAddress.CountryRegionId;
            tmpBankBillOfExchangePrintout.State = postalAddress.State;
            tmpBankBillOfExchangePrintout.County = postalAddress.County;
            tmpBankBillOfExchangePrintout.Street = postalAddress.Street;
            tmpBankBillOfExchangePrintout.City = postalAddress.City;
            tmpBankBillOfExchangePrintout.NumOfSlips = numOfSlips;
            tmpBankBillOfExchangePrintout.SlipHeight = slipHeight;
            tmpBankBillOfExchangePrintout.SlipTop1 = slipTop1;
            tmpBankBillOfExchangePrintout.SlipTop2 = slipTop2;
            tmpBankBillOfExchangePrintout.NoteTop = noteTop;
            tmpBankBillOfExchangePrintout.NoteNum = noteNum;
            tmpBankBillOfExchangePrintout.NoteFormType = bankBillOfExchangeLayout.NoteFormType;
            tmpBankBillOfExchangePrintout.Signature1 = NoYes::No;
            tmpBankBillOfExchangePrintout.Signature2 = NoYes::No;
            tmpBankBillOfExchangePrintout.TransDate = _ledgerJournalTrans.TransDate;
            tmpBankBillOfExchangePrintout.DueDate = _ledgerJournalTrans.Due;

            if (firstNote)
            {
                firstNote = false;
                tmpBankBillOfExchangePrintout.AccountId = accountId;
                tmpBankBillOfExchangePrintout.BankName = bankBillOfExchangeLayout.BankName ? bankAccountTable.Name : '';
                tmpBankBillOfExchangePrintout.RegistrationNum = bankBillOfExchangeLayout.BankNum ? bankAccountTable.RegistrationNum : '';
                tmpBankBillOfExchangePrintout.AccountNum = bankBillOfExchangeLayout.BankNum ? bankAccountTable.AccountNum : '';
                tmpBankBillOfExchangePrintout.AmountCur = amountCur;
                tmpBankBillOfExchangePrintout.CurrencyTxt = currency.Txt;

                switch (bankBillOfExchangeLayout.NoteFormType)
                {
                    case BankBillOfExchangeFormType::ESStyle :
                        decAmountCur = amountCur - roundDown(amountCur, 1);
                        tmpBankBillOfExchangePrintout.AmountTxt = decAmountCur > 0.00 ? strFmt('***%1***', amountCur) : strFmt('***%1***', num2str(amountCur,1,0,1,1));
                        tmpBankBillOfExchangePrintout.Numerals2Letter = amountCur != 0 ? numeralsToTxt_ES(amountCur,
                        CurrencyGender::findByCurrencyCode(currency.CurrencyCode).Gender) : '';
                        break;

                    default :
                        tmpBankBillOfExchangePrintout.AmountTxt = strFmt('%1 %2***',currency.CurrencyCode, amountCur);
                        tmpBankBillOfExchangePrintout.Numerals2Letter = amountCur != 0 ? numeralsToTxt(amountCur) : '';
                }

                if (bankBillOfExchangeLayout.Signature1)
                {
                    if (!bankBillOfExchangeLayout.Signature1Limit)
                    {
                        tmpBankBillOfExchangePrintout.Signature1 = NoYes::Yes;
                    }
                    else
                    {
                        tmpBankBillOfExchangePrintout.Signature1 = bankBillOfExchangeLayout.Signature1Limit >= amountCur ? NoYes::Yes : NoYes::No;
                    }
                }

                if (bankBillOfExchangeLayout.Signature2)
                {
                    if (!bankBillOfExchangeLayout.Signature2Limit)
                    {
                        tmpBankBillOfExchangePrintout.Signature2 = NoYes::Yes;
                    }
                    else
                    {
                        tmpBankBillOfExchangePrintout.Signature2 = bankBillOfExchangeLayout.Signature2Limit >= amountCur ? NoYes::Yes : NoYes::No;
                    }
                }
            }
            else
            {
                this.setBlankNote(_ledgerJournalTrans);
                tmpBankBillOfExchangePrintout.Void = NoYes::Yes;
                tmpBankBillOfExchangePrintout.NoteNum = noteNum;
            }

            if (numOfSlips > 0)
            {
                switch (bankBillOfExchangeLayout.NoteFormType)
                {
                    case BankBillOfExchangeFormType::ESStyle :
                        tmpBankBillOfExchangePrintout.SlipTxt = strFmt("@SYS79267"+' '+noteNum+'\n\n');
                        endLines -= 2;
                        break;
                }

                if (totalSpecLines > 0)
                {
                    tmpBankBillOfExchangePrintout.SlipTxt += this.fillSlipTxt(_ledgerJournalTrans,
                                                                                startLines,
                                                                                endLines,
                                                                                noteNum,
                                                                                bankBillOfExchangeLayout.NoteFormType);
                }

                if (_ledgerJournalTrans.PaymentNotes && specTransLines == totalSpecLines)
                {
                    notesLines = this.notesLines(_ledgerJournalTrans.PaymentNotes);
                    if (notesLines + this.notesLines(tmpBankBillOfExchangePrintout.SlipTxt) <= slipLines)
                    {
                        tmpBankBillOfExchangePrintout.SlipTxt += '\n'+_ledgerJournalTrans.PaymentNotes;
                    }
                    else
                    {
                        postalAddress = custTableLocal.postalAddress();
                        tmpBankBillOfExchangePrintout.insert();
                        tmpBankBillOfExchangePrintout.clear();
                        tmpBankBillOfExchangePrintout.RecipientName = custTableLocal.name();
                        tmpBankBillOfExchangePrintout.Address = postalAddress.Address;
                        tmpBankBillOfExchangePrintout.CountryRegionId = postalAddress.CountryRegionId;
                        tmpBankBillOfExchangePrintout.State = postalAddress.State;
                        tmpBankBillOfExchangePrintout.County = postalAddress.County;
                        tmpBankBillOfExchangePrintout.NumOfSlips = numOfSlips;
                        tmpBankBillOfExchangePrintout.SlipHeight = slipHeight;
                        tmpBankBillOfExchangePrintout.SlipTop1 = slipTop1;
                        tmpBankBillOfExchangePrintout.SlipTop2 = slipTop2;
                        tmpBankBillOfExchangePrintout.NoteTop = noteTop;
                        tmpBankBillOfExchangePrintout.NoteFormType = bankBillOfExchangeLayout.NoteFormType;
                        tmpBankBillOfExchangePrintout.Void = NoYes::Yes;

                        this.setBlankNote(_ledgerJournalTrans);

                        BankBillOfExchangeTable::setBillOfExchangeDocStatus(accountId,
                                                                            this.noteNum(),
                                                                            BankBillOfExchangeStatus::NotPrinted,
                                                                            _ledgerJournalTrans.TransDate,
                                                                            '',
                                                                            '',
                                                                            bankAccountTable.CurrencyCode,
                                                                            0);
                        tmpBankBillOfExchangePrintout.NoteNum = noteNum;

                        switch (bankBillOfExchangeLayout.NoteFormType)
                        {
                            case BankBillOfExchangeFormType::ESStyle :
                                tmpBankBillOfExchangePrintout.SlipTxt = strFmt("@SYS74003"+' '+noteNum+'\n\n');
                                break;
                        }
                        tmpBankBillOfExchangePrintout.SlipTxt += _ledgerJournalTrans.PaymentNotes + '\n\n';
                    }
                }
            }
            else
            {
                totalSpecLines = -1;
            }

            tmpBankBillOfExchangePrintout.insert();
            startLines = specTransLines;
            endLines = startLines + slipLines;

            if (totalSpecLines == 0)
            {
                totalSpecLines = -1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSlipTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates noteSlipTxt using transaction of the journal.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     The transactions of the journal.
    /// </param>
    /// <param name="_startLines">
    ///     Where initial line is.
    /// </param>
    /// <param name="_endLines">
    ///     Where final line is.
    /// </param>
    /// <param name="_noteNum">
    ///     Number of the note.
    /// </param>
    /// <param name="_noteFormType">
    ///     Style type, the correct type in this class is ESStyle.
    /// </param>
    /// <returns>
    ///     Text correctly formatted.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ChequeSlipTxt fillSlipTxt(LedgerJournalTrans             _ledgerJournalTrans,
                                        Counter                     _startLines,
                                        Counter                     _endLines,
                                        BankBillOfExchangeNum       _noteNum,
                                        BankBillOfExchangeFormType  _noteFormType)
    {
        Counter endLines = _endLines;
        CustTable custTable = CustTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        BankBillOfExchangeSlipTxt noteSlipTxt;
        if (custTable)
        {
            noteSlipTxt += strFmt('%1 : %2, %3\n', "@SYS9455", custTable.AccountNum, custTable.name());
            endLines -= 1;
        }

        switch (_noteFormType)
        {
            case BankBillOfExchangeFormType::ESStyle :
                noteSlipTxt += strFmt('%1 %2 %3 %4 %5 %6\n\n', "@SYS57610", "@SYS4726", "@SYS9458", "@SYS7572", "@SYS1943", "@SYS14588");
                endLines -= 1;
                break;

            default :
                throw error("@SYS113320");
        }

        Counter totalLines = SpecTrans::getSpecTransCount(_ledgerJournalTrans.company(), _ledgerJournalTrans.TableId, _ledgerJournalTrans.RecId);
        CustTrans custTrans;
        SpecTrans specTrans;
        FromDate invoiceDate;
        AmountCur totalAmountCur;
        boolean totalPrinted;
        boolean printStartAmount;
        AmountCur paymAmount;
        Counter lines;
        while select crossCompany specTrans
            where specTrans.SpecTableId == _ledgerJournalTrans.TableId &&
            specTrans.SpecRecId == _ledgerJournalTrans.RecId &&
            specTrans.SpecCompany == _ledgerJournalTrans.company()
        {
            lines++;
            custTrans = specTrans.custTrans();
            totalAmountCur += specTrans.Balance01;
            if (lines > _startLines && lines <= endLines)
            {
                if (printStartAmount)
                {
                    noteSlipTxt += strFmt('%1 %2\n\n',
                                            strLFix("@SYS55313",62),
                                            num2str(-(totalAmountCur - specTrans.Balance01),16, 2, -1, -1));
                    printStartAmount = false;
                }
                specTransLines++;
                paymAmount = specTrans.Balance01;
                invoiceDate = custTrans.TransDate;
                noteSlipTxt += strFmt('%1 %2 %3 %4 %5 %6\r\n',
                                        invoiceDate,
                                        strLFix(custTrans.Invoice,15),
                                        custTrans.AmountCur,
                                        custTrans.CurrencyCode,
                                        num2str(-paymAmount,16, 2, -1, -1),
                                        specTrans.custTransOpen().DueDate);

                if (lines == endLines && totalLines != lines)
                {
                    noteSlipTxt += strFmt(' \n%1 %2',
                                            strLFix("@SYS7470",50),
                                            num2str(-totalAmountCur,16, 2, -1, -1));
                    totalPrinted = true;
                }
            }
        }

        if (!totalPrinted && totalLines == lines)
        {
            noteSlipTxt += strFmt(' \n%1 %2',
                                    strLFix("@SYS809",50),
                                    num2str(-totalAmountCur,16, 2, -1, -1));
        }

        return noteSlipTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatNoteNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increases a bill of exchange number.
    /// </summary>
    /// <param name="_noteNum">
    ///     The bank bill of exchange start number.
    /// </param>
    /// <param name="_mask">
    ///     The number mask.
    /// </param>
    /// <returns>
    ///     Returns the next bill of exchange number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankBillOfExchangeNum formatNoteNum(BankBillOfExchangeStartNum _noteNum,
                                                Num _mask = '')
    {
        return NumberSeq::numInsertFormat(_noteNum, _mask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates payment advice lines.
    /// </summary>
    public void generatePaymentLines()
    {
        this.updateQuery();

        ttsbegin;

        setPrefix("@SYS17561");
        LedgerJournalTrans ledgerJournalTrans;
        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

            if (this.checkValues(ledgerJournalTrans,this.parmProgress()))
            {
                if (!ledgerJournalTrans.BankBillOfExchangeNum)
                {
                    this.output(ledgerJournalTrans);
                    outPaymRecordList.addEnd(CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                                ledgerJournalTrans.PaymSpec,
                                                                                this,
                                                                                this.custPaym(ledgerJournalTrans)));
                }
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Load accountId, firstNoteNum, numOfBlankNote, noteNumMethod and printPaymAdvice variables
    ///     with values set in the dialogs by user.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    public boolean getFromDialog()
    {
        accountId = dialogAccountId.value();
        firstNoteNum = dialogFromNoteNum.value();
        numOfBlankNote = dialogNumOfBlankNote.value();
        noteNumMethod = BankBillOfExchangeLayout::find(accountId).NoteNumMethod;
        printPaymAdvice = dialogPrintPaymAdvice.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the printer settings for the supplied payment document type.
    /// </summary>
    /// <param name="_documentType">
    /// The payment document type.
    /// </param>
    /// <returns>
    /// The printer settings for the supplied payment document type.
    /// </returns>
    public container getPrinterSettings(PaymDocumentType _documentType)
    {
        return super(_documentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNoteDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the bill of exchange number depending on method, free or fixed, defined in the bank account.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initNoteDialog()
    {
        if (firstNoteNum)
        {
            return;
        }

        accountId = this.parmBankAccountID();

        BankBillOfExchangeLayout bankBillOfExchangeLayout = BankBillOfExchangeLayout::find(accountId);
        noteNumMethod = bankBillOfExchangeLayout.NoteNumMethod;

        if (bankBillOfExchangeLayout)
        {
            this.setNoteNum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the name of the format to display in the user interface.
    /// </summary>
    /// <returns>
    ///     The name of the format to display in the user interface.
    /// </returns>
    /// <remarks>
    ///     The method must return the name of the format to be displayed in the user interface. Formats
    ///     without an interface name cannot be used in electronic banking as export formats. However, they can
    ///     serve as parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return "@AccountsReceivable:SpanishBIllOfExchange_ES";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        numOfBlankNote = 0;
        createdNoteNumbers = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>noteNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the bill of exchange number.
    /// </summary>
    /// <returns>
    ///     Returns a valid bill of exchange number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankBillOfExchangeNum noteNum()
    {
        noteNum = this.formatNoteNum(nextNoteNum);

        if (noteNumMethod == BankBillOfExchangeNumMethod::Fixed)
        {
            if (!BankBillOfExchangeTable::exist(accountId, num2str(nextNoteNum, 0, 0, 0, 0))) // The sequence is broken, find the next Pn
            {
                nextNoteNum = NumberSeq::numRemoveFormat(BankBillOfExchangeTable::findNextFree(accountId), '');

                if (!nextNoteNum)
                {
                    throw error(strFmt("@SYS83609", accountId));
                }

                noteNum = this.formatNoteNum(nextNoteNum);
            }
        }
        else
        {
            BankBillOfExchangeTable::createBillOfExchange(noteNum, accountId);
        }

        nextNoteNum ++;

        createdNoteNumbers.add(noteNum);

        return noteNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notesLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of lines necessary to fit a free text.
    /// </summary>
    /// <param name="_paymentNotes">
    ///     Free text.
    /// </param>
    /// <returns>
    ///     Returns the number of lines necessary to fit a free text.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter notesLines(FreeTxt _paymentNotes)
    {
        int lines = 0;
        int pos = -1;

        while (pos)
        {
            pos = strScan(_paymentNotes, '\n', pos+1, 255);
            lines++;
        }

        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the media, such as creating a file, and creates the header of the media, such as creating a
    /// start record for a file.
    /// </summary>
    public void open()
    {
        this.initNoteDialog();
        nextNoteNum = firstNoteNum;
        tmpBankBillOfExchangePrintout = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    ///     A method that enables handling output operation by the concrete <c>PaymentFormat</c> implementation.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> record to be included in the report or file.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///     This method must be overridden by concrete <c>PaymentFormat</c> class otherwise <c>missing
    ///     overload</c> exception is thrown.
    /// </exception>
    public void output(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        CustBillOfExchangeJour custBillOfExchangeJour;

        if (this.checkDataOk(_ledgerJournalTrans))
        {
            if (numOfBlankNote > 0)
            {
                this.setBlankNote(_ledgerJournalTrans, numOfBlankNote);
                numOfBlankNote = 0;
            }

            this.noteNum();
            this.setPaymentRef(noteNum, _ledgerJournalTrans);
            this.fillNote(noteNum, _ledgerJournalTrans);

            if (_ledgerJournalTrans.PaymReference || _ledgerJournalTrans.BankBillOfExchangeNum)
            {
                _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                _ledgerJournalTrans.update();
                while select firstonly crossCompany specTrans
                    where specTrans.SpecTableId == _ledgerJournalTrans.TableId
                    && specTrans.SpecRecId == _ledgerJournalTrans.RecId
                    && specTrans.SpecCompany == _ledgerJournalTrans.company()
                    && specTrans.RefTableId == tableNum(CustTransOpen)
                {
                    changecompany(specTrans.SpecCompany)
                    {
                        // Set to null in case company context changes
                        custBillOfExchangeJour = null;

                        while select firstonly forupdate custBillOfExchangeJour
                            where custBillOfExchangeJour.BillOfExchangeId == specTrans.custTrans().BillOfExchangeID ||
                            custBillOfExchangeJour.BillOfExchangeId == _ledgerJournalTrans.NegInstId
                        {
                            custBillOfExchangeJour.DocumentNum = _ledgerJournalTrans.BankBillOfExchangeNum;
                            custBillOfExchangeJour.DocumentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            custBillOfExchangeJour.update();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // Pack the fields defined by the pack list on this class as well as those
        // defined on all base classes.
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    ///     A container that stores the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    ///     The <c>pack</c> and <c>unpack</c> pattern does not have provisions for supporting different
    ///     serialization and <c>SysLastValues</c> pack lists. This separate packing mechanism has been
    ///     implemented for <c>SysLastValues</c> and is first defined on the class one level above the
    ///     <c>RunBase</c> or <c>RunBaseBatch</c> class. Derivative classes also implement this method so that
    ///     a whole object can be packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, #SysLastValuesList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calls the Spanish bill of exchange report.
    /// </summary>
    public void printDocument()
    {
        Args args;

        this.cleanupBankBillOfExchangeTmp();

        while select tmpBankBillOfExchangePrintout
        {
            args = new Args();
            args.caller(this);

            switch (tmpBankBillOfExchangePrintout.NoteFormType)
            {
                case BankBillOfExchangeFormType::ESStyle :
                    new MenuFunction(menuitemOutputStr(BankBillOfExchange_ES), MenuItemType::Output).run(args);
                    break;

                default :
                    throw error("@SYS26828");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupBankBillOfExchangeTmp</Name>
				<Source><![CDATA[
    private void cleanupBankBillOfExchangeTmp()
    {
        BankBillOfExchangeTmp_ES bankBillOfExchangeTmp;
        int currentSessionId = new xSession().sessionId();

        //Delete the previous records if there are existing record
        //corresponding to the current session or there are existing records
        //more than two days old and present day as well.
        delete_from bankBillOfExchangeTmp
            where ((bankBillOfExchangeTmp.SessionID == currentSessionId) ||
            (bankBillOfExchangeTmp.DateOfCreation < DateTimeUtil::getToday(Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON) - 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Print payment advice.
    /// </summary>
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceCustV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceCust), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBlankNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set a bill of exchange of the transaction of a journal like "Not Printed" status.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     Transaction of the journal.
    /// </param>
    /// <param name="_blankNotes">
    ///     Amount of bill of exchange to change status.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setBlankNote(LedgerJournalTrans _ledgerJournalTrans,
                                BankNegInstQty _blankNotes = 1)
    {
        while (_blankNotes > 0)
        {
            BankBillOfExchangeTable::setBillOfExchangeDocStatus(accountId,
                                                                this.noteNum(),
                                                                BankBillOfExchangeStatus::NotPrinted,
                                                                _ledgerJournalTrans.TransDate,
                                                                '',
                                                                '',
                                                                _ledgerJournalTrans.CurrencyCode,
                                                                0);
            _blankNotes--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNoteNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set the number of the bill of exchange.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setNoteNum()
    {
        BankBillOfExchangeTable bankBillOfExchangeTable;

        switch (noteNumMethod)
        {
            case BankBillOfExchangeNumMethod::Free :
                select maxof(BillOfExchangeNum) from bankBillOfExchangeTable
                    where bankBillOfExchangeTable.BankAccountID == accountId;

                firstNoteNum = NumberSeq::numRemoveFormat(bankBillOfExchangeTable.BillOfExchangeNum, '') + 1;
                break;

            case BankBillOfExchangeNumMethod::Fixed :
                firstNoteNum = NumberSeq::numRemoveFormat(BankBillOfExchangeTable::findNextFree(accountId), '');
                if (! firstNoteNum)
                {
                    throw error(strFmt("@SYS83609", accountId));
                }
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     If there is no value in PaymReference field of the line of journal, this receives _bankBillOfExchangeNum.
    /// </summary>
    /// <param name="_bankBillOfExchangeNum">
    ///     Bill of exchange number.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///     Transaction of the journal.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPaymentRef(BankBillOfExchangeNum _bankBillOfExchangeNum,
                                LedgerJournalTrans _ledgerJournalTrans)
    {
        if (!_ledgerJournalTrans.PaymReference)
        {
            _ledgerJournalTrans.PaymReference = _bankBillOfExchangeNum;
        }

        _ledgerJournalTrans.BankBillOfExchangeNum = _bankBillOfExchangeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>slipTxtLines</Name>
				<Source><![CDATA[
    private Counter slipTxtLines(BankBillOfExchangeLayout _bankBillOfExchangeLayout)
    {
        BankBillOfExchangeLength noteDocMm;
        switch (_bankBillOfExchangeLayout.NoteFormType)
        {
            case BankBillOfExchangeFormType::ESStyle :
                noteDocMm = 100;
                break;

            default :
                throw error("@SYS113320");
        }

        BankBillOfExchangeLength bottomMargin = 0;
        BankBillOfExchangeLength paperLength = this.convertToMm(_bankBillOfExchangeLayout.PaperSize, _bankBillOfExchangeLayout.PaperSizeUnit) - bottomMargin;
        BankBillOfExchangeLength noteStartPosition = this.convertToMm(_bankBillOfExchangeLayout.NoteStartPosition, _bankBillOfExchangeLayout.NotePositionUnit);
        BankBillOfExchangeLength areaAboveNote = noteStartPosition;
        BankBillOfExchangeLength areaBelowNote = paperLength - noteDocMm - noteStartPosition;

        numOfSlips = _bankBillOfExchangeLayout.NoteSlipCopies;
        bottomMargin= 7.0;
        if (paperLength + bottomMargin < noteDocMm)
        {
            throw error(strFmt("@SYS113321", (noteDocMm + bottomMargin)));
        }

        if (areaBelowNote < 0)
        {
            throw error("@SYS113322");
        }

        Counter slipLineMax;
        BankBillOfExchangeLength slipTextAreaMm;
        if (numOfSlips > 0)
        {
            numOfSlips = min(numOfSlips, 2);

            if (numOfSlips == 1)
            {
                if (areaAboveNote > areaBelowNote)
                {
                    slipTop1 = 0;
                    slipTextAreaMm = areaAboveNote - 20;
                }
                else
                {
                    slipTop1 = any2int((noteStartPosition + noteDocMm + 20) * 100);
                    slipTextAreaMm = areaBelowNote - 20;
                }
            }

            if (numOfSlips == 2)
            {
                if (areaAboveNote > 20 && areaBelowNote > 20) // Note in the middle
                {
                    slipTextAreaMm = min(areaAboveNote, areaBelowNote) - 20;
                    slipTop1 = 0;
                    slipTop2 = any2int((noteStartPosition + noteDocMm + 10) * 100);
                }
                else
                {
                    slipTextAreaMm = slipTextAreaMm / 2;
                    if (areaAboveNote > areaBelowNote) // both slips on top of note
                    {
                        slipTextAreaMm = (areaAboveNote - 20) / 2;
                        slipTop1 = 0;
                        slipTop2 = any2int((slipTextAreaMm + 10) * 100);
                    }
                    else // both slips below note
                    {
                        slipTextAreaMm = (areaBelowNote - 20) / 2;
                        slipTop1 = any2int((noteStartPosition + noteDocMm + 10) * 100);
                        slipTop2 = any2int((noteStartPosition + noteDocMm + slipTextAreaMm + 20) * 100);
                    }
                }
            }

            slipLineMax = any2int(slipTextAreaMm * 0.24);

            if (slipLineMax <= 0)
            {
                throw error (strFmt("@SYS56616", numOfSlips));
            }
        }

        slipHeight = any2int(slipTextAreaMm * 100);
        noteTop = any2int(noteStartPosition * 100);

        return slipLineMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBankBillOfExchangePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns <c> TmpBankBillOfExchangePrintout </c> atribute.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpBankBillOfExchangePrintout tmpBankBillOfExchangePrintout()
    {
        return tmpBankBillOfExchangePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean isSuccessful;
        Version version = RunBase::getVersion(_packedClass);
        container base;

        // Unpack the fields defined by the pack list on this class as well as those
        // defined on all base classes.
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                isSuccessful = super(base);
                break;

            default :
                return false;
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Unpacks the data required for the <c>SysLastValues</c> framework.
    /// </summary>
    /// <param name="_packedValues">
    ///     The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    ///     The pack and unpack pattern does not have provisions for supporting different serialization and
    ///     <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    ///     <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    ///     <c>RunBaseBatch</c> class. Derivative classes also implement this method so that a whole object can
    ///     be unpacked for <c>SysLastValues</c>.
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        Version version=RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Enables applying export format specific criteria on the <c>QueryRun</c> class object that is
    ///     supplied to the class.
    /// </summary>
    protected void updateQuery()
    {
        queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).findRange(fieldNum(LedgerJournalTrans, JournalNum)).value(queryValue(ledgerJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    ///     Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    ///     true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     This method must validate the state of the internal variables. It is called before closing the
    ///     dialog, and should be called in the <c>run</c> method. It must only contain code that adds warnings
    ///     to the Infolog. The throw command is not allowed within this method. The method should generally
    ///     return errors using the <c>Global::CheckFailed</c> method. Export formats that are designed to
    ///     handle only one method of payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (!accountId)
        {
            ret = checkFailed("@SYS28489");
        }
        else
        {
            ret = BankAccountTable::checkIsActive(accountId);
        }

        if (!BankBillOfExchangeLayout::find(accountId))
        {
            ret = checkFailed(strFmt("@SYS81500",accountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new CustBillOfExchangeDocument_ES().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>