<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDebitCreditNoteController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustDebitCreditNoteController</c> class is the helper class for the associated SRS Report.
/// </summary>
public class CustDebitCreditNoteController extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    PrintCopyOriginal                   printCopyOriginal;
    RecordSortedList                    journalList;
    Object                              docmSetObject;
    SalesInvoiceJournalPrint            salesInvoiceJournalPrint;
    SalesFormLetter_FreeText            salesFormLetter;
    CustInvoiceJour                     custInvoiceJour;
    CustInvoiceJourAdjustment           custInvoiceJourAdjustment;
    SalesInvoiceContract                salesInvoiceContract;
    protected boolean                   isFreeText;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsFreeText</Name>
				<Source><![CDATA[
    public boolean parmIsFreeText(boolean _isFreeText = isFreeText)
    {
        isFreeText = _isFreeText;
        return isFreeText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00004, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default values for the report parameters.
    /// </summary>
    public void preRunModifyContract()
    {
        CompanyInfo                     companyInfo;
        TaxAgent                        agent ;
        ReasonTableRef                  reasonRef ;
        ReasonTable                     reasonTable;
        CustTable                       custTable;
        CustDebitCreditNoteContract     rdpContract;
        TaxUnrealizedDocuPrintHeader    docHeader;
        custInvoiceJourExtensionTH      custInvoiceJourExtensionTH;
        // <GTH>
        DirPartyLocation    dirPartyLocation;
        TaxInformation_TH   taxInformation_TH;
        // </GTH>

        custInvoiceJour             = this.parmArgs().record();
        custInvoiceJourExtensionTH  = custInvoiceJour.custInvoiceJourExtensionTH();

        companyInfo         = CompanyInfo::find();
        agent               = TaxAgent::find(custInvoiceJourExtensionTH.TaxAgent);
        reasonRef           = ReasonTableRef::find(custInvoiceJourExtensionTH.ReasonTableRef);
        reasonTable         = ReasonTable::find(reasonRef.Reason);
        custTable           = CustTable::find(custInvoiceJour.OrderAccount);

        rdpContract         = this.parmReportContract().parmRdpContract() as CustDebitCreditNoteContract;
        printCopyOriginal   = this.parmArgs().parmEnum();

        rdpContract.parmRecordId(custInvoiceJour.RecId);
        // Set the caller
        docmSetObject = this.parmArgs().caller();

        if (classIdGet(docmSetObject) == classNum(SalesInvoiceJournalPrint))
        {
            salesInvoiceJournalPrint = docmSetObject as SalesInvoiceJournalPrint;
            if (salesInvoiceJournalPrint && salesInvoiceJournalPrint.parmDocuSetCode())
            {
                docHeader = salesInvoiceJournalPrint.parmPrintHeader();

                rdpContract.parmProdType(salesInvoiceJournalPrint.parmProdType());
                rdpContract.parmPrintHeader(docHeader);
                rdpContract.parmLocation(salesInvoiceJournalPrint.parmLocation());
                rdpContract.parmMiscText(salesInvoiceJournalPrint.parmMiscText());
            }
        }
        else if (classIdGet(docmSetObject) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetter = docmSetObject as SalesFormLetter_FreeText;
            if (salesFormLetter && salesFormLetter.parmDocuSetCode())
            {
                docHeader = salesFormLetter.parmPrintHeader();

                rdpContract.parmProdType(salesFormLetter.parmProdType());
                rdpContract.parmPrintHeader(docHeader);
                rdpContract.parmLocation(salesFormLetter.parmLocation());
                rdpContract.parmMiscText(salesFormLetter.parmMiscText());
            }
        }

        if (custInvoiceJourExtensionTH.NoteFormat       == TaxUnrealizedSalesNoteFormat::CreditNoteValue
            || custInvoiceJourExtensionTH.NoteFormat    == TaxUnrealizedSalesNoteFormat::CreditNoteQuantity)
        {
            // Credit note
            rdpContract.parmTypeOfReport(false);
            //Added comment to have difference between SYS and SYP
            if (docHeader)
            {
                rdpContract.parmTitle(docHeader);
            }
            else
            {
                rdpContract.parmTitle(SysLabel::labelId2String(literalStr("@SYS8125"), custInvoiceJour.LanguageId));
            }
        }
        else
        {
            // Debit note
            rdpContract.parmTypeOfReport(true);
            if (docHeader)
            {
                rdpContract.parmTitle(docHeader);
            }
            else
            {
                rdpContract.parmTitle(SysLabel::labelId2String(literalStr("@SYS4082667"), custInvoiceJour.LanguageId));
            }
        }

        rdpContract.parmTitleNote(SalesInvoiceDPBase::invoiceTxtNote_TH(custInvoiceJour, custInvoiceJourAdjustment, printCopyOriginal));
        if (custInvoiceJourAdjustment)
        {
            rdpContract.parmRemarkTxt(custInvoiceJourAdjustment.remarkTxt());
            rdpContract.parmAdjustmentDetailsTxt(custInvoiceJourAdjustment.adjustmentDetailsTxt());
        }
        rdpContract.parmPrintCopyOriginal(printCopyOriginal);
        // tax branch name
        rdpContract.parmTaxBranchCode(TaxBranchType::getTBDisplayValueByDefaultDimension(custInvoiceJour.DefaultDimension));
        rdpContract.parmTaxBranchName(TaxBranch::getReportTaxBranchStr(rdpContract.parmTaxBranchCode()));
        // info about credit/debit note
        rdpContract.parmPrintDate(custInvoiceJour.InvoiceDate);
        rdpContract.parmReference(custInvoiceJourExtensionTH.RefInvoiceId);
        rdpContract.parmNum(custInvoiceJourAdjustment ? custInvoiceJourAdjustment.TaxInvoiceId : custInvoiceJour.InvoiceId);

        // company infomation;
        rdpContract.parmCompanyAddress(companyInfo.postalAddress().Address);
        rdpContract.parmCompanyNum(companyInfo.CoRegNum);
        // customer info
        rdpContract.parmCustName(custInvoiceJourAdjustment ? custInvoiceJourAdjustment.InvoicingName : custInvoiceJour.InvoicingName);
        rdpContract.parmCustAddress(custInvoiceJourAdjustment ? custInvoiceJourAdjustment.InvoicingAddress : custInvoiceJour.invoicingAddress());

        if (custInvoiceJourAdjustment)
        {
            rdpContract.parmCustNum(custInvoiceJourAdjustment.InvoiceVATNum);
        }
        else if (custInvoiceJour.SalesId)
        {
            rdpContract.parmCustNum(custInvoiceJour.salesTable().vatNum);
        }
        else
        {
            rdpContract.parmCustNum(custInvoiceJour.custInvoiceTable().VATNum);
        }
        // agent info
        rdpContract.parmAgentAddress(agent.address());
        rdpContract.parmAgentName(agent.name());
        rdpContract.parmAgentNum(agent.TaxRegNum);

        rdpContract.parmOriginalAmount(custInvoiceJourExtensionTH.RefInvoiceAmountCur);
        rdpContract.parmVAT(custInvoiceJour.SumTax);
        rdpContract.parmReason(reasonTable.Description);

        // <GTH>
        dirPartyLocation = DirPartyLocation::findByPartyLocation(
            custInvoiceJour.custTable_InvoiceAccount().Party,
            LogisticsPostalAddress::getLocation(custInvoiceJour.InvoicePostalAddress));

        taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);

        rdpContract.parmTaxRegistrationNumber(custInvoiceJourAdjustment ?
                                              custInvoiceJourAdjustment.InvoiceTaxRegNumber :
                                              TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(custInvoiceJour).RegistrationNumber);
        rdpContract.parmTaxNatureOfAddress(taxInformation_TH.TaxNatureOfAddress);
        rdpContract.parmBranchNumber(custInvoiceJourAdjustment ? custInvoiceJourAdjustment.InvoiceBranch : taxInformation_TH.BranchNumber);
        this.parmReportContract().parmRdlContract().parmLabelLanguageId(custInvoiceJour.LanguageId);
        this.parmReportContract().parmRdlContract().parmLanguageId(custInvoiceJour.LanguageId);
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentSetForFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints document set for free text invoice.
    /// </summary>
    /// <param name="_args">
    /// Parameter args.
    /// </param>
    public void printDocumentSetForFreeTextInvoice(Args _args)
    {
        CustDebitCreditNoteController       controller;
        SalesFormLetter                     salesFormLetterLocal;
        TaxUnrealizedDocuSetLine            docuSetLineLocal;
        TaxUnrealizedDocuSetTable           docuSetTableLocal;
        SRSCatalogItemName                  reportNameLocal;
        boolean                             firstSet = true;
        SalesDocumentSetSelector            docuSetSelector;
        TaxUnrealizedDocuId                 docuCode;

        isFreeText = true;
        reportNameLocal = PrintMgmtDocType::construct(PrintMgmtDocumentType::CustDebitCreditNote).getDefaultReportFormat();

        // true if print report in free text invoice posting, false if print report via free text invoice journal form.
        if (classIdGet(_args.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetterLocal = _args.caller();
            docuCode        = salesFormLetterLocal.parmDocuSetCode();
        }
        else
        {
            docuSetSelector = new SalesDocumentSetSelector();

            if (docuSetSelector.run()
                && docuSetSelector.getDocuCode())
            {
                docuCode = docuSetSelector.getDocuCode();
                salesFormLetterLocal = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
                salesFormLetterLocal.parmDocuSetCode(docuCode);
            }
        }

        // true to print document set, false to print original report.
        if (docuCode)
        {
            this.parmArgs(_args);
            this.parmReportName(reportNameLocal);
            this.parmShowDialog(false);
            this.startOperation();

            while select PrintHeader from docuSetLineLocal
                order by docuSetLineLocal.RecId
                join ProdType, Location, MiscText from docuSetTableLocal
                    where docuSetLineLocal.TaxUnrealizedDocuSetTable    == docuSetTableLocal.RecId
                        && docuSetTableLocal.Code                       == docuCode
            {
                if (firstSet)
                {
                    salesFormLetterLocal.parmProdType(docuSetTableLocal.ProdType);
                    salesFormLetterLocal.parmLocation(docuSetTableLocal.Location);
                    salesFormLetterLocal.parmMiscText(docuSetTableLocal.MiscText);
                    firstSet = false;
                }
                salesFormLetterLocal.parmPrintHeader(docuSetLineLocal.PrintHeader);
                _args.caller(salesFormLetterLocal);
                controller = new CustDebitCreditNoteController();
                controller.parmArgs(_args);
                controller.parmReportName(reportName);
                controller.parmShowDialog(false);
                controller.startOperation();
            }
        }
        else
        {
            this.parmArgs(_args);
            this.parmReportName(reportNameLocal);
            this.parmShowDialog(false);
            this.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentSetForSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints document set for sales invoice.
    /// </summary>
    /// <param name="_args">
    /// Parameter args.
    /// </param>
    public void printDocumentSetForSalesInvoice(Args _args)
    {
        CustDebitCreditNoteController       controller;
        SalesInvoiceJournalPrint            salesInvoiceJournalPrintLocal;
        SalesFormLetter_FreeText            salesFormLetterLocal;
        TaxUnrealizedDocuSetLine            docuSetLineLocal;
        TaxUnrealizedDocuSetTable           docuSetTableLocal;
        SRSCatalogItemName                  reportNameLocal;
        boolean                             firstSet = true;
        SalesDocumentSetSelector            docuSetSelector;
        TaxUnrealizedDocuId                 docuCode;

        isFreeText = false;
        reportNameLocal = PrintMgmtDocType::construct(PrintMgmtDocumentType::CustDebitCreditNote).getDefaultReportFormat();

        // true if print report in invoice posting, false if print report via invoice journal form.
        if (classIdGet(_args.caller()) == classNum(SalesInvoiceJournalPrint))
        {
            salesInvoiceJournalPrintLocal = _args.caller() as SalesInvoiceJournalPrint;
            docuCode = salesInvoiceJournalPrintLocal.parmDocuSetCode();
        }
        else if (classIdGet(_args.caller()) == classNum(SalesFormLetter_FreeText))
        {
            salesFormLetterLocal    = _args.caller() as SalesFormLetter_FreeText;
            docuCode                = salesFormLetterLocal.parmDocuSetCode();
        }
        else
        {
            docuSetSelector = new SalesDocumentSetSelector();

            if (docuSetSelector.run()
                && (docuSetSelector.getDocuCode()))
            {
                docuCode = docuSetSelector.getDocuCode();
                salesInvoiceJournalPrintLocal = SalesInvoiceJournalPrint::construct();
                salesInvoiceJournalPrintLocal.parmDocuSetCode(docuCode);
            }
        }

        this.parmArgs(_args);
        this.parmReportName(reportNameLocal);
        this.parmShowDialog(false);
        this.startOperation();

        // true to print document set.
        if (docuCode != '')
        {
            while select PrintHeader from docuSetLineLocal
                order by docuSetLineLocal.RecId
                join ProdType, Location, MiscText from docuSetTableLocal
                    where docuSetLineLocal.TaxUnrealizedDocuSetTable    == docuSetTableLocal.RecId
                        && docuSetTableLocal.Code                       == docuCode
            {
                if (firstSet)
                {
                    salesInvoiceJournalPrintLocal.parmProdType(docuSetTableLocal.ProdType);
                    salesInvoiceJournalPrintLocal.parmLocation(docuSetTableLocal.Location);
                    salesInvoiceJournalPrintLocal.parmMiscText(docuSetTableLocal.MiscText);
                    firstSet = false;
                }
                salesInvoiceJournalPrintLocal.parmPrintHeader(docuSetLineLocal.PrintHeader);
                _args.caller(salesInvoiceJournalPrintLocal);
                controller = new CustDebitCreditNoteController();
                controller.parmArgs(_args);
                controller.parmReportName(reportNameLocal);
                controller.parmShowDialog(false);
                controller.startOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'TH-00003';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        CustInvoiceJour custInvoiceJourLocal;
        CustDebitCreditNoteController controller = new CustDebitCreditNoteController();
        CustInvoiceJourAdjustment custInvoiceJourAdjustment;

        custInvoiceJourLocal = _args.record();

        if (!CustInvoiceJourExtensionTH::canInvoiceBePrinted(_args))
        {
            return;
        }

        if (custInvoiceJourLocal)
        {
            if (TaxThaiGovCertificationFeatureChecker::isSubstitutionAdjustmentEnabled())
            {
                custInvoiceJourAdjustment = CustInvoiceJourAdjustment::findLatestByCustInvoiceJour(
                                                            custInvoiceJourLocal.RecId,
                                                            CustInvoiceJourAdjustment::getAdjustmentTypeFromArgs(_args));
                controller.parmCustInvoiceJourAdjustment(custInvoiceJourAdjustment);
            }

            if (custInvoiceJourLocal.SalesId)
            {
                controller.printDocumentSetForSalesInvoice(_args);
            }
            else
            {
                controller.printDocumentSetForFreeTextInvoice(_args);
            }

            if (TaxThaiGovCertificationFeatureChecker::isSubstitutionAdjustmentEnabled())
            {
                CustInvoiceJourAdjustment::markInvoiceAsPrinted(custInvoiceJourLocal.RecId, custInvoiceJourAdjustment.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJourAdjustment</Name>
				<Source><![CDATA[
    public CustInvoiceJourAdjustment parmCustInvoiceJourAdjustment(CustInvoiceJourAdjustment _custInvoiceJourAdjustment = custInvoiceJourAdjustment)
    {
        custInvoiceJourAdjustment = _custInvoiceJourAdjustment;
        return custInvoiceJourAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes instance of form letter object.
    /// </summary>
    /// <remarks>
    /// This method is called by framework from startOperation(). It provides the necessary construction of Form letter class.
    /// </remarks>
    protected void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::CustDebitCreditNote);
        formLetterReport.parmPrintType(this.parmArgs().parmEnum());
        
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId2RecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is concatenation of # and the custInvoiceJour.RecId
    /// This method will strip the leading # and cast the string to a int64.
    /// </summary>
    /// <param name = "_invoiceId">Invoice ID string.</param>
    /// <returns>Invoice ID in int64 format.</returns>
    protected RecId invoiceId2RecID(InvoiceId _invoiceId)
    {
        return str2int64(subStr(_invoiceId, 2, strLen(_invoiceId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        this.preRunModifyContract();

        if (isFreeText)
        {
            // Determine where to start looking for Print Mgmt settings for Free Text Invoice
            CustInvoiceTable custInvoiceTable;
            if (custInvoiceJour.isProforma())
            {
                // custInvoiceJour.InvoiceId is # + Recid so we must strip the leading #
                select firstonly custInvoiceTable
                    where custInvoiceTable.RecId == this.invoiceId2RecID(custInvoiceJour.InvoiceId);
            }
            else
            {
                select firstonly custInvoiceTable
                    where custInvoiceTable.InvoiceId == custInvoiceJour.InvoiceId &&
                    custInvoiceTable.InvoiceDate == custInvoiceJour.InvoiceDate &&
                    custInvoiceTable.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup;
            }
            formLetterReport.loadPrintSettings(custInvoiceJour, custInvoiceTable, custInvoiceJour.LanguageId);
        }
        else
        {
            // Determine where to start looking for Print Mgmt settings for Sales Invoice
            Common printMgmtReferencedTable;
            if (SalesParameters::find().DeleteHeading == NoYes::Yes)
            {
                // The original SalesTable record no longer exists, so skip that Print Mgmt level
                // and start with the customer instead.
                printMgmtReferencedTable = custInvoiceJour.custTable_InvoiceAccount();

                if (printMgmtReferencedTable == null)
                {
                    printMgmtReferencedTable = custInvoiceJour.custTable_OrderAccount();
                }
            }
            else
            {
                printMgmtReferencedTable = custInvoiceJour.salesTable();
            }
            formLetterReport.loadPrintSettings(custInvoiceJour, printMgmtReferencedTable, custInvoiceJour.LanguageId);
        }

        this.outputReports();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>