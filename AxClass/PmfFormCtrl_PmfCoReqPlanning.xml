<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_PmfCoReqPlanning</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form PmfCoReqPlanning, currently to display InventoryDimensions.
/// </summary>
public class PmfFormCtrl_PmfCoReqPlanning extends PmfFormCtrl
{
    InventDimCtrl_Frm   inventDimFormSetup;
    ItemId              planningItemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes objects needed for Dimensions display.
    /// </summary>
    /// <exception cref="wrongUseOfFunction" label="funcname()">
    /// Launched when the class was not instanciated from the PmfCoReqPlanning form.
    /// </exception>
    /// <example>
    /// PmfFormCtrl_PmfCoReqPlanning.initPost();
    /// </example>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        inventDimFormSetup = PmfInventDimCtrl_Frm_PmfCoReqPlanning::newFromForm(formRun);

        this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(PmfCoReqPlanning, PlanQty)),
                    methodstr(PmfFormCtrl_PmfCoReqPlanning, pdsIsNotCWItem),
                    ButtonRuleEffectType::Enabled);
        
        this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(PmfCoReqPlanning, PdsCWPlanQty)),
                    methodstr(PmfFormCtrl_PmfCoReqPlanning, pdsIsCWItem),
                    ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the InventDimCtrl_Frm object associated with the PmfCoReqPlanning form.
    /// </summary>
    /// <returns>
    /// The InventDimCtrl_Frm object associated with the PmfCoReqPlanning form.
    /// </returns>
    public InventDimCtrl inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// A protected new.
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanningItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the planning item
    /// </summary>
    /// <param name="_itemId">
    /// Planning Item
    /// </param>
    public void parmPlanningItemId(ItemId _itemId)
    {
        planningItemId = _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns if the item is a catch weight item
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean pdsIsCWItem()
    {
        boolean ret = false;

        if (planningItemId
            && PdsGlobal::pdsIsCWItem(planningItemId))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsIsNotCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns if the item is not a catch weight item
    /// </summary>
    /// <returns>
    /// returns flag
    /// </returns>
    public boolean pdsIsNotCWItem()
    {
        return !this.pdsIsCWItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOMVersion))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hides/displays the Dimensions fields on the form.
    /// </summary>
    /// <example>
    /// PmfFormCtrl_PmfCoReqPlanning.updateDesign();
    /// </example>
    public void updateDesign()
    {
        InventDimParm inventDimParm;

        super();

        inventDimParm.initCovDimAllGrp();
        inventDimFormSetup.parmDimParmVisibleGrid(inventDimParm.data());
        inventDimFormSetup.formSetControls(true);

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of PmfFormCtrl_PmfCoReqPlanning
    /// </summary>
    /// <returns>
    /// A new instance of PmfFormCtrl_PmfCoReqPlanning.
    /// </returns>
    /// <example>
    /// PmfFormCtrl_PmfCoReqPlanning pmfFormCtrl_PmfCoReqPlanning = PmfFormCtrl_PmfCoReqPlanning::construct();
    /// </example>
    public static PmfFormCtrl_PmfCoReqPlanning construct()
    {
        return new PmfFormCtrl_PmfCoReqPlanning();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of PmfFormCtrl_PmfCoReqPlanning.
    /// </summary>
    /// <param name="_formRun">
    /// The form to be managed.
    /// </param>
    /// <returns>
    /// A new instance of PmfFormCtrl_PmfCoReqPlanning.
    /// </returns>
    public static PmfFormCtrl newFormRun(FormRun _formRun)
    {
        PmfFormCtrl pmfFormCtrl;

        pmfFormCtrl = PmfFormCtrl_PmfCoReqPlanning::construct();
        pmfFormCtrl.parmFormRun(_formRun);

        return pmfFormCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>