<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCompensationCtrller</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastCompensationCtrller</c> class is the controller class for
/// the <c>HcmPositionForecastCompensationService</c> class.
/// This applies compensation increase or update to selected forecast positions.
/// </summary>
public class HcmPositionForecastCompensationCtrller extends SysOperationServiceController implements BatchRetryable
{
    #define.CallerDataSource("HcmPositionForecastScenario")
    #define.CompensationGroupDataSource("HcmCompensationGroup")

    boolean useCustomForm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        // For the compensation update process, we do not want to show a Batch tab in the form.
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPositionForecastScenarioSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates position forecast scenario set from selected records in
    /// <c>HCMPositionForecastScenario</c> datasource.
    /// </summary>
    /// <param name="_callerForm">
    /// The caller form.
    /// </param>
    /// <param name="_selectedPosForecastScenarioIdSet">
    /// The set of selected forecast positions.
    /// </param>
    private void initPositionForecastScenarioSet(FormRun _callerForm, Set _selectedPosForecastScenarioIdSet)
    {
        FormDataSource              hcmPositionForecastScenario_ds;
        HcmPositionForecastScenario positionForecastScenario;

        hcmPositionForecastScenario_ds = _callerform.dataSource(#CallerDataSource);
        hcmPositionForecastScenario_ds.leaveRecord();

        if (_callerForm.viewOptionHelper().getViewOption() != FormViewOption::Details
             && hcmPositionForecastScenario_ds.anyMarked())
        {
            //
            // Get the references to the marked positions and ensures that positions are traversed only if the increase operation
            // is performed from the list page.
            //
            positionForecastScenario = hcmPositionForecastScenario_ds.getFirst(true);

            while (positionForecastScenario)
            {
                _selectedPosForecastScenarioIdSet.add(positionForecastScenario.RecId);
                positionForecastScenario = hcmPositionForecastScenario_ds.getNext();
            }
        }
        else
        {
            positionForecastScenario = hcmPositionForecastScenario_ds.cursor();
            _selectedPosForecastScenarioIdSet.add(positionForecastScenario.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseCustomForm</Name>
				<Source><![CDATA[
    public boolean parmUseCustomForm(boolean _useCustomForm = useCustomForm)
    {
        useCustomForm = _useCustomForm;
        return useCustomForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the caller form datasource.
    /// </summary>
    /// <param name="_args">
    /// The args from caller form.
    /// </param>
    private void refreshCaller(Args _args)
    {
        FormDataSource      callerForm_DS;

        // Refresh the budget cost grid
        if (HcmPositionForecastCompensationCtrller::isCalledFromListPageView(_args.caller().name()))
        {
            callerForm_DS = _args.caller().dataSource(#CallerDataSource);

            if (callerForm_DS)
            {
                // Get the selected record's position before research is called, to retain the position of the updated record.
                int selectedRecordPosition = callerForm_DS.getPosition();
                callerForm_DS.research(true);
                callerForm_DS.setPosition(selectedRecordPosition);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the list of selected position(s) and adds it to the data contract.
    /// </summary>
    /// <param name="_args">
    /// The details of the calling form are contained within this parameter.
    /// </param>
    private void setContractData(Args _args)
    {
        HcmPositionForecastCompensationContract contract;
        HcmPositionForecastCompensationGroup    hcmPositionForecastCompensationGroup;
        Set                                     selectionList  = new Set(Types::Int64);
        FormRun                                 callerForm = _args.caller();

        contract = this.getDataContractObject();

        if (callerForm == null)
        {
            throw error(Error::missingParameter(this));
        }

        if (HcmPositionForecastCompensationCtrller::isCalledFromListPageView(_args.caller().name()))
        {
            this.initPositionForecastScenarioSet(callerForm, selectionList);
            contract.parmPositionForecastScenarioContainer(selectionList.pack());
        }
        else if (_args.caller().name() == formStr(HcmPositionForecastCompensationGroup))
        {
            hcmPositionForecastCompensationGroup = callerform.dataSource(#CompensationGroupDataSource).cursor();
            contract.parmCompGroupRecId(hcmPositionForecastCompensationGroup.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    public FormName templateForm()
    {
        FormName formName;

        if (this.parmUseCustomForm())
        {
            // Need to launch the custom dialog when the process is launched for compensation rate update.
            formName = formStr(HcmPositionForecastCompRateUpdate);
        }
        else
        {
            formName = super();
        }

        return formName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompensationController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>HcmPositionForecastCompensationCtrller</c> class.
    /// </summary>
    /// <param name="_args">
    /// The details of the calling form are contained within this parameter.
    /// </param>
    /// <returns>
    /// An instance of the class <c>HcmPositionForecastCompensationCtrller</c>.
    /// </returns>
    public static HcmPositionForecastCompensationCtrller createCompensationController(Args _args)
    {
        boolean                                hasCustomForm;
        SysOperationExecutionMode              executionMode;
        HcmPositionForecastCompensationCtrller controller;

        if (HcmPositionForecastCompensationCtrller::isCalledFromListPageView(_args.caller().name()))
        {
            // In order to refresh the forecast detail form to show the increase cost line right after the increase process is done,
            // need to launch the increase process synchronously.
            executionMode = SysOperationExecutionMode::Synchronous;
        }
        else
        {
            // Launch the increase process asynchronously if multiple positions are selected from the forecast position list page,
            // or if the update process is launched from the compensation group form.
            executionMode = SysOperationExecutionMode::ReliableAsynchronous;
        }

        controller = new HcmPositionForecastCompensationCtrller(classStr(HcmPositionForecastCompensationService),
                                                                methodStr(HcmPositionForecastCompensationService, processPositionForecastCompensation),
                                                                executionMode);

        if (_args.caller().name() == formStr(HcmPositionForecastCompensationGroup))
        {
            hasCustomForm = true;
        }

        // To set the parameters to the controller.
        controller.parmArgs(_args);
        controller.parmUseCustomForm(hasCustomForm);
        controller.parmLoadFromSysLastValue(false);

        // To display the custom form as needed.
        controller.parmShowDialog(hasCustomForm);

        // Initialize the contract object.
        controller.setContractData(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmationForIncrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the confirmation answer from the compensation increase message for the forecast position.
    /// </summary>
    /// <returns>
    /// true if the answer is Yes from the confirmation message window; otherwise, false.
    /// </returns>
    public static boolean getConfirmationForIncrease()
    {
        DialogButton answer;
        str strMessage = "@Budget:BudgetPlan_PositionForecasting_HcmPositionForecast_GenerateIncreasesConfirmationMessage";
        str strTitle = "@SYS116555";

        // Initial focus is on the No button.
        answer = Box::yesNo(
                    strMessage,
                    DialogButton::No,
                    strTitle);

        return (answer == DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromListPageView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the compensation controller was called from either the <c>HcmPositionForecast</c> or <c>BudgetPlanningWorkspacePositionForecastPart</c> forms.
    /// </summary>
    /// <param name = "_formStr"> The <c>FormName</c> value of the calling form name. </param>
    /// <returns> true, if the controller was called from either of the two forms; otherwise, false. </returns>
    public static boolean isCalledFromListPageView(FormName _formStr)
    {
        return (_formStr == formStr(HcmPositionForecast)
                || _formStr == BudgetPlanningConstants::WorkspacePositionForecastPart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>HcmPositionForecastCompensationCtrller</c> class instance and starts operation.
    /// </summary>
    /// <param name = "_args">
    /// The details of the calling form are contained within this parameter.
    /// </param>
    public static void main(Args _args)
    {
        boolean compensationIncrease;
        HcmPositionForecastCompensationCtrller controller;

        if (_args && _args.caller())
        {
            if (HcmPositionForecastCompensationCtrller::isCalledFromListPageView(_args.caller().name()))
            {
                // Need to show the confirmation dialog for compensation increase from the forecast position detail form or the list page
                compensationIncrease = HcmPositionForecastCompensationCtrller::getConfirmationForIncrease();
            }

            if (compensationIncrease || _args.caller().name() == formStr(HcmPositionForecastCompensationGroup))
            {
                controller = HcmPositionForecastCompensationCtrller::createCompensationController(_args);

                controller.startOperation();

                // Refresh caller
               controller.refreshCaller(_args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>