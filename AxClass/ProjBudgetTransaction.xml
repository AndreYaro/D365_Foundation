<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjBudgetTransaction</c> class is used to hold a set of the <c>ProjBudgetTransactionLine</c> objects.
/// </summary>
class ProjBudgetTransaction
{
    Set budgetTransactionLinesSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds budget transaction line to a set.
    /// </summary>
    /// <param name="_budgetTransactionLine">
    /// An object of the <c>ProjBudgetTransactionLine</c> class.
    /// </param>
    public void addBudgetTransactionLine(ProjBudgetTransactionLine _budgetTransactionLine)
    {
        if (!budgetTransactionLinesSet.in(_budgetTransactionLine))
        {
            budgetTransactionLinesSet.add(_budgetTransactionLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTransactionLinesEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the enumerator of the <c>BudgetTransactionLinesSet</c> instance variable.
    /// </summary>
    /// <returns>
    ///    The enumerator of the <c>BudgetTransactionLinesSet</c> instance variable.
    /// </returns>
    public SetEnumerator getBudgetTransactionLinesEnumerator()
    {
        return budgetTransactionLinesSet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        budgetTransactionLinesSet = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object of the <c>ProjBudgetTransaction</c> class based on the input parameter.
    /// </summary>
    /// <param name="_buffer">
    /// The table buffer.
    /// </param>
    /// <param name="_throwError">
    /// Determines whether an error will be thrown.
    /// </param>
    /// <returns>
    /// An object of the <c>ProjBudgetTransaction</c> class.
    /// </returns>

    public static ProjBudgetTransaction construct(Common _buffer, boolean _throwError = true)
    {
        ProjBudgetTransaction               projBudgetTransaction;
        ProjBudgetTransactionLine           projBudgetTransactionLine;

        PurchReqTable                       purchReqTable;
        PurchReqLine                        purchReqLine;
        PurchLine                           purchLine;
        ProjJournalTable                    projJournalTable;
        ProjJournalTrans                    projJournalTrans;
        LedgerJournalTable                  ledgerJournalTable;
        LedgerJournalTrans                  ledgerJournalTrans;
        InventJournalTable                  inventJournalTable;
        InventJournalTrans                  inventJournalTrans;
        ProjEmplTrans                       projEmplTrans;
        ProjCostTrans                       projCostTrans;
        ProjRevenueTrans                    projRevenueTrans;
        ProjItemTrans                       projItemTrans;
        TmpProjAdjustmentCreate             tmpProjAdjustmentCreate;

        SalesLine                           salesLine;
        ProdTable                           prodTable;
        ProdRouteProj                       prodRouteProj;
        ProdBOM                             prodBOM;

        ProjBegBalJournalTrans_CostSales    projBegBalJournalTrans_CostSales;
        ProjBegBalJournalTrans_Fee          projBegBalJournalTrans_Fee;

        ProjProposalEmplDetail              projProposalEmplDetail;
        ProjProposalCostDetail              projProposalCostDetail;
        ProjProposalItemDetail              projProposalItemDetail;

        ProjCostTransSale                   projCostTransSale;
        ProjEmplTransSale                   projEmplTransSale;
        ProjItemTransSale                   projItemTransSale;

        TSTimesheetTrans                    tsTimesheetTrans;

        LedgerJournalTrans_Project          ledgerJournalTrans_Proj;

        projBudgetTransaction = new ProjBudgetTransaction();

        switch (_buffer.TableId)
        {
            case tableNum(PurchReqTable):
                purchReqTable = _buffer as PurchReqTable;
                while select PurchReqTable, ProjId, ProjTransId, ProjCategoryId, PurchQty, ProjSalesPrice, TransDate, CurrencyCode, ProjSalesCurrencyId, SourceDocumentLine from purchReqLine where purchReqLine.PurchReqTable == purchReqTable.RecId
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(purchReqLine);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                }
                break;

            case tableNum(PurchReqLine):
                    purchReqLine = _buffer as PurchReqLine;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(purchReqLine);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(PurchLine):
                    purchLine = _buffer as PurchLine;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(purchLine);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjJournalTable):
                projJournalTable = _buffer as ProjJournalTable;
                while select projJournalTrans where projJournalTrans.JournalId == projJournalTable.JournalId
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projJournalTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                }
                break;

            case tableNum(ProjJournalTrans):
                    projJournalTrans = _buffer as ProjJournalTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projJournalTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(InventJournalTable):
                inventJournalTable = _buffer as InventJournalTable;
                while select inventJournalTrans where inventJournalTrans.JournalId == inventJournalTable.JournalId
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(inventJournalTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                }
                break;

            case tableNum(InventJournalTrans):
                    inventJournalTrans = _buffer as InventJournalTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(inventJournalTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(LedgerJournalTable):
                ledgerJournalTable = _buffer as LedgerJournalTable;
                while select JournalNum, TransDate, CurrencyCode, ExchRate from ledgerJournalTrans where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                {
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(ledgerJournalTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                }
                break;

            case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = _buffer as LedgerJournalTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(ledgerJournalTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(LedgerJournalTrans_Project):
                    ledgerJournalTrans_Proj = _buffer as LedgerJournalTrans_Project;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(ledgerJournalTrans_Proj);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjEmplTrans):
                    projEmplTrans = _buffer as ProjEmplTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projEmplTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjItemTrans):
                    projItemTrans = _buffer as ProjItemTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projItemTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(SalesLine):
                    salesLine = _buffer as SalesLine;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(salesLine);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(TmpProjAdjustmentCreate):
                    tmpProjAdjustmentCreate = _buffer as TmpProjAdjustmentCreate;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(tmpProjAdjustmentCreate);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProdTable):
                    prodTable = _buffer as ProdTable;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodTable);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjRevenueTrans):
                    projRevenueTrans = _buffer as ProjRevenueTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projRevenueTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProdRouteProj):
                    prodRouteProj = _buffer as ProdRouteProj;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodRouteProj);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjCostTrans):
                    projCostTrans = _buffer as ProjCostTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projCostTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProdBOM):
                prodBOM = _buffer as ProdBOM;
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(prodBOM);
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
            break;

            case tableNum(ProjBegBalJournalTrans_CostSales):
                projBegBalJournalTrans_CostSales = _buffer as ProjBegBalJournalTrans_CostSales;
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projBegBalJournalTrans_CostSales);
                AmountMST salesAmountInTransactionCurrency = projBegBalJournalTrans_CostSales.Quantity * projBegBalJournalTrans_CostSales.SalesPrice;
      
                CurrencyExchangeHelper currencyHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
                AmountMST salesAmountInAccountingCurr = currencyHelper.calculateTransactionToAccounting(projBegBalJournalTrans_CostSales.ProjSalesCurrencyId, salesAmountInTransactionCurrency, true);
                
                projBudgetTransactionLine.parmSalesAmount(salesAmountInAccountingCurr);
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;
            
            case tableNum(ProjBegBalJournalTrans_Fee):
                projBegBalJournalTrans_Fee = _buffer as ProjBegBalJournalTrans_Fee;
                projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projBegBalJournalTrans_Fee);
                projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjProposalEmplDetail):
                    projProposalEmplDetail = _buffer as ProjProposalEmplDetail;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projProposalEmplDetail);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjProposalCostDetail):
                    projProposalCostDetail = _buffer as ProjProposalCostDetail;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projProposalCostDetail);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjProposalItemDetail):
                    projProposalItemDetail = _buffer as ProjProposalItemDetail;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projProposalItemDetail);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjCostTransSale):
                    projCostTransSale = _buffer as ProjCostTransSale;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projCostTransSale);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjEmplTransSale):
                    projEmplTransSale = _buffer as ProjEmplTransSale;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projEmplTransSale);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(ProjItemTransSale):
                    projItemTransSale = _buffer as ProjItemTransSale;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(projItemTransSale);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            case tableNum(TSTimesheetTrans):
                    tsTimesheetTrans = _buffer as TSTimesheetTrans;
                    projBudgetTransactionLine = ProjBudgetTransactionLine::construct(tsTimesheetTrans);
                    projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);
                break;

            default :
                if (_throwError)
                {
                    throw error(strFmt("@SYS23396",funcName()));
                }
        }

        return projBudgetTransaction;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>