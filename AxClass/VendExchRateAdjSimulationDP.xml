<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendExchRateAdjSimulationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendExchRateAdjSimulationDP</c> class fetches records for the
/// <c>VendExchRateAdjSimulation</c> SRSS report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(VendExchAdj)),
    SRSReportParameterAttribute(classstr(CustVendExchRateAdjSimulationContract))
]
public class VendExchRateAdjSimulationDP extends CustVendExchAdjSimulationDP
{
    VendExchRateAdjSimulationTmp vendExchRateAdjSimulationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQueryRange</Name>
				<Source><![CDATA[
    protected void addQueryRange(QueryRun _queryRun)
    {
        QueryBuildRange queryBuildRange;

        queryBuildRange = _queryRun.query().dataSourceTable(tablenum(VendTrans)).addRange(fieldnum(VendTrans, TransDate));
        queryBuildRange.value(queryRange(dateNull(), this.getConsideredDate()));
        queryBuildRange = _queryRun.query().dataSourceTable(tablenum(VendTrans)).addRange(fieldnum(VendTrans, LastExchAdj));
        queryBuildRange.value(queryRange(dateNull(), this.getConsideredDate()));
        queryBuildRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOpenTransQuery</Name>
				<Source><![CDATA[
    protected Query createOpenTransQuery(Query _baseQuery)
    {
        container originalQueryContainer;
        Query openTransQuery;
        QueryBuildDataSource vendTransDs;
        QueryBuildDataSource vendTransOpenDs;
        
        // Pack/unpack query to get a fresh instance
        originalQueryContainer = _baseQuery.pack();
        openTransQuery = new Query(originalQueryContainer);
        
        // Create a query to get open transactions based on the user-defined query
        vendTransDs = openTransQuery.dataSourceTable(tablenum(VendTrans));
        
        vendTransOpenDs = vendTransDs.addDataSource(tablenum(VendTransOpen));
        vendTransOpenDs.addLink(fieldnum(VendTrans, RecId), fieldnum(VendTransOpen, RefRecId));
        vendTransOpenDs.joinMode(JoinMode::InnerJoin);
        vendTransOpenDs.fetchMode(QueryFetchMode::One2One);
        vendTransOpenDs.relations(false);
        
        return openTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettledTransQuery</Name>
				<Source><![CDATA[
    protected Query createSettledTransQuery(Query _baseQuery)
    {
        container originalQueryContainer;
        Query settledTransQuery;
        QueryBuildDataSource vendTransDs;
        QueryBuildDataSource vendSettlementDs;
        
        // Pack/unpack query to get a fresh instance
        originalQueryContainer = _baseQuery.pack();
        settledTransQuery = new Query(originalQueryContainer);
        
        // Create a query to get settled transactions based on the user-defined query
        vendTransDs = settledTransQuery.dataSourceTable(tablenum(VendTrans));
        
        vendSettlementDs = vendTransDs.addDataSource(tableNum(VendSettlement));
        vendSettlementDs.addLink(fieldnum(VendTrans, RecId), fieldnum(VendSettlement, TransRecId));
        vendSettlementDs.joinMode(JoinMode::ExistsJoin);
        vendSettlementDs.addRange(fieldnum(VendSettlement, TransDate)).value(strfmt('> %1', queryValue(this.getConsideredDate())));
        vendSettlementDs.addRange(fieldnum(VendSettlement, CanBeReversed)).value(queryValue(NoYes::Yes));
        vendSettlementDs.addRange(fieldnum(VendSettlement, SettleAmountCur)).value(SysQuery::valueNot(0));
        vendSettlementDs.addSortField(fieldnum(VendSettlement, TransDate), SortOrder::Ascending);
        vendSettlementDs.fetchMode(QueryFetchMode::One2One);
        vendSettlementDs.relations(false);
        
        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedTransQuery</Name>
				<Source><![CDATA[
    protected Query createReversedTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQueryContainer = _baseQuery.pack(); 
        Query reversedTransQuery = new Query(originalQueryContainer);
        
        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource vendTransDs = reversedTransQuery.dataSourceTable(tablenum(VendTrans));
        
        QueryBuildDataSource vendSettlementDs = vendTransDs.addDataSource(tableNum(VendSettlement));
        vendSettlementDs.addRange(fieldnum(VendSettlement, TransDate)).value(strfmt('> %1', queryValue(this.getConsideredDate())));
        vendSettlementDs.addLink(fieldnum(VendTrans, RecId), fieldnum(VendSettlement, TransRecId));
        vendSettlementDs.addRange(fieldnum(VendSettlement, SettleAmountCur)).value(SysQuery::valueNot(0));
        vendSettlementDs.addRange(fieldnum(VendSettlement, CanBeReversed)).value(queryValue(NoYes::No));
        vendSettlementDs.joinMode(JoinMode::ExistsJoin);
        vendSettlementDs.fetchMode(QueryFetchMode::One2One);
        vendSettlementDs.relations(false);

        QueryBuildDataSource subledgerVoucherGeneralJournalEntryDs = vendTransDs.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        subledgerVoucherGeneralJournalEntryDs.addLink(fieldnum(VendTrans, DataAreaId), fieldnum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId));
        subledgerVoucherGeneralJournalEntryDs.addLink(fieldnum(VendTrans, Voucher), fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher));
        subledgerVoucherGeneralJournalEntryDs.joinMode(JoinMode::ExistsJoin);
        subledgerVoucherGeneralJournalEntryDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource generalJournalAccountEntryDs = subledgerVoucherGeneralJournalEntryDs.addDataSource(tablenum(GeneralJournalAccountEntry));
        generalJournalAccountEntryDs.addLink(fieldnum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        generalJournalAccountEntryDs.joinMode(JoinMode::ExistsJoin);
        generalJournalAccountEntryDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource transactionReversalDs = generalJournalAccountEntryDs.addDataSource(tableNum(TransactionReversalTrans));
        transactionReversalDs.addLink(fieldnum(GeneralJournalAccountEntry, TableId), fieldNum(TransactionReversalTrans, RefTableId));
        transactionReversalDs.addLink(fieldnum(GeneralJournalAccountEntry, RecId), fieldNum(TransactionReversalTrans, RefRecId));
        transactionReversalDs.joinMode(JoinMode::ExistsJoin);
        transactionReversalDs.fetchMode(QueryFetchMode::One2One);

        return reversedTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankChequeCancelTransQuery</Name>
				<Source><![CDATA[
    protected Query createBankChequeCancelTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQueryContainer = _baseQuery.pack();
        Query reversedTransQuery = new Query(originalQueryContainer);
        
        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource vendTransDs = reversedTransQuery.dataSourceTable(tablenum(VendTrans));
        
        QueryBuildDataSource vendSettlementDs = vendTransDs.addDataSource(tableNum(VendSettlement));
        vendSettlementDs.addRange(fieldnum(VendSettlement, TransDate)).value(strfmt('> %1', queryValue(this.getConsideredDate())));
        vendSettlementDs.addLink(fieldnum(VendTrans, RecId), fieldnum(VendSettlement, TransRecId));
        vendSettlementDs.addRange(fieldnum(VendSettlement, SettleAmountCur)).value(SysQuery::valueNot(0));
        vendSettlementDs.addRange(fieldnum(VendSettlement, CanBeReversed)).value(queryValue(NoYes::No));
        vendSettlementDs.joinMode(JoinMode::ExistsJoin);
        vendSettlementDs.fetchMode(QueryFetchMode::One2One);
        vendSettlementDs.relations(false);

        QueryBuildDataSource ledgerJournalTransDs = vendTransDs.addDataSource(tablenum(LedgerJournalTrans));
        ledgerJournalTransDs.addLink(fieldNum(VendTrans, RecId), fieldNum(LedgerJournalTrans, VendTransId));
        ledgerJournalTransDs.joinMode(JoinMode::InnerJoin);
        ledgerJournalTransDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource chequeDs = ledgerJournalTransDs.addDataSource(tableNum(BankChequeTable));
        chequeDs.addLink(fieldNum(LedgerJournalTrans, TableId), fieldNum(BankChequeTable, SourceTableId));
        chequeDs.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(BankChequeTable, SourceRecId));
        chequeDs.joinMode(JoinMode::ExistsJoin);
        chequeDs.fetchMode(QueryFetchMode::One2One);
        chequeDs.addRange(fieldNum(BankChequeTable, ChequeStatus)).value(queryValue(ChequeStatus::Cancelled));

        return reversedTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsideredDate</Name>
				<Source><![CDATA[
    protected TransDate getConsideredDate()
    {
        CustVendExchRateAdjSimulationContract contract = this.parmDataContract() as CustVendExchRateAdjSimulationContract;

        return contract.parmConsideredDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateDate</Name>
				<Source><![CDATA[
    protected TransDate getExchangeRateDate()
    {
        CustVendExchRateAdjSimulationContract contract = this.parmDataContract() as CustVendExchRateAdjSimulationContract;

        return contract.parmDateOfRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleCustVend getModule()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevaluationMethod</Name>
				<Source><![CDATA[
    protected CustVendExchPrinciples getRevaluationMethod()
    {
        CustVendExchRateAdjSimulationContract contract = this.parmDataContract() as CustVendExchRateAdjSimulationContract;

        return contract.parmExchPrinciple();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendExchRateAdjSimulationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the <c>VendExchRateAdjSimulationTmp</c> table from the report.
    /// </summary>
    /// <returns>
    /// The <c>VendExchRateAdjSimulationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(VendExchRateAdjSimulationTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendExchRateAdjSimulationTmp getVendExchRateAdjSimulationTmp()
    {
        select vendExchRateAdjSimulationTmp;
        return vendExchRateAdjSimulationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecord</Name>
				<Source><![CDATA[
    protected void insertRecord(CustVendTrans _custVendTrans, AmountCur _transactionCurrencyAmount, AmountMST _currentBalance, AmountMST _newBalance, CurrencyExchangeRate _accountingCurrencyExchangeRateUsed, AmountMSTSecondary _currentBalanceReporting, AmountMSTSecondary _newBalanceReporting, CurrencyExchangeRate _reportingCurrencyExchangeRateUsed)
    {
        vendExchRateAdjSimulationTmp.AccountNum = _custVendTrans.AccountNum;
        vendExchRateAdjSimulationTmp.AccountName = VendTable::find(_custVendTrans.AccountNum).name();
        vendExchRateAdjSimulationTmp.CurrencyCode = _custVendTrans.CurrencyCode;
        vendExchRateAdjSimulationTmp.TransDate = _custVendTrans.TransDate;
        vendExchRateAdjSimulationTmp.AmountCur = _transactionCurrencyAmount;
        vendExchRateAdjSimulationTmp.CurBalance = _currentBalance;
        vendExchRateAdjSimulationTmp.NewBalance = _newBalance;
        vendExchRateAdjSimulationTmp.ExchangeAdj = _newBalance - _currentBalance;
        vendExchRateAdjSimulationTmp.ExchangeRate = _accountingCurrencyExchangeRateUsed;

        vendExchRateAdjSimulationTmp.CurrentBalanceReporting = _currentBalanceReporting;
        vendExchRateAdjSimulationTmp.NewBalanceReporting = _newBalanceReporting;
        vendExchRateAdjSimulationTmp.ExchangeAdjReporting = _newBalanceReporting - _currentBalanceReporting;
        vendExchRateAdjSimulationTmp.ExchangeRateReporting = _reportingCurrencyExchangeRateUsed;

        vendExchRateAdjSimulationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves records by using the parameters that are entered.
    /// </summary>
    public void processReport()
    {
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>