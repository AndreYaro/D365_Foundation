<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementVoucher</c> class manages creation of vouchers during settlement.
/// </summary>
public class SettlementVoucher
{
    protected Map numberSeqMap;
    private SysModule module;
    protected boolean isDebitVoucherCreated;
    protected boolean isCreditVoucherCreated;
    private LedgerVoucherGroup ledgerVoucherGroup;
    protected Set companiesWithExistingVoucher;
    private DataAreaId debitCompany;
    private DataAreaId creditCompany;
    private boolean isNewSettlementVoucherCreated = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SysModule _module)
    {
        if (_module != SysModule::Cust && _module != SysModule::Vend)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
        super();
        module = _module;
        numberSeqMap = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the the current settlement voucher object for new settlement.
    /// </summary>
    /// <param name = "_debitCompany">The company of the debit transaction.</param>
    /// <param name = "_creditCompany">The company of the credit transaction.</param>
    public void initForNewSettlement(DataAreaId _debitCompany, DataAreaId _creditCompany)
    {
        companiesWithExistingVoucher = new Set(Types::String);
        this.forceNewVouchers();
        debitCompany = _debitCompany;
        creditCompany = _creditCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceNewVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces creation of new vouchers when needed by subsequent operations.
    /// </summary>
    public void forceNewVouchers()
    {
        isCreditVoucherCreated = false;
        isDebitVoucherCreated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDebitCompany</Name>
				<Source><![CDATA[
    // Refactor: Usage of this setter should be eliminated. Debit and Credit companies should always come in the constructor.
    public void setDebitCompany(DataAreaId _debitCompany)
    {
        debitCompany = _debitCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCreditCompany</Name>
				<Source><![CDATA[
    // Refactor: Usage of this setter should be eliminated. Debit and Credit companies should always come in the constructor.
    public void setCreditCompany(DataAreaId _creditCompany)
    {
        creditCompany = _creditCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefCustVendPaymVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds number sequence reference for current settlement voucher.
    /// </summary>
    /// <returns>
    /// The number sequence reference.
    /// </returns>
    public NumberSequenceReference numRefCustVendPaymVoucher()
    {
        NumberSequenceReference numberSequenceRefrence;

        Debug::assert(module == SysModule::Cust || module == SysModule::Vend);

        switch (module)
        {
            case SysModule::Cust:
                numberSequenceRefrence = CustParameters::numRefCustPaymVoucher();
                break;
            case SysModule::Vend:
                numberSequenceRefrence = VendParameters::numRefVendPaymentVoucher();
                break;
        }
        return numberSequenceRefrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberSequenceCodeByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number sequence code that is used to create settlement transaction voucher numbers for
    /// the specified company.
    /// </summary>
    /// <param name="_company">
    /// The Company ID used to find the number sequence code.
    /// </param>
    /// <returns>
    /// The number sequence code for the company.
    /// </returns>
    public NumberSequenceCode findNumberSequenceCodeByCompany(CompanyId _company)
    {
        NumberSequenceCode returnNumberSeqCode;
        NumberSequenceReference numberSeqRef;

        if (numberSeqMap.exists(_company))
        {
            returnNumberSeqCode = numberSeqMap.lookup(_company);
        }
        else
        {
            changecompany(_company)
            {
                numberSeqRef = this.numRefCustVendPaymVoucher();
            }

            returnNumberSeqCode = numberSeqRef.numberSequenceTable().NumberSequence;
            numberSeqMap.insert(_company, numberSeqRef.numberSequenceTable().NumberSequence);
        }

        return returnNumberSeqCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionType</Name>
				<Source><![CDATA[
    public LedgerTransType getLedgerTransactionType()
    {
        LedgerTransType ledgerTransType;

        switch (module)
        {
            case SysModule::Cust:
                ledgerTransType = LedgerTransType::Cust;
                break;
            case SysModule::Vend:
                ledgerTransType = LedgerTransType::Vend;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ledgerTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerVoucherGroup</Name>
				<Source><![CDATA[
    public LedgerVoucherGroup getLedgerVoucherGroup()
    {
        return ledgerVoucherGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerVoucherGroup</Name>
				<Source><![CDATA[
    public void setLedgerVoucherGroup(LedgerVoucherGroup _value)
    {
        ledgerVoucherGroup = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesVoucherExistForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether voucher exists for the specified company.
    /// </summary>
    /// <param name = "_company">
    /// The Company ID to check.
    /// </param>
    /// <returns>
    /// true if voucher exists for the specified company; otherwise, false.
    /// </returns>
    protected boolean doesVoucherExistForCompany(CompanyId _company)
    {
        return companiesWithExistingVoucher.in(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceVoucherExistsForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Informs that voucher exists for given company.
    /// </summary>
    /// <param name = "_company">
    /// The ID of the company.
    /// </param>
    /// <remarks>
    /// This operation affects the result of subsequent calls to <c>doesVoucherExistForCompany</c> method.
    /// </remarks>
    protected void forceVoucherExistsForCompany(CompanyId _company)
    {
        companiesWithExistingVoucher.add(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies subscribers about voucher to process.
    /// </summary>
    /// <param name = "_voucher">
    /// The number of the voucher to be processed.
    /// </param>
    delegate void voucherAdded(str _voucher)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerVoucherByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LedgerVoucher</c> instance for the specified company.
    /// </summary>
    /// <param name = "_company">
    /// The company ID that is used to find the <c>LedgerVoucher</c> instance.
    /// </param>
    /// <param name = "_debitTransType">
    /// The transaction type of the debit transaction.
    /// </param>
    /// <param name = "_creditTransType">
    /// The transaction type of the credit transaction.
    /// </param>
    /// <param name = "_transactionDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucher</c> instance for the company.
    /// </returns>
    /// <remarks>
    /// This method will create a new <c>LedgerVoucher</c> instance if one does not exist for the company ID.
    /// </remarks>
    public LedgerVoucher findLedgerVoucherByCompany(
        CompanyId _company,
        LedgerTransType _debitTransType,
        LedgerTransType _creditTransType,
        TransDate _transactionDate)
    {
        LedgerVoucher           ledgerVoucher;
        LedgerVoucherObject     ledgerVoucherObject;
        NumberSequenceCode      numberSequenceCode;
        NumberSeq               numberSeq;
        NumberSequenceReference numberSeqRef;
        boolean                 createForDebitCompany;
        boolean                 createForCreditCompany;

        #ISOCountryRegionCodes

        createForDebitCompany = (_company == debitCompany && !isDebitVoucherCreated);
        createForCreditCompany = (_company == creditCompany && !isCreditVoucherCreated);

        numberSequenceCode = this.findNumberSequenceCodeByCompany(_company);

        ledgerVoucher = this.getLedgerVoucherGroup().findLedgerVoucher(_company, numberSequenceCode);

        Debug::assert(!(ledgerVoucher == null && !createForDebitCompany && !createForCreditCompany));

        if (createForDebitCompany || createForCreditCompany)
        {
            if (ledgerVoucher == null)
            {
                // Create ledgerVoucher class and add if to the group
                ledgerVoucher = LedgerVoucher::newLedgerPost(
                    DetailSummary::Detail,
                    module,
                    numberSequenceCode);

                ledgerVoucher.parmCompanyId(_company);
                this.getLedgerVoucherGroup().addLedgerVoucher(ledgerVoucher);
            }

            // assign next voucher number
            ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

            if (ledgerVoucherObject == null
                || ledgerVoucherObject.transElements() != 0
                || (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)
                    && LedgerParameters::find().JournalizingDefinitionEnableValue == NoYes::Yes
                    && CustSettleJournalizingEntries::requiredAdditionalEntries(_debitTransType, _creditTransType)))
                )
            {
                numberSeqRef = this.numRefCustVendPaymVoucher();
                numberSeq = NumberSeq::newGetVoucher(numberSeqRef);

                // Create a new LedgerVoucherObject because transactions exist for current one.
                ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(
                    numberSeq.voucher(),
                    _transactionDate,
                    module,
                    this.getLedgerTransactionType()));

                this.voucherAdded(ledgerVoucher.findLedgerVoucherObject().parmSubledgerVoucher());
                
                isNewSettlementVoucherCreated = true;
            }
            else
            {
                // this means that are getting a voucher number before it is needed and this shouldn't be done
                // GIN, GEERU, GEECZ, GTH
                // GLS EE IN - we might already have voucher object created with no transactions in it when having multiple settlement sessions
                // GTH - For Thailand unrealized VAT feature, the unrealized VAT may not be reversed
                // at the time of settlement without tax invoice details. In this case, no transaction
                // will be inserted into LedgerVoucherTransList but the LedgerVoucherObject instance
                // has been created. So this assert issue cannot be thrown.
                if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ, #isoIN])
                    && !TaxThaiGovCertificationFeatureChecker::isAverageVATEnabled())
                {
                    Debug::assert(false);
                }
                ledgerVoucherObject.parmTransDate(_transactionDate);
            }

            if (createForDebitCompany)
            {
                isDebitVoucherCreated = true;
            }

            if (createForCreditCompany)
            {
                isCreditVoucherCreated = true;
            }
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLedgerVoucherObjectByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the <c>LedgerVoucherObject</c> instance for the specified date.
    /// </summary>
    /// <param name = "_ledgerVoucher">
    /// The <c>LedgerVoucher</c> instance which holds the <c>LedgerVoucherObject</c>
    /// </param>
    /// <param name = "_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucherObject</c> instance for the specified date.
    /// </returns>
    /// <remarks>
    /// This method will create a new <c>LedgerVoucherObject</c> instance if one does not exist for the specified date.
    /// </remarks>
    public LedgerVoucherObject findOrCreateLedgerVoucherObjectByDate(LedgerVoucher _ledgerVoucher, TransDate _transDate)
    {
        LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        TransDate originalAccountingDate = ledgerVoucherObject.parmAccountingDate();

        if (originalAccountingDate != _transDate)
        {
            LedgerPostingController ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher);
            Voucher originalReferenceNumber = ledgerVoucherObject.parmReferenceNumber();
            boolean isFound = ledgerPostingController.findReference(originalReferenceNumber, _transDate);

            if (!isFound)
            {
                NumberSequenceReference numberSeqRef = this.numRefCustVendPaymVoucher();
                NumberSeq numberSeq = NumberSeq::newGetVoucher(numberSeqRef);
                TransTxt originalTransTxt = ledgerVoucherObject.lastTransTxt();

                ledgerVoucherObject = LedgerVoucherObject::newVoucher(numberSeq.voucher(),
                    _transDate,
                    module,
                    this.getLedgerTransactionType());

                ledgerVoucherObject.lastTransTxt(originalTransTxt);

                _ledgerVoucher.addVoucher(ledgerVoucherObject);
            }
        }

        return ledgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLedgerVoucherByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LedgerVoucher</c> instance for the specified company.
    /// </summary>
    /// <param name = "_company">
    /// The company ID that is used to find the <c>LedgerVoucher</c> instance.
    /// </param>
    /// <param name = "_debitTransType">
    /// The transaction type of the debit transaction.
    /// </param>
    /// <param name = "_creditTransType">
    /// The transaction type of the credit transaction.
    /// </param>
    /// <param name = "_transactionDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucher</c> instance for the company.
    /// </returns>
    /// <remarks>
    /// This method will create a new <c>LedgerVoucher</c> instance if one does not exist for the company ID.
    /// This method is useful in case the company you are searching the ledger voucher in differs from the debit or credit company.
    /// </remarks>
    public LedgerVoucher findOrCreateLedgerVoucherByCompany(
        CompanyId _company,
        LedgerTransType _debitTransType,
        LedgerTransType _creditTransType,
        TransDate _transactionDate)
    {
        LedgerVoucher ledgerVoucher;

        changecompany(_company)
        {
            if (this.doesVoucherExistForCompany(_company))
            {
                ledgerVoucher = this.getLedgerVoucherGroup().findLedgerVoucher(_company, this.findNumberSequenceCodeByCompany(_company));
            }
            else
            {
                isCreditVoucherCreated = true;
                isDebitVoucherCreated = false;
                DataAreaId debitCompanyBefore = debitCompany;
                DataAreaId creditCompanyBefore = creditCompany;
                debitCompany = _company;
                creditCompany = '';
                ledgerVoucher = this.findLedgerVoucherByCompany(_company, _debitTransType, _creditTransType, _transactionDate);
                this.forceVoucherExistsForCompany(_company);
                debitCompany = debitCompanyBefore;
                creditCompany = creditCompanyBefore;
            }

            this.setIsDebitCreditVoucherCreated();
        }

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsDebitCreditVoucherCreated</Name>
				<Source><![CDATA[
    private void setIsDebitCreditVoucherCreated()
    {
        isDebitVoucherCreated = this.wasVoucherCreated(debitCompany);
        isCreditVoucherCreated = this.wasVoucherCreated(creditCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wasVoucherCreated</Name>
				<Source><![CDATA[
    private boolean wasVoucherCreated(DataAreaId _company)
    {
        boolean wasVoucherCreated =
            this.getLedgerVoucherGroup().findLedgerVoucher(_company, this.findNumberSequenceCodeByCompany(_company)) != null;

        return wasVoucherCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherNumberByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the voucher number for the specified company.
    /// </summary>
    /// <param name="_company">
    /// The Company ID used to find the voucher number.
    /// </param>
    /// <returns>
    /// The voucher number for the specified company.
    /// </returns>
    public Voucher findVoucherNumberByCompany(CompanyId _company)
    {
        LedgerVoucher           ledgerVoucher;
        NumberSequenceCode      numberSequenceCode;
        Voucher                 voucherNumber;

        // Voucher number will be blank if no voucher has been created for the company.
        if (_company == debitCompany && !isDebitVoucherCreated)
        {
            voucherNumber = '';
        }
        else if (_company == creditCompany && !isCreditVoucherCreated)
        {
            voucherNumber = '';
        }
        else
        {
            // Finds the number sequence for the company
            numberSequenceCode = this.findNumberSequenceCodeByCompany(_company);

            ledgerVoucher = this.getLedgerVoucherGroup().findLedgerVoucher(_company, numberSequenceCode);
            voucherNumber = ledgerVoucher.lastVoucher();
        }

        return voucherNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsNewSettlementVoucherCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether a new settlement voucher is created.
    /// </summary>
    /// <returns>
    /// Returns true if new settlement voucher is created; otherwise, returns false.
    /// </returns>
    public boolean getIsNewSettlementVoucherCreated()
    {
        return isNewSettlementVoucherCreated ;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>