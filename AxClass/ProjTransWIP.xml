<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransWIP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransWIP extends ProjTrans
{
    ProjControlPeriodTrans   projControlPeriodTrans;
    ProjTrans                projTransActual;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        if (projTransActual)
        {
            return projTransActual.activityNumber();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        ProjRevenueProfile projRevProfile;
        ProjGroup projGroup;
        
        boolean enableMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
        ProjWIPTable wipProject;
        if(contractLineBasedRevRecFeature)
        {
            wipProject = ProjWIPTable::find(projControlPeriodTrans.ProjId);
        }

        if(wipProject && wipProject.IsContractLineUsed)
        {
            projRevProfile = ProjRevenueProfile::findByRevenueProfileId(wipProject.ProjRevenueProfileId);
        }
        else if (enableMultipleContractLinesForProjectFeature)
        {
            // Billing method should always be fixed price because this code is called while posting estimates and only revenue recognition related fields are used later.
            projRevProfile = ProjRevRecHelper::getRevProfile(projControlPeriodTrans.projTable(), ProjContractBillingMethod::FixedPrice, this.transType());
        }
        else
        {
            projGroup = ProjGroup::find(projControlPeriodTrans.projTable().ProjGroupId);
        }

        switch (projControlPeriodTrans.wipType)
        {
            case ProjWIPType::AccruedTurnover:
                return (enableMultipleContractLinesForProjectFeature || (contractLineBasedRevRecFeature && wipProject.IsContractLineUsed)) ? projRevProfile.SalesvalueCategoryId : projGroup.SalesvalueCategoryId;
            case ProjWIPType::AccruedTurnoverProd:
                return (enableMultipleContractLinesForProjectFeature || (contractLineBasedRevRecFeature && wipProject.IsContractLineUsed)) ? projRevProfile.ProductionCategoryId : projGroup.ProductionCategoryId;
            case ProjWIPType::AccruedTurnoverProfit:
                return (enableMultipleContractLinesForProjectFeature || (contractLineBasedRevRecFeature && wipProject.IsContractLineUsed)) ? projRevProfile.ProfitCategoryId : projGroup.ProfitCategoryId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost template ID for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjControlId controlId()
    {
        return projControlPeriodTrans.ControlId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlPeriodFrom</Name>
				<Source><![CDATA[
    ProjPeriodFrom controlPeriodFrom()
    {
        return projControlPeriodTrans.PeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlPeriodTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date of the project period for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>null</c> date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjPeriodTo controlPeriodTo()
    {
        return projControlPeriodTrans.periodTable().PeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the version number of the project period for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjControlVersion</c> value that indicates the version number.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    ProjControlVersion controlVersion()
    {
        return projControlPeriodTrans.Version;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public CostPrice costPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        if (projTransActual)
        {
            return projTransActual.defaultDimension();
        }
        else
        {
            DimensionDefault defaultDimension;

            if (ProjFeatureStateHelper::isProjDefaultDimensionRuleFeatureEnabled() && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                ProjTable proTable = ProjTable::find(this.projId());

                PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(proTable.ProjId, proTable.ProjInvoiceProjId, this.transType());

                defaultDimension = ProjDefaultDimensionRule::getDefaultDimension(proTable.ProjId, contractLine.ContractLineNum);
            }
            else
            {
                defaultDimension = ProjTable::find(this.projId()).DefaultDimension;
            }

            return defaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        if (projTransActual)
        {
            return projTransActual.inventTransId();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is invoiceable.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean invoiceable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        return projControlPeriodTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return ProjLedgerStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjControlPeriodTrans _projControlPeriodTrans)
    {
        projControlPeriodTrans   = _projControlPeriodTrans;
        switch (projControlPeriodTrans.TransType)
        {
            case ProjTransType::Hour:
                projTransActual = ProjTrans::construct(ProjEmplTrans::find(this.transId()));
                break;
            case ProjTransType::Cost:
                projTransActual = ProjTrans::construct(ProjCostTrans::find(this.transId()));
                break;
            case ProjTransType::Item:
                projTransActual = ProjTrans::construct(ProjItemTrans::find(this.transId()));
                break;
            case ProjTransType::IndirectComponent:
                projTransActual = ProjTrans::construct(ProjEmplTrans::find(this.transId()));
                break;
        }

        super(_projControlPeriodTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdjustRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project adjustment reference that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty String.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjAdjustRefId projAdjustRefId()
    {
        if (projTransActual)
        {
            return projTransActual.projAdjustRefId();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projEmplItemId</Name>
				<Source><![CDATA[
    public ProjEmplItemId projEmplItemId()
    {
        if (projTransActual)
        {
            return projTransActual.projEmplItemId();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjId projId()
    {
        return projControlPeriodTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Qty qty()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projControlPeriodTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Record ID for the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        if (projTransActual)
        {
            return projTransActual.resource();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Record ID for the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        if (projTransActual)
        {
            return projTransActual.resourceCategory();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesOffsetAccountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for WIP minus sales value that will be used by this transaction.
    /// </summary>
    /// <param name="_fundingSourceID">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for WIP minus sales value.
    /// </returns>
    public LedgerDimensionDefaultAccount salesOffsetAccountLedgerDimension(ProjFundingSourceRefId _fundingSourceID)
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::SalesOffsetAccount,
                                        this.projId(),
                                        this.categoryId(),
                                        _fundingSourceID,
                                        true,
                                        true,
                                        this.taxGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesPrice salesPrice()
    {
        return projControlPeriodTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesValueAccountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for accrued revenue minus sales value that will be used by this
    /// transaction.
    /// </summary>
    /// <param name="_fundingSourceID">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for accrued revenue minus sales value.
    /// </returns>
    public LedgerDimensionDefaultAccount salesValueAccountLedgerDimension(ProjFundingSourceRefId _fundingSourceID)
    {
        return ProjPosting::getLedgerDimension(ProjAccountType::SalesValue,
                                         this.projId(),
                                         this.categoryId(),
                                         _fundingSourceID,
                                         true,
                                         true,
                                         this.taxGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjControlPeriodTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group from the actual transaction.
    /// In case there is no actual transaction, the tax group is retrieved from the project.
    /// </summary>
    /// <returns>
    /// The <c>TaxGroup</c> associated with the transaction.
    /// </returns>
    public TaxGroup taxGroup()
    {
        TaxGroup ret;

        ret = (projTransActual) ? projTransActual.taxGroup() : this.projTable().TaxGroupId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate transDate()
    {
        TransDate transDate;

        if (projTransActual)
        {
            transDate = projTransActual.transDate();
        }
        else
        {
            transDate = projControlPeriodTrans.periodTable().PeriodTo;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projControlPeriodTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction type.
    /// </summary>
    /// <returns>
    /// The transaction type.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjTransType transType()
    {
        ProjTransType transType = projControlPeriodTrans.TransType;

        if (transType == ProjTransType::IndirectComponent)
        {
            transType = ProjTransType::Hour;
        }
        else if (transType == ProjTransType::None)
        {
            transType = ProjTransType::Revenue;
        }

        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransTxt txt()
    {
        return "@SYS50076";
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lending legal entity.
    /// </summary>
    DataAreaId lendingLegalEntity()
    {
        DataAreaId ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>