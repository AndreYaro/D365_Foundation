<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustBillOfExchangeCancel extends RunBase
{
    BankAccount             accountID;
    BankBillOfExchangeNum   billOfExchangeNum;
    CustBillOfExchangeID    billOfExchangeId;

    TransTxt                cancelReason;
    TransDate               transDate;
    Voucher                 voucher;
    boolean                 paymentCancelled;
    //boolean                 billOfExchangeVoided;

    DialogField             dialogTransDate;
    DialogField             dialogCancelReason;
    DialogField             dialogAccountId;
    DialogField             dialogBillOfExchangeNum;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        accountID,
        billOfExchangeId,
        transDate,
        cancelReason,
        voucher
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelBillOfExchange</Name>
				<Source><![CDATA[
    protected void cancelBillOfExchange()
    {
        BankBillOfExchangeTable bankBillOfExchangeTable;
        LedgerVoucher           ledgerVoucher;
        NumberSeq               numberSeq;

        numberSeq = NumberSeq::newGetVoucher(this.numberSequence());

        if (!this.validation(voucher, billOfExchangeId))
        {
            throw error("@SYS18447");
        }

        ledgerVoucher = this.createReverseLedgerTrans(numberSeq, voucher, this.parmTransDate());
        this.createPaymentOffsetTrans(ledgerVoucher);
        this.removeCustBillOfExchangeJour();
        this.removeCustBillOfExchangeTrans();
        this.removeCustBillOfExchangeInvoice();

        update_recordset bankBillOfExchangeTable
            setting DocumentStatus = BankBillOfExchangeStatus::Cancelled
        where bankBillOfExchangeTable.BankAccountID == accountID
                && bankBillOfExchangeTable.BillOfExchangeNum == billOfExchangeNum;

        paymentCancelled = true;

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closePaymTrans</Name>
				<Source><![CDATA[
    protected void closePaymTrans(CustTrans     _custTransToReverse,
                                  CustTrans     _custTrans,
                                  LedgerVoucher _ledgerVoucher)
    {
        CustTable                   custTable = CustTable::find(_custTrans.AccountNum);
        CustTransOpen               custTransOpenFieldList;
        SpecTransManager            specTransManager;
        NoYes                       foundCustTransOpen = NoYes::No;

        SpecTransExecutionContext specTransExecutionContext = SpecTransExecutionContext::newFromSource(custTable);
        specTransManager = SpecTransManager::newFromSpec(specTransExecutionContext.parmSpecContext());

        // payment
        while select DataAreaId, TableId, RecId, AmountCur from custTransOpenFieldList
            where custTransOpenFieldList.RefRecId == _custTrans.RecId
        {
            specTransManager.insert(custTransOpenFieldList.DataAreaId, custTransOpenFieldList.TableId, custTransOpenFieldList.RecId, custTransOpenFieldList.AmountCur, _custTrans.CurrencyCode);
            foundCustTransOpen = NoYes::Yes;
        }
        if (!foundCustTransOpen)
        {
            throw error(strfmt("@SYS18598", funcname()));
        }

        // payment reversal
        while select DataAreaId, TableId, RecId, AmountCur from custTransOpenFieldList
            where custTransOpenFieldList.RefRecId == _custTransToReverse.RecId
        {
            specTransManager.insert(custTransOpenFieldList.DataAreaId, custTransOpenFieldList.TableId, custTransOpenFieldList.RecId, custTransOpenFieldList.AmountCur, _custTrans.CurrencyCode);
        }

        CustTransSettleTransactionParameters custTransSettleTransactionParameters = CustTransSettleTransactionParameters::construct();
        custTransSettleTransactionParameters.ledgerVoucher = _ledgerVoucher;
        CustTrans::settleTransaction(specTransExecutionContext, custTransSettleTransactionParameters);
        specTransManager.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentOffsetTrans</Name>
				<Source><![CDATA[
    protected void createPaymentOffsetTrans(LedgerVoucher _ledgerVoucher)
    {
        CustTrans       custTrans_old;
        LedgerTransTxt  transTxt;
        CustVoucher     custVoucher;
        CustTrans       custTrans;

        while select custTrans
            where custTrans.Voucher             == voucher &&
                  custTrans.PaymReference       == billOfExchangeNum &&
                  custTrans.BillOfExchangeID    == billOfExchangeId
        {
            custTrans_old = CustTrans::find(custTrans.RecId);

            custVoucher = CustVendVoucher::construct(SysModule::Cust,
                                                     custTrans_old.AccountNum,
                                                     -custTrans_old.AmountCur,
                                                     custTrans_old.CurrencyCode,
                                                     transTxt,
                                                     custTrans_old.DefaultDimension,
                                                     custTrans_old.PostingProfile,//'',
                                                     LedgerPostingType::CustBalance);

            custVoucher.parmPaymMode(custTrans_old.PaymMode);
            custVoucher.parmPaymSpec(custTrans_old.PaymSpec);
            custVoucher.parmTransTxt(strfmt('%1: %2, %3',"@SYS1068", custTrans_old.Voucher, cancelReason));
            custVoucher.parmTransDate(transDate);
            custVoucher.parmExchRate(custTrans_old.ExchRate);
            custVoucher.parmExchRateSecondary(custTrans_old.ExchRateSecond);
            custVoucher.parmTransRefType(CustTransRefType::BillOfExchange);

            custVoucher.parmBypassCreditCheck(NoYes::Yes);

            custVoucher.post(_ledgerVoucher, custTrans_old);

            this.reverseSettlement(custTrans, _ledgerVoucher);
            this.closePaymTrans(custTrans_old, custTrans, _ledgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseLedgerTrans</Name>
				<Source><![CDATA[
    protected LedgerVoucher createReverseLedgerTrans(NumberSeq  _numberSeq,
                                                     Voucher    _voucher,
                                                     TransDate  _paymDate)
    {
        LedgerVoucher       ledgerVoucher;
        LedgerVoucherObject ledgerVoucherObject;

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Cust,
                                                     _numberSeq.parmNumberSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(_numberSeq.voucher(),
                                                              transDate,
                                                              SysModule::Cust,
                                                              LedgerTransType::Payment);

        ledgerVoucherObject.lastTransTxt(strfmt('%1: %2, %3',"@SYS1068", _voucher, cancelReason));
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the AOT.
    /// </remarks>
    Object dialog()
    {
        DialogRunbase       dialog = super();

        dialogCancelReason = dialog.addField(extendedTypeStr(TransTxt),"@SYS69721","@SYS69722");

        dialogAccountId = dialog.addFieldValue(extendedTypeStr(BankAccount), accountID);
        dialogAccountId.active(false);

        dialogBillOfExchangeNum = dialog.addFieldValue(extendedTypeStr(CustBillOfExchangeID), billOfExchangeId);
        dialogBillOfExchangeNum.active(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        cancelReason    = dialogCancelReason.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequence</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequence()
    {
        return CustParameters::numRefCustCloseVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public BankAccountID parmAccountId(BankAccount _accountID = accountID)
    {
        accountID = _accountID;
        return accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfExchangeId</Name>
				<Source><![CDATA[
    public CustBillOfExchangeID parmBillOfExchangeId(CustBillOfExchangeID _billOfExchangeId = billOfExchangeId)
    {
        billOfExchangeId = _billOfExchangeId;
        return billOfExchangeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillOfExchangeNum</Name>
				<Source><![CDATA[
    public BankBillOfExchangeNum parmBillOfExchangeNum(BankBillOfExchangeNum _billOfExchangeNum = billOfExchangeNum)
    {
        billOfExchangeNum = _billOfExchangeNum;
        return billOfExchangeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustBillOfExchangeInvoice</Name>
				<Source><![CDATA[
    protected void removeCustBillOfExchangeInvoice()
    {
        CustBillOfExchangeInvoice  custBillOfExchangeInvoice;

        delete_from custBillOfExchangeInvoice
            where custBillOfExchangeInvoice.BillOfExchangeId == billOfExchangeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustBillOfExchangeJour</Name>
				<Source><![CDATA[
    protected void removeCustBillOfExchangeJour()
    {
        CustBillOfExchangeJour  custBillOfExchangeJour;

        delete_from custBillOfExchangeJour
            where custBillOfExchangeJour.BillOfExchangeId == billOfExchangeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCustBillOfExchangeTrans</Name>
				<Source><![CDATA[
    protected void removeCustBillOfExchangeTrans()
    {
        CustBillOfExchangeTrans  custBillOfExchangeTrans;

        delete_from custBillOfExchangeTrans
            where custBillOfExchangeTrans.BillOfExchangeId == billOfExchangeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSettlement</Name>
				<Source><![CDATA[
    protected void reverseSettlement(CustTrans      _custTrans,
                                     LedgerVoucher  _ledgerVoucher)
    {
        CustTable                   custTable = CustTable::find(_custTrans.AccountNum);
        CustSettlement              custSettlement;
        SpecTransManager            specTransManager;

        specTransManager = SpecTransManager::newFromSpec(custTable);

        while select custSettlement
            where custSettlement.TransRecId     == _custTrans.RecId &&
                  custSettlement.CanBeReversed  == NoYes::Yes
        {
            custSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, _custTrans.CurrencyCode);
        }

        if (specTransManager.getSpecTransCount() > 0)
        {
            CustTrans::reverseTransact(custTable, _ledgerVoucher);
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setprefix(CustBillOfExchangeCancel::description());

        try
        {
            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            ttsbegin;

            this.cancelBillOfExchange();

            TransactionLog::create(TransactionLogType::PaymReversal, strfmt("@SYS83590", billOfExchangeNum));

            ttscommit;

            if (paymentCancelled)
            {
                info("@SYS83608");
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validation</Name>
				<Source><![CDATA[
    protected boolean validation(Voucher        _voucher,
                                 PaymReference  _paymReference)
    {
        if (!_voucher)
        {
            return checkFailed(strfmt("@SYS83551", billOfExchangeNum, BankBillOfExchangeTable::find(accountID,billOfExchangeNum).DocumentStatus));
        }

        if (!_paymReference)
        {
            return checkFailed("@SYS24523");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS83535";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustBillOfExchangeCancel    billOfExchangeCancel;
        Args    localArgs = new Args();

        switch (args.dataset())
        {
            case tablenum(CustBillOfExchangeJour) :
                billOfExchangeCancel = CustBillOfExchangeCancel::newCustBillOfExchangeJour(args.record());
                break;

            default :
                throw error(strfmt("@SYS22828","@SYS12483"));
        }

        if (billOfExchangeCancel.prompt())
        {
            localArgs.caller(billOfExchangeCancel);
            localArgs.record(args.record());
            CustBillOfExchangeCancel::serverRun(localArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustBillOfExchangeJour</Name>
				<Source><![CDATA[
    public static CustBillOfExchangeCancel newCustBillOfExchangeJour(CustBillOfExchangeJour _custBillOfExchangeJour)
    {
        CustBillOfExchangeCancel    billOfExchangeCancel;
        CustBillOfExchangeTrans     custBillOfExchangeTrans;

        billOfExchangeCancel = new CustBillOfExchangeCancel();
        billOfExchangeCancel.getLast();

        while select BillOfExchangeId, Status, RemittedToBankAccountId, TransDate, Voucher from custBillOfExchangeTrans
        where custBillOfExchangeTrans.BillOfExchangeId == _custBillOfExchangeJour.BillOfExchangeId &&
                custBillOfExchangeTrans.Status           == CustVendNegInstStatus::Drawn
        {
            billOfExchangeCancel.parmAccountId(custBillOfExchangeTrans.RemittedToBankAccountId);
            billOfExchangeCancel.parmTransDate(custBillOfExchangeTrans.TransDate);
            billOfExchangeCancel.parmVoucher(custBillOfExchangeTrans.Voucher);
        }

        billOfExchangeCancel.parmBillOfExchangeId(_custBillOfExchangeJour.BillOfExchangeId);
        billOfExchangeCancel.parmBillOfExchangeNum(_custBillOfExchangeJour.DocumentNum);
        return billOfExchangeCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serverRun</Name>
				<Source><![CDATA[
    static void serverRun(Args args)
    {
        CustBillOfExchangeCancel    billOfExchangeCancel;

        billOfExchangeCancel = CustBillOfExchangeCancel::newCustBillOfExchangeJour(args.record());
        billOfExchangeCancel.unpack(args.caller().pack());
        billOfExchangeCancel.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>