<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRecurrenceInvoicePostService</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class is used to validate and post all the pending Vendor invoice created in <c>VendRecurrenceInvoiceGroup</c> table record.
class VendRecurrenceInvoicePostService
{
    VendRecurrenceInvoiceGroup vendRecurrenceInvoiceGroup;
    VendRecurrenceInvoiceGroup vendRecurrenceInvoiceGroupTransferError;
    VendorRecurrenceInvoice recurrenceInvoice;
    VendInvoiceInfoTable vendInvoiceInfoTable;
    Map transferErrorLines;
    boolean isVendRecurrenceInvoiceGroupCreated;
    boolean invoicePosted;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        transferErrorLines = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(VendRecurrenceInvoicePostContract vendRecurrenceInvoicePostContract)
    {
        VendRecurrenceInvoiceId newRecurrenceInvoiceId;
        int numOfErrorLine;
        int numOfRecurrenceInvoice = 0;

        vendRecurrenceInvoiceGroup = vendRecurrenceInvoicePostContract.parmVendRecurrenceInvoiceGroup();

        if (vendRecurrenceInvoicePostContract.parmRecurrenceInvoicePost() || vendRecurrenceInvoicePostContract.parmRecurrencePostTransfer())
        {
            this.postRecurrenceInvoice(vendRecurrenceInvoicePostContract);
            numOfErrorLine = transferErrorLines.elements();

            if (vendRecurrenceInvoicePostContract.parmRecurrencePostTransfer())
            {
                numOfRecurrenceInvoice = VendRecurrenceInvoiceGroup::numOfRecurrenceInvoice(vendRecurrenceInvoicePostContract.parmVendRecurrenceInvoiceGroup().RecId);

                // If all recurrence invoices for a recurrence invoice group have an error,
                // doesn't transfer error recurrence invoices into a new recurrence invoice group.
                if ( numOfErrorLine > 0 && numOfErrorLine != numOfRecurrenceInvoice)
                {
                    newRecurrenceInvoiceId = this.transferErrorToRecurrenceInvoiceGroup();
                    info(strFmt("@SYS318912", vendRecurrenceInvoicePostContract.parmVendRecurrenceInvoiceGroup().RecurrenceInvoiceId, newRecurrenceInvoiceId));
                }
            }

            if (vendRecurrenceInvoicePostContract.parmRecurrenceInvoicePost() 
				|| (vendRecurrenceInvoicePostContract.parmRecurrencePostTransfer() && numOfErrorLine != numOfRecurrenceInvoice))
            {
                this.updateRecurrenceInvoiceGroupStatus(vendRecurrenceInvoicePostContract.parmVendRecurrenceInvoiceGroup());

                if (vendRecurrenceInvoicePostContract.parmRecurrencePostTransfer() && numOfErrorLine == 0)
                {
                    info(strFmt("@SYS318911", vendRecurrenceInvoicePostContract.parmVendRecurrenceInvoiceGroup().RecurrenceInvoiceId));
                }
            }
        }

        if (vendRecurrenceInvoicePostContract.parmCheckRecurrenceInvoice() && this.validateRecurrenceInvoice(vendRecurrenceInvoicePostContract.parmValidateInSandbox()))
        {
            info("@SYS318913");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRecurrenceInvoice</Name>
				<Source><![CDATA[
    private void postRecurrenceInvoice(VendRecurrenceInvoicePostContract _contract)
    {
        #OCCRetryCount
        PurchFormLetter_Invoice purchFormLetterInvoice;

        this.setRecurrenceInvoiceRange(_contract);

        // Iterates all the recurrence invoices belongs to a selected recurrence invoice group.
        while select recurrenceInvoice
            order by recurrenceInvoice.RecId
                where recurrenceInvoice.VendRecurrenceInvoiceGroup == vendRecurrenceInvoiceGroup.RecId
                    && recurrenceInvoice.RecId >= _contract.parmStartBundle()
                    && recurrenceInvoice.RecId <= _contract.parmEndBundle()
            join vendInvoiceInfoTable
                where vendInvoiceInfoTable.RecId == recurrenceInvoice.VendInvoiceInfoTable 
                   && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
        {
            if (transferErrorLines.empty() || !transferErrorLines.exists(vendInvoiceInfoTable.RecId))
            {
				try
                {
                    purchFormLetterInvoice = PurchFormLetter_Invoice::newFromSavedInvoice(vendInvoiceInfoTable);
                    purchFormLetterInvoice.update(vendInvoiceInfoTable, vendInvoiceInfoTable.Num);
					invoicePosted = true;
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    transferErrorLines.insert(vendInvoiceInfoTable.RecId, recurrenceInvoice);
                }
            }
        }

        if (!transferErrorLines.empty() && _contract.parmRecurrenceInvoicePost())
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecurrenceInvoiceRange</Name>
				<Source><![CDATA[
    private void setRecurrenceInvoiceRange(VendRecurrenceInvoicePostContract _contract)
    {
        NoYes isFirstInvoice = NoYes::Yes;

        if (_contract.parmStartBundle() == 0 && _contract.parmEndBundle() == 0)
        {
            VendorRecurrenceInvoice invoice;
            VendInvoiceInfoTable vendInvoice;

            select minof(RecId) from invoice
                where invoice.VendRecurrenceInvoiceGroup == _contract.parmVendRecurrenceInvoiceGroup().RecId
                exists join vendInvoice
                    where vendInvoice.RecId == invoice.VendInvoiceInfoTable
                        && vendInvoice.ParmJobStatus != ParmJobStatus::Executed;

            _contract.parmStartBundle(invoice.RecId);

            select maxOf(RecId) from invoice
                where invoice.VendRecurrenceInvoiceGroup == _contract.parmVendRecurrenceInvoiceGroup().RecId
                exists join vendInvoice
                    where vendInvoice.RecId == invoice.VendInvoiceInfoTable
                        && vendInvoice.ParmJobStatus != ParmJobStatus::Executed;

            _contract.parmEndBundle(invoice.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferErrorToRecurrenceInvoiceGroup</Name>
				<Source><![CDATA[
    private VendRecurrenceInvoiceId transferErrorToRecurrenceInvoiceGroup()
    {
        NumberSeq numberSeq;
        VendorRecurrenceInvoice recurrenceInvoiceLocal;
        VendorRecurrenceInvoice updateRecurrenceInvoice;
        MapEnumerator transferErrorLinesIterator;

        isVendRecurrenceInvoiceGroupCreated = true;
        transferErrorLinesIterator = transferErrorLines.getEnumerator();

        ttsbegin;

        if (transferErrorLinesIterator != null && vendRecurrenceInvoiceGroupTransferError.RecId == 0)
        {
            numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendRecurringInvoice());
            vendRecurrenceInvoiceGroupTransferError.RecurrenceInvoiceId = numberSeq.num();
            vendRecurrenceInvoiceGroupTransferError.insert();

            while (transferErrorLinesIterator.moveNext())
            {
                recurrenceInvoiceLocal = transferErrorLinesIterator.currentValue();
                updateRecurrenceInvoice.VendInvoiceInfoTable = transferErrorLinesIterator.currentKey();
                updateRecurrenceInvoice.VendRecurrenceInvoice = recurrenceInvoiceLocal.VendRecurrenceInvoice;
                updateRecurrenceInvoice.VendRecurrenceInvoiceGroup = vendRecurrenceInvoiceGroupTransferError.RecId;
                updateRecurrenceInvoice.RecurrenceInvoiceDate = recurrenceInvoiceLocal.RecurrenceInvoiceDate;
                updateRecurrenceInvoice.insert();

                recurrenceInvoiceLocal = VendorRecurrenceInvoice::find(recurrenceInvoiceLocal.RecId, true);
                recurrenceInvoiceLocal.VendInvoiceInfoTable = 0; // set to zero so it doesn't do a cascading delete on vendInvoiceInfoTable
                recurrenceInvoiceLocal.delete();
            }
        }

        ttscommit;

        return vendRecurrenceInvoiceGroupTransferError.RecurrenceInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecurrenceInvoiceGroupStatus</Name>
				<Source><![CDATA[
    private void updateRecurrenceInvoiceGroupStatus(VendRecurrenceInvoiceGroup _vendRecurrenceInvoiceGroup)
    {
        VendorRecurrenceInvoice invoice;
        VendInvoiceInfoTable vendInvoice;

        select firstonly RecId from invoice
                where invoice.VendRecurrenceInvoiceGroup == _vendRecurrenceInvoiceGroup.RecId
            exists join vendInvoice
                where vendInvoice.RecId == invoice.VendInvoiceInfoTable
                    && vendInvoice.ParmJobStatus != ParmJobStatus::Executed;

        if (_vendRecurrenceInvoiceGroup.Posted == NoYes::No && !invoice.RecId)
        {
            ttsbegin;
            _vendRecurrenceInvoiceGroup.selectForUpdate(true);
            _vendRecurrenceInvoiceGroup.Posted = NoYes::Yes;
            _vendRecurrenceInvoiceGroup.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrenceInvoice</Name>
				<Source><![CDATA[
    private boolean validateRecurrenceInvoice(NoYes _runInSandBox)
    {
        boolean isValidateOK;
        container inputParameters = [recurrenceInvoice, vendInvoiceInfoTable, vendRecurrenceInvoiceGroup];

        if (_runInSandbox)
        {
            setPrefix("@SYS318913");
            [isValidateOK, recurrenceInvoice, vendInvoiceInfoTable, vendRecurrenceInvoiceGroup] = SysOperationSandbox::callStaticMethod(
                    classIdGet(this),
                    staticMethodStr(VendRecurrenceInvoicePostService, validateRecurrenceInvoiceSandboxHelper),
                    inputParameters,
                    "@AccountsPayable:VendReccurInvoicePostServiceValidateWaitCaption");
        }
        else
        {
            [isValidateOK, recurrenceInvoice, vendInvoiceInfoTable, vendRecurrenceInvoiceGroup] = VendRecurrenceInvoicePostService::validateRecurrenceInvoiceSandboxHelper(inputParameters);
        }

        return isValidateOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurrenceInvoiceSandboxHelper</Name>
				<Source><![CDATA[
    public static container validateRecurrenceInvoiceSandboxHelper(container _inputParameters)
    {
        PurchFormLetter_Invoice purchFormLetterInvoice;
        VendorRecurrenceInvoice recurrenceInvoceLocal;
        VendInvoiceInfoTable vendInvoiceInfoTableLocal;
        VendRecurrenceInvoiceGroup vendRecurrenceInvoiceGroupLocal;
        boolean isValidateOK = true;

        [recurrenceInvoceLocal, vendInvoiceInfoTableLocal, vendRecurrenceInvoiceGroupLocal] = _inputParameters;

        // Iterates all the recurrence invoices belongs to a selected recurrence invoice group.
        while select recurrenceInvoceLocal
            where recurrenceInvoceLocal.VendRecurrenceInvoiceGroup == vendRecurrenceInvoiceGroupLocal.RecId
                join vendInvoiceInfoTableLocal
                    where vendInvoiceInfoTableLocal.RecId == recurrenceInvoceLocal.VendInvoiceInfoTable 
                        && vendInvoiceInfoTableLocal.ParmJobStatus != ParmJobStatus::Executed
        {
            purchFormLetterInvoice = PurchFormLetter_Invoice::newFromSavedInvoice(vendInvoiceInfoTableLocal);
            isValidateOK = purchFormLetterInvoice.validate() && isValidateOK;
        }

        return [isValidateOK, recurrenceInvoceLocal, vendInvoiceInfoTableLocal, vendRecurrenceInvoiceGroupLocal];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>