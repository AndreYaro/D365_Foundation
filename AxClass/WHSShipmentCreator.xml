<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipmentCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates shipments based on the inventory transaction type of the load lines being released to the warehouse.
/// </summary>
public abstract class WHSShipmentCreator
{
    protected WhsLoadPostEngine                 loadPostEngine;
    protected WHSReleaseToWarehouseId           releaseToWarehouseId;
    protected WHSWarehouseReleaseQueryBuilder   warehouseReleaseQueryBuilder;
    protected ReqReaderWriterLock               reqReaderWriterLock;
    protected WhsWarehouseRelease               warehouseRelease;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a WHSShipmentCreator class from an InventTransType.
    /// </summary>
    /// <param name = "_inventTransType">The inventory transaction type of shipment to be created.</param>
    /// <returns>An instance of the applicable WHSShipmentCreator class.</returns>
    internal static WHSShipmentCreator newFromInventTransType(InventTransType _inventTransType)
    {
        var attribute = new WHSShipmentCreatorAttribute(_inventTransType);

        WHSShipmentCreator shipmentCreator = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSShipmentCreator), attribute) as WHSShipmentCreator;

        if (!shipmentCreator)
        {
            throw Error(strFmt("@WAX:NoShipmentCreatorInstanceFound", _inventTransType));
        }

        return shipmentCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates one or more shipments for the InventTransType.
    /// </summary>
    /// <returns>The number of shipments that were created.</returns>
    abstract public int createShipments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadPostEngine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WhsLoadPostEngine parmLoadPostEngine(WhsLoadPostEngine _loadPostEngine = loadPostEngine)
    {
        loadPostEngine = _loadPostEngine;

        return loadPostEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqReaderWriterLock</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ReqReaderWriterLock parmReqReaderWriterLock(ReqReaderWriterLock _reqReaderWriterLock = reqReaderWriterLock)
    {
        reqReaderWriterLock = _reqReaderWriterLock;

        return reqReaderWriterLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarehouseRelease</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WhsWarehouseRelease parmWarehouseRelease(WhsWarehouseRelease _warehouseRelease = warehouseRelease)
    {
        warehouseRelease = _warehouseRelease;

        return warehouseRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCrossDockWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected final boolean hasCrossDockWorkBuildId()
    {
        return warehouseRelease != null && warehouseRelease.parmCrossDockWorkBuildId() != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseReleaseQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>WHSWarehouseReleaseQueryBuilder</c> instance used for building the query to select load lines that can be released to the warehouse.
    /// </summary>
    /// <returns>A <c>WHSWarehouseReleaseQueryBuilder</c> instance.s</returns>
    protected WHSWarehouseReleaseQueryBuilder warehouseReleaseQueryBuilder()
    {
        if (!warehouseReleaseQueryBuilder)
        {
            warehouseReleaseQueryBuilder = WHSWarehouseReleaseQueryBuilder::construct();
        }

        return warehouseReleaseQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParametersMap</Name>
				<Source><![CDATA[
    final internal Map createParametersMap(
        WHSShipConsolidationPolicySeqNum _policySeqNum, 
        int                              _sourceLinesUsed, 
        int                              _shipmentsCreated)
    {
        Map parameters = new Map(Types::String, Types::String);

        parameters.insert('policySeqNum', int2Str(_policySeqNum));
        parameters.insert('sourceLineUsed', int2Str(_sourceLinesUsed));
        parameters.insert('shipmentsCreated', int2Str(_shipmentsCreated));

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLineFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update a load line with a shipment and potentially load ID.
    /// </summary>
    /// <param name = "_loadLine">The load line.</param>
    /// <param name = "_shipmentTable">The shipment table.</param>
    protected internal void updateLoadLineFromShipment(
        WHSLoadLine      _loadLine, 
        WHSShipmentTable _shipmentTable)
    {
        WHSShipmentId originalShipmentId = _loadLine.ShipmentId;
        if (_shipmentTable.LoadId)
        {
            _loadLine.LoadId = _shipmentTable.LoadId;
        }

        _loadLine.ShipmentId = _shipmentTable.ShipmentId;
        _loadLine.update();

        if (!originalShipmentId && _loadLine.ShipmentId && TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
        {
            TMSRouteSegmentLoadLine segmentLoadLine;
            TMSRoute                route;
            if (_loadLine.LoadId)
            {
                WHSLoadTable loadTable;
                select firstOnly route
                    exists join loadTable
                        where loadTable.RouteCode == route.RouteCode
                           && loadTable.LoadId    == _loadLine.LoadId;
            }

            if (route)
            {
                while select segmentLoadLine
                    group by segmentLoadLine.Sequence
                    where segmentLoadLine.LoadLineRecId == _loadLine.RecId
                {
                    TMSRouteSegmentShipment segmentShipment;
                    TMSRouteSegment         routeSegment;

                    routeSegment                            = TMSRouteSegment::find(_shipmentTable.RouteCode, segmentLoadLine.Sequence);

                    segmentShipment.RouteCode               = route.RouteCode;
                    segmentShipment.Sequence                = segmentLoadLine.Sequence;
                    segmentShipment.Id                      = _shipmentTable.ShipmentId;
                    segmentShipment.OriginPostalCode        = routeSegment.originPostalAddress().ZipCode;
                    segmentShipment.DestinationPostalCode   = routeSegment.destinationPostalAddress().ZipCode;
                    segmentShipment.DlvTermId               = _shipmentTable.DlvTermId;
                    segmentShipment.ActualWeight            = _shipmentTable.displayTotalWeight();

                    if (!segmentShipment.validateWrite())
                    {
                        throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRouteSegmentShipment)));
                    }
                    else
                    {
                        segmentShipment.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findConsolidationShipmentForPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a consolidation shipment.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_shipmentTable">A shipment instance is being consolidated.</param>
    /// <returns>The initialized shipment instance if found.</returns>
    protected internal WHSShipmentTable findConsolidationShipmentForPolicy(
        WHSShipConsolidationPolicyData  _shipConsolidationPolicyData,
        WHSShipmentTable                _shipmentTable)
    {
        Query whsShipmentTableQuery = this.warehouseReleaseQueryBuilder().buildShipmentTableQueryForPolicy(_shipConsolidationPolicyData, _shipmentTable);
        
        if (loadPostEngine)
        {
            QueryBuildDataSource shipmentDS = whsShipmentTableQuery.dataSourceTable(tableNum(WHSShipmentTable));

            findOrCreateRange_W(shipmentDS, fieldNum(WHSShipmentTable, LoadId), loadPostEngine.parmLoadTable().LoadId);
        }

        QueryRun            queryRun = new QueryRun(whsShipmentTableQuery);
        WHSShipmentTable    foundShipmentTable;

        if (queryRun.next())
        {
            foundShipmentTable = queryRun.get(tablenum(WHSShipmentTable));
            
            if (!this.canShipmentsOnWaveBeConsolidated(foundShipmentTable))
            {
                foundShipmentTable.clear();
            }
        }

        return foundShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShipmentsOnWaveBeConsolidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the shipment can be consolidated with others on a wave.
    /// </summary>
    /// <param name = "_foundShipmentTable">The shipment being evaluated.</param>
    /// <returns>True if consolidation is possible, otherwise false.</returns>
    protected internal boolean canShipmentsOnWaveBeConsolidated(WHSShipmentTable _foundShipmentTable)
    {
        if (!_foundShipmentTable.WaveId)
        {
            return true;
        }

        WHSWaveTable consolidatedWaveTable = WHSWaveTable::find(_foundShipmentTable.WaveId);

        // it is only reducing the probability of wave processing and releasing to warehouse parallel execution conflicts, not fixing it.
        if (consolidatedWaveTable
        &&  (consolidatedWaveTable.WaveStatus == WHSWaveStatus::Executing
        ||   (consolidatedWaveTable.canExecute()
              // it is not locking anything, it is just a check that lock wave name is not used by other process.
        &&    !WHSWaveLockManager::newStandard().testLockForWaveId(consolidatedWaveTable.WaveId))))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckShipConsolidationPolicyLock</Name>
				<Source><![CDATA[
    protected boolean shouldCheckShipConsolidationPolicyLock(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        return _shipConsolidationPolicy.ShipConsolidationPolicyName
            && _shipConsolidationPolicy.ConsolidateWithExistingShipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryShipConsolidationPolicyLock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attemp to get a lock on the shipment consolidation policy.
    /// </summary>
    /// <param name = "_shipConsolidationPolicy">The shipment consolidation policy.</param>
    protected void tryShipConsolidationPolicyLock(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        boolean lockAquired;
        Connection connection;

        str lockName = WHSShipConsolidationPolicy::getWarehouseReleasePolicyLockName(_shipConsolidationPolicy);
        
        try
        {
            // It is a connection class that uses current connection, not creates any new connections
            connection = new Connection();

            // lock is held until the transaction for current connection is alive
            reqReaderWriterLock.setConnection(lockName, connection);
            reqReaderWriterLock.parmForceUserConnectionLock(true);
                            
            lockAquired = reqReaderWriterLock.tryEnterUpdateLock(lockName);
        
            if (!lockAquired)
            {
                warning(strFmt("@WAX:WHSShipConsolidationParallelReleasesToWarehouseWarning", _shipConsolidationPolicy.ShipConsolidationPolicyName));
            }
        }
        finally
        {
            connection.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPolicyFieldValuesCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates shipments policy fields cache.
    /// </summary>
    /// <param name = "_shipConsolidationPolicyData">A shipment consolidation policy data object.</param>
    /// <param name = "_queryRunReleaseLine">A query run that holds the selection of records for a sales line that should be used for the shipment creation.</param>
    /// <param name = "_shipmentTable">Shipment record.</param>
    /// <returns>The shipments policy fields cache.</returns>
    [Wrappable(false)]
    protected internal container calcPolicyFieldValuesCacheKey(
        WHSShipConsolidationPolicyData  _shipConsolidationPolicyData,
        QueryRun                        _queryRunReleaseLine,
        WHSShipmentTable                _shipmentTable)
    {
        container   policyFieldValuesCacheKey;
        WHSLoadLine loadLine = _queryRunReleaseLine.get(tableNum(WHSLoadLine));

        _shipConsolidationPolicyData.calcShipConsolidationFieldValues(_shipmentTable, _queryRunReleaseLine);
        
        ListEnumerator policyFieldEnumerator = _shipConsolidationPolicyData.shipConsolidationPolicyFields().getEnumerator();

        while (policyFieldEnumerator.moveNext())
        {
            WHSShipConsolidationPolicyFieldData shipConsolidationPolicyFieldData = policyFieldEnumerator.current();

            policyFieldValuesCacheKey += shipConsolidationPolicyFieldData.getFieldValue();
        }

        if (loadPostEngine)
        {
            policyFieldValuesCacheKey += loadLine.LoadId;
        }

        return policyFieldValuesCacheKey;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>