<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlan</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlan</c> class provides information for a <c>BudgetPlanHeader</c> document.
/// </summary>
public class BudgetPlan
{
    BudgetPlanHeader    budgetPlanHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultBudgetingOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>BudgetingOrganization</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    protected void defaultBudgetingOrganization()
    {
        BudgetPlanningSecurityModel securityModel = BudgetPlanningConfiguration::find().SecurityModel;

        if (!budgetPlanHeader.BudgetPlanningProcess)
        {
            // Return since we cannot determine a default without the process
            return;
        }

        if (securityModel == BudgetPlanningSecurityModel::Position)
        {
            this.defaultBudgetingOrganizationForPosition();
        }

        if (securityModel == BudgetPlanningSecurityModel::SecurityRole)
        {
            this.defaultBudgetingOrganizationForRole();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetingOrganizationForPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>BudgetingOrganization</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <remarks>
    /// The value set is determined based on the current user's work assignment.
    /// </remarks>
    protected void defaultBudgetingOrganizationForPosition()
    {
        HcmPositionDetail               positionDetail;
        HcmPositionWorkerAssignment     workerAssignment;
        HcmPositionWorkerAssignment     workerAssignmentAdditional;
        HcmWorkerRecId                  currentWorker = HcmWorkerLookup::currentWorker();
        utcdatetime                     now = DateTimeUtil::utcNow();

        if (!budgetPlanHeader.BudgetPlanningProcess)
        {
            return;
        }

        // Check if the worker is assigned to an organization
        select firstonly validTimeState(now) Department from positionDetail
            exists join workerAssignment
                where workerAssignment.Position == positionDetail.Position
                    && workerAssignment.Worker  == currentWorker
            notexists join workerAssignmentAdditional
                where workerAssignmentAdditional.RecId     != workerAssignment.RecId
                    && workerAssignmentAdditional.Position == workerAssignment.Position
                    && workerAssignmentAdditional.Worker   == workerAssignment.Worker;

        // If the worker's department is in the budget planning hierarchy, then default that value
        // If a parent budget plan has already been set, then set the worker's department as budgeting organization only if
        // it is a child organization of the parent budgeting organization for the parent budget plan set.
        if (positionDetail.Department
            && BudgetPlan::isOrganizationInBudgetPlanningHierarchy(budgetPlanHeader.BudgetPlanningProcess, positionDetail.Department)
            && !(budgetPlanHeader.ParentBudgetPlanHeader && !this.hasParentPlanWithParentOrganization(positionDetail.Department)))
        {
            budgetPlanHeader.BudgetingOrganization = positionDetail.Department;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetingOrganizationForRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>BudgetingOrganization</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <remarks>
    /// The value set is determined based on the current user's roles' organization assignments.
    /// </remarks>
    protected void defaultBudgetingOrganizationForRole()
    {
        BudgetPlanningProcess               budgetPlanningProcess;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        BudgetingOrganizationRecId          parentBudgetingOrganization;
        BudgetingOrganizationRecId          defaultBudgetingOrganizationRecId;
        OMInternalOrganization              defaultBudgetingOrganization;
        OMUserRoleOrganization              omUserRoleOrganization;
        QueryRun                            queryRun;
        UserId                              currentUserId = curUserId();

        if (!budgetPlanHeader.BudgetPlanningProcess)
        {
            return;
        }

        if (budgetPlanHeader.ParentBudgetPlanHeader)
        {
            parentBudgetingOrganization = BudgetPlanHeader::find(budgetPlanHeader.ParentBudgetPlanHeader).BudgetingOrganization;

            queryRun = new QueryRun(BudgetPlan::getChildBudgetingOrganizationQuery(budgetPlanHeader.BudgetPlanningProcess, parentBudgetingOrganization));
            if (queryRun.next())
            {
                defaultBudgetingOrganization      = queryRun.getNo(1);
                defaultBudgetingOrganizationRecId = defaultBudgetingOrganization.RecId;
            }
        }
        else
        {
            select firstOnly omInternalOrganization from omUserRoleOrganization
                where omUserRoleOrganization.User == currentUserId
                exists join budgetPlanningProcessAdministration
                    where budgetPlanningProcessAdministration.BudgetPlanningProcess  == budgetPlanHeader.BudgetPlanningProcess
                        && budgetPlanningProcessAdministration.BudgetingOrganization == omUserRoleOrganization.omInternalOrganization
                        exists join budgetPlanningProcess
                            where budgetPlanningProcess.RecId                   == budgetPlanningProcessAdministration.BudgetPlanningProcess
                            && (budgetPlanningProcess.OrganizationHierarchyType == omUserRoleOrganization.OmHierarchyType
                                || !omUserRoleOrganization.OMHierarchyType);

            defaultBudgetingOrganizationRecId = omUserRoleOrganization.OMInternalOrganization;
        }

        budgetPlanHeader.BudgetingOrganization = defaultBudgetingOrganizationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>BudgetPlanningProcess</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    protected void defaultBudgetPlanningProcess()
    {
        // Blank unless there is only one active process
        budgetPlanHeader.BudgetPlanningProcess = BudgetPlanningProcessSetup::findActiveProcess().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetPlanningStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>BudgetPlanningStage</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <remarks>
    /// The <c>BudgetPlanningProcess</c> and <c>OMInternalOrganization</c> record references on the
    /// <c>BudgetPlanHeader</c> record must be set.
    /// </remarks>
    protected void defaultBudgetPlanningStage()
    {
        // First budget planning stage for the budget planning workflow associated
        // with the budgeting organization and budget planning process
        if (budgetPlanHeader.BudgetPlanningProcess
            && budgetPlanHeader.BudgetingOrganization)
        {
            budgetPlanHeader.BudgetPlanningStage = BudgetPlanningWorkflowSetup::getFirstPlanningStage(
                budgetPlanHeader.BudgetPlanningProcess,
                budgetPlanHeader.BudgetingOrganization).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetPlanPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>BudgetPlanPreparer</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    protected void defaultBudgetPlanPreparer()
    {
        budgetPlanHeader.BudgetPlanPreparer = HcmWorkerLookup::currentWorker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a value for the <c>Currency</c> field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    protected void defaultCurrency()
    {
        BudgetPlanningProcessRecId  planningProcessRecId;
        CurrencyCode                accountingCurrencyCode;

        if (budgetPlanHeader.BudgetPlanningProcess)

        {
            planningProcessRecId = budgetPlanHeader.BudgetPlanningProcess;
            accountingCurrencyCode     = Ledger::accountingCurrencyByLedger(BudgetPlanningProcess::find(planningProcessRecId).Ledger);

            budgetPlanHeader.Currency = accountingCurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a default value for the layout field of the <c>BudgetPlanHeader</c> table.
    /// </summary>
    protected void defaultLayout()
    {
        if (budgetPlanHeader.BudgetPlanningProcess
            && budgetPlanHeader.BudgetingOrganization
            && budgetPlanHeader.BudgetPlanningStage)
        {
            budgetPlanHeader.Layout = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                            budgetPlanHeader.BudgetPlanningProcess,
                                            budgetPlanHeader.BudgetingOrganization,
                                            budgetPlanHeader.BudgetPlanningStage).Layout;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default values for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field to set to the default values.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(BudgetPlanHeader, BudgetingOrganization):
                this.defaultBudgetingOrganization();
                break;

            case fieldNum(BudgetPlanHeader, BudgetPlanningProcess):
                this.defaultBudgetPlanningProcess();
                break;

            case fieldNum(BudgetPlanHeader, BudgetPlanningStage):
                this.defaultBudgetPlanningStage();
                break;

            case fieldNum(BudgetPlanHeader, BudgetPlanPreparer):
                this.defaultBudgetPlanPreparer();
                break;

            case fieldNum(BudgetPlanHeader, Currency):
                this.defaultCurrency();
                break;

            case fieldNum(BudgetPlanHeader, Layout):
                this.defaultLayout();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for a <c>BudgetPlanHeader</c> record.
    /// </summary>
    public void defaultRow()
    {
        this.defaultBudgetPlanPreparer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasParentPlanWithParentOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the <c>OMInternalOrganization</c> record ID is a child organization of the
    /// <c>OMInternalOrganization</c> record ID on the parent <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record to verify.
    /// </param>
    /// <returns>
    /// true if the record is that of a child organization; otherwise, false.
    /// </returns>
    protected boolean hasParentPlanWithParentOrganization(BudgetingOrganizationRecId _budgetingOrganizationRecId = 0)
    {
        BudgetingOrganizationRecId  budgetingOrganizationRecId;
        Query                       query;
        QueryRun                    queryRun;

        if (_budgetingOrganizationRecId)
        {
            budgetingOrganizationRecId = _budgetingOrganizationRecId;
        }
        else
        {
            budgetingOrganizationRecId = budgetPlanHeader.BudgetingOrganization;
        }

        query = BudgetPlan::getParentBudgetPlanHeaderQuery(
                    budgetPlanHeader.BudgetPlanningProcess,
                    budgetingOrganizationRecId,
                    budgetPlanHeader.ParentBudgetPlanHeader);

        queryRun = new QueryRun(query);

        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetingOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>BudgetingOrganization</c> field value.
    /// </summary>
    protected void modifiedBudgetingOrganization()
    {
        // Default the BudgetPlanningStage and BudgetPlanLayout values
        budgetPlanHeader.defaultField(fieldNum(BudgetPlanHeader, BudgetPlanningStage));
        budgetPlanHeader.defaultField(fieldNum(BudgetPlanHeader, Layout));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>BudgetPlanningProcess</c> field value.
    /// </summary>
    protected void modifiedBudgetPlanningProcess()
    {
        // Clear out the budgeting organization unless the budgeting organization is part of the
        // budget organization structure for the budget planning process.
        if (budgetPlanHeader.BudgetingOrganization
            && !BudgetPlan::isOrganizationInBudgetPlanningHierarchy(budgetPlanHeader.BudgetPlanningProcess, budgetPlanHeader.BudgetingOrganization))
        {
            budgetPlanHeader.BudgetingOrganization = 0;
        }
        else
        {
            this.defaultBudgetingOrganization();
            this.defaultBudgetPlanningStage();
            this.defaultLayout();
        }

        // Clear the parent budget plan value
        budgetPlanHeader.ParentBudgetPlanHeader = 0;

        // Clear the priority if it doesn't exist for the process
        if (!BudgetPlanPriorityConstraint::findByProcessPriority(budgetPlanHeader.BudgetPlanningProcess, budgetPlanHeader.BudgetPlanPriority))
        {
            budgetPlanHeader.BudgetPlanPriority = 0;
        }

        // Set default Currency
        this.defaultCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>Currency</c> field value.
    /// </summary>
    protected void modifiedCurrency()
    {
        if (budgetPlanHeader.RecId)
        {
            BudgetPlanRowRecId       currencyElementDefinitionRecId = BudgetPlanRow::findByFieldName(fieldStr(BudgetPlanLine, TransactionCurrencyCode)).RecId;
            BudgetPlanLayoutElement  currencyLayoutElement          = BudgetPlanLayoutElement::findByLayoutElementDefinition(budgetPlanHeader.Layout, currencyElementDefinitionRecId);

            if (!currencyLayoutElement.RecId
                || (currencyLayoutElement.RecId && currencyLayoutElement.IsEditable))
            {
                this.updatePlanLineCurrencyAmounts(Box::confirm("@Budget:ModifyBudgetPlanHeaderCurrencyCode"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanLineCurrencyAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TransactionCurrencyAmount</c>, <c>AccountingCurrencyAmount</c> and <c>ReportingCurrencyAmount</c> fields of
    /// the <c>BudgetPlanLine</c> table when the currency code is updated.
    /// </summary>
    /// <param name = "_canCalculateTransactionCurrencyAmount">
    /// true, if user wants to change the <c>TransactionCurrencyAmount</c> field; otherwise false.
    /// </param>
    public void updatePlanLineCurrencyAmounts(boolean _canCalculateTransactionCurrencyAmount)
    {
        BudgetPlanLine                     budgetPlanLine, budgetPlanLineUpdate;
        CurrencyExchangeHelper             currencyExchangeHelper;
        Ledger                             ledger = Ledger::find(BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess).Ledger);
        CurrencyCode                       reportingCurrency = Ledger::reportingCurrency(ledger.PrimaryForLegalEntity);
        CurrencyCode                       accountingCurrency = Ledger::accountingCurrency(ledger.PrimaryForLegalEntity);
        BudgetPlanAccountingCurrencyAmount accountingCurrencyAmount;
        BudgetPlanReportingCurrencyAmount  reportingCurrencyAmount;
        BudgetPlanCurrencyAmount           currencyAmount;
        ExchRate                           transactionAmountRateMultiplier = 1, reportingAmountRateMultiplier = 1, accountingAmountRateMultiplier = 1;
        Currency                           currency;

        currency = Currency::find(budgetPlanHeader.Currency);

        // Loop through the BudgetPlanLine records group by the effective date
        while select EffectiveDate, TransactionCurrencyCode from budgetPlanLine
            group by EffectiveDate,
                     TransactionCurrencyCode
                where budgetPlanLine.BudgetPlanHeader == budgetPlanHeader.RecId
        {
            // Gets the first BudgetPlanLine record for calculating the multiplier factor for transaction currency amount,
            // reporting currency amount and accounting currency amount.
            select firstonly TransactionCurrencyAmount, TransactionCurrencyCode
                from budgetPlanLineUpdate
                order by budgetPlanLineUpdate.TransactionCurrencyAmount desc //Use the largest amount for rate determination
                    where budgetPlanLineUpdate.EffectiveDate              == budgetPlanLine.EffectiveDate
                        && budgetPlanLineUpdate.BudgetPlanHeader          == budgetPlanHeader.RecId
                        && budgetPlanLineUpdate.TransactionCurrencyCode   == budgetPlanLine.TransactionCurrencyCode
                        && budgetPlanLineUpdate.TransactionCurrencyAmount != 0;

            if (budgetPlanLineUpdate.TransactionCurrencyAmount != 0)
            {
                transactionAmountRateMultiplier = 1;
                reportingAmountRateMultiplier   = 1;
                accountingAmountRateMultiplier  = 1;

                currencyExchangeHelper = currencyExchangeHelper::newExchangeDate(ledger.RecId, budgetPlanLine.EffectiveDate);
                currencyExchangeHelper.parmExchangeRateTypeRecId(ledger.BudgetExchangeRateType);

                // Calculates the transaction currency amount and multiplier factor when the user selects
                // to update the amount with then currency update in header.
                if (_canCalculateTransactionCurrencyAmount
                    && budgetPlanLineUpdate.TransactionCurrencyCode != budgetPlanHeader.Currency)
                {
                    currencyAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                                        budgetPlanLineUpdate.TransactionCurrencyCode,
                                        budgetPlanHeader.Currency,
                                        budgetPlanLineUpdate.TransactionCurrencyAmount,
                                        true);

                    transactionAmountRateMultiplier = currencyAmount/budgetPlanLineUpdate.TransactionCurrencyAmount;
                }
                else
                {
                    currencyAmount = budgetPlanLineUpdate.TransactionCurrencyAmount;
                }

                // Calculates the reporting currency amount and multiplier factor
                if ((reportingCurrency != budgetPlanHeader.Currency)
                    && currencyAmount != 0)
                {
                    reportingCurrencyAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                                                budgetPlanHeader.Currency,
                                                reportingCurrency,
                                                currencyAmount,
                                                true);

                    reportingAmountRateMultiplier = reportingCurrencyAmount/currencyAmount;
                }

                // Calculates the accounting currency amount and multiplier factor
                if ((accountingCurrency != budgetPlanHeader.Currency)
                    && currencyAmount != 0)
                {
                    accountingCurrencyAmount = currencyExchangeHelper.calculateCurrencyToCurrency(
                                                    budgetPlanHeader.Currency,
                                                    accountingCurrency,
                                                    currencyAmount,
                                                    true);

                    accountingAmountRateMultiplier = accountingCurrencyAmount/currencyAmount;
                }

                // Updates the BudgetPlaLine records using direct SQL.
                this.updateBudgetPlanLine(
                    budgetPlanLine.EffectiveDate,
                    budgetPlanLineUpdate.TransactionCurrencyCode,
                    transactionAmountRateMultiplier,
                    transactionAmountRateMultiplier * reportingAmountRateMultiplier,
                    transactionAmountRateMultiplier * accountingAmountRateMultiplier,
                    currency.RoundingPrecision);
            }
        }

        // Creates BudgetPlanLineActiveView and BudgetPlanLineActiveViewDetail records  after the changes in the BudgetPlanLine amounts
        BudgetPlanActiveView activeView = BudgetPlanActiveView::newFromBudgetPlanHeader(budgetPlanHeader.RecId);
        activeView.createBudgetPlanActiveViewAndDetailFromLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BudgetPlanLine</c> table values using SQL direct.
    /// </summary>
    /// <param name = "_effectiveDate">
    /// The effective date for the <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name = "_currencyCode">
    /// The currency for the <c>BudgetPlanLine</c> record.
    /// </param>
    /// <param name = "_transactionAmountRateMultiplier">
    /// The multiplier factor for the <c>TransactionCurrencyAmount</c> field.
    /// </param>
    /// <param name = "_reportingAmountRateMultiplier">
    /// The multiplier factor for the <c>ReportingCurrencyAmount</c> field.
    /// </param>
    /// <param name = "_accountingAmountRateMultiplier">
    /// The multiplier factor for the <c>AccountingCurrencyAmount</c> field.
    /// </param>
    /// <param name = "_precision">
    /// The rounding precision.
    /// </param>
    protected void updateBudgetPlanLine(
        EffectiveDate          _effectiveDate,
        BudgetPlanCurrencyCode _currencyCode,
        ExchRate               _transactionAmountRateMultiplier,
        ExchRate               _reportingAmountRateMultiplier,
        ExchRate              _accountingAmountRateMultiplier,
        real                  _precision)
    {
        str sqlUpdateWithRound;

        sqlUpdateWithRound  = strFmt(
                                "UPDATE %1 SET %2 = %3",                                
                                new DictTable(tableNum(BudgetPlanLine)).name(DbBackend::Sql),                                
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, TransactionCurrencyAmount)).name(DbBackend::Sql),
                                BudgetPlanActiveView::roundingAmountSQLGenerator(
                                    strFmt("%1 * %2", fieldstr(BudgetPlanLine, TransactionCurrencyAmount), num2str(_transactionAmountRateMultiplier, 0, 16, 1, 0)),
                                    _precision));

        sqlUpdateWithRound += strFmt(
                                ", %1 = %2",                                
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, ReportingCurrencyAmount)).name(DbBackend::Sql),
                                BudgetPlanActiveView::roundingAmountSQLGenerator(
                                    strFmt("%1 * %2", fieldstr(BudgetPlanLine, TransactionCurrencyAmount), num2str(_reportingAmountRateMultiplier, 0, 16, 1, 0)),
                                    _precision));

        sqlUpdateWithRound += strFmt(
                                ", %1 = %2",                                
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, AccountingCurrencyAmount)).name(DbBackend::Sql),
                                BudgetPlanActiveView::roundingAmountSQLGenerator(
                                    strFmt("%1 * %2", fieldstr(BudgetPlanLine, TransactionCurrencyAmount), num2str(_accountingAmountRateMultiplier, 0, 16, 1, 0)),
                                    _precision));

        sqlUpdateWithRound += strFmt(", %1 = '%2'", 
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, TransactionCurrencyCode)).name(DbBackend::Sql),
                                budgetPlanHeader.Currency);

        sqlUpdateWithRound += strFmt(
                                ", %1 = %2",                                
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, TransactionUnitPrice)).name(DbBackend::Sql),
                                BudgetPlanActiveView::roundingAmountSQLGenerator(
                                    strFmt("%1 * %2", fieldstr(BudgetPlanLine, TransactionUnitPrice), num2str(_transactionAmountRateMultiplier, 0, 16, 1, 0)),
                                    _precision));

        sqlUpdateWithRound += strFmt("WHERE %1 = %2",                                 
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, BudgetPlanHeader)).name(DbBackend::Sql),
                                budgetPlanHeader.RecId);

        sqlUpdateWithRound += strFmt("AND %1 = CONVERT(VARCHAR(24), '%2' ,121)" ,                                 
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, EffectiveDate)).name(DbBackend::Sql),
                                _effectiveDate);

        sqlUpdateWithRound += strFmt("AND %1 = '%2';" ,                                  
                                new DictField(tableNum(BudgetPlanLine), fieldNum(BudgetPlanLine, TransactionCurrencyCode)).name(DbBackend::Sql),
                                _currencyCode);

        sqlUpdateWithRound += strFmt("UPDATE %1 SET %2 = '%3' WHERE %4 = %5",                                 
                                new DictTable(tableNum(BudgetPlanHeader)).name(DbBackend::Sql),                                
                                new DictField(tableNum(BudgetPlanHeader), fieldNum(BudgetPlanHeader, Currency)).name(DbBackend::Sql),
                                budgetPlanHeader.Currency,                                 
                                new DictField(tableNum(BudgetPlanHeader), fieldNum(BudgetPlanHeader, RecId)).name(DbBackend::Sql),
                                budgetPlanHeader.RecId);

        Connection connection = new Connection();
        connection.ttsbegin();

        ExecutePermission permission = new ExecutePermission();
        permission.assert();

        Statement statement = connection.createStatement();
        statement.executeUpdateWithParameters(sqlUpdateWithRound, SqlParams::create());
        statement.close();

        CodeAccessPermission::revertAssert();

        connection.ttscommit();
        connection.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets additional field values based on the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        if (budgetPlanHeader.RecId
            && !BudgetPlan::isUserBlocked(budgetPlanHeader))
        {
            BudgetPlan::setInUse(budgetPlanHeader);
        }

        switch (_fieldId)
        {
            case fieldNum(BudgetPlanHeader, BudgetingOrganization):
                this.modifiedBudgetingOrganization();
                break;

            case fieldNum(BudgetPlanHeader, BudgetPlanningProcess):
                this.modifiedBudgetPlanningProcess();
                break;

            case fieldNum(BudgetPlanHeader, Currency):
                this.modifiedCurrency();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _budgetPlanHeader = budgetPlanHeader)
    {
        budgetPlanHeader = _budgetPlanHeader;

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetingOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetingOrganization</c> field in the <c>BudgetPlanHeader</c> table is
    /// valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetingOrganization</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetingOrganization()
    {
        boolean                     isValid = true;
        BudgetingOrganizationRecId  selectedParentBudgetPlanOrg;

        // The current user MUST belong to an organization in the budget planning hierarchy associated with the budget process
        isValid = BudgetPlan::validateWorkerBelongsToPlanningHierarchy(budgetPlanHeader.BudgetPlanningProcess);

        if (isValid)
        {
            if (!BudgetPlan::isOrganizationInBudgetPlanningHierarchy(budgetPlanHeader.BudgetPlanningProcess, budgetPlanHeader.BudgetingOrganization))
            {
                // Budgeting organization entered MUST be part of the budget planning hierarchy associated with the budget process
                isValid = checkFailed(
                    strFmt("@GLS70501", DirPartyTable::findRec(budgetPlanHeader.BudgetingOrganization).Name));
            }
            else if (!BudgetPlan::isOrganizationVisibleToWorker(budgetPlanHeader.BudgetPlanningProcess, budgetPlanHeader.BudgetingOrganization))
            {
                // Budgeting organization entered MUST be visible to the current user
                isValid = checkFailed(
                    strFmt("@GLS150000",
                        DirPartyTable::findRec(budgetPlanHeader.BudgetingOrganization).Name));
            }
            else if (budgetPlanHeader.BudgetPlanPreparer
                     && budgetPlanHeader.BudgetPlanPreparer != HcmWorkerLookup::currentWorker()
                     && !BudgetPlan::isOrganizationVisibleToWorker(
                            budgetPlanHeader.BudgetPlanningProcess,
                            budgetPlanHeader.BudgetingOrganization,
                            budgetPlanHeader.BudgetPlanPreparer))
            {
                // Budgeting organization entered MUST be visible to the preparer if the preparer is different from the current user
                checkFailed(
                    strFmt("@SYS4006477",
                        DirPartyTable::findRec(budgetPlanHeader.BudgetingOrganization).Name));
            }
            else
            {
                // If a parent budget plan is entered, verify that the budgeting organization entered is a child of the
                // budgeting organization on the parent plan
                if (budgetPlanHeader.ParentBudgetPlanHeader && !this.hasParentPlanWithParentOrganization())
                {
                    selectedParentBudgetPlanOrg = BudgetPlanHeader::find(budgetPlanHeader.ParentBudgetPlanHeader).BudgetingOrganization;

                    isValid = checkFailed(strFmt("@GLS70603", DirPartyTable::findRec(selectedParentBudgetPlanOrg).Name));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanningProcess</c> field in the <c>BudgetPlanHeader</c> table is
    /// valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetPlanningProcess</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetPlanningProcess()
    {
        boolean                             isValid = true;
        BudgetPlanningApprovalProcessState  approvalState;

        approvalState = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess).ApprovalProcessState;

        // A budget planning process with an approval process state of Draft or Completed cannot be selected
        if (approvalState != BudgetPlanningApprovalProcessState::InProcess)
        {
            isValid = checkFailed(strFmt("@GLS70500", enum2str(BudgetPlanningApprovalProcessState::InProcess)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanPreparer</c> field in the <c>BudgetPlanHeader</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetPlanPreparer</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetPlanPreparer()
    {
        boolean  isValid = true;
        QueryRun queryRun;

        queryRun = new QueryRun(BudgetPlan::getBudgetPlanPreparerQuery(budgetPlanHeader.BudgetPlanPreparer));

        //The selected budget plan preparer MUST be an active worker.
        if (!queryRun.next())
        {
            isValid = checkFailed("@GLS70506");
        }
        else if (budgetPlanHeader.BudgetPlanPreparer != HcmWorkerLookup::currentWorker()
                 && budgetPlanHeader.BudgetPlanningProcess
                 && budgetPlanHeader.BudgetingOrganization
                 && !BudgetPlan::isOrganizationVisibleToWorker(
                     budgetPlanHeader.BudgetPlanningProcess,
                     budgetPlanHeader.BudgetingOrganization,
                     budgetPlanHeader.BudgetPlanPreparer))
        {
            // Budgeting organization entered MUST be visible to the preparer if the preparer is different from the current user
            checkFailed(strFmt("@SYS4006477", DirPartyTable::findRec(budgetPlanHeader.BudgetingOrganization).Name));

            // Fail if the security model is Position based
            if (BudgetPlanningConfiguration::find().SecurityModel == BudgetPlanningSecurityModel::Position)
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanPriority</c> field in the <c>BudgetPlanHeader</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetPlanPriority</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateBudgetPlanPriority()
    {
        boolean  isValid = true;
        QueryRun queryRun;

        // Validate only in the context of a budget planning process
        if (budgetPlanHeader.BudgetPlanningProcess)
        {
            //The budget plan priority MUST be in the list of budget plan priorities for the selected budget planning process.
            queryRun = new QueryRun(
                BudgetPlan::getBudgetPlanPriorityQuery(
                    budgetPlanHeader.BudgetPlanningProcess,
                    budgetPlanHeader.BudgetPlanPriority));

            if (!queryRun.next())
            {
                isValid = checkFailed("@GLS70505");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>Currency</c> field in the <c>BudgetPlanHeader</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>Currency</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateCurrency()
    {
        AifFault                    fault;
        boolean                     isValid = true;
        BudgetPlanLineEffectiveDate cycleStartDate;
        ExchangeRateHelper          exchangeRateHelper;
        LedgerRecId                 ledgerRecId;
        CurrencyCode                accountingCurrency;
        ExchangeRateTypeRecId       budgetExchangeRateType;
        str                         faultReason;

        ledgerRecId = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess).Ledger;
        accountingCurrency = Ledger::accountingCurrencyByLedger(ledgerRecId);

        if (budgetPlanHeader.Currency != accountingCurrency)
        {
            budgetExchangeRateType = Ledger::budgetExchangeRateTypeByLedger(ledgerRecId);
            cycleStartDate = BudgetPlanningProcessHelper::getProcessCycleStartDate(budgetPlanHeader.BudgetPlanningProcess);

            // If the entered currency differs from the accounting currency, MUST
            // validate that a currency exchange rate exists between the selected currency and accounting currency
            // Note: If an exchange rate doesn't exist, the methods getExchangeRate1 and getExchangeRate2 will raise
            //       the appropriate error message

            exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(budgetPlanHeader.Currency, accountingCurrency);
            exchangeRateHelper.parmExchangeRateTypeRecId(budgetExchangeRateType);
            exchangeRateHelper.parmExchangeDate(cycleStartDate);
            exchangeRateHelper.parmErrorType(AifErrorType::Fault);
            exchangeRateHelper.getExchangeRate2();

            fault       = AifFault::getRootFault();
            faultReason = strFmt(
                        "@SYS321719",
                        ExchangeRateType::find(budgetExchangeRateType).Name,
                        budgetPlanHeader.Currency,
                        accountingCurrency,
                        cycleStartDate);

            // Validate that a currency exchange rate 2 if required, exists between the selected currency and accounting currency
            isValid = !(fault != null
                            && fault.getReason() == faultReason);

            if (isValid)
            {
                // Validate that a currency exchange rate 1 exists between the selected currency and accounting currency
                isValid = (exchangeRateHelper.getExchangeRate1() != 0);
            }
        }

        // Check if the budget plan layout consists of uneditable columns with non-zero amounts.
        if (isValid)
        {
            isValid = this.checkBudgetPlanCurrentLayoutForEdit();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanLayout</c> field in the <c>BudgetPlanHeader</c> table is valid.
    /// </summary>
    /// <returns> true if the <c>BudgetPlanLayout</c> field is valid; otherwise, false. </returns>
    protected boolean validateLayout()
    {
        boolean isValid = BudgetPlanLayoutHelper::checkLayoutExistsInHeaderSetup(budgetPlanHeader, BudgetPlanLayout::find(budgetPlanHeader.Layout), true);

        if (isValid && !BudgetPlanLedgerDimensionPivotControl::checkDimensionFocusContainsValidSegments(budgetPlanHeader.BudgetPlanningProcess, budgetPlanHeader.Layout))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a user can edit <c>BudgetPlanHeader</c> record based on if the plan is in use or not.
    /// </summary>
    /// <param name = "_budgetPlanHeader"> The <c>BudgetPlanHeader</c> table buffer. </param>
    /// <param name = "_displayWarning"> Boolean indicating whether to show an error message if the current user is not editing; optional. </param>
    /// <returns> true, if the current user is blocked from editing the plan; otherwise, false. </returns>
    public static boolean isUserBlocked(BudgetPlanHeader _budgetPlanHeader, boolean _displayWarning = false)
    {
        if (!_budgetPlanHeader.isCurrent())
        {
            _budgetPlanHeader.reread();
        }

        boolean userIsBlocked = _budgetPlanHeader.InUseBy != BudgetPlanningConstants::emptyString;

        if (userIsBlocked)
        {
            userIsBlocked = _budgetPlanHeader.InUseBy != curUserId();

            if (userIsBlocked && _displayWarning)
            {
                warning(strFmt("@Budget:BudgetPlanNotInUseByCurrentUser", _budgetPlanHeader.InUseBy));
            }
        }

        return userIsBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>InUseBy</c> field of a budget plan header to indicate it is being used.
    /// </summary>
    /// <param name = "_budgetPlanHeader">
    /// A budget plan header table buffer.
    /// </param>
    public static void setInUse(BudgetPlanHeader _budgetPlanHeader)
    {
        if (!_budgetPlanHeader.isCurrent())
        {
            _budgetPlanHeader.reread();
        }

        if (_budgetPlanHeader.InUseBy != curUserId())
        {
            ttsbegin;

            // Set the document to in use by the current user.
            _budgetPlanHeader.selectForUpdate(true);
            _budgetPlanHeader.InUseBy = curUserId();
            _budgetPlanHeader.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InUseBy</c> value of a budget plan header.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The record ID of a <c>BudgetPlanHeader</c>.
    /// </param>
    /// <returns>
    /// true if the <c>InUseBy</c> value was cleared on the budget plan header; otherwise, false.
    /// </returns>
    public static boolean clearInUse(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        boolean             clearedInUse = false;
        BudgetPlanHeader    budgetPlanHeader;

        if (_budgetPlanHeaderRecId != 0)
        {
            ttsbegin;

            budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);

            if (budgetPlanHeader.RecId != 0)
            {
                budgetPlanHeader.InUseBy = BudgetPlanningConstants::emptyString;
                budgetPlanHeader.update();
                clearedInUse = true;
            }

            ttscommit;
        }

        return clearedInUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetPlanCurrentLayoutForEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if budget plan layout consists of uneditable columns with non-zero amounts in its associated lines.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveView">
    /// An optional <c>BudgetPlanLineActiveView</c> record parameter needed to check for associated budget plan lines.
    /// </param>
    /// <param name = "_forLineDeletion">
    /// An optional boolean parameter indicating the usage of the method is for line deletion.
    /// </param>
    /// <returns>
    /// true if the non-zero values for uneditable columns do not exist; otherwise, false.
    /// </returns>
    public boolean checkBudgetPlanCurrentLayoutForEdit(
        BudgetPlanLineActiveView    _budgetPlanLineActiveView = null,
        boolean                     _forLineDeletion = false)
    {
        if (_forLineDeletion && !_budgetPlanLineActiveView)
        {
            throw error(strFmt("%1 %2",
                        strFmt("@Budget:IncorrectFunctionUsage", methodstr(BudgetPlan, checkBudgetPlanCurrentLayoutForEdit)),
                        "@Budget:MissingActiveViewParameter"));
        }

        BudgetPlanLayoutElement             budgetPlanLayoutElement;
        BudgetPlanColumn                    budgetPlanColumn;
        BudgetPlanScenario                  budgetPlanScenario;
        str                                 dimensionValuesString;
        Level                               levelCount;
        boolean                             isValid = true;
        boolean                             linesExist;

        // Check if the budget plan lines exists for the context of the layout being viewed by querying BudgetPlanLineActiveViewDetail table.
        BudgetPlanLineActiveViewDetail budgetPlanlineActiveViewDetail;
        select firstonly budgetPlanlineActiveViewDetail
            where budgetPlanlineActiveViewDetail.Header == budgetPlanHeader.RecId;

        if (budgetPlanlineActiveViewDetail.RecId)
        {
            while select Ordinal, ElementDefinition, Layout from budgetPlanLayoutElement
                where budgetPlanLayoutElement.IsEditable == NoYes::No
                    && budgetPlanLayoutElement.Layout == budgetPlanHeader.Layout
                join Name, Scenario from budgetPlanColumn
                    where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
            {
                budgetPlanScenario = BudgetPlanScenario::find(budgetPlanColumn.Scenario);
                linesExist = BudgetPlanLineItem::nonZeroLinesExist(budgetPlanHeader.RecId, budgetPlanScenario, budgetPlanLayoutElement.Ordinal, _budgetPlanLineActiveView.RecId);

                // If non-editable columns with non-zero amounts exist in the layout, display error message.
                if (_forLineDeletion && linesExist)
                {
                    levelCount            = DimensionHierarchy::getLevelCount(BudgetPlanLayout::find(budgetPlanLayoutElement.Layout).DimensionHierarchy);
                    dimensionValuesString = BudgetPlanLedgerDimensionPivotControl::buildDimensionValueString(BudgetPlanLedgerDimensionPivotControl::convertToSegmentArray(_budgetPlanLineActiveView), levelCount);
                    isValid               = checkFailed(strFmt("@Budget:CannotDeleteActiveViewLine", dimensionValuesString, budgetPlanColumn.Name));
                    break;
                }
                else if (!_forLineDeletion && linesExist)
                {
                    isValid = checkFailed(strFmt("@Budget:ModifyingUneditableLayoutColumn", budgetPlanColumn.Name));
                    break;
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value for a specific field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID that corresponds with the field to be validated.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean isValid = true;

        isValid = !BudgetPlan::isUserBlocked(budgetPlanHeader, true);

        if (isValid)
        {
            switch (_fieldId)
            {
                case fieldNum(BudgetPlanHeader, BudgetingOrganization):
                    isValid = this.validateBudgetingOrganization();
                    break;

                case fieldNum(BudgetPlanHeader, BudgetPlanningProcess):
                    isValid = this.validateBudgetPlanningProcess();
                    break;

                case fieldNum(BudgetPlanHeader, ParentBudgetPlanHeader):
                    isValid = this.validateParentBudgetPlanHeader();
                    break;

                case fieldNum(BudgetPlanHeader, BudgetPlanPreparer):
                    isValid = this.validateBudgetPlanPreparer();
                    break;

                case fieldNum(BudgetPlanHeader, BudgetPlanPriority):
                    isValid = this.validateBudgetPlanPriority();
                    break;

                case fieldNum(BudgetPlanHeader, Currency):
                    isValid = this.validateCurrency();
                    break;

                case fieldNum(BudgetPlanHeader, Layout):
                    isValid = this.validateLayout();
                    break;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLayoutName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a <c>BudgetPlanLayoutName</c> value can be resolved to a record ID valid for a <c>BudgetPlanHeader</c> table buffer.
    /// </summary>
    /// <param name = "_layoutName"> The <c>BudgetPlanLayoutName</c> value to validate. </param>
    /// <returns> true if the <c>BudgetPlanLayoutName</c> value is valid; otherwise, false. </returns>
    public boolean validateLayoutName(BudgetPlanLayoutName _layoutName)
    {
        BudgetPlanLayout    layoutToValidate = BudgetPlanLayout::findByLocalizedName(_layoutName);
        boolean             isValid = (layoutToValidate != null);

        if (!isValid)
        {
            warning(strFmt("@Budget:UnableToFindUniqueRecord", "@Budget:LayoutDisplayNameSingular"));
        }

        if (isValid && !BudgetPlanLayoutHelper::checkLayoutExistsInHeaderSetup(budgetPlanHeader, layoutToValidate, true))
        {
            isValid = false;
        }

        if (isValid && !BudgetPlanLedgerDimensionPivotControl::checkDimensionFocusContainsValidSegments(budgetPlanHeader.BudgetPlanningProcess, layoutToValidate.RecId))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>ParentBudgetPlanHeader</c> field in the <c>BudgetPlanHeader</c> table is
    /// valid.
    /// </summary>
    /// <returns>
    /// true if the <c>ParentBudgetPlanHeader</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateParentBudgetPlanHeader()
    {
        boolean                         isValid = true;
        BudgetPlanHeader                selectedParentBudgetPlanHeader;
        DirPartyRecId                   parentOrganization;
        OrganizationHierarchyTypeRecId  budgetPlanningHierarchyRecId;

        // Validate only in the context of a budget planning process
        if (budgetPlanHeader.BudgetPlanningProcess)
        {
            // Parent plan selected MUST be in a stage that allows child plans to be created
            selectedParentBudgetPlanHeader = BudgetPlanHeader::find(budgetPlanHeader.ParentBudgetPlanHeader);

            if (selectedParentBudgetPlanHeader
                && !BudgetPlanningStageRule::findByProcessOrganizationStage(
                    selectedParentBudgetPlanHeader.BudgetPlanningProcess,
                    selectedParentBudgetPlanHeader.BudgetingOrganization,
                    selectedParentBudgetPlanHeader.BudgetPlanningStage).CanAddChildBudgetPlans)
            {
                isValid = checkFailed(strFmt("@GLS70503", selectedParentBudgetPlanHeader.Name));
            }
            else
            {
                // Parent plan selected MUST be for the same budget planning process and have a budgeting organization whose responsibility center
                // is the parent responsibility center for the entered budgeting organization
                if (!this.hasParentPlanWithParentOrganization())
                {
                    budgetPlanningHierarchyRecId = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess).OrganizationHierarchyType;
                    parentOrganization           = OMHierarchyRelationship::findParent(budgetPlanningHierarchyRecId, budgetPlanHeader.BudgetingOrganization);

                    if (parentOrganization)
                    {
                        isValid = checkFailed(
                            strFmt("@GLS70502",
                                budgetPlanHeader.DocumentNumber,
                                DirPartyTable::findRec(parentOrganization).Name));
                    }
                    else
                    {
                        isValid = checkFailed("@GLS70604");
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areUnitOfMeasureValuesEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>UnitOfMeasureClass</c> fields are equal
    /// for two <c>BudgetPlanScenario</c> records.
    /// </summary>
    /// <param name="_sourceBudgetPlanScenarioName">
    /// The name of the source <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <param name="_targetBudgetPlanScenarioName">
    /// The name of the target <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <returns>
    /// true if the value of the <c>UnitOfMeasureClass</c> fields are equal; otherwise, false.
    /// </returns>
    public static boolean areUnitOfMeasureValuesEqual(
        BudgetPlanScenarioName _sourceBudgetPlanScenarioName,
        BudgetPlanScenarioName _targetBudgetPlanScenarioName)
    {
        return (BudgetPlanScenario::findByLocalizedName(_sourceBudgetPlanScenarioName).UnitOfMeasureClass ==
                    BudgetPlanScenario::findByLocalizedName(_targetBudgetPlanScenarioName).UnitOfMeasureClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddBudgetPlanLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget plan header can have budget lines added.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the budget plan can have budget lines added; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static boolean canAddBudgetPlanLine(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanningWorkflowStageRecId budgetPlanningWorkflowStageRecId;
        BudgetPlanningProcessRecId       budgetPlanningProcessRecId;
        BudgetPlanningStageRule          budgetPlanningStageRule;

        if (!_budgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        budgetPlanningProcessRecId = BudgetPlanHeader::find(_budgetPlanHeaderRecId).BudgetPlanningProcess;

        budgetPlanningWorkflowStageRecId = BudgetPlanningWorkflowSetup::getCurrentBudgetPlanningWorkflowStage(_budgetPlanHeaderRecId);

        budgetPlanningStageRule = BudgetPlanningStageRule::findByProcessWorkflowStage(
                                        budgetPlanningProcessRecId,
                                        budgetPlanningWorkflowStageRecId);

        return (budgetPlanningStageRule.CanAddBudgetPlanLines == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetPlanHeaderForWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetPlanHeader</c> record is valid and ready
    /// to be written to the database.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrgRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <param name="_planningStageRecId">
    /// The record ID of the <c>BudgetPlanningStage</c> record.
    /// </param>
    /// <param name="_preparerRecId">
    /// The record ID of the <c>HcmWorker</c> record.
    /// </param>
    /// <param name="_planPriorityRecId">
    /// The record ID of the <c>BudgetPlanPriority</c> record; optional.
    /// </param>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record; optional.
    /// </param>
    /// <returns>
    /// true if the <c>BudgetPlanHeader</c> record is valid; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static boolean checkBudgetPlanHeaderForWrite(
        BudgetPlanningProcessRecId  _planningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrgRecId,
        BudgetPlanningStageRecId    _planningStageRecId,
        BudgetPlanPreparerRecId     _preparerRecId,
        BudgetPlanPriorityRecId     _planPriorityRecId = 0,
        BudgetPlanHeaderRecId       _budgetPlanHeaderRecId = 0)
    {
        BudgetPlanInteractionHelper budgetPlanInteractionHelper;
        BudgetPlanHeader            budgetPlanHeader = BudgetPlanHeader::find( _budgetPlanHeaderRecId);
        boolean                     isValid = true;

        // A budget planning stage MUST exist for the budget planning workflow and budget planning process
        if (!_planningStageRecId)
        {
            isValid = checkFailed("@GLS70504");
        }
        else
        {
            if (!_planningProcessRecId || !_budgetingOrgRecId || !_preparerRecId)
            {
                throw error(Error::missingParameter(null));
            }

            // A budget planning process with an approval process state of "Draft" or "Completed" cannot be selected
            if (BudgetPlanningProcess::find(_planningProcessRecId).ApprovalProcessState != BudgetPlanningApprovalProcessState::InProcess)
            {
                isValid = checkFailed(strFmt("@GLS70500", enum2str(BudgetPlanningApprovalProcessState::InProcess)));
            }
            // A budget planning stage rule MUST exist for the budget planning workflow stage and budget planning process
            else if (!BudgetPlanningStageRule::findByProcessOrganizationStage(_planningProcessRecId, _budgetingOrgRecId, _planningStageRecId))
            {
                isValid = checkFailed("@GLS70599");
            }
            else if (BudgetPlanningConfiguration::find().SecurityModel == BudgetPlanningSecurityModel::Position
                     && _preparerRecId != HcmWorkerLookup::currentWorker()
                     && !BudgetPlan::isOrganizationVisibleToWorker(
                         _planningProcessRecId,
                         _budgetingOrgRecId,
                         _preparerRecId))
            {
                // Budgeting organization entered MUST be visible to the preparer if the preparer is different from the current user
                isValid = checkFailed(
                    strFmt("@SYS4006477",
                        DirPartyTable::findRec(_budgetingOrgRecId).Name));
            }
            else if (_planPriorityRecId &&
                     !BudgetPlanPriorityConstraint::findByProcessPriority(_planningProcessRecId, _planPriorityRecId))
            {
                isValid = checkFailed("@GLS70505");
            }

            budgetPlanInteractionHelper = BudgetPlanInteractionHelper::newFromBudgetPlanHeader(budgetPlanHeader);

            if (!budgetPlanInteractionHelper.allowEditBudgetPlan())
            {
                isValid = checkFailed("@SYS81158");
            }

            // If the budget plan has already been created and is simply being saved, check the current user.
            if (isValid && budgetPlanHeader)
            {
                isValid = !BudgetPlan::isUserBlocked(budgetPlanHeader, true);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetPlanNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the number sequence that is set up for the budget plan ID.
    /// </summary>
    /// <param name="_numberSequenceReference">
    /// The number sequence reference to validate.
    /// </param>
    /// <returns>
    /// true if the number sequence is valid for budget plans; otherwise, false.
    /// </returns>
    public static boolean checkBudgetPlanNumberSequence(NumberSequenceReference _numberSequenceReference = null)
    {
        boolean                 isValid = true;
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceReference numberSequenceReference = _numberSequenceReference;

        if (!numberSequenceReference)
        {
            // Number sequence reference to check was not passed; find the reference for the budget plan number.
            numberSequenceReference = BudgetParameters::numRefBudgetPlanDocumentNumber();
        }
        else if (NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).DatatypeId != extendedTypeNum(BudgetPlanDocumentNumber))
        {
            // Number sequence reference that was passed is not for budget plan number.
            isValid = checkFailed("@SYS55194");
        }

        if (isValid)
        {
            if (!numberSequenceReference)
            {
                isValid = checkFailed(strFmt("@SYS53911", "@GLS70070", enum2str(NumberSeqModule::Budget)));
            }
            else
            {
                numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

                if (!numberSequenceTable)
                {
                    // The number sequence that was selected for the budget plan number does not exist.
                    isValid = checkFailed(
                        strFmt("@SYS53911",
                            numberSequenceReference.referenceLabel(),
                            numberSequenceReference.referenceModuleLabel()));
                }
                else if (numberSequenceTable.Blocked)
                {
                    // The number sequence set up for budget plan number is on hold.
                    isValid = checkFailed(strFmt("@SYS25068", numberSequenceTable.NumberSequence));
                }
                else if (numberSequenceTable.Manual)
                {
                    // The number sequence set up for budget plan number is set to manual.
                    isValid = checkFailed(strFmt("@GLS150027", numberSequenceTable.NumberSequence));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsParentBudgetPlanRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a parent budget plan is required.
    /// </summary>
    /// <param name="_budgetPlanningProcess">
    /// The record ID of a <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganization">
    /// The record ID of a <c>OMInternalOrganization</c> record.
    /// </param>
    /// <param name="_parentBudgetPlanHeader">
    /// The record ID of a <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the parent budget plan is required and specified or
    /// if the parent budget plan is not required; otherwise, false.
    /// </returns>
    public static boolean checkIsParentBudgetPlanRequired(BudgetPlanningProcessRecId _budgetPlanningProcess,
        BudgetingOrganizationRecId _budgetingOrganization,
        BudgetPlanHeaderRecId _parentBudgetPlanHeader)
    {
        boolean returnValue = true;
        BudgetPlanningWorkflow budgetPlanningWorkflow;

        budgetPlanningWorkflow = BudgetPlanningWorkflow::find(
            BudgetPlanningProcessAdministration::findByProcessOrganization(
                        _budgetPlanningProcess,
                        _budgetingOrganization).BudgetPlanningWorkflow);

        if (budgetPlanningWorkflow.IsParentBudgetPlanRequired && !_parentBudgetPlanHeader)
        {
            returnValue = checkFailed("@SYS4005290");
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorkflowStatusForDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a budget plan can be deleted that has the specified
    /// <c>BudgetPlanWorkflowStatus</c> enumeration value.
    /// </summary>
    /// <param name="_workflowStatus">
    /// A <c>BudgetPlanWorkflowStatus</c> enumeration value.
    /// </param>
    /// <param name="_budgetPlanName">
    /// The name of the budget plan.
    /// </param>
    /// <param name="_isFormDataSource">
    /// Indicates if the check is being made from a form.
    /// </param>
    /// <param name="_reportErrors">
    /// Indicates whether to generate a log entry stating the reason why the check failed.
    /// </param>
    /// <returns>
    /// true if a budget plan can be deleted; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static boolean checkWorkflowStatusForDelete(
        BudgetPlanWorkflowStatus    _workflowStatus,
        BudgetPlanningName          _budgetPlanName,
        boolean                     _isFormDataSource = false,
        boolean                     _reportErrors = true)
    {
        boolean isValid = true;

        if (_budgetPlanName == '')
        {
            throw error(Error::missingParameter(null));
        }

        if (_workflowStatus == BudgetPlanWorkflowStatus::InReview
            || (!_isFormDataSource && (_workflowStatus == BudgetPlanWorkflowStatus::Approved)))
        {
            if (_reportErrors)
            {
                isValid = checkFailed(strFmt("@GLS70555", _budgetPlanName));
            }
            else
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlan construct()
    {
        return new BudgetPlan();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the caller <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_sourceBudgetPlanHeaderRecId">
    /// The record ID of the source <c>BudgetPlanHeader</c> record to copy.
    /// </param>
    /// <param name="_targetBudgetPlanHeaderRecId">
    /// The record ID of the copy <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <remarks>
    /// Copies all the <c>BudgetPlanLine</c> records associated with the source <c>BudgetPlanHeader</c>
    /// record to the target <c>BudgetPlanHeader</c> record.The values on the source
    /// <c>BudgetPlanHeader</c> record are not copied to the target <c>BudgetPlanHeader</c> record as part
    /// of this copy process. The values were copied when the target <c>BudgetPlanHeader</c> record was
    /// created by using the source <c>BudgetPlanHeader</c> record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void copyBudgetPlan(
        BudgetPlanHeaderRecId   _sourceBudgetPlanHeaderRecId,
        BudgetPlanHeaderRecId   _targetBudgetPlanHeaderRecId)
    {
        if (!_sourceBudgetPlanHeaderRecId || !_targetBudgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        BudgetPlanLine  sourceBudgetPlanLine;
        BudgetPlanLine  targetBudgetPlanLine;

        ttsbegin;

        // Copy the budget plan lines.
        insert_recordset targetBudgetPlanLine(
            BudgetClass,
            BudgetPlanHeader,
            BudgetPlanScenario,
            LineReferenceId,
            Comment,
            EffectiveDate,
            EstimateType,
            IsRecurring,
            LedgerDimension,
            TransactionCurrencyAmount,
            ReportingCurrencyAmount,
            AccountingCurrencyAmount,
            TransactionCurrencyCode,
            Quantity,
            UnitOfMeasure,
            TransactionUnitPrice,
            UnitPrice,
            AssetId,
            ProposedAsset,
            ProposedProject,
            ProjectId,
            PositionScenario,
            SourceDataAreaId)
        select BudgetClass,
            _targetBudgetPlanHeaderRecId,
            BudgetPlanScenario,
            LineReferenceId,
            Comment,
            EffectiveDate,
            EstimateType,
            IsRecurring,
            LedgerDimension,
            TransactionCurrencyAmount,
            ReportingCurrencyAmount,
            AccountingCurrencyAmount,
            TransactionCurrencyCode,
            Quantity,
            UnitOfMeasure,
            TransactionUnitPrice,
            UnitPrice,
            AssetId,
            ProposedAsset,
            ProposedProject,
            ProjectId,
            PositionScenario,
            SourceDataAreaId
            from sourceBudgetPlanLine
            where sourceBudgetPlanLine.BudgetPlanHeader == _sourceBudgetPlanHeaderRecId;

        BudgetPlanHeader targetBudgetPlanHeader = BudgetPlanHeader::find(_targetBudgetPlanHeaderRecId, true);

        // If the user changed the currency while copying, then convert the source lines to the new currency.
        if (BudgetPlanHeader::find(_sourceBudgetPlanHeaderRecId).Currency != targetBudgetPlanHeader.Currency)
        {
            BudgetPlan budgetPlan = BudgetPlan::construct();
            budgetPlan.parmBudgetPlanHeader(targetBudgetPlanHeader);
            budgetPlan.updatePlanLineCurrencyAmounts(true);
        }

        if (targetBudgetPlanHeader.IsDescriptionIncluded)
        {
            targetBudgetPlanHeader.Description = BudgetPlanHeader::find(_sourceBudgetPlanHeaderRecId).Description;
        }

        if (targetBudgetPlanHeader.IsRevenueSummaryIncluded)
        {
            targetBudgetPlanHeader.RevenueSummary = BudgetPlanHeader::find(_sourceBudgetPlanHeaderRecId).RevenueSummary;
        }

        targetBudgetPlanHeader.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanningProcessTmpTable</Name>
				<Source><![CDATA[
    private static container createBudgetPlanningProcessTmpTable(container _packedProcessQuery)
    {
        Query                    processQuery;
        QueryRun                 processQueryRun;
        BudgetPlanningProcess    budgetPlanningProcess;
        BudgetPlanningProcessTmp budgetPlanningProcessTmp;
        container                processContainer;

        processQuery = new Query(_packedProcessQuery);
        processQueryRun = new QueryRun(processQuery);

        while (processQueryRun.next())
        {
            budgetPlanningProcess = processQueryRun.get(tableNum(BudgetPlanningProcess)) as BudgetPlanningProcess;
            budgetPlanningProcessTmp.clear();
            budgetPlanningProcessTmp.Name = BudgetPlanningProcessTranslation::getLocalizedName(budgetPlanningProcess.RecId);
            budgetPlanningProcessTmp.Description = BudgetPlanningProcessTranslation::getLocalizedDescription(budgetPlanningProcess.RecId);
            budgetPlanningProcessTmp.BudgetCycle = BudgetCycle::find(budgetPlanningProcess.BudgetCycle).Name;
            budgetPlanningProcessTmp.Ledger      = Ledger::name(budgetPlanningProcess.Ledger);
            processContainer += [budgetPlanningProcessTmp.data()];
        }

        return processContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetPlanPriorityTmpTable</Name>
				<Source><![CDATA[
    private static container createBudgetPlanPriorityTmpTable(container _packedPriorityQuery)
    {
        Query                   priorityQuery;
        QueryRun                priorityQueryRun;
        BudgetPlanPriority      budgetPlanPriority;
        BudgetPlanPriorityTmp   budgetPlanPriorityTmp;
        container               priorityContainer;

        priorityQuery = new Query(_packedPriorityQuery);
        priorityQueryRun = new QueryRun(priorityQuery);

        while (priorityQueryRun.next())
        {
            budgetPlanPriority = priorityQueryRun.get(tableNum(BudgetPlanPriority)) as BudgetPlanPriority;
            budgetPlanPriorityTmp.clear();
            budgetPlanPriorityTmp.Name = BudgetPlanPriorityTranslation::getLocalizedName(budgetPlanPriority.RecId);
            budgetPlanPriorityTmp.Description = BudgetPlanPriorityTranslation::getLocalizedDescription(budgetPlanPriority.RecId);
            priorityContainer += [budgetPlanPriorityTmp.data()];
        }

        return priorityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRowForChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the child <c>BudgetPlanHeader</c> record from the parent <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_parentBudgetPlanHeader">
    /// The parent <c>BudgetPlanHeader</c> record to use to initialize the child <c>BudgetPlanHeader</c>
    /// record.
    /// </param>
    /// <param name="_childBudgetPlanHeader">
    /// The child <c>BudgetPlanHeader</c> record to initialize.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void defaultRowForChild(
        BudgetPlanHeader _parentBudgetPlanHeader,
        BudgetPlanHeader _childBudgetPlanHeader)
    {
        BudgetPlan childBudgetPlan;

        if (!_parentBudgetPlanHeader)
        {
            throw error(Error::missingParameter(null));
        }

        childBudgetPlan = BudgetPlan::construct();
        childBudgetPlan.parmBudgetPlanHeader(_childBudgetPlanHeader);

        _childBudgetPlanHeader.ParentBudgetPlanHeader = _parentBudgetPlanHeader.RecId;
        _childBudgetPlanHeader.BudgetPlanningProcess  = _parentBudgetPlanHeader.BudgetPlanningProcess;

        childBudgetPlan.defaultBudgetingOrganization();
        childBudgetPlan.defaultBudgetPlanningStage();
        childBudgetPlan.defaultCurrency();
        childBudgetPlan.defaultLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRowForCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the copy <c>BudgetPlanHeader</c> record from a source <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_sourceBudgetPlanHeader">
    /// The source <c>BudgetPlanHeader</c> record to use to initialize the copy <c>BudgetPlanHeader</c>
    /// record.
    /// </param>
    /// <param name="_targetBudgetPlanHeader">
    /// The copy <c>BudgetPlanHeader</c> record to initialize.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void defaultRowForCopy(
        BudgetPlanHeader _sourceBudgetPlanHeader,
        BudgetPlanHeader _targetBudgetPlanHeader)
    {
        BudgetPlan targetBudgetPlan;

        if (!_sourceBudgetPlanHeader)
        {
            throw error(Error::missingParameter(null));
        }

        targetBudgetPlan = BudgetPlan::construct();
        targetBudgetPlan.parmBudgetPlanHeader(_targetBudgetPlanHeader);

        _targetBudgetPlanHeader.BudgetPlanningProcess  = _sourceBudgetPlanHeader.BudgetPlanningProcess;
        _targetBudgetPlanHeader.BudgetingOrganization  = _sourceBudgetPlanHeader.BudgetingOrganization;
        _targetBudgetPlanHeader.ParentBudgetPlanHeader = _sourceBudgetPlanHeader.ParentBudgetPlanHeader;
        _targetBudgetPlanHeader.BudgetPlanPriority     = _sourceBudgetPlanHeader.BudgetPlanPriority;
        _targetBudgetPlanHeader.Currency               = _sourceBudgetPlanHeader.Currency;

        targetBudgetPlan.defaultBudgetPlanningStage();
        targetBudgetPlan.defaultLayout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRowForCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetPlanHeader</c> record.
    /// </summary>
    /// <param name="_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record to initialize.
    /// </param>
    /// <param name="_budgetPlanHeaderTemplate">
    /// The <c>BudgetPlanHeader</c> template record to initialize from.
    /// </param>
    public static void defaultRowForCreate(
        BudgetPlanHeader _budgetPlanHeader,
        BudgetPlanHeader _budgetPlanHeaderTemplate = null)
    {
        DictTable   dictTable = new DictTable(_budgetPlanHeader.TableId);

        for (FieldId fieldId = dictTable.fieldNext(0); fieldId; fieldId = dictTable.fieldNext(fieldId))
        {
            if (!isSysId(fieldId) &&
                !_budgetPlanHeader.isFieldSet(fieldId) &&
                _budgetPlanHeaderTemplate.isFieldSet(fieldId))
            {
                _budgetPlanHeader.(fieldId) = _budgetPlanHeaderTemplate.(fieldId);
            }
        }

        BudgetPlan budgetPlan = BudgetPlan::construct();

        budgetPlan.parmBudgetPlanHeader(_budgetPlanHeader);

        if (!_budgetPlanHeader.BudgetPlanningProcess)
        {
            budgetPlan.defaultBudgetPlanningProcess();
        }
        if (!_budgetPlanHeader.BudgetingOrganization)
        {
            budgetPlan.defaultBudgetingOrganization();
        }
        if (!_budgetPlanHeader.BudgetPlanningStage)
        {
            budgetPlan.defaultBudgetPlanningStage();
        }
        if (!_budgetPlanHeader.Currency)
        {
            budgetPlan.defaultCurrency();
        }
        if (!_budgetPlanHeader.Layout)
        {
            budgetPlan.defaultLayout();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBudgetPlanHaveChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget plan header has a child record.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the budget plan header has a child; otherwise, false.
    /// </returns>
    public static boolean doesBudgetPlanHaveChild(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader    budgetPlanHeaderChild;
        boolean             doesChildExist;

        if (_budgetPlanHeaderRecId)
        {
            select firstonly RecId from budgetPlanHeaderChild
                where budgetPlanHeaderChild.ParentBudgetPlanHeader == _budgetPlanHeaderRecId;

            doesChildExist = budgetPlanHeaderChild.RecId != 0;
        }

        return doesChildExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existScenarioForBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a budget plan line exists for <c>BudgetPlanHeader</c> and
    /// <c>BudgetPlanScenario</c> combination.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record ID of the <c>BudgetPlanSenario</c> record.
    /// </param>
    /// <returns>
    /// true if the budget plan header has a line; otherwise, false.
    /// </returns>
    public static boolean existScenarioForBudgetPlan(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        BudgetPlanLine  budgetPlanLine;
        boolean         doesLineExist;

        if (_budgetPlanHeaderRecId && _budgetPlanScenarioRecId)
        {
            select firstonly RecId from budgetPlanLine
                where budgetPlanLine.BudgetPlanHeader    == _budgetPlanHeaderRecId
                    && budgetPlanLine.BudgetPlanScenario == _budgetPlanScenarioRecId;

            doesLineExist = budgetPlanLine.RecId != 0;
        }

        return doesLineExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existScenarioForChildBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified <c>BudgetPlanHeader</c> has any child budget plans with lines referencing the specified <c>BudgetPlanScenario</c>.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_budgetPlanScenarioRecId">
    /// The record ID of the <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <returns>
    /// true if a line exists; otherwise, false.
    /// </returns>
    public static boolean existScenarioForChildBudgetPlan(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        BudgetPlanLine   childBudgetPlanLine;
        BudgetPlanHeader childBudgetPlanHeader;
        boolean          doesLineExist;

        if (_budgetPlanHeaderRecId && _budgetPlanScenarioRecId)
        {
            select firstonly RecId from childBudgetPlanLine
                where childBudgetPlanLine.BudgetPlanScenario == _budgetPlanScenarioRecId
                exists join childBudgetPlanHeader
                    where childBudgetPlanHeader.RecId == childBudgetPlanLine.BudgetPlanHeader
                        && childBudgetPlanHeader.ParentBudgetPlanHeader == _budgetPlanHeaderRecId;

            doesLineExist = childBudgetPlanLine.RecId != 0;
        }

        return doesLineExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existWorkerForBudgetPlanningOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the current user belongs to one of the organizations in the budget planning hierarchy.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// true if the organization is found in the hierarchy; otherwise false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static boolean existWorkerForBudgetPlanningOrganization(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        BudgetPlanningSecurityModel         securityModel = BudgetPlanningConfiguration::find().SecurityModel;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;
        BudgetPlanXdsTmp                    budgetPlanXdsTmp;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(Error::missingParameter(null));
        }

        // The current user MUST belong to an organization in the budget planning hierarchy
        select firstonly BudgetingOrganization from budgetPlanningProcessAdministration
            where budgetPlanningProcessAdministration.BudgetPlanningProcess == _budgetPlanningProcessRecId
            exists join budgetPlanXdsTmp
                where budgetPlanXdsTmp.BudgetingOrganization == budgetPlanningProcessAdministration.BudgetingOrganization
                    && budgetPlanXdsTmp.SecurityModel        == securityModel;

        return budgetPlanningProcessAdministration != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of an account structure if a valid account structure is found with the specified name
    /// for the specified ledger.
    /// </summary>
    /// <param name="_ledgerRecId">
    /// The ID of a <c>Ledger</c> record.
    /// </param>
    /// <param name="_accountStructureName">
    /// The name of an account structure.
    /// </param>
    /// <returns>
    /// The ID of an account structure if a valid account structure is found; otherwise zero.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception will be thrown if _ledgerRecId is 0
    /// </exception>
    public static DimensionHierarchyId getAccountStructure(
        LedgerRecId _ledgerRecId,
        Name _accountStructureName)
    {
        DimensionHierarchyId    accountStructureId;

        if (!_ledgerRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        else
        {
            if (!_accountStructureName)
            {
                checkFailed(strFmt("@SYS116347", "@SYS129015"));
            }
            else
            {
                accountStructureId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::AccountStructure, _accountStructureName).RecId;

                if (accountStructureId)
                {
                    if (!LedgerStructure::findByLedgerStructure(_ledgerRecId, accountStructureId))
                    {
                        // The account structure is not in the ledger on this budget plan.
                        checkFailed(strFmt("@SYS315941", _accountStructureName, Ledger::name(_ledgerRecId)));
                        accountStructureId = 0;
                    }
                }
                else
                {
                    // Account structure with the specified name was not found.
                    checkFailed(strFmt("@SYS315313", _accountStructureName));
                }
            }
        }

        return accountStructureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns initial query based on <c>BudgetPlanHeader</c> table
    ///   and <c>BudgetPlanningConfiguration</c> table settings.
    /// </summary>
    /// <returns>
    ///   <c>Query</c> object.
    /// </returns>
    public static Query getBudgetPlanQuery()
    {
        Query initialQuery = new Query();
        BudgetPlanXdsTmp budgetPlanXdsTmp;
        
        select RecId from budgetPlanXdsTmp;

        if(!budgetPlanXdsTmp.RecId)
        {
            QueryBuildDataSource qbds = initialQuery.addDataSource(tableNum(BudgetPlanHeader));
            qbds.addRange(fieldNum(BudgetPlanHeader, DocumentNumber)).value(SysQuery::valueEmptyString());
           
            return initialQuery;
        }

        BudgetPlanningConfiguration budgetPlanningConfiguration = BudgetPlanningConfiguration::find();

        if (budgetPlanningConfiguration.SecurityModel == BudgetPlanningSecurityModel::SecurityRole)
        {
            initialQuery = new Query(queryStr(BudgetPlanListPageAssignedToMyRole));
        }
        else
        {
            initialQuery = new Query(queryStr(BudgetPlanListPageMyOrgUserGroup));
        }

        return initialQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStructureQueryByLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account structure query for the specified <c>Ledger</c> table record ID.
    /// </summary>
    /// <param name="_ledgerRecId">
    /// The record ID of the <c>Ledger</c> record for which to build the query.
    /// </param>
    /// <returns>
    /// Gets the account structure query for the specified ledger.
    /// </returns>
    public static Query getAccountStructureQueryByLedger(LedgerRecId _ledgerRecId)
    {
        return DimensionHierarchy::getAccountStructureQueryByLedger(_ledgerRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetingOrganizationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve a list of <c>OMInternalOrganization</c> records.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_organizationRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record; optional.
    /// </param>
    /// <param name="_worker">
    /// The record ID of the <c>HcmWorker</c> record; optional.
    /// </param>
    /// <returns>
    /// A query that retrieves a list of <c>OMInternalOrganization</c> records.
    /// </returns>
    public static Query getBudgetingOrganizationQuery(
        BudgetPlanningProcessRecId  _planningProcessRecId,
        BudgetingOrganizationRecId  _organizationRecId = 0,
        HcmWorkerRecId              _worker = HcmWorkerLookup::currentWorker())
    {
        Query                   query;
        BudgetPlanningSecurityModel securityModel = BudgetPlanningConfiguration::find().SecurityModel;
        UserId                      userId = curUserId();

        // Create the appropriate query based on the security model enabled
        if (securityModel == BudgetPlanningSecurityModel::Position)
        {
            query = new Query(queryStr(BudgetPlanMyBudgetingOrganizationLookup));
        }
        else
        {
            query = new Query(queryStr(BudgetPlanMyBudgetOrganizationRoleLookup));
        }

        // Get the user id instead of the worker for the security role model
        if (_worker
            && !prmisDefault(_worker)
            && BudgetPlanningConfiguration::find().SecurityModel == BudgetPlanningSecurityModel::SecurityRole)
        {
            userId = DirPersonUserEx::worker2UserId(_worker);
        }

        // Add ranges
        BudgetPlanQueryBuilder::addBudgetingOrganizationLookupRanges(query, _planningProcessRecId, _organizationRecId, _worker, userId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanHeaderReferenceQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record; optional.
    /// </param>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record; optional.
    /// </param>
    /// <returns>
    /// A query that retrieves <c>BudgetPlanHeader</c> records.
    /// </returns>
    public static Query getBudgetPlanHeaderReferenceQuery(
        BudgetPlanningProcessRecId _planningProcessRecId = 0,
        BudgetPlanHeaderRecId      _budgetPlanHeaderRecId = 0)
    {
        #define.MyOrgPlans('MyOrgPlans')
        #define.MyUserGroupPlans('MyUserGroupPlans')

        Query                 query;
        QueryBuildDataSource  myOrgPlansDatasource;
        QueryBuildDataSource  myUserGroupPlansDatasource;

        // Checking the appropriate query based on the policy currently enabled
        query = new Query(queryStr(BudgetPlanByMyOrgUserGroupNoParent));

        myOrgPlansDatasource        = query.dataSourceName(#MyOrgPlans);
        myUserGroupPlansDatasource  = query.dataSourceName(#MyUserGroupPlans);

        SysQuery::findOrCreateRange(myUserGroupPlansDatasource, fieldNum(BudgetPlanHeader, BudgetPlanningProcess)).value(SysQuery::value(_planningProcessRecId));

        // Restrict the list further by the selected budget plan.
        if (_budgetPlanHeaderRecId)
        {
            SysQuery::findOrCreateRange(myOrgPlansDatasource, fieldNum(BudgetPlanHeader, RecId)).value(SysQuery::value(_budgetPlanHeaderRecId));
            SysQuery::findOrCreateRange(myUserGroupPlansDatasource, fieldNum(BudgetPlanHeader, RecId)).value(SysQuery::value(_budgetPlanHeaderRecId));
        }

        SysQuery::findOrCreateRange(myOrgPlansDatasource, fieldNum(BudgetPlanHeader, BudgetPlanningProcess)).value(SysQuery::value(_planningProcessRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanIdBasedOnProcessLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number sequence ID based on the process associated with the budget
    /// plan document.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> table record.
    /// </param>
    /// <returns>
    /// The record ID of the <c>NumberSequenceTable</c> table record.
    /// </returns>
    public static RefRecId getBudgetPlanIdBasedOnProcessLedger(BudgetPlanningProcessRecId _planningProcessRecId)
    {
        NumberSequenceReference numberSequenceReference;

        if (_planningProcessRecId)
        {
            numberSequenceReference = BudgetPlan::getBudgetPlanNumberSeqBasedOnProcess(_planningProcessRecId);
        }

        return numberSequenceReference.NumberSequenceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanNumberSeqBasedOnProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number sequence reference based on the process associated with the budget plan
    /// document.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> table record.
    /// </param>
    /// <returns>
    /// The record buffer of the <c>NumberSequenceReference</c> table record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static NumberSequenceReference getBudgetPlanNumberSeqBasedOnProcess(BudgetPlanningProcessRecId _planningProcessRecId)
    {
        BudgetPlanningProcess   planningProcess;
        NumberSequenceReference numberSequenceReference;

        if (!_planningProcessRecId)
        {
            throw error(Error::missingParameter(null));
        }

        planningProcess = BudgetPlanningProcess::find(_planningProcessRecId);

        changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(planningProcess.Ledger)))
        {
            numberSequenceReference = BudgetParameters::numRefBudgetPlanDocumentNumber();
        }

        return numberSequenceReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanPreparerQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query that retrieves a list of active workers.
    /// </summary>
    /// <param name="_budgetPlanPreparerRecId">
    /// The record ID of the <c>HcmWorker</c> record to limit the query to a single worker; optional.
    /// </param>
    /// <returns>
    /// A query that retrieves a list of active workers.
    /// </returns>
    public static Query getBudgetPlanPreparerQuery(BudgetPlanPreparerRecId _budgetPlanPreparerRecId = 0)
    {
        Query                   query;
        QueryBuildDataSource    workerDatasource;

        query = new Query(queryStr(HcmWorkerListPage_Active));

        // Restrict the query to a single worker
        if (_budgetPlanPreparerRecId)
        {
            workerDatasource = query.dataSourceTable(tableNum(HcmWorker));
            workerDatasource.addRange(fieldNum(HcmWorker, RecId)).value(SysQuery::value(_budgetPlanPreparerRecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanPriorityQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve a list of <c>BudgetPlanPriority</c> records.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record to filter the list.
    /// </param>
    /// <param name="_budgetPlanPriorityRecId">
    /// The record ID of the <c>BudgetPlanPriority</c> record to limit the list to a
    /// single <c>BudgetPlanPriority</c>; optional.
    /// </param>
    /// <returns>
    /// A query to retrieve a list of <c>BudgetPlanPriority</c> records.
    /// </returns>
    public static Query getBudgetPlanPriorityQuery(
        BudgetPlanningProcessRecId  _budgetPlanningProcessRecId,
        BudgetPlanPriorityRecId     _budgetPlanPriorityRecId = 0)
    {
        Query                   priorityQuery;
        QueryBuildDataSource    planningPriorityDatasource;
        QueryBuildDataSource    priorityConstraintDatasource;
        QueryBuildRange         priorityConstraintRange;

        // Build the query
        priorityQuery = new Query();
        planningPriorityDatasource = priorityQuery.addDataSource(tableNum(BudgetPlanPriority));

        priorityConstraintDatasource = planningPriorityDatasource.addDataSource(tableNum(BudgetPlanPriorityConstraint));
        priorityConstraintDatasource.relations(true);

        // Group the records based on Name and RecId
        planningPriorityDatasource.addGroupByField(fieldNum(BudgetPlanPriority, Name));
        planningPriorityDatasource.addGroupByField(fieldNum(BudgetPlanPriority, RecId));

        // Filter by current process
        priorityConstraintRange = priorityConstraintDatasource.addRange(fieldNum(BudgetPlanPriorityConstraint, BudgetPlanningProcess));
        priorityConstraintRange.value(SysQuery::value(_budgetPlanningProcessRecId));

        if (_budgetPlanPriorityRecId)
        {
            // Add the current priority record id
            priorityConstraintRange = priorityConstraintDatasource.addRange(fieldNum(BudgetPlanPriorityConstraint, BudgetPlanPriority));
            priorityConstraintRange.value(SysQuery::value(_budgetPlanPriorityRecId));
        }

        return priorityQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildBudgetingOrganizationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve a list of <c>OMInternalOrganization</c> records.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_parentOrgRestriction">
    /// The record ID of the parent <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// A query that retrieves a list of <c>OMInternalOrganization</c> records.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static Query getChildBudgetingOrganizationQuery(
        BudgetPlanningProcessRecId  _planningProcessRecId,
        BudgetingOrganizationRecId  _parentOrgRestriction)
    {
        Query                   query;

        if (!_planningProcessRecId)
        {
            throw error(Error::missingParameter(null));
        }

        // Create security model specific query
        if (BudgetPlanningConfiguration::find().SecurityModel == BudgetPlanningSecurityModel::Position)
        {
            query = new Query(queryStr(BudgetPlanChildBudgetingOrgLookup));
        }
        else
        {
            query = new Query(queryStr(BudgetPlanChildBudgetOrgRoleLookup));
        }

        // Add filters
        BudgetPlanQueryBuilder::addBudgetingOrganizationLookupRanges(query, _planningProcessRecId, 0, HcmWorkerLookup::currentWorker(), curUserId(), _parentOrgRestriction);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildBudgetPlans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Set</c> of child budget plans for the specified parent <c>BudgetPlanHeader</c> record ID.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId">
    /// The parent <c>BudgetPlanHeader</c> record ID for which to get the child budget plans.
    /// </param>
    /// <returns>
    /// A <c>Set</c> of child budget plans for the specified parent <c>BudgetPlanHeader</c> record ID.
    /// </returns>
    public static Set getChildBudgetPlans(BudgetPlanHeaderRecId _parentBudgetPlanHeaderRecId)
    {
        Set       childBudgetPlans;
        container packedChildBudgetPlans;

        packedChildBudgetPlans = BudgetPlan::getChildBudgetPlansInternal(_parentBudgetPlanHeaderRecId);

        if (packedChildBudgetPlans)
        {
            childBudgetPlans = Set::create(packedChildBudgetPlans);
        }
        else
        {
            childBudgetPlans = new Set(typeName2Type(extendedTypeStr(BudgetPlanHeaderRecId))) ;
        }

        return childBudgetPlans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildBudgetPlansInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a packed <c>Set</c> of child budget plans for the specified parent <c>BudgetPlanHeader</c> record ID.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId">
    /// The parent <c>BudgetPlanHeader</c> record ID for which to get the child budget plans.
    /// </param>
    /// <returns>
    /// A packed <c>Set</c> of child budget plans for the specified parent <c>BudgetPlanHeader</c> record ID.
    /// </returns>
    private static container getChildBudgetPlansInternal(BudgetPlanHeaderRecId _parentBudgetPlanHeaderRecId)
    {
        Set              childBudgetPlans  = new Set(typeName2Type(extendedTypeStr(BudgetPlanHeaderRecId)));
        BudgetPlanHeader budgetPlanHeader;

        while select RecId from budgetPlanHeader
            where budgetPlanHeader.ParentBudgetPlanHeader == _parentBudgetPlanHeaderRecId
        {
            childBudgetPlans.add(budgetPlanHeader.RecId);
        }

        return childBudgetPlans.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data area ID associated with the specified <c>BudgetPlanHeader</c> reference.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The data area ID.
    /// </returns>
    public static DataAreaId getDataAreaId(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader        budgetPlanHeader;
        BudgetPlanningProcess   process;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);
        process          = BudgetPlanningProcess::find(budgetPlanHeader.BudgetPlanningProcess);

        return CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(process.Ledger));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityByBudgetPlanProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retrieves the record ID of the legal entity associated with a budget planning process.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the budget planning process.
    /// </param>
    /// <returns>
    /// The record ID of the ledger associated with a given budget planning process.
    /// </returns>
    public static LegalEntity getLegalEntityByBudgetPlanProcess(BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        Ledger                ledger;
        BudgetPlanningProcess budgetPlanningProcess;

        if (_budgetPlanningProcessRecId)
        {
            select firstOnly PrimaryForLegalEntity from ledger
                exists join budgetPlanningProcess
                    where budgetPlanningProcess.RecId == _budgetPlanningProcessRecId
                    &&    Ledger.RecId                == budgetPlanningProcess.Ledger;
        }

        return ledger.PrimaryForLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextPlanningStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next budget planning stage for the budget plan.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record to start workflow.
    /// </param>
    /// <returns>
    /// The next <c>BudgetPlanningStage</c> record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static BudgetPlanningStage getNextPlanningStage(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader    budgetPlanHeader;
        BudgetPlanningStage budgetPlanningStage;

        if (!_budgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        if (budgetPlanHeader)
        {
            budgetPlanningStage = BudgetPlanningWorkflowSetup::getNextPlanningStage(
                budgetPlanHeader.BudgetPlanningStage,
                budgetPlanHeader.BudgetPlanningProcess,
                budgetPlanHeader.BudgetingOrganization);
        }

        return budgetPlanningStage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentBudgetPlanHeaderQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve a list of parent <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_organizationRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <param name="_parentBudgetPlanHeaderRecId">
    /// The record ID of the parent <c>BudgetPlanHeader</c> record; optional.
    /// </param>
    /// <returns>
    /// A query that retrieves a list of parent <c>BudgetPlanHeader</c> records.
    /// </returns>
    public static Query getParentBudgetPlanHeaderQuery(
        BudgetPlanningProcessRecId  _planningProcessRecId,
        BudgetingOrganizationRecId  _organizationRecId,
        BudgetPlanHeaderRecId       _parentBudgetPlanHeaderRecId = 0)
    {
        Query                   query;
        QueryBuildDataSource    planHeaderDataSource;
        QueryBuildDataSource    organizationDataSource;
        QueryBuildRange         planHeaderRange;
        QueryBuildRange         organizationRange;

        if (!_planningProcessRecId || !_organizationRecId)
        {
            throw error(Error::missingParameter(null));
        }

        // Add dynamic ranges to the query
        query = new Query(queryStr(BudgetPlanParentBudgetPlanLookup));

        // Filter by the same budget planning process as the child
        planHeaderDataSource = query.dataSourceTable(tableNum(BudgetPlanHeader));

        planHeaderRange = planHeaderDataSource.addRange(fieldNum(BudgetPlanHeader, BudgetPlanningProcess));
        planHeaderRange.value(SysQuery::value(_planningProcessRecId));

        if (_parentBudgetPlanHeaderRecId)
        {
            // Select a specific BudgetPlanHeader record
            planHeaderRange = planHeaderDataSource.addRange(fieldNum(BudgetPlanHeader, RecId));
            planHeaderRange.value(SysQuery::value(_parentBudgetPlanHeaderRecId));
        }

        // Filter by budgeting organizations on budget plans that are parent to the budgeting organization on the current budget plan
        organizationDataSource = query.dataSourceTable(tableNum(OMHierarchyRelationship));

        organizationRange = organizationDataSource.addRange(fieldNum(OMHierarchyRelationship, ChildOrganization));
        organizationRange.value(SysQuery::value(_organizationRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBudgetPlanValidForCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget plan header is valid for completion.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the budget plan can be completed; otherwise, false.
    /// </returns>
    public static boolean isBudgetPlanValidForCompletion(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader    budgetPlanHeaderChild;
        boolean             isValidForCompletion = true;

        while select RecId, WorkflowStatus from budgetPlanHeaderChild
            where budgetPlanHeaderChild.ParentBudgetPlanHeader == _budgetPlanHeaderRecId
        {
            // When child budget plan has not been approved or canceled then the parent is not valid for completion.
            if (budgetPlanHeaderChild.WorkflowStatus != BudgetPlanWorkflowStatus::Approved
                && budgetPlanHeaderChild.WorkflowStatus != BudgetPlanWorkflowStatus::Canceled)
            {
                isValidForCompletion = false;
            }

            isValidForCompletion = isValidForCompletion && BudgetPlan::isBudgetPlanValidForCompletion(budgetPlanHeaderChild.RecId);

            if (!isValidForCompletion)
            {
                break;
            }
        }

        return isValidForCompletion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrganizationInBudgetPlanningHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the <c>OMInternalOrganization</c> record ID belongs to the organization hierarchy on
    /// the <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// true if the organization is found in the hierarchy; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static boolean isOrganizationInBudgetPlanningHierarchy(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId _budgetingOrganizationRecId)
    {
        boolean                         doesExist = false;
        OrganizationHierarchyTypeRecId  hierarchyTypeRecId;
        OMHierarchyRelationship         hierarchyRelationship;
        utcdatetime                     now = DateTimeUtil::utcNow();

        if (!_budgetPlanningProcessRecId || !_budgetingOrganizationRecId)
        {
            throw error(Error::missingParameter(null));
        }

        // The Budgeting organization field MUST be among responsibility centers for the budgeting organization structure
        // of the selected Budget planning process
        hierarchyTypeRecId = BudgetPlanningProcess::find(_budgetPlanningProcessRecId).OrganizationHierarchyType;

        if (BudgetPlanningProcessAdministration::findByProcessOrganization(
            _budgetPlanningProcessRecId,
            _budgetingOrganizationRecId))
        {
            select firstonly validTimeState(now) RecId from hierarchyRelationship
                where hierarchyRelationship.HierarchyType     == hierarchyTypeRecId
                   && hierarchyRelationship.ChildOrganization == _budgetingOrganizationRecId;

            if (hierarchyRelationship)
            {
                doesExist = true;
            }
        }

        return doesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrganizationVisibleToWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the <c>OMInternalOrganization</c> record ID is visible to the specified worker.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrganizationRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <param name="_worker">
    /// The record ID of the <c>HcmWorker</c> record; optional.
    /// </param>
    /// <returns>
    /// true if the organization is visible to the worker; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static boolean isOrganizationVisibleToWorker(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId,
        BudgetingOrganizationRecId _budgetingOrganizationRecId,
        HcmWorkerRecId             _worker = HcmWorkerLookup::currentWorker())
    {
        Query       query;
        QueryRun    queryRun;

        if (!_budgetPlanningProcessRecId || !_budgetingOrganizationRecId)
        {
            throw error(Error::missingParameter(null));
        }

        query = BudgetPlan::getBudgetingOrganizationQuery(
            _budgetPlanningProcessRecId,
            _budgetingOrganizationRecId,
            _worker);

        queryRun = new QueryRun(query);

        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForReview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget plan header can be submitted to the workflow.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the budget plan header can be submitted to workflow; otherwise, false.
    /// </returns>
    public static boolean isReadyForReview(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        boolean             isReadyForReview;
        BudgetPlanHeader    budgetPlanHeader;
        BudgetPlanHeader    budgetPlanHeaderParent;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId);

        if (budgetPlanHeader
            && budgetPlanHeader.DocumentStatus == BudgetPlanStatus::Draft
            && (budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::NotSubmitted
            || budgetPlanHeader.WorkflowStatus == BudgetPlanWorkflowStatus::Rejected))
        {
            isReadyForReview = true;

            budgetPlanHeaderParent = BudgetPlanHeader::find(budgetPlanHeader.ParentBudgetPlanHeader);

            if (budgetPlanHeaderParent
                && budgetPlanHeaderParent.WorkflowStatus != BudgetPlanWorkflowStatus::InReview)
            {
                isReadyForReview = false;
            }
        }

        return isReadyForReview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetingOrganization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the budgeting organization records in the <c>OMInternalOrganization</c>
    /// table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to find.
    /// </param>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_parentBudgetPlanHeaderRecId">
    /// The record ID of the parent <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <returns>
    /// The <c>OMInternalOrganization</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static OMInternalOrganization lookupBudgetingOrganization(
        FormReferenceControl       _formReferenceControl,
        BudgetPlanningProcessRecId _planningProcessRecId,
        BudgetPlanHeaderRecId      _parentBudgetPlanHeaderRecId = 0)
    {
        BudgetingOrganizationRecId      parentBudgetingOrgRecId;
        Query                           query;
        SysReferenceTableLookup         referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(OMInternalOrganization), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(OMInternalOrganization, Name));

        if (_parentBudgetPlanHeaderRecId)
        {
            // If a parent budget plan header is selected limit the list further by immediate child organizations only
            parentBudgetingOrgRecId = BudgetPlanHeader::find(_parentBudgetPlanHeaderRecId).BudgetingOrganization;

            query = BudgetPlan::getChildBudgetingOrganizationQuery(_planningProcessRecId, parentBudgetingOrgRecId);
        }
        else
        {
            // Build the query for the lookup form
            query = BudgetPlan::getBudgetingOrganizationQuery(_planningProcessRecId);
        }

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as OMInternalOrganization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanHeaderReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the document number records in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record; optional.
    /// </param>
    /// <param name="_showResponsibilityCenter">
    /// Boolean value to show the responsibility center as a column; optional.
    /// </param>
    /// <param name="_showPreparer">
    /// Boolean value to show the budget plan preparer as a column; optional.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanHeader</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static BudgetPlanHeader lookupBudgetPlanHeaderReference(
        FormReferenceControl       _formReferenceControl,
        BudgetPlanningProcessRecId _planningProcessRecId = 0,
        boolean                    _showResponsibilityCenter = false,
        boolean                    _showPreparer = false)
    {
        Query  query;
        SysReferenceTableLookup  referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanHeader), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, DocumentNumber));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, Name));

        query = BudgetPlan::getBudgetPlanHeaderReferenceQuery(_planningProcessRecId);

        if (_showResponsibilityCenter)
        {
            referenceLookup.addLookupMethod(tableMethodStr(BudgetPlanHeader, displayDepartmentNameForCurrentHeader));
            referenceLookup.setLabel("@Budget:BudgetingDepartment");
        }

        if (_showPreparer)
        {
            referenceLookup.addLookupMethod(tableMethodStr(BudgetPlanHeader, displayPreparerNameForCurrentHeader));
            referenceLookup.setLabel("@Budget:BudgetPlanPreparer");
        }

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the document number records in the <c>BudgetPlanHeader</c> table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanHeader</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static BudgetPlanHeader lookupBudgetPlanHeader(FormReferenceControl _formReferenceControl)
    {
        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        SysReferenceTableLookup referenceLookup = SysReferenceTableLookup::newParameters(tableNum(BudgetPlanHeader), _formReferenceControl, true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, DocumentNumber));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, Name));

        Query query = BudgetPlan::getBudgetPlanQuery();

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanningProcess</c> records.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form string control to find.
    /// </param>
    /// <param name="_filterByCurrentLedger">
    /// Determines whether to filter the <c>BudgetPlanningProcess</c> by the current ledger; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void lookupBudgetPlanningProcess(FormStringControl _formStringControl, boolean _filterByCurrentLedger = false)
    {
        Query                    query = new Query();
        QueryBuildDataSource     processDataSource;
        QueryBuildRange          processRange;
        QueryBuildRange          ledgerRange;
        Query                    processQuery;
        SysTableLookup           tableLookup;
        BudgetPlanningProcessTmp budgetPlanningProcessTmp, budgetPlanningProcessTmpRec;
        container                processContainer;
        Counter                  processContainerLength;
        Counter                  counter;

        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        query.addDataSource(tableNum(BudgetPlanningProcessTmp));
        tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanningProcessTmp), _formStringControl, true);

        // Build the query for the lookup form
        processQuery = new Query();
        processDataSource = processQuery.addDataSource(tableNum(BudgetPlanningProcess));

        // Filter by active processes
        processRange = processDataSource.addRange(fieldNum(BudgetPlanningProcess, ApprovalProcessState));
        processRange.value(SysQuery::value(BudgetPlanningApprovalProcessState::InProcess));

        if (_filterByCurrentLedger)
        {
            // Filter by current ledger
            ledgerRange = processDataSource.addRange(fieldNum(BudgetPlanningProcess, Ledger));
            ledgerRange.value(SysQuery::value(Ledger::current()));
        }

        // Get the scenario record container
        processContainer = BudgetPlan::createBudgetPlanningProcessTmpTable(processQuery.pack());
        processContainerLength = conLen(processContainer);

        for (counter = 1; counter <= processContainerLength; counter++)
        {
            budgetPlanningProcessTmpRec.clear();
            budgetPlanningProcessTmpRec = conPeek(processContainer, counter);
            budgetPlanningProcessTmp.data(budgetPlanningProcessTmpRec);
            budgetPlanningProcessTmp.insert();
        }

        tableLookup.parmTmpBuffer(budgetPlanningProcessTmp);

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanningProcessTmp, Name));
        tableLookup.addLookupfield(fieldNum(BudgetPlanningProcessTmp, Ledger));
        tableLookup.addLookupfield(fieldNum(BudgetPlanningProcessTmp, BudgetCycle));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBudgetPlanPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanPriority</c> records.
    /// </summary>
    /// <param name="_formStringControl">
    /// The form control to find.
    /// </param>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void lookupBudgetPlanPriority(
        FormStringControl          _formStringControl,
        BudgetPlanningProcessRecId _planningProcessRecId)
    {
        Query                 query = new Query();
        Query                 priorityQuery;
        SysTableLookup        tableLookup;
        BudgetPlanPriorityTmp budgetPlanPriorityTmp, budgetPlanPriorityTmpRec;
        container             priorityContainer;
        Counter               priorityContainerLength;
        Counter               counter;

        if (_formStringControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        query.addDataSource(tableNum(BudgetPlanPriorityTmp));
        tableLookup = SysTableLookup::newParameters(tableNum(BudgetPlanPriorityTmp), _formStringControl, true);

        // Get the query for the lookup form
        priorityQuery = new Query();
        priorityQuery = BudgetPlan::getBudgetPlanPriorityQuery(_planningProcessRecId);

        // Get the scenario record container
        priorityContainer = BudgetPlan::createBudgetPlanPriorityTmpTable(priorityQuery.pack());
        priorityContainerLength = conLen(priorityContainer);

        for (counter = 1; counter <= priorityContainerLength; counter++)
        {
            budgetPlanPriorityTmpRec.clear();
            budgetPlanPriorityTmpRec = conPeek(priorityContainer, counter);
            budgetPlanPriorityTmp.data(budgetPlanPriorityTmpRec);
            budgetPlanPriorityTmp.insert();
        }

        tableLookup.parmTmpBuffer(budgetPlanPriorityTmp);

        // Add fields that will be shown in the lookup form as columns
        tableLookup.addLookupfield(fieldNum(BudgetPlanPriorityTmp, Name));
        tableLookup.addLookupfield(fieldNum(BudgetPlanPriorityTmp, Description));

        // Add the query to the lookup form
        tableLookup.parmQuery(query);

        // Perform the lookup
        tableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupHcmPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>HcmPosition</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <returns>
    /// The <c>HcmPosition</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static HcmPosition lookupHcmPosition(
        FormReferenceControl _formReferenceControl)
    {
        Query                   query;
        QueryBuildDataSource    hcmPositionForecastQueryBuildDataSource;
        QueryBuildDataSource    hcmPositionQueryBuildDataSource;
        SysReferenceTableLookup referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(
            tableNum(HcmPosition),
            _formReferenceControl,
            true);

        // Get the query for the lookup form
        query = new Query();
        hcmPositionQueryBuildDataSource = query.addDataSource(tableNum(HcmPosition));

        referenceLookup.addLookupfield(fieldNum(HcmPosition, PositionId));
        referenceLookup.addLookupMethod(tableMethodStr(HcmPosition, description));

        // Adding join with HcmPositionForecast table.
        hcmPositionForecastQueryBuildDataSource = hcmPositionQueryBuildDataSource.addDataSource(tableNum(HcmPositionForecast));
        hcmPositionForecastQueryBuildDataSource.joinMode(JoinMode::ExistsJoin);
        hcmPositionForecastQueryBuildDataSource.relations(true);

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as HcmPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupParentBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>BudgetPlanHeader</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to find.
    /// </param>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <param name="_budgetingOrgRecId">
    /// The record ID of the <c>OMInternalOrganization</c> record.
    /// </param>
    /// <returns>
    /// The <c>BudgetPlanHeader</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static BudgetPlanHeader lookupParentBudgetPlanHeader(
        FormReferenceControl        _formReferenceControl,
        BudgetPlanningProcessRecId  _planningProcessRecId,
        BudgetingOrganizationRecId  _budgetingOrgRecId)
    {
        Query                   query;
        SysReferenceTableLookup referenceLookup;

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        referenceLookup = SysReferenceTableLookup::newParameters(
            tableNum(BudgetPlanHeader),
            _formReferenceControl,
            true);

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, Name));
        referenceLookup.addLookupfield(fieldNum(BudgetPlanHeader, DocumentNumber));

        // Get the query for the lookup form
        query = BudgetPlan::getParentBudgetPlanHeaderQuery(
            _planningProcessRecId,
            _budgetingOrgRecId);

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as BudgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the lookup for the <c>HcmWorker</c> records.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form reference control to perform the lookup for.
    /// </param>
    /// <returns>
    /// The <c>HcmWorker</c> record selected by the lookup.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static HcmWorker lookupWorker(FormReferenceControl _formReferenceControl)
    {
        Query                       query;
        SysReferenceTableLookup     referenceLookup = SysReferenceTableLookup::newParameters(tableNum(HcmWorker), _formReferenceControl, true);

        if (_formReferenceControl == null)
        {
            throw error(Error::missingParameter(null));
        }

        // Add fields that will be shown in the lookup form as columns
        referenceLookup.addLookupfield(fieldNum(HcmWorker, Person));
        referenceLookup.addLookupfield(fieldNum(HcmWorker, PersonnelNumber));

        // Get the query for the lookup form
        query = BudgetPlan::getBudgetPlanPreparerQuery();

        // Add the query to the lookup form
        referenceLookup.parmQuery(query);

        // Perform the lookup and return the selected record
        return referenceLookup.performFormLookup() as HcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseBudgetPlanDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the unused number for budget plan.
    /// </summary>
    /// <param name="_planningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> table record.
    /// </param>
    /// <param name="_budgetPlanDocumentNumber">
    /// The unused <c>BudgetPlanDocumentNumber</c> number to be released.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void releaseBudgetPlanDocumentNumber(
        BudgetPlanningProcessRecId _planningProcessRecId,
        BudgetPlanDocumentNumber   _budgetPlanDocumentNumber)
    {
        if (!_planningProcessRecId)
        {
            throw error(Error::missingParameter(null));
        }

        changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(BudgetPlanningProcess::find(_planningProcessRecId).Ledger)))
        {
            // Form is being closed without saving the budget plan header.
            // Release the document number that was allocated or entered on the budget plan header.
            NumberSeq::releaseNumber(
                BudgetParameters::numRefBudgetPlanDocumentNumber().NumberSequenceId,
                _budgetPlanDocumentNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the <c>BudgetPlanHeader</c> status.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record to reset.
    /// </param>
    /// <returns>
    /// true if the update was successful; otherwise false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static boolean resetBudgetPlan(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        boolean          reset;
        BudgetPlanHeader budgetPlanHeader;

        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlan, resetBudgetPlan), extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);

        if (budgetPlanHeader)
        {
            ttsbegin;

            budgetPlanHeader.DocumentStatus = BudgetPlanStatus::Draft;
            budgetPlanHeader.WorkflowStatus = BudgetPlanWorkflowStatus::NotSubmitted;
            budgetPlanHeader.IsHistorical   = NoYes::No;
            budgetPlanHeader.defaultField(fieldNum(BudgetPlanHeader, BudgetPlanningStage));
            budgetPlanHeader.defaultField(fieldNum(BudgetPlanHeader, Layout));
            budgetPlanHeader.update();

            ttscommit;

            reset = true;
        }

        return reset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanningStageAndLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>BudgetPlanningStage</c> and <c>BudgetPlanLayout</c> fields of the budget plan document.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record for which to set the document status.
    /// </param>
    /// <param name = "_budgetPlanningStageRecId">
    /// The record ID of the <c>BudgetPlanningStage</c> record for which to set the budget planning stage.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void setBudgetPlanningStageAndLayout(
        BudgetPlanHeaderRecId       _budgetPlanHeaderRecId,
        BudgetPlanningStageRecId    _budgetPlanningStageRecId)
    {
        if (!_budgetPlanHeaderRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlan, setBudgetPlanningStageAndLayout),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanHeaderRecId))));
        }
        else if (!_budgetPlanningStageRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlan, setBudgetPlanningStageAndLayout),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningStageRecId))));
        }

        ttsbegin;
        BudgetPlanHeader budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);

        if (budgetPlanHeader
            && budgetPlanHeader.BudgetPlanningStage != _budgetPlanningStageRecId)
        {
            budgetPlanHeader.BudgetPlanningStage = _budgetPlanningStageRecId;
            budgetPlanHeader.Layout              = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                        budgetPlanHeader.BudgetPlanningProcess,
                                                        budgetPlanHeader.BudgetingOrganization,
                                                        _budgetPlanningStageRecId).Layout;
            budgetPlanHeader.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the status of a budget plan document.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of the <c>BudgetPlanHeader</c> record for which to set the document status.
    /// </param>
    /// <param name="_documentStatus">
    /// New status of the budget plan document.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void setDocumentStatus(
        BudgetPlanHeaderRecId   _budgetPlanHeaderRecId,
        BudgetPlanStatus        _documentStatus)
    {
        BudgetPlanHeader budgetPlanHeader;

        if (!_budgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        ttsbegin;

        budgetPlanHeader = BudgetPlanHeader::find(_budgetPlanHeaderRecId, true);

        if (budgetPlanHeader
            && budgetPlanHeader.DocumentStatus != _documentStatus)
        {
            budgetPlanHeader.DocumentStatus = _documentStatus;
            budgetPlanHeader.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentBudgetPlanHeaderForChild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a selected budget plan with the parent budget plan.
    /// </summary>
    /// <param name="_parentBudgetPlanHeaderRecId">
    /// The record ID of the parent <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <param name="_childBudgetPlanHeaderRecId">
    /// The record ID of the child <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static void updateParentBudgetPlanHeaderForChild(
        BudgetPlanHeaderRecId _parentBudgetPlanHeaderRecId,
        BudgetPlanHeaderRecId _childBudgetPlanHeaderRecId)
    {
        BudgetPlanHeader childBudgetPlanHeader;

        if (!_childBudgetPlanHeaderRecId)
        {
            throw error(Error::missingParameter(null));
        }

        childBudgetPlanHeader = BudgetPlanHeader::find(_childBudgetPlanHeaderRecId, true);

        if (childBudgetPlanHeader)
        {
            // Associate the selected child plan with the parent plan
            ttsbegin;

            childBudgetPlanHeader.ParentBudgetPlanHeader = _parentBudgetPlanHeaderRecId;
            childBudgetPlanHeader.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimensionsByBudgetPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ledger dimensions for the specified <c>BudgetPlanHeader</c> reference.
    /// </summary>
    /// <param name="_budgetPlanHeaderRecId">
    /// The record ID of <c>BudgetPlanHeader</c> table.
    /// </param>
    /// <returns>
    /// A boolean value that indicates whether ledger dimensions for the specified <c>BudgetPlanHeader</c> reference are valid.
    /// </returns>
    public static boolean validateLedgerDimensionsByBudgetPlan(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLine                      budgetPlanLine;
        boolean                             isValid = true;
        BudgetPlanHeader                    budgetPlanHeader;
        BudgetPlanLayoutElement             budgetPlanLayoutElement;
        BudgetPlanColumn                    budgetPlanColumn;

        changecompany(BudgetPlan::getDataAreaId(_budgetPlanHeaderRecId))
        {
            // Select only those budget plan lines that have budget plan layout element editable.
            // The current workflow stage of the plan is used to determine the lines for the layout and layout elements allowing editing.
            while select LedgerDimension from budgetPlanLine
                group by LedgerDimension
                where budgetPlanLine.BudgetPlanHeader == _budgetPlanHeaderRecId
                    exists join budgetPlanHeader
                    where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                        exists join budgetPlanLayoutElement
                        where budgetPlanLayoutElement.Layout == budgetPlanHeader.Layout
                            && budgetPlanLayoutElement.IsEditable == NoYes::Yes
                                exists join budgetPlanColumn
                                where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                                    && budgetPlanColumn.Scenario == budgetPlanLine.BudgetPlanScenario
            {
                DimensionValidationStatus dimensionValidationStatus = LedgerDimensionValidationHelper::validateByTree(budgetPlanLine.LedgerDimension, dateNull(), true);

                if (BudgetDimensionStructureChangePostingFixFlight::instance().isFlightEnabled() && DimensionValidationStatus::StructureChanged == dimensionValidationStatus)
                {
                    LedgerDimensionAccount updatedLedgerDimension = BudgetPlan::updateLedgerDimension(_budgetPlanHeaderRecId, budgetPlanLine.LedgerDimension);

                    dimensionValidationStatus = LedgerDimensionValidationHelper::validateByTree(updatedLedgerDimension, dateNull(), true);
                }

                isValid = (DimensionValidationStatus::Valid == dimensionValidationStatus && isValid);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkerBelongsToPlanningHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the current user belongs to one of the organizations in the budget planning
    /// hierarchy.
    /// </summary>
    /// <param name="_budgetPlanningProcessRecId">
    /// The record ID of the <c>BudgetPlanningProcess</c> record.
    /// </param>
    /// <returns>
    /// true if the organization is found in the hierarchy; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The required parameters are null.
    /// </exception>
    public static boolean validateWorkerBelongsToPlanningHierarchy(
        BudgetPlanningProcessRecId _budgetPlanningProcessRecId)
    {
        boolean isValid = true;

        if (!_budgetPlanningProcessRecId)
        {
            throw error(Error::missingParameter(null));
        }

        if (!BudgetPlan::existWorkerForBudgetPlanningOrganization(_budgetPlanningProcessRecId))
        {
            isValid = checkFailed(
                strFmt("@GLS150005",
                        BudgetPlanningProcessTranslation::getLocalizedName(_budgetPlanningProcessRecId)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumberSequencesSetForDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if number sequences have been set for the <c>DocumentNumber</c> field.
    /// </summary>
    /// <returns> true if number sequences have been setup; otherwise, false. </returns>
    public static boolean checkNumberSequencesSetForDocumentNumber()
    {
        NumberSequenceReference numberSequenceReference = BudgetParameters::numRefBudgetPlanDocumentNumber();
        boolean                 numberSequencesSet = true;

        if (numberSequenceReference)
        {
            NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

            if (!numberSequenceTable)
            {
                numberSequencesSet = false;
            }
            else if (numberSequenceTable.Manual)
            {
                numberSequencesSet = false;
            }
            else if (numberSequenceTable.Blocked)
            {
                numberSequencesSet = false;
            }
        }

        return numberSequencesSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBudgetPlanInquiryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>BudgetPlanInquiryTmp</c> buffer with the budget plans the user can view.
    /// </summary>
    /// <returns>
    /// A <c>BudgetPlanInquiryTmp</c> table buffer.
    /// </returns>
    public static BudgetPlanInquiryTmp populateBudgetPlanInquiryTmp()
    {
        BudgetPlanInquiryTmp localBudgetPlanInquiryTmp;

        Query budgetPlanQuery = BudgetPlan::getBudgetPlanQuery();
        QueryRun queryRun = new QueryRun(budgetPlanQuery);

        // QueryRun must be used because Query::insert_recordset gives runtime error: "Please set dynamic property on each Query datasource field list to No."
        while (queryRun.next())
        {
            BudgetPlanHeader budgetPlanHeaderQuery = queryRun.get(tableNum(BudgetPlanHeader));

            localBudgetPlanInquiryTmp.clear();
            localBudgetPlanInquiryTmp.BudgetPlanHeader = budgetPlanHeaderQuery.RecId;
            localBudgetPlanInquiryTmp.write();
        }

        return localBudgetPlanInquiryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimension</Name>
				<Source><![CDATA[
    private static LedgerDimensionAccount updateLedgerDimension(BudgetPlanHeaderRecId _budgetPlanHeaderRecId, LedgerDimensionAccount _ledgerDimension)
    {
        LedgerDimensionAccount updatedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimensionForType(LedgerDimensionType::BudgetPlanning, _ledgerDimension);
        BudgetPlanLine budgetPlanLine;
        BudgetPlanLayoutElement budgetPlanLayoutElement;
        BudgetPlanColumn budgetPlanColumn;
        BudgetPlanHeader budgetPlanHeader;

        update_recordset budgetPlanLine
            setting LedgerDimension = updatedLedgerDimension
                where budgetPlanLine.BudgetPlanHeader == _budgetPlanHeaderRecId
                    && budgetPlanLine.LedgerDimension == _ledgerDimension
                exists join budgetPlanHeader
                    where budgetPlanHeader.RecId == budgetPlanLine.BudgetPlanHeader
                exists join budgetPlanLayoutElement
                    where budgetPlanLayoutElement.Layout == budgetPlanHeader.Layout
                        && budgetPlanLayoutElement.IsEditable == NoYes::Yes
                exists join budgetPlanColumn
                    where budgetPlanColumn.RecId == budgetPlanLayoutElement.ElementDefinition
                        && budgetPlanColumn.Scenario == budgetPlanLine.BudgetPlanScenario;

        return updatedLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>