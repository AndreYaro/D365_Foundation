<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAdjustment</Name>
	<SourceCode>
		<Declaration><![CDATA[
class MarkupAdjustment
{
    Voucher                 invoiceVoucher;
    LedgerVoucher           ledgerVoucher;
    VendInvoiceJour         vendInvoiceJour;
    NoYes                   storno;
    DlvDate                 postingDate;
    NoYes                   allocateMarkup;
    MarkupAllocation        allocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        allocation = MarkupAllocation::newMarkupAllocation(vendInvoiceJour);

        if (! allocation.dialog())
            return;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
            ! allocation.canAllocate())
        {
            error("@SYS120636");
            return;
        }
        // </GEERU>
        postingDate = allocation.postingDate() ? allocation.postingDate() : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        storno      = allocation.storno() ? allocation.storno() : NoYes::No;

        ttsbegin;

        NumberSeq numberSeq = NumberSeq::newGetVoucher(PurchParameters::numRefPurchMarkupVoucher());

        invoiceVoucher = numberSeq.voucher();

        TransactionTxt transactionTxt = this.initializeTransactionTxt();

        LedgerTransTxt transactionTextType = vendInvoiceJour.InvoiceAmount < 0 ? LedgerTransTxt::PurchCreditNoteLedger  : LedgerTransTxt::PurchInvoiceLedger;

        if (TransactionTextContext::isTypeSupported(transactionTextType))
        {
            TransactionTextContext transactionTextContext = TransactionTextContext::newForTransactionType(transactionTextType);
            transactionTextContext.setTableBuffer(vendInvoiceJour);
            transactionTextContext.setTableBuffer(vendInvoiceJour.purchTable());
            transactionTxt.setTransactionTextContext(transactionTextContext);
        }

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                              SysModule::Purch,
                                              numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.parmCheckBlockedDimensions(false);
        ledgerVoucher.parmCustomDetailLevel(true);  // records are summed according to ledgerVoucherTransObject.parmRecId

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(invoiceVoucher,
                                                              postingDate,
                                                              SysModule::Purch,
                                                              LedgerTransType::Purch,
                                                              storno);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        allocation.runOperation();

        this.adjustCharges();
        ledgerVoucher.end();

        TransactionLog::create(this.transactionLogType(), this.transactionLogTxt());
        ttscommit;

        numberSeq.used();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTransactionTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the transaction text.
    /// </summary>
    /// <returns>An initialized transaction text.</returns>
    protected TransactionTxt initializeTransactionTxt()
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();

        transactionTxt.setType          (vendInvoiceJour.InvoiceAmount < 0 ? LedgerTransTxt::PurchCreditNoteLedger  : LedgerTransTxt::PurchInvoiceLedger);
        transactionTxt.setVoucher       (invoiceVoucher);
        transactionTxt.setFormLetter    (vendInvoiceJour.InvoiceId);
        transactionTxt.setKey1          (vendInvoiceJour.PurchId);
        transactionTxt.setKey2          (vendInvoiceJour.InvoiceAccount);
        transactionTxt.setKey3          (VendTable::groupId(vendInvoiceJour.InvoiceAccount));

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust charges.
    /// </summary>    
    protected void adjustCharges()
    {
        Query query = this.buildAdjustChargesQuery();
        QueryRun queryRun = new QueryRun(query);
        
        while (queryRun.next())
        {
            VendInvoiceTrans vendInvoiceTrans = queryRun.get(tableNum(VendInvoiceTrans));
            this.adjustChargesForVendorInvoiceTransaction(vendInvoiceTrans);
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAdjustChargesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used for adjusting charges.
    /// </summary>
    /// <returns>The query.</returns>
    protected Query buildAdjustChargesQuery()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(VendInvoiceTrans));

        qbds.addRange(fieldNum(VendInvoiceTrans, PurchID)).value(queryValue(vendInvoiceJour.PurchId));
        qbds.addRange(fieldNum(VendInvoiceTrans, InvoiceId)).value(queryValue(vendInvoiceJour.InvoiceId));
        qbds.addRange(fieldNum(VendInvoiceTrans, InvoiceDate)).value(queryValue(vendInvoiceJour.InvoiceDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustChargesForVendorInvoiceTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust charges for a vendor invoice transaction.
    /// </summary>
    /// <param name = "_vendInvoiceTrans">The transaction.</param>
    protected void adjustChargesForVendorInvoiceTransaction(VendInvoiceTrans _vendInvoiceTrans)
    {
        if (_vendInvoiceTrans.Qty < 0)
        {
            MarkupAdjustment::adjustCreditNote(_vendInvoiceTrans.Qty, _vendInvoiceTrans.LineAmount, ledgerVoucher, _vendInvoiceTrans, _vendInvoiceTrans);
        }
        else
        {
            MarkupAdjustment::adjustInvoice(_vendInvoiceTrans.Qty, _vendInvoiceTrans.LineAmount, ledgerVoucher, _vendInvoiceTrans, _vendInvoiceTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt transactionLogTxt()
    {
        return "@SYS25471";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::PurchInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour</Name>
				<Source><![CDATA[
    void  vendInvoiceJour(VendInvoiceJour  _vendInvoiceJour = vendInvoiceJour)
    {
        vendInvoiceJour = _vendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCreditNote</Name>
				<Source><![CDATA[
    static void adjustCreditNote(PurchQty            _purchQty,
                                 LineAmount          _lineAmount,
                                 LedgerVoucher       _ledgerVoucher,
                                 VendInvoiceTrans    _vendInvoiceTrans,
                                 Common              _source,
                                 NoYes               _creditNote = NoYes::No
                                )
    {
        Markup_Adjust               markup;
        MapEnumerator               markupMapEnumerator;
        CurrencyCode                currencyCode;
        Amount                      amount;
        InventMovement              inventMovement;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>
        // <GEERU>
        TmpLedgerBondLogTable_RU    markupLogTable;
        LedgerBondClient_RU         ledgerBondClient ;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ledgerBondClient = _ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }
        }
        // </GEERU>

        markup              = new Markup_Adjust(_vendInvoiceTrans.CurrencyCode);
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && LedgerParameters::find().Miscellaneouscharges_IN)
        {
            markup.parmCreditNote_IN(_creditNote);
        }
        // </GIN>
        markup.postInvoice(_purchQty,
                           _lineAmount,
                           _source,
                           _ledgerVoucher,
                           _vendInvoiceTrans.DefaultDimension);
        // <GEERU>
        if (ledgerBondClient)
        {
            markupLogTable = ledgerBondClient.log2Table(ledgerBondClient.currentLog());
            ledgerBondClient.removeCurrentLogObject();
        }
        // </GEERU>

        inventMovement = MarkupAdjustment::inventMovement(_vendInvoiceTrans.InventTransId);

        if (inventMovement)
        {
            markupMapEnumerator = markup.markupItemLedgerMap().getEnumerator();
            while (markupMapEnumerator.moveNext())
            {
                currencyCode = markupMapEnumerator.currentKey();
                amount       = markupMapEnumerator.currentValue();

                // <GEERU>
                if (ledgerBondClient)
                {
                    ledgerBondClient.addNewLogObject();
                }

                // </GEERU>
                ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
                currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                               ledgerVoucherObject,
                                               inventMovement.postingOperations(),
                                               LedgerDimensionFacade::serviceCreateLedgerDimension(inventMovement.accountOperations(), _vendInvoiceTrans.DefaultDimension),
                                               currencyCode,
                                               amount,
                                               currencyExchHelper);
                ledgerVoucherTransObject.parmSourceTableId(_vendInvoiceTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(_vendInvoiceTrans.RecId);
                _ledgerVoucher.addTrans(ledgerVoucherTransObject);
                // <GEERU>
                if (ledgerBondClient)
                {
                    MarkupAdjustment::doBondProportional_RU(ledgerBondClient,
                                                            markupLogTable,
                                                            ledgerBondClient.log2Table(ledgerBondClient.currentLog()),
                                                            currencyCode,
                                                            LedgerBondAmountType_RU::Currency);
                    ledgerBondClient.removeCurrentLogObject();
                }

                if (inventMovement.mustBeBookedOnhandSecCur_RU())
                {
                    if (ledgerBondClient)
                    {
                        ledgerBondClient.addNewLogObject();
                    }

                    _ledgerVoucher.addTrans(
                        LedgerVoucherTransObject::newBasicSecondary_RU(
                            _ledgerVoucher.findOrCreateReferenceSecCur_RU(),
                            LedgerPostingType::PurchConsump,
                            LedgerDimensionFacade::serviceCreateLedgerDimension(_vendInvoiceTrans.purchLine().ledgerDimensionConsumption(), _vendInvoiceTrans.DefaultDimension),
                            currencyCode,
                            CurrencyExchangeHelper::curAmount2CurAmount(amount, currencyCode, Ledger::reportingCurrency(), _ledgerVoucher.lastTransDate())));

                    _ledgerVoucher.restoreReferenceSecCur_RU();

                    if (ledgerBondClient)
                    {
                        MarkupAdjustment::doBondProportional_RU(ledgerBondClient,
                                                                markupLogTable,
                                                                ledgerBondClient.log2Table(ledgerBondClient.currentLog()),
                                                                currencyCode,
                                                                LedgerBondAmountType_RU::MSTSecondary);
                        ledgerBondClient.removeCurrentLogObject();
                    }
                }
                // </GEERU>
                MarkupAdjustment::postChargeAndStockVariation(_ledgerVoucher,
                                                              ledgerVoucherObject,
                                                              inventMovement,
                                                              _vendInvoiceTrans,
                                                              amount,
                                                              currencyCode,
                                                              currencyExchHelper);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustInvoice</Name>
				<Source><![CDATA[
    static void  adjustInvoice(PurchQty            _purchQty,
                               LineAmount          _lineAmount,
                               LedgerVoucher       _ledgerVoucher,
                               VendInvoiceTrans    _vendInvoiceTrans,
                               Common              _source,
                               Common              _destin = null,
                               boolean             _createPostedOnly = false)
    {
        Markup_Adjust               markup;
        TransactionTxt              transactionTxt;
        InventTransOriginId         inventTransOriginId;
        InventTrans                 inventTrans;
        InventAdjustPost            inventAdjustPost;
        InventTransAdjust           inventTransAdjust;
        InventAdjustAllocate        inventAdjustAllocate;
        InventMovement              inventMovement;
        MapEnumerator               markupMapEnumerator;
        CurrencyCode                currencyCode;
        Qty                         qty;
        Amount                      amount;
        boolean                     postOnhandFinancial;
        CostAmount                  adjustCostAmountCur;
        CostAmount                  adjustCostAmountMST;
        InventAdjustmentSpec        inventAdjustmentSpec = InventAdjustmentSpec::ItemNum;
        LedgerDimensionDefaultAccount   ledgerDimensionNonInventoried;
        PurchLine                   purchLine;
        boolean                     isInventoried;
        boolean                     isPostOnhandFinancialCached;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerPostingTransaction;
        CurrencyExchangeHelper      currencyExchangeHelper;
        Map                         transactionAmountsByCurrency;
        MapEnumerator               enumerator;
        Amount                      currencyAmount;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        VendInvoiceAccount          vendInvoiceAccount;

        // <GEERU>
        #ISOCountryRegionCodes

        TmpLedgerBondLogTable_RU    logTable;
        CostAmount                  transAdjustAmount;
        InventAdjustPostSecCur_RU   inventAdjustPostSecCur;
        InventTransAdjustSecCur_RU  inventTransAdjustSecCur;
        LedgerBondClient_RU         ledgerBondClient = _ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
        TmpLedgerBondLogTable_RU    markupLogTable;
        MarkupCode                  markupCode_RU;
        boolean                     useOverheadStructure_RU = InventParameters::find().UseOverheadStructure_RU;
        RefRecId                    markupTransRecId_RU;
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>
        ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        ledgerVoucherObject.parmTrackTransactionAmountsByCurrency(true);

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

        markup = new Markup_Adjust(_vendInvoiceTrans.CurrencyCode);

        markup.transDate(ledgerVoucherObject.parmTransDate());

        // <GEERU>
        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }
        // </GEERU>
        if (_createPostedOnly)
        {
            // caller does not want posting to occur, so pass null ledgerVoucher to trigger that behavior in the Markup class
            // as well as allowing createPostedOnly to default to false
            markup.postInvoice(_purchQty,
                               _lineAmount,
                               _source,
                               null,
                               _vendInvoiceTrans.DefaultDimension,
                               _destin,
                               0,
                               '');
        }
        else
        {
            markup.postInvoice(_purchQty,
                               _lineAmount,
                               _source,
                               _ledgerVoucher,
                               _vendInvoiceTrans.DefaultDimension,
                               _destin,
                               0,
                               '',
                               _createPostedOnly);
        }
        // <GEERU>
        if (ledgerBondClient)
        {
            markupLogTable = ledgerBondClient.log2Table(ledgerBondClient.currentLog());
            ledgerBondClient.removeCurrentLogObject();
        }
        // </GEERU>
        if (_vendInvoiceTrans.isNonPO())
        {
            isInventoried = _vendInvoiceTrans.isStocked();
        }
        else
        {
            purchLine = _vendInvoiceTrans.purchLine();
            isInventoried = purchLine.isStocked();
        }

        if (isInventoried)
        {
            inventMovement = MarkupAdjustment::inventMovement(_vendInvoiceTrans.InventTransId);
        }
        else
        {
            if (_vendInvoiceTrans.isNonPO())
            {
                ledgerDimensionNonInventoried = _vendInvoiceTrans.ledgerDimensionItem(InventAccountType::PurchExpense);
            }
            else
            {
                ledgerDimensionNonInventoried = purchLine.ledgerDimensionItem(InventAccountType::PurchExpense);
            }
        }
        // <GEERU>
        if (useOverheadStructure_RU)
        {
            markupMapEnumerator = markup.markupItemLedgerMap_RU().getEnumerator();
        }
        else
        {
            // </GEERU>
            markupMapEnumerator = markup.markupItemLedgerMap().getEnumerator();
            // <GEERU>
        }
        // </GEERU>

        while (markupMapEnumerator.moveNext())
        {
            // <GEERU>
            if (useOverheadStructure_RU)
            {
                [currencyCode, markupCode_RU, markupTransRecId_RU] = markupMapEnumerator.currentKey();
            }
            else
            {
                // </GEERU>
                currencyCode = markupMapEnumerator.currentKey();
                // <GEERU>
            }
            // </GEERU>
            amount       = markupMapEnumerator.currentValue();

            if (isInventoried)
            {
                if (inventMovement)
                {
                    inventAdjustPost   = new InventAdjustPost(ledgerVoucherObject.parmVoucher(),
                                                              ledgerVoucherObject.parmTransDate(),
                                                              inventAdjustmentSpec,
                                                              LedgerTransTxt::InventClosingAdjustment);

                    inventAdjustPost.parmCurrencyCode(currencyCode);
                    inventAdjustPost.parmAdjustPurch(true);

                    inventTransAdjust  = new InventTransAdjust(ledgerVoucherObject.parmTransDate(),
                                                               ledgerVoucherObject.parmVoucher());
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        inventTransAdjust.parmMarkupCode_RU(markupCode_RU);

                        inventAdjustPostSecCur = InventAdjustPost::newFromCurrency_RU(ledgerVoucherObject.parmVoucher(),
                                                                                        ledgerVoucherObject.parmTransDate(),
                                                                                        InventAdjustmentSpec::ItemNum,
                                                                                        LedgerTransTxt::InventClosingAdjustment,
                                                                                        InventTransCurrency_RU::SecondaryCur);
                        inventAdjustPostSecCur.parmCurrencyCode(currencyCode);
                        inventAdjustPostSecCur.parmAdjustPurch(true);

                        inventTransAdjustSecCur = InventTransAdjust::construct(ledgerVoucherObject.parmTransDate(),
                                                                                ledgerVoucherObject.parmVoucher(),
                                                                                false,
                                                                                InventTransCurrency_RU::SecondaryCur);
                        inventTransAdjustSecCur.parmMarkupCode_RU(markupCode_RU);
                    }
                    // </GEERU>

                    inventTransOriginId = InventTransOrigin::findByInventTransId(_vendInvoiceTrans.InventTransId).RecId;

                    InvoiceId invoiceId = MarkupAdjustment::getInvoiceId(_vendInvoiceTrans);

                    TransDate invoiceDate;

                    invoiceDate = _vendInvoiceTrans.InvoiceDate;

                    qty = InventTransInvoice::qtyPurchased(inventTransOriginId, invoiceId, invoiceDate);

                    inventAdjustAllocate = new InventAdjustAllocate(qty, amount);

                    isPostOnhandFinancialCached = false;

                    while select forupdate inventTrans
                            where inventTrans.InventTransOrigin     == inventTransOriginId
                              &&  inventTrans.DateFinancial         == invoiceDate
                              &&  inventTrans.InvoiceId             == invoiceId
                              &&  inventTrans.StatusReceipt         == StatusReceipt::Purchased
                              &&  inventTrans.StatusIssue           == StatusIssue::None
                              &&  inventTrans.PackingSlipReturned   == 0
                              &&  ! inventAdjustAllocate.isAllocated()
                    {
                        if (!isPostOnhandFinancialCached)
                        {
                            postOnhandFinancial         = inventTrans.inventTable().modelGroup().PostOnhandFinancial;
                            isPostOnhandFinancialCached = true;
                        }

                        adjustCostAmountCur = inventAdjustAllocate.calcAdjustment(inventTrans, currencyCode);
                        adjustCostAmountMST = CurrencyExchangeHelper::mstAmount(adjustCostAmountCur, currencyCode, ledgerVoucherObject.parmTransDate());
                        inventTransAdjust.updateNow(inventTrans,
                                                    NoYes::No,
                                                    NoYes::No,
                                                    adjustCostAmountMST,
                                                    postOnhandFinancial, LedgerPostingType::None, 0,
                                                    !postOnhandFinancial, LedgerPostingType::None, 0,
                                                    false,
                                                    _ledgerVoucher,
                                                    inventAdjustmentSpec);
                        // <GEERU>
                        if (countryRegion_RU)
                        {
                            transAdjustAmount += adjustCostAmountCur;

                            if (InventModelGroupItem::modelGroupByItemIdLegalEntity(inventTrans.ItemId).PostOnhandFinancialSecCur_RU)
                            {
                                inventTransAdjustSecCur.updateNow(inventTrans,
                                                                  NoYes::No,
                                                                  NoYes::No,
                                                                  CurrencyExchangeHelper::curAmount2CurAmount(adjustCostAmountCur, currencyCode, Ledger::reportingCurrency(), ledgerVoucherObject.parmTransDate()),
                                                                  true);
                            }
                        }
                        // </GEERU>
                        MarkupAdjustment::postChargeAndStockVariation(_ledgerVoucher,
                                                                      ledgerVoucherObject,
                                                                      inventMovement,
                                                                      _vendInvoiceTrans,
                                                                      adjustCostAmountCur,
                                                                      currencyCode,
                                                                      currencyExchangeHelper);
                    }

                    if (! inventAdjustAllocate.isAllocated())
                    {
                        throw error("@SYS15814");
                    }
                    // <GEERU>
                    if (countryRegion_RU)
                    {
                        MarkupAdjustment::assetAcquisitionAdj_RU(_vendInvoiceTrans,
                                                                 transAdjustAmount,
                                                                 ledgerVoucherObject.parmTransDate(),
                                                                 currencyCode);
                        transAdjustAmount = 0;
                        if (ledgerBondClient)
                        {
                            ledgerBondClient.addNewLogObject();
                        }
                    }
                    // </GEERU>
                    inventAdjustPost.updateNow(_ledgerVoucher);
                    // <GEERU>
                    if (ledgerBondClient && markupTransRecId_RU && markup.markupBondRefMap_RU().exists(markupTransRecId_RU))
                    {
                        ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(), markup.markupBondRefMap_RU().lookup(markupTransRecId_RU));
                    }

                    if (ledgerBondClient)
                    {
                        MarkupAdjustment::doBondProportional_RU(ledgerBondClient,
                                                                markupLogTable,
                                                                ledgerBondClient.log2Table(ledgerBondClient.currentLog()),
                                                                currencyCode,
                                                                LedgerBondAmountType_RU::Currency);
                        ledgerBondClient.flushCurrentLog();
                    }

                    if (inventAdjustPostSecCur)
                    {
                        inventAdjustPostSecCur.updateNow(_ledgerVoucher);
                    }

                    if (ledgerBondClient)
                    {
                        MarkupAdjustment::doBondProportional_RU(ledgerBondClient,
                                                                markupLogTable,
                                                                ledgerBondClient.log2Table(ledgerBondClient.currentLog()),
                                                                currencyCode,
                                                                LedgerBondAmountType_RU::MSTSecondary);
                        ledgerBondClient.removeCurrentLogObject();
                    }
                    // </GEERU>
                }
            }
            else if (!_createPostedOnly) //Noninventoried
            {
                ledgerVoucherObject.addTrans(
                    LedgerVoucherTransObject::newTransactionAmountDefault(
                                               ledgerVoucherObject,
                                               LedgerPostingType::PurchExpense,
                                                LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionNonInventoried, _vendInvoiceTrans.DefaultDimension),
                                               currencyCode,
                                               amount,
                                               currencyExchangeHelper));
                // <GEERU>
                if (ledgerBondClient                        &&
                    conLen(markup.itemLedgerBondLog_RU())   &&
                    ledgerBondClient.lastNotBondedTransObject())
                {
                    ledgerBondClient.bondVRef2Log(ledgerBondClient.lastNotBondedTransObject().vrefId(),
                                                  markup.itemLedgerBondLog_RU());
                }
                // </GEERU>
            }
        }
        // <GEERU>
        if (ledgerBondClient)
        {
            logTable = ledgerBondClient.log2Table(ledgerBondClient.currentLog());
        }
        // </GEERU>

        if (_source.TableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoLine = _source;
            vendInvoiceAccount = vendInvoiceInfoLine.InvoiceAccount;
        }
        else
        {
            vendInvoiceAccount = _vendInvoiceTrans.vendInvoiceJour().InvoiceAccount;
        }

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (LedgerTransTxt::VendRoundOff);
        transactionTxt.setVoucher       (ledgerVoucherObject.parmVoucher());
        transactionTxt.setFormLetter    (_vendInvoiceTrans.InvoiceId);
        transactionTxt.setKey1          (_vendInvoiceTrans.PurchID);
        transactionTxt.setKey2          (vendInvoiceAccount);
        transactionTxt.setKey3          (VendTable::groupId(vendInvoiceAccount));

        transactionAmountsByCurrency = ledgerVoucherObject.getTransactionAmountsByCurrency();
        enumerator = transactionAmountsByCurrency.getEnumerator();
        while (enumerator.moveNext())
        {
            currencyAmount = enumerator.currentValue();

            ledgerPostingTransaction = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                LedgerPostingType::PurchaseInvoiceRoundOff,
                LedgerDimensionFacade::serviceCreateLedgerDimension(LedgerSystemAccounts::getDefaultAccount(LedgerPostingType::PurchaseInvoiceRoundOff), _vendInvoiceTrans.DefaultDimension),
                enumerator.currentKey(), // currencyCode
                -currencyAmount,
                currencyExchangeHelper);

            ledgerPostingTransaction.parmText(transactionTxt.txt());

            ledgerVoucherObject.addTrans(ledgerPostingTransaction);
            // <GEERU>
            if (ledgerBondClient)
            {
                ledgerVoucherObject.bond_afterPostCurrencyDiff_RU(currencyAmount, enumerator.currentKey(), ledgerPostingTransaction, logTable);
            }
            // </GEERU>
        }

        ledgerVoucherObject.parmTrackTransactionAmountsByCurrency(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static InvoiceId getInvoiceId(VendInvoiceTrans _vendInvoiceTrans)
    {
        VendInvoiceJour vendInvoiceJour = _vendInvoiceTrans.vendInvoiceJour();

        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findSourceDocumentHeader(vendInvoiceJour.SourceDocumentHeader);

        return vendInvoiceInfoTable.RecId != 0 ? vendInvoiceInfoTable.Num : vendInvoiceJour.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetAcquisitionAdj_RU</Name>
				<Source><![CDATA[
    private static void assetAcquisitionAdj_RU(VendInvoiceTrans _vendInvoiceTrans,
                                                      CostAmount       _adjustment,
                                                      TransDate        _transDate,
                                                      CurrencyCode     _currencyCode)
    {
        RAssetTable      assetTable;
        RAssetPurchTrans assetPurchTrans;
        PurchLine        purchLine;
        RAssetAmount     amountStandard, assetAdjust;
        RAssetStandards  assetStandards;

        assetAdjust = _adjustment / _vendInvoiceTrans.Qty;
        purchLine   = PurchLine::findInventTransId(_vendInvoiceTrans.InventTransId);

        ttsbegin;

        while select AssetId from assetPurchTrans
            where assetPurchTrans.TableRecId   == purchLine.RecId  &&
                  assetPurchTrans.TableTableId == purchLine.TableId &&
                  assetPurchTrans.Posted       == NoYes::Yes
        {
            assetTable = RAssetTable::find(assetPurchTrans.AssetId, true);
            if (assetTable.Status == RAssetStatus::PurchInvoice)                
            {
                if (_currencyCode == CompanyInfoHelper::standardCurrency())
                {
                    assetTable.AcquisitionPrice += assetAdjust;
                }
                else
                {
                    assetTable.AcquisitionPrice += CurrencyExchangeHelper::amountCur2MST(assetAdjust, _currencyCode, 0, _transDate);
                }
                assetTable.update();
                while select forupdate assetStandards
                    where assetStandards.AssetId == assetPurchTrans.AssetId
                        && assetStandards.Depreciation
                {
                    amountStandard = CurrencyExchangeHelper::curAmount2CurAmount(assetAdjust, _currencyCode, assetStandards.CurrencyCode, _transDate);
  
                    assetStandards.AcquisitionPrice += amountStandard;
                    assetStandards.update();
                }
            }
            else
            {
                info(strFmt("@GLS116355", assetTable.AccountNum));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBondProportional_RU</Name>
				<Source><![CDATA[
    private static void doBondProportional_RU(LedgerBondClient_RU        _ledgerBondClient,
                                              TmpLedgerBondLogTable_RU   _markupLogTable,
                                              TmpLedgerBondLogTable_RU   _inventLogTable,
                                              CurrencyCode               _currencyCode,
                                              LedgerBondAmountType_RU    _ledgerBondAmountType = LedgerBondAmountType_RU::MST)
    {
        #localMacro.logTableWhileSelect
        while select %1
            order by BondId
            where %1.CurrencyCode == _currencyCode &&
                  ((_ledgerBondAmountType == LedgerBondAmountType_RU::Currency && %1.AmountCur) ||
                   (_ledgerBondAmountType == LedgerBondAmountType_RU::MSTSecondary && ! %1.AmountMST))
        #endMacro

        Amount          sumDebit, amountToBond, remainderToBond;
        Factor          factors[];
        int             i;

        switch (_ledgerBondAmountType)
        {
            case LedgerBondAmountType_RU::Currency:
                select sum(AmountCur) from _inventLogTable;
                sumDebit = _inventLogTable.AmountCur;
                break;
            case LedgerBondAmountType_RU::MSTSecondary:
                select sum(AmountMSTSecondary) from _inventLogTable;
                sumDebit = _inventLogTable.AmountMSTSecondary;
                break;
            default :
                return;
        }

        i = 1;
        #logTableWhileSelect(_inventLogTable)
        {
            factors[i] = _ledgerBondAmountType == LedgerBondAmountType_RU::Currency ? _inventLogTable.AmountCur / sumDebit
                                                                                    : _inventLogTable.AmountMSTSecondary / sumDebit;
            i++;
        }

        #logTableWhileSelect(_markupLogTable)
        {
            i = 1;
            #logTableWhileSelect(_inventLogTable)
            {
                amountToBond = _ledgerBondAmountType == LedgerBondAmountType_RU::Currency ? _markupLogTable.AmountCur * factors[i]
                                                                                          : _markupLogTable.AmountMSTSecondary * factors[i];

                _ledgerBondClient.bondVRef2VRef(_markupLogTable.BondId,
                                                _inventLogTable.BondId,
                                                amountToBond,
                                                _ledgerBondAmountType);
                i++;
            }
        }

        #logTableWhileSelect(_markupLogTable)
        {
            amountToBond = _ledgerBondAmountType == LedgerBondAmountType_RU::Currency
                ? _ledgerBondClient.bondTransObject(_markupLogTable.BondId).remainAmountCur()
                : _ledgerBondClient.bondTransObject(_markupLogTable.BondId).remainAmountMSTSecond();

            if (amountToBond == 0)
                continue;

            #logTableWhileSelect(_inventLogTable)
            {
                remainderToBond = _ledgerBondAmountType == LedgerBondAmountType_RU::Currency
                    ? _ledgerBondClient.bondTransObject(_inventLogTable.BondId).remainAmountCur()
                    : _ledgerBondClient.bondTransObject(_inventLogTable.BondId).remainAmountMSTSecond();

                if (remainderToBond >= amountToBond)
                {
                    _ledgerBondClient.bondVRef2VRef(_markupLogTable.BondId,
                                                    _inventLogTable.BondId,
                                                    amountToBond,
                                                    _ledgerBondAmountType);
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    public static InventMovement inventMovement(InventTransId _inventTransId)
    {
        PurchLine           purchLine;
        VendInvoiceTrans    vendInvoiceTrans;
        VendInvoiceJour     vendInvoiceJour;

        if (!_inventTransId)
        {
            return null;
        }

        purchLine = PurchLine::findInventTransId(_inventTransId,true);

        if (!purchLine)
        {
            vendInvoiceTrans = VendInvoiceTrans::findInventTransId(_inventTransId);
            vendInvoiceJour  = vendInvoiceTrans.vendInvoiceJour();
            purchLine.clear();
            purchLine.initFromVendInvoiceTrans(vendInvoiceTrans);
            purchLine.PurchId       = vendInvoiceTrans.OrigPurchId;
            purchLine.VendAccount   = vendInvoiceJour.OrderAccount;
            purchLine.VendGroup     = vendInvoiceJour.VendGroup;
        }

        return InventMovement::construct(purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  args)
    {
        MarkupAdjustment markupAdjustment = MarkupAdjustment::newFromCallerRecord(args.record());
        markupAdjustment.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the markup adjustment based on the given record.
    /// </summary>
    /// <param name = "_common">
    ///     The record to initialize from.
    /// </param>
    /// <returns>
    ///     A new instance of <c>MarkupAdjustment</c>.
    /// </returns>
    public static MarkupAdjustment newFromCallerRecord(Common _common)
    {
        MarkupAdjustment markupAdjustment = new MarkupAdjustment();
        switch (_common.TableId)
        {
            case tableNum(VendInvoiceJour):
                markupAdjustment.vendInvoiceJour(_common);
                break;
        }

        return markupAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postChargeAndStockVariation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the amount on the charge account and offsets the stock variation account.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// A <c>LedgerVoucher</c> object.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    /// A <c>LedgerVoucherObject</c> object.
    /// </param>
    /// <param name="_inventMovement">
    /// A <c>InventMovement</c> object.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// A <c>VendInvoiceTrans</c> record.
    /// </param>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <param name="_currencyCode">
    /// A <c>CurrencyCode</c>.
    /// </param>
    /// <param name="_currencyExchHelper">
    /// A <c>CurrencyExchangeHelper</c> object.
    /// </param>
    protected static void postChargeAndStockVariation(
        LedgerVoucher           _ledgerVoucher,
        LedgerVoucherObject     _ledgerVoucherObject,
        InventMovement          _inventMovement,
        VendInvoiceTrans        _vendInvoiceTrans,
        Amount                  _amount,
        CurrencyCode            _currencyCode,
        CurrencyExchangeHelper  _currencyExchHelper
    )
    {
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean                     countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        LedgerBondClient_RU         ledgerBondClient;
        // </GEERU>

        if (_inventMovement.mustBeBookedCharge())
        {
            // <GEERU>
            if (countryRegion_RU)
            {
                ledgerBondClient = _ledgerVoucherObject.ledgerBondClient_RU();
            }
            // </GEERU>

            boolean obsoleteCharge = CostObsoleteChargePostingTypeForAdjustmentFlight::instance().isEnabled();

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                            _ledgerVoucherObject,
                                            obsoleteCharge ? _inventMovement.postingOperations() : _inventMovement.postingCharge(),
                                            LedgerDimensionFacade::serviceCreateLedgerDimension(obsoleteCharge ? _inventMovement.accountOperations() : _inventMovement.accountCharge(), _vendInvoiceTrans.DefaultDimension),
                                            _currencyCode,
                                            _amount,
                                            _currencyExchHelper);
            ledgerVoucherTransObject.parmIsCorrection(NoYes::Yes);

            _ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                            _ledgerVoucherObject,
                                            _inventMovement.postingStockVariation(),
                                            LedgerDimensionFacade::serviceCreateLedgerDimension(_inventMovement.accountStockVariation(), _vendInvoiceTrans.DefaultDimension),
                                            _currencyCode,
                                            -_amount,
                                            _currencyExchHelper);

            // <GEERU>
            if (ledgerBondClient)
            {
                ledgerVoucherTransObject.parmIsCorrection(NoYes::Yes);
            }
            // </GEERU>
            _ledgerVoucher.addTrans(ledgerVoucherTransObject);
            // <GEERU>
            if (ledgerBondClient)
            {
                ledgerBondClient.bondLast2();
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>