<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcTax_ParmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesCalcTax_ParmTrans
extends     SalesCalcTax_Sales
{
    SalesParmTable  salesParmTable;
    SalesParmLine   salesParmLine;
    SalesParmLine_IN   salesParmLine_IN;

    ParmId          parmId;
    AccountOrder    sumBy;
    SalesId         sumSalesId;
    DocumentStatus  documentStatus;

    QueryRun        querySalesTableMarkup;
    boolean         firstMarkup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction supports the adjustment of a single line.
    /// </summary>
    /// <returns>
    /// true if adjustment of a single line is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        boolean allowSingleLineAdjustment = this.useDetailsSalesTaxAdjustmentType();

        return allowSingleLineAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns assessable value.
    /// </summary>
    /// <returns>
    /// Returns assessable value.
    /// </returns>
    public AmountCur assessableValueTransactionCurrency()
    {
        return salesParmLine_IN.assessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a value that indicates if a tax group exists for on any line of the document.
    /// </summary>
    /// <returns>
    ///   true if a tax group exists for any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
        SalesParmLine   parmLineLocal;
        SalesLine       salesLineLocal;
        MarkupTrans     markupTransLine;
        boolean         taxGroupsExist;

        select firstOnly RecId from parmLineLocal
                where parmLineLocal.ParmId      == salesParmTable.ParmId &&
                      parmLineLocal.TableRefId  == salesParmTable.TableRefId
             exists join salesLineLocal
                where salesLineLocal.RecId          == parmLineLocal.SalesLineRecId &&
                      salesLineLocal.TaxGroup       != '' &&
                      salesLineLocal.TaxItemGroup   != '';
        if (parmLineLocal != null)
        {
            taxGroupsExist = true;
        }

        if (!taxGroupsExist)
        {
            if (markupTrans::doTaxGroupExistsForMarkup(salesTable.TableId, salesTable.RecId))
            {
                taxGroupsExist = true;
            }
        }

        if (!taxGroupsExist)
        {
            select firstOnly RecId from markupTransLine
                where markupTransLine.TaxGroup      != '' &&
                      markupTransLine.TaxItemGroup  != '' &&
                      !markupTransLine.IsDeleted
            exists join salesLineLocal
                where salesLineLocal.TableId    == markupTransLine.TransTableId &&
                      salesLineLocal.RecId      == markupTransLine.TransRecId
            exists join parmLineLocal
                where parmLineLocal.SalesLineRecId  == salesLineLocal.RecId &&
                      parmLineLocal.ParmId          == salesParmTable.ParmId &&
                      parmLineLocal.TableRefId      == salesParmTable.TableRefId;

            if (markupTransLine != null)
            {
                taxGroupsExist = true;
            }
        }

        return taxGroupsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscPct endDisc()
    {
        DiscPct     endDisc;

        if (!salesLine.endDisc())
        {
            return 0.0;
        }

        AmountCur calculatedEndDiscBalance = salesTotals.calculatedEndDiscBalance();

        if (calculatedEndDiscBalance)
        {
            endDisc = salesTotals.totalEndDiscUnRounded()*100/calculatedEndDiscBalance;
        }
        else
        {
            endDisc = salesLine.salesTable().DiscPercent;
        }

        return endDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return super(salesParmTable.getExchRateDate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return super(salesParmTable.getExchRateDate(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchRate</Name>
				<Source><![CDATA[
    internal CustExchRate reportingCurrencyExchRate(date _date = dateNull())
    {
        if (EnableReportingCurrencyExchRateInSOInvoice_WFlight::instance().isEnabled()
            && SalesParameters::find().DateOfExchRate_W != DateOfExchRate_W::PostingDate)
        {
            return super(salesParmTable.getExchRateDate(_date));
        }
        else
        {
            return super(_date);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesParmTable_RU</Name>
				<Source><![CDATA[
    public SalesParmTable getSalesParmTable_RU()
    {
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    public Common getSource()
    {
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription  taxAdjustmentDetailDescription;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(MarkupTrans):
                    MarkupTrans localMarkupTrans = MarkupTrans::findRecId(_sourceRecId);

                    if (localMarkupTrans)
                    {
                        taxAdjustmentDetailDescription = localMarkupTrans.Txt;
                    }

                    break;

                case tableNum(SalesLine):
                    SalesLine localSalesLine = SalesLine::findRecId(_sourceRecId);

                    if (localSalesLine && localSalesLine.ItemId)
                    {
                        InventTable localInventTable = InventTable::find(localSalesLine.ItemId);

                        if (localInventTable)
                        {
                            taxAdjustmentDetailDescription = localInventTable.itemDescriptionOrName();
                        }
                    }
                    else if (localSalesLine && localSalesLine.SalesCategory)
                    {
                        EcoResCategoryTranslation localEcoResCategoryTranslation = EcoResCategoryTranslation::find(localSalesLine.SalesCategory, CompanyInfo::languageId());

                        if (localEcoResCategoryTranslation)
                        {
                            taxAdjustmentDetailDescription = localEcoResCategoryTranslation.Description;
                        }
                    }

                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference of the tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference    taxAdjustmentDetailReference;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(MarkupTrans):
                    MarkupTrans localMarkupTrans = MarkupTrans::findRecId(_sourceRecId);

                    if (localMarkupTrans)
                    {
                        taxAdjustmentDetailReference = localMarkupTrans.MarkupCode;
                    }

                    break;

                case tableNum(SalesLine):
                    SalesLine localSalesLine = SalesLine::findRecId(_sourceRecId);

                    if (localSalesLine && localSalesLine.ItemId)
                    {
                        taxAdjustmentDetailReference = localSalesLine.ItemId;
                    }
                    else if (localSalesLine && localSalesLine.SalesCategory)
                    {
                        EcoResCategory localEcoResCategory = EcoResCategory::find(localSalesLine.SalesCategory);

                        if (localEcoResCategory)
                        {
                            taxAdjustmentDetailReference = localEcoResCategory.Name;
                        }
                    }

                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(MarkupTrans):
                    taxAdjustmentDetailType = TaxAdjustmentDetailType::Charge;
                    break;

                case tableNum(SalesLine):
                    SalesLine localSalesLine = SalesLine::findRecId(_sourceRecId);

                    if (localSalesLine && localSalesLine.ItemId)
                    {
                        taxAdjustmentDetailType = TaxAdjustmentDetailType::Item;
                    }
                    else if (localSalesLine && localSalesLine.SalesCategory)
                    {
                         taxAdjustmentDetailType = TaxAdjustmentDetailType::Category;
                    }
                    break;

                default:
                    break;
            }
        }

        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    void  initCursorMarkupHeader(TableId      tableId,
                                 RecId        recId)
    {
        querySalesTableMarkup   = this.queryBuildSalesTable();
        firstMarkup             = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate  invoiceDate()
    {
        if (salesLine.InventTransIdReturn && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            return salesLine.ProjId ? ProjInvoiceItem::findInventTransId_W(salesLine.InventTransIdReturn).InvoiceDate
                                    : CustInvoiceTrans::findInventTransid(salesLine.InventTransIdReturn).InvoiceDate;
        }

        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    public boolean isNewLine()
    {
        boolean isNewLine;
        if (!prevSalesLine.RecId || prevSalesLine.RecId != salesLine.RecId)
            isNewLine = true;

        return isNewLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        SalesLine querySalesLine;

        salesParmLine = super(_lineQueryRun);

        if (salesParmLine)
        {
            querySalesLine = salesParmLine.salesLine();

            querySalesLine.SalesDeliverNow  = salesParmLine.DeliverNow;
            querySalesLine.QtyOrdered       = salesParmLine.InventNow;
            querySalesLine.LineAmount       = salesParmLine.effectiveLineAmount();
        }

        return querySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Maximum retail price.
    /// </summary>
    /// <returns>
    /// Returns Maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN maximumRetailPrice()
    {
        return salesParmLine_IN.MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameter ID of the document processing.
    /// </summary>
    /// <returns>
    /// The parameter ID.
    /// </returns>
    public ParmId mcrGetParmId()
    {
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetParmTableRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the tableRefId field from the <c>SalesParmTable</c>.
    /// </summary>
    /// <returns>
    ///     The tableRefId field from the <c>SalesParmTable</c>.
    /// </returns>
    TradeLineRefId mcrGetParmTableRefId()
    {
        return SalesParmTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _source,
             SalesUpdate    _specQty,
             AccountOrder   _sumBy,
             ParmId         _parmId,
             SalesId        _sumSalesId,
             DocumentStatus _documentStatus)
    {
        sumBy           = _sumBy;
        parmId          = _parmId;
        sumSalesId      = _sumSalesId;
        documentStatus  = _documentStatus;

        switch (_source.TableId)
        {
            case tableNum(SalesTable)       : salesTable       = _source;
                                              salesParmTable   = SalesParmTable::findSalesId(salesTable.SalesId, parmId);
                                              break;

            case tableNum(SalesParmTable)   : salesParmTable   = _source;
                                              salesTable       = salesParmTable.salesTable();
                                              break;

            default                         : throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(salesTable, _specQty);

        if (TaxDeliveryDatePickPackingSlipDateHelper::isFeatureEnabled()
            && documentStatus == DocumentStatus::Invoice
            && this.shouldNotifyUsersWhenInvoice())
        {
            TaxDeliveryDatePickPackingSlipDateHelper::notifyUsersWhenInvoice(
                SalesParmUpdate::find(salesParmTable.ParmId),
                salesParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    MarkupTrans  nextMarkupLine()
    {
        MarkupTrans salesTableMarkupTrans
        ;

        if (salesTotals.parmMarkupTableAmountTaxCalculated())
            return salesTableMarkupTrans;

        if (querySalesTableMarkup)
        {
            if (!firstMarkup)
                salesTableMarkupTrans   = super();
            else
                firstMarkup             = false;

            if (salesTableMarkupTrans)
                return salesTableMarkupTrans;

            SalesTable salesTableMarkup = null;

            while (querySalesTableMarkup.next())
            {
                salesTableMarkup = this.queryGetSalesTable(querySalesTableMarkup);

                if (salesTableMarkup)
                {
                    this.initCursorMarkup(salesTableMarkup.TableId, salesTableMarkup.RecId);

                    salesTableMarkupTrans = super();

                    if (salesTableMarkupTrans)
                        return salesTableMarkupTrans;
                }
            }
            querySalesTableMarkup = null;
            return salesTableMarkupTrans;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupAutoOriginSource</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common getMarkupAutoOriginSource()
    {
        if (isAutoChargesSetupSequenceCompoundFeatureEnabled && markupCalcPerInvoiceForSummaryUpdate)
        {
            SalesTable markupAutoOriginSource;
            QueryRun querySalesTableMarkupQueryRun = this.queryBuildSalesTable();

            while (querySalesTableMarkupQueryRun.next())
            {
                markupAutoOriginSource = this.queryGetSalesTable(querySalesTableMarkupQueryRun).data();
            }

            if (markupAutoOriginSource) // Take the last one in the event of summary update.
            {
                return markupAutoOriginSource;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsParmTransContract::newFromSalesParmTable(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesTable</Name>
				<Source><![CDATA[
    public QueryRun queryBuildSalesTable()
    {
        return new QueryRun(salesParmTable.querySalesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetSalesTable</Name>
				<Source><![CDATA[
    public SalesTable queryGetSalesTable(QueryRun _queryRun)
    {
        SalesTable querySalesTable = null;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxation origin from the Imported Content per Item table.
    /// </summary>
    /// <returns>
    /// The taxation origin of the item in the sales line.
    /// </returns>
    public FITaxationOrigin_BR taxationOrigin_BR()
    {
        ImportedContentPerItem_BR   importedContentPerItem;

        if (salesTable.SalesType != SalesType::ReturnItem)
        {
            FiscalDocumentType_BR fiscalDocumentType = FiscalDocumentType_BR::findRecId(salesLine.salesLine_BR().FiscalDocumentType_BR);

            importedContentPerItem = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalDocumentType.fiscalEstablishment().FiscalEstablishmentId,
                                                                              fiscalDocumentType.FiscalDocumentModel,
                                                                              FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                              FiscalDocDirection_BR::Outgoing,
                                                                              this.invoiceDate(),
                                                                              CFOPTable_BR::find(salesLine.salesLine_BR().CFOPTable_BR).CFOPId,
                                                                              salesLine.ItemId);
        }

        if (importedContentPerItem)
        {
            return importedContentPerItem.TaxationOrigin;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur  transLineAmount()
    {
        AmountCur   transLineAmount;
        if (markupTrans.MarkupCategory == MarkupCategory::InterCompanyPercent)
        {
            transLineAmount = salesParmLine.salesLine().interCompanyLineAmount(this.transQty(), this.invoiceDate(), tax);
        }
        else
        {
            transLineAmount = salesParmLine.effectiveLineAmount();
        }

        return transLineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur  transLineAmountInclTax()
    {
        return salesParmLine.effectiveLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty    transQty()
    {
        return salesParmLine.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDetailsSalesTaxAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use a sales tax adjustment type.
    /// </summary>
    /// <returns>
    /// true if sales tax adjustment type should be used; otherwise, false.
    /// </returns>
    public boolean useDetailsSalesTaxAdjustmentType()
    {
        boolean useDetailSalesTaxAdjustmentType;

        // Detailed level sales tax adjustments only applies when the tax calculation uses sales tax adjustments.
        Debug::assert(this.useSalesTaxAdjustments());

        if (CustParameters::enableSingleLineTaxAdjustment() || TaxIntegrationAdjustment::isEnabledForTransaction(this.tableId(), this.recId()))
        {
            useDetailSalesTaxAdjustmentType = true;
        }
        else if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion() || salesParmTable.AllowLineLevelTaxAdjustments)
        {
            if (documentStatus == DocumentStatus::Invoice)
            {
                useDetailSalesTaxAdjustmentType = true;
            }
        }

        return useDetailSalesTaxAdjustmentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to use sales tax adjustments.
    /// </summary>
    /// <returns>
    ///  true if sales tax adjustments should be used; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Returns always true.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// A container used to pass various data between methods.
    /// </summary>
    /// <returns>
    /// A container containing various data.
    /// </returns>
    public container vatRegData_W()
    {
        VatDueDate_W           vatDate;
        DocumentDate           documentDate;
        PlCustVendName         custVendName;
        VATNum                 vatNum;
        Addressing             addressing;
        PlTaxPeriodPaymentCode taxPeriodPaymentCode;
        CzPostponeVAT          postponeVAT;
        IntraComVATDueDate_W   intraComVatDate;
        #EECountryRegionCodes

        if (salesParmTable.RecId)
        {
            vatDate         = salesParmTable.VatDueDate_W;

            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
            {
                documentDate    = salesParmTable.DocumentDate;
                postponeVAT     = salesParmTable.PostponeVAT && salesParmTable.getTotalLineAmount() < 0;
                intraComVatDate = NoYes::No;
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                taxPeriodPaymentCode = salesParmTable.TaxPeriodPaymentCode_PL;
                CustTable custTable  = CustTable::find(salesParmTable.InvoiceAccount);
                custVendName         = custTable.name();
                addressing           = custTable.address();
                if (salesTable.VATNum)
                {
                    vatNum = salesTable.VATNum;
                }
                else
                {
                    vatNum = custTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, salesParmTable.DocumentDate);
                }
            }
        }
        else
        {
            [ vatDate,
              documentDate,
              custVendName,
              vatNum,
              addressing,
              taxPeriodPaymentCode,
              postponeVAT,
              intraComVatDate] = this.tax().parmVatRegData_W();
        }

        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 postponeVAT,
                 intraComVatDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will get the documentstatus.
    /// </summary>
    /// <param name="_DocumentStatus">
    ///  The documentstatus to use.
    /// </param>
    /// <returns>
    ///  The DocumentStatus.
    /// </returns>
    public DocumentStatus parmDocumentStatus_W(DocumentStatus _documentStatus = documentStatus)
    {
        documentStatus = _documentStatus;
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document date of the transaction.
    /// </summary>
    /// <returns>
    ///  The document date.
    /// </returns>
    public DocumentDate documentDate()
    {
        return this.salesParmTable.DocumentDate ? this.salesParmTable.DocumentDate : this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesParmTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>RecId</c> of <c>SalesParmTable</c>.
    /// </summary>
    /// <returns><c>RecId</c> of <c>SalesParmTable</c>.</returns>
    public RefRecId getSalesParmTableRecId()
    {
        return salesParmTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides <c>SalesCalcTax_Sales</c> method deliveryDate().
    /// </summary>
    /// <returns>Delivery date of <c>SalesParmLine</c>.</returns>
    public DlvDate deliveryDate()
    {
        DlvDate deliveryDate;
        if (TaxDeliveryDatePickPackingSlipDateHelper::isFeatureEnabled())
        {
            deliveryDate = this.packingSlipDate();
        }

        // Delivery date may be null, it should pick the next priority TransDate.
        if (!deliveryDate)
        {
            deliveryDate = super();
        }
        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides <c>SalesCalcTax_Sales</c> method deliveryDateMarkup().
    /// </summary>
    /// <returns>Delivery date of <c>MarkupTrans</c>.</returns>
    public DlvDate deliveryDateMarkup()
    {
        DlvDate deliveryDate;

        // Markup on line, it should fellow its line's packing slip date.
        if (salesLine)
        {
            deliveryDate = this.deliveryDate();
        }
        // Markup on header, it should fellow the current <c>SalesParmTable</c> packing slip date.
        else if (TaxDeliveryDatePickPackingSlipDateHelper::isFeatureEnabled())
        {
            deliveryDate = this.packingSlipDate();
        }

        // Delivery date may be null, it should pick the next priority TransDate.
        if (!deliveryDate)
        {
            deliveryDate = super();
        }
        return deliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipDate</Name>
				<Source><![CDATA[
    protected DlvDate packingSlipDate()
    {
        DlvDate packingSlipDate;
        // When post packing slip, delivery date should pick the packing slip date.
        if (documentStatus == DocumentStatus::PackingSlip && salesParmTable.Transdate)
        {
            packingSlipDate = salesParmTable.Transdate;
        }
        // When invoice, users should select 'Packing Slip', delivery date should pick the packing slip date(users set it when post packing slip).
        else if (documentStatus == DocumentStatus::Invoice && SalesParmUpdate::find(salesParmLine.ParmId).SpecQty == SalesUpdate::PackingSlip)
        {
            packingSlipDate = TaxDeliveryDatePickPackingSlipDateHelper::getPackingSlipDateFromSalesParmLine(salesParmLine);
        }
        return packingSlipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldNotifyUsersWhenInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether to notify user to select packing slip date for quantity value when posting sales order invoice.
    /// </summary>
    /// <returns>
    /// true if users should be notified with warning when posting invoice; otherwise, false.
    /// </returns>
    protected boolean shouldNotifyUsersWhenInvoice()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>