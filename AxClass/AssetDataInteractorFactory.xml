<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDataInteractorFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Constructs <c>FormAmbiguousRefefrenceResolver</c> objects suitable for translating a partial fixed asset account or name
/// entered into a control into the expected value.
/// </summary>
public class AssetDataInteractorFactory extends DataInteractorFactory
{
    public static readonly AbsoluteFieldBinding PkFieldBinding = AbsoluteFieldBinding::construct(fieldStr(AssetTable, AssetId), tableStr(AssetTable));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructAmbiguousReferenceResolver</Name>
				<Source><![CDATA[
    public AmbiguousReferenceResolver constructAmbiguousReferenceResolver()
    {
        return AmbiguousReferenceResolver::construct(this.dataInteractorTarget(), AssetDataInteractorFactory::PkFieldBinding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingOrCreateResolver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Re-uses the last instance of <c>FormControlAmbiguousReferenceResolver</c> created for <param ref="_control"/>
    /// if it exists; otherwise, a new instance of <c>FormControlAmbiguousReferenceResolver</c> is created.
    /// </summary>
    /// <param name = "_control">The control on which contextual data entry is being performed.</param>
    /// <param name="_baseQuery">Custom query on which resolution queries will be based; optional.</param>
    /// <returns>The <c>AmbiguousReferenceResolver</c> instance.</returns>
    public static AmbiguousReferenceResolver useExistingOrCreateResolver(FormControl _control, Query _baseQuery = null)
    {
        if (_baseQuery)
        {
            // Currently, the useExistingOrCreate method will try to find a resolver in the following order: cached on the control,
            // data interactor factory, build based on passed parameters. This can cause a problem when a base query is passed on a control
            // bound to data/edts. The foundation will use the data interactor factory to spin up a resolver and throw away the base query.
            // Until that issue is resolved we manually construct a resolver whenever a base query is passed.
            return new FormControlAmbiguousReferenceResolver(_control, AssetDataInteractorFactory::PkFieldBinding, null, _baseQuery);
        }

        return FormControlAmbiguousReferenceResolver::useExistingOrCreate(_control, AssetDataInteractorFactory::PkFieldBinding, null, _baseQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceForControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the fixed asset account number or by
    /// mapping it to the fixed asset name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_control">The control on which contextual data entry is being performed.</param>
    /// <param name="_baseQuery">Custom query on which resolution queries will be based; optional.</param>
    /// <returns>The resolved value.</returns>
    public static str resolveAmbiguousReferenceForControl(FormControl _control, Query _baseQuery = null)
    {
        return AssetDataInteractorFactory::useExistingOrCreateResolver(_control, _baseQuery)
                .resolveAmbiguousReference(true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>