<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineMassUpdateDMFManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanLineMassUpdateDMFManager</c> class is responsible for managing the DMF import and export operations for mass updates.
/// </summary>
internal final class BudgetPlanLineMassUpdateDMFManager
{
    private BudgetPlanHeader planHeader;
    private BudgetPlanLayout planLayout;
    private const str BudgetPlanWorksheetEntityName = 'BudgetPlanWorksheetEntity';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBudgetPlanHeader</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BudgetPlanHeader parmBudgetPlanHeader(BudgetPlanHeader _planHeader = planHeader)
    {
        planHeader = _planHeader;
        return planHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanLayout</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public BudgetPlanLayout parmBudgetPlanLayout(BudgetPlanLayout _planLayout = planLayout)
    {
        planLayout = _planLayout;
        return planLayout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes from the <c>BudgetPLanHeader</c> record.
    /// </summary>
    internal protected void initFromBudgetPlanHeader()
    {
        select firstonly planLayout
            where planLayout.RecId == planHeader.Layout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapping</Name>
				<Source><![CDATA[
    private void createMapping(DMFDefinitionGroupEntity _dmfDefinitionGroupEntity, TableId _entityTableId, FieldName _fieldName, FieldLabel _fieldLabel)
    {
        DictField dictField = new DictField(_entityTableId, fieldName2id(_entityTableId, _fieldName));

        ttsbegin;

        DMFSourceXMLToEntityMap sourceXMLToEntityMap;

        select forupdate EntityField, XMLField from sourceXMLToEntityMap
            where sourceXMLToEntityMap.XMLField == _fieldLabel
                && sourceXMLToEntityMap.DefinitionGroup == _dmfDefinitionGroupEntity.DefinitionGroup
                && sourceXMLToEntityMap.Entity == _dmfDefinitionGroupEntity.Entity;

        sourceXMLToEntityMap.DefinitionGroup = _dmfDefinitionGroupEntity.DefinitionGroup;
        sourceXMLToEntityMap.Entity = _dmfDefinitionGroupEntity.Entity;
        sourceXMLToEntityMap.EntityField = _fieldName;
        sourceXMLToEntityMap.EntityFieldSQL = dictField.name(DbBackend::Sql);
        sourceXMLToEntityMap.XMLField = _fieldLabel;
        sourceXMLToEntityMap.FieldType = enum2str(dictField.baseType());
        sourceXMLToEntityMap.FieldSize = dictField.stringLen();

        if (!sourceXMLToEntityMap.RecId)
        {
            sourceXMLToEntityMap.insert();
        }
        else
        {
            sourceXMLToEntityMap.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateMapping</Name>
				<Source><![CDATA[
    private void generateMapping(DMFDefinitionGroupEntity _dmfDefinitionGroupEntity)
    {
        DMFEntity dmfEntity = DMFEntity::find(_dmfDefinitionGroupEntity.Entity);
        TableId entityTableId = tablename2id(dmfEntity.EntityTable);

        this.createMapping(_dmfDefinitionGroupEntity,
                            entityTableId,
                            fieldId2Name(entityTableId, fieldNum(BudgetPlanWorksheetStaging, LineNumber)),
                            fieldId2PName(entityTableId, fieldNum(BudgetPlanWorksheetStaging, LineNumber)));
        this.createMapping(_dmfDefinitionGroupEntity,
                            entityTableId,
                            fieldId2Name(entityTableId, fieldNum(BudgetPlanWorksheetStaging, DocumentNumber)),
                            fieldId2PName(entityTableId, fieldNum(BudgetPlanWorksheetStaging, DocumentNumber)));
        this.createMapping(_dmfDefinitionGroupEntity,
                            entityTableId,
                            fieldId2Name(entityTableId, fieldNum(BudgetPlanWorksheetStaging, Layout)),
                            fieldId2PName(entityTableId, fieldNum(BudgetPlanWorksheetStaging, Layout)));



        LanguageId currentUserLanguage = currentUserLanguage();
        BudgetPlanLayoutMapping budgetPlanLayoutMapping;

        while select budgetPlanLayoutMapping
            where budgetPlanLayoutMapping.Layout == planLayout.RecId
                && budgetPlanLayoutMapping.LanguageId == currentUserLanguage
                && budgetPlanLayoutMapping.InWorksheet == NoYes::Yes
        {
            this.createMapping(_dmfDefinitionGroupEntity, entityTableId, budgetPlanLayoutMapping.FieldName, budgetPlanLayoutMapping.FieldLabel);

            if (budgetPlanLayoutMapping.DescriptionFieldName != '')
            {
                this.createMapping(_dmfDefinitionGroupEntity, entityTableId, budgetPlanLayoutMapping.DescriptionFieldName, BudgetPlanLineMassUpdateTemplateManager::getDescriptionFieldName(budgetPlanLayoutMapping.ElementIndex));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the budget plan lines.
    /// </summary>
    internal protected void exportBudgetPlanLines()
    {
        DMFDefinitionGroup dmfDefinitionGroup;

        select firstonly DefinitionGroupName from dmfDefinitionGroup
            where dmfDefinitionGroup.RecId == planLayout.DMFExportDefinitionGroup;

        DMFDefinitionGroupEntity dmfDefinitionGroupEntity = BudgetPlanLineMassUpdateDMFManager::findDMFDefinitionGroupEntity(dmfDefinitionGroup.DefinitionGroupName);

        if (!dmfDefinitionGroupEntity)
        {
            throw error(strFmt("@Budget:MissingBudgetPlanLineMassUpdateDataDefinitionGroupEntity", dmfDefinitionGroup.DefinitionGroupName));
        }

        this.generateMapping(dmfDefinitionGroupEntity);
        this.updateQueryData(dmfDefinitionGroupEntity);

        try
        {
            DMFEntityExporter exporter = new DMFEntityExporter();
            SharedServiceUnitFileID fileId = exporter.exportToFile(
                dmfDefinitionGroupEntity.Entity,
                dmfDefinitionGroup.DefinitionGroupName,
                '',
                BudgetPlanningConstants::Excel,
                "@SYS6047",
                conNull(),
                curExt(),
                null,
                true,
                true);

            if (fileId != '')
            {
                this.sendFileToDestination(fileId);
            }
            else
            {
                // DMF execution failed and details were written to the execution log
                throw error("@CashManagement:DMFExportCallFailedToExecutionLog");
            }
        }
        catch
        {
            // DMF execution failed and details were written to the execution log
            throw error("@CashManagement:DMFExportCallFailedToExecutionLog");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToDestination</Name>
				<Source><![CDATA[
    private void sendFileToDestination(SharedServiceUnitFileID _fileId)
    {
        str downloadUrl = DMFDataPopulation::getAzureBlobReadUrl(str2Guid(_fileId));
        Filename filename = strFmt(BudgetPlanningConstants::placeHolder1, strFmt(BudgetPlanningConstants::MassUpdateGroupNameFormat, planHeader.DocumentNumber), BudgetPlanningConstants::ExcelExtension);
        System.IO.Stream stream = File::UseFileFromURL(downloadUrl);
        File::SendFileToUser(stream, filename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryData</Name>
				<Source><![CDATA[
    private void updateQueryData(DmfDefinitionGroupEntity _dmfDefinitionGroupEntity)
    {
        container queryData = _dmfDefinitionGroupEntity.QueryData;

        if (queryData == connull())
        {
            queryData = DMFUtil::getDefaultQueryForEntityV3(_dmfDefinitionGroupEntity.Entity, _dmfDefinitionGroupEntity.DefinitionGroup);
        }

        QueryRun queryRun = new QueryRun(queryData);
        Query query = queryRun.query();

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(BudgetPlanWorksheetEntity));
        SysQuery::findOrCreateRange(qbds, fieldNum(BudgetPlanWorksheetEntity, DocumentNumber)).value(queryValue(planHeader.DocumentNumber));

        queryRun = new QueryRun(query);
        queryData = queryRun.pack();

        ttsbegin;
        _dmfDefinitionGroupEntity.reread();
        _dmfDefinitionGroupEntity.selectForUpdate(true);
        _dmfDefinitionGroupEntity.QueryData = queryData;
        _dmfDefinitionGroupEntity.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDMFDefinitionGroupEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>DMFDefinitionGroupEntity</c> record in the given definition group for the Line active view record entity.
    /// </summary>
    /// <param name = "_definitionGroupName">The name if the definition group</param>
    /// <returns>the <c>DMFDefinitionGroupEntity</c> record if found, otherwise null</returns>
    internal static DMFDefinitionGroupEntity findDMFDefinitionGroupEntity(DMFDefinitionGroupName _definitionGroupName)
    {
        DMFDefinitionGroupEntity definitionGroupEntity;
        DMFEntity dmfEntity;

        select firstonly RecId, Entity, DefinitionGroup from definitionGroupEntity
            exists join dmfEntity
                where definitionGroupEntity.DefinitionGroup == _definitionGroupName
                    && dmfEntity.EntityName == definitionGroupEntity.Entity
                    && dmfEntity.TargetEntity == BudgetPlanWorksheetEntityName;

        return definitionGroupEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports the budget plan lines.
    /// </summary>
    /// <param name = "_uploadFileId">The FileId of the file that was uploaded.</param>
    /// <param name = "_isInBatch">A Boolean value that determines whether the <c>importBudgetPlanLines</c> method is called from batch.</param>
    internal protected void importBudgetPlanLines(SharedServiceUnitFileID _uploadFileId, boolean _isInBatch)
    {
        DMFDefinitionGroup dmfDefinitionGroup;

        select firstonly DefinitionGroupName from dmfDefinitionGroup
            where dmfDefinitionGroup.RecId == planLayout.DMFDefinitionGroup;

        DMFDefinitionGroupEntity dmfDefinitionGroupEntity = BudgetPlanLineMassUpdateDMFManager::findDMFDefinitionGroupEntity(dmfDefinitionGroup.DefinitionGroupName);
        DMFExecutionId executionId = DMFUtil::setupNewExecution(dmfDefinitionGroupEntity.DefinitionGroup);

        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanLineMassUpdateDialog));
        using (SysInstrumentationActivityContext budgetPlanMassUpdateImportContext = budgetPlanLogger.budgetPlanMassUpdate().importContext(planHeader.RecId, executionId))
        {
            this.generateMapping(dmfDefinitionGroupEntity);

            boolean executeTargetDuringInitialImport = !_isInBatch;

            DMFDefinitionGroupExecution execution = DMFDefinitionGroupExecution::find(dmfDefinitionGroupEntity.DefinitionGroup, dmfDefinitionGroupEntity.Entity, executionId, true);
            execution.FilePath = _uploadFileId;
            execution.ExecuteTargetStep = executeTargetDuringInitialImport;
            execution.update();

            DMFQuickImportExport::doPGImport(dmfDefinitionGroupEntity.DefinitionGroup, executionId, executeTargetDuringInitialImport);

            if (!executeTargetDuringInitialImport)
            {
                DMFDefinitionGroupExecution executionSourceToTarget;

                update_recordset executionSourceToTarget
                    setting IsSelected = NoYes::Yes
                        where executionSourceToTarget.ExecutionId == executionId;

                DMFWriteExecutionParameters executionParameters = DMFWriteExecutionParameters::construct();
                executionParameters.parmDefinitionGroup(dmfDefinitionGroupEntity.DefinitionGroup);
                executionParameters.parmsourceTarget(DMFSourceTarget::Source);
                executionParameters.parmSelectedData(NoYes::No);
                executionParameters.parmErrorStatus(NoYes::No);
                executionParameters.parmSkipFormNavigation(NoYes::Yes);

                DMFExecution dmfExecution = DMFExecution::find(executionId, true);
                Args args = new Args();
                args.record(dmfExecution);
                args.parmObject(executionParameters);
                args.parmEnum(NoYes::No);

                new MenuFunction(menuItemActionStr(DMFEntityWriterBatch), MenuItemType::Action).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a new instance of <c>BudgetPlanLineMassUpdateDMFManager</c>.
    /// </summary>
    /// <param name = "_planHeader">The <c>BudgetPlanHeader</c> record.</param>
    /// <returns>A new instance of <c>BudgetPlanLineMassUpdateDMFManager</c>.</returns>
    internal static BudgetPlanLineMassUpdateDMFManager newFromBudgetPlanHeader(BudgetPlanHeader _planHeader)
    {
        BudgetPlanLineMassUpdateDMFManager budgetPlanLineMassUpdateDMFManager = new BudgetPlanLineMassUpdateDMFManager();

        budgetPlanLineMassUpdateDMFManager.parmBudgetPlanHeader(_planHeader);
        budgetPlanLineMassUpdateDMFManager.initFromBudgetPlanHeader();

        return budgetPlanLineMassUpdateDMFManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a new instance of <c>BudgetPlanLineMassUpdateDMFManager</c>.
    /// </summary>
    /// <param name = "_budgetPlanLayoutRecId">The record Id of <c>BudgetPlanLayout</c> record.</param>
    /// <returns>A new instance of <c>BudgetPlanLineMassUpdateDMFManager</c>.</returns>
    internal static BudgetPlanLineMassUpdateDMFManager newFromBudgetPlanLayout(RefRecId _budgetPlanLayoutRecId)
    {
        BudgetPlanLineMassUpdateDMFManager budgetPlanLineMassUpdateDMFManager = new BudgetPlanLineMassUpdateDMFManager();
        BudgetPlanLayout budgetPlanLayout;

        select firstonly budgetPlanLayout
            where budgetPlanLayout.RecId == _budgetPlanLayoutRecId;

        budgetPlanLineMassUpdateDMFManager.parmBudgetPlanLayout(budgetPlanLayout);

        return budgetPlanLineMassUpdateDMFManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>