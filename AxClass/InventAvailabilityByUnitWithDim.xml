<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAvailabilityByUnitWithDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAvailabilityByUnitWithDim</c> class is a data transport object that
/// holds availability information together with the inventory dimensions
/// where the inventory is available.
/// </summary>
class InventAvailabilityByUnitWithDim implements SysPackable
{
    InventAvailabilityByUnit    availabilityByUnit;
    InventDim                   inventDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availabilityByUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the availability information.
    /// </summary>
    /// <returns>
    /// An <c>InventAvailabilityByUnit</c> object.
    /// </returns>
    public InventAvailabilityByUnit availabilityByUnit()
    {
        return availabilityByUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the object based on the specified parameters.
    /// </summary>
    /// <param name="_availabilityByUnit">
    ///     The inventory availability object.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimensions where the inventory is available.
    /// </param>
    protected void initialize(InventAvailabilityByUnit _availabilityByUnit, InventDim _inventDim)
    {
        availabilityByUnit = _availabilityByUnit;
        inventDim = _inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimensions where the inventory is available.
    /// </summary>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    public InventDim inventDim()
    {
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [availabilityByUnit.pack(), inventDim];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packed)
    {
        container packedAvailabilityByUnit;

        [packedAvailabilityByUnit, inventDim] = _packed;

        availabilityByUnit = InventAvailabilityByUnit::create(packedAvailabilityByUnit);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventAvailabilityByUnitWithDim construct()
    {
        return new InventAvailabilityByUnitWithDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventAvailabilityByUnitWithDim</c> class
    /// based on the container that holds a serialized <c>InventAvailabilityByUnitWithDim</c> object.
    /// </summary>
    /// <param name="_packed">
    /// The container that holds the serialized <c>InventAvailabilityByUnitWithDim</c> object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventAvailabilityByUnitWithDim</c> class.
    /// </returns>
    public static InventAvailabilityByUnitWithDim create(container _packed)
    {
        InventAvailabilityByUnitWithDim result = InventAvailabilityByUnitWithDim::construct();

        result.unpack(_packed);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventAvailabilityByUnitWithDim</c> class based on the specified parameters.
    /// </summary>
    /// <param name="_availabilityByUnit">
    /// The inventory availability object.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions where the inventory is available.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventAvailabilityByUnitWithDim</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if <paramref name="_availabilityByUnit" /> is not specified.
    /// </exception>
    public static InventAvailabilityByUnitWithDim newStandard(
        InventAvailabilityByUnit    _availabilityByUnit,
        InventDim                   _inventDim)
    {
        InventAvailabilityByUnitWithDim result = InventAvailabilityByUnitWithDim::construct();

        if (!_availabilityByUnit)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        result.initialize(_availabilityByUnit, _inventDim);

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>