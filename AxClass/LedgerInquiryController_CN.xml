<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInquiryController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class works as a controller for <c>LedgerGeneralLedgerReport</c>, <c>LedgerDetailDailyLedgerReport</c>
/// <c>LedgerDetailDailyLedgerTransReport</c> SSRS reports. Modifies reports' corresponding contracts.
/// </summary>
class LedgerInquiryController_CN extends SrsReportRunExtendedController_CN implements SrsReportRowCountable_CN, BatchRetryable
{
    Args        argsMain;
    QueryRun    queryRun;
    Query       ledgerTransactionList;
    boolean     ledgerTransFromMenu;

    LedgerInquiryType_CN    ledgerInquiryType;
    MainAccountNum          fromMainAccountNum;
    MainAccountNum          toMainAccountNum;
    FiscalYearName          fiscalYearName;
    PeriodName              fiscalPeriodName;
    container               packedDimensionExpressionHelper;

    LedgerGeneralLedgerContract_CN      ledgerGeneralLedgerContract;
    LedgerDetailDailyLedgerContract_CN  ledgerDetailDailyLedgerContract;
    LedgerTransactionListContract_CN    ledgerTransactionListContract;

    LedgerJournalTrans                  ledgerJournalTrans;

    const str ReportCaption = 'ReportCaption'; // The RDL report parameter name
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryRangeValue</Name>
				<Source><![CDATA[
    private str getQueryRangeValue(
        Query   _query,
        int     _tableNum,
        int     _fieldNum)
    {
        const str Quote = '"';
        const str Space = ' ';

        QueryBuildDataSource    queryBuildDataSourceLocal;
        QueryBuildRange         queryBuildRangeLocal;

        TempStr queryRangeValue;

        queryBuildDataSourceLocal   = _query.dataSourceTable(_tableNum);
        queryBuildRangeLocal        = SysQuery::findOrCreateRange(queryBuildDataSourceLocal, _fieldNum);

        if (queryBuildRangeLocal)
        {
            queryRangeValue = queryBuildRangeLocal.value();

            queryRangeValue = strRem(queryRangeValue, Quote);
            queryRangeValue = strRem(queryRangeValue, Space);

            return queryRangeValue;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rows count of the report primary query's result.
    /// </summary>
    /// <param name="_query">
    /// Primary query
    /// </param>
    /// <returns>
    /// A <c>Container</c> with first element being rows count and second element being a message that may be shown.
    /// </returns>
    public container getRowsCount(Query _query)
    {
        int             rowsCount;
        SRSMaxRow_CN    maxRows = SystemParameters::find().SRSMaxRow_CN;

        rowsCount = QueryRun::getQueryRowCount(_query, maxRows + 1);

        //The output rows is over the allowed maximum rows of SSRS reports, please increase the value in the System parameters and run the report again.
        return [rowsCount, "@GLS220075"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportRowCountable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the result of the srs report row countable.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SrsReportRowCountable_CN</c> class.
    /// </returns>
    protected SrsReportRowCountable_CN getSrsReportRowCountable()
    {
        // the final query is based on query contract directly, which is not rdp contract
        // then the controller itself shall be the owner for doing this
        return this as SrsReportRowCountable_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the args.
    /// </summary>
    /// <param name="_args">
    /// The objects and parameters got from the form.
    /// </param>
    void initArgs(Args _args)
    {
        FormRun     formRun;

        argsMain = _args;

        if (argsMain && argsMain.caller())
        {
            if (_args.parmEnumType() == enumNum(LedgerInquiryType_CN))
            {
                ledgerInquiryType = _args.parmEnum();
                switch (ledgerInquiryType)
                {
                    case LedgerInquiryType_CN::GeneralLedger:
                        [fromMainAccountNum, toMainAccountNum] = argsMain.caller().getMainAccountParameters();
                        [fiscalPeriodName, fiscalYearName] = argsMain.caller().getFiscalPeriodNameAndYearName();
                        packedDimensionExpressionHelper = argsMain.caller().getPackedDimensionExpressionBuilderHelper();
                        queryRun = argsMain.caller().queryRunGL();
                        this.parmEnableRowsCountChecker(false);
                        break;
                    case LedgerInquiryType_CN::DailyLedger:
                    case LedgerInquiryType_CN::DetailLedger:
                        [fromMainAccountNum, toMainAccountNum] = argsMain.caller().getMainAccountParameters();
                        [fiscalPeriodName, fiscalYearName] = argsMain.caller().getFiscalPeriodNameAndYearName();
                        packedDimensionExpressionHelper = argsMain.caller().getPackedDimensionExpressionBuilderHelper();
                        queryRun = argsMain.caller().queryRunDaily();
                        this.parmEnableRowsCountChecker(false);
                        break;
                    case LedgerInquiryType_CN::LedgerTransaction:
                        formRun = argsMain.caller();
                        if (formRun.args().dataset() == tableNum(LedgerJournalTrans))
                        {
                            //Call from LedgerJournalTransDaily
                            ledgerTransFromMenu = false;
                            ledgerJournalTrans = formRun.args().record();
                        }
                        else
                        {
                            //From menu item
                            ledgerTransFromMenu = true;
                            queryRun = argsMain.caller().queryRunLedgerTransVoucher_CN();
                        }

                        this.parmEnableRowsCountChecker(true);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerInquiryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the EnumType LedgerInquiryType_CN.
    /// </summary>
    /// <returns>
    /// The enum value got from the caller.
    /// </returns>
    public LedgerInquiryType_CN parmLedgerInquiryType()
    {
        return ledgerInquiryType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the form query to the report query.
    /// </summary>
    protected void prePromptModifyContract()
    {
        Query       ledgerInquiryReportQuery;
        QueryFilter queryFilter;
        str         queryRangeValueLocal;

        SrsReportRdlDataContract    srsReportRdlDataContract;

        const Counter DefaultLines = 22; // The default max number of lines in one page of report.

        //Sets the ledgerDetailDailyReportContract with information from query initialized by Detail ledger form
        //or Daily ledger form.
        void ledgerDailyDetailLedgerData()
        {
            ledgerDetailDailyLedgerContract.parmPeriodContract().parmPeriodName(fiscalPeriodName);
            ledgerDetailDailyLedgerContract.parmPeriodContract().parmPeriodYearName(fiscalYearName);
        }

        switch (ledgerInquiryType)
        {
            case LedgerInquiryType_CN::GeneralLedger:
                //Sets the ledgerGeneralLedgerContract with information from query initialized by General ledger form.
                ledgerGeneralLedgerContract = this.parmReportContract().parmRdpContract();

                ledgerInquiryReportQuery = queryRun.query();

                ledgerGeneralLedgerContract.parmPeriodContract().parmPeriodName(fiscalPeriodName);
                ledgerGeneralLedgerContract.parmPeriodContract().parmPeriodYearName(fiscalYearName);

                ledgerGeneralLedgerContract.parmFromMainAccountNum(fromMainAccountNum);
                ledgerGeneralLedgerContract.parmToMainAccountNum(toMainAccountNum);
                ledgerGeneralLedgerContract.parmMaxLines(DefaultLines);
                ledgerGeneralLedgerContract.parmLedgerPreprintLayoutCode(LedgerPreprint_CN::TW201);
                ledgerGeneralLedgerContract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::DefaultCurrency);
                ledgerGeneralLedgerContract.parmPreprint(false);
                ledgerGeneralLedgerContract.parmPackedDimensionExpressionHelper(packedDimensionExpressionHelper);
                // General ledger
                this.parmDialogCaption("@SYS24097");
                break;
            case LedgerInquiryType_CN::DetailLedger:
                ledgerDetailDailyLedgerContract = this.parmReportContract().parmRdpContract();
                ledgerInquiryReportQuery = queryRun.query();
                ledgerDailyDetailLedgerData();

                ledgerDetailDailyLedgerContract.parmFromMainAccountNum(fromMainAccountNum);
                ledgerDetailDailyLedgerContract.parmToMainAccountNum(toMainAccountNum);
                ledgerDetailDailyLedgerContract.parmIsDetail(true);
                ledgerDetailDailyLedgerContract.parmMaxLines(DefaultLines);
                ledgerDetailDailyLedgerContract.parmLedgerPreprintDetailLayoutCode(LedgerPreprintDetail_CN::TW213);
                ledgerDetailDailyLedgerContract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::DefaultCurrency);
                ledgerDetailDailyLedgerContract.parmPreprint(false);
                ledgerDetailDailyLedgerContract.parmPackedDimensionExpressionHelper(packedDimensionExpressionHelper);
                srsReportRdlDataContract = this.parmReportContract().parmRdlContract();
                //Detail ledger
                srsReportRdlDataContract.setValue(ReportCaption, "@GLS54605");
                this.parmDialogCaption("@GLS54605");
                break;
            case LedgerInquiryType_CN::DailyLedger:
                ledgerDetailDailyLedgerContract = this.parmReportContract().parmRdpContract();
                ledgerInquiryReportQuery = queryRun.query();
                ledgerDailyDetailLedgerData();

                ledgerDetailDailyLedgerContract.parmFromMainAccountNum(fromMainAccountNum);
                ledgerDetailDailyLedgerContract.parmToMainAccountNum(toMainAccountNum);
                ledgerDetailDailyLedgerContract.parmIsDetail(false);
                ledgerDetailDailyLedgerContract.parmMaxLines(DefaultLines);
                ledgerDetailDailyLedgerContract.parmLedgerPreprintDetailLayoutCode(LedgerPreprintDetail_CN::TW213);
                ledgerDetailDailyLedgerContract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::DefaultCurrency);
                ledgerDetailDailyLedgerContract.parmPreprint(false);
                ledgerDetailDailyLedgerContract.parmPackedDimensionExpressionHelper(packedDimensionExpressionHelper);
                srsReportRdlDataContract = this.parmReportContract().parmRdlContract();
                //Daily ledger
                srsReportRdlDataContract.setValue(ReportCaption, "@GLS54604");
                this.parmDialogCaption("@GLS54604");
                break;
            case LedgerInquiryType_CN::LedgerTransaction:
                //Sets the ledgerTransactionList with information from query initialized by TransactionVoucher form.
                ledgerTransactionListContract = this.parmReportContract().parmRdpContract();
                ledgerTransactionListContract.parmFormInitFromMenu(ledgerTransFromMenu);

                ledgerTransactionList = this.getFirstQuery();
                if (!ledgerTransactionList)
                {
                    ledgerTransactionList = new Query(queryStr(LedgerTransactionList_CN));
                }

                if (ledgerTransFromMenu)
                {
                    ledgerInquiryReportQuery = queryRun.query();

                    queryRangeValueLocal = this.getQueryRangeValue(
                        ledgerInquiryReportQuery,
                        tableNum(GeneralJournalEntry),
                        fieldNum(GeneralJournalEntry, AccountingDate));
                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(GeneralJournalEntry)),
                        fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRangeValueLocal);

                    queryRangeValueLocal = this.getQueryRangeValue(
                        ledgerInquiryReportQuery,
                        tableNum(GeneralJournalEntry),
                        fieldNum(GeneralJournalEntry, JournalNumber));
                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(GeneralJournalEntry)),
                        fieldNum(GeneralJournalEntry, JournalNumber)).value(queryRangeValueLocal);

                    queryRangeValueLocal = this.getQueryRangeValue(
                        ledgerInquiryReportQuery,
                        tableNum(GeneralJournalEntry_W),
                        fieldNum(GeneralJournalEntry_W, Voucher_CN));
                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(GeneralJournalEntry_W)),
                        fieldNum(GeneralJournalEntry_W, Voucher_CN)).value(queryRangeValueLocal);

                    queryRangeValueLocal = this.getQueryRangeValue(
                        ledgerInquiryReportQuery,
                        tableNum(MainAccount),
                        fieldNum(MainAccount, MainAccountId));
                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(MainAccount)),
                        fieldNum(MainAccount, MainAccountId)).value(queryRangeValueLocal);

                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(MainAccount)),
                        fieldNum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));

                    queryRangeValueLocal = this.getQueryRangeValue(
                        ledgerInquiryReportQuery,
                        tableNum(SubledgerVoucherGeneralJournalEntry),
                        fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry)),
                        fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(queryRangeValueLocal);

                    if (ledgerInquiryReportQuery.queryFilterCount() != 0)
                    {
                        queryFilter = ledgerInquiryReportQuery.queryFilter(1);
                        SysQuery::findOrCreateRange(
                            ledgerTransactionList.dataSourceTable(tableNum(LedgerVoucherType_CN)),
                            fieldNum(LedgerVoucherType_CN, Id)).value(queryFilter.value());
                    }
                }
                else
                {
                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(GeneralJournalEntry)),
                        fieldNum(GeneralJournalEntry, AccountingDate)).value(queryValue(ledgerJournalTrans.TransDate));

                    SysQuery::findOrCreateRange(
                        ledgerTransactionList.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry)),
                        fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(queryValue(ledgerJournalTrans.Voucher));
                }

                ledgerTransactionListContract.parmMaxLines(DefaultLines);
                ledgerTransactionListContract.parmLedgerPreprintDetailCode(LedgerPreprintDetail_CN::TW213);
                ledgerTransactionListContract.parmLedgerPrintLayoutCurrency(LedgerPrintLayoutCurrency_CN::DefaultCurrency);
                ledgerTransactionListContract.parmPreprint(false);
                // Transaction list
                this.parmDialogCaption("@GLS55038");
                break;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call different report layouts when receiving different parameters.
    /// </summary>
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract    srsReportRdlDataContract;

        FiscalCalendarYear          fiscalCalendarYearLocal;
        FiscalCalendarPeriod        fiscalCalendarPeriodLocal;

        TempStr TimeSpanString;

        Query   ledgerTransactionListData;

        // The following consts are the RDL parameters name used in report.
        const str ParameterYearString = 'YearString';
        const str ParameterTimeSpanString = 'TimeSpanString';
        const str ParameterStartDate = 'StartDate';

        super();

        srsReportRdlDataContract = this.parmReportContract().parmRdlContract();

        switch (ledgerInquiryType)
        {
            case LedgerInquiryType_CN::GeneralLedger:
                ledgerGeneralLedgerContract = this.parmReportContract().parmRdpContract();
                select firstOnly StartDate from fiscalCalendarPeriodLocal
                    where fiscalCalendarPeriodLocal.Name == ledgerGeneralLedgerContract.parmPeriodContract().parmPeriodName()
                    exists join fiscalCalendarYearLocal
                        where fiscalCalendarYearLocal.Name              == ledgerGeneralLedgerContract.parmPeriodContract().parmPeriodYearName()
                            && fiscalCalendarYearLocal.FiscalCalendar   == CompanyInfoHelper::fiscalCalendarRecId()
                            && fiscalCalendarYearLocal.RecId            == fiscalCalendarPeriodLocal.FiscalCalendarYear;
                // Sets parameter YearString
                srsReportRdlDataContract.setValue(ParameterYearString, int2str(year(fiscalCalendarPeriodLocal.StartDate)));

                // Decides which layout to use according to the parameter.
                if (ledgerGeneralLedgerContract.parmPreprint() == true)
                {
                    switch (ledgerGeneralLedgerContract.parmLedgerPreprintLayoutCode())
                    {
                        case LedgerPreprint_CN::TR201:
                            // Modifies the caption of report to "General ledger - TR201"
                            this.parmDialogCaption(strFmt('%1 - %2', "@SYS24097", "@GLS54561"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerGeneralLedger_CN, TR201));
                            break;
                        case LedgerPreprint_CN::TW201:
                            // Modifies the caption of report to "General ledger - TW201"
                            this.parmDialogCaption(strFmt('%1 - %2', "@SYS24097", "@GLS54566"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerGeneralLedger_CN, TW201));
                            break;
                    }
                }
                else
                {
                    switch (ledgerGeneralLedgerContract.parmLedgerPrintLayoutCurrency())
                    {
                        case LedgerPrintLayoutCurrency_CN::DefaultCurrency:
                            // Modifies the caption of report to "General ledger - Default currency"
                            this.parmDialogCaption(strFmt('%1 - %2', "@SYS24097", "@SYS23938"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerGeneralLedger_CN, DefaultCurrency));
                            break;
                        case LedgerPrintLayoutCurrency_CN::ForeignCurrency:
                            // Modifies the caption of report to "General ledger - Foreign currency"
                            this.parmDialogCaption(strFmt('%1 - %2', "@SYS24097", "@GLS54987"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerGeneralLedger_CN, ForeignCurrency));
                            break;
                    }
                }
                break;
            case LedgerInquiryType_CN::DetailLedger:
            case LedgerInquiryType_CN::DailyLedger:
                ledgerDetailDailyLedgerContract = this.parmReportContract().parmRdpContract();
                select firstOnly StartDate, EndDate from fiscalCalendarPeriodLocal
                    where fiscalCalendarPeriodLocal.Name == ledgerDetailDailyLedgerContract.parmPeriodContract().parmPeriodName()
                    exists join fiscalCalendarYearLocal
                        where fiscalCalendarYearLocal.Name              == ledgerDetailDailyLedgerContract.parmPeriodContract().parmPeriodYearName()
                            && fiscalCalendarYearLocal.FiscalCalendar   == CompanyInfoHelper::fiscalCalendarRecId()
                            && fiscalCalendarYearLocal.RecId            == fiscalCalendarPeriodLocal.FiscalCalendarYear;

                // Sets parameter YearString
                srsReportRdlDataContract.setValue(ParameterYearString, int2str(year(fiscalCalendarPeriodLocal.StartDate)));

                srsReportRdlDataContract.setValue(ParameterStartDate, fiscalCalendarPeriodLocal.StartDate);

                // Decides which layout to use according to the parameter.
                if (ledgerDetailDailyLedgerContract.parmPreprint() == true)
                {
                    switch (ledgerDetailDailyLedgerContract.parmLedgerPreprintDetailLayoutCode())
                    {
                        case LedgerPreprintDetail_CN::TR211:
                            // According to the caller form, modifies the caption of report to "Detail ledger - TR211" or "Daily ledger - TR211"
                            this.parmDialogCaption(strFmt('%1 - %2', srsReportRdlDataContract.getValue(ReportCaption), "@GLS54563"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerDetailDailyLedger_CN, TR211));
                            break;
                        case LedgerPreprintDetail_CN::TW211:
                            // According to the caller form, modifies the caption of report to "Detail ledger - TW211" or "Daily ledger - TW211"
                            this.parmDialogCaption(strFmt('%1 - %2', srsReportRdlDataContract.getValue(ReportCaption), "@GLS54567"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerDetailDailyLedger_CN, TW211));
                            break;
                        case LedgerPreprintDetail_CN::TW213:
                            // According to the caller form, modifies the caption of report to "Detail ledger - TW213" or "Daily ledger - TW213"
                            this.parmDialogCaption(strFmt('%1 - %2', srsReportRdlDataContract.getValue(ReportCaption), "@GLS54568"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerDetailDailyLedger_CN, TW213));
                            break;
                    }
                }
                else
                {
                    switch (ledgerDetailDailyLedgerContract.parmLedgerPrintLayoutCurrency())
                    {
                        case LedgerPrintLayoutCurrency_CN::DefaultCurrency:
                            // According to the caller form, modifies the caption of report to "Detail ledger - Default currency" or "Daily ledger - Default currency"
                            this.parmDialogCaption(strFmt('%1 - %2', srsReportRdlDataContract.getValue(ReportCaption), "@SYS23938"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerDetailDailyLedger_CN, DefaultCurrency));
                            break;
                        case LedgerPrintLayoutCurrency_CN::ForeignCurrency:
                            // According to the caller form, modifies the caption of report to "Detail ledger - Foreign currency" or "Daily ledger - Foreign currency"
                            this.parmDialogCaption(strFmt('%1 - %2', srsReportRdlDataContract.getValue(ReportCaption), "@GLS54987"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerDetailDailyLedger_CN, ForeignCurrency));
                            break;
                    }
                }
                break;
            case LedgerInquiryType_CN::LedgerTransaction:
                ledgerTransactionListContract   = this.parmReportContract().parmRdpContract();
                ledgerTransactionListData       = this.getFirstQuery();

                TimeSpanString  = any2str(this.getQueryRangeValue(ledgerTransactionListData,
                                                                  tableNum(GeneralJournalEntry),
                                                                  fieldNum(GeneralJournalEntry, AccountingDate)));
                // Sets parameter TimeSpanString
                srsReportRdlDataContract.setValue(ParameterTimeSpanString, TimeSpanString);
                // Decides which layout to use according to the parameter.
                if (ledgerTransactionListContract.parmPreprint() == true)
                {
                    switch (ledgerTransactionListContract.parmLedgerPreprintDetailCode())
                    {
                        case LedgerPreprintDetail_CN::TR211:
                            // Modifies the caption of report to "Transaction list - TR211"
                            this.parmDialogCaption(strFmt('%1 - %2', "@GLS55038", "@GLS54563"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerTransactionList_CN, TR211));
                            break;
                        case LedgerPreprintDetail_CN::TW211:
                            // Modifies the caption of report to "Transaction list - TW211"
                            this.parmDialogCaption(strFmt('%1 - %2', "@GLS55038", "@GLS54567"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerTransactionList_CN, TW211));
                            break;
                        case LedgerPreprintDetail_CN::TW213:
                            // Modifies the caption of report to "Transaction list - TW213"
                            this.parmDialogCaption(strFmt('%1 - %2', "@GLS55038", "@GLS54568"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerTransactionList_CN, TW213));
                            break;
                    }
                }
                else
                {
                    switch (ledgerTransactionListContract.parmLedgerPrintLayoutCurrency())
                    {
                        case LedgerPrintLayoutCurrency_CN::DefaultCurrency:
                            // Modifies the caption of report to "Transaction list - Default currency"
                            this.parmDialogCaption(strFmt('%1 - %2', "@GLS55038", "@SYS23938"));
                                this.parmReportContract().parmReportName(ssrsReportStr(LedgerTransactionList_CN, DefaultCurrency));
                            break;
                        case LedgerPrintLayoutCurrency_CN::ForeignCurrency:
                            // Modifies the caption of report to "Transaction list - Foreign currency"
                            this.parmDialogCaption(strFmt('%1 - %2', "@GLS55038", "@GLS54987"));
                            this.parmReportContract().parmReportName(ssrsReportStr(LedgerTransactionList_CN, ForeignCurrency));
                            break;
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
        str     queryRangeValue;
        Query   ledgerTransactionListData;

        ret = super();
        if (ledgerInquiryType == LedgerInquiryType_CN::LedgerTransaction)
        {
            ledgerTransactionListData = this.getFirstQuery();
            queryRangeValue = this.getQueryRangeValue(
                ledgerTransactionListData,
                tableNum(GeneralJournalEntry),
                fieldNum(GeneralJournalEntry, AccountingDate));
            if (!queryRangeValue)
            {
                // Date must be entered
                ret = checkFailed(strFmt("@SYS39376", "@SYS80056"));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls methods in a certain sequence.
    /// </summary>
    /// <param name="_args">
    /// The args got from form object
    /// </param>
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00012, funcName());

        LedgerInquiryController_CN  ledgerInquiryController;
        LedgerInquiryType_CN        ledgerInquiry;

        ledgerInquiryController = new LedgerInquiryController_CN();
        ledgerInquiryController.initArgs(_args);
        ledgerInquiry = ledgerInquiryController.parmLedgerInquiryType();
        switch (ledgerInquiry)
        {
            case LedgerInquiryType_CN::GeneralLedger:
                ledgerInquiryController.parmReportName(ssrsReportStr(LedgerGeneralLedger_CN, DefaultCurrency));
                break;
            case LedgerInquiryType_CN::DetailLedger:
            case LedgerInquiryType_CN::DailyLedger:
                ledgerInquiryController.parmReportName(ssrsReportStr(LedgerDetailDailyLedger_CN, DefaultCurrency));
                break;
            case LedgerInquiryType_CN::LedgerTransaction:
                ledgerInquiryController.parmReportName(ssrsReportStr(LedgerTransactionList_CN, DefaultCurrency));
                break;
        }

        ledgerInquiryController.parmArgs(_args);
        ledgerInquiryController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>