<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookOriginalDocuments</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetBookOriginalDocuments
{
    AssetTrans assetTrans;
    // <GIN>
    AssetGroupTrans_IN assetGroupTrans;
    // </GIN>
    TmpLedgerBase tmpLedgerBase;
    Integer numTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes the AssetBookOriginalDocuments object.
    /// </summary>
    /// <param name = "_common">AssetTrans or AssetGroupTrans_IN record</param>
    public void new(Common _common)
    {
        if (! _common)
        {
            throw error(Error::missingRecord(funcname()));
        }

        switch (_common.TableId)
        {
            case tablenum(AssetTrans) :
                assetTrans = _common;
                break;

            // <GIN>
            case tableNum(AssetGroupTrans_IN) :
                if (AssetParameters::checkAssetParameters_IN())
                {
                    assetGroupTrans = _common;
                }
                break;
            // </GIN>

            default :
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>relations</Name>
				<Source><![CDATA[
    public TmpLedgerBase relations()
    {
        return tmpLedgerBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocument</Name>
				<Source><![CDATA[
    private void insertDocument(OriginalDocument    _originalDocument,
                    tableId             _recordTableId,
                    recId               _recordRecId,
                    SysModule           _module,
                    Amount              _amount,
                    str 30              _id,
                    str 30              _idName,
                    str 30              _transText)
    {
        if (_recordTableId && _recordRecId)
        {
            select tmpLedgerBase
            where tmpLedgerBase.RecordTableId   == _recordTableId   &&
                  tmpLedgerBase.RecordRecId     == _recordRecId;

            if (! tmpLedgerBase)
            {
                tmpLedgerBase.clear();
                tmpLedgerBase.Counter           = numTrans;
                tmpLedgerBase.OriginalDocument  = _originalDocument;
                tmpLedgerBase.RecordTableId     = _recordTableId;
                tmpLedgerBase.RecordRecId       = _recordRecId;
                tmpLedgerBase.Module            = _module;
                tmpLedgerBase.Amount            = _amount;
                tmpLedgerBase.Id                = _id;
                tmpLedgerBase.IdName            = _idName;
                tmpLedgerBase.TransText         = _transText;
                tmpLedgerBase.insert();
                numTrans++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromAssetTrans</Name>
				<Source><![CDATA[
    private void findFromAssetTrans()
    {
        LedgerJournalTrans    ledgerJournalTrans;
        LedgerJournalTable    ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTransAsset;

        if (assetTrans)
        {
            select firstonly RecId, JournalNum, AmountCurCredit, AmountCurDebit, Txt from ledgerJournalTrans
                where ledgerJournalTrans.TransDate  == assetTrans.TransDate &&
                      ledgerJournalTrans.Voucher  == assetTrans.Voucher;

            if (ledgerJournalTrans)
            {
                select firstonly ledgerJournalTransAsset
                    where ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId;

                select firstonly TableId, RecId from ledgerJournalTable
                    where ledgerJournalTable.Journalnum == ledgerJournalTrans.JournalNum;

                AmountMST amount = ledgerJournalTrans.AmountCurDebit ? ledgerJournalTrans.AmountCurDebit : (-ledgerJournalTrans.AmountCurCredit);

                this.insertDocument(OriginalDocument::Journal,
                                ledgerJournalTable.TableId,
                                ledgerJournalTable.RecId,
                                SysModule::FixedAssets,
                                amount,
                                ledgerJournalTransAsset.AssetId,
                                ledgerJournalTransAsset.BookId,
                                ledgerJournalTrans.Txt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all the transactions belonging to the selected voucher and date.
    /// </summary>
    public void findRelations()
    {
        // <GIN>
        boolean isDepIncomeTaxActEnabled = AssetParameters::isDepreciationIncomeTaxActEnable_IN();
        AssetBook assetBook;
        AssetGroupInformation_IN assetGroupInformation = AssetGroupInformation_IN::find(assetGroupTrans.AssetGroupInformation);
        // </GIN>

        tmpLedgerBase = null;

        // <GIN>
        if (isDepIncomeTaxActEnabled)
        {
            assetBook = AssetBook::find(assetGroupTrans.BookId,
                                        assetGroupTrans.AssetId);
        }

        if (isDepIncomeTaxActEnabled
            && (assetBook.AssetGroupDepreciation_IN
                || assetGroupInformation.TransType == AssetTransType::Depreciation
                || assetGroupInformation.TransType == AssetTransType::DepreciationAdj))
        {
            this.findFromAssetTrans_IN();
        }
        else
        {
            // </GIN>
            this.findFromAssetTrans();
            // <GIN>
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFromAssetTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find transaction values from <c>AssetDepBookTrans_IN</c> to be inserted into the document.
    /// </summary>
    private void findFromAssetTrans_IN()
    {
        Ledger    assetDepBookJournalTrans;
        LedgerJournalTrans    ledgerJournalTrans;
        LedgerJournalTable    ledgerJournalTable;
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        AssetGroupInformation_IN    assetGroupInformation = AssetGroupInformation_IN::find(assetGroupTrans.AssetGroupInformation);

        if (assetTrans)
        {
            select firstonly RecId, Journalnum from ledgerJournalTrans
                where ledgerJournalTrans.TransDate  == assetGroupInformation.TransDate &&
                      ledgerJournalTrans.Voucher  == assetGroupTrans.Voucher;

            if (ledgerJournalTrans)
            {
                select firstonly ledgerJournalTransAsset
                    where ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId;

                select firstonly TableId, RecId from ledgerJournalTable
                    where ledgerJournalTable.Journalnum == ledgerJournalTrans.Journalnum;

                this.insertDocument(OriginalDocument::Journal,
                                ledgerJournalTable.TableId,
                                ledgerJournalTable.RecId,
                                SysModule::FixedAssets,
                                assetGroupInformation.AmountMST,
                                ledgerJournalTransAsset.AssetId,
                                ledgerJournalTransAsset.BookId,
                                assetGroupInformation.Txt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>show</Name>
				<Source><![CDATA[
    public void show(TmpLedgerBase _showOriginal)
    {
        Common          common;
        DictTable       dictTable;

        Args            args = new Args();
        FormRun         showOriginalForm;

        args.caller(this);

        if (_showOriginal)
        {
            dictTable   = new DictTable(_showOriginal.RecordTableId);
            common      = dictTable.makeRecord();
            args.record(common);

            select firstonly common
                where common.RecId== _showOriginal.RecordRecId;

            args.name(formstr(LedgerJournalTable));

            showOriginalForm = classfactory.formRunClass(args);
            showOriginalForm.init();
            showOriginalForm.run();
            showOriginalForm.wait();
        }
        else
        {
            throw error("@SYS27407");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>