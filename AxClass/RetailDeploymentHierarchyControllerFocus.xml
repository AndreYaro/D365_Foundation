<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDeploymentHierarchyControllerFocus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Focus controller for hierarchy viewer.
/// </summary>
class RetailDeploymentHierarchyControllerFocus extends RetailDeploymentHierarchyController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEPOSFromSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new child nodes under an EPOS node from search.
    /// </summary>
    /// <param name="_node">
    /// The parent node.
    /// </param>
    /// <param name="_searchStr">
    /// The search string.
    /// </param>
    protected void addEPOSFromSearch(RetailDeploymentHierarchyNode _node, str 52 _searchStr)
    {
        RetailDeploymentPOSRegisters epoS;
        RetailDeploymentHierarchyNode contextNode;
        RetailDeploymentHierarchyNodeType contextType;

        RetailDeploymentHierarchyNode newNode;

        contextNode = this.getSearchContext();
        contextType = contextNode.parmNodeType();

        switch (contextType)
        {
            case RetailDeploymentHierarchyNodeType::ChannelDB :
                while select Name, RetailChannelDatabaseProfiles, RecId from epoS
                    order by epoS.Name
                    where epoS.RetailChannelDatabaseProfiles == contextNode.parmRefRecId() && epoS.Name like _searchStr
                {
                    newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), epoS.RecId, epoS.Name);
                    this.insertNewNodeAndUpdateParent(newNode, _node);
                }
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService :
                while select Name, RetailDeploymentRTSProfile, RecId from epoS
                    order by epoS.Name
                    where epoS.RetailDeploymentRTSProfile == contextNode.parmRefRecId() && epoS.Name like _searchStr
                {
                    newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), epoS.RecId, epoS.Name);
                    this.insertNewNodeAndUpdateParent(newNode, _node);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMPOSFromSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new child nodes under an MPOS node from search.
    /// </summary>
    /// <param name="_node">
    /// The parent node.
    /// </param>
    /// <param name="_searchStr">
    /// The search string.
    /// </param>
    protected void addMPOSFromSearch(RetailDeploymentHierarchyNode _node, str 52 _searchStr)
    {
        RetailModernPOSProfile mpoS;
        RetailDeploymentHierarchyNode contextNode;
        RetailDeploymentHierarchyNodeType contextType;

        RetailDeploymentHierarchyNode newNode;

        contextNode = this.getSearchContext();
        contextType = contextNode.parmNodeType();

        //retail server is only context
        while select Name, RecId from mpoS
            order by mpoS.Name
            where ( mpoS.RetailServerServiceProfile_HQ == contextNode.parmRefRecId() )  && mpoS.Name like _searchStr
        {
            newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), mpoS.RecId, mpoS.Name);
            this.insertNewNodeAndUpdateParent(newNode, _node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRetailServerFromSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new child nodes under a Retail Server node from search.
    /// </summary>
    /// <param name="_node">
    /// The parent node.
    /// </param>
    /// <param name="_searchStr">
    /// The search string.
    /// </param>
    protected void addRetailServerFromSearch(RetailDeploymentHierarchyNode _node, str 52 _searchStr)
    {
        RetailServerServiceProfile rSrv;
        RetailDeploymentHierarchyNode contextNode;
        RetailDeploymentHierarchyNodeType contextType;

        RetailDeploymentHierarchyNode newNode;

        contextNode = this.getSearchContext();
        contextType = contextNode.parmNodeType();

        switch (contextType)
        {
            case RetailDeploymentHierarchyNodeType::ChannelDB :
                while select WebApplicationName, RetailChannelDatabaseProfiles, RecId from rSrv
                    order by rSrv.WebApplicationName
                    where rSrv.RetailChannelDatabaseProfiles == contextNode.parmRefRecId() && rSrv.WebApplicationName like _searchStr
                {
                    newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), rSrv.RecId, rSrv.WebApplicationName);
                    this.insertNewNodeAndUpdateParent(newNode, _node);
                }
                break;

            case RetailDeploymentHierarchyNodeType::RealTimeService :
                while select WebApplicationName, RetailDeploymentRTSProfile, RecId from rSrv
                    order by rSrv.WebApplicationName
                    where rSrv.RetailDeploymentRTSProfile == contextNode.parmRefRecId() && rSrv.WebApplicationName like _searchStr
                {
                    newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), rSrv.RecId, rSrv.WebApplicationName);
                    this.insertNewNodeAndUpdateParent(newNode, _node);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSynchClientFromSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new child nodes under a Synch Client node from search.
    /// </summary>
    /// <param name="_node">
    /// The parent node.
    /// </param>
    /// <param name="_searchStr">
    /// The search string.
    /// </param>
    protected void addSynchClientFromSearch(RetailDeploymentHierarchyNode _node, str 52 _searchStr)
    {
        RetailCDXClientProfile cdxC;
        RetailDeploymentHierarchyNode contextNode;
        RetailDeploymentHierarchyNodeType contextType;

        RetailDeploymentHierarchyNode newNode;

        contextNode = this.getSearchContext();
        contextType = contextNode.parmNodeType();

        //only context besides global is synch server - no need for switch
        while select Name, RetailCDXHeadOfficeProfile, RecId from cdxC
            order by cdxC.Name
            where cdxC.RetailCDXHeadOfficeProfile == contextNode.parmRefRecId() && cdxC.Name like _searchStr
        {
            newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), cdxC.RecId, cdxC.Name);
            this.insertNewNodeAndUpdateParent(newNode, _node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSearch</Name>
				<Source><![CDATA[
/// <summary>
    /// Indicates if the selected node is searchable or not.
    /// </summary>
    /// <returns>
    /// True if it is, false otherwise.
    /// </returns>
    public boolean canSearch()
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNode parentNode;
        RetailDeploymentHierarchyNodeType nodeType;
        RetailDeploymentHierarchyNodeType parentNodeType;
        boolean isTypeNode;
        boolean isParentTypeNode;

        if (nodeMap.exists(prevSelectedNodeId))
        {
            node = nodeMap.lookup(prevSelectedNodeId);
            nodeType = node.parmNodeType();
            isTypeNode = nodeType == RetailDeploymentHierarchyNodeType::RealTimeServiceCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::SynchServerServiceCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::SynchClientCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::RetailServerCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::ChannelDBCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::EPOSCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::ModernPOSCollection ||
                         nodeType == RetailDeploymentHierarchyNodeType::HardwareStationCollection;

            if (nodeMap.exists(node.parmParentNodeId()))
            {//parent can't be a container
                parentNode = nodeMap.lookup(node.parmParentNodeId());
                parentNodeType = parentNode.parmNodeType();
                isParentTypeNode = parentNodeType == RetailDeploymentHierarchyNodeType::RealTimeServiceCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::SynchServerServiceCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::SynchClientCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::RetailServerCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::ChannelDBCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::EPOSCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::ModernPOSCollection ||
                                   parentNodeType == RetailDeploymentHierarchyNodeType::HardwareStationCollection;

                return isTypeNode && !isParentTypeNode;
            }
        }
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>deleteChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the children of the given node.
    /// </summary>
    /// <param name="_node">
    /// The node.
    /// </param>
    protected void deleteChildren(RetailDeploymentHierarchyNode _node)
    {
        Array children;
        int i;

        children = _node.parmChildNodeIds();
        for (i = 1; i <= children.lastIndex(); i++)
        {
            nodeMap.remove(children.value(i));
        }

        _node.removeChildren();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescendants</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets an array of the IDs of the decendents of a node that are at a specific depth.
    /// </summary>
    /// <param name="_id">
    /// The ID of the node for which to get the decendents.
    /// </param>
    /// <param name="_depth">
    /// The depth from which the decendents should be taken.
    /// </param>
    /// <returns>
    /// An array with the IDs of all the decendents of a node.
    /// </returns>
    /// <remarks>
    /// This method is used by the <c>Microsoft.Dynamics.AxHierarchyBridge.AxHierarchyDesignerBridge</c>
    /// class.
    /// </remarks>
    public Array getDescendants(int64 _id, int _depth)
    {
        Array                           childArray;
        Array                           retArray = new Array(Types::Int64);
        Array                           tempArray;
        RetailDeploymentHierarchyNode   node;
        int                             i;
        int                             j;
        int                             retArrayCount = 0;

        if (nodeMap.exists(_id))
        {
            node = nodeMap.lookup(_id);

            // Recurse through the tree and get the nodes at the specified depth
            childArray = node.parmChildNodeIds();
            for (i=1;i<=childArray.lastIndex();i++)
            {
                    retArrayCount++;
                    retArray.value(retArrayCount,childArray.value(i));

                if (_depth > 1)
                {
                    // Get the descendants and combine with the already found values
                    tempArray = this.getDescendants(childArray.value(i), _depth-1);
                    for (j=1;j<=tempArray.lastIndex();j++)
                    {
                        retArrayCount++;
                        retArray.value(retArrayCount,tempArray.value(j));
                    }
                }
            }
        }

        return retArray;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getSearchContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the node which sets the context for the current search.  For example, if a "Modern POS" collection was connected to retailSrv1 and is selected, retailSrv1 would be returned as the search would be for Modern POSs connected to retailSrv1
    /// </summary>
    /// <returns>
    /// The node which sets the context for the current search
    /// </returns>
    /// <remarks>
    /// If no parent, this will return an invalid value.  If isGlobalSearch == true, the value returned by this method is invalid
    /// </remarks>

    public RetailDeploymentHierarchyNode getSearchContext()
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNode parentNode;
        int64 parentId;

        if (nodeMap.exists(prevSelectedNodeId))
        {
            node = nodeMap.lookup(prevSelectedNodeId);
            parentId = this.getParentID(prevSelectedNodeId);
            if (nodeMap.exists(parentId))
            {
                parentNode = nodeMap.lookup(parentId);
                return parentNode;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the controller and loads the Organization node.
    /// </summary>
    public void init()
    {
        RetailDeploymentHierarchyNode   rootNode,
                                        realTimeServiceCollectionNode,
                                        synchServerServiceCollectionNode,
                                        retailServerCollectionNode,
                                        synchClientCollectionNode,
                                        channelDBCollectionNode,
                                        eposCollectionNode,
                                        modernPOSTerminalCollectionNode,
                                        hardwareStationCollectionNode;

        RetailDeploymentRTSProfile rts;
        RetailCDXHeadOfficeProfile sSrv;
        RetailCDXClientProfile cdxC;
        RetailServerServiceProfile rSrv;
        RetailChannelDatabaseProfiles cdB;
        RetailDeploymentPOSRegisters epoS;
        RetailModernPOSProfile mpoS;
        RetailHardwareStationProfile hw;

        int64   rootId;

        super();

        rootId = this.getNextNodeId();

        // Initialize the first record
        rootNode = RetailDeploymentHierarchyNode::newParameters(rootId, RetailDeploymentHierarchyNodeType::Organization, -1, 0, "@REX4161020", false, true);
        this.insertNewNodeAndUpdateParent(rootNode);

        // Init aggregate nodes
        select count(RecId) from rts;
        realTimeServiceCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RealTimeServiceCollection, rootId, 0, "@REX4161021");
        realTimeServiceCollectionNode.parmNumContained(rts.RecId);
        realTimeServiceCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(realTimeServiceCollectionNode, rootNode);

        select count(RecId) from sSrv;
        synchServerServiceCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::SynchServerServiceCollection, rootId, 0, "@REX4161023");
        synchServerServiceCollectionNode.parmNumContained(sSrv.RecId);
        synchServerServiceCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(synchServerServiceCollectionNode, rootNode);

        select count(RecId) from cdxC;
        synchClientCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::SynchClientCollection, rootId, 0, "@REX4161019");
        synchClientCollectionNode.parmNumContained(cdxC.RecId);
        synchClientCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(synchClientCollectionNode, rootNode);

        select count(RecId) from rSrv;
        retailServerCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServerCollection, rootId, 0, "@REX4161016");
        retailServerCollectionNode.parmNumContained(rSrv.RecId);
        retailServerCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(retailServerCollectionNode, rootNode);

        select count(RecId) from cdB;
        channelDBCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ChannelDBCollection, rootId, 0, "@REX4161024");
        channelDBCollectionNode.parmNumContained(cdB.RecId);
        channelDBCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(channelDBCollectionNode, rootNode);

        select count(RecId) from epoS;
        eposCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::EPOSCollection, rootId, 0, "@REX4161017");
        eposCollectionNode.parmNumContained(epoS.RecId);
        eposCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(eposCollectionNode, rootNode);

        select count(RecId) from mpoS;
        modernPOSTerminalCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ModernPOSCollection, rootId, 0, "@REX4161025");
        modernPOSTerminalCollectionNode.parmNumContained(mpoS.RecId);
        modernPOSTerminalCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(modernPOSTerminalCollectionNode, rootNode);

        select count(RecId) from hw;
        hardwareStationCollectionNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::HardwareStationCollection, rootId, 0, "@SYP4910044");
        hardwareStationCollectionNode.parmNumContained(hw.RecId);
        hardwareStationCollectionNode.parmContextStr("@REX4161022");
        this.insertNewNodeAndUpdateParent(hardwareStationCollectionNode, rootNode);

        prevSelectedNodeID = rootId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initOverideRoot</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the controller and loads the specified node.
    /// </summary>
    /// <param name="_recId">
    /// The recID of the overiding node
    /// </param>
    /// <param name="_type">
    /// The type of the overiding node
    /// </param>
    /// <returns>
    /// True if referenced record exists and was created as center node.  False if the record no longer exists and the global view was refreshed.
    /// </returns>
    public boolean initOverideRoot(RefRecId _recId, RetailDeploymentHierarchyNodeType _type)
    {
        RetailDeploymentRTSProfile rts;
        RetailCDXHeadOfficeProfile sSrv;
        RetailCDXClientProfile cdxC;
        RetailServerServiceProfile rSrv;
        RetailChannelDatabaseProfiles cdB;
        RetailModernPOSProfile mpoS;
        RetailDeploymentPOSRegisters epoS;
        RetailHardwareStationProfile hw;

        RetailDeploymentHierarchyNode   rootNode;

        int64   rootId;

        str trueName;

        //Name may have changed if it is a real node (or it may have been removed, if so do normal init)
        switch (_type)
        {
            case RetailDeploymentHierarchyNodeType::RealTimeService :
                select WebApplicationName, RecId from rts where rts.RecId == _recId;
                if (rts)
                {
                    trueName = rts.WebApplicationName;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService :
                select WebApplicationName, RecId from sSrv where sSrv.RecId == _recId;
                if (sSrv)
                {
                    trueName = sSrv.WebApplicationName;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient :
                select Name, RecId from cdxC where cdxC.RecId == _recId;
                if (cdxC)
                {
                    trueName = cdxC.Name;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB :
                select Name, RecId from cdB where cdB.RecId == _recId;
                if (cdB)
                {
                    trueName = cdB.Name;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer :
                select WebApplicationName, RecId from rSrv where rSrv.RecId == _recId;
                if (rSrv)
                {
                    trueName = rSrv.WebApplicationName;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::EPOS :
                select Name, RecId from epoS where epoS.RecId == _recId;
                if (epoS)
                {
                    trueName = epoS.Name;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos :
                select Name, RecId from mpoS where mpoS.RecId == _recId;
                if (mpoS)
                {
                    trueName = mpoS.Name;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStation :
                select WebApplicationName, RecId from hw where hw.RecId == _recId;
                if (hw)
                {
                    trueName = hw.WebApplicationName;
                }
                else
                {
                    this.init();
                    return false;
                }
                break;
        }

        //wanted to call base.init() / super.init() but it wouldn't let me
        rootNodeId = 0;
        maxNodeId = 0;
        nodeMap = new Map(Types::Int64, Types::Class);

        rootId = this.getNextNodeId();

        // Initialize the first record
        rootNode = RetailDeploymentHierarchyNode::newParameters(rootId, _type, -1, _recId, trueName);
        this.insertNewNodeAndUpdateParent(rootNode);
        this.loadNodeDescendants(rootNode);//load the nodes connected directly to the root node

        prevSelectedNodeID = rootId;
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertSearchResults</Name>
				<Source><![CDATA[
/// <summary>
    /// Handles the search box searching and inserts results.
    /// </summary>
    /// <param name="_searchText">
    /// The query.
    /// </param>
    public void insertSearchResults(str 52 _searchText)
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNodeType nodeType;

        if (!nodeMap.exists(prevSelectedNodeId))
        {
            return;
        }

        node = nodeMap.lookup(prevSelectedNodeId);
        nodeType = node.parmNodeType();

        this.deleteChildren(node);

        switch (nodeType)
        {
            case RetailDeploymentHierarchyNodeType::RetailServerCollection :
                this.addRetailServerFromSearch(node, _searchText);
                break;
            case RetailDeploymentHierarchyNodeType::ModernPOSCollection :
                this.addMPOSFromSearch(node, _searchText);
                break;
            case RetailDeploymentHierarchyNodeType::SynchClientCollection :
                this.addSynchClientFromSearch(node, _searchText);
                break;
            case RetailDeploymentHierarchyNodeType::EPOSCollection :
                this.addEPOSFromSearch(node, _searchText);
                break;
            case RetailDeploymentHierarchyNodeType::HardwareStationCollection :
                this.addHardwareStationFromSearch(node, _searchText);
            //since channelDB can only be searched in global context, no reason to implement insert search result
            //since rts can only be searched in global context, no reason to implement insert search result
            //since synch server can only be searched in global context, no reason to implement insert search result
        }

        ui.refreshTreeOnNode(node.parmId());
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertSingleResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a single node from search below the selected container node
    /// </summary>
    /// <param name="_name">
    /// Name of the new node
    /// </param>
    /// <param name="_recId">
    /// RecID of new node
    /// </param>
    /// <returns>
    /// True if insert was successful, false if insert was not successful
    /// </returns>
    public boolean insertSingleResult(str _name, RefRecId _recId)
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNode newNode;
        RetailDeploymentHierarchyNodeType nodeType;

        if (!nodeMap.exists(prevSelectedNodeId))
        {
            //The container node this is being inserted below has to be selected
            return false;
        }

        node = nodeMap.lookup(prevSelectedNodeId);
        nodeType = node.parmNodeType();

        if ( !RetailDeploymentHierarchyHelpers::doesRecordExistInAx(_recId, RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(nodeType)) )
        {
            //record does not exist in AX, unable to insert
            return false;
        }

        this.deleteChildren(node);
        newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(nodeType), node.parmId(), _recId, _name);
        this.insertNewNodeAndUpdateParent(newNode, node);

        ui.refreshTreeOnNode(node.parmId());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGlobalSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the search context is global
    /// </summary>
    /// <returns>
    /// True if the search context is global, false if the search context is not global.
    /// </returns>
    /// <remarks>
    /// Need to run canSearch to determine if a search is allowed.  If false, the result of calling this function may be invalid
    /// </remarks>

    public boolean isGlobalSearch()
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentHierarchyNode parentNode;
        RetailDeploymentHierarchyNodeType nodeType;
        int64 parentId;

        if (nodeMap.exists(prevSelectedNodeId))
        {
            node = nodeMap.lookup(prevSelectedNodeId);
            nodeType = node.parmNodeType();
            parentId = this.getParentID(prevSelectedNodeId);
            if (nodeMap.exists(parentId))
            {
                parentNode = nodeMap.lookup(parentId);
                return (parentNode.parmNodeType() == RetailDeploymentHierarchyNodeType::Organization);
            }
        }
        return true;//if node can't be found, default to global search
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadChannelDBChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given Channel DB
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A Channel DB
    /// </param>
    protected void loadChannelDBChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        #RetailDeploymentHierarchyDecls
        RetailDeploymentHierarchyNode node;

        RetailChannelDatabaseProfiles cdB;
        RetailCDXClientProfile cdxC;
        RetailServerServiceProfile rSrv;
        RetailDeploymentPOSRegisters epoS;

        //int64 numCdxC;
        int64 numRSrv;
        int64 numEPOS;

        //There should only be <=1 of this type of node so artifical node logic not nessisary
        //there are 2 ways for channel DB to connect to synch client
        while select Name, RecId from cdxC join cdB
            order by cdxC.Name
            where (cdxC.RetailChannelDatabaseProfiles == cdB.RecId) && (cdB.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::SynchClient, _parentNode.parmId(), cdxC.RecId, cdxC.Name);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        //**Retail Servers**
        select count(RetailChannelDatabaseProfiles) from rSrv
            where rSrv.RetailChannelDatabaseProfiles == _parentNode.parmRefRecId();

        numRSrv = rSrv.RetailChannelDatabaseProfiles;

        if (numRSrv <= #SEARCH_TRESHOLD && numRSrv > 0)
        {
            while select WebApplicationName, RetailChannelDatabaseProfiles, RecId from rSrv
                order by rSrv.WebApplicationName
                where rSrv.RetailChannelDatabaseProfiles == _parentNode.parmRefRecId()
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServer, _parentNode.parmId(), rSrv.RecId, rSrv.WebApplicationName, false, false);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numRSrv > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServerCollection, _parentNode.parmId(), 0, "@REX4161016");
            node.parmNumContained(numRSrv);
            node.parmContextStr("@REX4161015" + ' ' + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        //**EPOS**
        select count(RetailChannelDatabaseProfiles) from epoS
            where epoS.RetailChannelDatabaseProfiles == _parentNode.parmRefRecId();

        numEPOS = epoS.RetailChannelDatabaseProfiles;

        if (numEPOS <= #SEARCH_TRESHOLD && numEPOS > 0)
        {
            while select Name, RetailChannelDatabaseProfiles, RecId from epoS
                order by epoS.Name
                where epoS.RetailChannelDatabaseProfiles == _parentNode.parmRefRecId()
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::EPOS, _parentNode.parmId(), epoS.RecId, epoS.Name, false, false);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numEPOS > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::EPOSCollection, _parentNode.parmId(), 0, "@REX4161017");
            node.parmNumContained(numEPOS);
            node.parmContextStr("@REX4161015" + ' ' + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadEPOSChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given EPOS
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A EPOS node
    /// </param>
    protected void loadEPOSChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        RetailDeploymentHierarchyNode node;
        RetailDeploymentPOSRegisters epoS;
        RetailChannelDatabaseProfiles cdB;
        RetailDeploymentRTSProfile rts;

        //There should only be 1 of this type of node so artifical node logic not nessisary
        while select WebApplicationName, RecId from rts join epoS
            order by rts.WebApplicationName
            where (rts.RecId == epoS.RetailDeploymentRTSProfile) && (epoS.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RealTimeService, _parentNode.parmId(), rts.RecId, rts.WebApplicationName, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        //There should only be 1 of this type of node so artifical node logic not nessisary
        while select Name, RecId from cdB join epoS
            order by cdB.Name
            where (cdB.RecId == epoS.RetailChannelDatabaseProfiles) && (epoS.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ChannelDB, _parentNode.parmId(), cdB.RecId, cdB.Name, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMPOSChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given MPOS
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A MPOS node
    /// </param>
    protected void loadMPOSChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        RetailDeploymentHierarchyNode node;
        RetailModernPOSProfile mpoS;
        RetailServerServiceProfile rSrv;

        //There should only be 1 of this type of node so artifical node logic not nessisary
        while select WebApplicationName, RecId from rSrv join mpoS
            order by rSrv.WebApplicationName
            where (rSrv.RecId == mpoS.RetailServerServiceProfile_HQ) && (mpoS.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServer, _parentNode.parmId(), rSrv.RecId, rSrv.WebApplicationName, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadNodeDescendants</Name>
				<Source><![CDATA[
/// <summary>
    /// Loads decents to a given node.  If the number of children is above a specific treshold, an artifical container node is inserted in its place
    /// </summary>
    /// <param name="_node">
    /// The node for which to load the descendants.
    /// </param>
    protected void loadNodeDescendants(RetailDeploymentHierarchyNode _node)
    {
        #RetailDeploymentHierarchyDecls

        //Load the parent node's children
        switch (_node.parmNodeType())
        {
            case RetailDeploymentHierarchyNodeType::RealTimeService:
                this.loadRealTimeServiceChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::SynchServerService:
                this.loadSynchServerServiceChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::SynchClient:
                this.loadSynchClientChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::ChannelDB:
                this.loadChannelDBChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::RetailServer:
                this.loadRetailServerChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::ModernPos:
                this.loadMPOSChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::EPOS:
                this.loadEPOSChildren(_node);
                break;

            case RetailDeploymentHierarchyNodeType::HardwareStation:
                this.loadHardwareStationChildren(_node);
                break;

            default:
                //Do nothing
                break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>loadRealTimeServiceChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given real time service
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A real time service node
    /// </param>
    protected void loadRealTimeServiceChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        #RetailDeploymentHierarchyDecls
        RetailDeploymentHierarchyNode node;
        RetailServerServiceProfile rSrv;
        RetailDeploymentPOSRegisters epoS;

        int64 numRSrv;
        int64 numEPOS;

        select count(RecId), RetailDeploymentRTSProfile from rSrv
            where rSrv.RetailDeploymentRTSProfile == _parentNode.parmRefRecId();
        numRSrv = rSrv.RecId;

        //will create artificial nodes if combined num rSrv
        if (numRSrv <= #SEARCH_TRESHOLD && numRSrv > 0)
        {
            while select WebApplicationName, RetailDeploymentRTSProfile, RecId from rSrv
                order by rSrv.WebApplicationName
                where rSrv.RetailDeploymentRTSProfile == _parentNode.parmRefRecId()
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServer, _parentNode.parmId(), rSrv.RecId, rSrv.WebApplicationName, false, false);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numRSrv > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServerCollection, _parentNode.parmId(), 0, "@REX4161016");
            node.parmNumContained(numRSrv);
            node.parmContextStr("@REX4161015" + ' ' + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        select count(RecId), RetailDeploymentRTSProfile from epoS
            where epoS.RetailDeploymentRTSProfile == _parentNode.parmRefRecId();
        numEPOS = epoS.RecId;

        //will create artificial nodes if combined num rSrv
        if (numEPOS <= #SEARCH_TRESHOLD && numEPOS > 0)
        {
            while select Name, RetailDeploymentRTSProfile, RecId from epoS
                order by epoS.Name
                where epoS.RetailDeploymentRTSProfile == _parentNode.parmRefRecId()
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::EPOS, _parentNode.parmId(), epoS.RecId, epoS.Name, false, false);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numEPOS > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::EPOSCollection, _parentNode.parmId(), 0, "@REX4161017");
            node.parmNumContained(numEPOS);
            node.parmContextStr("@REX4161015" + ' '  + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRetailServerChildren</Name>
				<Source><![CDATA[
/// <summary>
    /// Loads all the nodes which connect to the given retail server
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A retail server
    /// </param>
    protected void loadRetailServerChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        #RetailDeploymentHierarchyDecls
        RetailDeploymentHierarchyNode node;
        RetailServerServiceProfile rSrv;
        RetailChannelDatabaseProfiles cdB;
        RetailDeploymentRTSProfile rts;
        RetailModernPOSProfile mpoS;
        RetailHardwareStationProfile hw;
        RetailServerServiceProfileExtension rSrvExt;

        int64                   numMPOS;
        int64 numHwStations;

        //there should only be <=1 of these
        //no reason to insert artifical node logic
        while select Name, RecId from cdB join rSrv
            order by cdB.Name
            where (cdB.RecId == rSrv.RetailChannelDatabaseProfiles) && (rSrv.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ChannelDB, _parentNode.parmId(), cdB.RecId, cdB.Name, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        //there should only be <=1 of these
        //no reason to insert artifical node logic
        while select WebApplicationName, RecId from rts join rSrv
            order by rts.WebApplicationName
            where (rts.RecId == rSrv.RetailDeploymentRTSProfile) && (rSrv.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RealTimeService, _parentNode.parmId(), rts.RecId, rts.WebApplicationName, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        select count(RecId), RetailServerServiceProfile_HQ from mpoS
            where (mpoS.RetailServerServiceProfile_HQ == _parentNode.parmRefRecId());
        numMPOS = mpoS.RecId;

        //will create artificial nodes if combined number of mPOS online and offline is above threshold
        //will create seperate artifical nodes for each type

        if (numMPOS <= #SEARCH_TRESHOLD && numMPOS > 0)
        {
            while select Name, RetailServerServiceProfile_HQ, RecId from mpoS
                order by mpoS.Name
                where (mpoS.RetailServerServiceProfile_HQ == _parentNode.parmRefRecId())
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ModernPos, _parentNode.parmId(), mpoS.RecId, mpoS.Name, false, false);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numMPOS > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ModernPOSCollection, _parentNode.parmId(), 0, "@REX4161018");
            node.parmNumContained(numMPOS);
            node.parmContextStr("@REX4161015" + ' ' + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        select RetailServerServiceProfileExtension, count(RecId) from hw
          join Name, RecId from rSrvExt
            where hw.RetailServerServiceProfileExtension == rSrvExt.RecId
          join Name, RecId from rSrv
            where (rSrv.Name == rSrvExt.Name) && (rSrv.RecId == _parentNode.parmRefRecId());

        numHwStations = hw.RecId;

        //will create artificial nodes if combined number of HW Stations is above threshold
        //will create seperate artifical nodes for each type

        if (numHwStations <= #SEARCH_TRESHOLD && numHwStations > 0)
        {
            while select Name, RetailServerServiceProfileExtension, RecId from hw
                  order by hw.Name
                join Name, RecId from rSrvExt
                   where hw.RetailServerServiceProfileExtension == rSrvExt.RecId
                join Name, RecId from rSrv
                  where (rSrv.Name == rSrvExt.Name) && (rSrv.RecId == _parentNode.parmRefRecId())
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::HardwareStation, _parentNode.parmId(), hw.RecId, hw.Name, false, false);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numHwStations > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::HardwareStationCollection, _parentNode.parmId(), 0, "@SYP4910044");
            node.parmNumContained(numHwStations);
            node.parmContextStr("@REX4161015" + ' ' + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>loadSynchClientChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given synch client
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A synch client node
    /// </param>
    protected void loadSynchClientChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        RetailDeploymentHierarchyNode node;
        RetailCDXClientProfile cdxC;
        RetailCDXHeadOfficeProfile sSrv;
        RetailChannelDatabaseProfiles cdB;

        //There should only be 1 of this type of node so artifical node logic not nessisary
        while select WebApplicationName, RecId from sSrv join cdxC
            order by sSrv.WebApplicationName
            where (sSrv.RecId == cdxC.RetailCDXHeadOfficeProfile) && (cdxC.RecId == _parentNode.parmRefRecId())
        {
            //This node is allowed to have drilldowns below it.
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::SynchServerService, _parentNode.parmId(), sSrv.RecId, sSrv.WebApplicationName, false, true);

            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }

        //There should only be 1 of this type of node so artifical node logic not nessisary
        //there are 2 ways for channel DB to connect to synch client
        while select Name, RetailConnDatabaseProfile, RecId from cdB join cdxC
            order by cdB.Name
            where (cdB.RecId == cdxC.RetailChannelDatabaseProfiles) && (cdxC.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::ChannelDB, _parentNode.parmId(), cdB.RecId, cdB.Name, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSynchServerServiceChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given synch server service
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A synch server service node
    /// </param>
    protected void loadSynchServerServiceChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        #RetailDeploymentHierarchyDecls
        RetailDeploymentHierarchyNode node;
        RetailCDXClientProfile cdxC;

        int64 numSynchClients;

        select count(RecId), RetailCDXHeadOfficeProfile from cdxC
            where cdxC.RetailCDXHeadOfficeProfile == _parentNode.parmRefRecId();
        numSynchClients = cdxC.RecId;

        //will create artificial nodes if combined num rSrv
        if (numSynchClients <= #SEARCH_TRESHOLD && numSynchClients > 0)
        {
            while select Name, RetailCDXHeadOfficeProfile, RecId from cdxC
                order by cdxC.Name
                where cdxC.RetailCDXHeadOfficeProfile == _parentNode.parmRefRecId()
            {
                node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::SynchClient, _parentNode.parmId(), cdxC.RecId, cdxC.Name);
                this.insertNewNodeAndUpdateParent(node, _parentNode);
            }
        }
        else if (numSynchClients > 0) //may have no connections
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::SynchClientCollection, _parentNode.parmId(), 0, "@REX4161019");
            node.parmNumContained(numSynchClients);
            node.parmContextStr("@REX4161015" + ' ' + _parentNode.parmNodeName());
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSelectedNode</Name>
				<Source><![CDATA[
        public void reportSelectedNode(int64 _id)
    {
        RetailDeploymentHierarchyNode node;
        int64 pastID;

        if (nodeMap.exists(_id))
        {
            pastID = prevSelectedNodeId;
            prevSelectedNodeId = _id;
            node = nodeMap.lookup(_id);

            if (pastID != _id)
            {
                    //only update search if different node selected
                    if (this.canSearch())
                    {
                        ui.enableSearch();
                    }
                    else
                    {
                        ui.disableSearch();
                    }
            }
        }

        //update the preview pane
        super(_id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHardwareStationFromSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds new child nodes under a Hardware Station node from search.
    /// </summary>
    /// <param name="_node">
    /// The parent node.
    /// </param>
    /// <param name="_searchStr">
    /// The search string.
    /// </param>
    protected void addHardwareStationFromSearch(RetailDeploymentHierarchyNode _node, str 52 _searchStr)
    {
        RetailHardwareStationProfile hw;
        RetailDeploymentHierarchyNode contextNode;
        RetailDeploymentHierarchyNodeType contextType;
        RetailServerServiceProfile rSrv;
        RetailServerServiceProfileExtension rSrvExt;

        RetailDeploymentHierarchyNode newNode;

        contextNode = this.getSearchContext();
        contextType = contextNode.parmNodeType();

        if (contextType == RetailDeploymentHierarchyNodeType::RetailServer)
        {
            while select WebApplicationName, RetailServerServiceProfileExtension, RecId from hw
                order by hw.WebApplicationName
                where hw.WebApplicationName like _searchStr
              join Name, RecId from rSrvExt
                where hw.RetailServerServiceProfileExtension == rSrvExt.RecId && rSrvExt.RecId == contextNode.parmRefRecId()
              join Name, RecId from rSrv
                where rSrv.Name == rSrvExt.Name
            {
                newNode = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyHelpers::containerTypeToInstanceType(_node.parmNodeType()), _node.parmId(), hw.RecId, hw.WebApplicationName);
                this.insertNewNodeAndUpdateParent(newNode, _node);
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>loadHardwareStationChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads all the nodes which connect to the given hardware station
    /// </summary>
    /// <param name="_parentNode">
    /// The parent node.  A hardware station.
    /// </param>
    protected void loadHardwareStationChildren(RetailDeploymentHierarchyNode _parentNode)
    {
        #RetailDeploymentHierarchyDecls
        RetailDeploymentHierarchyNode node;
        RetailHardwareStationProfile hw;
        RetailServerServiceProfileExtension rSrvExt;
        RetailServerServiceProfile rSrv;

        //there should only be <=1 of these
        //no reason to insert artifical node logic
        while select Name, WebApplicationName, RecId from rSrv
            order by rSrv.WebApplicationName
          join Name, RecId from rSrvExt
            where rSrv.Name == rSrvExt.Name
          join RetailServerServiceProfileExtension from hw
            where (rSrvExt.RecId == hw.RetailServerServiceProfileExtension) && (hw.RecId == _parentNode.parmRefRecId())
        {
            node = RetailDeploymentHierarchyNode::newParameters(this.getNextNodeId(), RetailDeploymentHierarchyNodeType::RetailServer, _parentNode.parmId(), rSrv.RecId, rSrv.WebApplicationName, false, false);
            this.insertNewNodeAndUpdateParent(node, _parentNode);
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>