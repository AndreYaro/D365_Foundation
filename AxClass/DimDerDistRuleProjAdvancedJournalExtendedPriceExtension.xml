<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerDistRuleProjAdvancedJournalExtendedPriceExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimDerDistRuleProjAdvancedJournalExtendedPriceExtension</c> class is the dimension derivation distribution rule
///    extension for project advanced journals.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccDistRuleProjAdvancedJournalExtendedPrice))]
public class DimDerDistRuleProjAdvancedJournalExtendedPriceExtension  extends DimensionDerivationRuleExtension
{
    ProjAdvancedJournal     projAdvancedJournal;
    ProjAdvancedJournalLine projAdvancedJournalLine;
    private boolean isProjOpsIntegrationFeatureEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates an allocation list that is based on project/resource setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        if (ProjectDimDerivationDistRule::canProcessProject(dimensionDerivationRule))
        {
            //populate ledger dimension allocation list from project setup
            ProjectDimDerivationDistRule projectDimDerivationDistRule = ProjectDimDerivationDistRule::newFromDimensionDerivationRule(dimensionDerivationRule);
            projectDimDerivationDistRule.populateDimAllocList(_ledgerDimensionAllocationList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocListIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates an allocation list that is based on intercompany cost..
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocListIntercompany(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit side = dimensionDerivationRule.parmAccountingRule().parmSide();

        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;

        //This is intercompany scenario for intergrated advanced journal, we should pass borrowing company projectId along with lending
        //company categoryId to get valid ledger dimension account.
        if (isProjOpsIntegrationFeatureEnabled)
        {
            ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,
                                                                            projAdvancedJournalLine.ProjId,
                                                                            projAdvancedJournalLine.ProjCategoryId,
                                                                            0,
                                                                            false,
                                                                            true,
                                                                            '',
                                                                            curExt(),
                                                                            projAdvancedJournalLine.ProjDataAreaId);
    
        }
        else //Classic PMA intercompany scenario.
        {
            ledgerDimensionDefaultAccount  = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount, '', '', 0);
        }

        LedgerDimensionAccount ledgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount, projAdvancedJournalLine.DefaultDimension);

        LedgerDimensionAllocation ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                    1,
                                                                                    side,
                                                                                    false);
        _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        super();

        Common sourceDocumentLineImplementation = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmSourceDocumentLine().getSourceDocumentLineImplementation();
        
        if (sourceDocumentLineImplementation.TableId != tableNum(ProjAdvancedJournalLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        projAdvancedJournalLine = sourceDocumentLineImplementation;
        projAdvancedJournal = projAdvancedJournalLine.getProjAdvancedJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to events of the dimension derivation rule.
    /// </summary>
    protected void subscribe()
    {
        if (ProjectDimDerivationDistRule::canProcessProject(dimensionDerivationRule))
        {
            dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
        }
        else
        {
            if (projAdvancedJournalLine.ProjDataAreaId != curext())
            {
                dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocListIntercompany);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>