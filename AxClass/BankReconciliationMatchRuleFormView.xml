<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchRuleFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationMatchRuleFormView</c> is the form view of bank reconciliation matching rule form.
/// </summary>
public class BankReconciliationMatchRuleFormView
{
    private boolean isBankModernReconciliationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance());
    private boolean isSkipReversalFlagValidation = FeatureStateProvider::isFeatureEnabled(BankSkipReversalFlagValidationFeature::instance());
    private FormRun matchRuleFormRun;

    // Data sources
    private FormDataSource dsMatchRule;
    private FormDataSource dsMatchRuleLineStatement;
    private FormDataSource dsMatchRuleLineDocument;
    private FormDataSource dsMatchRuleLineSettleCustInvoice;
    private FormDataSource dsMatchRuleLineOrigStatement;
    private FormDataSource dsMatchRuleLineOrigDocument;
    private FormDataSource dsGroupRuleLineStatement;
    private FormDataSource dsGroupRuleLineDocument;
    private FormDataSource dsMatchRulePostingInfo;

    // View model
    private BankReconciliationMatchRuleViewModel matchRuleViewModel;

    // Controls
    private FormTabPageControl findStatementLinesControl;
    private FormTabPageControl findOrigStatementsControl;
    private FormTabPageControl findBankDocumentsControl;
    private FormTabPageControl findCustInvoiceControl;
    private FormTabPageControl defineGroupConditionControl;
    private FormTabPageControl groupBankStatementControl;
    private FormTabPageControl groupBankTransactionControl;
    private FormTabPageControl reversalDocumentControl;
    private FormTabPageControl origDocumentControl;
    private FormTabPageControl postingParametersTabControl;

    private FormIntControl editDocumentAllowedDateDifferenceControl;
    private FormRealControl editDocumentAllowAmountDifferenceControl;
    private FormIntControl editOrigStatementAllowedDateDifferenceControl;
    private FormCheckBoxControl editDocumentAllowAmountDiffCheckBoxControl;
    private FormCheckBoxControl editStatementReversalControl;
    private FormCheckBoxControl editDocumentOppositeAmountControl;
    private FormCheckBoxControl bankReconciliationMatchRule_SearchMatchingEntryControl;
    private FormCheckBoxControl sameAmountCrDrIndicatorControl;

    private FormGroupControl bankDocumentBasicCriteriaGroupControl;
    private FormGroupControl bankDocumentAdditionalCriteriaGroupControl;
    private FormGroupControl documentAllowedAmountDifferenceGroupControl;

    private FormFunctionButtonControl bankReconciliationMatchRuleDeactivateControl;
    private FormFunctionButtonControl bankReconciliationMatchRuleActivateControl;
    private FormFunctionButtonControl bankReconciliationMatchRulePostingSetupControl;

    private FormComboBoxControl matchingTypeControl;
    private FormComboBoxControl bankReconciliationMatchRuleLineStatement_OperatorControl;
    private FormComboBoxControl bankReconciliationMatchRuleLineOrigStmt_OperatorControl;
    private FormComboBoxControl bankReconciliationMatchRuleLineDocument_OperatorControl;
    private FormComboBoxControl bankReconciliationMatchRuleLineReversalDocument_Operator;
    private FormComboBoxControl bankReconciliationMatchRuleLineOrigDocument_Operator;

    private FormStringControl editDocumentCompareFieldLabelControl;
    private FormStringControl editDocumentFieldLabelControl;
    private FormStringControl editOrigStmtCompareFieldLabelControl;
    private FormStringControl editOrigStmtFieldLabelControl;
    private FormStringControl editStatementFieldLabelControl;

    private FormCommandButtonControl findCustInvoiceAddButton;

    // Control names, should remove these variables when the modern bank reconciliation feature is removed.
    private const str FindStatementLines = 'FindStatementLines';
    private const str FindOrigStatements = 'FindOrigStatements';
    private const str FindBankDocuments = 'FindBankDocuments';
    private const str EditDocumentAllowedDateDifference = 'EditDocumentAllowedDateDifference';
    private const str EditDocumentAllowedAmountDifference = 'EditDocumentAllowedAmountDifference';
    private const str EditDocumentAllowAmountDifference = 'EditDocumentAllowAmountDifference';
    private const str EditStatementReversal = 'EditStatementReversal';
    private const str EditStatementFieldLabel = 'EditStatementFieldLabel';
    private const str EditOrigStatementAllowedDateDifference = 'EditOrigStatementAllowedDateDifference';
    private const str BankDocumentBasicCriteriaGroup = 'BankDocumentBasicCriteriaGroup';
    private const str BankDocumentAdditionalCriteriaGroup = 'BankDocumentAdditionalCriteriaGroup';
    private const str EditDocumentSameAmount = 'EditDocumentSameAmount';
    private const str DocumentAllowedAmountDifference = 'DocumentAllowedAmountDifference';
    private const str EditDocumentOppositeAmount = 'EditDocumentOppositeAmount';
    private const str DefineGroupCondition = 'DefineGroupCondition';
    private const str GroupBankStatement = 'GroupBankStatement';
    private const str GroupBankTransaction = 'GroupBankTransaction';
    private const str MatchingType = 'MatchingType';

    private const str BankReconciliationMatchRuleDeactivate = 'BankReconciliationMatchRuleDeactivate';
    private const str BankReconciliationMatchRuleActivate = 'BankReconciliationMatchRuleActivate';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeMatchRulePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after <c>BankReconciliationMatchRule</c> buffer is active.
    /// </summary>
    /// <param name="_matchRule">
    /// Given <c>BankReconciliationMatchRule</c> buffer.
    /// </param>
    public void activeMatchRulePost(BankReconciliationMatchRule _matchRule)
    {
        matchRuleViewModel.dsMatchRuleActivePost(_matchRule);

        this.setControlsAccess();

        if (isBankModernReconciliationFeatureEnabled)
        {
            this.updateDesignOfMatchActionTypeV2();
        }
        else
        {
            this.updateDesignOfActionType();
        }
        this.updateDesignOfSearchMatchingEntry();
        this.updateDesignOfActivationButtons(_matchRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangeForRuleLineStatement</Name>
				<Source><![CDATA[
    internal void setQueryRangeForRuleLineStatement(BankReconciliationMatchActionType _matchAction)
    {
        this.setQueryRangeForMatchRuleLine(dsMatchRuleLineStatement,
            matchRuleViewModel.getLineTypeOfDataSourceRuleLineStatement());

        if (isSkipReversalFlagValidation && _matchAction == BankReconciliationMatchActionType::Reversal)
        {
            SysQuery::findOrCreateRange(dsMatchRuleLineStatement.queryBuildDataSource(), fieldNum(BankReconciliationMatchRuleLine, SystemGeneratedType)).value(queryValue(BankReconMatchRuleLineSysGeneratedType::None));
            dsMatchRuleLineStatement.queryBuildDataSource().addRange(fieldNum(BankReconciliationMatchRuleLine, SystemGeneratedType)).value(queryValue(BankReconMatchRuleLineSysGeneratedType::Reversal));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickEditDocumentAllowDiffAmountCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after clicking control of allowing different amount.
    /// </summary>
    public void clickEditDocumentAllowDiffAmountCtrl()
    {
        this.setDocumentDiffAmountControlsAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickEditDocumentAllowDiffDateCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after clicking control of allowing different date.
    /// </summary>
    public void clickEditDocumentAllowDiffDateCtrl()
    {
        this.setDocumentDiffDateControlsAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickEditOrigStatementAllowDiffDateCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls after clicking control of allowing different date.
    /// </summary>
    public void clickEditOrigStatementAllowDiffDateCtrl()
    {
        this.setOrigStatementDiffDateControlsAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMatchRulePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perfrom actions after deleting <c>BankReconciliationMatchRule</c> record.
    /// </summary>
    public void deleteMatchRulePost()
    {
        if (BankRefineReconcliationGroupConditionFlight::instance().isEnabled())
        {
            matchRuleViewModel.dsMatchRuleDeletePost();
        }
        this.setControlsAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterValueControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets whether a lookupButton is shown when entering value control.
    /// </summary>
    /// <param name="_control">
    /// Value control.
    /// </param>
    public void enterValueControl(FormStringControl _control)
    {
        matchRuleViewModel.initializeLookUpValue(_control);

        _control.lookupButton(SysLookup::fieldRangeLookupValue(matchRuleViewModel.getRangeOfLookupValue()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after given form is initialized.
    /// </summary>
    /// <param name="_formRun">
    /// The form run object.
    /// </param>
    public void formInitPost(FormRun _formRun)
    {
        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(BankReconciliationMatchRule));

        this.parmMatchRuleFormRun(_formRun);
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldLookupRestrictedTypeSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of restricted type of fields which to be looked up.
    /// </summary>
    /// <returns>
    /// Set of restricted type.
    /// </returns>
    /// <remarks>
    /// Only Date, Enum, Real, Integer and String types are allowed to look up.
    /// </remarks>
    private Set getFieldLookupRestrictedTypeSet()
    {
        Set restrictedTypeSet = new Set(Types::Enum);

        restrictedTypeSet.add(Types::Date);
        restrictedTypeSet.add(Types::Enum);
        restrictedTypeSet.add(Types::Real);
        restrictedTypeSet.add(Types::String);
        restrictedTypeSet.add(Types::Integer);

        return restrictedTypeSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>BankReconciliationMatchRuleFormView</c> class.
    /// </summary>
    protected void init()
    {
        // Initialize view model
        this.initMatchRuleViewModel();

        // Initialize controls
        this.initControls();

        this.setControlsAccess();

        if (isBankModernReconciliationFeatureEnabled)
        {
            // Should update the controls' properties with these labels and remove below method once the MBR is removed.
            this.updateFormControlLabels();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form view controls.
    /// </summary>
    private void initControls()
    {
        if (isBankModernReconciliationFeatureEnabled)
        {
            findStatementLinesControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindStatementLines));
            findOrigStatementsControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindOrigStatements));
            findBankDocumentsControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindBankDocuments));
            findCustInvoiceControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindCustInvoice));
            findCustInvoiceAddButton = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindCustInvoiceAddButton));

            defineGroupConditionControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, DefineGroupCondition));
            groupBankStatementControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, GroupBankStatement));
            groupBankTransactionControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, GroupBankTransaction));
            matchingTypeControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, MatchingType));

            editDocumentAllowedDateDifferenceControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, EditDocumentAllowedDateDifference));
            editDocumentAllowAmountDifferenceControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, EditDocumentAllowedAmountDifference));
            editDocumentAllowAmountDiffCheckBoxControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, EditDocumentAllowAmountDifference));
            editOrigStatementAllowedDateDifferenceControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, EditOrigStatementAllowedDateDifference));
            editStatementReversalControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, EditStatementReversal));
            sameAmountCrDrIndicatorControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, SameAmountCrDrIndicator));

            editDocumentCompareFieldLabelControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, editDocumentCompareFieldLabel));
            editDocumentFieldLabelControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, editDocumentFieldLabel));
            editOrigStmtCompareFieldLabelControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, editOrigStmtCompareFieldLabel));
            editOrigStmtFieldLabelControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, editOrigStmtFieldLabel));
            editStatementFieldLabelControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, editStatementFieldLabel));

            bankDocumentBasicCriteriaGroupControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankDocumentBasicCriteriaGroup));
            bankDocumentAdditionalCriteriaGroupControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankDocumentAdditionalCriteriaGroup));

            documentAllowedAmountDifferenceGroupControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, DocumentAllowedAmountDifference));
            editDocumentOppositeAmountControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, EditDocumentOppositeAmount));
            bankReconciliationMatchRule_SearchMatchingEntryControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, bankReconciliationMatchRule_SearchMatchingEntry));

            bankReconciliationMatchRuleDeactivateControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankReconciliationMatchRuleDeactivate));
            bankReconciliationMatchRuleActivateControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankReconciliationMatchRuleActivate));

            origDocumentControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindOrigDocument));
            reversalDocumentControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, FindReversalDocument));

            postingParametersTabControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, PostingParametersTab));
            bankReconciliationMatchRulePostingSetupControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, bankReconciliationMatchRulePostingSetup));

            bankReconciliationMatchRuleLineStatement_OperatorControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankReconciliationMatchRuleLineStatement_Operator));
            bankReconciliationMatchRuleLineOrigStmt_OperatorControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankReconciliationMatchRuleLineOrigStmt_Operator));
            bankReconciliationMatchRuleLineDocument_OperatorControl = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, BankReconciliationMatchRuleLineDocument_Operator));
            bankReconciliationMatchRuleLineReversalDocument_Operator = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, bankReconciliationMatchRuleLineReversalDocument_Operator));
            bankReconciliationMatchRuleLineOrigDocument_Operator = matchRuleFormRun.design().controlName(formControlStr(BankReconciliationMatchRule, bankReconciliationMatchRuleLineOrigDocument_Operator));
        }
        else
        {
            findStatementLinesControl = matchRuleFormRun.design().controlName(FindStatementLines);
            findOrigStatementsControl = matchRuleFormRun.design().controlName(FindOrigStatements);
            findBankDocumentsControl = matchRuleFormRun.design().controlName(FindBankDocuments);
            defineGroupConditionControl = matchRuleFormRun.design().controlName(DefineGroupCondition);
            groupBankStatementControl = matchRuleFormRun.design().controlName(GroupBankStatement);
            groupBankTransactionControl = matchRuleFormRun.design().controlName(GroupBankTransaction);
            matchingTypeControl = matchRuleFormRun.design().controlName(MatchingType);

            editDocumentAllowedDateDifferenceControl = matchRuleFormRun.design().controlName(EditDocumentAllowedDateDifference);
            editDocumentAllowAmountDifferenceControl = matchRuleFormRun.design().controlName(EditDocumentAllowedAmountDifference);
            editDocumentAllowAmountDiffCheckBoxControl = matchRuleFormRun.design().controlName(EditDocumentAllowAmountDifference);
            editOrigStatementAllowedDateDifferenceControl = matchRuleFormRun.design().controlName(EditOrigStatementAllowedDateDifference);
            editStatementReversalControl = matchRuleFormRun.design().controlName(EditStatementReversal);
            editStatementFieldLabelControl = matchRuleFormRun.design().controlName(EditStatementFieldLabel);

            bankDocumentBasicCriteriaGroupControl = matchRuleFormRun.design().controlName(BankDocumentBasicCriteriaGroup);
            bankDocumentAdditionalCriteriaGroupControl = matchRuleFormRun.design().controlName(BankDocumentAdditionalCriteriaGroup);

            documentAllowedAmountDifferenceGroupControl = matchRuleFormRun.design().controlName(DocumentAllowedAmountDifference);
            editDocumentOppositeAmountControl = matchRuleFormRun.design().controlName(EditDocumentOppositeAmount);

            bankReconciliationMatchRuleDeactivateControl = matchRuleFormRun.design().controlName(BankReconciliationMatchRuleDeactivate);
            bankReconciliationMatchRuleActivateControl = matchRuleFormRun.design().controlName(BankReconciliationMatchRuleActivate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchRulePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initailized.
    /// </summary>
    /// <param name="_matchRule">
    /// Given <c>BankReconciliationMatchRule</c> buffer.
    /// </param>
    public void initMatchRulePost(BankReconciliationMatchRule _matchRule)
    {
        if (!dsMatchRule)
        {
            dsMatchRule = FormDataUtil::getFormDataSource(_matchRule);
        }

        if (!isBankModernReconciliationFeatureEnabled)
        {
            BankReconciliationMatchRuleProcessor::excludeModernBankReconciliationActionsFromQueryRange(dsMatchRule.queryBuildDataSource());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldSupportForPostingActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether the given table and its field is supported for posting actions.
    /// </summary>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_fieldId">The field id.</param>
    /// <returns>true if this field is supported for posting actions, else false.</returns>
    /// <remarks>
    /// Make this method public if the customers want to support new fields in their customization.
    /// </remarks>
    internal boolean isFieldSupportForPostingActions(TableId _tableId, FieldId _fieldId)
    {
        boolean ret;
        container bankStatementFieldsForPostingActions = [
            fieldNum(BankReconciliationStatementOpenView, BankAccountTable),
            fieldNum(BankReconciliationStatementOpenView, AccountCurrency),
            fieldNum(BankReconciliationStatementOpenView, TradingPartyName),
            fieldNum(BankReconciliationStatementOpenView, BankCurrencyAmount),
            fieldNum(BankReconciliationStatementOpenView, ProprietaryBankTransactionCode),
            fieldNum(BankReconciliationStatementOpenView, BankDocumentNumber),
            fieldNum(BankReconciliationStatementOpenView, EntryReference),
            fieldNum(BankReconciliationStatementOpenView, ReferenceNumber),
            fieldNum(BankReconciliationStatementOpenView, AdditionalEntryInformation),
            fieldNum(BankReconciliationStatementOpenView, RelatedBankAccount),
            fieldNum(BankReconciliationStatementOpenView, RelatedBankName),
            fieldNum(BankReconciliationStatementOpenView, CreditorReferenceInformation),
            fieldNum(BankReconciliationStatementOpenView, BankTransType)];

        container custInvoiceForBankReconciliationViewActions = [
            fieldNum(CustInvoiceForBankReconciliationView, SalesId),
            fieldNum(CustInvoiceForBankReconciliationView, AccountNum),
            fieldNum(CustInvoiceForBankReconciliationView, Invoice),
            fieldNum(CustInvoiceForBankReconciliationView, CurrencyCode),
            fieldNum(CustInvoiceForBankReconciliationView, PaymId),
            fieldNum(CustInvoiceForBankReconciliationView, PaymReference),
            fieldNum(CustInvoiceForBankReconciliationView, AmountCur),
            fieldNum(CustInvoiceForBankReconciliationView, AmountMST),
            fieldNum(CustInvoiceForBankReconciliationView, Txt),
            fieldNum(CustInvoiceForBankReconciliationView, TransDate),
            fieldNum(CustInvoiceForBankReconciliationView, BillingClassification),
            fieldNum(CustInvoiceForBankReconciliationView, BalanceCur),
            fieldNum(CustInvoiceForBankReconciliationView, BalanceMST),
            fieldNum(CustInvoiceForBankReconciliationView, CustomerName),
            fieldNum(CustInvoiceForBankReconciliationView, PackingSlipId),
            fieldNum(CustInvoiceForBankReconciliationView, DueDate),
            fieldNum(CustInvoiceForBankReconciliationView, CashDiscDate)
        ];

        switch (_tableId)
        {
            case tableNum(BankReconciliationStatementOpenView):
                ret = conFind(bankStatementFieldsForPostingActions, _fieldId);
                break;

            case tableNum(CustInvoiceForBankReconciliationView):
                ret = conFind(custInvoiceForBankReconciliationViewActions, _fieldId);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeInOperatorFromNonSettleConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excludes the in operator from non-settle action conditions.
    /// </summary>
    internal void excludeInOperatorFromNonSettleConditions()
    {
        bankReconciliationMatchRuleLineStatement_OperatorControl.delete(enum2Str(BankReconciliationMatchOperatorType::In));
        bankReconciliationMatchRuleLineOrigStmt_OperatorControl.delete(enum2Str(BankReconciliationMatchOperatorType::In));
        bankReconciliationMatchRuleLineDocument_OperatorControl.delete(enum2Str(BankReconciliationMatchOperatorType::In));
        bankReconciliationMatchRuleLineReversalDocument_Operator.delete(enum2Str(BankReconciliationMatchOperatorType::In));
        bankReconciliationMatchRuleLineOrigDocument_Operator.delete(enum2Str(BankReconciliationMatchOperatorType::In));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchRuleViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank reconciliation matching rule view model.
    /// </summary>
    protected void initMatchRuleViewModel()
    {
        matchRuleViewModel = BankReconciliationMatchRuleViewModel::newFromMatchRuleView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangeForMatchRuleLine</Name>
				<Source><![CDATA[
    private void setQueryRangeForMatchRuleLine(
        FormDataSource _formDataSource,
        BankReconciliationMatchRuleLineType _lineType,
        boolean _excludeSysGenLine = true)
    {
        SysQuery::findOrCreateRange(_formDataSource.queryBuildDataSource(), fieldNum(BankReconciliationMatchRuleLine, LineType)).value(queryValue(_lineType));

        if (_excludeSysGenLine)
        {
            SysQuery::findOrCreateRange(_formDataSource.queryBuildDataSource(), fieldNum(BankReconciliationMatchRuleLine, SystemGeneratedType)).value(queryValue(BankReconMatchRuleLineSysGeneratedType::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleLineDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initailized.
    /// </summary>
    /// <param name="_matchRuleLineDocument">
    /// the <c>BankReconciliationMatchRuleLine</c> buffer for finding bank documents.
    /// </param>
    public void initRuleLineDocumentPost(BankReconciliationMatchRuleLine _matchRuleLineDocument)
    {
        if (!dsMatchRuleLineDocument)
        {
            dsMatchRuleLineDocument = FormDataUtil::getFormDataSource(_matchRuleLineDocument);
        }

        if (isBankModernReconciliationFeatureEnabled)
        {
            this.setQueryRangeForMatchRuleLine(dsMatchRuleLineDocument, BankReconciliationMatchRuleLineType::Document);
        }
        else
        {
            this.queryAddRangeMatchRuleLineType(
                dsMatchRuleLineDocument,
                BankReconciliationMatchRuleLineType::Document);
            this.queryAddRangeSysGeneratedType(
                dsMatchRuleLineDocument,
                BankReconMatchRuleLineSysGeneratedType::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleLineOrigDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initailized.
    /// </summary>
    /// <param name="_matchRuleLineOrigDocument">
    /// the <c>BankReconciliationMatchRuleLine</c> buffer for finding original bank documents.
    /// </param>
    internal void initRuleLineOrigDocumentPost(BankReconciliationMatchRuleLine _matchRuleLineOrigDocument)
    {
        if (!dsMatchRuleLineOrigDocument)
        {
            dsMatchRuleLineOrigDocument = FormDataUtil::getFormDataSource(_matchRuleLineOrigDocument);
        }

        this.setQueryRangeForMatchRuleLine(dsMatchRuleLineOrigDocument, BankReconciliationMatchRuleLineType::OrigDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleLineOrigStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initailized.
    /// </summary>
    /// <param name="_matchRuleLineOrigStatement">
    /// the <c>BankReconciliationMatchRuleLine</c> buffer for finding original statement lines.
    /// </param>
    public void initRuleLineOrigStatementPost(BankReconciliationMatchRuleLine _matchRuleLineOrigStatement)
    {
        if (!dsMatchRuleLineOrigStatement)
        {
            dsMatchRuleLineOrigStatement = FormDataUtil::getFormDataSource(_matchRuleLineOrigStatement);
        }

        if (isBankModernReconciliationFeatureEnabled)
        {
            this.setQueryRangeForMatchRuleLine(dsMatchRuleLineOrigStatement, BankReconciliationMatchRuleLineType::OrigStatement);
        }
        else
        {
            this.queryAddRangeMatchRuleLineType(
                dsMatchRuleLineOrigStatement,
                BankReconciliationMatchRuleLineType::OrigStatement);
            this.queryAddRangeSysGeneratedType(
                dsMatchRuleLineOrigStatement,
                BankReconMatchRuleLineSysGeneratedType::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleLineStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event after data source of given buffer is initailized.
    /// </summary>
    /// <param name="_matchRuleLineStatement">
    /// the <c>BankReconciliationMatchRuleLine</c> buffer for finding statement lines.
    /// </param>
    public void initRuleLineStatementPost(BankReconciliationMatchRuleLine _matchRuleLineStatement)
    {
        if (!dsMatchRuleLineStatement)
        {
            dsMatchRuleLineStatement = FormDataUtil::getFormDataSource(_matchRuleLineStatement);
        }

        if (!isBankModernReconciliationFeatureEnabled)
        {
            this.queryAddRangeMatchRuleLineType(
                dsMatchRuleLineStatement,
                BankReconciliationMatchRuleLineType::Statement);
            this.queryAddRangeSysGeneratedType(
                dsMatchRuleLineStatement,
                BankReconMatchRuleLineSysGeneratedType::None);

            if (isSkipReversalFlagValidation)
            {
                this.queryAddRangeSysGeneratedType(
                    dsMatchRuleLineStatement,
                    BankReconMatchRuleLineSysGeneratedType::Reversal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMatchRulePostingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data source of <c>BankReconciliationMatchRule_PostingInfo</c> buffer.
    /// </summary>
    /// <param name="_matchRulePostingInfo">
    /// Given <c>BankReconciliationMatchRule_PostingInfo</c> buffer.
    /// </param>
    internal void initMatchRulePostingInfo(BankReconciliationMatchRule_PostingInfo _matchRulePostingInfo)
    {
        if (!dsMatchRulePostingInfo)
        {
            dsMatchRulePostingInfo = FormDataUtil::getFormDataSource(_matchRulePostingInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRuleLineSettleCustInvoicePost</Name>
				<Source><![CDATA[
    internal void initRuleLineSettleCustInvoicePost(BankReconciliationMatchRuleLine _matchRuleLineSettleCustInvoice, BankReconciliationMatchActionType _matchAction)
    {
        if (!dsMatchRuleLineSettleCustInvoice)
        {
            dsMatchRuleLineSettleCustInvoice = FormDataUtil::getFormDataSource(_matchRuleLineSettleCustInvoice);
        }

        this.setQueryRangeForMatchRuleLine(dsMatchRuleLineSettleCustInvoice, BankReconciliationMatchRuleViewModel::getLineTypeOfRuleLineMatchInvoice(_matchAction));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGroupRuleLineDocument</Name>
				<Source><![CDATA[
    public void initGroupRuleLineDocument(BankReconciliationGroupRuleLine _ruleLine)
    {
        if (!dsGroupRuleLineDocument)
        {
            dsGroupRuleLineDocument = FormDataUtil::getFormDataSource(_ruleLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustGroupRuleLineDocumentQuery</Name>
				<Source><![CDATA[
    public void adjustGroupRuleLineDocumentQuery()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor() as BankReconciliationMatchRule;
        QueryBuildDataSource qbds = dsGroupRuleLineDocument.queryBuildDataSource();
        qbds.clearRanges();
        qbds.addRange(fieldNum(BankReconciliationGroupRuleLine, BankReconciliationGroupRule)).value(queryValue(matchRule.BankDocumentGroupRule));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGroupRuleLineStatement</Name>
				<Source><![CDATA[
    public void initGroupRuleLineStatement(BankReconciliationGroupRuleLine _ruleLine)
    {
        if (!dsGroupRuleLineStatement)
        {
            dsGroupRuleLineStatement = FormDataUtil::getFormDataSource(_ruleLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustGroupRuleLineStatementQuery</Name>
				<Source><![CDATA[
    public void adjustGroupRuleLineStatementQuery()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor() as BankReconciliationMatchRule;
        QueryBuildDataSource qbds = dsGroupRuleLineStatement.queryBuildDataSource();
        qbds.clearRanges();
        qbds.addRange(fieldNum(BankReconciliationGroupRuleLine, BankReconciliationGroupRule)).value(queryValue(matchRule.BankStatementGroupRule));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueRuleLineDocumentPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values of <c>BankReconciliationMatchRuleLine</c> buffer for finding bank documents.
    /// </summary>
    /// <param name="_matchRuleLineDocument">
    /// Given <c>BankReconciliationMatchRuleLine</c> buffer for finding bank documents.
    /// </param>
    public void initValueRuleLineDocumentPost(BankReconciliationMatchRuleLine _matchRuleLineDocument)
    {
        matchRuleViewModel.dsRuleLineDocumentInitValuePost(_matchRuleLineDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueRuleLineOrigStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values of <c>BankReconciliationMatchRuleLine</c> buffer for finding original statement lines.
    /// </summary>
    /// <param name="_matchRuleLineOrigStatement">
    /// Given <c>BankReconciliationMatchRuleLine</c> buffer for finding original statement lines.
    /// </param>
    public void initValueRuleLineOrigStatementPost(BankReconciliationMatchRuleLine _matchRuleLineOrigStatement)
    {
        matchRuleViewModel.dsRuleLineOrigStatementInitValuePost(_matchRuleLineOrigStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueRuleLineStatementPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values of <c>BankReconciliationMatchRuleLine</c> buffer for finding statement lines.
    /// </summary>
    /// <param name="_matchRuleLineStatement">
    /// Given <c>BankReconciliationMatchRuleLine</c> buffer for finding statement lines.
    /// </param>
    public void initValueRuleLineStatementPost(BankReconciliationMatchRuleLine _matchRuleLineStatement)
    {
        matchRuleViewModel.dsRuleLineStatementInitValuePost(_matchRuleLineStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueRuleLineOrigDocumentPost</Name>
				<Source><![CDATA[
    internal void initValueRuleLineOrigDocumentPost(BankReconciliationMatchRuleLine _matchRuleLineOrigDocument)
    {
        matchRuleViewModel.dsRuleLineOrigDocumentInitValuePost(_matchRuleLineOrigDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueRuleLineCustInvoicePost</Name>
				<Source><![CDATA[
    internal void initValueRuleLineCustInvoicePost(BankReconciliationMatchRuleLine _matchRuleLineSettleCustInvoice)
    {
        matchRuleViewModel.dsRuleLineCustInvoiceInitValuePost(_matchRuleLineSettleCustInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueStatementGroupRuleLine</Name>
				<Source><![CDATA[
    public void initValueStatementGroupRuleLine(BankReconciliationGroupRuleLine _ruleLine)
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor() as BankReconciliationMatchRule;
        if (!matchRule.BankStatementGroupRule)
        {
            BankReconciliationGroupRule groupRule = BankReconciliationGroupRule::createNewRule(BankReconciliationGroupRuleType::BankStatementGroup);

            ttsbegin;
            matchRule.BankStatementGroupRule = groupRule.RecId;
            matchRule.doUpdate();
            ttscommit;

            dsMatchRule.reread();
        }

        _ruleLine.BankReconciliationGroupRule = matchRule.BankStatementGroupRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDocumentGroupRuleLine</Name>
				<Source><![CDATA[
    public void initValueDocumentGroupRuleLine(BankReconciliationGroupRuleLine _ruleLine)
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor() as BankReconciliationMatchRule;
        if (!matchRule.BankDocumentGroupRule)
        {
            BankReconciliationGroupRule groupRule = BankReconciliationGroupRule::createNewRule(BankReconciliationGroupRuleType::BankDocumentGroup);

            ttsbegin;
            matchRule.BankDocumentGroupRule = groupRule.RecId;
            matchRule.doUpdate();
            ttscommit;

            dsMatchRule.reread();
        }

        _ruleLine.BankReconciliationGroupRule = matchRule.BankDocumentGroupRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveRuleLineDocumentPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event before data source of matching rule line for document link active.
    /// </summary>
    public void linkActiveRuleLineDocumentPre()
    {
        matchRuleViewModel.dsMatchRuleLineLinkActivePre(dsMatchRuleLineDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveRuleLineOrigDocumentPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event before data source of matching rule line for original document link active.
    /// </summary>
    internal void linkActiveRuleLineOrigDocumentPre()
    {
        matchRuleViewModel.dsMatchRuleLineLinkActivePre(dsMatchRuleLineOrigDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveRuleLineOrigStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event before data source of matching rule line for original statement link active.
    /// </summary>
    public void linkActiveRuleLineOrigStatementPre()
    {
        matchRuleViewModel.dsMatchRuleLineLinkActivePre(dsMatchRuleLineOrigStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveRuleLineStatementPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event before data source of matching rule line for statement link active.
    /// </summary>
    public void linkActiveRuleLineStatementPre()
    {
        matchRuleViewModel.dsMatchRuleLineLinkActivePre(dsMatchRuleLineStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActiveRuleLineSettleCustInvoicePre</Name>
				<Source><![CDATA[
    internal void linkActiveRuleLineSettleCustInvoicePre()
    {
        matchRuleViewModel.dsMatchRuleLineLinkActivePre(dsMatchRuleLineSettleCustInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActivePostingInfoPre</Name>
				<Source><![CDATA[
    internal void linkActivePostingInfoPre()
    {
        matchRuleViewModel.dsMatchRuleLineLinkActivePre(dsMatchRulePostingInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupValueControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs lookup value control.
    /// </summary>
    /// <param name="_control">
    /// Value control to be looked up.
    /// </param>
    public void lookupValueControl(FormStringControl _control)
    {
        SysLookup::lookupRange(
            _control,
            matchRuleViewModel.getRangeOfLookupValue(),
            matchRuleViewModel.getQueryOfLookupValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyMatchActionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts after modifying field <c>MatchActionType</c> of table <c>BankReconciliationMatchRule</c>.
    /// </summary>
    public void modifyMatchActionType()
    {
        if (!isBankModernReconciliationFeatureEnabled)
        {
            // This already been called in dsMatchRule.active(), should be removed when the feature MBR being removed.
            this.updateDesignOfActionType();
        }

        dsMatchRule.refresh();
        dsMatchRule.active();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts after the rule id field is modified.
    /// </summary>
    public void modifyRuleId()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();

        if (matchRule.RuleId && !matchRule.RecId)
        {
            dsMatchRule.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySearchMatchingEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Acts after modifying field <c>SearchMatchingEntry</c> of table <c>BankReconciliationMatchRule</c>.
    /// </summary>
    public void modifySearchMatchingEntry()
    {
        this.updateDesignOfSearchMatchingEntry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchRule</Name>
				<Source><![CDATA[
    public FormDataSource parmDSMatchRule(FormDataSource _dsMatchRule = dsMatchRule)
    {
        dsMatchRule = _dsMatchRule;

        return dsMatchRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchRulePostingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data source of <c>BankReconciliationMatchRule_PostingInfo</c> buffer.
    /// </summary>
    /// <param name="_dsMatchRulePostingInfo">
    /// The data source of <c>BankReconciliationMatchRule_PostingInfo</c> buffer.
    /// </param>
    /// <returns>
    /// The data source of <c>BankReconciliationMatchRule_PostingInfo</c> buffer.
    /// </returns>
    internal FormDataSource parmDSMatchRulePostingInfo(FormDataSource _dsMatchRulePostingInfo = dsMatchRulePostingInfo)
    {
        dsMatchRulePostingInfo = _dsMatchRulePostingInfo;

        return dsMatchRulePostingInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchRuleLineDocument</Name>
				<Source><![CDATA[
    public FormDataSource parmDSMatchRuleLineDocument(FormDataSource _dsMatchRuleLineDocument = dsMatchRuleLineDocument)
    {
        dsMatchRuleLineDocument = _dsMatchRuleLineDocument;

        return dsMatchRuleLineDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchRuleLineOrigStatement</Name>
				<Source><![CDATA[
    public FormDataSource parmDSMatchRuleLineOrigStatement(FormDataSource _dsMatchRuleLineOrigStatement = dsMatchRuleLineOrigStatement)
    {
        dsMatchRuleLineOrigStatement = _dsMatchRuleLineOrigStatement;

        return dsMatchRuleLineOrigStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSMatchRuleLineStatement</Name>
				<Source><![CDATA[
    public FormDataSource parmDSMatchRuleLineStatement(FormDataSource _dsMatchRuleLineStatement = dsMatchRuleLineStatement)
    {
        dsMatchRuleLineStatement = _dsMatchRuleLineStatement;

        return dsMatchRuleLineStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchRuleFormRun</Name>
				<Source><![CDATA[
    public FormRun parmMatchRuleFormRun(FormRun _matchRuleFormRun = matchRuleFormRun)
    {
        matchRuleFormRun = _matchRuleFormRun;

        return matchRuleFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSGroupRuleLineDocument</Name>
				<Source><![CDATA[
    public FormDataSource parmDSGroupRuleLineDocument(FormDataSource _dsGroupRuleLineDocument = dsGroupRuleLineDocument)
    {
        dsGroupRuleLineDocument = _dsGroupRuleLineDocument;

        return dsGroupRuleLineDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDSGroupRuleLineStatement</Name>
				<Source><![CDATA[
    public FormDataSource parmDSGroupRuleLineStatement(FormDataSource _dsGroupRuleLineStatement = dsGroupRuleLineStatement)
    {
        dsGroupRuleLineStatement = _dsGroupRuleLineStatement;

        return dsGroupRuleLineStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the table field.
    /// </summary>
    /// <param name="_control">
    /// Form control to be looked up.
    /// </param>
    /// <param name="_tableId">
    /// Indicates which table fields will be looked up.
    /// </param>
    /// <returns>
    /// An instance of <c>SysTableFieldLookup</c>.
    /// </returns>
    public SysTableFieldLookup performLookup(FormStringControl _control, TableId _tableId)
    {
        TableId tableId = this.getTableId(_tableId);
        TmpSysTableField tmpSysTableField;
        tmpSysTableField.clear();
        tmpSysTableField.DictTableId = tableId;
        tmpSysTableField.insert();

        Query query = new Query();
        query.addDataSource(tableId);

        BankSysTableFieldLookup sysTableFieldLookup = new BankSysTableFieldLookup(query);
        sysTableFieldLookup.parmRestrictedTypes(this.getFieldLookupRestrictedTypeSet());
        sysTableFieldLookup.parmHideImages(true);

        if (isBankModernReconciliationFeatureEnabled
            && (_tableId == tableNum(BankReconciliationDocumentOpenTmp)
                || _tableId == tableNum(BankReconciliationStatementOpenTmp)))
        {
            sysTableFieldLookup.removeFields += eventhandler(this.removeFieldsForMatching);
        }

        if (_tableId == tableNum(BankReconciliationGroupDocumentOpenTmp) 
            || _tableId == tableNum(BankReconciliationGroupStatementOpenTmp))
        {
            sysTableFieldLookup.removeFields += eventhandler(this.removeFieldsForGrouping);
        }

        if (isBankModernReconciliationFeatureEnabled
            && (_tableId == tableNum(BankReconciliationStatementOpenView)
                || _tableId == tableNum(CustInvoiceForBankReconciliationView)))
        {
            sysTableFieldLookup.removeFields += eventhandler(this.removeFieldsForPostingActions);
        }

        sysTableFieldLookup.performLookupField(_control, tmpSysTableField);

        return sysTableFieldLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs <c>LegalEntity</c> field lookup on PostingParametersTab.
    /// </summary>
    /// <param name = "_formReferenceControl">Form reference group control to be looked up.</param>
    /// <param name = "_matchRuleId">The RecId of the current active matching rule.</param>
    /// <returns>An instance of <c>SysTableFieldLookup</c>.</returns>
    internal static Common lookupLegalEntity(FormReferenceControl _formReferenceControl, RecId _matchRuleId)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tablenum(CompanyInfo), _formReferenceControl);
        Query query = new Query();

        QueryBuildDataSource companyInfo_DS = query.addDataSource(tablenum(CompanyInfo));
        QueryBuildDataSource postingInfo_DS = companyInfo_DS.addDataSource(tablenum(BankReconciliationMatchRule_PostingInfo));
        // Excludes existing legal entity setups that have been added to the same matching rule.
        postingInfo_DS.addRange(fieldnum(BankReconciliationMatchRule_PostingInfo, BankReconciliationMatchRule))
            .value(queryValue(_matchRuleId));
        postingInfo_DS.addLink(fieldnum(CompanyInfo, RecId), fieldnum(BankReconciliationMatchRule_PostingInfo, LegalEntity));
        postingInfo_DS.joinMode(JoinMode::NoExistsJoin);

        sysTableLookup.addLookupfield(fieldnum(CompanyInfo, DataArea));
        sysTableLookup.addLookupfield(fieldnum(CompanyInfo, Name));

        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeMatchRuleLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data source range of matching rule line type.
    /// </summary>
    /// <param name="_dataSource">
    /// Given data source.
    /// </param>
    /// <param name="_matchRuleLineType">
    /// Indicates the value of matching rule line type.
    /// </param>
    protected void queryAddRangeMatchRuleLineType(FormDataSource _dataSource, BankReconciliationMatchRuleLineType _matchRuleLineType)
    {
        if (isBankModernReconciliationFeatureEnabled)
        {
            QueryBuildRange lineTypeRange = _dataSource.queryBuildDataSource().findRange(fieldNum(BankReconciliationMatchRuleLine, LineType));
            lineTypeRange = lineTypeRange ? lineTypeRange : _dataSource.queryBuildDataSource().addRange(fieldNum(BankReconciliationMatchRuleLine, LineType));
            lineTypeRange.value(queryValue(_matchRuleLineType));
        }
        else
        {
            _dataSource.queryBuildDataSource().addRange(fieldNum(BankReconciliationMatchRuleLine, LineType)).value(queryValue(_matchRuleLineType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAddRangeSysGeneratedType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data source range of system generated type.
    /// </summary>
    /// <param name="_dataSource">
    /// Given data source.
    /// </param>
    /// <param name="_sysGeneratedType">
    /// Indicates the value of system generated type.
    /// </param>
    protected void queryAddRangeSysGeneratedType(
        FormDataSource _dataSource,
        BankReconMatchRuleLineSysGeneratedType _sysGeneratedType)
    {
        if (isBankModernReconciliationFeatureEnabled)
        {
            QueryBuildRange sysGenLineTypeRange = _dataSource.queryBuildDataSource().findRange(fieldNum(BankReconciliationMatchRuleLine, SystemGeneratedType));
            sysGenLineTypeRange = sysGenLineTypeRange ? sysGenLineTypeRange : _dataSource.queryBuildDataSource().addRange(fieldNum(BankReconciliationMatchRuleLine, SystemGeneratedType));
            sysGenLineTypeRange.value(queryValue(enum2int(_sysGeneratedType)));
        }
        else
        {
            _dataSource.queryBuildDataSource().addRange(fieldNum(BankReconciliationMatchRuleLine, SystemGeneratedType)).value(queryValue(enum2int(_sysGeneratedType)));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    private TableId getTableId(TableId _tableId)
    {
        TableId tableId = _tableId;

        switch (_tableId)
        {
            case tableNum(BankReconciliationGroupDocumentOpenTmp):
                tableId = tableNum(BankReconciliationDocumentOpenTmp);
                break;

            case tableNum(BankReconciliationGroupStatementOpenTmp):
                tableId = tableNum(BankReconciliationStatementOpenTmp);
                break;

            default:
                break;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldsForPostingActions</Name>
				<Source><![CDATA[
    private void removeFieldsForPostingActions(TmpSysTableField _allFields, TableId _tableId)
    {
        while select FieldId from _allFields
        {
            if (!this.isFieldSupportForPostingActions(_tableId, _allFields.FieldId))
            {
                _allFields.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldsForMatching</Name>
				<Source><![CDATA[
    private void removeFieldsForMatching(TmpSysTableField _allFields, TableId _tableId)
    {
        switch(_tableId)
        {
            case tableNum(BankReconciliationDocumentOpenTmp):
                delete_from _allFields
                    where _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, BankReconciliationMatchingType)
                        || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, BankReconciliationMatchRuleId);
                break;

            case tableNum(BankReconciliationStatementOpenTmp):
                delete_from _allFields
                    where _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, BankReconciliationMatchingType)
                        || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, BankReconciliationMatchRuleId);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldsForGrouping</Name>
				<Source><![CDATA[
    private void removeFieldsForGrouping(TmpSysTableField _allFields, TableId _tableId)
    {
        if (BankReconciliationMatchingRuleDefaultGroupConditionFlight::instance().isEnabled())
        {
            while select FieldId from _allFields
            {
                if (BankReconciliationGroupRuleLine::isFieldExcludedFromGroupingActions(_tableId, _allFields.FieldId))
                {
                    _allFields.delete();
                }
            }
        }
        else
        {
            switch (_tableId)
            {
                case tableNum(BankReconciliationDocumentOpenTmp):
                    delete_from _allFields
                        where _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, BankCurrencyAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, Cancelled)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, CorrectionBankCurrencyAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, CreditAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, DebitAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, Description)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, IsMatched)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, Posted)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, IsReconciled)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, Status)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, TransactionCurrencyAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationDocumentOpenTmp, RecVersion);
                    break;

                case tableNum(BankReconciliationStatementOpenTmp):
                    delete_from _allFields
                        where _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, AdditionalEntryInformation)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, BankCurrencyAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, BankStatementCounterCurrencyAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, CreditAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, DebitAmount)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, BankStatementInstructedCurrencyAmt)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, IsMatched)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, IsNewBankDocument)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, Posted)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, Reconciled)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, Reversal)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, SequenceNum)
                            || _allFields.FieldId == fieldNum(BankReconciliationStatementOpenTmp, RecVersion);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets controls access.
    /// </summary>
    private void setControlsAccess()
    {
        this.setDocumentDiffDateControlsAccess();
        this.setOrigStatementDiffDateControlsAccess();
        this.setDocumentDiffAmountControlsAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentDiffAmountControlsAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets access property of control of different amount for bank document.
    /// </summary>
    private void setDocumentDiffAmountControlsAccess()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();

        editDocumentAllowAmountDifferenceControl.allowEdit(matchRule.editDocumentAllowAmountDifference(false, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentDiffDateControlsAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets access property of control of different days for bank document.
    /// </summary>
    private void setDocumentDiffDateControlsAccess()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();
        boolean allowEdit = matchRule.editDocumentAllowDifferentDate(false, false);

        editDocumentAllowedDateDifferenceControl.allowEdit(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusOfBankReconciliationMatchRulePostingSetupControl</Name>
				<Source><![CDATA[
    internal void updateStatusOfBankReconciliationMatchRulePostingSetupControl(boolean _hasLegalEntitySet)
    {
        bankReconciliationMatchRulePostingSetupControl.enabled(_hasLegalEntitySet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrigStatementDiffDateControlsAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets access property of control of different days for original bank statement line.
    /// </summary>
    private void setOrigStatementDiffDateControlsAccess()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();

        editOrigStatementAllowedDateDifferenceControl.allowEdit(matchRule.editOrigStatementAllowDifferentDate(false, false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignOfActionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tab layout in case action type is changed.
    /// </summary>
    /// <remarks>
    /// This method should be removed once the MBR is removed.
    /// </remarks>
    private void updateDesignOfActionType()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();
        boolean isSearchMatchingEntryEditable;
        boolean isDocumentOppositeAmountShown;
        FormTabControl parentTabControl = findBankDocumentsControl.parentControl() as FormTabControl;

        switch (matchRule.getMatchActionType())
        {
            case BankReconciliationMatchActionType::Match:
                matchingTypeControl.visible(FeatureStateProvider::isFeatureEnabled(BankReconciliationGroupMatchFeature::instance()));
                defineGroupConditionControl.visible(false);

                findBankDocumentsControl.visible(true);
                findBankDocumentsControl.expand();

                findStatementLinesControl.visible(true);
                findStatementLinesControl.collapse();

                parentTabControl.moveControl(findStatementLinesControl.id(), findBankDocumentsControl.id());

                findOrigStatementsControl.caption('');
                findOrigStatementsControl.visible(false);

                editStatementReversalControl.visible(false);

                isSearchMatchingEntryEditable = false;
                isDocumentOppositeAmountShown = false;

                this.updateDesignOfMatchingType();
                break;

            case BankReconciliationMatchActionType::Reversal:
                matchingTypeControl.visible(false);
                defineGroupConditionControl.visible(false);

                findStatementLinesControl.caption("@CashManagement:FindReversalStatementLines");
                findStatementLinesControl.visible(true);
                findStatementLinesControl.expand();

                findOrigStatementsControl.caption("@CashManagement:FindOriginalStatementLines");
                findOrigStatementsControl.visible(true);
                findOrigStatementsControl.collapse();

                parentTabControl.moveControl(findOrigStatementsControl.id(), findStatementLinesControl.id());

                findBankDocumentsControl.caption("@CashManagement:FindDynamicsAXTransactionsStep3");
                findBankDocumentsControl.visible(true);
                findBankDocumentsControl.collapse();

                parentTabControl.moveControl(findBankDocumentsControl.id(), findOrigStatementsControl.id());

                editStatementReversalControl.visible(!isSkipReversalFlagValidation);
                editDocumentAllowAmountDifferenceControl.visible(true);
                editDocumentAllowAmountDiffCheckBoxControl.allowEdit(true);

                isSearchMatchingEntryEditable = true;
                isDocumentOppositeAmountShown = true;
                break;

            case BankReconciliationMatchActionType::Adjustment:
                matchingTypeControl.visible(false);
                defineGroupConditionControl.visible(false);

                findStatementLinesControl.caption("@CashManagement:FindStatementLinesMarkNew");
                findStatementLinesControl.visible(true);
                findStatementLinesControl.expand();

                findBankDocumentsControl.caption("@CashManagement:FindDynamicsAXTransactionsStep2");
                findBankDocumentsControl.visible(true);
                findBankDocumentsControl.collapse();

                parentTabControl.moveControl(findBankDocumentsControl.id(), findStatementLinesControl.id());

                findOrigStatementsControl.caption('');
                findOrigStatementsControl.visible(false);

                editStatementReversalControl.visible(false);
                editDocumentAllowAmountDifferenceControl.visible(true);
                editDocumentAllowAmountDiffCheckBoxControl.allowEdit(true);

                isSearchMatchingEntryEditable = true;
                isDocumentOppositeAmountShown = false;
                break;
        }

        dsMatchRule.object(fieldNum(BankReconciliationMatchRule, SearchMatchingEntry)).allowEdit(isSearchMatchingEntryEditable);

        documentAllowedAmountDifferenceGroupControl.visible(!isDocumentOppositeAmountShown);
        editDocumentOppositeAmountControl.visible(isDocumentOppositeAmountShown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormControlLabels</Name>
				<Source><![CDATA[
    private void updateFormControlLabels()
    {
        editDocumentCompareFieldLabelControl.label("@Bank:BankStmtFieldName");
        editDocumentFieldLabelControl.label("@Bank:BankDocumentFieldName");
        editOrigStmtCompareFieldLabelControl.label("@Bank:RevrBankStmtFieldName");
        editOrigStmtFieldLabelControl.label("@Bank:OrigBankStmtFieldName");
        editStatementFieldLabelControl.label("@Bank:BankStmtFieldName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFormDesign</Name>
				<Source><![CDATA[
    private void resetFormDesign()
    {
        findStatementLinesControl.visible(false);
        findBankDocumentsControl.visible(false);
        findOrigStatementsControl.visible(false);
        postingParametersTabControl.visible(false);
        findCustInvoiceControl.visible(false);
        origDocumentControl.visible(false);
        reversalDocumentControl.visible(false);
        matchingTypeControl.visible(false);
        defineGroupConditionControl.visible(false);
        editStatementReversalControl.visible(false);
        editDocumentOppositeAmountControl.visible(false);
        documentAllowedAmountDifferenceGroupControl.visible(false);
        sameAmountCrDrIndicatorControl.visible(false);
        findCustInvoiceAddButton.helpText('');
        bankReconciliationMatchRule_SearchMatchingEntryControl.allowEdit(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignOfMatchActionTypeV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tab layout in case action type is changed.
    /// </summary>
    private void updateDesignOfMatchActionTypeV2()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();
        BankReconciliationMatchActionType matchAction = matchRule.getMatchActionType();
        FormTabControl parentTabControl = findBankDocumentsControl.parentControl() as FormTabControl;

        this.resetFormDesign();

        switch (matchAction)
        {
            case BankReconciliationMatchActionType::Match:
                matchingTypeControl.visible(FeatureStateProvider::isFeatureEnabled(BankReconciliationGroupMatchFeature::instance()));

                findBankDocumentsControl.visible(true);

                parentTabControl.moveControl(findStatementLinesControl.id(), findBankDocumentsControl.id());

                documentAllowedAmountDifferenceGroupControl.visible(true);

                bankReconciliationMatchRule_SearchMatchingEntryControl.allowEdit(false);

                this.updateDesignOfMatchingType();
                break;

            case BankReconciliationMatchActionType::Reversal:
                findStatementLinesControl.caption("@CashManagement:FindReversalStatementLines");

                findOrigStatementsControl.caption("@CashManagement:FindOriginalStatementLines");
                findOrigStatementsControl.visible(true);

                parentTabControl.moveControl(findOrigStatementsControl.id(), findStatementLinesControl.id());

                findBankDocumentsControl.caption("@CashManagement:FindDynamicsAXTransactionsStep3");
                findBankDocumentsControl.visible(true);

                parentTabControl.moveControl(findBankDocumentsControl.id(), findOrigStatementsControl.id());

                editStatementReversalControl.visible(!isSkipReversalFlagValidation);
                editDocumentAllowAmountDifferenceControl.visible(true);
                editDocumentAllowAmountDiffCheckBoxControl.allowEdit(true);

                editDocumentOppositeAmountControl.visible(true);
                break;

            case BankReconciliationMatchActionType::Adjustment:
                findStatementLinesControl.caption("@CashManagement:FindStatementLinesMarkNew");

                findBankDocumentsControl.caption("@CashManagement:FindDynamicsAXTransactionsStep2");
                findBankDocumentsControl.visible(true);

                parentTabControl.moveControl(findBankDocumentsControl.id(), findStatementLinesControl.id());

                editDocumentAllowAmountDifferenceControl.visible(true);
                editDocumentAllowAmountDiffCheckBoxControl.allowEdit(true);

                documentAllowedAmountDifferenceGroupControl.visible(true);
                break;

            case BankReconciliationMatchActionType::TransactionReversal:
                reversalDocumentControl.visible(true);
                origDocumentControl.visible(true);
                break;

            case BankReconciliationMatchActionType::CustPaym:
                findStatementLinesControl.caption("@Bank:GenCustPaymCondition");
                postingParametersTabControl.caption("@Bank:CustPaymParameter");
                findCustInvoiceControl.caption("@Bank:SecondStepOfFindInvoiceInGenCustPaym");
                findCustInvoiceAddButton.helpText("@Bank:SecondStepOfFindInvoiceInGenCustPaymHelpText");
                findCustInvoiceControl.visible(true);
                break;

            case BankReconciliationMatchActionType::VendPaym:
                findStatementLinesControl.caption("@Bank:GenVendPaymCondition");
                postingParametersTabControl.caption("@Bank:VendPaymParameter");
                break;

            case BankReconciliationMatchActionType::Voucher:
                findStatementLinesControl.caption("@Bank:GenVoucherCondition");
                postingParametersTabControl.caption("@Bank:VoucherParameter");
                break;

            case BankReconciliationMatchActionType::SettleCustInv:
                findStatementLinesControl.caption("@Bank:GenCustPaymCondition");
                postingParametersTabControl.caption("@Bank:CustPaymParameter");
                findCustInvoiceControl.caption("@Bank:SecondStepForSettleConditions");
                findCustInvoiceControl.visible(true);
                sameAmountCrDrIndicatorControl.visible(true);
                break;

            default:
                break;
        }

        findStatementLinesControl.visible(matchAction != BankReconciliationMatchActionType::TransactionReversal);

        findStatementLinesControl.enabled(matchAction != BankReconciliationMatchActionType::Adjustment);
        findBankDocumentsControl.enabled(matchAction != BankReconciliationMatchActionType::Adjustment);

        postingParametersTabControl.visible(BankReconciliationMatchRuleProcessor::isPostingRule(matchAction));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignOfMatchingType</Name>
				<Source><![CDATA[
    internal void updateDesignOfMatchingType()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();

        if (BankReconciliationMatchingRuleDefaultGroupConditionFlight::instance().isEnabled())
        {
            boolean isEnableGroupBankTransaction = matchRule.isGroupBankTransaction();
            boolean isEnableGroupBankStatement = matchRule.isGroupBankStatement();
            boolean isEnableGroupRule = isEnableGroupBankTransaction || isEnableGroupBankStatement;

            this.updateTabsForGrouping(isEnableGroupRule, isEnableGroupBankTransaction, isEnableGroupBankStatement);
            editDocumentAllowAmountDifferenceControl.visible(!isEnableGroupRule);
            editDocumentAllowAmountDiffCheckBoxControl.allowEdit(!isEnableGroupRule);
        }
        else
        {
            FormTabControl parentTabControl = findBankDocumentsControl.parentControl() as FormTabControl;

            switch (matchRule.MatchingType)
            {
                case BankReconciliationStmtMatchMathingType::OneToOne:
                    this.updateTabsForGrouping(false);
                    editDocumentAllowAmountDifferenceControl.visible(true);
                    editDocumentAllowAmountDiffCheckBoxControl.allowEdit(true);
                    break;

                case BankReconciliationStmtMatchMathingType::OneToMany:
                    this.updateTabsForGrouping(true, true);
                    editDocumentAllowAmountDifferenceControl.visible(false);
                    editDocumentAllowAmountDiffCheckBoxControl.allowEdit(false);
                    break;

                case BankReconciliationStmtMatchMathingType::ManyToOne:
                    this.updateTabsForGrouping(true, false, true);
                    editDocumentAllowAmountDifferenceControl.visible(false);
                    editDocumentAllowAmountDiffCheckBoxControl.allowEdit(false);
                    break;

                case BankReconciliationStmtMatchMathingType::ManyToMany:
                    this.updateTabsForGrouping(true, true, true);
                    editDocumentAllowAmountDifferenceControl.visible(false);
                    editDocumentAllowAmountDiffCheckBoxControl.allowEdit(false);
                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusOfEditStatementField</Name>
				<Source><![CDATA[
    internal void updateStatusOfEditStatementField(BankReconciliationMatchRuleLine _matchRuleLineStatement)
    {
        // field of system generated match rule line can not be edited.
        editStatementFieldLabelControl.allowEdit(
            _matchRuleLineStatement.SystemGeneratedType == BankReconMatchRuleLineSysGeneratedType::None
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTabsForGrouping</Name>
				<Source><![CDATA[
    private void updateTabsForGrouping(boolean _showGroupTab, boolean _showBankTransTab = false, boolean _showBankStmtTab = false)
    {
        if (!_showGroupTab)
        {
            findBankDocumentsControl.caption(strFmt("@CashManagement:DefineMatchingRule", '1'));
            findStatementLinesControl.caption(strFmt("@CashManagement:FindStatementLines", '2'));
        }
        else
        {
            findBankDocumentsControl.caption(strFmt("@CashManagement:DefineMatchingRule", '2'));
            findStatementLinesControl.caption(strFmt("@CashManagement:FindStatementLines", '3'));
        }

        defineGroupConditionControl.visible(_showGroupTab);
        groupBankTransactionControl.visible(_showBankTransTab);
        groupBankStatementControl.visible(_showBankStmtTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignOfSearchMatchingEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tab layout in case searching matching entry is changed.
    /// </summary>
    private void updateDesignOfSearchMatchingEntry()
    {
        BankReconciliationMatchRule matchRule = dsMatchRule.cursor();
        boolean isFindDocumentCriteriaGroupEnable = matchRule.isSearchingMatchingEntry();

        bankDocumentBasicCriteriaGroupControl.enabled(isFindDocumentCriteriaGroupEnable);
        bankDocumentAdditionalCriteriaGroupControl.enabled(isFindDocumentCriteriaGroupEnable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankReconciliationMatchRuleFormView</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>BankReconciliationMatchRuleFormView</c> class.
    /// </returns>
    public static BankReconciliationMatchRuleFormView construct()
    {
        return new BankReconciliationMatchRuleFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesignOfActivationButtons</Name>
				<Source><![CDATA[
    private void updateDesignOfActivationButtons(BankReconciliationMatchRule _bankReconciliationMatchRule)
    {
        if (_bankReconciliationMatchRule.isActivated())
        {
            bankReconciliationMatchRuleActivateControl.enabled(false);
            bankReconciliationMatchRuleDeactivateControl.enabled(true);
        }
        else
        {
            bankReconciliationMatchRuleActivateControl.enabled(true);
            bankReconciliationMatchRuleDeactivateControl.enabled(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>