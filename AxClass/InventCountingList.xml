<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCountingList</c> class is a controller class for the <c>InventCountingList</c> report.
/// </summary>
public class InventCountingList extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyQueryAndParameters</Name>
				<Source><![CDATA[
    private void modifyQueryAndParameters()
    {
        InventDimParm           inventDimParm;

        InventJournalTable inventJournalTable = this.parmArgs().record() as InventJournalTable;
        InventJournalId journalId = inventJournalTable.JournalId;

        InventDimFixedClass::inventDimFixed2InventDimParm(inventJournalTable.InventDimFixed, inventDimParm);

        InventDimViewRdlContractWrapper inventDimViewRdlContractWrapper = InventDimViewRdlContractWrapper::newFromRdlDataContract(this.parmReportContract().parmRdlContract());
        inventDimViewRdlContractWrapper.setInventDimParmValue(inventDimParm);

        Query query = this.getFirstQuery();
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(InventJournalTrans));

        if (journalId)
        {
            QueryBuildRange queryBuildRangeJournal = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventJournalTrans, JournalId));
            queryBuildRangeJournal.value(queryValue(journalId));
            queryBuildRangeJournal.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides ability to modify the report contract before a dialog box is displayed.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract.This method is called only during interactive
    /// scenario, before rendering the UI to user.For batch scenario, this method is not called since there
    /// is no user interaction and contract values are already saved in batch.Do not create any instance
    /// variables in this code if they are used during the lifetime of controller. These will fail in batch
    /// cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        this.modifyQueryAndParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCountingList construct()
    {
        return new InventCountingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventCountingList controller = InventCountingList::newFromArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventCountingList</c> class.
    /// </summary>
    /// <param name="_args">
    /// Input arguments.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventCountingList</c> class.
    /// </returns>
    public static InventCountingList newFromArgs(Args _args)
    {
        if (!_args || !(_args.record() is InventJournalTable))
        {
            throw(error(strFmt("@SYS113735", classStr(InventCountingList), tableStr(InventJournalTable))));
        }

        InventCountingList controller = InventCountingList::construct();
        controller.parmReportName(ssrsReportStr(InventCountingList, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
