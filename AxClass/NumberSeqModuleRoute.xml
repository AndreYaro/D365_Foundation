<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModuleRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class NumberSeqModuleRoute extends NumberSeqApplicationModule
{
    boolean         sameAsChecked;
    boolean         sameAsActive;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>
    /*
    Detailed description of how to setup references for number sequences can
    be found i method loadModule() on the 'father' class: NumberSeqApplicationModule.
    */

    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();
        /* Setup Route id */

        datatype.parmDatatypeId(extendedtypenum(RouteId));
        datatype.parmReferenceHelp(literalstr("@SYS53851"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardFetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        return NumberSeqModule::Route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sameAsActive</Name>
				<Source><![CDATA[
    public boolean sameAsActive()
    {
        NumberSequenceDatatype  numberSequenceDatatype;
        TmpIdRef                tmpIdRef;

        if (sameAsChecked)
            return sameAsActive;

        tmpIdRef.setTmpData(NumberSeqApplicationModule::configurationKeyTableMulti(
            [NumberSeqModule::Invent,NumberSeqModule::BOM,NumberSeqModule::WMS,NumberSeqModule::RFID]));

        select firstonly RecId from numberSequenceDatatype
        where
            (numberSequenceDatatype.Module == NumberSeqModule::Prod) &&
            numberSequenceDatatype.DataTypeSameAsId  != 0
            exists join tmpIdRef where tmpIdRef.Id == numberSequenceDatatype.ConfigurationKeyId;

        sameAsActive    = numberSequenceDatatype.RecId ? true : false;
        sameAsChecked   = true;

        return sameAsActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModuleRoute), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>