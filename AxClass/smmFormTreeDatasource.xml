<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmFormTreeDatasource</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmmFormTreeDatasource
{
    const str treeList = "TreeList";

    str                     images[];
    int                     oldIdx;
    int                     newIdx;
    FormBuildGroupControl   formBuildGroupControl;
    FormDataSource          formDataSource;
    FormTreeControl         tree;
    recId                   basicRecId;
    boolean                 showIdInDescription;
    Common                  childCommon;
    Set                     doneNode;
    container               originalQuery;
    fieldId                 id;
    fieldId                 parentId;
    fieldId                 txt;
    tableId                 tableId;
    DialogField             dialogId;
    DialogField             dialogTxt;
    DialogField             dialogParentId;
    FormRun                 createDialogFormRun;
    int                     dragIdx;
    anytype                 selectedData;
    Stack                   selectionStack;
    int                     selectIdx;
    boolean                 inheritDataSourceMode;
    int                     dropIdx;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        selectedData
    #endmacro

    const int lookupNever = 1;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addItem</Name>
				<Source><![CDATA[
    protected int addItem(FormTreeItem _formTreeItem, int _parentIdx, Common _childRecord, int _children, anytype _idValue)
    {
        int         idx;
        int         idxCurrentRecord;
        str         selectedDataStr;
        _formTreeItem    = this.modifyFormTreeItem(_formTreeItem);

        idx = tree.addItem(_parentIdx, 0, _formTreeItem);

        if (basicRecId == _childRecord.RecId)
        {
            idxCurrentRecord = idx;
        }

        // Make sure the selectedDataStr is a string
        if (typeof(selectedData) == Types::Integer)
        {
            selectedDataStr = int2str(selectedData);
        }

        if (selectionStack.qty())
        {
            if (_idValue == SelectedData)
            {
                tree.expand(idx, FormTreeExpand::Expand);
            }
        }
        else
        {
            if (selectedDataStr)
            {
                if (_idValue == selectedDataStr)
                {
                    selectIdx = idx;
                }
            }
            else
            {
                if (_idValue == selectedData)
                {
                    selectIdx = idx;
                }
            }
        }
        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginDrag</Name>
				<Source><![CDATA[
    public int beginDrag(int _x, int _y)
    {
        [dragIdx] = tree.hitTest(_x, _y);

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDynaLinks</Name>
				<Source><![CDATA[
    protected Query buildDynaLinks(Query _query)
    {
        #define.buildRange("\"%1\"")

        QueryBuildDynalink      queryBuildDynalink;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    newQueryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        int                     dynaCounter;

        if (!formDataSource.queryRun())
        {
            return _query;
        }

        queryBuildDataSource    = formDataSource.queryRun().query().dataSourceNo(1);
        newQueryBuildDataSource = _query.dataSourceNo(1);

        for (dynaCounter = 1; dynaCounter <= queryBuildDataSource.dynalinkCount(); dynaCounter++)
        {
            queryBuildDynalink  = queryBuildDataSource.dynalink(dynaCounter);
            queryBuildRange     = newQueryBuildDataSource.findRange(queryBuildDynalink.field());

            if (!queryBuildRange)
            {
                queryBuildRange = newQueryBuildDataSource.addRange(queryBuildDynalink.field());
            }

            queryBuildRange.value(strfmt(#buildRange, queryBuildDynalink.cursor().(queryBuildDynalink.dynamicField())));
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    protected int buildSubTree(int _parentIdx, anytype _parentValue, boolean _rebuild = false)
    {
        FormTreeItem    formTreeItem;
        Common          childRecord;
        QueryRun        childQuery;
        int             children;
        int             idx;
        int             idxCurrentRecord;
        int             hdl;
        anytype         idValue;
        int             type;
        str             selectedDataStr;

        if (_rebuild || !doneNode.in([_parentIdx]))
        {
            // Delete existing subtree
            if (_rebuild)
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    doneNode.remove([hdl]);
                    tree.delete(hdl);
                    hdl = tree.getChild(_parentIdx);
                }
            }

            [SelectedData] = selectionStack.pop();

            children = 0;

            childQuery = this.subTreeQueryRun(_parentValue);

            while (childQuery.next())
            {
                childRecord = childQuery.get(formDataSource.table());
                this.getChildRecord(childRecord);

                idValue = childRecord.(id);

                formTreeItem = new FormTreeItem(this.itemText(childRecord.(id),
                                                childRecord.(txt)),
                                                0,
                                                this.subTreeQueryRun(childRecord.(id)).next(),
                                                idValue);

                formTreeItem    = this.modifyFormTreeItem(formTreeItem);

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                if (basicRecId == childRecord.RecId)
                {
                    idxCurrentRecord = idx;
                }

                children++;

                type = typeof(selectedData);

                if (type == Types::Integer)
                {
                    selectedDataStr = int2str(selectedData);
                }

                if (selectionStack.qty())
                {
                    if (idValue == SelectedData)
                    {
                        tree.expand(idx, FormTreeExpand::Expand);
                    }
                }
                else
                {
                    if (selectedDataStr)
                    {
                        if (idValue == selectedDataStr)
                        {
                            selectIdx = idx;
                        }
                    }
                    else
                    {
                        if (idValue == SelectedData)
                        {
                            selectIdx = idx;
                        }
                    }
                }
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            tree.setItem(formTreeItem);
        }

        doneNode.add([_parentIdx]);

        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlValue</Name>
				<Source><![CDATA[
    protected anytype controlValue(Object _buildControl, Types _baseType)
    {
        const str blank = "";

        Object  runControl;

        runControl = createDialogFormRun.design().control(_buildControl.id());

        switch (_baseType)
        {
            case Types::String:
                return runControl.text();

            case Types::VarString:
                return runControl.text();

            case Types::Integer:
                return runControl.value();

            case Types::Real:
                return runControl.realValue();

            case Types::Date:
                return runControl.dateValue();

            case Types::Enum:
                return runControl.selection();

            default :
                return blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public boolean create()
    {
        Dialog dialog = this.createDialog();

        if (dialog.run())
        {
            createDialogFormRun = dialog.formRun();
            this.created();

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>created</Name>
				<Source><![CDATA[
    protected void created()
    {
        int                 idx = tree.getSelection();
        Common              common;
        DictTable           dictTable;
        DictField           dictField;
        DictFieldGroup      dictFieldGroup;
        Object              formBuildControl;
        boolean             validateResult;
        int                 counter;

        dictTable           = new DictTable(formDataSource.cursor().TableId);
        common              = dictTable.makeRecord();
        dictFieldGroup      = new DictFieldGroup(dictTable.id(), treeList);
        common.(parentId)   = tree.getItem(idx).data();
        validateResult      = true;

        if (dictFieldGroup)
        {
            common.initValue();
            common = this.initValue(common);

            for (counter = 1; (validateResult && counter <= dictFieldGroup.numberOfFields()); counter++)
            {
                dictField        = new DictField(dictTable.id(), dictFieldGroup.field(counter));
                formBuildControl = formBuildGroupControl.controlNum(counter);

                common.(dictField.id()) = this.controlValue(formBuildControl, dictField.baseType());
                validateResult = common.validateField(dictField.id());
            }

            if (validateResult && common.validateWrite())
            {
                common.insert();
                basicRecId = common.RecId;
                tree.setFocus();
                // Build the tree from root as user may select parent id in dialog to create children for non-active nodes also
                this.buildSubTree(tree.getRoot(), tree.getItem(tree.getRoot()).data(), true);
                tree.select(idx);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDialog</Name>
				<Source><![CDATA[
    protected Dialog createDialog()
    {
        DictTable       dictTable   = new DictTable(formDataSource.table());
        Dialog          dialog      = new Dialog(dictTable.label());
        SysDictField    sysDictField;
        DialogGroup     dialogGroup;
        DictFieldGroup  dictFieldGroup;
        DialogField     dialogField;
        int             counter;

        dialogGroup             =  dialog.addGroup('');
        formBuildGroupControl   =  dialogGroup.formGroup();

        formBuildGroupControl.frameType(1);

        dictFieldGroup = new DictFieldGroup(dictTable.id(), treeList);

        if (dictFieldGroup)
        {
            for (counter = 1; counter <= dictFieldGroup.numberOfFields(); counter++)
            {
                sysDictField = new SysDictField(dictTable.id(), dictFieldGroup.field(counter));
                dialogField  = dialog.addField(sysDictField.typeName(), sysDictField.label());

                if (id == sysDictField.id())
                {
                    dialogField.lookupButton(lookupNever);
                }
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        FormTreeItem    formTreeItem;
        int             idx;
        Common          common;

        idx             = tree.getSelection();
        formTreeItem    = tree.getItem(idx);
        common          = formDataSource.cursor();

        if (idx == tree.getRoot())
        {
            return;
        }

        if (formTreeItem.children())
        {
            // The transaction cannot be deleted
           throw warning("@SYS80045");
        }

        if (common.validateDelete())
        {
            // Do you want to delete %1?
            //if (Box::yesNo(strfmt("@SYS55298", formTreeItem.text()), DialogButton::No) == DialogButton::Yes)
            //Sepearted commented UI logic into method deleteUI and override it in extended to return true.
            if (this.deleteUI(formTreeItem))
            {
                DocuRef docRef;
                if (common.TableId == TableNum(smmEncyclopediaItems))
                {
                    smmEncyclopediaItems smmEncyclopediaItems = common;
                    docRef = smmEncyclopediaItems.getDocuRef();
                }

                ttsbegin;
                common.delete();

                if (docRef.RecId)
                {
                    docRef.selectForUpdate(true);
                    docRef.delete();
                }
                ttscommit;

                formTreeItem = tree.getItem(tree.getSelection());

                int nextSibling = tree.getNextSibling(formTreeItem.idx());
                int prevSibling = tree.getPrevSibling(formTreeItem.idx());
                int parent = tree.getParent(formTreeItem.idx());

                tree.delete(idx);

                doneNode.remove([idx]);

                if (nextSibling)
                {
                    tree.select(nextSibling);
                }
                else if (prevSibling)
                {
                    tree.select(prevSibling);
                }
                else if (parent)
                {
                    tree.select(parent);
                    this.buildSubTree(parent, tree.getItem(parent).data(), true);
                }
                else
                {
                    tree.select(tree.getRoot());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUI</Name>
				<Source><![CDATA[
    protected boolean deleteUI(FormTreeItem formTreeItem)
    {
        boolean ret;
        if (Box::yesNo(strfmt("@SYS55298", formTreeItem.text()), DialogButton::No) == DialogButton::Yes)
            ret = true;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dragLeave</Name>
				<Source><![CDATA[
    public void dragLeave()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dragOver</Name>
				<Source><![CDATA[
    public FormDrag dragOver(FormControl _dragSource, int _x, int _y)
    {
        int idx;

        if (_dragSource.equal(tree))
        {
            [idx] = tree.hitTest(_x, _y);

            if (idx < 0)
            {
                idx = 0;
            }
            this.setDropInsertMark(idx);

            return FormDrag::Move;
        }

        return FormDrag::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>drop</Name>
				<Source><![CDATA[
    public void drop(FormControl _dragSource, int _x, int _y)
    {
        int                 idx;
        anytype             data;
        anytype             parentData;
        FormTreeItem        formTreeItem;
        Name                name;
        DictTable           dictTable;
        Common              common;
        Common              parentCommon;

        [idx] = tree.hitTest(_x, _y);

        if (_dragSource.equal(tree))
        {
            formTreeItem    = tree.getItem(dragIdx);

            if (!formTreeItem)
            {
                return;
            }

            name            = formTreeItem.text();
            data            = formTreeItem.data();
            formTreeItem    = tree.getItem(idx);

            if (!formTreeItem)
            {
                return;
            }

            parentData = formTreeItem.data();

            if (idx == dragIdx)
            {
                return;
            }

            dictTable       = new DictTable(formDataSource.cursor().TableId);
            parentCommon    = dictTable.makeRecord();

            if (!this.validateMove(parentCommon, data, parentData))
            {
                // '%1' cannot be moved to '%2'
                throw warning(strfmt("@SYS80046", name, formTreeItem.text()));
            }

            // Move '%1'?
            if (Box::yesNo(strfmt("@SYS80047", name),DialogButton::No) == DialogButton::Yes)
            {
                common      = dictTable.makeRecord();

                ttsbegin;

                select forupdate common where common.(id) == data;

                common.(parentId) = parentData;
                common.update();

                ttscommit;

                if (common)
                {
                    tree.moveItem(dragIdx, idx);
                    doneNode.add([idx]);
                    doneNode.add([dragIdx]);
                }
            }
        }

        tree.select(idx);

        tree.expand(idx, FormTreeExpand::Expand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expanding</Name>
				<Source><![CDATA[
    public void expanding(int _idx, FormTreeExpand _action, anytype _data,boolean _rebuild = false)
    {
        if (_action == FormTreeExpand::Expand)
        {
            this.buildSubTree(_idx, _data,_rebuild);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    public void finalize()
    {
        this.savePosition();
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    public int first()
    {
        int idx;

        idx = tree.getFirstVisible();

        if (idx)
        {
            tree.select(idx);
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildRecord</Name>
				<Source><![CDATA[
    protected Common getChildRecord(Common _childCommon = childCommon)
    {
        childCommon = _childCommon;

        return childCommon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelations</Name>
				<Source><![CDATA[
    protected void getRelations(anytype _startId)
    {
        Common          common;
        DictTable       dictTable;

        dictTable   = new DictTable(tableId);
        common      = dictTable.makeRecord();

        select common where common.(id) == _startId;

        if (common)
        {
            selectionStack.push([_startId]);
            this.getRelations(common.(parentId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSmmEMailGroupId</Name>
				<Source><![CDATA[
    public smmEMailGroupId getSmmEMailGroupId()
    {
        smmEmailMembers smmEmailMembers;
        smmEMailGroupId smmEMailGroupId;
        Common          common;

        common = formDataSource.cursor();

        if (common.TableId == tablenum(smmEmailMembers))
        {
            smmEmailMembers = common;
            smmEMailGroupId = smmEmailMembers.GroupId;
        }

        return smmEMailGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    protected Imagelist imageList()
    {
        #Resource

        Imagelist       imagelist;
        Common          common;

        common = formDataSource.cursor();

        if (common.TableId == tablenum(smmEmailMembers))
        {
            imagelist = new Imagelist(Imagelist::smallIconWidth(), Imagelist::smallIconHeight());
            imagelist.add(new Image(#RES_NODE_USERS));
            imagelist.add(new Image(#RES_NODE_USER));
        }

        return imagelist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeChildQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun initializeChildQueryRun(int _parentIdx, anytype _parentValue, boolean _rebuild = false)
    {
        QueryRun        childQueryRun;
        int             hdl;

        if (_rebuild || !tree.getItem(_parentIdx).stateExpandedOnce())
        {
            // Delete existing subtree
            if (_rebuild)
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    tree.delete(hdl);
                    hdl = tree.getChild(_parentIdx);
                }
            }

            [SelectedData] = selectionStack.pop();

            // Build QueryRun Object
            childQueryRun = this.subTreeQueryRun(_parentValue);
        }

        return childQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRoot</Name>
				<Source><![CDATA[
    public void initRoot(str 250 _txt, anytype _rootValue, int _rootImage = 0)
    {
        int             root;
        FormTreeItem    formTreeItem = new FormTreeItem(_txt, _rootImage, 1, _rootValue);

        tree.deleteAll();

        doneNode    = null;
        doneNode    = new Set(Types::Container);
        root        = tree.addItem(0, 0, formTreeItem);

        tree.expand(root);

        if (selectIdx)
        {
            tree.select(selectIdx);
        }
        else
        {
            if (tree.getNextVisible(tree.getRoot()))
            {
                tree.select(tree.getNextVisible(tree.getRoot()));
            }
            else
            {
                tree.select(tree.getRoot());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select the root node for tree.
    /// </summary>
    public void selectRoot()
    {
        tree.select(tree.getRoot());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected Common initValue(Common _common)
    {
        return _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemText</Name>
				<Source><![CDATA[
    protected str itemText(anytype _idTxt, anytype _descriptionTxt)
    {
        #define.formatString1('\%1')
        #define.formatString2('\%1, \%2')

        str itemTxt;

        if (showIdInDescription)
        {
            itemTxt = strfmt(#formatString2, _idTxt, _descriptionTxt);
        }
        else
        {
            itemTxt = strfmt(#formatString1, _descriptionTxt);
        }

        return itemTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>last</Name>
				<Source><![CDATA[
    public int last()
    {
        int idx = tree.getSelection();

        while (tree.getNextVisible(idx))
        {
            idx = tree.getNextVisible(idx);
        }

        if (idx)
        {
            tree.select(idx);
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifierName lastValueElementName()
    {
        return classId2Name(classidget(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curuserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPosition</Name>
				<Source><![CDATA[
    private void loadPosition()
    {
        xSysLastValue::getLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modified</Name>
				<Source><![CDATA[
    public void modified()
    {
        FormTreeItem    newFormTreeItem;
        FormTreeItem    oldFormTreeItem;
        Common          common;
        Common          queryCommon;
        DictTable       dictTable;

        // <common> table data is fetched using record level security
        common.recordLevelSecurity(true);

        oldFormTreeItem = tree.getItem(oldIdx);
        newFormTreeItem = tree.getItem(newIdx);

        queryCommon     = formDataSource.cursor();
        dictTable       = new DictTable(queryCommon.TableId);
        common          = dictTable.makeRecord();

        if (oldFormTreeItem)
        {
            if (queryCommon.(id) == oldFormTreeItem.data())
            {
                select common where common.(id) == oldFormTreeItem.data();

                oldFormTreeItem.text(this.itemText(common.(id), common.(txt)));
                tree.setItem(oldFormTreeItem);
            }
            else
            if (queryCommon.(id) == newFormTreeItem.data())
            {
                select common where common.(id) == newFormTreeItem.data();

                newFormTreeItem.text(this.itemText(common.(id), common.(txt)));
                tree.setItem(newFormTreeItem);
            }
        }
        else
        if (queryCommon.(id) == newFormTreeItem.data())
        {
            select common where common.(id) == newFormTreeItem.data();

            newFormTreeItem.text(this.itemText(common.(id), common.(txt)));
            tree.setItem(newFormTreeItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyFormTreeItem</Name>
				<Source><![CDATA[
    protected FormTreeItem modifyFormTreeItem(FormTreeItem _formTreeItem)
    {
        return _formTreeItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormDataSource     _formDataSource,
                    FormTreeControl    _formTreeControl,
                    fieldId            _id,
                    fieldId            _parentId,
                    fieldId            _txt,
                    boolean            _showIdInDescription = true,
                    boolean            _inheritDataSourceMode = false)
    {
        QueryRun    queryRun;

        formDataSource          = _formDataSource;
        tree                    = _formTreeControl;
        doneNode                = new Set(Types::Container);
        id                      = _id;
        parentId                = _parentId;
        txt                     = _txt;
        showIdInDescription     = _showIdInDescription;
        inheritDataSourceMode   = _inheritDataSourceMode;
        tableId                 = _formDataSource.table();
        selectionStack          = new Stack();
        queryRun                = new QueryRun(_formDataSource.query());
        originalQuery           = queryRun.pack(false);

        tree.setImagelist(this.imageList());

        this.loadPosition();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public int next()
    {
        int idx;

        idx = tree.getNextVisible(tree.getSelection());

        if (idx)
        {
            tree.select(idx);
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prev</Name>
				<Source><![CDATA[
    public int prev()
    {
        int idx;

        idx = tree.getPrevVisible(tree.getSelection());

        if (idx)
        {
            tree.select(idx);
        }

        return idx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        FormTreeItem    formTreeItem;
        Common          queryCommon;
        anytype         idValue;

        formTreeItem = tree.getItem(tree.getSelection());

        queryCommon = formDataSource.cursor();

        if (formTreeItem)
        {
            if (queryCommon.(id) != formTreeItem.data())
            {
                idValue = queryCommon.(id);
                formTreeItem.text(this.itemText(queryCommon.(id), queryCommon.(txt)));
                formTreeItem.data(idValue);
                tree.setItem(formTreeItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePosition</Name>
				<Source><![CDATA[
    private void savePosition()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem)
    {
        #define.recid('RecId')
        #define.zeroValue('0')

        Query            query = formDataSource.query();
        QueryBuildRange  criteriaId;
        QueryBuildRange  criteriaRecId;

        this.setDatasourceStatus(_newItem.idx());

        oldIdx  = _oldItem.idx();
        newIdx  = _newItem.idx();
        
        while (query.dataSourceNo(1).findRange(fieldname2id(formDataSource.table(), #RecId)))
        {
            query.dataSourceNo(1).clearRange(fieldname2id(formDataSource.table(), #RecId));
        }

        criteriaRecId = query.dataSourceNo(1).addRange(fieldname2id(formDataSource.table(), #RecId));

        if (_newItem.data())
        {
            SelectedData = _newItem.data();
            criteriaId = query.dataSourceNo(1).findRange(id);

            if (!criteriaId)
            {
                criteriaId = query.dataSourceNo(1).addRange(id);
            }

            criteriaId.value(queryValue(_newItem.data()));

            criteriaRecId.value('');
        }
        else
        {
            query.dataSourceNo(1).clearRanges();
            criteriaRecId = query.dataSourceNo(1).findRange(fieldname2id(formDataSource.table(), #RecId));

            if (!criteriaRecId)
            {
                criteriaRecId = query.dataSourceNo(1).addRange(fieldname2id(formDataSource.table(), #RecId));
            }

            criteriaRecId.value(#zeroValue);
        }

        formDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasourceStatus</Name>
				<Source><![CDATA[
    protected void setDatasourceStatus(int idx)
    {
        // If properties should not be inherited from dataSource
        if (!inheritDataSourceMode)
        {
            if (idx == tree.getRoot())
            {
                formDataSource.allowEdit(false);
                formDataSource.allowDelete(false);
                formDataSource.cursor().clear();
                formDataSource.refresh();

                return;
            }
            else
            {
                formDataSource.allowEdit(true);
                formDataSource.allowDelete(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDropInsertMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets tree to highlight nodes when dragging over.
    /// </summary>
    /// <param name="_dropIdx">
    /// The index of where the item will be dropped.
    /// </param>
    /// <remarks>
    /// Sets tree to highlight nodes when dragging over.
    /// </remarks>
    private void setDropInsertMark(int _dropIdx)
    {
        FormTreeItem formTreeItem;

        if (dropIdx)
        {
            formTreeItem = tree.getItem(dropIdx);
            formTreeItem.stateDropHilited(false);
            tree.setItem(formTreeItem);
            dropIdx = 0;
        }

        if (_dropIdx)
        {
            dropIdx = _dropIdx;
            formTreeItem = tree.getItem(dropIdx);
            formTreeItem.stateDropHilited(true);
            tree.setItem(formTreeItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTreeQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun subTreeQueryRun(anytype _parentValue)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryRun                queryRun;
        QueryBuildRange         criteriaParentId;

        queryRun                = new QueryRun(originalQuery);
        query                   = queryRun.query();
        queryBuildDataSource    = query.dataSourceTable(formDataSource.table());
        criteriaParentId        = queryBuildDataSource.addRange(parentId);

        if (!queryBuildDataSource.sortFieldCount())
        {
            queryBuildDataSource.addSortField(id);
        }

        if (_parentValue)
        {
            criteriaParentId.value(_parentValue);
        }
        else
        {
            criteriaParentId.value(strfmt('"%1"', queryValue(_parentValue)));
            query = this.buildDynaLinks(query);
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>topItemSelected</Name>
				<Source><![CDATA[
    public boolean topItemSelected()
    {
        return (tree.getSelection() == tree.getRoot()) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMove</Name>
				<Source><![CDATA[
    public boolean validateMove(Common  _parentCommon,
                                 anytype _fromData,
                                 anytype _toData)
    {
        boolean ret = true;

        select _parentCommon where _parentCommon.(id) == _toData;

        if (!_parentCommon)
        {
            ret = true;
        }
        else
        {
            if (_parentCommon.(parentId) == _fromData)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>