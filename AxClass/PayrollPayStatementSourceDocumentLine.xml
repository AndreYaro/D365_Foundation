<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementSourceDocumentLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PayrollPayStatementSourceDocumentLine</c> class provides the base information
///    to handle the distributions and sub-ledger journal account entries that are
///    general to all of the three types of pay statement lines.
/// </summary>
abstract class PayrollPayStatementSourceDocumentLine extends SourceDocumentLineItem
    implements SourceDocumentIDataProvider, SourceDocumentLineItemIProjectRevenue,
               SourceDocumentLineItemIPayroll, SourceDocumentLineItemIDescription
{
    PayrollPayStatement         payStatement;
    PayrollPayStatementLine     payStatementLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the legal entity record id from the payroll earning statement line.
    /// </summary>
    /// <returns>
    ///     A legal entity record id.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::findDataArea(payStatementLine.DataAreaId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseOriginLineDistForChildAmount</Name>
				<Source><![CDATA[
    public boolean canUseOriginLineDistForChildAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> class documents a business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> documents a business event; otherwise, false.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent       businessEvent;

        businessEvent = new BusinessEvent(enumNum(BusinessEvent_PayrollPayStatement),BusinessEvent_PayrollPayStatement::PayStatement);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccDistListForMonetaryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting distributions for the collection of monetary amounts.
    /// </summary>
    /// <param name="_monetaryAmountList">
    /// The monetary amount collection.
    /// </param>
    /// <returns>
    /// An <c>AccountingDistributionList</c> class.
    /// </returns>
    public AccountingDistributionList getAccDistListForMonetaryAmount(MonetaryAmountList    _monetaryAmountList)
    {
        AccountingDistributionList      accDistListForMonetaryAmount = AccountingDistributionList::construct();
        AccountingDistribution          accountingDistribution;
        SourceDocumentLineRecId         sourceDocumentLineRecId = this.parmSourceDocumentLine().RecId;

        // Payroll source document lines will only ever be for these two monetary amounts
        while select accountingDistribution
        where accountingDistribution.SourceDocumentLine == sourceDocumentLineRecId
        &&    (accountingDistribution.MonetaryAmount == MonetaryAmount::PayrollCost
        ||    accountingDistribution.MonetaryAmount == MonetaryAmount::PayrollLiability)
        {
            accDistListForMonetaryAmount.addEnd(accountingDistribution);
        }

        return accDistListForMonetaryAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects needed by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        payStatementLine = _sourceDocumentLineImplementation;
        payStatement = payStatementLine.payrollPayStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInheritanceSupportedImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the pay statement line record.
    /// </summary>
    /// <returns>
    /// A copy of the pay statement line record.
    /// </returns>
    protected SourceDocumentLineImplementation copyInheritanceSupportedImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation)
    {
        PayrollPayStatementLine payStatementLineCopy;

        if (_sourceDocumentLineImplementation is PayrollPayStatementLine)
        {
            PayrollPayStatementLine payStatementLineBeforeCopy = _sourceDocumentLineImplementation as PayrollPayStatementLine;
            payStatementLineCopy = con2Buf(buf2Con(payStatementLineBeforeCopy, true));
        }

        return payStatementLineCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOriginSourceDocumentLineItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the source document line item origin.
    /// </summary>
    protected void initOriginSourceDocumentLineItem()
    {
        PayrollPayStatementLine     payStatementLineOrigin;

        // If the current pay statement line is reversing another, use the other as the origin for its distributions
        if (payStatementLine.ReversedPayStatementLine)
        {
            payStatementLineOrigin = PayrollPayStatementLine::find(payStatementLine.ReversedPayStatementLine);
            originSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(payStatementLineOrigin.SourceDocumentLine));
            isCopyOfOriginSourceDocumentLineItem = true;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return payStatementLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBenefitPlan</Name>
				<Source><![CDATA[
    public HcmBenefitPlanRecId parmBenefitPlan()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBusinessEventDate</Name>
				<Source><![CDATA[
    public DocumentDate parmBusinessEventDate()
    {
        return this.parmAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyDistributionReferenceOfOriginal</Name>
				<Source><![CDATA[
    public boolean parmCopyDistributionReferenceOfOriginal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistributionTemplateRecId</Name>
				<Source><![CDATA[
    public AccountingDistributionTemplateRecId parmDistributionTemplateRecId()
    {
        return payStatementLine.AccountingDistributionTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningCode</Name>
				<Source><![CDATA[
    public PayrollEarningCodeRecId parmEarningCode()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsEmployerLine</Name>
				<Source><![CDATA[
    public NoYes parmIsEmployerLine()
    {
        return payStatementLine.IsEmployer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a project ID.
    /// </summary>
    /// <returns>A project ID.</returns>
    /// <remarks>
    /// A pay statement source document line can potentially have more than one associated
    /// project account distribution records with different project information (due to user overrides),
    /// but it is not possible for all valid project IDs to be returned by this method or the other project
    /// parm methods.  However, this method still needs to return a value, so the first project ID value in
    /// <c>ProjTable</c> is returned.  Project posting posts directly from the project account distributions,
    /// not from this class.
    /// </remarks>
    public ProjId parmProjectId()
    {
        #define.CacheKeyName('PayrollPayStatementSourceDocumentLine_parmProjectId')
        #define.CacheKeyScope('PayrollPayStatementSourceDocumentLine_parmProjectId_CacheScope')
        ProjTable projTable;
        container                   result, cacheKey, cacheValue;
        str                         cacheKeyString;

        //
        // In order to enable the project integration on the accounting distributions form,
        // we simply grab any project record.  Cache the value to eliminate unnecessary database calls.
        //

        // Set up our caching variables and look up our value
        cacheKeyString  = #CacheKeyName;
        cacheKey        = [cacheKeyString];
        cacheValue      = classfactory.globalObjectCache().find(#CacheKeyScope, cacheKey);

        // If we have a cache result, return it!  We just saved a bunch of time!
        if (cacheValue != conNull())
        {
            // cacheKey is a container, we need the first element of the container
            return conPeek(conPeek(cacheValue, 1), 1);
        }

        select firstonly RecId, ProjId from projTable;
        result = conIns(result, conLen(result) + 1, projTable.ProjId);

        // Insert the result container in the cache (as the first item in the value container)
        classfactory.globalObjectCache().insert(#CacheKeyScope, cacheKey, [result]);
        cacheValue      = classfactory.globalObjectCache().find(#CacheKeyScope, cacheKey);
        return conPeek(conPeek(cacheValue, 1), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return ResourceFacade::getResourceCategory(this.parmProjectResourceRecId(), this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return ResourceFacade::findByWorker(payStatement.Worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransType</Name>
				<Source><![CDATA[
    public ProjTransType parmProjectTransType()
    {
        PayrollEarningCode earningCode;
        ProjTransType projTransType = ProjTransType::Cost;

        if (this.parmEarningCode())
        {
            earningCode = PayrollEarningCode::find(this.parmEarningCode());
            if (earningCode.RecId && earningCode.QuantityUnit == PayrollQuantityUnit::Hours)
            {
                projTransType = ProjTransType::Hour;
            }
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCode</Name>
				<Source><![CDATA[
    public PayrollTaxCodeRecId parmTaxCode()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return Ledger::accountingCurrency(this.calculateLegalEntityRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayStatementLine</Name>
				<Source><![CDATA[
    public Common parmPayStatementLine()
    {
        return payStatementLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>