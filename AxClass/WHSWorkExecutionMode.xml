<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecutionMode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The work execution mode class.
/// </summary>
public class WHSWorkExecutionMode
{
    protected WHSWorkExecuteMode mode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkExecutionMode</c> instance.
    /// </summary>
    /// <param name = "_mode">A work execute mode.</param>
    /// <returns>A new instance of the <c>WHSWorkExecutionMode</c> class</returns>
    public static WHSWorkExecutionMode newFromMode(WHSWorkExecuteMode _mode)
    {
        WHSWorkExecutionMode controller = new WHSWorkExecutionMode();
        controller.initialize(_mode);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(WHSWorkExecuteMode _mode)
    {
        mode = _mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the work execute mode is a purchase receiving one.
    /// </summary>
    /// <returns>True if the work execute mode is a purchase receiving one; otherwise false</returns>
    public boolean isPurchaseReceiving()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::MixedLPReceiving,
                WHSWorkExecuteMode::MixedLPReceivingAndLocate,
                WHSWorkExecuteMode::PurchaseOrderItemReceiving,
                WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate,
                WHSWorkExecuteMode::PurchaseOrderLineReceiving,
                WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate,
                WHSWorkExecuteMode::LoadItemReceiving,
                WHSWorkExecuteMode::LoadItemReceivingAndLocate:
                    return true;
                default:
                    return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderItemReceiving</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isInboundOrderItemReceiving()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::PurchaseOrderItemReceiving,
                 WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderLineReceiving</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isInboundOrderLineReceiving()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::PurchaseOrderLineReceiving,
                 WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderReceivingAndPutaway</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isInboundOrderReceivingAndPutaway()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate,
                 WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderReceiving</Name>
				<Source><![CDATA[
    internal boolean isInboundOrderReceiving()
    {
        return this.isInboundOrderItemReceiving() || this.isInboundOrderLineReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderOrLoadReceiving</Name>
				<Source><![CDATA[
    internal boolean isInboundOrderOrLoadReceiving()
    {
        return this.isInboundOrderReceiving()             ||
            mode == WHSWorkExecuteMode::LoadItemReceiving ||
            mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inboundOrderWorkTransType</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSWorkTransType inboundOrderWorkTransType()
    {
        WHSWorkTransType ret;

        switch (mode)
        {
            case WHSWorkExecuteMode::PurchaseOrderItemReceiving,
                 WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate,
                 WHSWorkExecuteMode::PurchaseOrderLineReceiving,
                 WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
                ret = WHSWorkTransType::Purch;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str toString()
    {
        return enum2Symbol(enumNum(WHSWorkExecuteMode), enum2int(mode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>stringify</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the mode into a string.
    /// </summary>
    /// <remarks>Since the enum is extensible this method is used to meet privacy compliance.</remarks>
    /// <returns>The mode.</returns>
    public str stringify()
    {
        switch(mode)
        {
            case WHSWorkExecuteMode::Login: return 'Login';
            case WHSWorkExecuteMode::Menu: return 'Menu';
            case WHSWorkExecuteMode::Shipping: return 'Shipping';
            case WHSWorkExecuteMode::ASNLicensePlate: return 'ASNLicensePlate';
            case WHSWorkExecuteMode::CompleteMixedLicensePlate: return 'CompleteMixedLicensePlate';
            case WHSWorkExecuteMode::PurchaseOrderLine: return 'PurchaseOrderLine';
            case WHSWorkExecuteMode::RawMaterialPicking: return 'RawMaterialPicking';
            case WHSWorkExecuteMode::FinishedGoodsPutaway: return 'FinishedGoodsPutaway';
            case WHSWorkExecuteMode::CycleCounting: return 'CycleCounting';
            case WHSWorkExecuteMode::CycleCountingReview: return 'CycleCountingReview';
            case WHSWorkExecuteMode::AdjustmentIn: return 'AdjustmentIn';
            case WHSWorkExecuteMode::AdjustmentOut: return 'AdjustmentOut';
            case WHSWorkExecuteMode::Movement: return 'Movement';
            case WHSWorkExecuteMode::MovementLicensePlate: return 'MovementLicensePlate';
            case WHSWorkExecuteMode::Quarantine: return 'Quarantine';
            case WHSWorkExecuteMode::QuarantineLicensePlate: return 'QuarantineLicensePlate';
            case WHSWorkExecuteMode::LicensePlateBuild: return 'LicensePlateBuild';
            case WHSWorkExecuteMode::InquiryLocation: return 'InquiryLocation';
            case WHSWorkExecuteMode::InquiryLicensePlate: return 'InquiryLicensePlate';
            case WHSWorkExecuteMode::UserDirected: return 'UserDirected';
            case WHSWorkExecuteMode::SystemDirected: return 'SystemDirected';
            case WHSWorkExecuteMode::LogOff: return 'LogOff';
            case WHSWorkExecuteMode::ChangeWarehouse: return 'ChangeWarehouse';
            case WHSWorkExecuteMode::About: return 'About';
            case WHSWorkExecuteMode::Receiving: return 'Receiving';
            case WHSWorkExecuteMode::LicensePlateReceiving: return 'LicensePlateReceiving';
            case WHSWorkExecuteMode::LicensePlateReceivingAndLocate: return 'LicensePlateReceivingAndLocate';
            case WHSWorkExecuteMode::PurchaseOrderLineReceiving: return 'PurchaseOrderLineReceiving';
            case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate: return 'PurchaseOrderLineReceivingAndLocate';
            case WHSWorkExecuteMode::PurchaseOrderItemReceiving: return 'PurchaseOrderItemReceiving';
            case WHSWorkExecuteMode::ItemReceiving: return 'ItemReceiving';
            case WHSWorkExecuteMode::ContainerReceiving: return 'ContainerReceiving';
            case WHSWorkExecuteMode::BlindReceiving: return 'BlindReceiving';
            case WHSWorkExecuteMode::ReportAsFinished: return 'ReportAsFinished';
            case WHSWorkExecuteMode::ReportAsFinishedAndLocate: return 'ReportAsFinishedAndLocate';
            case WHSWorkExecuteMode::UserGrouping: return 'UserGrouping';
            case WHSWorkExecuteMode::PickPack: return 'PickPack';
            case WHSWorkExecuteMode::MovementByTemplate: return 'MovementByTemplate';
            case WHSWorkExecuteMode::StartProdOrder: return 'StartProdOrder';
            case WHSWorkExecuteMode::CreateTranferOrderFromLP: return 'CreateTransferOrder';
            case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate: return 'PurchaseOrderItemReceivingAndLocate';
            case WHSWorkExecuteMode::SystemGrouping: return 'SystemGrouping';
            case WHSWorkExecuteMode::ProductionScrap: return 'ProductionScrap';
            case WHSWorkExecuteMode::ValidatedUserDirected: return 'ValidatedUserDirected';
            case WHSWorkExecuteMode::ProdLastPallet: return 'ProdLastPallet';
            case WHSWorkExecuteMode::LicensePlateLoading: return 'LicensePlateLoading';
            case WHSWorkExecuteMode::InquiryItem: return 'InquiryItem';
            case WHSWorkExecuteMode::ReprintLabel: return 'ReprintLabel';
            case WHSWorkExecuteMode::SpotCycleCounting: return 'SpotCycleCounting';
            case WHSWorkExecuteMode::ReturnOrder: return 'ReturnOrder';
            case WHSWorkExecuteMode::ReturnOrderAndLocate: return 'ReturnOrderAndLocate';
            case WHSWorkExecuteMode::WarehouseTransfer: return 'WarehouseTransfer';
            case WHSWorkExecuteMode::ClusterPicking: return 'ClusterPicking';
            case WHSWorkExecuteMode::LoadItemReceiving: return 'LoadItemReceiving';
            case WHSWorkExecuteMode::LoadItemReceivingAndLocate: return 'LoadItemReceivingAndLocate';
            case WHSWorkExecuteMode::TransferOrderItemReceiving: return 'TransferOrderItemReceiving';
            case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate: return 'TransferOrderItemReceivingAndLocate';
            case WHSWorkExecuteMode::LicensePlateBreak: return 'LicensePlateBreak';
            case WHSWorkExecuteMode::CycleCountGrouping: return 'CycleCountGrouping';
            case WHSWorkExecuteMode::DriverCheckIn: return 'DriverCheckIn';
            case WHSWorkExecuteMode::DriverCheckOut: return 'DriverCheckOut';
            case WHSWorkExecuteMode::TransferOrderLineReceiving: return 'TransferOrderLineReceiving';
            case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate: return 'TransferOrderLineReceivingAndLocate';
            case WHSWorkExecuteMode::KanbanPut: return 'KanbanPut';
            case WHSWorkExecuteMode::KanbanPutAndLocate: return 'KanbanPutAndLocate';
            case WHSWorkExecuteMode::FlushNumSeqCache: return 'FlushNumSeqCache';
            case WHSWorkExecuteMode::ChangeBatchDisposition: return 'ChangeBatchDisposition';
            case WHSWorkExecuteMode::WebRequestDefault: return 'WebRequestDefault';
            case WHSWorkExecuteMode::PackToNestedLPs: return 'PackToNestedLPs';
            case WHSWorkExecuteMode::ConfirmationDialog: return 'ConfirmationDialog';
            case WHSWorkExecuteMode::WorkList: return 'WorkList';
            case WHSWorkExecuteMode::ReportAsFinishedBySerial: return 'ReportAsFinishedBySerial';
            case WHSWorkExecuteMode::ConsolidateLicensePlates: return 'ConsolidateLicensePlates';
            case WHSWorkExecuteMode::MixedLPReceiving: return 'MixedLPReceiving';
            case WHSWorkExecuteMode::MixedLPReceivingAndLocate: return 'MixedLPReceivingAndLocate';
            case WHSWorkExecuteMode::MaterialConsumption: return 'MaterialConsumption';
            case WHSWorkExecuteMode::RemoveContainerFromGroup: return 'RemoveContainerFromGroup';
            case WHSWorkExecuteMode::EmptyKanban: return 'EmptyKanban';
            case WHSWorkExecuteMode::CancelWork: return 'CancelWork';
            case WHSWorkExecuteMode::TransportLoading: return 'TransportLoading';
            case WHSWorkExecuteMode::SystemDirectedClusterPicking: return 'SystemDirectedClusterPicking';
            case WHSWorkExecuteMode::ClusterPutaway: return 'ClusterPutaway';
            case WHSWorkExecuteMode::GenericDataInquiry: return 'GenericDataInquiry';
            case WHSWorkExecuteMode::OverrideLabelPrinter: return 'OverrideLabelPrinter';
            case WHSWorkExecuteMode::ReturnItemReceiving: return 'ReturnItemReceiving';
        }

        return 'Unknown' + int2Str(enum2int(mode));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>