<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalculationBankStatementEmpty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Empty tax calc bank statement used for core tax calc bank statement when GTE is enabled
/// </summary>
class TaxCalculationBankStatementEmpty extends TaxCalculationBankStatement
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction supports adjusting the calculated base amount when tax is
    /// included in item price and the users adjusts the tax amount.
    /// </summary>
    /// <returns>
    /// true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLineSpecificTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes for an individual line. This function does not calculate codes that are
    /// considered based on invoice total, tax on tax, and others It calculates only tax codes that are
    /// line specific.
    /// </summary>
    /// <returns>
    /// The tax amount calculated for this line for all codes which are not based on invoice total.
    /// </returns>
    protected TaxAmount calculateLineSpecificTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates taxes total taxes excluding use taxes. This is the base calculate taxes method derived
    ///    classes are required to implement.
    /// </summary>
    /// <returns>
    ///    The tax amount excluding the use tax.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates taxes for a transaction line.
    /// </summary>
    /// <returns>
    /// The tax amount excluding use tax for the transaction line.
    /// </returns>
    [HookableAttribute(true)]
    protected TaxAmount calculateTaxForLine()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes that are based on the invoice total.
    /// </summary>
    /// <returns>
    /// The total tax amount calculated to this point.
    /// </returns>
    /// <remarks>
    /// This method does not calculate codes that are considered line-specific.
    /// </remarks>
    protected TaxAmountCur calculateTotalTaxCodes()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the tax engine for a transaction line.
    /// </summary>
    /// <param name="_taxableLine">
    /// An instance of the <c>TaxableLine</c> interface that represents a transaction line.
    /// </param>
    protected void configureTaxForLine(TaxableLine _taxableLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default tax direction for the transaction.
    /// </summary>
    /// <param name="_taxGroupData">
    /// The <c>TaxGroupData</c> table buffer that represents the tax code being considered.
    /// </param>
    /// <returns>
    /// The default tax direction.
    /// </returns>
    /// <remarks>
    /// A customer transaction will have a tax direction of sales tax payable. A vendor transaction will
    /// have a tax direction of sales tax receivable.
    /// </remarks>
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes tax calculations by processing tax adjustments and optionally inserting records into the
    ///    <c>TaxUncommitted</c> and <c>SourceDoucmentLine</c> tables.
    /// </summary>
    /// <param name="_calculateTaxDifferenceAmount">
    ///    true if tax difference amount need to be calculated; optional.
    /// </param>
    /// <param name="_doIsolateTransactionScope">
    /// true if <c>TaxUncommitted</c> should be maintained in a independent transaction scope; otherwise false.
    /// </param>
    /// <returns>
    ///    The final tax total amount.
    /// </returns>
    protected TaxAmountCur finalizeCalculation(
        boolean _calculateTaxDifferenceAmount = false,
        boolean _doIsolateTransactionScope = false
    )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimension.
    /// </summary>
    /// <param name="_sourceRecId">
    /// The record Id of the parent of the tax line.
    /// </param>
    /// <returns>
    ///  A <c>DimensionDefault</c> value.
    /// </returns>
    public DimensionDefault getDefaultDimension(RefRecId _sourceRecId)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaintainExistingTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>maintainExistingTaxUncommitted</c> value that indicates whether new records will
    ///    be added to the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if newly calculated tax lines will be added to the <c>TaxUncommitted</c> table; otherwise,
    ///    false.
    /// </returns>
    public boolean getMaintainExistingTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the instatce of the <c>TaxCalculationEmpty</c> object.
    /// </summary>
    /// <param name="_initializationClass">
    ///    The initialization class for the given transaction.
    /// </param>
    /// <returns>
    ///    The TaxCalculationEmpty.
    /// </returns>
    public static TaxCalculationEmpty getInstance(Object _initializationClass)
    {
        return new TaxCalculationEmpty(_initializationClass, false, false, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTaxForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads transaction line information into the <c>Tax</c> table.
    /// </summary>
    /// <param name="_amountInclTax">
    ///    A Boolean value that specifies whether the line amount includes tax.
    /// </param>
    /// <param name="_baseAmount">
    ///    The line amount excluding tax.
    /// </param>
    /// <param name="_baseAmountIncludingTax">
    ///    The line amount.
    /// </param>
    /// <param name="_dimensionDefault">
    ///    The default dimensions.
    /// </param>
    /// <param name="_operationLedgerDimension">
    ///    The operation account.
    /// </param>
    /// <param name="ledgerPostingType">
    ///    The ledger posting type for the transaction line.
    /// </param>
    /// <param name="_unitAmount">
    ///    The unit amount for the line.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID if inventory is supported.
    /// </param>
    /// <param name="_quantity">
    ///    The quantity from the transaction line.
    /// </param>
    /// <param name="_baseUnit">
    ///    The unit on the transaction line.
    /// </param>
    /// <param name="_exchRate_W">
    ///    The exchange rate
    /// </param>
    /// <param name="_vatDueDate_W">
    ///    The VAT register date.
    /// </param>
    /// <returns>
    ///    The base amount, excluding taxes and cash discounts.
    /// </returns>
    protected TaxAmountCur initializeTaxForLine(boolean _amountInclTax,
                                                TaxBase _baseAmount,
                                                TaxBase _baseAmountIncludingTax,
                                                DimensionDefault _dimensionDefault,
                                                LedgerDimensionAccount _operationLedgerDimension,
                                                LedgerPostingType ledgerPostingType,
                                                TaxBase _unitAmount = 0,
                                                ItemId _itemId = '',
                                                Qty _quantity = 0,
                                                UnitOfMeasureSymbol _baseUnit = '',
                                                ExchRate            _exchRate_W = 0,
                                                VatDueDate_W        _vatDueDate_W = dateNull()
                                                )
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTransactionExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize default tax exchange rate
    /// </summary>
    protected void initTaxTransactionExchangeRate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax records from the <c>TaxUncommitted</c> table into the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    protected void loadFromTaxUncommitted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPerLineTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads tax adjustments that are adjusting taxes for a specific line.
    /// </summary>
    /// <param name="_companyId">
    ///    A value that specifies whether a tax adjustment can be located in another company. If they can, the
    ///    current company and passed in company will be checked for adjustments.
    /// </param>
    /// <param name="_sourceTableId">
    ///    The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    ///    The record ID of the transaction line.
    /// </param>
    /// <param name="_headingSourceTableId">
    ///    The table ID of the heading transaction line.
    /// </param>
    /// <param name="_headingSourceRecId">
    ///    The record ID of the heading transaction line.
    /// </param>
    protected void loadPerLineTaxAdjustments(
        SelectableDataArea  _companyId,
        RefTableId          _sourceTableId,
        RefRecId            _sourceRecId
        ,RefTableId         _headingSourceTableId = 0
        ,RefRecId           _headingSourceRecId = 0
        )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting the taxes for a transaction.
    /// </summary>
    protected void loadTaxAdjustments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to calculate supports the <c>SubLedgerDistributions</c>
    ///    or <c>SubLedgerJournalLines</c> records. By default, this base implementation is that they do not
    ///    support them. As the individual transaction support the sub-ledger, they must override this method
    ///    and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to calculate supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>