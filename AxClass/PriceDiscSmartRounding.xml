<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscSmartRounding</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PriceDiscSmartRounding
{
    #PriceDisc

    PriceDiscSmartRoundingRule roundingRule;

    DecimalSeparator decimalSeparator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addErrorText</Name>
				<Source><![CDATA[
    public void addErrorText(str _errorText)
    {
        error(_errorText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount2Str</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an amount to a string without adding unnecessary decimals, or strips off any decimals from
    ///    the amount to convert.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to convert.
    /// </param>
    /// <returns>
    ///    The string equivalent of the amount.
    /// </returns>
    /// <remarks>
    ///    Unlike this method, the <c>num2str</c> method always converts an amount to a string with a fixed
    ///    number of decimals.
    /// </remarks>
    private str amount2Str(Amount _amount)
    {
        Amount amountLocal = _amount;
        int decimalNum = 0;

        //determine the number of decimals in the amount
        while ( amountLocal - trunc(amountLocal) > 0)
        {
            amountLocal = amountLocal * 10;
            decimalNum++;
        }

        // NOTE: last parameter is set to 0 to avoind insertion of any spaces corresponding
        // to digit grouping in the string
        return num2str(_amount,-1,decimalNum,decimalSeparator,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRoundingExpressionOK</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the syntax of a rounding expression is OK.
    /// </summary>
    /// <param name="_syntax">
    ///    The rounding expression to check.
    /// </param>
    /// <returns>
    ///    true if the syntax is OK; otherwise, false.
    /// </returns>
    private boolean checkRoundingExpressionOK(PriceDiscSmartRoundingSyntax _syntax)
    {
        InteropPermission                       interopPermission;
        System.Text.RegularExpressions.Regex    re;

        boolean  syntaxOK = true;

        if (subStr(_syntax,1,1) != '#')
        {
           syntaxOK = false;
           this.addErrorText("@SYS133720");
        }

        if (syntaxOK)
        {
            //strip off the leading # character
            _syntax = strDel(_syntax,1,1);

           // the rest must be either convertible to a number, or if not,
           // e.g. because there are further # chars after the decimal point
           // like #.##99, it must match the regexp as below

            if (_syntax)
            {
                interopPermission = new InteropPermission(InteropKind::ClrInterop);
                interopPermission.assert();

                re = new System.Text.RegularExpressions.Regex('^[0-9]*(\\.[0-9]+)?$');
                syntaxOK = re.IsMatch(any2str(_syntax));

                if (!syntaxOK)
                {
                    re = new System.Text.RegularExpressions.Regex('^\\.#+\\d*$');
                    syntaxOK = re.IsMatch(any2str(_syntax));
                }

                if (!syntaxOK)
                {
                    this.addErrorText("@SYS133721");
                }
            }
        }

        return syntaxOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRoundingExpressionsConsistency</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the rounding expressions in a rounding rule are consistent.
    /// </summary>
    /// <returns>
    ///    true if rounding expressions are consistent in a rule; otherwise, false.
    /// </returns>
    private boolean checkRoundingExpressionsConsistency()
    {
        int upperLimitExponent;
        int lowerLimitExponent;
        int syntaxExponent;
        int ok = true;

        syntaxExponent = this.getRoundingExpressionDecimalExponent(roundingRule.Syntax);

        if (roundingRule.Syntax && roundingRule.LowerLimitPoint)
        {
            lowerLimitExponent = this.getRoundingExpressionDecimalExponent(roundingRule.LowerLimitPoint);

            if (syntaxExponent != lowerLimitExponent)
            {
                this.addErrorText("@SYS133722");
                ok = false;
            }
        }

        if (roundingRule.Syntax && roundingRule.UpperLimitPoint)
        {
            upperLimitExponent = this.getRoundingExpressionDecimalExponent(roundingRule.UpperLimitPoint);

            if (syntaxExponent != upperLimitExponent)
            {
                this.addErrorText("@SYS133724");
                ok = false;
            }

            if (roundingRule.LowerLimitPoint && lowerlimitExponent != upperLimitExponent)
            {
                this.addErrorText("@SYS133725");
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRoundingRuleOK</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a rounding rule can safely be used for rounding.
    /// </summary>
    /// <returns>
    ///    true if the rounding rule is OK; otherwise, false.
    /// </returns>
    public boolean checkRoundingRuleOK()
    {
        boolean ok = true;

        infolog.clear(0);

        if (!roundingRule.Syntax)
        {
            ok = false;
            this.addErrorText("@SYS133727");
        }

        if (!roundingRule.LowerLimitPoint && !roundingRule.UpperLimitPoint)
        {
            ok = false;
            this.addErrorText("@SYS133728");
        }

        if ((roundingRule.Syntax && !this.checkRoundingExpressionOK(roundingRule.Syntax)) ||
                 (roundingRule.LowerLimitPoint && !this.checkRoundingExpressionOK(roundingRule.LowerLimitPoint)) ||
                 (roundingRule.UpperLimitPoint && !this.checkRoundingExpressionOK(roundingRule.UpperLimitPoint)))
        {
            ok = false;
        }

        if ((roundingRule.Syntax && (roundingRule.LowerLimitPoint || roundingRule.UpperLimitPoint)) &&
            !this.checkRoundingExpressionsConsistency())
        {
            ok = false;
        }

        if (roundingRule.LowerLimitPoint &&
            roundingRule.Syntax &&
            roundingRule.LowerLimitPoint == roundingRule.Syntax)
        {
            ok = false;
            this.addErrorText("@SYS133729");
        }

        if (roundingRule.UpperLimitPoint &&
             roundingRule.Syntax &&
             roundingRule.UpperLimitPoint == roundingRule.Syntax)
        {
            ok = false;
            this.addErrorText("@SYS133730");
        }

        if (roundingRule.Syntax && roundingRule.LowerLimitPoint && roundingRule.UpperLimitPoint)
        {
            if (this.getNumFromSyntax(roundingRule.LowerLimitPoint) > this.getNumFromSyntax(roundingRule.UpperLimitPoint) )
            {
                ok = false;
                this.addErrorText("@SYS133731");
            }

            if (this.getNumFromSyntax(roundingRule.LowerLimitPoint) < this.getNumFromSyntax(roundingRule.Syntax) &&
                 this.getNumFromSyntax(roundingRule.Syntax) < this.getNumFromSyntax(roundingRule.UpperLimitPoint))
            {
                ok = false;
                this.addErrorText("@SYS133733");
            }
        }

        //now check the price range
        if (roundingRule.UnitPriceFrom < 0 ||
            roundingRule.UnitPriceTo < 0)
        {
            ok = false;
            this.addErrorText("@SYS133735");
        }

        if (roundingRule.UnitPriceFrom >= 0 && roundingRule.UnitPriceTo > 0 &&
            roundingRule.UnitPriceFrom >= roundingRule.UnitPriceTo)
        {
            ok = false;
            this.addErrorText("@SYS133737");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decimalSeparatorStr</Name>
				<Source><![CDATA[
    private str decimalSeparatorStr()
    {
        if (decimalSeparator == DecimalSeparator::Comma)
        {
            return ',';
        }
        else if (decimalSeparator == DecimalSeparator::Dot)
        {
            return '.';
        }
        else
        {
            throw error("@SYS133739");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCorrespondingDigits</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Extracts digits that correspond to the number of characters in the rounding expression in the
    ///    specified amount.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to match against the rounding expression.
    /// </param>
    /// <param name="_syntax">
    ///    The rounding expression.
    /// </param>
    /// <returns>
    ///    The digits that match the characters in the rounding expression.
    /// </returns>
    private str getCorrespondingDigits(Amount _amount, PriceDiscSmartRoundingSyntax _syntax)
    {
        int decimalSeparatorPosition = 0;
        int decimalExponent = 0;

        AmountString amountString;

        str digitsString;

        amountString = this.amount2Str(_amount);

        decimalExponent = this.getRoundingExpressionDecimalExponent(_syntax);

        decimalSeparatorPosition = strFind(amountString,this.decimalSeparatorStr(), 1,strLen(amountString));

        if (decimalSeparatorPosition)
        {
            //it's a floating point number

            if (decimalSeparatorPosition - 1 - decimalExponent <= 0)
            {
                return "";
            }

            if (decimalExponent >= 0)
            {
                digitsString = subStr(amountString,1,decimalSeparatorPosition - 1-  decimalExponent);
            }
            else
            {
                //add one more position for the decimal separator
                digitsString = subStr(amountString,1,decimalSeparatorPosition - decimalExponent);
            }
        }
        else
        {
           // it's an integer

            if (strLen(amountString) - decimalExponent <= 0)
            {
                return "";
            }

            digitsString = subStr(amountString,1,strLen(amountString) - decimalExponent);
        }

        return digitsString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumFromSyntax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number represented by a syntax expression.
    /// </summary>
    /// <param name="_syntax">
    ///    The syntax expression.
    /// </param>
    /// <returns>
    ///    The number represented by the syntax expression.
    /// </returns>
    private real getNumFromSyntax(PriceDiscSmartRoundingSyntax _syntax)
    {
        int exponent = 0;

        //strip off #
        _syntax = strDel(_syntax,1,1);

        if (!_syntax)
        {
            return 0;
        }

        if ( subStr(_syntax,1,1) == this.decimalSeparatorStr() )
        {
            // remove temporaraily decimal separator
            _syntax = strDel(_syntax,1,1);

            // remove eventual # characters after the decimal separator
            while (strStartsWith(_syntax,'#'))
            {
                _syntax = strDel(_syntax,1,1);
                exponent--;
            }

            _syntax = '0' + this.decimalSeparatorStr() + _syntax;
        }

        return str2num(_syntax) * power(10, exponent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRoundingExpressionDecimalExponent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the decimal exponent of a rounding expression.
    /// </summary>
    /// <param name="_syntax">
    ///    The rounding expression.
    /// </param>
    /// <returns>
    ///    The decimal exponent of the rounding expression.
    /// </returns>
    private int getRoundingExpressionDecimalExponent(PriceDiscSmartRoundingSyntax _syntax)
    {
        int decimalExponent = 0;
        int decimalSeparatorPosition = 0;

        //strip off leading # character
        _syntax = strDel(_syntax,1,1);

        decimalSeparatorPosition = strFind(_syntax,this.decimalSeparatorStr(), 1,strLen(_syntax));

        // if it's a floating point number
        if (decimalSeparatorPosition)
        {
            if (decimalSeparatorPosition > 1)
            {
                decimalExponent = decimalSeparatorPosition - 1;
            }
            else
            {
                // if decimalSeparatorPosition == 1 , rounding is in the decimal range,
                // e.g. when .99 or .##99

                // strip off decimal separator
                _syntax = strDel(_syntax,1,1);

                while (_syntax && subStr(_syntax,1,1) == '#')
                {
                    decimalExponent--;
                    _syntax = strDel(_syntax,1,1);
                }
            }
        }
        else
        {
            // if it's an integer wihout decimal separator
            decimalExponent = strLen(_syntax);
        }

        return decimalExponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDecimalSeparator</Name>
				<Source><![CDATA[
    public DecimalSeparator parmDecimalSeparator(DecimalSeparator _decimalSeparator)
    {
        decimalSeparator = _decimalSeparator;
        return decimalSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds an amount based on the smart rounding rule set that is associated with a currency.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round.
    /// </param>
    /// <param name="_currency">
    ///    The currency that is used.
    /// </param>
    /// <returns>
    ///    The rounded amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The rounding rule is invalid.
    /// </exception>
    private Amount round(Amount _amount, Currency _currency)
    {
        if (_currency.CurrencyCode)
        {
            return this.roundByGroupRecId(_amount, PriceDiscSmartRoundingGroupCurrency::find(_currency.CurrencyCode).GroupRecId);
        }

        return _amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds an amount based on the smart rounding rule set that is associated with group ID.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round.
    /// </param>
    /// <param name="_smartRoundingGroupId">
    /// Smart round group ID.
    /// </param>
    /// <returns>
    ///    The rounded amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The rounding rule is invalid.
    /// </exception>
    private Amount roundByGroup(Amount _amount, PriceDiscSmartRoundingGroupId _smartRoundingGroupId)
    {
        PriceDiscSmartRoundingGroup roundingGroup;

        roundingGroup = PriceDiscSmartRoundingGroup::findByGroupId(_smartRoundingGroupId);

        return this.roundByGroupRecId(_amount, roundingGroup.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundByGroupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds an amount based on the smart rounding rule set that is associated with group rec ID.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round.
    /// </param>
    /// <param name="_groupRecId">
    /// Smart round group rec ID.
    /// </param>
    /// <returns>
    ///    The rounded amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The rounding rule is invalid.
    /// </exception>
    private Amount roundByGroupRecId(Amount _amount, RefRecId _groupRecId)
    {
        Amount amountRounded = _amount;

        if (!_groupRecId)
        {
            return _amount;
        }

        roundingRule = PriceDiscSmartRoundingRule::find(_groupRecId,_amount);

        if (!roundingRule)
        {
            return _amount;
        }

        if (!this.checkRoundingRuleOK())
        {
            throw error("@SYS133740");
        }

        if (roundingRule.LowerLimitPoint)
        {
            amountRounded = this.roundDown(_amount,roundingRule.Syntax,roundingRule.LowerLimitPoint);
        }

        if (amountRounded == _amount && roundingRule.UpperLimitPoint)
        {
            amountRounded = this.roundUp(_amount,roundingRule.Syntax, roundingRule.UpperLimitPoint);
        }

        return amountRounded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundDown</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds down an amount based on the syntax expression and the specified lower limit.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round down.
    /// </param>
    /// <param name="_syntax">
    ///    The syntax expression.
    /// </param>
    /// <param name="_lowerLimitPoint">
    ///    The lowest point to which an amount can be rounded.
    /// </param>
    /// <returns>
    ///    The amount after it is rounded.
    /// </returns>
    public Amount roundDown(Amount _amount, PriceDiscSmartRoundingSyntax _syntax, PriceDiscSmartRoundingSyntax _lowerLimitPoint)
    {
        str correspondingDigits = this.getCorrespondingDigits(_amount,_syntax);
        int decimalExponent;
        real syntaxNum = this.getNumFromSyntax(_syntax);
        real lowerLimitNum;
        real amountRounded;
        real correspondingDigitsNum;

        Amount amountOld;

        if (!correspondingDigits
            && _amount <= syntaxNum)
        {
            return _amount;
        }

        amountOld = _amount;

        decimalExponent = this.getRoundingExpressionDecimalExponent(_lowerLimitPoint);
        lowerLimitNum   = this.getNumFromSyntax(_lowerLimitPoint);

        if (decimalExponent > 0)
        {
            // this is needed as e.g. getCorrespondingDigits(1000,'#95'), returns '10' as string,
            // which must be converted to a number, in this case (10 * power(10,3))
            correspondingDigitsNum =  str2num(correspondingDigits) *  power(10,decimalExponent);
        }
        else
        {
            correspondingDigitsNum = str2num(correspondingDigits);
        }

        amountRounded = _amount - correspondingDigitsNum;

        if (lowerLimitNum < syntaxNum)
        {
            if (amountRounded < lowerLimitNum ||
                syntaxNum < amountRounded)
            {
                if (correspondingDigitsNum + syntaxNum < _amount)
                {
                    _amount = correspondingDigitsNum + syntaxNum;
                }
                else
                {
                   _amount = correspondingDigitsNum - power(10,decimalExponent) + syntaxNum;
                }
            }
        }
        else if (syntaxNum < lowerLimitNum)
        {
            if (syntaxNum < amountRounded &&
                amountRounded < lowerLimitNum)
            {
                if (correspondingDigitsNum + syntaxNum < _amount)
                {
                    _amount = correspondingDigitsNum + syntaxNum;
                }
                else
                {
                    _amount = correspondingDigitsNum - power(10,decimalExponent) + syntaxNum;
                }
            }
        }

        //never round down if rounded amount is below zero or zero
        if (_amount <= 0)
        {
            _amount = amountOld;
        }

        return _amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rounds up an amount based on the syntax expression and the specified upper limit.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round up.
    /// </param>
    /// <param name="_syntax">
    ///    The syntax expression.
    /// </param>
    /// <param name="_upperLimitPoint">
    ///    The highest point to which an amount can be rounded.
    /// </param>
    /// <returns>
    ///    The amount after it is rounded.
    /// </returns>
    public Amount roundUp(Amount _amount, PriceDiscSmartRoundingSyntax _syntax, PriceDiscSmartRoundingSyntax _upperLimitPoint)
    {
        str correspondingDigits = this.getCorrespondingDigits(_amount,_syntax);
        int decimalExponent;
        real syntaxNum = this.getNumFromSyntax(_syntax);
        real upperLimitNum;
        real amountRounded;
        real correspondingDigitsNum;

        Amount amountOld;

        if (!correspondingDigits
            && _amount >= syntaxNum)
        {
            return _amount;
        }

        amountOld = _amount;

        decimalExponent = this.getRoundingExpressionDecimalExponent(_upperLimitPoint);
        upperLimitNum   = this.getNumFromSyntax(_upperLimitPoint);

        if (decimalExponent > 0)
        {
            correspondingDigitsNum =  str2num(correspondingDigits) *  power(10,decimalExponent);
        }
        else
        {
            correspondingDigitsNum = str2num(correspondingDigits);
        }

        amountRounded = _amount - correspondingDigitsNum;

        if (upperLimitNum < syntaxNum)
        {
            if (upperLimitNum <= amountRounded &&
                amountRounded < syntaxNum)
            {
                if (correspondingDigitsNum + syntaxNum > _amount)
                {
                    _amount = correspondingDigitsNum + syntaxNum;
                }
                else
                {
                    _amount = correspondingDigitsNum + power(10,decimalExponent) + syntaxNum;
                }
            }
        }
        else if (syntaxNum < upperLimitNum)
        {
            if (amountRounded < syntaxNum ||
                amountRounded >= upperLimitNum)
            {
                if (correspondingDigitsNum + syntaxNum > _amount)
                {
                    _amount = correspondingDigitsNum + syntaxNum;
                }
                else
                {
                    _amount = correspondingDigitsNum + power(10,decimalExponent) + syntaxNum;
                }
            }
        }

        return _amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRoundingRule</Name>
				<Source><![CDATA[
    public void setRoundingRule(PriceDiscSmartRoundingRule _roundingRule)
    {
        roundingRule = _roundingRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PriceDiscSmartRounding construct()
    {
        return new PriceDiscSmartRounding();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientDecimalSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the decimal separator for a client computer from the regional settings.
    /// </summary>
    /// <returns>
    ///    The decimal separator.
    /// </returns>
    public static str getClientDecimalSeparator()
    {
        System.Globalization.NumberFormatInfo format = System.Globalization.CultureInfo::get_CurrentUICulture().NumberFormat;
        return format.NumberDecimalSeparator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundingRuleCheck</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a rounding rule can be used for smart rounding.
    /// </summary>
    /// <param name="_rule">
    ///    The rounding rule to check.
    /// </param>
    /// <param name="_decimalSeparator">
    ///    The decimal separator that is used in the rounding expressions of the rule.
    /// </param>
    /// <returns>
    ///    true if the rule can be used for smart rounding; otherwise, false.
    /// </returns>
    public static boolean roundingRuleCheck(PriceDiscSmartRoundingRule _rule, DecimalSeparator _decimalSeparator = DecimalSeparator::Dot)
    {
        PriceDiscSmartRounding smartRounding = PriceDiscSmartRounding::construct();

        smartRounding.parmDecimalSeparator(_decimalSeparator);
        smartRounding.setRoundingRule(_rule);

        return smartRounding.checkRoundingRuleOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>smartRound</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies smart rounding to an amount based on the rounding rules associated with a currency.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round.
    /// </param>
    /// <param name="_currency">
    ///    The currency of the rounding rule set to use.
    /// </param>
    /// <returns>
    ///    The amount after rounding.
    /// </returns>
    public static Amount smartRound(Amount _amount, Currency _currency)
    {
        PriceDiscSmartRounding smartRounding = PriceDiscSmartRounding::construct();

        // Internally, always dot is used as decimal separator no matter what the client's
        // decimal separator is which is only taken into account by the presentation layer.
        smartRounding.parmDecimalSeparator(DecimalSeparator::Dot);

        return smartRounding.round(_amount, _currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smartRoundByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies smart rounding to an amount based on the rounding rules associated with a rounding group ID.
    /// </summary>
    /// <param name="_amount">
    ///    The amount to round.
    /// </param>
    /// <param name="_smartRoundingGroupId">
    ///    The group ID of the smart rounding rules.
    /// </param>
    /// <returns>
    ///    The amount after rounding.
    /// </returns>
    public static Amount smartRoundByGroup(Amount _amount, PriceDiscSmartRoundingGroupId _smartRoundingGroupId)
    {
        PriceDiscSmartRounding smartRounding = PriceDiscSmartRounding::construct();

        // Internally, always dot is used as decimal separator no matter what the client's
        // decimal separator is which is only taken into account by the presentation layer.
        smartRounding.parmDecimalSeparator(DecimalSeparator::Dot);

        return smartRounding.roundByGroup(_amount, _smartRoundingGroupId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>