<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustIntentLetterCancelService_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustIntentLetterCancelService_IT</c> class gets actions for intent letter canceling.
/// </summary>
public class CustIntentLetterCancelService_IT extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs intent letter cancellation.
    /// </summary>
    /// <param name = "_dataContract">The data contract to be used for cancellation.</param>
    public void runCancellation(CustIntentLetterCancelDataContract_IT _dataContract)
    {
        CustIntentLetter_IT custIntentLetter = _dataContract.parmCustIntentLetter();

        if (custIntentLetter)
        {
            if (this.cancelIntentLetter(_dataContract))
            {
                info(strFmt("@ExtendedItallianLocalization:LetterHasBeenCanceled", custIntentLetter.LetterId));
            }
            else
            {
                warning(strFmt("@ExtendedItallianLocalization:LeterCannotBeCanceled", custIntentLetter.LetterId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelIntentLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs canceling operations for intent letter.
    /// </summary>
    /// <param name = "_dataContract">The related data contract.</param>
    /// <returns>true if no error occurred, otherwise false.</returns>
    protected boolean cancelIntentLetter(CustIntentLetterCancelDataContract_IT _dataContract)
    {
        boolean ret;

        ttsbegin;
        CustIntentLetter_IT custIntentLetterFromContract = _dataContract.parmCustIntentLetter();
        CustIntentLetter_IT custIntentLetterLocal = CustIntentLetter_IT::find(
            custIntentLetterFromContract.LetterId,
            custIntentLetterFromContract.AccountNum,
            true);

        if (custIntentLetterLocal.Status == IntentLetterStatus_IT::Open && !custIntentLetterLocal.isUsedByInvoices())
        {
            custIntentLetterLocal.cancel(_dataContract.parmNotes());
            custIntentLetterLocal.update();
            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>