<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqShowRequisitionsFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchReqShowRequisitionsFilter</c> class is used to apply a filter of the type
///    <c>PuchReqShowRequisitions</c> to any data source.
/// </summary>
class PurchReqShowRequisitionsFilter
{
    QueryBuildDataSource    topDatasource;
    QueryBuildDataSource    bottomDatasource;
    QueryBuildDataSource    topFilterDataSource;
    QueryBuildDataSource    qbdsPurchReqRequisitionerFilter;
    QueryBuildDataSource    qbdsHcmPositionWorkerAssignment;
    QueryBuildDataSource    qbdsSysWorkFlowTable;
    QueryBuildDataSource    qbdsCreatedByMe;
    QueryBuildDataSource    qbdsPurchReqTable;
    QueryBuildDataSource    qbdsPurchReqLine;
    QueryBuildDataSource    qbdsPurchReqLineProcessingError;
    QueryBuildRange         rangeMyRequisitions;
    QueryBuildRange         rangeMyRequisitionsDynamic;
    fieldId                 fieldNumRequisitioner;
    boolean                 isFilterHeaderOriginator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the chosen filter to the parent data source.
    /// </summary>
    /// <param name="_requisitionsFilter">
    ///    An enumeration that contains the filter to apply.
    /// </param>
    public void applyFilter(PurchReqShowRequisitions _requisitionsFilter)
    {
        this.resetFilter();

        switch (_requisitionsFilter)
        {
            case PurchReqShowRequisitions::AllMyReports :
                this.filterAllMyReports();
                break;

            case PurchReqShowRequisitions::AssignedToMe :
                this.filterAssignedToMe();
                break;

            case PurchReqShowRequisitions::CreatedByMe :
                this.filterCreatedByMe();
                break;

            case PurchReqShowRequisitions::MyDirectReports :
                this.filterMyDirectReports();
                break;

            case PurchReqShowRequisitions::MyRequisitions :
                this.filterMyRequisitions();
                break;

            case PurchReqShowRequisitions::All :
                this.filterAll();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::All</c> filter to the parent data source.
    /// </summary>
    protected void filterAll()
    {
        if (topDatasource.table() != tablenum(PurchReqTable))
        {
            qbdsPurchReqTable = topDatasource.addDataSource(tablenum(PurchReqTable));
            qbdsPurchReqTable.joinMode(JoinMode::ExistsJoin);
            qbdsPurchReqTable.relations(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterAllMyReports</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::AllMyReports</c> filter to the parent data source.
    /// </summary>
    protected void filterAllMyReports()
    {
        QueryBuildRange range;
        PurchReqRequisitionerFilter::createReports();
        qbdsPurchReqRequisitionerFilter = topDatasource.addDataSource(tablenum(PurchReqRequisitionerFilter));
        qbdsPurchReqRequisitionerFilter.joinMode(JoinMode::ExistsJoin);
        if (topDatasource.table() == tablenum(PurchReqTable))
        {
            qbdsPurchReqRequisitionerFilter.addLink(fieldnum(PurchReqTable, Originator), fieldnum(PurchReqRequisitionerFilter, Originator));
        }
        else
        {
            qbdsPurchReqRequisitionerFilter.addLink(fieldNumRequisitioner, fieldnum(PurchReqRequisitionerFilter, Requisitioner));
        }
        range = qbdsPurchReqRequisitionerFilter.addRange(fieldnum(PurchReqRequisitionerFilter, OnBehalfReports));
        range.value(queryValue(PurchReqOnBehalfReports::Reports));
        range.status(RangeStatus::Locked);

        range = qbdsPurchReqRequisitionerFilter.addRange(fieldnum(PurchReqRequisitionerFilter, Originator));
        range.value(queryValue(HcmWorker::userId2Worker(curuserid())));
        range.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterAssignedToMe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::AssignedToMe</c> filter to the parent data source.
    /// </summary>
    protected void filterAssignedToMe()
    {
        #define.SysWorkflowTable("SysWorkflowTableAssignedToMe")
        #define.SysWorkflowTable1("SysWorkflowTableAssignedToMe1")
        #define.WorkflowCorrelationId("SysWorkflowTableAssignedToMe.WorkflowCorrelationId")
        #define.WorkflowCorrelationId1("SysWorkflowTableAssignedToMe1.WorkflowCorrelationId")
        #define.ParentCorrelationId("SysWorkflowTableAssignedToMe.WorkflowCorrelationId == SysWorkflowTableAssignedToMe1.ParentCorrelationId")

        QueryBuildDataSource    qbdsWorkFlowWorkItemTable;
        QueryBuildDataSource    qbdsSysWorkflowTable2;
        QueryBuildRange         rangeId;
        QueryBuildRange         rangeStatus;
        QueryBuildRange         rangeAssignee;
        QueryBuildRange         rangeCorrelationId;
        QueryBuildRange         parentCorrelationId;

        if (qbdsSysWorkFlowTable)
        {
            qbdsSysWorkFlowTable.enabled(true);
        }
        else
        {
            if (topDatasource.table() == tablenum(PurchReqTable))
            {
                qbdsPurchReqTable = topDatasource;
            }
            else
            {
                qbdsPurchReqTable = topDatasource.addDataSource(tablenum(PurchReqTable));
                qbdsPurchReqTable.joinMode(JoinMode::ExistsJoin);
                qbdsPurchReqTable.relations(true);
            }

            // where SysWorkflowTable exists by RecId and TableId
            qbdsSysWorkFlowTable = qbdsPurchReqTable.addDataSource(tablenum(SysWorkflowTable),#SysWorkflowTable);
            qbdsSysWorkFlowTable.joinMode(JoinMode::ExistsJoin);
            qbdsSysWorkFlowTable.addLink(fieldnum(PurchTable, RecId), fieldnum(SysWorkflowTable,ContextRecId));
            qbdsSysWorkFlowTable.addLink(fieldnum(PurchTable, TableId), fieldnum(SysWorkflowTable,ContextTableId));

            // Add SysWorkflowTable2 to result when it is a child of SysWorkflowTable1
            qbdsSysWorkflowTable2 = qbdsSysWorkFlowTable.addDataSource(tablenum(SysWorkflowTable),#SysWorkflowTable1);
            qbdsSysWorkflowTable2.joinMode(JoinMode::OuterJoin);
            parentCorrelationId = qbdsSysWorkflowTable2.addRange(fieldnum(SysWorkflowTable, WorkflowCorrelationId));
            parentCorrelationId.value(#ParentCorrelationId);
            parentCorrelationId.status(RangeStatus::Hidden);

            // work item is related to either of the 2 SysWorkflowTable result sets
            qbdsWorkFlowWorkItemTable = qbdsSysWorkFlowTable.addDataSource(tablenum(WorkflowWorkItemTable));
            qbdsWorkFlowWorkItemTable.joinMode(JoinMode::ExistsJoin);

            rangeCorrelationId = qbdsWorkFlowWorkItemTable.addRange(fieldnum(WorkflowWorkItemTable, CorrelationId));
            rangeCorrelationId.value(strfmt( '((%1 == %2) || (%1 == %3))',
                                     fieldstr(WorkflowWorkItemTable, CorrelationId),
                                     #WorkflowCorrelationId,
                                     #WorkflowCorrelationId1));
            rangeCorrelationId.status(RangeStatus::Hidden);

             // pending work items only
            rangeStatus = qbdsWorkFlowWorkItemTable.addRange(fieldnum(WorkflowWorkItemTable, Status));
            rangeStatus.value(queryValue(WorkflowWorkItemStatus::Pending));
            rangeStatus.status(RangeStatus::Locked);

            // assigned to current user only
            rangeAssignee = qbdsWorkFlowWorkItemTable.addRange(fieldnum(WorkflowWorkItemTable, UserId));
            rangeAssignee.value(queryValue(curuserid()));

            rangeAssignee.status(RangeStatus::Locked);

            //The Id-range is only used to lock the query from the Ui
            rangeId = qbdsWorkFlowWorkItemTable.addRange(fieldnum(WorkflowWorkItemTable, Id));
            rangeId.status(RangeStatus::Locked);
            rangeId.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterAssignedToMyQueues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::AssignedToMyQueues</c> filter to the parent data source.
    /// </summary>
    public void filterAssignedToMyQueues()
    {
        QueryBuildDataSource    qbdsWorkFlowItemTable;
        QueryBuildDataSource    qbdsWorkflowWorkItemQueue;
        QueryBuildDataSource    qbdsWorkflowWorkItemQueueAssignee;
        QueryBuildDataSource    qbdsWorkflowQueueDocumentCommonFields;
        QueryBuildRange         rangeId;
        QueryBuildRange         rangeStatus;
        QueryBuildRange         rangeAssignee;
        QueryBuildRange         rangeWorkflowQueueDocument;

        if (topDatasource.table() == tablenum(PurchReqTable))
        {
            qbdsPurchReqTable = topDatasource;
        }
        else
        {
            qbdsPurchReqTable = topDatasource.addDataSource(tablenum(PurchReqTable));
            qbdsPurchReqTable.joinMode(JoinMode::ExistsJoin);
            qbdsPurchReqTable.relations(true);
        }

        qbdsWorkflowQueueDocumentCommonFields = qbdsPurchReqTable.addDataSource(tablenum(WorkflowQueueDocumentCommonFields));
        qbdsWorkflowQueueDocumentCommonFields.joinMode(JoinMode::ExistsJoin);

        // set the join where clause values
        rangeWorkflowQueueDocument = qbdsWorkflowQueueDocumentCommonFields.addRange(fieldnum(PurchReqTable, RecId));

        // Setting the range status to hidden, so it does not require addition permissions check.
        rangeWorkflowQueueDocument.status(RangeStatus::Hidden);
        rangeWorkflowQueueDocument.value(strfmt('((%1 == %2) || (%3 == %2) && (%4 == %5) || (%6 == %5))',
                                        fieldstr(WorkflowQueueDocumentCommonFields, RefRecId),
                                        'PurchReqTable.RecId',
                                        fieldstr(WorkflowQueueDocumentCommonFields, ParentRefRecId),
                                        fieldstr(WorkflowQueueDocumentCommonFields, RefTableId),
                                        'PurchReqTable.TableId',
                                        fieldstr(WorkflowQueueDocumentCommonFields, ParentRefTableId)));

        // set the rest of the exist join links
        qbdsWorkFlowItemTable = qbdsWorkflowQueueDocumentCommonFields.addDataSource(tablenum(WorkflowWorkItemTable));
        qbdsWorkFlowItemTable.joinMode(JoinMode::ExistsJoin);
        qbdsWorkFlowItemTable.addLink(fieldnum(WorkflowQueueDocumentCommonFields, WorkflowWorkitem), fieldnum(WorkflowWorkItemTable, RecId));

        qbdsWorkflowWorkItemQueue = qbdsWorkFlowItemTable.addDataSource(tablenum(WorkflowWorkItemQueue));
        qbdsWorkflowWorkItemQueue.joinMode(JoinMode::ExistsJoin);

        qbdsWorkflowWorkItemQueueAssignee = qbdsWorkflowWorkItemQueue.addDataSource(tablenum(WorkflowWorkItemQueueAssignee));
        qbdsWorkflowWorkItemQueueAssignee.joinMode(JoinMode::ExistsJoin);
        qbdsWorkflowWorkItemQueue.addLink(fieldnum(WorkflowWorkItemTable,Queue),fieldnum(WorkflowWorkItemQueue, RecId));
        qbdsWorkflowWorkItemQueueAssignee.addLink(fieldnum(WorkflowWorkItemQueue,RecId),fieldnum(WorkflowWorkItemQueueAssignee, WorkitemQueue));

        // pending work items only
        rangeStatus = qbdsWorkFlowItemTable.addRange(fieldnum(WorkflowWorkItemTable, Status));
        rangeStatus.value(queryValue(WorkflowWorkItemStatus::Pending));
        rangeStatus.status(RangeStatus::Locked);

        // assigned to current user only
        rangeAssignee = qbdsWorkflowWorkItemQueueAssignee.addRange(fieldnum(WorkflowWorkItemQueueAssignee, User));
        rangeAssignee.value(queryValue(curuserid()));
        rangeAssignee.status(RangeStatus::Locked);

        //The Id-range is only used to lock the query from the UI
        rangeId = qbdsWorkFlowItemTable.addRange(fieldnum(WorkflowWorkItemTable, Id));
        rangeId.status(RangeStatus::Locked);
        rangeId.enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterCreatedByMe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::CreatedByMe</c> filter to the parent data source.
    /// </summary>
    protected void filterCreatedByMe()
    {
        QueryBuildRange range;
        if (topDatasource.table() == tablenum(PurchReqTable))
        {
            qbdsCreatedByMe = topDatasource;
        }
        else
        {
            qbdsCreatedByMe = topDatasource.addDataSource(tablenum(PurchReqTable));
            qbdsCreatedByMe.joinMode(JoinMode::ExistsJoin);
            qbdsCreatedByMe.relations(true);
        }

        range = qbdsCreatedByMe.addRange(fieldnum(PurchReqTable, CreatedBy));
        range.value(queryValue(curuserid()));
        range.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterMyDirectReports</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::MyDirectReports</c> filter to the parent data source.
    /// </summary>
    protected void filterMyDirectReports()
    {
        QueryBuildRange                     rangeReportsTo;
        HcmPositionWorkerAssignment         hcmPositionWorkerAssignment;
        qbdsHcmPositionWorkerAssignment = topDatasource.addDataSource(tablenum(HcmPositionWorkerAssignment));
        qbdsHcmPositionWorkerAssignment.joinMode(JoinMode::ExistsJoin);
        if (topDatasource.table() == tablenum(PurchReqTable))
        {
            qbdsHcmPositionWorkerAssignment.addLink(fieldnum(PurchReqTable, Originator), fieldnum(HcmPositionWorkerAssignment, Worker));
        }
        else
        {
            qbdsHcmPositionWorkerAssignment.addLink(fieldNumRequisitioner, fieldnum(HcmPositionWorkerAssignment, Worker));
        }

        QueryBuildDataSource qbdsHcmPositionHierarchy = qbdsHcmPositionWorkerAssignment.addDataSource(tablenum(HcmPositionHierarchy));
        qbdsHcmPositionHierarchy.addLink(fieldNum(HcmPositionWorkerAssignment, Position), fieldNum(HcmPositionHierarchy, Position));

        while select Position, Worker from hcmPositionWorkerAssignment
            where hcmPositionWorkerAssignment.Worker == HcmWorker::userId2Worker(curuserid())
        {
            rangeReportsTo = qbdsHcmPositionHierarchy.addRange(fieldnum(HcmPositionHierarchy, ParentPosition));
            rangeReportsTo.value(queryValue(hcmPositionWorkerAssignment.Position));
            rangeReportsTo.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterMyRequisitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::MyRequisitions</c> filter to the parent data source.
    /// </summary>
    protected void filterMyRequisitions()
    {
        RecId           requisitionerRecId = HcmWorker::userId2Worker(curuserid());

        if (topDatasource.table() == tablenum(PurchReqTable))
        {
            if (bottomDatasource)
            {
                rangeMyRequisitions = SysQuery::findOrCreateRange(bottomDatasource, fieldNumRequisitioner);
                rangeMyRequisitions.value(queryValue(requisitionerRecId));
                rangeMyRequisitions.status(RangeStatus::Locked);
            }

            if (isFilterHeaderOriginator)
            {
                topFilterDataSource.enabled(true);

                rangeMyRequisitionsDynamic = SysQuery::findOrCreateRange(topFilterDataSource, fieldNumRequisitioner);
                rangeMyRequisitionsDynamic.value(queryValue(requisitionerRecId));
                rangeMyRequisitionsDynamic.status(RangeStatus::Locked);
            }
        }
        else
        {
            rangeMyRequisitions = SysQuery::findOrCreateRange(topDatasource, fieldNumRequisitioner);
            rangeMyRequisitions.value(queryValue(requisitionerRecId));
            rangeMyRequisitions.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterNotRecordedRequisitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies the <c>PurchReqShowRequisitions::NotRecordedRequisitions</c> filter to the parent data source.
    /// </summary>
    public void filterNotRecordedRequisitions()
    {
        QueryBuildRange         rangeIsPreEncumbranceRequired;

        if (topDatasource.table() == tablenum(PurchReqTable))
        {
            qbdsPurchReqTable = topDatasource;
        }
        else
        {
            qbdsPurchReqTable = topDatasource.addDataSource(tablenum(PurchReqTable));
            qbdsPurchReqTable.joinMode(JoinMode::ExistsJoin);
            qbdsPurchReqTable.relations(true);
        }

        qbdsPurchReqLine = qbdsPurchReqTable.addDataSource(tablenum(PurchReqLine));
        qbdsPurchReqLine.joinMode(JoinMode::ExistsJoin);
        qbdsPurchReqLine.relations(true);

        rangeIsPreEncumbranceRequired = qbdsPurchReqLine.addRange(fieldnum(PurchReqLine, IsPreEncumbranceRequired));
        rangeIsPreEncumbranceRequired.value(queryValue(UnknownNoYes::Unknown));
        rangeIsPreEncumbranceRequired.status(RangeStatus::Locked);

        qbdsPurchReqLineProcessingError = qbdsPurchReqLine.addDataSource(tablenum(PurchReqLineProcessingError));
        qbdsPurchReqLineProcessingError.joinMode(JoinMode::ExistsJoin);
        qbdsPurchReqLineProcessingError.addLink(fieldnum(PurchReqLine, RecId), fieldnum(PurchReqLineProcessingError, PurchReqLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(QueryBuildDataSource _topDatasource,
                       fieldId              _fieldNumRequisitioner,
                       QueryBuildDataSource _bottomDataSource         = null,
                       boolean              _isFilterHeaderOriginator = true)
    {
        topDatasource            = _topDatasource;
        bottomDataSource         = _bottomDataSource;
        fieldNumRequisitioner    = _fieldNumRequisitioner;
        isFilterHeaderOriginator = _isFilterHeaderOriginator;

        if (topDatasource.table() == tablenum(PurchReqTable) && isFilterHeaderOriginator)
        {
            topFilterDataSource = topDatasource.addDataSource(tablenum(PurchReqLine));
            topFilterDataSource.addLink(fieldnum(PurchReqTable, RecId), fieldnum(PurchReqLine, PurchReqTable));
            topFilterDataSource.joinMode(JoinMode::ExistsJoin);
            topFilterDataSource.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets all applied filters.
    /// </summary>
    public void resetFilter()
    {
        if (topFilterDataSource)
        {
            topFilterDataSource.enabled(false);
        }

        if (qbdsSysWorkFlowTable && qbdsSysWorkFlowTable.enabled())
        {//Assigned to me
            qbdsSysWorkFlowTable.enabled(false);
        }

        if (qbdsPurchReqRequisitionerFilter && qbdsPurchReqRequisitionerFilter.enabled())
        {//All my reports
            qbdsPurchReqRequisitionerFilter.enabled(false);
        }

        //Created by me
        if (qbdsCreatedByMe)
        {
            qbdsCreatedByMe.clearRange(fieldnum(PurchReqTable, CreatedBy));
        }

        //All my direct Reports
        if (qbdsHcmPositionWorkerAssignment)
        {
            qbdsHcmPositionWorkerAssignment.enabled(false);
        }

        //My requisitions
        if (rangeMyRequisitions)
        {
            rangeMyRequisitions.value("");
        }

        if (topDatasource.table() == tablenum(PurchReqTable) && topFilterDataSource && rangeMyRequisitionsDynamic)
        {
            rangeMyRequisitionsDynamic.value("");
        }

        //Not recorded purchase requisitions
        if (qbdsPurchReqLine)
        {
            qbdsPurchReqLine.clearRange(fieldnum(PurchReqLine, IsPreEncumbranceRequired));
            qbdsPurchReqLine.enabled(false);
        }
        if (qbdsPurchReqLineProcessingError)
        {
            qbdsPurchReqLineProcessingError.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqLineHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PurchReqShowRequisitionsFilter</c> class.
    /// </summary>
    /// <param name="_topDatasource">
    /// The query build data source on which to apply the filter.
    /// </param>
    /// <param name="_fieldNumRequisitioner">
    /// The field ID of the requisitioner field in the parent data source.
    /// </param>
    /// <returns>
    /// An instance of the <c>PurchReqShowRequisitionsFilter</c> class.
    /// </returns>
    static PurchReqShowRequisitionsFilter newPurchReqLineHistory(QueryBuildDataSource _topDatasource,
                                                          fieldId              _fieldNumRequisitioner)
    {
        PurchReqShowRequisitionsFilter filter = new PurchReqShowRequisitionsFilter(_topDatasource,  _fieldNumRequisitioner);

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchReqShowRequisitionsFilter</c> class.
    /// </summary>
    /// <param name="_topDatasource">
    ///    The query build data source where the filter should be applied.
    /// </param>
    /// <param name="_bottomDataSource">
    ///    The query build data source that represents the lines for the top data source.
    /// </param>
    /// <param name="_fieldNumRequisitioner">
    ///    The field ID of the requisitioner field in the parent data source.
    /// </param>
    /// <param name="_isFilterHeaderOriginator">
    ///    A Boolean value that indicates whether the header is filtered by a value for originator.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchReqShowRequisitionsFilter</c> class.
    /// </returns>
    static PurchReqShowRequisitionsFilter newPurchReqTable(QueryBuildDataSource _topDatasource,
                                                           QueryBuildDataSource _bottomDataSource,
                                                           fieldId              _fieldNumRequisitioner,
                                                           boolean              _isFilterHeaderOriginator)
    {
        PurchReqShowRequisitionsFilter filter = new PurchReqShowRequisitionsFilter(_topDatasource,  _fieldNumRequisitioner, _bottomDataSource, _isFilterHeaderOriginator);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>