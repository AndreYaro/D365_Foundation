<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceFunctionLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ServiceFunctionLine</c> class is a base class that is created for operations on service
/// order lines.
/// </summary>
/// <remarks>
/// This class provides a common dialog box for service order line jobs. You select target service
/// order lines by using a query user dialog box.The <c>SMAServiceFunctionLine</c> class is extended by
/// the <c>SMAServiceFunctionLine_Create</c> and <c>SMAServiceFunctionLine_Transfer</c> classes.The
/// class extends the <c>RunBaseBatch</c> class.
/// </remarks>
public class SmaServiceFunctionLine extends RunBaseBatch implements BatchRetryable
{
    Args                args;

    Query               serviceQuery;
    SysQueryRun         queryRun;

    DialogGroup         dialogPeriodGroup;
    DialogField         dialogPeriodFromDate;
    DialogField         dialogPeriodToDate;
    DialogField         dialogShowInfolog;
    DialogField         dialogSelectHour;
    DialogField         dialogSelectExpense;
    DialogField         dialogSelectItem;
    DialogField         dialogSelectFee;

    SMAPeriodDateFrom   periodFromDate;
    SMAPeriodDateTo     periodToDate;

    NoYesId             showInfolog;
    NoYesId             selectHour;
    NoYesId             selectExpense;
    NoYesId             selectItem;
    NoYesId             selectFee;

    boolean             continuous;

    #define.CurrentVersion(7)
    #localmacro.CurrentList
        periodFromDate,
        periodToDate,
        showInfolog,
        selectHour,
        selectExpense,
        selectItem,
        selectFee,
        continuous
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSetup</Name>
				<Source><![CDATA[
    public boolean checkSetup()
    {
        boolean ret = true;

        // check to see if journals are in place
        ret = SMAParameters::existsJournals();

        // Check to see if all stages are in place
        ret = ret && SMAStageTable::existsStages();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        // From/to period Group
        dialog.addGroup("@SYS40");
        dialogPeriodFromDate    = dialog.addFieldValue(extendedtypestr(SMAPeriodDateFrom), periodFromDate);
        dialogPeriodToDate      = dialog.addFieldValue(extendedtypestr(SMAPeriodDateTo), periodToDate);

        // ShowInfoLog Group
        dialog.addGroup("@SYS25246");
        dialogShowInfolog       = dialog.addFieldValue(extendedtypestr(NoYesId), showInfolog, "@SYS74132", "@SYS91061");

        // Include transactions group
        dialog.addGroup("@SYS78373");
        dialogSelectHour        = dialog.addFieldValue(extendedtypestr(NoYesId), selectHour, "@SYS5269", "@SYS91062");
        dialogSelectExpense     = dialog.addFieldValue(extendedtypestr(NoYesId), selectExpense, "@SYS78349", "@SYS91063");
        dialogSelectItem        = dialog.addFieldValue(extendedtypestr(NoYesId), selectItem, "@SYS7407", "@SYS91064");
        dialogSelectFee         = dialog.addFieldValue(extendedtypestr(NoYesId), selectFee, "@SYS9154", "@SYS91065");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        periodFromDate  = dialogPeriodFromDate.value();
        periodToDate    = dialogPeriodToDate.value();

        showInfolog     = dialogShowInfolog.value();

        selectHour      = dialogSelectHour.value();
        selectExpense   = dialogSelectExpense.value();
        selectItem      = dialogSelectItem.value();
        selectFee       = dialogSelectFee.value();

        if (!this.isTransactionTypeSelected())
        {
            // No transaction types are selected
            ret = checkFailed("@SYS91463");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a transaction type has been selected.
    /// </summary>
    /// <returns>true if a transaction type is selected; otherwise, false.</returns>
    protected boolean isTransactionTypeSelected()
    {
        return selectHour || selectExpense || selectItem  || selectFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStagesAllowed</Name>
				<Source><![CDATA[
    public str getStagesAllowed()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTypeFieldId</Name>
				<Source><![CDATA[
    protected fieldId getTransactionTypeFieldId(QueryBuildDataSource _qbds)
    {
        fieldId fieldId;

        // Decide what fieldnum to use
        switch (_qbds.table())
        {
            case tablenum(SMAAgreementLine) :
                fieldId = fieldnum(SMAAgreementLine, TransactionType);
                break;

            case tablenum(SMAServiceOrderLine) :
                fieldId = fieldnum(SMAServiceOrderLine, TransactionType);
                break;

            default:
                // "Invalid argument!"
                throw error("@SYS111577");
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    protected void initDefaults(Args _args)
    {
        this.getLast();
        this.parmArgs(_args);

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public SysQueryRun queryBuild()
    {
        return this.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryUpdateRange</Name>
				<Source><![CDATA[
    protected void queryUpdateRange()
    {
        MultiSelectionHelper    multiSelectionHelper;
        SMAAgreementTable       callerAgreementTable;
        SMAServiceOrderTable    callerServiceOrderTable;

        QueryBuildDataSource    qbdsProjectTable;
        QueryBuildDataSource    qbdsServiceOrder;
        QueryBuildDataSource    qbdsServiceOrderLine;
        QueryBuildDataSource    qbdsAgreement;
        QueryBuildDataSource    qbdsAgreementLine;

        QueryBuildRange         criteriaCustAccount;
        QueryBuildRange         criteriaInvoiceProjId;
        QueryBuildRange         criteriaProjId;
        QueryBuildRange         criteriaAgreementId;
        QueryBuildRange         criteriaAgreementLineNum;
        QueryBuildRange         criteriaServiceOrderId;

        SMAServiceOrderLine     serviceOrderLine;
        SMAAgreementLine        agreementLine;

        qbdsServiceOrder        = serviceQuery.dataSourceTable(tablenum(SMAServiceOrderTable));
        qbdsServiceOrderLine    = serviceQuery.dataSourceTable(tablenum(SMAServiceOrderLine));
        qbdsAgreement           = serviceQuery.dataSourceTable(tablenum(SMAAgreementTable));
        qbdsAgreementLine       = serviceQuery.dataSourceTable(tablenum(SMAAgreementLine));
        qbdsProjectTable        = serviceQuery.dataSourceTable(tablenum(ProjTable));

        criteriaProjId          = qbdsProjectTable.addRange(fieldnum(ProjTable, ProjId));
        criteriaInvoiceProjId   = qbdsProjectTable.addRange(fieldnum(ProjTable, ProjInvoiceProjId));

        if (qbdsServiceOrder)
        {
            criteriaServiceOrderId  = qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, ServiceOrderId));
            criteriaCustAccount     = qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, CustAccount));
        }
        if (qbdsAgreement)
        {
            criteriaAgreementId     = qbdsAgreement.addRange(fieldnum(SMAAgreementTable, AgreementId));
            if (qbdsAgreementLine)
            {
                criteriaAgreementLineNum = qbdsAgreementLine.addRange(fieldnum(SMAServiceOrderLine, AgreementLineNum));
            }
        }

        if (args && args.caller() && args.record())
        {
            // Is creation called from a form?
            if (args.caller() is FormRun)
            {
                multiSelectionHelper = MultiSelectionHelper::createFromCaller(args.caller());

                switch (args.record().TableId)
                {
                    case tablenum(CustTable):
                        multiSelectionHelper.createQueryRanges(qbdsServiceOrder, fieldstr(CustTable, AccountNum));
                        break;

                    case tablenum(ProjInvoiceTable):
                        multiSelectionHelper.createQueryRanges(qbdsProjectTable, fieldstr(ProjInvoiceTable, ProjInvoiceProjId));
                        break;

                    case tablenum(ProjTable):
                        multiSelectionHelper.createQueryRanges(qbdsProjectTable, fieldstr(ProjTable, ProjId));
                        break;

                    case tablenum(SMAAgreementTable):
                        if (qbdsServiceOrder)
                        {
                            multiSelectionHelper.createQueryRanges(qbdsServiceOrder, fieldstr(SMAAgreementTable, AgreementId));
                        }
                        if (qbdsAgreement)
                        {
                            multiSelectionHelper.createQueryRanges(qbdsAgreement, fieldstr(SMAAgreementTable, AgreementId));
                        }
                        break;

                    case tablenum(SMAServiceOrderTable):
                        multiSelectionHelper.createQueryRanges(qbdsServiceOrder, fieldstr(SMAServiceOrderTable, ServiceOrderId));
                        break;

                    case tablenum(SMAAgreementLine):
                        if (qbdsServiceOrderLine)
                        {
                            multiSelectionHelper.createQueryRanges(qbdsServiceOrderLine, fieldstr(SMAAgreementLine, AgreementLineNum));
                        }
                        if (qbdsAgreementLine)
                        {
                            multiSelectionHelper.createQueryRanges(qbdsAgreementLine, fieldstr(SMAAgreementLine, AgreementLineNum));
                        }

                        if (qbdsServiceOrder && !criteriaAgreementId)
                        {
                            criteriaAgreementId = qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, AgreementId));
                        }
                        agreementLine           = multiSelectionHelper.getFirst();
                        criteriaAgreementId.value(agreementLine.AgreementId);
                        break;

                    case tablenum(SMAServiceOrderLine):
                        multiSelectionHelper.createQueryRanges(qbdsServiceOrderLine, fieldstr(SMAServiceOrderLine, ServiceOrderLineNum));
                        serviceOrderLine        = multiSelectionHelper.getFirst();
                        criteriaServiceOrderId.value(serviceOrderLine.ServiceOrderId);
                        break;
                }
            }
            else
            {
                // Is creation called headless?
                switch (args.record().TableId)
                {
                    case tablenum(SMAAgreementTable):
                        callerAgreementTable = args.record();
                        if (qbdsServiceOrder)
                        {
                            qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, AgreementId)).value(callerAgreementTable.AgreementId);
                        }
                        if (qbdsAgreement)
                        {
                            qbdsAgreement.addRange(fieldnum(SMAAgreementTable, AgreementId)).value(callerAgreementTable.AgreementId);
                        }
                        break;

                    case tablenum(SMAServiceOrderTable):
                        callerServiceOrderTable = args.record();
                        qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, ServiceOrderId)).value(callerServiceOrderTable.ServiceOrderId);
                        break;
                }
            }
        }

        this.setBasicRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job is run by using the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasicRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates basic locked ranges for the query.
    /// </summary>
    protected void setBasicRanges()
    {
        QueryBuildDataSource    qbds_ServiceOrder;
        QueryBuildRange         qbr_Stage;

        qbds_ServiceOrder       = serviceQuery.dataSourceTable(tablenum(SMAServiceOrderTable));

        // Stages
        qbr_Stage = qbds_ServiceOrder.addRange(fieldnum(SMAServiceOrderTable, StageId));
        qbr_Stage.value((this.getStagesAllowed()));
        qbr_Stage.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodFromDate</Name>
				<Source><![CDATA[
    void setPeriodFromDate(SMAPeriodDateFrom _periodFromDate)
    {
        periodFromDate = _periodFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodToDate</Name>
				<Source><![CDATA[
    void setPeriodToDate(SMAPeriodDateTo _periodToDate)
    {
        periodToDate = _periodToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryDatePeriod</Name>
				<Source><![CDATA[
    protected void setQueryDatePeriod()
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        utcdatetime             dateFrom;
        utcdatetime             dateTo;

        qbds = queryRun.query().dataSourceTable(tableNum(SMAServiceOrderTable));
        dateFrom = DateTimeUtil::newDateTime(periodFromDate, 0, DateTimeUtil::getUserPreferredTimeZone());
        dateTo = DateTimeUtil::newDateTime(periodToDate, 0, DateTimeUtil::getUserPreferredTimeZone());
        // Add 1 day to get inclusive range
        dateTo = DateTimeUtil::addDays(dateTo, 1);

        if (periodFromDate && periodToDate)
        {
            qbr = qbds.addRange(fieldNum(SMAServiceOrderTable, ServiceDateTime));
            qbr.value(strFmt('((%1 >= %2) && (%3 < %4))',
                fieldStr(SMAServiceOrderTable, ServiceDateTime), DateTimeUtil::toStr(dateFrom),
                fieldStr(SMAServiceOrderTable, ServiceDateTime), DateTimeUtil::toStr(dateTo)));
        }
        else if (periodFromDate)
        {
            qbr = qbds.addRange(fieldNum(SMAServiceOrderTable, ServiceDateTime));
            qbr.value(strFmt('(%1 >= %2)',
                fieldStr(SMAServiceOrderTable, ServiceDateTime), DateTimeUtil::toStr(dateFrom)));
        }
        else if (periodToDate)
        {
            qbr = qbds.addRange(fieldNum(SMAServiceOrderTable, ServiceDateTime));
            qbr.value(strFmt('(%1 < %2)',
                fieldStr(SMAServiceOrderTable, ServiceDateTime), DateTimeUtil::toStr(dateTo)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectExpense</Name>
				<Source><![CDATA[
    public void setSelectExpense(NoYesId _selectExpense)
    {
        selectExpense = _selectExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectFee</Name>
				<Source><![CDATA[
    public void setSelectFee(NoYesId _selectFee)
    {
        selectFee = _selectFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectHour</Name>
				<Source><![CDATA[
    public void setSelectHour(NoYesId _selectHour)
    {
        selectHour = _selectHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectItem</Name>
				<Source><![CDATA[
    public void setSelectItem(NoYesId _selectItem)
    {
        selectItem = _selectItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShowInfolog</Name>
				<Source><![CDATA[
    void setShowInfolog(NoYes _showInfolog)
    {
        showInfolog = _showInfolog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionTypes</Name>
				<Source><![CDATA[
    protected void setTransactionTypes(QueryBuildDataSource _qbds)
    {
        QueryBuildRange     qbr;
        fieldId             fieldId;

        fieldId = this.getTransactionTypeFieldId(_qbds);

        if (selectHour)
        {
            qbr = _qbds.addRange(fieldId);
            qbr.value(queryValue(SMATransactionType::Hour));
        }

        if (selectExpense)
        {
            qbr = _qbds.addRange(fieldId);
            qbr.value(queryValue(SMATransactionType::Expense));
        }

        if (selectItem)
        {
            qbr = _qbds.addRange(fieldId);
            qbr.value(queryValue(SMATransactionType::Item));
        }

        if (selectFee)
        {
            qbr = _qbds.addRange(fieldId);
            qbr.value(queryValue(SMATransactionType::Fee));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = conpeek(_packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                else
                {
                    this.queryBuild();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    // Contruct Service function line class
    private static SMAServiceFunctionLine construct()
    {
        return new SMAServiceFunctionLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SMAServiceFunctionLine   smaServiceFunctionLine;

        // check if there are arguments and if they are of the correct type
        if (!(_args && _args.parmEnumType() == enumnum(SMAServiceFunctionType)))
        {
            // function has been used incorrectly
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        smaServiceFunctionLine = SMAServiceFunctionLine::newArgs(_args);
        if (smaServiceFunctionLine.checkSetup() && smaServiceFunctionLine.prompt())
        {
            smaServiceFunctionLine.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>SMAServiceFunctionLine</c> instance from the given values.
    /// </summary>
    /// <param name="_args">
    ///    The given values that will be used to create the <c>SMAServiceFunctionLine</c> instance.
    /// </param>
    /// <returns>
    ///    The new <c>SMAServiceFunctionLine</c> instance.
    /// </returns>
    public static SMAServiceFunctionLine newArgs(Args _args)
    {
        // check if there are arguments and if they are of the correct type
        if (!(_args && _args.parmEnumType() == enumnum(SMAServiceFunctionType)))
        {
            // function has been used incorrectly
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        SMAServiceFunctionLine smaServiceFunctionLine = SMAServiceFunctionLine::newSMAServiceFunctionLineFromServiceFunction(_args.parmEnum());
        if (!smaServiceFunctionLine)
        {
            // Invalid argument!
            throw error("@SYS111577");
        }

        smaServiceFunctionLine.initDefaults(_args);

        return smaServiceFunctionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSMAServiceFunctionLineFromServiceFunction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>SMAServiceFunctionLine</c> instance from the given values.
    /// </summary>
    /// <param name="_args">
    ///    The service function type.
    /// </param>
    /// <returns>
    ///    A <c>SMAServiceFunctionLine</c> instance.
    /// </returns>
    protected static SMAServiceFunctionLine newSMAServiceFunctionLineFromServiceFunction(SMAServiceFunctionType _serviceFunctionType)
    {
        switch (_serviceFunctionType)
        {
            case SMAServiceFunctionType::Create :
                return new SMAServiceFunctionLine_Create();

            case SMAServiceFunctionType::Transfer :
                return new SMAServiceFunctionLine_Transfer();
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>