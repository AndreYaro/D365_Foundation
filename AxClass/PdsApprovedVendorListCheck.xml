<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsApprovedVendorListCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsApprovedVendorListCheck</c> class is the parent for approved vendor list checks.
/// </summary>
/// <remarks>
/// This class is overridden to allow the setup of the class for the various
/// function for which AVL is checked
/// </remarks>
public class PdsApprovedVendorListCheck
{
    date                    activeDate;
    VendAccount             vendAccount;
    InventTable             inventTable;

    FromDate                fromDate;
    ToDate                  toDate;
    boolean                 ignoreError;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if Approved Vendor List record is present. If valid record found 'OK' is returned.If no valid record is found,
    /// the warning value set in the item master is returned.
    /// </summary>
    /// <returns>
    /// Corresponding value of PdsVendorCheckResult.
    /// </returns>
    public PdsVendorCheckResult check()
    {
        PdsVendorCheckResult    ret = PdsVendorCheckResult::OK;

        if (vendAccount
            && inventTable.PdsVendorCheckItem != PdsVendorCheckItem::NoCheck
            && !this.existsApprovedVendorForItem(inventTable.ItemId,
                                                vendAccount,
                                                activeDate)
            )
        {
            switch (inventTable.PdsVendorCheckItem)
            {
                case PdsVendorCheckItem::WarningOnly :
                    ret = PdsVendorCheckResult::Warning;
                    break;
                case PdsVendorCheckItem::NotAllowed :
                    ret = PdsVendorCheckResult::NotAllowed;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns InventTable set using parmBuffer method.
    /// </summary>
    /// <returns>
    /// Returns InventTable.
    /// </returns>
    public InventTable getInventTable()
    {
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsApprovedVendorForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if an approved vendor exists for the given item.
    /// </summary>
    /// <param name="_itemId">The item id to check</param>
    /// <param name="_vendor">The vendor id to check</param>
    /// <param name="_startDate">The start date for the validation check.</param>
    /// <returns></returns>
    protected boolean existsApprovedVendorForItem(        
        ItemId          _itemId,
        VendAccount     _vendor,
        ValidFromDate   _startDate)
    {
        return PdsApprovedVendorList::existValid(_itemId, _vendor, _startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningMessage</Name>
				<Source><![CDATA[
    protected str warningMessage()
    {
        return strfmt("@SYP4881415",
                    this.parmVendAccount(),
                    this.getInventTable().ItemId,
                    this.parmActiveDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessage</Name>
				<Source><![CDATA[
    protected str errorMessage()
    {
        return strfmt("@SYP4881414",
                    this.parmVendAccount(),
                    this.getInventTable().ItemId,
                    this.parmActiveDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates new instance of class.
    /// </summary>
    protected void new()
    {
        activeDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ignoreError = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveDate</Name>
				<Source><![CDATA[
    public date parmActiveDate(date _activeDate = activeDate)
    {
        if (!prmisdefault(_activeDate))
        {
            activeDate = _activeDate;
        }
        return activeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _common = null)
    {
        if (!prmisdefault(_common) && _common.TableId == tablenum(InventTable))
        {
            inventTable = _common;
            vendAccount = inventTable.PrimaryVendorId;
        }
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        if (!prmisdefault(_fromDate))
        {
            fromDate = _fromDate;
        }
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreError</Name>
				<Source><![CDATA[
    public boolean parmIgnoreError(boolean _ignoreError = ignoreError)
    {
        if (!prmisdefault(_ignoreError))
        {
            ignoreError = _ignoreError;
        }
        return ignoreError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        if (!prmisdefault(_toDate))
        {
            toDate = _toDate;
        }
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        if (!prmisdefault(_vendAccount))
        {
            vendAccount = _vendAccount;
        }

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the check method and if check returns anything other than 'OK'. Either a warning or a fail message will be returned.
    /// </summary>
    /// <returns>
    /// Returns true / false.
    /// </returns>
    public boolean validateCheck()
    {
        boolean     ret = true;

        switch (this.check())
        {
            case PdsVendorCheckResult::NotAllowed:
                ret = false;
                error(this.errorMessage());
                break;
            case PdsVendorCheckResult::Warning:
                warning(this.warningMessage());
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance of class.
    /// </summary>
    /// <returns>
    /// Returns instance of class.
    /// </returns>
    public static PdsApprovedVendorListCheck construct()
    {
        return new PdsApprovedVendorListCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs instance of subclass based on type of record passed in.
    /// </summary>
    /// <param name="_buffer">
    /// Record from caller.
    /// </param>
    /// <param name="_activeDate">
    /// Date from caller (i.e. delivery date, BOM date, etc).
    /// </param>
    /// <returns>
    /// Returns instance of class.
    /// </returns>
    public static PdsApprovedVendorListCheck newFromTable(
        Common  _buffer,
        date    _activeDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        PdsApprovedVendorListCheck avlCheck = PdsApprovedVendorListCheck::newBasedOnTableType(_buffer);

        avlCheck.parmBuffer(_buffer);

        if (!prmisdefault(_activeDate))
        {
            avlCheck.parmActiveDate(_activeDate);
        }

        return avlCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBasedOnTableType</Name>
				<Source><![CDATA[
    private static PdsApprovedVendorListCheck newBasedOnTableType(Common _buffer)
    {
        PdsApprovedVendorListCheckTableIdFactoryAttribute attr = new PdsApprovedVendorListCheckTableIdFactoryAttribute(tableId2Name(_buffer.TableId));
        PdsApprovedVendorListCheck avlCheck = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PdsApprovedVendorListCheck), attr) as PdsApprovedVendorListCheck;

        if (classIdGet(avlCheck) == classNum(PdsApprovedVendorListCheck))
        {
            throw error(strfmt("@PRO1805",tableid2name(_buffer.TableId)));
        }

        return avlCheck;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>