<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchQuantity_Invoice4Paym_RU</c> class calculates quantity of purchase payment invoice lines.
/// </summary>
[DocumentStatusFactory(DocumentStatus::Invoice4Paym_RU)]
class PurchQuantity_Invoice4Paym_RU extends PurchQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates updated quantity, old remainder quantity and new remainder quantity in inventory unit.
    /// </summary>
    /// <param name="_purchLine">
    ///     The <c>PurchLine</c> record used in the calculation.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity qualifier used to determine the quantity; optional.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity update; optional.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be credited; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be calculated; optional.
    /// </param>
    /// <returns>
    ///    A container with the updated quantity, old remainder quantity and new remainder quantity in inventory unit.
    /// </returns>
    protected container calcQtyInvent(PurchLine     _purchLine,
                                      PurchUpdate   _specQty             = PurchUpdate::All,
                                      InventQty     _qty                 = naReal(),
                                      boolean       _creditRemaining     = false,
                                      boolean       _calcRemaining       = true)
    {
        InventTransIdSum    inventTransIdSum;
        InventQty           qtyUpdate;
        InventQty           numOfRemainOri;
        InventQty           qtyRemainNew;

        if (!_purchLine.isStocked())
        {
            return [0,0,0];
        }

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow  : qtyUpdate = _purchLine.InventReceivedNow;
                                                break;

                case PurchUpdate::All         : qtyUpdate = _purchLine.RemainInventPhysical;
                                                break;

                case PurchUpdate::Recorded    : qtyUpdate = InventTransIdSumSingleStatus::qtyRegistered(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                                                break;

                case PurchUpdate::PackingSlip : inventTransIdSum    = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                                                qtyUpdate           = inventTransIdSum.physical();
                                                break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainInventPhysical;
            qtyRemainNew   = _purchLine.RemainInventPhysical;
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates updated quantity, old remainder quantity and new remainder quantity in purchase unit.
    /// </summary>
    /// <param name="_purchLine">
    ///     The <c>PurchLine</c> record used in the calculation.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity qualifier used to determine the quantity; optional.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity update; optional.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be credited; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be calculated; optional.
    /// </param>
    /// <returns>
    ///    A container with the updated quantity, old remainder quantity and new remainder quantity in purchase unit.
    /// </returns>
    protected container calcQtyPurch(PurchLine      _purchLine,
                                     PurchUpdate    _specQty            = PurchUpdate::All,
                                     PurchQty       _qty                = naReal(),
                                     boolean        _creditRemaining    = false,
                                     boolean        _calcRemaining      = true)
    {
        PurchQty            qtyUpdate;
        PurchQty            numOfRemainOri;
        PurchQty            qtyRemainNew;
        boolean             remainOk;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow  : qtyUpdate = _purchLine.PurchReceivedNow;
                                                break;

                case PurchUpdate::All         : qtyUpdate = _purchLine.RemainPurchPhysical;
                                                break;

                case PurchUpdate::Recorded    : if (_purchLine.isStocked())
                                                {
                                                    qtyUpdate = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                                                                    _purchLine.ItemId,
                                                                    _purchLine.InventDimId,
                                                                    InventTransIdSumSingleStatus::qtyRegistered(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId)),
                                                                    InventTableModule::find(_purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId,
                                                                    _purchLine.PurchUnit,
                                                                    NoYes::Yes);
                                                }
                                                break;
                case PurchUpdate::PackingSlip : qtyUpdate = _purchLine.RemainPurchFinancial;
                                                break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainPurchPhysical;

            remainOk = false;

            if (qtyUpdate * _purchLine.PurchQty < 0  &&   _creditRemaining == false)
            {
                remainOk = true;
            }

            if (remainOk)
            {
                qtyRemainNew = _purchLine.RemainPurchPhysical;
            }
            else
            {
                qtyRemainNew = _purchLine.RemainPurchPhysical - qtyUpdate;

                if (qtyRemainNew * _purchLine.PurchQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
        protected container pdsCWCalcQtyInvent(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PdsCWInventQty _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        InventTransIdSum    inventTransIdSum;
        PdsCWInventQty      cwQtyUpdate;
        PdsCWInventQty      cwNumOfRemainOri;
        PdsCWInventQty      cwQtyRemainNew;

        if (!_purchLine.isStocked())
        {
            return [0.0, 0.0, 0.0];
        }

        if (_qty != naReal())
        {
            cwQtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow  :
                    cwQtyUpdate = _purchLine.PdsCWInventReceivedNow;
                    break;

                case PurchUpdate::All         :
                    cwQtyUpdate = _purchLine.PdsCWRemainInventPhysical;
                    break;

                case PurchUpdate::Recorded    :
                    cwQtyUpdate = InventTransIdSumSingleStatus::pdsCWQtyRegistered(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                    break;

                case PurchUpdate::PackingSlip :
                    inventTransIdSum    = InventTransIdSum::newTransOriginId(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                    cwQtyUpdate         = inventTransIdSum.pdsCWPhysical();
                    break;
            }
        }

        if (_calcRemaining)
        {
            cwNumOfRemainOri    = _purchLine.PdsCWRemainInventPhysical;
            cwQtyRemainNew      = _purchLine.PdsCWRemainInventPhysical;
        }

        return [cwQtyUpdate, cwNumOfRemainOri, cwQtyRemainNew];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>