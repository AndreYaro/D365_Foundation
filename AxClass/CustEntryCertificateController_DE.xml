<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEntryCertificateController_DE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustEntryCertificateController_DE</c> class is the controller class for the
///    <c>CustEntryCertificate_DE</c> SSRS report.
/// </summary>
class CustEntryCertificateController_DE extends SrsReportRunController implements BatchRetryable
{    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a data contract that is used by a report.
    /// </summary>
    /// <returns>
    /// The data contract object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustEntryCertificateContract_DE getContract()
    {
        return this.parmReportContract().parmRdpContract() as CustEntryCertificateContract_DE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the record ID that will be used by the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        CustEntryCertificateContract_DE     contract;
        CustEntryCertificateJour_W          jour;

        jour = this.parmArgs().record();

        contract = this.getContract();

        contract.parmRecordId(jour.RecId);
        SrsReportRdlDataContract rdlCotract = this.parmReportContract().parmRdlContract();
        LanguageId reportLanguageId = jour.reportLanguageId();

        rdlCotract.parmLanguageId(reportLanguageId);
        rdlCotract.parmLabelLanguageId(reportLanguageId);

        this.renderingCompleted += eventhandler(CustEntryCertificateController_DE::renderingComplete);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setups the controller object.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object that will be used by the controller.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setupController(Args _args)
    {
        SalesInvoiceJournalPrint        salesInvoiceJournalPrint;
        SalesPackingSlipJournalPrint    salesPackingSlipJournalPrint;

        this.parmReportName(ssrsReportStr(CustEntryCertificate_DE, Report));

        this.parmArgs(_args);

        this.parmShowDialog(false);

        if (classIdGet(this.parmArgs().caller()) == classNum(SalesInvoiceJournalPrint))
        {
            salesInvoiceJournalPrint = this.parmArgs().caller() as SalesInvoiceJournalPrint;
            this.parmReportContract().parmPrintSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsEntryCertificate_W()));
        }
        else if (classIdGet(this.parmArgs().caller()) == classNum(SalesPackingSlipJournalPrint))
        {
            salesPackingSlipJournalPrint = this.parmArgs().caller() as SalesPackingSlipJournalPrint;
            this.parmReportContract().parmPrintSettings(new SRSPrintDestinationSettings(salesPackingSlipJournalPrint.parmPrinterSettingsEntryCertificate_W()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        CustEntryCertificateController_DE    controller;

        if (_args.record().RecId)
        {
            const str LocalizationFeatureReference = 'EUR-00012';
            GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
            controller = new CustEntryCertificateController_DE();
            controller.setupController(_args);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderingComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the report rendering complete event.
    /// </summary>
    /// <param name="_sender">
    /// The controller that raises the event.
    /// </param>
    /// <param name="_eventArgs">
    /// Arguments that provide details on the report rendered.
    /// </param>
    /// <remarks>
    /// Should be registered in <c>preRunModifyContract</c> method.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void renderingComplete(SrsReportRunController _sender, SrsRenderingCompletedEventArgs _eventArgs)
    {
        SRSReportExecutionInfo              executionInfo = _eventArgs.parmReportExecutionInfo();
        CustEntryCertificateContract_DE     contract;
        CustEntryCertificateController_DE   controller = _sender;
        CustEntryCertificateJour_W          entryCertificateJour;
        FormRun                             formRun;

        if (executionInfo && executionInfo.parmIsSuccessful())
        {
            contract = controller.parmReportContract().parmRdpContract();

            ttsBegin;

            entryCertificateJour = CustEntryCertificateJour_W::findRecId(contract.parmRecordId(), true);
            entryCertificateJour.Status = EntryCertificateStatus_W::Printed;
            entryCertificateJour.update();

            ttsCommit;

            // Refresh the grid
            formRun = _sender.parmArgs().caller() as FormRun;
            if (formRun)
            {
                formRun.dataSource(1).research(true);
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>