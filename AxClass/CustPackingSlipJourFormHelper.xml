<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPackingSlipJourFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustPackingSlipJourFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeCorrected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the packing slip can be corrected.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// A customer packing slip journal to check.
    /// </param>
    /// <param name="_isDropShipment">
    /// A boolean value that indicates whether the packing slip journal is a drop shipment.
    /// </param>
    /// <returns>
    /// true if the packing slip can be corrected; otherwise, false.
    /// </returns>
    protected static boolean canBeCorrected(CustPackingSlipJour _custPackingSlipJour, boolean _isDropShipment)
    {
        boolean ret = !_isDropShipment
                   && !_custPackingSlipJour.isCanceled()
                   && !_custPackingSlipJour.isFullyInvoiced()
                   && _custPackingSlipJour.canBeCorrectedForSalesType();

        if (WHSPackingSlipDisallowCorrectionV3Flight::instance().isEnabled())
        {
            ret = ret && !CustPackingSlipJourFormHelper::hasLinesWithWork(_custPackingSlipJour);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCorrectIntercompanyPackingSlip</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void checkCanCorrectIntercompanyPackingSlip(CustPackingSlipJour _custPackingSlipJour)
    {
        PurchLine            purchLine;
        CustPackingSlipTrans custPackingSlipTrans;
        VendPackingSlipJour  vendPackingSlipJour;

        while select IntercompanyInventTransId, RecId from custPackingSlipTrans
            where custPackingSlipTrans.SalesId == _custPackingSlipJour.SalesId
                && custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
                && custPackingSlipTrans.DeliveryDate == _custPackingSlipJour.DeliveryDate
        {
            changeCompany(_custPackingSlipJour.InterCompanyCompanyId)
            {
                select firstOnly PurchId from purchLine
                    where custPackingSlipTrans.IntercompanyInventTransId == purchLine.InventTransId
                        && purchLine.PurchId != _custPackingSlipJour.IntercompanyPurchId
                    exists join vendPackingSlipJour
                        where vendPackingSlipJour.PurchId == purchLine.PurchId
                            && vendPackingSlipJour.PackingSlipId == _custPackingSlipJour.PackingSlipId;

                if (purchLine.PurchId)
                {
                    throw error(strFmt("@SCM:InterCompanyCorrectMltplOrderPackingSlipErrorLabel", _custPackingSlipJour.PackingSlipId));
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the packing slip can be canceled.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// A customer packing slip journal to check.
    /// </param>
    /// <param name="_isDropShipment">
    /// A boolean value that indicates whether the packing slip journal is a drop shipment.
    /// </param>
    /// <param name="_canBeCorrected">
    /// A boolean value that indicates whether the packing slip can be corrected.
    /// </param>
    /// <returns>
    /// true if the packing slip can be canceled; otherwise, false.
    /// </returns>
    protected static boolean canBeCanceled(CustPackingSlipJour _custPackingSlipJour, boolean _isDropShipment, boolean _canBeCorrected)
    {
        return !_isDropShipment && _canBeCorrected && !_custPackingSlipJour.isInvoiceMatched() && !CustPackingSlipJourFormHelper::hasLinesWithWork(_custPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areCancelCorrectButtonsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a packing slip can be canceled or corrected.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The CustPackingSlipJournal record which will be checked.
    /// </param>
    /// <returns>
    /// A container that contains two Boolean values. The first value indicates whether the packing slip
    /// can be canceled; the second value indicates whether the packing slip can be corrected.
    /// </returns>
    public static container areCancelCorrectButtonsEnabled(CustPackingSlipJour _custPackingSlipJour)
    {
        FiscalDocument_BR   fiscalDocument;

        boolean isDropShipment = _custPackingSlipJour.isDropShipment();
        boolean canBeCorrected = CustPackingSlipJourFormHelper::canBeCorrected(_custPackingSlipJour, isDropShipment);
        boolean canBeCanceled =  CustPackingSlipJourFormHelper::canBeCanceled(_custPackingSlipJour, isDropShipment, canBeCorrected);
		
        ProjId projId = SalesTable::find(_custPackingSlipJour.SalesId).ProjId;

        if (!projId)
        {
            if (BrazilParameters::isEnabled())
            {
                fiscalDocument = FiscalDocument_BR::findByRef(_custPackingSlipJour.TableId, _custPackingSlipJour.RecId);
                if (fiscalDocument)
                {
                    canBeCorrected = false;
                    if (fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled ||
                            fiscalDocument.Status == FiscalDocumentStatus_BR::Reversed)
                    {
                        canBeCanceled = false;
                    }
                }
            }
        }

        if (canBeCorrected && canBeCanceled && projId)
        {
            ProjItemTrans       projItemTrans;

            select firstOnly RecId from projItemTrans
                where projItemTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId &&
                    projItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement;

            if (projItemTrans.RecId)
            {
                canBeCorrected = false;
                canBeCanceled = false;
            }
        }

        return [canBeCanceled, canBeCorrected];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelProjectPackingSlip</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean canCancelProjectPackingSlip(CustPackingSlipJour _custPackingSlipJour)
    {
        SalesTable salesTable = SalesTable::find(_custPackingSlipJour.SalesId);
        ProjId projId = salesTable.ProjId;

        if (!salesTable.ProjId 
            || salesTable.SalesType != SalesType::ItemReq
            || !FeatureStateProvider::isFeatureEnabled(ProjCancelItemReqPackingSlipFeature::instance()))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        boolean canBeCanceled = !_custPackingSlipJour.isDropShipment()
                            && !_custPackingSlipJour.isCanceled()
                            && !_custPackingSlipJour.isFullyInvoiced()
                            && !_custPackingSlipJour.isInvoiceMatched()
                            && !CustPackingSlipJourFormHelper::hasLinesWithWork(_custPackingSlipJour);

        if (canBeCanceled)
        {
            canBeCanceled = !CustPackingSlipJourFormHelper::isPackingSlipPostedWithIRCancellationFeatureOff(_custPackingSlipJour);
        }

        return canBeCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackingSlipPostedWithIRCancellationFeatureOff</Name>
				<Source><![CDATA[
    private static boolean isPackingSlipPostedWithIRCancellationFeatureOff(CustPackingSlipJour _custPackingSlipJour)
    {
        CustPackingSlipTrans custPackingSlipTrans;
        ProjItemTrans projItemTrans;

        select firstonly RecId from custPackingSlipTrans
            where custPackingSlipTrans.SalesId == _custPackingSlipJour.SalesId
                && custPackingSlipTrans.DeliveryDate  == _custPackingSlipJour.DeliveryDate
                && custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
        notexists join RecId from projItemTrans
            where projItemTrans.TransIdPackSlip like custPackingSlipTrans.PackingSlipId + '%'
            && projItemTrans.InventTransId == custPackingSlipTrans.InventTransId;

        return custPackingSlipTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanProcessPackingSlipCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all or part of the current CustPackingSlipJour can be corrected.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJournal</c> record which will be processed.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If no lines can be corrected, then an error message will be thrown; otherwise an info message will be shown.
    /// </exception>
    public static void checkCanProcessPackingSlipCorrection (CustPackingSlipJour _custPackingSlipJour)
    {
        if (CustPackingSlipJourFormHelper::hasLinesWithWork(_custPackingSlipJour))
        {
            if (CustPackingSlipJourFormHelper::hasLinesWithoutWork(_custPackingSlipJour))
            {
                info(strFmt("@WAX736",
                            "@WAX:WAX_PackingSlip_MessageNotification_OnlyItemsOutsideWarehouseManagementProcesses",
                            "@WAX:WAX_PackingSlip_MessageNotification_CorrectionNotApplicableForWarehouseControlledItems"));
            }
            else
            {
                throw error(strFmt("@WAX736",
                                   "@WAX:WAX_PackingSlip_MessageNotification_CanNotProceed",
                                   "@WAX:WAX_PackingSlip_MessageNotification_OnlyWarehouseManagementItemsDetected"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithoutWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a <c>CustPackingSlipTrans</c> which has no work lines associated
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJournal</c> record which will be checked.
    /// </param>
    /// <returns>
    /// true, if there are lines with no related work; otherwise, false.
    /// </returns>
    private static boolean hasLinesWithoutWork (CustPackingSlipJour _custPackingSlipJour)
    {
        WHSWorkTable            whsWorkTable;
        WHSWorkLine             whsWorkLine;
        CustPackingSlipTrans    custPackingSlipTrans;

        select firstonly RecId from custPackingSlipTrans
            where custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
               && custPackingSlipTrans.SalesId       == _custPackingSlipJour.SalesId
               && custPackingSlipTrans.DeliveryDate  == _custPackingSlipJour.DeliveryDate
            notExists join whsWorkTable
                where WHSWorkTable.WorkStatus != WHSWorkStatus::Cancelled
                exists join whsWorkLine
                    where whsWorkLine.InventTransId == CustPackingSlipTrans.InventTransId
                       && WHSWorkLine.WorkId        == whsWorkTable.WorkId;

        return (CustPackingSlipTrans.RecID != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLinesWithWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is a <c>CustPackingSlipTrans</c> which has work lines associated
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// The <c>CustPackingSlipJournal</c> record which will be checked.
    /// </param>
    /// <returns>
    /// true, if there are lines with related work; otherwise, false.
    /// </returns>
    private static boolean hasLinesWithWork (CustPackingSlipJour _custPackingSlipJour)
    {
        WHSWorkTable            whsWorkTable;
        WHSWorkLine             whsWorkLine;
        CustPackingSlipTrans    custPackingSlipTrans;

        select firstonly RecId from whsWorkTable
            where whsWorkTable.WorkStatus   != WHSWorkStatus::Cancelled
            exists join custPackingSlipTrans
                where custPackingSlipTrans.PackingSlipId == _custPackingSlipJour.PackingSlipId
                   && custPackingSlipTrans.SalesId       == _custPackingSlipJour.SalesId
                   && custPackingSlipTrans.DeliveryDate  == _custPackingSlipJour.DeliveryDate
                exists join whsWorkLine
                    where whsWorkLine.InventTransId == custPackingSlipTrans.InventTransId
                       && whsWorkLine.WorkId        == whsWorkTable.WorkId;

        return (whsWorkTable.RecID != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>