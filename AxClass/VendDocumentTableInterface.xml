<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentTableInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>VendDocumentTableMap</c> table map.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class VendDocumentTableInterface
{
    protected VendDocumentTableMap vendDocumentTableMap;
    private VendDocumentTableInterface origInstance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeVendDocumentTable</Name>
				<Source><![CDATA[
    private void initializeVendDocumentTable(VendDocumentTableMap _vendDocumentTableMap = vendDocumentTableMap)
    {
        vendDocumentTableMap = _vendDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendDocumentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local instance of the <c>VendDocumentTableMap</c> map.
    /// </summary>
    /// <returns>The local instance of the <c>VendDocumentTableMap</c> map.</returns>
    public final VendDocumentTableMap parmVendDocumentTable()
    {
        return vendDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>VendDocumentTableInterface</c> object based on the provided <c>VendDocumentTableMap</c> record.
    /// </summary>
    /// <param name = "_vendDocumentTableMap">A <c>VendDocumentTableMap</c> record from which to create a <c>VendDocumentTableInterface</c> instance.</param>
    /// <returns>The instantiated <c>VendDocumentTableInterface</c> object.</returns>
    public static VendDocumentTableInterface createInstance(VendDocumentTableMap _vendDocumentTableMap)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        metadataCollection.SetManagedValue(classStr(VendDocumentTableInterface), tableId2Name(_vendDocumentTableMap.tableId));
        VendDocumentTableInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(VendDocumentTableInterface), metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeVendDocumentTable(_vendDocumentTableMap);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a <c>VendDocumentTableInterface</c> object based on the <c>VendDocumentTableMap</c> orig-record.
    /// </summary>
    /// <returns>
    /// The instantiated <c>VendDocumentTableInterface</c> object.
    /// </returns>
    final public VendDocumentTableInterface origInstance()
    {
        if (!origInstance)
        {
            origInstance = VendDocumentTableInterface::createInstance(this.parmVendDocumentTable().orig());
        }

        return origInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymentSched</Name>
				<Source><![CDATA[
    public void copyPaymentSched(VendInvoiceJour _vendInvoiceJour)
    {
        ttsbegin;

        VendPaymSched vendPaymSched = VendPaymSched::find(vendDocumentTableMap.TableId, vendDocumentTableMap.RecId);

        if (vendPaymSched.RecId)
        {
            VendPaymSched newVendPaymSched = vendPaymSched.data();
            newVendPaymSched.ExtTableId = _vendInvoiceJour.TableId;
            newVendPaymSched.ExtRecId = _vendInvoiceJour.RecId;
            newVendPaymSched.insert();

            VendPaymSchedLine vendPaymSchedLine;
            while select vendPaymSchedLine
                where vendPaymSchedLine.FatherRecID == vendPaymSched.RecId &&
                  !vendPaymSchedLine.IsDeleted
            {
                VendPaymSchedLine newVendPaymSchedLine = vendPaymSchedLine.data();
                newVendPaymSchedLine.FatherRecID = newVendPaymSched.RecId;
                newVendPaymSchedLine.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSched</Name>
				<Source><![CDATA[
    public void createPaymentSched()
    {
        PurchTotals purchTotals = PurchTotals::newParmTable(vendDocumentTableMap, PurchUpdate::ReceiveNow, vendDocumentTableMap.ParmId, '', vendDocumentTableMap.Ordering);
        PaymSched paymSched = PaymSched::find(vendDocumentTableMap.isNonPO() ? vendDocumentTableMap.PaymentSched : vendDocumentTableMap.VendDocumentTableMap::purchTable().PaymentSched);

        purchTotals.calc();
        CustVendPaymSched custVendPaymSched = CustVendPaymSched::construct(SysModule::Vend, vendDocumentTableMap);
        custVendPaymSched.setPurchTotals(purchTotals);
        custVendPaymSched.createPaymSched(paymSched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultEUROTriangulation</Name>
				<Source><![CDATA[
    public static EUROTriangulation defaultEUROTriangulation()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId, PurchTable _purchTable = null, LedgerJournalTrans _journalTrans = null)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    public void defaultRow(PurchTable _purchTable = null, LedgerJournalTrans _ledgerJournalTrans = null, boolean _resetFieldState = false)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    public LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(vendDocumentTableMap.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return vendDocumentTableMap.DocumentDate ? vendDocumentTableMap.DocumentDate : vendDocumentTableMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the current exchange rate.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the caller supplies a new value or wants to retrieve the
    ///    current value.
    /// </param>
    /// <param name="_exchRate">
    ///    The new exchange rate value when the <paramref name="_set"/> parameter is true.
    /// </param>
    /// <returns>
    ///    The exchange rate to be displayed.
    /// </returns>
    public ExchRate editExchRate(boolean _set, ExchRate _exchRate)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), vendDocumentTableMap.CurrencyCode);

        if (_set)
        {
            vendDocumentTableMap.ExchRate = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
            vendDocumentTableMap.modifiedField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, ExchRate), vendDocumentTableMap.TableId));
        }
        else
        {
            _exchRate = exchangeRateHelper.displayStoredExchangeRate(vendDocumentTableMap.ExchRate);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRateSecond</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or retrieves the secondary exchange rate.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the caller supplies a new value or wants to retrieve the
    ///    current value.
    /// </param>
    /// <param name="_exchRate">
    ///    The new secondary exchange rate value when the <paramref name="_set"/> parameter is true.
    /// </param>
    /// <returns>
    ///    The secondary exchange rate to be displayed.
    /// </returns>
    public ExchrateSecondary editExchRateSecond(boolean _set, ExchrateSecondary _exchRate)
    {
        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), vendDocumentTableMap.CurrencyCode);

        if (_set)
        {
            vendDocumentTableMap.ExchRateSecondary = exchangeRateHelper.prepareExchangeRateForStorage(_exchRate);
            vendDocumentTableMap.modifiedField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, ExchRateSecondary), vendDocumentTableMap.TableId));
        }
        else
        {
            _exchRate = exchangeRateHelper.displayStoredExchangeRate(vendDocumentTableMap.ExchRateSecondary);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPackingSlipDate_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first delivery date for the packing slip.
    /// </summary>
    /// <returns>
    /// The delivery date.
    /// </returns>
    public TransDate firstPackingSlipDate_ES()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEUROTriangulation</Name>
				<Source><![CDATA[
    public UnknownNoYes getEUROTriangulation()
    {
        UnknownNoYes isCurTriangulated;

        if (vendDocumentTableMap.euroTriangulation == NoYes::Yes)
        {
            isCurTriangulated = UnknownNoYes::Yes;
        }

        return isCurTriangulated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date used to select an exchange rate.
    /// </summary>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The date to select the exchange rate.
    /// </returns>
    public TransDate getExchRateDate(TransDate _date)
    {
        TransDate exchRateDate;

        #ISOCountryRegionCodes
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL, #isoIT]))
        {
            switch (PurchParameters::find().DateOfExchRate_W)
            {
                case DateOfExchRate_W::DateOfVATRegister:
                    exchRateDate = vendDocumentTableMap.VendDocumentTableMap::parmVatDueDate_W();

                    break;

                case DateOfExchRate_W::DocumentDate:
                    exchRateDate = vendDocumentTableMap.DocumentDate;
                    break;

                case DateOfExchRate_W::DocumentDateEU:
                    if (TaxGroupHeading::find(vendDocumentTableMap.purchTable().TaxGroup).euTrade_W)
                    {
                        exchRateDate = vendDocumentTableMap.DocumentDate;
                    }
                    break;
            }
        }
        else
        {
            if (VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
            {
                exchRateDate = this.determineExchangeRateDate();
            }
            else
            {
                exchRateDate = this.updateDate();
            }
        }

        if (!exchRateDate)
        {
            exchRateDate = _date;
        }

        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromExchRates</Name>
				<Source><![CDATA[
    public void initFromExchRates(boolean _fetchEuroTriangulation = true)
    {
        TransDate exchRateDate;
        // <GEEU>
        #EECountryRegionCodes
        // </GEEU>
        #isoCountryRegionCodes
        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll)
            || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            exchRateDate = this.getExchRateDate(this.updateDate());
            if (PurchParameters::find().DateOfExchRate_W)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00030, funcName());
            }
        }
        else
        {
            if (VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
            {
                exchRateDate = this.determineExchangeRateDate();
            }
            else
            {
                exchRateDate = this.updateDate();
            }
        }
        // </GEEU>

        if (_fetchEuroTriangulation)
        {
            vendDocumentTableMap.euroTriangulation = Currency::triangulation(vendDocumentTableMap.CurrencyCode, exchRateDate);
        }

        if (_fetchEuroTriangulation || vendDocumentTableMap.euroTriangulation)
        {
            vendDocumentTableMap.ExchRate = ExchangeRateHelper::exchRate(vendDocumentTableMap.CurrencyCode, exchRateDate, Currency::noYes2UnknownNoYes(vendDocumentTableMap.euroTriangulation));
            vendDocumentTableMap.ExchRateSecondary = ExchangeRateHelper::exchRateSecond(vendDocumentTableMap.CurrencyCode, exchRateDate, Currency::noYes2UnknownNoYes(vendDocumentTableMap.euroTriangulation));

            if (Ledger::isReportingCurrencyDefined())
            {
                ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), vendDocumentTableMap.CurrencyCode);

                exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
                exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                exchangeRateHelper.parmExchangeDate(exchRateDate);

                vendDocumentTableMap.ReportingCurrencyExchangeRate = exchangeRateHelper.getExchangeRate1();
            }
        }
        else
        {
            if (vendDocumentTableMap.ExchRateSecondary && vendDocumentTableMap.ExchRate)
            {
                vendDocumentTableMap.ExchRate = (vendDocumentTableMap.ExchRateSecondary / vendDocumentTableMap.ExchRate) * 100;
            }

            vendDocumentTableMap.ExchRateSecondary = 0;
            vendDocumentTableMap.ReportingCurrencyExchangeRate = 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineExchangeRateDate</Name>
				<Source><![CDATA[
    public TransDate determineExchangeRateDate()
    {
        TransDate exchRateDate;
        
        if (VendInvoicePostingDateAutoAdjustmentV2Flight::instance().isEnabled())
        {
            if (vendDocumentTableMap.useDocumentDate())
            {
                exchRateDate = vendDocumentTableMap.documentDate;
            }
            else
            {
                PurchParameters purchParameters = purchParameters::find();
                if (purchParameters.DateOfExchRate_W == DateOfExchRate_W::DocumentDate)
                {
                    exchRateDate = vendDocumentTableMap.documentDate;
                }
                else if (purchParameters.DateOfExchRate_W == DateOfExchRate_W::PostingDate)
                {
                    exchRateDate = vendDocumentTableMap.TransDate;
                }
            }
        }
        if (!exchRateDate)
        {
            exchRateDate = vendDocumentTableMap.documentDate ? vendDocumentTableMap.documentDate: vendDocumentTableMap.TransDate;
        }
        return exchRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    public void initTotals()
    {
        vendDocumentTableMap.CashDisc = 0;
        vendDocumentTableMap.CashDiscDate = dateNull();
        vendDocumentTableMap.EndDisc = 0;
        vendDocumentTableMap.TaxRoundOff = 0;
        vendDocumentTableMap.InvoiceRoundOff = 0;
        vendDocumentTableMap.ReCalculate = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an invoice is advance.
    /// </summary>
    /// <returns>
    ///    true if the invoice is advance; otherwise, false.
    /// </returns>
    public boolean isAdvance()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDirectInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether initialization is being done from Purchase Agreement by checking the <c>PurchAgreementHeader_PSN</c> and the <c>PurchId</c> fields.
    /// </summary>
    /// <returns>
    /// true when the transaction has the <c>PurchAgreementHeader_PSN</c> field set and the <c>PurchId</c> field not set; otherwise, false.
    /// </returns>
    public boolean isDirectInvoice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    public boolean isNonPO()
    {
        return (vendDocumentTableMap.PurchId == '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the associated <c>MarkupTrans</c> records may be added, changed, or deleted.
    /// </summary>
    /// <returns>
    ///    true if modifications are enabled; otherwise, false.
    /// </returns>
    public boolean markupAllowed()
    {
        if (this.isNonPO())
        {
            return true;
        }

        return !this.purchTable().isInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTable_RU</c> record into this record as an extension.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable_RU">
    /// A <c>VendInvoiceInfoTable_RU</c> record to pack.
    /// </param>
    public void packVendInvoiceInfoTable_RU(VendInvoiceInfoTable_RU _vendInvoiceInfoTable_RU)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>packVendInvoiceInfoTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a <c>VendInvoiceInfoTable_W</c> record into this record as an extension.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable_W">
    /// A <c>VendInvoiceInfoTable_W</c> record to pack.
    /// </param>
    public void packVendInvoiceInfoTable_W(VendInvoiceInfoTable_W _vendInvoiceInfoTable_W)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccessKey_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>Accesskey_BR</c> field.
    /// </summary>
    /// <param name="_accessKey">
    /// The value of <c>Accesskey_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>Accesskey_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public EFDocAccessKey_BR parmAccessKey_BR(EFDocAccessKey_BR _accessKey = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAgreementHeaderExt_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>AgreementHeaderExt_RU</c> field.
    /// </summary>
    /// <param name="_agreementHeaderExtRecId_RU">
    /// The value of <c>AgreementHeaderExt_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>AgreementHeaderExt_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public AgreementHeaderExtRecId_RU parmAgreementHeaderExt_RU(AgreementHeaderExtRecId_RU _agreementHeaderExtRecId_RU = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFPSId_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets <c>CFPSId_BR</c> code from/to one of the mapped tables
    /// </summary>
    /// <param name="_cfpsId">
    /// A new <c>CFPSId_BR</c> code
    /// </param>
    /// <returns>
    /// The <c>CFPSId_BR</c> code
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception thrown when caller of the function is not mapped in switch clause
    /// </exception>
    public CFPSId_BR parmCFPSId_BR(CFPSId_BR _cfpsId = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsigneeAccount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ConsigneeAccount_RU</c> field.
    /// </summary>
    /// <param name="_consigneeAccount_RU">
    /// The value of <c>ConsigneeAccount_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>ConsigneeAccount_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public CustAccountConsignee_RU parmConsigneeAccount_RU(CustAccountConsignee_RU _consigneeAccount_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsignmentNoteNum_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ConsignmentNoteNum_IN</c> field.
    /// </summary>
    /// <param name="_consignmentNoteNum_IN">
    /// The value of <c>ConsignmentNoteNum_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>ConsignmentNoteNum_IN</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public ConsignmentNum_IN parmConsignmentNoteNum_IN(ConsignmentNum_IN _consignmentNoteNum_IN = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsignorAccount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ConsignorAccount_RU</c> field.
    /// </summary>
    /// <param name="_consignorAccount_RU">
    /// The value of <c>ConsignorAccount_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>ConsignorAccount_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public VendAccountConsignor_RU parmConsignorAccount_RU(VendAccountConsignor_RU _consignorAccount_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsBillOfEntryNumberTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CustomsBillOfEntryNumberTable_IN</c> field.
    /// </summary>
    /// <param name="_customsBillOfEntryNumberTable_IN">
    /// The value of <c>CustomsBillOfEntryNumberTable_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CustomsBillOfEntryNumberTable_IN</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public RefRecId parmCustomsBillOfEntryNumberTable_IN(RefRecId _customsBillOfEntryNumberTable_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsImportInvoiceNumberTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CustomsImportInvoiceNumberTable_IN</c> field.
    /// </summary>
    /// <param name="_customsImportInvoiceNumberTable_IN">
    /// The value of <c>CustomsImportInvoiceNumberTable_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CustomsImportInvoiceNumberTable_IN</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public RefRecId parmCustomsImportInvoiceNumberTable_IN(RefRecId _customsImportInvoiceNumberTable_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocAutoNumbering_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>DocAutoNumbering_LT</c> field.
    /// </summary>
    /// <param name="_docAutoNumbering_LT">
    /// The value of <c>CustomsImportInvoiceNumberTable_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>DocAutoNumbering_LT</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public LtInvoiceAutoNumbering parmDocAutoNumbering_LT(LtInvoiceAutoNumbering _docAutoNumbering_LT = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmElectronicInvoice_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ElectronicInvoice_BR</c> field.
    /// </summary>
    /// <param name="_electronicInvoice_BR">
    /// The value of <c>EletronicInvoice_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>ElectronicInvoice_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public EletronicInvoice_BR parmElectronicInvoice_BR(EletronicInvoice_BR _electronicInvoice_BR = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplAccount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>EmplAccount_RU</c> field.
    /// </summary>
    /// <param name="_emplAccount_RU">
    /// The value of <c>EmplAccount_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>EmplAccount_RU</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public EmplAccount_RU parmEmplAccount_RU(EmplAccount_RU _emplAccount_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentModel_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>FiscalDocumentModel_BR</c> field.
    /// </summary>
    /// <param name="_fiscalDocumentModel_BR">
    /// The value of <c>FiscalDocumentModel_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentModel_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public FiscalDocumentModel_BR parmFiscalDocumentModel_BR(FiscalDocumentModel_BR _fiscalDocumentModel_BR = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentSeries_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>FiscalDocumentSeries_BR</c> field.
    /// </summary>
    /// <param name="_fiscalDocumentSeries_BR">
    /// The value of <c>FiscalDocumentSeries_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentSeries_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public FiscalDocumentSeries_BR parmFiscalDocumentSeries_BR(FiscalDocumentSeries_BR _fiscalDocumentSeries_BR = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentSpecie_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>FiscalDocumentSpecie_BR</c> field.
    /// </summary>
    /// <param name="_fiscalDocumentSpecie_BR">
    /// The value of <c>FiscalDocumentSpecie_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentSpecie_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public FiscalDocumentSpecie_BR parmFiscalDocumentSpecie_BR(FiscalDocumentSpecie_BR _fiscalDocumentSpecie_BR = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>FiscalDocumentType_BR</c> field.
    /// </summary>
    /// <param name="_fiscalDocumentType_BR">
    /// The value of <c>FiscalDocumentType_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>FiscalDocumentType_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public RefRecId parmFiscalDocumentType_BR(RefRecId _fiscalDocumentType_BR = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>InventProfileId_RU</c> field.
    /// </summary>
    /// <param name="_inventProfileId_RU">
    /// The value of <c>InventProfileId_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>InventProfileId_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public InventProfileId_RU parmInventProfileId_RU(InventProfileId_RU _inventProfileId_RU ='')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>InventProfileType_RU</c> field.
    /// </summary>
    /// <param name="_inventProfileType_RU">
    /// The value of <c>InventProfileType_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>InventProfileType_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public InventProfileType_RU parmInventProfileType_RU(InventProfileType_RU _inventProfileType_RU = InventProfileType_RU::NotSpecified)
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the <c>Num</c> field.
    /// </summary>
    /// <param name="_num">
    /// The value of the <c>Num</c> field to set, optional.
    /// </param>
    /// <returns>
    /// The value of the <c>Num</c> field on the map.
    /// </returns>
    public Num parmNum(Num _num = '')
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffReportType_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of <c>OffReportType_RU</c>.
    /// </summary>
    /// <returns>
    /// <c>OffReportType_RU</c> from table <c>vendInvoiceInfoTable_RU</c> or <c>PurchParmTable</c>..
    /// </returns>
    public OffReportType_RU parmOffReportType_RU()
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffSessionId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of <c>OffSessionId_RU</c>.
    /// </summary>
    /// <returns>
    /// <c>OffReportType_RU</c> from table <c>vendInvoiceInfoTable_RU</c> or <c>PurchParmTable</c>..
    /// </returns>
    public OffSessionId_RU parmOffSessionId_RU()
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ProcessVAT</c> field.
    /// </summary>
    /// <param name="_facturePostProcessVAT">
    /// The value of <c>ProcessVAT</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>ProcessVAT</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public FacturePostProcessVAT parmProcessVAT(FacturePostProcessVAT _facturePostProcessVAT = NoYes::No)
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchBookVATProcessParametersRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>PurchBookVATProcessParametersRecId</c> field.
    /// </summary>
    /// <param name="_purchBookVATProcessParametersRecId_RU">
    /// The value of <c>PurchBookVATProcessParametersRecId</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>PurchBookVATProcessParametersRecId</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public PurchBookVATProcessParametersRecId_RU parmPurchBookVATProcessParametersRecId(PurchBookVATProcessParametersRecId_RU _purchBookVATProcessParametersRecId_RU = 0)
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchReceiptDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>PurchReceiptDate_W</c> field.
    /// </summary>
    /// <param name="_purchReceiptDate_W">
    /// The value of <c>PurchReceiptDate_W</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>PurchReceiptDate_W</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public PurchReceiptDate_W parmPurchReceiptDate_W(PurchReceiptDate_W _purchReceiptDate_W = dateNull())
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonTableRef_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ReasonTableRef_BR</c> field.
    /// </summary>
    /// <param name="_reasonTableRef">
    /// The value of <c>ReasonTableRef_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// The RecId for <c>ReasonTableRef</c> table.
    /// </returns>
    public ReasonTableRefRecId parmReasonTableRef_BR(ReasonTableRefRecId _reasonTableRef = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchOperationType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets <c>SalesPurchOperationType_BR</c> reference from/to one of the mapped tables
    /// </summary>
    /// <param name="_operationType">
    /// A new <c>SalesPurchOperationType_BR</c> reference
    /// </param>
    /// <returns>
    /// A <c>SalesPurchOperationType_BR</c> reference
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception thrown when caller of the function is not mapped in switch clause
    /// </exception>
    public SalesPurchOperationTypeRecId_BR parmSalesPurchOperationType_BR(SalesPurchOperationTypeRecId_BR _operationType = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmServiceCodeOnDlvAddress_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>ServiceCodeOnDlvAddress_BR</c> field.
    /// </summary>
    /// <param name="_serviceCodeOnDlvAddress_BR">
    /// The value of <c>ServiceCodeOnDlvAddress_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>ServiceCodeOnDlvAddress_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public TaxServiceCodeOnDlvAddress_BR parmServiceCodeOnDlvAddress_BR(TaxServiceCodeOnDlvAddress_BR _serviceCodeOnDlvAddress_BR = 0)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxInformation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>TaxInformation_IN</c> field.
    /// </summary>
    /// <param name="_taxInformationRecId_IN">
    /// The value of <c>TaxInformation_IN</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>TaxInformation_IN</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public TaxInformationRecId_IN parmTaxInformation_IN(TaxInformationRecId_IN _taxInformationRecId_IN = 0)
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriodPaymentCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>TaxPeriodPaymentCode_PL</c> field.
    /// </summary>
    /// <param name="_taxPeriodPaymentCode_PL">
    /// The value of <c>TaxPeriodPaymentCode_PL</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>TaxPeriodPaymentCode_PL</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public PlTaxPeriodPaymentCode parmTaxPeriodPaymentCode(PlTaxPeriodPaymentCode _taxPeriodPaymentCode_PL = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATChargeSource_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>VATChargeSource_RU</c> field.
    /// </summary>
    /// <param name="_vATChargeSource_RU">
    /// The value of <c>VATChargeSource_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>VATChargeSource_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public VATChargeSource_RU parmVATChargeSource_RU(VATChargeSource_RU _vATChargeSource_RU = VATChargeSource_RU::VendorFunds)
    {
        return VATChargeSource_RU::VendorFunds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>VatDueDate_W</c> field.
    /// </summary>
    /// <param name="_vatDueDate_W">
    /// The value of <c>VatDueDate_W</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>VatDueDate_W</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public VatDueDate_W parmVatDueDate_W(VatDueDate_W _vatDueDate_W = dateNull())
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatOperationCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>VATOperationCode_RU</c> field.
    /// </summary>
    /// <param name="_vatOperationCode_RU">
    /// The value of <c>VATOperationCode_RU</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>VATOperationCode_RU</c> from table <c>vendInvoiceInfoTable_RU</c>.
    /// </returns>
    public VatOperationCode_RU parmVatOperationCode_RU(VatOperationCode_RU _vatOperationCode_RU = '')
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendFinalUser_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value to <c>VendFinalUser_BR</c> field.
    /// </summary>
    /// <param name="_vendFinalUser_BR">
    /// The value of <c>VendFinalUser_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>VendFinalUser_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public CustVendFinalUser_BR parmVendFinalUser_BR(CustVendFinalUser_BR _vendFinalUser_BR = 0)
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendFineSetup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets <c>VendFineCode_BR</c> code from/to one of the mapped tables
    /// </summary>
    /// <param name="_vendFineSetup_BR">
    /// A new <c>VendFineCode_BR</c> code
    /// </param>
    /// <returns>
    /// The <c>VendFineCode_BR</c> code
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception thrown when caller of the function is not mapped in switch clause
    /// </exception>
    public VendFineCode_BR parmVendFineSetup_BR(VendFineCode_BR _vendFineSetup_BR = '')
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInterestSetup_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/Sets <c>VendInterestCode_BR</c> code from/to one of the mapped tables
    /// </summary>
    /// <param name="_vendInterestSetup_BR">
    /// A new <c>VendInterestCode_BR</c> code
    /// </param>
    /// <returns>
    /// The <c>VendInterestCode_BR</c> code
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception thrown when caller of the function is not mapped in switch clause
    /// </exception>
    public VendInterestCode_BR parmVendInterestSetup_BR(VendInterestCode_BR _vendInterestSetup_BR = '')
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeModified</Name>
				<Source><![CDATA[
    void paymModeModified()
    {
        vendDocumentTableMap.PaymModeMap::modifiedPaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingTime</Name>
				<Source><![CDATA[
    public SysInt64 processingTime()
    {
        return DateTimeUtil::getDifference(vendDocumentTableMap.EndDateTime, vendDocumentTableMap.StartDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchParmUpdate</Name>
				<Source><![CDATA[
    public PurchParmUpdate purchParmUpdate(boolean _forUpdate = false)
    {
        return PurchParmUpdate::find(vendDocumentTableMap.ParmId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchTable</Name>
				<Source><![CDATA[
    PurchTable purchTable(boolean _update = false)
    {
        PurchTable purchTable;

        if (vendDocumentTableMap.PurchId)
        {
            purchTable = PurchTable::find(vendDocumentTableMap.PurchId, _update);
        }

        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TransDate</c> or <c>DocumentDate</c> is to be used when defaulting various values.
    /// </summary>
    /// <returns>
    /// The date to use.
    /// </returns>
    /// <remarks>
    /// If the <c>DocumentDate</c> field in <c>VendParameters</c> is selected and the transaction has a <c>DocumentDate</c> then
    /// <c>DocumentDate</c> is to be used, otherwise <c>TransDate</c> is to be used.
    /// </remarks>
    public TransDate updateDate()
    {
        return vendDocumentTableMap.useDocumentDate() ? vendDocumentTableMap.DocumentDate : vendDocumentTableMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    public void updateParmJobStatusContainErrors()
    {
        vendDocumentTableMap.ParmJobStatus = ParmJobStatus::ContainErrors;
        vendDocumentTableMap.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusExecuted</Name>
				<Source><![CDATA[
    public void updateParmJobStatusExecuted()
    {
        vendDocumentTableMap.ParmJobStatus = ParmJobStatus::Executed;
        vendDocumentTableMap.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>TransDate</c> or <c>DocumentDate</c> is to be used when defaulting various values.
    /// </summary>
    /// <returns>
    /// true when <c>DocumentDate</c> is to be used; otherwise, false;
    /// </returns>
    /// <remarks>
    /// If the <c>DocumentDate</c> field in <c>VendParameters</c> is selected and the transaction has a <c>DocumentDate</c> then
    /// <c>DocumentDate</c> is to be used, otherwise <c>TransDate</c> is to be used.
    /// </remarks>
    public boolean useDocumentDate()
    {
        // Check if the document date exists first to avoid materialization of VendParameters if date is not specified
        if (vendDocumentTableMap.DocumentDate && VendParameters::find().UseDocumentDate)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the associated <c>VendInvoiceInfoTable_RU</c>.
    /// </summary>
    /// <returns>
    /// Returns the associated <c>VendInvoiceInfoTable_RU</c>.
    /// </returns>
    public VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU()
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and returns the associated <c>VendInvoiceInfoTable_W</c>.
    /// </summary>
    /// <returns>
    /// Returns the associated <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public VendInvoiceInfoTable_W vendInvoiceInfoTable_W()
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_InvoiceAccount</Name>
				<Source><![CDATA[
    public VendTable vendTable_InvoiceAccount(boolean _update = false)
    {
        return VendTable::find(vendDocumentTableMap.InvoiceAccount, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTable_OrderAccount</Name>
				<Source><![CDATA[
    public VendTable vendTable_OrderAccount(boolean _update = false)
    {
        return VendTable::find(vendDocumentTableMap.OrderAccount, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRate</Name>
				<Source><![CDATA[
    public static VendExchRate defaultExchRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchRateSecondary</Name>
				<Source><![CDATA[
    public static ExchrateSecondary defaultExchRateSecondary()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPurchID</Name>
				<Source><![CDATA[
    public PurchId displayPurchID()
    {
        //Throw here as the actual underlying table (VendInvoiceInfoTable) has the implementation of this method and if we actually reach this code,
        //it has been called in error.
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPresenceType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value to <c>PresenceType_BR</c> field.
    /// </summary>
    /// <param name="_presenceType_BR">
    /// The value of <c>PresenceType_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>EFDocPresenceType_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public EFDocPresenceType_BR parmPresenceType_BR(EFDocPresenceType_BR _presenceType_BR = EFDocPresenceType_BR::DoesNotApply)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeOfCTe_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value to <c>TypeOfCTe_BR</c> field.
    /// </summary>
    /// <param name="_typeOfCTe">
    /// The value of <c>TypeOfCTe_BR</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>TypeOfCTe_BR</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public TypeOfCTe_BR parmTypeOfCTe_BR(TypeOfCTe_BR _typeOfCTe = TypeOfCTe_BR::Blank)
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCFDIUUID_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>CFDIUUID_MX</c> field.
    /// </summary>
    /// <param name="_CFDIUUID">
    /// The value of <c>CFDIUUID_MX</c> field to set, optional.
    /// </param>
    /// <returns>
    /// <c>CFDIUUID_MX</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public EInvoiceCFDIUUID_MX parmCFDIUUID_MX(EInvoiceCFDIUUID_MX _CFDIUUID = '')
    {
        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceSeries_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>InvoiceSeries_MX</c> field.
    /// </summary>
    /// <param name="_invoiceSeries">
    /// The value of <c>InvoiceSeries_MX</c> field to set, optional.
    /// </param>
    /// <returns>
    /// The <c>InvoiceSeries_MX</c> from table <c>VendInvoiceInfoTable_W</c>.
    /// </returns>
    public InvoiceSeries_MX parmInvoiceSeries_MX(InvoiceSeries_MX _invoiceSeries = '')
    {
        throw error(strFmt("@SYS19306", funcName())); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentTableInterface</Name>
				<Source><![CDATA[
    public VendDocumentTableInterface vendDocumentTableInterface()
    {
        return VendDocumentTableInterface::createInstance(vendDocumentTableMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>