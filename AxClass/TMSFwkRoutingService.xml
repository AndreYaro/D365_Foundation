<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSFwkRoutingService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Tms.Base.Utility;
using Microsoft.Dynamics.Ax.Tms.Base.Data;
using System.Xml.Linq;

/// <summary>
/// The <c>TMSFwkRoutingService</c> processes traportation routes.
/// </summary>
public class TMSFwkRoutingService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSFwkRoutingService construct()
    {
        return new TMSFwkRoutingService();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateSegmentConfigurationFromSegmentElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rates the shipping entity using <c>TMSRouteSegmentConfig</c> determined by shipping entity.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element.</param>
    /// <param name = "_routeConfigCode">Route configuration code.</param>
    public void rateSegmentConfigurationFromSegmentElement(
        TmsTransactionFacade    _transactionFacade,
        XElement                _segment,
        TMSRouteConfigCode      _routeConfigCode)
    {
        var routeSegmentConfig = TMSFwkRoutingService::retrieveRouteSegmentConfig(_segment, _routeConfigCode);
        this.rateSegmentConfiguration(_transactionFacade, _segment, routeSegmentConfig, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateSegmentConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rates the shipping entity.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_segment">Segment element.</param>
    /// <param name = "_routeSegmentConfig">Route configuration code.</param>
    /// <param name = "_isChargeOverride">True if recorded charge is an overriden charge; false otherwise.</param>
    public void rateSegmentConfiguration(
        TmsTransactionFacade    _transactionFacade,
        XElement                _segment,
        TMSRouteSegmentConfig   _routeSegmentConfig,
        boolean                 _isChargeOverride)
    {
        var carrierCode = _segment.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierCode);
        var carrierServiceCode = _segment.RetrieveFirstInstanceUpString(ElementXmlConstants::CarrierServiceCode);

        carrierCode = carrierCode != '' ? carrierCode : _routeSegmentConfig.CarrierCode;
        carrierServiceCode = carrierServiceCode != '' ? carrierServiceCode : _routeSegmentConfig.CarrierServiceCode;

        if (carrierCode != '' && carrierServiceCode != '')
        {
            var shipDate = _segment.RetrieveFirstInstanceEffectiveUpDateTime(ElementXmlConstants::ShipDate, _transactionFacade.getCurrentDateTime());

            RatingDto ratingDTO = TMSFwkRatingDtoHelper::getRatingDtoForCarrier(
                _transactionFacade,
                _routeSegmentConfig.CarrierCode,
                _routeSegmentConfig.CarrierServiceCode,
                shipDate);

            if (ratingDTO != null)
            {
                ratingDTO.IsChargeOverride = _isChargeOverride;
                XElementList segmentDescendantsAndSelf = new XElementList(_segment.DescendantsAndSelf(EntityXmlConstants::ShippingEntity));
                XElement shipEntity = segmentDescendantsAndSelf.WhereMatchingStringElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Ship).FirstOrDefault();
                XElement ratingEntity = shipEntity.RetrieveOrCreateRatingEntity(ratingDTO);

                ratingDTO.ScheduledShipDate = ratingEntity.RetrieveFirstInstanceEffectiveUpDateTime(ElementXmlConstants::ShipDate,
                    _transactionFacade.getCurrentDateTime());

                this.addSpotRates(ratingEntity, _routeSegmentConfig, ratingDTO);
            }
            else
            {
                _segment.AddError(StringHelpers::FormatError(TMSFwkErrorDtoBuilder::technicalError(), strFmt("@TRX2631", _routeSegmentConfig.CarrierCode, _routeSegmentConfig.CarrierServiceCode)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpotRates</Name>
				<Source><![CDATA[
    private void addSpotRates(XElement _ratingEntity, TMSRouteSegmentConfig _routeSegmentConfig, RatingDto _ratingDto)
    {
        TMSFwkRoutingService::addSpotFreightCharges(_ratingEntity, _routeSegmentConfig, _ratingDto.EffectiveScheduledShipDateTime);
        TMSFwkRoutingService::addSpotAccessorialCharges(_ratingEntity, _routeSegmentConfig, _ratingDto.EffectiveScheduledShipDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpotFreightCharges</Name>
				<Source><![CDATA[
    private static void addSpotFreightCharges(
        XElement                    _ratingEntity,
        TMSRouteSegmentConfig       _routeSegmentConfig,
        TMSScheduledShipUTCDateTime _effectiveScheduledShipDate)
    {
        TMSRouteRateConfig routeRateConfig;
        TMSScheduledShipUTCDateTime unspecifiedDateTime = DateTimeUtil::newDateTime(dateNull(), 0);

        while select routeRateConfig
            order by routeRateConfig.EffectiveUTCDateTimeFrom desc
            where routeRateConfig.RouteConfigCode == _routeSegmentConfig.RouteConfigCode
                && (routeRateConfig.EffectiveUTCDateTimeFrom <= _effectiveScheduledShipDate || routeRateConfig.EffectiveUTCDateTimeFrom == unspecifiedDateTime)
                && (routeRateConfig.EffectiveUTCDateTimeTo >= _effectiveScheduledShipDate || routeRateConfig.EffectiveUTCDateTimeTo == unspecifiedDateTime)
                && routeRateConfig.Sequence == _routeSegmentConfig.Sequence
                && ((routeRateConfig.HubMasterCode == '' && routeRateConfig.HubPosition != TMSHubPosition::PickUp && routeRateConfig.HubPosition != TMSHubPosition::DropOff) 
                    || (routeRateConfig.HubMasterCode == _routeSegmentConfig.RouteStartHubCode && routeRateConfig.HubPosition == TMSHubPosition::PickUp)
                    || (routeRateConfig.HubMasterCode == _routeSegmentConfig.RouteEndHubCode && routeRateConfig.HubPosition == TMSHubPosition::DropOff))
        {
            var configCode = routeRateConfig.HubMasterCode == '' ? routeRateConfig.RouteConfigCode : routeRateConfig.HubMasterCode;

            _ratingEntity.AddFreightCharge(
                routeRateConfig.Rate,
                1,
                routeRateConfig.Rate,
                Microsoft.Dynamics.Ax.Tms.Base.Data.TmsRateType::Rate,
                configCode,
                routeRateConfig.BillingGroupId,
                routeRateConfig.ExternalCode,
                routeRateConfig.CurrencyCode,
                StringHelpers::GenerateRateParameter(GenericEngineConstants::SpotRate, GenericEngineConstants::SpotRatesY));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSpotAccessorialCharges</Name>
				<Source><![CDATA[
    private static void addSpotAccessorialCharges(
        XElement                    _ratingEntity,
        TMSRouteSegmentConfig       _routeSegmentConfig,
        TMSScheduledShipUTCDateTime _effectiveScheduledShipDate)
    {
        TMSRouteAccessorialConfig routeAccessorialConfig;
        TMSScheduledShipUTCDateTime unspecifiedDateTime = DateTimeUtil::newDateTime(dateNull(), 0);

        while select routeAccessorialConfig
            order by routeAccessorialConfig.EffectiveUTCDateTimeFrom desc
            where routeAccessorialConfig.RouteConfigCode == _routeSegmentConfig.RouteConfigCode
                && (routeAccessorialConfig.EffectiveUTCDateTimeFrom <= _effectiveScheduledShipDate || routeAccessorialConfig.EffectiveUTCDateTimeFrom == unspecifiedDateTime)
                && (routeAccessorialConfig.EffectiveUTCDateTimeTo >= _effectiveScheduledShipDate || routeAccessorialConfig.EffectiveUTCDateTimeTo == unspecifiedDateTime)
                && routeAccessorialConfig.Sequence == _routeSegmentConfig.Sequence
                && (routeAccessorialConfig.HubMasterCode == ''
                    || (routeAccessorialConfig.HubMasterCode == _routeSegmentConfig.RouteStartHubCode && routeAccessorialConfig.HubPosition == TMSHubPosition::PickUp)
                    || (routeAccessorialConfig.HubMasterCode == _routeSegmentConfig.RouteEndHubCode && routeAccessorialConfig.HubPosition == TMSHubPosition::DropOff))
        {
            TmsXDocExtensions::AddAccessorial(
                _ratingEntity,
                routeAccessorialConfig.AccessorialMasterCode,
                routeAccessorialConfig.Fee,
                1,
                routeAccessorialConfig.Fee,
                routeAccessorialConfig.BillingGroupId,
                routeAccessorialConfig.ExternalCode,
                routeAccessorialConfig.CurrencyCode,
                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveRouteSegmentConfig</Name>
				<Source><![CDATA[
    private static TMSRouteSegmentConfig retrieveRouteSegmentConfig(XElement _segment, TMSRouteConfigCode _routeConfigCode)
    {
        TMSRouteSegmentConfig       routeSegmentConfig;
        TMSRouteSegmentConfigRecId  routeSegmentConfigRecId = _segment.GetLong(ElementXmlConstants::RouteSegmentConfigurationRecId);

        if (routeSegmentConfigRecId != 0
            && symbol2Enum(enumNum(TMSDirection), _segment.GetString(ElementXmlConstants::Direction)) == TMSDirection::Inbound)
        {
            select firstonly routeSegmentConfig
                where routeSegmentConfig.RecId == routeSegmentConfigRecId;
        }
        else
        {
            routeSegmentConfig = TMSRouteSegmentConfig::find(_routeConfigCode, int642int(_segment.GetLong(ElementXmlConstants::Sequence)));
        }

        return routeSegmentConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRoute</Name>
				<Source><![CDATA[
    public XElement createRoute(TmsTransactionFacade _transactionFacade, XElement _shippingEntity)
    {
        var shipmentTemplate = new XElement(_shippingEntity);

        var routeConfig = TMSRouteConfig::find(_shippingEntity.GetString(ElementXmlConstants::RouteConfigurationCode));

        var routeEntity = TMSFwkRoutingService::createRoutingNode(routeConfig);

        var routeSegmentConfig = TMSFwkRoutingService::retrieveRouteSegmentConfig(_shippingEntity, routeConfig.RouteConfigCode);

        if (routeConfig != null)
        {
            routeEntity.Add(new XElement(EntityXmlConstants::ShippingEntity,
                            new XElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Segment),
                            TMSFwkRoutingService::createGenericSegmentInfo(_transactionFacade.parmXTransaction(), _shippingEntity),
                            TMSFwkRoutingService::createSegmentAddressNode(_transactionFacade, _shippingEntity, AddTypeXmlConstants::Pickup,
                                routeSegmentConfig.RouteStartHubCode, routeSegmentConfig),
                            TMSFwkRoutingService::createSegmentAddressNode(_transactionFacade, _shippingEntity, AddTypeXmlConstants::DropOff,
                                routeSegmentConfig.RouteEndHubCode, routeSegmentConfig),
                            shipmentTemplate));
        }

        return routeEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGenericSegmentInfo</Name>
				<Source><![CDATA[
    protected static XElementList createGenericSegmentInfo(XElement _transaction, XElement _shippingEntity)
    {
        XElementList carrierInfoList = new XElementList();

        carrierInfoList.Add(new XElement(ElementXmlConstants::CarrierServiceCode, _transaction.GetString(ElementXmlConstants::CarrierServiceCode)));
        carrierInfoList.Add(new XElement(ElementXmlConstants::CarrierCode, _transaction.GetString(ElementXmlConstants::CarrierCode)));
        carrierInfoList.Add(new XElement(ElementXmlConstants::DlvTerm, _shippingEntity.GetString(ElementXmlConstants::DlvTerm)));
        carrierInfoList.Add(new XElement(ElementXmlConstants::ResponsibleForPayment, _shippingEntity.GetString(ElementXmlConstants::ResponsibleForPayment)));
        carrierInfoList.Add(new XElement(AccountXmlConstants::VendorCode, _shippingEntity.GetString(AccountXmlConstants::VendorCode)));
        carrierInfoList.Add(new XElement(AccountXmlConstants::VendorInvoiceCode, _shippingEntity.GetString(AccountXmlConstants::VendorInvoiceCode)));
        carrierInfoList.Add(new XElement(ElementXmlConstants::Sequence, _shippingEntity.GetString(ElementXmlConstants::Sequence)));

        return carrierInfoList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRoutingNode</Name>
				<Source><![CDATA[
    private static XElement createRoutingNode(TMSRouteConfig _routeConfig)
    {
        return new XElement(EntityXmlConstants::ShippingEntity,
            new XElement(ElementXmlConstants::ShippingEntityType, EntityTypeXmlConstants::Route),
            new XElement(ElementXmlConstants::RoutePlanName, _routeConfig == null ? '' : _routeConfig.Name),
            new XElement(ElementXmlConstants::RouteConfigurationCode, _routeConfig == null ? '' : _routeConfig.RouteConfigCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSegmentAddressNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates segment address element.
    /// </summary>
    /// <param name = "_transactionFacade">Transaction facade.</param>
    /// <param name = "_shippingEntity">Shipping entity.</param>
    /// <param name = "_segmentTypeName">The segment type key.</param>
    /// <param name = "_routeHubMasterCode">Hub master code.</param>
    /// <param name = "_routeSegmentConfig">Route segment config.</param>
    /// <returns>Segment address element.</returns>
    public static XElement createSegmentAddressNode(
        TmsTransactionFacade    _transactionFacade,
        XElement                _shippingEntity,
        str                     _segmentTypeName,
        TMSHubMasterCode        _routeHubMasterCode,
        TMSRouteSegmentConfig   _routeSegmentConfig)
    {
        //If hub not configured, get the pickup/dropoff addresses from the shipment
        XElement segmentAddress = new XElement(_segmentTypeName);

        if (_routeHubMasterCode == '')
        {
            XElement address = _shippingEntity.RetrieveFirstInstanceUp(_segmentTypeName);

            if (address == null)
            {
                segmentAddress.AddError(TMSFwkErrorDtoBuilderRoute::buildAddress());
            }
            else
            {
                segmentAddress = address;
            }
        }
        else
        {
            //Retrieve Route/Hub Configuration
            TMSRouteHubConfig routeHubConfig = TMSRouteHubConfig::find(_routeSegmentConfig.RouteConfigCode, _routeHubMasterCode);

            segmentAddress.Add(new XElement(ElementXmlConstants::RouteHubConfigurationCode, _routeHubMasterCode));

            if (routeHubConfig == null)
            {
                segmentAddress.AddError(TMSFwkErrorDtoBuilderRoute::buildRouteHubConfiguration());
            }
            else
            {
                segmentAddress.Add(new XElement(ElementXmlConstants::RouteConfigurationCode, routeHubConfig.RouteConfigCode));
                segmentAddress.Add(new XElement(ElementXmlConstants::ResponsibleForPayment, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(routeHubConfig.ResponsibleForPayment))));
                segmentAddress.Add(new XElement(AccountXmlConstants::VendorCode, routeHubConfig.VendorCode));
                segmentAddress.Add(new XElement(AccountXmlConstants::VendorInvoiceCode, routeHubConfig.VendorInvoiceCode));

                //Retrieve Hub Configuraiton
                var shipDate = _shippingEntity.RetrieveFirstInstanceEffectiveUpDateTime(ElementXmlConstants::ShipDate, _transactionFacade.getCurrentDateTime());
                TMSHubMaster hub = TMSHubMaster::findEffective(routeHubConfig.HubMasterCode, shipDate);
                LogisticsPostalAddress postalAddress = LogisticsPostalAddress::findByLocation(hub.Location);
                segmentAddress.Add(new XElement(AddElementXmlConstants::HubMasterCode, routeHubConfig.HubMasterCode));

                if (hub == null)
                {
                    segmentAddress.AddError(TMSFwkErrorDtoBuilderRoute::buildHubConfiguration());
                }
                else
                {
                    segmentAddress.CreateAddress(
                        postalAddress.Address,
                        postalAddress.City,
                        postalAddress.State,
                        postalAddress.ZipCode,
                        postalAddress.CountryRegionId,
                        postalAddress.County,
                        enum2Symbol(enumNum(NoYes), NoYes::No));
                }
            }
        }

        return segmentAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>