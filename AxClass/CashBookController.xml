<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashBookController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CashBookController</c> class is the base controller class for the <c>CashBook_LV</c> and
/// <c>CashBook_LT</c> reports. The country and region specific reports can extend from this class and
/// provide additional functionality.
/// </summary>
public class CashBookController extends SrsReportRunController implements BatchRetryable
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash book report name based on the country or region context.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected SRSCatalogItemName getReportName()
    {
        SRSCatalogItemName                   cashOrderReportName;
        LogisticsAddressCountryRegionISOCode isoCode = SysCountryRegionCode::countryInfo();

        switch (isoCode)
        {
            case #isoLV:

                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00012, funcName());

                cashOrderReportName = ssrsReportStr(CashBook_LV, ReportCur);
                break;
            case #isoLT:

                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLT00017, funcName());

                cashOrderReportName = ssrsReportStr(CashBook_LT, Report);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return cashOrderReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        CashBookContract cashBookContract = this.parmReportContract().parmRdpContract() as CashBookContract;
        RCashAccount     cashAccount = cashBookContract.parmCashAccount();
        RCashTable       cashTable = RCashTable::find(cashAccount);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            if (cashTable.CurrencyCode == CompanyInfoHelper::standardCurrency() &&
                !cashTable.MultiCurrencyCode)
            {
                this.parmReportContract().parmReportName(ssrsReportStr(CashBook_LV, ReportMST));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CashBookController controller = new CashBookController();
        controller.parmReportName(controller.getReportName());
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>