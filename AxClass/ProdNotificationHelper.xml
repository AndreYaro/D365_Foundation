<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdNotificationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdNotificationHelper</c> class is the helper class that is used for the Production notifications
///    reports.
/// </summary>
public class ProdNotificationHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markNotificationAsRead</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Mark notification/Notifications as Read
    /// </summary>
    /// <param name="_datasource">
    ///  A form data source object
    /// </param>
    public void markNotificationAsRead(FormDataSource _datasource)
    {
        this.markNotificationAsReadOrUnread(_datasource, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markNotificationAsUnRead</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Mark notification/Notifications as Unread
    /// </summary>
    /// <param name="_datasource">
    ///  A form data source object
    /// </param>
    public void markNotificationAsUnRead(FormDataSource _datasource)
    {
        this.markNotificationAsReadOrUnread(_datasource, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markNotificationAsReadOrUnread</Name>
				<Source><![CDATA[
    private void markNotificationAsReadOrUnread(FormDataSource _datasource, NoYes _markRead)
    {
        ProdNotificationStatus tmpProdNotificationStatus;
        tmpProdNotificationStatus.setTmp();
        tmpProdNotificationStatus.clear();

        MultiSelectionHelper  selectionHelper  = MultiSelectionHelper::construct();
        selectionHelper.parmDatasource(_datasource);

        switch (_datasource.name())
        {
            case tablestr(ProdNotification):
                ProdNotification notification = selectionHelper.getFirst() as ProdNotification;

                while (notification.RecId)
                {
                    tmpProdNotificationStatus.ProdNotification = notification.RecId;
                    tmpProdNotificationStatus.UserId = curUserId();
                    tmpProdNotificationStatus.doInsert();

                    notification = selectionHelper.getNext();
                }
                break;

            case tablestr(ProdNotificationStatus):
                ProdNotificationStatus notificationStatus = selectionHelper.getFirst() as ProdNotificationStatus;

                while (notificationStatus.RecId)
                {
                    tmpProdNotificationStatus.ProdNotification = notificationStatus.ProdNotification;
                    tmpProdNotificationStatus.UserId = notificationStatus.UserId;
                    tmpProdNotificationStatus.doInsert();

                    notificationStatus = selectionHelper.getNext();
                }
                break;
        }

        ProdNotificationStatus prodNotificationStatus;
        update_recordset prodNotificationStatus
            setting
                IsRead = _markRead
            exists join tmpProdNotificationStatus
                where prodNotificationStatus.UserId == tmpProdNotificationStatus.UserId
                   && prodNotificationStatus.ProdNotification  == tmpProdNotificationStatus.ProdNotification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>ProdNotificationHelper</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>ProdNotificationHelper</c> class.
    /// </returns>
    public static ProdNotificationHelper construct()
    {
        return  new ProdNotificationHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>