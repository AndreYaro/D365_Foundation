<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementEventHandler</c> class is the event handler class
/// for managing the workflow automation execution event and the workflow automation canceled event.
/// </summary>
public class PurchAgreementEventHandler implements WorkflowElementExecutionEventHandler,
                                                     WorkflowElementCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets called when a <c>Cancel</c>  action is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The is used to get the workflow context of the workflow item that trigger the event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tablenum(PurchAgreementHeader):

                if (PurchAgreementHeader::find(workflowContext.parmRecId()).WorkflowStatus_PSN != PurchAgreementWorkflowStatus::NotSubmitted)
                {
                    PurchAgreementHeader::setWorkflowStatus(workflowContext.parmRecId(), PurchAgreementWorkflowStatus::NotSubmitted);
                }
                break;

            default:
                throw error("@SYS326791");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the automated workflow item for purchase agreement confirmation.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void execute(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        Args                    args = new Args();
        WorkflowContext         workflowContext;
        PurchAgreementHeader    purchAgreementHeader;

        // Get the workflow context from _workflowElementEventArgs
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        try
        {
            switch (workflowContext.parmTableId())
            {
                case tablenum(PurchAgreementHeader) :
                    purchAgreementHeader = PurchAgreementHeader::find(workflowContext.parmRecId());
                    break;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS326780");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>