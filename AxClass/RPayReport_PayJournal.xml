<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_PayJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll journal report.
/// </summary>
class RPayReport_PayJournal extends OXMLExcelReport_RPay implements BatchRetryable
{
    RPayJournalTable    rPayJournalTable;
    RPayJournalTrans    rPayJournalTrans;
    RPayAmount          totalAmount;
    DialogField         dialogJournalId;

    counter         pageNumber;
    QueryRun        queryRun;

    #define.pageWidth(11)

    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.Body('BODY')
    #define.Footer('FOOTER')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        switch (_bookmark)
        {
            case #Header:
                return #minHeight * 4 + 8;
            case #Prolog:
                return #minHeight * 5;
        }
        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RPayJournalNum prevJournalId = '';
        RPayJournalNum curJournalId;
        rPayJournalTable    journalTableLocal;
        currentHeight = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.updateQuery();
        queryRun.reset();

        while (queryRun.next())
        {
            journalTableLocal = queryRun.get(tableNum(RPayJournalTable));
            curJournalId = journalTableLocal.JournalId;

            if (prevJournalId != curJournalId)
            {
                if (prevJournalId != '')
                {
                    this.execute(#Footer);
                }

                if (this.mustCreateNewPageForProlog())
                {
                    document.insertPageBreak(currentRow, curWorksheetNum);
                    currentHeight = 0;
                    pageNumber ++;
                }

                this.execute(#Prolog);
                this.execute(#Header);
                prevJournalId = curJournalId;
                totalAmount = 0;
            }

            if (this.mustCreateNewPage())
            {
                document.insertPageBreak(currentRow, curWorksheetNum);
                currentHeight = 0;
                pageNumber ++;
                this.execute(#Header);
            }

            this.execute(#Body);
        }

        if (this.isSectionPrinted())
        {
            this.execute(#Footer);
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return this.templateName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash + rPayJournalTable.JournalId + #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    #define.transdate('transdate')
    #define.linetype('linetype')
    #define.code('code')
    #define.paytype('paytype')
    #define.transtext('transtext')
    #define.qty('qty')
    #define.ratevalue('ratevalue')
    #define.ispercent('ispercent')
    #define.amount('amount')

    private void fillBody()
    {
        RPayJournalTrans transLocal;

        transLocal = queryRun.get(tableNum(RPayJournalTrans));
        this.insertValueToSection(#transdate,   transLocal.TransDate);
        this.insertValueToSection(#linetype,    transLocal.TransType);
        this.insertValueToSection(#code,        transLocal.Number);
        this.insertValueToSection(#paytype,     transLocal.PayCtype);
        this.insertValueToSection(#transtext,   transLocal.Txt);
        this.insertValueToSection(#qty,         transLocal.Qty);
        this.insertValueToSection(#ratevalue,   transLocal.Rate);
        if (transLocal.Percent == NoYes::Yes)
        {
            this.insertValueToSection(#ispercent,   "@GLS105302");
        }
        else
        {
            this.insertValueToSection(#ispercent,   '');
        }

        this.insertValueToSection(#amount,      transLocal.Amount);
        totalAmount += transLocal.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    #define.totalLabel('total_label')
    #define.total('total')

    private void fillFooter()
    {
        this.insertValueToSection(#totalLabel, "@SYS304698");
        this.insertValueToSection(#total, totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    #define.companyName('companyname')
    #define.datetime('datetime')
    #define.TitleLabel('title_label')
    #define.pageNumber('pagenum')
    #define.date_label('Date_label')
    #define.linetype_label('linetype_label')
    #define.code_label('code_label')
    #define.paytype_label('paytype_lanel')
    #define.transactiontext_label('transactiontext_label')
    #define.qty_label('qty_label')
    #define.rate_label('rate_label')
    #define.percent_label('percent_label')
    #define.amount_label('amount_label')

    private void fillHeader()
    {
        utcdatetime dateTime = DateTimeUtil::applyTimeZoneOffset(
            DateTimeUtil::utcNow(),
            DateTimeUtil::getCompanyTimeZone());

        this.insertValueToSection(#TitleLabel,      "@RUP370");
        this.insertValueToSection(#dateTime,        dateTime);
        this.insertValueToSection(#companyName,     CompanyInfo::find().Name);
        this.insertValueToSection(#pageNumber,      strFmt("@SYS24160", pageNumber));
        this.insertValueToSection(#date_label,      "@SYS7402");
        this.insertValueToSection(#linetype_label,  "@GLS105382");
        this.insertValueToSection(#code_label,      "@RUP157");
        this.insertValueToSection(#paytype_label,   "@RUP309");
        this.insertValueToSection(#transactiontext_label,   "@SYS13566");
        this.insertValueToSection(#qty_label,       "@RUP319");
        this.insertValueToSection(#rate_label,      "@GLS105339");
        this.insertValueToSection(#percent_label,   "@GLS105302");
        this.insertValueToSection(#amount_label,    "@GLS105334");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.journalNumber_lebel('JournalNumber_label')
    #define.journalName_lebel('JournalName_label')
    #define.journalDescription_lebel('JournalDescription_label')
    #define.journalPosted_label('JournalPosted_label')
    #define.journalid('Journalid')
    #define.journalName('JournalName')
    #define.journalDesc('JournalDesc')
    #define.isPosted('IsPosted')
    #define.reference_label('reference_label')
    #define.referenceid('referenceid')

    private void fillProlog()
    {
        RPayJournalTable rPayJournalTable_local = this.queryRun().get(tableNum(RPayJournalTable));

        this.insertValueToSection(#journalNumber_lebel,     "@SYS17795");
        this.insertValueToSection(#journalName_lebel,       "@SYS7399");
        this.insertValueToSection(#journalDescription_lebel,"@SYS7576");
        this.insertValueToSection(#JournalPosted_label,     "@SYS1711");
        this.insertValueToSection(#journalid,               rPayJournalTable_local.JournalId);
        this.insertValueToSection(#journalName,             rPayJournalTable_local.JournalNameId);
        this.insertValueToSection(#journalDesc,             rPayJournalTable_local.Description);
        this.insertValueToSection(#isPosted,                rPayJournalTable_local.Posted);

        if (rPayJournalTable_local.RHRMOrderTable)
        {
            this.insertValueToSection(#reference_label,     "@RUP6373");
            this.insertValueToSection(#referenceid,         RHRMOrderTable::find(rPayJournalTable_local.RHRMOrderTable).JournalId);
        }
        else
        {
            this.insertValueToSection(#reference_label,     '');
            this.insertValueToSection(#referenceid,         '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean init()
    {
        super();
        totalAmount = 0;
        pageNumber = 1;
        if (args && args.dataset() == tableNum(RPayJournalTable))
        {
            rPayJournalTable = args.record();
        }
        if (args && args.dataset() == tableNum(RPayJournalTrans))
        {
            rPayJournalTrans = args.record();
            rPayJournalTable = rPayJournalTrans.payJournalTable();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        QueryBuildDataSource    qbd;
        QueryBuildRange         qbr;
        Query                   query;

        super();

        query = new Query();

        qbd   = query.addDataSource(tablenum(RPayJournalTable));
        qbr   = qbd.addRange(fieldnum(RPayJournalTable, JournalId));

        if (rPayJournalTable)
        {
            qbr.value(queryValue(rPayJournalTable.JournalId));
        }

        qbd   = qbd.addDataSource(tablenum(RPayJournalTrans));
        qbd.relations(true);

        qbr   = qbd.addRange(fieldnum(RPayJournalTrans, PayCType));

        queryRun   = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#Body, true);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real requiredHeight = 0;
        boolean ret;
        requiredHeight = this.getRangeHeight(#body) + this.getRangeHeight(#footer);
        ret = pageHeight - currentHeight < requiredHeight;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPageForProlog</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPageForProlog()
    {
        real requiredHeight = 0;
        boolean ret;
        requiredHeight = this.getRangeHeight(#prolog) + this.getRangeHeight(#header) + this.getRangeHeight(#body);
        ret = pageHeight - currentHeight < requiredHeight;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport_PayJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        RPayJournalTrans    rPayJournalTrans_current;

        #define.headerCells(5)
        #define.footerCells(8)
        #define.bodyCells(3)

        select count(RecId) from rPayJournalTrans_current
            where rPayJournalTrans_current.JournalId == rPayJournalTable.JournalId;

        return #headerCells + #footerCells + #bodyCells * int642int(rPayJournalTrans_current.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        queryRun.query().dataSourceTable(tableNum(rPayJournalTable)).addOrderByField(fieldNum(rPayJournalTable, JournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_PayJournal               report = new RPayReport_PayJournal();

        report.parmArgs(_args);
        report.init();
        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>