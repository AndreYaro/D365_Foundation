<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChronologicalNumberSequenceGroupEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ChronologicalNumberSequenceGroupEngine</c> class provides the abstraction
/// that allows applying number sequence group on document depending on a date.
/// </summary>
public final class ChronologicalNumberSequenceGroupEngine
{
    private ChronologicalNumberSequenceGroupEngineContextInterface context;
    private ChronologicalNumberSequenceGroupEngineUpdateContextInterface updateContext;
    private ChronologicalNumberSequenceGroupEngineSkipChangeMngmContextInterface bypassChangeMamagementContext;
    private Common common;
    private TransDate postingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyChronologicalNumberSequenceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies number sequence group to the document.
    /// </summary>
    /// <param name = "_common">The table buffer of the document.</param>
    /// <param name = "_postingDate">The posting date of the document.</param>
    public static void applyChronologicalNumberSequenceGroup(Common _common, TransDate _postingDate)
    {
        ChronologicalNumberSequenceGroupEngine instance = new ChronologicalNumberSequenceGroupEngine();

        ChronologicalNumberSequenceGroupEngineContextInterface contextInstance =
            ChronologicalNumberSequenceGroupEngineContextFactory::newFromTableName(tableId2Name(_common.TableId));

        ChronologicalNumberSequenceGroupEngineUpdateContextInterface updateContextInstance =
            ChronologicalNumberSequenceGroupEngineUpdateContextFactory::newFromTableName(tableId2Name(_common.TableId));

        ChronologicalNumberSequenceGroupEngineSkipChangeMngmContextInterface bypassChangeMamagementContextInstance =
            ChronologicalNumberSequenceGroupEngineSkipChangeMngmContextFactory::newFromTableName(tableId2Name(_common.TableId));

        instance.context = contextInstance;
        instance.updateContext = updateContextInstance;
        instance.bypassChangeMamagementContext = bypassChangeMamagementContextInstance;
        instance.common = _common;
        instance.postingDate = _postingDate;

        instance.doApplyChronologicalNumberSequenceGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyChronologicalNumberSequenceGroup</Name>
				<Source><![CDATA[
    private void doApplyChronologicalNumberSequenceGroup()
    {
        ChronologicalNumberSequenceGroupSetup chronologicalNumberSequenceGroupSetup;
        NumberSequenceGroupId originalNumberSequenceGroupId = context.getNumberSequenceGroup(common);

        if (FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance())
            && SysDictTable::isTableMapped(tableNum(DimensionDefaultMap), common.TableId))
        {
            DimensionDefaultMap dimensionDefaultMap = common;

            chronologicalNumberSequenceGroupSetup = ChronologicalNumberSequenceGroupSetup::findByOriginalGroupTaxBranchAndDate(
                originalNumberSequenceGroupId,
                TaxBranch::findByCode(TaxBranchType::getTBDisplayValueByDefaultDimension(dimensionDefaultMap.DefaultDimension)).RecId,
                postingDate);

        }

        if (!chronologicalNumberSequenceGroupSetup)
        {
            chronologicalNumberSequenceGroupSetup = ChronologicalNumberSequenceGroupSetup::findByOriginalGroupAndDate(
                originalNumberSequenceGroupId,
                postingDate);
        }

        NumberSequenceGroupId numberSequenceGroupId = this.getGroupFromSetup(chronologicalNumberSequenceGroupSetup);

        if (this.shouldUpdateNumberSequenceGroup(numberSequenceGroupId))
        {
            this.updateNumberSequenceGroup(numberSequenceGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberSequenceGroupDifferent</Name>
				<Source><![CDATA[
    private boolean isNumberSequenceGroupDifferent(NumberSequenceGroupId _numberSequenceGroupId)
    {
        return context.getNumberSequenceGroup(common) != _numberSequenceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateNumberSequenceGroup</Name>
				<Source><![CDATA[
    private boolean shouldUpdateNumberSequenceGroup(NumberSequenceGroupId _numberSequenceGroupId)
    {
        return _numberSequenceGroupId != ''
            && this.isNumberSequenceGroupDifferent(_numberSequenceGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumberSequenceGroup</Name>
				<Source><![CDATA[
    private void updateNumberSequenceGroup(NumberSequenceGroupId _numberSequenceGroupId)
    {
        ttsbegin;
        common.selectForUpdate(true);
        context.setNumberSequenceGroup(common, _numberSequenceGroupId);

        if (common.validateWrite())
        {
            if (updateContext && updateContext.getBypassUpdate(common))
            {
                common.doUpdate();
            }
            else
            {
                if (bypassChangeMamagementContext && bypassChangeMamagementContext.getBypassChangeManagementValidation(common))
                {
                    using (ChronologicalNumberBypassChangeManagementValidationContext bypassChangeManagementValidationContext = ChronologicalNumberBypassChangeManagementValidationContext::instance())
                    {
                        common.update();
                    }
                }
                else
                {
                    common.update();
                }
            }

            info(strFmt("@ApplicationSuite_Localization:NumberSequenceGroupHasBeenUpdatedTo", _numberSequenceGroupId));
        }
        else
        {
            warning("@ApplicationSuite_Localization:CannotUpdateNumberSequenceGroup");
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupFromSetup</Name>
				<Source><![CDATA[
    private NumberSequenceGroupId getGroupFromSetup(ChronologicalNumberSequenceGroupSetup _chronologicalNumberSequenceGroupSetup)
    {
        NumberSequenceGroupId nsGroup;

        if (_chronologicalNumberSequenceGroupSetup)
        {
            nsGroup = _chronologicalNumberSequenceGroupSetup.NumberSequenceGroupId;

            if (FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance()))
            {
                if (!this.validateNumberSequenceGroup(nsGroup))
                {
                    nsGroup = '';
                    ChronologicalNumberSequenceGroupSetupDetails chronologicalNumberSequenceGroupSetupDetails;

                    while select chronologicalNumberSequenceGroupSetupDetails order by LineNum
                        where chronologicalNumberSequenceGroupSetupDetails.GroupRef == _chronologicalNumberSequenceGroupSetup.RecId
                    {
                        if (this.validateNumberSequenceGroup(chronologicalNumberSequenceGroupSetupDetails.NumberSequenceGroupId))
                        {
                            nsGroup = chronologicalNumberSequenceGroupSetupDetails.NumberSequenceGroupId;
                            break;
                        }
                    }
                }

                if (nsGroup == '')
                {
                    throw error(strFmt("@ApplicationSuite_Localization:NoValidNSGroupForChronologicalSetup",
                        _chronologicalNumberSequenceGroupSetup.ValidFrom,
                        _chronologicalNumberSequenceGroupSetup.ValidTo,
                        _chronologicalNumberSequenceGroupSetup.DefaultUse,
                        _chronologicalNumberSequenceGroupSetup.OriginalNumberSequenceGroupId,
                        _chronologicalNumberSequenceGroupSetup.TaxBranch == 0 ? '' : TaxBranch::find(_chronologicalNumberSequenceGroupSetup.TaxBranch).Code));
                }
            }
        }

        return nsGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequenceGroup</Name>
				<Source><![CDATA[
    private boolean validateNumberSequenceGroup(NumberSequenceGroupId _numberSequenceGroupId)
    {
        boolean ret;
        NumberSequenceGroupRef numberSequenceGroupRef;
        NumberSequenceTable numberSequenceTable;

        while select numberSequenceGroupRef
            where numberSequenceGroupRef.numberSequenceGroupId == _numberSequenceGroupId
        join numberSequenceTable
            where numberSequenceTable.RecId == numberSequenceGroupRef.NumberSequenceId
        {
            ret = this.validateNumberSequenceTable(numberSequenceTable);

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumberSequenceTable</Name>
				<Source><![CDATA[
    private boolean validateNumberSequenceTable(NumberSequenceTable _numberSequenceTable)
    {
        boolean ret = true;
        
        if (!this.validateFreeNumbers(_numberSequenceTable))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFreeNumbers</Name>
				<Source><![CDATA[
    private boolean validateFreeNumbers(NumberSequenceTable _numberSequenceTable)
    {
        boolean ret = true;
        NumberSequence64Range nextRec = _numberSequenceTable.Extended ? _numberSequenceTable.NextRec64 : _numberSequenceTable.NextRec;
        NumberSequence64Range highest = _numberSequenceTable.Extended ? _numberSequenceTable.Highest64 : _numberSequenceTable.Highest;

        if (nextRec > highest)
        {
            ret = false;

            if (_numberSequenceTable.Continuous)
            {
                ret = NumberSequenceList::exist(_numberSequenceTable.RecId, NumStatus::Free);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequenceGroupSetup</Name>
				<Source><![CDATA[
    private ChronologicalNumberSequenceGroupSetup getNumberSequenceGroupSetup()
    {
        ChronologicalNumberSequenceGroupSetup chronologicalNumberSequenceGroupSetup;

        NumberSequenceGroupId originalNumberSequenceGroupId = context.getNumberSequenceGroup(common);

        if (FeatureStateProvider::isFeatureEnabled(TaxInvoiceSerialNumberGenerateIndonesiaFeature::instance())
            && SysDictTable::isTableMapped(tableNum(DimensionDefaultMap), common.TableId))
        {
            DimensionDefaultMap dimensionDefaultMap = common;

            chronologicalNumberSequenceGroupSetup = ChronologicalNumberSequenceGroupSetup::findByOriginalGroupTaxBranchAndDate(
                originalNumberSequenceGroupId,
                TaxBranch::findByCode(TaxBranchType::getTBDisplayValueByDefaultDimension(dimensionDefaultMap.DefaultDimension)).RecId,
                postingDate);

        }

        if (!chronologicalNumberSequenceGroupSetup)
        {
            chronologicalNumberSequenceGroupSetup = ChronologicalNumberSequenceGroupSetup::findByOriginalGroupAndDate(
                originalNumberSequenceGroupId,
                postingDate);
        }

        return chronologicalNumberSequenceGroupSetup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>