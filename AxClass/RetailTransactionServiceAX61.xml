<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceAX61</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceAX61</c> class is used as a service class between the Ax and the POS.
/// </summary>
class RetailTransactionServiceAX61
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLoyaltyTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns <c>container</c> with the value in the RetailTransactionLoyaltyPointsTrans.cardNumber field.
/// </summary>
/// <param name="transactionLoyaltyTrans">
/// Table buffer of <c>RetailTransactionLoyaltyRewardPointTrans</c> table.
/// </param>
/// <returns>
/// <c>Container</c> with the value in the RetailTransactionLoyaltyPointsTrans.cardNumber field.
/// </returns>
private container fillLoyaltyTrans(RetailTransactionLoyaltyRewardPointTrans transactionLoyaltyTrans)
{
    container   c;
    ;

    c = [transactionLoyaltyTrans.cardNumber];

    return c;

}

]]></Source>
			</Method>
			<Method>
				<Name>fillSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the container <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
/// </summary>
/// <param name="transactionSalesTrans">
/// Table buffer of <c>RetailTransactionSalesTrans</c> table.
/// </param>
/// <returns>
/// Container <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
/// </returns>

private container fillSalesTrans(RetailTransactionSalesTrans transactionSalesTrans)
{
    // NOTE:
    // All three tables must be mapped to the same data:
    // RetailEx3 - ReturnTranscation CreateItemDataTable()
    // TS  - GetTranscation() table
    // AX  - fillSalesTrans() container

    container   salesTrans;

    salesTrans = [transactionSalesTrans.transactionId,
                  transactionSalesTrans.receiptId,
                  transactionSalesTrans.lineNum,
                  transactionSalesTrans.barcode,
                  transactionSalesTrans.itemId,
                  "", // Deprecated - DEL_itemDepartmentId,
                  "", // Deprecated - DEL_itemGroupId,
                  transactionSalesTrans.variantId,
                  transactionSalesTrans.transactionStatus,
                  transactionSalesTrans.comment,
                  transactionSalesTrans.InventBatchId,
                  transactionSalesTrans.returnQty,
                  transactionSalesTrans.price,
                  transactionSalesTrans.netPrice,
                  transactionSalesTrans.qty,
                  transactionSalesTrans.taxGroup,
                  transactionSalesTrans.taxAmount,
                  transactionSalesTrans.totalDiscAmount,
                  transactionSalesTrans.totalDiscPct,
                  transactionSalesTrans.lineDscAmount,
                  transactionSalesTrans.periodicDiscAmount,
                  transactionSalesTrans.discAmount,
                  transactionSalesTrans.unit,
                  transactionSalesTrans.unitQty,
                  transactionSalesTrans.InventSerialId,
                  "", //Deprecated transactionSalesTrans.RFIDTagId
                  transactionSalesTrans.OriginalTaxGroup,
                  transactionSalesTrans.TaxItemGroup,
                  transactionSalesTrans.OriginalTaxItemGroup,
                  transactionSalesTrans.periodicDiscType];

    return salesTrans;

}

]]></Source>
			</Method>
			<Method>
				<Name>fillTransactionTable</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the container <c>transTable</c> having the data of the <c>RetailTransactionTable</c>.
/// </summary>
/// <param name="transactionTable">
/// Table buffer of <c>RetailTransactionTable</c>.
/// </param>
/// <returns>
/// Container <c>transTable</c> having the data of the <c>RetailTransactionTable</c>.
/// </returns>

private container fillTransactionTable(RetailTransactionTable transactionTable)
{
    container   transTable;
    ;
    transTable = [transactionTable.transactionId,
                  transactionTable.receiptId,
                  transactionTable.store,
                  transactionTable.terminal,
                  transactionTable.staff,
                  transactionTable.transDate,
                  transactionTable.shift,
                  transactionTable.shiftDate,
                  transactionTable.custAccount,
                  transactionTable.entryStatus,
                  transactionTable.currency];

    return transTable;

}

]]></Source>
			</Method>
			<Method>
				<Name>cancelCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Cancels the sales order.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges, payments associated with the sales order to be canceled.
/// </param>
/// <returns>
/// A container having the status of order cancellation.
/// </returns>
public static container cancelCustomerOrder(str _custOrderXmlStr)
{
    container result = [false, ""];

    result = RetailTransactionService::CancelCustomerOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>convertCustomerQuoteToOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Converts a quotation to sales order.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges, payments associated with the sales order to be created.
/// </param>
/// <returns>
/// A container having the status of quote conversion and salesId of the sales order.
/// </returns>
public static container convertCustomerQuoteToOrder(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::ConvertCustomerQuoteToOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>createAddress</Name>
				<Source><![CDATA[
    /// <summary>
/// Create address for customer.
/// </summary>
/// <param name="_paramList">
/// Container.
/// </param>
/// <returns>
/// Container with entity keys
/// </returns>
public static container createAddress(container _paramList)
{
    container                   ret = [false, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0];
    container                   createAddress;

    CustAccount                 custAccount             = conpeek(_paramList,1);
    CustName                    custName                = conpeek(_paramList,2);
    AddressStreet               street                  = conpeek(_paramList,3);
    AddressCity                 city                    = conpeek(_paramList,4);
    AddressCountyId             county                  = conpeek(_paramList,5);
    AddressStateId              state                   = conpeek(_paramList,6);
    AddressZipCodeId            zip                     = conpeek(_paramList,7);
    AddressCountryRegionId      country                 = conpeek(_paramList,8);
    Phone                       phone                   = conpeek(_paramList,9);
    EMail                       eMail                   = conpeek(_paramList,11);
    URL                         uRL                     = conpeek(_paramList,12);
    TaxGroup                    taxGroup                = conpeek(_paramList,13);
    LogisticsLocationRoleType   role                    = conPeek(_paramList,14);

    ret = RetailTransactionService::CreateAddress(custAccount, custName, street, city, county,
                                                            state, zip, country, phone, eMail, uRL,
                                                            taxGroup, role);

    // LogisticsLocation recid and DirPartyLocation can only be inserted once in POS
    // Here we only return the RecIDs for phone.
    // URL and email are not returned.
    // Next run of A-1010 should be able to carry all missing values down to all related stores.
    createAddress = [
        conPeek(ret, 1),
        conPeek(ret, 2),
        conPeek(ret, 3),
        conPeek(ret, 4),
        conPeek(ret, 5),
        conPeek(ret, 6),
        conPeek(ret, 7),
        conPeek(ret, 8),
        conPeek(ret, 9),
        conPeek(ret, 10),
        conPeek(ret, 11),
        conPeek(ret, 12),
        conPeek(ret, 13),
        conPeek(ret, 14),
        conPeek(ret, 15),
        0,                 // email
        0,
        0,
        0,
        0,
        conPeek(ret, 21),  // phone
        conPeek(ret, 22),
        conPeek(ret, 23),
        conPeek(ret, 24),
        conPeek(ret, 25),
        0,                 // url
        0,
        0,
        0,
        0,
        0,                 // cellphone
        0,
        0,
        0,
        0
    ];

    return createAddress;
}

]]></Source>
			</Method>
			<Method>
				<Name>createCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates a customer order from the given details.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges, payments associated with the sales order to be created.
/// </param>
/// <returns>
/// A container having the status and sales id of the order created.
/// </returns>
public static container createCustomerOrder(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::CreateCustomerOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>createCustomerQuote</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates a sales quotation from the given details.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges associated with the quote to be created.
/// </param>
/// <returns>
/// A container having the status and quotation id of the quotation created.
/// </returns>
public static container createCustomerQuote(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::CreateCustomerQuote(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>createCustomerReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates a customer return order from the given details.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges, payments associated with the retrn order to be created.
/// </param>
/// <returns>
/// A container having the status and sales id of the order created.
/// </returns>
public static container createCustomerReturnOrder(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::CreateCustomerReturnOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryJournal</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates an inventory journal.
/// </summary>
/// <param name="_inventLocationId">
/// Identification of the warehouse.
/// </param>
/// <param name="_description">
/// Description of the journal.
/// </param>
/// <param name="_source">
/// Inventory journal source.
/// </param>
/// <returns>
/// <c>Container</c> with the status as true if the creation of record is successful; else false and appropriate xml string.
/// </returns>
public static container createInventoryJournal(InventLocationId _inventLocationId, JournalDescription _description = '', InventJournalSource _source = '')
{
    Container inventJournalContainer = [false, "", ""];

    inventJournalContainer = RetailTransactionService::CreateInventoryJournal(_inventLocationId, _description, _source);

    return inventJournalContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>createPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the PackingSlip for sales order transaction.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId field.
/// </param>
/// <returns>
/// <c>Container</c> with the value true and empty string if the PackingSlip creation is success; else false wih the appropriate string message.
/// </returns>
public static container createPackingSlip(SalesId _salesId)
{
    container printSuccess = [true,""];

    printSuccess = RetailTransactionService::CreatePackingSlip(_salesId);

    return printSuccess;

}

]]></Source>
			</Method>
			<Method>
				<Name>createPickingList</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the PickingList for sales order transaction.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId field.
/// </param>
/// <param name="_inventLocationId">
/// Warehouse for which to create the picking list.
/// </param>
/// <returns>
/// <c>Container</c> with the value true and empty string if the PickingList creation is success; else false wih the appropriate string message.
/// </returns>
public static container createPickingList(SalesId _salesId, InventLocationId _inventLocationId)
{
    container printSuccess = [true,""];

    printsuccess = RetailTransactionService::CreatePickingList(_salesId, _inventLocationId);

    return printSuccess;
}

]]></Source>
			</Method>
			<Method>
				<Name>createPickListForCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates picking list for the given items.
/// </summary>
/// <param name="_paramList">
/// XML string having the items and pickup quantity details.
/// </param>
/// <returns>
/// A container having the status of Pick list creation.
/// </returns>
public static container createPickListForCustomerOrder(container _paramList)
{
    container result = [false, ""];

    result = RetailTransactionService::CreatePickListForCustomerOrder(_paramList);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>createReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates a return order from the given details.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges, payments associated with the return order to be created.
/// </param>
/// <returns>
/// A container having the status and sales id of the return order created.
/// </returns>
public static container createReturnOrder(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::createCustomerReturnOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherCreate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailCreditVoucherTable</c>.
/// </summary>
/// <param name="_storeId">
/// ID of the RetailCreditVoucherTable.createdInStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailCreditVoucherTable.createdByTerminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailCreditVoucherTable.createdByStaffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailCreditVoucherTable.createdByTransactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailCreditVoucherTable.createdByReceipId field.
/// </param>
/// <param name="_lineNum">
/// ID of the RetailCreditVoucherTable.createdByLineNum field.
/// </param>
/// <param name="_currencyCode">
/// ID of the RetailCreditVoucherTable.currencyCode field.
/// </param>
/// <param name="_amountMST">
/// Value for the RetailCreditVoucherTable.amount field.
/// </param>
/// <param name="_transDate">
/// Value for the RetailCreditVoucherTable.transDate field.
/// </param>
/// <param name="_transTime">
/// Value for the RetailCreditVoucherTable.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// <c>Container</c>
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container creditVoucherCreate(//RetailDataEntryId   _entryId,
                                               RetailStoreId       _storeId,
                                               RetailTerminalId    _terminalId,
                                               RetailStaffId       _staffId,
                                               RetailTransactionId _transactionId,
                                               RetailReceiptId     _receiptId,
                                               RetailLineNum       _lineNum,
                                               CurrencyCode     _currencyCode,
                                               AmountMST        _amountMST,
                                               str              _transDate,//RBOTransDate     _transDate,
                                               str              _transTime,//RetailTransTime     _transTime)
                                               int              _dateSequence = 321)
{
    container creditVoucherStatus = [false,0];

    creditVoucherStatus = RetailTransactionService::IssueCreditMemo(_storeId, _terminalId, _staffId, _transactionId,
                                                                    _receiptId, _lineNum, _currencyCode, _amountMST,
                                                                    _transDate, _transTime, _dateSequence);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherUpdate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for updating the record in <c>RetailCreditVoucherTable</c>.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailCreditVoucherTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailCreditVoucherTable.createdInStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailCreditVoucherTable.createdByTerminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailCreditVoucherTable.createdByStaffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailCreditVoucherTable.createdByTransactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailCreditVoucherTable.createdByReceipId field.
/// </param>
/// <param name="_lineNum">
/// ID of the RetailCreditVoucherTable.createdByLineNum field.
/// </param>
/// <param name="_amountMST">
/// Value for the RetailCreditVoucherTable.amount field.
/// </param>
/// <param name="_transDate">
/// Value for the RetailCreditVoucherTable.transDate field.
/// </param>
/// <param name="_transTime">
/// Value for the RetailCreditVoucherTable.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// <c>Container</c>
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container creditVoucherUpdate(RetailCreditVoucherId   _dataEntryId,
                                            RetailStoreId           _storeId,
                                            RetailTerminalId        _terminalId,
                                            RetailStaffId           _staffId,
                                            RetailTransactionId     _transactionId,
                                            RetailReceiptId         _receiptId,
                                            RetailLineNum           _lineNum,
                                            AmountMST               _amountMST,
                                            str                     _transDate,//RBOTransDate     _transDate,
                                            str                     _transTime,//RetailTransTime     _transTime)
                                            int                     _dateSequence = 321)
{
    container creditVoucherStatus = [false,0];

    creditVoucherStatus = RetailTransactionService::UpdateCreditMemo(_dataEntryId, _storeId, _terminalId, _staffId,
                                                                     _transactionId, _receiptId, _lineNum, _amountMST,
                                                                     _transDate, _transTime, _dateSequence);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherValidate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for validating the credit vouchers.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailCreditVoucherTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailCreditVoucherTable.reservedByStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailCreditVoucherTable.reservedByTerminalId field.
/// </param>
/// <returns>
/// <c>Container</c>
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container creditVoucherValidate(RetailCreditVoucherId _dataEntryId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    Container creditVoucherStatus = [false,"",0,0];

    creditVoucherStatus = RetailTransactionService::ValidateCreditMemo(_dataEntryId, _storeId, _terminalId);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherVoid</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used to check the status of the credit voucher i.e., voucher exists or voided or not voided.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailCreditVoucherTable.entryId field.
/// </param>
/// <returns>
/// <c>Container</c>
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container creditVoucherVoid(RetailCreditVoucherId _dataEntryId)
{
    Container creditVoucherStatus = [false,0];

    creditVoucherStatus = RetailTransactionService::VoidCreditMemo(_dataEntryId);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>creditVoucherVoidPayment</Name>
				<Source><![CDATA[
    /// <summary>
/// Method checks for the status of the credit voucher i.e., voucher is in use or the voucher has any errors or the voucher does not exists.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailCreditVoucherTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailCreditVoucherTable.reservedByStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailCreditVoucherTable.reservedByTerminalId field.
/// </param>
/// <returns>
/// <c>Container</c>
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container creditVoucherVoidPayment(RetailCreditVoucherId _dataEntryId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    Container creditVoucherStatus = [false,""];

    creditVoucherStatus = RetailTransactionService::VoidCreditMemoPayment(_dataEntryId, _storeId, _terminalId);

    return creditVoucherStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>customerNew</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating new customer.
/// </summary>
/// <param name="_paramList">
/// <c>Container</c> having customer details.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container customerNew(container _paramList)
{
    container ret = [false, "", "", "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    container customerNew;

    DirPartyName                custName                = conpeek(_paramList,1);
    NameAlias                   custTableAlias          = conpeek(_paramList,2);
    CustGroupId                 custGroup               = conpeek(_paramList,3);
    CustCurrencyCode            currency                = conpeek(_paramList,4);
    CustLanguageId              languageId              = conpeek(_paramList,5);
    AddressStreet               street                  = conpeek(_paramList,6);
    AddressZipCodeId            zipCode                 = conpeek(_paramList,7);
    AddressStateId              state                   = conpeek(_paramList,8);
    AddressCountyId             county                  = conpeek(_paramList,9);
    Phone                       phone                   = conpeek(_paramList,10);
    PhoneMobile                 cellularPhone           = conpeek(_paramList,11);
    Email                       email                   = conpeek(_paramList,12);
    URL                         url                     = conpeek(_paramList,13);
    CustMultiLineDiscCode       multiLineDisc           = conpeek(_paramList,14);
    CustEndDiscCode             endDisc                 = conpeek(_paramList,15);
    CustLineDiscCode            lineDisc                = conpeek(_paramList,16);
    CustPriceGroup              priceGroup              = conpeek(_paramList,17);
    TaxGroup                    taxGroup                = conpeek(_paramList,18);
    CustCreditMaxMST            creditMax               = conpeek(_paramList,19);
    CustBlocked                 blocked                 = conpeek(_paramList,20);
    OrgId                       orgId                   = conpeek(_paramList,21);
    RetailUsePurchRequest        usePurchRequest         = conpeek(_paramList,22);
    VATNum                      vatNum                  = conpeek(_paramList,23);
    CustInvoiceAccount          invoiceAccount          = conpeek(_paramList,24);
    MandatoryCreditLimit        mandatoryCreditLimit    = conpeek(_paramList,25);
    ContactPersonId             contactPersonId         = conpeek(_paramList,26);
    RetailUseOrderNumberReference  useOrderNumberReference = conpeek(_paramList,27);
    RetailReceiptOption            receiptOption           = conpeek(_paramList,28);
    RetailReceiptEmail             receiptEmail            = conpeek(_paramList,29);
    AddressCity                 city                    = conpeek(_paramList,30);
    AddressCountryRegionId      country                 = conpeek(_paramList,31);
    CustIdentificationNumber    identificationNumber    = conpeek(_paramList,32);
    int64                       storeRecId              = conPeek(_paramList,33);
    DirPartyType                partyType               = conPeek(_paramList,38);

    ret = RetailTransactionService::NewCustomer(custName, custGroup, currency, languageId, street, zipCode,
                                                        state, county, phone, cellularPhone, email, url, multiLineDisc,
                                                        endDisc, lineDisc, priceGroup, taxGroup, creditMax, blocked, orgId,
                                                        usePurchRequest, vatNum, invoiceAccount, mandatoryCreditLimit,
                                                        contactPersonId, useOrderNumberReference, receiptOption, receiptEmail,
                                                        city, country, identificationNumber, storeRecId, partyType);

    // LogisticsLocation recid and DirPartyLocation can only be inserted once in POS
    // Here we only return the RecIDs for phone.
    // URL and email are not returned.
    // Next run of A-1010 should be able to carry all missing values down to all related stores.
    customerNew = [
        conPeek(ret, 1),
        conPeek(ret, 2),
        conPeek(ret, 3),
        conPeek(ret, 4),
        conPeek(ret, 5),
        conPeek(ret, 6),
        conPeek(ret, 7),
        conPeek(ret, 8),
        conPeek(ret, 9),
        conPeek(ret, 10),
        conPeek(ret, 11),
        conPeek(ret, 12),
        conPeek(ret, 13),
        conPeek(ret, 14),
        conPeek(ret, 15),
        conPeek(ret, 16),
        conPeek(ret, 17),
        0,                 // email
        0,
        0,
        0,
        0,
        conPeek(ret, 23),  // phone
        conPeek(ret, 24),
        conPeek(ret, 25),
        conPeek(ret, 26),
        conPeek(ret, 27),
        0,                 // url
        0,
        0,
        0,
        0,
        0,                 // cellphone
        0,
        0,
        0,
        0
    ];

    return customerNew;
}

]]></Source>
			</Method>
			<Method>
				<Name>customerStatus</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for checking the status of the customer account i.e.,
/// 1.Existence of the customer
/// 2.Blocked/Unblocked
/// 3.Credit limit
/// </summary>
/// <param name="_custAccount">
/// ID of the CustTable.AccountNum field.
/// </param>
/// <param name="_salesAmount">
/// <c>AmountMST</c>
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::Error">
/// Throws error if fails to check the status of the customer account.
/// </exception>
public static container customerStatus(custAccount _custAccount, AmountMST  _salesAmount, CurrencyCode _currencyCode)
{
    container custStatus = [false,0];

    custStatus = RetailTransactionService::ValidateCustomerStatus(_custAccount, _salesAmount, _currencyCode);

    return custStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the customer order for the given Id.
/// </summary>
/// <param name="_salesId">
/// Value of the SalesId for which order needs to be fetched.
/// </param>
/// <param name="_includeOnlineOrders">
/// whether or not to include online orders in the search
/// </param>
/// <returns>
/// A container having the order details in a XML string.
/// </returns>
public static container getCustomerOrder(SalesId _salesId, boolean _includeOnlineOrders = false)
{
    container result = [false, "", ""];

    result = RetailTransactionService::GetCustomerOrder(_salesId, _includeOnlineOrders);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerOrderList</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the customer order details for the given customer.
/// </summary>
/// <param name="_custAccount">
/// Customer account number.
/// </param>
/// <returns>
/// A container having the customer order details for the given customer.
/// </returns>
public static container getCustomerOrderList(CustAccount _custAccount)
{
    container salesOrder = [true,''];

    salesOrder = RetailTransactionService::getCustomerOrderList(_custAccount);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerOrdersForPackSlip</Name>
				<Source><![CDATA[
    /// <summary>
/// Get customer orders for pack slip creation
/// </summary>
/// <param name="_custAccount">
/// Customer account
/// </param>
/// <returns>
/// list of customer orders
/// </returns>
/// <remarks>
/// Retrieves a list of all customer orders for the given customer which are available for packslip creation.
/// </remarks>
public static container getCustomerOrdersForPackSlip(CustAccount _custAccount)
{
    container salesOrder = [true,''];

    salesOrder = RetailTransactionService::GetCustomerOrdersForPackSlip(_custAccount);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerQuote</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the quotation for the given Quotation Id.
/// </summary>
/// <param name="_quotationId">
/// Value of the QuotationId for which quote needs to be fetched.
/// </param>
/// <returns>
/// A container having the quote details in a XML string.
/// </returns>
public static container getCustomerQuote(QuotationIdBase _quotationId)
{
    container result = [false, "", ""];

    result = RetailTransactionService::GetCustomerQuote(_quotationId);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>getInventJournal</Name>
				<Source><![CDATA[
    /// <summary>
/// Get an inventory journal object in XML format
/// </summary>
/// <param name="_journalId">
/// A journalID
/// </param>
/// <param name="_storeId">
/// A storeId
/// </param>
/// <returns>
/// A container object with the details of a journal object in XML format
/// </returns>
/// <remarks>
/// Get an inventory journal document in XML format
/// </remarks>
public static container getInventJournal(JournalId _journalId, InventLocationId _storeId)
{
    Container inventjournalContainer = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

    inventjournalContainer = RetailTransactionService::GetInventJournal(_journalId, _storeId);

    return inventjournalContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>getInventJournals</Name>
				<Source><![CDATA[
    /// <summary>
/// Get a list of inventory journals for stock counting
/// </summary>
/// <param name="_storeId">
/// A storeId
/// </param>
/// <returns>
/// A list of inventory journals for stock counting
/// </returns>
public static container getInventJournals(InventLocationId _storeId)
{
    Container openInventJournals = [false, "", ""];

    openInventJournals = RetailTransactionService::GetInventJournals(_storeId);

    return openInventJournals;
}

]]></Source>
			</Method>
			<Method>
				<Name>getLoyaltyPointStatus</Name>
				<Source><![CDATA[
    /// <summary>
/// The function calculates the used, issued, expired points, depending on the table and baseEnum (Used; Issued; Expired).
/// </summary>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <returns>
/// <c>Container</c> having calculated points.
/// </returns>
public static container getLoyaltyPointStatus(RetailCardNumber _pLoyaltyCardNo)
{
    container result = [false,"",0,0];

    result = RetailTransactionService::GetLoyaltyPointsStatus(_pLoyaltyCardNo);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>getOpenPurchaseOrders</Name>
				<Source><![CDATA[
    /// <summary>
/// Get a list of open purchase orders for a location
/// </summary>
/// <param name="_locationId">
/// A locationId
/// </param>
/// <returns>
/// A list of purchase orders in XML format in a container object
/// </returns>
public static container getOpenPurchaseOrders(InventLocationId _locationId)
{
    Container openPurchaseOrders = [false, "", ""];

    openPurchaseOrders = RetailTransactionService::GetOpenPurchaseOrders(_locationId);

    return openPurchaseOrders;
}

]]></Source>
			</Method>
			<Method>
				<Name>getOpenTransferOrders</Name>
				<Source><![CDATA[
    /// <summary>
/// Get a list of open transfer orders for a store
/// </summary>
/// <param name="_inventLocationId">
/// A inventLocationId
/// </param>
/// <returns>
/// A list of open transfer orders for a store
/// </returns>
/// <remarks>
/// This is to get open transfer orders
/// </remarks>
public static container getOpenTransferOrders(InventLocationId _inventLocationId)
{
    Container openTransferOrders = [false, "", ""];

    openTransferOrders = RetailTransactionService::GetOpenTransferOrders(_inventLocationId);

    return openTransferOrders;
}

]]></Source>
			</Method>
			<Method>
				<Name>getPackingSlips</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the list of Packingslip journals for the given location.
/// </summary>
/// <param name="_storeId">
/// Unique identification value of the Inventory location.
/// </param>
/// <returns>
/// A container having the packing slip details in XML string.
/// </returns>
public static container getPackingSlips(InventLocationId _storeId)
{
    Container packingSlips = [false, "", ""];

    packingSlips = RetailTransactionService::GetPackingSlips(_storeId);

    return packingSlips;
}

]]></Source>
			</Method>
			<Method>
				<Name>getPickingList</Name>
				<Source><![CDATA[
    /// <summary>
/// Get the details of a picking list
/// </summary>
/// <param name="_pickingId">
/// A pickingId
/// </param>
/// <param name="_inventLocationId">
/// A inventLocationId
/// </param>
/// <returns>
/// A container object containing the details of a picking list
/// </returns>
/// <remarks>
/// The picking list status is still atctive
/// </remarks>
public static container getPickingList(WMSPickingRouteID _pickingId, InventLocationId _inventLocationId)
{
    Container pickingListContainer = [false, "", ""];

    pickingListContainer = RetailTransactionService::GetPickingList(_pickingId, _inventLocationId);

    return pickingListContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>getPickingLists</Name>
				<Source><![CDATA[
    /// <summary>
/// Get a list of picking lists for a store
/// </summary>
/// <param name="_inventLocationId">
/// A inventLocationId
/// </param>
/// <returns>
/// A container object containing a list of picking list in XML format
/// </returns>
/// <remarks>
/// These picking lists are for a specific store
/// </remarks>
public static container getPickingLists(InventLocationId _inventLocationId)
{
    Container openPickingLists = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

    openPickingLists = RetailTransactionService::GetPickingLists(_inventLocationId);

    return openPickingLists;
}

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Get the details of a purchase order
/// </summary>
/// <param name="_purchId">
/// A purchId
/// </param>
/// <param name="_inventLocationId">
/// A inventLocationId
/// </param>
/// <returns>
/// A container object containing the details of a purchase order in XML format
/// </returns>
/// <remarks>
/// This is get an open purchase order
/// </remarks>
public static container getPurchaseOrder(PurchId _purchId, InventLocationId _inventLocationId = '')
{
    Container purchaseOrder = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

    purchaseOrder = RetailTransactionService::GetPurchaseOrder(_purchId, _inventLocationId);

    return purchaseOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getReturnReasonCodes</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the reason codes.
/// </summary>
/// <returns>
/// A container having the quote details in a XML string.
/// </returns>
public static container getReturnReasonCodes()
{
    container result = [false, "", ""];

    result = RetailTransactionService::GetReturnReasonCodes();

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
/// </summary>
/// <param name="_invoiceId">
/// ID of the CustTrans.Invoice field.
/// </param>
/// <returns>
/// Container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
/// </returns>

public static container getSalesInvoice(InvoiceId _invoiceId)
{
    container salesInvoice = [false,"","","","","","",""];

    salesInvoice = RetailTransactionService::GetSalesInvoice(_invoiceId);

    return salesInvoice;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceDetail</Name>
				<Source><![CDATA[
    /// <summary>
/// Get the details of a sales invoice
/// </summary>
/// <param name="_invoiceId">
/// An invoiceId
/// </param>
/// <returns>
/// A container object containing the details of a sales invoice in XML format
/// </returns>
/// <remarks>
/// This is to get a sales invoice
/// </remarks>
public static container getSalesInvoiceDetail(InvoiceId _invoiceId)
{
    Container salesInvoice = [false, "", ""];

    salesInvoice = RetailTransactionService::GetSalesInvoiceDetail(_invoiceId);

    return salesInvoice;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the <c>CustTrans</c> table to get the list of the sales invoices.
/// </summary>
/// <param name="_custAccount">
/// ID of the CustTrans.AccountNum field.
/// </param>
/// <returns>
/// Container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and <c>CustTable</c>.
/// </returns>
/// <remarks>
/// RetailTransactionService::getSalesInvoice method returns the container <c>salesInvoice</c> having the data of the <c>CustTrans</c> and
/// <c>CustTable</c>.
/// </remarks>

public static container getSalesInvoiceList(CustAccount _custAccount)
{
    container salesInvoice = [true,''];

    salesInvoice = RetailTransactionService::GetSalesInvoiceList(_custAccount);

    return salesInvoice;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoicesBySalesId</Name>
				<Source><![CDATA[
    /// <summary>
/// Get a list of sales invoices for a sales order
/// </summary>
/// <param name="_salesId">
/// A salesId
/// </param>
/// <returns>
/// A container object containing the list of sales invoices in XML format
/// </returns>
/// <remarks>
/// This is to get a list of sales invoices
/// </remarks>
public static container getSalesInvoicesBySalesId(SalesId _salesId)
{
    Container custInvoiceJourList = [false, "", ""];

    custInvoiceJourList = RetailTransactionService::GetSalesInvoicesBySalesId(_salesId);

    return custInvoiceJourList;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId field.
/// </param>
/// <returns>
/// Container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </returns>

public static container getSalesOrder(SalesId _salesId)
{
    container salesOrder = [false,"","","","","","","","", "", "", 0, true, "", 0];

    salesOrder = RetailTransactionService::GetSalesOrder(_salesId);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderDetail</Name>
				<Source><![CDATA[
    /// <summary>
/// Get the details of a sales order
/// </summary>
/// <param name="_salesId">
/// A salesId
/// </param>
/// <param name="_storeId">
/// A storeId
/// </param>
/// <returns>
/// A container object containing the details of a sales order in XML format
/// </returns>
/// <remarks>
/// This is to get open sales order
/// </remarks>
public static container getSalesOrderDetail(SalesId _salesId, InventLocationId _storeId)
{
    Container salesOrder = [false, "", ""]; // Status, ErrorMsg, XmlResultSet

    salesOrder = RetailTransactionService::GetSalesOrderDetail(_salesId, _storeId);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderList</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the <c>SalesTable</c> to get the list of the sales orders.
/// </summary>
/// <param name="_custAccount">
/// ID of the SalesTable.CustAccount field.
/// </param>
/// <returns>
/// Container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </returns>
public static container getSalesOrderList(CustAccount _custAccount)
{
    container salesOrder = [true,''];

    salesOrder = RetailTransactionService::GetSalesOrderList(_custAccount);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getSalesOrderListForPrepayments</Name>
				<Source><![CDATA[
    /// <summary>
/// Method loops the <c>SalesTable</c> to get the list of the sales orders for prepayments.
/// </summary>
/// <param name="_custAccount">
/// ID of the SalesTable.CustAccount field.
/// </param>
/// <returns>
/// Container <c>salesOrder</c> having the data of the <c>SalesTable</c> and <c>CustTable</c>.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container getSalesOrderListForPrepayments(CustAccount _custAccount)
{
    container salesOrder = [true,''];

    salesOrder = RetailTransactionService::GetSalesOrderListForPrepayments(_custAccount);

    return salesOrder;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for retrieving the sales transactions. Performs the following:
/// 1.Adds transaction details.
/// 2.Adds item details.
/// 3.Adds loyalty.
/// Performs the following validations:
/// 1.No transactions for the receipt ID.
/// 2.Too many transactions were found for receipt ID.
/// </summary>
/// <param name="receiptId">
/// ID of the RetailTransactionTable.receiptId field.
/// </param>
/// <param name="storeId">
/// ID of the RetailTransactionTable.store field.
/// </param>
/// <param name="terminalId">
/// ID of the RetailTransactionTable.terminal field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <remarks>
/// RetailTransactionService.fillTransactionTable method returns the container <c>transTable</c> having the data of the <c>RetailTransactionTable</c>.
/// RetailTransactionService.fillSalesTrans method returns the container <c>salesTrans</c> having the data of the <c>RetailTransactionSalesTrans</c> table.
/// RetailTransactionService.fillLoyaltyTrans method returns <c>container</c> with the value in the RetailTransactionLoyaltyPointsTrans.cardNumber field.
/// </remarks>

public static container getTransactionSalesTrans(RetailReceiptId   receiptId,
                                                 RetailStoreId     storeId    = '',
                                                 RetailTerminalId  terminalId = '')
{
    RetailTransactionServiceAX61           transactionService = new RetailTransactionServiceAX61();
    RetailTransactionTable                 transactionTable;
    RetailTransactionSalesTrans            transactionSalesTrans;
    RetailTransactionLoyaltyRewardPointTrans    transactionLoyaltyTrans;
    container                           output = [true,''];
    container                           conItems;
    ;

    if (storeId && terminalId)
    {
        select count(RecId) from transactionTable
        where transactionTable.receiptId   == receiptId
           && transactionTable.store       == storeId
           && transactionTable.terminal    == terminalId
           && transactionTable.entryStatus != RetailEntryStatus::Voided;
    }
    else
    {
        select count(RecId) from transactionTable
        where transactionTable.receiptId   == receiptId
           && transactionTable.entryStatus != RetailEntryStatus::Voided;
    }

    if (transactionTable.RecId == 0)
    {
        // No transactions for receipt ID.
        output = [false,strfmt("@RET4544",receiptId),transactionTable.RecId];
    }
    else if (transactionTable.RecId > 1)
    {
        // Too many transactions were found for receipt ID.
        output = [false,strfmt("@RET4545",receiptId),transactionTable.RecId];
    }
    else if (transactionTable.RecId == 1)
    {
        // Add count of transactions to container, which is always 1.
        output = conins(output,conlen(output)+1,transactionTable.RecId);

        if (storeId && terminalId)
        {
            // Add transaction detail as a container.
            select firstonly transactionTable
            where transactionTable.store       == storeId
               && transactionTable.terminal    == terminalId
               && transactionTable.receiptId   == receiptId
               && transactionTable.entryStatus != RetailEntryStatus::Voided;

            output = conins(output,conlen(output)+1,transactionService.fillTransactionTable(transactionTable));

            // Add item details as container of containers.
            while select transactionSalesTrans
            where transactionSalesTrans.transactionId   == transactionTable.transactionId
               && transactionSalesTrans.store           == transactionTable.store
               && transactionSalesTrans.terminalId      == transactionTable.terminal
               && transactionSalesTrans.receiptId       == transactionTable.receiptId
            {
                conItems = conins(conItems,conlen(conItems)+1,transactionService.fillSalesTrans(transactionSalesTrans));
            }

            output = conins(output,conlen(output)+1,conItems);

            // Add loyalty as container.
            select firstonly transactionLoyaltyTrans
            where transactionLoyaltyTrans.transactionId   == transactionTable.transactionId
               && transactionLoyaltyTrans.storeId           == transactionTable.store
               && transactionLoyaltyTrans.terminalId      == transactionTable.terminal
               && transactionLoyaltyTrans.receiptId       == transactionTable.receiptId;

            output = conins(output,conlen(output)+1,transactionService.fillLoyaltyTrans(transactionLoyaltyTrans));
        }
        else
        {
            select firstonly transactionTable
            where transactionTable.receiptId   == receiptId
               && transactionTable.entryStatus != RetailEntryStatus::Voided;

            output = conins(output,conlen(output)+1,transactionService.fillTransactionTable(transactionTable));

            while select transactionSalesTrans
            where transactionSalesTrans.transactionId == transactionTable.transactionId
               && transactionSalesTrans.receiptId     == transactionTable.receiptId
            {
                conItems = conins(conItems,conlen(conItems)+1,transactionService.fillSalesTrans(transactionSalesTrans));
            }

            output = conins(output,conlen(output)+1,conItems);

            select firstonly transactionLoyaltyTrans
            where transactionLoyaltyTrans.transactionId == transactionTable.transactionId
               && transactionLoyaltyTrans.receiptId     == transactionTable.receiptId;

            output = conins(output,conlen(output)+1,transactionService.fillLoyaltyTrans(transactionLoyaltyTrans));
        }
    }

    return output;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Get the details of a transfer order
/// </summary>
/// <param name="_transferId">
/// A transferId
/// </param>
/// <returns>
/// A container object containing the details of a transfer order
/// </returns>
/// <remarks>
/// This is to get an open transfer order
/// </remarks>
public static container getTransferOrder(InventTransferId _transferId)
{
    Container transferOrderContainer = [false, "", ""];

    transferOrderContainer = RetailTransactionService::GetTransferOrder(_transferId);

    return transferOrderContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardAddTo</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailGiftCardTransactions</c> table.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTransactions.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTransactions.terminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailGiftCardTransactions.staffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailGiftCardTransactions.transactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailGiftCardTransactions.receiptId field.
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <param name="_amountMST">
/// Value of the RetailGiftCardTransactions.amount field.
/// </param>
/// <param name="_transDate">
/// Value of the RetailGiftCardTransactions.transDate field.
/// </param>
/// <param name="_transTime">
/// Value of the RetailGiftCardTransactions.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container giftCardAddTo(RetailGiftCardId   _cardNumber,
                                       RetailStoreId       _storeId,
                                       RetailTerminalId    _terminalId,
                                       RetailStaffId       _staffId,
                                       RetailTransactionId _transactionId,
                                       RetailReceiptId     _receiptId,
                                       CurrencyCode     _currencyCode,
                                       AmountMST        _amountMST,
                                       str              _transDate,
                                       str              _transTime,
                                       int              _dateSequence = 321)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::AddToGiftCard(_cardNumber, _storeId, _terminalId, _staffId, _transactionId,
                                                             _receiptId, _currencyCode, _amountMST, _transDate, _transTime,
                                                             _dateSequence);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardGetBalance</Name>
				<Source><![CDATA[
    /// <summary>
/// Method returns the status of the gift card.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container giftCardGetBalance(RetailGiftCardId _cardNumber)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::GetGiftCardBalance(_cardNumber);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardIssue</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailGiftCardTransactions</c> table.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTransactions.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTransactions.terminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailGiftCardTransactions.staffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailGiftCardTransactions.transactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailGiftCardTransactions.receiptId field.
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <param name="_amountMST">
/// Value of the RetailGiftCardTransactions.amount field.
/// </param>
/// <param name="_transDate">
/// Value of the RetailGiftCardTransactions.transDate field.
/// </param>
/// <param name="_transTime">
/// Value of the RetailGiftCardTransactions.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container giftCardIssue(RetailGiftCardId   _cardNumber,
                                       RetailStoreId       _storeId,
                                       RetailTerminalId    _terminalId,
                                       RetailStaffId       _staffId,
                                       RetailTransactionId _transactionId,
                                       RetailReceiptId     _receiptId,
                                       CurrencyCode     _currencyCode,
                                       AmountMST        _amountMST,
                                       str              _transDate,
                                       str              _transTime,
                                       int              _dateSequence = 321)
{
    container giftCardStatus = [false, "", ""];

    giftCardStatus = RetailTransactionService::IssueGiftCard(_cardNumber, _storeId, _terminalId, _staffId, _transactionId,
                                                             _receiptId, _currencyCode, _amountMST, _transDate, _transTime,
                                                             _dateSequence);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardPayment</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailGiftCardTransactions</c> table.
/// </summary>
/// <param name="_cardNumber">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTransactions.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTransactions.terminalId field.
/// </param>
/// <param name="_staffId">
/// ID of the RetailGiftCardTransactions.staffId field.
/// </param>
/// <param name="_transactionId">
/// ID of the RetailGiftCardTransactions.transactionId field.
/// </param>
/// <param name="_receiptId">
/// ID of the RetailGiftCardTransactions.receiptId field.
/// </param>
/// <param name="_currencyCode">
/// <c>CurrencyCode</c>
/// </param>
/// <param name="_amountMST">
/// Value of the RetailGiftCardTransactions.amount field.
/// </param>
/// <param name="_transDate">
/// Value of the RetailGiftCardTransactions.transDate field.
/// </param>
/// <param name="_transTime">
/// Value of the RetailGiftCardTransactions.transTime field.
/// </param>
/// <param name="_dateSequence">
/// Format of the date.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container giftCardPayment(RetailGiftCardId   _cardNumber,
                                       RetailStoreId       _storeId,
                                       RetailTerminalId    _terminalId,
                                       RetailStaffId       _staffId,
                                       RetailTransactionId _transactionId,
                                       RetailReceiptId     _receiptId,
                                       CurrencyCode     _currencyCode,
                                       AmountMST        _amountMST,
                                       str              _transDate,
                                       str              _transTime,
                                       int              _dateSequence = 321)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::GiftCardPayment(_cardNumber, _storeId, _terminalId, _staffId, _transactionId,
                                                               _receiptId, _currencyCode, _amountMST, _transDate, _transTime,
                                                               _dateSequence);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardValidate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for validating the gift cards.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTable.reservedByStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTable.reservedByTerminalId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container giftCardValidate(RetailGiftCardId _dataEntryId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    Container giftCardStatus = [false, "", "", 0];

    giftCardStatus = RetailTransactionService::ValidateGiftCard(_dataEntryId, _storeId, _terminalId);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardVoid</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used to check the status of the gift card i.e., card exists or voided or not voided.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container giftCardVoid(RetailGiftCardId _dataEntryId)
{
    Container giftCardStatus = [false, ""];

    giftCardStatus = RetailTransactionService::VoidGiftCard(_dataEntryId);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>giftCardVoidPayment</Name>
				<Source><![CDATA[
    /// <summary>
/// Method checks for the status of the gift card i.e., card exists or the gift card has any errors.
/// </summary>
/// <param name="_dataEntryId">
/// ID of the RetailGiftCardTable.entryId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailGiftCardTable.reservedByStoreId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailGiftCardTable.reservedByTerminalId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::UpdateConflictNotRecovered">
/// A conflict occurred that could not be recovered from when updating.
/// </exception>
/// <exception cref="Exception::UpdateConflict">
/// An update conflict occurred.
/// </exception>
public static container giftCardVoidPayment(RetailGiftCardId _dataEntryId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    Container giftCardStatus = [false, ""];

    giftCardStatus = RetailTransactionService::VoidGiftCardPayment(_dataEntryId, _storeId, _terminalId);

    return giftCardStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>inventoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for initializing the fields of <c>InventDim</c> with the values of <c>InventDimCombination</c> fields. Method checks for the
/// available physical inventory.
/// </summary>
/// <param name="_itemId">
/// <c>ItemId</c>
/// </param>
/// <param name="_variantId">
/// ID of the inventDimCombination.RetailVariantId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::Error">
/// Throws error if fail to initialize the values and on check for the available physical inventory.
/// </exception>
public static container inventoryStatus(ItemId _itemId, RetailVariantId _variantId = '')
{
    InventQty               availPhysical;
    DirPartyName            dirPartyName;
    InventLocationId        inventLocationId;
    int                     indx = 0;
    container               outputLoc = [true,''];
    container               output = [true,''];
    #define.InventLocationId(1)
    #define.DirPartyName(2)
    #define.AvailPhysical(3)
    #define.ItemElementsSize(4)
    #define.FirstElementIndex(3)

    output = RetailTransactionService::InventoryLookup(_itemId, _variantId);

    for (indx = #FirstElementIndex; indx <= conLen(output); indx = indx + #ItemElementsSize)
    {
        inventLocationId    = conPeek(output, indx + #InventLocationId);
        dirPartyName        = conPeek(output, indx + #DirPartyName);
        availPhysical       = conPeek(output, indx + #AvailPhysical);
        outputLoc           = conIns(outputLoc, conLen(outputLoc)+1, [_itemId, inventLocationId, dirPartyName, availPhysical]);
    }

    return outputLoc;
}

]]></Source>
			</Method>
			<Method>
				<Name>loyaltyIssuedPointsUpdate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailLoyaltyMSRCardTrans</c> table for Issued points.
/// </summary>
/// <param name="_pTransactionId">
/// ID of the RetailLoyaltyMSRCardTrans.transactionId field.
/// </param>
/// <param name="_pLineNum">
/// ID of the RetailLoyaltyMSRCardTrans.loyaltyPointTranslineNum field.
/// </param>
/// <param name="_pStoreId">
/// ID of the RetailLoyaltyMSRCardTrans.storeId field.
/// </param>
/// <param name="_pTerminalId">
/// ID of the RetailLoyaltyMSRCardTrans.terminalId field.
/// </param>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <param name="_pTransDate">
/// Transaction date for the RetailLoyaltyMSRCardTrans.dateOfIssue field.
/// </param>
/// <param name="_pDateSequence">
/// Format of the date.
/// </param>
/// <param name="_pIssuedPoints">
/// Loyalty points of the RetailLoyaltyMSRCardTrans.points field.
/// </param>
/// <param name="_pReceiptId">
/// ID of the RetailLoyaltyMSRCardTrans.receiptId field.
/// </param>
/// <param name="_pStaffId">
/// ID of the RetailLoyaltyMSRCardTrans.staffId field.
/// </param>
/// <param name="_pTime">
/// Time value for the RetailLoyaltyMSRCardTrans.timeOfIssue field.
/// </param>
/// <returns>
/// Container with the true and string message if the record is created in <c>RetailLoyaltyMSRCardTrans</c> table successfully; else false with
/// appropriate string message.
/// </returns>
public static container loyaltyIssuedPointsUpdate(  RetailTransactionId    _pTransactionId,
                                                    LineNum             _pLineNum,
                                                    RetailStoreId          _pStoreId,
                                                    RetailTerminalId       _pTerminalId,
                                                    RetailCardNumber       _pLoyaltyCardNo,
                                                    str                 _pTransDate,
                                                    int                 _pDateSequence = 123,
                                                    RetailLoyaltyPoints    _pIssuedPoints = 0,
                                                    RetailReceiptId        _pReceiptId = "",
                                                    RetailStaffId          _pStaffId = "",
                                                    str                 _pTime = "00:00:00")
{
    container result = [false,""];

    result = RetailTransactionService::UpdateIssuedLoyaltyPoints(_pTransactionId, _pLineNum, _pStoreId, _pTerminalId, _pLoyaltyCardNo,
                                                                 _pTransDate, _pDateSequence, _pIssuedPoints, _pReceiptId, _pStaffId, _pTime);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>loyaltyPointStatusGet</Name>
				<Source><![CDATA[
    /// <summary>
/// The function calculates the used, issued, expired points, depending on the table and baseEnum (Used; Issued; Expired).
/// </summary>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <returns>
/// <c>Container</c> having calculated points.
/// </returns>
public static container loyaltyPointStatusGet(RetailCardNumber _pLoyaltyCardNo)
{
    container result = [false,"",0,0];

    result = RetailTransactionService::GetLoyaltyPointsStatus(_pLoyaltyCardNo);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>loyaltyUsedPointsUpdate</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for creating the record in <c>RetailLoyaltyMSRCardTrans</c> table for Used points.
/// </summary>
/// <param name="_pTransactionId">
/// ID of the RetailLoyaltyMSRCardTrans.transactionId field.
/// </param>
/// <param name="_pLineNum">
/// ID of the RetailLoyaltyMSRCardTrans.loyaltyPointTranslineNum field.
/// </param>
/// <param name="_pStoreId">
/// ID of the RetailLoyaltyMSRCardTrans.storeId field.
/// </param>
/// <param name="_pTerminalId">
/// ID of the RetailLoyaltyMSRCardTrans.terminalId field.
/// </param>
/// <param name="_pLoyaltyCardNo">
/// ID of the RetailLoyaltyMSRCardTable.cardNumber field.
/// </param>
/// <param name="_pTransDate">
/// Transaction date for the RetailLoyaltyMSRCardTrans.dateOfIssue field.
/// </param>
/// <param name="_pDateSequence">
/// Format of the date.
/// </param>
/// <param name="_pUsedPoints">
/// Loyalty points of the RetailLoyaltyMSRCardTrans.points field.
/// </param>
/// <param name="_pReceiptId">
/// ID of the RetailLoyaltyMSRCardTrans.receiptId field.
/// </param>
/// <param name="_pStaffId">
/// ID of the RetailLoyaltyMSRCardTrans.staffId field.
/// </param>
/// <param name="_pTime">
/// Time value for the RetailLoyaltyMSRCardTrans.timeOfIssue field.
/// </param>
/// <returns>
/// Container with the true and string message if the record is created in <c>RetailLoyaltyMSRCardTrans</c> table successfully; else false with
/// appropriate string message.
/// </returns>
public static container loyaltyUsedPointsUpdate(RetailTransactionId    _pTransactionId,
                                                LineNum             _pLineNum,
                                                RetailStoreId          _pStoreId,
                                                RetailTerminalId       _pTerminalId,
                                                RetailCardNumber       _pLoyaltyCardNo,
                                                str                 _pTransDate,
                                                int                 _pDateSequence = 123,
                                                RetailLoyaltyPoints    _pUsedPoints = 0,
                                                RetailReceiptId        _pReceiptId = "",
                                                RetailStaffId          _pStaffId = "",
                                                str                 _pTime = "00:00:00")
{
    container result = [false,""];

    result = RetailTransactionService::UpdateUsedLoyaltyPoints(_pTransactionId, _pLineNum, _pStoreId, _pTerminalId, _pLoyaltyCardNo,
                                                               _pTransDate, _pDateSequence, _pUsedPoints, _pReceiptId, _pStaffId, _pTime);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipForCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Creates packing slip for the customer order.
/// </summary>
/// <param name="_salesId">
/// Identification of the sales order.
/// </param>
/// <returns>
/// A Container with the status of pack slip creation.
/// </returns>
public static container packingSlipForCustomerOrder(SalesId _salesId)
{
    container printSuccess = [true,""];

    printSuccess = RetailTransactionService::PackingSlipForCustomerOrder(_salesId);

    return printSuccess;

}

]]></Source>
			</Method>
			<Method>
				<Name>paySalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for calculating the payment for the sales invoice. Method performs the following;
/// 1.Creates and posts the payment journal.
/// 2.Marks the Sale Order to be retail sale if it is paid at store.
/// 3.Marks sales order as retail sales.
/// 4.Marks this invoice as retail sales.
/// </summary>
/// <param name="_invoiceId">
/// ID of the CustTrans.Invoice field.
/// </param>
/// <param name="_paymentAmount">
/// Amount stored in LedgerJournalTrans.AmountCurDebit if <c>_paymentAmount</c> is less than 0; else LedgerJournalTrans.AmountCurCredit.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailTerminalTable.TerminalId field.
/// </param>
/// <param name="_storeId">
/// <c>RetailStoreId</c>
/// </param>
/// <param name="_transactionId">
/// <c>RetailTransactionId</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>

public static container paySalesInvoice(InvoiceId           _invoiceId,
                                        AmountCur           _paymentAmount,
                                        RetailTerminalId       _terminalId,
                                        RetailStoreId          _storeId,
                                        RetailTransactionId    _transactionId)
{
    container paymentSuccess = [true,""];

    paymentSuccess = RetailTransactionService::PaySalesInvoice(_invoiceId, _paymentAmount, _terminalId, _storeId, _transactionId);

    return paymentSuccess;

}

]]></Source>
			</Method>
			<Method>
				<Name>paySalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for payment of sales order. Method performs the following:
/// 1.Creates and posts payment journal.
/// 2.Return error if the total prepayment exceed the sales order total.
/// 3.Marks Sale Order to be retail sale if it is paid at store.
/// 4.Marks sales order as retail sales.
/// 5.Marks newly created invoice as retail sales.
/// </summary>
/// <param name="_salesId">
/// ID of the SalesTable.SalesId firld.
/// </param>
/// <param name="_paymentAmount">
/// Amount stored in LedgerJournalTrans.AmountCurDebit if <c>_paymentAmount</c> is less than 0; else LedgerJournalTrans.AmountCurCredit.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailTerminalTable.TerminalId field.
/// </param>
/// <param name="_storeId">
/// <c>RetailStoreId</c>
/// </param>
/// <param name="_transactionId">
/// <c>RetailTransactionId</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container paySalesOrder(SalesId           _salesId,
                                      AmountCur         _paymentAmount,
                                      RetailTerminalId     _terminalId,
                                      RetailStoreId        _storeId,
                                      RetailTransactionId  _transactionId)
{
    container paymentSuccess = [true,""];

    paymentSuccess = RetailTransactionService::PaySalesOrder(_salesId, _paymentAmount, _terminalId, _storeId, _transactionId);

    return paymentSuccess;

}

]]></Source>
			</Method>
			<Method>
				<Name>returnTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
/// Method updates the RetailTransactionSalesTrans.returnQty with the value in <c>returnQty</c> if the RetailTransactionSalesTrans.returnQty + returnQty > RetailTransactionSalesTrans.qty field.
/// </summary>
/// <param name="_transactionList">
/// <c>Container</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>

public static container returnTransactionSalesTrans(container _transactionList)
{
    RetailTransactionSalesTrans    transactionSalesTrans;
    RetailTransactionId            transactionId;
    RetailStoreId                  storeId;
    RetailTerminalId               terminalId;
    LineNum                     lineNum;
    Qty                         returnQty;
    container                   ret = [true,""];
    int                         transaction;
    container                   returnedItem;
    ;

    while (transaction < conlen(_transactionList))
    {
        returnedItem = conpeek(_transactionList,transaction+1);

        transactionId = conpeek(returnedItem,1);
        storeId       = conpeek(returnedItem,2);
        terminalId    = conpeek(returnedItem,3);
        lineNum       = conpeek(returnedItem,4);
        returnQty     = conpeek(returnedItem,5);

        transactionSalesTrans = RetailTransactionSalesTrans::find(transactionId,
                                                               storeId,
                                                               terminalId,
                                                               lineNum,
                                                               true);

        if (transactionSalesTrans)
        {
            if (transactionSalesTrans.returnQty + returnQty < transactionSalesTrans.qty)
            {
                ret += [strfmt("@RET4546",transactionSalesTrans.itemId + num2char(10),
                                               num2str(abs(transactionSalesTrans.qty),4,0,0,0) + num2char(10),
                                               num2str(abs(transactionSalestrans.returnQty),4,0,0,0) + num2char(10))];
                ret = conpoke(ret, 1, false);
            }
            else
            {
                try
                {
                    ttsbegin;
                    transactionSalesTrans.returnQty += returnQty;
                    transactionSalesTrans.update();
                    ttscommit;
                }
                catch
                {
                    ret += [strfmt("@RET4547",transactionId,storeId,terminalId,lineNum)];
                    ret = conpoke(ret, 1, false);
                    ttsabort;
                }
            }
        }
        else
        {
            ret += [strfmt("@RET4548",transactionId,storeId,terminalId,lineNum)];
            ret = conpoke(ret, 1, false);
        }

        transaction += 1;
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>settleCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Settle a customer order
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML document for the order
/// </param>
/// <returns>
/// container [success, error]
/// </returns>
/// <remarks>
/// Settles a customer order after pickup
/// </remarks>
public static container settleCustomerOrder(str _custOrderXmlStr)
{
    container result = [false, ""];

    result = RetailTransactionService::SettleCustomerOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>staffLogin</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for updating the RetailStaffLoginLog.staffId with the value in <c>_staffId</c> if the record exists in <c>RetailStaffLoginLog</c>;
/// else creates the record in <c>RetailStaffLoginLog</c>table.
/// </summary>
/// <param name="_staffId">
/// ID of the RetailStaffLoginLog.staffId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailStaffLoginLog.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailStaffLoginLog.terminalId field.
/// </param>
/// <param name="_password">
/// <c>RetailStaffPassword</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::Error">
/// Throws error if fails to create/update.
/// </exception>
public static container staffLogin(RetailStaffId _staffId, RetailStoreId _storeId, RetailTerminalId _terminalId, RetailStaffPassword _password)
{
    container staffStatus = [true,""];

    staffStatus = RetailTransactionService::StaffLogOn(_staffId, _storeId, _terminalId, _password);

    return staffStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>staffLogout</Name>
				<Source><![CDATA[
    /// <summary>
/// Method deletes the record from <c>RetailStaffLoginLog</c> table.
/// </summary>
/// <param name="_staffId">
/// ID of the RetailStaffLoginLog.staffId field.
/// </param>
/// <param name="_storeId">
/// ID of the RetailStaffLoginLog.storeId field.
/// </param>
/// <param name="_terminalId">
/// ID of the RetailStaffLoginLog.terminalId field.
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
/// <exception cref="Exception::Error">
/// Throws error if fails to delete.
/// </exception>
public static container staffLogout(RetailStaffId _staffId, RetailStoreId _storeId, RetailTerminalId _terminalId)
{
    container result = [true,""];

    result = RetailTransactionService::StaffLogOff(_staffId, _storeId, _terminalId);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>updateAddress</Name>
				<Source><![CDATA[
    /// <summary>
/// Method is used for updating the record in <c>LogisticsPostalAddress</c> table.
/// </summary>
/// <param name="_paramList">
/// <c>Container</c>
/// </param>
/// <returns>
/// The status as a container.
/// </returns>
public static container updateAddress(container _paramList)
{
    container ret = [false, "", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    container addressUpdate;

    RefRecId                    addressRecId            = conpeek(_paramList,1);
    CustName                    custName                = conpeek(_paramList,2);
    AddressStreet               street                  = conpeek(_paramList,3);
    AddressCity                 city                    = conpeek(_paramList,4);
    AddressCountyId             county                  = conpeek(_paramList,5);
    AddressStateId              state                   = conpeek(_paramList,6);
    AddressZipCodeId            zip                     = conpeek(_paramList,7);
    AddressCountryRegionId      country                 = conpeek(_paramList,8);
    Phone                       phone                   = conpeek(_paramList,9);
    EMail                       eMail                   = conpeek(_paramList,11);
    URL                         uRL                     = conpeek(_paramList,12);
    TaxGroup                    taxGroup                = conpeek(_paramList,13);
    LogisticsLocationRoleType   role                    = conPeek(_paramList,14);
    int64                       phoneRecId              = conPeek(_paramList,15);
    int64                       emailRecId              = conPeek(_paramList,16);
    int64                       urlRecId                = conPeek(_paramList,17);

    ret = RetailTransactionService::UpdateAddress(addressRecId, custName, street, city, county, state, zip,
                                                            country, phone, eMail, uRL, taxGroup, role, phoneRecId, emailRecId, urlRecId);

    // LogisticsLocation recid and DirPartyLocation can only be inserted once in POS
    // Here we only return the RecIDs for phone.
    // URL and email are not returned.
    // Next run of A-1010 should be able to carry all missing values down to all related stores.

    // although this is update, to avoid the situation
    //   create address -> update address (before A-job has chance to run), we still only return phone
    addressUpdate = [
        conPeek(ret, 1),
        conPeek(ret, 2),
        conPeek(ret, 3),
        conPeek(ret, 4),
        conPeek(ret, 5),
        conPeek(ret, 6),
        conPeek(ret, 7),
        conPeek(ret, 8),
        conPeek(ret, 9),
        conPeek(ret, 10),
        conPeek(ret, 11),
        conPeek(ret, 12),
        conPeek(ret, 13),
        conPeek(ret, 14),
        conPeek(ret, 15),
        0,                 // email
        0,
        0,
        0,
        0,
        conPeek(ret, 21),  // phone
        conPeek(ret, 22),
        conPeek(ret, 23),
        conPeek(ret, 24),
        conPeek(ret, 25),
        0,                 // url
        0,
        0,
        0,
        0,
        0,                 // cellphone
        0,
        0,
        0,
        0
    ];

    return addressUpdate;
}

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Updates the customer order.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the details of order to be updated.
/// </param>
/// <returns>
/// A container having the status and sales id of the order updated.
/// </returns>
public static container updateCustomerOrder(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::UpdateCustomerOrder(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerQuote</Name>
				<Source><![CDATA[
    /// <summary>
/// Updates a sales quotation from the given details.
/// </summary>
/// <param name="_custOrderXmlStr">
/// XML string having the header, line details and charges associated with the quote to be updated.
/// </param>
/// <returns>
/// A container having the status and quotation id of the quotation updated.
/// </returns>
public static container updateCustomerQuote(str _custOrderXmlStr)
{
    container result = [false, "", ""];

    result = RetailTransactionService::UpdateCustomerQuote(_custOrderXmlStr);

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryJournal</Name>
				<Source><![CDATA[
    /// <summary>
/// Update an inventory journal document in AX
/// </summary>
/// <param name="_ijXmlStr">
/// An XML string with inventory journal line information
/// </param>
/// <returns>
/// A container object with True or False as the first element
/// </returns>
/// <remarks>
/// This method is used to update the counting journal on AX
/// </remarks>
public static container updateInventoryJournal(str _ijXmlStr)
{
    container resultContainer = [false, "", ""];

    resultContainer = RetailTransactionService::UpdateInventoryJournal(_ijXmlStr);

    return resultContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>updatePickingList</Name>
				<Source><![CDATA[
    /// <summary>
/// Updates the picking list in Ax.
/// </summary>
/// <param name="_xmlPickListStr">
/// An XML string having the details of picking list.
/// </param>
/// <returns>
/// A container having the status of updation.
/// </returns>
public static container updatePickingList(str _xmlPickListStr)
{
    container resultContainer = [false, "", ""];

    resultContainer = RetailTransactionService::UpdatePickingList(_xmlPickListStr);

    return resultContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchaseOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Update a purchase order
/// </summary>
/// <param name="_poXmlStr">
/// An XML string for Purchase Order details
/// </param>
/// <returns>
/// A container object to indicate update success or failure
/// </returns>
/// <remarks>
/// This method is used to update a purchase order's receive now quantity
/// </remarks>
public static container updatePurchaseOrder(str _poXmlStr)
{
    container resultContainer = [false, "", ""];

    resultContainer = RetailTransactionService::UpdatePurchaseOrder(_poXmlStr);

    return resultContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>updateTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
/// Update a transfer order
/// </summary>
/// <param name="_toXmlStr">
/// An Xml string containing details of a transfer order
/// </param>
/// <returns>
/// A container object to indicate success or failure
/// </returns>
/// <remarks>
/// This allows updates for transfer order's ship now and receive now quantities
/// </remarks>
public static container updateTransferOrder(str _toXmlStr)
{
    container resultContainer = [false, "", ""];

    resultContainer = RetailTransactionService::UpdateTransferOrder(_toXmlStr);

    return resultContainer;
}

]]></Source>
			</Method>
			<Method>
				<Name>UpsertLogisticsElectronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
/// Inserts or updates the electronic address based on the locator.
/// </summary>
/// <param name="_logisticsElectronicAddressRecId">
/// RecId of LogisticsElectronic address.
/// </param>
/// <param name="_value">
/// Value of the loator.
/// </param>
/// <param name="_parentLocationId">
/// Value of the Parent location Id.
/// </param>
/// <param name="_type">
/// Type of the electronic address.
/// </param>
/// <returns>
/// A container object with Location Id and electronic address id.
/// </returns>
public static container UpsertLogisticsElectronicAddress(int64 _logisticsElectronicAddressRecId, str _value, int64 _parentLocationId, LogisticsElectronicAddressMethodType _type)
{
    container result = [0, 0];

    result = RetailTransactionService::UpsertLogisticsElectronicAddress(_logisticsElectronicAddressRecId, _value, _parentLocationId, _type);

    return result;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>