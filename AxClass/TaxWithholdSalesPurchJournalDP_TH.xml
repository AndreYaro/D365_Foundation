<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSalesPurchJournalDP_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdSalesPurchJournalDP</c> class is the report data provider class for the
///    <c>TaxWithholdSalesPurchJournal</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(TaxWithholdSalesPurchJournalContract_TH))]
public class TaxWithholdSalesPurchJournalDP_TH extends SRSReportDataProviderBase
{
    TaxWithholdSalesPurchJournalTmpHeader_TH   taxWithholdSalesPurchJournalTmpHeader;
    TaxWithholdSalesPurchJournalTmpLine_TH     taxWithholdSalesPurchJournalTmpLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for <c>TaxWithholdSalesPurchJournal</c> report based on parameters.
    /// </summary>
    /// <returns>
    /// The query for <c>TaxWithholdSalesPurchJournal</c> report based on parameters.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildQuery()
    {
        Query                                       query = new Query();;
        QueryBuildDataSource                        qbds;
        TaxWithholdSalesPurchJournalContract_TH     contract        = this.getContract();
        TaxWithholdCommonContract_TH                commonContract  = contract.parmCommonContract();
        TaxWithholdCode                             taxWithholdCode = commonContract.parmTaxWithholdCode();
        Voucher                                     voucher         = commonContract.parmVoucher();
        ModuleCustVend                              moduleType      = contract.parmModuleType();
        TaxBranchCode                               taxBranchCode   = commonContract.parmTaxBranchCode();
        DirPartyBaseType                            accountType     = contract.parmAccountType();
        DetailSummary                               detailSummary   = contract.parmDetailSummary();

        qbds = query.addDataSource(tableNum(TaxWithholdTrans));
        qbds.addSortField(fieldNum(TaxWithholdTrans, TransDate), SortOrder::Ascending);
        qbds.addRange(fieldNum(TaxWithholdTrans, TransDate)).value(SysQuery::range(commonContract.parmFromDate(), commonContract.parmToDate()));
        qbds.addRange(fieldNum(TaxWithholdTrans, Posted)).value(SysQuery::value(NoYes::Yes));
        if (taxWithholdCode)
        {
            qbds.addRange(fieldNum(TaxWithholdTrans, TaxWithholdCode)).value(SysQuery::value(taxWithholdCode));
        }
        if (voucher)
        {
            qbds.addRange(fieldNum(TaxWithholdTrans, Voucher)).value(SysQuery::value(voucher));
        }

        qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
        qbds = qbds.addDataSource(tableNum(TaxWithholdTransExtensionTH));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTrans, RecId), fieldNum(TaxWithholdTransExtensionTH, TaxWithholdTrans));
        qbds.addRange(fieldNum(TaxWithholdTransExtensionTH, HideInReports)).value(SysQuery::value(NoYes::No));

        qbds = query.dataSourceTable(tableNum(TaxWithholdTransExtensionTH));
        qbds = qbds.addDataSource(tableNum(LedgerJournalTrans));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.relations(false);
        qbds.addLink(fieldNum(TaxWithholdTransExtensionTH, LedgerJournalTrans), fieldNum(LedgerJournalTrans, RecId));

        qbds = query.dataSourceTable(tableNum(LedgerJournalTrans));
        qbds = qbds.addDataSource(tableNum(LedgerJournalTransExtensionTH));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.relations(false);
        qbds.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(LedgerJournalTransExtensionTH, LedgerJournalTrans));

        if (moduleType == ModuleCustVend::Vend)
        {
            if (taxBranchCode)
            {
                qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
                qbds = qbds.addDataSource(tableNum(VendTrans));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.fetchMode(QueryFetchMode::One2One);
                qbds.relations(false);
                qbds.addLink(fieldNum(TaxWithholdTrans, VendTransInvoiceId), fieldNum(VendTrans, RecId));

                qbds = query.dataSourceTable(tableNum(VendTrans));
                qbds = qbds.addDataSource(tableNum(VendInvoiceJour));
                qbds.joinMode(JoinMode::InnerJoin);
                qbds.relations(true);

                qbds = query.dataSourceTable(tableNum(VendInvoiceJour));
                qbds = qbds.addDataSource(tableNum(DimensionAttributeValueSetTaxBranchView));
                qbds.joinMode(JoinMode::InnerJoin);
                qbds.relations(false);
                qbds.addLink(fieldNum(VendInvoiceJour, DefaultDimension), fieldNum(DimensionAttributeValueSetTaxBranchView, DimensionAttributeValueSet));
                qbds.addRange(fieldNum(DimensionAttributeValueSetTaxBranchView, DisplayValue)).value(SysQuery::value(taxBranchCode));
            }

            qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
            qbds = qbds.addDataSource(tableNum(VendTable));
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.relations(false);
            qbds.addLink(fieldNum(TaxWithholdTrans, VendAccount), fieldNum(VendTable, AccountNum));

            qbds = query.dataSourceTable(tableNum(VendTable));
            qbds = qbds.addDataSource(tableNum(DirPartyTable));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.relations(false);
            qbds.addLink(fieldNum(VendTable, Party), fieldNum(DirPartyTable, RecId));
        }
        else if (moduleType == ModuleCustVend::Cust)
        {
            if (taxBranchCode)
            {
                qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
                qbds = qbds.addDataSource(tableNum(CustTrans));
                qbds.joinMode(JoinMode::ExistsJoin);
                qbds.fetchMode(QueryFetchMode::One2One);
                qbds.relations(false);
                qbds.addLink(fieldNum(TaxWithholdTrans, CustTransInvoiceId), fieldNum(CustTrans, RecId));

                qbds = query.dataSourceTable(tableNum(CustTrans));
                qbds = qbds.addDataSource(tableNum(CustInvoiceJour));
                qbds.joinMode(JoinMode::InnerJoin);
                qbds.relations(true);

                qbds = query.dataSourceTable(tableNum(CustInvoiceJour));
                qbds = qbds.addDataSource(tableNum(DimensionAttributeValueSetTaxBranchView));
                qbds.joinMode(JoinMode::InnerJoin);
                qbds.relations(false);
                qbds.addLink(fieldNum(CustInvoiceJour, DefaultDimension), fieldNum(DimensionAttributeValueSetTaxBranchView, DimensionAttributeValueSet));
                qbds.addRange(fieldNum(DimensionAttributeValueSetTaxBranchView, DisplayValue)).value(SysQuery::value(taxBranchCode));
            }

            qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
            qbds = qbds.addDataSource(tableNum(CustTable));
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.relations(false);
            qbds.addLink(fieldNum(TaxWithholdTrans, CustAccount), fieldNum(CustTable, AccountNum));

            qbds = query.dataSourceTable(tableNum(CustTable));
            qbds = qbds.addDataSource(tableNum(DirPartyTable));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.relations(false);
            qbds.addLink(fieldNum(CustTable, Party), fieldNum(DirPartyTable, RecId));
        }
        else
        {
            // @SYS320346: Invalid %1 value: %2
            // @SYS9941 : Module
            throw error(strFmt('@SYS320346', '@SYS9941', moduleType));
        }

        qbds = query.dataSourceTable(tableNum(DirPartyTable));
        // For parameter "AccountType"
        if (accountType == DirPartyBaseType::Person)
        {
            qbds.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::value(tableNum(DirPerson)));
        }
        else if (accountType == DirPartyBaseType::Organization)
        {
            qbds.addRange(fieldNum(DirPartyTable, InstanceRelationType)).value(SysQuery::valueNot(tableNum(DirPerson)));
        }

        // For parameter "DetailSummary"
        if (detailSummary == DetailSummary::Summary)
        {
            qbds = query.dataSourceTable(tableNum(TaxWithholdTrans));
            qbds.addSortField(fieldNum(TaxWithholdTrans, TaxWithholdCode));

            qbds = query.dataSourceTable(tableNum(LedgerJournalTransExtensionTH));
            qbds.addSortField(fieldNum(LedgerJournalTransExtensionTH, CertificateNumber));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHTSalesPurchJournalTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>TaxWithholdSalesPurchJournalTmpHeader</c> table.
    /// </summary>
    private void createWHTSalesPurchJournalTmpHeader()
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        taxWithholdSalesPurchJournalTmpHeader.clear();
        taxWithholdSalesPurchJournalTmpHeader.TaxBranchName     = TaxBranch::getReportTaxBranchStr(this.getContract().parmCommonContract().parmTaxBranchCode());
        taxWithholdSalesPurchJournalTmpHeader.CompanyTaxRegNum  = companyInfo.CoRegNum;
        taxWithholdSalesPurchJournalTmpHeader.CompanyName       = companyInfo.Name;
        taxWithholdSalesPurchJournalTmpHeader.CompanyAddress    = companyInfo.postalAddress().Address;
        taxWithholdSalesPurchJournalTmpHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHTSalesPurchJournalTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>TaxWithholdSalesPurchJournalTmpLine</c> table.
    /// </summary>
    private void createWHTSalesPurchJournalTmpLine()
    {
        QueryRun                                queryRun;
        TaxWithholdTrans                        taxWithholdTrans;
        TaxWithholdTransExtensionTH             taxWithholdTransExtensionTH;
        LedgerJournalTrans                      ledgerJournalTrans;
        LedgerJournalTransExtensionTH           ledgerJournalTransExtensionTH;
        CustVendTable                           custVendTable;

        TaxWithholdCode                         curGroupTaxWithholdCode;
        TaxWithholdCertificateNumber            curGroupTaxWithholdCertificateNumber;
        boolean                                 isNewGroup  = true;
        boolean                                 isFirstLoop = true;

        TaxWithholdSalesPurchJournalContract_TH contract = this.getContract();
        int                                     lineNo   = 1;

        TaxWithholdAmount currentTaxWithholdAmount;
        TaxWithholdBase currentTaxWithholdBaseAmount;

        queryRun = new QueryRun(this.buildQuery());

        while (queryRun.next())
        {
            taxWithholdTrans                = queryRun.get(tableNum(TaxWithholdTrans));
            taxWithholdTransExtensionTH     = queryRun.get(tableNum(TaxWithholdTransExtensionTH));
            ledgerJournalTrans              = queryRun.get(tableNum(LedgerJournalTrans));
            ledgerJournalTransExtensionTH   = queryRun.get(tableNum(LedgerJournalTransExtensionTH));
            custVendTable                   = queryRun.get(CustVendTable::getEmptyTableBuffer(contract.parmModuleType()).TableId);

            // For "Detail", each line is a new group. Each line will be inserted into temp table.
            // For "Summary", group is bigger, insert one line for each group.
            if (contract.parmDetailSummary() == DetailSummary::Summary)
            {
                if (curGroupTaxWithholdCode                 != taxWithholdTrans.TaxWithholdCode
                    || curGroupTaxWithholdCertificateNumber != ledgerJournalTransExtensionTH.CertificateNumber)
                {
                    curGroupTaxWithholdCode              = taxWithholdTrans.TaxWithholdCode;
                    curGroupTaxWithholdCertificateNumber = ledgerJournalTransExtensionTH.CertificateNumber;
                    isNewGroup = true;
                }
                else
                {
                    isNewGroup = false;
                }
            }

            if ((taxWithholdTrans.InvoiceAmount > 0 && taxWithholdTrans.CustAccount)
                || (taxWithholdTrans.InvoiceAmount < 0 && taxWithholdTrans.VendAccount))
            {
                currentTaxWithholdAmount = -(abs(taxWithholdTrans.TaxWithholdAmount));
                currentTaxWithholdBaseAmount = (taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt == 0)
                    ? -(abs(taxWithholdTrans.WithholdBaseAmount))
                    : -(abs(taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt));
            }
            else
            {
                currentTaxWithholdAmount = abs(taxWithholdTrans.TaxWithholdAmount);
                currentTaxWithholdBaseAmount = (taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt == 0)
                    ? abs(taxWithholdTrans.WithholdBaseAmount)
                    : abs(taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt);
            }

            // Insert the last group before saving new group info.
            if (isNewGroup && !isFirstLoop)
            {
                taxWithholdSalesPurchJournalTmpLine.insert();
            }

            if (isNewGroup)
            {
                taxWithholdSalesPurchJournalTmpLine.clear();

                taxWithholdSalesPurchJournalTmpLine.LineNo = lineNo;
                lineNo++;

                taxWithholdSalesPurchJournalTmpLine.CustVendName    = custVendTable.CustVendTable::name();
                taxWithholdSalesPurchJournalTmpLine.CustVendVATNum  = custVendTable.VATNum;

                taxWithholdSalesPurchJournalTmpLine.TaxWithholdAmount   = currentTaxWithholdAmount;
                taxWithholdSalesPurchJournalTmpLine.TaxWithholdName     = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode).TaxWithholdName;
                taxWithholdSalesPurchJournalTmpLine.TaxWithholdValue    = TaxWithholdData::find(
                    taxWithholdTrans.TaxWithholdCode,
                    taxWithholdTrans.TransDate,
                    taxWithholdTrans.WithholdBaseAmount).TaxWithholdValue;
                taxWithholdSalesPurchJournalTmpLine.TransDate               = taxWithholdTrans.TransDate;
                taxWithholdSalesPurchJournalTmpLine.Voucher                 = taxWithholdTrans.Voucher;
                taxWithholdSalesPurchJournalTmpLine.TaxWithholdBaseAmount   = currentTaxWithholdBaseAmount;

                taxWithholdSalesPurchJournalTmpLine.TaxWithholdCertificateNumber    = ledgerJournalTransExtensionTH.CertificateNumber;
                taxWithholdSalesPurchJournalTmpLine.TaxWithholdCertificateDate      = ledgerJournalTransExtensionTH.CertificateDate;
            }
            else
            {
                taxWithholdSalesPurchJournalTmpLine.TaxWithholdAmount       += currentTaxWithholdAmount;
                taxWithholdSalesPurchJournalTmpLine.TaxWithholdBaseAmount   += currentTaxWithholdBaseAmount;

                // For "Summary", the un-summaried fields need to be empty if each field has not than one value in one group.
                if (taxWithholdSalesPurchJournalTmpLine.CustVendName != custVendTable.CustVendTable::name())
                {
                    taxWithholdSalesPurchJournalTmpLine.CustVendName = '';
                }
                if (taxWithholdSalesPurchJournalTmpLine.CustVendVATNum != custVendTable.VATNum)
                {
                    taxWithholdSalesPurchJournalTmpLine.CustVendVATNum = '';
                }

                if (taxWithholdSalesPurchJournalTmpLine.TransDate != taxWithholdTrans.TransDate)
                {
                    taxWithholdSalesPurchJournalTmpLine.TransDate = dateNull();
                }
                if (taxWithholdSalesPurchJournalTmpLine.Voucher != taxWithholdTrans.Voucher)
                {
                    taxWithholdSalesPurchJournalTmpLine.Voucher = '';
                }
                if (taxWithholdSalesPurchJournalTmpLine.TaxWithholdValue != TaxWithholdData::find(taxWithholdTrans.TaxWithholdCode, taxWithholdTrans.TransDate, taxWithholdTrans.WithholdBaseAmount).TaxWithholdValue)
                {
                    taxWithholdSalesPurchJournalTmpLine.TaxWithholdValue = 0;
                }
            }

            if (isFirstLoop)
            {
                isFirstLoop = false;
            }
        }

        if (!isFirstLoop)
        {
            taxWithholdSalesPurchJournalTmpLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contract instance with type <c>TaxWithholdSalesPurchJournalContract</c>.
    /// </summary>
    /// <returns>
    /// The contract instance with type <c>TaxWithholdSalesPurchJournalContract</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxWithholdSalesPurchJournalContract_TH getContract()
    {
        TaxWithholdSalesPurchJournalContract_TH  contract = this.parmDataContract() as TaxWithholdSalesPurchJournalContract_TH;

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdSalesPurchJournalTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxWithholdSalesPurchJournalTmpHeader</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxWithholdSalesPurchJournalTmpHeader</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdSalesPurchJournalTmpHeader_TH)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdSalesPurchJournalTmpHeader_TH getTaxWithholdSalesPurchJournalTmpHeader()
    {
        return taxWithholdSalesPurchJournalTmpHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdSalesPurchJournalTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxWithholdSalesPurchJournalTmpLine</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxWithholdSalesPurchJournalTmpLine</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdSalesPurchJournalTmpLine_TH)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdSalesPurchJournalTmpLine_TH getTaxWithholdSalesPurchJournalTmpLine()
    {
        return taxWithholdSalesPurchJournalTmpLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        this.createWHTSalesPurchJournalTmpHeader();
        this.createWHTSalesPurchJournalTmpLine();

        TaxWithholdSalesPurchJournalContract_TH contract = this.getContract();
        if (contract.parmDetailSummary() == DetailSummary::Summary && !contract.parmIncludeZeroLines())
        {
            this.deleteZeroValuesLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroValuesLines</Name>
				<Source><![CDATA[
    private void deleteZeroValuesLines()
    {
        delete_from taxWithholdSalesPurchJournalTmpLine
            where taxWithholdSalesPurchJournalTmpLine.TaxWithholdAmount == 0
                && taxWithholdSalesPurchJournalTmpLine.TaxWithholdBaseAmount == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>