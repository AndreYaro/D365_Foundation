<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJourTransferCmdExtTurnover_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Extension for <c>SubledgerJournalTransferCommand</c> class for filling turnover tables
/// </summary>
[SourceDocumentExtensionAttribute()]
public class SubledgerJourTransferCmdExtTurnover_RU extends SubledgerJournalTransferCommandExtension
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the command event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the command event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        return this.usePrecalcData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertedGenJourlAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Event handler for insertedGeneralJournalAccountEntry.
    /// </summary>
    /// <param name="_transferID">
    ///   Tranfer ID
    /// </param>
    /// <param name="_doc">
    ///   SourceDocument class instance.
    /// </param>
    /// <param name="_doSummarization">
    ///    Summarize between journals or no.
    /// </param>
    void insertedGenJourlAccEntryEventHandler(RefRecId _transferID, SourceDocument _doc, boolean _doSummarization)
    {
        GeneralJournalAccountEntry  accountEntry;
        GeneralJournalEntry         entry;
        Ledger                      ledger;
        CompanyInfo                 company;
        LedgerParameters            ledgerParameters;
        while select crossCompany accountEntry join RecId from entry
            where entry.TransferId  == _transferID                       &&
                  entry.RecId       == accountEntry.GeneralJournalEntry
            join TableId from ledger
                where ledger.RecId == entry.Ledger
            join TableId from company
                where company.RecId == ledger.PrimaryForLegalEntity
            join TableId from ledgerParameters
                where ledgerParameters.dataAreaId == company.DataArea &&
                      ledgerParameters.UsePrecalcData_RU
        {
            RLedgerTurnoverType::updatePrecalcData(accountEntry, RLedgerTurnoverSheetType::LedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Subscribes event handler
    /// </summary>
    protected void subscribe()
    {
        super();
        if (this.canSubscribe())
        {
            command.insertedGeneralJournalAccountEntry += eventhandler(this.insertedGenJourlAccEntryEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePrecalcData</Name>
				<Source><![CDATA[
    private boolean usePrecalcData()
    {
        return (select firstOnly crossCompany UsePrecalcData_RU from
            LedgerParameters where LedgerParameters.UsePrecalcData_RU).UsePrecalcData_RU;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>