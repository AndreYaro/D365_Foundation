<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransPreviewReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerTransPreviewReport_RU extends RunBase
{
    TmpLedgerTransPreview_RU    ledgerTransPreview;
    boolean                     showJournal,
                                showTrans;
    DialogField                 showJournalField,
                                showTransField;
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        showJournal,
        showTrans
    #endmacro
    QueryRun                    queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS22577");
        showJournalField = dialog.addFieldValue(enumstr(NoYes),showJournal,"@SYS23470","@SYS28858");
        showTransField   = dialog.addFieldValue(enumstr(NoYes),showTrans, "@GLS104590","@GLS104596");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            showJournal = showJournalField.value();
            showTrans   = showTransField.value();
            ret = showJournal || showTrans;
            if (! ret)
            {
                info("@GLS104597");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query.
    /// </summary>
    /// <returns>Prepared <c>Query</c>.</returns>
    public Query initQuery()
    {
        Query query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        query = new Query();

        queryBuildDataSource = query.addDataSource(tablenum(TmpLedgerTransPreview_RU));
        queryBuildDataSource.addOrderByField(fieldnum(TmpLedgerTransPreview_RU, TransDate));
        queryBuildDataSource.addOrderByField(fieldnum(TmpLedgerTransPreview_RU, Voucher));

        queryBuildRange = findOrCreateRange_W(queryBuildDataSource, fieldnum(TmpLedgerTransPreview_RU, Voucher));
        queryBuildRange = findOrCreateRange_W(queryBuildDataSource, fieldnum(TmpLedgerTransPreview_RU, IsCredit));

        if (LedgerParameters::find().Correspondence_RU)
        {
            queryBuildRange.value(queryValue(NoYes::No));
        }
        else
        {
            queryBuildRange.value(SysQuery::valueUnlimited());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes query run.
    /// </summary>
    public void initQueryRun()
    {
        if (! queryRun)
        {
            queryRun = new QueryRun(this.initQuery());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransPreview</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets ledgerTransPreview.
    /// </summary>
    /// <param name="_ledgerTransPreview">
    /// The new value of the ledgerTransPreview; optional.
    /// </param>
    /// <returns>
    /// The current value of ledgerTransPreview.
    /// </returns>
    public TmpLedgerTransPreview_RU ledgerTransPreview(TmpLedgerTransPreview_RU _ledgerTransPreview = ledgerTransPreview)
    {
        ledgerTransPreview = _ledgerTransPreview;

        return ledgerTransPreview;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>showJournal</c> state
    /// </summary>
    /// <returns>The current value of showJournal.</returns>
    public boolean showJournal()
    {
        return showJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>showTrans</c> state
    /// </summary>
    /// <returns>The current value of showTrans.</returns>
    public boolean showTrans()
    {
        return showTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer          version        = conpeek(_packedClass, 1);
        container        base;
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = _packedClass;
                super(base);
                break;

            default:
                return false;
        }
        this.initQueryRun();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS28358";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransPreviewReport_RU  ledgerTransPreviewReport_RU;
        ;
        if (! _args || _args.caller().name() != formstr(LedgerTransPreview_RU))
        {
            throw error("@GLS105755");
        }
        ledgerTransPreviewReport_RU = new LedgerTransPreviewReport_RU();
        if (ledgerTransPreviewReport_RU.prompt())
        {
            ledgerTransPreviewReport_RU.initQuery();
            ledgerTransPreviewReport_RU.ledgerTransPreview(_args.caller().ledgerTransPreview());
            ledgerTransPreviewReport_RU.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>