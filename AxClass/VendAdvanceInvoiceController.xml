<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendAdvanceInvoiceController</c> class is the controller class for the <c>VendAdvanceInvoice</c>
///    report.
/// </summary>
public class VendAdvanceInvoiceController extends CustVendAdvanceInvoiceController implements BatchRetryable
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDefaultRanges</Name>
				<Source><![CDATA[
    protected void addDefaultRanges(Query _query)
    {
        QueryBuildDataSource qbds;

        super(_query);

        qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CzVendAdvanceInvoiceTable));
        SysQuery::findOrCreateRange(qbds, fieldNum(CzVendAdvanceInvoiceTable, InvoiceAccount));
        SysQuery::findOrCreateRange(qbds, fieldNum(CzVendAdvanceInvoiceTable, InvoiceDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceRecId</Name>
				<Source><![CDATA[
    protected FieldId getAdvanceInvoiceRecId()
    {
        return fieldNum(CzVendAdvanceInvoiceTable, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty table buffer for a specific advance invoice header table.
    /// </summary>
    /// <returns>
    /// The table buffer for a specific advance invoice header table.
    /// </returns>
    protected CzAdvanceInvoiceTable getAdvanceInvoiceTable()
    {
        CzVendAdvanceInvoiceTable vendAdvanceInvoiceTable;

        return vendAdvanceInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtDocumentType</c> value of the current report.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtDocumentType</c> value of the current report.
    /// </returns>
    protected PrintMgmtDocumentType getPrintMgmtDocType()
    {
        return PrintMgmtDocumentType::PurchaseAdvanceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        const str LocalizationFeatureReference = 'EEU-00045';
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
        SrsReportRunController controller = new VendAdvanceInvoiceController();

        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseAdvanceInvoice).getDefaultReportFormat());
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>