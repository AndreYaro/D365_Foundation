<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationMakeResult_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostAllocationMakeResult_RU
{
    Object                      callerForm;

    CostAllocationForm_RU       costAllocationForm;

    VendInvoiceTrans            vendInvoiceTrans;

    TmpCostAllocationBase_RU    costAllocationBase;
    TmpCostAllocationResult_RU  costAllocationResult;

    Map                         mapAmount4Alloc;

    RecId                       costAllocationBaseRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    protected void initFromCaller(Object _callerForm)
    {
        if (!_callerForm)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        callerForm          = _callerForm;
        costAllocationForm  = callerForm.costAllocationForm();

        if (!costAllocationForm)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        mapAmount4Alloc = costAllocationForm.mapAmount4Alloc();

        if (!mapAmount4Alloc)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (costAllocationForm.fdsCostAllocationBase())
        {
            costAllocationBaseRecId = costAllocationForm.fdsCostAllocationBase().cursor().RecId;

            costAllocationBase.setTmpData(costAllocationForm.fdsCostAllocationBase().cursor());
        }
        else
        {
            costAllocationBase.setTmpData(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS25904");
        }

        try
        {
            ttsbegin;

            this.runMakeResult();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMakeResult</Name>
				<Source><![CDATA[
    protected void runMakeResult()
    {
        MapEnumerator   enumeratorAmount4Alloc = mapAmount4Alloc.getEnumerator();
        Amount          amount4Alloc;
        Amount          allocAmount;

        boolean         isCreated;

        Amount getDenominator()
        {
            switch (costAllocationForm.allocateAfter())
            {
                case CostMarkupAllocate_RU::NetAmount:  return costAllocationBase.LineAmountMST;
                case CostMarkupAllocate_RU::Qty:        return costAllocationBase.InvoiceQty;
                case CostMarkupAllocate_RU::Volume:     return costAllocationBase.Volume;
                case CostMarkupAllocate_RU::Weight:     return costAllocationBase.ItemGrossWeight;
            }

            return 0;
        }

        void createResultLine(Amount _weightNumber)
        {
            costAllocationResult.clear();
            costAllocationResult.AllocBaseRecId     = costAllocationBase.RecId;
            costAllocationResult.AllocSourceRecId   = vendInvoiceTrans.RecId;
            costAllocationResult.MarkupCode         = vendInvoiceTrans.MarkupCode_RU;
            costAllocationResult.Amount             = CurrencyExchangeHelper::amount(amount4Alloc * _weightNumber);
            costAllocationResult.Mark               = NoYes::Yes;

            if (vendInvoiceTrans.ProcurementCategory)
            {
                if (costAllocationBase.CustVend == CustVend_RU::Vend)
                {
                    costAllocationResult.EcoResCategory = vendInvoiceTrans.ProcurementCategory;
                }
                else
                if (costAllocationBase.CustVend == CustVend_RU::Cust)
                {
                    if (EcoResCategoryHierarchyRole::existRoleHierarchyPair(
                              EcoResCategoryNamedHierarchyRole::Sales,
                              EcoResCategory::find(vendInvoiceTrans.ProcurementCategory).CategoryHierarchy))
                    {
                        costAllocationResult.EcoResCategory = vendInvoiceTrans.ProcurementCategory;
                    }
                }
            }

            costAllocationResult.insert();

            costAllocationForm.editMarkRecord(NoYes::Yes,
                                              costAllocationBase,
                                              NoYes::Yes);

            allocAmount += costAllocationResult.Amount;
        }

        void setPennyDiff()
        {
            if (costAllocationResult && amount4Alloc != allocAmount)
            {
                costAllocationResult.Amount += CurrencyExchangeHelper::amount(amount4Alloc - allocAmount);
                costAllocationResult.update();
            }
        }

        while (enumeratorAmount4Alloc.moveNext())
        {
            amount4Alloc            = enumeratorAmount4Alloc.currentValue();
            vendInvoiceTrans = VendInvoiceTrans::findRecId(enumeratorAmount4Alloc.currentKey());

            RefRecId vendInvoiceJourRecId = vendInvoiceTrans.vendInvoiceJour().RecId;

            allocAmount             = 0;

            switch (costAllocationForm.parmAllocationType().selection())
            {
                case CostAllocationType_RU::Overhead:
                case CostAllocationType_RU::Indebtedness:

                    InventQty       sumInvoiceQty      = 0;
                    Amount          sumLineAmountMST   = 0;
                    Volume          sumVolume          = 0;
                    ItemGrossWeight sumItemGrossWeight = 0;

                    while select InvoiceQty, LineAmountMST, Volume, ItemGrossWeight from costAllocationBase
                    {
                        if (costAllocationForm.editMarkRecord(false, costAllocationBase, NoYes::No) == NoYes::Yes)
                        {
                            sumInvoiceQty       += costAllocationBase.InvoiceQty;
                            sumLineAmountMST    += costAllocationBase.LineAmountMST;
                            sumVolume           += costAllocationBase.Volume;
                            sumItemGrossWeight  += costAllocationBase.ItemGrossWeight;
                        }
                    }

                    costAllocationBase.LineAmountMST    = sumLineAmountMST;
                    costAllocationBase.InvoiceQty       = sumInvoiceQty;
                    costAllocationBase.Volume           = sumVolume;
                    costAllocationBase.ItemGrossWeight  = sumItemGrossWeight;

                    Amount denominator = getDenominator();

                    while select forupdate costAllocationBase
                    {
                        if (costAllocationForm.editMarkRecord(false, costAllocationBase, NoYes::No) == NoYes::Yes)
                        {
                            createResultLine(denominator ? getDenominator() / denominator : 0);

                            costAllocationBase.AllocSourceJourRecId = vendInvoiceJourRecId;
                            costAllocationBase.update();

                            if (!isCreated)
                            {
                                isCreated = getDenominator() != 0;
                            }
                        }
                    }

                    if (isCreated)
                    {
                        setPennyDiff();
                    }
                    break;

                case CostAllocationType_RU::Expenses:
                    while select forupdate costAllocationBase
                    {
                        if (costAllocationForm.editMarkRecord(false, costAllocationBase, NoYes::No) == NoYes::Yes)
                        {
                            createResultLine(0);

                            costAllocationBase.AllocSourceJourRecId = vendInvoiceJourRecId;
                            costAllocationBase.update();
                        }
                    }
                    break;
            }
        }

        this.setResultToForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResultToForm</Name>
				<Source><![CDATA[
    protected void setResultToForm()
    {
        callerForm.setCostAllocationResult(costAllocationResult);
        costAllocationForm.executeDS();

        if (costAllocationBaseRecId)
        {
            costAllocationForm.fdsCostAllocationBase().positionToRecordByValue(fieldNum(TmpCostAllocationBase_RU, RecId), int642str(costAllocationBaseRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        if (mapAmount4Alloc.empty())
        {
            ret = checkFailed("@GLS114533");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        if (!_args || !_args.caller() || !formHasMethod(_args.caller(), identifierstr(costAllocationForm)))
        {
            throw error("@SYS59121");
        }

        CostAllocationMakeResult_RU costAllocationMakeResult = CostAllocationMakeResult_RU::newFromCaller(_args.caller());
        costAllocationMakeResult.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCaller</Name>
				<Source><![CDATA[
    public static CostAllocationMakeResult_RU newFromCaller(Object _callerForm)
    {
        if (!_callerForm || !formHasMethod(_callerForm, identifierstr(costAllocationForm)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        CostAllocationMakeResult_RU costAllocationMakeResult = new CostAllocationMakeResult_RU();
        costAllocationMakeResult.initFromCaller(_callerForm);

        return costAllocationMakeResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>