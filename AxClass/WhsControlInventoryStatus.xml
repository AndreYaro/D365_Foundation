<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlInventoryStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlInventoryStatus</c> class is responsible for handling the InventoryStatus controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#InventoryStatus)]
public class WhsControlInventoryStatus extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        WHSInventStatusId statusId = this.retrieveDefaultInventStatusId();
        WHSWorkLine workLine = controlData.parmWorkLine();

        if (workLine.WorkType == WHSWorkType::Count)
        {
            if (controlData.processInventoryStatus(statusId))
            {
                return this.fail(controlData.parmErrorMessage());
            }
        }
        else
        {
            fieldValues.insert(#InventoryStatus, statusId);
            fieldValues.insert(#SelectedValue, statusId);

            if (this.shouldCheckInventoryStatusInPass())
            {
                if (pass.exists(#InventoryStatus)       &&
                        pass.lookup(#InventoryStatus) != '' &&
                        pass.lookup(#InventoryStatus) != statusId)
                {
                    controlData.parmFromInventStatusId(statusId);
                    Qty inventoryStatusQty = controlData.getQty();
                    if (inventoryStatusQty)
                    {
                        fieldValues.parmQty(inventoryStatusQty);
                    }
                    else
                    {
                        fieldValues.parmQty('');
                    }
                    pass.insert(#Initiation, 1);
                }
                else if ((!pass.exists(#InventoryStatus) || pass.lookup(#InventoryStatus) == '') && controlData.parmFromInventStatusId())
                {
                    fieldValues.insert(#InventoryStatus, controlData.parmFromInventStatusId());
                    fieldValues.insert(#SelectedValue, controlData.parmFromInventStatusId());
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        controlData.populateInventoryStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDefaultInventStatusId</Name>
				<Source><![CDATA[
    private WHSInventStatusId retrieveDefaultInventStatusId()
    {
        WHSInventStatusId defaultInventStatusId;

        ItemId itemId = pass.lookupStr(#ItemId);

        if (itemId
            && mode == WHSWorkExecuteMode::Movement)
        {
            InventDim inventDim = pass.createInventDimFromPass();
            inventDim.inventSerialId = fieldValues.parmSerialId();
            inventDim.InventStatusId = ''; // Clear the status from the pass' InventDim as it could have been defaulted before all the dimensions were known.

            var statusRetriever = WHSItemAndDimensionsOnHandInventoryStatusRetriever::newFromItemIdAndInventDim(itemId, inventDim);

            // If the status can't be found or there are multiple statuses for the given dimensions, the retriever will return an empty value.
            defaultInventStatusId = statusRetriever.retrieveInventoryStatusId();
        }

        // As it is not allowed to have multiple statuses on the same license plate if all other dimensions are the same,
        // the retriever would usually return a single status and this if block will not be entered.
        // However, in same cases (e.g. if there given dimensions are not enough to uniquely identify a status) the returned value would be empty,
        // so we need to fallback to getting the status from the license plate.
        if (!defaultInventStatusId)
        {
            defaultInventStatusId = this.parmData();
        }

        return defaultInventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValueSelected</Name>
				<Source><![CDATA[
    public boolean isValueSelected()
    {
        if (super())
        {
            // Don't process inventory status control until item exists; except for quarantine where status is "To" status not dependent on inventory
            if (mode == WHSWorkExecuteMode::WarehouseTransfer || mode == WHSWorkExecuteMode::AdjustmentOut)
            {
                return pass.isItemAndProductDimensionsPopulated();
            }
            else if (mode == WHSWorkExecuteMode::Quarantine || pass.parmItemId()
                    || (pass.exists(#RFAddLP)
                        && controlData.parmWorkLine().whsWorkTable().WorkTransType == WHSWorkTransType::CycleCount))
            {
                return true;
            }
        }
        else if (this.parmData() && !strContains(this.parmData(), #ListSeparator)
            && mode == WHSWorkExecuteMode::WarehouseTransfer)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCheckInventoryStatusInPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory status saved in the RF pass through should be checked.
    /// </summary>
    /// <returns>true if the contents of RF pass through should be checked; otherwise, false.</returns>
    protected boolean shouldCheckInventoryStatusInPass()
    {
        return mode != WHSWorkExecuteMode::Quarantine 
            && mode != WHSWorkExecuteMode::MovementByTemplate 
            && mode != WHSWorkExecuteMode::AdjustmentIn 
            && mode != WHSWorkExecuteMode::LicensePlateLoading;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventoryStatusForCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes inventory status for cycle count if Inventory status is not displayed.
    /// </summary>
    /// <param name = "_controlData">The <c>WhsrfControlData</c> object.</param>
    /// <returns>
    ///  true if there is error; otherwise, false.
    /// </returns>
    public static boolean processInventoryStatusForCycleCount(WhsrfControlData _controlData)
    {
        boolean hasError = false;

        WHSWorkTable workTable = _controlData.parmWorkLine().whsWorkTable();
        WHSRFPassthrough pass = _controlData.parmPass();
        WHSInventStatusId selectedInventoryStatus = pass.lookupStr(#SelectedValue);

        if (WhsControlInventoryStatus::mustProcessInventoryStatusForCycleCount(workTable, pass))
        {
            _controlData.parmInventoryStatusSelectedOnControl(selectedInventoryStatus);
            if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
            {
                hasError = _controlData.processInventoryStatus(selectedInventoryStatus);
            }
            else
            {
                _controlData.populateInventoryStatus();
            }
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessInventoryStatusForCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if inventory status must be processed for cycle count.
    /// </summary>
    /// <param name = "_workTable">Current work table.</param>
    /// <param name = "_pass">RF pass through data.</param>
    /// <returns>true if inventory status must be processed for cycle count; otherwise, false.</returns>
    protected static boolean mustProcessInventoryStatusForCycleCount(WHSWorkTable _workTable, WHSRFPassthrough _pass)
    {
        return _workTable.WorkTransType == WHSWorkTransType::CycleCount
            && !WHSRFMenuItemTable::find(_pass.lookup(#MenuItem)).RFDisplayStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the inventory status dimension.
    /// </summary>
    /// <param name = "_controlData">The <c>WhsrfControlData</c> object.</param>
    /// <param name = "_selectedInventoryStatus">The selected inventory status id.</param>
    /// <returns>true if there is error; otherwise, false.</returns>
    [Hookable(false)]
    internal static str processInventoryStatus(WhsrfControlData _controlData, WHSInventStatusId _selectedInventoryStatus)
    {
        WHSRFPassthrough pass = _controlData.parmPass();
        WHSWorkLine workLine = _controlData.parmWorkLine();
        WHSRFPassthrough fieldValues = _controlData.parmFieldValues();

        if (!_controlData.validateStatusInLocationCycleCount(_selectedInventoryStatus)
            && !WMSLocation::find(workLine.wmsLocationId, pass.lookup(#InventLocationId)).whsLocationIsLPControlled())
        {
            if (pass.exists(#RFAddLP))
            {
                fieldValues.insert(#SelectedValue, _selectedInventoryStatus);
                fieldValues.insert(#InventoryStatus, _selectedInventoryStatus);
            }
            else
            {
                pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                pass.insert(#RFAddLP, 1);
                return strFmt("@WAX1165", "@SYS80127");
            }
        }
        else
        {
            fieldValues.insert(#InventoryStatus, _selectedInventoryStatus);
            fieldValues.insert(#SelectedValue, _selectedInventoryStatus);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates status in location for cycle count.
    /// </summary>
    /// <param name = "_itemId">The item id of the item being processed.</param>
    /// <param name = "_workLine">The current workline.</param>
    /// <param name = "_statusId">The status to be validated.</param>
    /// <param name = "_serialId">Serial id associated; optional.</param>
    /// <param name = "_batchId">Batch id associated; optional.</param>
    /// <returns>true if the status is valid; otherwise, false.</returns>
    public static boolean validateStatusInLocationCycleCount(ItemId _itemId, 
                                                            WHSWorkLine _workLine, 
                                                            WHSInventStatusId _statusId,
                                                            InventSerialId _serialId = null, 
                                                            InventBatchId _batchId = null)
    {
        WHSWorkLineCycleCount   workLineCycleCount;
        InventDim               inventDim;
        boolean                 ret = true;

        if (_serialId)
        {
            select firstonly RecId from workLineCycleCount
                exists join inventDim
                where workLineCycleCount.InventDimId    == inventDim.InventDimId
                    && workLineCycleCount.WorkId         == _workLine.WorkId
                    && workLineCycleCount.LineNum        == _workLine.LineNum
                    && workLineCycleCount.ItemId         == _itemId
                    && inventDim.InventStatusId          == _statusId
                    && inventDim.InventSerialId          == _serialId;
        }
        else if (_batchId)
        {
            select firstonly RecId from workLineCycleCount
                exists join inventDim
                where workLineCycleCount.InventDimId    == inventDim.InventDimId
                    && workLineCycleCount.WorkId         == _workLine.WorkId
                    && workLineCycleCount.LineNum        == _workLine.LineNum
                    && workLineCycleCount.ItemId         == _itemId
                    && inventDim.InventBatchId           == _batchId
                    && inventDim.InventStatusId          == _statusId;
        }
        else
        {
            select firstonly RecId from workLineCycleCount
                exists join inventDim
                where workLineCycleCount.InventDimId    == inventDim.InventDimId
                    && workLineCycleCount.WorkId         == _workLine.WorkId
                    && workLineCycleCount.LineNum        == _workLine.LineNum
                    && workLineCycleCount.ItemId         == _itemId
                    && inventDim.InventStatusId          == _statusId;
        }

        if (workLineCycleCount.RecId == 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>