<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppStepFieldDataExtractorGenericDataInquiryList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppStepFieldDataExtractorGenericDataInquiryList</c> class extracts fields values on generic data inquiry details page.
/// </summary>
[WHSMobileAppStepId('GenericDataInquiryList')]
internal final class WHSMobileAppStepFieldDataExtractorGenericDataInquiryList extends WHSMobileAppStepFieldDataExtractor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map extract(Set _fields, container _formContainer)
    {
        const str ControlSeparator = '\n';
        const str KeyValueSeparator = '~:::~';

        Map fieldsData = new Map(Types::Integer, Types::String);

        container control = this.getSelectedControl(_formContainer);
        if (control)
        {
            Map copyFromFields = copyFromFlowFieldProvider.availableFieldNamesCopyFrom();
            if (copyFromFields)
            {
                str allCtrlValues = conPeek(control, #label);
                container ctrlValues = str2con(allCtrlValues, ControlSeparator);
                var ctrlCount = conLen(ctrlValues);

                for (int i = 1; i <= ctrlCount; i++)
                {
                    container ctrlLabelValuePair = str2con(conPeek(ctrlValues, i), KeyValueSeparator, false);
                    if (conLen(ctrlLabelValuePair) == 2)
                    {
                        str ctrlLabel = any2Str(conPeek(ctrlLabelValuePair, 1));
                        if (copyFromFields.exists(ctrlLabel))
                        {
                            if (_fields.in(copyFromFields.lookup(ctrlLabel)))
                            {
                                fieldsData.insert(copyFromFields.lookup(ctrlLabel), any2Str(conPeek(ctrlLabelValuePair, 2)));
                            }
                        }
                    }
                }
            }
        }

        return fieldsData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedControl</Name>
				<Source><![CDATA[
    private container getSelectedControl(container _formContainer)
    {
        var length = conLen(_formContainer);

        for (int i = #FieldControlStartLoc; i <= length; i++)
        {
            container controlCon = conPeek(_formContainer, i);

            var controlType = conPeek(controlCon, #controlType);
            if (controlType == #RFLabel && conLen(controlCon) > #instructionControl)
            {
                return controlCon;
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>