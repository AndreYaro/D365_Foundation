<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisDetailForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the form runner class for <c>BudgetAnalysisDimensionDetail</c> form.
/// </summary>
public class BudgetAnalysisDetailForm
{
    FormRun                     formRun;
    BudgetAnalysisRequest       request;
    FormControl                 ctrlTransactionNumber;
    FormControl                 ctrlReferenceDocument;
    BudgetAnalysisDataProcessor processor;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentNumberClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoked when the document number link is selected.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionDetailTemp">
    /// The reference of <c>BudgetAnalysisDimensionDetailTmp</c> table.
    /// </param>
    public void documentNumberClicked(
        BudgetAnalysisDimensionDetailTmp _budgetAnalysisDimensionDetailTemp)
    {
        Common commonRecord;
    
        switch (processor.getTransactionDataSource())
        {
            case BudgetAnalysisTransactionDataSource::BudgetSource:
                commonRecord = this.getOrigDocumentRecordForBudgetSourceData(_budgetAnalysisDimensionDetailTemp);
                break;
    
            case BudgetAnalysisTransactionDataSource::GeneralJournal:
                commonRecord = this.getOrigDocumentRecordForGeneralJournal(_budgetAnalysisDimensionDetailTemp.TransactionRecId);
                break;
    
            case BudgetAnalysisTransactionDataSource::BudgetTransaction:
                commonRecord = this.getOrigDocumentRecordForBudgetTrans(_budgetAnalysisDimensionDetailTemp.TransactionRecId);
                break;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN))
            && commonRecord is BudgetReservationHeader_PSN)
        {
            BudgetAnalysisInquiryHelper_PSN::jumpRefBudgetReservation(commonRecord);
        }
        else
        {
            BudgetAnalysisInquiryHelper_PSN::jumpRefLookupRecord(commonRecord, formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalByDocumentNumber</Name>
				<Source><![CDATA[
    private GeneralJournalEntry getGeneralJournalByDocumentNumber(DocumentNum _documentNumber)
    {
        GeneralJournalEntry generalJournalEntry;

        select generalJournalEntry
            where generalJournalEntry.DocumentNumber == _documentNumber;

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDocumentRecordForBudgetSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document record for the given budget source record Id and document number.
    /// </summary>
    /// <param name="_budgetSourceRecId">
    /// The record Id of <c>BudgetSource</c> table to be used to identify the record.
    /// </param>
    /// <param name="_documentNumber">
    /// The document number to be used to identify the record.
    /// </param>
    /// <returns>
    /// The record of the original document.
    /// </returns>
    protected Common getOrigDocumentRecordForBudgetSource(
        BudgetSourceRecId _budgetSourceRecId,
        DocumentNum       _documentNumber)
    {
        BudgetSource            budgetSource;
        Common                  commonRecord;
    
        budgetSource = BudgetSource::find(_budgetSourceRecId);
    
        if (budgetSource)
        {
            switch (budgetSource.BudgetControlSourceIntegrator)
            {
                case BudgetControlSourceIntegrator::BudgetTransaction:
                    commonRecord = BudgetTransactionHeader::findByTransactionNumber(_documentNumber, Ledger::current());
                break;
    
                case BudgetControlSourceIntegrator::PurchaseOrder:
                    commonRecord = PurchTable::find(_documentNumber);
                break;
    
                case BudgetControlSourceIntegrator::PurchaseRequisition:
                    commonRecord = PurchReqTable::findPurchReqId(_documentNumber);
                break;
    
                case BudgetControlSourceIntegrator::VendorInvoice:
                    commonRecord = VendInvoiceTrans::findSourceDocumentLine(budgetSource.SourceDocumentLine).vendInvoiceJour();
                break;
    
                case BudgetControlSourceIntegrator::AdvancedLedgerEntry:
                    commonRecord = AdvancedLedgerEntryHeader::findByTransactionNumber(_documentNumber);
                break;
    
                // <PubSect>
                case BudgetControlSourceIntegrator::BudgetReservation_PSN:
                    commonRecord = BudgetReservationHeader_PSN::findByDocumentNumber(_documentNumber);
                break;
                // </PubSect>
            }
        }
    
        if (!commonRecord)
        {
            commonRecord = this.getGeneralJournalByDocumentNumber(_documentNumber);
        }

        return commonRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDocumentRecordForBudgetTrans</Name>
				<Source><![CDATA[
    private Common getOrigDocumentRecordForBudgetTrans(
        RefRecId _budgetTransactionHeaderRecId)
    {
        return BudgetTransactionHeader::find(_budgetTransactionHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDocumentRecordForGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document record for the given general journal Id.
    /// </summary>
    /// <param name="_generalJournalEntryId">
    /// The general journal record Id to be used to identify the document.
    /// </param>
    /// <returns>
    /// The record of the original document.
    /// </returns>
    protected Common getOrigDocumentRecordForGeneralJournal(
        RefRecId _generalJournalEntryId
        )
    {
        GeneralJournalEntry         generalJournalEntryLocal;
        CustInvoiceTable            custInvoiceTable;
        AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
        GeneralJournalAccountEntry  generalJournalAccountEntryLocal;
        VendTrans                   vendTrans;
        Common                      commonRecord;
    
        generalJournalAccountEntryLocal = generalJournalAccountEntry::find(_generalJournalEntryId);
        generalJournalEntryLocal        = GeneralJournalEntry::findByGeneralJournalAccountEntry(generalJournalAccountEntryLocal.RecId);
    
        if (generalJournalEntryLocal.DocumentNumber)
        {
            switch (generalJournalAccountEntryLocal.PostingType)
            {
                // If the posted transaction is Customer Free Text invoice
                case LedgerPostingType::CustRevenue:
                    select firstonly custInvoiceTable where
                        custInvoiceTable.InvoiceId == generalJournalEntryLocal.DocumentNumber;
    
                    if (custInvoiceTable)
                    {
                        commonRecord = custInvoiceTable;
                    }
                break;
    
                // When the vendor invoice is posted through a purchase order, its posting type is LedgerPostingType::PurchOrder
                // otherwise posting type is LedgerPostingType::PurchExpense.
                case LedgerPostingType::PurchExpense,
                        LedgerPostingType::PurchOrder:
                    select firstonly vendTrans where
                        vendTrans.Invoice == generalJournalEntryLocal.DocumentNumber
                        && vendTrans.Voucher == generalJournalEntryLocal.SubledgerVoucher;
    
                    if (vendTrans)
                    {
                        commonRecord = vendTrans;
                    }
                break;
    
                // If the posted transaction is Advanced ledger entry/Expense report.
                case LedgerPostingType::LedgerJournal:
                    advancedLedgerEntryHeader = AdvancedLedgerEntryHeader::findByTransactionNumber(generalJournalEntryLocal.DocumentNumber);
    
                    if (advancedLedgerEntryHeader)
                    {
                        commonRecord = advancedLedgerEntryHeader;
                    }

                    if (!commonRecord)
                    {
                        TrvExpTrans trvExpTrans;

                        select firstonly trvExpTrans
                            where trvExpTrans.ExpNumber == generalJournalEntryLocal.DocumentNumber
                                && trvExpTrans.Voucher == generalJournalEntryLocal.SubledgerVoucher;

                        commonRecord = trvExpTrans;
                    }
                break;

                default:
                    commonRecord = generalJournalEntryLocal;
                    break;
            }
        }
    
        return commonRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    private void initControls()
    {
        ctrlTransactionNumber = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionDetails, BudgetAnalysisDimensionDetailTemp_TransactionNumber)));
        ctrlReferenceDocument = formRun.control(formRun.controlId(formControlStr(BudgetAnalysisDimensionDetails, BudgetSourceTracking_TrackingNumber)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoked when form is initialized.
    /// </summary>
    /// <param name="_budgetAnalysisDimensionDetailTemp">
    /// The <c>BudgetAnalysisDimensionDetailTmp</c> table buffer.
    /// </param>
    public void initialize(BudgetAnalysisDimensionDetailTmp _budgetAnalysisDimensionDetailTemp)
    {
        this.setFormTitle();
    
        request.parmDetailsTempTable(_budgetAnalysisDimensionDetailTemp);
    
        processor = BudgetAnalysisDataProcessor::construct(request);
    
        processor.process();
    
        this.showHideGridColumns();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormRun</Name>
				<Source><![CDATA[
    private void setFormRun(FormRun _formRun)
    {
        formRun = _formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormTitle</Name>
				<Source><![CDATA[
    private void setFormTitle()
    {
        str formTitle;
        
        switch (request.parmColumn())
        {
            case BudgetAnalysisColumns::OperatingResultColumnSetExpenditures:
            case BudgetAnalysisColumns::ExpenseColumnSetActuals:
                formTitle = "@GLS150474";
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetEncumbrance:
                formTitle = "@GLS150475";
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetOriginalBudget:
                formTitle = "@Budget:BudgetAnalysisForOriginalBudget";
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetPreEncumbrance:
                formTitle = "@GLS150476";
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetRevisedBudget:
                formTitle = "@GLS150473";
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFActualsCF:
                formTitle = "@Budget:BudgetAnalysisForCarryForwardActualExpenditures";
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFActualsLessCF:
                formTitle = "@Budget:BudgetAnalysisForActualExpendituresLessCarryForward";
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFBudgetCF:
                formTitle = "@Budget:BudgetAnalysisForCarryForwardBudgetDetail";
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFBudgetLessCF:
                formTitle = "@Budget:BudgetLessCarryForwardDetail";
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFEncumbranceCF:
                formTitle = "@Budget:BudgetAnalysisForCarryForwardEncumbrances";
                break;

            case BudgetAnalysisColumns::ExpenseWithCFPreEncumbranceCF:
                formTitle = "@Budget:BudgetAnalysisForCarryForwardPreEncumbrances";
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFEncumbranceLessCF:
                formTitle = "@Budget:BudgetAnalysisForEncumbrancesLessCarryForward";
                break;

            case BudgetAnalysisColumns::ExpenseWithCFPreEncumbranceLessCF:
                formTitle = "@Budget:BudgetAnalysisForPreEncumbrancesLessCF";
                break;
            
            case BudgetAnalysisColumns::OperatingResultColumnSetActualRevenues:
                formTitle = "@GLS150477";
                break;
    
            case BudgetAnalysisColumns::RevenueColumnSetActualLedgerRevenues:
                formTitle = "@GLS150477";
                break;
    
            case BudgetAnalysisColumns::RevenueColumnSetOriginalEstimate:
                formTitle = "@Budget:BudgetAnalysisForOriginalEstimates";
                break;
    
            case BudgetAnalysisColumns::RevenueColumnSetRevisedEstimate:
                formTitle = "@Budget:BudgetAnalysisForRevisedEstimates";
                break;
        }
        
        formRun.design().caption(formTitle);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequest</Name>
				<Source><![CDATA[
    private void setRequest(BudgetAnalysisRequest _request)
    {
        request = _request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showHideGridColumns</Name>
				<Source><![CDATA[
    private void showHideGridColumns()
    {
        ctrlTransactionNumber.visible(processor.showTransactionNumber());
        ctrlReferenceDocument.visible(processor.showReferenceDocument());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetAnalysisDetailForm construct(
        FormRun                  _formRun,
        BudgetAnalysisRequest    _request)
    {
        BudgetAnalysisDetailForm budgetAnalysisDetailForm = new BudgetAnalysisDetailForm();
    
        budgetAnalysisDetailForm.setFormRun(_formRun);
        budgetAnalysisDetailForm.setRequest(_request);
        budgetAnalysisDetailForm.initControls();
    
        return budgetAnalysisDetailForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigDocumentRecordForBudgetSourceData</Name>
				<Source><![CDATA[
    private Common getOrigDocumentRecordForBudgetSourceData(BudgetAnalysisDimensionDetailTmp _budgetAnalysisDimensionDetailTemp)
    {
        Common commonRec;
        BudgetSource budgetSource = BudgetSource::find(_budgetAnalysisDimensionDetailTemp.TransactionRecId);
        if (_budgetAnalysisDimensionDetailTemp.ReferenceSourceTracking)
        {
            BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;
            BudgetSourceTracking budgetSourceTracking;
                    
            select firstonly RecId from budgetSource
                exists join budgetSourceTracking
                    where budgetSourceTracking.BudgetSource == budgetSource.RecId
                    && budgetSourceTracking.TrackingNumber == _budgetAnalysisDimensionDetailTemp.DocumentNumber
                exists join budgetSourceTrackingRelievingDetail
                    where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == budgetSourceTracking.RecId
                    && budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == _budgetAnalysisDimensionDetailTemp.ReferenceSourceTracking;
        }

        commonRec = this.getOrigDocumentRecordForBudgetSource(budgetSource.Recid, _budgetAnalysisDimensionDetailTemp.DocumentNumber);

        return commonRec;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>