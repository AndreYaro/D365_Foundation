<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostBatchTaskBundle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerPostBatchTaskBundle</c> class is the concrete implementation of the
///    <c>BatchTaskBundle</c> class to allow for bundled batch tasks for journal multiposting.
/// </summary>
/// <remarks>
///    This bundle supports <c>LedgerPostBatch</c> derivative tasks.
/// </remarks>
public class LedgerPostBatchTaskBundle extends BatchTaskBundle implements BatchRetryable
{
    #define.MaximumNumberOfLinesPerBundle(1000)

    Integer totalNumberLines; // Stores the total number of lines of all journals inside of this bundle.
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a task to the bundle.
    /// </summary>
    /// <param name="_task">
    /// The task to add to the bundle.
    /// </param>
    public void addTask(RunBaseBatch _task)
    {
        LedgerPostBatch ledgerPostBatch = _task;
        ;

        super(_task);

        // Update the lines total for keeping track of the size of the bundle.
        totalNumberLines += ledgerPostBatch.getNumberOfJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSupportedTasksList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of the batch tasks supported by this bundle.
    /// </summary>
    /// <returns>
    /// A list of class Ids corresponding to the set of supported batch tasks.
    /// </returns>
    public container getSupportedTasksList()
    {
        return [classnum(LedgerJournalPostBatch)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the bundle is full.
    /// </summary>
    /// <returns>
    /// true if the bundle is full; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The current threshold is 1,000 total journal lines across all tasks.
    /// </remarks>
    public boolean isFull()
    {
        ;

        if (totalNumberLines > #MaximumNumberOfLinesPerBundle)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaskLargerThanMyBaseCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether or not the specified task is larger than a bundle's base capacity.
    /// </summary>
    /// <param name="_task">
    ///    The task to compare to the bundle capacity.
    /// </param>
    /// <returns>
    ///    true if the task is larger than the bundle base capacity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The current base capacity is 1,000 total journal lines.
    /// </remarks>
    public boolean isTaskLargerThanMyBaseCapacity(RunBaseBatch _task)
    {
        LedgerPostBatch ledgerPostBatch = _task;
        ;

        if (ledgerPostBatch.getNumberOfJournalLines() > #MaximumNumberOfLinesPerBundle)
        {
            // The individual task is larger than any individual bundle.
            return true;
        }
        else
        {
            // The individual task would fit into an empty bundle.
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LedgerPostBatchTaskBundle construct()
    {
        ;

        return new LedgerPostBatchTaskBundle();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumOfJournalLinesPerBundle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the maximum number of journal lines that can be stored by this bundle.
    /// </summary>
    /// <returns>
    ///    The maximum number of journal lines that can be stored by this bundle.
    /// </returns>
    /// <remarks>
    ///    This method is not defined on the abstract base class because it is a concept held only by this
    ///    particular bundle. This value is static.
    /// </remarks>
    public static int getMaxNumOfJournalLinesPerBundle()
    {
        ;

        return #MaximumNumberOfLinesPerBundle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if ledger post batch can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>