<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SplitPaymentMandatoryRuleEngine_VendInvoicejournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SplitPaymentMandatoryRuleEngine_VendInvoiceJournal</c> class is extended class for updating paymMode
/// in Vendor invoice journal line.
/// </summary>
public class SplitPaymentMandatoryRuleEngine_VendInvoiceJournal extends SplitPaymentMandatoryRuleEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findRuleForOrder</Name>
				<Source><![CDATA[
    protected SplitPaymentMandatoryRule_PL findRuleForOrder(Amount _totalAmount, PaymMode _paymMode = '', PaymSpec _paymSpec = '')
    {
        PurchLine purchLine;
        SplitPaymentMandatoryRule_PL rule;
        SplitPaymentMandatoryRule_PL voluntaryRule;
        LedgerJournalTrans ledgerJournalTrans = this.getLedgerJournalTrans();
        IntrastatCountryRegionParameters intrastatCountryRegionParameters = IntrastatCountryRegionParameters::find(VendTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension).postalAddress().CountryRegionId);
        boolean isDomesticPartner = intrastatCountryRegionParameters && intrastatCountryRegionParameters.CountryRegionType == CountryRegionType::Domestic;

        SplitPaymentMandatoryItemGroupId_PL itemGroupId = SplitPaymentMandatoryItemGroup_PL::findGroupByItem(this.getDocumentType());

        if (ledgerJournalTrans.TaxItemGroup != '')
        {
            if (isDomesticPartner)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withTaxItemGroup(ledgerJournalTrans.TaxItemGroup)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::Domestic)
                    .withCurrencyCode(ledgerJournalTrans.CurrencyCode)
                    .withSearchByTaxItemGroup(true));
            }

            if (!rule)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::All)
                    .withCurrencyCode(ledgerJournalTrans.CurrencyCode)
                    .withTaxItemGroup(ledgerJournalTrans.TaxItemGroup)
                    .withSearchByTaxItemGroup(true));
            }

            if (rule.VoluntarySplitPayment == NoYes::Yes)
            {
                voluntaryRule = rule;
            }
        }

        if (!rule || rule.VoluntarySplitPayment == NoYes::Yes)
        {
            if (isDomesticPartner)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::Domestic)
                    .withCurrencyCode(ledgerJournalTrans.CurrencyCode)
                    .withSearchByTaxItemGroup(false));
            }

            if (!rule)
            {
                rule = SplitPaymentMandatoryRule_PL::findByContract(SplitPaymentMandatoryRuleContract::construct()
                    .withDocumentType(this.getDocumentType())
                    .withAmount(_totalAmount)
                    .withItemGroupId(itemGroupId)
                    .withCountryType(SplitPaymentMandatoryCountryRegionType_PL::All)
                    .withCurrencyCode(ledgerJournalTrans.CurrencyCode)
                    .withSearchByTaxItemGroup(false));
            }
        }

        if ((!rule || rule.VoluntarySplitPayment == NoYes::Yes) && voluntaryRule)
        {
            rule = voluntaryRule;
        }

        return rule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSplitPayment</Name>
				<Source><![CDATA[
    protected boolean isSplitPayment()
    {
        return this.getCurrentSplitPayment() == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    protected SplitPaymentDocumentType_PL getDocumentType()
    {
        return SplitPaymentDocumentType_PL::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymMode</Name>
				<Source><![CDATA[
    protected PaymMode getCurrentPaymMode()
    {
        return this.getLedgerJournalTrans().PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommonTable</Name>
				<Source><![CDATA[
    protected void updateCommonTable(PaymMode _paymMode, PaymSpec _paymSpec)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ttsbegin;
        ledgerJournalTrans = ledgerJournalTrans::findRecId(this.getLedgerJournalTrans().RecId, true);

        if (ledgerJournalTrans)
        {
            ledgerJournalTrans.PaymMode = _paymMode;
            ledgerJournalTrans.PaymSpec = _paymSpec;

            ledgerJournalTrans.update();
        }
        ttscommit;

        this.getLedgerJournalTrans().PaymMode = _paymMode;
        this.getLedgerJournalTrans().PaymSpec = _paymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    protected Amount getAmount()
    {
        return -this.getLedgerJournalTrans().amount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans getLedgerJournalTrans()
    {
        return this.parmCommonTable() as LedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SplitPaymentMandatoryRuleEngine_VendInvoiceJournal construct()
    {
        return new SplitPaymentMandatoryRuleEngine_VendInvoiceJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPaymModeSpec</Name>
				<Source><![CDATA[
    protected PaymSpec getCurrentPaymModeSpec()
    {
        return this.getLedgerJournalTrans().PaymSpec;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>