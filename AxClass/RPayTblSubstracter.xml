<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblSubstracter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for substruct one <c>RPayTblTimeList</c> from another.
/// </summary>
class RPayTblSubstracter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>crossList</Name>
				<Source><![CDATA[
        private RPayTblTimeList crossList(RPayTblTImeList _lista, RPayTblTimeList _listb)
    {
        RPayTblTimeList ret  = _lista.clone();
        ListEnumerator lb = _listb.periods().getEnumerator();

        while (lb.moveNext())
        {
            ret = this.crossListTime(ret, lb.current());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossListTime</Name>
				<Source><![CDATA[
        private RPayTblTimeList crossListTime(RPayTblTImeList _list, RPayTblTime _time)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        ListEnumerator la = _list.periods().getEnumerator();

        while (la.moveNext())
        {
            ret.append(this.crossTime(la.current(), _time));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossTime</Name>
				<Source><![CDATA[
        private RPayTblTimeList crossTime(RPayTblTime _a, RPayTblTIme _b)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        RPayTblTime     time;
        TransDate       start, end;

        if ( !RPayTblTime::isIntersects(_a, _b))
        {
            ret.addEnd(_a.clone());
            return ret;
        }

        if (_a.parmStartDate() < _b.parmStartDate())
        {
            time = _a.clone();
            time.parmEndDate(_b.parmStartDate() - 1);
            ret.addEnd(time);
        }

        if (_a.parmHours() + _b.parmHours() != 0 || !_a.dimension().equal(_b.dimension()))
        {
            start = max(_a.parmStartDate(), _b.parmStartDate());
            end = min(_a.parmEndDate(), _b.parmEndDate());
            if (start <= end)
            {
                time = _a.clone();
                time.parmStartDate(start);
                time.parmEndDate(end);
                if (time.parmHours() != 0)
                {
                    ret.addEnd(time);
                }
            }
        }

        if (_a.parmEndDate() > _b.parmEndDate())
        {
            time = _a.clone();
            time.parmStartDate(_b.parmEndDate() + 1);
            ret.addEnd(time);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>substract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Substruct lists.
    /// </summary>
    /// <param name="_a">
    /// minuend
    /// </param>
    /// <param name="_b">
    /// subtrahend
    /// </param>
    /// <returns>
    /// result <c>RPayTblTimeList</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTblTimeList substract(RPayTblTimeList _a, RPayTblTimeList _b)
    {
        RPayTblTimeList ret = new RPayTblTimeList();
        RPayTblTimeList copyB = _b.clone();
        RPayTblSubstracter subs = new RPayTblSubstracter();
        copyB.reverse();

        ret.append(subs.crossList(_a, copyB));
        ret.append(subs.crossList(copyB, _a));

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>