<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayStandardDeductionBankPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayStandardDeductionBankPayment extends RunBaseBatch implements BatchRetryable
{
    DialogField     fieldStartPeriod,fieldEndPeriod;
    ReportPeriod_RU startPeriod,endPeriod;
    QueryRun        queryRun;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        startPeriod,
        endPeriod
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@GLS105772");
        fieldStartPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS4083");
        fieldEndPeriod   = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@SYS5418");
        fieldStartPeriod.value(startPeriod ? startPeriod : RPayParameters::payPeriod());
        fieldEndPeriod.value(endPeriod     ? endPeriod   : RPayParameters::payPeriod());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU endPeriod()
    {
        return endPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            startPeriod  = endmth(fieldStartPeriod.value());
            endPeriod    = endmth(fieldEndPeriod.value());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private Query initQuery()
    {
        return new Query(queryStr(RPayStandardDeductionBankPayment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        queryRun = new QueryRun(this.initQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpRpayDeductionBankPayment</Name>
				<Source><![CDATA[
    private TmpRpayDeductionBankPayment initTmpRpayDeductionBankPayment()
    {
        RPayEmplStandardDeductionTable      rPayEmplStandardDeductionTable;
        RPayTrans                           rPayTrans;
        TmpRpayDeductionBankPayment         payDeductionBankPayment;
        Name                                recipientName;
        KeySum                              emptyBankAccountKeySum = KeySum::construct(4, 1);
        RPayAmount                          emptyBankAccountAmount;
        container                           key;
        int                                 i;

        while select * from rPayEmplStandardDeductionTable
        join  Amount from rPayTrans
            where rPayTrans.PayPeriod     >= startPeriod               &&
                  rPayTrans.PayPeriod     <= endPeriod                 &&
                  rPayTrans.SourceRecId   == rPayEmplStandardDeductionTable.RecId  &&
                  rPayTrans.SourceTableId == rPayEmplStandardDeductionTable.TableId
        {
            if (rPayEmplStandardDeductionTable.deductionType() == RPayStandardDeductionType::Alimony &&
                rPayEmplStandardDeductionTable.AlimonyPaymentType != RPayAlimPaymentType::Bank)
            {
                continue;
            }

            if (!rPayEmplStandardDeductionTable.BankTransAccountId)
            {
                key = [rPayEmplStandardDeductionTable.deductionType(),
                    rPayEmplStandardDeductionTable.EmplId,
                    rPayEmplStandardDeductionTable.RecipientType,
                    rPayEmplStandardDeductionTable.Recipient];

                emptyBankAccountKeySum.updateNow(key, abs(rPayTrans.Amount));

                continue;
            }

            switch (rPayEmplStandardDeductionTable.RecipientType)
            {
                case RPayStandardDeductionRecipientType::Cust:
                    payDeductionBankPayment.BankGroupId = CustBankAccount::find(rPayEmplStandardDeductionTable.Recipient,
                                                                                rPayEmplStandardDeductionTable.BankTransAccountId).BankGroupId;
                    break;

                case RPayStandardDeductionRecipientType::Vend:
                    payDeductionBankPayment.BankGroupId = VendBankAccount::find(rPayEmplStandardDeductionTable.Recipient,
                                                                                rPayEmplStandardDeductionTable.BankTransAccountId).BankGroupID;
                    break;

                default :
                    payDeductionBankPayment.BankGroupId = RHRMPersonBankAccount::findEmplId(rPayEmplStandardDeductionTable.Recipient,
                                                          rPayEmplStandardDeductionTable.BankTransAccountId).BankGroupId;
                    break;
            }
            payDeductionBankPayment.RecipientType      = rPayEmplStandardDeductionTable.RecipientType;
            payDeductionBankPayment.Recipient          = rPayEmplStandardDeductionTable.Recipient;
            payDeductionBankPayment.DeductionCode      = rPayEmplStandardDeductionTable.DeductionCode;
            payDeductionBankPayment.EmplId             = rPayEmplStandardDeductionTable.EmplId;
            payDeductionBankPayment.StartDate          = rPayEmplStandardDeductionTable.StartDate;
            payDeductionBankPayment.EndDate            = rPayEmplStandardDeductionTable.EndDate;
            payDeductionBankPayment.DocumentNum        = rPayEmplStandardDeductionTable.DocumentNum;
            payDeductionBankPayment.DocumentDate       = rPayEmplStandardDeductionTable.DocumentDate;
            payDeductionBankPayment.BankTransAccountId = rPayEmplStandardDeductionTable.BankTransAccountId;
            payDeductionBankPayment.Amount             = rPayTrans.Amount;
            payDeductionBankPayment.insert();
        }

        for (i = 1; i <= emptyBankAccountKeySum.numOfTrans(); i++)
        {
            key = emptyBankAccountKeySum.index2Key(i);
            emptyBankAccountAmount = emptyBankAccountKeySum.index2Data(i);

            switch (conPeek(key, 3))
            {
                case RPayStandardDeductionRecipientType::Cust:
                    recipientName = CustTable::find(conPeek(key, 4)).name();
                    break;

                case RPayStandardDeductionRecipientType::Vend:
                    recipientName = VendTable::find(conPeek(key, 4)).name();
                    break;

                default :
                    recipientName = RHRMEmplTable::emplId2Name(conPeek(key, 4));
                    break;
            }

            info(strFmt("@RUP6346",
                conPeek(key, 1),
                conPeek(key, 2),
                RHRMEmplTable::emplId2Name(conPeek(key, 2)),
                emptyBankAccountAmount,
                conPeek(key, 4),
                recipientName));
        }

        return payDeductionBankPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun ? queryRun.pack() : conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        OXMLExcelReport_RPayStdDedBankPayment   report = new OXMLExcelReport_RPayStdDedBankPayment();

        this.queryRun().setRecord(this.initTmpRpayDeductionBankPayment());

        report.setQueryRun(this.queryRun());
        report.parmStartPeriod(startPeriod);
        report.parmEndPeriod(endPeriod);
        report.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportPeriod_RU startPeriod()
    {
        return startPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container packedQR;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQR] = packedClass;
                if (SysQuery::isPackedOk(packedQR))
                {
                    queryRun = new QueryRun(packedQR);
                }
                else
                {
                    this.initQueryRun();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret)
        {
            if (! fieldStartPeriod.value())
            {
                return checkFailed("@RUP881");
            }

            if (! fieldEndPeriod.value())
            {
                return checkFailed("@RUP882");
            }

            if (fieldStartPeriod.value() > fieldEndPeriod.value())
            {
                return checkFailed("@RUP883");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP1130";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayStandardDeductionBankPayment    rPayStandardDeductionBankPayment = new RPayStandardDeductionBankPayment();

        if (rPayStandardDeductionBankPayment.prompt())
        {
            rPayStandardDeductionBankPayment.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>