<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanNull</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqEventProcessKanbanSalesLine</c> class implements a null object pattern to not perform
///    actions when the lean configuration key is disabled.
/// </summary>
class ReqEventProcessKanbanNull extends ReqEventProcessKanban implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table buffer on which the class operates.
    /// </summary>
    /// <returns>
    ///    A <c>Common</c> table buffer.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected Common buffer()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the event origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected boolean eventExists()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string identification for the buffer.
    /// </summary>
    /// <returns>
    ///    A string value that identifies the buffer.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected str id()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceRequirementParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    protected boolean initSourceRequirementParm()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    ///    A <c>InventDimId</c> string value.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected InventDimId inventDimId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the event quantity to process.
    /// </summary>
    /// <returns>
    ///    A <c>InventQty</c> type value.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected InventQty inventQty()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyKanbanRuleLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the event quantity to use to lookup the rule.
    /// </summary>
    /// <returns>
    ///    A <c>InventQty</c> type value.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected InventQty inventQtyKanbanRuleLookup()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction originator of the source event.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected InventTransOriginId inventTransOriginId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the item for which an event is processed.
    /// </summary>
    /// <returns>
    ///    A <c>ItemId</c> string value.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected ItemId itemId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the kanban event type that is processed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanEventType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected KanbanEventType kanbanEventType()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the event.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        // Perform no action
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the source document line that is causing the event.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    /// <remarks>
    ///    As this method is implemented on a null object pattern class it will always throw an exception.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The function is not used correctly.
    /// </exception>
    protected SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqEventProcessKanbanNull construct()
    {
        return new ReqEventProcessKanbanNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqEventProcessKanbanNull</c> class.
    /// </summary>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanNull</c> object.
    /// </returns>
    public static ReqEventProcessKanbanNull newStandard()
    {
        ReqEventProcessKanbanNull  reqEventProcess = ReqEventProcessKanbanNull::construct();

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>