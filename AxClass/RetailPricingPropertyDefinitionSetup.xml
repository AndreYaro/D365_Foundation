<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyDefinitionSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// After making RetailPricingPropertyDefinition company-aware, we want to copy existing properties to all legal entities.
/// 
/// Given: DbSync will have DataArea column default as "DAT"(hard coded) at TableCreationDdlGenerator#AddSystemFields,
/// And: "DAT" is not allowed to be deleted at CompanyInfo#delete and OMLegalEntity#validateDelete.
/// 
/// The DataArea newly added to RetailPricingPropertyDefinition will be placed in "DAT" company and we just need to copy to other companies.
/// </summary>
[
    SysSetupConfigKey(configurationKeyStr(Retail)),
    SysSetupTable(tablestr(RetailPricingPropertyDefinition)),
    SysSetupConfig(true, 300, 1)
]
internal final class RetailPricingPropertyDefinitionSetup implements SysSetup
{
    private const str DATCompany = 'DAT';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    public void loadData()
    {
        if (!this.shouldLoadData())
        {
            return ;
        }

        ttsbegin;

        DataArea company;
        while select crosscompany Id from company where company.isVirtual == NoYes::No && company.id != DATCompany
        {
            changecompany(company.id)
            {
                RetailPricingPropertyDefinition definition;

                while select crosscompany definition where definition.DataAreaId == DATCompany && definition.Status == RetailPricingPropertyProcessStatus::Published
                {
                    RetailPricingPropertyDefinition newDefinition;

                    newDefinition.PropertyLevel = definition.PropertyLevel;
                    newDefinition.PropertyType = definition.PropertyType;
                    newDefinition.PropertySource = definition.PropertySource;
                    newDefinition.PredefinedProperty = definition.PredefinedProperty;
                    newDefinition.EcoResAttributeRecId = definition.EcoResAttributeRecId;
                    newDefinition.DisplayOrder = definition.DisplayOrder;
                    newDefinition.Status = definition.Status;

                    newDefinition.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLoadData</Name>
				<Source><![CDATA[
    internal boolean shouldLoadData()
    {
        if (!RetailPricingFeatureToggle::isRetailPricingPropertyFeatureVisible())
        {
            return false;
        }

        // We should only load data when there is only records in DAT company.
        RetailPricingPropertyDefinition definition;

        select crosscompany count(RecId) from definition;
        int countAll = definition.RecId;

        select crosscompany count(RecId) from definition where definition.DataAreaId == DATCompany;
        int countDat = definition.RecId;

        return countDat == countAll && countAll > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>