<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceDP</c> class is the data provider class for the <c>VendInvoice</c> SSRS report.
/// </summary>
[SRSReportParameterAttribute(classstr(VendInvoiceContract)),
SRSReportQueryAttribute(querystr(VendInvoice))]
public class VendInvoiceDP extends SrsReportDataProviderPreProcessTempDb
{
    OpenPaidBoth invoiceType;
    AmountCur amountCurOpen;
    Name dimensionFocusName;
    DimensionDisplayValue dimensionFocusDisplayValue;
    AmountMST amountMSTOpen;
    FromDate fromDate;
    ToDate toDate;
    DueDate firstDueDate;
    VendInvoiceTmp vendInvoiceTmp;
    ReportingDate reportingDate;
    boolean showDaysPastDue;
    Set processedTransactions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (VendInvoiceDPSkipDefaultTrxScopeFlight::instance().isEnabled())
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessedTransactionsKey</Name>
				<Source><![CDATA[
    private str getProcessedTransactionsKey(VendTrans _vendTrans)
    {
        return strFmt('%1%2%3%4', _vendTrans.Voucher, _vendTrans.dataAreaId, _vendTrans.TransDate, _vendTrans.Invoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    private void getReportParameters()
    {
        VendInvoiceContract contract = this.parmDataContract();

        if (contract)
        {
            dimensionFocusName = contract.parmDimensionFocus();
            fromDate = contract.parmFromDate();
            toDate = contract.parmToDate();
            invoiceType = contract.parmInvoiceType();
            if (invoiceType == OpenPaidBoth::Paid)
            {
                showDaysPastDue = false;
                reportingDate = dateNull();
            }
            else
            {
                showDaysPastDue = contract.parmShowDaysPastDue();
                reportingDate = contract.parmReportingDate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceTmp</c> table for the report.
    /// </summary>
    /// <returns>
    /// The <c>VendInvoiceTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(VendInvoiceTmp))]
    public VendInvoiceTmp getVendInvoiceTmp()
    {
        select vendInvoiceTmp;
        return vendInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertVendInvoiceTmp(VendTable _vendTable, VendTrans _vendTrans, VendTransOpen _vendTransOpen = null, GeneralJournalAccountEntry _generalJournalAccountEntry = null, InvoiceDate _maxInvoiceDate = dateNull(), TransDate _maxTransDate = dateNull())
    {
        int dateDiff;

        vendInvoiceTmp.clear();

        if (_generalJournalAccountEntry)
        {
            select forUpdate vendInvoiceTmp
                where vendInvoiceTmp.DimensionFocus == dimensionFocusDisplayValue &&
                        vendInvoiceTmp.Voucher == _vendTrans.Voucher &&
                        vendInvoiceTmp.TransDate == _vendTrans.TransDate && 
                        vendInvoiceTmp.Invoice == _vendTrans.Invoice;

            if (vendInvoiceTmp)
            {
                this.updateAmounts(_vendTrans, _vendTransOpen, _generalJournalAccountEntry);
                vendInvoiceTmp.update();
                return;
            }
        }

        vendInvoiceTmp.AccountNum = _vendTable.AccountNum;
        vendInvoiceTmp.Approved = _vendTrans.Approved;
        vendInvoiceTmp.Voucher = _vendTrans.Voucher;
        vendInvoiceTmp.VendorName = _vendTrans.vendTableName();
        vendInvoiceTmp.VendGroup = _vendTable.VendGroup;

        vendInvoiceTmp.AmountCur = 0;
        vendInvoiceTmp.AmountMST = 0;
        vendInvoiceTmp.RemainAmountCur = 0;
        vendInvoiceTmp.RemainAmountMST = 0;
        vendInvoiceTmp.DueDate = firstDueDate;
        vendInvoiceTmp.PossibleCashDisc = 0;
        vendInvoiceTmp.CashDiscDate = dateNull();
        vendInvoiceTmp.FlagNumOfOpenTrans = 0;

        this.updateAmounts(_vendTrans, _vendTransOpen, _generalJournalAccountEntry);

        vendInvoiceTmp.PaymModeVendTable = _vendTable.PaymMode;
        vendInvoiceTmp.PaymModeVendTrans = _vendTrans.PaymMode;
        vendInvoiceTmp.TransDate = _vendTrans.TransDate;
        vendInvoiceTmp.Invoice = _vendTrans.Invoice;
        vendInvoiceTmp.Txt = _vendTrans.Txt;
        vendInvoiceTmp.CurrencyCode = _vendTrans.CurrencyCode;
        vendInvoiceTmp.DimensionFocus = dimensionFocusDisplayValue;

        if (_maxInvoiceDate != dateNull())
        {
            vendInvoiceTmp.MaxOfInvoiceDate = _maxInvoiceDate;
        }

        if (_maxTransDate != dateNull())
        {
            vendInvoiceTmp.MaxOfTransDate = _maxTransDate;
        }

        dateDiff = reportingDate - vendInvoiceTmp.DueDate;
        if (showDaysPastDue && reportingDate != dateNull() && dateDiff > 0 && _vendTrans.Closed == dateNull())
        {
            vendInvoiceTmp.DaysPastDue = dateDiff;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            vendInvoiceTmp.FiscalEstablishmentId = _vendTrans.fiscalEstablishmentId_BR();
        }
        // </GBR>

        vendInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        VendTrans vendTrans;
        VendTable vendTable;
        VendTransOpen vendTransOpen;
        VendSettlement localVendSettlement;
        VendInvoiceJourLastInvoiceDate vendInvoiceJourLastInvoiceDate;
        VendTransLastPayment vendTransLastPayment;

        boolean isTransactionInserted;
        Query query = this.parmQuery();
        Query generalJournalAccountEntryQuery;
        QueryRun queryRun;
        CustVendTransDetails vendTransDetails;
        GeneralJournalAccountEntry generalJournalAccountEntry, generalJournalAccountEntryLocal;
        InvoiceDate maxInvoiceDate;
        TransDate maxTransDate;

        processedTransactions = new Set(Types::String);

        this.getReportParameters();
        query.dataSourceTable(tablenum(GeneralJournalAccountEntry), 1).addRange(fieldnum(GeneralJournalAccountEntry, PostingType)).value(enum2str(LedgerPostingType::VendBalance));

        if (fromDate || toDate)
        {
            query.dataSourceTable(tablenum(VendTrans), 1).addRange(fieldnum(VendTrans, TransDate)).value(queryRange(fromDate, toDate));
        }

        if (dimensionFocusName != '')
        {
            generalJournalAccountEntryQuery = this.buildGeneralJournalAccountEntryQuery(query);
        }

        if (invoiceType == OpenPaidBoth::Open || invoiceType == OpenPaidBoth::Both)
        {
            query.dataSourceTable(tablenum(GeneralJournalAccountEntry), 1).addRange(fieldnum(GeneralJournalAccountEntry, PostingType)).value(enum2str(LedgerPostingType::Tax));
        }

        queryRun = new QueryRun(query);
        vendTransDetails = new CustVendTransDetails(vendTrans);

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(VendTable)))
            {
                maxInvoiceDate = dateNull();
                maxTransDate = dateNull();

                vendTable = queryRun.get(tablenum(VendTable));

                if (queryRun.changed(tableNum(VendInvoiceJourLastInvoiceDate)))
                {
                    vendInvoiceJourLastInvoiceDate = queryRun.get(tableNum(VendInvoiceJourLastInvoiceDate));

                    if (vendInvoiceJourLastInvoiceDate)
                    {
                        maxInvoiceDate = vendInvoiceJourLastInvoiceDate.MaxOfInvoiceDate;
                    }
                }

                if (queryRun.changed(tableNum(VendTransLastPayment)))
                {
                    vendTransLastPayment = queryRun.get(tableNum(VendTransLastPayment));

                    if (vendTransLastPayment)
                    {
                        maxTransDate = vendTransLastPayment.MaxOfTransDate;
                    }
                }
            }

            if (queryRun.changed(tablenum(VendTrans)))
            {
                vendTrans = queryRun.get(tablenum(VendTrans));
                vendTransOpen.clear();

                if (invoiceType == OpenPaidBoth::Open)
                {
                    select sum(settleAmountMST), sum(ExchAdjustment) from localVendSettlement
                        where localVendSettlement.TransCompany == vendTrans.company() &&
                            localVendSettlement.TransRecId == vendTrans.RecId &&
                            localVendSettlement.AccountNum == vendTrans.AccountNum &&
                            localVendSettlement.TransDate <= toDate;

                    if ((localVendSettlement.SettleAmountMST - localVendSettlement.ExchAdjustment) == vendTrans.AmountMST)
                    {
                        processedTransactions.add(this.getProcessedTransactionsKey(vendTrans));
                        continue;
                    }
                }

                vendTransDetails.setCustVendTrans(vendTrans);
                vendTransDetails.setTransDate(toDate == DateNull() ? DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) : todate);
                [amountCurOpen, amountMSTOpen] = vendTransDetails.amountCurMSTSettled();

                amountCurOpen = vendTrans.AmountCur - amountCurOpen;
                amountMSTOpen = vendTrans.AmountMST - amountMSTOpen;

                if (invoiceType == OpenPaidBoth::Paid && (vendTrans.Closed == dateNull() && !(amountCurOpen == 0 && amountMSTOpen == 0)))
                {
                    continue;
                }

                firstDueDate = vendTransDetails.firstDueDate();

                if (dimensionFocusName != '')
                {
                    if (!processedTransactions.in(this.getProcessedTransactionsKey(vendTrans)))
                    {
                        QueryBuildDataSource subledgerVoucherGeneralJournalEntryDS = generalJournalAccountEntryQuery.dataSourceTable(tableNum(SubledgerVoucherGeneralJournalEntry));

                        SysQuery::findOrCreateRange(subledgerVoucherGeneralJournalEntryDS, fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(vendTrans.Voucher);
                        SysQuery::findOrCreateRange(subledgerVoucherGeneralJournalEntryDS, fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId)).value(vendTrans.DataAreaId);
                        SysQuery::findOrCreateRange(subledgerVoucherGeneralJournalEntryDS, fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate)).value(SysQuery::value(vendTrans.TransDate));

                        QueryRun generalJournalAccountEntryQR = new QueryRun(generalJournalAccountEntryQuery);

                        while (generalJournalAccountEntryQR.next())
                        {
                            if (generalJournalAccountEntryQR.changed(tableNum(GeneralJournalAccountEntry)))
                            {
                                generalJournalAccountEntryLocal = generalJournalAccountEntryQR.get(tableNum(GeneralJournalAccountEntry));

                                if (generalJournalAccountEntryLocal.LedgerDimension)
                                {
                                    isTransactionInserted = false;
                                    dimensionFocusDisplayValue = strRTrim(DimensionSet::getDisplayValueForDimensionSetName(generalJournalAccountEntryLocal.LedgerDimension, dimensionFocusName));

                                    UserConnection userCon = this.parmUserConnection();

                                    userCon.ttsbegin();

                                    while select vendTransOpen
                                        where vendTransOpen.RefRecId == vendTrans.RecId
                                    {
                                        this.insertVendInvoiceTmp(vendTable, vendTrans, vendTransOpen, generalJournalAccountEntryLocal, maxInvoiceDate, maxTransDate);
                                        isTransactionInserted = true;
                                    }

                                    if (!isTransactionInserted)
                                    {
                                        this.insertVendInvoiceTmp(vendTable, vendTrans, null, generalJournalAccountEntryLocal, maxInvoiceDate, maxTransDate);
                                        isTransactionInserted = true;
                                    }

                                    userCon.ttscommit();
                                }
                            }
                        }
                    }
                    else
                    {
                        isTransactionInserted = true;
                    }
                }

                if (!isTransactionInserted)
                {
                    UserConnection userCon = this.parmUserConnection();

                    userCon.ttsbegin();

                    while select vendTransOpen
                        where vendTransOpen.RefRecId == vendTrans.RecId
                    {
                        this.insertVendInvoiceTmp(vendTable, vendTrans, vendTransOpen, null, maxInvoiceDate, maxTransDate);
                        isTransactionInserted = true;
                    }

                    userCon.ttscommit();

                    if (!isTransactionInserted)
                    {
                        this.insertVendInvoiceTmp(vendTable, vendTrans, null, null, maxInvoiceDate, maxTransDate);
                    }
                }

                if (isTransactionInserted)
                {
                    processedTransactions.add(this.getProcessedTransactionsKey(vendTrans));
                }

                isTransactionInserted = false;
                dimensionFocusDisplayValue = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    private void updateAmounts(VendTrans _vendTrans, VendTransOpen _vendTransOpen = null, GeneralJournalAccountEntry _generalJournalAccountEntry = null)
    {
        Amount amountCur, amountMST, remainAmountCur, remainAmountMst, possibleCashDisc;

        amountCur = _vendTrans.AmountCur;
        amountMST = _vendTrans.AmountMST;
        remainAmountCur = amountCurOpen;
        remainAmountMST = amountMSTOpen;

        if (_vendTransOpen)
        {
            // amountCur, invoice amount in transaction currency, is unchanged from the one VendTranOpen record initially had.
            // So it is calculated by adding back all of settlementAmounts to the amount in vendTransOpen to get an initial value.
            // Because there can be multiple vendTransOpen records (i.e. from schedule payments), 
            // the invoice balance should be calculated based on vendTransOpen record, not vendTrans record.
            // amountMST, invoice amount in accounting currency, is also unchanged and calculated in the same way of amountCur.
            AmountCur settledAmountCurForAll;
            AmountMST settledAmountMSTForAll;
            VendExchAdjustment exchAdjustmentForAll;
            [settledAmountCurForAll, settledAmountMSTForAll, exchAdjustmentForAll] = this.getSettledAmountsWithoutToDateRange(_vendTransOpen);
            amountCur = amountCurOpen == 0 ? amountCur : _vendTransOpen.AmountCur + settledAmountCurForAll;
            amountMST = amountMSTOpen == 0 ? amountMST : _vendTransOpen.AmountMST + settledAmountMSTForAll - exchAdjustmentForAll;

            // remainAmountCur, balance amount in transaction currency, is calculated by invoice amount substracting settle amounts in the period.
            // remainAmountMST, balance amount in accounting currency, is calculated by invoice amount subtracting settlements and exchange adjustments in this period.
            AmountCur settledAmountCurForPeriod;
            AmountMST settledAmountMSTForPeriod;
            VendExchAdjustment exchAdjustmentForPeriod;
            [settledAmountCurForPeriod, settledAmountMSTForPeriod, exchAdjustmentForPeriod] = this.getSettledAmountsWithToDateRange(_vendTransOpen);
            remainAmountCur = amountCur - settledAmountCurForPeriod;
            remainAmountMST = amountMST - settledAmountMSTForPeriod + exchAdjustmentForPeriod;

            possibleCashDisc = _vendTransOpen.PossibleCashDisc;
            vendInvoiceTmp.DueDate = _vendTransOpen.DueDate;
            vendInvoiceTmp.CashDiscDate = _vendTransOpen.CashDiscDate;
            vendInvoiceTmp.FlagNumOfOpenTrans = 1;
        }

        if (_generalJournalAccountEntry)
        {
            if (abs(_generalJournalAccountEntry.TransactionCurrencyAmount) >= abs(_vendTrans.AmountCur))
            {
                vendInvoiceTmp.AmountCur += (_vendTrans.AmountCur == 0 ? _generalJournalAccountEntry.TransactionCurrencyAmount : amountCur);
                vendInvoiceTmp.AmountMST += (_vendTrans.AmountMST == 0 ? _generalJournalAccountEntry.AccountingCurrencyAmount : amountMST);
                vendInvoiceTmp.RemainAmountCur += (_vendTrans.AmountCur == 0 ? _generalJournalAccountEntry.TransactionCurrencyAmount : remainAmountCur);
                vendInvoiceTmp.RemainAmountMST += (_vendTrans.AmountMST == 0 ? _generalJournalAccountEntry.AccountingCurrencyAmount : remainAmountMST);
                vendInvoiceTmp.PossibleCashDisc += (_vendTrans.AmountCur == 0 ? 0 : possibleCashDisc);
            }
            else
            {
                vendInvoiceTmp.AmountCur += (_vendTrans.AmountCur == 0 ? _generalJournalAccountEntry.TransactionCurrencyAmount : amountCur * (_generalJournalAccountEntry.TransactionCurrencyAmount / _vendTrans.AmountCur));
                vendInvoiceTmp.AmountMST += (_vendTrans.AmountMST == 0 ? _generalJournalAccountEntry.AccountingCurrencyAmount : amountMST * (_generalJournalAccountEntry.AccountingCurrencyAmount / _vendTrans.AmountMST));
                vendInvoiceTmp.RemainAmountCur += (_vendTrans.AmountCur == 0 ? _generalJournalAccountEntry.TransactionCurrencyAmount : remainAmountCur * (_generalJournalAccountEntry.TransactionCurrencyAmount / _vendTrans.AmountCur));
                vendInvoiceTmp.RemainAmountMST += (_vendTrans.AmountMST == 0 ? _generalJournalAccountEntry.AccountingCurrencyAmount : remainAmountMST * (_generalJournalAccountEntry.AccountingCurrencyAmount / _vendTrans.AmountMST));
                vendInvoiceTmp.PossibleCashDisc += (_vendTrans.AmountCur == 0 ? 0 : _vendTransOpen.PossibleCashDisc * (_generalJournalAccountEntry.TransactionCurrencyAmount / _vendTrans.AmountCur));
            }
        }
        else
        {
            vendInvoiceTmp.AmountCur = amountCur;
            vendInvoiceTmp.AmountMST = amountMST;
            vendInvoiceTmp.RemainAmountCur = remainAmountCur;
            vendInvoiceTmp.RemainAmountMST = remainAmountMst;
            vendInvoiceTmp.PossibleCashDisc = possibleCashDisc;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettledAmountsWithoutToDateRange</Name>
				<Source><![CDATA[
    private container getSettledAmountsWithoutToDateRange(VendTransOpen _vendTransOpen)
    {
        VendSettlement vendSettlement;

        if(this.canUseTransOpenField(_vendTransOpen))
        {
            select sum(SettleAmountCur), sum(SettleAmountMST), sum(ExchAdjustment) from vendSettlement
                where vendSettlement.TransCompany == _vendTransOpen.company()
                    && vendSettlement.TransRecId == _vendTransOpen.RefRecId
                    && vendSettlement.AccountNum == _vendTransOpen.AccountNum
                    && vendSettlement.TransOpen == _vendTransOpen.RecId;
        }
        else
        {
            select sum(SettleAmountCur), sum(SettleAmountMST), sum(ExchAdjustment) from vendSettlement
                where vendSettlement.TransCompany == _vendTransOpen.company()
                    && vendSettlement.TransRecId == _vendTransOpen.RefRecId
                    && vendSettlement.AccountNum == _vendTransOpen.AccountNum
                    && vendSettlement.DueDate == _vendTransOpen.DueDate;
        }

        return [vendSettlement.SettleAmountCur, vendSettlement.SettleAmountMST, vendSettlement.ExchAdjustment];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettledAmountsWithToDateRange</Name>
				<Source><![CDATA[
    private container getSettledAmountsWithToDateRange(VendTransOpen _vendTransOpen)
    {
        VendSettlement vendSettlement;

        if(this.canUseTransOpenField(_vendTransOpen))
        {
            select sum(SettleAmountCur), sum(SettleAmountMST), sum(ExchAdjustment) from vendSettlement
                where vendSettlement.TransCompany == _vendTransOpen.company()
                    && vendSettlement.TransRecId == _vendTransOpen.RefRecId
                    && vendSettlement.AccountNum == _vendTransOpen.AccountNum
                    && vendSettlement.TransOpen == _vendTransOpen.RecId
                    && vendSettlement.TransDate <= toDate;
        }
        else
        {
            select sum(SettleAmountCur), sum(SettleAmountMST), sum(ExchAdjustment) from vendSettlement
                where vendSettlement.TransCompany == _vendTransOpen.company()
                    && vendSettlement.TransRecId == _vendTransOpen.RefRecId
                    && vendSettlement.AccountNum == _vendTransOpen.AccountNum
                    && vendSettlement.DueDate == _vendTransOpen.DueDate
                    && vendSettlement.TransDate <= toDate;
        }

        return [vendSettlement.SettleAmountCur, vendSettlement.SettleAmountMST, vendSettlement.ExchAdjustment];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseTransOpenField</Name>
				<Source><![CDATA[
    private boolean canUseTransOpenField(VendTransOpen _vendTransOpen)
    {
        // In order to find settlement for a specific vendTransOpen record,
        // VendSettlement.TransOpen field can be used for a link with VendTransOpen.
        // However, for old data in VendSettlement, they don't have a valid value in it.
        // Therefore, only when a vendSettlement record of which TransOpen has a value of VendTransOpen is found,
        // use a sql with TransOpen, otherwise, use a sql with a link of DueDate, which might not be uniqueness of this relationship.
        VendSettlement vendSettlement;

        select firstonly RecId from vendSettlement
            where vendSettlement.TransCompany == _vendTransOpen.company()
                && vendSettlement.TransRecId == _vendTransOpen.RefRecId
                && vendSettlement.AccountNum == _vendTransOpen.AccountNum
                && vendSettlement.TransOpen == _vendTransOpen.RecId;

        return vendSettlement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGeneralJournalAccountEntryQuery</Name>
				<Source><![CDATA[
    private Query buildGeneralJournalAccountEntryQuery(Query _orginalQuery)
    {
        /*
            Builds the following query

            select RecId, sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                   group by LedgerDimension
                   where generalJournalAccountEntry.PostingType == LedgerPostingType::VendBalance ||
                         (generalJournalAccountEntry.PostingType == LedgerPostingType::VendPurchLedger &&
                          !generalJournalAccountEntry.IsCredit)
                   exists join generalJournalEntry
                          where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                   exists join subledgerVoucherGeneralJournalEntry
                          where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                          subledgerVoucherGeneralJournalEntry.Voucher == vendTrans.Voucher &&
                          subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == vendTrans.DataAreaId &&
                          subledgerVoucherGeneralJournalEntryDS.AccountingDate == vendTrans.TransDate*/

        Query query = new Query();

        QueryBuildDataSource generalJournalAccountEntryDS = query.addDataSource(tableNum(GeneralJournalAccountEntry));
        generalJournalAccountEntryDS.addRange(fieldNum(GeneralJournalAccountEntry, PostingType)).value(
                            strFmt('(%1.%2 == %3) || ((%1.%2 == %4) && (%1.%5 == %6))',
                            generalJournalAccountEntryDS.name(),
                            fieldStr(GeneralJournalAccountEntry, PostingType),
                            enum2int(LedgerPostingType::VendBalance),
                            enum2int(LedgerPostingType::VendPurchLedger),
                            fieldStr(GeneralJournalAccountEntry, IsCredit),
                            enum2int(NoYes::No)));

        generalJournalAccountEntryDS.addGroupByField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        generalJournalAccountEntryDS.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        generalJournalAccountEntryDS.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        generalJournalAccountEntryDS.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);

        QueryBuildDataSource generalJournalAccontEntryDS2 = _orginalQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        QueryBuildRange originalRange;

        for (int i = 1; i <= generalJournalAccontEntryDS2.rangeCount(); i++)
        {
            originalRange = generalJournalAccontEntryDS2.range(i);

            if (originalRange.field() != fieldNum(GeneralJournalAccountEntry, PostingType))
            {
                generalJournalAccountEntryDS.addRange(originalRange.field()).value(originalRange.value());
            }
        }

        QueryBuildDataSource generalJournalEntryDS = generalJournalAccountEntryDS.addDataSource(tableNum(GeneralJournalEntry));
        generalJournalEntryDS.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
        generalJournalEntryDS.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource subledgerVoucherGeneralJournalEntryDS = generalJournalEntryDS.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        subledgerVoucherGeneralJournalEntryDS.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry));
        subledgerVoucherGeneralJournalEntryDS.joinMode(JoinMode::ExistsJoin);

        subledgerVoucherGeneralJournalEntryDS.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));
        subledgerVoucherGeneralJournalEntryDS.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId));
        subledgerVoucherGeneralJournalEntryDS.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>