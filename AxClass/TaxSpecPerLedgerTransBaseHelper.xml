<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransBaseHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base Class containing helper methods for processing TaxSpecPerLedgerTrans report.
/// </summary>
public class TaxSpecPerLedgerTransBaseHelper
{
    UserConnection userConnection;
    TaxSpecPerLedgerTransTmp reportTable;
    TaxSpecPerLedgerTransContract contract;

    TransDate fromDate;
    TransDate ToDate;
    TransDate fromVATDate;
    TransDate toVATDate;
    MainAccountNum fromMainAccount;
    MainAccountNum toMainAccount;
    TaxCode fromTaxCode;
    TaxCode toTaxCode;
    LedgerRecId ledgerRecId;
    Query reportQuery;

    protected boolean isReportByAccTypeExpenditureFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerReportByAccTypeExpenditureFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes ranges with default values if values are not provided.
    /// </summary>
    protected void initializeRanges()
    {
        MainAccount mainAccount;
        TaxTable taxTable;

        toDate = contract.parmToDate();

        if (toDate == dateNull())
        {
            toDate = dateMax();
        }

        toVATDate = contract.parmToVATDate();

        if (toVATDate == dateNull())
        {
            toVATDate = dateMax();
        }

        fromVATDate = contract.parmFromVATDate();

        if (!TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            fromVATDate = dateNull();
            toVATDate = dateMax();
        }

        fromDate = contract.parmFromDate();

        fromMainAccount = contract.parmFromMainAccount();

        if (fromMainAccount == '')
        {
            select firstOnly mainAccountid from mainAccount
                order by mainAccountid asc;

            fromMainAccount = mainAccount.MainAccountId;
        }

        toMainAccount = contract.parmToMainAccount();

        if (toMainAccount == '')
        {
            select firstOnly mainAccountid from mainAccount
                order by mainAccountid desc;

            toMainAccount = mainAccount.MainAccountId;
        }

        fromTaxCode = contract.parmFromTaxCode();

        if (fromTaxCode == '')
        {
            select firstonly TaxCode from taxtable
            order by TaxCode asc;

            fromTaxCode = taxTable.TaxCode;
        }

        toTaxCode = contract.parmToTaxCode();

        if (toTaxCode == '')
        {
            select firstOnly TaxCode from taxTable
            order by TaxCode desc;

            toTaxCode = taxTable.TaxCode;
        }

        ledgerRecId = Ledger::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportContract</Name>
				<Source><![CDATA[
    public TaxSpecPerLedgerTransContract parmReportContract(TaxSpecPerLedgerTransContract _contract = contract)
    {
        contract = _contract;
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportQuery</Name>
				<Source><![CDATA[
    public Query parmReportQuery(Query _query = reportQuery)
    {
        reportQuery = _query;
        return reportQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTable</Name>
				<Source><![CDATA[
    public TaxSpecPerLedgerTransTmp parmReportTable(TaxSpecPerLedgerTransTmp _temp = reportTable)
    {
        reportTable = _temp;
        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserConnection</Name>
				<Source><![CDATA[
    public UserConnection parmUserConnection(UserConnection _userConnection = userConnection)
    {
        userConnection = _userConnection;
        return userConnection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the business logic for the report and fill the report temp table.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// This method should be overriden by the implementing classes.
    /// </exception>
    public void process()
    {
        throw error (error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRecordNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates row number for the records in the table based on partitioning logic.
    /// </summary>
    /// <param name="_physicalTableName">
    /// The name of the table.
    /// </param>
    protected void updateRecordNumbers(str _physicalTableName)
    {
        str directSQL;
        Statement statement;

        directSQl = 'UPDATE A SET RECORDNUMBER = A.rn ';
        directSQL += 'FROM ( ';
        directSQL += 'SELECT ROW_NUMBER() OVER (PARTITION BY ';

        if (contract.parmGroupDataBy() == TaxSpecPerLedgerTransGroupBy::SalesTaxCode || contract.parmSubtotalByTaxCode())
        {
            directSQL += ' TAXCODE ,';
        }

        if (contract.parmMainAccountOnly())
        {
            directSQL += ' MAINACCOUNT ';
        }
        else
        {
            directSQL += ' FULLYQUALIFIEDACCOUNT ';
        }

        directSQL += ', GENERALJOURNALENTRY, GENERALJOURNALACCOUNTENTRY ORDER BY GENERALJOURNALACCOUNTENTRY) AS rn, RECORDNUMBER FROM ';
        directSQL += strFmt(' %1', _physicalTableName);
        directSQL += ') A ';

        new SqlStatementExecutePermission(directSQL).assert();
        statement = userConnection.createStatement();
        statement.executeUpdateWithParameters(directSQL, SqlParams::create());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMainAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update main account name in the <c>TaxSpecPerLedgerTransTmp</c> temporary table based on the MainAccountRecId field
    /// </summary>
    protected void updateMainAccountName()
    {
        LanguageId              languageId;
        MainAccountTranslation  mainAccountTranslation;

        languageId = DimensionCache::currentDimensionValueLanguageId();

        if (languageId)
        {
            update_recordSet reportTable
                setting Name = mainAccountTranslation.Name
                where reportTable.MainAccountRecId != 0
                join Name from mainAccountTranslation
                    where mainAccountTranslation.MainAccount == reportTable.MainAccountRecId 
                        && mainAccountTranslation.LanguageId == languageId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>