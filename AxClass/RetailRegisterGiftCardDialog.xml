<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRegisterGiftCardDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailRegisterGiftCardDialog</c> class.
/// </summary>
internal class RetailRegisterGiftCardDialog extends RunBase
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private DialogField dialogGiftCardNumber;
    private DialogField dialogPin;
    private DialogField dialogExpiration;

    private str giftCardNumber;
    private str pin;
    private str expiration;
    private WMSOrderTrans wmsOrderTrans;
    private container bestFirstMatch;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        giftCardNumber,
        pin,
        expiration,
        wmsOrderTrans
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super();

        dialog.caption("@Retail:RegisterGiftCardNumber");

        dialogGiftCardNumber = dialog.addField(extendedTypeStr(String30), "@SYS13864");
        dialogGiftCardNumber.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(RetailRegisterGiftCardDialog, giftCardNumberModified), this);
        dialogPin = dialog.addField(extendedTypeStr(String10), "@Retail:RetailPin");
        dialogExpiration = dialog.addField(extendedTypeStr(String10), "@Retail:RetailExpiration");
        dialogExpiration.helpText( "@Retail:RetailExpirationFormatHelp");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Main</Name>
				<Source><![CDATA[
    public static void Main(Args _args)
    {
        WMSOrderTrans localWMSOrderTrans;
        CreditCardAuthTrans creditCardAuthTrans;
        SalesTable salesTable;
        SalesLine salesLine;
        MCRSalesLine mcrSalesLine;
        RetailExternalGiftCard retailExternalGiftCard;


        if (_args.record().TableId == tableNum(WMSOrderTrans))
        {
            localWMSOrderTrans = _args.record();
            salesLine = SalesLine::findInventTransId(localWMSOrderTrans.InventTransId);

            RetailRegisterGiftCardDialog dialog = new RetailRegisterGiftCardDialog(localWMSOrderTrans);
 
            if(dialog.prompt())
            {
                // Activate gift card for amount
                salesTable = SalesTable::find(salesLine.SalesId);
                retailExternalGiftCard = new RetailExternalGiftCard();
                retailExternalGiftCard.CardNumber = dialog.getGiftCardNumber();
                retailExternalGiftCard.Pin = dialog.getPin();
                retailExternalGiftCard.Expiration = dialog.getExpiration();
                retailExternalGiftCard.ActivationProcessorsRecId = conPeek(dialog.getBestFirstMatch(), 4);
                retailExternalGiftCard.RequirePin = conPeek(dialog.getBestFirstMatch(), 2);
                retailExternalGiftCard.RequireExpirationDate = conPeek(dialog.getBestFirstMatch(), 3);
                retailExternalGiftCard.ActivationSalesLineRecId = salesLine.RecId;

                RetailActivationResult result = CreditCardProcess::doActivation(salesTable, retailExternalGiftCard, salesLine.LineAmount);
                
                if (!result.Success)
                {
                    eventSource.EventWritePaymentsRetailRegisterGiftCardDialogActivationFailed();
                    return;
                }

                // Update MCRSaleLine.giftcard number
                creditCardAuthTrans = RetailActivationLinkTable::findLatestGiftCardActivation(salesLine.RecId);

                if (creditCardAuthTrans)
                {
                    mcrSalesLine = MCRSalesLine::findSalesLine(salesLine.RecId, true);

                    ttsbegin;
                    mcrSalesLine.GiftCardNumber = MCRGiftCard::maskCardNum(dialog.getGiftCardNumber());
                    mcrSalesLine.GiftCardExpiration = dialog.getExpiration();
                    mcrSalesLine.update();
                    ttscommit;
                    eventSource.EventWritePaymentsRetailRegisterGiftCardDialogActivationRecorded(mcrSalesLine.RecId);
                }
                else
                {
                    eventSource.EventWritePaymentsRetailRegisterGiftCardDialogActivationFailedToFindAuthTranForSalesLine(mcrSalesLine.RecId);
                }
            }
        }
        else
        {
            throw error("@Retail:RetailDialogDoesNotSupportPassedTable");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftCardNumber</Name>
				<Source><![CDATA[
    public str getGiftCardNumber()
    {
        return giftCardNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPin</Name>
				<Source><![CDATA[
    public str getPin()
    {
        return pin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiration</Name>
				<Source><![CDATA[
    public str getExpiration()
    {
        return expiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBestFirstMatch</Name>
				<Source><![CDATA[
    public container getBestFirstMatch()
    {
        return bestFirstMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ok = super();

        giftCardNumber = dialogGiftCardNumber.value();
        pin = dialogPin.value();
        expiration = dialogExpiration.value();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giftCardNumberModified</Name>
				<Source><![CDATA[
    private boolean giftCardNumberModified(FormStringControl _control)
    {
        boolean ret = _control.modified();

        SalesLine salesLine;
        MCRSalesLine mcrSalesLine;
        SalesTable salesTable;
        RetailSalesTable retailSalesTable;
        RetailStoreTenderTypeTable retailStoreTenderTypeTable;
        RetailStoreTenderTypeCardTable retailStoreTenderTypeCardTable;
        RetailTenderTypeCardTable retailTenderTypeCardTable;
        RetailTenderTypeCardNumbers retailTenderTypeCardNumbers;
        CreditCardAccountSetup creditCardAccountSetup;
        CreditCardProcessors creditCardProcessors;
        str transGiftCardItemId = wmsOrderTrans.ItemId;
        bestFirstMatch = [0, false, false, 0];

        // Get all bin ranges for gift card that uses the gift card number entered
        while 
            select SalesId, InventTransId, CurrencyCode, RecId from salesLine
                where salesLine.InventTransId == wmsOrderTrans.InventTransId
            join SalesLine, GiftCardType from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
            join SalesId, RecId from salesTable
                where salesTable.SalesId == salesLine.SalesId
            join ChannelReferenceId, SalesTable from retailSalesTable
                where retailSalesTable.SalesTable == salesTable.RecId
            join GiftCardItemId, ConnectorName, Channel, tenderTypeId from retailStoreTenderTypeTable
                where retailStoreTenderTypeTable.GiftCardItemId == transGiftCardItemId
                && retailStoreTenderTypeTable.ConnectorName != ''
                && retailStoreTenderTypeTable.Channel == retailSalesTable.RetailChannel
            join tenderTypeId, Channel, cardTypeId, IsPinRequired, IsExpirationDateRequired from retailStoreTenderTypeCardTable
                where retailStoreTenderTypeCardTable.tenderTypeId == retailStoreTenderTypeTable.tenderTypeId
                && retailStoreTenderTypeCardTable.Channel == retailSalesTable.RetailChannel
            join cardTypeId, cardTypes from retailTenderTypeCardTable
                where retailTenderTypeCardTable.cardTypeId == retailStoreTenderTypeCardTable.cardTypeId
                && retailTenderTypeCardTable.cardTypes == RetailCardTypesBase::GiftCard
            join cardNumberFrom, cardNumberTo, cardNumberLength, cardTypeId from retailTenderTypeCardNumbers
                where retailTenderTypeCardNumbers.cardTypeId == retailStoreTenderTypeCardTable.cardTypeId
            join ConnectorName, CreditCardProcessors, SecureMerchantProperties from creditCardAccountSetup
                where creditCardAccountSetup.ConnectorName == retailStoreTenderTypeTable.ConnectorName
            join RecId from creditCardProcessors
                where creditCardProcessors.RecId == creditCardAccountSetup.CreditCardProcessors
        {
            // Find first best bin range and test merchant properties
            if (retailTenderTypeCardNumbers.cardNumberLength > conPeek(bestFirstMatch, 1) && retailTenderTypeCardNumbers.cardNumberLength <= strLen(_control.valueStr()))
            {
                str trimmedCardNumber = subStr(_control.valueStr(), 1, retailTenderTypeCardNumbers.cardNumberLength);

                if (retailTenderTypeCardNumbers.cardNumberFrom <= trimmedCardNumber && retailTenderTypeCardNumbers.cardNumberTo >= trimmedCardNumber)
                {
                    // Get merchant properties to check it supports required settings
                    var merchant = creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(false, '');
                    CreditCardPaymentProperties properties = CreditCardPaymentProperties::fromXmlString(merchant);

                    CreditCardPaymentProperty property = properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.MerchantAccountProperties::SupportedCurrencies);
                    str supportedCurrencies = property ? ';' + property.parmStringValue() + ';' : '';

                    // Check this connector supports the required currency
                    if (supportedCurrencies != '' && strScan(supportedCurrencies, ';' + salesLine.CurrencyCode + ';', 1, strLen(supportedCurrencies) ))
                    {
                        property = properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.MerchantAccountProperties::SupportedTenderTypes);
                        str supportedTenderTypes = property ? ';' + property.parmStringValue() + ';' : '';

                        // Check this connector supports GiftCard
                        if (supportedTenderTypes != '' && strScan(supportedTenderTypes, ';' + Microsoft.Dynamics.Retail.PaymentSDK.Portable.CardType::GiftCard.ToString() + ';', 1, strLen(supportedTenderTypes) ))
                        {
                            bestFirstMatch = [retailTenderTypeCardNumbers.cardNumberLength, retailStoreTenderTypeCardTable.IsPinRequired , retailStoreTenderTypeCardTable.IsExpirationDateRequired, creditCardProcessors.RecId];
                        }
                    }
                }
            }
        }

        if (conPeek(bestFirstMatch, 1) > 0)
        {
            dialogPin.enabled(conPeek(bestFirstMatch, 2));
            dialogExpiration.enabled(conPeek(bestFirstMatch, 3));
        }
        else
        {
            throw error("@Retail:RetailGiftCardNumberNotMatched");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <see cref="M:RunBase.unpack" /> method returns false, the <see
    ///    cref="M:RunBase.initParmDefault" /> method will be called. Normally, this method should not be
    ///    overridden.
    /// </remarks>
    public void getLast()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(WMSOrderTrans _wmsOrderTrans)
    {
        super();

        wmsOrderTrans = _wmsOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the RetailRegisterGiftCardDialog class.
    /// </summary>
    /// <returns>A container that contains the current instance of the RetailRegisterGiftCardDialog class.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>RunBase.pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not be overridden.
    /// </remarks>
    public void saveLast()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass"/> parameter to the current instance of the RetailRegisterGiftCardDialog class.
    /// </summary>
    /// <param name = "_packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container _packedClass)
    {

        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (!super(_calledFrom))
        {
            return false;
        }

        giftCardNumber = strLTrim(strRTrim(giftCardNumber));

        // Pin is blank and blank is not allowed
        if (giftCardNumber == '')
        {
            checkFailed("@Retail:RetailGiftCardNumberEmpty");
            return false;
        }
        else
        {
            if (conPeek(bestFirstMatch, 1) > 0)
            {
                if (conPeek(bestFirstMatch, 2) && dialogPin.value() == '')
                {
                    checkFailed("@Retail:RetailGiftCardPinRequired");
                    return false;
                }

                if (conPeek(bestFirstMatch, 3))
                {
                    if (!MCRGiftCard::validateExternalGiftCardExpiration(expiration))
                    {
                        return false;
                    }
                }
            }
            else
            {
                checkFailed("@Retail:RetailGiftCardNumberNotMatched");
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>