<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorPostInventoryTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRuntimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

internal class RetailDocumentOperationProcessorPostInventoryTransfer extends RetailDocumentOperationProcessorInventoryJournalBase
{
    protected InventLocation defaultInventLocationReceiver;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a class of the <c>RetailDocumentOperationProcessorPostInventoryTransfer</c> class.
    /// </summary>
    /// <param name="_parameters">
    /// The <c>RetailDocumentOperationProcessorParameters</c> instance.
    /// </param>
    /// <returns>
    /// The new instance of an <c>RetailDocumentOperationProcessorPostInventoryTransfer</c> subclass.
    /// </returns>
    public static RetailDocumentOperationProcessorPostInventoryTransfer construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        var processor = new RetailDocumentOperationProcessorPostInventoryTransfer(_parameters);
        processor.isRetriable = false;
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init default inventpry location based on document sender and receiver.
    /// </summary>
    protected void initDefaultInventLocation()
    {
        CommerceRuntimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRuntimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        CommerceRuntimeDataModel.InventoryInboundOutboundSourceDocument sourceDocument = document.SourceDocument;

        str defaultSender;
        str defaultReceiver;

        if (sourceDocument)
        {
            defaultSender = sourceDocument.Sender;
            defaultReceiver = sourceDocument.Receiver;
        }
        else
        {
            defaultSender = document.Sender;
            defaultReceiver = document.Receiver;
        }

        this.defaultInventLocation = InventLocation::find(defaultSender);
        this.defaultInventLocationReceiver = InventLocation::find(defaultReceiver);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalSerialNumberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document serial number line.
    /// </summary>
    /// <param name = "_serialNumberline">The journal document serial number line.</param>
    /// <param name = "_lineInventDim">The <c>InventDim</c> used by journal document line.</param>
    /// <param name = "_inventJournalTrans">The inventory journal transaction.</param>
    protected void createOrUpdateJournalSerialNumberLine(CommerceRuntimeDataModel.InventoryDocumentSerialNumberLine _serialNumberline, InventDim _lineInventDim, InventJournalTrans _inventJournalTrans)
    {
        InventDim lineInventDim;
        lineInventDim = lineInventDim.data(_lineInventDim);
        str serialNumberLineInventSerialId = _serialNumberline.SerialNumber;
        InventQty qty = _serialNumberline.Quantity;

        InventDim fromInventDim = InventDim::find(_inventJournalTrans.InventDimId);
        fromInventDim.inventSerialId = serialNumberLineInventSerialId;
        fromInventDim = InventDim::findOrCreate(fromInventDim);

        InventDim toInventDim = InventDim::find(_inventJournalTrans.ToInventDimId);
        toInventDim.inventSerialId = serialNumberLineInventSerialId;
        toInventDim = InventDim::findOrCreate(toInventDim);

        this.pickupLine(_inventJournalTrans, fromInventDim, qty);
        this.registerLine(_inventJournalTrans, toInventDim, qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateToInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document serial number line.
    /// </summary>
    /// <param name="_line">
    /// The inventory inbound outbound document line.
    /// </param>
    /// <param name="_inventJournalTrans">
    /// The <c>InventJournalTrans</c>.
    /// </param>
    /// <param name="_lineInventDim">
    /// The <c>InventDim</c> of <c>InventJournalTrans</c>.
    /// </param>
    protected void createOrUpdateToInventDimId(CommerceRuntimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, InventDim _lineInventDim)
    {
        CommerceRuntimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceLine = _line.SourceDocumentLine;
        InventDim toInventDim;

        str itemId;
        RecId productId =  sourceLine != null ? sourceLine.ProductId : _line.ProductId;

        EcoResDistinctProduct product = EcoResDistinctProduct::find(productId);

        if (!product.isDistinctProduct())
        {
            InventDimCombination inventDimCombination = InventDimCombination::findByDistinctProductVariant(productId);

            InventDim tmpInventDim = inventDimCombination.inventDim();
            toInventDim.configId = tmpInventDim.configId;
            toInventDim.InventColorId = tmpInventDim.InventColorId;
            toInventDim.InventSizeId = tmpInventDim.InventSizeId;
            toInventDim.InventStyleId = tmpInventDim.InventStyleId;

            itemId = inventDimCombination.ItemId;
        }
        else
        {
            InventTable inventTable = InventTable::findByProduct(productId);
            itemId = inventTable.ItemId;
        }

        toInventDim.InventLocationId = this.defaultInventLocationReceiver.InventLocationId;
        toInventDim.inventSiteId = this.defaultInventLocationReceiver.InventSiteId;

        EcoResStorageDimensionGroupRecId storageTrackingDimensionGroup = InventTable::find(itemId).storageDimensionGroup();
        EcoResStorageDimensionGroupFldSetup storageDimensionGroupFldSetup = EcoResStorageDimensionGroupFldSetup::findByDimensionGroupFieldId(storageTrackingDimensionGroup, fieldNum(InventDim, WMSLocationId));

        boolean isItemLocationActive = storageDimensionGroupFldSetup.IsActive;
        if (isItemLocationActive)
        {
            // If the item is storage tracking dimension location active, we set wmsLocationId for it. Otherwise leave it blank.
            toInventDim.wmsLocationId = _line.ToLocationId != '' ? _line.ToLocationId : InventLocation::find(defaultInventLocationReceiver.InventLocationId).WMSLocationIdDefaultReceipt;
        }

        toInventDim = InventDim::findOrCreate(toInventDim);

        _inventJournalTrans.ToInventDimId = toInventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get quantity to update from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name="_line">
    /// The <c>InventoryInboundOutboundDocumentLine</c>.
    /// </param>
    /// <returns>The quantity to update.</returns>
    protected InventQtyJournal getQuantityToUpdate(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        return -_line.QuantityToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles registration of the retail inventory journal line.
    /// </summary>
    /// <param name="_line">
    /// The inventory journal line.
    /// </param>
    /// <param name="_inventDimRegister">
    /// The new inventory dimensions.
    /// </param>
    /// <param name="_registerQty">
    /// The quantity of the inventory journal line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Inventory transaction is changed.
    /// </exception>
    protected void registerLine(InventJournalTrans _line, InventDim _inventDimRegister, InventQty _registerQty)
    {
        InventDim                       inventDimRegister;
        InventDimParm                   inventDimParmTransferDim;

        ttsbegin;
        InventMovement inventMovement = InventMovement::construct(_line, InventMovSubType::TransferReceipt);
        inventDimRegister.data(_inventDimRegister);

        // We must create a license plate if we are receiving into a licensePlate controlled location
        if (WHSInventEnabled::exist(_line.ItemId) && inventDimRegister.wmsLocation().isWHSEnabled())
        {
            inventDimRegister = RetailTransferOrderHandler::ensureValidLPAndLocationCombination(inventDimRegister);
        }

        // Used for searching out the transactions to update
        inventDimParmTransferDim.initDimTransferReceipt(_inventDimRegister);

        // Clear lp since we don't know if we have it in the transactions we select to update
        inventDimParmTransferDim.LicensePlateFlag   = NoYes::No;

        // Registration will select transactions to update
        InventUpd_Registered inventUpd_Registered = InventUpd_Registered::newParameters(inventMovement, inventDimRegister, inventDimParmTransferDim, inventDimRegister, inventDimParmTransferDim, _registerQty);
        inventUpd_Registered.updateNow();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>