<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceCapInvInvoiceJournalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;
using Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper;

internal final class VendInvoiceCapInvInvoiceJournalProcessor extends VendInvoiceCapInvTransferProcessorBase
{
    private const LedgerJournalType ledgerJournalType = LedgerJournalType::VendInvoiceRegister;
    private DueDate headerDueDate = dateNull();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transferInvoice</Name>
				<Source><![CDATA[
    public void transferInvoice()
    {
        this.checkLegalEntityValidity();

        ttsbegin;
        changecompany(this.dataAreaId)
        {
            VendInvoiceJournalHeaderEntity header = this.createInvoiceHeader();
            this.createInvoiceJournalLines(header);
            if (this.transferAttachment == NoYes::Yes && this.capturedAttachment)
            {
                this.createAttachment(header);
            }

            if (VendInvoiceCapturedInvoiceInfoQueryStringFlight::instance().isEnabled())
            {
                this.updateQueryString(header);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceHeader</Name>
				<Source><![CDATA[
    private VendInvoiceJournalHeaderEntity createInvoiceHeader()
    {
        VendInvoiceJournalHeaderEntity entity;
        entity.JournalName  = this.getJournalName(LedgerJournalType::VendInvoiceRegister);
        entity.insert();

        JArray entityAttributes = this.getEntityAttributes(capturedDocument.SelectToken("$.VendorInvoiceHeader"));

        if (VendInvoiceCapInvInvoiceJournalProcessorDueDateFlight::instance().isEnabled())
        {
            System.Collections.IEnumerator iterator = entityAttributes.GetEnumerator();
            while (iterator.MoveNext())
            {
                JObject attribute = iterator.Current;
                str propName = this.getPropertyNameFromJObject(attribute);
                switch (propName)
                {
                    case "vis_duedate":
                        headerDueDate = this.getDateFromJObjectValue(attribute);
                        break;
                }
            }
        }

        VendInvoiceCapInvDataUpdateHandler::updateInvoiceJournalHeader(entity, entityAttributes);

        return entity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJournalLines</Name>
				<Source><![CDATA[
    private void createInvoiceJournalLines(VendInvoiceJournalHeaderEntity header)
    {
        VendInvoiceJournalLineEntity entity;
        entity.JournalBatchNumber = header.JournalBatchNumber;
        entity.Approved = true;
        entity.AccountType = LedgerJournalACType::Vend;
        entity.Company = header.DataAreaId;
        entity.LineNumber = 1.0000000000000000;
        entity.TransactionType = LedgerTransType::Vend;

        if (VendInvoiceCapInvInvoiceJournalProcessorDueDateFlight::instance().isEnabled() && headerDueDate != dateNull())
        {
            entity.DueDate = headerDueDate;
        }

        VendAccount vendorAccountId;
        JArray entityAttributes = this.getEntityAttributes(capturedDocument.SelectToken("$.VendorInvoiceHeader"));
        System.Collections.IEnumerator iterator = entityAttributes.GetEnumerator();
        while (iterator.MoveNext())
        {
            JObject attribute = iterator.Current;
            str propName = this.getPropertyNameFromJObject(attribute);
            switch (propName)
            {
                case "vis_vendoraccount":
                    vendorAccountId = this.getStrFromJObjectValue(attribute);
                    entity.AccountDisplayValue = strReplace(vendorAccountId, "-", "\\-");
                    break;
                case "vis_invoicenumber":
                    entity.Invoice = this.getStrFromJObjectValue(attribute);
                    break;
                case "vis_currencycode":
                    entity.Currency = this.getStrFromJObjectValue(attribute);
                    break;
                case "vis_invoicedate":
                    entity.InvoiceDate = this.getDateFromJObjectValue(attribute);
                    break;
                case "vis_totaldue":
                    if (VendInvoiceCapInvInvoiceJournalCreditErrorFlight::instance().isEnabled())
                    {
                        this.processTotalAmount(entity, this.getRealFromJObjectValue(attribute));
                    }
                    else
                    {
                        entity.Credit = this.getRealFromJObjectValue(attribute);
                    }
                    break;
                case "vis_paymentterms":
                    entity.TermsOfPayment = this.getStrFromJObjectValue(attribute);
                    break;
                case "vis_businessunit":
                    this.insertToDimensionMap("BusinessUnit", this.getStrFromJObjectValue(attribute));
                    break;
                case "vis_costcenter":
                    this.insertToDimensionMap("CostCenter", this.getStrFromJObjectValue(attribute));
                    break;
                case "vis_department":
                    this.insertToDimensionMap("Department", this.getStrFromJObjectValue(attribute));
                    break;
            }
        }
        
        str dimensionValue = this.getDefaultDimensionValue();
        if (dimensionValue)
        {
            entity.DefaultDimensionDisplayValue = dimensionValue;
        }
        
        entity.insert();
        VendInvoiceCapInvDataUpdateHandler::updateInvoiceJournalLine(entity, entityAttributes);

        this.applyDefaultValueForLedgerJournalTrans(entity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTotalAmount</Name>
				<Source><![CDATA[
    private void processTotalAmount(VendInvoiceJournalLineEntity _entity, real _amount)
    {
        if (_amount < 0)
        {
            VendParameters vendParameters;
            select CreditError from vendParameters;
            if (vendParameters.CreditError == NoYes::Yes)
            {
                _entity.Credit = _amount;
            }
            else
            {
                _entity.Debit = -_amount;
            }
        }
        else
        {
            _entity.Credit = _amount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDefaultValueForLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void applyDefaultValueForLedgerJournalTrans(VendInvoiceJournalLineEntity entity)
    {
        LedgerJournalTrans ledgerJournalTrans;
        select forupdate firstonly * from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == entity.JournalBatchNumber
            && ledgerJournalTrans.LineNum == entity.LineNumber;

        var ledgerJournalEngine = LedgerJournalEngine::construct();
        ledgerJournalEngine.accountNumModified(ledgerJournalTrans);
        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);
        ledgerJournalTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAttachment</Name>
				<Source><![CDATA[
    private void createAttachment(VendInvoiceJournalHeaderEntity header)
    {
        JObject attachment = capturedDocument.SelectToken("$.VendorInvoiceDocumentAttachment");
        LedgerJournalAttachmentsEntity entity;
        
        entity.JournalBatchNumber = header.JournalBatchNumber;
        entity.TypeId            = this.getDocuTypeId();
        entity.FileContents = this.capturedAttachment;
        entity.Name               = this.getStrFromJObject(attachment, "Name");
        entity.DefaultAttachment  = this.getNoYesFromJObject(attachment, "DefaultAttachment");
        entity.FileType = this.getStrFromJObject(attachment, "FileType");
        entity.FileName = this.getStrFromJObject(attachment, "FileName");
        entity.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryString</Name>
				<Source><![CDATA[
    private void updateQueryString(VendInvoiceJournalHeaderEntity header)
    {
        RequestQueryParameterCollection queryParameters = new RequestQueryParameterCollection();
        queryParameters.AddRequestQueryParameter(tableStr(LedgerJournalTable), fieldStr(LedgerJournalTable, JournalNum), header.JournalBatchNumber);
        infoEntity.QueryString = VendInvoiceCapturedInvoiceInfoEntity::generateQueryString(menuItemDisplayStr(LedgerJournalTable9), queryParameters);
        infoEntity.RefTableId = tableNum(LedgerJournalTable);
        infoEntity.RefRecId = header.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>