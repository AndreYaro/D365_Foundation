<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjGrantFormManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjGrantFormManager</c> class provides the grant management functionality.
/// </summary>
public class ProjGrantFormManager
{
    ProjGrant sourceProjGrant;
    ProjGrantFormManager manager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyGrant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the records in the <c>ProjGrant</c> table and the <c>ProjGrantFrequency</c> table.
    /// </summary>
    /// <param name="_newGrantId">
    ///    The <c>GrantId</c> field to copy.
    /// </param>
    /// <param name="_newGrantName">
    ///    The <c>GrantName</c> field to copy.
    /// </param>
    public void copyGrant(ProjGrantId _newGrantId , ProjGrantName _newGrantName)
    {
        ProjGrant                   projGrantTarget;
        ProjGrantFrequency          projGrantFrequencyTarget;
        ProjGrantFrequency          projGrantFrequencySource;
        ProjGrantCustomerContact    projGrantCustomerContactSource;
        ProjGrantCustomerContact    projGrantCustomerContactTarget;

        if (!sourceProjGrant)
        {
            throw error(strfmt("@SYS25516",funcname()));
        }

        projGrantTarget.data(sourceProjGrant);
        projGrantTarget.GrantId               = _newGrantId;
        projGrantTarget.GrantName             = _newGrantName;
        projGrantTarget.GrantApplicationId    = '';
        projGrantTarget.GrantStatus           = ProjGrantStatus::Entered;
        projGrantTarget.RequestedAmount       = 0;
        projGrantTarget.AwardedAmount         = 0;

        ttsbegin;
        projGrantTarget.insert();

        while select Frequency, FrequencyComments from  projGrantFrequencySource
        where projGrantFrequencySource.ProjGrant == sourceProjGrant.RecId
        {
            projGrantFrequencyTarget.Frequency            = projGrantFrequencySource.Frequency;
            projGrantFrequencyTarget.FrequencyComments    = projGrantFrequencySource.FrequencyComments;
            projGrantFrequencyTarget.ProjGrant            = projGrantTarget.RecId;
            projGrantFrequencyTarget.insert();
        }

        while select projGrantCustomerContactSource
        where projGrantCustomerContactSource.ProjGrant == sourceProjGrant.RecId
        {
            projGrantCustomerContactTarget.ProjGrant = projGrantTarget.RecId;
            projGrantCustomerContactTarget.LogisticsElectronicAddress = projGrantCustomerContactSource.LogisticsElectronicAddress;
            projGrantCustomerContactTarget.insert();
        }

        ttscommit;

        if (projGrantTarget.RecId)
        {
            info("@SYS329029");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyGrantTypeFrequency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the <c>ProjGrantTypeFrequency</c> table records.
    /// </summary>
    public void copyGrantTypeFrequency()
    {
        ProjGrantTypeFrequency  projGrantTypeFrequency;
        ProjGrantFrequency      projGrantFrequency;

        ttsbegin;
        delete_from projGrantFrequency
        where projGrantFrequency.ProjGrant == sourceProjGrant.RecId;

        while select Frequency,Comments from projGrantTypeFrequency
        where projGrantTypeFrequency.ProjGrantType == sourceProjGrant.ProjGrantType
        {
            projGrantFrequency.Frequency            = projGrantTypeFrequency.Frequency;
            projGrantFrequency.FrequencyComments    = projGrantTypeFrequency.Comments;
            projGrantFrequency.ProjGrant            = sourceProjGrant.RecId;
            projGrantFrequency.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGrantMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields of the <c>ProjGrant</c> table from the <c>ProjGrantMatching</c> table.
    /// </summary>
    public void initFromGrantMatching()
    {
        ProjGrantMatching projGrantMatching ;

        projGrantMatching                       = ProjGrantMatching::find(sourceProjGrant.ProjGrantMatching);

        sourceProjGrant.MatchingPercentage      = projGrantMatching.MatchingPercentage;
        sourceProjGrant.GrantMatchingComments   = projGrantMatching.Comments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGrantType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the fields of the <c>ProjGrant</c> table from the <c>ProjGrantType</c> table.
    /// </summary>

    public void initFromGrantType()
    {
        ProjGrantType projGrantType                 =  ProjGrantType::find(sourceProjGrant.ProjGrantType);

        if (!projGrantType)
        {
            throw error(strfmt("@SYS25516",funcname()));
        }

        sourceProjGrant.GrantManagerWorker          = projGrantType.GrantManagerWorker;
        sourceProjGrant.WorkerContact               = projGrantType.WorkerContact;
        sourceProjGrant.OrganizationUnitId          = projGrantType.OrganizationUnitId;
        sourceProjGrant.StateMandate                = projGrantType.StateMandate;
        sourceProjGrant.SubGrantor                  = projGrantType.SubGrantor;
        sourceProjGrant.FederalMandate              = projGrantType.FederalMandate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number sequence code used for grant ID.
    /// </summary>
    /// <returns>
    ///    The number sequence code used for grant ID.
    /// </returns>
    static NumberSequenceCode numberSequenceCode()
    {
        return NumberSequenceTable::find(ProjParameters::numRefGrantId().NumberSequenceId).NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumberSeqManual</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the number sequence used for grant IDs is set up to be manual.
    /// </summary>
    /// <returns>
    ///    true if the number sequence is set up to be manual; otherwise, false.
    /// </returns>
    public static boolean isNumberSeqManual()
    {
        return NumberSequenceTable::findByNaturalKey(ProjGrantFormManager::numberSequenceCode()).Manual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjGrant</c> table buffer.
    /// </summary>
    /// <param name="_projGrant">
    ///    The source <c>ProjGrant</c> table buffer to use to initialize the <c>ProjGrant</c> table buffer.
    /// </param>
    protected void new(ProjGrant _projGrant)
    {
        sourceProjGrant = _projGrant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjGrant</Name>
				<Source><![CDATA[
    public ProjGrant parmProjGrant(ProjGrant __projGrant = sourceProjGrant)
    {
        sourceProjGrant = __projGrant;

        return sourceProjGrant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjGrantFormManager construct(ProjGrant _projGrant)
    {
        ProjGrantFormManager manager;

        manager = new ProjGrantFormManager(_projGrant);

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAllowableGrant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>GrantId</c>, <c>GrantName</c>, <c>GrantStatus</c>, and <c>AwardedAmount</c> fields
    ///    of the <c>ProjGrant</c> table.
    /// </summary>
    /// <param name="_ctrl">
    ///    A <c>FormStringControl</c> class object to enable the lookup control.
    /// </param>
    /// <param name="_excludeGrantId">
    ///    A <c>GrantID</c> value to exclude from the lookup control.
    /// </param>

    public static void lookupAllowableGrant(FormStringControl _ctrl, ProjGrantId _excludeGrantId = '')
    {
        SysTableLookup          projGrantParentLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        ProjGrant               projGrantLocal;
        #define.EmptyString("");

        projGrantParentLookup = SysTableLookup::newParameters(tablenum(ProjGrant), _ctrl, true);

        projGrantParentLookup.addLookupfield(fieldnum(ProjGrant, GrantId));
        projGrantParentLookup.addLookupfield(fieldnum(ProjGrant, GrantName));
        projGrantParentLookup.addLookupfield(fieldnum(ProjGrant, GrantStatus));
        projGrantParentLookup.addLookupfield(fieldnum(ProjGrant, AwardedAmount));
        queryBuildDataSource = query.addDataSource(tablenum(ProjGrant));

        queryBuildRange = queryBuildDataSource.addRange(fieldnum(ProjGrant, GrantStatus));
        queryBuildRange.value(enum2str(ProjGrantStatus::Active));

        queryBuildRange = queryBuildDataSource.addRange(fieldnum(ProjGrant, GrantStatus));
        queryBuildRange.value(enum2str(ProjGrantStatus::Awarded));

        if (_excludeGrantId)
        {
            select firstonly RecId from projGrantLocal
                        where projGrantLocal.GrantParentId == _excludeGrantId;

            queryBuildRange = queryBuildDataSource.addRange(fieldnum(ProjGrant, GrantId));
            queryBuildRange.value(SysQuery::valueNot(_excludeGrantId));
            if (!projGrantLocal.RecId)
            {
                queryBuildDataSource.addRange(fieldnum(ProjGrant, GrantParentId)).value(SysQuery::value(#EmptyString));
            }
            else
            {
                queryBuildRange.value(SysQuery::value(#EmptyString));
            }
        }
        projGrantParentLookup.parmQuery(query);
        projGrantParentLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>