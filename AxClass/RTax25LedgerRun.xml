<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25LedgerRun</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25LedgerRun
{
    RTax25LedgerRange           ledgerRange;
    TmpRTax25LedgerAccountList  ledgerAccountList, ledgerExceptionList;
    Set                         recIdSet, infoSet;

    GeneralJournalEntryReportingView_RU entry;
    GeneralJournalAccountEntry  accountEntry, offsetAccountEntry;

    Object                      callerClass;
    IdentifierName              functionName;
    DictClass                   dictClass;
    RunbaseProgress             progress;

    boolean                     transSum;

    RTax25RegisterId            registerId;
    DimensionAttribute          dimAttr, mainAccountAttr;
    Map                         exceptions;

    protected const str notequal = '!=';
    protected const str offsetRange = '(\%1.\%2 \%3 \%4.\%5)';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMainAccountRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding main account range to query
    /// </summary>
    /// <param name="qdbs">
    /// QueryBuildDataSource
    /// </param>
    /// <param name="allInclude">
    /// shows whether all accounts are included in query
    /// </param>
    /// <param name="mainAccountRecID">
    /// main account recId, if allInclude = true, this parameter ignored
    /// </param>
    /// <returns>
    /// created query build range
    /// </returns>
    /// <remarks>
    /// This function is used instead of SysQuery::addDimensionAttributeRange to add main account range.
    /// This function has been writen to solve performance problem. This fucnction uses 'EntityInstance' instead of 'DisplayValue' field to find main account.
    /// This is the only difference with SysQuery::addDimensionAttributeRange
    /// </remarks>
    private QueryBuildRange addMainAccountRange(QueryBuildDataSource qdbs, boolean allInclude = true, RecID mainAccountRecID = 0)
    {
        QueryBuildDataSource qbdsAttr;
        str attrTableName;
        str dimensionFieldName;
        str dataSourceName;
        QueryBuildRange qbr;

        QueryBuildDataSource findChildDataSource(QueryBuildDataSource _qbds, str _childDataSourceName)
        {
            QueryBuildDataSource    qbdsChild;
            int                     i;

            for (i = 1; i <= _qbds.childDataSourceCount(); i++)
            {
                qbdsChild = _qbds.childDataSourceNo(i);
                if (qbdsChild.name() == _childDataSourceName)
                {
                    return qbdsChild;
                }
            }
            return null;
        }

        dimensionFieldName = fieldStr(GeneralJournalAccountEntry, LedgerDimension);
        dataSourceName = qdbs.name();
        attrTableName = strFmt('DimAttCol_%1_%2_%3', dataSourceName, dimensionFieldName, mainAccountAttr.RecId);
        qbdsAttr = findChildDataSource(qdbs, attrTableName);
        if (!qbdsAttr)
        {
            qbdsAttr = qdbs.addDataSource(tableNum(DimensionAttributeLevelValueView), attrTableName);
            qbdsAttr.addSelectionField(fieldNum(DimensionAttributeLevelValueView, EntityInstance));
            qbdsAttr.addSelectionField(fieldNum(DimensionAttributeLevelValueView, AttributeValueRecId));
            qbdsAttr.joinMode(JoinMode::OuterJoin);
            qbdsAttr.fetchMode(QueryFetchMode::One2One);
            qbdsAttr.addLink(fieldName2id(qdbs.table(), dimensionFieldName), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId), dataSourceName);
            qbr = qbdsAttr.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute));
            qbr.value(queryValue(mainAccountAttr.RecId));
            qbr.status(RangeStatus::Hidden);
        }
        qbdsAttr.joinMode(JoinMode::InnerJoin);
        qbr = qbdsAttr.addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance));
        qbr.value(allInclude ? SysQuery::valueNot(0) : queryValue(mainAccountRecID));
        return qbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCorrectedPeriodDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReportingDate_RU calcCorrectedPeriodDate(FromDate _dateFromAccounting, ToDate _dateToAccounting, ToDate _toDateReporting)
    {
        Query                               genQuery;
        QueryBuildDataSource                genQbds, rangeQbds;
        QueryRun                            genQueryRun;
        QueryBuildRange                     dimRange, offsetDimRange, accountRange, offsetAccountRange, qBr;
        str                                 rangeTxt;
        str                                 gjaeName1, gjaeName2;

        DimensionAttributeValue             dimAttrValue;
        boolean                             allowEmpty;
        NoYes                               isValid;
        DimensionDefault                    accountEntryDim, offsetAccountEntryDim;

        ToDate                              toDateReporting = _toDateReporting ? _toDateReporting : _dateFromAccounting - 1;
        GeneralJournalEntryReportingView_RU correctiveEntry;

        ReportingDate_RU                    correctedPeriodDate;

        const str queryTemplate = '((%1 != "%2") && (%1 !=""))';

        select count(RecId) from ledgerAccountList;
        this.progressInit(ledgerAccountList.RecId);
        progress.setCount(0);

        genQuery = new Query(queryStr(GeneralJournalBondBatchTransReporting_RU));

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        gjaeName1 = genQbds.name();
        accountRange = this.addMainAccountRange(genQbds);
        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(queryValue(NoYes::No));

        dimRange = SysQuery::addDimensionAttributeRange(genQuery,
                                                        genQbds.name(),
                                                        fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                        DimensionComponent::DimensionAttribute,
                                                        SysQuery::valueNotEmptyString(),
                                                        dimAttr.Name);

        dimRange.dataSource().joinMode(JoinMode::NoExistsJoin);

        rangeQbds = genQuery.dataSourceTable(tableNum(GeneralJournalEntryReportingView_RU));

        rangeQbds.fetchMode(QueryFetchMode::One2One);
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, PostingLayer)).value(queryValue(CurrentOperationsTax::Current));
        rangeQbds.addSelectionField(fieldNum(GeneralJournalEntryReportingView_RU, ReportingDate));
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, AccountingDate)).value(queryRange(_dateFromAccounting, _dateToAccounting));
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, ReportingDate)).value(queryRange(dateNull(), toDateReporting));
        rangeQbds.addSortField(fieldNum(GeneralJournalEntryReportingView_RU, ReportingDate), SortOrder::Ascending);

        rangeQbds = rangeQbds.addDataSource(tableNum(FiscalCalendarPeriod));
        rangeQbds.fetchMode(QueryFetchMode::One2One);
        rangeQbds.joinMode(JoinMode::ExistsJoin);
        rangeQbds.addLink(fieldNum(GeneralJournalEntryReportingView_RU, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));

        qBr = rangeQbds.addRange(fieldNum(FiscalCalendarPeriod, Type));
        qBr.status(RangeStatus::Hidden);
        qBr.value(queryValue(FiscalPeriodType::Operating));

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2);
        gjaeName2 = genQbds.name();
        genQbds.fetchMode(QueryFetchMode::One2One);

        rangeTxt = strfmt(
                offsetRange,
                gjaeName1,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)),
                notEqual,
                gjaeName2,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)));

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);

        rangeTxt = strFmt(
                offsetRange,
                gjaeName1,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)),
                notEqual,
                gjaeName2,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)));

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, RecId)).value(rangeTxt);

        offsetAccountRange = this.addMainAccountRange(genQbds);

        offsetDimRange = SysQuery::addDimensionAttributeRange(genQuery,
                                                            genQbds.name(),
                                                            fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                            DimensionComponent::DimensionAttribute,
                                                            SysQuery::valueNotEmptyString(),
                                                            dimAttr.Name);

        offsetDimRange.dataSource().joinMode(JoinMode::NoExistsJoin);

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry_W), 1);
        genQbds.addRange(fieldnum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(SysQuery::valueNot(0));

        while select ledgerAccountList
            order by AccAllInclude, OffAllInclude
        {
            progress.setText(strFmt("@SYS76758",
                RTax25ProfitTable::find(ledgerAccountList.rTax25ProfitTable).ProfitId,
                MainAccount::find(ledgerAccountList.MainAccountId).MainAccountId,
                MainAccount::find(ledgerAccountList.OffsetMainAccountId).MainAccountId));
            progress.incCount();

            dimAttrValue = RTax25ProfitTable::profitRecId2DimensionAttributeValue(ledgerAccountList.rTax25ProfitTable);
            allowEmpty   = ledgerAccountList.AllowEmptyForce && dimAttrValue;
            exceptions = new Map(Types::Container, Types::Enum);

            accountRange.value(ledgerAccountList.AccAllInclude ? SysQuery::valueNot(0) : queryValue(ledgerAccountList.MainAccountId));
            dimRange.value(strFmt(queryTemplate, dimAttr.DimensionValueColumnName, RTax25ProfitTable::find(ledgerAccountList.rTax25ProfitTable).ProfitId));
            offsetAccountRange.value(ledgerAccountList.OffAllInclude ? SysQuery::valueNot(0) : queryValue(ledgerAccountList.OffsetMainAccountId));
            offsetDimRange.value(strFmt(queryTemplate, dimAttr.DimensionValueColumnName, RTax25ProfitTable::find(ledgerAccountList.rTax25ProfitTable).ProfitId));
            genQueryRun = new QueryRun(genQuery);
            while (genQueryRun.next())
            {
                correctiveEntry    = genQueryRun.get(tableNum(GeneralJournalEntryReportingView_RU));
                accountEntry       = genQueryRun.get(tableNum(GeneralJournalAccountEntry), 1);
                offsetAccountEntry = genQueryRun.get(tableNum(GeneralJournalAccountEntry), 2);

                if (exceptions.exists([accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension]))
                {
                    if (! exceptions.lookup([accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension]))
                        continue;
                }
                else
                {
                    accountEntryDim       = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountEntry.LedgerDimension);
                    offsetAccountEntryDim = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetAccountEntry.LedgerDimension);

                    isValid = this.checkException(registerId,
                                                  LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(accountEntry.LedgerDimension),
                                                  LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(offsetAccountEntry.LedgerDimension),
                                                  accountEntryDim,
                                                  offsetAccountEntryDim) &&
                              RTax25LedgerRun::checkDefaultDimensionDual(accountEntryDim,
                                                                         offsetAccountEntryDim,
                                                                         ledgerAccountList.DefaultDimension,
                                                                         ledgerAccountList.OffsetDefaultDimension,
                                                                         dimAttr.RecId,
                                                                         dimAttrValue.RecId,
                                                                         allowEmpty);

                    exceptions.insert([accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension], isValid);

                    if (! isValid)
                        continue;
                }

                if (!correctedPeriodDate || correctedPeriodDate > correctiveEntry.ReportingDate)
                {
                    correctedPeriodDate = dateEndQtr(correctiveEntry.ReportingDate);
                    break;
                }
            }
        }

        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountsInRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId checkAccountsInRange(
        RecId            _mainAccountId,
        DimensionDefault _defaultDimension,
        RecId            _offsetMainAccountId,
        DimensionDefault _defaultDimensionOffset)
    {
        DimensionAttributeValue dimAttrValue;

        while select ledgerAccountList
            order by AccAllInclude asc, OffAllInclude asc
            where (ledgerAccountList.MainAccountId       == _mainAccountId       ||
                   ledgerAccountList.AccAllInclude       == NoYes::Yes)          &&
                  (ledgerAccountList.OffsetMainAccountId == _offsetMainAccountId ||
                   ledgerAccountList.OffAllInclude       == NoYes::Yes)          &&
                   ledgerAccountList.RegisterId          == ''
        {
            dimAttrValue = RTax25ProfitTable::profitRecId2DimensionAttributeValue(ledgerAccountList.rTax25ProfitTable);

            if (RTax25LedgerRun::checkDefaultDimensionDual(_defaultDimension,
                                                           _defaultDimensionOffset,
                                                           ledgerAccountList.DefaultDimension,
                                                           ledgerAccountList.OffsetDefaultDimension,
                                                           dimAttrValue.DimensionAttribute,
                                                           dimAttrValue.RecId,
                                                           ledgerAccountList.AllowEmptyForce && dimAttrValue.RecId != 0))
            {
                return ledgerAccountList.rTax25ProfitTable;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicates</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkDuplicates(RecId _recId,
                                      Set   _recIdSet)
    {
        if (_recIdSet.in(_recId))
            return false;

        _recIdSet.add(_recId);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkException</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkException(RTax25RegisterId           _registerId,
                                  RecId                      _mainAccountId,
                                  RecId                      _offsetMainAccountId,
                                  DimensionDefault           _defaultDimension       = 0,
                                  DimensionDefault           _offsetDefaultDimension = 0)
    {
        boolean ret = true;

        while select DefaultDimension, OffsetDefaultDimension from ledgerExceptionList
            order by AccAllInclude, OffAllInclude
            where ledgerExceptionList.RegisterId              == _registerId
               && ledgerExceptionList.rTax25ProfitTable       == 0
               && ((ledgerExceptionList.MainAccountId         == _mainAccountId
                 && ledgerExceptionList.OffsetMainAccountId   == _offsetMainAccountId)
                 || (ledgerExceptionList.MainAccountId        == _mainAccountId
                  && ledgerExceptionList.OffAllInclude        == true)
                  || (ledgerExceptionList.AccAllInclude       == true
                   && ledgerExceptionList.OffsetMainAccountId == _offsetMainAccountId)
                  || (ledgerExceptionList.AccAllInclude       == true
                   && ledgerExceptionList.OffAllInclude       == true))
        {
            if  (RTax25LedgerRun::checkDefaultDimension(_defaultDimension,       ledgerExceptionList.DefaultDimension)     &&
                 RTax25LedgerRun::checkDefaultDimension(_offsetDefaultDimension, ledgerExceptionList.OffsetDefaultDimension))
            {
                 ret = false;
                 break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForIncorrectDimensions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkForIncorrectDimensions(FromDate                   _dateFrom,
                                                  ToDate                     _dateTo,
                                                  anytype                    _dimValue,
                                                  TmpRTax25LedgerAccountList _mainAccountList,
                                                  RTax25PeriodIterator       _rTax25PeriodIterator = null)
    {
        const str dimRange = '((\%1.\%2 == "\%3") || (\%4.\%5 == "\%3"))';


        GeneralJournalAccountEntry          localAccountEntry, localOffsetAccountEntry;
        GeneralJournalEntry                 localJournalEntry;

        DimensionAttributeLevelValueView    dimAccount, offsetDimAccount;

        Query                               genQuery;
        QueryBuildDataSource                genQbds, rangeQbds;
        QueryRun                            genQueryRun;
        QueryBuildRange                     genQbr;
        str                                 rangeTxt, dimDSName, offsetDimDSName;
        str                                 nameGjae1, nameGjae2;

        boolean                             ret = true;
        RTax25PeriodIterator                rTax25PeriodIterator = _rTax25PeriodIterator;

        if (!rTax25PeriodIterator)
        {
            rTax25PeriodIterator = RTax25PeriodFactory::createIteratorSimple(_dateFrom, _dateTo);
        }

        genQuery = new Query(queryStr(GeneralJournalBondBatchTransReporting_RU));

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        nameGjae1 = genQbds.name();
        genQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        genQbr = this.addMainAccountRange(genQbds, _mainAccountList.AccAllInclude, _mainAccountList.MainAccountId);
        genQbr.dataSource().joinMode(JoinMode::InnerJoin);
        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(queryValue(NoYes::No));

        genQbr = SysQuery::addDimensionAttributeRange(genQuery,
                                                      genQbds.name(),
                                                      fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                      DimensionComponent::DimensionAttribute,
                                                      SysQuery::valueNotEmptyString(),
                                                      dimAttr.Name);

        genQbr.dataSource().joinMode(JoinMode::InnerJoin);
        dimDSName = genQbr.dataSource().name();

        rangeQbds = genQuery.dataSourceTable(tableNum(GeneralJournalEntryReportingView_RU));
        rangeQbds.fetchMode(QueryFetchMode::One2One);
        rangeQbds.joinMode(JoinMode::ExistsJoin);
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, PostingLayer)).value(queryValue(OperationsTax::Current));

        rangeQbds = rangeQbds.addDataSource(tableNum(FiscalCalendarPeriod));
        rangeQbds.fetchMode(QueryFetchMode::One2One);
        rangeQbds.joinMode(JoinMode::ExistsJoin);
        rangeQbds.addLink(fieldNum(GeneralJournalEntryReportingView_RU, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));

        genQbr = rangeQbds.addRange(fieldNum(FiscalCalendarPeriod, Type));
        genQbr.status(RangeStatus::Hidden);
        genQbr.value(queryValue(FiscalPeriodType::Operating));

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2);
        nameGjae2 = genQbds.name();
        genQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        genQbds.fetchMode(QueryFetchMode::One2One);
        genQbds.joinMode(JoinMode::InnerJoin);

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry)).value(rangeTxt);

        rangeTxt = strFmt(
            offsetRange,
            nameGjae1,
            fieldid2name(tablenum(GeneralJournalAccountEntry), fieldnum(GeneralJournalAccountEntry, IsCredit)),
            notEqual,
            nameGjae2,
            fieldid2name(tablenum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)));

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);

        rangeTxt = strFmt(
            offsetRange,
            nameGjae1,
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)),
            notEqual,
            nameGjae2,
            fieldId2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)));

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, RecId)).value(rangeTxt);

        genQbr = this.addMainAccountRange(genQbds,_mainAccountList.OffAllInclude, _mainAccountList.OffsetMainAccountId);

        genQbr.dataSource().joinMode(JoinMode::InnerJoin);

        genQbr = SysQuery::addDimensionAttributeRange(  genQuery,
                                                        genQbds.name(),
                                                        fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                        DimensionComponent::DimensionAttribute,
                                                        SysQuery::valueNotEmptyString(),
                                                        dimAttr.Name);

        genQbr.dataSource().joinMode(JoinMode::InnerJoin);
        offsetDimDSName = genQbr.dataSource().name();
        rangeTxt = strFmt(
            offsetRange,
            dimDSName,
            fieldId2name(tableNum(DimensionAttributeLevelValueView), fieldNum(DimensionAttributeLevelValueView, DisplayValue)),
            notEqual,
            offsetDimDSName,
            fieldId2name(tableNum(DimensionAttributeLevelValueView), fieldNum(DimensionAttributeLevelValueView, DisplayValue)));
        genQbr.dataSource().addRange(fieldNum(DimensionAttributeLevelValueView, RecId)).value(rangeTxt);

        rangeTxt = strFmt(
            dimRange,
            dimDSName,
            fieldId2name(tableNum(DimensionAttributeLevelValueView), fieldNum(DimensionAttributeLevelValueView, DisplayValue)),
            _dimValue,
            offsetDimDSName,
            fieldId2name(tableNum(DimensionAttributeLevelValueView), fieldNum(DimensionAttributeLevelValueView, DisplayValue)));
        genQbr.dataSource().addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance)).value(rangeTxt);

        genQueryRun = new QueryRun(genQuery);
        while (genQueryRun.next())
        {
            localAccountEntry         = genQueryRun.get(tableNum(GeneralJournalAccountEntry), 1);
            localOffsetAccountEntry   = genQueryRun.get(tableNum(GeneralJournalAccountEntry), 2);

            dimAccount                      = genQueryRun.get(tableNum(DimensionAttributeLevelValueView), 1);
            offsetDimAccount                = genQueryRun.get(tableNum(DimensionAttributeLevelValueView), 3);

            if (this.checkDuplicates(localAccountEntry.RecId, infoSet) &&
                this.checkDuplicates(localOffsetAccountEntry.RecId, infoSet))
            {
                setPrefix("@SYS65157");
                localJournalEntry = GeneralJournalEntry::findByGeneralJournalAccountEntry(localAccountEntry.RecId);

                ret = checkFailed(strFmt("@GLS105127", dimAccount.DisplayValue, offsetDimAccount.DisplayValue, localJournalEntry.SubledgerVoucher),
                                  "",
                                  new SysInfoAction_FormName_RU(localJournalEntry, formStr(LedgerTransVoucher)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        recIdSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        infoSet  = new Set(typeName2Type(extendedTypeStr(RecId)));
        dimAttr         = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
        mainAccountAttr = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccountList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpRTax25LedgerAccountList parmLedgerAccountList(TmpRTax25LedgerAccountList _ledgerAccountList = ledgerAccountList)
    {
        ledgerAccountList = _ledgerAccountList;
        return ledgerAccountList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerException</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpRTax25LedgerAccountList parmLedgerException(TmpRTax25LedgerAccountList _ledgerAccountList = ledgerExceptionList)
    {
        ledgerExceptionList = _ledgerAccountList;
        return ledgerExceptionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterId parmRegisterId(RTax25RegisterId _registerId = registerId)
    {
        registerId = _registerId;
        return registerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransSum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmTransSum(boolean _enableTransSum = transSum)
    {
        transSum = _enableTransSum;

        return transSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>profitTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record id of the profit code.
    /// </summary>
    /// <returns>
    /// The record id of the profit code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25ProfitTableRecId profitTableRecId()
    {
        return ledgerAccountList.rTax25ProfitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInit</Name>
				<Source><![CDATA[
    private void progressInit(int64 _total,
                              int   _updateInterval = 1,
                              int   _numOfBars      = 1)
    {
        #aviFiles //It is for reviewers attension: what should be done with this kind of progress indication? I was just triggered by macros here.
        if (! progress)
        {
            progress = RunbaseProgress::construct(_numOfBars, null);
        }
        progress.setCaption("@SYS60112");
        progress.setAnimation(#AviUpdate);

        progress.setTotal(_total);
        progress.updateInterval(_updateInterval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rightWay</Name>
				<Source><![CDATA[
    private void rightWay()
    {
        ExecutePermission   executePermission = new ExecutePermission();

            if (this.checkDuplicates(accountEntry.RecId, recIdSet))
            {
                if (callerClass is RTax25StdDocuments)
                {
                    callerClass.setLedgerAccountList(ledgerAccountList);
                }

                executePermission.assert();
                dictClass.callObject(functionName,
                                     callerClass,
                                     accountEntry,
                                     offsetAccountEntry,
                                     ledgerAccountList.rTax25ProfitTable,
                                     false,
                                     entry.JournalCategory,
                                     this.parmTransSum());
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run(FromDate _dateFrom, ToDate _dateTo, RTax25PeriodIterator _rTax25PeriodIterator = null)
    {
        const str queryTemplate = '((%1 != "%2") && (%1 !=""))';

        Query                               genQuery;
        QueryBuildDataSource                genQbds, rangeQbds;
        QueryRun                            genQueryRun;
        QueryBuildRange                     dimRange, offsetDimRange, accountRange, offsetAccountRange, qBr;
        str                                 rangeTxt;
        str                                 gjaeName1, gjaeName2;

        DimensionAttributeValue             dimAttrValue;
        boolean                             allowEmpty;
        NoYes                               isValid;
        DimensionDefault                    accountEntryDim, offsetAccountEntryDim;
        RTax25PeriodIterator                rTax25PeriodIterator = _rTax25PeriodIterator;

        if (!rTax25PeriodIterator)
        {
            rTax25PeriodIterator = RTax25PeriodFactory::createIteratorSimple(_dateFrom, _dateTo);
        }

        select count(RecId) from ledgerAccountList;
        this.progressInit(ledgerAccountList.RecId);
        progress.setCount(0);

        genQuery = new Query(queryStr(GeneralJournalBondBatchTransReporting_RU));

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        gjaeName1 = genQbds.name();
        accountRange = this.addMainAccountRange(genQbds);
        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(queryValue(NoYes::No));

        dimRange = SysQuery::addDimensionAttributeRange(genQuery,
                                                        genQbds.name(),
                                                        fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                        DimensionComponent::DimensionAttribute,
                                                        SysQuery::valueNotEmptyString(),
                                                        dimAttr.Name);

        dimRange.dataSource().joinMode(JoinMode::NoExistsJoin);

        rangeQbds = genQuery.dataSourceTable(tableNum(GeneralJournalEntryReportingView_RU));

        rangeQbds.fetchMode(QueryFetchMode::One2One);
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, Ledger)).value(queryValue(Ledger::current()));
        rangeQbds.addRange(fieldNum(GeneralJournalEntryReportingView_RU, PostingLayer)).value(queryValue(CurrentOperationsTax::Current));
        rangeQbds.addSelectionField(fieldNum(GeneralJournalEntryReportingView_RU, JournalCategory));
        rTax25PeriodIterator.applyExtendedRange(rangeQbds);

        rangeQbds = rangeQbds.addDataSource(tableNum(FiscalCalendarPeriod));
        rangeQbds.fetchMode(QueryFetchMode::One2One);
        rangeQbds.joinMode(JoinMode::ExistsJoin);
        rangeQbds.addLink(fieldNum(GeneralJournalEntryReportingView_RU, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));

        qBr = rangeQbds.addRange(fieldNum(FiscalCalendarPeriod, Type));
        qBr.status(RangeStatus::Hidden);
        qBr.value(queryValue(FiscalPeriodType::Operating));

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2);
        gjaeName2 = genQbds.name();
        genQbds.fetchMode(QueryFetchMode::One2One);

        rangeTxt = strfmt(
                offsetRange,
                gjaeName1,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)),
                notEqual,
                gjaeName2,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, IsCredit)));

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(rangeTxt);

        rangeTxt = strFmt(
                offsetRange,
                gjaeName1,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)),
                notEqual,
                gjaeName2,
                fieldid2name(tableNum(GeneralJournalAccountEntry), fieldNum(GeneralJournalAccountEntry, RecId)));

        genQbds.addRange(fieldNum(GeneralJournalAccountEntry, RecId)).value(rangeTxt);

        offsetAccountRange = this.addMainAccountRange(genQbds);

        offsetDimRange = SysQuery::addDimensionAttributeRange(genQuery,
                                                            genQbds.name(),
                                                            fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                            DimensionComponent::DimensionAttribute,
                                                            SysQuery::valueNotEmptyString(),
                                                            dimAttr.Name);

        offsetDimRange.dataSource().joinMode(JoinMode::NoExistsJoin);

        genQbds = genQuery.dataSourceTable(tableNum(GeneralJournalAccountEntry_W), 1);
        genQbds.addRange(fieldnum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(SysQuery::valueNot(0));

        while select ledgerAccountList
            order by AccAllInclude, OffAllInclude
        {
            progress.setText(strFmt("@SYS76758",
                RTax25ProfitTable::find(ledgerAccountList.rTax25ProfitTable).ProfitId,
                MainAccount::find(ledgerAccountList.MainAccountId).MainAccountId,
                MainAccount::find(ledgerAccountList.OffsetMainAccountId).MainAccountId));
            progress.incCount();

            dimAttrValue = RTax25ProfitTable::profitRecId2DimensionAttributeValue(ledgerAccountList.rTax25ProfitTable);
            allowEmpty   = ledgerAccountList.AllowEmptyForce && dimAttrValue;
            exceptions = new Map(Types::Container, Types::Enum);

            accountRange.value(ledgerAccountList.AccAllInclude ? SysQuery::valueNot(0) : queryValue(ledgerAccountList.MainAccountId));
            dimRange.value(strFmt(queryTemplate, dimAttr.DimensionValueColumnName, RTax25ProfitTable::find(ledgerAccountList.rTax25ProfitTable).ProfitId));
            offsetAccountRange.value(ledgerAccountList.OffAllInclude ? SysQuery::valueNot(0) : queryValue(ledgerAccountList.OffsetMainAccountId));
            offsetDimRange.value(strFmt(queryTemplate, dimAttr.DimensionValueColumnName, RTax25ProfitTable::find(ledgerAccountList.rTax25ProfitTable).ProfitId));
            genQueryRun = new QueryRun(genQuery);
            while (genQueryRun.next())
            {
                entry              = genQueryRun.get(tableNum(GeneralJournalEntryReportingView_RU));
                accountEntry       = genQueryRun.get(tableNum(GeneralJournalAccountEntry), 1);
                offsetAccountEntry = genQueryRun.get(tableNum(GeneralJournalAccountEntry), 2);

                if (exceptions.exists([accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension]))
                {
                    if (! exceptions.lookup([accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension]))
                        continue;
                }
                else
                {
                    accountEntryDim       = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountEntry.LedgerDimension);
                    offsetAccountEntryDim = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetAccountEntry.LedgerDimension);

                    isValid = this.checkException(registerId,
                                                  LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(accountEntry.LedgerDimension),
                                                  LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(offsetAccountEntry.LedgerDimension),
                                                  accountEntryDim,
                                                  offsetAccountEntryDim) &&
                              RTax25LedgerRun::checkDefaultDimensionDual(accountEntryDim,
                                                                         offsetAccountEntryDim,
                                                                         ledgerAccountList.DefaultDimension,
                                                                         ledgerAccountList.OffsetDefaultDimension,
                                                                         dimAttr.RecId,
                                                                         dimAttrValue.RecId,
                                                                         allowEmpty);

                    exceptions.insert([accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension], isValid);

                    if (! isValid)
                    {
                        continue;
                    }
                }

                this.rightWay();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHook</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setHook(Object           _class,
                        IdentifierName   _funcName)
    {
        callerClass = _class;
        functionName = _funcName;

        dictClass = new DictClass(classIdGet(_class));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks existence of the default dimensions.
    /// </summary>
    /// <param name="_accDefaultDimension">
    /// An account default dimension which is checked.
    /// </param>
    /// <param name="_offDefaultDimension">
    /// An offset account default dimension which is checked.
    /// </param>
    /// <param name="_exclDimAttrId">
    /// A dimension attribute record id to set some exclusions for the dimension check.
    /// </param>
    /// <returns>
    /// true if the check is OK; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkDefaultDimension(DimensionDefault _accDefaultDimension,
                                                DimensionDefault _offDefaultDimension,
                                                RecId            _exclDimAttrId = 0)
    {
        Map           accDimAttrValueMap, offDimAttrValueMap;
        Set           dimAttrIdSet;
        RecId         dimAttrId;
        SetEnumerator se;

        if (_accDefaultDimension == _offDefaultDimension)
            return true;

        accDimAttrValueMap = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_accDefaultDimension);
        offDimAttrValueMap = LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_offDefaultDimension);

        dimAttrIdSet       = Set::union(accDimAttrValueMap.keySet(), offDimAttrValueMap.keySet());
        se                 = dimAttrIdSet.getEnumerator();

        while (se.moveNext())
        {
            dimAttrId = se.current();

            if (! _exclDimAttrId || (_exclDimAttrId && _exclDimAttrId != dimAttrId))
            {
                if (offDimAttrValueMap.exists(dimAttrId))
                {
                    if (! accDimAttrValueMap.exists(dimAttrId) || accDimAttrValueMap.lookup(dimAttrId) != offDimAttrValueMap.lookup(dimAttrId))
                    {
                            return false;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultDimensionDual</Name>
				<Source><![CDATA[
    private static boolean checkDefaultDimensionDual(DimensionDefault        _accDefaultDimension,
                                                     DimensionDefault        _offDefaultDimension,
                                                     DimensionDefault        _compareAccDefaultDimension,
                                                     DimensionDefault        _compareOffDefaultDimension,
                                                     RecId                   _exclDimAttrId = 0,
                                                     RecId                   _num           = 0,
                                                     boolean                 _ret           = false)
    {
        boolean ret;

        if (_accDefaultDimension == _compareAccDefaultDimension && _offDefaultDimension == _compareOffDefaultDimension)
            return true;

        ret = RTax25LedgerRun::checkDefaultDimension(_accDefaultDimension, _compareAccDefaultDimension, _exclDimAttrId) &&
              RTax25LedgerRun::checkDefaultDimension(_offDefaultDimension, _compareOffDefaultDimension, _exclDimAttrId);

        if (_num && _exclDimAttrId && ret)
        {
            if (! LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_accDefaultDimension).exists(_exclDimAttrId) &&
                ! LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_offDefaultDimension).exists(_exclDimAttrId))
            {
                ret = _ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProfitTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>RTax25LedgerRun</c> class.
    /// </summary>
    /// <param name="_class">
    /// An instance of the source class.
    /// </param>
    /// <param name="_funcName">
    /// A method name of the source class.
    /// </param>
    /// <param name="_profitTableRecId">
    /// A reference record of the profit code.
    /// </param>
    /// <returns>
    /// The new instance of the <c>RTax25LedgerRun</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25LedgerRun newProfitTableRecId(
        Object           _class,
        IdentifierName   _funcName,
        RefRecId         _profitTableRecId)
    {
        RTax25LedgerRun     ledgerRun = new RTax25LedgerRun();
        RTax25LedgerRange   ledgerRange = new RTax25LedgerRange();

        ledgerRange.initFromProfitId(_profitTableRecId);
        ledgerRun.parmLedgerAccountList(ledgerRange.mainAccountRangeTable());

        ledgerRun.setHook(_class, _funcName);

        return ledgerRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProfitTableRecIdCheckCorr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25LedgerRun newProfitTableRecIdCheckCorr(RefRecId         _profitTableRecId)
    {
        RTax25LedgerRun     ledgerRun = new RTax25LedgerRun();
        RTax25LedgerRange   ledgerRange = new RTax25LedgerRange();

        ledgerRange.initFromProfitId(_profitTableRecId);
        ledgerRun.parmLedgerAccountList(ledgerRange.mainAccountRangeTable());

        return ledgerRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRegisterId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25LedgerRun newRegisterId(Object           _class,
                                                IdentifierName   _funcName,
                                                RTax25RegisterId _registerId)
    {
        RTax25LedgerRun     ledgerRun       = new RTax25LedgerRun();
        RTax25LedgerRange   ledgerRange     = new RTax25LedgerRange();
        RTax25LedgerRange   ledgerException = new RTax25LedgerRange();

        ledgerRun.parmRegisterId(_registerId);

        ledgerException.initFromRegisterIdException(_registerId);
        ledgerRun.parmLedgerException(ledgerException.mainAccountRangeTable());

        ledgerRange.initFromRegisterId(_registerId);
        ledgerRun.parmLedgerAccountList(ledgerRange.mainAccountRangeTable());

        ledgerRun.setHook(_class, _funcName);

        return ledgerRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRegisterIdCheckCorr</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25LedgerRun newRegisterIdCheckCorr(RTax25RegisterId _registerId)
    {
        RTax25LedgerRun     ledgerRun       = new RTax25LedgerRun();
        RTax25LedgerRange   ledgerRange     = new RTax25LedgerRange();
        RTax25LedgerRange   ledgerException = new RTax25LedgerRange();

        ledgerRun.parmRegisterId(_registerId);

        ledgerException.initFromRegisterIdException(_registerId);
        ledgerRun.parmLedgerException(ledgerException.mainAccountRangeTable());

        ledgerRange.initFromRegisterId(_registerId);
        ledgerRun.parmLedgerAccountList(ledgerRange.mainAccountRangeTable());

        return ledgerRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>