<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximApplyDutyDrawback_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim apply duty drawback class.
/// </summary>
class EximApplyDutyDrawback_IN extends RunBase
{
    TmpEximTotalDBKTrans_IN tmpTotalDBKTrans;
    EximPortId_IN           portId;
    EximProductGroup_IN     productGroup;
    FromDateTime            fromDateTime;
    ToDateTime              toDateTime;
    TransDateTime           transDateTime;
    DetailSummary           detailSummary;
    Query                   query;

    DialogField             dialogFieldPortId;
    DialogField             dialogFieldProductGroup;
    DialogField             dialogFieldFromDateTime;
    DialogField             dialogFieldTodateTime;
    DialogField             dialogFieldTransDateTime;
    DialogField             dialogFieldDetailSummary;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDrawbackTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks drawbacks of the transaction.
    /// </summary>
    /// <param name="_query">
    /// The instance of the <c>Query</c> class.
    /// </param>
    /// <returns>
    /// If 'True', the check is succeed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkDrawbackTransaction(Query _query)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        EximDBKValues_IN            dbkValues;
        EximDBKRates_IN             dbkRates;
        EximProductGroupTable_IN    productGroupTable;
        boolean                     ret = true;
        boolean                     found;
        QueryRun                    queryRun;
        UtcDateTime                 shippingBillDate;

        if (!EximPorts_IN::exist(portId))
        {
            ret = checkFailed(strfmt("@SYS94719", fieldpname(EximPorts_IN, PortId)));
        }

        if (productGroup && !EximProductGroupTable_IN::exist(productGroup))
        {
            ret = checkFailed(strfmt("@SYS94719", fieldpname(EximProductGroupTable_IN, ProductGroup)));
        }
        if (ret)
        {
            queryRun = new QueryRun(_query);

            while (queryRun.next())
            {
                queryRun.changed(tablenum(CustomsShippingBillTrans_IN));
                customsShippingBillTrans = queryRun.get(tablenum(CustomsShippingBillTrans_IN));

                shippingBillDate = DateTimeUtil::newDateTime(customsShippingBillTrans.ShippingBillDate, 0, DateTimeUtil::getUserPreferredTimeZone());
                eximShippingBillTrans = EximShippingBillTrans_IN::findByShippingBillTransRecId(customsShippingBillTrans.RecId);

                select firstonly ValidTimeState(shippingBillDate) RecId, Unit
                    from dbkValues
                        where  dbkValues.CustomsTariffCodeTable == eximShippingBillTrans.CustomsTariffCodeTable
                        && dbkValues.CenvatStatus               == eximShippingBillTrans.dbkCenvatStatus
                        && dbkValues.RateType                   == eximShippingBillTrans.dbkRateType
                        && (!dbkValues.ValidFrom
                         ||(dbkValues.ValidFrom                 <= shippingBillDate
                         && dbkValues.ValidTo                   >= shippingBillDate))
                join RecId from dbkRates
                    where dbkRates.RecId == dbkValues.dbkRatesRecId
                join RecId from productGroupTable
                    where productGroupTable.RecId         == dbkRates.ProductGroupTableRecId
                        && productGroupTable.RecId        == eximShippingBillTrans.EximProductGroupTable
                join SalesUnit, CurrencyCode from custInvoiceTrans
                    where custInvoiceTrans.InventTransId  == customsShippingBillTrans.InventTransId
                        && custInvoiceTrans.InvoiceId     == customsShippingBillTrans.InvoiceId
                        && custInvoiceTrans.InvoiceDate   == customsShippingBillTrans.InvoiceDate;

                if (dbkValues)
                {
                    found = true;
                                                                                                        
                    if (custInvoiceTrans.SalesUnit
                        && !EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(customsShippingBillTrans.ItemId,
                                                                                                         customsShippingBillTrans.InventDimId,
                                                                                                         custInvoiceTrans.SalesUnit,
                                                                                                         dbkValues.Unit))
                    {
                        ret = checkFailed(strfmt("@SYS28690",
                                                 custInvoiceTrans.SalesUnit,
                                                 dbkValues.Unit));
                    }

                    if (ret
                        && !TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                      custInvoiceTrans.CurrencyCode,
                                                      Direction_IN::Export,
                                                      customsShippingBillTrans.ShippingBillDate))
                    {
                        ret = checkFailed(strfmt("@GLS62271",
                                                 Direction_IN::Export,
                                                 custInvoiceTrans.CurrencyCode,
                                                 customsShippingBillTrans.ShippingBillDate));
                    }
                }
            }

            if (ret && !found)
            {
                info("@GLS61983");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Object ret;

        ret = super();

        dialogFieldPortId        = ret.addFieldValue(extendedtypestr(EximPortId_IN), portId, "@GLS61500", "@GLS61961");
        dialogFieldProductGroup  = ret.addFieldValue(extendedtypestr(EximProductGroup_IN), productGroup, "@SYS58238", "@GLS61984");
        dialogFieldFromDateTime  = ret.addFieldValue(extendedtypestr(FromDateTime), fromDateTime, "@SYS109394", "@GLS61985");
        dialogFieldTodateTime    = ret.addFieldValue(extendedtypestr(ToDateTime), toDateTime, "@SYS109395", "@GLS61986");
        dialogFieldTransDateTime = ret.addFieldValue(extendedtypestr(TransDateTime), transDateTime, "@GLS62345", "@SYS90567");
        dialogFieldDetailSummary = ret.addFieldValue(enumstr(DetailSummary), detailSummary, "@SYS26676", "@SYS24757");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value from the dialog.
    /// </summary>
    /// <returns>
    /// If 'True', the value of dialog is got successfully.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            portId        = dialogFieldPortId.value();
            productGroup  = dialogFieldProductGroup.value();
            fromDateTime  = DateTimeUtil::removeTimeZoneOffset(dialogFieldFromDateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
            toDateTime    = DateTimeUtil::removeTimeZoneOffset(dialogFieldTodateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
            transDateTime = DateTimeUtil::removeTimeZoneOffset(dialogFieldTransDateTime.value(), DateTimeUtil::getUserPreferredTimeZone());
            detailSummary = dialogFieldDetailSummary.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpEximTotalDBKTrans</Name>
				<Source><![CDATA[
    private void insertTmpEximTotalDBKTrans(Query _query)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustInvoiceTrans            custInvoiceTrans;
        EximShippingBillTrans_IN    eximShippingBillTrans;
        EximDBKValues_IN            dbkValues;
        EximDBKRates_IN             dbkRates;
        EximProductGroupTable_IN    productGroupTable;
        AmountMST                   drawbackAmt;
        AmountMST                   assessableValue;
        CustomsQty_IN               shippingQty;
        QueryRun                    queryRun;
        UtcDateTime                 shippingBillDate;

        queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            customsShippingBillTrans = queryRun.get(tablenum(CustomsShippingBillTrans_IN));

            shippingBillDate = DateTimeUtil::newDateTime(customsShippingBillTrans.ShippingBillDate, 0, DateTimeUtil::getUserPreferredTimeZone());
            eximShippingBillTrans = EximShippingBillTrans_IN::findByShippingBillTransRecId(customsShippingBillTrans.RecId);

            select firstonly ValidTimeState(shippingBillDate) RecId, Unit, DrawbackRate, ValueCap, RoundOff, RoundingForm
                    from dbkValues
                    where  dbkValues.CustomsTariffCodeTable  == eximShippingBillTrans.CustomsTariffCodeTable
                        && dbkValues.CenvatStatus     == eximShippingBillTrans.dbkCenvatStatus
                        && dbkValues.RateType         == eximShippingBillTrans.dbkRateType
                        && (!dbkValues.ValidFrom
                        ||(dbkValues.ValidFrom       <= shippingBillDate
                        && dbkValues.ValidTo         >= shippingBillDate))
                join RecId from dbkRates
                    where dbkRates.RecId == dbkValues.dbkRatesRecId
                join RecId from productGroupTable
                    where productGroupTable.RecId        == dbkRates.ProductGroupTableRecId
                    && productGroupTable.RecId == eximShippingBillTrans.EximProductGroupTable
                join SalesUnit, CurrencyCode, DefaultDimension
                    from custInvoiceTrans
                    where custInvoiceTrans.InventTransId == customsShippingBillTrans.InventTransId
                    && custInvoiceTrans.InvoiceId        == customsShippingBillTrans.InvoiceId
                    && custInvoiceTrans.InvoiceDate      == customsShippingBillTrans.InvoiceDate;

            if (dbkValues)
            {
                tmpTotalDBKTrans.clear();

                tmpTotalDBKTrans.MarkSelect   = NoYes::Yes;
                tmpTotalDBKTrans.Unit         = dbkValues.Unit;
                tmpTotalDBKTrans.DrawbackRate = dbkValues.DrawbackRate;
                tmpTotalDBKTrans.ValueCap     = dbkValues.ValueCap;

                assessableValue = CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                                                custInvoiceTrans.CurrencyCode,
                                                                Direction_IN::Export,
                                                                customsShippingBillTrans.ShippingBillDate,
                                                                false);

                if (dbkValues.DrawbackRate
                    && eximShippingBillTrans.dbkPercent)
                {
                    shippingQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(customsShippingBillTrans.ItemId,
                                                                                                        customsShippingBillTrans.InventDimId,
                                                                                                        customsShippingBillTrans.ShippingBillQty,
                                                                                                        custInvoiceTrans.SalesUnit,
                                                                                                        dbkValues.Unit,
                                                                                                        NoYes::Yes);

                    drawbackAmt = EximDBKValues_IN::roundedOffDrawbackAmount((assessableValue * dbkValues.DrawbackRate/100 * eximShippingBillTrans.dbkPercent/100 < shippingQty * dbkValues.ValueCap
                                                                              ? assessableValue * dbkValues.DrawbackRate/100 * eximShippingBillTrans.dbkPercent/100
                                                                              : shippingQty * dbkValues.ValueCap),
                                                                             dbkValues.RoundOff,
                                                                             dbkValues.RoundingForm);

                    tmpTotalDBKTrans.AllowedDrawback = (EximParameters_IN::find().dbkMinAmount < drawbackAmt
                                                     ? drawbackAmt
                                                     : (drawbackAmt < ((EximParameters_IN::find().dbkMinPercent)
                                                                                                ? assessableValue * EximParameters_IN::find().dbkMinPercent/100
                                                                                                : assessableValue)
                                                      ? 0
                                                      : drawbackAmt));
                }

                tmpTotalDBKTrans.DefaultDimension       = custInvoiceTrans.DefaultDimension;
                tmpTotalDBKTrans.ShippingBillTransRecId = customsShippingBillTrans.RecId;
                tmpTotalDBKTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailSummary</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DetailSummary parmDetailSummary(DetailSummary _detailSummary = detailSummary)
    {
        detailSummary = _detailSummary;

        return detailSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDateTime parmFromDateTime(FromDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;

        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPortId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximPortId_IN parmPortId(EximPortId_IN _portId = portId)
    {
        portId = _portId;

        return portId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductGroup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximProductGroup_IN parmProductGroup(EximProductGroup_IN _productGroup = productGroup)
    {
        productGroup = _productGroup;

        return productGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDateTime parmToDateTime(ToDateTime _toDateTime = toDateTime)
    {
        toDateTime = _toDateTime;

        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmTransDateTime(TransDateTime _transDateTime = transDateTime)
    {
        transDateTime = _transDateTime;

        return transDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query.
    /// </summary>
    /// <returns>
    /// The instance of the <c>Query</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query queryBuild()
    {
        Query                queryLoc;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildDataSource dataSourceEximShippingBillTrans;
        QueryBuildDataSource dataSourceSchemeLine;

        queryLoc = new Query();

        queryBuildDataSource = queryLoc.addDataSource(tablenum(CustomsShippingBillTrans_IN));
        queryBuildDataSource.addRange(fieldnum(CustomsShippingBillTrans_IN, ShippingBillDate)).value(queryRange(
                                                                                               DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(fromDateTime, DateTimeUtil::getUserPreferredTimeZone())),
                                                                                               DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(toDateTime, DateTimeUtil::getUserPreferredTimeZone()))));

        dataSourceEximShippingBillTrans = queryBuildDataSource.addDataSource(tablenum(EximShippingBillTrans_IN));
        dataSourceEximShippingBillTrans.addLink(fieldnum(CustomsShippingBillTrans_IN, RecId), fieldnum(EximShippingBillTrans_IN, ShippingBillTransRecId));
        dataSourceEximShippingBillTrans.joinMode(JoinMode::ExistsJoin);
        dataSourceEximShippingBillTrans.addRange(fieldnum(EximShippingBillTrans_IN, EximPorts)).value(queryValue(EximPorts_IN::findByPortId(portId).RecId));

        if (productGroup)
        {
            dataSourceEximShippingBillTrans.addRange(fieldnum(EximShippingBillTrans_IN, EximProductGroupTable)).value(queryValue(EximProductGroupTable_IN::findByProductGroupId(productGroup).RecId));
        }

        dataSourceEximShippingBillTrans.addRange(fieldnum(EximShippingBillTrans_IN, dbkCenvatStatus)).value(SysQuery::valueNot(EximDBKCenvatStatus_IN::None));

        dataSourceSchemeLine = dataSourceEximShippingBillTrans.addDataSource(tablenum(EximDBKSchemesLine_IN));

        dataSourceSchemeLine.addLink(fieldnum(EximShippingBillTrans_IN, ShippingBillTransRecId), fieldnum(EximDBKSchemesLine_IN, ShippingBillTransRecId));
        dataSourceSchemeLine.joinMode(JoinMode::NoExistsJoin);

        return queryLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            super();

            tmpTotalDBKTrans = EximApplyDutyDrawback_IN::runOnServer(portId,
                                                                     productGroup,
                                                                     fromDateTime,
                                                                     toDateTime,
                                                                     transDateTime,
                                                                     detailSummary);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
            }
            else
            {
                 throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAllowedDrawback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves allowed drawbacks of the transaction.
    /// </summary>
    /// <param name="_tmpTotalDBKTrans">
    /// The instance of the <c>TmpEximTotalDBKTrans_IN</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void saveAllowedDrawback(TmpEximTotalDBKTrans_IN _tmpTotalDBKTrans)
    {
        select firstonly forupdate tmpTotalDBKTrans
            where tmpTotalDBKTrans.RecId == _tmpTotalDBKTrans.RecId;

        tmpTotalDBKTrans.AllowedDrawback = _tmpTotalDBKTrans.AllowedDrawback;
        tmpTotalDBKTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveMarkSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves marked transaction.
    /// </summary>
    /// <param name="_tmpTotalDBKTrans">
    /// The isntance of the <c>TmpEximTotalDBKTrans_IN</c>.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void saveMarkSelect(TmpEximTotalDBKTrans_IN _tmpTotalDBKTrans)
    {
        select firstonly forupdate tmpTotalDBKTrans
            where tmpTotalDBKTrans.RecId == _tmpTotalDBKTrans.RecId;

        tmpTotalDBKTrans.MarkSelect = _tmpTotalDBKTrans.MarkSelect;
        tmpTotalDBKTrans.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpEximTotalDBKTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets total DBK transactions.
    /// </summary>
    /// <param name="_tmpTotalDBkTrans">
    /// The isntance of the <c>TmpEximTotalDBKTrans_IN</c> class.
    /// </param>
    /// <returns>
    /// The isntance of the <c>TmpEximTotalDBKTrans_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximTotalDBKTrans_IN tmpEximTotalDBKTrans(TmpEximTotalDBKTrans_IN _tmpTotalDBkTrans = null)
    {
        if (!prmisdefault(_tmpTotalDBkTrans))
        {
            tmpTotalDBkTrans.setTmpData(_tmpTotalDBkTrans);
        }

        return tmpTotalDBkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDrawbackTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all drawbacks.
    /// </summary>
    /// <returns>
    /// The isntance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST updateDrawbackTotal()
    {
        select sum(AllowedDrawback) from tmpTotalDBkTrans
            where tmpTotalDBkTrans.MarkSelect == NoYes::Yes;

        return tmpTotalDBkTrans.AllowedDrawback;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>EximApplyDutyDrawback_IN</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from instance.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!portId)
        {
            ret = checkFailed(strfmt("@SYS116347", "@GLS61500"));
        }

        if (!fromDateTime)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS24050"));
        }

        if (!toDateTime)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS14656"));
        }
        else if (toDateTime < fromDateTime)
        {
            ret = checkFailed("@SYS103965");
        }

        if (!transDateTime)
        {
            ret = checkFailed(strfmt("@SYS116347", "@SYS67"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS61946";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EximApplyDutyDrawback_IN applyDutyDrawback;
        MenuFunction             menuFunction;
        Args                     args = new Args();

        if (!EximParameters_IN::checkDBKParameters())
        {
            throw error(strfmt("@GLS61933", "@GLS61946"));
        }

        menuFunction = new MenuFunction(menuitemdisplaystr(EximTotalDBKTrans_IN), MenuItemType::Display);

        // Check access rights
        if (!menuFunction || !menuFunction.checkAccessRights())
        {
            // Access rights are not sufficient to use this function.
            throw error("@SYS81158");
        }

        applyDutyDrawback = new EximApplyDutyDrawback_IN();

        if (applyDutyDrawback.prompt())
        {
            applyDutyDrawback.runOperation();
        }
        if (applyDutyDrawback.tmpEximTotalDBKTrans())
        {
            args.caller(applyDutyDrawback);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The instance run on server.
    /// </summary>
    /// <param name="_portId">
    /// The port id.
    /// </param>
    /// <param name="_productGroup">
    /// The product group.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date time.
    /// </param>
    /// <param name="_toDateTime">
    /// The to date time.
    /// </param>
    /// <param name="_transDateTime">
    /// The transaction date time.
    /// </param>
    /// <param name="_detailSummary">
    /// The detail summary.
    /// </param>
    /// <returns>
    /// The instance of the <c>TmpEximTotalDBKTrans_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TmpEximTotalDBKTrans_IN runOnServer(
        EximPortId_IN           _portId,
        EximProductGroup_IN     _productGroup,
        FromDateTime            _fromDateTime,
        ToDateTime              _toDateTime,
        TransDateTime           _transDateTime,
        DetailSummary           _detailSummary)
    {
        EximApplyDutyDrawback_IN    applyDutyDrawback;
        Query                       query;

        applyDutyDrawback = new EximApplyDutyDrawback_IN();
        applyDutyDrawback.parmPortId(_portId);
        applyDutyDrawback.parmProductGroup(_productGroup);
        applyDutyDrawback.parmFromDateTime(_fromDateTime);
        applyDutyDrawback.parmToDateTime(_toDateTime);
        applyDutyDrawback.parmTransDateTime(_transDateTime);
        applyDutyDrawback.parmDetailSummary(_detailSummary);

        query = applyDutyDrawback.queryBuild();

        if (applyDutyDrawback.checkDrawbackTransaction(query))
        {
            applyDutyDrawback.insertTmpEximTotalDBKTrans(query);
        }
        return applyDutyDrawback.tmpEximTotalDBKTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>