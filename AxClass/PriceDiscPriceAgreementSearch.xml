<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscPriceAgreementSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscPriceAgreementSearch</c> class is responsible for the price agreement search.
/// </summary>
public final class PriceDiscPriceAgreementSearch
{
    private const str CacheScopeFindPrice = 'PriceDisc:FindPrice';

    boolean                     priceExists  = false;

    container                   cacheValue;
    boolean                     cacheMode;

    PriceDiscPriceAgreementSearchParameters priceDiscPriceAgreementSearchParameters;

    PriceDisc                   priceDisc;
    private PriceType           priceDiscType;
    private SalesParameters     salesParameters;
    private PriceParameters     priceParameters;

    PriceDiscTableRefRecId      priceDiscTableRefRecId;
    boolean                     searchAgain;
    PriceDiscProductCodeType    itemCode;
    ItemRelation                itemRelation;
    PriceDiscPartyCodeType      accountCode;
    CustVendRel                 accountRelation;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retrieveCacheScope</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static str retrieveCacheScope()
    {
        return CacheScopeFindPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PriceDiscPriceAgreementSearch</c> class from the parameters.
    /// </summary>
    /// <param name = "_priceDiscPriceAgreementSearchParameters">The parameters for price agreement search.</param>
    /// <returns>An instance of the price agreement search class.</returns>
    [Hookable(false)]
    public static PriceDiscPriceAgreementSearch newFromParameters(PriceDiscPriceAgreementSearchParameters _priceDiscPriceAgreementSearchParameters)
    {
        PriceDiscPriceAgreementSearch priceDiscPriceAgreementSearch = new PriceDiscPriceAgreementSearch();

        priceDiscPriceAgreementSearch.priceDiscPriceAgreementSearchParameters = _priceDiscPriceAgreementSearchParameters;

        priceDiscPriceAgreementSearch.initialize();

        return priceDiscPriceAgreementSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current <c>PriceType</c> value.
    /// </summary>
    /// <returns>
    /// The current <c>PriceType</c> value.
    /// </returns>
    protected PriceType priceDiscType()
    {
        return priceDiscType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        priceDisc           = priceDiscPriceAgreementSearchParameters.parmPriceDisc();
        priceDiscType       = priceDisc.parmTradeModuleType().priceDiscType(PriceGroupType::PriceGroup);

        salesParameters     = SalesParameters::find();
        priceParameters     = PriceParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePrice</Name>
				<Source><![CDATA[
    private void initializePrice(PriceDiscTable _priceDiscTable, PriceType _priceType)
    {
        priceDisc.parmPrice(priceDisc.calcCurrencyUnitAmount2CurrencyUnitAmount(_priceDiscTable.price(),  _priceDiscTable));

        if (salesParameters.ApplySmartRoundingAfterConversion
            && _priceType == PriceType::PriceSales
            && _priceDiscTable.Currency != priceDisc.parmPriceDiscParameters().parmCurrencyCode())
        {
            priceDisc.parmPrice(PriceDiscSmartRounding::smartRound(priceDisc.parmPrice(), Currency::find(priceDisc.parmPriceDiscParameters().parmCurrencyCode())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesDateQualifyForFindingPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will check and compare the date and can be overwritten to meet customized needs.
    /// </summary>
    /// <param name = "_fromDate">From date.</param>
    /// <param name = "_toDate">To date.</param>
    /// <returns>
    /// True if it meets the date conditions; otherwise, false.
    /// </returns>
    protected boolean doesDateQualifyForFindingPriceAgreement(FromDate _fromDate, ToDate _toDate)
    {
        return ((priceDisc.parmPriceDiscParameters().parmPriceDiscDate() >= _fromDate || !_fromDate)
            && (priceDisc.parmPriceDiscParameters().parmPriceDiscDate() <= _toDate || !_toDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesQuantityQualifyForFindingPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will check and compare the quantity and can be overwritten to meet customized needs.
    /// </summary>
    /// <param name = "_qtyFrom">A value of quantity.</param>
    /// <param name = "_qtyTo">A value of quantity.</param>
    /// <param name = "_priceDisctable">The PriceDiscTable record to check.</param>
    /// <returns>
    /// True if it meets the quantity conditions; otherwise, false.
    /// </returns>
    protected boolean doesQuantityQualifyForFindingPriceAgreement(AmountQty _qtyFrom, AmountQuantityTo _qtyTo, PriceDiscTable _priceDisctable)
    {
        Qty absQty = abs(priceDisc.parmPriceDiscParameters().parmQty());

        if (priceDisc.parmPriceDiscParameters().parmUseRetailPricing())
        {
            absQty += abs(priceDisc.parmPriceDiscParameters().parmRetailGroupQty());
        }

        if (PriceDiscPriceAgreementSearchQtyFromToBehaviorFlight::instance().isEnabled())
        {
            return ((_qtyFrom <= absQty && (_qtyTo > absQty || (_qtyTo == 0)))
                || priceDisc.parmMCRPriceHistoryPotentialCalc()); // Quantity not checked for potential calculation
        }

        return ((_qtyFrom <= absQty && (_qtyTo >= absQty || (_qtyTo == 0)))
            || priceDisc.parmMCRPriceHistoryPotentialCalc()); // Quantity not checked for potential calculation
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAdditionalQualificationForFindingPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will check additional conditions for PriceDisc for retail scenario, and can be overwritten to meet customized needs.
    /// </summary>
    /// <param name = "_priceDiscTable">The PriceDisc record to check.</param>
    /// <returns>true if it meets retail condition; otherwise, false.</returns>
    protected boolean checkAdditionalQualificationForFindingPriceAgreement(PriceDiscTable _priceDiscTable)
    {
        boolean additionalCheckResult = true;

        if (!RetailFindTradeAgreementWithSiteWarehouseFlight::instance().isEnabled()
            && priceDisc.parmPriceDiscParameters().parmUseRetailPricing())
        {
            InventDim priceDiscDim = InventDim::find(_priceDiscTable.InventDimId);
            InventTableModule module = InventTableModule::find(_priceDiscTable.ItemRelation, ModuleInventPurchSales::Sales);

            // Retail pricing engine will not apply the trade agreements if:
            // both site and location are set;
            if (priceDiscDim.InventSiteId && priceDiscDim.InventLocationId)
            {
                additionalCheckResult = false;
            }
        }

        return additionalCheckResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPriceAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the price agreement record.
    /// </summary>
    /// <param name = "_priceDiscTable">
    /// A <c>PriceDiscTable</c> reference
    /// </param>
    protected void findPriceAgreement(PriceDiscTable _priceDiscTable)
    {
        Qty absQty = abs(priceDisc.parmPriceDiscParameters().parmQty());

        if (priceDisc.parmPriceDiscParameters().parmUseRetailPricing())
        {
            absQty += abs(priceDisc.parmPriceDiscParameters().parmRetailGroupQty());
        }

        if (priceDisc.calcCur2CurPriceAmount(_priceDiscTable.calcPriceAmount(absQty), _priceDiscTable) < priceDisc.calculatePriceAmount(absQty)
            || !priceExists
            || priceDisc.parmMCRPriceHistoryPotentialCalc())
        {
            priceDisc.calculatePriceAgreement(_priceDiscTable, priceDisc.parmTradeModuleType().priceDiscType(PriceGroupType::PriceGroup));
            priceDisc.mcrPriceDiscTableFound(_priceDiscTable);
            priceDisc.setMaxRetailPrice_IN(_priceDiscTable);
            priceExists = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveAccountRelation</Name>
				<Source><![CDATA[
    private CustVendRel retrieveAccountRelation(PriceDiscPartyCodeType _accountCode, PriceGroupId _priceGroupId)
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (_accountCode == PriceDiscPartyCodeType::Table
                && priceDisc.parmPriceDiscParameters().parmAgreementHeaderExt_RU()
                && priceDisc.parmPriceDiscParameters().parmAgreementPartnerCode_RU())
            {
                return priceDisc.parmPriceDiscParameters().parmAgreementPartnerCode_RU();
            }
        }
        
        return priceDisc.accountRelation(_accountCode, _priceGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustContinueSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to continue price search.
    /// </summary>
    /// <param name = "_priceDiscProductCodeTypeEnumerator">
    /// A product code type enumerator.</param>
    /// <param name = "_continueSearch">
    /// A Boolean value that indicates whether to continue the price search.
    /// </param>
    /// <param name = "_priceGroupId">
    /// A <c>PriceGroupId</c> value.
    /// </param>
    /// <param name = "_accountCode">
    /// An <c>PriceDiscPartyCodeType</c> value.
    /// </param>
    /// <returns>
    /// true if needs to continue price search; otherwise, false.
    /// </returns>
    protected boolean mustContinueSearch(ListEnumerator _priceDiscProductCodeTypeEnumerator, boolean _continueSearch, PriceGroupId _priceGroupId, PriceDiscPartyCodeType _accountCode)
    {
        return _priceDiscProductCodeTypeEnumerator.moveNext() && _continueSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for the price agreement and returns the .
    /// </summary>
    /// <returns>true if a price agreement was found; otherwise, false.</returns>
    [Hookable(false)]
    public boolean search()
    {
        if (!priceDisc.parmPriceDiscParameters().parmItemId())
        {
            return priceExists;
        }

        priceDisc.resetPrice();

        PriceDiscPartyCodeTypeOrderedList   priceDiscPartyCodeTypeOrderedList   = PriceDiscPartyCodeTypeOrderedList::newFromOrder(SortOrder::Ascending);
        PriceDiscProductCodeTypeOrderedList priceDiscProductCodeTypeOrderedList = PriceDiscProductCodeTypeOrderedList::newFromOrder(SortOrder::Ascending);

        ListEnumerator  priceDiscPartyCodeTypeEnumerator     = priceDiscPartyCodeTypeOrderedList.getEnumerator();
        ListEnumerator  priceDiscProductCodeTypeEnumerator   = priceDiscProductCodeTypeOrderedList.getEnumerator();
        boolean         continueSearch = true;

        while (priceDiscPartyCodeTypeEnumerator.moveNext() && continueSearch)
        {
            accountCode = priceDiscPartyCodeTypeEnumerator.current();

            while (this.mustContinueSearch(priceDiscProductCodeTypeEnumerator, continueSearch, priceDiscPriceAgreementSearchParameters.parmPriceGroupId(), accountCode))
            {
                itemCode        = priceDiscProductCodeTypeEnumerator.current();
                itemRelation    = priceDisc.itemRelationForPrice(itemCode);
                accountRelation = this.retrieveAccountRelation(accountCode, priceDiscPriceAgreementSearchParameters.parmPriceGroupId());

                if (PriceDiscTable::isPartyCodeProductCodeActivated(priceDiscType, accountCode, itemCode, priceParameters))
                {
                    if (PriceDisc::validatePartyRelation(accountCode, accountRelation)
                        && PriceDisc::validateProductRelation(itemCode, itemRelation))
                    {
                        // To avoid flooding the cache the most granulated setup isn't cached.
                        cacheMode = (itemCode != PriceDiscProductCodeType::Table || accountCode != PriceDiscPartyCodeType::Table)
                                    && !priceDisc.parmMCRPriceHistoryPotentialCalc();

                        cacheValue = conNull();

                        container key;

                        if (cacheMode)
                        {
                            PriceDiscCacheKey cacheKey = priceDisc.instantiatePriceDiscCacheKey();

                            cacheKey.initialize(priceDiscType, itemCode, itemRelation, accountCode, accountRelation, priceDiscPriceAgreementSearchParameters.parmInventDimId(), priceDisc.parmPriceDiscParameters());

                            key = cacheKey.pack();

                            cacheValue = PriceDisc::getPriceDiscCacheValue(CacheScopeFindPrice, key);
                        }

                        PriceDiscTable              priceDiscTable;
                        FromDate                    fromDate;
                        ToDate                      toDate;
                        AmountQty                   quantityAmountFrom;
                        AmountQuantityTo            quantityAmountTo;
                      
                        priceDiscTableRefRecId = 0;
                        searchAgain = false;

                        if (cacheValue == conNull())
                        {
                            Query query = priceDisc.buildPriceDiscFindPriceQuery(priceDiscType, priceDiscPriceAgreementSearchParameters.parmInventDimId(), itemCode, itemRelation, accountCode, accountRelation, priceDisc.parmPriceDiscParameters().parmUnitID());

                            QueryRun queryRun = new QueryRun(query);
                            while (queryRun.next())
                            {
                                priceDiscTable = queryRun.get(tableNum(PriceDiscTable));

                                if (cacheMode)
                                {
                                    cacheValue += [[priceDiscTable.FromDate,
                                                priceDiscTable.ToDate,
                                                priceDiscTable.QuantityAmountFrom,
                                                priceDiscTable.QuantityAmountTo,
                                                priceDiscTable.RecId,
                                                priceDiscTable.SearchAgain]];
                                }
                                else
                                {
                                    fromDate              = priceDiscTable.FromDate;
                                    toDate                = priceDiscTable.ToDate;
                                    quantityAmountFrom    = priceDiscTable.QuantityAmountFrom;
                                    quantityAmountTo      = priceDiscTable.QuantityAmountTo;
                                    priceDiscTableRefRecId = priceDiscTable.RecId;

                                    boolean priceDiscTableDateQualifiedForPriceAgreementSearch = this.doesDateQualifyForFindingPriceAgreement(fromDate, toDate);

                                    if (priceDiscTableDateQualifiedForPriceAgreementSearch
                                        && this.doesQuantityQualifyForFindingPriceAgreement(quantityAmountFrom, quantityAmountTo, priceDiscTable)
                                        && this.checkAdditionalQualificationForFindingPriceAgreement(priceDiscTable))
                                    {
                                        this.findPriceAgreement(priceDiscTable);
                                    }

                                    if (priceExists
                                        && !priceDiscTable.SearchAgain
                                        && !priceDisc.parmMCRPriceHistoryPotentialCalc()
                                        && (!PriceAgreementSearchConsiderActiveJourFindNextFlight::instance().isEnabled()
                                        || priceDiscTableDateQualifiedForPriceAgreementSearch))
                                    {
                                        continueSearch = false;
                                        break;
                                    }
                                }
                            }

                            if (cacheMode)
                            {
                                //We also want to cache the absence of prices.
                                if (cacheValue == conNull())
                                {
                                    cacheValue = [[0]];
                                }

                                PriceDisc::insertPriceDiscCache(CacheScopeFindPrice, key, cacheValue);
                            }
                        }

                        if (cacheMode && cacheValue)
                        {
                            for (int i=1; i<=conLen(cacheValue); i++)
                            {
                                [fromDate, toDate, quantityAmountFrom, quantityAmountTo, priceDiscTableRefRecId, searchAgain] = conPeek(cacheValue, i);
                                if (priceDiscTableRefRecId)
                                {
                                    priceDiscTable = PriceDiscTable::findRecId(priceDiscTableRefRecId);

                                    if (this.doesDateQualifyForFindingPriceAgreement(fromDate, toDate)
                                        && this.doesQuantityQualifyForFindingPriceAgreement(quantityAmountFrom, quantityAmountTo, priceDiscTable)
                                        && this.checkAdditionalQualificationForFindingPriceAgreement(priceDiscTable))
                                    {
                                        this.findPriceAgreement(priceDiscTable);
                                    }

                                    if (priceExists
                                        && !searchAgain
                                        && !priceDisc.parmMCRPriceHistoryPotentialCalc())
                                    {
                                        continueSearch = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            priceDiscProductCodeTypeEnumerator.reset();
        }

        return priceExists;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>