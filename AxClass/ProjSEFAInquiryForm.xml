<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSEFAInquiryForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class ProjSEFAInquiryForm
{
    private FromDate fromDate;
    private ToDate toDate;
    private boolean includeBilledRevenue;
    private ProjTmpSEFAInquiry projTmpSEFAInquiry;
    private ProjTmpSEFATotals projTmpSEFATotals;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProjSEFAInquiryForm construct()
    {
        return new ProjSEFAInquiryForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInquiry</Name>
				<Source><![CDATA[
    internal void processInquiry(
        ProjTmpSEFAInquiry _projTmpSEFAInquiry,
        ProjTmpSEFATotals _projTmpSEFATotals,
        FromDate _fromDate,
        ToDate _toDate,
        Boolean _includeBilledRevenue)
    {
        this.initializeVariables(
            _projTmpSEFAInquiry,
            _projTmpSEFATotals,
            _fromDate,
            _toDate,
            _includeBilledRevenue);
        this.clearTempTables();
        this.populateTemporaryTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVariables</Name>
				<Source><![CDATA[
    private void initializeVariables(
        ProjTmpSEFAInquiry _projTmpSEFAInquiry,
        ProjTmpSEFATotals _projTmpSEFATotals,
        FromDate _fromDate,
        ToDate _toDate,
        Boolean _includeBilledRevenue)
    {
        projTmpSEFAInquiry = _projTmpSEFAInquiry;
        projTmpSEFATotals = _projTmpSEFATotals;
        fromDate = _fromDate;
        toDate = _toDate;
        includeBilledRevenue = _includeBilledRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTempTables</Name>
				<Source><![CDATA[
    private void clearTempTables()
    {
        ttsbegin;

        delete_from projTmpSEFAInquiry;
        delete_from projTmpSEFATotals;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTemporaryTables</Name>
				<Source><![CDATA[
    private void populateTemporaryTables()
    {
        RecordInsertList recordInsertListSEFAInquiryRecords = new RecordInsertList(
            tablenum(ProjTmpSEFAInquiry),
            true,
            true,
            true,
            true,
            true,
            projTmpSEFAInquiry);

        Query query = new Query(queryStr(ProjSEFAInquiry));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            ProjGrant projGrant = queryRun.get(tableNum(ProjGrant));
            AmountCur receipts = this.calculateCostAndSaleAmount(projGrant, ProjAmountType::SalesAmount);
            AmountCur expenditures = this.calculateCostAndSaleAmount(projGrant, ProjAmountType::CostAmount);

            if (receipts || expenditures)
            {
                projTmpSEFAInquiry.clear();
                projTmpSEFAInquiry.Receipts = receipts;
                projTmpSEFAInquiry.Expenditures = expenditures;
                projTmpSEFAInquiry.GrantorAgency = this.getGrantorAgency(projGrant);
                projTmpSEFAInquiry.PassThroughAgency = this.getPassThroughAgency(projGrant);
                projTmpSEFAInquiry.GrantTitle = projGrant.GrantName;
                projTmpSEFAInquiry.GrantID = projGrant.GrantId;
                projTmpSEFAInquiry.GrantApplicationID = projGrant.GrantApplicationId;
                projTmpSEFAInquiry.CFDA = projGrant.CFDA;
                projTmpSEFAInquiry.GrantType = ProjGrantType::find(projGrant.ProjGrantType).GrantType;
                projTmpSEFAInquiry.CFDAClusterName = ProjCFDANumber::find(projGrant.CFDA).CFDAClusterName;
                recordInsertListSEFAInquiryRecords.add(projTmpSEFAInquiry);

                projTmpSEFATotals.Receipts += receipts;
                projTmpSEFATotals.Expenditures += expenditures;
            }
        }
        recordInsertListSEFAInquiryRecords.insertDatabase();
        select projTmpSEFAInquiry;

        projTmpSEFATotals.insert();
        select projTmpSEFATotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostAndSaleAmount</Name>
				<Source><![CDATA[
    private AmountCur calculateCostAndSaleAmount(ProjGrant _projGrant, ProjAmountType _amountType)
    {
        AmountCur totalAmount;

        if (!ProjGrantType::find(_projGrant.ProjGrantType).ExcludeFromSEFA)
        {
            Query queryProjTrans = new Query(queryStr(ProjTransQuery_Grant));
            QueryBuildDataSource qbdsProjTrans = queryProjTrans.dataSourceTable(tableNum(ProjGrant));
            QueryBuildDataSource qbdsProjPostTransView = queryProjTrans.dataSourceTable(tableNum(ProjPostTransView));

            if (qbdsProjTrans)
            {
                qbdsProjTrans.addRange(fieldNum(ProjGrant, GrantId)).value(_projGrant.GrantId);
            }

            if (qbdsProjPostTransView)
            {
                qbdsProjPostTransView.addRange(fieldNum(ProjPostTransView, TransDate)).value(queryRange(fromDate, toDate));
            }

            QueryRun queryRunProjTrans = new QueryRun(queryProjTrans);

            while (queryRunProjTrans.next())
            {
                ProjPostTransView projPostTransView = queryRunProjTrans.get(tableNum(ProjPostTransView));
                ProjInvoiceStatus projInvoiceStatus = projPostTransView.projInvoiceStatus(projPostTransView);

                boolean skipRecord = includeBilledRevenue
                    && projInvoiceStatus != ProjInvoiceStatus::FullyInvoiced
                    && projInvoiceStatus != ProjInvoiceStatus::PartiallyInvoiced;

                if (!skipRecord)
                {
                    if (_amountType == ProjAmountType::CostAmount)
                    {
                        totalAmount += this.grantTransCostAmount(projPostTransView, _projGrant.RecId);
                    }
                    else
                    {
                        totalAmount += this.grantTransSalesAmount(projPostTransView, _projGrant.Recid);
                    }
                }
            }
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grantTransCostAmount</Name>
				<Source><![CDATA[
    private AmountMST grantTransCostAmount(ProjPostTransView _projPostTransView, ProjGrantRecId _projGrantRecId)
    {
        AmountMST costAmount;
        ProjFundingSource projFundingSource;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                ProjItemTrans projItemTrans = ProjItemTrans::find(_projPostTransView.TransId);
                ProjItemTransCost projItemTransCost;

                while select projItemTransCost
                    where projItemTrans.InventTransId == projItemTransCost.InventTransId
                        && projItemTrans.ProjAdjustRefId == projItemTransCost.ProjAdjustRefId
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projItemTransCost.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0)
                {
                    costAmount += ProjTrans::newProjItemTransCost(projItemTransCost).transCostMST();
                }

                break;

            case ProjTransType::Hour:
                ProjEmplTrans projEmplTrans = ProjEmplTrans::find(_projPostTransView.TransId);
                ProjEmplTransCost projEmpTransCost;
                
                while select projEmpTransCost
                    where projEmpTransCost.TransId == projEmplTrans.TransId
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projEmpTransCost.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0)
                {
                    costAmount += ProjTrans::newProjEmplTransCost(projEmplTrans, projEmpTransCost).transCostMST();
                }

                break;

            case ProjTransType::Cost:
                ProjCostTrans projCostTrans = ProjCostTrans::find(_projPostTransView.TransId);
                ProjCostTransCost projCostTransCost;

                while select projCostTransCost
                    where projCostTransCost.TransId == projCostTrans.TransId
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projCostTransCost.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0)
                {
                    costAmount += ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost).transCostMST();
                }

                break;
        }
        
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grantTransSalesAmount</Name>
				<Source><![CDATA[
    private AmountMST grantTransSalesAmount(ProjPostTransView _projPostTransView, ProjGrantRecId _projGrantRecId)
    {
        AmountMST salesAmount;
        ProjFundingSource projFundingSource;

        switch (_projPostTransView.ProjTransType)
        {
            case ProjTransType::Item:
                ProjItemTrans projItemTrans = ProjItemTrans::find(_projPostTransView.TransId);
                ProjItemTransSale projItemTransSale;

                while select projItemTransSale
                    where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                        && projItemTransSale.TransStatus == ProjTransStatus::Invoiced
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projItemTransSale.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0)
                {
                    salesAmount += ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale).transTurnoverMST();
                }

                break;

            case ProjTransType::Hour:
                ProjEmplTrans projEmplTrans = ProjEmplTrans::find(_projPostTransView.TransId);
                ProjEmplTransSale projEmplTransSale;

                while select projEmplTransSale
                    where projEmplTransSale.TransId == projEmplTrans.TransId
                        && projEmplTransSale.TransStatus == ProjTransStatus::Invoiced
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projEmplTransSale.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0) 
                {
                    salesAmount += ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale).transTurnoverMST();
                }

                break;

            case ProjTransType::Cost:
                ProjCostTrans projCostTrans = ProjCostTrans::find(_projPostTransView.TransId);
                ProjCostTransSale projCostTransSale;

                while select projCostTransSale
                    where projCostTransSale.TransId == projCostTrans.TransId
                        && projCostTransSale.TransStatus == ProjTransStatus::Invoiced
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projCostTransSale.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0) 
                {
                    salesAmount += ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale).transTurnoverMST();
                }

                break;

            case ProjTransType::Revenue:
                ProjRevenueTrans projRevenueTrans = ProjRevenueTrans::find(_projPostTransView.TransId);
                ProjRevenueTransSale projRevenueTransSale;

                while select projRevenueTransSale
                    where projRevenueTransSale.TransId == projRevenueTrans.TransId
                        && projRevenueTransSale.TransStatus == ProjTransStatus::Invoiced
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projRevenueTransSale.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0) 
                {
                    salesAmount += ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).transTurnoverMST();
                }

                break;

            case ProjTransType::OnAccount:
                ProjOnAccTrans projOnAccTrans = ProjOnAccTrans::find(_projPostTransView.TransId);
                ProjOnAccTransSale projOnAccTransSale;

                while select projOnAccTransSale
                    where projOnAccTransSale.TransId == projOnAccTrans.TransId
                    exists join RecId from projFundingSource
                        where projFundingSource.RecId == projOnAccTransSale.FundingSource
                            && projFundingSource.FundingType == ProjFundingType::Grant
                            && (projFundingSource.ProjGrant == _projGrantRecId
                                || _projGrantRecId == 0)
                {
                    salesAmount += ProjTrans::newProjOnAccTransSale(projOnAccTrans, projOnAccTransSale).transTurnoverMST();
                }

                break;
        }

        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrantorAgency</Name>
				<Source><![CDATA[
    private ProjGrantGrantorAgency getGrantorAgency(ProjGrant _projGrant)
    {
        str grantorAgency = _projGrant.PassThrough ? this.getDirPartyTableName(_projGrant.GrantorAgency) : this.getDirPartyTableName(_projGrant.CustAccount);

        return grantorAgency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPassThroughAgency</Name>
				<Source><![CDATA[
    private CustAccount getPassThroughAgency(ProjGrant _projGrant)
    {
        str passThroughAgency = _projGrant.PassThrough ? this.getDirPartyTableName(_projGrant.CustAccount) : '';

        return passThroughAgency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyTableName</Name>
				<Source><![CDATA[
    private DirPartyName getDirPartyTableName(CustAccount _custAccount)
    {
        CustTable custTable;
        DirPartyTable dirPartyTable;

        select firstonly Name from dirPartyTable
            exists join custTable
                where dirPartyTable.RecId == custTable.Party
                    && custTable.AccountNum == _custAccount;

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>