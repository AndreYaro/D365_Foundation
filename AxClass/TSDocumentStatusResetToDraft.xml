<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSDocumentStatusResetToDraft</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TSDocumentStatusResetToDraft
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resetDocumentToDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets selected timesheet documents to Draft state.
    /// </summary>
    /// <param name = "_tsDatasource">
    /// Selected records from the Timesheet reset workflow status form.
    /// </param>
    public static void resetDocumentToDraft(FormDataSource _tsDatasource)
    {
        // Logger for instrumentating timesheet document status reset.
        TSManagementLogger logger = TSManagementLogger::createLogger('TSTimesheetTable');
        TSInstrumentationActivities activites = TSInstrumentationActivities::construct(logger);

        using (var loggerContext = logger.timesheetInstrumentationActivity().workflowApproveContext())
        {
            ttsbegin;
            TSTimesheetTable tsTimesheet;
            for (tsTimesheet = _tsDatasource.getFirst(true) ? _tsDatasource.getFirst(true) : _tsDatasource.cursor() ;
                 tsTimesheet; tsTimesheet = _tsDatasource.getNext())
            {
                TSTimesheetTable tsTimesheetTable = TSTimesheetTable::find(tsTimesheet.TimesheetNbr);
                TSDocumentStatusResetToDraft::resetTimesheet(tsTimesheetTable, logger);
            }

            ttscommit;
        }

        _tsDatasource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTimesheet</Name>
				<Source><![CDATA[
    public static void resetTimesheet(TSTimesheetTable _timesheetTable, TSManagementLogger _logger = null)
    {
        ttsbegin;
        
        if (_timesheetTable.ApprovalStatus == TSAppStatus::Pending
            && TSTimesheetHelper::recordHasLineItemApproval(_timesheetTable)
            && !FeatureStateProvider::isFeatureEnabled(TsTimesheetStatusForceResetForLineLevelWorkFlowFlight::instance()))
        {
            WorkflowTrackingStatusTable workflowTrackingStatusTable = Workflow::findTrackingStatusForDocument(_timesheetTable);

            var context = new TSWorkflowControlContext();
            context.parmWorkflowTrackingStatusTable(workflowTrackingStatusTable);

            var args = new Args();
            args.record(_timesheetTable);
            args.parmObject(context);

            if (_logger)
                _logger.logInformation(strFmt("Timesheet %1 is in %2 status. Document status has been reset to Draft.", _timesheetTable.TimesheetNbr, _timesheetTable.ApprovalStatus));

            TSWorkflowCancelManager::main(args);
        }
        else
        {
            TSTimesheetTrans tsTimesheetTrans;
            SubledgerJournalEntry subledgerJournalEntry;

            boolean allowToReset;

            if (FeatureStateProvider::isFeatureEnabled(TsTimesheetStatusResetUseAccountingEventForValidationFlight::instance()))
            {
                AccountingEvent accountingEvent;
                SourceDocumentHeader sourceDocumentHeader;
                    
                select firstonly RecId from accountingEvent
                        where accountingEvent.SourceDocumentHeader == _timesheetTable.SourceDocumentHeader
                           && (accountingEvent.State == AccountingEventState::Complete
                               || accountingEvent.State == AccountingEventState::Journalized)
                           && accountingEvent.IsAccountingRequired == NoYes::Yes;

                allowToReset = accountingEvent.RecId == 0;

                if (!allowToReset)
                {
                    if (_logger)
                        _logger.logInformation(strFmt("Changing the timesheet %1 status to draft was disallowed as it is already posted. (validated using AccountingEvent)."
                            , _timesheetTable.TimesheetNbr));
                }
            }
            else
            {
                select firstonly RecId from tsTimesheetTrans
                        where tsTimesheetTrans.Voucher != ''
                        exists join subledgerJournalEntry
                            where subledgerJournalEntry.Voucher == tsTimesheetTrans.Voucher
                                && subledgerJournalEntry.DocumentNumber == _timesheetTable.TimesheetNbr;

                allowToReset = !tsTimesheetTrans.RecId;

                if (!allowToReset)
                {
                    if (_logger)
                        _logger.logInformation(strFmt("Changing the timesheet %1 status to draft was disallowed as it is already posted. (validated using TsTimesheetTrans voucher).", _timesheetTable.TimesheetNbr));
                }
            }

            if (allowToReset)
            {
                TSTimesheetTable tsTimesheetUpdate;

                if (_logger)
                    _logger.logInformation(strFmt("Timesheet %1 is in %2 status. Document status has been reset to Draft.", _timesheetTable.TimesheetNbr, _timesheetTable.ApprovalStatus));
                update_recordset tsTimesheetUpdate setting ApprovalStatus = TSAppStatus::Create where tsTimesheetUpdate.TimesheetNbr == _timesheetTable.TimesheetNbr;
                TSTimesheetTable::updateLineStatus(_timesheetTable.TimesheetNbr, TSAppStatus::Create);
            }
        }

        _timesheetTable.reread();

        if (_timesheetTable.ApprovalStatus == TSAppStatus::Create)
        {
            TSDocumentStatusResetToDraft::deleteOrphanedRecordsAfterResetToDraft(_timesheetTable);
            ProjectCommitmentFacade::deleteProjectCommitmentsForDocument(_timesheetTable.SourceDocumentHeader);
            if (SourceDocumentHeader::find(_timesheetTable.SourceDocumentHeader).AccountingStatus > SourceDocumentAccountingStatus::InProcess)
            {
                SourcedocumentProcessorFacade::submitSourceDocumentLinesForHeader(_timesheetTable, SourceDocumentLineAccountingStatus::FullyDistributed);
            }
            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(_timesheetTable, SourceDocumentLineAccountingStatus::Draft);
        }
        else
        {
            if (_logger)
                _logger.logInformation(strFmt("System tried to reset the Timesheet %1 status to draft but reset failed.", _timesheetTable.TimesheetNbr));
        }  
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanedRecordsAfterResetToDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the old orphaned workflow related records after status is reset to draft and  
    /// updates the status for workflow status table records to cancelled.
    /// </summary>
    /// <param name = "_timesheet">
    /// A <c>TsTimesheetTable</c> instance.
    /// </param>
    private static void deleteOrphanedRecordsAfterResetToDraft(TsTimesheetTable _timesheet)
    {
        WorkflowWorkItemTable WorkflowWorkItemTable;
        WorkflowTrackingStatusTable WorkflowTrackingStatusTable;
        WorkflowTrackingWorkItem WorkflowTrackingWorkItem;

        TSTimesheetLine TSTimesheetLine;
        TSTimesheetTable TSTimesheetTable;

        RefTableId TsTimesheetLineTableId = TableNum(TSTimesheetLine);
        RefTableId TsTimesheetTableId = TableNum(TSTimesheetTable);
        
        ttsbegin;

        delete_from WorkflowTrackingWorkItem
            exists join WorkflowWorkItemTable
                where WorkflowWorkItemTable.RecId == WorkflowTrackingWorkItem.WorkFlowWorkItemTable &&
                    WorkflowWorkItemTable.Id == WorkflowTrackingWorkItem.WorkItemId
                        exists join TSTimesheetLine
                            where TSTimesheetLine.RecId == WorkflowWorkItemTable.RefRecId &&
                                WorkflowWorkItemTable.RefTableId == TsTimesheetLineTableId &&
                                    TSTimesheetLine.TimesheetNBR == _timesheet.TimesheetNbr;

        delete_from WorkflowTrackingWorkItem
            exists join WorkflowWorkItemTable
                where WorkflowWorkItemTable.RecId == WorkflowTrackingWorkItem.WorkFlowWorkItemTable &&
                    WorkflowWorkItemTable.Id == WorkflowTrackingWorkItem.WorkItemId
                        exists join TSTimesheetTable
                            where TSTimesheetTable.RecId == WorkflowWorkItemTable.RefRecId &&
                                WorkflowWorkItemTable.RefTableId == TsTimesheetTableId &&
                                    TSTimesheetTable.TimesheetNBR == _timesheet.TimesheetNbr;

        update_recordSet WorkflowWorkItemTable
        setting Status = WorkflowWorkItemStatus::Completed
        exists join TSTimesheetLine
            where TSTimesheetLine.RecId == WorkflowWorkItemTable.RefRecId &&
                WorkflowWorkItemTable.RefTableId == TsTimesheetLineTableId &&
                    TSTimesheetLine.TimesheetNBR == _timesheet.TimesheetNbr;

        update_recordSet WorkflowWorkItemTable
        setting Status = WorkflowWorkItemStatus::Completed
        exists join TSTimesheetTable
            where TSTimesheetTable.RecId == WorkflowWorkItemTable.RefRecId &&
                WorkflowWorkItemTable.RefTableId == TsTimesheetTableId &&
                    TSTimesheetTable.TimesheetNBR == _timesheet.TimesheetNbr;

        update_recordSet WorkflowTrackingStatusTable
        setting TrackingStatus = WorkflowTrackingStatus::Cancelled
        exists join TSTimesheetLine
            where TSTimesheetLine.RecId == WorkflowTrackingStatusTable.ContextRecId &&
                WorkflowTrackingStatusTable.ContextTableId == TsTimesheetLineTableId &&
                    TSTimesheetLine.TimesheetNBR == _timesheet.TimesheetNbr;

        update_recordSet WorkflowTrackingStatusTable
        setting TrackingStatus = WorkflowTrackingStatus::Cancelled
        exists join TSTimesheetTable
            where TSTimesheetTable.RecId == WorkflowTrackingStatusTable.ContextRecId &&
                WorkflowTrackingStatusTable.ContextTableId == TsTimesheetTableId &&
                    TSTimesheetTable.TimesheetNBR == _timesheet.TimesheetNbr;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the initial query of the Reset timesheet workflow status form
    /// </summary>
    /// <param name = "_qbdsTime">
    /// QueryBuildDatasource for TSTimesheetTable
    /// </param>
    /// <param name = "_qbdsResource">
    /// QueryBuildDatasource for ResourceWorkerView
    /// </param>
    public static void setQuery(QueryBuildDataSource _qbdsTime,QueryBuildDataSource _qbdsResource)
    {
        QueryBuildDataSource qbdsWf = _qbdsTime.addDataSource(tableNum(WorkflowTrackingStatusTable));
        qbdsWf.joinMode(JoinMode::InnerJoin);
        qbdsWf.addLink(fieldNum(TSTimesheetTable, RecId), fieldNum(WorkflowTrackingStatusTable, ContextRecId));
        qbdsWf.addRange(fieldNum(WorkflowTrackingStatusTable, CorrelationId)).value(strFmt('(%1.%2 == %1.%3)', qbdsWf.name(), fieldStr(WorkflowTrackingStatusTable, RootCorrelationId), fieldStr(WorkflowTrackingStatusTable, CorrelationId)));
        
        QueryBuildDataSource qbdsLine = qbdsWf.addDataSource(tableNum(WorkflowTrackingStatusTable));
        qbdsLine.joinMode(JoinMode::OuterJoin);
        qbdsLine.addLink(fieldNum(WorkflowTrackingStatusTable, RootCorrelationId), fieldNum(WorkflowTrackingStatusTable, ParentCorrelationId));

        QueryBuildRange qbr1 = qbdsWf.addRange(fieldNum(WorkflowTrackingStatusTable, TrackingStatus));
        qbr1.value(strFmt('((%1.%3 == %4) || (%2.%3 == %4))',
            qbdsWf.name(),
            qbdsLine.name(),
            fieldStr(WorkflowTrackingStatusTable, TrackingStatus),
            queryValue(enum2Int(WorkflowTrackingStatus::Unrecoverable))));

        QueryBuildRange qbr2 = qbdsWf.addRange(fieldNum(WorkflowTrackingStatusTable, TrackingStatus));
        qbr2.value(strFmt('((%1.%3 == %4) || (%2.%3 == %4))',
            qbdsWf.name(),
            qbdsLine.name(),
            fieldStr(WorkflowTrackingStatusTable, TrackingStatus),
            queryValue(enum2Int(WorkflowTrackingStatus::Faulted))));

        QueryBuildRange qbr3 = qbdsWf.addRange(fieldNum(WorkflowTrackingStatusTable, TrackingStatus));
        qbr3.value(strFmt('((%1.%3 == %4) || (%2.%3 == %4))',
            qbdsWf.name(),
            qbdsLine.name(),
            fieldStr(WorkflowTrackingStatusTable, TrackingStatus),
            queryValue(enum2Int(WorkflowTrackingStatus::Completed))));

        QueryBuildRange qbr4 = qbdsWf.addRange(fieldNum(WorkflowTrackingStatusTable, TrackingStatus));
        qbr4.value(strFmt('((%1.%3 == %4) || (%2.%3 == %4))',
            qbdsWf.name(),
            qbdsLine.name(),
            fieldStr(WorkflowTrackingStatusTable, TrackingStatus),
            queryValue(enum2Int(WorkflowTrackingStatus::Pending))));

        QueryBuildRange qbr5 = qbdsWf.addRange(fieldNum(WorkflowTrackingStatusTable, TrackingStatus));
        qbr5.value(strFmt('((%1.%3 == %4) || (%2.%3 == %4))',
            qbdsWf.name(),
            qbdsLine.name(),
            fieldStr(WorkflowTrackingStatusTable, TrackingStatus),
            queryValue(enum2Int(WorkflowTrackingStatus::Cancelled))));

        _qbdsTime.addGroupByField(fieldNum(TSTimesheetTable, TimesheetNbr));
        _qbdsResource.addGroupByField(fieldNum(ResourceWorkerView, PersonnelNumber));
        _qbdsResource.addGroupByField(fieldNum(ResourceWorkerView, Name));
        _qbdsTime.addGroupByField(fieldNum(TSTimesheetTable, PeriodFrom));
        _qbdsTime.addGroupByField(fieldNum(TSTimesheetTable, PeriodTo));
        _qbdsTime.addGroupByField(fieldNum(TSTimesheetTable, ApprovalStatus));

    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimesheetsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the filter of the form's query to selected document state, either In Review or Approved.
    /// </summary>
    /// <param name = "_qbdsTime">
    /// QueryBuildDatasource for TSTimesheetTable
    /// </param>
    /// <param name = "_selection">
    /// Selected option from the form.
    /// </param>
    public static void setTimesheetsQuery(QueryBuildDataSource _qbdsTime, TSDocumentStatusReset _selection )
    {
        SysQuery::findOrCreateRange(_qbdsTime, fieldNum(TSTimesheetTable, ApprovalStatus)).value(SysQueryRangeUtil::value(_selection));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>