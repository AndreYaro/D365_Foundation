<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSAResAssignAnalysis_ProjectResourceV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This derived class is used for handling project wise assignment analysis.
///     This class is used specifically when project resource performance enhancement feature is enabled.
/// </summary>
public class PSAResAssignAnalysis_ProjectResourceV2 extends PSAResAssignAnalysisBase
{
    private Query rootQuery;
    private QueryBuildDataSource details;

    private utcdatetime startDateTime;
    private utcdatetime endDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRootQuery</Name>
				<Source><![CDATA[
    public Query parmRootQuery(Query _rootQuery = rootQuery)
    {
        rootQuery = _rootQuery;
        return rootQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetails</Name>
				<Source><![CDATA[
    public QueryBuildDataSource parmDetails(QueryBuildDataSource _details = details)
    {
        details = _details;
        return details;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize the QueryBuildDataSource and rootQuery
    /// </summary>
    public void buildQuery()
    {
        rootQuery = new Query();

        details = this.buildProjectAnalysisDayQuery(rootQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectAnalysisDayQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query for getting project wise resource assignment analysis records.
    /// </summary>
    protected QueryBuildDataSource buildProjectAnalysisDayQuery(Query _rootQuery)
    {
        QueryBuildDataSource projectAnalysisDayDetails = _rootQuery.addDataSource(tableNum(ResProjectAnalysisDayViewV2));
        
        if (m_tCommon && (m_tCommon.TableId == tableNum(ProjTable)))
        {
            ProjTable projTable = m_tCommon;

            ActivityRecId activity = ActivityFacade::findActivityByProjectId(projTable.ProjId);
            projectAnalysisDayDetails.addRange(fieldNum(ResProjectAnalysisDayViewV2, Activity))
                .value(SysQuery::value(activity));
        }

        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, HasWBSTask));
        
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ProjType));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ProjId));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ActivityName));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ActivitySchedulingStatus));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ActivityTeamStartDate));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ActivityTeamEndDate));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, BookedCapacityHardHours));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, AssignedCapacityHardHours));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, ActivityEffort));
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, HardBooked), SelectionField::Sum);
        projectAnalysisDayDetails.addSelectionField(fieldnum(ResProjectAnalysisDayViewV2, HardAssigned), SelectionField::Sum);

        projectAnalysisDayDetails.orderMode(OrderMode::GroupBy);
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ProjType));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ProjId));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ActivityName));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ActivitySchedulingStatus));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ActivityTeamStartDate));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ActivityTeamEndDate));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, BookedCapacityHardHours));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, AssignedCapacityHardHours));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, ActivityEffort));
        projectAnalysisDayDetails.addGroupByField(fieldnum(ResProjectAnalysisDayViewV2, HasWBSTask));

        return projectAnalysisDayDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query based on value provided for project wise resource assignment analysis.
    /// </summary>
    public void initQuery()
    {
        startDateTime = DateTimeUtil::minValue();
        endDateTime = DateTimeUtil::maxValue();

        if (m_dStartDate)
        {
            startDateTime = DateTimeUtil::newDateTime(m_dStartDate, 0);
        }

        if (m_dEndDate)
        {
            endDateTime = DateTimeUtil::newDateTime(m_dEndDate, 0);
        }

        details.addRange(fieldnum(ResProjectAnalysisDayViewV2, Timeframe))
            .value(SysQuery::range(startDateTime, endDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssignmentAnalysis</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and populates the temporary table for project wise assignment analysis.
    /// </summary>
    public void insertAssignmentAnalysis()
    {
        #TimeConstants

        m_oSummaryQueryRun = new QueryRun(rootQuery);

        ttsbegin;

        while (m_oSummaryQueryRun.next())
        {
            ResProjectAnalysisDayViewV2 analysis = m_oSummaryQueryRun.get(tableNum(ResProjectAnalysisDayViewV2));
            boolean hasWBS = analysis.HasWBSTask;
            boolean doesRecordExist = false;

            select firstOnly m_tTmpResourceAssignmentAnalysis
                where m_tTmpResourceAssignmentAnalysis.VersionId == analysis.ProjId;

            if (m_tTmpResourceAssignmentAnalysis)
            {
                doesRecordExist = true;
            }

            //
            //  Checks if the record already exist in the temporary table.
            //  If the record doesn't exist then insert it otherwise update it.
            //
            if (!doesRecordExist)
            {
                m_tTmpResourceAssignmentAnalysis.VersionId                  = analysis.ProjId;
                m_tTmpResourceAssignmentAnalysis.Description                = analysis.ActivityName;
                m_tTmpResourceAssignmentAnalysis.ProjectType                = analysis.ProjType;
                m_tTmpResourceAssignmentAnalysis.ProjectSchedulingStatus    = analysis.ActivitySchedulingStatus;
                m_tTmpResourceAssignmentAnalysis.ScheduleStartDate          = analysis.ActivityTeamStartDate;
                m_tTmpResourceAssignmentAnalysis.ScheduleEndDate            = analysis.ActivityTeamEndDate;
                m_tTmpResourceAssignmentAnalysis.ProjectBookedHours         = analysis.BookedCapacityHardHours;
                m_tTmpResourceAssignmentAnalysis.ProjectAssignedHours       = analysis.AssignedCapacityHardHours;
                m_tTmpResourceAssignmentAnalysis.HardBookedHours            = analysis.HardBooked;
                m_tTmpResourceAssignmentAnalysis.HardAssignedHours          = analysis.HardAssigned;
                m_tTmpResourceAssignmentAnalysis.ProjectUnassignedHardHours = hasWBS ? analysis.HardBooked - analysis.HardAssigned : 0;
                m_tTmpResourceAssignmentAnalysis.WBSUnassignedHours         = hasWBS ? analysis.ActivityEffort - analysis.HardAssigned : 0;
                m_tTmpResourceAssignmentAnalysis.insert();
            }
            else
            {
                m_tTmpResourceAssignmentAnalysis.selectForUpdate(true);
                m_tTmpResourceAssignmentAnalysis.ScheduleStartDate = m_tTmpResourceAssignmentAnalysis.ScheduleStartDate > analysis.ActivityTeamStartDate ? 	analysis.ActivityTeamStartDate : m_tTmpResourceAssignmentAnalysis.ScheduleStartDate;
                m_tTmpResourceAssignmentAnalysis.ScheduleEndDate = m_tTmpResourceAssignmentAnalysis.ScheduleEndDate > analysis.ActivityTeamEndDate ? m_tTmpResourceAssignmentAnalysis.ScheduleEndDate : analysis.ActivityTeamEndDate;
                m_tTmpResourceAssignmentAnalysis.update();
            }
        }

        ttscommit;  
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>