<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobDeferredSchedulingScope</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages the scope in which all Kanban scheduling will be skipped to avoid rescheduling the same job multiple times.
/// </summary>
class KanbanJobDeferredSchedulingScope implements System.IDisposable
{
    private const str SkipPlanningKey = 'skipPlanning';
    
    boolean isTopLevelScope;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a new scope for skipping Kanban scheduling.
    /// </summary>
    /// <param name = "_deferScheduling">Determines whether scheduling will be skipped.</param>
    public void new(boolean _deferScheduling = true)
    {
        if (!_deferScheduling && KanbanJobDeferredSchedulingScope::shouldSkipPlanning())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        isTopLevelScope = _deferScheduling && !KanbanJobDeferredSchedulingScope::shouldSkipPlanning();

        if (_deferScheduling && isTopLevelScope)
        {
            KanbanJobDeferredSchedulingScope::setSkipPlanning(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the scope for skipping Kanban scheduling.
    /// </summary>
    public void Dispose()
    {
        if (isTopLevelScope)
        {
            KanbanJobDeferredSchedulingScope::setSkipPlanning(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTopLevelScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current scope is top level or nested wihin another scope.
    /// </summary>
    /// <returns>True, if it is a top level scope; False otherwise.</returns>
    public boolean isTopLevelScope()
    {
        return isTopLevelScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether scheduling should be skipped in the current session.
    /// </summary>
    /// <param name = "_skipPlanning">True if scheduling should be skipped; False otherwise.</param>
    public static void setSkipPlanning(boolean _skipPlanning)
    {
        SysGlobalCache globalCache = appl.globalCache();

        globalCache.set(classStr(KanbanJobDeferredSchedulingScope), SkipPlanningKey, _skipPlanning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether scheduling should be skipped in the current session.
    /// </summary>
    /// <returns>True if scheduling should be skipped; False otherwise.</returns>
    public static boolean shouldSkipPlanning()
    {
        SysGlobalCache globalCache = appl.globalCache();

        if (globalCache.isSet(classStr(KanbanJobDeferredSchedulingScope), SkipPlanningKey))
        {
            return globalCache.get(classStr(KanbanJobDeferredSchedulingScope), SkipPlanningKey);
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>