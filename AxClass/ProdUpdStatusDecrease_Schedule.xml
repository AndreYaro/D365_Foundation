<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStatusDecrease_Schedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdStatusDecrease_Schedule</c> class is used for changing production status from
/// scheduled to estimated.
/// </summary>
/// <remarks>
/// When production order has a scheduled status and the decrease status is started, an instance of
/// this class will be created.
/// </remarks>
[ProdStatusFactory(ProdStatus::Scheduled)]
class ProdUpdStatusDecrease_Schedule extends ProdUpdStatusDecrease
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the results of scheduling.
    /// </summary>
    /// <remarks>
    ///    The clean up will have an effect on BOM components, route operations and work centers.
    /// </remarks>
    void cleanUp()
    {
        ProdBOM          prodBOM;
        ProdRoute        prodRoute;
        PmfProdCoBy      pmfProdCoByProduct;

        while select forupdate prodBOM
            index hint NumIdx
            where prodBOM.ProdId == prodTable.ProdId
        {
            this.reverseProdBOM(prodBOM);
        }
        if (prodTable.ProdType == ProdType::Process)
        {
            while select forupdate pmfProdCoByProduct
                where pmfProdCoByProduct.ProdId == prodTable.ProdId
            {
                pmfProdCoByProduct.status().runStatusDecrease(this.parmParmBuffer());
            }
        }

        this.reverseWrkCtrCapRes();

        while select forupdate prodRoute
            index hint NumOprNumIdx
            where prodRoute.ProdId== prodTable.ProdId
        {
            this.reverseProdRoute(prodRoute);
        }

        // Reread the prodTable record since it might have been updated by the previous cleanup calls
        prodTable.reread();

        prodTable.SchedStart   = dateNull();
        prodTable.SchedEnd     = dateNull();

        prodTable.SchedStatus        = ProdSchedStatus::None;
        prodTable.SchedDate          = dateNull();

        prodTable.RouteJobs          = NoYes::No;

        ReqCalcExplode reqCalcExplode = ReqCalcExplodeProd::newProdTable(prodTable, NoYes::Yes, NoYes::Yes, NoYes::Yes);
        reqCalcExplode.deleteData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses production BOM and removes reservations for lines that have reservation set to
    ///    "Scheduling".
    /// </summary>
    /// <param name="_prodBOM">
    ///    The production BOM table buffer.
    /// </param>
    void reverseProdBOM(ProdBOM _prodBOM)
    {
        this.reverseDerived(_prodBOM);

        if (_prodBOM.Reservation == ProdReservation::Scheduling &&
            _prodBOM.ProdLineType == BOMType::Item)
        {
            InventMovement movement = InventMovement::construct(_prodBOM);
            if (movement)
                InventUpd_Reservation::deleteReserveRefTransId(movement,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseProdRoute</Name>
				<Source><![CDATA[
    void reverseProdRoute(ProdRoute prodRoute)
    {
        ProdRouteJob prodRouteJob;

        while select forupdate prodRouteJob
            index hint ProdOprIdx
            where  prodRouteJob.ProdId      == prodRoute.ProdId   &&
                   prodRouteJob.OprNum       == prodRoute.OprNum  &&
                   prodRouteJob.OprPriority  == prodRoute.OprPriority
        {
            prodRouteJob.delete();
        }
        prodRoute.FromDate   = dateNull();
        prodRoute.ToDate     = dateNull();
        prodRoute.FromTime   = 0;
        prodRoute.ToTime     = 0;

        prodRoute.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseWrkCtrCapRes</Name>
				<Source><![CDATA[
    void reverseWrkCtrCapRes()
    {
        WrkCtrCapRes wrkCtrCapRes;

        delete_from wrkCtrCapRes
            where wrkCtrCapRes.RefType         == WrkCtrCapRefType::Production          &&
                  wrkCtrCapRes.RefId           == prodTable.ProdId                      &&                  
                  (wrkCtrCapRes.LoadType        == WrkCtrCapacityType::JobSched         ||
                   wrkCtrCapRes.LoadType        == WrkCtrCapacityType::OperationSched)  &&
                  wrkCtrCapRes.PlanVersion == 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>