<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsPostMethodForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsPostMethodForm</c> class contains the business logic of the <c>WhsPostMethod</c> form.
/// </summary>
public class WhsPostMethodForm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNew_clicked</Name>
				<Source><![CDATA[
	/// <summary>
	/// Populates with new methods defined in WHSPostEngineCustom class when Add New button is clicked.
	/// </summary>
    void addNew_clicked()
    {
        this.addCustomWaveStepMethods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostMethods</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates base wave posting methods.
	/// </summary>
	/// <param name="_dictEnumBase">
	/// DictEnum containing base methods.
	/// </param>
	/// <param name="_dictEnumOptional">
	/// Not used any more.
	/// </param>
	/// <param name="_waveTemplateType">
	/// The wave template type.
	/// </param>
	/// <param name="_startPosition">
	/// The start position.
	/// </param>
	/// <returns>
	/// The number of methods created.
	/// </returns>
    protected int createPostMethods(
        DictEnum            _dictEnumBase,
        DictEnum            _dictEnumOptional,
        WHSWaveTemplateType _waveTemplateType,
        int                 _startPosition)
    {
        int position    = _startPosition;

        if (_dictEnumBase)
        {
            Map     specificallyOrderedMethods  = new Map(Types::Integer, Types::String);
            List    endingMethods               = new List(Types::String);

            for (int i = 0; i < _dictEnumBase.values(); i++)
            {
                WHSPostMethodName methodName = _dictEnumBase.value2Symbol(i);
                if (WHSPostMethod::canEnableMethod(methodName))
                {
                    WHSPostMethodPos specificOrderMethodPosition = WHSBaseWaveStepMethod::retrieveSpecificOrderMethodPosition(methodName);

                    if (specificOrderMethodPosition)
                    {
                        specificallyOrderedMethods.insert(specificOrderMethodPosition, methodName);
                    }
                    else
                    {
                        endingMethods.addEnd(methodName);
                    }
                }
            }

            ttsbegin;

            MapEnumerator mapEnumerator = specificallyOrderedMethods.getEnumerator();
            while (mapEnumerator.moveNext())
            {
                this.insertWHSPostMethod(mapEnumerator.currentValue(), position, _waveTemplateType);
                position++;
            }

            ListEnumerator listEnumerator = endingMethods.getEnumerator();
            while (listEnumerator.moveNext())
            {
                this.insertWHSPostMethod(listEnumerator.current(), position, _waveTemplateType);
                position++;
            }

            ttscommit;
        }

        return position - _startPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomWaveStepMethods</Name>
				<Source><![CDATA[
    private void addCustomWaveStepMethods()
    {
        this.addWaveTemplateTypeCustomMethods(WHSWaveTemplateType::Shipping);
        this.addWaveTemplateTypeCustomMethods(WHSWaveTemplateType::Production);
        this.addWaveTemplateTypeCustomMethods(WHSWaveTemplateType::Kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPosition</Name>
				<Source><![CDATA[
    private int nextPosition()
    {
        WHSPostMethod  whsPostMethod;
        select maxof(PostMethodPos) from whsPostMethod;
        return  whsPostMethod.PostMethodPos + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWaveTemplateTypeCustomMethods</Name>
				<Source><![CDATA[
    private void addWaveTemplateTypeCustomMethods(WHSWaveTemplateType _waveTemplateType)
    {
        int currentPosition = this.nextPosition();

        WHSWaveTemplateTypeFactoryAttribute attribute = new WHSWaveTemplateTypeFactoryAttribute(_waveTemplateType);
        List customWaveStepMethods = SysExtensionAppClassFactory::getClassInstanceListFromSysAttribute(classStr(WHSCustomWaveStepMethod), attribute);
        Enumerator enumerator = customWaveStepMethods.getEnumerator();
        while (enumerator.moveNext())
        {
            WHSCustomWaveStepMethod waveStepCustomMethod = enumerator.current() as WHSCustomWaveStepMethod;
            if (!WHSPostMethod::exist(waveStepCustomMethod.name()))
            {
                if (WHSPostMethod::canEnableMethod(waveStepCustomMethod.name()))
                {
                    this.insertWHSPostMethod(waveStepCustomMethod.name(), currentPosition, _waveTemplateType);
                    currentPosition++;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSPostMethod</Name>
				<Source><![CDATA[
    /// <summary>
	/// Inserts <c>WHSPostMethod</c> into database.
	/// </summary>
	/// <param name="_name">
	/// Method name of the record.
	/// </param>
	/// <param name="_counter">
	/// Method position of the record.
	/// </param>
	/// <param name="_waveType">
	/// Wave template type of the record. Default value: Shipping
	/// </param>
    void insertWHSPostMethod(
        WHSPostMethodName   _name,
        int                 _counter,
        WHSWaveTemplateType _waveType       = WHSWaveTemplateType::Shipping)
    {
        WHSPostMethod   whsPostMethod;

        ttsbegin;
        whsPostMethod.PostMethodPos    = _counter;
        whsPostMethod.PostMethodName   = _name;
        whsPostMethod.WaveTemplateType = _waveType;
        whsPostMethod.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>repeatableMethodList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves repeatable method names to the list.
    /// </summary>
    /// <returns>
    /// List of repeatable methods.
    /// </returns>
    private List repeatableMethodList()
    {
        WHSPostMethod   whsPostMethod;
        List            repeatableMethods = new List(Types::String);

        while select PostMethodName from whsPostMethod
            where whsPostMethod.RepeatableStep == NoYes::Yes
        {
            repeatableMethods.addEnd(whsPostMethod.PostMethodName);
        }

        return repeatableMethods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeMethodsRepeatable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes given methods repeatable.
    /// </summary>
    /// <param name = "_repeatableMethods">
    /// A list of method names to make repeatable.
    /// </param>
    private void makeMethodsRepeatable(List _repeatableMethods)
    {
        WHSPostMethod   whsPostMethod;
        
        ttsbegin;

        ListEnumerator repeatableMethodEnumerator = _repeatableMethods.getEnumerator();
        while (repeatableMethodEnumerator.moveNext())
        {
            WHSPostMethodName methodName = repeatableMethodEnumerator.current();
            whsPostMethod = WHSPostMethod::findByMethodName(methodName, true);

            if (whsPostMethod)
            {
                whsPostMethod.RepeatableStep = NoYes::Yes;
                whsPostMethod.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerate_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Synchronizes the methods defined in base classes and custom class with the database.
	/// </summary>
    public void regenerate_clicked()
    {
        WHSPostMethod   whsPostMethod;
        int             position = 1;

        ttsbegin;

        List repeatableMethods = this.repeatableMethodList();

        delete_from whsPostMethod;

        // shipping
        position += this.createPostMethods(
                        new DictEnum(enumNum(WHSPostMethodsBase)),
                        new DictEnum(enumNum(WHSPostMethodBaseOptional)),
                        WHSWaveTemplateType::Shipping,
                        position);

        // production
        position += this.createPostMethods(
                        new DictEnum(enumNum(WHSPostMethodBaseProd)),
                        new DictEnum(enumNum(WHSPostMethodBaseProdOptional)),
                        WHSWaveTemplateType::Production,
                        position);

        // kanban
        position += this.createPostMethods(
                        new DictEnum(enumNum(WHSPostMethodBaseKanban)),
                        new DictEnum(enumNum(WHSPostMethodBaseKanbanOptional)),
                        WHSWaveTemplateType::Kanban,
                        position);

        this.addCustomWaveStepMethods();
        this.deleteOrphanConfiguration();
        this.makeMethodsRepeatable(repeatableMethods);

        // Revalidate WaveTemplates
        WHSWaveTemplateTable::validateAndUpdateAllTemplatesValidValue();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOrphanConfiguration</Name>
				<Source><![CDATA[
    private void deleteOrphanConfiguration()
    {
        WHSPostMethod   whsPostMethod;
        WHSWavePostMethodTaskConfiguration   whsWavePostMethodTaskConfiguration;

        delete_from whsWavePostMethodTaskConfiguration
            notexists join whsPostMethod
            where whsPostMethod.PostMethodName == whsWavePostMethodTaskConfiguration.PostMethodName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>