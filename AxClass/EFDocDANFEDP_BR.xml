<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EfDocDANFEDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Retrieves data for EFDocDANFE_BR report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(FiscalDocumentContract_BR))
]
public class EfDocDANFEDP_BR extends SrsReportDataProviderPreProcess
{
    #NFPrinting_BR

    FiscalDocument_BR               fiscalDocument;
    EFDocDANFETmp_BR                eFiscalDocumentTmp;
    EFDocDANFEItemsTmp_BR           eFiscalDocumentItemsTmp;
    EFDocDANFEInfoAdicTmp_BR        efDocInfoAdicTmp;
    EFDocDANFEInstallmentsTmp_BR    efDocInstallmentsTmp;
    EFDocDANFEPaymentTransTmp_BR    efDocPaymentTransTmp;
    boolean                         efDocDanfeTmpCutOffItem, efDocDanfeTmpLastItem, efDocDanfeTmpBlankItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalInformationBox</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the size limit for additional information box.
    /// </summary>
    /// <param name = "_description">The text to be set in the box.</param>
    /// <returns>The calculated size limit.</returns>
    protected int additionalInformationBox(str _description)
    {
        int additionalInfFirstPage, boxQuantity;

        additionalInfFirstPage = strLen(_description) - #MaxDescSizeAdditionaInfFirstPage;

        if (additionalInfFirstPage > 0)
        {
            boxQuantity = additionalInfFirstPage mod #MaxDescSizeAdditionalInformation > 0 ? real2int(additionalInfFirstPage / #MaxDescSizeAdditionalInformation) + 1 : real2int(additionalInfFirstPage / #MaxDescSizeAdditionalInformation);
        }
        return boxQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalInformationPageBreak</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maintains page break operation.
    /// </summary>
    /// <param name = "_itemRow">The number of item.</param>
    /// <param name = "_eFiscalDocument">Electronic fiscal document object.</param>
    protected void additionalInformationPageBreak(int _itemRow, EFiscalDocument_BR _eFiscalDocument)
    {
        int     pagesBox, itemPage, iCount;

        itemPage = this.pageForItemAtRow(_itemRow);
        pagesBox = this.additionalInformationBox(_eFiscalDocument.getHeaderLegalTexts());

        efDocDanfeTmpCutOffItem = false;
        efDocDanfeTmpLastItem   = false;
        efDocDanfeTmpBlankItem  = true;

        if (pagesBox >= itemPage)
        {
            for (iCount = 0 ; iCount < pagesBox ; iCount++)
            {
                itemPage += 1;

                eFiscalDocumentItemsTmp.CutOffDescription       = efDocDanfeTmpCutOffItem;
                eFiscalDocumentItemsTmp.LastCutOffDescription   = efDocDanfeTmpLastItem;
                eFiscalDocumentItemsTmp.Blank                   = efDocDanfeTmpBlankItem;
                eFiscalDocumentItemsTmp.Page                    = itemPage;

                this.insertEFDocItemsTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalLinesForItemDescription</Name>
				<Source><![CDATA[
    private int additionalLinesForItemDescription(int _itemDescriptionLenght)
    {
        int additionalDescription, additionalLines;

        additionalDescription = (_itemDescriptionLenght - #MaxItemDescSize);
        additionalLines = (additionalDescription mod #MaxItemDescSize) > 0 ? real2int(additionalDescription / #MaxItemDescSize) + 1 : max(0, real2int(additionalDescription / #MaxItemDescSize));
        return additionalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDigit</Name>
				<Source><![CDATA[
    private str checkDigit(str _accessKey)
    {
        #define.Module(11)
        int     lenght, iCount, weight, result;
        str     value;

        weight = 2;

        lenght = strLen(_accessKey);

        for (iCount = lenght ; iCount > 0 ; iCount--)
        {
            value   = subStr(_accessKey, iCount, 1);
            result  += str2int(value) * weight;
            weight  += 1;
        }

        result = #Module - (result mod #Module);

        return this.formatFillLeft(int2str(result), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSuframaDiscount</Name>
				<Source><![CDATA[
    private Amount calculateSuframaDiscount(EFiscalDocument_BR _eFiscalDocument)
    {
        Amount suframaDiscount;

        if (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Vendor
            || (fiscalDocument.FiscalDocumentAccountType == CustVendType_BR::Customer
                && CustTable::find(fiscalDocument.FiscalDocumentAccountNum).Suframa_BR == NoYes::No))
        {
            FiscalEstablishment_BR fiscalEstablishment = _eFiscalDocument.fiscalEstablishment();
            LogisticsAddressStateId state = fiscalEstablishment.postalAddress().State;
            EFDocAuthorityState_BR efDocAuthorityState;
            LogisticsAddressState logisticsAddressState;

            select firstOnly RecId from efDocAuthorityState
                where efDocAuthorityState.AuthorityId == fiscalEstablishment.EFDocAuthority
                    && efDocAuthorityState.AddExempt == NoYes::Yes
            exists join logisticsAddressState
                where logisticsAddressState.RecId == efDocAuthorityState.LogisticsAddressState
                    && logisticsAddressState.StateId == state;

            container vICMSDesonCodesCon = efDocAuthorityState.RecId != 0 ? EFDocConstants_BR::CSTWithICMSDesonWhenAllowed : EFDocConstants_BR::CSTWithICMSDeson;
            suframaDiscount = _eFiscalDocument.totalSuframaDiscountICMSAmount() + _eFiscalDocument.getTotalTaxAmountFromBaseAmount(TaxType_BR::ICMS, true, vICMSDesonCodesCon);
        }

        return suframaDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdditionalBarCode</Name>
				<Source><![CDATA[
    private void createAdditionalBarCode(EFiscalDocument_BR _eFiscalDocument)
    {
        str                         totalAmount;
        EFiscalDocumentLineTax_BR   taxLine;
        #define.TotalAmountSizeForBarCode(14)

        totalAmount = strKeep(num2str(_eFiscalDocument.fiscalDocument().TotalAmount, 0, 2, 1, 0), '0123456789');
        totalAmount = strRep('0', #TotalAmountSizeForBarCode - strLen(totalAmount)) + totalAmount;

        if (_eFiscalDocument.nextLine())
        {
            taxLine = _eFiscalDocument.currentLine().getTaxLine(TaxType_BR::ICMS, '');

            eFiscalDocumentTmp.AdditionalBarCode = this.generateBarCode(this.formatFillLeft(_eFiscalDocument.deliveryCityIBGECode(), 2)         +
                                                                        this.formatFillLeft(int2str(_eFiscalDocument.contingencyMode()), 2)     +
                                                                        strDel(_eFiscalDocument.deliveryCNPJ(), 13, 1)                          +
                                                                        totalAmount                                                             +
                                                                        (taxLine.taxAmount() ? '01' : '02')                                     +
                                                                        (taxLine.tribSubstTaxAmount() ? '01' : '02')                            +
                                                                         this.checkDigit(_eFiscalDocument.accessKey()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdditionalInf</Name>
				<Source><![CDATA[
    private void createAdditionalInf(EFiscalDocument_BR _eFiscalDocument)
    {
        str additionalInformation;

        // Header Legal texts + header additional information texts + Delivery address
        additionalInformation =  fiscalDocument.getLegalTextsAsString(DocuRestriction::External);
        additionalInformation += fiscalDocument.getAdditionalInformationAsString();
        additionalInformation += this.getDeliveryPostalAddressAsString();

        eFDocInfoAdicTmp.clear();
        eFDocInfoAdicTmp.AdditionalInformation = additionalInformation;
        this.insertEFDocInfoAdicTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBarCode</Name>
				<Source><![CDATA[
    private void createBarCode(EFiscalDocument_BR _eFiscalDocument)
    {
        eFiscalDocumentTmp.BarCode = this.generateBarCode(_eFiscalDocument.accessKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCarrierFields</Name>
				<Source><![CDATA[
    private void createCarrierFields(EFiscalDocument_BR _eFiscalDocument)
    {
        eFiscalDocumentTmp.CarrierCNPJ                  = _eFiscalDocument.carrierCNPJ();
        eFiscalDocumentTmp.CarrierName                  = _eFiscalDocument.carrierName();
        eFiscalDocumentTmp.CarrierIENum                 = _eFiscalDocument.carrierIENum();
        eFiscalDocumentTmp.CarrierAddress               = _eFiscalDocument.carrierAddress();
        eFiscalDocumentTmp.CarrierCity                  = _eFiscalDocument.carrierCity();
        eFiscalDocumentTmp.CarrierStateId               = _eFiscalDocument.carrierStateId();
        eFiscalDocumentTmp.VehicleLicensePlateNumber    = _eFiscalDocument.fiscalDocument().VehicleLicensePlateNumber;
        eFiscalDocumentTmp.VehicleLicensePlateState     = _eFiscalDocument.fiscalDocument().VehicleLicensePlateState;
        eFiscalDocumentTmp.VolumeQty                    = _eFiscalDocument.volumeQty();
        eFiscalDocumentTmp.VolumeType                   = _eFiscalDocument.volumeType();
        eFiscalDocumentTmp.PackingBrand                 = _eFiscalDocument.fiscalDocument().PackingBrand;
        eFiscalDocumentTmp.NetWeight                    = _eFiscalDocument.netWeight();
        eFiscalDocumentTmp.GrossWeight                  = _eFiscalDocument.grossWeight();
        eFiscalDocumentTmp.FreightChargeTerms           = _eFiscalDocument.fiscalDocument().FreightChargeTerms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeliveryFields</Name>
				<Source><![CDATA[
    private void createDeliveryFields(EFiscalDocument_BR _eFiscalDocument)
    {

        eFiscalDocumentTmp.HasDeliveryAddress           = _eFiscalDocument.hasDeliveryAddress() ? 1 : 0;
        if (_eFiscalDocument.hasDeliveryAddress())
        {
            eFiscalDocumentTmp.DeliveryCNPJ                 = _eFiscalDocument.deliveryCNPJ();
            eFiscalDocumentTmp.DeliveryCity                 = _eFiscalDocument.deliveryAddressCityName();
            eFiscalDocumentTmp.DeliveryZipCode              = _eFiscalDocument.deliveryZipCode();
            eFiscalDocumentTmp.DeliveryStreet               = _eFiscalDocument.deliveryAddressStreet();
            eFiscalDocumentTmp.DeliveryStreetNumber         = _eFiscalDocument.deliveryAddressStreetNumber();
            eFiscalDocumentTmp.DeliveryBuildingCompliment   = _eFiscalDocument.deliveryAddressBuildingCompliment();
            eFiscalDocumentTmp.DeliveryDistrict             = _eFiscalDocument.deliveryAddressDistrict();
            eFiscalDocumentTmp.DeliveryState                = _eFiscalDocument.deliveryAddressState();
            eFiscalDocumentTmp.DeliveryIE                   = _eFiscalDocument.deliveryIEnum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createICMSTaxFields</Name>
				<Source><![CDATA[
    private void createICMSTaxFields(EFiscalDocumentLine_BR _lineMap)
    {
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ICMS, '');

        eFiscalDocumentItemsTmp.TaxationOrigin = taxLine.taxationOrigin();

        switch (taxLine.taxationCode())
        {
            case '00':
                eFiscalDocumentItemsTmp.TaxationCode    = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TaxBaseAmount   = taxLine.taxBaseAmount();
                eFiscalDocumentItemsTmp.icmsTaxPct      = taxLine.taxPct();
                eFiscalDocumentItemsTmp.icmsTaxAmount   = taxLine.taxAmount();

                if (taxLine.taxAmount() && taxLine.taxPovertyFundAmount()) 
                {
                    eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal = taxLine.taxPovertyFundAmount();
                }

                break;

            case '10':
                eFiscalDocumentItemsTmp.TaxationCode            = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TaxBaseAmount           = taxLine.taxBaseAmount();
                eFiscalDocumentItemsTmp.icmsTaxPct              = taxLine.taxPct();
                eFiscalDocumentItemsTmp.icmsTaxAmount           = taxLine.taxAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxBaseAmount  = taxLine.tribSubstTaxBaseAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxAmount      = taxLine.tribSubstTaxAmount();

                if (taxLine.taxAmount() && taxLine.taxPovertyFundAmount())
                {
                    eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal = taxLine.taxPovertyFundAmount();
                }
                break;

            case '20':
                eFiscalDocumentItemsTmp.TaxationCode    = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TaxBaseAmount   = taxLine.taxBaseAmount();
                eFiscalDocumentItemsTmp.icmsTaxPct      = taxLine.taxPct();
                eFiscalDocumentItemsTmp.icmsTaxAmount   = taxLine.taxAmount();

                if (taxLine.taxAmount() && taxLine.taxPovertyFundAmount())
                {
                    eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal = taxLine.taxPovertyFundAmount();
                }

                break;

            case '30':
                eFiscalDocumentItemsTmp.TaxationCode            = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TribSubstTaxBaseAmount  = taxLine.tribSubstTaxBaseAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxAmount      = taxLine.tribSubstTaxAmount();
                break;

            case '40', '41', '50':
                eFiscalDocumentItemsTmp.TaxationCode    = taxLine.taxationCode();
                break;

            case '51':
                eFiscalDocumentItemsTmp.TaxationCode    = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TaxBaseAmount   = taxLine.taxBaseAmountOther();
                eFiscalDocumentItemsTmp.icmsTaxPct      = taxLine.taxPct();
                eFiscalDocumentItemsTmp.icmsTaxAmount   = EFDocConstants_BR::Zero;

                TaxAmount taxAmount51 = taxLine.taxAmount() + taxLine.taxAmountOther();
                taxAmount51 = taxAmount51 ? taxAmount51 - taxLine.taxPovertyFundAmount() : 0;

                if (taxAmount51 && taxLine.taxPovertyFundAmount()) 
                {
                    eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal = taxLine.taxPovertyFundAmount();
                }

                break;

            case '60':
                eFiscalDocumentItemsTmp.TaxationCode            = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TribSubstTaxBaseAmount  = taxLine.tribSubstTaxBaseAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxAmount      = taxLine.tribSubstTaxAmount();
                break;

            case '70':
                eFiscalDocumentItemsTmp.TaxationCode            = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TaxBaseAmount           = taxLine.taxBaseAmount();
                eFiscalDocumentItemsTmp.icmsTaxPct              = taxLine.taxPct();
                eFiscalDocumentItemsTmp.icmsTaxAmount           = taxLine.taxAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxBaseAmount  = taxLine.tribSubstTaxBaseAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxAmount      = taxLine.tribSubstTaxAmount();

                if (taxLine.taxAmount() && taxLine.taxPovertyFundAmount())
                {
                    eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal = taxLine.taxPovertyFundAmount();
                }
                break;

            case '90':
                eFiscalDocumentItemsTmp.TaxationCode            = taxLine.taxationCode();
                eFiscalDocumentItemsTmp.TaxBaseAmount           = taxLine.taxBaseAmountOther();
                eFiscalDocumentItemsTmp.icmsTaxPct              = taxLine.taxPct();
                eFiscalDocumentItemsTmp.icmsTaxAmount           = taxLine.taxAmountOther();
                eFiscalDocumentItemsTmp.TribSubstTaxBaseAmount  = taxLine.tribSubstTaxBaseAmount();
                eFiscalDocumentItemsTmp.TribSubstTaxAmount      = taxLine.tribSubstTaxAmount();

                if (taxLine.taxAmountOther() && taxLine.taxPovertyFundAmount())
                {
                    eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal = taxLine.taxPovertyFundAmount();
                }

                break;
        }
        
        if (eFiscalDocumentItemsTmp.icmsTaxAmount > 0)
        {
            eFiscalDocumentItemsTmp.icmsTaxAmount -= taxLine.taxPovertyFundAmount();
            eFiscalDocumentItemsTmp.icmsTaxPct -= taxLine.taxPovertyFundPercentage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdentifFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>eFiscalDocumentTmp</c> table buffer with values from the <c>EFiscalDocument_BR</c> record.
    /// </summary>
    /// <param name = "_eFiscalDocument">An instance of an <c>EFiscalDocument_BR</c> record.</param>
    protected void createIdentifFields(EFiscalDocument_BR _eFiscalDocument)
    {
        EFDocState_BR   eFDocState = EFDocState_BR::createFromEFdocument(_eFiscalDocument.eFDocument());

        eFiscalDocumentTmp.ConsumerEFDocInquiryUrl      = _eFiscalDocument.eFDocument().ConsumerEFDocInquiryUrl;
        eFiscalDocumentTmp.ConsumerEFDocEnvironment     = _eFiscalDocument.fiscalEstablishment().ConsumerEFDocEnvironment;
        eFiscalDocumentTmp.NumericCode                  = _eFiscalDocument.numericCode();
        eFiscalDocumentTmp.OperationDescription         = _eFiscalDocument.fiscalDocument().OperationDescription;
        eFiscalDocumentTmp.FiscalDocumentSeries         = _eFiscalDocument.fiscalDocument().FiscalDocumentSeries;
        eFiscalDocumentTmp.FiscalDocumentNumber         = _eFiscalDocument.fiscalDocument().FiscalDocumentNumber;
        eFiscalDocumentTmp.InventoryDirection           = _eFiscalDocument.inventoryDirection();
        eFiscalDocumentTmp.ContingencyMode              = _eFiscalDocument.contingencyMode();
        eFiscalDocumentTmp.ContingencyReason            = _eFiscalDocument.contingencyReason();
        eFiscalDocumentTmp.AccessKey                    = _eFiscalDocument.accessKey();
        eFiscalDocumentTmp.ProtocolNumber               = _eFiscalDocument.protocolNumber();
        eFiscalDocumentTmp.Date                         = _eFiscalDocument.eFDocument().Date;
        eFiscalDocumentTmp.Time                         = time2StrHMS(_eFiscalDocument.eFDocument().Time);
        eFiscalDocumentTmp.Approved                     = eFDocState.canPrintDanfe();
 
        utcdatetime fiscalDocumentDateTime = DateTimeUtil::addSeconds(
            _eFiscalDocument.fiscalDocument().FiscalDocumentDateTime,
            _eFiscalDocument.fiscalDocument().FiscalDocumentDateTimeOffset);

        eFiscalDocumentTmp.FiscalDocumentDateTimeStr = DateTimeUtil::toStr(fiscalDocumentDateTime);
        eFiscalDocumentTmp.FiscalDocumentDate = DateTimeUtil::date(fiscalDocumentDateTime);
        eFiscalDocumentTmp.FiscalDocumentTime = time2StrHMS(DateTimeUtil::time(fiscalDocumentDateTime));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstallments</Name>
				<Source><![CDATA[
    private void createInstallments(EFiscalDocument_BR _eFiscalDocument)
    {
        ListEnumerator                  enumerator;
        FiscalDocumentInstallment_BR    fiscalDocumentInstallment;
        Counter                         linenum;

        enumerator = _eFiscalDocument.paymSchedList().getEnumerator();

        if (_eFiscalDocument.invoiceSpecie_BR() == FiscalDocumentSpecie_BR::NFF)
        {
            if (enumerator)
            {
                efDocInstallmentsTmp.clear();

                while (enumerator.moveNext())
                {
                    linenum++;

                    fiscalDocumentInstallment = enumerator.current();

                    efDocInstallmentsTmp.Parcel = strFmt('%1/%2', int2str(linenum), strKeep(_eFiscalDocument.fiscalDocument().FiscalDocumentNumber, '123456789'));
                    efDocInstallmentsTmp.Amount = fiscalDocumentInstallment.Amount;
                    efDocInstallmentsTmp.DueDate = fiscalDocumentInstallment.DueDate;

                    this.insertEFDocInstallmentsTmp();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIPITaxFields</Name>
				<Source><![CDATA[
    private void createIPITaxFields(EFiscalDocumentLine_BR _lineMap)
    {
        EFiscalDocumentLineTax_BR       taxLine;

        if (_lineMap.getTaxLine(TaxType_BR::IPI, '').hasTaxTrans())
        {
            taxLine = _lineMap.getTaxLine(TaxType_BR::IPI, '00, 49, 50, 99');

            if (taxLine.hasTaxTrans())
            {
                eFiscalDocumentItemsTmp.ipiTaxPct       = taxLine.taxPct();
                eFiscalDocumentItemsTmp.ipiTaxAmount    = taxLine.taxAmount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIssuerFields</Name>
				<Source><![CDATA[
    private void createIssuerFields(EFiscalDocument_BR _eFiscalDocument)
    {
        eFiscalDocumentTmp.IssuerCNPJ               = _eFiscalDocument.issuerCNPJ() ? _eFiscalDocument.issuerCNPJ() : _eFiscalDocument.issuerCPF();
        eFiscalDocumentTmp.IssuerName               = _eFiscalDocument.issuerName();
        eFiscalDocumentTmp.IssuerStreet             = _eFiscalDocument.issuerStreet();
        eFiscalDocumentTmp.IssuerAddressNumber      = _eFiscalDocument.issuerAddressNumber();
        eFiscalDocumentTmp.IssuerAddressComplement  = _eFiscalDocument.issuerAddressComplement();
        eFiscalDocumentTmp.IssuerDistrict           = _eFiscalDocument.issuerDistrict();
        eFiscalDocumentTmp.IssuerCity               = _eFiscalDocument.issuerCity();
        eFiscalDocumentTmp.IssuerState              = _eFiscalDocument.issuerState();
        eFiscalDocumentTmp.IssuerZipCode            = _eFiscalDocument.issuerZipCode();
        eFiscalDocumentTmp.IssuerPhone              = _eFiscalDocument.issuerPhone();
        eFiscalDocumentTmp.IssuerIEnum              = _eFiscalDocument.issuerIEnum();
        eFiscalDocumentTmp.IssuerTributarySubstReg  = _eFiscalDocument.issuerTributarySubstitutionRegistry();
        eFiscalDocumentTmp.IssuerCCMNum             = _eFiscalDocument.issuerCCMNum();
        eFiscalDocumentTmp.CompanyLogo              = FormLetter::companyLogo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductFields</Name>
				<Source><![CDATA[
    private void createProductFields(EFiscalDocument_BR _eFiscalDocument)
    {
        EFiscalDocumentLine_BR      lineMap;
        int                         itemRow, additionalLines;
        str                         additionalInformation;

        itemRow = 1;

        _eFiscalDocument.resetLines();

        while (_eFiscalDocument.nextLine())
        {
            eFiscalDocumentItemsTmp.clear();
            lineMap = _eFiscalDocument.currentLine();

            additionalInformation = lineMap.fiscalDocumentLine().getAdditionalInformationAsString();

            eFiscalDocumentItemsTmp.ItemId                  = lineMap.itemId();
            eFiscalDocumentItemsTmp.Description             = lineMap.fiscalDocumentLine().Description + (additionalInformation ? "|" +  additionalInformation : "");
            eFiscalDocumentItemsTmp.FiscalClassification    = this.formatKeepNumbersOnly(lineMap.fiscalDocumentLine().FiscalClassification ? lineMap.fiscalDocumentLine().FiscalClassification: '99');
            eFiscalDocumentItemsTmp.cfop                    = lineMap.fiscalDocumentLine().cfop;
            eFiscalDocumentItemsTmp.Unit                    = lineMap.fiscalDocumentLine().Unit;
            eFiscalDocumentItemsTmp.Quantity                = lineMap.fiscalDocumentLine().Quantity;
            eFiscalDocumentItemsTmp.UnitPrice               = lineMap.fiscalDocumentLine().UnitPrice;
            eFiscalDocumentItemsTmp.GrossLineAmount         = lineMap.grossLineAmount();
            eFiscalDocumentItemsTmp.ApproximateTaxAmount    = lineMap.fiscalDocumentLine().ApproximateTaxAmount;

            if (lineMap.totalFreightMarkupAmount() > 0)
            {
                eFiscalDocumentItemsTmp.TotalFreightMarkupAmount = lineMap.totalFreightMarkupAmount();
            }
            if (lineMap.totalInsuranceMarkupAmount() > 0)
            {
                eFiscalDocumentItemsTmp.TotalInsuranceMarkupAmount = lineMap.totalInsuranceMarkupAmount();
            }
            if (lineMap.totalOthersMarkupAmount() > 0)
            {
                eFiscalDocumentItemsTmp.TotalOthersMarkupAmount = lineMap.totalOthersMarkupAmount();
            }
            if (abs(lineMap.fiscalDocumentLine().LineDiscount) > 0)
            {
                eFiscalDocumentItemsTmp.LineDiscount = abs(lineMap.fiscalDocumentLine().LineDiscount);
            }

            this.createTaxFields(lineMap);
            additionalLines = this.additionalLinesForItemDescription(strLen(eFiscalDocumentItemsTmp.Description));

            if (additionalLines)
            {
                itemRow = this.insertAdditionalProductLines(lineMap, itemRow);
            }
            else
            {
                efDocDanfeTmpCutOffItem = false;
                efDocDanfeTmpLastItem   = false;
                efDocDanfeTmpBlankItem  = false;

                eFiscalDocumentItemsTmp.CutOffDescription       = efDocDanfeTmpCutOffItem;
                eFiscalDocumentItemsTmp.LastCutOffDescription   = efDocDanfeTmpLastItem;
                eFiscalDocumentItemsTmp.Blank                   = efDocDanfeTmpBlankItem;
                eFiscalDocumentItemsTmp.Page                    = this.pageForItemAtRow(itemRow);

                this.insertEFDocItemsTmp();

                itemRow += 1;
            }
        }
        this.additionalInformationPageBreak(itemRow, _eFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecipientFields</Name>
				<Source><![CDATA[
    private void createRecipientFields(EFiscalDocument_BR _eFiscalDocument)
    {
        eFiscalDocumentTmp.recipientForeignerId         = _eFiscalDocument.fiscalDocument().ThirdPartyForeignerId;
        eFiscalDocumentTmp.recipientCNPJ                = _eFiscalDocument.thirdPartyCNPJ() ? _eFiscalDocument.thirdPartyCNPJ() : _eFiscalDocument.thirdPartyCPF();
        eFiscalDocumentTmp.recipientName                = _eFiscalDocument.thirdPartyName();
        eFiscalDocumentTmp.recipientStreet              = _eFiscalDocument.thirdPartyStreet();
        eFiscalDocumentTmp.recipientAddressNumber       = _eFiscalDocument.thirdPartyAddressNumber();
        eFiscalDocumentTmp.recipientAddressComplement   = _eFiscalDocument.thirdPartyAddressComplement();
        eFiscalDocumentTmp.recipientAddressDistrict     = _eFiscalDocument.thirdPartyAddressDistrict();
        eFiscalDocumentTmp.recipientCity                = _eFiscalDocument.thirdPartyCity();
        eFiscalDocumentTmp.recipientState               = _eFiscalDocument.thirdPartyState();
        eFiscalDocumentTmp.recipientZipCode             = _eFiscalDocument.thirdPartyZipCode();
        eFiscalDocumentTmp.recipientPhone               = _eFiscalDocument.thirdPartyPhone();
        eFiscalDocumentTmp.recipientIEnum               = _eFiscalDocument.thirdPartyIEnum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxFields</Name>
				<Source><![CDATA[
    private void createTaxFields(EFiscalDocumentLine_BR _lineMap)
    {
        if (!this.hasISS(_lineMap))
        {
            this.createICMSTaxFields(_lineMap);
            this.createIPITaxFields(_lineMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalFields</Name>
				<Source><![CDATA[
    private void createTotalFields(EFiscalDocument_BR _eFiscalDocument)
    {
        Amount icmsTaxAmount, icmsTaxBaseAmount, icmsStTaxAmount, icmsStTaxBaseAmount;

        if (_eFiscalDocument.fiscalEstablishment().checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120))
        {
            icmsTaxBaseAmount = _eFiscalDocument.getTaxAmountOrBaseAmountExcludingTaxCodes(true, TaxType_BR::ICMS, false, EFDocConstants_BR::CSTExcludedForTotalICMSBase);
            icmsTaxAmount = _eFiscalDocument.getTaxAmountOrBaseAmountExcludingTaxCodes(false, TaxType_BR::ICMS, false, EFDocConstants_BR::CSTExcludedForTotalICMS);
            icmsStTaxBaseAmount = _eFiscalDocument.getTaxAmountOrBaseAmountExcludingTaxCodes(true, TaxType_BR::ICMS, true, EFDocConstants_BR::CSTExcludedForTotalICMSSTBase);
            icmsStTaxAmount = _eFiscalDocument.getTaxAmountOrBaseAmountExcludingTaxCodes(false, TaxType_BR::ICMS, true, EFDocConstants_BR::CSTExcludedForTotalICMSST);
        }
        else
        {
            icmsTaxBaseAmount = _eFiscalDocument.taxBaseAmount(TaxType_BR::ICMS);
            icmsTaxAmount = _eFiscalDocument.taxAmount(TaxType_BR::ICMS);
            icmsStTaxBaseAmount = _eFiscalDocument.taxBaseAmount(TaxType_BR::ICMS, true);
            icmsStTaxAmount = _eFiscalDocument.taxAmount(TaxType_BR::ICMS, true);
        }


        select sum(TaxPovertyFundAmountForTotal) from eFiscalDocumentItemsTmp
            where eFiscalDocumentItemsTmp.CutOffDescription == 0
                && eFiscalDocumentItemsTmp.CreatedTransactionId == appl.curTransactionId();

        Amount suframaDiscount = this.calculateSuframaDiscount(_eFiscalDocument);
        eFiscalDocumentTmp.icmStaxBaseAmount                = icmsTaxBaseAmount;
        eFiscalDocumentTmp.icmsTaxAmount                    = icmsTaxAmount - eFiscalDocumentItemsTmp.TaxPovertyFundAmountForTotal;
        eFiscalDocumentTmp.TributarySubstICMSTaxBaseAmount  = icmsStTaxBaseAmount;
        eFiscalDocumentTmp.TributarySubstICMSTaxAmount      = icmsStTaxAmount;
        eFiscalDocumentTmp.TotalMarkupFreightAmount         = _eFiscalDocument.fiscalDocument().TotalMarkupFreightAmount;
        eFiscalDocumentTmp.TotalMarkupInsuranceAmount       = _eFiscalDocument.fiscalDocument().TotalMarkupInsuranceAmount;
        eFiscalDocumentTmp.TotalDiscountAmount              = _eFiscalDocument.fiscalDocument().TotalDiscountAmount;
        eFiscalDocumentTmp.ipiTaxAmount                     = _eFiscalDocument.purpose() == FiscalDocumentPurpose_BR::Return ? 0: _eFiscalDocument.taxAmount(TaxType_BR::IPI);
        eFiscalDocumentTmp.TotalMarkupOtherAmount           = _eFiscalDocument.fiscalDocument().TotalMarkupOtherAmount;
        eFiscalDocumentTmp.TotalGrossServicesAmount         = _eFiscalDocument.totalGrossServicesAmount();
        eFiscalDocumentTmp.issTaxBaseAmount                 = _eFiscalDocument.taxBaseAmount(TaxType_BR::ISS);
        eFiscalDocumentTmp.issTaxAmount                     = _eFiscalDocument.taxAmount(TaxType_BR::ISS);

        if (DANFETaxExemptDeductFromTotal_BR_Flight::instance().isEnabled())
        {
            eFiscalDocumentTmp.TotalGrossGoodsAmount            = _eFiscalDocument.totalGrossGoodsAmount();
            eFiscalDocumentTmp.TotalAmount                      = _eFiscalDocument.fiscalDocument().TotalAmount - suframaDiscount;
        }
        else
        {
            eFiscalDocumentTmp.TotalGrossGoodsAmount            = _eFiscalDocument.totalGrossGoodsAmount() - suframaDiscount;
            eFiscalDocumentTmp.TotalAmount                      = _eFiscalDocument.fiscalDocument().TotalAmount;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>dsDetails</Name>
				<Source><![CDATA[
    private void dsDetails(EFiscalDocument_BR _eFiscalDocument)
    {
        this.createAdditionalInf(_eFiscalDocument);
        this.createInstallments(_eFiscalDocument);
        this.createProductFields(_eFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsHeader</Name>
				<Source><![CDATA[
    private void dsHeader(EFiscalDocument_BR _eFiscalDocument)
    {
        eFiscalDocumentTmp.clear();
        eFiscalDocumentTmp.EFDocNFe402018005v110 = _eFiscalDocument.fiscalEstablishment().EFDocNFe402018005v110 ? 1 : 0;
        this.createBarCode(_eFiscalDocument);
        this.createQRCode(_eFiscalDocument);
        this.createAdditionalBarCode(_eFiscalDocument);
        this.createDeliveryFields(_eFiscalDocument);
        this.createIdentifFields(_eFiscalDocument);
        this.createIssuerFields(_eFiscalDocument);
        this.createRecipientFields(_eFiscalDocument);
        this.createCarrierFields(_eFiscalDocument);
        this.createTotalFields(_eFiscalDocument);
        this.insertEFDocTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatFillLeft</Name>
				<Source><![CDATA[
    private str formatFillLeft(str _number, int _length)
    {
        return strRFix(this.formatKeepNumbersOnly(_number), _length, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatKeepNumbersOnly</Name>
				<Source><![CDATA[
    private str formatKeepNumbersOnly(str _value)
    {
        return strKeep(_value, '0123456789');
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBarCode</Name>
				<Source><![CDATA[
    private str generateBarCode(str _barCodeString)
    {
        Barcode     barcode;

        barcode = Barcode::construct(BarcodeType::Code128);
        barcode.string(true, _barCodeString);
        barcode.encode();
        return barcode.barcodeStr();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryPostalAddressAsString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the delivery address to show in DANFE
    /// </summary>
    /// <returns>
    ///     The delivery address
    /// </returns>
    /// <remarks>
    ///     Delivery address is shown inside additional information area in DANFE
    ///     report when it is different than the primary address of the customer.
    /// </remarks>
    private LogisticsAddressing getDeliveryPostalAddressAsString()
    {
        str                    deliveryAddress;
        LogisticsPostalAddress deliveryPostalAddress;

        void insertAddressComponent(str _component, str _separator = '')
        {
            str tempAddress;
            if (_component)
            {
                tempAddress = deliveryAddress + _separator + _component;
                deliveryAddress = tempAddress;
            }
        }

        if (fiscalDocument.DeliveryLogisticsPostalAddress != fiscalDocument.ThirdPartyPostalAddress)
        {
            deliveryPostalAddress = LogisticsPostalAddress::findRecId(fiscalDocument.DeliveryLogisticsPostalAddress);
            deliveryAddress = '\n';
            insertAddressComponent(deliveryPostalAddress.Street);
            insertAddressComponent(deliveryPostalAddress.StreetNumber, ' ');
            insertAddressComponent(deliveryPostalAddress.BuildingCompliment, ' - ');
            insertAddressComponent(deliveryPostalAddress.DistrictName, ' - ');
        }

        return deliveryAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocInfoAdicTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>EFDocDANFEInfoAdicTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(EFDocDANFEInfoAdicTmp_BR))
    ]
    public EFDocDANFEInfoAdicTmp_BR getEFDocInfoAdicTmp()
    {
        select efDocInfoAdicTmp
            where efDocInfoAdicTmp.CreatedTransactionId == appl.curTransactionId();
        return efDocInfoAdicTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocInstallmentsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>EFDocDANFEInstallmentsTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(EFDocDANFEInstallmentsTmp_BR))
    ]
    public EFDocDANFEInstallmentsTmp_BR getEFDocInstallmentsTmp()
    {
        select * from efDocInstallmentsTmp
            where efDocInstallmentsTmp.CreatedTransactionId == appl.curTransactionId();
        return efDocInstallmentsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocItemsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>EFDocDANFEItems_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(EFDocDANFEItemsTmp_BR))
    ]
    public EFDocDANFEItemsTmp_BR getEFDocItemsTmp()
    {
        select * from eFiscalDocumentItemsTmp
            where eFiscalDocumentItemsTmp.CreatedTransactionId == appl.curTransactionId();
        return eFiscalDocumentItemsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEFDocTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>EFDocDANFE_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(EFDocDANFETmp_BR))
    ]
    public EFDocDANFETmp_BR getEFDocTmp()
    {
        select * from eFiscalDocumentTmp
            where eFiscalDocumentTmp.CreatedTransactionId == appl.curTransactionId();
        return eFiscalDocumentTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasISS</Name>
				<Source><![CDATA[
    private boolean hasISS(EFiscalDocumentLine_BR _lineMap)
    {
        EFiscalDocumentLineTax_BR   taxLine = _lineMap.getTaxLine(TaxType_BR::ISS, '');
        return taxLine.hasTaxTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdditionalProductLines</Name>
				<Source><![CDATA[
    private int insertAdditionalProductLines(EFiscalDocumentLine_BR _lineMap, int _itemRow)
    {
        int     descriptionSize, iCount, additionalLines, pageFirstRow, pageAdditionalRow;;

        additionalLines     = this.additionalLinesForItemDescription(strLen(eFiscalDocumentItemsTmp.Description));
        pageFirstRow        = this.pageForItemAtRow(_itemrow);
        pageAdditionalRow   = this.pageForItemAtRow(_itemrow + additionallines);

        if (pageFirstRow != pageAdditionalRow)
        {
            if (_itemrow <= #maxitemfirstpage)
            {
                _itemrow = (#maxitemfirstpage + 1);
            }
            else
            {
                _itemrow = ((#MaxItemPerPage + 1) * (pageFirstRow - 1)) + #Maxitemfirstpage;
            }
        }

        str description = eFiscalDocumentItemsTmp.Description;

        for (iCount = 0 ; iCount <= additionalLines ; iCount++)
        {
            eFiscalDocumentItemsTmp.Description = subStr(description, descriptionSize + 1, #MaxItemDescSize);

            efDocDanfeTmpCutOffItem = (iCount == 0 ? false : true);
            efDocDanfeTmpLastItem   = (iCount == additionalLines ? true : false);
            efDocDanfeTmpBlankItem  = false;

            eFiscalDocumentItemsTmp.CutOffDescription       = efDocDanfeTmpCutOffItem;
            eFiscalDocumentItemsTmp.LastCutOffDescription   = efDocDanfeTmpLastItem;
            eFiscalDocumentItemsTmp.Blank                   = efDocDanfeTmpBlankItem;
            eFiscalDocumentItemsTmp.Page                    = this.pageForItemAtRow(_itemRow);

            this.insertEFDocItemsTmp();

            descriptionSize += #MaxItemDescSize;
            _itemRow += 1;
        }
        return _itemRow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEFDocInfoAdicTmp</Name>
				<Source><![CDATA[
    private void insertEFDocInfoAdicTmp()
    {
        efDocInfoAdicTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEFDocInstallmentsTmp</Name>
				<Source><![CDATA[
    private void insertEFDocInstallmentsTmp()
    {
        efDocInstallmentsTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEFDocItemsTmp</Name>
				<Source><![CDATA[
    //private void insertEFDocItemsTmp(int _itemPage = 0)
    private void insertEFDocItemsTmp()
    {
        //eFiscalDocumentItemsTmp.Page                    = _itemPage;
        eFiscalDocumentItemsTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEFDocTmp</Name>
				<Source><![CDATA[
    private void insertEFDocTmp()
    {
        eFiscalDocumentTmp.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageForItemAtRow</Name>
				<Source><![CDATA[
    private int pageForItemAtRow(int rowNum)
    {
        if (rownum <= #MaxItemFirstPage)
        {
            return 1;
        }

        return real2int((rowNum - #MaxItemFirstPage - 1) / #MaxItemPerPage) + 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the EFDocDANFE_BR report
    /// </summary>
    public void processReport()
    {
        EFiscalDocument_BR              eFiscalDocument;
        FiscalDocumentContract_BR       contract;

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        eFiscalDocumentTmp              .setConnection(this.parmUserConnection());
        eFiscalDocumentItemsTmp         .setConnection(this.parmUserConnection());
        efDocInfoAdicTmp                .setConnection(this.parmUserConnection());
        efDocInstallmentsTmp            .setConnection(this.parmUserConnection());
        efDocPaymentTransTmp            .setConnection(this.parmUserConnection());

        contract = this.parmDataContract() as FiscalDocumentContract_BR;

        select fiscalDocument
            where fiscalDocument.RecId == contract.parmRecordId();

        eFiscalDocument = EFiscalDocument_BR::construct(fiscalDocument);
        this.dsDetails(eFiscalDocument);
        this.dsHeader(eFiscalDocument);
        this.dsPaymentTrans(eFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentTrans</Name>
				<Source><![CDATA[
    private void createPaymentTrans(EFiscalDocument_BR _eFiscalDocument)
    {
        ListEnumerator                  linesEnumerator;
        List                            lines;
        FiscalDocumentPaymentTrans_BR   paymentTrans;
        DictEnum                        de;

        de = new DictEnum(enumName2Id('PaymentType_BR'));

        lines = _eFiscalDocument.paymTransList();
        linesEnumerator = lines.getEnumerator();

        while (linesEnumerator.moveNext())
        {
            paymentTrans = linesEnumerator.current();

            efDocPaymentTransTmp.clear();
            efDocPaymentTransTmp.LineNum            = paymentTrans.LineNum;
            efDocPaymentTransTmp.PaymentType        = paymentTrans.PaymentType;
            efDocPaymentTransTmp.PaymentTypeLabel   = de.value2Label(paymentTrans.PaymentType);
            efDocPaymentTransTmp.Amount             = paymentTrans.Amount;

            this.insertEfDocPaymentTransTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQRCode</Name>
				<Source><![CDATA[
    private void createQRCode(EFiscalDocument_BR _eFiscalDocument)
    {
        EFDocQRCode_BR qrCode;

        if (_eFiscalDocument.fiscalDocument().isElectronicConsumerFiscalDoc())
        {
            qrCode = new EFDocQRCode_BR();
            eFiscalDocumentTmp.QRCode = qrCode.generateQRCode(_eFiscalDocument.eFDocument().QrcodeText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dsPaymentTrans</Name>
				<Source><![CDATA[
    private void dsPaymentTrans(EFiscalDocument_BR _eFiscalDocument)
    {
        this.createPaymentTrans(_eFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEfDocPaymentTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>EFDocDANFEPaymentTransTmp_BR</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(EFDocDANFEPaymentTransTmp_BR))
    ]
    public EFDocDANFEPaymentTransTmp_BR getEfDocPaymentTransTmp()
    {
        select * from efDocPaymentTransTmp
            where efDocPaymentTransTmp.CreatedTransactionId == appl.curTransactionId();
        return efDocPaymentTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEfDocPaymentTransTmp</Name>
				<Source><![CDATA[
    private void insertEfDocPaymentTransTmp()
    {
        efDocPaymentTransTmp.doInsert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>