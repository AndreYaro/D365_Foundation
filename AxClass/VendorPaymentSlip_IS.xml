<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorPaymentSlip_IS</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The <c>VendorPaymentSlip_IS</c> class runs vendor payment slip report.
/// </summary>
class VendorPaymentSlip_IS extends RunBaseBatch implements BatchRetryable
{
    TaxAuthority        taxAuthority;
    CurrencyCode        currencyCode;
    FromDate            fromDate;
    ToDate              toDate;
    NoYes               showNegativeAmounts;

    NoYes               createReportFile;
    ERIFileDestination  reportFileDestination;
    ERFormatMappingId   reportBinding;

    NoYes               createTextFile;
    ERIFileDestination  textFileDestination;
    ERFormatMappingId   textBinding;

    DialogField         dialogTaxAuthority;
    DialogField         dialogCurrencyCode;
    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogShowNegativeAmounts;

    DialogField         dialogCreateReportFile;
    DialogField         dialogReportBinding;

    DialogField         dialogCreateTextFile;
    DialogField         dialogTextBinding;

    const ModelName     modelName = 'Vendor payment slip IS';

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        taxAuthority,
        currencyCode,
        fromDate,
        toDate,
        showNegativeAmounts,
        createReportFile,
        reportBinding,
        createTextFile,
        textBinding
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
	/// <summary>
    /// Gets and initializes the vendor payment slip dialog.
    /// </summary>
    /// <returns>
    /// The vendor payment slip dialog.
	/// </returns>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        DialogGroup periodGroup = dialog.addGroup();
        periodGroup.columns(2);

        dialogTaxAuthority = dialog.addFieldValue(extendedTypeStr(TaxAuthority), taxAuthority, '', '');
        dialogTaxAuthority.control().mandatory(true);

        dialogCurrencyCode = dialog.addFieldValue(extendedTypeStr(CurrencyCode), currencyCode, '', '');
        dialogCurrencyCode.control().mandatory(true);

        dialogShowNegativeAmounts = dialog.addFieldValue(extendedTypeStr(NoYesId), showNegativeAmounts,  "@VendorPaymentSlip_IS:ShowNegativeAmounts", '');

        dialogFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate, '', '');
        dialogToDate = dialog.addFieldValue(extendedTypeStr(ToDate), toDate, '', '');

        periodGroup = dialog.addGroup();
        periodGroup.columns(2);

        dialogCreateReportFile = dialog.addFieldValue(extendedTypeStr(NoYesId), createReportFile, "@VendorPaymentSlip_IS:CreateReportFile", '');
        dialogReportBinding = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), reportBinding, "@VendorPaymentSlip_IS:ReportBinding");
        dialogReportBinding.control().mandatory(true);
        dialogReportBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                                                             methodStr(VendorPaymentSlip_IS, reportBinding_lookup),
                                                             this);

        periodGroup = dialog.addGroup();
        periodGroup.columns(2);

        dialogCreateTextFile = dialog.addFieldValue(extendedTypeStr(NoYesId), createTextFile, "@SYS304986", '');
        dialogTextBinding = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), textBinding, "@VendorPaymentSlip_IS:FileBinding");
        dialogTextBinding.control().mandatory(true);
        dialogTextBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                                                           methodStr(VendorPaymentSlip_IS, reportBinding_lookup),
                                                           this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        taxAuthority = dialogTaxAuthority.value();
        currencyCode = dialogCurrencyCode.value();
        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        showNegativeAmounts = dialogShowNegativeAmounts.value();

        createReportFile = dialogCreateReportFile.value();
        reportBinding = dialogReportBinding.value();

        createTextFile = dialogCreateTextFile.value();
        textBinding = dialogTextBinding.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
	public void initParmDefault()
    {
        super();

        currencyCode = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version     = RunBase::getVersion(_packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super();

        ret = this.validateCurrencyCode(currencyCode) && ret;
        ret = this.validateTaxAuthority(taxAuthority) && ret;

        if (createReportFile == NoYes::No && createTextFile == NoYes::No)
        {
            ret = checkFailed("@VendorPaymentSlip_IS:NeedToPrintReportOrFile");
        }

        if (fromDate > toDate)
        {
            ret = checkFailed("@SYS22806");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates currency code value.
    /// </summary>
    /// <param name = "_currencyCode">Currency value.</param>
    /// <returns>True if currency code value is valid; otherwise false.</returns>
    private boolean validateCurrencyCode(CurrencyCode _currencyCode)
    {
        boolean ret = true;

        if (!_currencyCode)
        {
            ret = checkFailed(strFmt("@SYS84753", extendedTypeId2pname(extendedTypeNum(CurrencyCode))));
        }

        ret = ret && Currency::checkExist(_currencyCode);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates tax authority value.
    /// </summary>
    /// <param name = "_taxAuthority">Tax authority value.</param>
    /// <returns>True if tax authority value is valid; otherwise false.</returns>
    private boolean validateTaxAuthority(TaxAuthority _taxAuthority)
    {
        boolean ret = true;

        if (!_taxAuthority)
        {
            ret = checkFailed(strFmt("@SYS84753", extendedTypeId2pname(extendedTypeNum(TaxAuthority))));
        }

        ret = ret && TaxAuthorityAddress::checkExist(_taxAuthority);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendorPaymentSlip_IS construct()
    {
        return new VendorPaymentSlip_IS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args a)
    {
        VendorPaymentSlip_IS vendorPaymentSlip_IS = VendorPaymentSlip_IS::construct();

        if (vendorPaymentSlip_IS.prompt())
        {
            vendorPaymentSlip_IS.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        VendorPaymentSlip_ISHeader reportParms = new VendorPaymentSlip_ISHeader(taxAuthority,
                                                                                currencyCode,
                                                                                showNegativeAmounts,
                                                                                fromDate,
                                                                                toDate);

        textFileDestination = ERObjectsFactory::createFileDestinationBrowser();
        reportFileDestination = ERObjectsFactory::createFileDestinationBrowser();

        try
        {
            if (createReportFile == NoYes::Yes)
            {
                // run Excel report
                ERObjectsFactory::createFormatMappingRunByFormatMappingId(reportBinding)
                    .withCreatingObjectParameter(modelName, classStr(VendorPaymentSlip_ISHeader), reportParms)
                    .withFileDestination(reportFileDestination)
                    .run();
            }

            if (createTextFile == NoYes::Yes)
            {
                // run text report
                ERObjectsFactory::createFormatMappingRunByFormatMappingId(textBinding)
                    .withCreatingObjectParameter(modelName, classStr(VendorPaymentSlip_ISHeader), reportParms)
                    .withFileDestination(textFileDestination)
                    .run();
            }
        }
        catch
        {
            error("@VendorPaymentSlip_IS:ReportGenerationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get description of the dialog
    /// </summary>
    /// <returns>String description</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS126906";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportBinding_lookup</Name>
				<Source><![CDATA[
    private Common reportBinding_lookup(FormReferenceControl _formControl)
    {
        return ERFormatMappingTable::lookup(_formControl, modelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Audit policy can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>