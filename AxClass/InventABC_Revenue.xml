<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventABC_Revenue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventABC_Revenue  extends InventABC
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCategory</Name>
				<Source><![CDATA[
        protected ABC getCategory(InventTable _inventTable)
    {
        return _inventTable.abcRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategory</Name>
				<Source><![CDATA[
        protected void setCategory(
        InventTable _inventTable,
        ABC         _category)
    {
        _inventTable.abcRevenue = _category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpValue</Name>
				<Source><![CDATA[
        protected void sumUpValue()
    {
        InventTable             previousInventTable;

        Query                   query = new Query(itemQueryRun.query().pack());
        QueryBuildDataSource    qbdsItem = query.dataSourceTable(tableNum(InventTable));
        QueryBuildDataSource    qbdsTrans = qbdsItem.addDataSource(tableNum(CustInvoiceTrans));
        QueryBuildRange         itemTypeRange = SysQuery::findOrCreateRange(qbdsItem, fieldNum(InventTable, ItemType));

        AmountMST               lineAmountMST;

        // ensure that results are sorted by item
        qbdsItem.addOrderByField(fieldNum(InventTable, ItemId));

        itemTypeRange.value(SysQuery::valueNot(queryValue(ItemType::Service)));

        qbdsTrans.relations(false);
        qbdsTrans.addLink(fieldNum(InventTable, ItemId), fieldNum(CustInvoiceTrans, ItemId));
        qbdsTrans.joinMode(JoinMode::OuterJoin);
        qbdsTrans.fetchMode(QueryFetchMode::One2One);

        // filter on dates
        qbdsTrans.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(SysQuery::range(fromDate, toDate));

        QueryRun revenueQueryRun = new QueryRun(query);

        while (revenueQueryRun.next())
        {
            if (revenueQueryRun.changed(tableNum(InventTable)))
            {
                InventTable inventTable = revenueQueryRun.get(tableNum(InventTable)) as InventTable;
                if (previousInventTable.ItemId)
                {
                    this.saveAmount(previousInventTable, lineAmountMST);
                    lineAmountMST = 0;
                }
                previousInventTable.data(inventTable);
            }

            if (revenueQueryRun.changed(tableNum(CustInvoiceTrans)))
            {
                CustInvoiceTrans custInvoiceTrans = revenueQueryRun.get(tableNum(CustInvoiceTrans)) as CustInvoiceTrans;
                if (custInvoiceTrans.LineAmountMST)
                {
                    lineAmountMST += custInvoiceTrans.LineAmountMST;
                }
            }
        }
        if (previousInventTable.ItemId)
        {
            this.saveAmount(previousInventTable, lineAmountMST);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventABC_Revenue construct()
    {
        return new InventABC_Revenue();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>