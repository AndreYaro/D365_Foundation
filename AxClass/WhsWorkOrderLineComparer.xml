<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkOrderLineComparer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkOrderLineComparer</c> class compares the next work line with the previous to provide details of their differences.
/// </summary>
public class WhsWorkOrderLineComparer
{
    internal boolean isItemIdDiff;
    internal boolean isProductDimDiff;
    internal boolean isInventDimDiff;
    internal boolean isInventDimBatchDiff;
    internal boolean isInventTransDiff;
    internal boolean isInventBatchIdDiff;
    internal boolean isInventSerialIdDiff;
    internal boolean isInventStatusIdDiff;
    internal boolean isOrderNumDiff;
    internal boolean isShipmentDiff;
    internal boolean isLoadDiff;

    private ItemId           prevItemId;
    private WHSShipmentId    prevShipmentId;
    private InventTransId    prevInventTransId;
    private InventDimId      prevInventDimId;
    private InventBatchId    prevInventBatchId;
    private InventSerialId   prevInventSerialId;
    private WHSInventStatusId prevInventStatusId;
    private WHSOrderNum      prevOrderNum;
    private WHSLoadId        prevLoadId;
    
    protected WHSWorkOrderLineInterface currentWorkOrderLine;

    // Caches to avoid lookups
    private InventTable      currentInventTableRecord;
    private InventDim        currentInventDimRecord;
    private InventDim        previousInventDimRecord;
    private UnknownNoYes     areProductDimsDifferent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentInventTable</Name>
				<Source><![CDATA[
    private InventTable currentInventTable()
    {
        if (!currentInventTableRecord)
        {
            currentInventTableRecord = InventTable::find(currentWorkOrderLine.parmItemId());
        }

        return currentInventTableRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentInventDim</Name>
				<Source><![CDATA[
    private InventDim currentInventDim()
    {
        if (!currentInventDimRecord)
        {
            currentInventDimRecord = currentWorkOrderLine.inventDim();
        }

        return currentInventDimRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousInventDim</Name>
				<Source><![CDATA[
    private InventDim previousInventDim()
    {
        if (!previousInventDimRecord && prevInventDimId)
        {
            previousInventDimRecord = InventDim::find(prevInventDimId);
        }

        return previousInventDimRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAreProductDimensionsDifferent</Name>
				<Source><![CDATA[
    private boolean determineAreProductDimensionsDifferent()
    {
        if (currentWorkOrderLine.parmInventDimId() == prevInventDimId)
        {
            return false;
        }

        InventTable inventTable = this.currentInventTable();

        InventDimParm inventDimParmProduct = inventTable.inventDimParmProductDimensions();
        InventDim inventDim = this.currentInventDim();
        InventDim otherInventDim = this.previousInventDim();

        if (!InventDim::isInventDimParmEqual(inventDim, otherInventDim, inventDimParmProduct, false))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areProductDimensionsDifferent</Name>
				<Source><![CDATA[
    private boolean areProductDimensionsDifferent()
    {
        if (areProductDimsDifferent == UnknownNoYes::Unknown)
        {
            boolean result = this.determineAreProductDimensionsDifferent();
            areProductDimsDifferent = result ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return areProductDimsDifferent == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDifferentItem</Name>
				<Source><![CDATA[
    protected boolean isDifferentItem(
        ItemId _previousItemId,
        InventDimId _previousInventDimId)
    {
        if (!_previousItemId)
        {
            return false;
        }
            
        if (_previousItemId != currentWorkOrderLine.parmItemId())
        {
            return true;
        }

        if (this.currentInventTable().isProductVariantUnitConversionEnabled())
        {
            return this.areProductDimensionsDifferent();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDifferentProductDimension</Name>
				<Source><![CDATA[
    protected boolean isDifferentProductDimension(InventDimId _previousInventDimId)
    {
        return (_previousInventDimId && this.areProductDimensionsDifferent());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDifferentInventDim</Name>
				<Source><![CDATA[
    protected boolean isDifferentInventDim(
        InventDimId _previousInventDimId,
        InventDim _currentInventDim)
    {
        return _previousInventDimId && !InventDim::isInventDimEqual(this.previousInventDim(), _currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDifferentInventTrans</Name>
				<Source><![CDATA[
    protected boolean isDifferentInventTrans(InventTransId _previousInventTransId)
    {
        return _previousInventTransId && _previousInventTransId != currentWorkOrderLine.parmInventTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>compare</Name>
				<Source><![CDATA[
    public void compare(WHSWorkOrderLineInterface _workOrderLine)
    {
        this.prepareForNextComparison();

        currentWorkOrderLine = _workOrderLine;
        InventDim curInventDim = this.currentInventDim();

        isItemIdDiff            = isItemIdDiff || this.isDifferentItem(prevItemId, prevInventDimId);
        isProductDimDiff        = isProductDimDiff || this.isDifferentProductDimension(prevInventDimId);
        isInventDimDiff         = isInventDimDiff || this.isDifferentInventDim(prevInventDimId, curInventDim);
        isInventTransDiff       = isInventTransDiff || this.isDifferentInventTrans(prevInventTransId);

        isInventDimBatchDiff    = isInventDimBatchDiff || (prevInventDimId && this.previousInventDim().InventBatchId != curInventDim.InventBatchId);
        isInventBatchIdDiff     = isInventBatchIdDiff || (prevInventBatchId && prevInventBatchId != curInventDim.InventBatchId);
        isInventSerialIdDiff    = isInventSerialIdDiff || (prevInventSerialId && prevInventSerialId != curInventDim.InventSerialId);
        isInventStatusIdDiff    = isInventStatusIdDiff || (prevInventStatusId && prevInventStatusId != curInventDim.InventStatusId);
        
        isOrderNumDiff          = isOrderNumDiff || (prevOrderNum && prevOrderNum != currentWorkOrderLine.parmOrderNum());
        isShipmentDiff          = isShipmentDiff || (prevShipmentId && prevShipmentId != currentWorkOrderLine.parmShipmentId());
        isLoadDiff              = isLoadDiff || (prevLoadId && prevLoadId != currentWorkOrderLine.parmLoadId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForNextComparison</Name>
				<Source><![CDATA[
    private void prepareForNextComparison()
    {
        if (currentWorkOrderLine)
        {
            InventDim curInventDim = this.currentInventDim();

            prevInventDimId         = currentWorkOrderLine.parmInventDimId();
            prevInventTransId       = currentWorkOrderLine.parmInventTransId();
            prevItemId              = currentWorkOrderLine.parmItemId();
            prevInventBatchId       = curInventDim.InventBatchId;
            prevInventSerialId      = curInventDim.InventSerialId;
            prevInventStatusId      = curInventDim.InventStatusId;
            prevOrderNum            = currentWorkOrderLine.parmOrderNum();
            prevShipmentId          = currentWorkOrderLine.parmShipmentId();
            prevLoadId              = currentWorkOrderLine.parmLoadId();

            this.resetCaches();
            previousInventDimRecord = curInventDim;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        isItemIdDiff            = false;
        isInventTransDiff       = false;
        isInventDimDiff         = false;
        isInventBatchIdDiff     = false;
        isInventSerialIdDiff    = false;
        isProductDimDiff        = false;
        isOrderNumDiff          = false;
        isShipmentDiff          = false;
        isLoadDiff              = false;
        isInventDimBatchDiff    = false;
        isInventStatusIdDiff    = false;

        prevItemId              = '';
        prevInventDimId         = '';
        prevInventTransId       = '';
        prevInventBatchId       = '';
        prevLoadId              = '';
        prevInventStatusId      = '';

        // Reset shipment Id and order number when new workId is created.
        prevShipmentId          = '';
        prevOrderNum            = '';

        this.resetCaches();

        currentWorkOrderLine = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCaches</Name>
				<Source><![CDATA[
    private void resetCaches()
    {
        currentInventTableRecord = null;
        previousInventDimRecord = null;
        currentInventDimRecord = null;
        areProductDimsDifferent = UnknownNoYes::Unknown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WhsWorkOrderLineComparer construct()
    {
        return new WhsWorkOrderLineComparer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>