<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentListPageFormLookupBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Constructs lookups for adjustment list pages that implement <c>GeneralLedgerAdjustmentIProposedAdjustmentListPage</c>.
/// </summary>
internal final class GeneralLedgerAdjustmentListPageFormLookupBuilder
{
    private GeneralLedgerAdjustmentIProposedAdjustmentListPage adjustmentListPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAdjustmentListPage</Name>
				<Source><![CDATA[
    internal static GeneralLedgerAdjustmentListPageFormLookupBuilder newForAdjustmentListPage(GeneralLedgerAdjustmentIProposedAdjustmentListPage _adjustmentListPage)
    {
        GeneralLedgerAdjustmentListPageFormLookupBuilder lookupBuilder = new GeneralLedgerAdjustmentListPageFormLookupBuilder();
        lookupBuilder.adjustmentListPage = _adjustmentListPage;

        return lookupBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAdjustmentImportInfoFormLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the lookup for the import info filter on adjustment list pages.
    /// </summary>
    /// <returns>A custom lookup FormRun.</returns>
    internal FormRun buildAdjustmentImportInfoFormLookup()
    {
        // Initialize the custom form lookup
        Args args = new Args();
        args.name(formStr(GeneralLedgerAdjustmentImportInfoLookup));

        FormRun importInfoFormLookup = ClassFactory.formRunClass(args);
        importInfoFormLookup.init();

        return importInfoFormLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAdjustmentDataAreaLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the lookup for the company filter on adjustment list pages.
    /// </summary>
    /// <param name = "_dataAreaFormControl">The company filter form control on the adjustment list page.</param>
    /// <returns>A <c>SysTableLookup</c> containing the available companies on which to filter.</returns>
    internal SysTableLookup buildAdjustmentDataAreaLookup(FormControl _dataAreaFormControl)
    {
        // Build a query of available companies, taking into account user access and the currently selected execution
        Query dataAreaLookupQuery = this.buildQueryForAdjustmentDataAreaLookup();

        // Generate a lookup targetting the DataArea field on the MyLegalEntities view, ensuring that only
        // companies for which the user has access will appear in the lookup options
        SysTableLookup dataAreaLookup = SysTableLookup::newParameters(tableNum(MyLegalEntities), _dataAreaFormControl);
        dataAreaLookup.addLookupfield(fieldNum(MyLegalEntities, DataArea));
        dataAreaLookup.parmQuery(dataAreaLookupQuery);

        return dataAreaLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForAdjustmentDataAreaLookup</Name>
				<Source><![CDATA[
    private Query buildQueryForAdjustmentDataAreaLookup()
    {
        // Start building a query around the MyLegalEntities view, which contains legal entities available to the current user
        Query dataAreaQuery = new Query();
        QueryBuildDataSource myLegalEntitiesQbds = dataAreaQuery.addDataSource(tableNum(MyLegalEntities));

        // Join to proposed adjustments on the VoucherDataAreaId field to filter out any legal entities that do not have any proposed adjustments in the system
        QueryBuildDataSource dataFixResultsQbds = myLegalEntitiesQbds.addDataSource(tableNum(GeneralLedgerAdjustmentProposedAdjustment));
        dataFixResultsQbds.linkFields(fieldStr(MyLegalEntities, DataArea), fieldStr(GeneralLedgerAdjustmentProposedAdjustment, VoucherDataAreaId));
        dataFixResultsQbds.joinMode(JoinMode::ExistsJoin);

        GeneralLedgerAdjustmentDisplayFormContext currentAdjustmentListPageContext = adjustmentListPage.getAdjustmentDisplayFormContext();
        GeneralLedgerAdjustmentImportInfo currentImportInfo = currentAdjustmentListPageContext.parmImportInfo();

        // Finally, add a range on the proposed adjustments to only look for those produced by the currently selected import.
        // This ensures that only legal entities with adjustment records that belong to the currently selected import will be shown as options.
        QueryBuildRange dataFixExecutionRange = dataFixResultsQbds.addRange(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, ImportInfoRecId));
        dataFixExecutionRange.value(SysQuery::value(currentImportInfo.RecId));

        return dataAreaQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>