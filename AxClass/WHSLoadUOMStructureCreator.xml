<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadUOMStructureCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadUOMStructureCreator</c> class is used to create UOM structure for a load.
/// </summary>
[SysTableNameFactory(tableStr(WHSLoadTable))]
public class WHSLoadUOMStructureCreator extends WHSUOMStructureCreator
{
    protected WHSLoadTable loadTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>WHSLoadTable</c> table.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSLoadTable</c> table.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        loadTable = _common as WHSLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUOMStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates UOM structure.
    /// </summary>
    public void createUOMStructure()
    {
        WHSLoadLine         loadLine;
        WHSWorkLine         workLine;
        WHSWorkTable        workTable;
        Set                 generatedASNforLoadLineAndLP = new Set(Types::Container);
        Map                 targetLpForWork = new Map(Types::String, Types::String);
        WHSWorkId           loopWorkId;
        RecId               prevLoadLine;
        WHSLicensePlateId   targetLicensePlateId;
        Set                 processedTargetLicensePlateId = new Set(Types::String);
        boolean             createUOMCriteria;

        // Go through the initial picks.
        while select ItemId, ShipmentId, LoadId, RecId from loadLine
            order by loadLine.RecId, workLine.WorkId
            where loadLine.LoadId           == loadTable.LoadId
                && loadLine.InventTransType == InventTransType::TransferOrderShip
            join workLine
                where workLine.LoadLineRefRecId == loadLine.RecId
                    && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                    && workLine.InventQtyWork   >  0
                join workTable
                    where workTable.WorkId                  == workLine.WorkId
                        && workTable.WorkStatus             != WHSWorkStatus::Combined
                        && workTable.WorkStatus             != WHSWorkStatus::Cancelled
                        && workTable.TargetLicensePlateId   != ''
        {
            // If we are within the same work for the same load line we don't need to check again.
            if (!targetLpForWork.exists(workTable.WorkId))
            {
                [createUOMCriteria, targetLicensePlateId] = this.getTargetLicensePlateAndCreateUOMCriteria(workTable, workLine);
                if (createUOMCriteria)
                {
                    targetLpForWork.insert(workTable.WorkId, targetLicensePlateId);
                }
            }

            if (targetLpForWork.exists(workTable.WorkId))
            {
                targetLicensePlateId = targetLpForWork.lookup(workTable.WorkId);

                this.createOrUpdateTransferModuleUOMStructure(targetLicensePlateId, loadLine, workLine.InventQtyWork);

                if (this.mustGenerateASNItems(generatedASNforLoadLineAndLP, loadLine, targetLicensePlateId))
                {
                    generatedASNforLoadLineAndLP.add([loadLine.RecId, targetLicensePlateId]);
                    this.WHSShipmentASNCreator().generateASNItems(targetLicensePlateId, workLine, WHSModule::Transfer);
                }
            }
        }

        this.createUOMStructureForSortedWork(generatedASNforLoadLineAndLP);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGenerateASNItems</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustGenerateASNItems(Set _generatedASNforLoadLineAndLP, WHSLoadLine _loadLine, WHSLicensePlateId _targetLicensePlateId)
    {
        // Using license plate for receiving a transfer order requires ASN items so we need to create them as part of the ship process.
        // The update or creation of ASN items must occur only once per unique (<c>WHSLoadLine</c>, TargetLicensePlateID) in order
        // to avoid adding the quantity of the <c>InventTrans</c> records multiple times for the same line.
        return !_generatedASNforLoadLineAndLP.in([_loadLine.RecId, _targetLicensePlateId]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUOMStructureForSortedWork</Name>
				<Source><![CDATA[
    private void createUOMStructureForSortedWork(Set _generatedASNforLoadLineAndLP)
    {
        WHSLoadLine loadLine;
        WHSOutboundSortPositionTrans outboundSortPositionTrans;
        WHSWorkLine workLine;
        WHSWorkTable workTable;

        Map targetLpForWork = new Map(Types::String, Types::String);

        Set processedSortPosWorkLine = new Set(Types::Int64);
        boolean whsLoadUOMStructSkipProcessedSortPosWorkLineFlightEnabled = WHSLoadUOMStructSkipProcessedSortPosWorkLineFlight::instance().isEnabled();
        boolean transIdConditionflight = WHSLoadUOMStructureCreatorTransIdConditionForSortedWorkFlight::instance().isEnabled();
        if (transIdConditionflight)
        {
            whsLoadUOMStructSkipProcessedSortPosWorkLineFlightEnabled = false;
        }

        WHSLicensePlateId   targetLicensePlateId;
        boolean             createUOMCriteria;

        while select ItemId, ShipmentId, LoadId, RecId, InventTransId from loadLine
            order by loadLine.RecId, workLine.WorkId
            where loadLine.LoadId           == loadTable.LoadId
                && loadLine.InventTransType == InventTransType::TransferOrderShip
            join outboundSortPositionTrans
                where outboundSortPositionTrans.LoadLine == loadLine.RecId
            join workLine
                where workLine.RecId == outboundSortPositionTrans.WorkLine
                    && workLine.WorkStatus      != WHSWorkStatus::Cancelled
                    && workLine.InventQtyWork   >  0
            join workTable
                where workTable.WorkId                  == workLine.WorkId
                    && workTable.WorkStatus             != WHSWorkStatus::Combined
                    && workTable.WorkStatus             != WHSWorkStatus::Cancelled
                    && workTable.TargetLicensePlateId   != ''
                    && workTable.WorkTransType          == WHSWorkTransType::SortedInventoryPicking
        {
            if (whsLoadUOMStructSkipProcessedSortPosWorkLineFlightEnabled
                && processedSortPosWorkLine.in(workLine.RecId))
            {
                continue;
            }

            if (!targetLpForWork.exists(workTable.WorkId))
            {
                [createUOMCriteria, targetLicensePlateId] = this.getTargetLicensePlateAndCreateUOMCriteria(workTable, workLine);

                if (createUOMCriteria)
                {
                    targetLpForWork.insert(workTable.WorkId, targetLicensePlateId);
                }
            }

            if (targetLpForWork.exists(workTable.WorkId))
            {
                targetLicensePlateId = targetLpForWork.lookup(workTable.WorkId);

                this.createOrUpdateTransferModuleUOMStructure(targetLicensePlateId, loadLine, workLine.InventQtyWork);

                // Using license plate for receiving a transfer order requires ASN items so we need to create them as part of the ship process.
                // The update or creation of ASN items must occur only once per unique (<c>WHSLoadLine</c>, TargetLicensePlateID) in order
                // to avoid adding the quantity of the <c>InventTrans</c> records multiple times for the same line.
                if (!_generatedASNforLoadLineAndLP.in([loadLine.RecId, targetLicensePlateId]))
                {
                    this.parmCreateContainerUOM(false);
                    workLine.LoadLineRefRecId = loadLine.RecId;

                    _generatedASNforLoadLineAndLP.add([loadLine.RecId, targetLicensePlateId]);

                    if (transIdConditionflight)
                    {
                        WHSShipmentASNCreator shipmentASNCreator = this.WHSShipmentASNCreator();
                        shipmentASNCreator.parmRelatedLoadLine(loadLine);
                        shipmentASNCreator.generateASNItems(targetLicensePlateId, workLine, WHSModule::Transfer);
                    }
                    else
                    {
                        this.WHSShipmentASNCreator().generateASNItems(targetLicensePlateId, workLine, WHSModule::Transfer);
                    }
                }
            }
            
            if (whsLoadUOMStructSkipProcessedSortPosWorkLineFlightEnabled
                && !processedSortPosWorkLine.in(workLine.RecId))
            {
                processedSortPosWorkLine.add(workLine.RecId);
            }            
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>