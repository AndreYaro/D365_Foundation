<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResStagingTablesPrimaryKeySynchronizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The <c>EcoResStagingTablesPrimaryKeySynchronizer</c> class detects staging tables with duplicates, cleans the data and synchronizes missing primary keys.
/// </summary>
[SysObsolete('The EcoResStagingTablesPrimaryKeySynchronizer feature is not used anymore', false, 12\10\2023)]
public class EcoResStagingTablesPrimaryKeySynchronizer
{
    private Map stagingTablesPrimaryKeyFieldsMap;
    private EcoResInstrumentationLogger instrumentationLogger;
    private Set stagingTablesWithDuplicates;
    private Set stagingTablesMissingPrimaryKeys;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTmpStagingTableNamesWithDuplicates</Name>
				<Source><![CDATA[
    internal void fillTmpStagingTableNamesWithDuplicates(EcoResTmpStagingTable _tmpStagingTable)
    {
        this.detectStagingTablesWithDuplicates();

        SetEnumerator stagingTablesWithDuplicatesEnumerator = stagingTablesWithDuplicates.getEnumerator();
        while (stagingTablesWithDuplicatesEnumerator.moveNext())
        {
            _tmpStagingTable.TableName = stagingTablesWithDuplicatesEnumerator.current();
            _tmpStagingTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTmpStagingTableNamesMissingPrimaryKeys</Name>
				<Source><![CDATA[
    internal void fillTmpStagingTableNamesMissingPrimaryKeys(EcoResTmpStagingTable _tmpStagingTable)
    {
        this.detectStagingTablesMissingPrimaryKeys();

        SetEnumerator stagingTablesMissingPrimaryKeysEnumerator = stagingTablesMissingPrimaryKeys.getEnumerator();
        while (stagingTablesMissingPrimaryKeysEnumerator.moveNext())
        {
            _tmpStagingTable.TableName = stagingTablesMissingPrimaryKeysEnumerator.current();
            _tmpStagingTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();

        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static EcoResStagingTablesPrimaryKeySynchronizer construct()
    {
        return new EcoResStagingTablesPrimaryKeySynchronizer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal data structures for running the job.
    /// </summary>
    protected void init()
    {
        stagingTablesPrimaryKeyFieldsMap = new Map(Types::String, Types::String);
        
        this.insertStagingTableIndexFieldsToMap(tableStr(BOMBillOfMaterialsVersionV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BOMItemSpecificBillOfMaterialsHeaderV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(EcoResProductBarcodeV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(EcoResProductGlobalTradeItemNumberAssignmentV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(EcoResProductVariantV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(EcoResReleasedProductVariantExternalCodeV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(EcoResReleasedProductVariantV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(EcoResReleasedProductWarehouseDefaultsV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventInventoryAdjustmentJournalEntryV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventItemPendingPriceV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventItemPriceV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventPackingMaterialAllocationLineV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventPackingMaterialAllocationV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventProductSpecificOrderSettingsV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventWarehouseInventoryStatusOnHandIncludingCatchWeightItemStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventWarehouseInventoryStatusOnHandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventWarehouseOnHandIncludingCatchWeightItemStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventWarehouseOnHandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventorySiteOnHandIncludingCatchWeightItemStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventorySiteOnHandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(LeanProductLeanScheduleGroupAssignmentV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCRRoyaltyAgreementHeaderProductSelectionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCRRoyaltyAgreementLineProductSelectionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCRSalesProductSetDetailV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PdsCommodityQuantityMarginTemplateV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaByProductV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaCoProductV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaVersionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfItemSpecificFormulaHeaderV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PurchVendorProductDescriptionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqDemPlanHistoricalExternalDemandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(REQITEMCOVERAGESETTINGSSTAGING));
        this.insertStagingTableIndexFieldsToMap(tableStr(REQITEMCOVERAGESETTINGSV2STAGING));
        this.insertStagingTableIndexFieldsToMap(tableStr(RouteVersionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SalesCustomerProductDescriptionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SalesRebateAgreementProductSelectionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TAMTradeAllowanceAgreementMerchandisingEventProductV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TAMTradeAllowanceAgreementProductV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TAMVendorRebateAgreementProductSelectionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSFixedProductWarehouseLocationV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSInboundLoadPackingStructureCaseLineV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSInboundLoadPackingStructureLineV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSLocatedWarehouseSlottingDemandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSOutboundLoadPackingStructureCaseLineV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSOutboundLoadPackingStructureLineV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSWarehouseSlottingDemandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSWarehouseStockingLimitV2Staging));

        this.insertStagingTableIndexFieldsToMap(tableStr(AssetBookSpecialDepreciationAllowanceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(AssetPackingSlipStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(AssetShiftDepreciationProfileStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankAccountTrapStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankClientAccountBalanceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankClientOutPaymentLogStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankClientPaymentStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankCodaAccountStatementStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankCodaDefinitionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(BankStatementTransactionTypeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CatVendorCatalogMaintenanceRequestStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CatVendorProductCandidateDefaultOrderSettingsStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CatVendorProductCandidatePurchasePriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CatVendorProductCandidateSalesPriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CatVendorProductCandidateStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CatVendorProductCandidateTranslationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CFMPurchAgreementPaymentOrderStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CFMSalesAgreementPaymentOrderStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CostMonthlyCostStatementEntryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CustomerBankAccountStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CustomerPaymentFeeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(CustomerPaymentJournalFeeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmAbsenceReasonStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmAccommodationTypeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmApplicantCourseStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmApplicantEducationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmApplicantProfessionalExperienceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmApplicantProjectRoleStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmCourseTypeCertificateProfileStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmCourseTypeDefaultDimensionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmCourseTypeEducationProfileStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmCourseTypeNotesStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmCourseTypeSkillProfileStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmJobTemplateADARequirementStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmPersonCourseStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmPersonEducationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmPersonProfessionalExperienceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmPersonProjectRoleStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmWorkerBankAccountStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmWorkerCourseStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmWorkerEducationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmWorkerProfessionalExperienceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmWorkerProjectRoleStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(HcmWorkerTrustedPositionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(IntrastatSpecialMovementStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventCDSInventoryOnHandEntryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventInventoryAdjustmentJournalEntryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventInventoryAdjustmentJournalEntryV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventInventoryLedgerPostingDefinitionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventInventoryMovementJournalEntryV4Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventItemPendingPriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventItemPriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventPackingMaterialAllocationLineStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventPackingMaterialAllocationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventProcurementLedgerPostingDefinitionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventProductionLedgerPostingDefinitionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventQualityOrderCreationPolicyStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventQualityProblemTypeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventSalesLedgerPostingDefinitionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventStandardCostVarianceLedgerPostingDefinitionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventWarehouseInventoryStatusOnHandIncludingCatchWeightItemStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(InventWarehouseInventoryStatusOnHandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(JmgBundledJobsTimeAllocationKeyStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(JmgIndirectTimeAndAttendanceActivityCategoryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(JmgTimeAndAttendanceManualPremiumRegistrationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(JmgTimeAndAttendancePayCalculationPolicyStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(JournalizingTransactionPostingDefinitionBankEntityStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(LeanProductAllocationKeyLeanScheduleGroupAssignmentStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(LeanProductLeanScheduleGroupAssignmentV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(LeanScheduleGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(LogisticsAddressZipcodeJapanV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCRInstallmentPlanCustomerPaymentStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCROpenSalesPostageDiscountJournalLineStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCRPostageDiscountCustomerGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(MCRReqPlanContinuityStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PayrollBankAccountDisbursementStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PayrollDeductionArrearRecoveryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PayrollDeductionArrearStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PayrollEarningStatementImportStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PayrollPositivePayExportStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PayrollPremiumEarningCodeActiveIntervalStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PdsCommodityQuantityMarginTemplateStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PdsCommodityQuantityMarginTemplateV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PdsItemBatchAttributeGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfBulkItemConversionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaByProductV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaCoProductV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaHeaderStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaLineConsumptionIntervalV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaLineV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaSubstitutionGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfFormulaVersionV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(PmfItemSpecificFormulaHeaderV3Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProcurementProductCategoryQuestionnaireAssignmentStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdBatchOrderCoByProductStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdBatchOrderCoProductStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdBatchOrderFormulaLineStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdBatchOrderHeaderStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdJobCardProductionJournalEntryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdProductionOrderRouteOperationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdProductionPickingListJournalEntryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdProductionRouteTransactionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProdRouteCardProductionJournalEntryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjCostPriceExpenseStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjCostSalesPriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjFundingRuleStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjHourCostPriceV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjHourSalesPriceV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjPeriodEmplStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjProjectDefaultOffsetAccountStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjProjectWBSDraftStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjQuotationWbsStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjRevenueSalesPriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjSalesItemRequirementStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjValEmplCategorySetupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjValEmplProjSetupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjWBSActivityEstimatesStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ProjWBSTemplateTasksStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqDemPlanHistoricalExternalDemandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqIntercompanyPlanningGroupMemberStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqItemCoverageSettingsV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqPlannedOrderRouteJobStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqPlannedOrderRouteOperationResourceRequirementStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqPlannedOrderRouteOperationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqReductionKeyPeriodStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReqReductionKeyStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ResResourceCategorySetupDataStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ResResourceDataStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ResResourceSetupDataStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailAffiliationPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailAssortmentStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailBarCodeMaskcharacterStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailCatalogPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailCDXDataStoreChannelStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailChannelPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailConnDatabaseProfileStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailDiscountMultibuyTierStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailDiscountPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailEventNotificationSettingLineStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailInfocodeCategorySpecificStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailKitOrderJournalStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailLoyaltyPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailLoyaltyTierPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailLoyaltyTierRuleStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailLoyaltyTierStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailPackageLinesStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailPricingPriorityStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailReceiptMaskStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailReceiptProfileStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailReconcilePaymentStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailSalesTaxOverrideGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailSalesTaxOverrideStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailStoreHardwareStationEntityStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailStoreSectionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailTenderDiscountPriceGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailTillLayoutSizeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RetailWorkShiftSetupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReturnAutomaticCustomerReturnReasonCodeChargeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReturnAutomaticReturnDispositionCodeChargeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(ReverseChargeSalesListStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(RouteOperationPropertiesV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SalesQuotationHeaderCDSStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SalesQuotationLineCDSStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceAgreementLineStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceAgreementTemplateGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceIntervalStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceObjectGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceObjectStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceOrderStageStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceRepairConditionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceRepairDiagnosisAreaStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceRepairResolutionStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceSubscriptionSalesPriceStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceTaskStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(SMAServiceTimeWindowStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(smmLeadContactPersonCDSStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TAMTradeAllowanceAgreementMerchandisingEventBillBackLineStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TAMTradeAllowanceAgreementMerchandisingEventBillBackStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxInventTransferLineTransTaxInformationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxProjJournalTransTransTaxInformationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxProjTableTransTaxInformationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxSalesQuotationTransTaxInformationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxSMAServiceOrderLineTransTaxInformationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxTimesheetLineTransTaxInformationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TaxWithholdItemGroupStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TMSInventoryFreightChargeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TMSProcurementFreightChargeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TMSSalesDeliveryFreightChargeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TMSSalesFreightChargeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvCardTypesStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvExpenseDelegateStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvExpenseMerchantStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvExpensePurposeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvExpenseReportPurposeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvExpenseSubCategoryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvMileageRateStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvProjectExpensePolicyStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvSharedSubCategoryStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(TrvTravelLocationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(VendorPaymentFeeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(VendorPaymentJournalFeeStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(VendVendorBankAccountStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSFixedProductWarehouseLocationV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSLocatedWarehouseSlottingDemandV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSWarehouseStockingLimitV2Staging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WHSWarehouseWorkPolicyLocationStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WorkingTimeSchedulingPropertyLinesStaging));
        this.insertStagingTableIndexFieldsToMap(tableStr(WorkingTimeSchedulingPropertyStaging));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        boolean ok = true;

        // Displays message asking for confirmation to clean the data from the tables with duplicates
        if (stagingTablesWithDuplicates.elements() > 0)
        {
            str confirmationDeleteDataMessage = this.buildConfirmationDeleteDataMessage(stagingTablesWithDuplicates);
            if (Box::yesNo(confirmationDeleteDataMessage, DialogButton::No) == DialogButton::Yes)
            {
                // Truncates the data on the affected staging tables
                ok = this.deleteDataFromStagingTablesWithDuplicates(stagingTablesWithDuplicates);
            }
            else
            {
                ok = false;
            }
        }

        if (ok)
        {
            // Runs SQL script to create primary keys
            this.addMissingPrimaryKeysToStagingTables();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildConfirmationDeleteDataMessage</Name>
				<Source><![CDATA[
    private str buildConfirmationDeleteDataMessage(Set _stagingTablesWithDuplicates)
    {
        str message;
        int numberOfStagingTablesWithDuplicates = _stagingTablesWithDuplicates.elements();

        if (numberOfStagingTablesWithDuplicates == 1)
        {
            message = "@SCM:Message_ConfirmationDeleteDataStagingTable_SingleTable";
        }
        else if (numberOfStagingTablesWithDuplicates > 1)
        {
            message = strFmt("@SCM:Message_ConfirmationDeleteDataStagingTable_MultipleTables", numberOfStagingTablesWithDuplicates);
        }

        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDataFromStagingTablesWithDuplicates</Name>
				<Source><![CDATA[
    private boolean deleteDataFromStagingTablesWithDuplicates(Set _stagingTablesWithDuplicates)
    {
        using (var truncateTablesActivityContext = this.logger().primaryKeySyncInstrumentationActivities().truncateTables())
        {
            SetEnumerator stagingTablesWithDuplicatesEnumerator = _stagingTablesWithDuplicates.getEnumerator();
            while (stagingTablesWithDuplicatesEnumerator.moveNext())
            {
                TableName stagingTablesWithDuplicateName = stagingTablesWithDuplicatesEnumerator.current();

                // Detects if there are any running data management jobs and if so asks for confirmation to continue
                DMFEntity dmfEntity = DMFEntity::findFirstByTableId(tableName2Id(stagingTablesWithDuplicateName));
                int nrOfExecutingDataManagementJobs = this.getNumberOfExecutingDataManagementJobs(dmfEntity);
                str confirmationExecutionDataManagementJobsMessage = this.getConfirmationExecutionDataManagementJobsMessage(nrOfExecutingDataManagementJobs, dmfEntity);

                if (!nrOfExecutingDataManagementJobs
                || Box::yesNo(confirmationExecutionDataManagementJobsMessage, DialogButton::No) == DialogButton::Yes)
                {
                    // Performs the cleanup
                    this.deleteDataFromStagingTable(stagingTablesWithDuplicateName);
                    this.logger().logInformation(stagingTablesWithDuplicateName);
                }
                else
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmationExecutionDataManagementJobsMessage</Name>
				<Source><![CDATA[
    private str getConfirmationExecutionDataManagementJobsMessage(int _numberOfExecutingDataManagementJobs, DMFEntity _dmfEntity)
    {
        str message;

        if (_numberOfExecutingDataManagementJobs)
        {
            message = strFmt("@SCM:Message_ConfirmationExecutingDataManagementJobs", _numberOfExecutingDataManagementJobs, _dmfEntity.EntityName);
        }

        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfExecutingDataManagementJobs</Name>
				<Source><![CDATA[
    private int getNumberOfExecutingDataManagementJobs(DMFEntity _dmfEntity)
    {
        DMFDefinitionGroupExecution dmfDefinitionGroupExecution;
        select count(RecId) from dmfDefinitionGroupExecution
            where dmfDefinitionGroupExecution.Entity == _dmfEntity.EntityName
                && (dmfDefinitionGroupExecution.TargetStatus == DMFBatchJobStatus::Executing
                    || dmfDefinitionGroupExecution.StagingStatus == DMFBatchJobStatus::Executing);

        return int642int(dmfDefinitionGroupExecution.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDataFromStagingTable</Name>
				<Source><![CDATA[
    private void deleteDataFromStagingTable(TableName _stagingTableName)
    {
        SysDictTable stagingTableDictTable = new SysDictTable(tableName2Id(_stagingTableName));
        Common stagingTableBuffer = stagingTableDictTable.makeRecord();

        ttsbegin;
        delete_from stagingTableBuffer;
        ttscommit;

        info(strFmt("@SCM:Message_DataDeletedFromStagingTable", _stagingTableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMissingPrimaryKeysToStagingTables</Name>
				<Source><![CDATA[
    private void addMissingPrimaryKeysToStagingTables()
    {
        using (var addPrimaryKeysActivityContext = this.logger().primaryKeySyncInstrumentationActivities().addPrimaryKeys())
        {
            MapEnumerator stagingTablesPrimaryKeyFieldsMapEnumerator = stagingTablesPrimaryKeyFieldsMap.getEnumerator();
            while (stagingTablesPrimaryKeyFieldsMapEnumerator.moveNext())
            {
                TableName stagingTableName = stagingTablesPrimaryKeyFieldsMapEnumerator.currentKey();
                str stagingIndexFields = stagingTablesPrimaryKeyFieldsMapEnumerator.currentValue();

                if (stagingTablesMissingPrimaryKeys.in(stagingTableName))
                {
                    this.addMissingPrimaryKeysToStagingTable(stagingTableName, stagingIndexFields);
                }
            }

            info("@SYS9265"); // Operation completed
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMissingPrimaryKeysToStagingTable</Name>
				<Source><![CDATA[
    private void addMissingPrimaryKeysToStagingTable(TableName _stagingTableName, str _stagingIndexFields)
    {
        UserConnection connection = new UserConnection();

        try
        {
            var sqlStatementText = strLRTrim(this.getPrimaryKeySQLStatementText(_stagingTableName, _stagingIndexFields));

            if (sqlStatementText)
            {
                connection.ttsbegin();

                SqlStatementExecutePermission permission = new SqlStatementExecutePermission(sqlStatementText);

                // Open the code access permission scope.
                permission.assert();

                if (this.executePrimaryKeyCreationStatement(connection, sqlStatementText))
                {
                    connection.ttscommit();
                }
                else
                {
                    connection.ttsabort();
                }
            }
        }
        finally
        {
            // Close the code access permission scope.
            CodeAccessPermission::revertAssert();
            connection.finalize();
            connection = null;
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryKeySQLStatementText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SQL statement that will add a primary key to the specified table.
    /// </summary>
    /// <param name = "_tableName">The name of the table for which to add the primary key.</param>
    /// <param name = "_stagingIndexFields">The list of fields contained in the primary key, as a string.</param>
    /// <returns>The SQL statement.</returns>
    private SysSQLStatementText getPrimaryKeySQLStatementText(TableName _tableName, str _stagingIndexFields)
    {
        return strFmt(@'ALTER TABLE %1 ADD  CONSTRAINT [TEMP_ICM237688719_STAGINGIDX_%3] PRIMARY KEY NONCLUSTERED
    (
        %2
    )WITH (ONLINE = ON)', _tableName, _stagingIndexFields, tableName2id(_tableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectStagingTablesWithDuplicates</Name>
				<Source><![CDATA[
    private void detectStagingTablesWithDuplicates()
    {
        stagingTablesWithDuplicates = new Set(Types::String);

        using (var detectDuplicatesActivityContext = this.logger().primaryKeySyncInstrumentationActivities().detectDuplicates())
        {
            MapEnumerator stagingTablesPrimaryKeyFieldsMapEnumerator = stagingTablesPrimaryKeyFieldsMap.getEnumerator();
            while (stagingTablesPrimaryKeyFieldsMapEnumerator.moveNext())
            {
                TableName tableName = stagingTablesPrimaryKeyFieldsMapEnumerator.currentKey();
                str stagingIndexFields = stagingTablesPrimaryKeyFieldsMapEnumerator.currentValue();

                if (this.hasDuplicates(tableName, stagingIndexFields))
                {
                    stagingTablesWithDuplicates.add(tableName);
                    this.logger().logInformation(tableName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectStagingTablesMissingPrimaryKeys</Name>
				<Source><![CDATA[
    private void detectStagingTablesMissingPrimaryKeys()
    {
        stagingTablesMissingPrimaryKeys = new Set(Types::String);

        using (var detectMissingPrimaryKeysActivityContext = this.logger().primaryKeySyncInstrumentationActivities().detectMissingPrimaryKeys())
        {
            MapEnumerator stagingTablesPrimaryKeyFieldsMapEnumerator = stagingTablesPrimaryKeyFieldsMap.getEnumerator();
            while (stagingTablesPrimaryKeyFieldsMapEnumerator.moveNext())
            {
                TableName tableName = stagingTablesPrimaryKeyFieldsMapEnumerator.currentKey();

                if (this.isMissingPrimaryKey(tableName))
                {
                    stagingTablesMissingPrimaryKeys.add(tableName);
                    this.logger().logInformation(tableName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMissingPrimaryKey</Name>
				<Source><![CDATA[
    private boolean isMissingPrimaryKey(TableName _tableName)
    {
        return this.executeDetectionStatementQuery(this.getMissingPrimarySQLStatementText(_tableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMissingPrimarySQLStatementText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SQL statement that checks whether a table is missing a primary key.
    /// </summary>
    /// <param name = "_tableName">The name of the table.</param>
    /// <returns>The SQL statement.</returns>
    /// <remarks>
    /// The generated SQL statement will return a count of 1 if the table exists and if it does not contain a primary key.
    /// </remarks>
    private SysSQLStatementText getMissingPrimarySQLStatementText(TableName _tableName)
    {
        return strFmt(@'SELECT count(*)
    FROM Sys.objects T
    LEFT OUTER JOIN Sys.indexes I on I.object_id = T.object_id AND I.is_primary_key = 1
    ' + 'WHERE T.[Name] = \'%1\' and T.[type] = \'U\' AND I.[name] is null',
            _tableName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDuplicates</Name>
				<Source><![CDATA[
    private boolean hasDuplicates(TableName _tableName, str _stagingIndexFields)
    {
        return this.executeDetectionStatementQuery(this.getDuplicateSQLStatementText(_tableName, _stagingIndexFields));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDuplicateSQLStatementText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SQL statement that checks whether there are duplicates in a table.
    /// </summary>
    /// <param name = "_tableName">The name of the table.</param>
    /// <param name = "_stagingIndexFields">The list of fields for which to check duplicates, as a string.</param>
    /// <returns>The SQL statement.</returns>
    private SysSQLStatementText getDuplicateSQLStatementText(TableName _tableName, str _stagingIndexFields)
    {
        return strFmt(@'select top 1 count(*)
from %1 with (noLock)
group by %2 having count(*) > 1', 
            _tableName, _stagingIndexFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDetectionStatementQuery</Name>
				<Source><![CDATA[
    private boolean executeDetectionStatementQuery(str _sqlStatementText)
    {
        UserConnection connection = new UserConnection();
        boolean detectionResult;

        try
        {
            var sqlStatementText = strLRTrim(_sqlStatementText);

            if (sqlStatementText)
            {
                SqlStatementExecutePermission permission = new SqlStatementExecutePermission(sqlStatementText);

                // Open the code access permission scope.
                permission.assert();

                Statement statement = connection.createStatement();

                Map sqlParams = SqlParams::create();
                ResultSet resultSet = statement.executeQueryWithParameters(sqlStatementText, sqlParams);
                statement.close();

                if (resultSet && resultSet.next())
                {
                    detectionResult = resultSet.getBoolean(1);
                }
            }
        }
        catch
        {
            // An error was thrown from the statement execution.
            warning(strFmt("@SCM:ErrorMessage_ErrorExecutingStatement", _sqlStatementText));
        }
        finally
        {
            // Close the code access permission scope.
            CodeAccessPermission::revertAssert();
            connection.finalize();
            connection = null;
        }

        return detectionResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePrimaryKeyCreationStatement</Name>
				<Source><![CDATA[
    private boolean executePrimaryKeyCreationStatement(Connection _connection, str _sqlStatementText)
    {
        boolean isSuccessful;
        
        Statement statement = _connection.createStatement();
        try
        {
            Map sqlParams = SqlParams::create();
            statement.executeUpdateWithParameters(_sqlStatementText, sqlParams);
            isSuccessful = true;
        }
        catch
        {
            // An error was thrown from the statement execution.
            isSuccessful = false;
            warning(strFmt("@SCM:ErrorMessage_ErrorExecutingStatement", _sqlStatementText));
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStagingTableIndexFieldsToMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void insertStagingTableIndexFieldsToMap(TableName _tableName)
    {
        const str StagingIndexName = 'StagingIdx';

        str stagingIndexFieldsListString;
        TableId tableId = tableName2Id(_tableName);
        SysDictTable dictTable = new SysDictTable(tableId);
        
        AxTable table = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetTable(_tableName);
        var indexesEnumerator = table.Indexes.GetEnumerator();
        while (indexesEnumerator.MoveNext())
        {
            AxTableIndex tableIndex = indexesEnumerator.Current;

            // Finds the unique index called StagingIdx
            if (tableIndex.AlternateKey == Microsoft.Dynamics.AX.Metadata.Core.MetaModel.NoYes::Yes
                && tableIndex.Name == StagingIndexName)
            {
                // Adds the partition field to the string list of index fields
                str partitionFieldName = dictTable.fieldObject(fieldName2Id(tableId, 'Partition')).name(DbBackend::Sql);
                stagingIndexFieldsListString = partitionFieldName;

                var indexFieldsEnumerator = tableIndex.Fields.GetEnumerator();
                while (indexFieldsEnumerator.MoveNext())
                {
                    // Add each index field to the string list
                    AxTableIndexField tableIndexField = indexFieldsEnumerator.Current;
                    str tableFieldName = dictTable.fieldObject(fieldName2Id(tableId, tableIndexField.Name)).name(DbBackend::Sql);
                    if (tableFieldName)
                    {
                        stagingIndexFieldsListString += strFmt(',%1', tableFieldName);
                    }
                    else
                    {
                        stagingIndexFieldsListString += strFmt(',%1', tableIndexField.Name);
                    }
                }
                break;
            }
        }

        str tableName = dictTable.name(DbBackend::Sql);

        if (!stagingTablesPrimaryKeyFieldsMap.exists(tableName)
            && stagingIndexFieldsListString)
        {
            stagingTablesPrimaryKeyFieldsMap.add(_tableName, stagingIndexFieldsListString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private EcoResInstrumentationLogger logger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = EcoResInstrumentationLogger::createLogger(classStr(EcoResStagingTablesPrimaryKeySynchronizer));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>