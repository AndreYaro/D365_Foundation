<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjExtensionHashCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to compute a hash value for customer extension fields, so that a field containing the hash may be included in a unique index on the table.
/// </summary>
public class ProjExtensionHashCalculator
{
    private static const ProjExtensionHash emptyHash = '';

    private Map fields;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	private void new()
    {
        fields = new Map(Types::Integer, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a new extension-field hash calculator.
    /// </summary>
    /// <returns>A <c>ProjExtensionHashCalculator</c> object.</returns>
	public static ProjExtensionHashCalculator construct()
    {
        ProjExtensionHashCalculator result = new ProjExtensionHashCalculator();
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExtensionField</Name>
				<Source><![CDATA[
	/// <summary>
    /// Returns whether the given field ID has been declared as an extension field.
    /// </summary>
    /// <param name = "_field">Id of the field to check as an extension field.</param>
    /// <returns>true if the given field is an extension field; otherwise, false.</returns>
    public boolean isExtensionField(FieldId _field)
    {
        return fields.exists(_field);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addExtensionField</Name>
				<Source><![CDATA[
	/// <summary>
    /// Adds an extension field to the set to be hashed.
    /// </summary>
    /// <param name = "_field">The id of the field to be included in the hash.</param>
    /// <param name = "_defaultValue">The default value of the field. If an instance of the field is encountered with this value, it is skipped in the hash.</param>
	public void addExtensionField(FieldId _field, anytype _defaultValue)
    {
        fields.insert(_field, _defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates hash value for extensions to the given record.
    /// </summary>
    /// <param name = "_record">The record to calculate the hash for.</param>
    /// <returns>A SHA-256 hash value, with string size 64.</returns>
	public ProjExtensionHash calculateHash(Common _record)
    {		
		List hashSource = new List(Types::String);

        MapEnumerator fieldEnumerator = fields.getEnumerator();
		while (fieldEnumerator.moveNext())
        {
            FieldId field = fieldEnumerator.currentKey();
            anytype defaultValue = fieldEnumerator.currentValue();
            anytype fieldValue = _record.(field);

            // If the extension field is default, don't hash it (consequence: previously un-hashed records with default extension fields already have the correct hash)
			if (fieldValue == defaultValue)
            {
                continue;
            }

            str fieldName = fieldId2Name(_record.TableId, field);
            str hashEntry = strFmt('%1:%2', fieldName, strRTrim(any2Str(fieldValue)));
            
			hashSource.addEnd(hashEntry);
        }

        // For this purpose, we're defining the hash of an empty string to be an empty string
		// Justification:
        // Records created before the creation of the hash field will have an empty string hash value.
		// Since they're already guaranteed to be unique, we can avoid the need for a data update by assigning an empty hash value to empty strings.
		if (hashSource.elements() == 0)
        {
            return emptyHash;
        }

        using (System.Security.Cryptography.SHA256 hasher = System.Security.Cryptography.SHA256::Create())
        {
            System.Byte[] hashSourceBytes = System.Text.Encoding::Default.GetBytes(hashSource.toString());
            System.Byte[] hash = hasher.ComputeHash(hashSourceBytes);

			// Convert the resulting hash to a hex string
			// Reason: SQL Server in AX is configured with case-insensitive collation
			// Standard Base-64 strings have lowercase and uppercase versions of the same character, whereas hexadecimal does not
			// BitConverter can do this conversion, but it inserts dashes between hex bytes so we need to remove those
            return strRem(System.BitConverter::ToString(hash), '-');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>