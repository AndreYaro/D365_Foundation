<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustomJournalTableInteraction</c> class is the interaction class for the customs journal form.
/// </summary>
class CustomJournalTableInteraction extends PageInteraction
{
    #Define.CustomJournalTableDSName('CustomJournalTable')
    #Define.CustomJournalTransDSName('CustomJournalTrans')
    #Define.SelectionChanged        ('selectionChanged')

    Page                        page;
    CustomJournalTable_RU       customJournal;
    CustomJournalTrans_RU       customTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customJournalTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the header action menu item buttons when the active customs journal table header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute(#CustomJournalTableDSName, #selectionChanged)]
    public void customJournalTable_DS_selectionChanged()
    {
        this.init();

        this.enableHeaderActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customJournalTrans_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the line action menu item buttons when the active customs journal line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute(#CustomJournalTransDSName, #SelectionChanged)]
    public void customJournalTrans_DS_selectionChanged()
    {
        this.init();

        this.enableLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the header level menu items.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableHeaderActions()
    {
        boolean enabled, posted;
        boolean allowEdit = true, allowCreate = true, allowDelete = true;
        boolean factured;
        boolean existLine = (CustomJournalTrans_RU::maxLineNum(customJournal.CustomJournalId) != 0);

        enabled = (customJournal.CustomJournalType == CustomJournalType_RU::Export) ? false : true;

        switch (customJournal.CustomJournalStatus)
        {
            case CustomJournalStatus_RU::Open:
                break;

            case CustomJournalStatus_RU::Released:
                allowDelete = false;
                allowCreate = false;
                break;

            case CustomJournalStatus_RU::Posted:
                allowDelete = false;
                allowEdit   = false;
                allowCreate = false;
                posted      = true;
                break;
        }

        factured = (FactureJour_RU::find(customJournal.FactureId, FactureModule_RU::Vend).RecId != 0);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalGTDFactureCreate),  posted && ! factured && enabled);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomCorrectionCreate),         posted);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalGTDPost),           customJournal.CustomJournalStatus == CustomJournalStatus_RU::Released);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, FactureJournalVend),             posted && factured && enabled);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, LedgerTransVoucher),             posted);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomCorrectionTable),          customJournal.existCorrection());
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalChargeCalc),        customJournal.CustomJournalStatus == CustomJournalStatus_RU::Open && allowEdit && existLine);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalCalc),              customJournal.CustomJournalStatus == CustomJournalStatus_RU::Open && allowEdit && existLine);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalCalcDutyPartition), customJournal.CustomJournalStatus == CustomJournalStatus_RU::Open && allowEdit && customTrans.CustomPartition);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalGTDCreateBase),     allowCreate && existLine);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalGTDCreate),         customJournal.CustomJournalStatus == CustomJournalStatus_RU::Open && allowCreate && existLine);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, CustomJournalGTDCancel),         customJournal.CustomJournalStatus == CustomJournalStatus_RU::Released);
        this.page().actionPaneControlEnabled(formControlStr(CustomJournalTable_RU, InventJournalTableTransfer),     customJournal.TransferInventJournalId ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the line level menu items.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableLineActions()
    {
        /*
        page.actionPaneControlEnabled(formControlStr(EmplAdvTable_RU, accountingDistribution), emplAdvLine.isDistributionEnabled());
        page.actionPaneControlEnabled(formControlStr(EmplAdvTable_RU, subLedgerJournal), emplAdvLine.isDistributionEnabled());
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        private void init()
    {
        page = this.page();

        customJournal = page.activeRecord(#CustomJournalTableDSName);
        customTrans   = page.activeRecord(#CustomJournalTransDSName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>