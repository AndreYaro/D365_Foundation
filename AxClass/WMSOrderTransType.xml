<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTransType</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class WmsOrderTransType
{
    WMSOrderTrans   wmsOrderTrans;
    WMSOrder        wmsOrder;

    boolean         adjustWMSLocationLoad;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate()
    {
        wmsOrderTrans.changeStatus(WMSExpeditionStatus::Activated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateRefillTransport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates refills.
    /// </summary>
    /// <remarks>
    ///    Override this method when refills should be created.
    /// </remarks>
    protected void activateRefillTransport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowShipmentUnReservationForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that determines whether the shipment un-reservation is allowed for a
    /// single line.
    /// </summary>
    /// <returns>
    /// false, because the shipment un-reservation for a single line is by default not allowed.
    /// </returns>
    public boolean allowShipmentUnReservationForLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeUnpicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the related <c>WMSOrderTrans</c> record has a status that allows for it to be
    ///    unpicked.
    /// </summary>
    /// <returns>
    ///    true if the related <c>WMSOrderTrans</c> record has a status that allows for it to be unpicked;
    ///    otherwise, false.
    /// </returns>
    public NoYes canBeUnpicked()
    {
        return (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Picked ||
                wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    abstract public void cancel(boolean _checkRoute = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeToLocation</Name>
				<Source><![CDATA[
    public void changeToLocation(
        WMSLocation     _newToLocation,
        boolean         _updateTrans = true)
    {
        InventDim               inventDim   = InventDim::find(wmsOrderTrans.ToInventDimId);

        inventDim.wmsLocationId     = _newToLocation.wmsLocationId;
        inventDim.InventLocationId  = _newToLocation.InventLocationId;
        inventDim.initFromInventLocation(inventDim.inventLocation());
        inventDim = InventDim::findOrCreate(inventDim);

        wmsOrderTrans.ToInventDimId = inventDim.InventDimId;

        if (_updateTrans)
        {
            wmsOrderTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinishPickingLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if picking can be performed. Also updates and reserves the picking line with specified dimensions
    /// </summary>
    /// <param name="_inventDimPicked">
    ///    The dimensions for which picking is to be performed
    /// </param>
    /// <param name="_pickedQty">
    ///    The quantity to be picked.
    /// </param>
    /// <param name="_pdsCWPickedQty">
    ///    The catch weight quantity to be picked.
    /// </param>
    /// <param name="_lockActiveDimensions">
    ///    True if the picking line must be locked on the specified dimensions; otherwise, false. Optional.
    /// </param>
    abstract public void checkFinishPickingLine(
        InventDim       _inventDimPicked,
        InventQty       _pickedQty,
        PdsCWInventQty  _pdsCWPickedQty = 0,
        boolean         _lockActiveDimensions = false
        )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFinishRoute</Name>
				<Source><![CDATA[
    public void checkFinishRoute(WMSPickingRoute _wmsPickingRoute)
    {
        if (!_wmsPickingRoute)
        {
            return;
        }

        _wmsPickingRoute.checkFinishRoute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFix</Name>
				<Source><![CDATA[
    public void  checkFix(SysConsistencyCheck  _sysConsistencyCheck)
    {
        DictTable   dictTable           = new DictTable(tableNum(WMSOrderTrans));
        boolean     hasCheckFixMethod   = _sysConsistencyCheck.hasTableCheckFixMethod(tableNum(WMSOrderTrans));

        _sysConsistencyCheck.kernelCheckRecord(wmsOrderTrans, dictTable, hasCheckFixMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory order transaction record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory order transaction record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the inventory transactions associated with the <c>WMSOrderTrans</c> record.
    /// </summary>
    public void releaseInventoryTransactions()
    {
        this.unReserve();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletedStandard</Name>
				<Source><![CDATA[
    public void deletedStandard(
        boolean     _removeFromOrder,
        boolean     _updateRoute,
        boolean     _updateShipment)
    {
        wmsOrder = this.wmsOrder(true);

        if (_removeFromOrder)
        {
            wmsOrder.Qty       -= wmsOrderTrans.Qty;
            wmsOrder.PdsCWQty  -= wmsOrderTrans.PdsCWQty;
        }
        else
        {
            wmsOrder.QtyNoShipment         += wmsOrderTrans.Qty;
            wmsOrder.PdsCWQtyNoShipment    += wmsOrderTrans.PdsCWQty;
        }

        if (_removeFromOrder && wmsOrder.Qty == 0)
        {
            wmsOrder.delete();
        }
        else
        {
            wmsOrder.setStatus();
            wmsOrder.doUpdate();
        }

        WMSShipment wmsShipment;

        if (_updateRoute && wmsOrderTrans.RouteId)
        {
            WMSPickingRoute wmsPickingRoute = wmsOrderTrans.wmsPickingRoute(true);
            if (wmsPickingRoute && wmsPickingRoute.numberOfPickingLines() == 0)
            {
                wmsPickingRoute.doDelete();
                wmsShipment = wmsPickingRoute.wmsShipment(true);
                if (wmsShipment.RecId)
                {
                    wmsShipment.notifyOfLineChange(NoYes::Yes, NoYes::No, NoYes::Yes);
                }
            }
            else
            {
                this.checkFinishRoute(wmsPickingRoute);
            }            
        }
        else if (wmsOrderTrans.ShipmentId && _updateShipment)
        {
            wmsShipment = wmsOrderTrans.wmsShipment(true);
            if (wmsShipment.RecId)
            {
                wmsShipment.notifyOfLineChange(NoYes::No, NoYes::No, NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesStatusAllowPicking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the related <c>WMSOrderTrans</c> record has a status that allows for picking.
    /// </summary>
    /// <returns>
    /// true if the related <c>WMSOrderTrans</c> record has a status that allows for picking; otherwise,
    /// false.
    /// </returns>
    public NoYes doesStatusAllowPicking()
    {
        if (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
        ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated
        ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the location to where the picked items are to be delivered.
    /// </summary>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The delivery location of the picked items.
    /// </returns>
    public WMSLocation findToLocation(boolean _forupdate = false)
    {
        WMSLocation         toWMSLocation;
        WMSShipment         wmsShipment;
        InventLocationId    inventLocationId;
        WMSLocationId       wmsLocationId;
        InventDim           inventDim;
        InventItemLocation  inventItemLocation;
        InventLocation      inventLocation;

        if (wmsOrderTrans.InventTransType == InventTransType::ProdLine)
        {
            toWMSLocation   = ProdBOM::findTransId(wmsOrderTrans.InventTransId).inputWMSLocation(wmsOrderTrans.DlvDate);
            if (toWMSLocation.RecId)
            {
                return toWMSLocation;
            }
        }

        wmsShipment = wmsOrderTrans.wmsShipment();
        if (wmsShipment.InventLocationId && wmsShipment.OutputPort)
        {
            // Look for location on shipment (output port)
            toWMSLocation = WMSLocation::find(wmsShipment.OutputPort, wmsShipment.InventLocationId, _forupdate);
            if (toWMSLocation.RecId)
            {
                return toWMSLocation;
            }
        }

        inventLocationId = wmsShipment.InventLocationId ? wmsShipment.InventLocationId : wmsOrderTrans.inventDim().InventLocationId;
        if (inventLocationId)
        {
            inventDim.initFromInventDim(wmsOrderTrans.inventDim(), InventDim::dimProductDimensionEnabledFieldList());
            inventDim.InventLocationId = inventLocationId;
            inventDim = InventDim::findOrCreate(inventDim);
            inventItemLocation = InventItemLocation::findFixedWarehouse(wmsOrderTrans.ItemId,inventDim.InventDimId);

            wmsLocationId = wmsOrderTrans.InventTransType == InventTransType::ProdLine ? inventItemLocation.wmsLocationIdDefaultReceipt : inventItemLocation.wmsLocationIdDefaultIssue;
            if (wmsLocationId)
            {
                // Look for default receipt location on warehouse item
                toWMSLocation = WMSLocation::find(wmsLocationId, inventLocationId, _forupdate);
                if (toWMSLocation.RecId)
                {
                    return toWMSLocation;
                }
            }

            inventLocation = InventLocation::find(inventLocationId);
            wmsLocationId  = wmsOrderTrans.InventTransType == InventTransType::ProdLine ? inventLocation.wmsLocationIdDefaultReceipt : inventLocation.wmSlocationIdDefaultIssue;
            if (wmsLocationId)
            {
                // Look for default receipt location on warehouse
                toWMSLocation = WMSLocation::find(wmsLocationId, inventLocationId, _forupdate);

                if (toWMSLocation.RecId)
                {
                    return toWMSLocation;
                }
            }
        }

        return toWMSLocation; // return null buffer
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishPickingLine</Name>
				<Source><![CDATA[
    abstract public void finishPickingLine(
        WMSPickPalletId     _wmsPickPalletId,
        InventDim           _inventDimPicked,
        HcmWorkerRecId      _worker,
        WMSExpeditionTime   _time,
        boolean             _startRoute = true,
        boolean             _checkRoute = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToInventDimFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the inventory to-dimensions.
    /// </summary>
    /// <remarks>
    ///    This method copies the from-dimensions to the to-dimensions and clears the destination dimensions.
    /// </remarks>
    public void initToInventDimFromInventDim()
    {
        InventDim   toInventDim = wmsOrderTrans.inventDim().data();

        // Clear destination dimension
        toInventDim.InventSiteId     = '';
        toInventDim.InventLocationId = '';
        toInventDim.wmsLocationId    = '';        

        wmsOrderTrans.ToInventDimId = InventDim::findOrCreate(toInventDim).InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before an inventory order transaction record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after an inventory order transaction record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventMovement</Name>
				<Source><![CDATA[
    abstract InventMovement inventMovement(boolean _transferReceipt = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the status on the current picking line from Staged to Loaded.
    /// </summary>
    public void load()
    {
        wmsOrderTrans.changeStatus(WMSExpeditionStatus::Loaded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveReservation</Name>
				<Source><![CDATA[
    public void moveReservation(InventDim _inventDimNew)
    {
        wmsOrderTrans.unReserve(true, false);
        wmsOrderTrans.reserve(_inventDimNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(WMSOrderTrans _wmsOrderTrans)
    {
        wmsOrderTrans           = _wmsOrderTrans;
        adjustWMSLocationLoad   = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustWMSLocationLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the load on a <c>WMSLocation</c> location should be adjusted when a physical transaction occurs.
    /// </summary>
    /// <param name="_adjustWMSLocationLoad">
    ///     A Boolean value that determines whether the load on a <c>WMSLocation</c> location should be adjusted; optional.
    /// </param>
    /// <returns>
    ///     true if the load on a <c>WMSLocation</c> location should be adjusted; otherwise, false.
    /// </returns>
    public boolean parmAdjustWMSLocationLoad(boolean _adjustWMSLocationLoad = adjustWMSLocationLoad)
    {
        adjustWMSLocationLoad = _adjustWMSLocationLoad;
        return adjustWMSLocationLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSOrderTrans</Name>
				<Source><![CDATA[
    final public WMSOrderTrans parmWMSOrderTrans()
    {
        return wmsOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsValidateCatchWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the quantity and catch weight quantity fields.
    /// </summary>
    /// <returns>
    /// true if the catch weight quantity is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the quantity is out of range a warning message will be posted to the Infolog.
    /// </remarks>
    public boolean pdsValidateCatchWeight()
    {
        boolean ret = true;

        if (PdsGlobal::pdsIsCWItem(wmsOrderTrans.ItemId))
        {
            ret = PdsCatchWeight::validateInventQty(
                            wmsOrderTrans.ItemId,
                            wmsOrderTrans.Qty,
                            wmsOrderTrans.PdsCWQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTransfer</Name>
				<Source><![CDATA[
    protected void postTransfer()
    {
        InventUpd_Financial     financial;
        LedgerVoucher       ledgerVoucher;
        LedgerVoucherObject     ledgerVoucherObject;
        TransactionTxt          transactionTxt;
        NumberSeq               numberSeq;
        InventJournalVoucherId  voucherId;
        TransDate               transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventJournalVoucherId());
        voucherId = numberSeq.num();

        transactionTxt   = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::InventJournalTransfer);
        transactionTxt.setDate(transDate);
        transactionTxt.setVoucher(voucherId);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                    SysModule::Invent,
                                                    numberSeq.parmVoucherSequenceCode());
        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId,
                                                              transDate,
                                                              SysModule::Invent,
                                                              LedgerTransType::Invent);
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        financial = InventUpd_Financial::newVirtuelTransfer(this.inventMovement(), ledgerVoucher, 0);
        financial.updateNow();

        financial = InventUpd_Financial::newCheckPostInventJournalTrans(this.inventMovement(true), ledgerVoucher, -financial.updCostAmountInvent(), -financial.updCostAmountInventSecCur_RU());
        financial.parmAllowReserveOrdered(true);
        financial.parmAdjustWMSLocationLoad(this.parmAdjustWMSLocationLoad());
        /*
            Include marked transactions when reservOrdered are updated to reservPhysical as a consequence of the on-hand addition.
            This is done to support scenarios where e.g a sales order is marked against a production order and a transport is used to move the finished items.
        */
        financial.parmAllowReservePhysUpdateForAllMarked(true);
        financial.updateNow();

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromRoute</Name>
				<Source><![CDATA[
    public void removeFromRoute()
    {
        WMSPickingRoute wmsPickingRoute;

        if (!wmsOrderTrans.RouteId)
        {
            return;
        }

        wmsPickingRoute = wmsOrderTrans.wmsPickingRoute(true);
        if (wmsPickingRoute.numberOfPickingLines() <= 1)
        {
            wmsPickingRoute.delete();
        }
        else
        {
            wmsPickingRoute.ExpectedExpeditionTime     -= wmsOrderTrans.ExpectedExpeditionTime;
            wmsPickingRoute.update();
            this.checkFinishRoute(wmsPickingRoute);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>start</Name>
				<Source><![CDATA[
    public void start()
    {
        wmsOrderTrans.changeStatus(WMSExpeditionStatus::Started);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the status on the current picking line from Loaded to Staged.
    /// </summary>
    public void unload()
    {
        wmsOrderTrans.changeStatus(WMSExpeditionStatus::Staged);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPick</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    public void unPick(
        InventQty   _unPickQty,
        InventDim   _inventDimUnPickTo = wmsOrderTrans.inventDim(),
        boolean     _cancelPickingLine = false, 
        PdsCWInventQty _pdsCWUnPickQty = 0
        )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unReserve</Name>
				<Source><![CDATA[
    abstract public void unReserve(
        boolean     _unreservePrereserved   = false,
        boolean     _allowReReservation     = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQty</Name>
				<Source><![CDATA[
    abstract public boolean updateQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the shipment ID to the specified value.
    /// </summary>
    /// <param name="_wmsShipmentId">
    ///    The new shipment ID.
    /// </param>
    /// <remarks>
    ///    The update method is not called.
    /// </remarks>
    public void updateShipmentId(WMSShipmentId _wmsShipmentId)
    {
        wmsOrderTrans.ShipmentId = _wmsShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToInventDim</Name>
				<Source><![CDATA[
    public void updateToInventDim(InventDim _inventDim)
    {
        wmsOrderTrans.ToInventDimId  = _inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsOrder</Name>
				<Source><![CDATA[
    protected WMSOrder wmsOrder(boolean _update = false)
    {
        if (wmsOrder)
        {
            if ((!_update) || wmsOrder.selectForUpdate())
            {
                return wmsOrder;
            }
        }

        wmsOrder = wmsOrderTrans.wmsOrder(_update);
        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishPickingLinesMulti</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates multiple <c>WMSOrderTrans</c> records.
    /// </summary>
    /// <param name="_packedMap">
    /// A packed map.
    /// </param>
    /// <param name="_wmsPickPalletId">
    /// A <c>WMSPickPalletID</c> value; optional.
    /// </param>
    /// <param name="_worker">
    /// The worker that performs the operation; optional.
    /// </param>
    /// <param name="_time">
    /// The duration of the operation; optional.
    /// </param>
    /// <remarks>
    /// An <c>OrderId</c> value is required for performance reasons so an index can be used.
    /// </remarks>
    /// <exception cref="M:exception::UpdateConflict">
    /// An update conflict occurred.
    /// </exception>
    /// <exception cref="M:exception::UpdateConflictNotRecovered">
    /// An update conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:exception::error">
    /// The <c>RecVersion</c> passed as argument differs from the <c>RecVersion</c> of the selected record
    /// </exception>
    static public void finishPickingLinesMulti(
        container           _packedMap,
        WMSPickPalletId     _wmsPickPalletId    = '',
        HcmWorkerRecId      _worker             = DirPersonUserEx::findUserWorkerReference(),
        WMSExpeditionTime   _time               = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))
    {
        Map  selectedWMSOrderTrans;
        int  elements;
        WMSExpeditionTime timePerLine;
        WmsOrderTransMultiFinishPickHandler wmsOrderTransMultiFinishPickHandler;

        if (!_packedMap)
        {
            return;
        }

        selectedWMSOrderTrans = Map::create(_packedMap);

        if (!selectedWMSOrderTrans)
        {
            return;
        }

        elements = selectedWMSOrderTrans.elements();

        if (!elements)
        {
            return;
        }

        timePerLine = real2int(_time/elements);

        wmsOrderTransMultiFinishPickHandler = WmsOrderTransMultiFinishPickHandler::newParameters(_wmsPickPalletId,_worker,timePerLine);

        WMSOrderTrans::loopWMSOrderTransMulti(_packedMap,wmsOrderTransMultiFinishPickHandler);

        WMSOrder::pdsCheckAndCacelZeroCWLines(
            wmsOrderTransMultiFinishPickHandler.pdsGetOrderIds());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSOrderTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of a subclass of the <c>WMSOrderTransType</c> class.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    The <c>WMSOrderTrans</c> record that is used to initialize the class.
    /// </param>
    /// <returns>
    ///    A new instance of a subclass of the <c>WMSOrderTransType</c> class.
    /// </returns>
    public static WMSOrderTransType newWMSOrderTrans(WMSOrderTrans _wmsOrderTrans)
    {
        switch (_wmsOrderTrans.OrderType)
        {
            case WMSOrderType::OrderPick    :
                return WMSOrderTransType_Output_OrderPick::newWMSOrderTrans(_wmsOrderTrans);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishPickingLinesMultiTTS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates multiple <c>WMSOrderTrans</c> records in a transaction.
    /// </summary>
    /// <param name="_packedMap">
    /// A packed map.
    /// </param>
    /// <param name="_wmsPickPalletId">
    /// A <c>WMSPickPalletID</c> value; optional.
    /// </param>
    /// <param name="_worker">
    /// The worker that performs the operation; optional.
    /// </param>
    /// <param name="_time">
    /// The duration of the operation; optional.
    /// </param>
    /// <remarks>
    /// An <c>OrderId</c> value is required for performance reasons so an index can be used.
    /// </remarks>
    static public void finishPickingLinesMultiTTS(
        container           _packedMap,
        WMSPickPalletId     _wmsPickPalletId    = '',
        HcmWorkerRecId      _worker             = DirPersonUserEx::findUserWorkerReference(),
        WMSExpeditionTime   _time               = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))
    {
        #OCCRetryCount
        try
        {
            ttsBegin;
            WMSOrderTransType::finishPickingLinesMulti(_packedMap, _wmsPickPalletId, _worker, _time);
            ttsCommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>