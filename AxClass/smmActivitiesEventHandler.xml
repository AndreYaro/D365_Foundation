<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmActivitiesEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles all the events for the form extension <c>smmActivities.Extension</c>
/// </summary>
class smmActivitiesEventHandler
{
    boolean initialized;
    FormRun formElement;

    // Extension controls
    FormStringControl responsible_ResponsibilityId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form extension event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        formElement = _formRunInstance;

        // Register this extension with the main form
        formElement.registerExtensionInstance(classStr(smmActivitiesEventHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        responsible_ResponsibilityId = formElement.design().controlName(formControlStr(smmActivities, Responsible_ResponsibilityId)) as FormStringControl;

        // Register overrides
        responsible_ResponsibilityId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(smmActivitiesEventHandler, onLookupResponsibility), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLookupResponsibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the Responsible_ResponsibilityId control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private void onLookupResponsibility(FormStringControl _sender)
    {
        FormRun element = _sender.formRun();
        DictClass dictClass = new DictClass(classIdGet(element));
        boolean isTemplate =  dictClass.callObject(formMethodStr(smmActivities, parmIsTemplate), element);
        FormDataSource smmActivityParentLinkTable_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivityParentLinkTable));
        smmActivityParentLinkTable smmActivityParentLinkTable = smmActivityParentLinkTable_ds.cursor();

        HierarchyType type = Hierarchy::parentType2HierarchyType(smmActivityParentLinkTable.ParentType);
        if (isTemplate && (type == HierarchyType::Campaign ||
                            type == HierarchyType::Lead ||
                            type == HierarchyType::Opportunity ||
                            type == HierarchyType::Case))
        {
            HierarchyIdBase hierarchyId = dictClass.callObject(formMethodStr(smmActivities, parmhierarchyId), element);
            smmResponsibility::lookupResponsibilityHierarchyId(_sender, hierarchyId);
        }
        else
        {
            FormStringControl resposibilityId = _sender as FormStringControl;
            resposibilityId.lookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TabProject_OnPageActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method handles the event after the <c>TabProject</c> control's page is activated.
    /// </summary>
    /// <param name="_sender">The _sender control</param>
    /// <param name="_e">The form control event args</param>
    [FormControlEventHandler(formControlStr(smmActivities, TabProject), FormControlEventType::PageActivated)]
    public static void TabProject_OnPageActivated(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun element = _sender.formRun();

        FormTabPageControl tabProject = element.design().ControlName(formControlStr(smmActivities, tabProject)) as FormTabPageControl;
        FormDataSource projActivity_ds = element.dataSource(formDataSourceStr(smmActivities, ProjActivity));
        FormDataSource projActivityAssignment_ds = element.dataSource(formDataSourceStr(smmActivities, ProjActivityAssignment));
        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));

        smmActivities smmActivities = smmActivities_ds.cursor();
        if (smmActivities.RecId)
        {
            if (ProjActivity::find(smmActivities.ActivityNumber))
            {
                tabProject.visible(true);
            }
            else
            {
                tabProject.visible(false);
            }
        }
        else
        {
            tabProject.visible(false);
        }

        if (tabProject.isActivePage())
        {
            projActivity_ds.executeQuery();
            projActivityAssignment_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Category1_CategoryDefault_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method handles the event when <c>Category1_CategoryDefault</c> control is modified.
    /// </summary>
    /// <param name="_sender">The _sender control</param>
    /// <param name="_e">The form control event args</param>
    [FormControlEventHandler(formControlStr(smmActivities, Category1_CategoryDefault), FormControlEventType::Modified)]
    public static void Category1_CategoryDefault_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun element = _sender.formRun();
        FormControl category1_Mandatory = element.design().ControlName(formControlStr(smmActivities, category1_Mandatory)) as FormControl;
        FormDataSource projActivity_ds = element.dataSource(formDataSourceStr(smmActivities, ProjActivity));
        ProjActivity projActivity = projActivity_ds.cursor();

        if (projActivity.CategoryDefault)
        {
            category1_Mandatory.enabled(true);
        }
        else
        {
            projActivity.Mandatory = NoYes::No;
            category1_Mandatory.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjActivity_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method handles the event after the <c>ProjActivity</c> datasource is initialized.
    /// </summary>
    /// <param name="_sender">The form datasource</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, ProjActivity), FormDataSourceEventType::Initialized)]
    public static void ProjActivity_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();

        FormDataSource projActivity_ds = _sender;
        projActivity_ds.queryBuildDataSource().clearDynalinks();
        projActivity_ds.queryBuildDataSource().clearRange(fieldNum(ProjActivity, ActivityNumber));

        projActivity_ds.queryBuildDataSource().addRange(fieldNum(ProjActivity, ActivityNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjActivity_OnCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method handles the event when the <c>ProjActivity</c> datasource is getting created.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, ProjActivity), FormDataSourceEventType::Creating)]
    public static void ProjActivity_OnCreating(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        FormDataSource projActivity_ds = _sender;
        ProjActivity projActivity = projActivity_ds.cursor();

        FormDataSource smmActivityParentLinkTable_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivityParentLinkTable));
        smmActivityParentLinkTable smmActivityParentLinkTable = smmActivityParentLinkTable_ds.cursor();

        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();

        if (smmActivityParentLinkTable.ParentType == smmActivityParentType::Project)
        {
            FormDataSourceCreateEventArgs createArgs = _e;
            projActivity.initFromSmmActivities(smmActivities);
            _sender.allowCreate(true);
        }
        else
        {
            // suppressing the create
            _sender.allowCreate(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjActivity_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method handles the event when <c>ProjActivity</c> datasource is getting written
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, ProjActivity), FormDataSourceEventType::Writing)]
    public static void ProjActivity_OnWriting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();

        FormDataSource smmActivityParentLinkTable_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivityParentLinkTable));
        smmActivityParentLinkTable smmActivityParentLinkTable = smmActivityParentLinkTable_ds.cursor();

        if (smmActivityParentLinkTable.ParentType == smmActivityParentType::Project)
        {
            _sender.allowEdit(true);
        }
        else
        {
            // suppressing the write
            _sender.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjActivity_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method handles the event when <c>ProjActivity</c> datasource query is executed.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, ProjActivity), FormDataSourceEventType::QueryExecuting)]
    public static void ProjActivity_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();

        FormDataSource projActivity_ds = _sender;
        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();

        projActivity_ds.queryBuildDataSource().findRange(fieldNum(ProjActivity, ActivityNumber)).value(smmActivities.ActivityNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Pre_close</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called just before <c>smmActivities</c> is closed
    /// </summary>
    /// <param name="args">The event args</param>
    [PreHandlerFor(formStr(smmActivities), formMethodStr(smmActivities, close))]
    public static void smmActivities_Pre_close(XppPrePostArgs args)
    {
        FormRun element = args.getThis();
        FormDataSource callerDataSource;

        if (element.args().caller())
        {
            // Is activities form opened from the business relation form
            if (element.args().caller().name() == formStr(smmBusRelTable))
            {
                if (element.args().record())
                {
                    callerDataSource = FormDataUtil::getFormDataSource(element.args().record());
                }
                element.args().caller().rereadDatasource(callerDataSource);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Pre_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before <c>smmActivities</c> is initialized.
    /// </summary>
    /// <param name="args">The event args</param>
    [PreHandlerFor(formStr(smmActivities), formMethodStr(smmActivities, init))]
    public static void smmActivities_Pre_init(XppPrePostArgs args)
    {
        FormRun element = args.getThis();
        Object callerObject;

        DictClass dictClass = new DictClass(classIdGet(element));
        boolean refreshCaller;

        if (element.args().caller())
        {
            callerObject = element.args().caller();
            dictClass.callObject(formMethodStr(smmActivities, parmCallerObject), element, callerObject);
            if (formHasMethod(callerObject, identifierStr(parmActivityNumber)))
            {
                dictClass.callObject(formMethodStr(smmActivities, parmSmmActivityNumber), element, callerObject.parmActivityNumber());
            }

            switch (callerObject.name())
            {
                case formStr(smmCampaignTable) :
                case formStr(smmTMCallListGroup) :
                case formStr(SalesQuotationTable) :
                case formStr(SalesQuotationProjTable) :
                    refreshCaller = true;
                    break;

                default :
                    refreshCaller = false;
            }

            dictClass.callObject(formMethodStr(smmActivities, parmRefreshCaller), element, refreshCaller);
        }

        smmActivitiesEventHandler extensionInstance = new smmActivitiesEventHandler(element);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after <c>smmActivities</c> is initialized.
    /// </summary>
    /// <param name="_args">The event args</param>
    [PostHandlerFor(formStr(smmActivities), formMethodStr(smmActivities, init))]
    public static void smmActivities_Post_init(XppPrePostArgs _args)
    {
        FormRun element = _args.getThis();

        Object caller = element.args().caller();
        CustTable custTableLocal;
        smmActivityParentLinkTable linkTable;
        boolean hasMultipleActivities;

        if (caller && formHasMethod(caller, 'getSelectedCustAccountNum'))
        {
            select custTableLocal where custTableLocal.AccountNum == caller.getSelectedCustAccountNum();
            select count(RecId) from linkTable where linkTable.ParentType == smmActivityParentType::Customer && linkTable.RefRecId == custTableLocal.RecId;

            hasMultipleActivities =   linkTable.RecId > 1 ? true : false;
        }
        else
        {
            hasMultipleActivities = false;
        }
        if (hasMultipleActivities)
        {
            DictClass dictClass = new DictClass(classIdGet(element));
            dictClass.callObject(formMethodStr(smmActivities, switchToGrid), element);
        }

        smmActivitiesEventHandler extensionInstance = element.getExtensionInstance(classStr(smmActivitiesEventHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after <c>smmActivities</c> parameters are unpacked.
    /// </summary>
    /// <param name="_args">The event args</param>
    [PostHandlerFor(formStr(smmActivities), formMethodStr(smmActivities, unpack))]
    public static void smmActivities_Post_unpack(XppPrePostArgs _args)
    {
        FormRun element = _args.getThis();

        if (element.args() && element.args().caller())
        {
            FormRun formRun = element.args().caller();
            if (formRun.name() == formStr(CustCollections))
            {
                DictClass dictClass = new DictClass(classIdGet(element));
                dictClass.callObject(formMethodStr(smmActivities, parmActivityFiltering), element, smmActivityFiltering::None);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// this method is called after the <c>smmActivities</c> datasource is activated.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivities), FormDataSourceEventType::Activated)]
    public static void smmActivities_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        FormTabPageControl tabProject = element.design().ControlName(formControlStr(smmActivities, tabProject)) as FormTabPageControl;
        FormControl outlookRecurrencePattern = element.design().ControlName(formControlStr(smmActivities, outlookRecurrencePattern)) as FormControl;
        FormDataSource projActivity_ds = element.dataSource(formDatasourceStr(smmActivities, ProjActivity));
        FormDataSource projActivityAssignment_ds = element.dataSource(formDataSourceStr(smmActivities, ProjActivityAssignment));
        FormDataSource smmActivities_ds = element.dataSource(formDatasourceStr(smmActivities, smmActivities));

        smmActivities smmActivities = smmActivities_ds.cursor();
        // Check if the worker owns the activity he is trying to delete
        smmActivities_ds.allowDelete(smmActivities.ResponsibleWorker != smmUtility::getCurrentContactWorker());

        outlookRecurrencePattern.enabled(smmActivities.RecurrenceState != smmOutlookRecurrenceState::NotRecurring);
        if (smmActivities.RecId)
        {
            if (ProjActivity::find(smmActivities.ActivityNumber))
            {
                tabProject.visible(true);
            }
            else
            {
                tabProject.visible(false);
            }
        }
        else
        {
            tabProject.visible(false);
        }

        if (tabProject.isActivePage())
        {
            projActivity_ds.executeQuery();
            projActivityAssignment_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before the delete of <c>smmActivities</c> record
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form datasource record</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivities), FormDataSourceEventType::Deleting)]
    public static void smmActivities_OnDeleting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        boolean                 isFollowUpActivity;
        FormDataSource          smmActivities_ds = _sender;

        smmActivities smmActivities = smmActivities_ds.cursor();

        // If activity is attached to a quotation or call list or campaign
        isFollowUpActivity = (smmActivities.existsLink(smmActivityParentType::Quotation) || smmActivities.existsLink(smmActivityParentType::CallList) || smmActivities.existsLink(smmActivityParentType::Campaign)) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after the delete of <c>smmActivities</c> record
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form datasource record</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivities), FormDataSourceEventType::Deleted)]
    public static void smmActivities_OnDeleted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();

        DictClass dictClass = new DictClass(classIdGet(element));
        boolean                 isFollowUpActivity = dictClass.callObject(formMethodStr(smmActivities, parmIsFollowUpActivity), element);
        smmDeletedActivities    smmDeletedActivities;
        smmActivities           smmActivitiesOrig = dictClass.callObject(formMethodStr(smmActivities, parmsmmActivitiesOrig), element);
        FormDataSource          smmActivities_ds = _sender;
        boolean deleteSeries = dictClass.callObject(formMethodStr(smmActivities, parmDeleteSeries), element);

        if (deleteSeries)
        {
            ttsbegin;

            select forupdate smmDeletedActivities where smmDeletedActivities.ActivityNumber == smmActivitiesOrig.ActivityNumber &&
            smmDeletedActivities.OriginalAppointmentStartDateTime == smmActivitiesOrig.OriginalAppointmentStartDateTime &&
            smmDeletedActivities.ResponsibleWorker  == smmActivitiesOrig.ResponsibleWorker;
            if (smmDeletedActivities)
            {
                smmDeletedActivities.IsEntireSeries = true;
                smmDeletedActivities.update();
            }

            boolean refreshCaller = dictClass.callObject(formMethodStr(smmActivities, parmRefreshCaller), element);
            Object callerObject = dictClass.callObject(formMethodStr(smmActivities, parmCallerObject), element);
            // If activities form is opened from another form and caller form need to be refreshed
            if (refreshCaller && isFollowUpActivity )
            {
                callerObject.reReadDatasource();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnPreLinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before the <c>smmActivities</c> datasource link is activated.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    public static void smmActivities_OnPreLinkActive(FormDataSource _sender)
    {
        FormRun element = _sender.formRun();

        container               parentTypes;
        Hierarchy               hierarchy;
        HierarchyTreeTable      hierarchyTreeTable;
        ProjTable               projTable;
        ProjWIPTable            projWIPTable;
        ProjInvoiceTable        projInvoiceTable;
        boolean                 filerByEstimateContract;
        Common callerRecord;
        TableId callerTableId;
        smmBusRelTable          smmBusRelTable;
        smmActivityParentType   parentType;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         refRecIdRange;
        QueryBuildRange         parentTypeRange;
        container               allowedParentTypes;
        DictClass dictClass = new DictClass(classIdGet(element));
        callerRecord = dictClass.callObject(formMethodStr(smmActivities, parmCallerRecord), element);

        QueryBuildRange elementNodeTypeRange = dictClass.callObject(formMethodStr(smmActivities, parmElementNodeTypeRange), element);
        refRecIdRange = dictClass.callObject(formMethodStr(smmActivities, parmRefRecIdRange), element);
        parentTypeRange = dictClass.callObject(formMethodStr(smmActivities, parmParentTypeRange), element);
        queryBuildDataSource = dictClass.callObject(formMethodStr(smmActivities, parmQueryBuildDataSource), element);
        parentType = dictClass.callObject(formMethodStr(smmActivities, parmParentType), element);

        // Is the form called from the parent
        if (callerRecord)
        {
            switch (callerRecord.TableId)
            {
                case tableNum(ProjInvoiceTable):
                    callerTableId = tableNum(ProjTable);
                    projInvoiceTable = callerRecord;
                    if (elementNodeTypeRange)
                            elementNodeTypeRange.value(queryValue(ElementNodeType::Node));
                    break;

                case tableNum(ProjWIPTable):
                    callerTableId = tableNum(ProjTable);
                    projWIPTable = callerRecord;
                    if (elementNodeTypeRange)
                            elementNodeTypeRange.value(queryValue(ElementNodeType::Node));
                    break;

                default :
                    callerTableId = callerRecord.TableId;
                    break;
            }

            if (projInvoiceTable.ProjInvoiceProjId || projWIPTable.ProjId)
            {
                filerByEstimateContract = true;
            }

            if (callerTableId && callerRecord)
            {
                parentTypes = smmActivityParentLink::refTableId2ParentTypes(callerTableId,callerRecord);
                if (parentTypes)
                {
                    parentType = conPeek(parentTypes,1);
                    _sender.query().dataSourceTable(tableNum(smmActivities)).clearDynalinks();
                    // Get the manual created activity link section datasource
                    queryBuildDataSource = _sender.query().dataSourceTable(tableNum(smmActivityParentLinkTable));

                    // If the datasource isn't created already
                    if (!queryBuildDataSource)
                    {
                        // Add the extra activity link selection data source
                        queryBuildDataSource    = _sender.query().dataSourceTable(tableNum(smmActivities)).addDataSource(tableNum(smmActivityParentLinkTable));

                        // Add a new range for filtering on parentType,refRecId
                        parentTypeRange   = queryBuildDataSource.addRange(fieldNum(smmActivityParentLinkTable, ParentType));
                        // The new datasource should be hidden in the query selection form
                        parentTypeRange.status(RangeStatus::Hidden);
                        if (!filerByEstimateContract)
                        {
                            refRecIdRange     = queryBuildDataSource.addRange(fieldNum(smmActivityParentLinkTable, RefRecId));
                            refRecIdRange.status(RangeStatus::Hidden);
                        }

                        // Link the new datasource to the existing query
                        queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                        queryBuildDataSource.fetchMode(QueryFetchMode::One2One);
                        queryBuildDataSource.addLink(fieldNum(smmActivities, ActivityNumber), fieldNum(smmActivityParentLinkTable, ActivityNumber));

                        // filter activities based on Contract Project or Estimate Project
                        if (filerByEstimateContract)
                        {
                            queryBuildDataSource = queryBuildDataSource.addDataSource(projTable);
                            queryBuildDataSource.joinMode(JoinMode::ExistsJoin);
                            queryBuildDataSource.addLink(fieldNum(smmActivityParentLinkTable, RefRecId), fieldNum(ProjTable, RecId));

                            if (projInvoiceTable.ProjInvoiceProjId)
                            {
                                queryBuildDataSource.addDynalink(fieldNum(ProjTable, ProjInvoiceProjId),projInvoiceTable,fieldNum(ProjInvoiceTable,ProjInvoiceProjId));
                            }
                            else if (projWIPTable.ProjId)
                            {
                                queryBuildDataSource.addDynalink(fieldNum(ProjTable, wipProject),projWIPTable,fieldNum(ProjWIPTable,ProjId));
                            }
                        }
                    }

                    // Filter on the current selected business relation
                    parentTypeRange.value(con2Str(parentTypes));

                    if (!filerByEstimateContract)
                    {
                        refRecIdRange.value(queryValue(callerRecord.RecId));
                    }

                    dictClass.callObject(formMethodStr(smmActivities, parmCallerRecord), element, callerRecord);
                    dictClass.callObject(formMethodStr(smmActivities, parmCallerTableId), element, callerTableId);
                    dictClass.callObject(formMethodStr(smmActivities, parmQueryBuildDataSource), element, queryBuildDataSource);
                    dictClass.callObject(formMethodStr(smmActivities, parmRefRecIdRange), element, refRecIdRange);
                    dictClass.callObject(formMethodStr(smmActivities, parmParentType), element, parentType);
                    dictClass.callObject(formMethodStr(smmActivities, parmParentTypeRange), element, parentTypeRange);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after <c>smmActivities</c> record is written
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivities), FormDataSourceEventType::Written)]
    public static void smmActivities_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        smmActivityParentLinkTable  localsmmActivityParentLinkTable;
        boolean                     newRecord;
        Common                      common;
        Args                        args;
        Object                      parent;
        smmBusRelTable          smmBusRelTable;
        FormRun element = _sender.formRun();
        FormDataSource smmActivities_ds = _sender;
        smmActivities smmActivities = smmActivities_ds.cursor();
        DictClass dictClass = new DictClass(classIdGet(element));
        smmActivityParentType parentType = dictClass.callObject(formMethodStr(smmActivities, parmParentType), element);
        Common                  callerRecord;
        TableId                 callerTableId;
        RecId                   callerRecId;
        newRecord = smmActivities.RecId == 0;
        parent          = element.args().caller();
        if (parent)
        {
            args            = element.args();
            common          = args.record();

            if (args.caller())
            {
                switch (args.caller().name())
                {
                    case formStr(CustTable) :
                        parentType  = smmActivityParentType::Customer;
                        break;
                    case formStr(smmOpportunityTable) :
                        parentType  = smmActivityParentType::Opportunity;
                        break;
                    case formStr(smmLeadTable) :
                        parentType  = smmActivityParentType::Lead;
                        break;
                    default :
                        break;
                }
                callerRecord    = common;
                callerRecId     = common.RecId;
            }
        }

        if (callerRecord && newRecord && parentType)
        {
            if (callerTableId == tableNum(smmBusRelTable))
            {
                smmBusRelTable =  callerRecord;
            }
            if (smmBusRelTable && smmBusRelTable.TableId != callerTableId)
            {
                // Create activity for smmBusRelTable if current form is called from smmBusRelTable
                localsmmActivityParentLinkTable = smmActivities.insertParentLink(smmActivityParentType::BusRel,smmBusRelTable.RecId, false, smmBusRelTable);
            }

            HierarchyType type = Hierarchy::parentType2HierarchyType(parentType);

            if (type == HierarchyType::Campaign ||
                    type == HierarchyType::Lead ||
                    type == HierarchyType::Opportunity)
            {
                // Add the newly associated activity to the process on the current stage
                smmProcessInstance::insertActivityToStage(localsmmActivityParentLinkTable);
            }
        }

        dictClass.callObject(formMethodStr(smmActivities, parmParentType), element, parentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResponsibilityId_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called during the validation of the field <c>smmActivities.ResponsibilityId</c>
    /// </summary>
    /// <param name="_sender">The form data object</param>
    /// <param name="_e">The form data field event args</param>
    [FormDataFieldEventHandler(formDataFieldStr(smmActivities, smmActivities, ResponsibilityId), FormDataFieldEventType::Validated)]
    public static void ResponsibilityId_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormRun element = _sender.datasource().formRun();
        boolean isTemplate;
        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();

        DictClass dictClass = new DictClass(classIdGet(element));
        isTemplate = dictClass.callObject(formMethodStr(smmActivities, parmisTemplate), element);
        boolean isHierarchyCRM;
        Common callerRecord = dictClass.callObject(formMethodStr(smmActivities, parmCallerRecord), element);
        if (callerRecord)
        {
            HierarchyType hierarchyType;

            switch (callerRecord.TableId)
            {
                case tableNum(HierarchyTreeTable) :
                    HierarchyTreeTable hierarchyTreeTable = callerRecord;
                    Hierarchy hierarchy       = Hierarchy::find(hierarchyTreeTable.HierarchyId);
                    hierarchyType   = hierarchy.HierarchyType;
                    isHierarchyCRM  = Hierarchy::isHierarchyTypeCRM(hierarchyType);
                    break;

                default :
                    break;
            }
            if (isTemplate && isHierarchyCRM)
            {
                if (smmActivities.ResponsibilityId && !smmResponsibilityGroup::hierarchyResponsiblityIsEnabled(smmActivities.ResponsibilityId, hierarchyType))
                {
                    throw error(strFmt("@SYS102408",smmActivities.ResponsibilityId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivityParentLinkTable_OnDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method is called after the deletion of <c>smmActivityParentLinkTable</c> record
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivityParentLinkTable), FormDataSourceEventType::Deleted)]
    public static void smmActivityParentLinkTable_OnDeleted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();
        boolean isFollowUpActivity;
        DictClass dictClass = new DictClass(classIdGet(element));
        boolean refreshCaller = dictClass.callObject(formMethodStr(smmActivities, parmRefreshCaller), element);
        Object callerObject = dictClass.callObject(formMethodStr(smmActivities, parmCallerObject), element);

        // If activity is attached to a quotation or call list or campaign
        isFollowUpActivity = (smmActivities.existsLink(smmActivityParentType::Quotation)
                || smmActivities.existsLink(smmActivityParentType::CallList)
                || smmActivities.existsLink(smmActivityParentType::Campaign)) ? true : false;

        // If activities form is opened from another form and caller form need to be refreshed
        if (refreshCaller && isFollowUpActivity )
        {
            callerObject.reReadDatasource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivityParentLinkTable_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called during the writing of <c>smmActivityParentLinkTable</c> record
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivityParentLinkTable), FormDataSourceEventType::Writing)]
    public static void smmActivityParentLinkTable_OnWriting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        FormDataSource smmActivityParentLinkTable_ds = _sender;
        smmActivityParentLinkTable smmActivityParentLinkTable = smmActivityParentLinkTable_ds.cursor();

        RecId oldRefRecId = smmActivityParentLinkTable.orig().RefRecId;

        HierarchyType type = Hierarchy::parentType2HierarchyType(smmActivityParentLinkTable.ParentType);

        if (oldRefRecId != smmActivityParentLinkTable.RefRecId && (type == HierarchyType::Campaign ||
                                                                   type == HierarchyType::Lead ||
                                                                   type == HierarchyType::Opportunity))
        {
            // Check to see if the activity is attached to a process and it is not required.
            smmProcessInstance::deleteActivityFromStage(smmActivityParentLinkTable.orig());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivityParentLinkTable_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after the writing of <c>smmActivityParentLinkTable</c> record
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivityParentLinkTable), FormDataSourceEventType::Written)]
    public static void smmActivityParentLinkTable_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        FormDataSource smmActivityParentLinkTable_ds = _sender;
        smmActivityParentLinkTable smmActivityParentLinkTable = smmActivityParentLinkTable_ds.cursor();

        RecId oldRefRecId = smmActivityParentLinkTable.orig().RefRecId;

        if (smmActivityParentLinkTable.ParentType == smmActivityParentType::ContactPerson)
        {
            // Updating contact in SMAServiceOrderTable
            FormRun callerform = element.args().caller();

            if (callerform && callerform.name() == formStr(SMAServiceOrderTable))
            {
                SMAServiceOrderTable smaServiceOrderTable;

                ttsBegin;

                select forUpdate smaServiceOrderTable
                        where smaServiceOrderTable.ActivityNumber == smmActivityParentLinkTable.ActivityNumber;

                if (smaServiceOrderTable)
                {
                    smaServiceOrderTable.ContactPersonId = smmActivityParentLinkTable.linkedParentId();
                    smaServiceOrderTable.update();
                }

                ttsCommit;
            }
        }

        HierarchyType type = Hierarchy::parentType2HierarchyType(smmActivityParentLinkTable.ParentType);

        if (oldRefRecId != smmActivityParentLinkTable.RefRecId && (type == HierarchyType::Campaign ||
                                                                   type == HierarchyType::Lead ||
                                                                   type == HierarchyType::Opportunity))
        {
            // Add the newly associated activity to the process on the current stage
            smmProcessInstance::insertActivityToStage(smmActivityParentLinkTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivityParentLinkTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called after the activation of <c>smmActivityParentLinkTable</c> data source
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivityParentLinkTable), FormDataSourceEventType::Activated)]
    public static void smmActivityParentLinkTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();

        FormTabPageControl tabProject = element.design().ControlName(formControlStr(smmActivities, tabProject)) as FormTabPageControl;
        FormDataSource projActivity_ds = element.dataSource(formDatasourceStr(smmActivities, ProjActivity));
        FormDataSource projActivityAssignment_ds = element.dataSource(formDataSourceStr(smmActivities, ProjActivityAssignment));
        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));

        smmActivities smmActivities = smmActivities_ds.cursor();
        if (smmActivities.RecId)
        {
            if (ProjActivity::find(smmActivities.ActivityNumber))
            {
                tabProject.visible(true);
            }
            else
            {
                tabProject.visible(false);
            }
        }
        else
        {
            tabProject.visible(false);
        }

        if (tabProject.isActivePage())
        {
            projActivity_ds.executeQuery();
            projActivityAssignment_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOutlook</Name>
				<Source><![CDATA[
    [SubscribesTo(tableStr(smmActivities), delegateStr(smmActivities, initFromOutlook))]
    public static void initFromOutlook(smmActivities _smmActivities, HcmWorker _worker)
    {
        OutlookUserSetup outlookUserSetup;

        outlookUserSetup = OutlookUserSetup::findByWorker(_worker.RecId);
        _smmActivities.ReminderMinutes = outlookUserSetup.ActivityReminderMinutes;

        if (_smmActivities.Category != smmActivityCategory::Task)
        {
            _smmActivities.StartDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(_smmActivities.startDateTime()), outlookUserSetup.ActivityStartTime, DateTimeUtil::getUserPreferredTimeZone());
            _smmActivities.EndDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(_smmActivities.endDateTime()), outlookUserSetup.ActivityEndTime, DateTimeUtil::getUserPreferredTimeZone());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMenuItemName</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(smmActivities), delegateStr(smmActivities, openMenuItemName))]
    public static void openMenuItemName(smmActivityParentRefTableId _refTableId, Common _common, Object _caller, boolean _create, FormDataSource _formDataSource)
    {
        str         menuItemName;
        switch (_refTableId)
        {
            case tableNum(SalesTable) :
                menuItemName = menuitemDisplayStr(SalesTable);
                break;

            case tableNum(smmBusRelTable) :
                menuItemName = menuitemDisplayStr(smmBusRelTable);
                break;

            case tableNum(CustTable) :
                menuItemName = menuitemDisplayStr(CustTable);
                break;

            case tableNum(VendTable) :
                menuItemName = menuitemDisplayStr(VendTable);
                break;

            case tableNum(PurchTable) :
                menuItemName = menuitemDisplayStr(PurchTable);
                break;

            case tableNum(ContactPerson) :
                menuItemName = menuitemDisplayStr(ContactPerson);
                break;

            case tableNum(SalesQuotationTable) :
                if (_common.(fieldNum(SalesQuotationTable, QuotationType)) == QuotationType::Sales)
                {
                    menuItemName = menuitemDisplayStr(SalesQuotationTable);
                }
                else
                {
                    menuItemName = menuitemDisplayStr(SalesQuotationProjTable);
                }
                break;

            case tableNum(SMAServiceOrderTable) :
                menuItemName = menuitemDisplayStr(SMAServiceOrderTable);
                break;

            case tableNum(ProjTable) :
                menuItemName = menuitemDisplayStr(ProjTable);
                break;

            case tableNum(smmCampaignTable) :
                menuItemName = menuitemDisplayStr(smmCampaignTable);
                break;

            case tableNum(smmTMCallListGroup) :
                menuItemName = menuitemDisplayStr(smmTMCallListGroup);
                break;

            case tableNum(smmLeadTable) :
                menuItemName = menuitemDisplayStr(smmLeadTable);
                break;

            case tableNum(smmOpportunityTable) :
                menuItemName = menuitemDisplayStr(smmOpportunityTable);
                break;

            case tableNum(SMAServiceOrderLine) :
                menuItemName = menuitemDisplayStr(SMAServiceOrderTable);
                break;
        }

        if (menuItemName)
        {
            smmUtility::openAndRefresh(menuItemName, _common, _caller, _create, _formDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method handles event when smmactivities data source query is being executed.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source event args</param>
    [FormDataSourceEventHandler(formDataSourceStr(smmActivities, smmActivities), FormDataSourceEventType::QueryExecuting)]
    public static void smmActivities_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun element = _sender.formRun();
        str qStr;

        smmActivitiesEventHandler::smmActivities_OnPreLinkActive(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_setControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method controls the visibility of the <c>outlookRecurrencePattern</c> control
    /// </summary>
    /// <param name="_args"></param>
    [PostHandlerFor(formStr(smmActivities), formMethodStr(smmActivities, setControls))]
    public static void smmActivities_Post_setControls(XppPrePostArgs _args)
    {
        FormRun element = _args.getThis();
        DictClass dictClass = new DictClass(classIdGet(element));
        FormDataSource smmActivities_ds = element.dataSource(formDataSourceStr(smmActivities, smmActivities));
        smmActivities smmActivities = smmActivities_ds.cursor();
        FormControl outlookRecurrencePattern = element.design().controlName(formControlStr(smmActivities, outlookRecurrencePattern)) as FormControl;

        switch (smmActivities.Category)
        {
            // Is activity an appointment or task
            case smmActivityCategory::Appointment,
                 smmActivityCategory::Task:
                    outlookRecurrencePattern.visible(true);
                break;

            // Is activity an action or Event
            case smmActivityCategory::Action,
                smmActivityCategory::Event:
                 outlookRecurrencePattern.visible(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_customizeOfficeIntegration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove entities from the Office Integration menu for form <c>smmActivities</c>
    /// </summary>
    [SubscribesTo(formStr(smmActivities), delegateStr(smmActivities, customizeOfficeIntegration))]
    public static void smmActivities_customizeOfficeIntegration(EventHandlerResult _res)
    {
        Set entitiesToExclude = new Set(Types::String);
        entitiesToExclude.add(dataentityviewstr(ProjCDSTaskEntity));
        _res.result(entitiesToExclude);
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_PreHandlerForInsertActivityCompletedLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the SourceTypeId and SourceRefRecId from the activity provided through the arguments.
    /// </summary>
    /// <param name="_args">The <c>XppPrePostArgs</c> values.</param>
    [PreHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, insertActivityCompletedCaseLog))]
    public static void smmActivities_PreHandlerForInsertActivityCompletedLog(XppPrePostArgs _args)
    {
        const str CaseLogParameter = '_caseLog';

        smmActivities activities = _args.getThis();
        if (activities.RecId && _args.getArg(CaseLogParameter) is CaseLog)
        {
            CaseLog caseLog = _args.getArg(CaseLogParameter);
            caseLog.SourceTypeId = smmSourceType::type2typeId(SmmSourceTypeList::Activity);
            caseLog.SourceRefRecId = activities.RecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>