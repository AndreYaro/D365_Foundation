<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveReplenishmentProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveReplenishmentProcessor</c> processes the wave replenishment step.
/// </summary>
internal class WHSWaveReplenishmentProcessor extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private WHSWaveId                   waveId;
    private WHSReleaseToWarehouseId     releaseToWarehouseId;
    private WHSWaveExecutionID          waveExecutionId;
    private WHSWaveStepCode             waveStepCode;
    private WHSWaveLockManager          whsWaveLockManager;
    private WHSWaveMethodStatusHandler  waveMethodStatusHandler;
    private WHSWaveStepController       lockedWaveStepController;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        waveId,
        releaseToWarehouseId,
        waveExecutionId,
        waveStepCode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWaveReplenishmentProcessor construct()
    {
        WHSWaveReplenishmentProcessor waveReplenishmentProcessor = new WHSWaveReplenishmentProcessor();

        return waveReplenishmentProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseToWarehouseId</Name>
				<Source><![CDATA[
    public WHSReleaseToWarehouseId parmReleaseToWarehouseId(WHSReleaseToWarehouseId _releaseToWarehouseId = releaseToWarehouseId)
    {
        releaseToWarehouseId = _releaseToWarehouseId;

        return releaseToWarehouseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    public WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;

        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    public WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveStepCode</Name>
				<Source><![CDATA[
    public WHSWaveStepCode parmWaveStepCode(WHSWaveStepCode _waveStepCode = waveStepCode)
    {
        waveStepCode = _waveStepCode;

        return waveStepCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostEngine</Name>
				<Source><![CDATA[
    private void initFromPostEngine(WHSPostEngine _postEngine)
    {
        this.parmWaveId(_postEngine.parmWaveTable().WaveId);
        this.parmReleaseToWarehouseId(_postEngine.parmReleaseToWarehouseId());
        this.parmWaveExecutionId(_postEngine.parmWaveExecutionId());
        this.parmWaveStepCode(_postEngine.parmWaveTemplateLine().WaveStepCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPostEngine</Name>
				<Source><![CDATA[
    public static WHSWaveReplenishmentProcessor newFromPostEngine(WHSPostEngine _postEngine)
    {
        WHSWaveReplenishmentProcessor waveReplenishmentProcessor = WHSWaveReplenishmentProcessor::construct();
        waveReplenishmentProcessor.initFromPostEngine(_postEngine);

        return waveReplenishmentProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process replenishment step for the currently running wave.
    /// </summary>
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            UserConnection                                  controllerConn;
            WHSInstrumentationWaveProcessingPerformanceTask perfTask;
        
            try
            {
                var waveTable = WHSWaveTable::find(waveId);
                perfTask = WHSInstrumentationWaveProcessingPerformanceTask::newReplenishmentProcessor(waveTable, waveExecutionId, funcName());

                // A user connection is used for the control record so that we can reduce the transaction scope for the actual processing of pending replenishments
                controllerConn = new UserConnection();
                controllerConn.ttsbegin();

                // Insert control record
                lockedWaveStepController = WHSWaveStepController::createAndLockControlRecord(waveId, waveExecutionId, methodStr(WHSPostEngineBase, replenish), waveTable.InventLocationId, controllerConn);

                // Attempt to cleanup waves that have errored and not cleaned themselves up.
                WHSWaveProcessingDataCleanup::identifyAndCleanupErroredWavesForWarehouse(waveTable.inventLocationid, waveTable.waveId, waveExecutionId);

                ttsbegin;

                using (var waveLockManager = WHSWaveLockManager::newStandard())
                {
                    WHSReplenishmentTemplateLine  templateLine;
                    using (var workCreate = new WHSWorkCreateReplenishment(templateLine, waveTable.getWorkBuildId()))
                    {
                        if (WHSParameters::find().WaveProgressLog)
                        {
                            waveMethodStatusHandler = WHSWaveMethodStatusHandler::newWaveMethodStatusHandler(waveTable.waveId, methodStr(WHSPostEngineBase, replenish));
                        }

                        workCreate.initFromWaveReplenishmentProcessor(waveId, releaseToWarehouseId, waveExecutionId, whsWaveLockManager, waveMethodStatusHandler);
                        workCreate.runDemandReplen(waveStepCode);
                    }
                }

                ttscommit;

                // Delete the control record which indicates we have safely ended this cycle of replenishment
                this.deleteControlRecord();

                controllerConn.ttscommit();
            }
            catch
            {
                // it's okay to have a general catch here because we catch all exceptions (we assume tts level 0), we abort the userConnection,
                //mark the wave as error, and then throw  meaning that we leave the handling of the exception to the caller, we are not ending the method gracefully.

                controllerConn.ttsabort();
                // Create a wave error indicator to signal that other replenishment tasks should stop and let the post replenishment task call into wave cleanup.
                this.createWaveErrorIndicator();
                throw error(strFmt("@WAX:WaveReplenishmentError", waveId));
            }
            finally
            {
                controllerConn.finalize();
   
                if (perfTask != null)
                {
                    perfTask.endTask();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteControlRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the locked control record
    /// </summary>
    /// <remarks>
    /// The control record should already be selected with a pessimistic lock.
    /// This method should be called withing transaction scope of the select for this record.
    /// </remarks>
    private void deleteControlRecord()
    {
        if (lockedWaveStepController.RecId)
        {
            lockedWaveStepController.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveErrorIndicator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWaveErroredIndicator</c> for the currently running wave to signal the error for parallel running tasks of this wave.
    /// </summary>
    private void createWaveErrorIndicator()
    {
        WHSWaveErroredIndicator::createRecordIfUnique(waveId, waveExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:WaveReplenishmentClassDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final BatchInfo batchInfo()
    {
        BatchInfo ret = super();

        ret.parmRetryable(false);
        ret.parmRetriesOnFailure(0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsWaveExecute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSWaveExecute);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>