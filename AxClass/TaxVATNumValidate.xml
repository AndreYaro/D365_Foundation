<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVATNumValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxVATNumValidate</c> class is the parent class for validating a Value Added Tax (VAT) number.
/// </summary>
/// <remarks>
///    Because VAT numbers are unique for each country/region, a various number of classes derive from this class (one class for each country/region). In the derived classes, each country/region can make
///    their own specific validation, by overwriting the <c>ValidateVATNum</c> method.
/// </remarks>
public class TaxVATNumValidate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAlpha</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true if the specified parameter is alphabetic.
    /// </summary>
    /// <param name="_testStr">
    ///    A string to test.
    /// </param>
    /// <returns>
    ///    true if the specified parameter is alphabetic; otherwise, false.
    /// </returns>
    boolean isAlpha(str _testStr)
    {
        boolean ok;
        ;
        ok = _testStr == strrem(stralpha(_testStr), '0123456789');

        if (!ok)
        {
            warning("@SYS84772");
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLengthOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true if the length of Value Added Tax (VAT) number is correct.
    /// </summary>
    /// <param name="_vatNum">
    ///     The Value Added Tax (Tax) Number.
    /// </param>
    /// <param name="_strLen">
    ///     The allowed length for VAT Number.
    /// </param>
    /// <param name="_fromLen">
    ///     The minimum lenght for the VAT Number.
    /// </param>
    /// <param name="_skipError">
    ///     The error is skipped if set to true.
    /// </param>
    /// <returns>
    ///     Returns true if the length of the VATNum is correct. Returns false otherwise.
    /// </returns>

    boolean isLengthOk(VATNum _vatNum,
                       int _strLen,
                       int _fromLen = 0,
                       int _skipError = 0)
    {
        boolean ok;
        ;

        if (!_fromLen)
        {
            ok = strlen(_vatNum) == _strLen;
        }
        else
        {
            ok = (strlen(_vatNum) >= _strLen) && (strlen(_vatNum) <= _fromLen);
        }

        if (! ok && ! _skipError)
        {
            warning(strfmt("@SYS81617",int2str(_strlen) ,int2str(strlen(_vatNum)) ) );
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumeric</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true if the _vatNum is numeric.
    /// </summary>
    /// <param name="_vatNum">
    ///     The Value Added Tax (VAT) Number.
    /// </param>
    /// <param name="_strLen">
    ///     The allowed length for VAT Number.
    /// </param>
    /// <param name="_fromLen">
    ///     The minimum lenght for the VAT Number.
    /// </param>
    /// <returns>
    ///     Returns true if the VAT Number is numeric. Returns false otherwise.
    /// </returns>

    boolean isNumeric(VATNum _vatNum,
                      int _strLen,
                      int _fromLen = 0)
    {
        boolean ok = true;
        ;

        ok = (strlen(_vatNum) == strlen(strkeep(_vatNum,'1234567890')));

        if (! ok)
        {
            warning("@SYS81619");
        }
        else
        {
            ok = this.isLengthOk(_vatNum, _strLen, _fromLen);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidChars</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the specified string does not contain spaces or special characters (for example, *-$+#%&amp;).
    /// </summary>
    /// <param name="_testStr">
    ///    The string to validate.
    /// </param>
    /// <returns>
    ///    true if the string does not contain spaces or special characters; otherwise, false.
    /// </returns>
    boolean isValidChars(str _testStr)
    {
        boolean ok;
        ;

        ok = (strlen(_testStr) == strlen(stralpha(_testStr)));

        if (!ok)
        {
            warning("@SYS81620");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the Value Added Tax (VAT) Number.
    /// </summary>
    /// <param name="_vatNum">
    ///     The VAT Number.
    /// </param>
    /// <param name="_countryRegionId">
    ///    The ID used to determine the ISO code for the country/region, (e.g. DK = Denmark, UK = United
    ///    Kingdom). The new instance of <c>TaxVATNumValidate</c> is created based upon the ISO code.
    ///    Optional; the default value is an empty string.
    /// </param>
    /// <returns>
    ///     Returns true if the VATNum is valid.
    /// </returns>

    boolean validateVATNum(VATNum                   _vatNum,
                           LogisticsAddressCountryRegionId   _countryRegionId = '')
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the validity of the Value Added Tax (VAT) Number.
    /// </summary>
    /// <param name="_vatNum">
    ///     The VAT Number.
    /// </param>
    /// <param name="_countryRegionId">
    ///    The ID used to determine the ISO code for the country/region, (e.g. DK = Denmark, UK = United
    ///    Kingdom). The new instance of <c>TaxVATNumValidate</c> is created based upon the ISO code.
    ///    Optional; the default value is an empty string.
    /// </param>
    /// <returns>
    ///     Returns true if the VAT Number is valid. Returns false otherwise.
    /// </returns>
    static boolean checkVATNum(VATNum _vatNum, LogisticsAddressCountryRegionId _countryRegionId = '')
    {
        TaxVATNumValidate taxVATNumValidate = TaxVATNumValidate::construct(_countryRegionId);
        #ISOCountryRegionCodesEuro_W

        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#EuropeanUnionCountries)
            || SysCountryRegionCode::isLegalEntityInCountryRegion(#EuropeanFreeTradeAssociationCountries))
        {
            if (_countryRegionId && isConfigurationkeyEnabled(configurationKeyNum(foreignTrade))
                && (conFind(#EuropeanUnionCountries, LogisticsAddressCountryRegion::find(_countryRegionId).ISOcode)
                  || conFind(#EuropeanFreeTradeAssociationCountries, LogisticsAddressCountryRegion::find(_countryRegionId).ISOcode)))
            {
                TaxCode taxCode = TaxCountryRegionParameters::find(_countryRegionId).SalesTaxCode;

                if (!taxCode)
                {
                    checkFailed(strfmt("@SYS58808", _countryRegionId));
                }
                else
                {
                    _vatNum = TaxVATNumTable::stripVATNum(_vatNum, taxCode);
                }
            }
        }

        return taxVATNumValidate.validateVATNum(_vatNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of <see cref="T:TaxVATNumValidate" /> for the specified country/region.
    /// </summary>
    /// <param name="_countryRegionId">
    ///    The ID used to determine the ISO code for the country/region, (e.g. DK = Denmark, UK = United
    ///    Kingdom). The new instance of <c>TaxVATNumValidate</c> is created based upon the ISO code.
    ///    Optional; the default value is an empty string.
    /// </param>
    /// <returns>
    ///    The new instance of <c>TaxVATNumValidate</c>.
    /// </returns>
    static TaxVATNumValidate construct(LogisticsAddressCountryRegionId   _countryRegionId = '')
    {
        #isoCountryRegionCodes

        TaxVATNumValidate       taxVATNumValidate;
        LogisticsAddressCountryRegionId  countryRegionId = _countryRegionId ? _countryRegionId : CompanyInfo::find().postalAddress().CountryRegionId;
        LogisticsAddressCountryRegion    countryRegion   = LogisticsAddressCountryRegion::find(countryRegionId);
        ;
        if (TaxCountryRegionParameters::find(countryRegionId).CheckTaxExemptNumber)
        {
            switch (countryRegion.isOcode)
            {
                case #isoAT :
                    taxVATNumValidate = new TaxVATnumValidateAT();
                    break;

                case #isoAU :
                    taxVATNumValidate = new TaxVATNumValidateAU();
                    break;

                case #isoBE :
                    taxVATNumValidate = new TaxVATNumValidateBE();
                    break;

                case #isoDK :
                    taxVATNumValidate = new TaxVATnumValidateDK();
                break;

                case #isoFI :
                    taxVATNumValidate = new TaxVATnumValidateFI();
                    break;

                case #isoFR :
                    taxVATNumValidate = new TaxVATnumValidateFR();
                    break;

                case #isoGB :
                    taxVATNumValidate = new TaxVATnumValidateGB();
                    break;

                case #isoDE :
                    taxVATNumValidate = new TaxVATnumValidateDE();
                    break;

                case 'EL', #isoGR :
                    taxVATNumValidate = new TaxVATnumValidateEL();
                    break;

                case #isoES :
                    taxVATNumValidate = new TaxVATNumValidateES();
                    break;

                case #isoIE :
                    taxVATNumValidate = new TaxVATnumValidateIE();
                    break;

                case #isoIT :
                    taxVATNumValidate = new TaxVATnumValidateIT();
                    break;

                case #isoLU :
                    taxVATNumValidate = new TaxVATnumValidateLU();
                    break;

                case #isoNL :
                    taxVATNumValidate = new TaxVATnumValidateNL();
                    break;

                case #isoPT :
                    taxVATNumValidate = new TaxVATnumValidatePT();
                    break;

                case #isoSE :
                    taxVATNumValidate = new TaxVATnumValidateSE();
                    break;

                case #isoCH :
                    taxVATNumValidate = new TaxVATNumValidateCH();
                    break;

                default:
                    taxVATNumValidate = new TaxVATNumValidate();
                break;
            }
        }
        else
        {
            taxVATNumValidate = new TaxVATNumValidate();
        }

        return taxVATNumValidate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>