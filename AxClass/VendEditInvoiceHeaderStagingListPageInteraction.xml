<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendEditInvoiceHeaderStagingListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to control the enable status of buttons on <c>VendEditInvoiceHeaderStagingListPage</c> form.
/// </summary>
class VendEditInvoiceHeaderStagingListPageInteraction extends SysListPageInteractionBase
{
    VendEditInvoiceHeaderStagingInteractionHelper vendEditInvoiceHeaderStagingInteractionHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active record from form data source.
    /// </summary>
    /// <returns>
    /// The buffer of <c>VendorInvoiceHeaderStaging</c>
    /// </returns>
    private VendorInvoiceHeaderStaging currentDocument()
    {
        return this.listPage().activeRecord(queryDataSourceStr(VendEditInvoiceHeaderStagingListPage, VendorInvoiceHeaderStaging));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query by adding the required ranges
    /// </summary>
    /// <param name = "_query">The form datasource query </param>
    public void initializeQuery(Query _query)
    {
        QueryBuildDataSource qbdsHeaderStaging, qbdsStagingValidationLog, qbdsDefGrpExecution, qbdsDefGrp, qbdsDefGrpDataArea;
        QueryBuildRange qbrTransferStatus, qbrEntityName, qbrEntity;
        Range statusRange;
        DMFEntity entity = DMFEntity::findFirstByTableId(tableNum(VendorInvoiceHeaderEntity));
        
        super(_query);
        
        statusRange = queryValue(enum2Str(DMFTransferStatus::Error));
        statusRange = queryRangeConcat(statusRange, enum2Str(DMFTransferStatus::Duplicate));
        statusRange = queryRangeConcat(statusRange, enum2Str(DMFTransferStatus::Validated));
        
        qbdsHeaderStaging = _query.dataSourceName(queryDataSourceStr(VendEditInvoiceHeaderStagingListPage, VendorInvoiceHeaderStaging));
        qbrTransferStatus = qbdsHeaderStaging.addRange(fieldNum(VendorInvoiceHeaderStaging, TransferStatus));
        qbrTransferStatus.value(statusRange);
        qbrTransferStatus.status(RangeStatus::Hidden);

        qbdsStagingValidationLog = _query.dataSourceName(queryDataSourceStr(VendEditInvoiceHeaderStagingListPage, DMFStagingValidationLog));
        qbrEntityName = qbdsStagingValidationLog.addRange(fieldNum(DMFStagingValidationLog, StagingTableName));
        qbrEntityName.value(queryValue(entity.EntityTable));
        qbrEntityName.status(RangeStatus::Hidden);

        qbdsDefGrpExecution = _query.dataSourceName(queryDataSourceStr(VendEditInvoiceHeaderStagingListPage, DMFDefinitionGroupExecution));
        qbrEntity = qbdsDefGrpExecution.addRange(fieldNum(DMFDefinitionGroupExecution, Entity));
        qbrEntity.value(queryValue(entity.EntityName));
        qbrEntity.status(RangeStatus::Hidden);

        // Apply definition group company filter
        qbdsDefGrp = qbdsHeaderStaging.addDataSource(tableNum(DMFDefinitionGroup));
        qbdsDefGrp.joinMode(JoinMode::ExistsJoin);
        qbdsDefGrp.addLink(fieldNum(VendorInvoiceHeaderStaging, DefinitionGroup),
            fieldNum(DMFDefinitionGroup, DefinitionGroupName));

        qbdsDefGrpDataArea = qbdsDefGrp.addDataSource(tableNum(DMFDefinitionGroupDataArea));
        qbdsDefGrpDataArea.joinMode(JoinMode::ExistsJoin);
        qbdsDefGrpDataArea.relations(true);
        qbdsDefGrpDataArea.addRange(fieldNum(DMFDefinitionGroupDataArea,DataArea)).value(strFmt('((%1.%2 == "%3") || (%1.%2 == "%4"))',
                                                                                    qbdsDefGrpDataArea.name(),
                                                                                    fieldStr(DMFDefinitionGroupDataArea,DataArea),
                                                                                    curExt(),
                                                                                    ''));
        Args callerArgs = this.listPage().formRun().args();

        if (callerArgs && callerArgs.menuItemName() == menuItemDisplayStr(VendInvoiceAutomationBIHeaderStagingListPage)
                && callerArgs.parmEnumType() == enumNum(VendInvoiceAutomationBIGraph))
        {
            VendInvoiceAutomationBIReportHandler::buildQueryForInvoicesFailedToImport(_query, callerArgs.parmObject() as PBIReportSelectedData, callerArgs.parmEnum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status of buttons on list page form.
    /// </summary>
    protected void setButtonEnabled()
    {
        #SysSystemDefinedButtons

        VendorInvoiceHeaderStaging  document = this.currentDocument();

        vendEditInvoiceHeaderStagingInteractionHelper = vendEditInvoiceHeaderStagingInteractionHelper::construct(document);
        vendEditInvoiceHeaderStagingInteractionHelper.initActions();

        this.listPage().actionPaneControlEnabled(formControlStr(VendEditInvoiceHeaderStagingListPage, VendEditInvoiceHeaderStaging), vendEditInvoiceHeaderStagingInteractionHelper.getButtonEditEnabled());
        this.listPage().actionPaneControlVisible(#SystemDefinedAttachButton, false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>