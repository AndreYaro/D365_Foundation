<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanInstrumentationKanbanJobActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanInstrumentationKanbanJobActivities</c> class provides activities for processing kanban jobs.
/// </summary>
internal final class KanbanInstrumentationKanbanJobActivities
{
    private const str ActivityNamePrefix            = 'KanbanJob.';
    
    private const str StartKanbanJob                = 'StartKanbanJob';
    private const str ScheduleKanbanJob             = 'ScheduleKanbanJob';
    private const str CompleteKanbanJob             = 'CompleteKanbanJob';
    private const str PrepareKanbanJob              = 'PrepareKanbanJob';
    private const str ResetKanbanJob                = 'ResetKanbanJob';
    private const str ResetKanbanJobToNotPlanned    = 'ResetKanbanJobToNotPlanned';
    private const str CustomStatusUpdate            = 'CustomStatusUpdate';

    private KanbanInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(KanbanInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    public static KanbanInstrumentationKanbanJobActivities newFromLogger(KanbanInstrumentationLogger _logger)
    {
        return new KanbanInstrumentationKanbanJobActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runKanbanJobStatusUpdate</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext runKanbanJobStatusUpdate(LeanKanbanJobStatus _kanbanJobStatus, boolean _isReset)
    {
        if (_isReset)
        {
            switch (_kanbanJobStatus)
            {
                case LeanKanbanJobStatus::NotPlanned:
                    return this.resetKanbanJobToNotPlanned();
                
                default:
                    return this.resetKanbanJob();
            }
        }

        switch (_kanbanJobStatus)
        {
            case LeanKanbanJobStatus::InProgress:
                return this.startKanbanJob();
            
            case LeanKanbanJobStatus::Completed:
                return this.completeKanbanJob();

            case LeanKanbanJobStatus::Prepared:
                return this.prepareKanbanJob();
        }

        return this.customStatusUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>startKanbanJob</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext startKanbanJob()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + StartKanbanJob);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleKanbanJob</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext scheduleKanbanJob()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + ScheduleKanbanJob);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanJob</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resetKanbanJob()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + ResetKanbanJob);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanJobToNotPlanned</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext resetKanbanJobToNotPlanned()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + ResetKanbanJobToNotPlanned);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeKanbanJob</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext completeKanbanJob()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + CompleteKanbanJob);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareKanbanJob</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext prepareKanbanJob()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + PrepareKanbanJob);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>customStatusUpdate</Name>
				<Source><![CDATA[
    public SysInstrumentationActivityContext customStatusUpdate()
    {
        SysInstrumentationActivity activity = logger.activity(ActivityNamePrefix + CustomStatusUpdate);
               
        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>