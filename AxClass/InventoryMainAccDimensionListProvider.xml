<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryMainAccDimensionListProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventoryMainAccDimensionListProvider</c> class is the main account dimension list provider
///    for documented monetary amounts that are allocated to the inventory items.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(MainAccountDimensionListProviderType), MainAccountDimensionListProviderType::Inventory)
]
class InventoryMainAccDimensionListProvider extends MainAccountDimensionListProvider
{
    // <GEERU>
    #isoCountryRegionCodes
    // </GEERU>

    InventTable             inventTable;
    EcoResCategory          procurementCategory;

    CustVendTable           invoiceAccount;

    TaxGroup                taxGroup;

    InventDim               inventDim_RU;

    // <GBR>
    boolean                 isCancellingSalesComplInvoiceLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    // </GBR>

    /// <summary>
    ///    Initializes the dimensions of the main account dimension list provider.
    /// </summary>
    protected void initValues()
    {
        Object                                  sourceDocumentLineItem = accountingRUle.parmSourceDocumentLineItem();
        Object                                  parentSourceDocumentLineItem;
        Object                                  sourceDocument;
        SourceDocumentLineItemIProduct          iProduct;
        SourceDocumentIParty                    iParty;
        SourceDocumentLineItemITax              iTax;
        // <GEERU>
        SourceDocumentLineItemIInventory        iInventory;
        // </GEERU>
        PurchOrderLineSourceDocumentLineItem    iPurchOrderLine;
        ProductReceiptSourceDocumentLineItem    iProductReceiptLine;
        VendorInvoiceLineSourceDocLineItem      iVendorInvoiceLine;
        PurchReqSourceDocLineItem               iPurchReqLine;

        // <GBR>
        SalesComplementaryInvSourceDocLine      salesComplInvSourceDocLine;
        // </GBR>

        if (sourceDocumentLineItem is SourceDocumentLineItemIProduct)
        {
            iProduct            = sourceDocumentLineItem as SourceDocumentLineItemIProduct;
            inventTable         = iProduct.parmInventTable();
            procurementCategory = iProduct.parmCategory();

            // <GBR>
            if (BrazilParameters::isEnabled() && CustParameters::isCancelAlternativePostingProfileEnabled() && sourceDocumentLineItem is SalesComplementaryInvSourceDocLine)
            {
                salesComplInvSourceDocLine = sourceDocumentLineItem;
                taxGroup = salesComplInvSourceDocLine.parmSalesTaxGroup();

                isCancellingSalesComplInvoiceLine = salesComplInvSourceDocLine.isCancelling();
            }
            // </GBR>
        }
        else
        {
            parentSourceDocumentLineItem = accountingRUle.parmSourceDocumentLineItem().parmParentSourceDocumentLineItem();

            // <GBR>
            if (BrazilParameters::isEnabled()
                && accountingRUle is AccJourRuleVndPymntReqExpProdExtPriceTax
                && parentSourceDocumentLineItem is ChargeSourceDocLineItem)
            {
                parentSourceDocumentLineItem = parentSourceDocumentLineItem.parmParentSourceDocumentLineItem();
            }
            // </GBR>

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && parentSourceDocumentLineItem is SourceDocumentLineItemITaxMeasure)
            {
                parentSourceDocumentLineItem = parentSourceDocumentLineItem.parmParentSourceDocumentLineItem();
            }
            // </GTE>

            if (parentSourceDocumentLineItem &&
                parentSourceDocumentLineItem is SourceDocumentLineItemIProduct)
            {
                iProduct            = parentSourceDocumentLineItem as SourceDocumentLineItemIProduct;
                inventTable         = iProduct.parmInventTable();
                procurementCategory = iProduct.parmCategory();
            }
        }

        if (sourceDocumentLineItem is SourceDocumentIParty)
        {
            iParty            = sourceDocumentLineItem as SourceDocumentIParty;
            invoiceAccount    = iParty.parmPartyAccount();
        }
        else
        {
            sourceDocument = sourceDocumentLineItem.parmSourceDocument();
            if (sourceDocument is SourceDocumentIParty)
            {
                iParty            = sourceDocument as SourceDocumentIParty;
                invoiceAccount    = iParty.parmPartyAccount();
            }
        }

        if (sourceDocumentLineItem is SourceDocumentLineItemITax)
        {
            iTax            = sourceDocumentLineItem as SourceDocumentLineItemITax;
            taxGroup        = iTax.parmTaxGroup();
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && sourceDocumentLineItem is SourceDocumentLineItemIInventory)
        {
            iInventory      = sourceDocumentLineItem as SourceDocumentLineItemIInventory;
            inventDim_RU    = InventDim::find(iInventory.parmInventoryDimensionId());
        }
        // </GEERU>

        if (sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
        {
            iPurchOrderLine = sourceDocumentLineItem as PurchOrderLineSourceDocumentLineItem;
            taxGroup        = iPurchOrderLine.parmTaxGroup();
        }

        if (sourceDocumentLineItem is ProductReceiptSourceDocumentLineItem)
        {
            iProductReceiptLine = sourceDocumentLineItem as ProductReceiptSourceDocumentLineItem;
            taxGroup        = iProductReceiptLine.parmTaxGroup();
        }

        if (sourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            iVendorInvoiceLine = sourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
            taxGroup        = iVendorInvoiceLine.parmTaxGroup();
        }

        if (sourceDocumentLineItem is PurchReqSourceDocLineItem)
        {
            iPurchReqLine = sourceDocumentLineItem as PurchReqSourceDocLineItem;
            taxGroup      = iPurchReqLine.parmTaxGroup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension default account.
    /// </summary>
    /// <returns>The ledger dimension default account.</returns>
    [Replaceable]
    protected LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(
                        InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(accountingRUle.parmLedgerPostingType()),
                        inventDim_RU));
        }
        // </GEERU>

        changecompany(accountingRule.parmSourceDocumentLineItem().parmLegalEntityDataAreaId())
        {
            // <GBR>
            if (CustParameters::isCancelAlternativePostingProfileEnabled() && isCancellingSalesComplInvoiceLine)
            {
                return InventPosting::accountItemLedgerDimensionFromParameters(
                    this.buildAccountItemLedgerDimensionParameter(InventAccountType::SalesCancel));
            }
            // </GBR>

            LedgerPostingType ledgerPostingType = accountingRule.parmLedgerPostingType();
            LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = InventPosting::accountItemLedgerDimensionFromParameters(
                this.buildAccountItemLedgerDimensionParameter(InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountType(ledgerPostingType)));

            this.recordInventAccountTypeMissMainAccountMessage(ledgerDimensionDefaultAccount, ledgerPostingType);
            return ledgerDimensionDefaultAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAccountItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting account ledger dimension for an item.
    /// </summary>
    /// <param name="_inventAccountType">An inventory account type.</param>
    /// <param name="_inventDim">An inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingAccountItemLedgerDimensionParameters buildAccountItemLedgerDimensionParameter(InventAccountType _inventAccountType, InventDim _inventDim = null)
    {
        return InventPostingAccountItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            inventTable.ItemId,
            inventTable.itemGroupId(),
            procurementCategory.RecId,
            invoiceAccount.AccountNum,
            invoiceAccount.GroupId,
            taxGroup,
            _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMainAccountDimensionList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the main account dimension list.
    /// </summary>
    protected void populateMainAccountDimensionList()
    {
        this.addToMainAccDimensionList(this.ledgerDimensionDefaultAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType2InventAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a ledger posting type to an inventory account type.
    /// </summary>
    /// <param name="_ledgerPostingType">
    ///    The ledger posting type.
    /// </param>
    /// <returns>
    ///    The converted ledger posting type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The ledger posting type cannot be converted.
    /// </exception>
    public static InventAccountType ledgerPostingType2InventAccountType(LedgerPostingType _ledgerPostingType)
    {
        Map ledgerPostingType2InventAccountTypeMap = new Map(Types::Enum, Types::Enum);

        InventoryMainAccDimensionListProvider::ledgerPostingType2InventAccountTypeNoThrow(_ledgerPostingType, ledgerPostingType2InventAccountTypeMap);

        if (!ledgerPostingType2InventAccountTypeMap.exists(_ledgerPostingType))
        {
            throw error(strFmt("@SYS12580",_ledgerPostingType));
        }

        return ledgerPostingType2InventAccountTypeMap.lookup(_ledgerPostingType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType2InventAccountTypeNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a (<c>LedgerPostingType</c>, <c>InventAccountType</c>)-pair to the passed in map based on the ledger posting type.
    /// </summary>
    /// <param name = "_ledgerPostingType">The ledger posting type.</param>
    /// <param name = "_ledgerPostingType2InventAccountTypeMap">A <c>Map</c> instance.</param>
    protected static void ledgerPostingType2InventAccountTypeNoThrow(LedgerPostingType _ledgerPostingType, Map _ledgerPostingType2InventAccountTypeMap)
    {
        switch (_ledgerPostingType)
        {
            case LedgerPostingType::PurchPckSlpPurchaseOffsetAccount :
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchPckSlpPurchaseOffsetAccount, 
                                                               InventAccountType::PurchPackingSlipPurchaseOffsetAccount);
                break;           

            case LedgerPostingType::PurchPckSlp :
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchPckSlp,
                                                               InventAccountType::PurchPackingSlip);
                break;

            case LedgerPostingType::PurchOffsetAccountPckSlp :
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchOffsetAccountPckSlp,
                                                               InventAccountType::PurchPackingSlipOffsetAccount);
                break;

            case LedgerPostingType::PurchReceipt :
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchReceipt,
                                                               InventAccountType::PurchReceipt);
                break;

            case LedgerPostingType::PurchReceiptFixedAsset:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchReceiptFixedAsset,
                                                               InventAccountType::PurchReceiptFixedAsset);
                break;

            case LedgerPostingType::PurchConsump:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchConsump,
                                                               InventAccountType::PurchConsump);
                break;

            case LedgerPostingType::PurchDisc:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchDisc,
                                                               InventAccountType::PurchDisc);
                break;

            case LedgerPostingType::PurchStdProfit:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchStdProfit,
                                                               InventAccountType::PurchStdProfit);
                break;

            case LedgerPostingType::PurchStdLoss:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchStdLoss,
                                                               InventAccountType::PurchStdLoss);
                break;

            case LedgerPostingType::PurchStdOffsetAccount:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchStdOffsetAccount,
                                                               InventAccountType::PurchStdOffsetAccount);
                break;

            case LedgerPostingType::InventStdProfit:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventStdProfit,
                                                               InventAccountType::InventStdProfit);
                break;

            case LedgerPostingType::InventStdLoss:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventStdLoss,
                                                               InventAccountType::InventStdLoss);
                break;

            case LedgerPostingType::InventIssue:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventIssue,
                                                               InventAccountType::InventIssue);
                break;

            case LedgerPostingType::InventIssueFixedAsset:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventIssueFixedAsset,
                                                               InventAccountType::InventIssueFixedAsset);
                break;

            case LedgerPostingType::InventLoss:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventLoss,
                                                               InventAccountType::InventLoss);
                break;

            case LedgerPostingType::InventReceipt:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventReceipt,
                                                               InventAccountType::InventReceipt);
                break;

            case LedgerPostingType::InventProfit:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventProfit,
                                                               InventAccountType::InventProfit);
                break;

            case LedgerPostingType::ProdPicklist:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdPicklist,
                                                               InventAccountType::ProdPicklist);
                break;

            case LedgerPostingType::ProdPicklistOffsetAccount:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdPicklistOffsetAccount,
                                                               InventAccountType::ProdPicklistOffsetAccount);
                break;

            case LedgerPostingType::ProdReportFinished:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdReportFinished,
                                                               InventAccountType::ProdReportFinished);
                break;

            case LedgerPostingType::ProdReportFinishedOffsetAccount:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdReportFinishedOffsetAccount,
                                                               InventAccountType::ProdReportFinishedOffsetAccount);
                break;

            case LedgerPostingType::ProdIssue:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdIssue,
                                                               InventAccountType::ProdIssue);
                break;

            case LedgerPostingType::ProdIssueOffsetAccount:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdIssueOffsetAccount,
                                                               InventAccountType::ProdIssueOffsetAccount);
                break;

            case LedgerPostingType::ProdReceipt:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdReceipt,
                                                               InventAccountType::ProdReceipt);
                break;

            case LedgerPostingType::ProdReceiptOffsetAccount:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdReceiptOffsetAccount,
                                                               InventAccountType::ProdReceiptOffsetAccount);
                break;

            case LedgerPostingType::SalesPackingSlip:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesPackingSlip,
                                                               InventAccountType::SalesPackingSlip);
                break;

            case LedgerPostingType::SalesOffsetAccountPackingSlip:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesOffsetAccountPackingSlip,
                                                               InventAccountType::SalesPackingSlipOffsetAccount);
                break;

            case LedgerPostingType::SalesIssue:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesIssue,
                                                               InventAccountType::SalesIssue);
                break;

            case LedgerPostingType::SalesConsump:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesConsump,
                                                               InventAccountType::SalesConsump);
                break;

            case LedgerPostingType::SalesRevenue:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesRevenue,
                                                               InventAccountType::SalesRevenue);
                break;

            case LedgerPostingType::SalesPckSlipRevenue:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesPckSlipRevenue,
                                                               InventAccountType::SalesPckSlipRevenue);
                break;

            case LedgerPostingType::SalesPckSlipRevenueOffsetAccount:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesPckSlipRevenueOffsetAccount,
                                                               InventAccountType::SalesPckSlipRevenueOffsetAccount);
                break;

            case LedgerPostingType::SalesDisc:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesDisc,
                                                               InventAccountType::SalesDisc);
                break;

            case LedgerPostingType::SalesCommission:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesCommission,
                                                               InventAccountType::SalesCommission);
                break;

            case LedgerPostingType::SalesOffsetAccountCommission:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesOffsetAccountCommission,
                                                               InventAccountType::SalesCommissionOffsetAccount);
                break;

            case LedgerPostingType::PurchStdCostPurchasePriceVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchStdCostPurchasePriceVariance,
                                                               InventAccountType::PurchStdCostPurchasePriceVariance);
                break;

            case LedgerPostingType::PurchExpense:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchExpense,
                                                               InventAccountType::PurchExpense);
                break;

            case LedgerPostingType::PurchReq:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchReq,
                                                               InventAccountType::PurchExpense);
                break;

            case LedgerPostingType::ProdStdCostProductionVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdStdCostProductionVariance,
                                                               InventAccountType::ProdStdCostProductionVariance);
                break;

            case LedgerPostingType::InventStdCostRevaluation:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventStdCostRevaluation,
                                                               InventAccountType::InventStdCostRevaluation);
                break;

            case LedgerPostingType::InventStdCostChangeVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventStdCostChangeVariance,
                                                               InventAccountType::InventStdCostChangeVariance);
                break;

            case LedgerPostingType::InventInterUnitPayable:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventInterUnitPayable,
                                                               InventAccountType::InventInterUnitPayable);
                break;

            case LedgerPostingType::InventInterUnitReceivable:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventInterUnitReceivable,
                                                               InventAccountType::InventInterUnitReceivable);
                break;

            case LedgerPostingType::InventStdCostRoundingVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::InventStdCostRoundingVariance,
                                                               InventAccountType::InventStdCostRoundingVariance);
                break;

            case LedgerPostingType::ProdStdCostLotSizeVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdStdCostLotSizeVariance,
                                                               InventAccountType::ProdStdCostLotSizeVariance);
                break;

            case LedgerPostingType::ProdStdCostQuantityVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdStdCostQuantityVariance,
                                                               InventAccountType::ProdStdCostQuantityVariance);
                break;

            case LedgerPostingType::ProdStdCostSubstitutionVariance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::ProdStdCostSubstitutionVariance,
                                                               InventAccountType::ProdStdCostSubstitutionVariance);
                break;

            case LedgerPostingType::PurchAdvance,
                LedgerPostingType::PurchAdvanceApplication:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchAdvance,
                                                               InventAccountType::PurchAdvance);
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchAdvanceApplication,
                                                               InventAccountType::PurchAdvance);
                break;

            case LedgerPostingType::SalesAdvance:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::SalesAdvance,
                                                               InventAccountType::SalesAdvance);
                
                break;

            case LedgerPostingType::PurchPckSlpTax:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchPckSlpTax,
                                                               InventAccountType::PurchPackingSlipTax);
                break;

            case LedgerPostingType::PurchCharge:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchCharge,
                                                               InventAccountType::PurchCharge);
                break;

            case LedgerPostingType::PurchStockVariation:
                _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::PurchStockVariation,
                                                               InventAccountType::PurchStockVariation);
                break;

            case LedgerPostingType::FixedAssetsDebit:
                if (AssetPendingVendorInvoiceOverridingMainAccountFeature::isEnabled())
                {
                    _ledgerPostingType2InventAccountTypeMap.insert(LedgerPostingType::FixedAssetsDebit,
                                                                   InventAccountType::PurchExpense);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordInventAccountTypeMissMainAccountMessage</Name>
				<Source><![CDATA[
    private void recordInventAccountTypeMissMainAccountMessage(LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount, LedgerPostingType _ledgerPostingType)
    {
        if (!_ledgerDimensionDefaultAccount && 
            _ledgerPostingType == LedgerPostingType::PurchPckSlpPurchaseOffsetAccount)
        {
            CostVoucherPostingDetectInventoryLedgerAccountMissingContext context = CostVoucherPostingDetectInventoryLedgerAccountMissingContext::current();

            if (context)
            {
                warning(strFmt('@SCM:AccountNumberNotExist', _ledgerPostingType));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>