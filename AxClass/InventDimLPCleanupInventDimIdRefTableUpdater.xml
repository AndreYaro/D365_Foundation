<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupInventDimIdRefTableUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimLPCleanupInventDimIdRefTableUpdater
{
    [SysObsolete('This class member should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    protected InventDimId inventDimIdFrom;
    [SysObsolete('This class member should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    protected InventDimId inventDimIdTo;
    private Array refTableTaskArray;
    private List  specialRefTableTaskList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventDimLPCleanupInventDimIdRefTableUpdater construct()
    {
        return new InventDimLPCleanupInventDimIdRefTableUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    public static InventDimLPCleanupInventDimIdRefTableUpdater newFromParameters(Array _refTableTaskArray, InventDimId _inventDimIdFrom, InventDimId _inventDimIdTo)
    {
        if (!_refTableTaskArray)
        {
            throw error("@SCM:InventDimLPCleanupUpdateRefTableTaskListIsNull");
        }

        var instance = InventDimLPCleanupInventDimIdRefTableUpdater::construct();
        instance.parmInventDimIdFrom(_inventDimIdFrom);
        instance.parmInventDimIdTo(_inventDimIdTo);
        instance.parmRefTableTaskArray(_refTableTaskArray);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBundleParameters</Name>
				<Source><![CDATA[
    [SysObsolete('Use newFromBundleParametersV2() instead.', false, 28\06\2024)]
    public static InventDimLPCleanupInventDimIdRefTableUpdater newFromBundleParameters(Array _refTableTaskArray)
    {
        if (!_refTableTaskArray)
        {
            throw error("@SCM:InventDimLPCleanupUpdateRefTableTaskListIsNull");
        }

        var instance = InventDimLPCleanupInventDimIdRefTableUpdater::construct();
        instance.parmRefTableTaskArray(_refTableTaskArray);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBundleParametersV2</Name>
				<Source><![CDATA[
    internal static InventDimLPCleanupInventDimIdRefTableUpdater newFromBundleParametersV2(Array _refTableTaskArray, List _specialRefTableTaskList)
    {
        if (!_refTableTaskArray)
        {
            throw error("@SCM:InventDimLPCleanupUpdateRefTableTaskListIsNull");
        }

        var instance = InventDimLPCleanupInventDimIdRefTableUpdater::construct();
        instance.parmRefTableTaskArray(_refTableTaskArray);
        instance.parmSpecialRefTableTaskList(_specialRefTableTaskList);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTasks</Name>
				<Source><![CDATA[
    public boolean processTasks()
    {
        if (InventDimLPCleanupBundleUpdateRefTablesFlight::instance().isEnabled())
        {
            return this.waitForAsyncTasks(this.createBundleTasks());
        }
        return this.waitForAsyncTasks(this.createTasks());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceTable</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    public void updateReferenceTable(
        TableName _refTableName,
        FieldId _inventDimIdField,
        FieldId _dataAreaIdFieldId,
        InventDimId _inventDimIdFrom = inventDimIdFrom,
        InventDimId _inventDimIdTo   = inventDimIdTo)
    {
        #OCCRetryCount

        Connection connection = new Connection();
        Statement statement = connection.createStatement();
        str sqlStatement = this.buildSQLUpdateStr(_refTableName, _inventDimIdField, _dataAreaIdFieldId, _inventDimIdFrom, _inventDimIdTo);

        try
        {
            connection.ttsbegin();
            statement.executeUpdateWithParameters(sqlStatement, SqlParams::create());
            connection.ttscommit();
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            // log but ignore the error.
            SysDictTable dictTable_RefTable = SysDictTable::newName(_refTableName);
            FieldName dimFieldName = dictTable_RefTable.fieldName(_inventDimIdField, DbBackend::Sql, 0, FieldNameGenerationMode::FieldList);
            warning(strFmt("@SCM:InventDimLPCleanupDuplicateKeyError", dimFieldName, inventDimIdFrom, inventDimIdTo, _refTableName));
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }
            if (connection)
            {
                connection.finalize();
                connection = null;
            }
        }

        Microsoft.Dynamics.Ax.Xpp.PredefinedFunctions::Flush(tableName2Id(_refTableName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLUpdateStr</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    private str buildSQLUpdateStr(
        TableName _tableName,
        FieldId _inventDimIdField,
        FieldId _dataAreaIdFieldId,
        InventDimId _inventDimIdFrom,
        InventDimId _inventDimIdTo)
    {
        SysDictTable dictTable_RefTable = SysDictTable::newName(_tableName);
        TableName refTableName = dictTable_RefTable.name(DbBackend::Sql);
        FieldName dimFieldName_FieldList = dictTable_RefTable.fieldName(_inventDimIdField, DbBackend::Sql, 0, FieldNameGenerationMode::FieldList);
        FieldName dimFieldName_WhereClause = dictTable_RefTable.fieldName(_inventDimIdField, DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);

        /* Build up the following SQL statement

        UPDATE DimRefTable
        SET    DimRefTable.InventDimId = 'InventDimIdCurrent'
        FROM   <REFERENCETABLE> DimRefTable
        WHERE  ( DimRefTable.PARTITION = 68719504489 AND
                 DimRefTable.DataAreaId = N'dat' AND
                 DimRefTable.InventDimId = 'InventDimIdOrigin' )*/

        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('UPDATE DIMREFTABLE SET DIMREFTABLE.%1 = \'%2\' FROM %3 DIMREFTABLE WHERE (', dimFieldName_FieldList, _inventDimIdTo, refTableName);

        str currentPartitionIdLiteral = sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true);
        directSQL += strFmt(' DIMREFTABLE.PARTITION = %1 AND', currentPartitionIdLiteral);

        FieldName dataAreaIdFieldName = dictTable_RefTable.fieldName(_dataAreaIdFieldId, DbBackend::Sql, 0, FieldNameGenerationMode::WhereClause);
        str dataAreaIdLiteral = sqlSystem.sqlLiteral(curext());
        directSQL += strFmt(' DIMREFTABLE.%1 = %2 AND', dataAreaIdFieldName, dataAreaIdLiteral);

        directSQL += strFmt(' DIMREFTABLE.%1 = \'%2\' )', dimFieldName_WhereClause, _inventDimIdFrom);
        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableTaskArray</Name>
				<Source><![CDATA[
    public Array parmRefTableTaskArray(Array _refTableTaskArray = refTableTaskArray)
    {
        refTableTaskArray = _refTableTaskArray;

        return refTableTaskArray;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialRefTableTaskList</Name>
				<Source><![CDATA[
    public List parmSpecialRefTableTaskList(List _specialRefTableTaskList = specialRefTableTaskList)
    {
        specialRefTableTaskList = _specialRefTableTaskList;

        return specialRefTableTaskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimIdFrom</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    public InventDimId parmInventDimIdFrom(InventDimId _inventDimIdFrom = inventDimIdFrom)
    {
        inventDimIdFrom = _inventDimIdFrom;

        return inventDimIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimIdTo</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    public InventDimId parmInventDimIdTo(InventDimId _inventDimIdTo = inventDimIdTo)
    {
        inventDimIdTo = _inventDimIdTo;

        return inventDimIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThreadNums</Name>
				<Source><![CDATA[
    public int parmThreadNums()
    {
        return 20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTasks</Name>
				<Source><![CDATA[
    [SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
    private System.Threading.Tasks.Task[] createTasks()
    {
        List taskList = new List(Types::Class);
        List tableIdFieldIdForSingleTask;
        int indexOfTableIdFieldId;

        int tableIdFieldIdCount = refTableTaskArray.lastIndex();
        int threadNums = this.parmThreadNums();

        for (int i = 1; i <= threadNums; i++)
        {
            tableIdFieldIdForSingleTask = new List(Types::Container);

            indexOfTableIdFieldId = i;
            while (indexOfTableIdFieldId <= tableIdFieldIdCount)
            {
                tableIdFieldIdForSingleTask.addEnd(refTableTaskArray.value(indexOfTableIdFieldId));
                indexOfTableIdFieldId += threadNums;
            }

            taskList.addEnd(InventDimLPCleanupUpdateRefTableTask::newParameters(tableIdFieldIdForSingleTask, inventDimIdFrom, inventDimIdTo));
        }

        int taskListLength = taskList.elements();
        System.Threading.Tasks.Task[] threadTasklist = new System.Threading.Tasks.Task[taskListLength]();

        int i = 0;
        ListEnumerator tasksEnumerator = taskList.getEnumerator();
        while (tasksEnumerator.moveNext())
        {
            InventDimLPCleanupUpdateRefTableTask updateRefTableTask = tasksEnumerator.current();
            threadTasklist.SetValue(updateRefTableTask.runAsync(), i);
            i++;
        }

        return threadTasklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBundleTasks</Name>
				<Source><![CDATA[
    private System.Threading.Tasks.Task[] createBundleTasks()
    {
        List taskList = new List(Types::Class);
        List tableIdFieldIdForSingleTask;

        // Create tasks for tables whose unique index has column InventDimId, update one table per thread
        TableId        refTableId;
        FieldName      inventDimIdFieldName, dataAreaIdFieldName;
        int            assignedThread, currentThread;
        ListEnumerator le = specialRefTableTaskList.getEnumerator();

        tableIdFieldIdForSingleTask = new List(Types::Container);
        while (le.moveNext())
        {
            [refTableId, inventDimIdFieldName, dataAreaIdFieldName, assignedThread] = le.current();

            if (currentThread != assignedThread)
            {
                if (!tableIdFieldIdForSingleTask.empty())
                {
                    taskList.addEnd(InventDimLPCleanupBundleUpdateSpecialRefTableTask::newParameters(tableIdFieldIdForSingleTask));
                    tableIdFieldIdForSingleTask = new List(Types::Container);
                }
                currentThread = assignedThread;
            }

            tableIdFieldIdForSingleTask.addEnd([refTableId, inventDimIdFieldName, dataAreaIdFieldName]);
        }
        taskList.addEnd(InventDimLPCleanupBundleUpdateSpecialRefTableTask::newParameters(tableIdFieldIdForSingleTask));

        // Create tasks for other reference tables, update multiple tables per thread
        int threadNums = this.parmThreadNums();
        int tableIdFieldIdCount = refTableTaskArray.lastIndex();
        int indexOfTableIdFieldId;

        for (int i = 1; i <= threadNums; i++)
        {
            tableIdFieldIdForSingleTask = new List(Types::Container);

            indexOfTableIdFieldId = i;
            while (indexOfTableIdFieldId <= tableIdFieldIdCount)
            {
                tableIdFieldIdForSingleTask.addEnd(refTableTaskArray.value(indexOfTableIdFieldId));
                indexOfTableIdFieldId += threadNums;
            }

            taskList.addEnd(InventDimLPCleanupBundleUpdateRefTableTask::newParameters(tableIdFieldIdForSingleTask));
        }

        int taskListLength = taskList.elements();
        System.Threading.Tasks.Task[] threadTasklist = new System.Threading.Tasks.Task[taskListLength]();

        int i = 0;
        ListEnumerator tasksEnumerator = taskList.getEnumerator();
        while (tasksEnumerator.moveNext())
        {
            var updateRefTableTask = tasksEnumerator.current();
            threadTasklist.SetValue(updateRefTableTask.runAsync(), i);
            i++;
        }

        return threadTasklist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waitForAsyncTasks</Name>
				<Source><![CDATA[
    private boolean waitForAsyncTasks(System.Threading.Tasks.Task[] _threadTasklist)
    {
        int connectionKeepAlivePingIntervalInMilliSec = this.connectionKeepAlivePingIntervalInMilliSec();

        Connection connection = new Connection();
        Statement statement;
        ResultSet resultset;
        var sqlKeepAlive = 'SELECT TOP 1 RECID FROM InventParameters WHERE RECID = 0;';

        while (!System.Threading.Tasks.Task::WaitAll(_threadTasklist, connectionKeepAlivePingIntervalInMilliSec))
        {
            statement = connection.createStatement();
            resultset = statement.executeQueryWithParameters(sqlKeepAlive, SqlParams::create());
            resultset.next();
            statement.close();
            resultset = null;
        }

        connection.finalize();
        connection = null;

        return this.allTasksSucceed(_threadTasklist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allTasksSucceed</Name>
				<Source><![CDATA[
    private boolean allTasksSucceed(System.Threading.Tasks.Task[] _threadTasklist)
    {
        boolean allSucceed = true;
        str errorStr = "";
        int numberThreads = _threadTaskList.get_length();

        System.Threading.Tasks.Task task;
        AsyncTaskResult taskResult;
        boolean taskSucceed;

        for (int i = 0 ; i < numberThreads ; i++)
        {
            task = _threadTasklist.GetValue(i);
            taskResult = AsyncTaskResult::getAsyncTaskResult(task);
            taskSucceed = conPeek(taskResult.getResult(), 1);

            if (!taskSucceed)
            {
                container infologCon = taskResult.getInfologData();
                container infoException, infoItem;
                str ExceptionMsg, ItemMsg;
                for (int j = 2;  j < conLen(infologCon);  j += 2)
                {
                    infoException = conPeek(infologCon, j);
                    ExceptionMsg  = conPeek(infoException, 2);

                    infoItem      = conPeek(infologCon, j + 1);
                    ItemMsg       = conPeek(infoItem, 2);

                    allSucceed = false;
                    errorStr += strFmt("%1 : %2\n", ItemMsg, ExceptionMsg);
                }
            }
        }

        if (!allSucceed)
        {
            // Do not throw error to maintain data consistency
            error(strFmt("%1:\n %2", funcName(), errorStr));
        }

        return allSucceed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectionKeepAlivePingIntervalInMilliSec</Name>
				<Source><![CDATA[
    private int connectionKeepAlivePingIntervalInMilliSec()
    {
        return 15 * 60 * 1000; // 15 minutes in ms.
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableListWithInventDimIdUniqueIdxDelegate</Name>
				<Source><![CDATA[
    [SysObsolete('Use tableListWithInventDimIdUniqueIdxOrMultiFieldsDelegate() instead', false, 28\06\2024)]
    delegate void tableListWithInventDimIdUniqueIdxDelegate(EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>