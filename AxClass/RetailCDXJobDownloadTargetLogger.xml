<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXJobDownloadTargetLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the logger class for logging download target sync operations of a job.
/// </summary>
internal class RetailCDXJobDownloadTargetLogger extends RetailCDXLogger
{
    RetailCDXJobDownloadTargetContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCDXJobDownloadTargetLogger</c> class.
    /// </summary>
    /// <param name = "_jobContext">The upload target context object.</param>
    internal void new(RetailCDXJobDownloadTargetContext _jobContext)
    {
        this.context = _jobContext;
        super(); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadTargetProcessingStart</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadTargetProcessingStart()
    {
        this.logStartEvent('CDXJobDownloadTargetProcessing', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadTargetProcessingFailure</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadTargetProcessingFailure(System.Exception exception)
    {
        this.logEvent('CDXJobDownloadTargetProcessingFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadTargetProcessingStop</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadTargetProcessingStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobDownloadTargetProcessing', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobDownloadTargetProcessingSkipped</Name>
				<Source><![CDATA[
    internal void logCDXJobDownloadTargetProcessingSkipped()
    {
        this.logEvent('CDXJobDownloadTargetProcessingSkipped', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromContext</Name>
				<Source><![CDATA[
    private container getEventDataFromContext(System.Exception exception = null)
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException([exception]);

        if (context)
        {
            return [context.paramSessionId(),
                    context.paramDownloadSession().JobId(),
                    context.paramDataStoreName(),
                    context.paramRowsAffected(),
                    context.paramDownloadSession().FileSize(),
                    context.paramCorrelationId(),
                    this.duration('CDXJobDownloadTargetProcessing'),
                    context.paramIsProcessingSkipped(),
                    success,
                    errorMessage,
                    this.previousErrorEvent];
        }
        else
        {
            return [0,
                    '',
                    '',
                    0,
                    0,
                    nullValueFromType(Types::Guid),
                    0,
                    false,
                    false,
                    errorMessage,
                    this.previousErrorEvent];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>