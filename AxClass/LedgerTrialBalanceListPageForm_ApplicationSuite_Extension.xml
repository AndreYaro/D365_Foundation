<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceListPageForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf( formstr( LedgerTrialBalanceListPage )) ]
public final class LedgerTrialBalanceListPageForm_ApplicationSuite_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SimulationJournalGroupId_OnLookup_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs simulation journal lookup.
    /// </summary>
    /// <param name = "_sender"><c>FormStringControl</c> object.</param>
    /// <param name = "_e">Event arguments.</param>
    [FormControlEventHandler(formControlStr(LedgerTrialBalanceListPage, SimulationJournalGroupId_IT), FormControlEventType::Lookup)]
    public void SimulationJournalGroupId_OnLookup_IT(FormControl _sender, FormControlEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            Args args = new Args();
            FormStringControl simulationJournalGroupId = _sender;
            args.caller(simulationJournalGroupId);
            args.name(formStr(SimulationJournalGroupLookUp_IT));
            FormRun formRun = classFactory.formRunClass(args);
            formRun.init();
            simulationJournalGroupId.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SimulationJournalGroupId_OnModified_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>simulationJournalGroupId</c> object.
    /// </summary>
    /// <param name = "_sender"><c>FormControl</c> object.</param>
    /// <param name = "_e">Event arguments.</param>
    [FormControlEventHandler(formControlStr(LedgerTrialBalanceListPage, SimulationJournalGroupId_IT), FormControlEventType::Modified)]
    public void SimulationJournalGroupId_OnModified_IT(FormControl _sender, FormControlEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            this.getBalanceParameters().parmSimulationJournalGroupId_IT(_sender.valueStr());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerTrialBalanceListPage_Post_init_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes text on <c>simulationJournalGroupId</c> form object.
    /// </summary>
    /// <param name = "_args">Event arguments.</param>
    [PostHandlerFor(formStr(LedgerTrialBalanceListPage), formMethodStr(LedgerTrialBalanceListPage, init))]
    public static void LedgerTrialBalanceListPage_Post_init_IT(XppPrePostArgs _args)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormRun formRun = _args.getThis() as FormRun;

            if (formRun)
            {
                FormGroupControl simulationJournalGroup_IT = formRun.control(formRun.controlId(formControlStr(LedgerTrialBalanceListPage, SimulationJournalGroup_IT)));
                simulationJournalGroup_IT.visible(true);

                FormRealControl displayEndingBalanceWithSim_IT = formRun.control(formRun.controlId(formControlStr(LedgerTrialBalanceListPage, DisplayEndingBalanceWithSim_IT)));
                displayEndingBalanceWithSim_IT.visible(true);

                FormStringControl simulationJournalGroupId = formRun.control(formRun.controlId(formControlStr(LedgerTrialBalanceListPage, SimulationJournalGroupId_IT)));

                if (formRun.getBalanceParameters())
                {
                    simulationJournalGroupId.text(formRun.getBalanceParameters().parmSimulationJournalGroupId_IT());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingLayerLookup_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postingLayerLookup variable.
    /// </summary>
    /// <returns>The postingLayerLookup variable.</returns>
    public LedgerPostingLayerMultiSelectLookup getPostingLayerLookup_IT()
    {
        return this.postingLayerLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerTrialBalanceListPage_Post_constructBalances_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes simulation balances.
    /// </summary>
    /// <param name="_args">Event arguments.</param>
    [PostHandlerFor(formStr(LedgerTrialBalanceListPage), formMethodStr(LedgerTrialBalanceListPage, constructBalances))]
    public static void LedgerTrialBalanceListPage_Post_constructBalances_IT(XppPrePostArgs _args)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            const boolean ShowErrors = true;
            FormRun form = _args.getThis() as FormRun;

            if (form)
            {
                form.constructBalances_Simulation_IT();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructBalances_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes simulation balances.
    /// </summary>
    public void constructBalances_Simulation_IT()
    {
        const boolean ShowErrors = true;
        boolean isValid = true;

        if (PostingLayers.text() == '')
        {
            isValid = checkFailed("@GeneralLedger:TrialBalancePostingLayerRequired");
        }

        isValid = isValid && balanceParameters.validateDates(StartDate.dateValue(), EndDate.dateValue());
        LedgerTrialBalanceTmp ledgerTrialBalanceTmp = this.getLedgerTrialBalanceTmp_IT();

        ttsbegin;
        while select forupdate ledgerTrialBalanceTmp
        {
            ledgerTrialBalanceTmp.delete();
        }
        ttscommit;

        LedgerPostingLayerMultiSelectLookup postingLayerLookup = this.getPostingLayerLookup_IT();

        if (isValid)
        {
            balanceParameters.parmDateCode(DateCode.text());
            balanceParameters.parmStartDate(StartDate.dateValue());
            balanceParameters.parmEndDate(EndDate.dateValue());
            balanceParameters.parmPostingLayers(postingLayerLookup.getPostingLayerSelection());

            // This is a workaround to get the physical tmp table created because it is needed by the query
            select firstOnly RecId from LedgerTrialBalanceTmp;

            LedgerTrialBalanceTmp::calculateBalances_Simulation_IT_V2(
                LedgerTrialBalanceTmp,
                dimHier.Name,
                balanceParameters.getStartDate(),
                balanceParameters.getEndDate(),
                balanceParameters.getIncludeOpeningPeriods(),
                balanceParameters.getIncludeClosingAdjustments(),
                balanceParameters.getIncludeClosingTransactions(),
                balanceParameters.getPostingLayers(),
                ShowErrors,
                runUpdateBalancesInNewSession,
                Ledger::current(),
                balanceParameters.parmSimulationJournalGroupId_IT(),
                balanceParameters.getDisplayMainAccountCategory());

            ClosingAdjustments.visible(balanceParameters.getIncludeClosingAdjustments());
            ClosingTransactions.visible(balanceParameters.getIncludeClosingTransactions());
            this.displayDimensionAttributeValueColumns();


            runUpdateBalancesInNewSession = false;

            CustomFilterGroup.optionValue(0);

            balanceParameters.saveLastValue(formStr(LedgerTrialBalanceListPageBalanceParms));

            this.updateTotals_Simulation_IT();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals_Simulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates simulation totals.
    /// </summary>
    public void updateTotals_Simulation_IT()
    {
        // Only update the totals if the tab is open
        if (Totals.optionValue() != 0)
        {
            LedgerTrialBalanceTmp trialBalanceSum;
            trialBalanceSum.linkPhysicalTableInstance(LedgerTrialBalanceTmp);

            select sum(AmountDebit), sum(AmountCredit)
                from trialBalanceSum;

            DebitTotal.realValue(trialBalanceSum.AmountDebit);
            CreditTotal.realValue(trialBalanceSum.AmountCredit);
            BalanceOfTotal.realValue(trialBalanceSum.AmountDebit - trialBalanceSum.AmountCredit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTrialBalanceTmp_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledgerTrialBalanceTmp variable.
    /// </summary>
    /// <returns>The <c>ledgerTrialBalanceTmp</c> variable.</returns>
    public LedgerTrialBalanceTmp getLedgerTrialBalanceTmp_IT()
    {
        return this.ledgerTrialBalanceTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>