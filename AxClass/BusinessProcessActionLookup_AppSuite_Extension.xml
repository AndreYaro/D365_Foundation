<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessProcessActionLookup_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of the <c>BusinessProcessActionLookup</c> form, which is used for retail business process.
/// </summary>
[ExtensionOf(formStr(BusinessProcessActionLookup))]
final class BusinessProcessActionLookup_AppSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();
        
        this.setControlVisibility();
        
        this.setControlValue();

        this.setDataSourceQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaskActionTypeSelection</Name>
				<Source><![CDATA[
    protected void updateTaskActionTypeSelection(BusinessProcessActionTypeSelection _typeSelected)
    {
        next updateTaskActionTypeSelection(_typeSelected);
        
        FormControl operationList = this.design(0).controlName(formControlStr(BusinessProcessActionLookup, PosOperationList));
        FormControl customerGroup = this.design(0).controlName(formControlStr(BusinessProcessActionLookup, CustomerGroup));
        operationList.visible(enum2Symbol(enumNum(BusinessProcessActionTypeSelection), _typeSelected) == enum2Symbol(enumNum(RetailBusinessProcessActionTypeSelection), RetailBusinessProcessActionTypeSelection::PosOperation));
        customerGroup.visible(enum2Symbol(enumNum(BusinessProcessActionTypeSelection), _typeSelected) == enum2Symbol(enumNum(RetailBusinessProcessActionTypeSelection), RetailBusinessProcessActionTypeSelection::CustomerAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    public void closeOk()
    { 
        next closeOk();
        
        BusinessProcessIActionLookupCaller lookupCaller = this.args().caller() as BusinessProcessIActionLookupCaller;
        FormComboBoxControl linkTypeComboBox = this.design(0).controlName(formControlStr(BusinessProcessActionLookup, RetailTaskActionType));

        if (linkTypeComboBox.selection() == RetailBusinessProcessActionTypeSelection::PosOperation)
        {
            BusinessProcessAction operation = int2Str(PosOperation.OperationId);
            
            this.parmSelectedActionType(BusinessProcessTaskEditor::PosOperationMenuItemType);
            this.parmSelectedAction(operation);

            lookupCaller.setNewlySelectedAction(operation, BusinessProcessTaskEditor::PosOperationMenuItemType);
        }
        
        if (linkTypeComboBox.selection() == RetailBusinessProcessActionTypeSelection::CustomerAccount)
        {
            BusinessProcessAction customer = int642Str(CustTable.RecId);

            this.parmSelectedActionType(BusinessProcessTaskEditor::CustomerAccountMenuItemType);
            this.parmSelectedAction(customer);

            lookupCaller.setNewlySelectedAction(customer, BusinessProcessTaskEditor::CustomerAccountMenuItemType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntityRange_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BusinessProcessActionLookup, LegalEntityRange), FormControlEventType::SelectionChanged)]
    public static void LegalEntityRange_OnSelectionChanged(FormControl sender, FormControlEventArgs e)
    {
        FormComboBoxControl control = sender;
        control.selection();

        FormDataSource fds = control.formRun().dataSource(formDataSourceStr(BusinessProcessActionLookup, CustTable));
        Query query = fds.query();

        if(control.selection() == HcmLegalEntityRange::CurrentLegalEntity)
        {
            query.addCompanyRange(Global::getCompany(tableNum(CustTable)));
        }
        else
        {
            query.clearCompanyRange();
        }
        fds.queryRun().query(query);
        fds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlVisibility</Name>
				<Source><![CDATA[
    private void setControlVisibility()
    {
        boolean showRetailComboBox = false;
        if (this.args().record() is BusinessProcessTemplateTask)
        {
            BusinessProcessTemplateTask record = this.args().record() as BusinessProcessTemplateTask;
            var headerRecord = BusinessProcessTemplateHeader::find(record.TemplateHeader);
            showRetailComboBox = headerRecord.GenericSubtype == BusinessProcessGenericSubtype::Retail;
        }
        else if (this.args().record() is BusinessProcessTask)
        {
            BusinessProcessTask record = this.args().record() as BusinessProcessTask;
            var headerRecord = BusinessProcessHeader::find(record.ProcessHeader);
            showRetailComboBox = headerRecord.GenericSubtype == BusinessProcessGenericSubtype::Retail;
        }
        TaskActionType.visible(!showRetailComboBox);
        RetailTaskActionType.visible(showRetailComboBox);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlValue</Name>
				<Source><![CDATA[
    private void setControlValue()
    {
        BusinessProcessIActionLookupCaller lookupCaller = this.args().caller() as BusinessProcessIActionLookupCaller;
        RetailBusinessProcessActionTypeSelection initialType;
        BusinessProcessActionType actionType = lookupCaller.getExistingMenuItemType();
        
        if (actionType == BusinessProcessTaskEditor::PosOperationMenuItemType)
        {
            initialType = RetailBusinessProcessActionTypeSelection::PosOperation;
        }
        else if (actionType == BusinessProcessTaskEditor::UrlMenuItemType)
        {
            initialType = RetailBusinessProcessActionTypeSelection::Url;
        }
        else if (actionType == BusinessProcessTaskEditor::CustomerAccountMenuItemType)
        {
            initialType = RetailBusinessProcessActionTypeSelection::CustomerAccount;
        }
        else 
        {
            initialType = RetailBusinessProcessActionTypeSelection::MenuItem;
        }

        RetailTaskActionType.selection(initialType);
        this.parmSelectedAction(lookupCaller.getExistingMenuItem());
        this.parmSelectedActionType(enum2int(initialType));
        this.updateTaskActionTypeSelection(enum2int(initialType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSourceQuery</Name>
				<Source><![CDATA[
    private void setDataSourceQuery()
    {
        QueryBuildDataSource queryBuildDataSource = PosOperation_ds.query().dataSourceTable(tableNum(RetailOperations));
        queryBuildDataSource.clearRanges();
        queryBuildDataSource.addRange(fieldNum(RetailOperations, AllowTaskLink)).value('1');
        queryBuildDataSource.addSortField(fieldNum(RetailOperations, OperationName), SortOrder::Ascending);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>