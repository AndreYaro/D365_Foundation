<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataI4P_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates data invoice for payment update based upon
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::Invoice4Paym_RU)]
class PurchFormletterParmDataI4P_RU extends PurchFormletterParmData
{
    OfficialsServ_RU offSrv;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initOfficials_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates officials for given <c>PurchParmTable</c> record or for all <c>PurchParmTable</c> records at update
    /// </summary>
    /// <param name="_purchParmTable">
    /// <c>PurchParmTable</c> record
    /// </param>
    public void initOfficials_RU(Common _purchParmTable = null)
    {
        PurchParmTable localPurchParmTable = _purchParmTable as PurchParmTable;

        if (! OfficialsServ_RU::isFeatureEnabled())
            return;

        if (! offSrv)
        {
            offSrv = new OfficialsServ_RU();
        }

        if (localPurchParmTable) // Editing parmTable
            return;

        ttsBegin;

        // Creating parmTables
        while select forupdate localPurchParmTable
            where localPurchParmTable.ParmId    == purchParmUpdate.ParmId    &&
                  localPurchParmTable.Ordering  == this.parmDocumentStatus() &&
                ! localPurchParmTable.OffSessionId_RU
        {
            localPurchParmTable.OffReportType_RU =
                offSrv.initTablePurch(localPurchParmTable,
                                      purchParmUpdate,
                                      localPurchParmTable.OffSessionId_RU == ""); // Generate new id
            if (! localPurchParmTable.OffSessionId_RU)
            {
                localPurchParmTable.OffSessionId_RU = offSrv.newId();
            }
            localPurchParmTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
        protected boolean mayJournalBePosted(Common _sourceTable)
    {
        PurchTable sourceTable = _sourceTable as PurchTable;

        return sourceTable.mayInvoice4PaymBeUpdated_RU() && super(sourceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubTableMapKey</Name>
				<Source><![CDATA[
        protected str parmSubTableMapKey(Common _common)
    {
        str key;

        PurchParmTable    purchParmTable;
        PurchParmLine     purchParmLine;
        PurchParmSubTable purchParmSubTable;

        switch (_common.TableId)
        {
            case this.parmTableTableId() :
                purchParmTable    = _common;
                key = this.addToKey(key, purchParmTable.TableRefId);
                key = this.addToKey(key, purchParmTable.PurchId);
                break;
            case this.parmLineTableId() :
                purchParmLine     = _common;
                key = this.addToKey(key, purchParmLine.TableRefId);
                key = this.addToKey(key, purchParmLine.OrigPurchId);
                break;
            case this.parmSubTableTableId() :
                purchParmSubTable = _common;
                key = this.addToKey(key, purchParmSubTable.TableRefId);
                key = this.addToKey(key, purchParmSubTable.OrigPurchId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        #ISOcountryRegionCodes
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of <c>PurchFormletterParmDataI4P_RU</c> object
    /// </summary>
    /// <returns>
    /// New instance of <c>PurchFormletterParmDataI4P_RU</c> object
    /// </returns>
    [SysObsolete('Use PurchFormletterParmData::construct() instead.', false, 30\06\2018)]
    static PurchFormletterParmDataI4P_RU construct()
    {
        return new PurchFormletterParmDataI4P_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>