<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSalesPackingSlipPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WHSSalesPackingSlipPost
{
    boolean runProj;
    boolean runSales;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determinePackingSlipTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets variables to run the correct packing slip type(s) for a specified load.
    /// </summary>
    /// <param name="_packingSlipType">
    /// The packing slip type of a load.
    /// </param>
    private void determinePackingSlipTypes(WHSPackingSlipType _packingSlipType)
    {
        switch (_packingSlipType)
        {
            case WHSPackingSlipType::Sales:
                runSales = true;
                break;

            case WHSPackingSlipType::Project:
                runProj = true;
                break;

            case WHSPackingSlipType::Both:
                runProj = true;
                runSales = true;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProjectPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the project packing slip process.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> class to pass to the packing slip process.
    /// </param>
    private void postProjectPackingSlip(Args _args)
    {
        MenuFunction   projMenu = new MenuFunction(menuitemActionStr(SalesFormLetter_PackingSlipProject), MenuItemType::Action);

        projMenu.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPostPackingSlipAction</Name>
				<Source><![CDATA[
    private WHSPostPackingSlipAction constructPostPackingSlipAction(Common _common, Args _args)
    {
        WHSSalesPackingSlipPostArgs salesPackingSlipPostArgs;
        if (_args.parmObject() is WHSSalesPackingSlipPostArgs)
        {
            salesPackingSlipPostArgs = _args.parmObject();
        }

        WHSPostPackingSlipAction postPackingSlipAction = WHSPostPackingSlipAction::newFromBufferAndArgs(_common, salesPackingSlipPostArgs);

        return postPackingSlipAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSalesPackingSlipFromParameters</Name>
				<Source><![CDATA[
    private void postSalesPackingSlipFromParameters(Args _args, WHSPackingSlipPostingParameters _packingSlipPostingParameters)
    {
        IdentifierName className, methodName;
        SysOperationExecutionMode mode;
        [className, methodName, mode] = FormLetterServiceController::parseServiceInfo(_args);
        boolean isProforma = FormLetterServiceController::isMenuItemProforma(_args.menuItemName());
        Common record = _args.record();
        container dataSourceRecordsPacked = _args.parmObject().pack();

        str callerFormName;
        Object callerForm = _args.caller();
        if (callerForm)
        {
            callerFormName = _args.caller().name();
        }

        SalesFormLetterCachedArguments cachedArgs = SalesFormLetterCachedArguments::construct();
        cachedArgs.parmEnum = enum2int(DocumentStatus::PackingSlip);
        cachedArgs.callerFormName = callerFormName;
        cachedArgs.isProforma = isProforma;
        cachedArgs.parmSkipPrompt = true;
        cachedArgs.className = className;
        cachedArgs.methodName = methodName;
        cachedArgs.mode = mode;
        cachedArgs.callerMenuItem = _args.menuItemName();

        SalesFormLetter salesFormLetter = SalesFormLetter::constructAndInitializeFromWarehousePackingSlipParameters(
            cachedArgs, 
            record, 
            callerForm, 
            dataSourceRecordsPacked,
            _packingSlipPostingParameters);

        salesFormLetter.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the sales packing slip process.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> class to pass to the packing slip process.
    /// </param>
    private void postSalesPackingSlip(Args _args)
    {
        MenuFunction   salesMenu = new MenuFunction(menuitemActionStr(SalesFormLetter_PackingSlip), MenuItemType::Action);

        salesMenu.run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run(Args _args)
    {
        Args salesArgs  = Args::copyArgs(_args, new Args());
        Args projArgs   = Args::copyArgs(salesArgs, new Args());
        Map  dataSourceValidRecs = new Map(extendedTypeId2Type(extendedTypeNum(RecId)), Types::Record);
        
        if (FormDataUtil::getFormDataSource(salesArgs.record()))
        {
            FormDataSource formDataSource_ds = FormDataUtil::getFormDataSource(salesArgs.record());

            for (Common common = formDataSource_ds.getFirst(true) ? formDataSource_ds.getFirst(true) : formDataSource_ds.cursor();
                common;
                common = formDataSource_ds.getNext())
            {
                WHSPostPackingSlipAction postPackingSlipAction = this.constructPostPackingSlipAction(common, salesArgs);

                if (postPackingSlipAction.validateCanPackingSlipBePosted())
                {
                    this.determinePackingSlipTypes(postPackingSlipAction.whsPackingSlipType());

                    dataSourceValidRecs.insert(common.RecId, common);
                }
            }
        }
        else
        {
            WHSPostPackingSlipAction postPackingSlipAction = this.constructPostPackingSlipAction(salesArgs.record(), salesArgs);

            if (postPackingSlipAction.validateCanPackingSlipBePosted())
            {
                this.determinePackingSlipTypes(postPackingSlipAction.whsPackingSlipType());

                dataSourceValidRecs.insert(salesArgs.record().RecId, salesArgs.record());
            }
        }

        if (runSales)
        {
            salesArgs.parmObject(dataSourceValidRecs);
            if (_args.parmObject() is WHSSalesPackingSlipPostArgs)
            {
                WHSSalesPackingSlipPostArgs salesPackingSlipPostArgs = _args.parmObject() as WHSSalesPackingSlipPostArgs;
                WHSPackingSlipPostingParameters packingSlipPostingParameters = WHSPackingSlipPostingParameters::find(salesPackingSlipPostArgs.packingSlipPostingParametersId);
                if (packingSlipPostingParameters)
                {
                    runProj = false; // 933947: Enable to run from WHSPackingSlipPostingParameters
                    this.postSalesPackingSlipFromParameters(salesArgs, packingSlipPostingParameters);
                }
                else
                {
                    this.postSalesPackingSlip(salesArgs);
                }
            }
            else
            {
                this.postSalesPackingSlip(salesArgs);
            }
        }

        if (runProj)
        {
            projArgs.parmObject(dataSourceValidRecs);
            this.postProjectPackingSlip(projArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSSalesPackingSlipPost salesPackingSlipPost = new WHSSalesPackingSlipPost();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            salesPackingSlipPost.run(_args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>