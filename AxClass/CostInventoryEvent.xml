<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostInventoryEvent</c> class is an abstraction for an inventory event.
/// </summary>
abstract public class CostInventoryEvent extends CostEventBase
{
    DataAreaId              dataAreaId;
    CostOperatingEventType  eventType;
    InventTransOriginId     inventTransOriginId;
    Voucher                 voucher;
    TransDate               transDate;
    CostMagnitude           totalQuantity;
    CostEvent               costEvent;

    private InventTransId inventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntry</Name>
				<Source><![CDATA[
    public void addEntry(CostEntryBase _entry)
    {
        CostEntryBase entry = this.findEntry(_entry.parmDescriptor());
        if (entry)
        {
            entry.parmMagnitude(entry.parmMagnitude() + _entry.parmMagnitude());
        }
        else
        {
            super(_entry);
        }
        totalQuantity += _entry.parmMagnitude();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an <c>CostInventoryEntry</c> derived from the <c>InventTrans</c> to the event.
    /// </summary>
    /// <param name="_state">
    /// Determines if the <c>InventTrans</c> is updated physical or financial.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> to derive the <c>CostInventoryEntry</c> from.
    /// </param>
    public void addInventTrans(InventCostTransState _state, InventTrans _inventTrans)
    {
        if (_state == this.parmInventCostTransState())
        {
            CostInventoryEvent reconcilingEvent = CostInventoryEvent::newReconciledEvent(this, _inventTrans);
            CostRegisteredQuantityDescriptor descriptor = CostRegisteredQuantityDescriptor::newFromInventTrans(_inventTrans, reconcilingEvent);
            CostEntryBase entry = CostEntryBase::newEntry(this, descriptor, _inventTrans.Qty);

            this.addEntry(entry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostEvent</c> class for the inventory event.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CostEvent</c> class for the inventory event.
    /// </returns>
    abstract protected CostEvent createCostEvent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posting rules for the event.
    /// </summary>
    /// <returns>
    /// A list of posting rules for the event.
    /// </returns>
    abstract protected List getPostingRules()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a unique key for the inventory event.
    /// </summary>
    /// <returns>A unique key for the inventory event.</returns>
    public str key()
    {
        return CostInventoryEvent::createKey(dataAreaId, eventType, inventTransOriginId, voucher, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadEntries</Name>
				<Source><![CDATA[
    protected void loadEntries()
    {
        switch (this.parmInventCostTransState())
        {
            case InventCostTransState::Physical:
                CostInventoryEvent::loadPhysicalEntries(this);
                break;
            case InventCostTransState::Financial:
                CostInventoryEvent::loadFinancialEntries(this);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventType</Name>
				<Source><![CDATA[
    public CostOperatingEventType parmEventType(CostOperatingEventType _eventType = eventType)
    {
        eventType = _eventType;

        return eventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventCostTransState</Name>
				<Source><![CDATA[
    abstract protected InventCostTransState parmInventCostTransState()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginId</Name>
				<Source><![CDATA[
    public InventTransOriginId parmInventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        inventTransOriginId = _inventTransOriginId;

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;

        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        costEvent = this.createCostEvent();
        costEvent.parmParentEvent(this);

        List list = this.getPostingRules();
        Enumerator enumerator = list.getEnumerator();
        while (enumerator.moveNext())
        {
            CostPostingRule rule = enumerator.current();
            rule.process(costEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a unique key for the inventory event.
    /// </summary>
    /// <param name="_dateAreaId">
    /// The inventory events <c>DataAreaId</c>.
    /// </param>
    /// <param name="_eventType">
    /// The inventory events <c>CostOperatingEventType</c>.
    /// </param>
    /// <param name="_inventTransOriginId">
    /// The inventory events <c>InventTransOriginId</c>.
    /// </param>
    /// <param name="_voucher">
    /// The inventory events <c>Voucher</c>.
    /// </param>
    /// <param name="_transDate">
    /// The inventory events <c>TransDate</c>.
    /// </param>
    /// <returns>
    /// A unique key for the inventory event.
    /// </returns>
    private static str createKey(
        DataAreaId              _dateAreaId,
        CostOperatingEventType  _eventType,
        InventTransOriginId     _inventTransOriginId,
        Voucher                 _voucher,
        TransDate               _transDate)
    {
        str key = _dateAreaId + '#' +
        int2str(enum2int(_eventType)) + '#' +
        int642str(_inventTransOriginId) +'#' +
        _voucher + '#' +
        date2StrXpp(_transDate);

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialInventoryEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>CostInventoryEventType</c> for a financial update of a <c>InventTrans</c> buffer.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> buffer.
    /// </param>
    /// <returns>
    /// A <c>CostInventoryEventType</c>.
    /// </returns>
    private static CostOperatingEventType financialInventoryEventType(InventTrans _inventTrans)
    {
        CostOperatingEventType  eventType;

        InventTransType inventTransType = InventTransOrigin::find(_inventTrans.InventTransOrigin).ReferenceCategory;

        switch (inventTransType)
        {
            case InventTransType::Purch:
                if (_inventTrans.PackingSlipId)
                {
                    if (_inventTrans.PackingSlipReturned)
                    {
                        if (_inventTrans.direction() == InventDirection::Issue)
                        {
                            eventType =  CostOperatingEventType::ProductReceiptCorrection;
                        }
                        else
                        {
                            eventType =  CostOperatingEventType::ProductReturnCorrection;
                        }
                    }
                    else
                    {
                        if (_inventTrans.direction() == InventDirection::Receipt)
                        {
                            eventType =  CostOperatingEventType::VendorInvoice;
                        }
                        else
                        {
                            eventType =  CostOperatingEventType::VendorCreditNote;
                        }
                    }
                }
                else
                {
                    if (_inventTrans.direction() == InventDirection::Receipt)
                    {
                        eventType =  CostOperatingEventType::VendorDirectInvoice;
                    }
                    else
                    {
                        eventType =  CostOperatingEventType::VendorDirectCreditNote;
                    }
                }
                break;
        }

        return eventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFinancialEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads finandcial inventory transactions for an inventory event <c>CostInventoryEvent</c>.
    /// </summary>
    /// <param name="_event">
    /// The <c>CostInventoryEvent</c>.
    /// </param>
    protected static void loadFinancialEntries(CostInventoryEvent _event)
    {
        InventTrans                         inventTrans;

        while select InventTransOrigin, PackingSlipId, ItemId, InventDimId, VoucherPhysical, DatePhysical, sum(Qty)
            from inventTrans
            group by InventTransOrigin, PackingSlipId, ItemId, InventDimId, VoucherPhysical, DatePhysical
            where inventTrans.InventTransOrigin == _event.parmInventTransOriginId()
                && inventTrans.Voucher          == _event.parmVoucher()
                && inventTrans.DateFinancial    == _event.parmTransDate()
                && inventTrans.StatusIssue      <= StatusIssue::Sold
                && inventTrans.StatusReceipt    <= StatusReceipt::Purchased
        {
            CostInventoryEvent reconcilingEvent = CostInventoryEvent::newPhysicalInventoryEvent(inventTrans);
            CostRegisteredQuantityDescriptor descriptor = CostRegisteredQuantityDescriptor::newFromInventTrans(inventTrans, reconcilingEvent);

            _event.addEntry(CostEntryBase::newEntry(_event, descriptor, inventTrans.Qty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPhysicalEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads physical inventory transactions for an inventory event <c>CostInventoryEvent</c>.
    /// </summary>
    /// <param name="_event">
    /// The <c>CostInventoryEvent</c>.
    /// </param>
    protected static void loadPhysicalEntries(CostInventoryEvent _event)
    {
        InventTrans                         inventTrans;

        while select ItemId, InventDimId, sum(Qty)
            from inventTrans
            group by ItemId, InventDimId
            where inventTrans.InventTransOrigin == _event.parmInventTransOriginId()
                && inventTrans.VoucherPhysical  == _event.parmVoucher()
                && inventTrans.DatePhysical     == _event.parmTransDate()
        {
            CostInventoryEvent reconcilingEvent = CostInventoryEvent::newReconciledEvent(_event, inventTrans);
            CostRegisteredQuantityDescriptor descriptor = CostRegisteredQuantityDescriptor::newFromInventTrans(inventTrans, reconcilingEvent);

            _event.addEntry(CostEntryBase::newEntry(_event, descriptor, inventTrans.Qty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadReconcilingInventoryEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads reconciling inventory transactions for an inventory event <c>CostInventoryEvent</c>.
    /// </summary>
    /// <param name="_event">
    /// The <c>CostInventoryEvent</c>.
    /// </param>
    public static void loadReconcilingInventoryEntries(CostInventoryEvent _event)
    {
        InventTrans                         inventTrans;

        while select InventTransOrigin, ItemId, InventDimId, PackingSlipReturned, PackingSlipId, Voucher, DateFinancial, sum(Qty)
            from inventTrans
            group by InventTransOrigin, ItemId, InventDimId, PackingSlipReturned, PackingSlipId, Voucher, DateFinancial
            where inventTrans.InventTransOrigin == _event.parmInventTransOriginId()
                && inventTrans.VoucherPhysical  == _event.parmVoucher()
                && inventTrans.DatePhysical     == _event.parmTransDate()
                && inventTrans.StatusIssue      <= StatusIssue::Sold
                && inventTrans.StatusReceipt    <= StatusReceipt::Purchased
        {
            CostRegisteredQuantityDescriptor descriptor = CostRegisteredQuantityDescriptor::newFromInventTrans(inventTrans, _event);
            CostInventoryEvent event = CostInventoryEvent::newFinancialInventoryEvent(inventTrans);
            _event.addReconcilingEntry(CostEntryBase::newEntry(event, descriptor, inventTrans.Qty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of an <c>CostInventoryEvent</c> class from a <c>CostInventoryEventType</c>.
    /// </summary>
    /// <param name="_eventType">
    /// The <c>CostInventoryEventType</c>.
    /// </param>
    /// <returns>
    /// An instance of an <c>CostInventoryEvent</c> class
    /// </returns>
    public static CostInventoryEvent newEventType(CostOperatingEventType _eventType)
    {
        CostInventoryEvent      event;

        switch (_eventType)
        {
            case CostOperatingEventType::ProductReceipt:
                event = new CostProductReceiptEvent();
                break;

            case CostOperatingEventType::ProductReceiptCorrection:
                event = new CostProductReceiptCorrectionEvent();
                break;

            case CostOperatingEventType::VendorInvoice:
                event = new CostVendorInvoiceEvent();
                break;

            case CostOperatingEventType::VendorDirectInvoice:
                event = new CostVendorDirectInvoiceEvent();
                break;

            default:
                event = new CostInventoryNonEvent();
        }
        event.parmEventType(_eventType);

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFinancialInventoryEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostInventoryEvent</c> for an <c>InventTrans</c> that is updated financially.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> that is updated.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostInventoryEvent</c> for an <c>InventTrans</c> that is updated financially.
    /// </returns>
    public static CostInventoryEvent newFinancialInventoryEvent(
        InventTrans             _inventTrans)
    {
        CostInventoryEvent      event;

        CostOperatingEventType eventType = CostInventoryEvent::financialInventoryEventType(_inventTrans);
        str key = CostInventoryEvent::createKey(_inventTrans.DataAreaId, eventType, _inventTrans.InventTransOrigin, _inventTrans.Voucher, _inventTrans.DateFinancial);

        event = SysTransactionScopeCache::get(classStr(CostInventoryEvent), key, event);

        if (!event)
        {
            event = CostInventoryEvent::newEventType(eventType);

            event.parmEventType(eventType);
            event.parmInventTransOriginId(_inventTrans.InventTransOrigin);
            event.parmVoucher(_inventTrans.Voucher);
            event.parmTransDate(_inventTrans.DateFinancial);

            SysTransactionScopeCache::set(classStr(CostInventoryEvent), key, event);
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventoryEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostInventoryEvent</c> for an <c>InventTrans</c> that is updated physically or financially.
    /// </summary>
    /// <param name="_costTransState">
    /// The <c>InventCostTransState</c> of the update.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> that is updated.
    /// </param>
    /// <returns>
    /// An instance of the <c>CostInventoryEvent</c> for an <c>InventTrans</c> that is updated physically or financially.
    /// </returns>
    public static CostInventoryEvent newInventoryEvent(
        InventCostTransState    _costTransState,
        InventTrans             _inventTrans)
    {
        CostInventoryEvent      event;

        switch (_costTransState)
        {
            case InventCostTransState::Physical:
                event = CostInventoryEvent::newPhysicalInventoryEvent(_inventTrans);
                break;
            case InventCostTransState::Financial:
                event = CostInventoryEvent::newFinancialInventoryEvent(_inventTrans);
                break;
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPhysicalInventoryEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the inventory event associated to physical update of an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// The inventory transaction.
    /// </param>
    /// <returns>
    /// The physical inventory event associated to a inventory transaction.
    /// </returns>
    public static CostInventoryEvent newPhysicalInventoryEvent(InventTrans _inventTrans)
    {
        CostInventoryEvent      event;

        CostOperatingEventType eventType = CostInventoryEvent::physicalInventoryEventType(_inventTrans);

        str key = CostInventoryEvent::createKey(_inventTrans.DataAreaId, eventType, _inventTrans.InventTransOrigin, _inventTrans.VoucherPhysical, _inventTrans.DatePhysical);

        event = SysTransactionScopeCache::get(classStr(CostInventoryEvent), key, event);

        if (!event)
        {
            event = CostInventoryEvent::newEventType(eventType);

            event.parmEventType(eventType);
            event.parmInventTransOriginId(_inventTrans.InventTransOrigin);
            event.parmVoucher(_inventTrans.VoucherPhysical);
            event.parmTransDate(_inventTrans.DatePhysical);

            SysTransactionScopeCache::set(classStr(CostInventoryEvent), key, event);
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReconciledEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the reconciled <c>CostInventoryEvent</c> for an <c>CostInventoryEvent</c> and <c>InventTrans</c>.
    /// </summary>
    /// <param name="_event">
    /// The <c>CostInventoryEvent</c> associated to the <c>InventTrans</c> that is updated.
    /// </param>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> that is updated.
    /// </param>
    /// <returns>
    /// An instance of the reconciled <c>CostInventoryEvent</c> for an <c>CostInventoryEvent</c> and <c>InventTrans</c>.
    /// </returns>
    public static CostInventoryEvent newReconciledEvent(
        CostInventoryEvent      _event,
        InventTrans             _inventTrans)
    {
        CostInventoryEvent  event;
        InventTrans         inventTrans;

        switch (classIdGet(_event))
        {
            case classNum(CostVendorInvoiceEvent):
                event = CostInventoryEvent::newPhysicalInventoryEvent(_inventTrans);
                break;
            case classNum(CostProductReceiptCorrectionEvent):
                select firstonly InventTransOrigin, VoucherPhysical, DatePhysical
                    from inventTrans
                    where inventTrans.InventTransOrigin == _inventTrans.InventTransOrigin
                        && inventTrans.PackingSlipId     == _inventTrans.PackingSlipId
                        && inventTrans.ItemId            == _inventTrans.ItemId
                        && inventTrans.InventDimId       == _inventTrans.InventDimId
                        && inventTrans.StatusReceipt     >  StatusReceipt::None
                        && inventTrans.StatusIssue       == StatusIssue::None
                        && !inventTrans.Voucher;

                event = CostInventoryEvent::newPhysicalInventoryEvent(inventTrans);
                break;
        }

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalInventoryEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the <c>CostOperatingEventType</c> for a physical update of a <c>InventTrans</c> buffer.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>InventTrans</c> buffer.
    /// </param>
    /// <returns>
    /// A <c>CostInventoryEventType</c>.
    /// </returns>
    private static CostOperatingEventType physicalInventoryEventType(InventTrans _inventTrans)
    {
        CostOperatingEventType  eventType;

        InventTransType inventTransType = InventTransOrigin::find(_inventTrans.InventTransOrigin).ReferenceCategory;

        switch (inventTransType)
        {
            case InventTransType::Purch:
                if (_inventTrans.PackingSlipId)
                {
                    if (_inventTrans.PackingSlipReturned)
                    {
                        if (_inventTrans.direction() == InventDirection::Issue)
                        {
                            eventType =  CostOperatingEventType::ProductReceiptCorrection;
                        }
                        else
                        {
                            if (_inventTrans.Voucher == _inventTrans.VoucherPhysical)
                            {
                                eventType =  CostOperatingEventType::ProductReturnCorrection;
                            }
                            else
                            {
                                // This event type is used for product receipt cancellation
                                eventType =  CostOperatingEventType::ProductReceipt;
                            }
                        }
                    }
                    else
                    {
                        if (_inventTrans.direction() == InventDirection::Receipt)
                        {
                            eventType =  CostOperatingEventType::ProductReceipt;
                        }
                        else
                        {
                            eventType =  CostOperatingEventType::ProductReturn;
                        }
                    }
                }
                else
                {
                    if (_inventTrans.direction() == InventDirection::Receipt)
                    {
                        eventType =  CostOperatingEventType::VendorDirectInvoice;
                    }
                    else
                    {
                        eventType =  CostOperatingEventType::VendorDirectCreditNote;
                    }
                }
                break;
        }

        return eventType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>