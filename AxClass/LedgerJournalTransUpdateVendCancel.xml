<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateVendCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class LedgerJournalTransUpdateVendCancel extends LedgerJournalTransUpdateVend
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInvoice</Name>
				<Source><![CDATA[
    boolean checkInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSettleVoucher</Name>
				<Source><![CDATA[
    boolean checkSettleVoucher(LedgerJournalTrans _ledgerJournalTrans, boolean _checkNoSettlement = false, LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        SpecTrans specTrans;
        VendTrans vendTrans;
        VendTransOpen vendTransOpen;
        LedgerJournalType ledgerJournalType = _ledgerJournalTrans.ledgerJournalTable().JournalType;

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::None && _checkNoSettlement)
        {
            // Journal transaction is designated as having no marked transactions
            if (SpecTrans::getSpecTransCount(
                    _ledgerJournalTrans.company(),
                    _ledgerJournalTrans.TableId,
                    _ledgerJournalTrans.RecId) > 0)
            {
                // There is a mismatch between the transactions marked and journal transaction setting
                if (_ledgerPostingMessageCollection)
                {
                    return _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS55515", _ledgerJournalTrans.parmAccount(), vendTrans.Voucher));
                }
                else
                {
                    return checkFailed(strFmt("@SYS55515", _ledgerJournalTrans.parmAccount(), vendTrans.Voucher));
                }
            }
        }
        else
        {
            while select crossCompany RecId from specTrans
                where specTrans.SpecCompany == _ledgerJournalTrans.company() &&
                    specTrans.SpecTableId == _ledgerJournalTrans.TableId &&
                    specTrans.SpecRecId == _ledgerJournalTrans.RecId
                join RecId from vendTransOpen
                    where specTrans.RefCompany == vendTransOpen.DataAreaId &&
                        specTrans.RefTableId == vendTransOpen.TableId &&
                        specTrans.RefRecId == vendTransOpen.RecId
                join AccountNum, Approved, Voucher, RecId from vendTrans
                    where vendTransOpen.RefRecId == vendTrans.RecId
            {
                if (vendTrans.RecId == 0 || vendTrans.AccountNum != _ledgerJournalTrans.parmAccount())
                {
                    // Approval journal cancellation does not support intercompany - the vendors do not match
                    if (_ledgerPostingMessageCollection)
                    {
                        return _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS19285", _ledgerJournalTrans.parmAccount(), vendTrans.Voucher));
                    }
                    else
                    {
                        return checkFailed(strFmt("@SYS19285", _ledgerJournalTrans.parmAccount(), vendTrans.Voucher));
                    }
                }
                else if (ledgerJournalType != LedgerJournalType::Approval && vendTrans.Approved)
                {
                    // VendTrans cannot be cancelled if it is already approved
                    if (_ledgerPostingMessageCollection)
                    {
                        return _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS28331", vendTrans.Voucher));
                    }
                    else
                    {
                        return checkFailed(strFmt("@SYS28331", vendTrans.Voucher));
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVoucher</Name>
				<Source><![CDATA[
    boolean checkVoucher(LedgerJournalTrans _ledgerJournalTrans,
                         LedgerVoucher _ledgerVoucher = null,
                         LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        if (_ledgerVoucher && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            this.reverseTax(_ledgerVoucher, _ledgerJournalTrans);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTax</Name>
				<Source><![CDATA[
    void reverseTax(LedgerVoucher _ledgerVoucher,
                    LedgerJournalTrans _ledgerJournalTrans)
    {
        AmountCur taxAmountCur;
        Voucher reverseVoucher;
        TransDate reverseTransDate;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        TaxReverseTax taxReverseTax;
        Map voucherMap;
        LedgerPostingController ledgerPostingController;
        CurrencyExchangeHelper exchangeRateHelper;

        taxReverseTax = new TaxReverseTax(_ledgerJournalTrans.Voucher, _ledgerJournalTrans.TransDate, _ledgerJournalTrans.Txt);

        select firstonly forupdate ledgerJournalVoucherChanged
        where ledgerJournalVoucherChanged.JournalNum == _ledgerJournalTrans.JournalNum &&
              ledgerJournalVoucherChanged.ToDate == _ledgerJournalTrans.TransDate &&
              ledgerJournalVoucherChanged.ToVoucher == _ledgerJournalTrans.Voucher;

        if (ledgerJournalVoucherChanged)
        {
            reverseTransDate = ledgerJournalVoucherChanged.FromDate;
            reverseVoucher = ledgerJournalVoucherChanged.FromVoucher;
        }
        else
        {
            reverseTransDate = _ledgerJournalTrans.TransDate;
            reverseVoucher = _ledgerJournalTrans.Voucher;
        }

        taxReverseTax.setExchRates(_ledgerJournalTrans.CurrencyCode,
                                   _ledgerJournalTrans.ExchRate,
                                   _ledgerJournalTrans.ExchRateSecond,
                                   Currency::noYes2UnknownNoYes(_ledgerJournalTrans.Triangulation));

        taxReverseTax.setReverseTableId(_ledgerJournalTrans.TableId);
        taxReverseTax.setReverseRecId(_ledgerJournalTrans.RecId);
        taxReverseTax.parmReportingCurrencyExchRate(_ledgerJournalTrans.ReportingCurrencyExchRate);

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher);

        // For invoice approval journals, use the voucher change record instead of the voucher map.
        // The voucher map may refer to a temporary voucher, but we should use the invoice register voucher.
        if (_ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::Approval)
        {
            voucherMap = ledgerPostingController.getJournal().parmTmpVoucherMap();
        }

        if (voucherMap)
        {
            taxAmountCur = taxReverseTax.calcAndPost(ledgerPostingController, voucherMap.lookup(reverseVoucher), reverseTransDate);
        }
        else
        {
            taxAmountCur = taxReverseTax.calcAndPost(ledgerPostingController, reverseVoucher, reverseTransDate);
        }

        this.postTaxReversalToISV(_ledgerJournalTrans);

        if (taxAmountCur &&
            _ledgerJournalTrans.parmOffsetLedgerDimension() &&
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        {
            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), reverseTransDate);
            exchangeRateHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
            exchangeRateHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);
            exchangeRateHelper.parmReportingExchangeRate1(_ledgerJournalTrans.ReportingCurrencyExchRate);
            exchangeRateHelper.parmReportingExchangeRate2(_ledgerJournalTrans.ReportingCurrencyExchRateSecondary);

            ledgerPostingController.addTrans(
                LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerPostingController.getReference(),
                    LedgerPostingType::LedgerJournal,
                    _ledgerJournalTrans.parmOffsetLedgerDimension(),
                    _ledgerJournalTrans.CurrencyCode,
                    -taxAmountCur,
                    exchangeRateHelper));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxReversalToISV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post reversed tax to ISV.
    /// </summary>
    /// <param name = "_ledgerJournalTransInvoiceApproval">The invoice apporval journal line <c>LedgerJournalTrans</c> record.</param>
    private void postTaxReversalToISV(LedgerJournalTrans _ledgerJournalTransInvoiceApproval)
    {
        if (TaxIntegrationUtils::isISVApiActivated(TaxServiceISVApiTypes::PostTax))
        {
            TaxIntegrationBusinessProcess businessProcess = TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(_ledgerJournalTransInvoiceApproval.TableId, _ledgerJournalTransInvoiceApproval.RecId);

            if (TaxIntegrationUtils::getTaxSolutionProviderTypeByBusinessProcess(businessProcess) == TaxSolutionProviderType::ISV)
            {
                TaxIntegrationCalculationInputPersisted::copyPackedTaxCalculationInputFromInvoiceRegisterForInvoicePosting(
                    LedgerJournalTrans::ledgerJournalTransRegister(_ledgerJournalTransInvoiceApproval),
                    _ledgerJournalTransInvoiceApproval,
                    _ledgerJournalTransInvoiceApproval.RecId,
                    TaxModuleType::Voucher);

                TaxIntegrationFacade::postTaxToISV(_ledgerJournalTransInvoiceApproval.TableId, _ledgerJournalTransInvoiceApproval.RecId, TaxModuleType::Voucher);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>