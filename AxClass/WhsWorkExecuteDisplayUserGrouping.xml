<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayUserGrouping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to manage user grouping work.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::UserGrouping)]
class WhsWorkExecuteDisplayUserGrouping extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findWorkTableByEnteredId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the work table by the entered ID.
    /// </summary>
    /// <returns>The work table if found; otherwise, null.</returns>
    protected WHSWorkTable findWorkTableByEnteredId()
    {
        WHSWorkTable whsWorkTable = WHSWorkTable::find(pass.lookup(#Id));

        if (!whsWorkTable)
        {
            whsWorkTable = this.findWorkByTargetLicensePlateId();
        }

        return whsWorkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetWorkId</Name>
				<Source><![CDATA[
    container buildGetWorkId(container _con, str _extraText = '')
    {
        container           ret = _con;

        if (!pass.exists(#InProcess))
        {
            ret += [this.buildControl(#RFLabel, 'ScanWorkId', 'Scan a Work Id', 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFLabel, 'InProgress', strFmt("@WAX1251", pass.lookup(#Counter)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        ret += [this.buildControl(#RFText, #WorkId, "@WAX273", 1, '', extendedTypeNum(WHSWorkId), '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        Set                     excludeLocationId = new Set(Types::String);
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        WMSLocationId           newLocationId;
        container               ret = conNull();
        container               con = _con;
        container               tmpCon;
        boolean                 addCancel = true;
        boolean                 addButtons = true;
        int                     hasError = 0;
        WHSRFPassthrough        globalPass;
        boolean                 recall;
        container               tmpPass;
        int                     groupingWorkNum = 1;

        globalPass = pass;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (globalPass.exists(#GroupingWorkNum)         &&
            pass.exists(#GroupingWorkNum)               &&
            globalPass.lookup(#GroupingWorkNum) != ''   &&
            pass.lookup(#GroupingWorkNum) != ''         &&
            globalPass.lookup(#GroupingWorkNum) != pass.lookup(#GroupingWorkNum))
        {
            pass.insert(#GroupingWorkNum, globalPass.lookup(#GroupingWorkNum));
        }

        pass = this.combineMaps(globalPass, pass);
        pass.remove(#AddCancel);
        pass.remove(#AddButtons);

        hasError = this.hasError(_con);

        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        if (_buttonClicked == #RFOverride)       // Override
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFFull && step != 0)  // Full (Split)
        {
            step = #SplitWork;
        }
        else if (_buttonClicked == #RFNoLocation)  // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
            }
            [newLocationId, tmpCon] = workExecute.findNewLocation(workLine, excludeLocationId);
            excludeLocationId = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
            if (pass.exists(#PrevStep))
            {
                step = pass.lookup(#PrevStep);
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }
        else if (_buttonClicked == #RFShortPick)  // Short Pick
        {
            pass.insert(#Initiation, '1');
            step = #ShortPick;
        }
        else if (_buttonClicked == #RFSkip)  // Skip
        {
            if (pass.isGroupPick())
            {
                pass.skipGroupedWorkLines();
            }
            else
            {
                WHSWorkLine::skipWorkLine(pass.lookup(#WorkId), pass.parmLineNum());                           
                pass.clearGroupPickFail();               
            }

            workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

            this.clearVerificationFields();

            pass.parmLineNum(workLine.LineNum);
            pass.insert(#DetermineStep, 1);
        }
        else if (_buttonClicked == #RFOverpick)
        {
            pass.insert(#PrevStep, step);
            step = #OverpickStep;
        }
        else if (_buttonClicked == #RFSplitPut)
        {
            this.validateSplitPutAllowed();
            step = #SplitPutWork;
        }

        if (_buttonClicked != #RFDone && !pass.exists(#UserGroupPut))
        {
            switch (step)
            {
                case 0:
                    if (pass.exists(#WorkComplete))
                    {
                        ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                        pass.remove(#Recall);
                        addCancel = false;
                    }
                    ret = this.buildGetWorkIdLicensePlateId(ret);
                    step = 1;
                    break;

                case 1:
                    hasError = this.hasError(con);
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    pass.insert(#Id, conPeek(conPeek(con, 4), #data));

                    if (pass.exists(#WorkComplete))
                    {
                        pass.remove(#WorkComplete);
                    }

                    if (!pass.exists(#Id) || pass.lookup(#Id) == '')
                    {
                        ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
                        ret = this.buildGetWorkIdLicensePlateId(ret);
                        addButtons = false;
                        break;
                    }

                    workTable = this.findWorkTableByEnteredId();

                    if (!workTable)
                    {
                        throw error("@WAX1081");
                    }
                    else
                    {
                        pass.insert(#WorkId, workTable.WorkId);
                        pass.remove(#Id);
                    }
                    if (workTable.InventLocationId != pass.lookup(#InventLocationId))
                    {
                        throw error("@WAX1239");
                    }
                    else if (!WHSWorkTable::validateWorkInCluster(workTable.WorkId))
                    {
                        throw error("@WAX3828");
                    }

                    if (WHSWorkGrouping::validateUserGrouping(pass.lookup(#WorkId), userId, pass.lookupStr(#WorkGroupingId)))
                    {
                        pass.insert(#WorkGroupingId, WHSWorkGrouping::createGroupingRecord(pass.lookup(#WorkId)));
                        pass.insert(#GroupingWorkNum, groupingWorkNum);
                        step = #stepMax;
                        pass.insert(#DetermineStep, 1);
                        ret = this.displayForm(con);
                    }
                    else
                    {
                        throw error("@WAX1260");
                    }
                    break;
                    
                case 2:
                    hasError = this.hasError(con);
                    if (hasError)
                    {
                        con = conDel(con, 3, 1);
                    }

                    pass.insert(#Id, conPeek(conPeek(con, 4), #data));

                    if (pass.exists(#WorkComplete))
                    {
                        pass.remove(#WorkComplete);
                    }

                    if (!pass.exists(#Id) || pass.lookup(#Id) == '')
                    {
                        ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
                        pass.insert(#AddCancel, 1);
                        ret = this.buildGetWorkIdLicensePlateId(ret);
                        ret += [this.buildControl(#RFButton, #RFDone, "@SYS112206", 1, '', #WHSRFUndefinedDataType, '', 0)];
                        addButtons = false;
                        break;
                    }

                    workTable = this.findWorkTableByEnteredId();

                    if (!workTable)
                    {
                        throw error("@WAX1081");
                    }
                    else
                    {
                        pass.insert(#WorkId, workTable.WorkId);
                        pass.remove(#Id);
                    }
                    if (workTable.InventLocationId != pass.lookup(#InventLocationId))
                    {
                        throw error("@WAX1239");
                    }
                    else if (!WHSWorkTable::validateWorkInCluster(workTable.WorkId))
                    {
                        throw error("@WAX3828");
                    }

                    if (WHSWorkGrouping::exist(pass.lookup(#WorkGroupingId), pass.lookup(#WorkId)))
                    {
                        throw error("@WAX:WorkIdAlreadyExist");
                    }
                    else if (WHSWorkGrouping::validateUserGrouping(pass.lookup(#WorkId), userId, pass.lookup(#WorkGroupingId)))
                    {
                        WHSWorkGrouping::createGroupingRecord(pass.lookup(#WorkId), pass.lookup(#WorkGroupingId));
                        step = #stepMax;
                        pass.insert(#DetermineStep, 1);

                        groupingWorkNum = str2int(pass.lookup(#GroupingWorkNum));
                        ++groupingWorkNum;
                        pass.insert(#GroupingWorkNum, groupingWorkNum);

                        ret = this.displayForm(con);
                    }
                    else
                    {
                        throw error("@WAX1260");
                    }
                    break;
                    
                default:
                    if (pass.exists(#WorkId) || step == #WorkAuditTemplate)
                    {
                        if (step == #WorkAuditTemplate && pass.exists(#AuditWorkId))
                        {
                            workLine = WHSWorkTable::getLastWorkLine(pass.lookup(#AuditWorkId));
                            pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);
                        }
                        else
                        {
                            workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                        }

                        if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                        {
                            WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), workLine.WorkId);

                            if (pass.exists(#WorkId))
                            {
                                pass.remove(#WorkId);
                            }

                            throw error("@WAX1459");
                        }

                        if (workLine && 
                            workLine.WorkType == WHSWorkType::Put &&
                            step != #WorkAuditTemplate)
                        {
                            addButtons = false;
                            addCancel = false;
                            pass.insert(#AddCancel, 1);
                            pass.insert(#AddButtons, 1);
                            pass.remove(#WorkId);
                            ret = conNull();
                            ret = this.buildGetWorkIdLicensePlateId(ret);
                            ret = this.addDoneButton(ret, true);
                            step = 2;
                            break;
                        }
                        else if (workLine)
                        {
                            workTable = workLine.whsWorkTable();
                            con = conPoke(con, 2, pass.pack());
                            [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(tmpPass);

                            if (step == #Restart)
                            {
                                step = 0;
                            }
                            else if (step == #StepOne)
                            {
                                step = #StepMax;
                                pass.insert(#DetermineStep, 1);
                            }

                            if (recall)
                            {
                                con = this.updateModeStepPass(con, mode, step, pass);
                                con = conPoke(con, 1, [mode, step]);
                                workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                                ret = workExecuteDisplay.displayForm(con);
                                pass = new WHSRFPassthrough(Types::String, Types::String);
                                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                                if (pass.exists(#WorkId) && pass.exists(#LineNum))
                                {
                                    workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                                    workTable = workLine.whsWorkTable();
                                }
                            }
                        }
                        else
                        {
                            throw error("@WAX859");
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                    break;
            }
        }
        else
        {
            workLine = this.getNextWorkLineInGrouping();
            
            if (workLine)
            {
                do
                {
                    if (pass.exists(#AuditWorkId) && step == #WorkAuditTemplate)
                    {
                        workLine = WHSWorkTable::getLastWorkLine(pass.lookup(#AuditWorkId));
                        pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);

                        if (pass.exists(#DetermineStep))
                        {
                            pass.remove(#DetermineStep);
                        }
                    }

                    if (pass.exists(#WorkComplete))
                    {
                        pass.remove(#WorkComplete);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    pass.insert(#UserGroupPut, 1);
                    workTable = workLine.whsWorkTable();
                    con = conPoke(con, 2, pass.pack());
                    [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                    pass = new WHSRFPassthrough(Types::String, Types::String);
                    pass = WHSRFPassthrough::create(tmpPass);

                    if (step == #Restart)
                    {
                        if (pass.exists(#WorkGroupingId) && pass.exists(#PrevWorkId))
                        {
                            WHSWorkGrouping::deleteWorkId(pass.lookup(#WorkGroupingId), pass.lookup(#PrevWorkId));
                        }
                    }
                    else if (step == #StepOne)
                    {
                        step = #StepMax;
                        pass.insert(#DetermineStep, 1);
                    }

                    if (recall)
                    {
                        con = this.updateModeStepPass(con, mode, step, pass);
                        con = conPoke(con, 1, [mode, step]);
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);

                        if (step == #WorkAuditTemplate && pass.exists(#AuditWorkId))
                        {
                            pass.insert(#Recall, 1);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                        }

                        pass.insert(#UserGroupPut, 1);
                        pass.insert(#DetermineStep, 1);
                        if (menuItemTable.GroupPutaway                                                                      &&
                            WHSWorkGrouping::validateGroupPutaway(pass.lookup(#WorkGroupingId), pass.lookup(#UserId))       &&
                            !pass.exists(#GroupPutawayFail)                                                                 &&
                            (!pass.exists(#PrevStep) || pass.lookup(#PrevStep) != WHSWorkExecuteDisplay::num2StrDisplay(#OverrideStep2)))
                        {
                            pass.insert(#GroupPutaway, 1);
                        }
                        workLine = this.getNextWorkLineInGrouping();
                    }
                }
                while (recall
                    && workLine);
            }

            if (recall)
            {
                pass = new WHSRFPassthrough(Types::String, Types::String);
                pass = WHSRFPassthrough::create(conPeek(ret, 2));
                if (pass.exists(#WorkId) && pass.exists(#LineNum))
                {
                    workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    workTable = workLine.whsWorkTable();
                }
            }

            if (!workLine)
            {
                // if no workline is available, it means we exhausted all the work lines, so work is completed
                step = 1;
                ret = conNull();
                ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                if (pass.exists(#WorkGroupingId))
                {
                    pass.remove(#WorkGroupingId);
                }
                if (pass.exists(#GroupPutawayFail))
                {
                    pass.remove(#GroupPutawayFail);
                }
                // If restarting, need to remove target lp that might have been saved from group puts
                if (pass.exists(#TargetLicensePlateId))
                {
                    pass.remove(#TargetLicensePlateId);
                }
                ret = this.buildGetWorkIdLicensePlateId(ret);
                pass.insert(#AddButtons, 1);
                pass.remove(#UserGroupPut);
            }
        }
        if (step > 1 && addButtons && !pass.exists(#AddButtons))
        {
            if (ret == conNull())
            {
                ret = _con;
            }
            
            if (pass.exists(#GroupPutaway))
            {
                addLPOverride = false;
            }

            ret = this.addButtons(ret);
        }
        else if (addCancel && !pass.exists(#AddCancel))
        {
            if (ret == conNull())
            {
                ret = _con;
            }

            ret = this.addCancelButton(ret, 1, true);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextWorkLineInGrouping</Name>
				<Source><![CDATA[
    private WHSWorkLine getNextWorkLineInGrouping()
    {
        WHSWorkLine nextWorkline;

        if (pass.exists(#WorkGroupingId))
        {
            nextWorkline = WHSWorkGrouping::getNextGroupingWorkLine(pass.lookup(#WorkGroupingId), userId);
        }

        return nextWorkline;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>