<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterDatabaseRelCell</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterDatabasRelCell</c> class that writes the session XML for the rows in a
/// database relation table constraint cell.
/// </summary>
class PcXmlSessionWriterDatabaseRelCell
{
    PCMetadataHelper metadataHelper;

    #PC
    #PCTableConstraint
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        metadataHelper = PCMetadataHelper::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMetadataHelper</Name>
				<Source><![CDATA[
    public PCMetadataHelper parmMetadataHelper(PCMetadataHelper _metadataHelper = metadataHelper)
    {
        metadataHelper = _metadataHelper;

        return metadataHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the content of a table constraint cell.
    /// </summary>
    /// <param name="_xmlWriter">An instance of the <c>PCXmlWriter</c> class.</param>
    /// <param name="_record">A record of the source table.</param>
    /// <param name="_columnFieldId">The field ID of the current column in the source table.</param>
    /// <param name="_attributeDataType">The attribute data type of the current column in the source table.</param>
    public void writeIL(
        PCXmlWriter         _xmlWriter,
        Common              _record,
        FieldId             _columnFieldId,
        AttributeDataType   _attributeDataType
        )
    {
        str stringValue;

        // write the cell
        _xmlWriter.writeStartElement(#Cell);
        if (tableColumnType(_record, _columnFieldId) == Types::Enum)
        {
            if (AttributeDataTypeDiscriminator::checkAttributeDataTypeTrueFalse(_attributeDataType))
            {
                _xmlWriter.writeRaw(_record.(_columnFieldId) == NoYes::Yes ? #CapTrue : #CapFalse);
            }
            else
            {
                _xmlWriter.writeRaw(metadataHelper.getEnumSymbol(_record.TableId, _columnFieldId, _record));
            }
        }
        else if (tableColumnType(_record, _columnFieldId) == Types::Integer)
        {
            _xmlWriter.writeRaw(int2str(_record.(_columnFieldId)));
        }
        else // type string
        {
            stringValue = any2str(_record.(_columnFieldId));

            // replace any blank values in the source table with the blank macro value
            stringValue = stringValue == #emptyString ? #BlankValue : stringValue;

            _xmlWriter.writeString(stringValue);
        }

        _xmlWriter.writeEndElement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterDatabaseRelCell construct()
    {
        return new PCXmlSessionWriterDatabaseRelCell();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>