<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckUnPost_StaffListChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckUnPost_StaffListChange extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEmplOnPosition</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkEmplOnPosition(RHRMOrderTrans _orderTrans)
    {
        RHRMStaffList           rhrmStaffListLocal;
        RHRMStaffListHistory    rhrmStaffListHistory;
        RHRMStaffListEmploy     emplCount;
        boolean                 ret = true;

        rhrmStaffListLocal = RHRMStaffList::find(_orderTrans.StaffListRefRecId);
        rhrmStaffListHistory = RHRMStaffListHistory::findLast(_orderTrans.StaffListRefRecId, _orderTrans.StartDate, _orderTrans.RecId);

        emplCount = rhrmStaffListLocal.staffListEmploy(_orderTrans.StartDate);

        if (rhrmStaffListHistory.StaffListFactor < emplCount && !RHRMParameters::find().AllowOverdraft)
        {
            ret = checkFailed(strFmt("@RUP2514", _orderTrans.titleId()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLaterOrder</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkLaterOrder(RHRMOrderTrans _orderTrans)
    {
        RHRMStaffListHistory  rhrmStaffListHistoryLocal;
        boolean               ret = true;

        select firstonly RecId from rhrmStaffListHistoryLocal
            where rhrmStaffListHistoryLocal.StaffListRefRecId   == _orderTrans.StaffListRefRecId &&
                  rhrmStaffListHistoryLocal.StartDate           >= _orderTrans.StartDate &&
                  rhrmStaffListHistoryLocal.OrderTransRecId     != _orderTrans.RecId;

        if (rhrmStaffListHistoryLocal.RecId != 0)
        {
            if ( rhrmStaffListHistoryLocal.StartDate >= _orderTrans.StartDate )
                ret = checkFailed(strFmt("@RUP2515",
                                          _orderTrans.titleId(),
                                          _orderTrans.OrganizationId,
                                          _orderTrans.organizationDescription(),
                                          rhrmStaffListHistoryLocal.StartDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrganization</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkOrganization(RHRMOrderTrans _orderTrans)
    {
        RPayHRMOrganization rPayHRMOrganization;
        boolean             ret = true;

        select firstonly Active from rPayHRMOrganization
            where  rPayHRMOrganization.HrmOrganizationId == _orderTrans.OrganizationId;

        if ( !rPayHRMOrganization.Active )
        {
            ret = checkFailed(strFmt("@RUP2517",
                                     rPayHRMOrganization.HrmOrganizationId, rPayHRMOrganization.Description));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiveTransferOrder</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkReceiveTransferOrder(RHRMOrderTrans _orderTrans)
    {
        RPayHistory rPayHistory;
        boolean     ret = true;

        select firstonly RecId from rPayHistory
            where rPayHistory.StartDate >= _orderTrans.StartDate &&
                  rPayHistory.hrmStaffListRefRecId == _orderTrans.StaffListRefRecId &&
                  (rPayHistory.OperationType == RHRMJournalType::Receive ||
                   rPayHistory.OperationType == RHRMJournalType::Transfer);

        if ( rPayHistory.RecId != 0 )
        {
            ret = checkFailed(strFmt("@RUP2516",
                                      _orderTrans.titleId(),
                                      _orderTrans.OrganizationId,
                                      _orderTrans.organizationDescription()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
        protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean         ret;
        RHRMOrderTrans  rhrmOrderTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        ret = ret && this.checkLaterOrder(rhrmOrderTrans);

        ret = ret && this.checkReceiveTransferOrder(rhrmOrderTrans);

        ret = ret && this.checkOrganization(rhrmOrderTrans);

        ret = ret && this.checkEmplOnPosition(rhrmOrderTrans);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans          rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMStaffListHistory    rhrmStaffListHistory;
        RHRMWorkCondClassUpdater rHRMWorkCondClassUpdater;

        super(_journalTransData);

        rhrmStaffListHistory = RHRMStaffListHistory::findByOrderTransRecId(rhrmOrderTrans.RecId, true);

        if (rhrmStaffListHistory)
        {
            rHRMWorkCondClassUpdater = RHRMWorkCondClassUpdater::newStaffListHistory(rHRMStaffListHistory.data());
            rhrmStaffListHistory.delete();
            rHRMWorkCondClassUpdater.deleteStaffListHistory();
        }
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>