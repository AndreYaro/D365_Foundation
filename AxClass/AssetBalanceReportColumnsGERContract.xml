<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalanceReportColumnsGERContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The data contract class for the <c>AssetBalanceReportColumns</c> GER report.
/// </summary>
[DataContractAttribute]
[SysOperationContractProcessingAttribute(classStr(AssetBalanceReportColumnsGERUIBuilder))]
[SysOperationGroupAttribute('Book', "@SYS95794", '1')]
[SysOperationGroupAttribute('Period', "@SYS40", '2')]
[SysOperationGroupAttribute('Currency', "@SYS129076", '3')]
public final class AssetBalanceReportColumnsGERContract extends ERFormatMappingRunBaseContract implements SysOperationValidatable
{
    private boolean visibleFR;
    private FromDate fromDate;
    private ToDate toDate;
    private AssetBookMergeId assetBookId;
    private LedgerCurrencySelection ledgerCurrencySelection;
    private str query;
    private ERFormatMappingId formatMapping;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAssetBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter AssetBookId.
    /// </summary>
    /// <param name="_assetBookId">
    /// The new value of the datacontract parameter AssetBookId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter AssetBookId.
    /// </returns>
    [
        DataMemberAttribute(identifierStr(AssetBookId)),
        SysOperationGroupMemberAttribute('Book'),
        SysOperationDisplayOrderAttribute('1'),
        Hookable(false)
    ]
    public AssetBookMergeId parmAssetBookId(AssetBookMergeId _assetBookId = assetBookId)
    {
        assetBookId = _assetBookId;
        return assetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the from date.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <returns>
    ///  The value of from Date.
    /// </returns>
    [
        DataMemberAttribute(identifierStr(FromDate)),
        SysOperationLabelAttribute(literalstr("@SYS5209")),
        SysOperationHelpTextAttribute(literalstr("@SYS5209")),
        SysOperationGroupMemberAttribute('Period'),
        SysOperationDisplayOrderAttribute('1'),
        Hookable(false)
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    ///  The current value of toDate.
    /// </returns>
    [
        DataMemberAttribute(identifierStr(ToDate)),
        SysOperationLabelAttribute(literalstr("@SYS179583")),
        SysOperationHelpTextAttribute(literalstr("@SYS179583")),
        SysOperationGroupMemberAttribute('Period'),
        SysOperationDisplayOrderAttribute('2'),
        Hookable(false)
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencySelection</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('CurrencySelection'),
        SysOperationLabelAttribute(literalstr("@SYS129076")),
        SysOperationHelpTextAttribute(literalstr("@FixedAssets:FA_Reports_CurrencySelectionText")),
        SysOperationGroupMemberAttribute('Currency'),
        SysOperationDisplayOrderAttribute('1')
    ]
    internal LedgerCurrencySelection parmCurrencySelection(LedgerCurrencySelection _ledgerCurrencySelection = ledgerCurrencySelection)
    {
        ledgerCurrencySelection = _ledgerCurrencySelection;
        return ledgerCurrencySelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the <C>ledgerCurrencySelection</C> parameter as a string such that it can be mapped in GER.
    /// </summary>
    /// <returns>
    /// The value of the <C>ledgerCurrencySelection</C> parameter as a string.
    /// </returns>
    [Hookable(false)]
    public str parmCurrencyType()
    {
        if (ledgerCurrencySelection == LedgerCurrencySelection::Reporting)
        {
            return "@SYS29141";
        }
        else
        {
            return "@SYS83782";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVisibleFR</Name>
				<Source><![CDATA[
    [DataMemberAttribute(identifierStr(VisibleFR))]
    internal boolean parmVisibleFR(boolean _visibleFR = visibleFR)
    {
        visibleFR = _visibleFR;
        return visibleFR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatMapping</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute('FormatMapping'),
        SysOperationLabelAttribute(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationHelpTextAttribute(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationDisplayOrderAttribute('1')
    ]
    internal ERFormatMappingId parmFormatMapping(ERFormatMappingId _formatMapping = formatMapping)
    {
        formatMapping = _formatMapping;
        return formatMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        AifQueryTypeAttribute('_query', querystr(AssetBalanceReportColumns))
    ]
    internal str parmQuery(str _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the report parameters.
    /// </summary>
    /// <returns>
    ///    true if no errors; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public final boolean validate()
    {
        boolean isValid = true;

        if (!fromDate)
        {
            isValid = checkFailed("@SYS91557");
        }
        else if (!toDate)
        {
            isValid = checkFailed("@SYS90868");
        }
        else if (toDate < fromDate)
        {
            isValid = checkFailed("@SYS312567");
        }

        if (!assetBookId)
        {
            isValid = checkFailed("@SYS97526");
        }
        else if (!AssetBookTable::exist(assetBookId))
        {
            isValid = checkFailed("@SYS127871", assetBookId);
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>