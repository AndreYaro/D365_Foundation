<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgRestoreJournalLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    When the <c>JmgRestoreJournalLines</c> class is running, it restores journal registrations for a
///    specified employee and date.
/// </summary>
/// <remarks>
///    It is possible to edit <see cref="T:JmgStampJournalTrans" /> lines before they are calculated. Run
///    the <c>JmgRestoreJournalLines</c> class if the original journal lines are re-created and are based
///    on the raw registrations made by the employee.
/// </remarks>
class JmgRestoreJournalLines extends RunBase
{
    RecId   jmgStampJournalTableRecId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        jmgStampJournalTableRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a class that contains the methods described by the <see cref="T:RunBaseDialogable" />
    ///    interface.
    /// </summary>
    /// <param name="dialog">
    ///    An already initialized dialog can be passed.
    /// </param>
    /// <param name="forceOnClient">
    ///    Specifies whether the dialog must be instantiated on the client.
    /// </param>
    /// <returns>
    ///    The <c>RunBaseDialogable</c> object.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using either the <see cref="T:Dialog" /> system or a class created in the
    ///    AOT. The <c>JmgRestoreJournalLines</c> class sets the caption on the dialog.
    /// </remarks>
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        Dialog ret = this.dialogInternal(dialog, forceOnClient);

        ret.caption("@SYS39998");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>JmgRestoreJournalLines</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>JmgRestoreJournalLines</c> class.
    /// </returns>
    public container pack()
    {
        container ret = [#CurrentVersion, #CurrentList];
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Restores journal lines based on the original raw registrations.
    /// </summary>
    /// <remarks>
    ///       Journal lines are restored based on the original raw registrations that were made by the employee. An error is thrown if one or more of the following conditions exist:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Registrations have already been calculated for the specified employee and
    ///          day.</description>
    ///       </item>
    ///       <item>
    ///          <description>The day is locked by the employee (for example, the employee is entering registrations
    ///          through the Electronic Timecard form).</description>
    ///       </item>
    ///       <item>
    ///          <description>A journal line exists on the specified employee and day.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public void run()
    {
        JmgTermReg              jmgTermReg;
        JmgEmployee             jmgEmployee;
        JmgTimecardTrans        jmgTimecardTrans;
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgStampJournalTable    jmgStampJournalTable;
        super();

        jmgStampJournalTable = JmgStampJournalTable::findRecId(jmgStampJournalTableRecId);
        if (jmgStampJournalTable.Calculated     == NoYes::Yes)
        {
            throw error("@SYS39108");
        }
        else if (jmgStampJournalTable.Locked    == NoYes::Yes)
        {
            throw error(strfmt("@SYS21617",strfmt("@SYS53184",HcmWorker::find(jmgStampJournalTable.Worker).PersonnelNumber,date2StrUsr(jmgStampJournalTable.ProfileDate, DateFlags::FormatAll))));
        }
        else if ((select firstonly RecId from jmgStampJournalTrans
                      where jmgStampJournalTrans.Worker         == jmgStampJournalTable.Worker  &&
                            jmgStampJournalTrans.ProfileDate    == jmgStampJournalTable.ProfileDate).RecId)
        {
            throw error(strfmt("@SYS39894", HcmWorker::find(jmgStampJournalTable.Worker).PersonnelNumber, date2StrUsr(jmgStampJournalTable.ProfileDate, DateFlags::FormatAll)));
        }

        ttsbegin;

        jmgEmployee = JmgEmployee::find(jmgStampJournalTable.Worker);

        if (jmgEmployee.UseTimecard == NoYes::Yes)
        {
            while select jmgTimecardTrans
                where jmgTimecardTrans.Worker       == jmgStampJournalTable.Worker  &&
                      jmgTimecardTrans.ProfileDate  == jmgStampJournalTable.ProfileDate
            {
                jmgStampJournalTrans.initFromTimecardTrans(jmgTimecardTrans);
                jmgStampJournalTrans.insert();
            }
        }
        else
        {
            while select jmgTermReg
                order by RegDateTime asc
                where jmgTermReg.Worker             == jmgStampJournalTable.Worker  &&
                      jmgTermReg.ProfileDate        == jmgStampJournalTable.ProfileDate
            {
                jmgTermReg.createUpdateJournal();
            }
        }

        JmgTransaction::postChanges(jmgStampJournalTable);

        JmgChangeLog::deleteLogEntriesForWorkerOnDate(jmgStampJournalTable.Worker, jmgStampJournalTable.ProfileDate);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;
        Integer version = conpeek(packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;
            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgRestoreJournalLines</c> class
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgRestoreJournalLines</c> class.
    /// </returns>
    public static JmgRestoreJournalLines construct()
    {
        return new JmgRestoreJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39998";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>JmgRestoreJournalLines</c> class when it is called from a menu
    ///    item.
    /// </summary>
    /// <param name="_args">
    ///    The arguments for the <c>JmgRestoreJournalLines</c> class.
    /// </param>
    /// <remarks>
    ///       Use the
    ///    <c>
    ///       main
    ///    </c>
    ///       class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///       method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static void main(Args _args)
    {
        if (_args           &&
            _args.caller()  &&
            _args.dataset() == tablenum(JmgStampJournalTable))
        {
            JmgRestoreJournalLines jmgRestoreJournalLines = new JmgRestoreJournalLines();
            jmgRestoreJournalLines.getLast();
            jmgRestoreJournalLines.setJmgStampJournalTableRecId(_args.record().RecId);
            if (jmgRestoreJournalLines.prompt())
            {
                jmgRestoreJournalLines.runOperation();
                _args.caller().dataSource().active();
            }
        }
        else
        {
            throw error(Error::missingRecord(classstr(JmgRestoreJournalLines)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgStampJournalTableRecId</Name>
				<Source><![CDATA[
    protected void setJmgStampJournalTableRecId(RecId _jmgStampJournalTableRecId)
    {
        jmgStampJournalTableRecId = _jmgStampJournalTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>