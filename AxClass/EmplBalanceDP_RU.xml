<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplBalanceDP_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Report Data Provider <c>EmplBalanceDP_RU</c> class for ssrs <c>EmplBalance_RU</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(EmplBalance_RU)),
    SRSReportParameterAttribute(classstr(EmplBalanceContract_RU))
]
class EmplBalanceDP_RU extends SRSReportDataProviderBase
{
    private const str LocalizationFeatureReference = 'EEU-00047';
    EmplBalanceTmp_RU   emplBalanceTmp_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplBalanceTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records from the <c>EmplBalanceTmp_RU</c> temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>EmplBalanceTmp_RU</c>.
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(EmplBalanceTmp_RU))
    ]
    public EmplBalanceTmp_RU getEmplBalanceTmp_RU()
    {
        return emplBalanceTmp_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                queryRun;
        Boolean                 showCurrency;
        ToDate                  todate;
        EmplTrans_RU            emplTrans;
        Boolean                 isTransactionsPrinted;
        HcmWorker               hcmWorker;
        HcmWorkerGroup_RU       hcmWorkerGroup_RU;
        HcmTitle                hcmTitle;
        EmplBalance_RU          emplBalanceMST;
        EmplBalance_RU          emplBalanceCur;
        EmployeeTable_RU        localEmplTable;
        EmplBalanceContract_RU  contract;

        contract = this.parmDataContract() as EmplBalanceContract_RU;

        showCurrency = contract.parmShowCurrency();
        toDate       = contract.parmToDate();

        emplBalanceMST = new EmplBalanceMST_RU(toDate);

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            localEmplTable    = queryRun.get(tablenum(EmployeeTable_RU));
            hcmWorkerGroup_RU = queryRun.get(tablenum(HcmWorkerGroup_RU));
            hcmTitle          = queryRun.get(tablenum(HcmTitle));
            hcmWorker         = queryRun.get(tablenum(HcmWorker));

            emplBalanceMST.calc(localEmplTable.EmployeeId);

            emplBalanceTmp_RU.clear();
            emplBalanceTmp_RU.EmplId            = localEmplTable.EmployeeId;
            emplBalanceTmp_RU.Name              = hcmWorker.name();
            emplBalanceTmp_RU.HcmWorkerGroup_RU = hcmWorkerGroup_RU.EmployeeGroupId;
            emplBalanceTmp_RU.Title             = hcmTitle.TitleId;
            emplBalanceTmp_RU.BalanceMST        = (emplBalanceMST.amountMST() +
                                                   emplBalanceMST.amountMSTExchAdj());

            isTransactionsPrinted = false;

            if (showCurrency)
            {
                emplBalanceCur = new EmplBalanceCur_RU(toDate);

                while select CurrencyCode from emplTrans
                  group by CurrencyCode
                  where emplTrans.EmplAccount == localEmplTable.EmployeeId
                    && emplTrans.TransDate <= toDate
                {
                    emplBalanceCur.parmCurrencyCode(emplTrans.CurrencyCode);
                    emplBalanceCur.calc(localEmplTable.EmployeeId);

                    if (!emplBalanceCur.amountCur())
                    {
                        continue;
                    }

                    emplBalanceTmp_RU.CurrencyCode  = emplBalanceCur.parmCurrencyCode();
                    emplBalanceTmp_RU.AmountCur     = emplBalanceCur.amountCur();
                    emplBalanceTmp_RU.AmountMST     = emplBalanceCur.amountMST();
                    emplBalanceTmp_RU.insert();

                    isTransactionsPrinted = true;
                }
            }

            if (!isTransactionsPrinted)
            {
                emplBalanceTmp_RU.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>