<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleReassignmentWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanRuleReassignmentWizard</c> class contains the logic that is used in the wizard for the
/// reassignment of kanbans to alternative kanban rules.
/// </summary>
public class LeanRuleReassignmentWizard extends SysWizard
{
    InventDimCtrl_Frm       inventDimFormSetup;
    InventDimAxFormAdapter  inventDimFormAdapter;
    FormDataSource          inventDim;
    Args                    args;

    Set                     kanbans;
    KanbanRule              kanbanRule;

    Map                     mapReassignedKanbans; // map kanban.RecId -> set new kanban.RecIds
    MapEnumerator           meReassignedKanbans;
    Set                     setReassignedKanbans;
    SetEnumerator           seReassignedKanbans;
    KanbanRefRecId          currentResultKanbanRecId;
    KanbanRefRecId          currentResultReassignedKanbanRecId;

    boolean                 wizardCancelled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the menu item that opens the wizard.
    /// </summary>
    /// <returns>The menu item that opens the wizard.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemDisplayStr(LeanRuleReassignmentWizard),MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current kanban rule of the kanbans to be reassigned.
    /// </summary>
    /// <returns>The current kanban rule of the kanbans to be reassigned.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule currentKanbanRule()
    {
        return this.firstKanban().kanbanRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentResultKanbanRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current kanban result.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>Kanban</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRefRecId currentResultKanbanRecId()
    {
        return currentResultKanbanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentResultReassignedKanbanRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current new kanban result.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>Kanban</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRefRecId currentResultReassignedKanbanRecId()
    {
        return currentResultReassignedKanbanRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
        protected void enableButtons(boolean _setFocus = true)
    {
        boolean validRule = kanbanRule.RecId;

        super();

        finishButton.enabled(validRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first kanban to be reassigned.
    /// </summary>
    /// <returns>The first kanban to be reassigned.</returns>
    private Kanban firstKanban()
    {
        if (kanbans && kanbans.elements())
        {
            SetEnumerator se = kanbans.getEnumerator();
            se.moveNext();

            RefRecId kanbanRecId = se.current();

            return Kanban::find(kanbanRecId);
        }

        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the result enumerator to the first result.
    /// </summary>
    /// <returns>
    ///    true if at least one result exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean firstResult()
    {
        boolean result;

        if (!wizardCancelled)
        {
            if (!mapReassignedKanbans)
            {
                this.run();
            }

            meReassignedKanbans = mapReassignedKanbans.getEnumerator();
            result              = meReassignedKanbans.moveNext();
            if (result)
            {
                setReassignedKanbans               = meReassignedKanbans.currentValue();
                seReassignedKanbans                = setReassignedKanbans.getEnumerator();
                result                             = seReassignedKanbans.moveNext();
                currentResultKanbanRecId           = result ? any2int64(meReassignedKanbans.currentKey()) : 0;
                currentResultReassignedKanbanRecId = result ? any2int64(seReassignedKanbans.current()) : 0;
            }
            else
            {
                currentResultKanbanRecId           = 0;
                currentResultReassignedKanbanRecId = 0;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the form name of the wizard.
    /// </summary>
    /// <returns>The form name of the wizard.</returns>
    public formName formName()
    {
        return formStr(LeanRuleReassignmentWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFinishPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the wizard has a Finish page.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean hasFinishPage()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWelcomePage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the wizard has a Welcome page.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean hasWelcomePage()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables.
    /// </summary>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean     result = super();

        if (result)
        {
            mapReassignedKanbans = new Map(Types::Int64,Types::Class);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves the result enumerator to the next result.
    /// </summary>
    /// <returns>
    ///    true if a next result exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean nextResult()
    {
        boolean result;

        if (!meReassignedKanbans)
        {
            result = this.firstResult();
        }
        else
        {
            result = seReassignedKanbans.moveNext();
            if (result)
            {
                currentResultReassignedKanbanRecId = any2int64(seReassignedKanbans.current());
            }
            else
            {
                result = meReassignedKanbans.moveNext();
                if (result)
                {
                    setReassignedKanbans               = meReassignedKanbans.currentValue();
                    seReassignedKanbans                = setReassignedKanbans.getEnumerator();
                    result                             = seReassignedKanbans.moveNext();
                    currentResultKanbanRecId           = result ? any2int64(meReassignedKanbans.currentKey()) : 0;
                    currentResultReassignedKanbanRecId = result ? any2int64(seReassignedKanbans.current()) : 0;
                }
                else
                {
                    currentResultKanbanRecId           = 0;
                    currentResultReassignedKanbanRecId = 0;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedMapReassignedKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a map that relates a set of kanban record IDs to a set of reassigned kanban record IDs.
    /// </summary>
    /// <returns>
    /// A Map of kanban record IDs to a set of reassigned kanban record IDs.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container packedMapReassignedKanbans()
    {
        if (   !mapReassignedKanbans
            && !wizardCancelled)
        {
            this.run();
        }

        return mapReassignedKanbans.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public FormDataSource parmInventDim(FormDataSource _inventDim = inventDim)
    {
        inventDim = _inventDim;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventDimForm</c> object that is used for dimensions setup in the kanban list.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimForm </c> object that is used for dimensions setup.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDimCtrl_Frm parmInventDimFormSetup()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Set parmKanbans(Set _kanbans = kanbans)
    {
        kanbans = _kanbans;

        return kanbans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        if (this.init())
        {
            // Filter by the list of kanbans specified
            SetEnumerator se = kanbans.getEnumerator();
            while (se.moveNext())
            {
                RefRecId kanbanRecId = se.current();
                LeanRuleReassignment leanRuleReassignment = LeanRuleReassignment::newStandard(Kanban::find(kanbanRecId),kanbanRule);
                if (leanRuleReassignment.run())
                {
                    setReassignedKanbans = Set::create(leanRuleReassignment.packedSetReassignedKanbans());
                    if (   setReassignedKanbans
                        && setReassignedKanbans.elements())
                    {
                        mapReassignedKanbans.insert(kanbanRecId,setReassignedKanbans);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runMain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the wizard and executes the business logic.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void runMain()
    {
        wizardCancelled = !this.prompt();

        if (!wizardCancelled)
        {
            this.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers design updates to create or update the <c>InventDimFormSetup</c> values.
    /// </summary>
    /// <param name="_mode">
    /// An <c>InventDimFormDesignUpdate</c> value that specifies what type of action this is.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// An invalid parameter is passed.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateDesign(InventDimFormDesignUpdate _mode)
    {
        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init:
                if (!inventDimFormSetup)
                {
                    Set set = new Set(Types::String);
                    set.add(inventDim.name());
                    inventDimFormSetup  = InventDimCtrl_Frm::construct();
                    inventDimFormAdapter = InventDimAxFormAdapter::newFromForm(formRun);
                    inventDimFormSetup.parmCallingElement(inventDimFormAdapter);
                    inventDimFormSetup.parmValidDataSources(set);
                    inventDimFormSetup.init();
                }

            case InventDimFormDesignUpdate::Active:
                inventDimFormSetup.formActiveSetup();
                inventDimFormSetup.formSetControls(true);
                break;

            default:
                throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the new  kanban rule if it is valid.
    /// </summary>
    /// <param name="_newKanbanRule">
    ///    An alternative <c>KanbanRule</c> record buffer.
    /// </param>
    /// <returns>
    ///    true if the alternative rule is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateKanbanRule(KanbanRule _newKanbanRule)
    {
        Kanban          kanban              = this.firstKanban();

        boolean validRule = LeanRuleReassignment::validateRuleToReassign(kanban,_newKanbanRule);

        if (validRule)
        {
            this.parmKanbanRule(_newKanbanRule);
        }

        this.enableButtons();

        return validRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        public boolean validate()
    {
        boolean             ok = true;

        SetEnumerator se = kanbans.getEnumerator();
        se.moveNext();

        // The first kanban validates the rule too
        RefRecId kanbanRecId = se.current();
        Kanban kanban = Kanban::find(kanbanRecId);
        ok = ok && LeanRuleReassignment::validateRuleToReassign(kanban, kanbanRule);
        ok = ok && LeanRuleReassignment::validateKanbanToReassign(kanban);

        // The rest of the kanbans are assumed to be under the same rule
        while (se.moveNext())
        {
            kanbanRecId = se.current();
            kanban      = Kanban::find(kanbanRecId);
            ok = ok && LeanRuleReassignment::validateKanbanToReassign(kanban);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static LeanRuleReassignmentWizard construct()
    {
        return new LeanRuleReassignmentWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        LeanRuleReassignmentWizard wizard = LeanRuleReassignmentWizard::newStandard(_args);

        wizard.runMain();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static LeanRuleReassignmentWizard newStandard(Args _args)
    {
        LeanRuleReassignmentWizard  leanRuleReassignmentWizard = LeanRuleReassignmentWizard::construct();

        if (   !_args
            || !_args.object())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        leanRuleReassignmentWizard.parmArgs(_args);
        leanRuleReassignmentWizard.parmKanbans(_args.object());

        return leanRuleReassignmentWizard;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
