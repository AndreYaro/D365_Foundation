<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundShipmentWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSOutboundShipmentWorkTransactionType</c> abstract class handles logic specific to
/// the outbound work transaction that is being shipped to external parties.
/// </summary>
public abstract class WHSOutboundShipmentWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>orderLineByInventTransId</Name>
				<Source><![CDATA[
    internal abstract WHSOutboundShippableOrderLineMap orderLineByInventTransId(InventTransId _inventTransId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLineByLoadLineRefRecId</Name>
				<Source><![CDATA[
    internal abstract WHSOutboundShippableOrderLineMap orderLineByLoadLineRefRecId(RefRecId _loadLineRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOutbound</Name>
				<Source><![CDATA[
    public boolean isOutbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForShipment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isForShipment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAllowingAssigningTargetLPForHandledByLP</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isAllowingAssigningTargetLPForHandledByLP()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWholeLPWithChildrenPrevented</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWholeLPWithChildrenPrevented()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveAccountNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canHaveAccountNumber()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlankSerialNumberAssignmentAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isBlankSerialNumberAssignmentAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemRelatedPicking</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isItemRelatedPicking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialNumberAssignmentEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isSerialNumberAssignmentEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveReservationFromWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canMoveReservationFromWorkLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveInSalesSerialProcess</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isActiveInSalesSerialProcess()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkSplittingAllowed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWorkSplittingAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverPickSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOverPickSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinalPutLocationRequirements</Name>
				<Source><![CDATA[
    public WHSMessage validateFinalPutLocationRequirements(
        WMSLocation         _location,
        WHSLocationProfile  _locationProfile)
    {
        return this.validateFinalPutLocation(_location, _locationProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        WHSOutboundShippableOrderLineMap orderLine = this.orderLineByInventTransId(_whsWorkLine.InventTransId);

        if (PdsGlobal::pdsIsCWItem(orderLine.itemId))
        {
            return [orderLine.pdsCWQty, orderLine.pdsCWRemainInventPhysical];
        }

        return [orderLine.orderedQuantity, orderLine.remainOrderedQuantity];
    }

]]></Source>
			</Method>
			<Method>
				<Name>expectedSerialNumberQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventQty expectedSerialNumberQty(WhsWorkLine _whsWorkLine)
    {
        WHSOutboundShippableOrderLineMap orderLine = this.orderLineByInventTransId(_whsWorkLine.InventTransId);

        return PdsGlobal::pdsIsCWItem(orderLine.itemId)
            ? orderLine.pdsCWQty
            : orderLine.OrderedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippingOverpickHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a shipping overpick is possible from the handling quantity.
    /// </summary>
    /// <param name = "_workLine">The work line to be checked.</param>
    /// <param name = "_overpickInventHandlingQty">The quantity in the handling unit that is being overpicked.</param>
    /// <returns>
    /// true if the handling quantity is within an acceptable range; otherwise, an exception is thrown.
    /// </returns>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the validateShippingOverpick method.
    /// </remarks>
    [Wrappable(true)]
    protected boolean validateShippingOverpickHandlingQuantity(
        WHSWorkLine         _workLine,
        InventHandlingQty   _overpickInventHandlingQty)
    {
        WHSOutboundShippableOrderLineMap orderLine = this.orderLineByLoadLineRefRecId(_workLine.LoadLineRefRecId);
        
        boolean useCWValues = PdsGlobal::pdsIsCWItem(orderLine.itemId);

        InventHandlingQty curHandlingQty = useCWValues ? orderLine.pdsCWRemainInventPhysical : orderLine.remainInventQuantity;

        InventMovement movement = InventMovement::construct(orderLine);
        InventHandlingQty physicalHandlingNow = -curHandlingQty - _overpickInventHandlingQty;

        if (useCWValues)
        {
            return movement.checkNotOverDelivery(0, true, physicalHandlingNow);
        }

        return movement.checkNotOverDelivery(physicalHandlingNow, true, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        this.resetWaveWhenWorkIsCancelled(_workTable.WaveId);

        WHSContainerTable::deleteRelatedToWorkContainersCreatedByContainerization(_workTable.WorkId);

        if (this.parmDecrementLoadLineWorkCreatedQty())
        {
            this.updateLoadLinesWhenWorkIsCanceled(_workTable.WorkId);
        }

        WHSWorkTable::updateWorkStatusToCancelledForOriginWork(_workTable.WorkId);

        this.cancelReplenishmentWork(_workTable.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ajust the container lines for the workline.
    /// </summary>
    /// <param name = "_workLine">The workline to cancel.</param>
    /// <param name = "_inventQty">The quantity to cancel.</param>
    [Hookable(false)]
    internal void adjustContainerLine(WHSWorkLine _workLine, InventHandlingQty _inventQty)
    {
        WHSContainerTable containerTable = WHSContainerTable::findByContainerId(_workLine.ContainerId);
        if (containerTable.RecId && containerTable.ContainerBuildId)
        {
            // Should update the container line and container weight, if the full qty of the workline is cancelled the container line will be deleted.
            WHSContainerLine::adjustQuantityBasedOnWorkLine(_workLine, _inventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNonMarkedTransaction</Name>
				<Source><![CDATA[
    private boolean existsNonMarkedTransaction(InventTransId _inventTransId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select firstonly RecId from inventTrans
            where inventTrans.MarkingRefInventTransOrigin == 0
        exists join inventTransOrigin
            where inventTransOrigin.InventTransId == _inventTransId
                && inventTransOrigin.RecId == inventTrans.InventTransOrigin;

        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderTransHandlingQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update order transactions with over picked quantity.
    /// </summary>
    /// <param name="_workLine">
    /// The work line that is being over picked.
    /// </param>
    /// <param name="_inventDiffHandlingQty">
    /// The quantity that is being overpicked in handling units.
    /// </param>
    /// <param name="_workLineInventHandlingQty">
    /// The quantity on the work line in handling units.
    /// </param>
    /// <remarks>
    /// The method is an extension and is not meant to be called directly. Callers should call the adjustOrderTrans method.
    /// </remarks>
    [Wrappable(true)]
    protected void adjustOrderTransHandlingQuantities(
        WHSWorkLine         _workLine,
        InventHandlingQty   _inventDiffHandlingQty,
        InventHandlingQty   _workLineInventHandlingQty)
    {
        WHSOutboundShippableOrderLineMap orderLine = this.orderLineByInventTransId(_workLine.InventTransId);
        
        ttsbegin;
        ItemId itemId = orderLine.itemId;
        InventHandlingUnitId inventHandlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
        InventMovement movement = InventMovement::construct(orderLine);
         
        Qty overpickUnitQty = this.overPickUnitQtyConvert(orderLine.unitOfMeasureSymbol, itemId, orderLine.inventDimId, _inventDiffHandlingQty, inventHandlingUnitId);
        // Update line quantities to update transactions.
        if (PdsGlobal::pdsIsCWItem(itemId))
        {
            movement.pdsCWAddRemainPhysical(-_inventDiffHandlingQty);
            movement.addRemainPhysical(PdsCatchWeight::inventQty(itemId, -_inventDiffHandlingQty));
        }
        else
        {
            movement.addRemainPhysical(-_inventDiffHandlingQty);
        }
        
        movement.addRemainPhysicalUnit(-overpickUnitQty);
        
        movement.updateBuffer(false);

        if (this.existsNonMarkedTransaction(_workLine.InventTransId))
        {
            // Reserve overpicked quantity.
            // Reservation should always be necessary because auto reservation is skipped when lines are updated, except in the case when marking is used.
            // In that case, the updated transaction is already reserved.
            this.reserveOverpick(movement, _inventDiffHandlingQty, _workLine.InventDimId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overPickUnitQtyConvert</Name>
				<Source><![CDATA[
    private Qty overPickUnitQtyConvert(
        UnitOfMeasureSymbol _symbol,
        ItemId _itemId,
        InventDimId _inventDimId,
        InventHandlingQty _inventDiffHandlingQty,
        InventHandlingUnitId _inventHandlingUnitId)
    {
        Qty overPickUnitQty;
        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        if (releasedProductUnitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(_inventHandlingUnitId),
                                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(_symbol),
                                                                    _itemId,
                                                                    _inventDimId))
        {
            overPickUnitQty = releasedProductUnitConverter.convert(_inventDiffHandlingQty,
                                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(_inventHandlingUnitId),
                                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(_symbol),
                                                                        NoYes::No,
                                                                        _itemId,
                                                                        _inventDimId,
                                                                        NoYes::Yes);
        }

        return overPickUnitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::Shipping;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>