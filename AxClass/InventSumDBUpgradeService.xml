<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDBUpgradeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventSumDBUpgradeService
{
    private SysSQLStatementText sqlStatement;
    private System.Diagnostics.Stopwatch stopwatch;
    private int64 maximumExecutionTimeInMilliseconds;
    private real maximumExecutionTimeInHours;
    private InventInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final void run(InventSumDBUpgradeContract _dataContract)
    {
        #OCCRetryCount
        #TimeConstants

        //If feature flighting is off, skip updating data
        if (!InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            return;
        }

        if (InventSumInventDimEnable::hasDataUpgradeCompleted())
        {
            return;
        }

        if (_dataContract)
        {
            maximumExecutionTimeInHours = _dataContract.parmMaximumExecutionTimeInHours();
        }
        else
        {
            maximumExecutionTimeInHours = 0;
        }

        maximumExecutionTimeInMilliseconds = any2Int64(maximumExecutionTimeInHours * #MillisecondsPerHour);
        logger = InventInstrumentationLogger::createLogger(classStr(InventSumDBUpgradeService));
        
        if (this.hasDataUpgradeCompleted())
        {
            if (InventSumInventDimDataUpdateToggle::instance().isEnabled())
            {
                InventSumInventDimEnable::markDataUpgradeComplete();
            }
            return;
        }
      
        if (maximumExecutionTimeInMilliseconds > 0)
        {
            stopwatch = System.Diagnostics.Stopwatch::StartNew();
        }

        try
        {
            using (var activityContext = logger.inventSumDBUpgradeService().logMeasure(funcName()))
            {
                this.upgradeInventSumFromInventDim();                    
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeInventSumFromInventDim</Name>
				<Source><![CDATA[
    private void upgradeInventSumFromInventDim()
    {      
        sqlStatement = this.getInventSumUpgradeSqlStmt();
            
        while (!this.isMaxExecutionTimeReached())
        {
            Connection connection;
            Statement statement;

            try
            {            
                connection= new Connection();

                new SqlStatementExecutePermission(sqlStatement).assert();
                Map parameters = SqlParams::create();
                statement = connection.createStatement();
                statement.executeUpdateWithParameters(sqlStatement, parameters);
                if (this.hasDataUpgradeCompleted())
                {
                    break;
                }
            }
            finally
            {
                CodeAccessPermission::revertAssert();
                if (statement)
                {
                    statement.close();
                }

                if (connection)
                {
                    connection.finalize();
                }
            }            
        }
           
        if (this.hasDataUpgradeCompleted() && InventSumInventDimDataUpdateToggle::instance().isEnabled())
        {
            InventSumInventDimEnable::markDataUpgradeComplete();
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSumUpgradeSqlStmt</Name>
				<Source><![CDATA[
    private SysSQLStatementText getInventSumUpgradeSqlStmt()
    {
        #InventDimDevelop

        SysSqlSystem sqlSystem = new SysSqlSystem();
        SysSQLStatementText sqlStmt ='UPDATE TOP(5000) DBO.INVENTSUM'
            + ' SET INVENTSUM.CONFIGID = INVENTDIM.CONFIGID,'
            + ' INVENTSUM.INVENTSIZEID = INVENTDIM.INVENTSIZEID,'
            + ' INVENTSUM.INVENTCOLORID = INVENTDIM.INVENTCOLORID,'
            + ' INVENTSUM.INVENTSTYLEID = INVENTDIM.INVENTSTYLEID,'
            + ' INVENTSUM.INVENTSITEID = INVENTDIM.INVENTSITEID,'
            + ' INVENTSUM.INVENTLOCATIONID = INVENTDIM.INVENTLOCATIONID,'
            + ' INVENTSUM.INVENTBATCHID = INVENTDIM.INVENTBATCHID,'
            + ' INVENTSUM.WMSLOCATIONID = INVENTDIM.WMSLOCATIONID,'
            + ' INVENTSUM.WMSPALLETID = INVENTDIM.WMSPALLETID,'
            + ' INVENTSUM.LICENSEPLATEID = INVENTDIM.LICENSEPLATEID,'
            + ' INVENTSUM.INVENTSTATUSID = INVENTDIM.INVENTSTATUSID,'
            + ' INVENTSUM.INVENTSERIALID = INVENTDIM.INVENTSERIALID,'
            + ' INVENTSUM.INVENTDIMENSION1 = INVENTDIM.INVENTDIMENSION1,'
            + ' INVENTSUM.INVENTDIMENSION2 = INVENTDIM.INVENTDIMENSION2,'
            + ' INVENTSUM.INVENTDIMENSION3 = INVENTDIM.INVENTDIMENSION3,'
            + ' INVENTSUM.INVENTDIMENSION4 = INVENTDIM.INVENTDIMENSION4,'
            + ' INVENTSUM.INVENTDIMENSION5 = INVENTDIM.INVENTDIMENSION5,'
            + ' INVENTSUM.INVENTDIMENSION6 = INVENTDIM.INVENTDIMENSION6,'
            + ' INVENTSUM.INVENTDIMENSION7 = INVENTDIM.INVENTDIMENSION7,'
            + ' INVENTSUM.INVENTDIMENSION8 = INVENTDIM.INVENTDIMENSION8,'
            + ' INVENTSUM.INVENTDIMENSION9 = INVENTDIM.INVENTDIMENSION9,'
            + ' INVENTSUM.INVENTDIMENSION10 = INVENTDIM.INVENTDIMENSION10,'
            + ' INVENTSUM.INVENTGTDID_RU = INVENTDIM.INVENTGTDID_RU,'
            + ' INVENTSUM.INVENTPROFILEID_RU = INVENTDIM.INVENTPROFILEID_RU,'
            + ' INVENTSUM.INVENTOWNERID_RU = INVENTDIM.INVENTOWNERID_RU,'
            + ' INVENTSUM.INVENTVERSIONID = INVENTDIM.INVENTVERSIONID,'
            + ' INVENTSUM.INVENTDIMENSION11 = INVENTDIM.INVENTDIMENSION11,'
            + ' INVENTSUM.INVENTDIMENSION12 = INVENTDIM.INVENTDIMENSION12'
            + ' FROM DBO.INVENTSUM JOIN DBO.INVENTDIM \n'
            + ' ON INVENTSUM.PARTITION = INVENTDIM.PARTITION'
            + ' AND INVENTSUM.DATAAREAID = INVENTDIM.DATAAREAID'
            + ' AND INVENTSUM.INVENTDIMID = INVENTDIM.INVENTDIMID'
            + ' WHERE INVENTSUM.INVENTSITEID = \'\''
            + ' AND INVENTSUM.PARTITION = '
            + sqlSystem.sqlLiteral(getcurrentpartitionrecid())
            + ' ';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaxExecutionTimeReached</Name>
				<Source><![CDATA[
    private boolean isMaxExecutionTimeReached()
    {
        if (maximumExecutionTimeInMilliseconds > 0 && maximumExecutionTimeInMilliseconds < stopwatch.ElapsedMilliseconds)
        {
            info(strFmt("@SCM:MaxExecutionTimeOfhoursIsReachedForOnHandUpgrade", maximumExecutionTimeInHours));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDataUpgradeCompleted</Name>
				<Source><![CDATA[
    private boolean hasDataUpgradeCompleted()
    {
        DataArea dataArea;      
        while select Id from dataArea
            where !dataArea.isVirtual
        {
            changecompany(dataArea.Id)
            {
                InventSum inventSum;
                InventDim inventDim;
                InventDimId inventDimIdBlank = InventDim::inventDimIdBlank();
                select firstonly RecId from inventSum
                    where inventSum.InventdimId != inventDimIdBlank
                       && inventSum.InventSiteId == ''
                    exists join inventDim
                    where inventDim.InventDimId == inventSum.InventDimId;

                if (inventSum.RecId)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>