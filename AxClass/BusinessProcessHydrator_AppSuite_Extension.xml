<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessProcessHydrator_AppSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of <c>BusinessProcessHydrator</c>, which is used for retail business process.
/// </summary>
[ExtensionOf(classStr(BusinessProcessHydrator))]
final class BusinessProcessHydrator_AppSuite_Extension
{
    private BusinessProcessName name;
    private RetailBusinessProcessWorkerRecId hcmWorker;
    private RetailChannelRecId retailChannel;
    private RetailBusinessProcessRecId processId;
    private BusinessProcessHeaderRecId headerId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public BusinessProcessName parmName(BusinessProcessName _value = name)
    {
        name = _value;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailBusinessProcess</Name>
				<Source><![CDATA[
    public RetailBusinessProcessRecId parmRetailBusinessProcess(RetailBusinessProcessRecId _value = processId)
    {
        processId = _value;
        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChannelRecId</Name>
				<Source><![CDATA[
    public RetailChannelRecId parmChannelRecId(RetailChannelRecId _value = retailChannel)
    {
        retailChannel = _value;
        return retailChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorkerRecId</Name>
				<Source><![CDATA[
    public RetailBusinessProcessWorkerRecId parmHcmWorkerRecId(RetailBusinessProcessWorkerRecId _value = hcmWorker)
    {
        hcmWorker = _value;
        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessHeader</Name>
				<Source><![CDATA[
    protected BusinessProcessHeader createProcessHeader()
    {
        ttsbegin;

        BusinessProcessHeader header = next createProcessHeader();
        
        if (header.GenericSubtype == BusinessProcessGenericSubtype::Retail)
        {
            headerId = header.RecId;
            header.Name = name;
            header.HcmWorker = hcmWorker;
            header.RetailChannel = retailChannel;
            header.RetailBusinessProcess = processId;
            header.IsAdhoc = NoYes::No;
            header.update();
        }
        
        ttscommit;
        
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessTasks</Name>
				<Source><![CDATA[
    protected void createProcessTasks()
    {
        ttsbegin;
        
        next createProcessTasks();

        if (headerId)
        {
            BusinessProcessHeader header = BusinessProcessHeader::find(headerId);
            if (header.GenericSubtype == BusinessProcessGenericSubtype::Retail)
            {
                BusinessProcessTask processTask;
                BusinessProcessTemplateTask templateTask;

                update_recordset processTask
                setting ContactWorker = templateTask.ContactWorker
                where processTask.ProcessHeader == headerId
            join templateTask
                where templateTask.RecId == processTask.TemplateTask;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>