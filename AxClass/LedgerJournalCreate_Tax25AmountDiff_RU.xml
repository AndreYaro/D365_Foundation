<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Tax25AmountDiff_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalCreate_Tax25AmountDiff_RU extends LedgerJournalCreate_Tax25_RU
{
    #AviFiles
    #define.SettlementDate(1)
    #define.AmountDifferenceIncome(5)
    #define.AmountDifferenceExpense(7)
    #define.ContractNumber(3)
    #define.DocumentDate(4)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans(JournalId  _journalNum)
    {
        SysOperationProgress          operationProgress;
        RTax25RegisterId              regId = RTax25RegisterTable::find(RTax25RegisterType::AmountDifference).RegisterId;
        RTax25RegisterJournalTable    journalTable;
        RTax25RegisterJournalTrans    journalTrans;
        LineNum                       lineNum;
        LedgerJournalTrans            ledgerJournalTrans;

        CustVendExchAdjParm_W         exchAdjParm;
        RTax25ExchAdjDimension        rTax25ExchAdjDimension;
        AmountMST                     amountDiff;
        Sign                          sign;
        ModuleCustVend                moduleCustVend;

        CustVendTrans                 custVendTrans,
                                      offsetCustVendTrans;

        LedgerParameters              ledgerParameters    = LedgerParameters::find();
        LedgerDimensionDefaultAccount defaultAccount;
        LedgerDimensionDefaultAccount offsetDefaultAccount  = LedgerCurrencyParameters_RU::findLedger(Ledger::current()).TaxAmountDiffLedgerDimension;
        DimensionDefault              defaultDimension;
        RTax25Query                   query;

        this.createVoucher(_journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strfmt("@SYS26868", "@GLS111963", registerJournalTable.EndDate));
        operationProgress.setAnimation(#AviUpdate);

        ttsbegin;

        while select TableId from journalTable
            where journalTable.EndDate == registerJournalTable.EndDate
        join journalTrans
            where journalTrans.JournalNum          == journalTable.JournalNum &&
                  journalTrans.FiscalYear          == journalTable.FiscalYear &&
                  journalTrans.PeriodType          == journalTable.PeriodType &&
                  journalTrans.PeriodNum           == journalTable.PeriodNum  &&
                  ! journalTrans.Cancelled                                    &&
                  journalTrans.RegisterId          == regId
        {
            query = RTax25Query::newParameters(RTax25RegisterType::AmountDifference,
                                               journalTrans,
                                               ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                               regId,
                                                                               journalTrans.PeriodType,
                                                                               journalTrans.PeriodNum,
                                                                               journalTrans.FiscalYear));
            if (query.first())
            {
                do
        {
            ledgerJournalTrans.clear();
            ledgerJournalTrans.LineNum           = lineNum;
            ledgerJournalTrans.JournalNum        = _journalNum;
            ledgerJournalTrans.Voucher           = voucher;
            ledgerJournalTrans.CurrencyCode      = CompanyInfoHelper::standardCurrency();
            ledgerJournalTrans.TransDate         = query.getField(#SettlementDate);
            ledgerJournalTrans.ExchRate          = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
            ledgerJournalTrans.AccountType       = LedgerJournalACType::Ledger;
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;

                    if (query.getRecord().RefTableId == tablenum(CustTrans))
            {
                custVendTrans       = new DictTable(tablenum(CustTrans)).makeRecord();
                offsetCustVendTrans = new DictTable(tablenum(CustTrans)).makeRecord();
                        ledgerJournalTrans.CustTransId = query.getRecord().RefRecId;
            }
            else
            {
                custVendTrans       = new DictTable(tablenum(VendTrans)).makeRecord();
                offsetCustVendTrans = new DictTable(tablenum(VendTrans)).makeRecord();
                        ledgerJournalTrans.VendTransId = query.getRecord().RefRecId;
            }

            select firstonly custVendTrans
                        where custVendTrans.TableId == query.getRecord().RefTableId &&
                              custVendTrans.RecId   == query.getRecord().RefRecId;

            select firstonly offsetCustVendTrans
                        where offsetCustVendTrans.TableId == query.getRecord().RefTableId &&
                      offsetCustVendTrans.RecId   == custVendTrans.OffsetRecId;

                    moduleCustVend = query.getRecord().RefTableId == tablenum(CustTrans) ? ModuleCustVend::Cust : ModuleCustVend::Vend;

            exchAdjParm                     = CustVendExchAdjParm_W::newFromParm(offsetCustVendTrans,
                                                                                    true,
                                                                                    false,
                                                                                    LedgerTransType::ExchAdjustment,
                                                                                    custVendTrans.Prepayment);
            rTax25ExchAdjDimension          = exchAdjParm.rTax25ExchAdjDimension();
            sign                            = moduleCustVend == ModuleCustVend::Cust ? 1 : -1;

                    if (query.getField(#AmountDifferenceIncome) != 0)
            {
                rTax25ExchAdjDimension.parmExchAdjType(RTax25ExchAdjType::Gain);
                        amountDiff                          = query.getField(#AmountDifferenceIncome);
                ledgerJournalTrans.AmountCurCredit  = amountDiff;
            }
            else
            {
                rTax25ExchAdjDimension.parmExchAdjType(RTax25ExchAdjType::Loss);
                        amountDiff                          = query.getField(#AmountDifferenceExpense);
                ledgerJournalTrans.AmountCurDebit   = amountDiff;
                amountDiff                          = - amountDiff;
            }

            defaultAccount = exchAdjParm.amountDiffLedgerDimension(false, sign * amountDiff);
            defaultDimension = rTax25ExchAdjDimension.getDefaultDimension(custVendTrans.DefaultDimension);

            ledgerJournalTrans.parmLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(defaultAccount, defaultDimension));
            ledgerJournalTrans.parmOffsetLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount, defaultDimension));

            ledgerJournalTrans.Txt                  = "@GLS111941";

            ledgerJournalTrans.AccountAgreementId_RU = AgreementHeaderExt_RU::findByDefaultDimension(custVendTrans.DefaultDimension).AgreementId;

                    ledgerJournalTrans.DocumentNum           = query.getField(#ContractNumber);
                    ledgerJournalTrans.DocumentDate          = query.getField(#DocumentDate);

            ledgerJournalTrans.insert();

            lineNum ++;
        }
                while (query.next());
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@GLS111962";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>