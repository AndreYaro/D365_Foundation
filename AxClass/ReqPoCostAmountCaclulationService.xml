<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPoCostAmountCaclulationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqPoCostAmountCaclulationService</c> is responsible for calculating cost amounts
/// for planned orders.
/// </summary>
public class ReqPoCostAmountCaclulationService
{
    private const int maxUpdateConflictRetries = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost for all planned orders for the given <c>PlanVersion</c> that meet
    /// the criteria specified in the contract.
    /// </summary>
    /// <param name = "_contract">The contract describing the cost calculation job.</param>
    public void calculateCostAmount(ReqPoCostAmountCalculationContract _contract)
    {
        ReqPlanVersion planVersion = ReqPlanVersion::findActiveReqPlanId(_contract.parmPlanId(), curext(), true);
        ReqPlanData reqPlanData = ReqPlanData::newReqPlanId(planVersion.ReqPlanId);

        ItemId previousItemId;
        InventDimId previousCovInventDimId;
        CostPrice costPrice;
        
        Query query = _contract.parmQuery();
        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(ReqPO));
        qbds.update(true);

        SysQuery::findOrCreateRange(qbds, fieldNum(ReqPO, PlanVersion)).value(queryValue(planVersion.RecId));
        QueryRun queryRun = new QueryRun(query);

        ReqTmpCalculatedReqPoCost tmpCostCalculation;

        RecordInsertList tmpCostList = new RecordInsertList(tableNum(ReqTmpCalculatedReqPoCost), true, true, true, true, true, tmpCostCalculation);

        while (queryRun.next())
        {
            ReqPO reqPO = queryRun.get(tablenum(ReqPO));

            if (reqPO.ItemId != previousItemId || reqPO.CovInventDimId != previousCovInventDimId)
            {
                costPrice = reqPlanData.newReqSetupDimReqPo(reqPO).costPricePcs();
                previousItemId = reqPO.ItemId;
                previousCovInventDimId = reqPO.CovInventDimId;
            }

            tmpCostCalculation.clear();

            this.populateTmpCostCalculation(tmpCostCalculation, reqPO, costPrice);

            tmpCostList.add(tmpCostCalculation);
        }

        tmpCostList.insertDatabase();

        try
        {
            ReqPO reqPOTable;
        
            reqPOTable.skipAosValidation(true);
            reqPOTable.skipDataMethods(true);

            ttsbegin;

            update_recordset reqPOTable
                setting CostAmount = tmpCostCalculation.CostAmount
                    join tmpCostCalculation
                    where reqPOTable.RecId == tmpCostCalculation.ReqPoRecId &&
                          reqPOTable.Qty == tmpCostCalculation.Qty &&
                          reqPOTable.PlanVersion == planVersion.RecId;

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        int planVersionUpdateConflictCounter = 0;

        try
        {
            ttsbegin;

            planVersion.reread();
            planVersion.LastCostCalculationDateTime = DateTimeUtil::getSystemDateTime();
            planVersion.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (planVersionUpdateConflictCounter < maxUpdateConflictRetries)
            {
                planVersionUpdateConflictCounter++;
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpCostCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the fields in a <c>ReqTmpCalculatedReqPoCost</c> record, based on the given
    /// planned purchase order and cost price.
    /// </summary>
    /// <param name = "_tmpCostCalculation">The record to populate.</param>
    /// <param name = "_reqPO">The planned purchase order to base the temporary calculation on.</param>
    /// <param name = "_costPrice">The cost price per unit for the given purchase order.</param>
    protected void populateTmpCostCalculation(
        ReqTmpCalculatedReqPoCost _tmpCostCalculation,
        ReqPO _reqPO,
        CostPrice _costPrice)
    {
        _tmpCostCalculation.Qty = _reqPO.Qty;
        _tmpCostCalculation.ReqPoRecId = _reqPO.RecId;
        _tmpCostCalculation.CostAmount = CurrencyExchangeHelper::amount(_costPrice * _reqPO.Qty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>