<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttCalendarCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttCalendarCollection
{
    List            listCalendars;
    ListEnumerator  listEnumeratorGlobal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteDataFromAllCalendars</Name>
				<Source><![CDATA[
    public void deleteDataFromAllCalendars()
    {
        GanttCalendar   ganttCalendar;
        ganttCalendar = this.findFirst();

        while (ganttCalendar != null)
        {
            ganttCalendar.deleteAllData();

            ganttCalendar = this.findNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    public int elements()
    {
        return listCalendars.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCalendarName</Name>
				<Source><![CDATA[
    public GanttCalendar findCalendarName(Name      _calendarName,
                                          boolean   _throwErrorIfNotFound = false)
    {
        GanttCalendar   ganttCalendar;
        ListEnumerator  listEnumerator;

        listEnumerator = listCalendars.getEnumerator();

        while (listEnumerator && listEnumerator.moveNext())
        {
            ganttCalendar = listEnumerator.current();

            if (ganttCalendar.parmCalendarName() == _calendarName)
            {
                return ganttCalendar;
            }
        }

        if (_throwErrorIfNotFound)
        {
            throw error(GanttCalendar::txtNotFound(_calendarName));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    public GanttCalendar findFirst()
    {
        listEnumeratorGlobal = listCalendars.getEnumerator();

        if (listEnumeratorGlobal && listEnumeratorGlobal.moveNext())
        {
            return listEnumeratorGlobal.current();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    public GanttCalendar findNext()
    {
        if (listEnumeratorGlobal == null)
        {
            throw error(strfmt("@SYS19306", funcname()));
        }

        if (listEnumeratorGlobal && listEnumeratorGlobal.moveNext())
        {
            return listEnumeratorGlobal.current();
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public boolean insert(GanttCalendar _ganttCalendar)
    {
        if (!_ganttCalendar)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        return listCalendars.addEnd(_ganttCalendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        listCalendars = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttCalendarCollection construct()
    {
        return new GanttCalendarCollection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>