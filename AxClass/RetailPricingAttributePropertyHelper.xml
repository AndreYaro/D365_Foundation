<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingAttributePropertyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for attribute-typed pricing properties.
/// </summary>
internal class RetailPricingAttributePropertyHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAttributeProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the attribute-typed pricing properties for given property level.
    /// </summary>
    /// <param name = "_propertyLevel">The property level.</param>
    /// <param name = "_propertySource">The property source.</param>
    /// <returns>A container of the attribute-typed pricing properties.</returns>
    internal static container getAttributeProperties(RetailPricingPropertyLevel _propertyLevel, RetailPricingPropertySource _propertySource)
    {
        container properties;
        RetailPricingPropertyDefinition property;
        while select property
            where property.PropertyLevel == _propertyLevel
                && property.PropertyType == RetailPricingPropertyType::EcoResAttribute
                && property.PropertySource == _propertySource
                && property.Status == RetailPricingPropertyProcessStatus::Published
        {
            properties += property;
        }

        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultEcoResAttributeValuesForPricingSimulator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create default EcoResAttribute values for given attribute-typed properties for the usage of pricing simulator.
    /// </summary>
    /// <param name = "_attributeProperties">The attribute-typed properties.</param>
    /// <param name = "_instance">The instance for retail pricing simulator.</param>
    /// <remarks>Support property sources SalesOrderHeader and SalesOrderLine only. </remarks>
    internal static void createDefaultEcoResAttributeValuesForPricingSimulator(container _attributeProperties, RetailPricingSimulatorInstanceValue _instance)
    {
        for (int i = 1; i <= conLen(_attributeProperties); i ++) // We expect < 10 properties, so the performance is fine to process one by one.
        {
            RetailPricingPropertyDefinition attributeProperty = conPeek(_attributeProperties, i);
            if (attributeProperty.PropertyType != RetailPricingPropertyType::EcoResAttribute
                || (attributeProperty.PropertySource != RetailPricingPropertySource::SalesOrderHeader && attributeProperty.PropertySource != RetailPricingPropertySource::SalesOrderLine))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }
            
            // Find default EcoResValue from attribute default value, and then blank value.
            RecId attributeRecId = attributeProperty.EcoResAttributeRecId;
            EcoResAttributeDefaultValue attributeDefaultValue = EcoResAttributeDefaultValue::findByAttribute(attributeRecId);
            EcoResValue defaultEcoResValue = EcoResValue::find(attributeDefaultValue.Value);
            boolean isBlankValueCreated = false;
            if (!defaultEcoResValue)
            {
                defaultEcoResValue = EcoResValue::find(EcoResValue::createBlankValue(attributeRecId), true);
                isBlankValueCreated = true;
            }

            ttsBegin;

            RecId referenceRecId = attributeProperty.RecId;
            RecId ecoResValueRecId = 0;

            // Copy Default EcoResvalue to new EcoResValue.
            if (defaultEcoResValue is EcoResTextValue)
            {
                // Insert new EcoResTextValue
                EcoResTextValue sourceTextValue= defaultEcoResValue as EcoResTextValue;
                EcoResTextValue newTextValue;
                newTextValue.Origin = referenceRecId;
                newTextValue.TextValue = sourceTextValue.TextValue;
                newTextValue.insert();

                ecoResValueRecId = newTextValue.RecId;
            }
            else
            {
                // Other attribute types are not supported on sales order.
                ttsCommit;
                return;
            }

            // Insert EcoResAttributeValue.
            EcoResAttributeValue ecoResAttributeValue;
            ecoResAttributeValue.Attribute = attributeRecId;
            ecoResAttributeValue.InstanceValue = _instance.RecId;
            ecoResAttributeValue.Value = ecoResValueRecId;
            ecoResAttributeValue.insert();

            // Delete source blank value after copy is done.
            if (isBlankValueCreated)
            {
                defaultEcoResValue.delete();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEcoResAttributeValuesForPricingSimulator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete EcoResAttribute values for given attribute-typed properties for the usage of pricing simulator.
    /// </summary>
    /// <param name = "_attributeProperties">The attribute-typed properties.</param>
    /// <remarks>Support property sources SalesOrderHeader and SalesOrderLine only. </remarks>
    internal static void deleteEcoResAttributeValuesForPricingSimulator(container _attributeProperties)
    {
        for (int i = 1; i <= conLen(_attributeProperties); i ++) // We expect < 10 properties, so the performance is fine to process one by one.
        {
            RetailPricingPropertyDefinition attributeProperty = conPeek(_attributeProperties, i);
            if (attributeProperty.PropertyType != RetailPricingPropertyType::EcoResAttribute
                || (attributeProperty.PropertySource != RetailPricingPropertySource::SalesOrderHeader && attributeProperty.PropertySource != RetailPricingPropertySource::SalesOrderLine))
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            ttsbegin;
            
            EcoResValue ecoResValue;
            EcoResAttributeValue ecoResAttributeValue;
            RetailPricingSimulatorInstanceValue instanceValue;
            RecId attributeRecId = attributeProperty.EcoResAttributeRecId;
            
            // delete from EcoResValue
            ecoResValue.skipDatabaseLog(true);
            ecoResValue.skipDataMethods(true);
            ecoResValue.skipEvents(true);
            ecoResValue.skipDeleteActions(true);
            ecoResValue.skipDeleteMethod(true);

            delete_from ecoResValue
                exists join ecoResAttributeValue where ecoResAttributeValue.Value == ecoResValue.RecId && ecoResAttributeValue.Attribute == attributeRecId
                exists join instanceValue where ecoResAttributeValue.InstanceValue == instanceValue.RecId;
            
            // delete from EcoResAttributeValue
            ecoResAttributeValue.skipDeleteActions(true);
            ecoResAttributeValue.skipDeleteMethod(true);
            ecoResAttributeValue.skipDatabaseLog(true);
            ecoResAttributeValue.skipDataMethods(true);
            ecoResAttributeValue.skipEvents(true);

            delete_from ecoResAttributeValue where  ecoResAttributeValue.Attribute == attributeRecId
                exists join instanceValue where ecoResAttributeValue.InstanceValue == instanceValue.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>