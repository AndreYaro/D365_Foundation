<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductInformationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class EcoResProductInformationController
{
    private InventDim callerInventDim;
    private InventTable inventTable;
    private InventDimCombination inventDimCombination;

    private VendExternalItemDescription vendExternalItemDescription;
    private VendAccount primaryVendorAccount;
    private InventItemPurchSetup inventItemPurchSetup;
    private InventItemInventSetup inventItemInventSetup;
    private RouteVersion routeVersion;
    private BOMVersion activeVersion;
    private ReqSetup reqSetup;

    private boolean planningTabDataLoaded;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInventDimOnProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters an InventDim data source based on the product dimensions.
    /// </summary>    
    /// <param name="_qbdsInventDim">
    ///    The datasource to filter.
    /// </param>
    public void filterInventDimOnProductDimensions(QueryBuildDataSource _qbdsInventDim)
    {
        InventDim inventDimFilter;
        if (inventDimCombination.InventDimId)
        {
            inventDimFilter = inventDimCombination.inventDim();
        }
        else
        {
            inventDimFilter = InventDim::findOrCreateBlank();
        }
        
        InventDim::queryAddRangeForProductDimensions(_qbdsInventDim, inventDimFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeBomId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an active BOM for current item context based on todays date and the caller dimensions.
    /// </summary>
    /// <returns>
    /// BOMId of an active bom for the current item context.
    /// </returns>
    public BOMId activeBomId()
    {
        if (!activeVersion)
        {
            ItemId itemId = this.itemId();
            activeVersion = BOMVersion::findActive(itemId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), maxInt(), callerInventDim);
        }
        return activeVersion.BOMId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeRouteId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds an active route for current item context based on todays date and the caller dimensions.
    /// </summary>
    /// <returns>
    /// RouteId of an active route for the current item context.
    /// </returns>
    public RouteId activeRouteId()
    {
        if (!routeVersion)
        {
            ItemId itemId = this.itemId();
            routeVersion = RouteVersion::findActive(itemId, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), maxInt(), callerInventDim);
        }
        return routeVersion.RouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryVendorAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the primary vendor account for the current item context based on the caller dimensions.
    /// </summary>
    /// <returns>
    /// The primary vendor account for the current item context.
    /// </returns>
    public VendAccountDefault primaryVendorAccount()
    {
        if (!primaryVendorAccount)
        {
            primaryVendorAccount = inventTable.primaryVendorId('', callerInventDim);
        }
        return primaryVendorAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the external item id for the current item context.
    /// </summary>
    /// <returns>
    /// The external item id for the current item context.
    /// </returns>
    public ExternalItemId externalItemId()
    {
        return this.getVendExternalItemDescription().externalItemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the external item description for the current item context.
    /// </summary>
    /// <returns>
    /// The external item description for the current item context.
    /// </returns>
    public ExternalItemFreeTxt externalItemDescription()
    {
        return this.getVendExternalItemDescription().externalItemFreeTxt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>procurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the procurement category name for the current item context.
    /// </summary>
    /// <returns>
    /// The procurement category name for the current item context.
    /// </returns>
    public EcoResCategoryName procurementCategory()
    {
        EcoResProductCategory productCategory = EcoResProductCategory::findByItemIdCategoryHierarchyRole(
                                        inventTable.ItemId, EcoResCategoryNamedHierarchyRole::Procurement);
        return EcoResCategory::find(productCategory.Category).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current context is a product variant.
    /// </summary>
    /// <returns>
    /// True if the current context is a product variant; otherwise false.
    /// </returns>
    public boolean isProductVariant()
    {
        return inventDimCombination != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productImageThumbnail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product image thumbnail for the current context.
    /// </summary>
    /// <returns>
    /// Container with the product image.
    /// </returns>
    public container productImageThumbnail()
    {
        if (inventDimCombination)
        {
            return inventDimCombination.productImageThumbnail();
        }
        else
        {
            return inventTable.productImageThumbnail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item id for the current item context.
    /// </summary>
    /// <returns>
    /// Item id for the current item context.
    /// </returns>
    public ItemId itemId()
    {
        return inventTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>product</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product rec id for the current context.
    /// </summary>
    /// <returns>
    /// Product rec id for the current context.
    /// </returns>
    public RecId product()
    {
        if (inventDimCombination)
        {
            return inventDimCombination.DistinctProductVariant;
        }
        else
        {
            return inventTable.Product;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item product rec id for the current item context.
    /// </summary>
    /// <returns>
    /// Item product rec id for the current item context.
    /// </returns>
    public RecId itemProduct()
    {
        return inventTable.Product;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rec id of the current context.
    /// </summary>
    /// <returns>
    /// Rec id of the current context.
    /// </returns>
    public RecId recId()
    {
        if (inventDimCombination)
        {
            return inventDimCombination.RecId;
        }
        else
        {
            return inventTable.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table id of the current context.
    /// </summary>
    /// <returns>
    /// Table id of the current context.
    /// </returns>
    public TableId tableId()
    {
        if (inventDimCombination)
        {
            return inventDimCombination.TableId;
        }
        else
        {
            return inventTable.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOrderSettingSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase order settings site id for the current item context.
    /// </summary>
    /// <returns>
    /// Site id of the purchase order settings.
    /// </returns>
    public InventSiteId purchOrderSettingSite()
    {
        InventDim settingsInventDim = this.getInventItemPurchSetup().inventDimDefault();
        if (this.purchOrderSettingType() == InventItemOrderSetupCallerType::Default)
        {
            // Default order settings
            return settingsInventDim.InventSiteId;
        }
        else if (settingsInventDim.InventLocationId)
        {
            // Site default order settings with location
            return settingsInventDim.inventLocation().InventSiteId;
        }
        else
        {
            // Site default order settings without location
            return this.getInventItemPurchSetup().inventDim().InventSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOrderSettingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase order settings location id for the current item context.
    /// </summary>
    /// <returns>
    /// Location id of the purchase order settings.
    /// </returns>
    public InventLocationId purchOrderSettingLocation()
    {
        return this.getInventItemPurchSetup().inventDimDefault().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOrderSettingSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory order settings site id for the current item context.
    /// </summary>
    /// <returns>
    /// Site id of the inventory settings.
    /// </returns>
    public InventSiteId inventOrderSettingSite()
    {
        InventDim settingsInventDim = this.getInventItemInventSetup().inventDimDefault();
        if (this.inventOrderSettingType() == InventItemOrderSetupCallerType::Default)
        {
            // Default order settings
            return settingsInventDim.InventSiteId;
        }
        else if (settingsInventDim.InventLocationId)
        {
            // Site default order settings with location
            return settingsInventDim.inventLocation().InventSiteId;
        }
        else
        {
            // Site default order settings without location
            return this.getInventItemInventSetup().inventDim().InventSiteId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOrderSettingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory settings location id for the current item context.
    /// </summary>
    /// <returns>
    /// Location id of the inventory settings.
    /// </returns>
    public InventLocationId inventOrderSettingLocation()
    {
        return this.getInventItemInventSetup().inventDimDefault().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the product dimensions when the current context is a product variant.
    /// </summary>
    /// <param name="_ecoResProductDimensionsTmp">
    /// The temp table to initialize.
    /// </param>
    public void initProductDimensions(EcoResProductDimensionsTmp _ecoResProductDimensionsTmp)
    {
        if (inventDimCombination)
        {
            EcoResProductDimensionsTmp prodDimTmp = EcoResProductDimensionsTmp::initFromInventDimCombination(inventDimCombination);
            _ecoResProductDimensionsTmp.setTmpData(prodDimTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOrderSettingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the purchase order setting type (Default or site specific) for the current item context.
    /// </summary>
    /// <returns>
    /// The purchase order setting type of the current item context.
    /// </returns>
    public InventItemOrderSetupCallerType purchOrderSettingType()
    {
        return this.orderSettingType(this.getInventItemPurchSetup().InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventOrderSettingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the inventory setting type (Default or site specific) for the current item context.
    /// </summary>
    /// <returns>
    /// The inventory setting type of the current item context.
    /// </returns>
    public InventItemOrderSetupCallerType inventOrderSettingType()
    {
        return this.orderSettingType(this.getInventItemInventSetup().InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderSettingType</Name>
				<Source><![CDATA[
    private InventItemOrderSetupCallerType orderSettingType(InventDimId _inventDimId)
    {
        if (_inventDimId == InventDim::inventDimIdBlank())
        {
            return InventItemOrderSetupCallerType::Default;
        }
        else
        {
            return InventItemOrderSetupCallerType::ByDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqGroupItemDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default coverage group for the item.
    /// </summary>
    /// <returns>
    /// Default item's ReqGroupId.
    /// </returns>
    public ReqGroupId reqGroupItemDefault()
    {
        return ReqGroup::defaultTable(inventTable.ReqGroupId).ReqGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemPurchSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase order settings (Default or site specific) for the current item context.
    /// </summary>
    /// <returns>
    /// Purchase order settings for the current item context.
    /// </returns>
    public InventItemPurchSetup getInventItemPurchSetup()
    {
        if (!inventItemPurchSetup)
        {
            inventItemPurchSetup = InventItemPurchSetup::find(this.itemId(), callerInventDim.inventDimId);
        }

        return inventItemPurchSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventItemInventSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory order settings (Default or site specific) for the current item context.
    /// </summary>
    /// <returns>
    /// Inventory order settings for the current item context.
    /// </returns>
    public InventItemInventSetup getInventItemInventSetup()
    {
        if (!inventItemInventSetup)
        {
            inventItemInventSetup = InventItemInventSetup::find(this.itemId(), callerInventDim.inventDimId);
        }

        return inventItemInventSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a jump ref to the product for the current item context
    /// </summary>
    public void productJumpRef()
    {
        Args args = new Args();
        MenuFunction menuFunction;

        if (inventDimCombination)
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductVariantsAction), MenuItemType::Display);

            // When we are working with a variant the item references the product master which
            // is required for opening the product variants form
            args.record(inventTable.Product());

            // Setting lookup so we get focus on the correct variant.
            args.lookupField(fieldNum(EcoResDistinctProductVariant, RecId));
            args.lookupValue(int642str(inventDimCombination.DistinctProductVariant));
        }
        else
        {
            menuFunction = new MenuFunction(menuitemDisplayStr(EcoResProductDetails), MenuItemType::Display);
            args.lookupRecord(inventTable.Product());
        }

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a jump ref to the active bom.
    /// </summary>
    public void bomJumpRef()
    {
        Args args = new Args();
        args.lookupRecord(activeVersion.bomTable());

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(PmfBomFormulaGoToMainTable), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a jump ref to the active route.
    /// </summary>
    public void routeJumpRef()
    {
        Args args = new Args();
        args.lookupRecord(routeVersion.routeTable());

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(RouteTable), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReqItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes records of reqItemTable datasource after they are retreived from the database.
    /// </summary>
    /// <param name = "_reqItemTable_ds">ReqItemTable form data source.</param>
    public void initializeReqItemTable(FormDataSource _reqItemTable_ds)
    {
        ReqItemTable reqItemTableLocal = _reqItemTable_ds.getFirst(0,false);
        while (reqItemTableLocal)
        {
            reqItemTableLocal.initFromReqSetupDim(this.reqSetupDim(reqItemTableLocal, reqItemTableLocal.inventDim()));
            reqItemTableLocal = _reqItemTable_ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>ReqSetupDim</c> object using the given parameters.
    /// </summary>
    /// <param name="_reqItemTable">
    ///    A <c>ReqItemTable</c> record.
    /// </param>
    /// <param name="_inventDim">
    ///    A <c>InventDim</c> record.
    /// </param>
    /// <returns>
    ///    A <c>ReqSetupDim</c> object.
    /// </returns>
    protected ReqSetupDim reqSetupDim(ReqItemTable _reqItemTable, InventDim _inventDim)
    {
        if (!reqSetup || reqSetup.itemId() != _reqItemTable.ItemId)
        {
            reqSetup = ReqSetup::newItemId(_reqItemTable.ItemId);
        }

        ReqSetupDimForm reqSetupDimForm = ReqSetupDimForm::newfromForm(reqSetup, _reqItemTable);
        reqSetupDimForm.update(_reqItemTable);

        return reqSetupDimForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanningTabDataLoaded</Name>
				<Source><![CDATA[
    public boolean parmPlanningTabDataLoaded(boolean _planningTabDataLoaded = planningTabDataLoaded)
    {
        planningTabDataLoaded = _planningTabDataLoaded;

        return planningTabDataLoaded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendExternalItemDescription</Name>
				<Source><![CDATA[
    private VendExternalItemDescription getVendExternalItemDescription()
    {
        if (!vendExternalItemDescription)
        {
            ItemId itemId = this.itemId();
            vendExternalItemDescription = new VendExternalItemDescription(itemId, callerInventDim, this.primaryVendorAccount());
            vendExternalItemDescription.findExternalDescription();
        }
        return vendExternalItemDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTable</Name>
				<Source><![CDATA[
    public static EcoResProductInformationController newFromInventTable(InventTable _inventTable, InventDim _callerInventDim)
    {
        if (!_inventTable)
        {
            throw error(error::missingParameter(null));
        }

        EcoResProductInformationController controller = new EcoResProductInformationController();
        controller.inventTable = _inventTable;
        controller.callerInventDim = _callerInventDim;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventDimCombination</Name>
				<Source><![CDATA[
    public static EcoResProductInformationController newFromInventDimCombination(
        InventDimCombination _inventDimCombination,
        InventTable _inventTable,
        InventDim _callerInventDim)
    {
        EcoResProductInformationController controller = EcoResProductInformationController::newFromInventTable(_inventTable, _callerInventDim);
        controller.inventDimCombination = _inventDimCombination;
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    public static EcoResProductInformationController newFromArgs(Args _args, InventDim _callerInventDim)
    {
        InventDimCombination callerInventDimCombination;
        InventTable callerInventTable;

        if (_args.record() is InventTable)
        {
            callerInventTable = _args.record() as InventTable;
        }
        else  if (_args.record() is InventDimCombination)
        {
            callerInventDimCombination = _args.record() as InventDimCombination;
            callerInventTable = callerInventDimCombination.inventTable();
        }
        else if (_args.record() is EcoResProduct)
        {
            callerInventDimCombination = InventDimCombination::findByDistinctProductVariant(_args.record().RecId);

            if (callerInventDimCombination)
            {
                callerInventTable = callerInventDimCombination.inventTable();
            }
            else
            {
                callerInventTable = InventTable::findByProduct(_args.record().RecId);
            }
        }
        else if (_args.lookupTable() == tableNum(InventTable)
            || _args.lookupRecord() is InventTable)
        {
            if (_args.lookupRecord())
            {
                callerInventTable = _args.lookupRecord();
            }
            else
            {
                if (_args.lookupField() == fieldNum(InventTable, RecId))
                {
                    RecId itemRecId = any2Int64(_args.lookupValue());
                    callerInventTable = InventTable::findRecId(itemRecId);
                }
                else
                {
                    ItemId itemId = _args.lookupValue();
                    callerInventTable = InventTable::find(itemId);
                }
            }

            if (_callerInventDim)
            {
                callerInventDimCombination = InventDimCombination::findByInventDim(callerInventTable.ItemId, _callerInventDim);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        EcoResProductInformationController controller;
        if (callerInventDimCombination)
        {
            controller = EcoResProductInformationController::newFromInventDimCombination(callerInventDimCombination, callerInventTable, _callerInventDim);
        }
        else
        {
            controller = EcoResProductInformationController::newFromInventTable(callerInventTable, _callerInventDim);
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCWActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if item is enabled for a catch-weight.
    /// </summary>
    /// <returns>true if enabled; otherwise, false.</returns>
    public boolean isCWActive()
    {
        return inventTable.pdsCWItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>productLifecycleStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product lifecycle state from either the variant or the item.
    /// </summary>
    /// <returns>The current lifecycle state.</returns>
    public EcoResProductLifecycleStateId productLifecycleStateId()
    {
        if (inventDimCombination)
        {
            return inventDimCombination.ProductLifecycleStateId;
        }
        
        return inventTable.ProductLifecycleStateId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
