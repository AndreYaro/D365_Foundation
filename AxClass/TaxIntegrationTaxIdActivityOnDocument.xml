<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxIdActivityOnDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationTaxIdActivityOnDocument</c> class is for tax id related process.
/// </summary>
public class TaxIntegrationTaxIdActivityOnDocument
    extends TaxIntegrationAbstractActivityOnDocument
{
    public const str LoggerName = 'Tax Integration - Tax Id';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxIdActivityOnDocument</c>.
    /// </summary>
    private final void new()
    {
        super(LoggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxIdActivityOnDocument</c>.
    /// </summary>
    /// <returns>The new <c>TaxIntegrationTaxIdActivityOnDocument</c>.</returns>
    public final static TaxIntegrationTaxIdActivityOnDocument construct()
    {
        return new TaxIntegrationTaxIdActivityOnDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document for tax id, if the document is OK.
    /// </summary>
    /// <param name = "_document">The document.</param>
    [Replaceable]
    protected void actInternal(TaxIntegrationDocumentObject _document)
    {
        TaxIntegrationTaxIdActivityOnDocument::actStatic(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document for tax id.
    /// </summary>
    /// <param name = "_document">The document.</param>
    protected static void actStatic(TaxIntegrationDocumentObject _document)
    {
        if (TaxIntegrationTaxIdActivityOnDocument::shouldSetPartyTaxId(_document))
        {
            TaxIntegrationTaxIdActivityOnDocument::setPartyTaxId(_document);
        }

        SetEnumerator chargeEnumerator = _document.getChargeSet().getEnumerator();
        while (chargeEnumerator.moveNext())
        {
            TaxIntegrationLineObject charge = chargeEnumerator.current();
            if (!TaxIntegrationTaxIdActivityOnDocument::populateLine(charge))
            {
                return;
            }
        }

        SetEnumerator lineEnumerator = _document.getLineSet().getEnumerator();
        while (lineEnumerator.moveNext())
        {
            TaxIntegrationLineObject line = lineEnumerator.current();
            //Currently only support intercompany journal
            if (line.getAncestorDocument().isJournal()
                && line.getCompany())
            {
                changecompany (line.getCompany())
                {
                    if (!TaxIntegrationTaxIdActivityOnDocument::populateLine(line))
                    {
                        return;
                    }
                }
            }
            else
            {
                if (!TaxIntegrationTaxIdActivityOnDocument::populateLine(line))
                {
                    return;
                }
            }

            chargeEnumerator = line.getChargeSet().getEnumerator();
            while (chargeEnumerator.moveNext())
            {
                TaxIntegrationLineObject charge = chargeEnumerator.current();
                if (!TaxIntegrationTaxIdActivityOnDocument::populateLine(charge))
                {
                    return;
                }
            }
        }

        TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistency(_document);
        TaxIntegrationTaxIdActivityOnDocument::updateNumberSequenceGroupIdOfDocument(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a line.
    /// </summary>
    /// <param name = "_line">The line.</param>
    /// <returns>Whether the operation is successful.</returns>
    protected static boolean populateLine(TaxIntegrationLineObject _line)
    {
        Set taxLineSet = _line.getTaxLineSet();
        SetEnumerator taxLineSetEnumerator = taxLineSet.getEnumerator();

        while (taxLineSetEnumerator.moveNext())
        {
            TaxIntegrationTaxLineObject taxLine = taxLineSetEnumerator.current();
            if (!TaxIntegrationTaxIdActivityOnDocument::populateTaxLine(taxLine))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a tax line.
    /// </summary>
    /// <param name = "_taxLine">The tax line.</param>
    /// <returns>Whether the operation is successful.</returns>
    protected static boolean populateTaxLine(TaxIntegrationTaxLineObject _taxLine)
    {
        return TaxIntegrationTaxIdActivityOnDocument::populateTaxLineTaxId(_taxLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxLineTaxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a tax line with tax id.
    /// </summary>
    /// <param name = "_taxLine">The tax line.</param>
    /// <returns>Whether the operation is successful.</returns>
    protected static boolean populateTaxLineTaxId(TaxIntegrationTaxLineObject _taxLine)
    {
        TaxIntegrationLineObject line = _taxLine.getParentLine();
        TaxIntegrationDocumentObject document = line.getAncestorDocument();
        TaxIntegrationDocumentObjectContext context = document.getContext();
        TaxTable taxTable = context.getTaxTable(_taxLine.getTaxCode());
        _taxLine.setTaxPeriod(taxTable.TaxPeriod);

        TaxRegistrationRecId taxID = context.getTaxIdFromTaxPeriod(_taxLine.getTaxPeriod());

        if (!taxID)
        {
            document.setException(new System.ApplicationException("@TaxMultipleVATID:LegalEntityTaxIdEmptyErrorMessage"));
        }
        if (TaxIntegrationMultipleTaxIdForSalesOrderFlight::instance().isEnabled()
            && TaxIntegrationUtils::getBusinessProcessBySourceHeadingTable(
                document.getLocalTableId(),
                document.getLocalRecId()) == TaxIntegrationBusinessProcess::Sales)
        {
            line.setTaxId(taxID);
        }
        _taxLine.setTaxId(taxID);
        _taxLine.setPartyTaxId(document.getPartyTaxRecId());

        TaxIntegrationTaxIdActivityOnDocument::updateTaxIdOfDocument(document, taxID);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxIdOfDocument</Name>
				<Source><![CDATA[
    private static void updateTaxIdOfDocument(TaxIntegrationDocumentObject _document, TaxRegistrationRecId _taxID)
    {
        if (_taxID && !_document.getTaxIdRecId())
        {
            _document.setTaxIdRecId(_taxID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumberSequenceGroupIdOfDocument</Name>
				<Source><![CDATA[
    private static void updateNumberSequenceGroupIdOfDocument(TaxIntegrationDocumentObject _document)
    {
        TaxRegistrationRecId taxId = _document.getTaxIdRecId();

        if (taxId)
        {
            TaxRegistration taxRegistration = TaxRegistration::find(taxId);

            if (taxRegistration.NumberSequenceGroupId && !taxRegistration.DisregardNumberSequenceGroupId)
            {
                _document.setNumberSequenceGroupId(taxRegistration.NumberSequenceGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this activity should be skipped for document.
    /// </summary>
    /// <param name="_document">The <c>TaxIntegrationDoccumentObject</c> to determine the applicability.</param>
    /// <returns>true, if this activity should be skipped for document; otherwise, false.</returns>
    internal boolean shouldSkip(TaxIntegrationDocumentObject _document)
    {
        return super(_document) || !TaxIntegrationTaxIdActivityOnDocument::shouldProcessTaxID(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProcessTaxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if should apply the process to process tax ID.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    /// <returns>true if tax ID should be processed and set to document object, otherwise false.</returns>
    [Replaceable]
    protected static boolean shouldProcessTaxID(TaxIntegrationDocumentObject _document)
    {
        // When business process is not enabled or no line in the document.
        if (!TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(_document.getBusinessProcess())
            || (_document.getLineSet().empty()
                && _document.getChargeSet().empty())
            || !_document.countAllTaxLines())
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetPartyTaxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if we should apply the process to set party tax ID.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    /// <returns>true if party tax ID should be checked and set to document object, otherwise false.</returns>
    protected static boolean shouldSetPartyTaxId(TaxIntegrationDocumentObject _document)
    {
        if (_document.getInvoiceAccount() == ''
            && (_document.getHeadingTableId() == tableNum(SalesQuotationTable)
                || _document.getHeadingTableId() == tableNum(PurchRFQCaseTable)
                || _document.getHeadingTableId() == tableNum(PurchRFQTable)
                || _document.getBusinessProcess() == TaxIntegrationBusinessProcess::SADDocument))
        {
            return false;
        }

        // For journal transaction, only set counterparty Tax Id if there is a customer/vendor account.
        if (_document.isJournal()
            && _document.getAccountType() != LedgerJournalACType::Cust
            && _document.getAccountType() != LedgerJournalACType::Vend)
        {
            return false;
        }

        // Currently for PO and SO, party tax ID is set only if returned by tax service.
        // But for Transfer Order, its party tax ID doest not determined by tax service, it needs to set it for the first calculation round.
        return _document.isPartyTaxIdReturned()
            || ((_document.getBusinessProcess() == TaxIntegrationBusinessProcess::Inventory)
                && !(TaxInventTransferCalcTaxContext::current() && TaxInventTransferCalcTaxContext::current().parmShouldSkipSetPartyTaxId()))
            // If default exists, always go through tax ID process.
            || _document.getPartyTaxIdRecIdDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartyTaxId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve recId of partyTaxId from metadata, raise warning if no record is found.
    /// Set the partyTaxRecId back to <c>TaxIntegrationDocumentObject</c> object.
    /// </summary>
    /// <remarks>
    /// There is a field "Tax exempt number" in the header of the transaction UI forms.
    /// It has two different types of values: "Party" and "All".
    /// 1. When it is selected as "Party", it will get lookup from the table <c>TaxRegistration</c>.
    ///    After saving the UI form field, it will make table field changes in the header table as follows:
    ///        a. VATNum: the string value of the tax registration number.
    ///        b. VATNumTableType: TaxExemptNumberSourceType::TaxRegistration.
    ///        c. VATNumRecId: TaxRegistration.RecId.
    /// 2. When it is selected as "All", it will get lookup from the table <c>TaxVATNumTable</c>.
    ///    After saving the UI form field, it will make table field changes in the header table as follows:
    ///        a. VATNum: the string value of tax VAT number.
    ///        b. VATNumTableType: TaxExemptNumberSourceType::TaxVATNumTable.
    ///        c. VATNumRecId: TaxVATNumTable.RecId.
    /// </remarks>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c> object.</param>
    protected static void setPartyTaxId(TaxIntegrationDocumentObject _document)
    {
        // Retrieves recId of party VAT ID from tax service RCS settings when ax master data is well set.
        RefRecId taxIdRecId = TaxIntegrationTaxIdActivityOnDocument::getPartyTaxIdRecId(_document);
        if (!taxIdRecId)
        {
            // Tax service returns party VAT ID but ax master data is not set.
            if (_document.getPartyTaxId())
            {
                // Party VAT ID in the header table is well set before calling tax service.
                if (_document.getPartyTaxIdRecIdDefault())
                {
                    // Retrieves recid of party VAT ID from the header table before calling tax service.
                    taxIdRecId = _document.getPartyTaxIdRecIdDefault();
                    // Warns user that the registration number is not well set in customer/vendor's Registration IDs setup.
                    TaxIntegrationTaxIdActivityOnDocument::warningMessageForCustVendTaxId(_document);
                }
                else
                {
                    // Warns user that the registration number is not well set in customer/vendor's Registration IDs setup.
                    // Also, warns user that the tax exempt numer in the header of transaction UI form is updated to blank.
                    TaxIntegrationTaxIdActivityOnDocument::warningMessageForCustVendTaxId(_document, true);
                }
            }
            // Tax service does not return party VAT ID.
            else
            {
                // Party VAT ID in the header table is well set before calling tax service.
                if (_document.getPartyTaxIdRecIdDefault())
                {
                    // Retrieves recid of party VAT ID from the header table before calling tax service.
                    taxIdRecId = _document.getPartyTaxIdRecIdDefault();
                }
                // Tax VAT number in the header table is well set before calling tax service.
                else if (_document.getTaxExemptNumber() != '')
                {
                    // Warns user that the registration number is not well set in customer/vendor's Registration IDs setup.
                    // Also, warns user that the tax exempt numer in the header of transaction UI form is updated to blank.
                    TaxIntegrationTaxIdActivityOnDocument::warningMessageForCustVendTaxId(_document, true);
                }
                // Party VAT ID and tax VAT number are both empty in the header table before calling tax service.
                else
                {
                    // Do nothing.
                }
            }
        }
        _document.setPartyTaxRecId(taxIdRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all tax lines in this document hold same tax Id. If not, raise exception.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    protected static void checkTaxIdConsistency(TaxIntegrationDocumentObject _document)
    {
        if (TaxIdValidationUtil::allowMultipleTaxIdInOneDocument(_document.getLocalTableId(), _document.getDocumentStatus()))
        {
            TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyOnLineLevel(_document);
        }
        if (_document.isOK())
        {
            TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyOnDocumentLevel(_document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyOnDocumentLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all tax lines in this document hold same tax Id. If not, raise exception.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    protected static void checkTaxIdConsistencyOnDocumentLevel(TaxIntegrationDocumentObject _document)
    {
        TaxIntegrationBusinessProcess businessProcess = _document.getBusinessProcess();
        TaxIntegrationBusinessProcessDetail businessProcessDetail = _document.getBusinessProcessDetail();

        if (TaxIdValidationUtil::isValidationNeeded(businessProcess, _document.getLocalTableId(), _document.getDocumentStatus()))
        {
            boolean isInconsistent;
            //The taxCompanyMap is construct with companyInfo for key, taxMap for the value to support intercompany journal scenarios, the taxId will be saved per company.
            Map taxCompanyMap = new Map(Types::String, Types::AnyType);
            SetEnumerator documentChargeEnumerator = _document.getChargeSet().getEnumerator();
            while (documentChargeEnumerator.moveNext())
            {
                TaxIntegrationLineObject charge = documentChargeEnumerator.current();
                isInconsistent = isInconsistent 
                    || TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyForLineByCompany(charge, taxCompanyMap);
            }

            SetEnumerator lineEnumerator = _document.getLineSet().getEnumerator();
            while (lineEnumerator.moveNext())
            {
                TaxIntegrationLineObject line = lineEnumerator.current();
                SetEnumerator lineChargeEnumerator = line.getChargeSet().getEnumerator();
                while (lineChargeEnumerator.moveNext())
                {
                    TaxIntegrationLineObject charge = lineChargeEnumerator.current();
                    isInconsistent = isInconsistent 
                        || TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyForLineByCompany(charge, taxCompanyMap);
                }
                isInconsistent = isInconsistent 
                    || TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyForLineByCompany(line, taxCompanyMap);
            }

            if (!isInconsistent && businessProcess == TaxIntegrationBusinessProcess::Inventory)
            {
                Map taxMap = TaxIntegrationTaxIdActivityOnDocument::findOrCreateTaxIdMapForCompany(taxCompanyMap, _document.getCompany());
                RefRecId previousTaxId = TaxIntegrationTaxIdActivityOnDocument::getPreviousTaxId(_document);
                isInconsistent = previousTaxId && !taxMap.valueSet().in(previousTaxId);
            }

            if (isInconsistent)
            {
                setPrefix(TaxIntegrationTaxIdActivityOnDocument::getTaxIdValidationMessageForLegalEntity(businessProcess));
                MessageSeverity messageSeverity;
                TaxIdValidation taxIdValidation = TaxIdValidationUtil::getValidationLevel(businessProcess, _document.getLocalTableId(), _document.getDocumentStatus());
                switch (taxIdValidation)
                {
                    case (TaxIdValidation::Warning):
                        messageSeverity = MessageSeverity::Warning;
                        break;
                    case (TaxIdValidation::Error):
                        messageSeverity = MessageSeverity::Error;
                        break;
                }

                MapEnumerator taxCompanyEnumerator = taxCompanyMap.getEnumerator();
                while (taxCompanyEnumerator.moveNext())
                {
                    TaxIntegrationTaxIdActivityOnDocument::showErrorMessageByCompany(
                        _document, 
                        ((taxCompanyEnumerator.currentKey() && taxCompanyEnumerator.currentKey() != curExt()) ? taxCompanyEnumerator.currentKey() : ''),
                        taxCompanyEnumerator.currentValue(),
                        messageSeverity);
                }

                if (messageSeverity == MessageSeverity::Error)
                {
                    _document.setException(new System.ApplicationException(TaxIntegrationTaxIdActivityOnDocument::getTaxIdValidationMessageForLegalEntity(businessProcess)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyOnLineLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all tax lines in each single line within the document hold same tax Id. If not, raise exception.
    /// Line includes header charge, line charge and normal line.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    protected static void checkTaxIdConsistencyOnLineLevel(TaxIntegrationDocumentObject _document)
    {
        boolean isInconsistent = false;
        SetEnumerator documentChargeEnumerator = _document.getChargeSet().getEnumerator();
        while (!isInconsistent && documentChargeEnumerator.moveNext())
        {
            TaxIntegrationLineObject charge = documentChargeEnumerator.current();
            isInconsistent = isInconsistent
               || TaxIntegrationTaxIdActivityOnDocument::checkTaxIdAndShowErrorMessageForLine(charge);
        }

        SetEnumerator lineEnumerator = _document.getLineSet().getEnumerator();
        while (!isInconsistent && lineEnumerator.moveNext())
        {
            TaxIntegrationLineObject line = lineEnumerator.current();
            SetEnumerator lineChargeEnumerator = line.getChargeSet().getEnumerator();
            while (!isInconsistent && lineChargeEnumerator.moveNext())
            {
                TaxIntegrationLineObject charge = lineChargeEnumerator.current();
                isInconsistent = isInconsistent
                    || TaxIntegrationTaxIdActivityOnDocument::checkTaxIdAndShowErrorMessageForLine(charge);
            }
            isInconsistent = isInconsistent
                || TaxIntegrationTaxIdActivityOnDocument::checkTaxIdAndShowErrorMessageForLine(line);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdAndShowErrorMessageForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all tax lines in the line object hold same tax Id. If not, raise exception.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c>.</param>
    /// <returns>true if inconsistency found; otherwise, false.</returns>
    protected static boolean checkTaxIdAndShowErrorMessageForLine(TaxIntegrationLineObject _line)
    {
        TaxIntegrationDocumentObject document = _line.getAncestorDocument();
        Map taxIdMap = new Map(Types::Container, Types::AnyType);
        boolean isInconsistent = TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyByLineForLineLevelCheck(_line, taxIdMap);
        if (isInconsistent)
        {
            setPrefix(TaxIntegrationTaxIdActivityOnDocument::getTaxIdValidationMessageForLegalEntityOnLineLevel());
            TaxIntegrationTaxIdActivityOnDocument::showErrorMessageByCompany(
                document,
                '',
                taxIdMap,
                // Always raise error for line.
                messageSeverity::Error);

            document.setException(new System.ApplicationException(TaxIntegrationTaxIdActivityOnDocument::getTaxIdValidationMessageForLegalEntityOnLineLevel()));
        }
        return isInconsistent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showErrorMessageByCompany</Name>
				<Source><![CDATA[
    private static void showErrorMessageByCompany(TaxIntegrationDocumentObject _document, SelectableDataArea _company, Map _taxMap, MessageSeverity _messageSeverity)
    {
        MapEnumerator taxMapEnumerator = _taxMap.getEnumerator();
        while (taxMapEnumerator.moveNext())
        {
            ItemId itemId;
            TaxCode taxCode;
            TaxPeriod taxPeriod;
            TaxRegistrationRecId taxId;
            TaxIntegrationLineType lineType;
            [itemId, taxCode, taxPeriod, lineType] = taxMapEnumerator.currentKey();
            taxId = taxMapEnumerator.currentValue();
            TaxRegistration taxRegistration = TaxRegistration::find(taxId);
            if (itemId)
            {
                if (lineType == TaxIntegrationLineType::NormalLine)
                {
                    Message::add(
                        _messageSeverity, 
                        (_company 
                            ? strFmt("@TaxMultipleVATID:TaxIdValidation_MessageForLineDetailByCompany", itemId, taxCode, taxPeriod, taxRegistration.RegistrationNumber, _company)
                            : strFmt("@TaxMultipleVATID:TaxIdValidation_MessageForLineDetail", itemId, taxCode, taxPeriod, taxRegistration.RegistrationNumber)));
                }
                else
                {
                    Message::add(_messageSeverity, 
                        (_company 
                            ? strFmt("@TaxMultipleVATID:TaxIdValidation_MessageForChargeDetailByCompany", itemId, taxCode, taxPeriod, taxRegistration.RegistrationNumber, _company)
                            : strFmt("@TaxMultipleVATID:TaxIdValidation_MessageForChargeDetail", itemId, taxCode, taxPeriod, taxRegistration.RegistrationNumber)));
                }

            }
            else if (_document is TaxIntegrationJournalDocumentObject || _document.getHeadingTableId() == tableNum(ProjAdvancedJournalLine))
            {
                Voucher voucher = _document.getVoucher();
                Message::add(_messageSeverity,
                    (_company
                        ? strFmt("@TaxMultipleVATID:TaxIdValidation_MessageForJournalLineByCompany", voucher, taxCode, taxPeriod, taxRegistration.RegistrationNumber, _company)
                        : strFmt("@TaxMultipleVATID:TaxIdValidation_MessageForJournalLine", voucher, taxCode, taxPeriod, taxRegistration.RegistrationNumber)));
            }
            else
            {
                Message::add(_messageSeverity, 
                    (_company 
                        ? strFmt("@TaxMultipleVATID:TaxIdValidation_MessageWithoutItemByCompany", taxCode, taxPeriod, taxRegistration.RegistrationNumber, _company)
                        : strFmt("@TaxMultipleVATID:TaxIdValidation_MessageWithoutItem", taxCode, taxPeriod, taxRegistration.RegistrationNumber)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyForLineByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the lines and their Tax Ids into map by company, and check if inconsistency exists.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_taxCompanyMap">A map for each company to save the TaxId Map and their companys.</param>
    /// <returns>true if inconsistency found; otherwise, false.</returns>
    private static boolean checkTaxIdConsistencyForLineByCompany(TaxIntegrationLineObject _line, Map _taxCompanyMap)
    {
        SelectableDataArea company;
        if (TaxIntegrationLineCompanyFlight::instance().isEnabled())
        {
            company = _line.getCompany() ? _line.getCompany() : curExt();
        }
        else
        {
            company = _line.getCompany();
        }

        if (TaxIntegrationMultipleTaxIdForSalesOrderFlight::instance().isEnabled())
        {
            return TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyByLineForDocumentLevelCheck(
                _line,
                TaxIntegrationTaxIdActivityOnDocument::findOrCreateTaxIdMapForCompany(_taxCompanyMap, company));
        }
        else
        {
            return TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyForLine(
                _line,
                TaxIntegrationTaxIdActivityOnDocument::findOrCreateTaxIdMapForCompany(_taxCompanyMap, company));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTaxIdMapForCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find or create the map save the lines and their Tax Ids by company.
    /// </summary>
    /// <param name = "_taxIdCompanyMap">A map save the the taxId Map and their companys.</param>
    /// <param name = "_company">The company</param>
    /// <returns>The taxId Map</returns>
    private static Map findOrCreateTaxIdMapForCompany(Map _taxIdCompanyMap, SelectableDataArea _company)
    {
        if (!_taxIdCompanyMap.exists(_company))
        {
            _taxIdCompanyMap.insert(_company, new Map(Types::Container, Types::AnyType));
        }

        return _taxIdCompanyMap.lookup(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the lines and their Tax Ids into map, and check if inconsistency exists.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_taxIdMap">A map to save the checked lines and their Tax Ids</param>
    /// <returns>true if inconsistency found; otherwise, false.</returns>
    /// <remarks>This method should only be called for document level check.</remarks>
    [SysObsolete("The method has been deprecated, use checkTaxIdConsistencyByLineForDocumentLevelCheck instead", false, 13\3\2024)]
    protected static boolean checkTaxIdConsistencyForLine(TaxIntegrationLineObject _line, Map _taxIdMap)
    {
        if (TaxIntegrationMultipleTaxIdForSalesOrderFlight::instance().isEnabled())
        {
            return false;
        }
        else
        {
            SetEnumerator taxLineSetEnumerator;
            TaxIntegrationTaxLineObject taxLine;
            boolean isInconsistent;
            TaxRegistrationRecId taxId;

            taxLineSetEnumerator = _line.getTaxLineSet().getEnumerator();
            while (taxLineSetEnumerator.moveNext())
            {
                taxLine = taxLineSetEnumerator.current();
                taxId = taxLine.getTaxId();

                if (!isInconsistent
                    && !_taxIdMap.empty()
                    && !_taxIdMap.valueSet().in(taxId)) //Check if current tax id is different from previous tax id.
                {
                    isInconsistent = true;
                }

                _taxIdMap.insert([
                        _line.getItemId(),
                        taxLine.getTaxCode(),
                        taxLine.getTaxPeriod(),
                        _line.getLineType()
                    ],
                    taxId);
            }
            return isInconsistent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyByLineForDocumentLevelCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the lines and their Tax Ids into map, and check if inconsistency exists.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_taxIdMap">A map to save the checked lines and their Tax Ids</param>
    /// <returns>true if inconsistency found; otherwise, false.</returns>
    /// <remarks>This method should only be called for document level check.</remarks>
    protected static boolean checkTaxIdConsistencyByLineForDocumentLevelCheck(TaxIntegrationLineObject _line, Map _taxIdMap)
    {
        boolean isInconsistent = TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyByLineInternal(_line, _taxIdMap, false);
        TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyForLine(_line, _taxIdMap);
        return isInconsistent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyByLineForLineLevelCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the line and its tax IDs into map, and check if inconsistency exists.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_taxIdMap">A map to save the checked line and its tax IDs</param>
    /// <returns>true if inconsistency found; otherwise, false.</returns>
    /// <remarks>This method should only be called for line level check.</remarks>
    protected static boolean checkTaxIdConsistencyByLineForLineLevelCheck(TaxIntegrationLineObject _line, Map _taxIdMap)
    {
        return TaxIntegrationTaxIdActivityOnDocument::checkTaxIdConsistencyByLineInternal(_line, _taxIdMap, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIdConsistencyByLineInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the lines and their Tax Ids into map, and check if inconsistency exists.
    /// </summary>
    /// <param name = "_line">The <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_taxIdMap">A map to save the checked lines and their Tax Ids</param>
    /// <param name = "_isLineLevelCheck">Whether the check is for line level or document level.</param>
    /// <returns>true if inconsistency found; otherwise, false.</returns>
    /// <remarks>
    /// Line level consistency check: check all tax lines of the given document line.
    /// Document level consistency check:
    ///     1. If line level check is applied separately, the document check will only check the first tax ID of the given document line.
    ///         Because the line consistency is already guarunteed by line level consistency check.
    ///     2. If separate line level check is not applied, check all tax lines of the given document line.
    /// </remarks>
    internal static boolean checkTaxIdConsistencyByLineInternal(TaxIntegrationLineObject _line, Map _taxIdMap, boolean _isLineLevelCheck)
    {
        SetEnumerator taxLineSetEnumerator;
        TaxIntegrationTaxLineObject taxLine;
        boolean isInconsistent;
        TaxRegistrationRecId taxId;

        taxLineSetEnumerator = _line.getTaxLineSet().getEnumerator();
        while (taxLineSetEnumerator.moveNext())
        {
            taxLine = taxLineSetEnumerator.current();
            taxId = taxLine.getTaxId();

            if (!isInconsistent
                && !_taxIdMap.empty()
                && !_taxIdMap.valueSet().in(taxId)) //Check if current tax id is different from previous tax id.
            {
                isInconsistent = true;
            }

            _taxIdMap.insert([
                    _line.getItemId(),
                    taxLine.getTaxCode(),
                    taxLine.getTaxPeriod(),
                    _line.getLineType()
                ],
                taxId);

            TaxIntegrationDocumentObject document = _line.getAncestorDocument();
            if (!_isLineLevelCheck
                && TaxIdValidationUtil::allowMultipleTaxIdInOneDocument(document.getLocalTableId(), document.getDocumentStatus()))
            {
                // When multiple tax IDs are allowed in one document, separate line level tax ID check is done to ensure the line tax ID consistency.
                // Document level check only checks the first tax ID of the line to ensure the tax ID consistency across lines.
                break;
            }
        }

        return isInconsistent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxIdRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax id exist in master data or not.
    /// </summary>
    /// <param name = "_document">The <c>TaxIntegrationDocumentObject</c>.</param>
    /// <returns>The RefRecId of the tax registration number.</returns>
    protected static RefRecId getPartyTaxIdRecId(TaxIntegrationDocumentObject _document)
    {
        VendTable vendTable;
        CustTable custTable;

        TaxIntegrationPartyType partyType = _document.getPartyType();

        switch (partyType)
        {
            case TaxIntegrationPartyType::Vend:
                return TaxIntegrationTaxIdActivityOnDocument::getTaxIdRecIdByIDAccountRegion(
                        _document.getPartyTaxId(),
                        _document.getInvoiceAccount(),
                        _document.getPartyCountryRegionId(),
                        vendTable);
            case TaxIntegrationPartyType::Cust:
                return TaxIntegrationTaxIdActivityOnDocument::getTaxIdRecIdByIDAccountRegion(
                        _document.getPartyTaxId(),
                        _document.getInvoiceAccount(),
                        _document.getPartyCountryRegionId(),
                        custTable);
            case TaxIntegrationPartyType::Invent:
                return TaxIntegrationTaxIdActivityOnDocument::getPartyTaxIdForInventory(
                        _document);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdRecIdByIDAccountRegion</Name>
				<Source><![CDATA[
    private static RefRecId getTaxIdRecIdByIDAccountRegion(VATNumJournal _vatID, CustVendAC _account, LogisticsAddressCountryRegionId _region, CustVendTable _custVendTable)
    {
        TaxRegistration taxRegistration;
        DirPartyLocation partyLocation;
        TaxRegistrationLegislationTypes legislationTypes;
        TaxRegistrationTypeApplicabilityRule applicabilityRule;
        utcDateTime validFrom = DateTimeUtil::minValue();
        utcDateTime validTo = DateTimeUtil::maxValue();

        select firstonly validtimestate(validFrom, validTo) RecId from taxRegistration
            join RecId from applicabilityRule
                where taxRegistration.TaxRegistrationTypeApplicabilityRule == applicabilityRule.RecId
                    // If country region is not set in RCS, does not match it.
                    && (_region == ''
                        || applicabilityRule.CountryRegionId == _region)
            join RecId from legislationTypes
                where applicabilityRule.RecId == legislationTypes.TaxRegistrationTypeApplicabilityRule
                    && legislationTypes.TaxRegistrationTypesList == TaxRegistrationTypesList::TAXID
            join RecId from partyLocation
                where taxRegistration.DirPartyLocation == partyLocation.RecId
                    && taxRegistration.RegistrationNumber == _vatID
            join RecId from _custVendTable
                where _custVendTable.Party == partyLocation.Party
                && _custVendTable.AccountNum == _account;

        return taxRegistration.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousTaxId</Name>
				<Source><![CDATA[
    private static RefRecId getPreviousTaxId(TaxIntegrationDocumentObject _document)
    {
        InventTransferMap sourceTableHeader = InventTransferMap::findRecId(_document.getLocalTableId(), _document.getLocalRecId());

        InventTransferUpdateType updateType;
        switch (_document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                updateType = InventTransferUpdateType::Shipment;
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                updateType = InventTransferUpdateType::Receive;
                break;
            default:
                break;
        }

        InventTransferJour inventTransferJour;
        select firstonly TaxID from inventTransferJour
            where inventTransferJour.TransferId == sourceTableHeader.TransferId
                && inventTransferJour.UpdateType == updateType;

        return inventTransferJour.TaxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxIdForInventory</Name>
				<Source><![CDATA[
    private static RefRecId getPartyTaxIdForInventory(TaxIntegrationDocumentObject _document)
    {
        TaxRegistrationRecId partyTaxId = TaxIntegrationTaxIdActivityOnDocument::getPartyTaxIdFromInventTransferJour(_document);

        if (!partyTaxId)
        {
            return TaxIntegrationTaxIdActivityOnDocument::getPartyTaxIdFromCalculation(_document);
        }

        return partyTaxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxIdFromInventTransferJour</Name>
				<Source><![CDATA[
    private static RefRecId getPartyTaxIdFromInventTransferJour(TaxIntegrationDocumentObject _document)
    {
        InventTransferMap sourceTableHeader = InventTransferMap::findRecId(_document.getLocalTableId(), _document.getLocalRecId());

        InventTransferJour inventTransferJour;
        select firstonly TaxID, PartyTaxID from inventTransferJour
            where inventTransferJour.TransferId == sourceTableHeader.TransferId
                && inventTransferJour.UpdateType == InventTransferUpdateType::Shipment;

        TaxRegistrationRecId taxID;
        switch (_document.getBusinessProcessDetail())
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                taxID = inventTransferJour.PartyTaxID;
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                taxID = inventTransferJour.TaxID;
                break;
            default:
                break;
        }

        return taxID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxIdFromCalculation</Name>
				<Source><![CDATA[
    private static RefRecId getPartyTaxIdFromCalculation(TaxIntegrationDocumentObject _document)
    {
        // It uses context to transfer shouldSkipSetPartyTaxId parameter to the second calculation.
        // So that it will not set party tax id again to be stuck in an endless loop.
        using (TaxInventTransferCalcTaxContext context = new TaxInventTransferCalcTaxContext())
        {
            context.parmShouldSkipSetPartyTaxId(true);
            // Shipment: It aims to get party tax Id by calculating with receive document.
            // Receive: It aims to get party tax Id by calculating with shipment document.
            InventTransferMap sourceTableHeader = InventTransferMap::findRecId(_document.getLocalTableId(), _document.getLocalRecId());
            InventTransferTotals inventTransferTotals = InventTransferTotals::construct(sourceTableHeader);

            InventTransferUpdateType updateType;
            switch (_document.getBusinessProcessDetail())
            {
                case TaxIntegrationBusinessProcessDetail::Shipment:
                    updateType = InventTransferUpdateType::Receive;
                    break;
                case TaxIntegrationBusinessProcessDetail::Receive:
                    updateType = InventTransferUpdateType::Shipment;
                    break;
                default:
                    break;
            }

            inventTransferTotals.setUpdateType(updateType);
            inventTransferTotals.calc();
            TaxInventTransfer taxInventTransfer = inventTransferTotals.tax();
            TmpTaxWorkTrans taxWorkTransLoc = taxInventTransfer.tmpTaxWorkTrans();

            select firstonly TaxId from taxWorkTransLoc;
            TaxRegistrationRecId taxID = taxWorkTransLoc.TaxId;
            return taxID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningMessageForCustVendTaxId</Name>
				<Source><![CDATA[
    private static void warningMessageForCustVendTaxId(TaxIntegrationDocumentObject _document, boolean _blankReminder = false)
    {
        if (TaxIntegrationTaxIdActivityOnDocument::shouldSkipPartyTaxIdWarningMessage(_document))
        {
            return;
        }

        TaxIntegrationPartyType partyType = _document.getPartyType();

        if (partyType == TaxIntegrationPartyType::Vend)
        {
            if (_blankReminder)
            {
                warning(strFmt("@TaxMultipleVATID:VendVATIDNotFoundAndBlankWarning", _document.getPartyTaxId()));
            }
            else
            {
                warning(strFmt("@TaxMultipleVATID:VendVATIDNotFoundWarning", _document.getPartyTaxId()));
            }
        }
        else if (partyType == TaxIntegrationPartyType::Cust)
        {
            if (_blankReminder)
            {
                warning(strFmt("@TaxMultipleVATID:CustVATIDNotFoundAndBlankWarning", _document.getPartyTaxId()));
            }
            else
            {
                warning(strFmt("@TaxMultipleVATID:CustVATIDNotFoundWarning", _document.getPartyTaxId()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipPartyTaxIdWarningMessage</Name>
				<Source><![CDATA[
    private static boolean shouldSkipPartyTaxIdWarningMessage(TaxIntegrationDocumentObject _document)
    {
        // Since line level sales tax button exists, it needs to call tax service to set counter party vat id.
        // However, it needs to skip warning message according to the requirement.
        boolean ret = _document.getHeadingTableId() == tableNum(PurchReqTable);

        // When parameter "Update tax exempt number from customer address" is enabled and "Use fiscal data from invoice account" is turned off,
        // system will update transaction header tax exempt number with delivery address.
        // Therefore, the warning message from the invoice account should be bypassed when the party tax ID from the advanced tax calculation matches that of the transaction header.
        if (!ret && TaxIntegrationTaxIdUtility::isUpdateTaxExemptNumberFromCustomerAddressEnabledForBusinessProcess(_document.getBusinessProcess()))
        {
            ret = CustParameters::find().UseFiscalInvoiceAccount != UseFiscalInvoiceAccount::Always
                && _document.getOrderAccount() != _document.getInvoiceAccount()
                && _document.getPartyTaxIdRecIdDefault()
                && _document.getPartyTaxId() == _document.getTaxExemptNumber();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdValidationMessageForLegalEntity</Name>
				<Source><![CDATA[
    private static str getTaxIdValidationMessageForLegalEntity(TaxIntegrationBusinessProcess _businessProcess)
    {
        if (_businessProcess == TaxIntegrationBusinessProcess::Journal)
        {
            return "@TaxMultipleVATID:TaxIdValidation_MessageForJournal";
        }
        else
        {
            return "@TaxMultipleVATID:TaxIdValidation_Message";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdValidationMessageForLegalEntityOnLineLevel</Name>
				<Source><![CDATA[
    private static str getTaxIdValidationMessageForLegalEntityOnLineLevel()
    {
        return "@TaxMultipleVATID:TaxIdValidation_MessageForLine";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>