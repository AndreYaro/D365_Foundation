<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlProcessingInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BudgetControlProcessingInstrumentationActivities
{
    private BudgetControlInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(BudgetControlInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static BudgetControlProcessingInstrumentationActivities newFromLogger(BudgetControlInstrumentationLogger _logger)
    {
        return new BudgetControlProcessingInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeStoredProcedure</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext invokeStoredProcedure()
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::InvokeStoredProcedure);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetCheckProcessing</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext budgetCheckProcessing(boolean _isConfirmation, int _toRemove, int _toReturnRemaining, int _toProcess)
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::BudgetCheckProcessing);

        return logger.activityContext(activity)
            .addCustomProperty(BudgetControlInstrumentationConstants::IsConfirmation, any2Str(_isConfirmation))
            .addCustomProperty(BudgetControlInstrumentationConstants::ToRemoveCount, any2Str( _toRemove))
            .addCustomProperty(BudgetControlInstrumentationConstants::ToReturnRemainingCount, any2Str(_toReturnRemaining))
            .addCustomProperty(BudgetControlInstrumentationConstants::ToProcessCount, any2Str(_toProcess))
            .addCustomProperty(BudgetControlInstrumentationConstants::IsTrackBudgetFundsAvailableOnlyFeatureEnabled, any2Str(BudgetControlTrackBFAOnlyFeature::isEnabled()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>storedProcedureError</Name>
				<Source><![CDATA[
    internal void storedProcedureError(int _resultCode, str _resultMessage)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, "@Budget:StoredProcedureError");
        serializer.setValue(BudgetControlInstrumentationConstants::ResultCode, any2Str(_resultCode));
        serializer.setValue(BudgetControlInstrumentationConstants::ResultMessage, _resultMessage);

        logger.logWarning(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetCheckProcessingFailed</Name>
				<Source><![CDATA[
    internal void budgetCheckProcessingFailed()
    {
        logger.logError(BudgetControlInstrumentationConstants::BudgetControlProcessorErrorDuringProcessing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentTracked</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext isDocumentTracked()
    {
        SysInstrumentationActivity activity  = logger.activity(BudgetControlInstrumentationConstants::ValidateBudgetSourceIdsForTracking);

        return logger.activityContext(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingInstanceCreated</Name>
				<Source><![CDATA[
    internal void processingInstanceCreated()
    {
        logger.logInformation(BudgetControlInstrumentationConstants::BudgetControlProcessorInstanceCreated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingHeaderChanged</Name>
				<Source><![CDATA[
    internal void processingHeaderChanged(RecId _originalProcessingHeader, RecId _newProcessingHeader)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, "@Budget:ProcessingHeaderChanged");
        serializer.setValue(BudgetControlInstrumentationConstants::BudgetControlProcessingHeader, any2Str(_originalProcessingHeader));
        serializer.setValue(BudgetControlInstrumentationConstants::NewBudgetControlProcessingHeader, any2Str(_newProcessingHeader));

        logger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>noReferenceDistribution</Name>
				<Source><![CDATA[
    internal void noReferenceDistribution(AccountingDistributionRecId _distributionRecId, SourceDocumentLineRecId _sourceDocumentLineRecId, AccountingDistributionRecId _referenceDistributionRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, "@Budget:ReferenceDistributionDoesNotExist");
        serializer.setValue(BudgetControlInstrumentationConstants::AccountingDistribution, any2Str(_distributionRecId));
        serializer.setValue(BudgetControlInstrumentationConstants::SourceDocumentLine, any2Str(_sourceDocumentLineRecId));
        serializer.setValue(BudgetControlInstrumentationConstants::ReferenceDistribution, any2Str(_referenceDistributionRecId));

        logger.logError(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>noTopParentSourceDocumentLine</Name>
				<Source><![CDATA[
    internal void noTopParentSourceDocumentLine(AccountingDistributionRecId _distributionRecId, SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, "@Budget:TopParentSourceDocumentLineDoesNotExist");
        serializer.setValue(BudgetControlInstrumentationConstants::AccountingDistribution, any2Str(_distributionRecId));
        serializer.setValue(BudgetControlInstrumentationConstants::SourceDocumentLine, any2Str(_sourceDocumentLineRecId));

        logger.logError(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIsNotEnabled</Name>
				<Source><![CDATA[
    internal void documentIsNotEnabled(LegalEntityRecId _legalEntityRecId, SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, "@Budget:DocumentIsNotEnabledForBudgetControlMessage");
        serializer.setValue(BudgetControlInstrumentationConstants::LegalEntityRecId, any2Str(_legalEntityRecId));
        serializer.setValue(BudgetControlInstrumentationConstants::SourceDocumentHeader, any2Str(_sourceDocumentHeaderRecId));

        logger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalIsNotEnabled</Name>
				<Source><![CDATA[
    internal void journalIsNotEnabled(LegalEntityRecId _legalEntityRecId, LedgerJournalTableRecId _ledgerJournalTableRecId)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::Message, "@Budget:DocumentIsNotEnabledForBudgetControlMessage");
        serializer.setValue(BudgetControlInstrumentationConstants::LegalEntityRecId, any2Str(_legalEntityRecId));
        serializer.setValue(BudgetControlInstrumentationConstants::LedgerJournalTable, any2Str(_ledgerJournalTableRecId));

        logger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logConfirmedStatusMovingToDraft</Name>
				<Source><![CDATA[
internal void logConfirmedStatusMovingToDraft(
        RecId _lastBudgetSourceTrackingId,
        BudgetSourceRecId _budgetSourceId,
        BudgetControlCategory _budgetControlCategory)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::LastBudgetSourceTrackingRecId, any2Str(_lastBudgetSourceTrackingId));
        serializer.setValue(BudgetControlInstrumentationConstants::BudgetSourceRecId, any2Str(_budgetSourceId));
        serializer.setValue(BudgetControlInstrumentationConstants::BudgetControlCategory, any2Str(_budgetControlCategory));

        logger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBudgetCheckSkippedDocumentDetails</Name>
				<Source><![CDATA[
    internal void logBudgetCheckSkippedDocumentDetails(int _budgetCheckResult, RecId _budgetSourceRecId, RecId _documentRefRecId, BudgetSourceType _budgetSourceType)
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(BudgetControlInstrumentationConstants::BudgetCheckResult, any2Str(_budgetCheckResult));
        serializer.setValue(BudgetControlInstrumentationConstants::BudgetSourceRecId, any2Str(_budgetSourceRecId));

        if (_budgetSourceType == BudgetSourceType::BudgetTransactionLine)
        {
            serializer.setValue(BudgetControlInstrumentationConstants::BudgetTransactionLineRecId, any2Str(_documentRefRecId));
        }
        else if (_budgetSourceType == BudgetSourceType::SourceDocumentLine)
        {
            serializer.setValue(BudgetControlInstrumentationConstants::AccountingDistribution, any2Str(_documentRefRecId));
        }
        
        logger.logInformation(serializer.toString());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>