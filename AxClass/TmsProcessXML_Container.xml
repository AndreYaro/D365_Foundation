<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProcessXML_Container</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Serializes the transportation management information related to the container to XML file.
/// </summary>
public class TmsProcessXML_Container extends TMSProcessXML_Base
{
    TMSRouteCode    conRouteId;
    WHSContainerId  conId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteSegmentContainer</Name>
				<Source><![CDATA[
	/// <summary>
	/// Deletes previously created records for the entity.
	/// </summary>
    void deleteSegmentContainer()
    {
        TMSRouteSegmentContainer    segmentContainer;
        TMSRouteRateDetail          routeRateDetail;

        ttsbegin;

        delete_from routeRateDetail where routeRateDetail.Id == id;
        delete_from segmentContainer where segmentContainer.Id == id;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finishReadShipShipment</Name>
				<Source><![CDATA[
    private void finishReadShipShipment(XmlNode              _xmlNode,
                                        TMSRouteSegmentTable _segmentTable,
                                        XmlNode              _segmentNode,
                                        XmlNodeList          _addressList,
                                        XmlNode              _addressNode)
    {
        TMSRouteSegmentTable segmentTable = _segmentTable;

        if (communicationType == TMSCommunicationType::RateRoute || communicationType == TMSCommunicationType::Route)
        {
            this.readShippingEntity(_xmlNode, segmentTable.TableId, segmentTable.RecId);
        }
        if (communicationType == TMSCommunicationType::Rate)
        {
            this.readShippingEntity(_xmlNode, rateTableId, rateRecId);
        }
        if (_segmentNode && communicationType != TMSCommunicationType::Route)
        {
            this.readRatingEntities(_segmentNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            _addressList = _segmentNode.selectNodes(#pickUp);
            _addressNode = _addressList.nextNode();
            this.readAddress(_addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);

            _addressList = _segmentNode.selectNodes(#dropOff);
            _addressNode = _addressList.nextNode();
            this.readAddress(_addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSegmentTable</Name>
				<Source><![CDATA[
    private TMSRouteSegmentTable insertSegmentTable(XmlNode _xmlNode)
    {
        TMSRouteSegmentTable        segmentTable;
        TMSCarrierCode              shipmentCarrier;
        TMSCarrierServiceCode       shipmentService;
        TMSCarrierGroupCode         shipmentGroup;
        TMSModeCode                 shipmentMode;
        TMSFreightTermCode          shipmentFreight;
        TMSResponsibleForPayment    shipmentResponsible;
        TMSVendorCode               shipmentVendorCode;
        TMSVendorInvoiceCode        shipmentVendorInvoiceCode;

        shipmentCarrier = this.returnNamedNode(_xmlNode, #carrier);
        shipmentService = this.returnNamedNode(_xmlNode, #carrierService);
        shipmentGroup   = this.returnNamedNode(_xmlNode, #carrierGroup);
        shipmentMode    = this.returnNamedNode(_xmlNode, #modeCode);
        shipmentFreight = this.returnNamedNode(_xmlNode, #freightTerm);

        segmentTable.RefTableId          = commonRec.TableId;
        segmentTable.RefRecId            = commonRec.RecId;
        segmentTable.CarrierCode         = shipmentCarrier   ? shipmentCarrier   : segmentCarrier;
        segmentTable.CarrierServiceCode  = shipmentService   ? shipmentService   : segmentService;
        segmentTable.CarrierGroupCode    = shipmentGroup     ? shipmentGroup     : segmentGroup;
        segmentTable.ModeCode            = shipmentMode      ? shipmentMode      : segmentMode;
        segmentTable.FreightTermCode     = shipmentFreight   ? shipmentFreight   : segmentFreight;

        if (communicationType == TMSCommunicationType::Rate)
        {
            this.readRateRoute(segmentTable.CarrierCode, segmentTable.CarrierServiceCode, segmentTable.ModeCode);
        }

        segmentTable.RouteId             = routeId;
        segmentTable.RouteRecId          = routeRecId;

        [shipmentResponsible,
        shipmentVendorCode,
        shipmentVendorInvoiceCode]          = this.readShipPayment(_xmlNode);

        segmentTable.ResponsibleForPayment   = shipmentResponsible       ? shipmentResponsible       : segmentResponsible;
        segmentTable.VendorCode              = shipmentVendorCode        ? shipmentVendorCode        : segmentVendorCode;
        segmentTable.VendorInvoiceCode       = shipmentVendorInvoiceCode ? shipmentVendorInvoiceCode : segmentVendorInvoiceCode;

        segmentTable.insert();

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingConstraint</Name>
				<Source><![CDATA[
    void readRatingConstraint(XmlNode _xmlNode, TableId _tableId, RefRecId _recId)
    {
        TMSRateDetails          rateDetails;
        TMSAction               action;
        TMSId                   constraintCode;
        TMSName                 name;
        str                     constraintType;
        TMSRouteSegmentTable    segmentTable;
        TMSRouteTable           routeTable;

        constraintType  = this.returnNamedNode(_xmlNode, #constraintType);
        constraintCode  = this.returnNamedNode(_xmlNode, #code);
        name            = this.returnNamedNode(_xmlNode, #name );
        action          = any2int(this.returnNamedNode(_xmlNode, #action));

        rateDetails.RefTableId   = _tableId;
        rateDetails.RefRecId     = _recId;
        rateDetails.Id           = constraintCode;
        rateDetails.RateType     = TMSRateType::Constraint;
        rateDetails.RateNote     = strFmt('%1 (%2) - %3', action, constraintType, constraintCode);
        rateDetails.insert();

        errors += rateDetails.RateNote;

        this.addConstraintToRate(_tableId, _recId, action);

        if (_tableId == tableNum(TMSRouteSegmentTable))
        {
            segmentTable = TMSRouteSegmentTable::find(_recId, true);
            segmentTable.HasErrors = true;
            segmentTable.update();

            routeTable = TMSRouteTable::findByRouteIdRefRecord(segmentTable.RouteId, commonRec.TableId, commonRec.RecId, true);
            routeTable.HasErrors = true;
            routeTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipContainer</Name>
				<Source><![CDATA[
    void readShipContainer(XmlNode _xmlNode, TMSRouteSegmentShipment _shipment = null)
    {
        TMSRouteSegmentContainer        segmentContainer;
        WHSContainerTable               containerTable;
        Weight                          conWeight;
        WHSWeightUOM                    weightUM;
        XmlNodeList                     rateEntList;
        XmlNode                         rateEntNode;
        XmlNodeList                     rateList;
        XmlNode                         rateNode;
        XmlNodeList                     conRateList;
        XmlNode                         conRateNode;
        WHSContainerType                containerType;

        conId     = this.returnNamedNode(_xmlNode, #containerId);

        containerTable  = WHSContainerTable::findByContainerId(conId);
        containerType   = WHSContainerType::find(containerTable.ContainerTypeCode);

        conWeight       = str2num(this.returnNamedNode(_xmlNode, #weight));
        weightUM        = this.returnNamedNode(_xmlNode, #weightUM);

        ttsbegin;

        segmentContainer = TMSRouteSegmentContainer::find(_shipment.RouteCode, _shipment.Sequence, conId, true);

        segmentContainer.Weight              = conWeight;
        segmentContainer.ContainerTypeCode   = containerTable.ContainerTypeCode;
        segmentContainer.Height              = containerType.Height;
        segmentContainer.Length              = containerType.Length;
        segmentContainer.Width               = containerType.Width;

        if (segmentContainer.RecId == 0)
        {
            segmentContainer.RouteCode           = _shipment.RouteCode;
            segmentContainer.Sequence            = _shipment.Sequence;
            segmentContainer.Id                  = conId;
            segmentContainer.ShipmentId          = _shipment.Id;
            segmentContainer.insert();
        }
        else
        {
            segmentContainer.update();
        }

        ttscommit;

        rateEntList     = _xmlNode.selectNodes(#ratings);
        rateEntNode     = rateEntList.nextNode();

        while (rateEntNode)
        {
            rateList     = rateEntNode.selectNodes(#rating);
            rateNode     = rateList.nextNode();

            while (rateNode)
            {
                ttsbegin;

                segmentContainer.selectForUpdate(true);
                this.readSegmentContainer(segmentContainer, rateNode);
                segmentContainer.update();

                ttscommit;

                conRateList = rateNode.selectNodes(#rate);
                conRateNode = conRateList.nextNode();

                while (conRateNode)
                {
                    this.readShipContainerRate(conRateNode);

                    conRateNode = conRateList.nextNode();
                }

                this.readRatingErrors(rateNode, segmentContainer.tmsRouteSegment().TableId, segmentContainer.tmsRouteSegment().RecId);

                rateNode = rateList.nextNode();
            }

            rateEntNode = rateEntList.nextNode();
        }

        if (segmentContainer.ShipCarrierTrackingNum != '')
        {
            this.setContainerTrackingNumber(segmentContainer.Id, segmentContainer.ShipCarrierTrackingNum);
        }

        if (segmentContainer.ReturnShipCarrierTrackingNum != ''
            && isReturnLabelSPSPrintingFlightEnabled)
        {
            this.setReturnDetailReturnTrackingNumber(segmentContainer.Id, segmentContainer.ReturnShipCarrierTrackingNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readSegmentContainer</Name>
				<Source><![CDATA[
    [Hookable]
    protected void readSegmentContainer(TMSRouteSegmentContainer _segmentContainer, XmlNode _rateNode)
    {
        _segmentContainer.ShipCarrierTrackingNum = this.returnNamedNode(_rateNode, #trackingNumber);
        if (isShippingLabelRequestTypeEnabled)
        {
            _segmentContainer.ReturnShipCarrierTrackingNum  = this.returnNamedNode(_rateNode, #returnTrackingNumber);
        }

        this.readSegmentContainerLabelFromXml(_segmentContainer, _rateNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRouteRateDetail</Name>
				<Source><![CDATA[
    [Hookable]
    protected TMSRouteRateDetail readRouteRateDetail(XmlNode _xmlNode)
    {
        TMSRouteRateDetail routeRateDetail;

        TMSRateType       totalRate       = any2real(this.returnNamedNode(_xmlNode, #totalRate));
        NoYesId           user            = this.returnNamedNodeBooleanToNoYes(_xmlNode, #user);
        TMSShipperRate    shipperRate     = any2real(this.returnNamedNode(_xmlNode, #shipperRate));
        TMSCustomerRate   customerRate    = any2real(this.returnNamedNode(_xmlNode, #customerRate));

        routeRateDetail.RouteCode                    = conRouteId;
        routeRateDetail.Sequence                     = 1;
        routeRateDetail.Id                           = id;
        routeRateDetail.RouteAccessorialLevel        = recordType == TMSRecordType::Load ? TMSRouteAccessorialLevel::Load : TMSRouteAccessorialLevel::Shipment;
        routeRateDetail.AccessorialAssignmentLevel   = TMSAccessorialAssignmentLevel::Shipment;
        routeRateDetail.Generated                    = user != NoYes::Yes;
        routeRateDetail.RateType                     = str2int(this.returnNamedNode(_xmlNode, #rateType));
        routeRateDetail.RateId                       = this.returnNamedNode(_xmlNode, #code);
        routeRateDetail.RateCur                      = totalRate;
        routeRateDetail.ShipperRate                  = this.returnNamedNode(_xmlNode, #shipperRate) != '' ? shipperRate : totalRate;
        routeRateDetail.CustomerRate                 = this.returnNamedNode(_xmlNode, #customerRate) != '' ? customerRate : totalRate;
        routeRateDetail.RateUnit                     = any2int(this.returnNamedNode(_xmlNode, #units));
        routeRateDetail.RateUnitRate                 = any2real(this.returnNamedNode(_xmlNode, #unitRate));
        routeRateDetail.MarkupCode                   = this.returnNamedNode(_xmlNode, #chargeCode);
        routeRateDetail.CarrierCode                  = carrierCode;
        routeRateDetail.CarrierServiceCode           = carrierServiceCode;
        routeRateDetail.BillingGroupId               = this.returnNamedNode(_xmlNode, #billingGroup);
        routeRateDetail.ExternalCode                 = this.returnNamedNode(_xmlNode, #externalCode);
        routeRateDetail.CurrencyCode                 = this.returnNamedNode(_xmlNode, #currencyCode);

        return routeRateDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipContainerRate</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes rate information from shipment node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
    void readShipContainerRate(XmlNode _xmlNode)
    {
        TMSRouteRateDetail routeRateDetail = this.readRouteRateDetail(_xmlNode);
        routeRateDetail.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipRoute</Name>
				<Source><![CDATA[
    void readShipRoute(XmlNode _xmlNode)
    {
        TMSName                         routeGuide;
        TMSName                         routePlan;
        TMSRoute                        route;
        TMSRouteSegment                 routeSegment;
        TMSRouteSegmentLoad             segmentLoad;
        TMSRouteSegmentShipment         segmentShipment;
        XmlNodeList                     shipEntList;
        XmlNode                         shipNode;
        XmlNodeList                     conList;
        XmlNode                         conNode;
        WHSShipmentTable                shipmentTable;
        WHSShipmentId                   shipmentId;

        shipEntList = _xmlNode.selectNodes(#shipping);
        shipNode    = shipEntList.nextNode();

        routeId                 = this.returnNamedNode(_xmlNode, #routeGuideRecId);
        routeConfigCode         = this.returnNamedNode(_xmlNode, #routeConfigCode);
        routePlan               = this.returnNamedNode(_xmlNode, #routePlanName);
        routeGuide              = this.returnNamedNode(_xmlNode, #routeGuideName);

        shipmentId = this.returnNamedNode(shipNode, #shipmentId);
        shipmentTable = WHSShipmentTable::find(shipmentId);

        select segmentShipment where segmentShipment.Id ==  shipmentId;

        if (segmentShipment.RecId !=0)
        {
            conRouteId = segmentShipment.RouteCode;
        }
        else
        {
            route.setRouteCode();

            route.InventSiteId = shipmentTable.InventSiteId;
            route.InventLocationId = shipmentTable.InventLocationId;

            route.insert();
            conRouteId = route.RouteCode;
            routeSegment = this.writeRouteSegment(route);

            segmentShipment.RouteCode    = route.RouteCode;
            segmentShipment.Sequence     = routeSegment.Sequence;
            segmentShipment.Id           = shipmentTable.ShipmentId;
            segmentShipment.insert();

            segmentLoad.RouteCode        = route.RouteCode;
            segmentLoad.Sequence         = routeSegment.Sequence;
            segmentLoad.Id               = shipmentTable.LoadId;
            segmentLoad.insert();
        }

        conList	= shipNode.selectNodes(#shipping);
        conNode = conList.nextNode();

        while (conNode)
        {
            switch (this.returnNamedNode(conNode, #shippingEntityType))
            {
                case #typeLine:
                    this.readShipLine(conNode, commonRec.TableId, commonRec.RecId);
                    break;

                case #typeContainer:
                    this.readShipContainer(conNode, segmentShipment);
                    break;
            }

            conNode    = conList.nextNode();
        }

        if (communicationType != TMSCommunicationType::Ship)
        {
            this.readRatingEntities(shipNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the shipment.
    /// </summary>
    /// <param name="_xmlNode">
    /// Current XML node.
    /// </param>
    /// <param name="_segmentNode">
    /// Segment node.
    /// </param>
    public void readShipShipment(XmlNode _xmlNode, XmlNode _segmentNode = null)
    {
        TMSRouteSegmentTable        segmentTable;
        XmlNodeList                 addressList;
        XmlNode                     addressNode;
        TMSAddressPhone             pickupAdd;
        TMSAddressPhone             dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible;
        TMSVendorCode               shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode;
        TMSSequence                 sequence;
        TMSRouteAccessorialLevel    level = TMSRouteAccessorialLevel::Segment;

        recordType      = any2enum(symbol2Enum(enumNum(TMSRecordType), this.returnNamedNode(_xmlNode, #recordType)));
        loadDirection   = symbol2Enum(enumNum(TMSDirection), this.returnNamedNode(_xmlNode, #direction));

        if (communicationType == TMSCommunicationType::Confirmation && !segmentLoadLine.Sequence)
        {
            sequence                                = str2int(this.returnNamedNode(_xmlNode, #sequence));
            segmentLoadLine.Sequence                = sequence;
            segmentLoadLine.DestinationPostalCode   = segmentFromAddress.parmPostalCode();
            segmentLoadLine.OriginPostalCode        = segmentToAddress.parmPostalCode();
            this.deleteSegmentLoadLines(segmentLoadLine.RouteCode, sequence);
        }
        else
        {
            segmentTable = this.insertSegmentTable(_xmlNode);

            addressList = _xmlNode.selectNodes(#pickUp);
            addressNode = addressList.nextNode();
            pickupAdd   = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);
            pickupAdd   = segmentFromAddress;

            [shipOriginResponsible,
            shipOriginVendorCode,
            shipOriginVendorInvoiceCode] = this.readShipPayment(addressNode);

            addressList = _xmlNode.selectNodes(#dropOff);
            addressNode = addressList.nextNode();
            dropOffAdd  = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);
            dropOffAdd  = segmentToAddress;

            [shipDestResponsible,
            shipDestVendorCode,
            shipDestVendorInvoiceCode] = this.readShipPayment(addressNode);

            ttsbegin;

            segmentTable.OriginName                         = pickupAdd.parmName();
            segmentTable.OriginAddress                      = pickupAdd.parmStreet();
            segmentTable.OriginCity                         = pickupAdd.parmCity();
            segmentTable.OriginState                        = pickupAdd.parmState();
            segmentTable.OriginCounty                       = pickupAdd.parmCounty();
            segmentTable.OriginCountryRegion                = pickupAdd.parmCountryRegion();
            segmentTable.OriginCountryRegionISOCode         = LogisticsAddressCountryRegion::find(segmentTable.OriginCountryRegion).isOcode;
            segmentTable.OriginPostalCode                   = pickupAdd.parmPostalCode();
            segmentTable.OriginResidential                  = pickupAdd.parmResidential();
            segmentTable.OriginResponsibleForPayment        = shipOriginResponsible ? shipOriginResponsible : originResponsible;
            segmentTable.OriginVendorCode                   = shipOriginVendorCode ? shipOriginVendorCode : originVendorCode;
            segmentTable.OriginVendorInvoiceCode            = shipOriginVendorInvoiceCode ? shipOriginVendorInvoiceCode : originVendorInvoiceCode;

            segmentTable.DestinationName                    = dropOffAdd.parmName();
            segmentTable.DestinationAddress                 = dropOffAdd.parmStreet();
            segmentTable.DestinationCity                    = dropOffAdd.parmCity();
            segmentTable.DestinationState                   = dropOffAdd.parmState();
            segmentTable.DestinationCounty                  = dropOffAdd.parmCounty();
            segmentTable.DestinationCountryRegion           = dropOffAdd.parmCountryRegion();
            segmentTable.DestinationCountryRegionISOCode    = LogisticsAddressCountryRegion::find(segmentTable.DestinationCountryRegion).isOcode;
            segmentTable.DestinationPostalCode              = dropOffAdd.parmPostalCode();
            segmentTable.DestinationResidential             = dropOffAdd.parmResidential();
            segmentTable.DestinationResponsibleForPayment   = shipDestResponsible ? shipDestResponsible : destResponsible;
            segmentTable.DestinationVendorCode              = shipDestVendorCode ? shipDestVendorCode : destVendorCode;
            segmentTable.DestinationVendorInvoiceCode       = shipDestVendorInvoiceCode ? shipDestVendorInvoiceCode : destVendorInvoiceCode;
            segmentTable.DestinationHubCode                 = segmentDestHub;
            segmentTable.OriginHubCode                      = segmentOriginHub;
            segmentTable.Miles                              = miles;
            segmentTable.write();

            ttscommit;

            if (communicationType != TMSCommunicationType::Route)
            {
                this.readOverrideEntities(_xmlNode, TMSRateType::Rate, segmentTable.RefTableId, segmentTable.RefRecId);
                this.readRatingEntities(_xmlNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            }
        }

        this.finishReadShipShipment(_xmlNode, segmentTable, _segmentNode, addressList, addressNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXML</Name>
				<Source><![CDATA[
    void readXML(XML _xml)
    {
        XmlParseError       xmlError;
        XmlNode             transactionNode;
        XmlNodeList         rateList;
        XmlNode             requestNode;

        responseDoc = XmlDocument::newXml(_xml);
        xmlError = responseDoc.parseError();

        try
        {
            ttsbegin;

            if (xmlError && xmlError.errorCode() != 0)
            {
                xmlError.reason();
            }

            transactionNode     = responseDoc.documentElement();
            communicationType   = symbol2Enum(enumNum(TMSCommunicationType), this.returnNamedNode(transactionNode, #communicationType));

            carrierCode         = this.returnNamedNode(transactionNode, #carrier);
            carrierServiceCode  = this.returnNamedNode(transactionNode, #carrierService);
            carrierGroupCode    = this.returnNamedNode(transactionNode, #carrierGroup);

            rateList    = transactionNode.selectNodes(#request);
            requestNode = rateList.nextNode();

            if (communicationType != TMSCommunicationType::Void)
            {
                while (requestNode)
                {
                    if (communicationType != TMSCommunicationType::Apportionment)
                    {
                        this.readShippingEntity(requestNode);
                    }
                    else
                    {
                        this.readAppShippingEntity(requestNode);
                    }

                    requestNode = rateList.nextNode();
                }
            }
            else
            {
                this.readAllDocumentErrors(responseDoc);
                this.deleteSegmentContainer();
            }

            this.readRatingEntities(transactionNode);

            ttscommit;

            if (communicationType == TMSCommunicationType::Confirmation)
            {
                this.runApportionment(_xml);
            }
        }
        catch
        {
            throw error ("@SYS99824");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContainerTrackingNumber</Name>
				<Source><![CDATA[
    /// <summary>
	/// Sets carrier tracking number of container.
	/// </summary>
	/// <param name="_containerId">
	/// Container id of the container.
	/// </param>
	/// <param name="_trackingNumber">
	/// Tracking number to be set.
	/// </param>
    void setContainerTrackingNumber(WHSContainerId _containerId, ShipCarrierTrackingNum _trackingNumber)
    {
        WHSContainerTable       containerTable = WHSContainerTable::findByContainerId(_containerId, true);

        ttsbegin;

        containerTable.ShipCarrierTrackingNum   = _trackingNumber;
        containerTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnDetailReturnTrackingNumber</Name>
				<Source><![CDATA[
    private void setReturnDetailReturnTrackingNumber(WHSContainerId _containerId, TMSReturnShipCarrierTrackingNum _returnTrackingNumber)
    {
        ttsbegin;

        WHSReturnDetail returnDetail = WHSReturnDetail::findForContainerId(_containerId, true);
        if (returnDetail)
        {
            returnDetail.ReturnShipCarrierTrackingNum = _returnTrackingNumber;
            returnDetail.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the container information to the request.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the container.
    /// </param>
    /// <param name="_class">
    ///     The class of the container.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the container.
    /// </param>
    void writeShipContainer(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume)
    {
        WHSContainerTable           containerTable;
        WHSContainerLine            containerLine;
        Weight                      itemWeight;
        Volume                      itemVolume;
        AmountMST                   itemValue;
        WHSClass                    itemClass;

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeContainer);
        this.writeXMLElement(_xmlNode, #containerId, id);

        containerTable = WHSContainerTable::findByContainerId(id);

        this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(containerTable.Weight));
        this.writeXMLElement(_xmlNode, #weightUM, containerTable.WeightUOM);

        if (containerTable.ShipCarrierTrackingNum != '')
        {
            this.writeXMLElement(_xmlNode, #trackingNumber, containerTable.ShipCarrierTrackingNum);
        }

        if (isShippingLabelRequestTypeEnabled
            && isReturnLabelSPSPrintingFlightEnabled
            && this.parmShippingLabelRequestType() == TMSShippingLabelRequestType::ShippingAndReturnLabels)
        {
            WHSReturnDetail returnDetail = WHSReturnDetail::findForContainerId(containerTable.ContainerId);

            if (returnDetail.ReturnShipCarrierTrackingNum != '')
            {
                this.writeXMLElement(_xmlNode, #returnTrackingNumber, returnDetail.ReturnShipCarrierTrackingNum);
            }
            this.writeXMLElement(_xmlNode, #returnId, returnDetail.ReturnID);
            this.writeXMLElement(_xmlNode, #returnAccountNum, returnDetail.AccountNum);
            this.writeXMLElement(_xmlNode, #returnAddressName, returnDetail.ReturnAddressName);
            this.writeXMLElement(_xmlNode, #returnAddress, returnDetail.ReturnAddress);
        }

        while select ItemId, Qty, InventDimId, RecId, UnitId from containerLine
            where containerLine.ContainerId == containerTable.ContainerId
        {
            [itemWeight,
            itemVolume,
            itemValue]      = TMSProcessXML_Base::calculateItemWeightVolumeValue(containerLine.ItemId,
                                                                                 containerLine.Qty, 
                                                                                 containerLine.UnitId, 
                                                                                 containerLine.InventDimId);
            itemClass = TMSProcessXML_Base::getClassFromItem(containerLine.ItemId);
            this.writeShippingEntity(_xmlNode, #typeLine, containerLine.ItemId, itemWeight, itemClass, itemVolume, itemValue, containerLine.RecId, containerLine.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the shipment information to the request.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the shipment.
    /// </param>
    /// <param name="_class">
    ///     The class of the shipment.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the shipment.
    /// </param>
    /// <param name="_parentNode">
    ///     The parent node of the xml node.
    /// </param>
    void writeShipShipment(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume, XmlNode _parentNode)
    {
        XmlNode                     fromNode;
        XmlNode                     toNode;
        WHSContainerTable           containerTable;
        WHSShipmentTable            shipmentTable;
        WHSLoadTable                loadTable;
        WHSLoadLine                 loadLine;
        WHSClass                    whsClass;

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeShipment);
        this.writeXMLElement(_xmlNode, #routeGuideName, routeGuideName);
        this.writeXMLElement(_xmlNode, #routePlanName, routePlanName);
        this.writeXMLElement(_xmlNode, #routeConfigCode, routeConfigCode);
        this.writeXMLElement(_xmlNode, #sequence, int2str(routeSequence));

        containerTable  = WHSContainerTable::findByContainerId(id);
        shipmentTable   = WHSShipmentTable::find(containerTable.ShipmentId);
        loadTable       = WHSLoadTable::find(shipmentTable.LoadId);
        this.writeXMLElement(_xmlNode, #recordType, Global::enum2Symbol(enumNum(TMSRecordType), enum2int(TMSRecordType::Container)));
        this.writeXMLElement(_xmlNode, #shipmentId, shipmentTable.ShipmentId);
        this.writeXMLElement(_xmlNode, #orderNum, this.findShipmentOrderNum(shipmentTable.ShipmentId));
        this.writeXMLElement(_xmlNode, #direction, Global::enum2Symbol(enumNum(TMSDirection), TMSDirection::Outbound));
        this.writeXMLElement(_xmlNode, #freightTerm, freightTerm);

        this.writeShipCustomer(_xmlNode);
        this.writeXMLElement(_xmlNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segmentResponsible)));
        this.writeXMLElement(_xmlNode, #vendorCode, segmentVendorCode);
        this.writeXMLElement(_xmlNode, #vendorInvoiceCode, segmentVendorInvoiceCode);

        fromNode = this.writeXMLNode(_xmlNode, #pickup);
        this.writeAddress(fromNode, this.getFromAddressNotNull());
        this.writeXMLElement(fromNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(originResponsible)));
        this.writeXMLElement(fromNode, #vendorCode, originVendorCode);
        this.writeXMLElement(fromNode, #vendorInvoiceCode, originVendorInvoiceCode);

        toNode = this.writeXMLNode(_xmlNode, #dropoff);
        this.writeAddress(toNode, this.getToAddressNotNull());
        this.writeXMLElement(toNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(destResponsible)));
        this.writeXMLElement(toNode, #vendorCode, destVendorCode);
        this.writeXMLElement(toNode, #vendorInvoiceCode, destVendorInvoiceCode);

        this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(_weight));
        this.writeXMLElement(_xmlNode, #volume, TMSProcessXML_Base::real2str(_volume));
        this.writeXMLElement(_xmlNode, #class, TMSProcessXML_Base::real2str(_class));
        this.writeXMLElement(_xmlNode, #stcc, strFmt('%1', stcc));
        this.writeXMLElement(_xmlNode, #dlvDate, this.convertUTCDateTime2Str(dlvDateTime));
        this.writeXMLElement(_xmlNode, #shipDate, this.convertUTCDateTime2Str(shipDateTime));
        this.writeXMLElement(_xmlNode, #freightTerm, strFmt('%1', freightTerm));
        this.writeXMLElement(_xmlNode, #equipment, strFmt('%1', equipment));
        this.writeXMLElement(_xmlNode, #value, TMSProcessXML_Base::real2str(value));

        this.writeShippingEntity(_xmlNode, #typeContainer);

        this.writeShipManualAccessorials(_xmlNode);
        this.writeShipDeliveryAccessorials(_xmlNode, containerTable.ShipmentId);

        while select loadLine
            where loadLine.ShipmentId == shipmentTable.ShipmentId
        {
            whsClass = WHSLTLClass::find(WHSNMFC::find(WHSEcoResProductTransportationCodes::findByItemId(loadLine.ItemId).nmfcCode).ltlClassCode).Class;
            this.writeShippingEntity(_xmlNode, #typeLine, loadLine.ItemId, loadLine.loadLineWeight(), whsClass, loadLine.loadLineVolume(), loadLine.displayTotalValue(), loadLine.RecId, loadLine.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
	/// Constructs the class instance.
	/// </summary>
	/// <returns>
	/// The class instance.
	/// </returns>
    static TMSProcessXML_Container construct()
    {
        TMSProcessXML_Container  processXML;

        processXML = new TMSProcessXML_Container();

        return processXML;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>