<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDerivedFinHierarchyRuleStorage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerDerivedFinHierarchyRuleStorage</c> class manages the storage of derived financial hierarchy rules.
/// </summary>
class LedgerDerivedFinHierarchyRuleStorage
{
    RecId                                   ledgerDerivedFinHierarchyId;
    DimensionExpressionCriteriaCollection   expressionCriteriaCollection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance for the specified values.
    /// </summary>
    /// <param name="_ledgerDerivedFinHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    protected void init(EcoResCategoryId _ledgerDerivedFinHierarchyId)
    {
        ledgerDerivedFinHierarchyId = _ledgerDerivedFinHierarchyId;
        this.initializeExpressionCriteriaCollection(_ledgerDerivedFinHierarchyId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>DimensionExpressionCriteriaCollection</c> object for the derived financial hierarchies rule.
    /// </summary>
    /// <param name = "_ledgerDerivedFinHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> table record for which to populate the collection of expression criteria.
    /// </param>
    private void initializeExpressionCriteriaCollection(EcoResCategoryId _ledgerDerivedFinHierarchyId)
    {
        DimensionAttribute                      dimensionAttribute;
        LedgerDerivedFinHierarchyRuleCriteria   ledgerDerivedFinHierarchyRuleCriteria;

        expressionCriteriaCollection = DimensionExpressionCriteriaCollection::construct();

        // Populate the collection of expression criteria.
        while select ledgerDerivedFinHierarchyRuleCriteria
            where ledgerDerivedFinHierarchyRuleCriteria.EcoResCategory == _ledgerDerivedFinHierarchyId
            join RecId, Name from dimensionAttribute
                order by dimensionAttribute.Name
                where dimensionAttribute.RecId == ledgerDerivedFinHierarchyRuleCriteria.DimensionAttribute
        {
            expressionCriteriaCollection.addExpressionCriteria(
                DimensionExpressionCriteria::newForDimensionExpression(
                    dimensionAttribute.RecId,
                    ledgerDerivedFinHierarchyRuleCriteria.WildCardString,
                    ledgerDerivedFinHierarchyRuleCriteria.RangeFrom,
                    ledgerDerivedFinHierarchyRuleCriteria.RangeTo,
                    ledgerDerivedFinHierarchyRuleCriteria.IsFromOpen,
                    ledgerDerivedFinHierarchyRuleCriteria.IsToOpen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    public DimensionExpressionCriteriaCollection parmExpressionCriteriaCollection(
        DimensionExpressionCriteriaCollection _expressionCriteriaCollection = expressionCriteriaCollection)
    {
        expressionCriteriaCollection = _expressionCriteriaCollection;
        return expressionCriteriaCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the rule criteria records that represent the rule specified.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>EcoResCategory</c> record;
    /// </returns>
    /// <remarks>
    /// This method can be called by creating and initializing the <c>LedgerDerivedFinHierarchyRulesStorage</c> class whenever there is an update in the rules criteria records.
    /// This is the only method which can be used to update the <c>LedgerDerivedFinHierarchyRuleCriteria</c> table.
    /// </remarks>
    public RecId save()
    {
        LedgerDerivedFinHierarchyRuleCriteria   ledgerDerivedFinHierarchyRuleCriteria;
        DimensionExpressionCriteria             criteria;

        ttsbegin;

        LedgerDerivedFinHierarchyRuleStorage::delete(ledgerDerivedFinHierarchyId);

        ledgerDerivedFinHierarchyRuleCriteria.EcoResCategory = ledgerDerivedFinHierarchyId;
        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            criteria = expressionCriteriaCollection.current();

            ledgerDerivedFinHierarchyRuleCriteria.DimensionAttribute = criteria.parmDimensionAttributeId();
            ledgerDerivedFinHierarchyRuleCriteria.RangeFrom = criteria.parmRangeFromValue();
            ledgerDerivedFinHierarchyRuleCriteria.RangeTo = criteria.parmRangeToValue();
            ledgerDerivedFinHierarchyRuleCriteria.WildCardString = criteria.parmWildcardValue();
            ledgerDerivedFinHierarchyRuleCriteria.IsFromOpen = criteria.parmIsRangeFromValueExcluded();
            ledgerDerivedFinHierarchyRuleCriteria.IsToOpen = criteria.parmIsRangeToValueExcluded();

            ledgerDerivedFinHierarchyRuleCriteria.insert();
        }

        // Update validation cache (all status records are deleted)
        DimensionValidation::updateCacheForRuleChange();

        ttscommit;

        return ledgerDerivedFinHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and returns an instance of the <c>LedgerDerivedFinHierarchyRuleStorage</c> class for the specified values.
    /// </summary>
    /// <param name="_ledgerDerivedFinHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <returns>
    /// A new <c>LedgerDerivedFinHierarchyRuleStorage</c> class instance.
    /// </returns>
    public static LedgerDerivedFinHierarchyRuleStorage construct(RecId _ledgerDerivedFinHierarchyId)
    {
        LedgerDerivedFinHierarchyRuleCriteria   ledgerDerivedFinHierarchyRuleCriteria;
        LedgerDerivedFinHierarchyRuleStorage    ledgerDerivedFinHierarchyRuleStorage;

        // Validate input parameters
        if (!_ledgerDerivedFinHierarchyId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Ensure rule doesn't already exist
        select firstonly RecId from ledgerDerivedFinHierarchyRuleCriteria where ledgerDerivedFinHierarchyRuleCriteria.EcoResCategory == _ledgerDerivedFinHierarchyId;

        if (ledgerDerivedFinHierarchyRuleCriteria.RecId != 0)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ledgerDerivedFinHierarchyRuleStorage = new LedgerDerivedFinHierarchyRuleStorage();
        ledgerDerivedFinHierarchyRuleStorage.init(_ledgerDerivedFinHierarchyId);

        return ledgerDerivedFinHierarchyRuleStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the rule criteria records associated with specified derived financial hierarchy ID.
    /// </summary>
    /// <param name="_ledgerDerivedFinHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    public static void delete(RecId _ledgerDerivedFinHierarchyId)
    {
        LedgerDerivedFinHierarchyRuleCriteria ledgerDerivedFinHierarchyRuleCriteria;

        // Validate input parameter
        if (!_ledgerDerivedFinHierarchyId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        delete_from ledgerDerivedFinHierarchyRuleCriteria where ledgerDerivedFinHierarchyRuleCriteria.EcoResCategory == _ledgerDerivedFinHierarchyId;
        DimensionValidation::updateCacheForRuleChange();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of <c>LedgerDerivedFinHierarchyRulestorage</c> class for the rule criteria specified by derived financial hierarchy ID.
    /// </summary>
    /// <param name="_ledgerDerivedFinHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <returns>
    /// An instance of <c>LdgerDerivedFinHierarchyRuleStorage</c> class if the rule criteria is found; otherwise, null.
    /// </returns>
    public static LedgerDerivedFinHierarchyRuleStorage findById(RecId _ledgerDerivedFinHierarchyId)
    {
        LedgerDerivedFinHierarchyRuleStorage ledgerDerivedFinHierarchyRuleStorage;

        // Validate input parameter
        if (!_ledgerDerivedFinHierarchyId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (LedgerDerivedFinHierarchyRuleCriteria::findByLedgerDerivedFinHierarchy(_ledgerDerivedFinHierarchyId).RecId == 0)
        {
            return null;
        }

        ledgerDerivedFinHierarchyRuleStorage = new LedgerDerivedFinHierarchyRuleStorage();
        ledgerDerivedFinHierarchyRuleStorage.init(_ledgerDerivedFinHierarchyId);

        return ledgerDerivedFinHierarchyRuleStorage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableDimensionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the available dimension attributes for derived financial hierarchies.
    /// </summary>
    /// <returns>
    /// A list of <c>DimensionAttribute</c> table records.
    /// </returns>
    public static List getAvailableDimensionAttributes()
    {
        List                dimensionAttributes = new List(Types::Record);
        DimensionAttribute  dimensionAttribute;

        while select Name, RecId from dimensionAttribute
            order by dimensionAttribute.Name
                where dimensionAttribute.Type != DimensionAttributeType::DynamicAccount
        {
            dimensionAttributes.addEnd(dimensionAttribute);
        }

        return dimensionAttributes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>