<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineProjEmplTransImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>(ProjEmplTrans</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(ProjEmplTrans))]
public class TaxModelDocLineProjEmplTransImpl_IN extends TaxModelDocLineProjTableImpl_IN
{
    ProjEmplTrans                   projEmplTrans;
    ProjEmplTransTaxExtensionIN     projEmplTransTaxExtensionIN;
    ProjEmplTransSale               projEmplTransSale;
    projProposalJour                projProposalJour;
    ProjProposalEmpl                projProposalEmpl;
    ProjProposalEmplDetail          projProposalEmplDetail;
    ProjFundingSource               projFundingSource;
    CustTable                       custTable;
    boolean                         isMultipleFundingSource;
    Percent                         fundingSourceAllocationPercent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line can be edited or not on tax information.
    /// </summary>
    /// <returns>
    /// True if the document line is editable; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return projEmplTrans.projInvoiceStatus() != ProjInvoiceStatus::FullyInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        AmountCur amountCur = (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditNote || projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)?
            -projProposalEmplDetail.AmountCur : projProposalEmplDetail.AmountCur;

        if (amountCur != projEmplTransSale.LineAmount)
        {
            return this.getLineAmount();
        }

        if (this.getLineAmount() * projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency < 0)
        {
            return -projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency * fundingSourceAllocationPercent;
        }
        else
        {
            return projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency * fundingSourceAllocationPercent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Direction
    /// </summary>
    /// <returns>
    /// The <c>Direction_IN</c>
    /// </returns>
    public Direction_IN getCustomsDirection()
    {
        return Direction_IN::Export;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTariffCodeTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustomsTariffCodeTable_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>CustomsTariffCodeTable_IN</c>
    /// </returns>
    public CustomsTariffCodeTable_IN getCustomsTariffCodeTable()
    {
        CustomsTariffCodeTable_IN nullBuffer;
        return nullBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    public TaxRegistrationNumber_IN getCustomsTaxRegistrationNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        CustTable ret;

        if (isMultipleFundingSource)
        {
            ret = projFundingSource.getCustomer_IN();
        }
        else
        {
            if (projProposalJour)
            {
                ret = CustTable::find(projProposalJour.InvoiceAccount);
            }
            else
            {
                ret = CustTable::find(ProjTable::find(projEmplTrans.ProjID).CustAccount);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public Date getDeliveryDate()
    {
        return projProposalJour ? projProposalJour.InvoiceDate:ProjEmplTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        // code in syp layer is same as sys layer
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        // code in syp layer is same as sys layer
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return projProposalEmplDetail.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        // code in syp layer is same as sys layer
        return projEmplTrans.projEmplTransTaxExtensionIN().MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        if (isMultipleFundingSource)
        {
            return LogisticsPostalAddress::findByLocation(projFundingSource.InvoiceLocation);
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        if (isMultipleFundingSource)
        {
            return TaxInformation_IN::findDefaultbyLocation(projFundingSource.InvoiceLocation);
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        if (projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
        {
            return -projEmplTrans.Qty;
        }
        else
        {
            return projEmplTrans.Qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        // code in syp layer is same as sys layer
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        // code in syp layer is same as sys layer
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        // For service management, once the service event group exists, the GST tax should be calculated base on
        // the due date of service event group.
        if (projProposalEmplDetail && projEmplTransTaxExtensionIN.ServiceEventGroup)
        {
            return projProposalEmplDetail.projProposalEmpl().projProposalJour().InvoiceDate;
        }

        return projProposalJour ? projProposalJour.InvoiceDate : ProjEmplTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        Debug::assert(_documentLineMap.SourceTableId == tableNum(ProjEmplTransSale)
            || _documentLineMap.SourceTableId == tableNum(ProjEmplTrans)
            || _documentLineMap.SourceTableId == tableNum(ProjproposalEmpl));

        if (_documentLineMap.SourceTableId == tableNum(ProjEmplTrans))
        {
            projEmplTrans = _documentLineMap;
        }
        else
        {
            if (_documentLineMap.SourceTableId == tableNum(ProjEmplTransSale))
            {
                projEmplTransSale      = _documentLineMap;

                ProjProposalId projProPosalId
                    = ProjTrans::newProjEmplTransSale(projEmplTransSale.projEmplTrans(), projEmplTransSale).proposalId();

                select firstOnly projProposalEmpl
                    where projProposalEmpl.proposalId == projProPosalId
                        join projProposalEmplDetail
                            where projProposalEmplDetail.ProposalRefRecId   == projProposalEmpl.RecId
                                && projProposalEmplDetail.SaleRefRecId      == projEmplTransSale.RecId
                        join projProposalJour
                            where projProposalJour.ProposalId == projProposalEmpl.ProposalId
                                && (projProposalJour.LineProperty == ProjLinePropertyCode::Open
                                    || projProposalJour.LineProperty == ProjLinePropertyCode::Approved
                                    || projProposalJour.LineProperty == ProjLinePropertyCode::Invoiced);
            }
            else if (_documentLineMap.SourceTableId == tableNum(ProjproposalEmpl))
            {
                projProposalEmpl        = _documentLineMap;

                select firstOnly projEmplTransSale
                    where projEmplTransSale.TransId == ProjproposalEmpl.TransId;

                select firstOnly projProposalJour
                    where projProposalJour.ProposalId == projProposalEmpl.ProposalId;
            }

            projEmplTrans               = ProjEmplTrans::find(projEmplTransSale.TransId);
            projFundingSource           = ProjFundingSource::find(projEmplTransSale.FundingSource);
            projEmplTransTaxExtensionIN = ProjEmplTransTaxExtensionIN::findByProjEmplTrans(projEmplTrans.RecId);
            
            isMultipleFundingSource         = ProjInvoiceTable::hasMultipleFundingSources(ProjTable::find(projEmplTrans.ProjId).ProjInvoiceProjId);
            fundingSourceAllocationPercent  = this.getFundingSourcePercentage();

            custTable           = this.getCustTable();
        }

        super(projEmplTransView_IN::findByProjEmplTransId(projEmplTrans.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        // code in syp layer is same as sys layer
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is ExciseDSA or not.
    /// </summary>
    /// <returns>
    /// True if the document line is ExciseDSA;otherwise, false.
    /// </returns>
    public NoYes isExicseDSA()
    {
        // code in syp layer is same as sys layer
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundingSourcePercentage</Name>
				<Source><![CDATA[
    private Percent getFundingSourcePercentage()
    {
        Percent         ret;
        ProjTurnover    transTurnover;

        if (isMultipleFundingSource)
        {
            transTurnover = projEmplTransSale.projEmplTrans().transTurnover();

            if (transTurnover)
            {
                ret = abs(projEmplTransSale.LineAmount / transTurnover);
            }
        }
        else
        {
            ret = 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return projEmplTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SEZ property of party.
    /// </summary>
    /// <returns>
    /// true if the party is SEZ; otherwise, false.
    /// </returns>
    public NoYes getIsSEZParty()
    {
        return LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location).TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Deemed export property of party.
    /// </summary>
    /// <returns>
    /// true if it is Deemed export(TaxGSTEPZCode_IN = BTP/EHTP/EOU/STP); otherwise, false.
    /// </returns>
    public NoYes getIsDeemedExport()
    {
        LogisticsLocationExt logisticsLocationExt = LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location);
        return logisticsLocationExt.isDeemedExportType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>