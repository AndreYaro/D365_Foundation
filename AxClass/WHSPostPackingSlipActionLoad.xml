<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPostPackingSlipActionLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPostPackingSlipActionLoad</c> class is used to encapsulate logic for posting packing slips for a load.
/// </summary>
[SysTableNameFactory(tableStr(WHSLoadTable))]
public class WHSPostPackingSlipActionLoad extends WHSPostPackingSlipAction
{
    protected WHSLoadTable loadTable;
    private boolean allowPostPackingSlipForLoadedLoad = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canPackingSlipBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a packing slip can be posted.
    /// </summary>
    /// <returns>
    /// true if packing slip can be posted; otherwise, false
    /// </returns>
    public boolean canPackingSlipBePosted()
    {
        if (!this.canPackingSlipBePostedForSingleLoad())
        {
            return false;
        }

        if (this.anyMultiLoadsThatCannotBePosted())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a state with a record buffer.
    /// </summary>
    /// <param name = "_common">
    /// <c>Common</c> buffer used for this instance of the <c>WHSPostPackingSlipActionLoad</c> class.
    /// It is expected to be a record from <c>WHSLoadTable</c> table.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        loadTable = _common as WHSLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsPackingSlipType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the packing slip type of a load.
    /// </summary>
    /// <returns>
    /// The packing slip type of a load.
    /// </returns>
    public WHSPackingSlipType whsPackingSlipType()
    {
        return loadTable.PackingSlipType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPackingSlipBePostedForSingleLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a packing slip can be posted for a single load.
    /// </summary>
    /// <returns>
    /// true if packing slip can be posted; otherwise, false
    /// </returns>
    public boolean canPackingSlipBePostedForSingleLoad()
    {
        boolean canPackingSlipBePosted = loadTable.LoadId
                    && (loadTable.LoadStatus     == WHSLoadStatus::Shipped
                        || (this.allowPostPackingSlipForLoadedLoad && loadTable.LoadStatus == WHSLoadStatus::Loaded))
                    && loadTable.LoadDirection   != WHSLoadDirection::Inbound
                    && loadTable.LoadingStrategy == WHSLoadingStrategy::FullLoadShippingOnly;

        return canPackingSlipBePosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(WHSSalesPackingSlipPostArgs _salesPackingSlipPostArgs)
    {
        if (_salesPackingSlipPostArgs)
        {
            this.allowPostPackingSlipForLoadedLoad = _salesPackingSlipPostArgs.allowPostPackingSlipForLoadedLoad;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyMultiLoadsThatCannotBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if packing slip can be posted for additional loads on the same route.
    /// </summary>
    /// <returns>
    /// A load ID if the packing slip cannot be posted; otherwise empty value.
    /// </returns>
    private WHSLoadId anyMultiLoadsThatCannotBePosted()
    {
        if (TMSRoute::find(loadTable.RouteCode).numOfLoads() > 1)
        {
            WHSLoadTable multiLoadTable;

            while select multiLoadTable
                where multiLoadTable.RouteCode  == loadTable.RouteCode
                    && multiLoadTable.LoadId    != loadTable.LoadId
            {
                WHSPostPackingSlipActionLoad postPackingSlipActionLoad = WHSPostPackingSlipAction::newFromBuffer(multiLoadTable) as WHSPostPackingSlipActionLoad;

                // We expect the same class as this class.
                if (!postPackingSlipActionLoad)
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
                
                if (!postPackingSlipActionLoad.canPackingSlipBePostedForSingleLoad())
                {
                    return multiLoadTable.LoadId;
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCanPackingSlipBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a packing slip can be posted for a given load.
    /// </summary>
    /// <returns>
    /// true if packing slip can be posted; otherwise, false
    /// </returns>
    public boolean validateCanPackingSlipBePosted()
    {
        boolean ret = true;

        if (!this.canPackingSlipBePostedForSingleLoad())
        {
            ret = checkFailed(strFmt("@WAX5703", loadTable.LoadId));
        }

        WHSLoadId loadId = this.anyMultiLoadsThatCannotBePosted();

        if (loadId)
        {
            ret = checkFailed(strFmt("@WAX5704", loadTable.RouteCode, loadId));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>