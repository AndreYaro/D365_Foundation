<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesQuotationCalcTax extends SalesCalcTax
{
    SalesQuotationLine      salesQuotationLine;
    SalesQuotationTotals    salesQuotationTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    TaxAmountCur calcTax(TradeTotalsBase  _salesQuotationTotals)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupQueryRun</Name>
				<Source><![CDATA[
    protected TradeTotalsIQueryRun createMarkupQueryRun(tableId      tableId, recId        recId)
    {
        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createMarkupEnumerableProvider().markupEnumerable(tableId, recId, update).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    abstract CurrencyCode currencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    abstract DiscAmount endDisc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    abstract CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    abstract ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    abstract void initCursor()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the sales quotation document.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method is overridden in child classes to determine whether tax is included for the various
    ///    sales quotation documents.
    /// </remarks>
    public boolean isTaxIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount markupAmount()
    {
        AmountCur           value;
        TaxSalesQuotation   taxSalesQuotation = tax as TaxSalesQuotation;

        if (salesQuotationLine)
        {
            value = this.transLineAmount();
        }
        else
        {
            value = taxSalesQuotation.orderBalance(markupTrans.TransRecId);
        }

        MarkupBaseValueCalcEngine markupBaseValueCalcEngine;

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled && markupBaseValueCalcEngineProvider)
        {
            markupBaseValueCalcEngine = markupBaseValueCalcEngineProvider.getInstance(this.getSourceRecordForMarkupBaseValueCalcEngine(), taxSalesQuotation.getTaxMarkupCompound());
            if (markupBaseValueCalcEngine)
            {
                value = markupBaseValueCalcEngine.calculateBaseAmount(value, markupTrans);
            }
        }

        MarkupAmount markupAmount = markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate()));

        if (isAutoChargesSetupSequenceCompoundFeatureEnabled && markupBaseValueCalcEngine)
        {
            markupBaseValueCalcEngine.compoundMarkupValue(markupAmount, markupTrans);
        }

        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceRecordForMarkupBaseValueCalcEngine</Name>
				<Source><![CDATA[
    protected Common getSourceRecordForMarkupBaseValueCalcEngine()
    {
        if (salesQuotationLine) // Line markup
        {
            return salesQuotationLine;
        }
        else // Header markup
        {
            return markupTrans;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    abstract DimensionDefault markupDefaultDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunGet</Name>
				<Source><![CDATA[
    protected Common markupQueryRunGet(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsCommonEnumerator commonEnumerator = _markupQueryRun as TradeTotalsCommonEnumerator;

        MarkupTrans markupTransStatement = commonEnumerator.parmCommonEnumerator().current();

        return markupTransStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupQueryRunNext</Name>
				<Source><![CDATA[
    protected boolean markupQueryRunNext(TradeTotalsIQueryRun _markupQueryRun)
    {
        TradeTotalsCommonEnumerator queryRun = _markupQueryRun as TradeTotalsCommonEnumerator;
        return queryRun.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup markupTaxGroup()
    {
        return markupTrans.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup markupTaxItemGroup()
    {
        return markupTrans.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common  _source)
    {
        super(_source);

        source  = _source;
        update  = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    abstract Common nextLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher, NoYes _post = NoYes::Yes)
    {
        TaxSalesInvoice taxSalesInvoice = new TaxSalesInvoice(
            _post,
            this,
            this.tax().tmpTaxWorkTrans());

        taxSalesInvoice.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    recId recID()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void setTax(TaxCode       _taxCode,
                TaxAmount     _taxAmount)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    tableId tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    Tax tax(Tax _tax = tax)
    {
        tax = _tax;

        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    abstract AmountCur transLineAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    abstract AmountCur transLineAmountInclTax()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    abstract PriceCur transPcsPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    abstract SalesQty transQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    recId transRecId()
    {
        return salesQuotationLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    tableId transTableId()
    {
        return salesQuotationLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    abstract TaxGroup transTaxGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    abstract TaxItemGroup transTaxItemGroup()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    abstract TradeInventTransId transTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    abstract EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationCalcTax construct(Common           _source,
                                           SalesUpdate      _specQty        = SalesUpdate::All,
                                           AccountOrder     _sumBy          = AccountOrder::None,
                                           ParmId           _parmId         = '',
                                           QuotationIdBase  _sumQuotationId = '',
                                           DocumentStatus   _documentStatus = DocumentStatus::None)
    {
        switch (_source.TableId)
        {
            case tableNum(SalesQuotationTable):
                return SalesQuotationCalcTax_Sales::construct(_source, _specQty, _sumBy, _parmId, _sumQuotationId, _documentStatus);
        }
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>