<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBudgetUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class AssetBudgetUpdate extends RunBase
{
    QueryRun        queryRun;

    boolean updateLedger;
    boolean deleteExistingAssetBudget;
    boolean deleteExistingLedgerBudget;

    BudgetModelId ledgerBudgetModel;

    // variables that do not need to be packed/unpacked
    DialogField dialogBudgetModelId;
    DialogField dialogDeleteExistingLedgerBudget;
    DialogField dialogDeleteExistingAssetBudget;

    Query queryExistingLedgerBudget;
    QueryBuildRange qbrBudgetTransactionHeader_TransactionStatus;

    BudgetTransactionCode budgetTransactionCode;
    BudgetTransactionType budgetTransactionTypeAsset;
    NoYes isBudgetTransStatusCompleted;

    NumberSequenceReference budgetTransNumberSequenceRef;
    NumberSeq transferBudgetTransNumberSeq;

    // Map to cache reversal managers by budget model
    // Key: Budget model id
    // Value: BudgetTransactionReverseManager
    Map reversalManagers;

    // Map to cache budget transaction headers by budget model
    // Key: Budget model id
    // Value: BudgetTransactionHeader
    Map budgetTransactionHeaders;

    // Map to cache budget model cash flow status (Cov) by budget model
    // Key: Budget model id
    // Value: NoYes enum value
    Map budgetModelCovStatuses;

    BudgetTransactionManager budgetTransactionManager;
    BudgetTransactionPost budgetTransactionPost;

    public const int CurrentVersion = 4;

    #localmacro.CurrentList
        ledgerBudgetModel,
        deleteExistingAssetBudget,
        deleteExistingLedgerBudget,
        updateLedger
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected abstract Query buildQuery(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the ledger dimension of the budget transaction line.
    /// </summary>
    /// <param name="_budgetLedgerDimension">
    ///    The budget ledger dimension to check.
    /// </param>
    /// <param name="_assetBudgetLedgerDimension">
    ///    The asset budget ledger account that is the result in the budget ledger dimension.
    /// </param>
    /// <remarks>
    ///    Checks for dimension attribute values specified by the asset budget ledger account not included in
    ///    the budget structure.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    No budget ledger dimension resulted from the specified asset budget ledger account.
    /// </exception>
    private void checkBudgetLedgerDimension(
        LedgerDimensionBudget _budgetLedgerDimension,
        LedgerDimensionAccount _assetBudgetLedgerDimension)
    {
        if (_budgetLedgerDimension == 0)
        {
            // No dimension attributes are in use by the active budget structure.
            throw error(strfmt("@SYS300282", BudgetTransactionType::FixedAsset));
        }
        else
        {
            // Check for & cache any dimension attributes not included in the active budget structure
            if (budgetTransactionManager == null)
            {
                budgetTransactionManager = BudgetTransactionManager::construct();
            }

            budgetTransactionManager.cacheDimAttributesNotBudgetEnabled(_assetBudgetLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmDraftBudgetTransNoReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Confirms that the draft budget transactions will not be reversed by the process.
    /// </summary>
    /// <returns>
    ///    true if it is confirmed that draft budget transactions will not be reversed; otherwise, false.
    /// </returns>
    protected boolean confirmDraftBudgetTransNoReverse()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates budget transactions details based on the <c>AssetBudget</c> record.
    /// </summary>
    /// <param name="_assetBudget">
    ///    The <c>AssetBudget</c> record for which to create budget transaction details.
    /// </param>
    /// <remarks>
    ///    Creates a <c>BudgetTransactionHeader</c> record if one does not exist for the process for the
    ///    budget model specified by the <c>AssetBudget</c> record. Creates two <c>BudgetTransactionLine</c>
    ///    records, one for the ledger dimension and one for the offset ledger dimension specified by the
    ///    <c>AssetBudget</c> record.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The number sequence specified for the budget transaction is invalid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>BudgetTransactionHeader</c> record created is invalid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>BudgetTransactionLine</c> record created for the ledger dimension is invalid.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The <c>BudgetTransactionLine</c> record created for the offset ledger dimension is invalid.
    /// </exception>
    protected void createBudgetTransaction(AssetBudget _assetBudget)
    {
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionLine budgetTransactionLineOffset;

        // Get existing header from map if exists - otherwise create new header & add to map
        if (budgetTransactionHeaders.exists(_assetBudget.BudgetModel))
        {
            budgetTransactionHeader = budgetTransactionHeaders.lookup(_assetBudget.BudgetModel);
        }
        else
        {
            // Create new header for budget model
            budgetTransactionHeader.clear();
            budgetTransactionHeader.initValue();

            if (transferBudgetTransNumberSeq == null)
            {
                if (BudgetTransactionManager::checkBudgetTransactionNumberSequence() == false)
                {
                    throw error("@SYS131643");
                }
            }

            // Get the budget transaction number sequence
            transferBudgetTransNumberSeq = NumberSeq::newGetNum(budgetTransNumberSequenceRef);

            budgetTransactionHeader.TransactionNumber = transferBudgetTransNumberSeq.num();
            budgetTransactionHeader.setBudgetTransactionCode(budgetTransactionCode.RecId);
            budgetTransactionHeader.editBudgetModel(true, _assetBudget.BudgetModel);

            if (budgetTransactionHeader.validateWrite() == true)
            {
                budgetTransactionHeader.write();

                // Add header to cache
                budgetTransactionHeaders.insert(_assetBudget.BudgetModel, budgetTransactionHeader);
            }
            else
            {
                // Process cannot complete if transfer budget transaction cannot be created
                throw error("@SYS131643");
            }
        }

        // Create budget transaction line record
        budgetTransactionLine.clear();

        // Set fields from header
        budgetTransactionLine.BudgetTransactionHeader = budgetTransactionHeader.RecId;
        budgetTransactionLine.LineNumber = budgetTransactionHeader.numOfLines() + 1;

        // Set fields from AssetBudget
        budgetTransactionLine.AssetBudget = _assetBudget.RecId;
        budgetTransactionLine.Date = _assetBudget.TransDate;
        budgetTransactionLine.TransactionCurrency = _assetBudget.CurrencyCode;
        budgetTransactionLine.Comment = _assetBudget.Txt;
        budgetTransactionLine.TransactionCurrencyAmount = _assetBudget.AmountCur;

        if (_assetBudget.TransType == AssetTransType::DisposalSale)
        {
            budgetTransactionLine.BudgetType = BudgetType::Revenue;
        }

        budgetTransactionLine.LedgerDimension = BudgetTransactionManager::saveBudgetLedgerDimension(_assetBudget.LedgerDimension);

        this.checkBudgetLedgerDimension(
                budgetTransactionLine.LedgerDimension,
                _assetBudget.LedgerDimension);

        // Set fields from BudgetModel
        budgetTransactionLine.IncludeInCashFlowForecast = this.getBudgetModelCovStatus(_assetBudget.BudgetModel);

        // Set derived fields
        budgetTransactionLine.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(budgetTransactionLine.TransactionCurrencyAmount, budgetTransactionLine.TransactionCurrency, budgetTransactionLine.Date);

        // Create offset budget transaction line record
        if (_assetBudget.OffsetLedgerDimension)
        {
            budgetTransactionLineOffset.clear();
            budgetTransactionLineOffset.data(budgetTransactionLine.data());

            // Increment line number
            budgetTransactionLineOffset.LineNumber++;

            // Set derived fields
            budgetTransactionLineOffset.TransactionCurrencyAmount = budgetTransactionLine.TransactionCurrencyAmount * -1;
            budgetTransactionLineOffset.AccountingCurrencyAmount = budgetTransactionLine.AccountingCurrencyAmount * -1;

            // Set fields from AssetBudget for offset
            budgetTransactionLineOffset.LedgerDimension = BudgetTransactionManager::saveBudgetLedgerDimension(_assetBudget.OffsetLedgerDimension);

            this.checkBudgetLedgerDimension(
                    budgetTransactionLineOffset.LedgerDimension,
                    _assetBudget.OffsetLedgerDimension);
        }

        // Write the budget transaction line
        if (budgetTransactionLine.validateWrite() == true &&
            BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date) == true)
        {
            budgetTransactionLine.write();
        }
        else
        {
            // Process cannot complete if transfer budget transaction line cannot be created
            throw error("@SYS131643");
        }

        // Write the offset budget transaction line
        if (budgetTransactionLineOffset.validateWrite() == true &&
            BudgetTransactionManager::validateLedgerDimension(budgetTransactionLineOffset.LedgerDimension, budgetTransactionLineOffset.Date) == true)
        {
            budgetTransactionLineOffset.write();
        }
        else
        {
            // Process cannot complete if offset for transfer budget transaction line cannot be created
            throw error("@SYS131643");
        }

        if (isBudgetTransStatusCompleted == NoYes::Yes)
        {
            // Option to create transferred budget as completed transactions is marked
            budgetTransactionPost = BudgetTransactionPost::construct(budgetTransactionHeader.TransactionNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetModelCovStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cash flow status for the specified budget model.
    /// </summary>
    /// <param name="_budgetModelId">
    ///    The budget model ID for which to get the cash flow status.
    /// </param>
    /// <returns>
    ///    The value of the <c>Cov</c> field of the <c>BudgetModel</c> record.
    /// </returns>
    protected NoYes getBudgetModelCovStatus(BudgetModelId _budgetModelId)
    {
        NoYes budgetModelCov;

        if (budgetModelCovStatuses.exists(_budgetModelId))
        {
            budgetModelCov = budgetModelCovStatuses.lookup(_budgetModelId);
        }
        else
        {
            budgetModelCov = BudgetModel::find(HeadingSub::Heading, _budgetModelId).Cov;

            budgetModelCovStatuses.insert(_budgetModelId, budgetModelCov);
        }

        return budgetModelCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        if (this.parmUpdateLedger())
        {
            deleteExistingLedgerBudget = dialogDeleteExistingLedgerBudget.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prevent code in super() from running.
    /// </summary>
    public void getLast()
    {
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables used for budget transactions during the asset budget transfer process.
    /// </summary>
    /// <remarks>
    ///    Gets the default budget transaction code for fixed assets and the number sequence reference for
    ///    budget transactions.Initializes maps used for caching budget transaction headers and budget model
    ///    cash flow status.
    /// </remarks>
    protected void initForBudgetTransaction()
    {
        // Get the default budget transaction code for Asset
        budgetTransactionCode = BudgetTransactionCode::findDefaultByTransactionType(budgetTransactionTypeAsset);

        // Get the number sequence reference for budget transaction number
        budgetTransNumberSequenceRef = BudgetParameters::numRefBudgetTransactionId();

        // Initialize maps for caching details
        budgetTransactionHeaders = new Map(Types::String, Types::Record);
        budgetModelCovStatuses = new Map(Types::String, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstance</Name>
				<Source><![CDATA[
    protected void initInstance(Common _common)
    {
        queryRun = new QueryRun(this.buildQuery(_common));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        budgetTransactionTypeAsset = BudgetTransactionType::FixedAsset;
        isBudgetTransStatusCompleted = BudgetParameters::find().IsAssetBudgetTransCreateAsCompleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateLedger</Name>
				<Source><![CDATA[
    boolean parmUpdateLedger(boolean _updateLedger = updateLedger)
    {
        updateLedger = _updateLedger;

        return updateLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the last choice by using the <see cref="M:RunBase.pack" /> method.
    /// </summary>
    /// <remarks>
    /// This method should not typically be overridden.
    /// </remarks>
    public void saveLast()
    {
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version     = RunBase::getVersion(packedClass);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a default budget transaction code exists for the fixed asset transaction type and
    ///    confirms that draft budget transactions will not be reversed.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The object or form that called this method.
    /// </param>
    /// <returns>
    ///    true if a default budget transaction code exists for the fixed asset transaction type and it is
    ///    confirmed that draft budget transactions will not be reversed; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean isValid = true;

        // Default budget transaction code for Fixed Asset transaction type
        if (BudgetTransactionCode::existDefaultByTransactionType(budgetTransactionTypeAsset) == false)
        {
            isValid = checkFailed(strfmt("@SYS132978", budgetTransactionTypeAsset));
        }

        // Confirm that draft transactions will not be reversed
        isValid = isValid && this.confirmDraftBudgetTransNoReverse();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AssetBudgetUpdate construct(Common _common)
    {
        AssetBudgetUpdate   assetBudgetUpdate;

        switch (_common.TableId)
        {
            case tablenum(LedgerJournalTrans):
                assetBudgetUpdate = new AssetBudgetUpdate_Journal();
                break;

            case tablenum(AssetBudget):
                assetBudgetUpdate = new AssetBudgetUpdate_Trans();
                break;

            default:
                throw error("@SYS67821");
        }

        assetBudgetUpdate.initInstance(_common);

        return assetBudgetUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        AssetBudgetUpdate assetBudgetUpdate = AssetBudgetUpdate::construct(args.record());

        assetBudgetUpdate.parmUpdateLedger(args.parmEnum());

        if (assetBudgetUpdate.prompt())
        {
            assetBudgetUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateLedgerNeeded</Name>
				<Source><![CDATA[
    protected boolean isUpdateLedgerNeeded(AssetBudget _assetBudget)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>