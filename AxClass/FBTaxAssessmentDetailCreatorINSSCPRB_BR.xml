<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentDetailCreatorINSSCPRB_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBTaxAssessmentDetailCreatorINSSCPRB_BR extends FBTaxAssessmentDetailCreator_BR
{
    FiscalOrganization_BR rootFiscalOrganization;

    Map assessmentByEconomicActivityCodeMap;

    SystemSequence systemSequence;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAllAssessmentDetails</Name>
				<Source><![CDATA[
    public void createAllAssessmentDetails()
    {
        FiscalEstablishment_BR  fiscalEstablishment;
        FBBookingPeriod_BR      branchBookingPeriod;
    
        ttsbegin;
    
        this.initAssessmentByEconomicActivityMap();
    
        if (rootFiscalOrganization)
        {
            systemSequence = new systemSequence();
    
            systemSequence.suspendRecIds(tableNum(FBTaxTrans_BR));
            systemSequence.flushValues(tableNum(FBTaxTrans_BR));
    
            systemSequence.suspendRecIds(tableNum(FBTaxAssessmentINSSCPRB_BR));
            systemSequence.flushValues(tableNum(FBTaxAssessmentINSSCPRB_BR));
    
            while select crossCompany RecId, FiscalOrganization_BR, FiscalEstablishmentId, DataAreaId from fiscalEstablishment
                where fiscalEstablishment.FiscalOrganization_BR == rootFiscalOrganization.RecId
            join RecId from branchBookingPeriod
                where   fiscalEstablishment.FiscalEstablishmentId   == branchBookingPeriod.FiscalEstablishmentId
                    &&  fiscalEstablishment.dataAreaId              == branchBookingPeriod.FiscalEstablishmentDataArea
                    &&  branchBookingPeriod.PeriodMonth             == fbTaxAssessment.bookingPeriod().PeriodMonth
                    &&  branchBookingPeriod.PeriodYear              == fbTaxAssessment.bookingPeriod().PeriodYear
            {
                changeCompany(fiscalEstablishment.dataAreaId)
                {
                    this.createDetailsForFiscalDocuments    (branchBookingPeriod.RecId);
                    this.createDetailsForNonFiscalOperations(branchBookingPeriod.RecId);
                }
            }
    
            this.saveAssessmentByEconomicActivityCodeMap();
    
            systemSequence.removeRecIdSuspension(tableNum(FBTaxTrans_BR));
            systemSequence.removeRecIdSuspension(tableNum(FBTaxAssessmentINSSCPRB_BR));
    
            changeCompany(rootFiscalOrganization.FiscalEstablishmentDataArea)
            {
                this.updateAssessmentFromAdjustments();
                this.updateCPRBAssessment();
            }
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetailsForFiscalDocuments</Name>
				<Source><![CDATA[
    private void createDetailsForFiscalDocuments(RecId _fbBookingPeriodRecId)
    {
        FiscalDocument_BR                       fiscalDocument;
        FiscalDocumentLine_BR                   fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR               fiscalDocumentTaxTrans;
        FBBookingPeriodFiscalDocument_BR        bookingPeriodFiscalDocument;
        FBTaxTrans_BR                           fbTaxTrans;
        FBTaxTrans_BR                           existingFbTaxTrans;
    
        FBTaxAssessmentINSSCPRB_BR              taxAssessmentINSSCPRB;
        FBTaxAssessmentINSSCPRBTaxTrans_BR      taxAssessmentINSSCPRBTaxTrans;
    
        FBEconomicActivityCode_BR               economicActivityCode;
    
        RecordInsertList fbTaxTransList = new RecordInsertList(tableNum(FBTaxTrans_BR));
        RecordInsertList taxAssessmentINSSCPRBTaxTransList = new RecordInsertList(tableNum(FBTaxAssessmentINSSCPRBTaxTrans_BR));
        RecordInsertList taxAssessmentINSSCPRBList = new RecordInsertList(tableNum(FBTaxAssessmentINSSCPRB_BR));
    
        void economicActivityCodeWarning()
        {
            SysInfoAction_MenuFunction sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(FiscalDocumentListPage_BR), MenuItemType::Display);
    
            sysInfoAction.parmCallerBuffer(FiscalDocument_BR::find(fiscalDocument.RecId));
    
            warning(strFmt("@SpedReinf_AS:LineUnableToIdentifyTheEconomicActivityCode", fiscalDocumentLine.LineNum), '', sysInfoAction);
        }
    
        setPrefix("@SpedReinf_AS:InssCprbTaxAssessmentFiscalDocuments");
    
        while select AccountingDate, Direction, FiscalDocumentNumber, FiscalEstablishment, DataAreaId, Model, RecId, Voucher, ThirdPartyPostalAddress
            from fiscalDocument
            where fiscalDocument.AccountingDate     >= fbTaxAssessment.FromDate
                && fiscalDocument.AccountingDate    <= fbTaxAssessment.ToDate
                && fiscalDocument.Direction         == FiscalDocDirection_BR::Outgoing
            join cfop, RecId, LineAmount, FiscalClassification, ServiceCode, LineNum
                from fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
            join FiscalValue, RecId, RetainedTax, TaxationOrigin, TaxationCode, TaxBaseAmount, TaxBaseAmountExempt, TaxBaseAmountOther, TaxAmount, Type, TaxValue, TaxNonRecoverablePct
                from fiscalDocumentTaxTrans
                where fiscalDocumentTaxTrans.FiscalDocumentLine == fiscalDocumentLine.RecId
                    && fiscalDocumentTaxTrans.Type              == TaxType_BR::COFINS
            exists join FBBookingPeriod_BR
                from bookingPeriodFiscalDocument
                where bookingPeriodFiscalDocument.FBBookingPeriod_BR    == _fbBookingPeriodRecId
                    && bookingPeriodFiscalDocument.FiscalDocument_BR    == fiscalDocument.RecId
                    && (bookingPeriodFiscalDocument.FiscalSituation     == FBFiscalDocumentSituation_BR::Regular
                        || bookingPeriodFiscalDocument.FiscalSituation  == FBFiscalDocumentSituation_BR::Complementary
                        || bookingPeriodFiscalDocument.FiscalSituation  == FBFiscalDocumentSituation_BR::SpecialLegislation)
            notexists join existingFbTaxTrans
                where existingFbTaxTrans.Voucher            == fiscalDocument.Voucher
                    && existingFbTaxTrans.VoucherDataArea   == fiscalDocument.dataAreaId
                    && existingFbTaxTrans.VoucherTransDate  == fiscalDocument.AccountingDate
                    && existingFbTaxTrans.TaxType           == TaxType_BR::INSSCPRB
        {
            setPrefix(strFmt("@SpedReinf_AS:FiscalDocument", fiscalDocument.FiscalDocumentNumber, fiscalDocument.FiscalDocumentDate));
    
            if (fiscalDocumentLine.FiscalClassification)
            {
                economicActivityCode = FBEconomicActivityCode_BR::findByFiscalClassification(fiscalDocumentLine.FiscalClassification);
            }
            else if (fiscalDocumentLine.ServiceCode)
            {
                economicActivityCode = FBEconomicActivityCode_BR::findByServiceCode(fiscalDocumentLine.ServiceCode);
            }
    
            if (economicActivityCode == null)
            {
                economicActivityCodeWarning();
                continue;
            }
    
            fbTaxTrans.clear();
    
            fbTaxTrans.RecId                       = systemSequence.reserveValues(1, fbTaxTrans.TableId);
            fbTaxTrans.TaxType                     = TaxType_BR::INSSCPRB;
            fbTaxTrans.FBTaxAssessment_BR          = fbTaxAssessment.RecId;
            fbTaxTrans.FiscalDocument_BR           = fiscalDocument.RecId;
            fbTaxTrans.FiscalEstablishmentId       = fiscalDocument.FiscalEstablishment;
            fbTaxTrans.FiscalEstablishmentDataArea = fiscalDocument.dataAreaId;
            fbTaxTrans.CFOP                        = fiscalDocumentLine.cfop;
            fbTaxTrans.LineAmount                  = fiscalDocumentLine.LineAmount;
    
            fbTaxTrans.FiscalDocumentTaxTrans_BR   = 0;
            fbTaxTrans.TaxationCode                = '';
            fbTaxTrans.TaxBaseAmount               = fiscalDocumentTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt         = 0;
            fbTaxTrans.TaxBaseAmountOther          = 0;
            fbTaxTrans.WithholdingTax              = false;
    
            fbTaxTrans.Voucher                     = fiscalDocument.Voucher;
            fbTaxTrans.VoucherDataArea             = fiscalDocument.dataAreaId;
            fbTaxTrans.VoucherTransDate            = fiscalDocument.AccountingDate;
    
            fbTaxTrans.Classification = this.getClassificationForDocuments(fiscalDocumentTaxTrans.FiscalValue, fiscalDocumentTaxTrans.Type);
    
            if (assessmentByEconomicActivityCodeMap.exists(economicActivityCode.RecId))
            {
                taxAssessmentINSSCPRB = assessmentByEconomicActivityCodeMap.lookup(economicActivityCode.RecId);
    
                // update the CPRB revenue amounts by Economic Activity Code
                taxAssessmentINSSCPRB.RevenueAmount             += fbTaxTrans.LineAmount;
                assessmentByEconomicActivityCodeMap.insert(economicActivityCode.RecId, taxAssessmentINSSCPRB);
            }
            else
            {
                // creates the CPRB revenue amounts by Economic Activity Code
                taxAssessmentINSSCPRB.clear();
                taxAssessmentINSSCPRB.FBTaxAssessment_BR        = fbTaxAssessment.RecId;
                taxAssessmentINSSCPRB.RecId                     = systemSequence.reserveValues(1, taxAssessmentINSSCPRB.TableId);
                taxAssessmentINSSCPRB.FBEconomicActivityCode_BR = economicActivityCode.RecId;
                taxAssessmentINSSCPRB.RevenueAmount             = fbTaxTrans.LineAmount;
                assessmentByEconomicActivityCodeMap.insert(economicActivityCode.RecId, taxAssessmentINSSCPRB);
            }
    
            // Add relationship
            taxAssessmentINSSCPRBTaxTrans.FBTaxAssessmentINSSCPRB_BR    = taxAssessmentINSSCPRB.RecId;
            taxAssessmentINSSCPRBTaxTrans.FBTaxTrans_BR                 = fbTaxTrans.RecId;
            taxAssessmentINSSCPRBTaxTrans.FBEconomicActivityCode_BR     = economicActivityCode.RecId;
            taxAssessmentINSSCPRBTaxTransList.add(taxAssessmentINSSCPRBTaxTrans);
    
            fbTaxTransList.add(fbTaxTrans);
        }
    
        fbTaxTransList.insertDatabase();
        taxAssessmentINSSCPRBTaxTransList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetailsForNonFiscalOperations</Name>
				<Source><![CDATA[
    private void createDetailsForNonFiscalOperations(RecId _fbBookingPeriodRecId)
    {
        FBNonFiscalOperation_BR                 nonFiscalOperation;
        FBNonFiscalOperationTaxTrans_BR         nonFiscalOperationTaxTrans;
    
        FBTaxTrans_BR                           fbTaxTrans;
        FBTaxTrans_BR                           existingFbTaxTrans;
    
        FBTaxAssessmentINSSCPRB_BR              taxAssessmentINSSCPRB;
        FBTaxAssessmentINSSCPRBTaxTrans_BR      taxAssessmentINSSCPRBTaxTrans;
    
        FiscalEstablishment_BR                  fiscalEstablishment;
    
        RecordInsertList fbTaxTransList = new RecordInsertList(tableNum(FBTaxTrans_BR));
        RecordInsertList taxAssessmentINSSCPRBTaxTransList = new RecordInsertList(tableNum(FBTaxAssessmentINSSCPRBTaxTrans_BR));
        RecordInsertList taxAssessmentINSSCPRBList = new RecordInsertList(tableNum(FBTaxAssessmentINSSCPRB_BR));
    
        void economicActivityCodeWarning()
        {
            SysInfoAction_MenuFunction sysInfoAction = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(FBNonFiscalOperation_BR), MenuItemType::Display);
    
            sysInfoAction.parmCallerBuffer(FBNonFiscalOperation_BR::find(nonFiscalOperation.RecId));
    
            warning(strFmt("@SpedReinf_AS:NonFiscalOperationVoucherDateUnableToIdentifyTheEconomicActivityCode", nonFiscalOperation.Voucher, nonFiscalOperation.TransDate), '', sysInfoAction);
        }
    
        setPrefix("@SpedReinf_AS:InssCprbTaxAssessmentNonFiscalOperations");
    
        while select nonFiscalOperation
            where nonFiscalOperation.FBBookingPeriod_BR                 == _fbBookingPeriodRecId
        join nonFiscalOperationTaxTrans
            where nonFiscalOperationTaxTrans.FBNonFiscalOperation_BR    == nonFiscalOperation.RecId
                && nonFiscalOperationTaxTrans.Type                      == TaxType_BR::COFINS
        notexists join existingFbTaxTrans
            where existingFbTaxTrans.Voucher                            == nonFiscalOperation.Voucher
                && existingFbTaxTrans.VoucherDataArea                   == nonFiscalOperation.dataAreaId
                && existingFbTaxTrans.VoucherTransDate                  == nonFiscalOperation.TransDate
                && existingFbTaxTrans.TaxType                           == TaxType_BR::INSSCPRB
        {
            if (!nonFiscalOperation.FBEconomicActivityCode_BR)
            {
                economicActivityCodeWarning();
                continue;
            }
    
            fiscalEstablishment     = FiscalEstablishment_BR::find(nonFiscalOperation.FiscalEstablishment_BR);
    
            fbTaxTrans.clear();
    
            fbTaxTrans.RecId                        = systemSequence.reserveValues(1, fbTaxTrans.TableId);
            fbTaxTrans.TaxType                      = TaxType_BR::INSSCPRB;
            fbTaxTrans.FBTaxAssessment_BR           = fbTaxAssessment.RecId;
            fbTaxTrans.FBNonFiscalOperation_BR      = nonFiscalOperation.RecId;
            fbTaxTrans.FiscalEstablishmentId        = fiscalEstablishment.FiscalEstablishmentId;
            fbTaxTrans.FiscalEstablishmentDataArea  = fiscalEstablishment.dataAreaId;
            fbTaxTrans.LineAmount                   = nonFiscalOperation.TotalAmount;
    
            fbTaxTrans.FiscalDocumentTaxTrans_BR    = 0;
            fbTaxTrans.TaxationCode                 = '';
            fbTaxTrans.TaxBaseAmount                = nonFiscalOperationTaxTrans.TaxBaseAmount;
            fbTaxTrans.TaxBaseAmountExempt          = 0;
            fbTaxTrans.TaxBaseAmountOther           = 0;
            fbTaxTrans.WithholdingTax               = false;
    
            fbTaxTrans.Voucher                      = nonFiscalOperation.Voucher;
            fbTaxTrans.VoucherDataArea              = nonFiscalOperation.dataAreaId;
            fbTaxTrans.VoucherTransDate             = nonFiscalOperation.TransDate;
    
            fbTaxTrans.Classification               = FBTaxAssessmentClassification_BR::Informative;
    
            if (assessmentByEconomicActivityCodeMap.exists(nonFiscalOperation.FBEconomicActivityCode_BR))
            {
                taxAssessmentINSSCPRB = assessmentByEconomicActivityCodeMap.lookup(nonFiscalOperation.FBEconomicActivityCode_BR);
    
                // update the CPRB revenue amounts by Economic Activity Code
                taxAssessmentINSSCPRB.RevenueAmount             += fbTaxTrans.LineAmount;
                assessmentByEconomicActivityCodeMap.insert(nonFiscalOperation.FBEconomicActivityCode_BR, taxAssessmentINSSCPRB);
            }
            else
            {
                // creates the CPRB revenue amounts by Economic Activity Code
                taxAssessmentINSSCPRB.clear();
                taxAssessmentINSSCPRB.FBTaxAssessment_BR        = fbTaxAssessment.RecId;
                taxAssessmentINSSCPRB.RecId                     = systemSequence.reserveValues(1, taxAssessmentINSSCPRB.TableId);
                taxAssessmentINSSCPRB.FBEconomicActivityCode_BR = nonFiscalOperation.FBEconomicActivityCode_BR;
                taxAssessmentINSSCPRB.RevenueAmount             = fbTaxTrans.LineAmount;
                assessmentByEconomicActivityCodeMap.insert(nonFiscalOperation.FBEconomicActivityCode_BR, taxAssessmentINSSCPRB);
            }
    
            // Add relationship
            taxAssessmentINSSCPRBTaxTrans.FBTaxAssessmentINSSCPRB_BR    = taxAssessmentINSSCPRB.RecId;
            taxAssessmentINSSCPRBTaxTrans.FBTaxTrans_BR                 = fbTaxTrans.RecId;
            taxAssessmentINSSCPRBTaxTrans.FBEconomicActivityCode_BR     = nonFiscalOperation.FBEconomicActivityCode_BR;
            taxAssessmentINSSCPRBTaxTransList.add(taxAssessmentINSSCPRBTaxTrans);
    
            fbTaxTransList.add(fbTaxTrans);
        }
    
        fbTaxTransList.insertDatabase();
        taxAssessmentINSSCPRBTaxTransList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassificationForDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the tax assessment classification of a document.
    /// </summary>
    /// <param name="_fiscalValue">
    /// Document's fiscal value
    /// </param>
    /// <param name="_taxType">
    /// Tax type
    /// </param>
    /// <returns>
    /// The tax assessment classification according to the fiscal value, Contrib assessment regimen and document direction.
    /// </returns>
    /// <remarks>
    /// This method should be used for fiscal documents, fiscal receipts and non fiscal operations.
    /// </remarks>
    public FBTaxAssessmentClassification_BR getClassificationForDocuments(
        TaxFiscalValue_BR   _fiscalValue,
        TaxType_BR          _taxType)
    {
        BrazilParameters brazilParameters = BrazilParameters::find();
    
        switch (_fiscalValue)
        {
            case TaxFiscalValue_BR::WithCreditDebit:
                return FBTaxAssessmentClassification_BR::CumulativeContribution;
            case TaxFiscalValue_BR::WithoutCreditDebitExempt:
                return FBTaxAssessmentClassification_BR::CumulativeExempt;
            case TaxFiscalValue_BR::WithoutCreditDebitOther:
                return FBTaxAssessmentClassification_BR::CumulativeNonRecoverable;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssessmentByEconomicActivityMap</Name>
				<Source><![CDATA[
    private void initAssessmentByEconomicActivityMap()
    {
        FBTaxAssessmentINSSCPRB_BR  taxAssessmentINSSCPRB;
    
        while select forUpdate taxAssessmentINSSCPRB
            where taxAssessmentINSSCPRB.FBTaxAssessment_BR == fbTaxAssessment.RecId
        {
            assessmentByEconomicActivityCodeMap.insert(taxAssessmentINSSCPRB.FBEconomicActivityCode_BR, taxAssessmentINSSCPRB);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FBTaxAssessment_BR _fbTaxAssessment)
    {
        FiscalEstablishment_BR fiscalEstablishment;
    
        super(_fbTaxAssessment);
    
        fiscalEstablishment     = fbTaxAssessment.bookingPeriod().fiscalEstablishment();
        rootFiscalOrganization  = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);
    
        assessmentByEconomicActivityCodeMap = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAssessmentByEconomicActivityCodeMap</Name>
				<Source><![CDATA[
    private void saveAssessmentByEconomicActivityCodeMap()
    {
        SetEnumerator               setEnumerator = assessmentByEconomicActivityCodeMap.valueSet().getEnumerator();
        FBTaxAssessmentINSSCPRB_BR  taxAssessmentINSSCPRB;
    
        while (setEnumerator.moveNext())
        {
            taxAssessmentINSSCPRB = setEnumerator.current();
            taxAssessmentINSSCPRB.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessmentFromAdjustments</Name>
				<Source><![CDATA[
    public void updateAssessmentFromAdjustments()
    {
        FBTaxAssessmentINSSCPRB_BR          taxAssessmentINSSCPRB;
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxAssessmentINSSCPRBTaxTrans_BR  taxAssessmentINSSCPRBTaxTrans;
        FBTaxAssessmentAdjustment_BR        taxAdjustment;
    
        ttsBegin;
    
        while select FBTaxAssessment_BR, FBEconomicActivityCode_BR from taxAdjustment
            where taxAdjustment.FBTaxAssessment_BR          == fbTaxAssessment.RecId
        join RecId from fbTaxTrans
            where fbTaxTrans.FBTaxAssessmentAdjustment_BR   == taxAdjustment.RecId
        {
            select firstonly RecId from taxAssessmentINSSCPRB
                where taxAssessmentINSSCPRB.FBTaxAssessment_BR          == taxAdjustment.FBTaxAssessment_BR
                    && taxAssessmentINSSCPRB.FBEconomicActivityCode_BR  == taxAdjustment.FBEconomicActivityCode_BR;
            if (!taxAssessmentINSSCPRB)
            {
                taxAssessmentINSSCPRB.FBTaxAssessment_BR        =  taxAdjustment.FBTaxAssessment_BR;
                taxAssessmentINSSCPRB.FBEconomicActivityCode_BR = taxAdjustment.FBEconomicActivityCode_BR;
                taxAssessmentINSSCPRB.insert();
            }
    
            select firstonly RecId from taxAssessmentINSSCPRBTaxTrans
                where taxAssessmentINSSCPRBTaxTrans.FBTaxTrans_BR == fbTaxTrans.RecId;
            if (!taxAssessmentINSSCPRBTaxTrans)
            {
                taxAssessmentINSSCPRBTaxTrans.FBTaxAssessmentINSSCPRB_BR    = taxAssessmentINSSCPRB.RecId;
                taxAssessmentINSSCPRBTaxTrans.FBTaxTrans_BR                 = fbTaxTrans.RecId;
                taxAssessmentINSSCPRBTaxTrans.FBEconomicActivityCode_BR     = taxAdjustment.FBEconomicActivityCode_BR;
                taxAssessmentINSSCPRBTaxTrans.insert();
            }
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCPRBAssessment</Name>
				<Source><![CDATA[
    private void updateCPRBAssessment()
    {
        FBTaxAssessmentINSSCPRB_BR          taxAssessmentINSSCPRB;
        FBTaxAssessmentINSSCPRBTaxTrans_BR  taxAssessmentINSSCPRBTaxTrans;
    
        FBTaxAmountCPRB_BR                  taxAmountCPRB;
        FBTaxBaseAmountCPRB_BR              taxBaseAmountCPRB;
    
        FBTaxTrans_BR                       fbTaxTrans;
    
        RecId                               fbTaxTransRecIdFirst;
        TaxAmount                           totalTaxAmountAllocated;
    
        while select taxAssessmentINSSCPRB
            where taxAssessmentINSSCPRB.FBTaxAssessment_BR == fbTaxAssessment.RecId
        {
            totalTaxAmountAllocated = 0;
            fbTaxTransRecIdFirst    = 0;
            taxAmountCPRB           = taxAssessmentINSSCPRB.taxAmountCPRB();
            taxBaseAmountCPRB       = taxAssessmentINSSCPRB.taxBaseAmountCPRB();
    
            while select forupdate fbTaxTrans
                exists join taxAssessmentINSSCPRBTaxTrans
                    where taxAssessmentINSSCPRBTaxTrans.FBTaxAssessmentINSSCPRB_BR == taxAssessmentINSSCPRB.RecId
                        && taxAssessmentINSSCPRBTaxTrans.FBTaxTrans_BR == fbTaxTrans.RecId
            {
                if (!fbTaxTransRecIdFirst)
                {
                     fbTaxTransRecIdFirst = fbTaxTrans.RecId;
                }
    
                fbTaxTrans.TaxAmount = decRound(taxAmountCPRB * fbTaxTrans.TaxBaseAmount / taxBaseAmountCPRB, 2);
                fbTaxTrans.update();
    
                totalTaxAmountAllocated += fbTaxTrans.TaxAmount;
            }
    
            totalTaxAmountAllocated = decRound(taxAmountCPRB, 2) - totalTaxAmountAllocated;
            if (totalTaxAmountAllocated && fbTaxTransRecIdFirst)
            {
                select forUpdate fbTaxTrans
                    where fbTaxTrans.RecId == fbTaxTransRecIdFirst;
    
                fbTaxTrans.TaxAmount += totalTaxAmountAllocated;
                fbTaxTrans.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>