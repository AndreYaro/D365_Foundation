<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTblDocumentAE_VacBT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Vacation and Business Trip documents.
/// </summary>
[RPayTblDocumentAEAttribute(RPayAverageEarnCodeType::BusinessTrip),
RPayTblDocumentAEAttribute(RPayAverageEarnCodeType::Vacation)]
class RPayTblDocumentAE_VacBT extends RPayTblDocumentAE
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAEEngine</Name>
				<Source><![CDATA[
        protected void initAEEngine()
    {
        averageEarnEngine = RPayAverageEarnEngine::construct(document, document.AverageEarnCalcPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTimeListFromDocument</Name>
				<Source><![CDATA[
        protected void initTimeListFromDocument()
    {
        #define.StartPos(1)
        #define.EndPos(2)
        RPayAverageEarnEngine_BusinessTrip  averageEarnEngineBT;
        RPayAverageEarnEngine_Vacation      averageEarnEngineVac;

        container con;
        int i;
        StartDate       startDateLocal;
        EndDate         endDateLocal;
        RPayTblTimeCode timeCode;

        switch (document.AverageEarnCodeType)
        {
            case RPayAverageEarnCodeType::BusinessTrip:
                averageEarnEngineBT = averageEarnEngine as RPayAverageEarnEngine_BusinessTrip;
                con = averageEarnEngineBT.getBusinessTripIntervals();
                timeCode = RHRMBusinessTripType::find(document.BusinessTripTypeId).CalendarTimeCode;
                break;

            case RPayAverageEarnCodeType::Vacation:
                if (document.VacationRecordType != RPayVacationRecordType::Vacation)
                {
                    break;
                }
                averageEarnEngineVac = averageEarnEngine as RPayAverageEarnEngine_Vacation;
                con = averageEarnEngineVac.getVacationIntervals();
                timeCode = RHRMVacationType::find(document.VacationTypeId).CalendarTimeCode;
                break;
        }

        for (i = 1 ; i <= conLen(con); ++i)
        {
            if (conPeek(conPeek(con,i), #StartPos) > tblContext.parmEndDate())
            {
                break;
            }

            if (conPeek(conPeek(con,i), #EndPos) < tblContext.parmStartDate())
            {
                continue;
            }

            startDateLocal = max(conPeek(conPeek(con,i), #StartPos), tblContext.parmStartDate());
            endDateLocal   = min(conPeek(conPeek(con,i), #EndPos), tblContext.parmEndDate());

            this.insertDateRange2List(startDateLocal, endDateLocal, timeCode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>