<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRandomDelay</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class provides method to sleep for a random amount of time in the range of 1s to 60s.
/// </summary>
internal final class WHSRandomDelay
{
    private const int Base = 3;
    private const int MaxExponent = 5;
    private const int DelayBaseMs = 1000;
    private const int MaxRandomPercent = 50;
    private const int OneHundredPercent = 100;
    private const int MinSleepTimeMs = 1000;
    private const int MaxSleepTimeMs = 1 * 60 * 1000;
    private static Random randomNum = new Random();
    private static RandomGenerate randomGenerate = new RandomGenerate();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        randomGenerate.parmSeed(randomNum.nextInt() + appl.curTransactionId(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRandomizedSleepTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates time to sleep in milliseconds for a given retry count.
    /// Time to sleep is between MinSleepTimeMs and MaxSleepTimeMs.
    /// </summary>
    /// <param name = "_currentRetryCount">Retry count.</param>
    /// <returns>Time to sleep in milliseconds.</returns>
    [Hookable(false)]
    static private int calculateRandomizedSleepTime(int _currentRetryCount)
    {
        int delay = DelayBaseMs * power(Base, min(_currentRetryCount, MaxExponent));
        int randomPercentage = randomGenerate.randomInt(0, MaxRandomPercent);
        int delayEps = delay * randomPercentage / OneHundredPercent;

        return min(max(MinSleepTimeMs, delay + delayEps), MaxSleepTimeMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sleep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Wrapper for sleep method.
    /// </summary>
    /// <param name = "_sleepTime">Time to sleep in milliseconds.</param>
    [Hookable(false)]
    static private void sleep(int _sleepTimeMs)
    {
        sleep(_sleepTimeMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sleeps for a random number of milliseconds that depends on current retry count.
    /// </summary>
    /// <param name = "_currentRetryCount">Retry count.</param>
    [Hookable(false)]
    static internal void delay(int _currentRetryCount)
    {
        WHSRandomDelay::sleep(
            WHSRandomDelay::calculateRandomizedSleepTime(_currentRetryCount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>