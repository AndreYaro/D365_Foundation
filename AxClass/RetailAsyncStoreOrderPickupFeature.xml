<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAsyncStoreOrderPickupFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using IFeatureMetadata = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata;
using IFeatureLifecycle = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle;
using FeatureLifecycleStage = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureLifecycleStage;
/// <summary>
/// The <c>RetailAsyncStoreOrderPickupFeature</c> represents the feature management for asynchronous store order pickup.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnly]
internal class RetailAsyncStoreOrderPickupFeature implements IFeatureMetadata, IFeatureLifecycle, IFeatureMetadataEnablementNotifiable, IFeatureConfirmationMetadata
{
    private static RetailAsyncStoreOrderPickupFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    static void TypeNew()
    {
        instance = new RetailAsyncStoreOrderPickupFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>The <c>RetailAsyncStoreOrderPickupFeature</c> instance.</returns>
    public static RetailAsyncStoreOrderPickupFeature instance()
    {
        return RetailAsyncStoreOrderPickupFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the feature displayed name.
    /// </summary>
    /// <returns>The label ID of the feature displayed name.</returns>
    public str label()
    {
        return "@RetailAsyncOrderOperations:AsyncOrderPickupFeatureLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the application module value of the feature.
    /// </summary>
    /// <returns>The application module value of the feature.</returns>
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the feature summary description.
    /// </summary>
    /// <returns>The label ID of the feature summary description.</returns>
    public str summary()
    {
        return "@RetailAsyncOrderOperations:AsyncOrderPickupFeatureSummary";
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the learn more URL of the feature.
    /// </summary>
    /// <returns>The learn more URL of the feature.</returns>
    public str learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2120436';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature is enabled by default.
    /// </summary>
    /// <returns>true when the feature is enabled by default; otherwise, false.</returns>
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the feature can be disabled.
    /// </summary>
    /// <returns>true when the feature can be disabled; otherwise, false.</returns>
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature state defines the state of the feature's code. This is used by the runtime to derive when and how the
    /// feature is released to customers and/or enabled.
    /// Incomplete implies the feature should never be enabled for customers, but can be enabled on internal dev/test deployments
    /// PrivatePreview implies the feature can be released to customers
    /// PublicPreview implies the feature is released to all customers and has a kill switch
    /// Released implies the feature is released to all customers
    /// </summary>
    /// <returns>Current state of the feature's code</returns>
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Incomplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmationMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the label ID of the message to be displayed for feature confirmation.
    /// </summary>
    /// <returns>The label ID of the message.</returns>
    [Hookable(false)]
    public LabelId confirmationMessage()
    {
        return "@RetailAsyncOrderOperations:AsyncOrderPickupFeatureConfirmationMessage";
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method thats called when feature gets enabled.
    /// </summary>
    [Hookable(false)]
    public void onEnabled()
    {
        // Do nothing.
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method thats called when feature gets disabled.
    /// </summary>
    [Hookable(false)]
    public void onDisabled()
    {
        // Do nothing.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>