<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductUnitsOfMeasureData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductUnitsOfMeasureData</c> class holds a product unit of measures data.
/// </summary>
public class EcoResProductUnitsOfMeasureData
{
    private UnitOfMeasureSymbol inventoryUnitSymbol;
    private UnitOfMeasureSymbol purchaseUnitSymbol;
    private UnitOfMeasureSymbol salesUnitSymbol;
    private UnitOfMeasureSymbol bomUnitSymbol;
    private EcoResProductIdentificationData identification;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventoryUnitSymbolChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raised when inventory unit symbol is changed.
    /// </summary>
    /// <param name = "_identification">The product identification.</param>
    /// <param name = "_unitSymbol">The new inventory unit symbol.</param>
    delegate void inventoryUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol) {}

]]></Source>
			</Method>
			<Method>
				<Name>purchaseUnitSymbolChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raised when purchase unit symbol is changed.
    /// </summary>
    /// <param name = "_identification">The product identification.</param>
    /// <param name = "_unitSymbol">The new purchase unit symbol.</param>
    delegate void purchaseUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol) {}

]]></Source>
			</Method>
			<Method>
				<Name>salesUnitSymbolChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raised when sales unit symbol is changed.
    /// </summary>
    /// <param name = "_identification">The product identification.</param>
    /// <param name = "_unitSymbol">The new sales unit symbol.</param>
    delegate void salesUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol) {}

]]></Source>
			</Method>
			<Method>
				<Name>bomUnitSymbolChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raised when BOM unit symbol is changed.
    /// </summary>
    /// <param name = "_identification">The product identification.</param>
    /// <param name = "_unitSymbol">The new BOM unit symbol.</param>
    delegate void bomUnitSymbolChanged(EcoResProductIdentificationData _identification, UnitOfMeasureSymbol _unitSymbol) {}

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryUnitSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmInventoryUnitSymbol(UnitOfMeasureSymbol _unitSymbol = inventoryUnitSymbol)
    {
        if (inventoryUnitSymbol != _unitSymbol)
        {
            inventoryUnitSymbol = _unitSymbol;
            this.inventoryUnitSymbolChanged(identification, inventoryUnitSymbol);
        }

        return inventoryUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseUnitSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmPurchaseUnitSymbol(UnitOfMeasureSymbol _unitSymbol = purchaseUnitSymbol)
    {
        if (purchaseUnitSymbol != _unitSymbol)
        {
            purchaseUnitSymbol = _unitSymbol;
            this.purchaseUnitSymbolChanged(identification, purchaseUnitSymbol);
        }

        return purchaseUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnitSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmSalesUnitSymbol(UnitOfMeasureSymbol _unitSymbol = salesUnitSymbol)
    {
        if (salesUnitSymbol != _unitSymbol)
        {
            salesUnitSymbol = _unitSymbol;
            this.salesUnitSymbolChanged(identification, salesUnitSymbol);
        }

        return salesUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMUnitSymbol</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmBOMUnitSymbol(UnitOfMeasureSymbol _unitSymbol = bomUnitSymbol)
    {
        if (bomUnitSymbol != _unitSymbol)
        {
            bomUnitSymbol = _unitSymbol;
            this.bomUnitSymbolChanged(identification, bomUnitSymbol);
        }

        return bomUnitSymbol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>EcoResProductUnitsOfMeasureData</c> class.
    /// </summary>
    /// <param name = "_identification">The product identification.</param>
    /// <returns>An instance of the <c>EcoResProductUnitsOfMeasureData</c> class.</returns>
    public static EcoResProductUnitsOfMeasureData construct(EcoResProductIdentificationData _identification)
    {
        var data = new EcoResProductUnitsOfMeasureData();
        data.init(_identification);
        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init(EcoResProductIdentificationData _identification)
    {
        identification = _identification;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>