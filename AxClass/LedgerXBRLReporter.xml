<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerXBRLReporter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Class for creating Ledger XBRL report using GER.
/// </summary>
class LedgerXBRLReporter extends RunBase
{
    QueryRun                        queryRun;

    DialogField                     dialogFilename,
                                    dialogCurrentFromDate,
                                    dialogCurrentToDate,
                                    dialogPreviousFromDate,
                                    dialogPreviousToDate,
                                    dialogCurrentBudget,
                                    dialogPreviousBudget,
                                    dialogIncludeBeginning,
                                    dialogIncludeEnding,
                                    dialogIncludeNet,
                                    dialogIncludeClosingTrans,
                                    dialogErBinding;

    BudgetModelId                   currentBudget,
                                    previousBudget;
    NoYes                           includeBeginning,
                                    includeEnding,
                                    includeNet,
                                    includeClosingTrans;

    Counter                         id;
    TransDate                       currentFromDate,
                                    currentToDate,
                                    previousFromDate,
                                    previousToDate;

    FiscalCalendarRecId             calendarRecId;
    ERFormatMappingId               erBinding;

    LedgerBalanceMainAccountAmounts currentLedgerBalance,       previousLedgerBalance;
    LedgerBalanceMainAccountAmounts currentLedgerBalanceDebit,  previousLedgerBalanceDebit;
    LedgerBalanceMainAccountAmounts currentLedgerBalanceCredit, previousLedgerBalanceCredit;

    LedgerXBRLReporterBalanceTmp    ledgerXBRLReporterBalanceTmp;
    ERIFileDestination              erFileDestination;
    const ModelName                 modelName = 'SemansysXBRL';

    #define.CurrentVersion(1)

    #define.opBalCur                ('Opening balance current')
    #define.debitCur                ('Debit current')
    #define.creditCur               ('Credit current')
    #define.netDiffCur              ('Net difference current')
    #define.clsTransCur             ('Closing transactions current')
    #define.clsBalCur               ('Closing balance current')
    #define.budgetCur               ('Budget current')
    #define.opBalPrev               ('Opening balance previous')
    #define.debitPrev               ('Debit previous')
    #define.creditPrev              ('Credit previous')
    #define.netDiffPrev             ('Net difference previous')
    #define.clsTransPrev            ('Closing transactions previous')
    #define.clsBalPrev              ('Closing balance previous')
    #define.budgetPrev              ('Budget previous')

    #LOCALMACRO.CurrentList
        currentFromDate,
        currentToDate,
        previousFromDate,
        previousToDate,
        currentBudget,
        previousBudget,
        includeBeginning,
        includeEnding,
        includeNet,
        includeClosingTrans,
        erBinding
    #ENDMACRO

    #Evat_NL

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        calendarRecId       = CompanyInfoHelper::fiscalCalendarRecId();
        erFileDestination   = ERObjectsFactory::createFileDestinationBrowser();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            this.setCurrentPeriod(dialogCurrentFromDate.value(), dialogCurrentToDate.value());
            this.setPreviousPeriod(dialogPreviousFromDate.value(), dialogPreviousToDate.value());
            this.setCurrentBudgetModel(dialogCurrentBudget.value());
            this.setPreviousBudgetModel(dialogPreviousBudget.value());
            this.setIncludeBegining(dialogIncludeBeginning.value());
            this.setIncludeEnding(dialogIncludeEnding.value());
            this.setIncludeNet(dialogIncludeNet.value());
            this.setIncludeClosingTrans(dialogIncludeClosingTrans.value());
            this.setERBinding(dialogErBinding.value());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private real buildQuery(BudgetModelId modelId, TransDate fromDate, TransDate toDate, MainAccountNum accountNum)
    {
        BudgetTransactionLine               budgetTransLine;
        BudgetTransactionHeader             budgetTransHeader;
        DimensionAttributeLevelValueView    dimAttrLevelValue;
        MainAccount                         mainAccount;
        RecId                               ledgerRecId;

        ledgerRecId = LedgerChartOfAccounts::current();

        select sum(TransactionCurrencyAmount), BudgetTransactionHeader from budgetTransLine
            where budgetTransLine.Date <= toDate && budgetTransLine.Date >= fromDate
        join RecId, BudgetModelId from budgetTransHeader
            where budgetTransLine.BudgetTransactionHeader == budgetTransHeader.RecId &&
                budgetTransHeader.BudgetModelId == modelId
        join RecId from dimAttrLevelValue
            where budgetTransLine.LedgerDimension == dimAttrLevelValue.ValueCombinationRecId
        join RecId from mainAccount
            where dimAttrLevelValue.EntityInstance == mainAccount.RecId &&
                mainAccount.LedgerChartOfAccounts == ledgerRecId &&
                mainAccount.MainAccountId == accountNum;
        return budgetTransLine.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcClosingTransactions</Name>
				<Source><![CDATA[
    private AmountMST calcClosingTransactions(MainAccountNum accountNum, TransDate _toDate)
    {
        LedgerBalanceMainAccountAmounts balance = LedgerBalanceMainAccountAmounts::construct();

        balance.parmAccountingDateRange(dateNull(), _toDate);
        balance.parmIncludeClosingPeriod(true);
        balance.parmIncludeClosingPeriodBySystem(true);
        balance.calculateBalance(MainAccount::findByMainAccountId(accountNum));

        return balance.getAccountingCurrencyBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalYear</Name>
				<Source><![CDATA[
    private boolean checkFiscalYear(TransDate fromDate, TransDate toDate, str periodType)
    {
        boolean                     retVal = true;
        FiscalCalendarYear          fromDateFiscalYear;
        FiscalCalendarYear          toDateFiscalYear;

        //Validate that both from and to date belong to the same fiscal year
        //for the comparative and current period

        fromDateFiscalYear = FiscalCalendarYear::findYearByCalendarDate(calendarRecId, fromDate);
        toDateFiscalYear   = FiscalCalendarYear::findYearByCalendarDate(calendarRecId, toDate);

        if (!fromDateFiscalYear)
        {
            retVal = checkFailed(strFmt("@SYS328071", "@SYS80661", periodType));
        }

        if (!toDateFiscalYear)
        {
            retVal = checkFailed(strFmt("@SYS328071", "@SYS80662", periodType));
        }

        if (fromDateFiscalYear && toDateFiscalYear && (fromDateFiscalYear.RecId != toDateFiscalYear.RecId))
        {
            retVal = checkFailed(strFmt("@SYS28745",fromDateFiscalYear.yearName(),toDateFiscalYear.yearName()));
        }
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog      dialog = super();
        DialogGroup dialogGroup;

        dialog.caption("@SYS126611");

        dialogGroup = dialog.addGroup();
        dialogGroup.frameType(FormFrameType::None);
        dialogGroup.columns(2);

        dialog.addGroup("@SYS126612", dialogGroup);

        dialogCurrentFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), currentFromDate, '', "@SYS67");
        dialogCurrentToDate   = dialog.addFieldValue(extendedTypeStr(ToDate), currentToDate, '', "@SYS67");
        dialogCurrentFromDate.control().mandatory(true);
        dialogCurrentToDate.control().mandatory(true);

        dialogCurrentBudget = dialog.addFieldValue(extendedTypeStr(BudgetModelHeadId), currentBudget);

        dialog.addGroup("@SYS126613", dialogGroup);

        dialogPreviousFromDate = dialog.addFieldValue(extendedTypeStr(FromDate), previousFromDate, '', "@SYS67");
        dialogPreviousToDate   = dialog.addFieldValue(extendedTypeStr(ToDate), previousToDate, '', "@SYS67");

        dialogPreviousBudget = dialog.addFieldValue(extendedTypeStr(BudgetModelHeadId), previousBudget);

        dialog.addGroup("@SYS321");
        dialogIncludeBeginning    = dialog.addFieldValue(enumStr(NoYes), includeBeginning,    "@SYS126614", "@SYS126615");
        dialogIncludeEnding       = dialog.addFieldValue(enumStr(NoYes), includeEnding,       "@SYS126616", "@SYS126617");
        dialogIncludeNet          = dialog.addFieldValue(enumStr(NoYes), includeNet,          "@SYS126618", "@SYS126619");
        dialogIncludeClosingTrans = dialog.addFieldValue(enumStr(NoYes), includeClosingTrans, "@SYS126620", "@SYS126621");

        dialog.addGroup("@AccountsReceivable:ElectronicReporting");
        dialogErBinding     = dialog.addFieldValue(extendedTypeStr(ERFormatMappingId), erBinding);
        dialogErBinding.control().registerOverrideMethod(methodStr(FormReferenceControl, lookupReference),
                                                             methodStr(LedgerXBRLReporter, erBinding_lookup),
                                                             this);
        dialogErBinding.control().mandatory(true);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceMainAccountAmounts</Name>
				<Source><![CDATA[
    private LedgerBalanceMainAccountAmounts createBalanceMainAccountAmounts(date periodFrom,
                                                                            date periodTo,
                                                                            boolean _includeOpeningPeriod,
                                                                            boolean _excludeDebits,
                                                                            boolean _excludeCredits)
    {
        var balanceMainAccountAmounts = LedgerBalanceMainAccountAmounts::construct();
        balanceMainAccountAmounts.parmAccountingDateRange(periodFrom, periodTo);
        balanceMainAccountAmounts.parmIncludeRegularPeriod(true);
        balanceMainAccountAmounts.parmIncludeOpeningPeriod(_includeOpeningPeriod);
        balanceMainAccountAmounts.parmIncludeClosingPeriod(true);
        balanceMainAccountAmounts.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
        balanceMainAccountAmounts.parmExcludeDebits(_excludeDebits);
        balanceMainAccountAmounts.parmExcludeCredits(_excludeCredits);

        return balanceMainAccountAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerBalances</Name>
				<Source><![CDATA[
    private void initLedgerBalances()
    {
        TransDate     currentPeriodStart,
                      currentPeriodEnd,
                      previousPeriodStart,
                      previousPeriodEnd;

        currentPeriodStart = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, currentFromDate);
        currentPeriodEnd   = currentToDate;

        previousPeriodStart = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, previousFromDate);
        previousPeriodEnd   = previousToDate;

        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        currentLedgerBalance        = this.createBalanceMainAccountAmounts(currentPeriodStart, currentPeriodEnd, true, false, false );
        currentLedgerBalanceDebit   = this.createBalanceMainAccountAmounts(currentPeriodStart, currentPeriodEnd, false, false, true);
        currentLedgerBalanceCredit  = this.createBalanceMainAccountAmounts(currentPeriodStart, currentPeriodEnd, false, true, false);
        previousLedgerBalance       = this.createBalanceMainAccountAmounts(previousPeriodStart, previousPeriodEnd, true, false, false);
        previousLedgerBalanceDebit  = this.createBalanceMainAccountAmounts(previousPeriodStart, previousPeriodEnd, false, false, true);
        previousLedgerBalanceCredit = this.createBalanceMainAccountAmounts(previousPeriodStart, previousPeriodEnd, false, true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.query().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        Query                           query;
        QueryBuildDataSource            qbds;
        QueryBuildRange                 qbr;
        QueryFilter                     qf;

        super();

        query = new Query();
        qbds = query.addDataSource(tableNum(MainAccount));
        qbds.addOrderByField(fieldNum(MainAccount,MainAccountId));

        qbds.addRange(fieldNum(MainAccount, MainAccountId));
        qbr = qbds.addRange(fieldNum(MainAccount, LedgerChartOfAccounts));
        qbr.value(queryValue(LedgerChartOfAccounts::current()));
        qbr.status(RangeStatus::Hidden);

        // Type
        qbr = qbds.addRange(fieldNum(MainAccount, Type));
        qbr.value(queryRange(DimensionLedgerAccountType::ProfitAndLoss, DimensionLedgerAccountType::Liability));
        qbr.status(RangeStatus::Locked);
        qf = query.addQueryFilter(qbds, fieldStr(MainAccount, Type));
        qf.status(RangeStatus::Locked);
        qf.value(queryRange(DimensionLedgerAccountType::ProfitAndLoss, DimensionLedgerAccountType::Liability));

        //
        qbds = qbds.addDataSource(tableNum(DimensionAttributeValue));
        qbds.addLink(fieldNum(MainAccount,RecId),fieldNum(DimensionAttributeValue,EntityInstance));
        qbr = qbds.addRange(fieldNum(DimensionAttributeValue, IsSuspended));
        qbr.value(queryValue(NoYes::No));
        qbr.status(RangeStatus::Locked);
        qf = query.addQueryFilter(qbds, fieldStr(DimensionAttributeValue, IsSuspended));
        qf.status(RangeStatus::Locked);
        qf.value(queryValue(NoYes::No));

        // Since full datasources cannot be hidden, the fields on the DAV must be individually hidden
        qbds.addRange(fieldNum(DimensionAttributeValue, IsDeleted)).status(RangeStatus::Hidden);
        qbds.addRange(fieldNum(DimensionAttributeValue, EntityInstance)).status(RangeStatus::Hidden);
        qbds.addRange(fieldNum(DimensionAttributeValue, DimensionAttribute)).status(RangeStatus::Hidden);

        //
        qbds = qbds.addDataSource(tableNum(DimensionAttribute));
        qbds.addLink(fieldNum(DimensionAttributeValue,DimensionAttribute),fieldNum(DimensionAttribute,RecId));
        qbr = qbds.addRange(fieldNum(DimensionAttribute,Type));
        qbr.value(enum2str(DimensionAttributeType::MainAccount));
        qbr.status(RangeStatus::Hidden);
        qf = query.addQueryFilter(qbds, fieldStr(DimensionAttribute,Type));
        qf.status(RangeStatus::Hidden);
        qf.value(enum2str(DimensionAttributeType::MainAccount));

        qbds.addRange(fieldNum(DimensionAttribute,Name)).status(RangeStatus::Hidden);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.processQuery();

        this.runElectonicReporting();

        this.updateTransactionLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a Default button is to be added to the dialog. If you change the return value to
    ///    true, it will add the button.
    /// </summary>
    /// <returns>
    ///    false by default.
    /// </returns>
    /// <remarks>
    ///    If you click this button it will reset the parameters to the default that is specified in the
    ///    <c>initParmDefault</c> method.
    /// </remarks>
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container   conQuery;
        Query                           query;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, conQuery] = _packedClass;
                query    = new Query(conQuery);
                queryRun = new QueryRun(query);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransactionLog</Name>
				<Source><![CDATA[
    private void updateTransactionLog()
    {
        LedgerXBRLTransactionLog_NL    xbrlTransLog;

        ttsbegin;
        xbrlTransLog.xbrlActions      =  TransLogActionType_NL::Exported;
        xbrlTransLog.xbrlClassName    =  this.name();
        xbrlTransLog.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean     ret;
        boolean     isPrevDates = false;
        boolean     isCurrDates = false;

        ret = super();

        if (ret)
        {
            if (!erBinding)
            {
                ret = checkFailed(strFmt("@SYS26332", new SysDictType(extendedTypeNum(ERFormatMappingId)).label()));
            }

            if (currentFromDate && currentToDate)
            {
                currentFromDate     = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,currentFromDate);
                currentToDate       = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,currentToDate);

                ret = this.checkFiscalYear(currentFromDate, currentToDate, "@SYS126612") && ret;
                isCurrDates = true;
            }
            else
            {
                if (!currentFromDate)
                {
                    ret = checkFailed(strFmt("@SYS26332", "@SYS24050"));
                }

                if (!currentToDate)
                {
                    ret = checkFailed(strFmt("@SYS26332", "@SYS14656"));
                }
            }

            //Error:    Only one of the to or from dates has been filled in
            if (previousFromDate && previousToDate)
            {
                previousFromDate    = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,previousFromDate);
                previousToDate      = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,previousToDate);
                ret                 = this.checkFiscalYear(previousFromDate, previousToDate, "@SYS126613") && ret;

                if (isCurrDates && (currentFromDate <= previousFromDate))
                {
                    ret = checkFailed("@SYS328075");
                }
            }
            else if ((previousFromDate && !previousToDate) || (!previousFromDate && previousToDate))
            {
                ret = checkFailed("@SYS328153");
            }

            //From date is after the to date
            if ((isCurrDates && (currentFromDate > currentToDate))
             || (isPrevDates && (previousFromDate > previousToDate)))
            {
                ret = checkFailed("@SYS91020");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerXBRLReporter construct()
    {
        return new LedgerXBRLReporter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerXBRLReporter  ledgerXBRLReporter = LedgerXBRLReporter::construct();

        if (ledgerXBRLReporter.prompt())
        {
            ledgerXBRLReporter.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerXBRLBalanceTmp</Name>
				<Source><![CDATA[
    private void insertLedgerXBRLBalanceTmp(MainAccount _mainAccount)
    {
        AmountMST                   currentOpeningBalance, previousOpeningBalance;
        AmountMST                   currentClosingBalance, previousClosingBalance;
        AmountMST                   currentClosingTransactions, previousClosingTransactions;
        AmountMST                   currentAmountDebit, previousAmountDebit;
        AmountMST                   currentAmountCredit, previousAmountCredit;
        AmountMST                   currentBudgetAmount, previousBudgetAmount;

        void insertRecord(Amount _amount, str _scenarioName, boolean _previousPeriod)
        {
            id ++;
            ledgerXBRLReporterBalanceTmp.clear();
            ledgerXBRLReporterBalanceTmp.Amount = _amount;
            ledgerXBRLReporterBalanceTmp.MainAccountId = _mainAccount.MainAccountId;
            ledgerXBRLReporterBalanceTmp.ScenarioName = _scenarioName;
            ledgerXBRLReporterBalanceTmp.PreviousPeriod = _previousPeriod;
            ledgerXBRLReporterBalanceTmp.Id = id;
            ledgerXBRLReporterBalanceTmp.insert();
        }

        // opening balance current
        if (includeBeginning)
        {
            currentLedgerBalance.calculateBalance(_mainAccount);
            currentOpeningBalance = currentLedgerBalance.getAccountingCurrencyBalance();
            insertRecord(currentOpeningBalance, #opBalCur, false);
        }

        // debit current
        currentLedgerBalanceDebit.calculateBalance(_mainAccount);
        currentAmountDebit = currentLedgerBalanceDebit.getAccountingCurrencyBalance();
        insertRecord(currentAmountDebit, #debitCur, false);

        // credit current
        currentLedgerBalanceCredit.calculateBalance(_mainAccount);
        currentAmountCredit = - currentLedgerBalanceCredit.getAccountingCurrencyBalance();
        insertRecord(currentAmountCredit, #creditCur, false);

        // net difference current
        if (includeNet)
        {
            insertRecord(currentAmountDebit - currentAmountCredit, #netDiffCur, false);
        }

        // closing transactions current
        if (includeClosingTrans)
        {
            currentClosingTransactions = this.calcClosingTransactions(_mainAccount.MainAccountId, currentToDate);
            insertRecord(currentClosingTransactions, #clsTransCur, false);
        }

        // closing balance current
        if (includeEnding)
        {
            if (! includeBeginning)
            {
                currentLedgerBalance.calculateBalance(_mainAccount);
                currentOpeningBalance = currentLedgerBalance.getAccountingCurrencyBalance();
            }

            currentClosingBalance = currentOpeningBalance + currentAmountDebit - currentAmountCredit + currentClosingTransactions;
            insertRecord(currentClosingBalance, #clsBalCur, false);
        }

        if (currentBudget)
        {
            currentBudgetAmount = this.buildQuery(currentBudget, currentFromDate, currentToDate, _mainAccount.MainAccountId);
            insertRecord(currentBudgetAmount, #budgetCur, false);
        }

        if (previousFromDate && previousToDate)
        {
            // opening balance previous
            if (includeBeginning)
            {
                previousLedgerBalance.calculateBalance(_mainAccount);
                previousOpeningBalance  = previousLedgerBalance.getAccountingCurrencyBalance();
                insertRecord(previousOpeningBalance, #opBalPrev, true);
            }

            // debit previous
            previousLedgerBalanceDebit.calculateBalance(_mainAccount);
            previousAmountDebit  = previousLedgerBalanceDebit.getAccountingCurrencyBalance();
            insertRecord(previousAmountDebit, #debitPrev, true);

            // credit previous
            previousLedgerBalanceCredit.calculateBalance(_mainAccount);
            previousAmountCredit = - previousLedgerBalanceCredit.getAccountingCurrencyBalance();
            insertRecord(previousAmountCredit, #creditPrev, true);

            // net difference previous
            if (includeNet)
            {
                insertRecord(previousAmountDebit - previousAmountCredit, #netDiffPrev, true);
            }

            // closing transactions previous
            if (includeClosingTrans)
            {
                previousClosingTransactions = this.calcClosingTransactions(_mainAccount.MainAccountId, previousToDate);
                insertRecord(previousClosingTransactions, #clsTransPrev, true);
            }

            // closing balance previous
            if (includeEnding)
            {
                if (! includeBeginning)
                {
                    previousLedgerBalance.calculateBalance(_mainAccount);
                    previousOpeningBalance = previousLedgerBalance.getAccountingCurrencyBalance();
                }

                previousClosingBalance = previousOpeningBalance + previousAmountDebit - previousAmountCredit + previousClosingTransactions;
                insertRecord(previousClosingBalance, #clsBalPrev, true);
            }

            if (previousBudget)
            {
                previousBudgetAmount = this.buildQuery(previousBudget, previousFromDate, previousToDate, _mainAccount.MainAccountId);
                insertRecord(previousBudgetAmount, #budgetPrev, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuery</Name>
				<Source><![CDATA[
    private void processQuery()
    {
        ttsbegin;
        this.initLedgerBalances();
        while (queryRun.next())
        {
            MainAccount mainAccount = queryRun.get(tableNum(MainAccount));

            if (mainAccount.Type == DimensionLedgerAccountType::Liability
                || mainAccount.Type == DimensionLedgerAccountType::Asset
                || mainAccount.Type == DimensionLedgerAccountType::BalanceSheet
                || mainAccount.Type == DimensionLedgerAccountType::Expense
                || mainAccount.Type == DimensionLedgerAccountType::Revenue
                || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss)
            {
                this.insertLedgerXBRLBalanceTmp(mainAccount);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>erBinding_lookup</Name>
				<Source><![CDATA[
    private Common erBinding_lookup(FormReferenceControl _formControl)
    {
        return ERFormatMappingTable::lookup(_formControl, modelName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmERFileDestination</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERIFileDestination parmERFileDestination(ERIFileDestination _erFileDestination = erFileDestination)
    {
        erFileDestination = _erFileDestination;
        return erFileDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runElectonicReporting</Name>
				<Source><![CDATA[
    private void runElectonicReporting()
    {
        var report = new LedgerXBRLReportHeader(currentFromDate, currentToDate, previousFromDate, previousToDate);

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(erBinding)
            .withFileDestination(erFileDestination)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(ledgerXBRLReporterBalanceTmp)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()))
            .withCreatingObjectParameter(modelName, classStr(LedgerXBRLReportHeader), report).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set current period for the report.
    /// </summary>
    /// <param name = "_fromDate">From date.</param>
    /// <param name = "_toDate">To date.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setCurrentPeriod(TransDate _fromDate, TransDate _toDate)
    {
        currentFromDate = _fromDate;
        currentToDate   = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set previous period for the report.
    /// </summary>
    /// <param name = "_fromDate">From date.</param>
    /// <param name = "_toDate">To date.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPreviousPeriod(TransDate _fromDate, TransDate _toDate)
    {
        previousFromDate = _fromDate;
        previousToDate   = _toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set budget model for current period.
    /// </summary>
    /// <param name = "_budgetModelId">Budget model Id.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setCurrentBudgetModel(BudgetModelId _budgetModelId)
    {
        currentBudget = _budgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set budget model for previous period.
    /// </summary>
    /// <param name = "_budgetModelId">Budget model Id.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setPreviousBudgetModel(BudgetModelId _budgetModelId)
    {
        previousBudget = _budgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludeBegining</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set include begining balance in the report.
    /// </summary>
    /// <param name = "_includeBegining">Include begining balance.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setIncludeBegining(boolean _includeBegining)
    {
        includeBeginning = _includeBegining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludeEnding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set include ending balance in the report.
    /// </summary>
    /// <param name = "_includeBegining">Include ending balance.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setIncludeEnding(boolean _includeEnding)
    {
        includeEnding = _includeEnding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludeNet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set include net balance in the report.
    /// </summary>
    /// <param name = "_includeBegining">Include net balance.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setIncludeNet(boolean _includeNet)
    {
        includeNet = _includeNet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIncludeClosingTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set include closing transactions in the report.
    /// </summary>
    /// <param name = "_includeBegining">Include closing transactions.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setIncludeClosingTrans(boolean _includeClosingTrans)
    {
        includeClosingTrans = _includeClosingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setERBinding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set electronic reporting binding for the report.
    /// </summary>
    /// <param name = "_includeBegining">Electronic reporting binding.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setERBinding(RecId _erBinding)
    {
        erBinding = _erBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>