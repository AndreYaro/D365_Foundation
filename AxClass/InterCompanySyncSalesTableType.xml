<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanySyncSalesTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronization engine at order header level for intercompany trade.
/// </summary>
public class InterCompanySyncSalesTableType
{
    SalesTableType                      salesTableType;
    SalesTable                          salesTable;
    CustTable                           custTable;
    SalesTable_RU                       salesTableRU;    

    InterCompanyTradingValueMap         fromInterCompanyTradingValueMap;
    InterCompanyTradingValueMap         toInterCompanyTradingValueMap;

    VendTable                           vendTable;

    SalesLine                           salesLine;
    AxPurchTable                        axPurchTable;
    AxPurchTable_W                      axPurchTable_W;

    TradeInterCompanyConv               convDlvTerm;
    TradeInterCompanyConv               convDlvMode;
    TradeInterCompanyConv               convReturnReasonCode;

    InventLocationId                    inventLocation;
    TradeInterCompanyConv               convInventProfile;

    boolean                             create;

    TaxInformationVendTable_IN          taxInformationVendTableLoc;

    private SalesAgreementHeaderExt_RU salesAgreementHeaderExt_RU;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearInterCompanyRef</Name>
				<Source><![CDATA[
    private void clearInterCompanyRef()
    {
        salesTable.InterCompanyOrder        = false;
        salesTable.InterCompanyCompanyId    = '';
        salesTable.InterCompanyPurchId      = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InterCompanySyncSalesTableType construct()
    {
        return new InterCompanySyncSalesTableType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTableType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the synchronization engine from the <c>SalesTableType</c> instance.
    /// </summary>
    /// <param name = "_salesTableType">An instance of <c>SalesTableType</c> class.</param>
    protected void initFromSalesTableType(SalesTableType _salesTableType)
    {
        salesTableType = _salesTableType;
        salesTable = salesTableType.parmSalesTable();
        custTable = SalesTable.custTable_CustAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTableType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new intercompany synchronization engine for the provided <c>SalesTableType</c> instance.
    /// </summary>
    /// <param name = "_salesTableType">An instance of <c>SalesTableType</c> class representing the sales order line.</param>
    /// <returns>The instantiated instance.</returns>
    public static InterCompanySyncSalesTableType newFromSalesTableType(SalesTableType _salesTableType)
    {
        InterCompanySyncSalesTableType syncEngine = InterCompanySyncSalesTableType::construct();
        syncEngine.initFromSalesTableType(_salesTableType);

        return syncEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if intercompany synchronization should be skipped
    /// </summary>
    /// <returns>true, if synchronization should be skipped; otherwise, false.</returns>
    protected boolean skipSynchronization()
    {
        if (salesTable.SkipUpdate == InterCompanySkipUpdate::InterCompany
            || salesTable.SkipUpdate == InterCompanySkipUpdate::Both
            || !salesTable.interCompanyUpdateNow()
            || !salesTableType.interCompanyCreateAllowed())
        {
            return true;
        }

        if (! TradeInterCompany::checkDataAreaAccess(salesTable.InterCompanyCompanyId))
        {
            this.clearInterCompanyRef();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes any additional internal state necessary for synchronization
    /// </summary>
    protected void prepareSynchronization()
    {
        fromInterCompanyTradingValueMap = custTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        create = !salesTable.InterCompanyPurchId;

        if ((create || salesTable.fieldChanged(fieldNum(SalesTable, DlvTerm))) && salesTable.DlvTerm)
        {
            convDlvTerm = TradeInterCompanyConv::construct();
            convDlvTerm.axDlvTermId(fromInterCompanyTradingValueMap, salesTable.DlvTerm);
        }
        if ((create || salesTable.fieldChanged(fieldNum(SalesTable, DlvMode))) && salesTable.DlvMode)
        {
            convDlvMode = TradeInterCompanyConv::construct();
            convDlvMode.axDlvModeId(fromInterCompanyTradingValueMap, salesTable.DlvMode);
        }

        if (salesTable.ReturnReasonCodeId)
        {
            convReturnReasonCode = TradeInterCompanyConv::construct();
            convReturnReasonCode.axReturnReasonCodeId(fromInterCompanyTradingValueMap, salesTable.ReturnReasonCodeId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            salesTableRU = salesTable.salesTable_RU();

            if ((create || salesTableRU.fieldChanged(fieldNum(SalesTable_RU, InventProfileId_RU))) && salesTableRU.InventProfileId_RU)
            {
                convInventProfile = TradeInterCompanyConv::construct();
                convInventProfile.axInventProfileId(fromInterCompanyTradingValueMap, salesTableRU.InventProfileId_RU);
            }

            if ((create || salesTableRU.fieldChanged(fieldNum(SalesTable_RU, AgreementHeaderExt_RU))) && salesTableRU.AgreementHeaderExt_RU)
            {
                salesAgreementHeaderExt_RU = SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actions necessary to synchronize the sales order with the intercompany purchase order.
    /// </summary>
    public void synchronize()
    {
        if (this.skipSynchronization())
        {
            return;
        }

        this.prepareSynchronization();

        changecompany (salesTable.InterCompanyCompanyId)
        {
            this.synchronizeInTradeCompany();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInTradeCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the synchronization of the order header in the trade company.
    /// </summary>
    protected void synchronizeInTradeCompany()
    {
        setPrefix(strFmt("@SYS93821", TradeInterCompany::curCompanyName()));

        vendTable                       = VendTable::find(custTable.interCompanyTradingPartnerAccount());
        toInterCompanyTradingValueMap   = vendTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        boolean aborted = this.createOrUpdatePurchTable();
        if (aborted)
        {
            return;
        }

        if (create)
        {
            info(strFmt("@SYS121436", axPurchTable.purchTable().PurchId), '', SysInfoAction_TableField::newBuffer(axPurchTable.purchTable()));
        }

        salesTable.InterCompanyPurchId = axPurchTable.parmPurchId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the intercompany order header in the trade company.
    /// </summary>
    /// <returns>true, if the process was aborted; otherwise, false.</returns>
    protected boolean createOrUpdatePurchTable()
    {
        if (create)
        {
            // PurchTable.initValue() must be executed in create scenario
            axPurchTable = AxPurchTable::construct();
        }
        else
        {
            axPurchTable = AxPurchTable::newPurchTable(PurchTable::find(salesTable.InterCompanyPurchId, true));
        }

        boolean aborted = this.setPurchTableData();

        if (aborted)
        {
            return true;
        }

        axPurchTable.save();

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTableData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the intercompany purchase order fields based on the sales order.
    /// </summary>
    /// <returns>
    /// True, if the process was aborted; otherwise, false.
    /// </returns>
    protected boolean setPurchTableData()
    {
        if (create || salesTable.fieldChanged(fieldNum(SalesTable, CustAccount)))
        {
            axPurchTable.parmOrderAccount(vendTable.AccountNum);

            if (!axPurchTable.orderAccount_VendTableRecord().canAutoCreatePurchOrder())
            {
                vendTable = axPurchTable.orderAccount_VendTableRecord();
                // The intercompany order cannot be created, because change management is enabled and required
                // for vendor %ID of  vendor for the ICPO (this may be current aswell as other company)%, %vendor name%,
                // in company %ID of company for the IC PO (this may be current aswell as other company)%
                warning(strFmt("@SYS344147", vendTable.AccountNum, vendTable.name(), curext()));
                this.clearInterCompanyRef();

                return true;
            }
            axPurchTable.parmChangeRequestRequired(NoYes::No);

            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                axPurchTable_W = axPurchTable.axPurchTable_W();
                taxInformationVendTableLoc = vendTable.getTaxInformationVendTable_IN();
                if (salesTable.tdsGroup_IN)
                {
                    axPurchTable_W.parmTDSGroup_IN(taxInformationVendTableLoc.tdsGroup);
                }
                else if (salesTable.tcsGroup_IN)
                {
                    axPurchTable_W.parmTCSGroup_IN(taxInformationVendTableLoc.tcsGroup);
                }
            }
        }

        inventLocation = salesTable.retailSalesTable().RetailReplenishmentLocationId;
        if (inventLocation)
        {
            axPurchTable.parmInventLocationId(inventLocation);
        }

        axPurchTable.parmInterCompanyCompanyId  (salesTable.DataAreaId);
        axPurchTable.parmInterCompanyOrder      (salesTable.InterCompanyOrder);
        axPurchTable.parmInterCompanySalesId    (salesTable.SalesId);
        axPurchTable.parmListCode               (salesTable.ListCode);

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, SalesType)))
        {
            axPurchTable.parmPurchaseType(SalesTableType::construct(salesTable).purchaseType());
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, CurrencyCode)))
        {
            axPurchTable.parmCurrencyCode(salesTable.CurrencyCode);
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, MatchingAgreement)))
        {
            axPurchTable.parmMatchingAgreement(SalesAgreementHeader::find(salesTable.MatchingAgreement).purchAgreementHeader().RecId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            // salesTable_RU is set above
            if ((create || salesTableRU.fieldChanged(fieldNum(SalesTable_RU, AgreementHeaderExt_RU))) && salesAgreementHeaderExt_RU)
            {
                PurchAgreementHeaderExt_RU purchAgreementHeaderExt = salesAgreementHeaderExt_RU.purchAgreementHeaderIntercompany();
                AgreementHeader agreementHeader = AgreementHeader::find(purchAgreementHeaderExt.AgreementHeader);
                
                if (agreementHeader)
                {
                    axPurchTable.parmDefaultDimension(agreementHeader.DefaultDimension);
                }

                axPurchTable.axPurchTable_RU().parmAgreementHeaderExt_RU(purchAgreementHeaderExt.RecId);

            }
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, DlvTerm)))
        {
            axPurchTable.parmDlvTerm(salesTable.DlvTerm ? convDlvTerm.axDlvTermId(toInterCompanyTradingValueMap) : '');
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, DlvMode)))
        {
            axPurchTable.parmDlvMode(salesTable.DlvMode ? convDlvMode.axDlvModeId(toInterCompanyTradingValueMap) : '');
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, DeliveryPostalAddress)))
        {
            axPurchTable.parmDeliveryPostalAddress(salesTable.DeliveryPostalAddress);
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, ReturnReasonCodeId)))
        {
            axPurchTable.parmReturnReasonCodeId(salesTable.ReturnReasonCodeId ? convReturnReasonCode.axReturnReasonCodeId(toInterCompanyTradingValueMap) : '');
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, ReturnReplacementCreated)))
        {
            axPurchTable.parmReturnReplacementCreated(salesTable.ReturnReplacementCreated);
        }

        if (create || salesTable.fieldChanged(fieldNum(SalesTable, DiscPercent)))
        {
            axPurchTable.parmDiscPercent(salesTable.DiscPercent);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            // salesTable_RU is set above
            if (create || salesTableRU.fieldChanged(fieldNum(SalesTable_RU, InventProfileId_RU)))
            {
                axPurchTable.axPurchTable_RU().parmInventProfileId_RU(salesTableRU.InventProfileId_RU ? convInventProfile.axInventProfileId(toInterCompanyTradingValueMap) : '');
                if (axPurchTable.axPurchTable_RU().parmInventProfileId_RU())
                {
                    axPurchTable.axPurchTable_RU().parmInventProfileType_RU(InventProfile_RU::find(axPurchTable.axPurchTable_RU().parmInventProfileId_RU()).InventProfileType);
                }
                else
                {
                    axPurchTable.axPurchTable_RU().parmInventProfileType_RU(InventProfileType_RU::NotSpecified);
                }
            }
        }

        if (salesTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External).CustomerInfo)
        {
            if (create || salesTable.fieldChanged(fieldNum(SalesTable, PurchOrderFormNum)))
            {
                axPurchTable.parmInterCompanyCustPurchOrderFormNum(salesTable.PurchOrderFormNum);
            }
            if (create || salesTable.fieldChanged(fieldNum(SalesTable, CustomerRef)))
            {
                axPurchTable.parmVendorRef(salesTable.CustomerRef);
            }
        }
        if (salesTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External).ReturnItemNum)
        {
            if (create || salesTable.fieldChanged(fieldNum(SalesTable, ReturnItemNum)))
            {
                axPurchTable.parmReturnItemNum(salesTable.ReturnItemNum);
            }
        }

        if (salesTable.InterCompanyDirectDeliveryOrig)
        {
            if (new DictConfigurationKey(configurationKeyNum(SalesDeliveryDateControl)).enabled())
            {
                axPurchTable.parmDeliveryDate         (salesTable.ReceiptDateRequested);
                axPurchTable.parmReceiptDateConfirmed (salesTable.ReceiptDateConfirmed);
                axPurchTable.parmShippingDateRequested(salesTable.ShippingDateRequested);
                axPurchTable.parmShippingDateConfirmed(salesTable.ShippingDateConfirmed);
            }
            else
            {
                axPurchTable.parmDeliveryDate         (salesTable.ShippingDateRequested);
                axPurchTable.parmShippingDateConfirmed(salesTable.ShippingDateConfirmed);
            }
        }
        else
        {
            if (new DictConfigurationKey(configurationKeyNum(SalesDeliveryDateControl)).enabled())
            {
                axPurchTable.parmDeliveryDate         (salesTable.ReceiptDateRequested);
                axPurchTable.parmShippingDateConfirmed(salesTable.ReceiptDateConfirmed);
            }
            else
            {
                axPurchTable.parmDeliveryDate         (salesTable.ShippingDateRequested);
                axPurchTable.parmShippingDateConfirmed(salesTable.ShippingDateConfirmed);
            }
        }

        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            PurchTable localPurchTable = axPurchTable.purchTable();
            localPurchTable.SkipShipReceiptDateCalculation = true;

            if (salesTable.ShippingDateRequested)
            {
                axPurchTable.parmRequestedShipDate(salesTable.ShippingDateRequested);
            }
            if (salesTable.ReceiptDateRequested)
            {
                axPurchTable.parmDeliveryDate(salesTable.ReceiptDateRequested);
            }
            if (salesTable.ShippingDateConfirmed)
            {
                axPurchTable.parmConfirmedShipDate(salesTable.ShippingDateConfirmed);
            }
            if (salesTable.ReceiptDateConfirmed)
            {
                axPurchTable.parmConfirmedDlv(salesTable.ReceiptDateConfirmed);
            }
        }

        axPurchTable.parmSkipUpdate(InterCompanySkipUpdate::InterCompany);

        if (create)
        {
            axPurchTable.parmInterCompanyOrigin(InterCompanyOrigin::Derived);
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>