<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerDerivedFinHierarchyMappingGen</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerDerivedFinHierarchyMappingGen</c> class generates and saves the list of valid dimension attribute value combinations for derived financial hierarchy node.
/// </summary>
class LedgerDerivedFinHierarchyMappingGen
{
    #DimensionWildcards
    #define.Criteria_RangeFrom(1)
    #define.Criteria_RangeTo(2)
    #define.Criteria_Wildcard(3)
    #define.Criteria_IsFromOpen(4)
    #define.Criteria_IsToOpen(5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerDerivedFinHierarchyContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object of the <c>LedgerDerivedFinHierarchyContainer</c> class and initializes a map to contain a list of dimension attribute value combinations for a dimension attribute in a
    /// filter associated with a derived financial hierarchy node.
    /// </summary>
    /// <param name="_listOfDimAttrValueCombinations">
    /// The list of dimension attribute value combinations the map is initilized with.
    /// </param>
    /// <returns>
    /// An object of the <c>LedgerDerivedFinHierarchyContainer</c> class.
    /// </returns>
    private LedgerDerivedFinHierarchyFilterContainer createLedgerDerivedFinHierarchyContainer(Map _listOfDimAttrValueCombinations)
    {
        Map listOfDimAttrValueCombinations = _listOfDimAttrValueCombinations;
        LedgerDerivedFinHierarchyFilterContainer ledgerDerivedFinHierarchyFilterContainer = new LedgerDerivedFinHierarchyFilterContainer();

        ledgerDerivedFinHierarchyFilterContainer.parmMap(listOfDimAttrValueCombinations);

        return ledgerDerivedFinHierarchyFilterContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createListOfAllDimAttrValueCombinations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of dimension attribute value combinations for a dimension attribute which fulfill the filter criteria associated with a derived financial hierarchy node.
    /// </summary>
    /// <param name="_query">
    /// The query to create the list of dimension attribute value combinations.
    /// </param>
    /// <returns>
    /// A list of dimension attribute value combinations for a dimension attribute in a filter associated with derived financial hierarchy node.
    /// </returns>
    private Map createListOfAllDimAttrValueCombinations(Query _query)
    {
        int         keyValue;
        Map         listOfDimAttrValueCombinations;
        Query       query;
        QueryRun    queryRun;
        DimensionAttributeLevelValueView dimensionAttributeLevelValueView;

        query       = _query;
        queryRun    = new QueryRun(query);
        listOfDimAttrValueCombinations = new Map(Types::Integer, Types::Int64);

        keyValue = 1;

        while (queryRun.next())
        {
            dimensionAttributeLevelValueView = queryRun.get(tableNum(DimensionAttributeLevelValueView));
            listOfDimAttrValueCombinations.insert(keyValue, dimensionAttributeLevelValueView.ValueCombinationRecId);
            keyValue++;
        }

        return listOfDimAttrValueCombinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object of the <c>Query</c> class by adding the <c>DimensionAttributeLevelValueView</c> view as datasource and specified range string as query build range.
    /// </summary>
    /// <param name="_queryBuildRangeStr">
    /// The string specified to be used as query build range.
    /// </param>
    /// <returns>
    /// An object of the <c>Query</c> class.
    /// </returns>
    private Query createQuery(str _queryBuildRangeStr)
    {
        str                     queryBuildRangeStr = _queryBuildRangeStr;
        Query                   query;
        QueryBuildDataSource    qbdsDimensionAttributeLevelValueView;
        QueryBuildRange         qbrDimensionAttribute;

        query = new Query();

        qbdsDimensionAttributeLevelValueView = query.addDataSource(tableNum(DimensionAttributeLevelValueView));
        qbrDimensionAttribute = qbdsDimensionAttributeLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, DisplayValue));
        qbrDimensionAttribute.value(queryBuildRangeStr);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryBuildRangeString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string to be used as a query build range for the specified container containing filter criteria for a dimension attribute associated with a derived financial hierarchy node.
    /// </summary>
    /// <param name="_dimensionAttributeRecId">
    /// The record ID of the <c>DimensionAttribute</c> record.
    /// </param>
    /// <param name="_dimensionAttributeAndCriteriaValues">
    /// The container containing the filter criteria for a dimension attribute.
    /// </param>
    /// <returns>
    /// A string to be used as query build range; otherwise, an empty string.
    /// </returns>
    private str createQueryBuildRangeString(
        RecId       _dimensionAttributeRecId,
        container   _dimensionAttributeAndCriteriaValues)
    {
        str                 queryBuildRangeStr;
        boolean             criteriaProcessed;

        List                isCriteriaList;
        ListEnumerator      isCriteriaListEnumerator;

        RecId               dimensionAttributeRecId = _dimensionAttributeRecId;
        container           dimensionAttributeAndCriteriaValues = _dimensionAttributeAndCriteriaValues;

        DimensionValue      wildCardString  = conpeek(dimensionAttributeAndCriteriaValues, #Criteria_Wildcard);
        DimensionFromValue  rangeFrom       = conpeek(dimensionAttributeAndCriteriaValues, #Criteria_RangeFrom);
        DimensionToValue    rangeTo         = conpeek(dimensionAttributeAndCriteriaValues, #Criteria_RangeTo);
        NoYes               isFromOpen      = conpeek(dimensionAttributeAndCriteriaValues, #Criteria_IsFromOpen);
        NoYes               isToOpen        = conpeek(dimensionAttributeAndCriteriaValues, #Criteria_IsToOpen);

        isCriteriaList = new List(Types::String);

        queryBuildRangeStr = strFmt('((%1 == %2) && (', fieldStr(DimensionAttributeLevelValueView, DimensionAttribute), dimensionAttributeRecId);

        if (subStr(wildCardString, 1, 1) == '%' && subStr(wildCardString, strlen(wildCardString), 1) == '%' && strlen(wildCardString) > 2)
        {
            queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 like "*%2*"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(subStr(wildCardString, 2, strlen(wildCardString) - 2)));
            criteriaProcessed = true;
        }
        else if (strlen(wildCardString) > 1 && subStr(wildCardString, strlen(wildCardString), 1) == '%')
        {
            queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 like "%2*"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(subStr(wildCardString, 1, strlen(wildCardString) - 1)));
            criteriaProcessed = true;
        }
        else if (strlen(wildCardString) > 1 && subStr(wildCardString, 1, 1) == '%')
        {
            queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 like "*%2"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(subStr(wildCardString, 2, strlen(wildCardString) - 1)));
            criteriaProcessed = true;
        }
        else if (strlen(rangeFrom) > 0 && rangeFrom == rangeTo)
        {
            isCriteriaList = strSplit(rangeFrom, ",");
            isCriteriaListEnumerator =isCriteriaList.getEnumerator();

            if (isCriteriaList.elements() > 1)
            {
                while (isCriteriaListEnumerator.moveNext())
                {
                    queryBuildRangeStr = queryBuildRangeStr + strFmt('(%1 == "%2")||', fieldStr(DimensionAttributeLevelValueView, DisplayValue), isCriteriaListEnumerator.current());
                }
                queryBuildRangeStr = subStr(queryBuildRangeStr, 1, strlen(queryBuildRangeStr) - 2);
                queryBuildRangeStr = queryBuildRangeStr + '))';
                criteriaProcessed = true;
            }

            else
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 == "%2"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeFrom));
                criteriaProcessed = true;
            }
        }
        else if (strlen(rangeFrom) > 0 && strlen(rangeTo) > 0)
        {
            if (isFromOpen)
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('(%1 > "%2") && (%1 < "%3")))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeFrom), queryValue(rangeTo));
                criteriaProcessed = true;
            }

            else
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('(%1 >= "%2") && (%1 <= "%3")))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeFrom), queryValue(rangeTo));
                criteriaProcessed = true;
            }
        }
        else if (strlen(rangeFrom) > 0)
        {
            if (isFromOpen)
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 > "%2"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeFrom));
                criteriaProcessed = true;
            }

            else
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 >= "%2"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeFrom));
                criteriaProcessed = true;
            }
        }
        else if (strlen(rangeTo) > 0)
        {
            if (isToOpen)
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 < "%2"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeTo));
                criteriaProcessed = true;
            }

            else
            {
                queryBuildRangeStr = queryBuildRangeStr + strFmt('%1 <= "%2"))', fieldStr(DimensionAttributeLevelValueView, DisplayValue), queryValue(rangeTo));
                criteriaProcessed = true;
            }
        }

        if (!criteriaProcessed)
        {
            queryBuildRangeStr = "";
        }

        return queryBuildRangeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createValidListOfDimAttrValueCombAndMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a valid list of dimension attribute value combinations for the specified derived financial hierarchy node and saves the mapping results into the <c>LedgerDerivedFinHierarchyFilterResults</c> table.
    /// </summary>
    /// <param name="_derivedFinancialHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_ledgerDerivedFinDimAttrObjectsList">
    /// The list of objects of the <c>LedgerDerivedFinDimensionAttributeType</c> class.
    /// </param>
    /// <returns>
    /// true a list of valid mappings for the specified derived financial hierarchy node is created successfully; otherwise, false.
    /// </returns>
    private boolean createValidListOfDimAttrValueCombAndMap(
        RecId   _derivedFinancialHierarchyId,
        List    _ledgerDerivedFinDimAttrObjectsList)
    {
        ListEnumerator                              ledgerDerivedFinDimAttrObjectsListEnumerator;
        ListIterator                                ledgerDerivedFinDimAttrObjectsListIterator;

        LedgerDerivedFinHierarchyFilterContainer    ledgerDerivedFinHierarchyFilterContainer;

        Map                                         listOfDimAttrValueCombinationsToMatch;
        MapEnumerator                               listOfDimAttrValueCombinationsEnumeratorToMatch;
        Map                                         listOfDimAttrValueCombinations;
        MapEnumerator                               listOfDimAttrValueCombinationsEnumerator;

        RecId                                       dimensionAttributeValueCombinationRecIdToMatch;
        RecId                                       dimensionAttributeValueCombinationRecId;

        boolean                                     combinationMatched;
        boolean                                     listCreated;

        List ledgerDerivedFinDimAttrObjectsList     = _ledgerDerivedFinDimAttrObjectsList;

        ledgerDerivedFinDimAttrObjectsListIterator  = new ListIterator(ledgerDerivedFinDimAttrObjectsList);

        ledgerDerivedFinDimAttrObjectsListIterator.begin();

        ledgerDerivedFinHierarchyFilterContainer    = ledgerDerivedFinDimAttrObjectsListIterator.value();
        listOfDimAttrValueCombinationsToMatch       = ledgerDerivedFinHierarchyFilterContainer.parmMap();

        listOfDimAttrValueCombinationsEnumeratorToMatch = listOfDimAttrValueCombinationsToMatch.getEnumerator();
        listCreated = true;

        while (listOfDimAttrValueCombinationsEnumeratorToMatch.moveNext())
        {
            dimensionAttributeValueCombinationRecIdToMatch = listOfDimAttrValueCombinationsEnumeratorToMatch.currentValue();

            combinationMatched = true;

            ledgerDerivedFinDimAttrObjectsListEnumerator = ledgerDerivedFinDimAttrObjectsList.getEnumerator();

            while (ledgerDerivedFinDimAttrObjectsListEnumerator.moveNext())
            {
                ledgerDerivedFinHierarchyFilterContainer = ledgerDerivedFinDimAttrObjectsListEnumerator.current();
                listOfDimAttrValueCombinations = ledgerDerivedFinHierarchyFilterContainer.parmMap();
                listOfDimAttrValueCombinationsEnumerator = listOfDimAttrValueCombinations.getEnumerator();

                while (listOfDimAttrValueCombinationsEnumerator.moveNext())
                {
                    dimensionAttributeValueCombinationRecId = listOfDimAttrValueCombinationsEnumerator.currentValue();

                    if (dimensionAttributeValueCombinationRecId == dimensionAttributeValueCombinationRecIdToMatch)
                    {
                        combinationMatched = true;
                        break;
                    }

                    combinationMatched = false;
                }

                if (!combinationMatched)
                {
                    break;
                }
            }

            if (combinationMatched && this.isDAVCUsedInPostedTransactions(dimensionAttributeValueCombinationRecIdToMatch))
            {
                this.insertMappingEntries(_derivedFinancialHierarchyId, dimensionAttributeValueCombinationRecIdToMatch);
            }

            listCreated = listCreated && combinationMatched;
        }

        return listCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMappingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the existing mapping entries for the specified derived financial hierarchy from the <c>LedgerDerivedFinHierarchyFilterResults</c> table.
    /// </summary>
    /// <param name="_derivedFinancialHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    private void deleteMappingEntries(RecId _derivedFinancialHierarchyId)
    {
        RecId derivedFinancialHierarchyId = _derivedFinancialHierarchyId;
        LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

        if (LedgerDerivedFinHierarchyFilterResults::findByLedgerDerivedFinHierarchy(derivedFinancialHierarchyId).RecId != 0)
        {
            ttsBegin;
            delete_from ledgerDerivedFinHierarchyFilterResults where ledgerDerivedFinHierarchyFilterResults.EcoResCategory == derivedFinancialHierarchyId;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates mapping between the specified derived financial hierarchy node and dimension attribute value combinations.
    /// </summary>
    /// <param name="_derivedFinancialHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <returns>
    /// true if a list of dimension attribute value combinations for the specified derived financial hierarchy node is created and saved successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This is a the only public method in this class to be called from outside of this class.
    /// </remarks>
    public boolean generateMapping(RecId _derivedFinancialHierarchyId)
    {
        boolean mappingGenerated;
        Map     dimensionAttributeAndCriteriaValuesMap;
        Map     listOfDimAttrValueCombinations;
        LedgerDerivedFinHierarchyRuleCriteria ledgerDerivedFinHierarchyRuleCriteria;

        dimensionAttributeAndCriteriaValuesMap  = new Map(Types::Int64, Types::Container);
        listOfDimAttrValueCombinations          = new Map(Types::Integer, Types::Int64);

        while select DimensionAttribute, RangeFrom, RangeTo, WildCardString, IsFromOpen, IsToOpen from ledgerDerivedFinHierarchyRuleCriteria
            where ledgerDerivedFinHierarchyRuleCriteria.EcoResCategory == _derivedFinancialHierarchyId
        {
            dimensionAttributeAndCriteriaValuesMap.insert(ledgerDerivedFinHierarchyRuleCriteria.DimensionAttribute,
                [ledgerDerivedFinHierarchyRuleCriteria.RangeFrom, ledgerDerivedFinHierarchyRuleCriteria.RangeTo,
                ledgerDerivedFinHierarchyRuleCriteria.WildCardString,
                ledgerDerivedFinHierarchyRuleCriteria.IsFromOpen, ledgerDerivedFinHierarchyRuleCriteria.IsToOpen]);
        }

        if (!dimensionAttributeAndCriteriaValuesMap.empty())
        {
            mappingGenerated = this.processCriteria(_derivedFinancialHierarchyId, dimensionAttributeAndCriteriaValuesMap);
        }

        return mappingGenerated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMappingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records containing mappings between derived financial hierarchies and dimension attribute value combinations into the <c>LedgerDerivedFinHierarchyFilterResults</c> table.
    /// </summary>
    /// <param name="_derivedFinancialHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    private void insertMappingEntries(
        RecId _derivedFinancialHierarchyId,
        RecId _ledgerDimension)
    {
        RecId derivedFinancialHierarchyId = _derivedFinancialHierarchyId;
        RecId ledgerDimension = _ledgerDimension;
        LedgerDerivedFinHierarchyFilterResults ledgerDerivedFinHierarchyFilterResults;

        if (LedgerDerivedFinHierarchyFilterResults::findFilterResult(derivedFinancialHierarchyId, ledgerDimension).RecId == 0)
        {
            ttsBegin;

            ledgerDerivedFinHierarchyFilterResults.clear();
            ledgerDerivedFinHierarchyFilterResults.EcoResCategory  = derivedFinancialHierarchyId;
            ledgerDerivedFinHierarchyFilterResults.DimensionAttributeValueCombination = ledgerDimension;
            ledgerDerivedFinHierarchyFilterResults.insert();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDAVCUsedInPostedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if posted transactions exist for the specified dimension attribute value combination.
    /// </summary>
    /// <param name="_dimensionAttributeValueCombinationRecId">
    /// The record ID of the <c>DimensionAttributeValueCombination</c> record.
    /// </param>
    /// <returns>
    /// true if posted transaction exists for the specified dimension attribute value combination; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean isDAVCUsedInPostedTransactions(RecId _dimensionAttributeValueCombinationRecId)
    {
        boolean                     isUsedInPostedTransactions;
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;

        if (_dimensionAttributeValueCombinationRecId != 0)
        {
            select firstOnly RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.LedgerDimension == _dimensionAttributeValueCombinationRecId
            join RecId from generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                   && generalJournalEntry.Ledger == Ledger::current();
            isUsedInPostedTransactions = generalJournalAccountEntry.RecId != 0;
        }

        return isUsedInPostedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all the filter criteria for all the dimension attributes for the specified derived financial hierarchy node.
    /// </summary>
    /// <param name="_derivedFinancialHierarchyId">
    /// The record ID of the <c>EcoResCategory</c> record.
    /// </param>
    /// <param name="_dimensionAttributeAndCriteriaValuesMap">
    /// The map containing all the filter criteria for all dimension attributes for the specified derived financial hierarchy node.
    /// </param>
    /// <returns>
    /// true if all the filter criteria are processed and list of valid mappings for the specified derived financial hierarchy node is created successfully; otherwise, false.
    /// </returns>
    private boolean processCriteria(
        RecId   _derivedFinancialHierarchyId,
        Map     _dimensionAttributeAndCriteriaValuesMap)
    {
        boolean         isProcessStepSuccessful;
        boolean         isProcessSuccessful;
        str             queryBuildRangeStr;
        RecId           derivedFinancialHierarchyId;
        Map             dimensionAttributeAndCriteriaValuesMap;
        MapEnumerator   dimensionAttributeAndCriteriaValuesMapEnumerator;
        Map             listOfDimAttrValueCombinationsMap;
        container       dimensionAttributeAndCriteriaValuesContainer;
        List            ledgerDerivedFinDimAttrObjectsList;

        dimensionAttributeAndCriteriaValuesMap  = _dimensionAttributeAndCriteriaValuesMap;
        derivedFinancialHierarchyId             = _derivedFinancialHierarchyId;

        dimensionAttributeAndCriteriaValuesMapEnumerator = dimensionAttributeAndCriteriaValuesMap.getEnumerator();
        ledgerDerivedFinDimAttrObjectsList = new List(Types::Class);

        this.deleteMappingEntries(derivedFinancialHierarchyId);

        isProcessSuccessful = true;
        isProcessStepSuccessful = true;

        while (dimensionAttributeAndCriteriaValuesMapEnumerator.moveNext())
        {
            dimensionAttributeAndCriteriaValuesContainer = dimensionAttributeAndCriteriaValuesMapEnumerator.currentValue();
            queryBuildRangeStr = this.createQueryBuildRangeString(dimensionAttributeAndCriteriaValuesMapEnumerator.currentKey(), dimensionAttributeAndCriteriaValuesContainer);

            if (queryBuildRangeStr != "")
            {
                listOfDimAttrValueCombinationsMap = this.createListOfAllDimAttrValueCombinations(this.createQuery(queryBuildRangeStr));
            }
            else
            {
                isProcessStepSuccessful = false;
                isProcessSuccessful = isProcessSuccessful && isProcessStepSuccessful;
                break;
            }

            if (!listOfDimAttrValueCombinationsMap.empty())
            {
                ledgerDerivedFinDimAttrObjectsList.addEnd(this.createLedgerDerivedFinHierarchyContainer(listOfDimAttrValueCombinationsMap));
            }
            else
            {
                isProcessStepSuccessful = false;
                isProcessSuccessful = isProcessSuccessful && isProcessStepSuccessful;
                break;
            }
        }

        if (!ledgerDerivedFinDimAttrObjectsList.empty() && isProcessSuccessful)
        {
            isProcessSuccessful = isProcessSuccessful && this.createValidListOfDimAttrValueCombAndMap(derivedFinancialHierarchyId,ledgerDerivedFinDimAttrObjectsList);
        }

        return isProcessSuccessful;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>