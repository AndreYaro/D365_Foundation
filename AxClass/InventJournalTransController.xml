<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalTransController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventJournalTransController</c> class is the helper class for the <c>InventJournalTrans</c>
///    report.
/// </summary>
#isoCountryRegionCodes
public class InventJournalTransController extends SrsReportRunController implements BatchRetryable
{
    private const str ParameterShowLog = 'ShowLog';
    private const str ISOCode = 'ISOCode';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hideParameters</Name>
				<Source><![CDATA[
    private void hideParameters(container _parameters)
    {
        SysOperationDataContractInfo    rdpInfo;
        int                             conIdx, conLng = conLen(_parameters);

        void hideParameter(str _parameterName)
        {
            SrsReportRdpDataMemberInfo memberInfo       = rdpInfo.getMembers().lookup(_parameterName);
            SrsReportDesignProperties  reportProperties = memberInfo as SrsReportDesignProperties;

            if (reportProperties)
            {
                reportProperties.parmHidden(true);
            }
        }

        if (! conLng)
        {
            return;
        }

        SysOperationDataContractInfo wrapperInfo = this.getDataContractInfoObjectsRecursively().lookup(classStr(SrsReportRdpRdlWrapperContract));
        rdpInfo = wrapperInfo.getMemberObjectInfo(this.parmReportContract().parmRdpContract());

        for (conIdx = 1; conIdx <= conLng; conIdx ++)
        {
            hideParameter(conPeek(_parameters, conIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideParameters_RU</Name>
				<Source><![CDATA[
    private void hideParameters_RU()
    {
        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();

        void hideParameterBoolean(str _parmName)
        {
            SRSReportParameter parm = rdlContract.getParameter(_parmName);

            if (!parm)
                return;

            parm.setValueTyped(false);
            parm.hidden(true);
        }

        hideParameterBoolean(fieldStr(InventDim, InventGtdId_RU));
        hideParameterBoolean(fieldStr(InventDim, InventProfileId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report contract before the dialog box is displayed to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. A common use case for this method is to add or to
    /// change a query. It is important to notice that this method is called only during an interactive
    /// scenario, before rendering the UI to user.For a batch scenario, we do not start this method because
    /// there is no user interaction and the contract values are already saved in the batch.Do not
    /// instantiate any instance variables in this code if they are used during the lifetime of the
    /// controller because these will fail in batch cases.
    /// </remarks>
    public void prePromptModifyContract()
    {
        // <GEERU>
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            this.hideParameters_RU();
        }

        if (!isConfigurationkeyEnabled(configurationKeyNum(EcoResProductVersion)))
        {
            SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();

            SRSReportParameter parm = rdlContract.getParameter(fieldStr(InventDim, InventVersionId));

            if (parm)
            {
                parm.setValueTyped(false);
                parm.hidden(true);
            }
        }
        // </GEERU>
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before it runs the report.
    /// </summary>
    public void preRunModifyContract()
    {
        boolean showLog = false;

        showLog = this.parmReportContract().parmRdlContract().getParameter(ParameterShowLog).getValueTyped();
        this.processReportParameters(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()),
            showLog);

        // <GEERU>
        this.parmReportContract().parmRdlContract().getParameter(ISOCode).setValueTyped(SysCountryRegionCode::countryInfo());
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables or enables the <c>JournalError</c> table, depending on the print log parameter.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> parameter object of the report.
    /// </param>
    /// <param name="_showLog">
    ///    A Boolean value that specifies whether to show the error log on the report.
    /// </param>
    /// <remarks>
    ///    Disables or enables the <c>JournalError</c> table.
    /// </remarks>
    public void processReportParameters(Query _query, boolean _showLog)
    {
        _query.dataSourceTable(tableNum(JournalError)).enabled(_showLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    ///    The hold the <c>Query</c> object of the report.
    /// </param>
    /// <remarks>
    ///    Assigns values to the journal ID and journal type range.
    /// </remarks>
    public void setRanges(Query _query)
    {
        InventJournalTable      inventJournalTable;

        if (this.parmArgs().caller())
        {
            if (! this.parmArgs().record().RecId)
            {
                throw error(strFmt("@SYS22338",funcName()));
            }

            if (this.parmArgs().dataset() == tableNum(InventJournalTable ))
            {
                inventJournalTable  = this.parmArgs().record();
            }
            else
            {
                throw error(strFmt("@SYS23396",funcName()));
            }
        }

        if (inventJournalTable.JournalId)
        {
            if (_query)
            {
                QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventJournalTrans));

                SysQuery::findOrCreateRange(qbds, fieldNum(InventJournalTrans, JournalId)).value(inventJournalTable.JournalId);
                SysQuery::findOrCreateRange(qbds, fieldNum(InventJournalTrans, JournalType)).value(queryValue(enum2str(inventJournalTable.JournalType)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventJournalTransController    controller          = new InventJournalTransController();
        SRSReportParameter              parameterPrintlog   = new SRSReportParameter();

        controller.parmReportName(ssrsReportStr(InventJournalTrans, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>