<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBankAccountsBusinessLogic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains state and business logic associated with the <c>CustBankAccounts</c> form.
/// It also provides a convenient extension point for additional form state.
/// </summary>
class CustBankAccountsBusinessLogic
{
    static const str CustBankAccountEntityOfficeMenuId = 'CustomerBankAccountEntityOfficeMenuId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustBankAccountsBusinessLogic construct()
    {
        return new CustBankAccountsBusinessLogic();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the menu by adding an item to it.
    /// </summary>
    /// <param name = "_menuOptions">The menu to customize.</param>
    public void customizeMenuOptions(OfficeMenuOptions _menuOptions)
    {
        var custBankEntityOptions = _menuOptions.getOptionsForEntity(tableStr(CustomerBankAccountEntity));

        if (custBankEntityOptions)
        {
            custBankEntityOptions.includeDefault(false);

            var menuItem = OfficeGeneratedExportMenuItem::construct(tableStr(CustomerBankAccountEntity), CustBankAccountEntityOfficeMenuId);

            menuItem.displayName(strFmt('%1 (%2)', new SysDictTable(tableNum(CustomerBankAccountEntity)).label(), curExt()));

            _menuOptions.customMenuItems().addEnd(menuItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up and returns a <c>ExportToExcelDataEntityContext</c> for this form.
    /// </summary>
    /// <param name = "_menuItem">A menu item to provide the associated data entity name.</param>
    /// <param name = "_custAccount">The account to filter with.</param>
    /// <returns>The resulting <c>ExportToExcelDataEntityContext</c>.</returns>
    public ExportToExcelDataEntityContext getDataEntityContext(OfficeGeneratedExportMenuItem _menuItem, CustAccount _custAccount)
    {
        ExportToExcelDataEntityContext context = ExportToExcelDataEntityContext::constructDefault(_menuItem.dataEntityName());

        if (_menuItem.id() == CustBankAccountEntityOfficeMenuId)
        {
            ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(_menuItem.dataEntityName());

            ListEnumerator entities = context.entities().getEnumerator();

            while (entities.moveNext())
            {
                if (entities.current().entityName() == _menuItem.dataEntityName())
                {
                    entities.current().filter(filterBuilder.and(filterBuilder.companyFilter(),
                            filterBuilder.areEqual(fieldStr(CustomerBankAccountEntity, CustomerAccountNumber), _custAccount)));

                    break;
                }
            }
        }

        return context;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>