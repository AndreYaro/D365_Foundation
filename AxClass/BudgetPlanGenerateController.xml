<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateController</c> class is the controller class for services that create data for budget plans.
/// </summary>
public class BudgetPlanGenerateController extends SysOperationServiceController implements BatchRetryable
{
    DialogField ledgerDimensionDefaultAccountDialogField;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogPostBuild</Name>
				<Source><![CDATA[
    protected void dialogPostBuild()
    {
        Dialog                          dialogLocal;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;

        super();

        if (classIdGet(this.getDataContractObject()) == classNum(BudgetPlanGenerateContractHcm))
        {
            dialogLocal = dialog;

            // Set the current form group to the main account group
            dialogLocal.curFormGroup(dialogLocal.dialogForm().control(formControlStr(BudgetPlanGenerate, TargetBudgetPlanScenarioMainAccountGroup)));

            // Add the default dimension field to the main account group
            ledgerDimensionDefaultAccountDialogField = SegmentedEntryControlBuild::addToDialog(dialogLocal, classstr(LedgerDimensionDefaultAccountController), extendedTypeStr(LedgerDimensionDefaultAccount), "@GLS150319", ledgerDimensionDefaultAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimDefaultAcctDialogField</Name>
				<Source><![CDATA[
    public DialogField parmLedgerDimDefaultAcctDialogField(DialogField _ledgerDimensionDefaultAccountDialogField = ledgerDimensionDefaultAccountDialogField)
    {
        ledgerDimensionDefaultAccountDialogField = _ledgerDimensionDefaultAccountDialogField;

        return ledgerDimensionDefaultAccountDialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the form used to get the user input.
    /// </summary>
    /// <returns>
    /// The name of the form.
    /// </returns>
    public FormName templateForm()
    {
        return formStr(BudgetPlanGenerate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a controller object.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>Args</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanGenerateController</c> class.
    /// </returns>
    public static BudgetPlanGenerateController createController(Args _args)
    {
        BudgetPlanGenerateController budgetPlanGenerateController;
        IdentifierName               className, methodName;
        SysOperationExecutionMode    mode;

        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(_args);
        budgetPlanGenerateController  = new BudgetPlanGenerateController(className, methodName, mode);
        budgetPlanGenerateController.parmArgs(_args);

        return budgetPlanGenerateController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BudgetPlanGenerateController budgetPlanGenerateController;

        budgetPlanGenerateController = BudgetPlanGenerateController::createController(_args);

        if (budgetPlanGenerateController.className == classStr(BudgetPlanGenerateServiceHcm))
        {
            budgetPlanGenerateController = BudgetPlanGenerateController::newFromBudgetPlanGenerateHCM(budgetPlanGenerateController);
        }

        budgetPlanGenerateController.startOperation();

        BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateService));
        using (SysInstrumentationActivityContext budgetPlanGenerateContext = budgetPlanLogger.budgetPlanGeneration().planLineContext())
        {
            budgetPlanGenerateContext.addCustomProperty(BudgetInstrumentationConstants::BatchJobRecId, int642Str(budgetPlanGenerateController.batchInfo().parmBatch().RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanGenerateHCM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the instance of the <c>BudgetPlanGenerateController</c> class based on an instance of the <c>BudgetPlanGenerateController</c> class.
    /// </summary>
    /// <param name = "_budgetPlanGenerateController">
    /// An instance of the <c>BudgetPlanGenerateController</c> class.
    /// </param>
    /// <returns>
    /// A modified instance of the <c>BudgetPlanGenerateController </c> class.
    /// </returns>
    internal static BudgetPlanGenerateController newFromBudgetPlanGenerateHCM(BudgetPlanGenerateController _budgetPlanGenerateController)
    {
        BudgetPlanGenerateContractHcm budgetPlanGenerateContractHcm;

        budgetPlanGenerateContractHcm = _budgetPlanGenerateController.getDataContractObject(_budgetPlanGenerateController.getContractParameterName()) as budgetPlanGenerateContractHcm;
        budgetPlanGenerateContractHcm.initQuery();

        _budgetPlanGenerateController.queryChanged(strFmt('%1.parmQueryBudgetPlanGenerateHcm', _budgetPlanGenerateController.getContractParameterName()),
            budgetPlanGenerateContractHcm.getQuery());

        return _budgetPlanGenerateController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContractParameterName</Name>
				<Source><![CDATA[
    private str getContractParameterName()
    {
        SysDictMethod dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, className2Id(this.parmClassName()), this.parmMethodName());
        return dictMethod.parameterName(1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>