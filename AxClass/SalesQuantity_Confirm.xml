<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuantity_Confirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::Confirmation)]
[DocumentStatusFactory(DocumentStatus::Invoice4Paym_RU)]
[DocumentStatusFactory(DocumentStatus::FreeTextInvoice4Paym_RU)]
public  class   SalesQuantity_Confirm        extends SalesQuantity
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(Common        _salesLine,
                                      SalesUpdate   _specQty             = SalesUpdate::All,
                                      InventQty     qty                 = naReal(),
                                      boolean       creditRemaining     = false,
                                      boolean        calcRemaining       = true,
                                      PackingSlipIdForUpdate_W _packingSlips   = "")
    {
        SalesLine           salesLine = _salesLine as SalesLine;
        SalesQty            qtyUpdate;
        SalesQty            numOfRemainOri;
        SalesQty            qtyRemainNew;

        if (qty != naReal())
        {
            qtyUpdate = qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = salesLine.InventDeliverNow;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else
                    {
                        qtyUpdate = salesLine.RemainInventPhysical;
                    }
                    break;
            }
        }

        if (calcRemaining)
        {
            numOfRemainOri = salesLine.RemainInventPhysical;
            qtyRemainNew   = salesLine.RemainInventPhysical;
        }

        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateSalesDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for sales.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateSalesDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtySales</Name>
				<Source><![CDATA[
    protected container calcQtySales(Common         _salesLine,
                                     SalesUpdate    _specQty            = SalesUpdate::All,
                                     SalesQty       qty                 = naReal(),
                                     boolean        creditRemaining     = false,
                                     boolean        calcRemaining       = true,
                                     PackingSlipIdForUpdate_W _packingSlips   = '')
    {
        SalesLine       salesLine = _salesLine as SalesLine;
        SalesQty        qtyUpdate;
        SalesQty        numOfRemainOri;
        SalesQty        qtyRemainNew;

        if (qty != naReal())
        {
            qtyUpdate = qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow: 
                    qtyUpdate = salesLine.SalesDeliverNow;
                    break;

                case SalesUpdate::PackingSlip: 
                    qtyUpdate = salesLine.RemainSalesFinancial;
                    break;

                default:                        
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateSalesDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else
                    {
                        qtyUpdate = salesLine.RemainSalesPhysical;
                    }
                    break;
            }
        }

        if (calcRemaining)
        {
            numOfRemainOri = salesLine.RemainSalesPhysical;
            qtyRemainNew   = salesLine.RemainSalesPhysical;
        }

        return [qtyUpdate,numOfRemainOri,qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight inventory.
    /// </summary>
    /// <param name = "_salesLine">The sales order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(SalesLine _salesLine, SalesUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates catch weight quantity when posting.
    /// </summary>
    /// <param name="_common">
    /// The transaction record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    /// The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value indicating if the remaining quantity is to be credited.
    /// </param>
    /// <param name="_calcRemaining">
    /// A Boolean value indicating whether the remaining quantities should be calculated.
    /// </param>
    /// <returns>
    /// The container with catch weight quantities. The container will have the quantities in the following
    /// order: qty, remainBefore, remainAfter.
    /// </returns>
    protected container pdsCWCalcQtyInvent(
        Common          _common,
        SalesUpdate     _specQty             = SalesUpdate::All,
        PdsCWInventQty  _qty                = naReal(),
        boolean         _creditRemaining     = false,
        boolean         _calcRemaining       = true)
    {
        PdsCWInventQty      qtyUpdate;
        PdsCWInventQty      qtyRemainNew;
        PdsCWInventQty      numOfRemainOri;
        SalesLine           salesLine = _common;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case SalesUpdate::DeliverNow:
                    qtyUpdate = salesLine.PdsCWInventDeliverNow;
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventCWDelegate(salesLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    else
                    {
                        qtyUpdate = salesLine.PdsCWRemainInventPhysical;
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri  = salesLine.PdsCWRemainInventPhysical;
            qtyRemainNew    = salesLine.PdsCWRemainInventPhysical;
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
