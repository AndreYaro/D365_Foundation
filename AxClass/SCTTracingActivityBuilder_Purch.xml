<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTTracingActivityBuilder_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class SCTTracingActivityBuilder_Purch extends SCTTracingActivityBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        SCTTracingActivityCode _activityCode,
        Common _orderSource,
        Common _activitySource,
        Set _productTransactionSource,
        Set _consumptionTransactionSource,
        Set _dataCollection,
        SCTTracingOperationType _tracingOperationType)
    {
        this.activityCode = _activityCode;
        this.orderSource = _orderSource;
        this.activitySource = _activitySource;
        this.productTransactionSource = _productTransactionSource;
        this.consumptionTransactionSource = _consumptionTransactionSource;
        this.dataCollection = _dataCollection;
        this.tracingOperationType = _tracingOperationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SCTTracingActivityBuilder_Purch construct(
        SCTTracingActivityCode _activityCode,
        Common _orderSource,
        Common _activitySource,
        Set _productTransactionSource,
        Set _consumptionTransactionSource,
        Set _dataCollection,
        SCTTracingOperationType _tracingOperationType)
    {
        return new SCTTracingActivityBuilder_Purch(
            _activityCode,
            _orderSource,
            _activitySource,
            _productTransactionSource,
            _consumptionTransactionSource,
            _dataCollection,
            _tracingOperationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActivity</Name>
				<Source><![CDATA[
    protected SCTTracingActivity buildActivity()
    {
        switch (this.activityCode)
        {
            case SCTTracingActivityCode::PurchaseGoodsReceipt:
                return this.buildPurchTableProductReceiptActivity();

            default:
                throw error(strFmt("@SCM:SCTActivityCodeValidation_builder", this.activityCode, classId2Name(classIdGet(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTracingTransactionContractFromRecord</Name>
				<Source><![CDATA[
    protected SCTTracingTransactionContract buildTracingTransactionContractFromRecord(Common _record)
    {
        switch (_record.TableId)
        {
            case tableNum(InventTrans):
                InventTrans inventTrans = _record as InventTrans;
                if (SCTCacheManager::checkTracingEnabledForItem(inventTrans.ItemId))
                {
                    return this.buildTracingTransactionContract(InventTrans);
                }
                else
                {
                    return null;
                }

            default:
                throw error(strFmt("@SCM:SCTTransactionSourceValidation", _record.TableId, classId2Name(classIdGet(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderSourceValid</Name>
				<Source><![CDATA[
    protected boolean isOrderSourceValid()
    {
        return this.orderSource.TableId == tableNum(PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPurchTableProductReceiptActivity</Name>
				<Source><![CDATA[
    private SCTTracingActivity_Purch buildPurchTableProductReceiptActivity()
    {
        if (this.activitySource.TableId != tableNum(VendPackingSlipJour))
        {
            throw error(strFmt("@SCM:SCTActivitySourceValidation", tableId2Name(activitySource.TableId), this.activityCode));
        }

        SCTTracingActivity_Purch tracingActivity;
        PurchTable purchTable = this.orderSource as PurchTable;
        VendPackingSlipJour vendPackingSlipJour = this.activitySource as VendPackingSlipJour;

        tracingActivity.ProductTransactions = this.buildSerializedTransactionsFromRecords(this.productTransactionSource);
        if (tracingActivity.ProductTransactions == '[]')
        {
            // If all transactions are filtered out, then return null.
            this.shouldSkip = true;
            return null;
        }

        tracingActivity.ReferenceId = purchTable.PurchId;
        tracingActivity.ActivityType = enum2Symbol(enumNum(SCTTracingActivityType), SCTTracingActivityType::Purchase);
        tracingActivity.ActivityCode = enum2Symbol(enumNum(SCTTracingActivityCode), SCTTracingActivityCode::PurchaseGoodsReceipt);
        tracingActivity.ActivityDateTime = DateTimeUtil::utcNow();   
        tracingActivity.Vendor = purchTable.vendorName();
        tracingActivity.AccountNum = purchTable.OrderAccount;
        tracingActivity.ActivityId = vendPackingSlipJour.PackingSlipId;
        tracingActivity.DataCollection = FormJsonSerializer::serializeClass(
            SCTTracingActivityDataCollection_Purch::construct(tracingActivity.ActivityId, tracingActivity.ReferenceId, purchTable));

        tracingActivity.TracingOperationType = this.tracingOperationType;

        return tracingActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTracingTransactionContract</Name>
				<Source><![CDATA[
    private SCTTracingTransactionContract buildTracingTransactionContract(InventTrans _inventTrans)
    {
        return SCTTracingTransactionContract::newFromInventTrans(_inventTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>