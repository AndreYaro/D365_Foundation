<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjValEmployeeProjDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjValEmployeeProjDP</c> class is a report data provider class for the
///    <c>ProjValEmployeeProj</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjValEmployeeProj)),
    SRSReportParameterAttribute(classStr(ProjValEmployeeContract))
]
class ProjValEmployeeProjDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM                projTM;
    ProjOptionFixedPrice        projFixedPrice;
    ProjOptionInternal          projInternal;
    ProjOptionInvestment        projInvestment;
    ProjOptionTime              projTime;

    NoYes                       projFixedPriceBillingMethod;
    NoYes                       projTMBillingMethod;

    ProjValEmplProj             projValEmplProjEnum;

    QueryBuildDataSource        qb_MainTable;
    QueryRun                    queryRun;

    ProjValProjectTmp           projValProjectTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method gets the parameter values and assigns them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjValEmployeeContract contract = this.parmDataContract() as ProjValEmployeeContract;

        projTM = contract.parmTimeMaterial();
        projFixedPrice = contract.parmFixedPrice();
        projInvestment = contract.parmInvestment();
        projInternal = contract.parmInternalCost();
        projTime = contract.parmTime();

        projTMBillingMethod = contract.parmTimeMaterialBillingMethod();
        projFixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        projValEmplProjEnum = contract.parmValEmplProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>ProjValProjectTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjValProjectTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjValProjectTmp')]
    public ProjValProjectTmp getProjValProjectTmp()
    {
        select * from projValProjectTmp;
        return projValProjectTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjValProjectTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the values into the temporary table.
    /// </summary>
    /// <param name="_projValEmplProjTable">
    ///    The table buffer for the <c>ProjValEmplProjTable</c> table.
    /// </param>
    /// <param name="_projTable">
    ///    The table buffer for the <c>ProjTable</c> table.
    /// </param>
    /// <param name="_resource">
    ///    The table buffer for the <c>ResourceView</c> table.
    /// </param>
    private void insertProjValProjectTmp(ProjValEmplProjTable _projValEmplProjTable, ProjTable  _projTable, ResourceView _resource)
    {
        projValProjectTmp.clear();
        projValProjectTmp.GroupId  = _projValEmplProjTable.GroupId;
        projValProjectTmp.GroupName = _projValEmplProjTable.Name;
        projValProjectTmp.ProjId = _projTable.ProjId;
        projValProjectTmp.Name = _projTable.Name;
        projValProjectTmp.Resource = _resource.RecId;
        projValProjectTmp.ResourceId = _resource.ResourceId;
        projValProjectTmp.ResourceName = _resource.Name;
        projValProjectTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjValEmplProjTable        qb_ProjValEmplProjTable;
        ProjValEmplProjSetup        qb_ProjValEmplProjSetup;

        ProjTable                   projTable;
        ResourceView                resource;

        ProjCategoryGroupId         prev_Id;

        this.getParameterValues();
        queryRun = new QueryRun(this.parmQuery());
        boolean projMultipleContractLinesForProjectFeatureEnabled = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();

        while (queryRun.next())
        {
            qb_ProjValEmplProjTable = queryRun.get(tableNum(ProjValEmplProjTable));
            qb_ProjValEmplProjSetup = queryRun.get(tableNum(ProjValEmplProjSetup));

            switch (projValEmplProjEnum)
            {
                case ProjValEmplProj::Employee:
                    while select resource
                        where (resource.RecId == qb_ProjValEmplProjSetup.Resource)
                    {
                        this.insertProjValProjectTmp(qb_ProjValEmplProjTable, projTable, resource);

                        if (qb_ProjValEmplProjSetup.GroupId != prev_Id)
                        {
                            prev_Id = qb_ProjValEmplProjSetup.GroupId;
                        }
                    }
                    break;

                case ProjValEmplProj::Project:
                    while select projTable
                        where (projTable.ProjId == qb_ProjValEmplProjSetup.Projid)
                            && ((!projMultipleContractLinesForProjectFeatureEnabled
                                        && (!(projFixedPrice
                                            ^ projInternal
                                            ^ projTM
                                            ^ projInvestment
                                            ^ projTime)
                                        || (projFixedPrice && projTable.Type == ProjType::FixedPrice)
                                        || (projInternal   && projTable.Type == ProjType::Internal)
                                        || (projInternal   && projTable.Type == ProjType::Cost)
                                        || (projInvestment && projTable.Type == ProjType::Investment)
                                        || (projTime       && projTable.Type == ProjType::Time)
                                        || (projTM         && projTable.Type == ProjType::TimeMaterial)))
                                    || projMultipleContractLinesForProjectFeatureEnabled)
                    {
                        if (!projMultipleContractLinesForProjectFeatureEnabled
                                || (projFixedPriceBillingMethod &&
                                    ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                        projTable.ProjId,
                                        projTable.ProjInvoiceProjId,
                                        ProjContractBillingMethod::FixedPrice))
                                || (projTMBillingMethod &&
                                    ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(
                                        projTable.ProjId,
                                        projTable.ProjInvoiceProjId,
                                        ProjContractBillingMethod::TimeMaterial)))
                        {
                            this.insertProjValProjectTmp(qb_ProjValEmplProjTable, projTable, resource);

                            if (qb_ProjValEmplProjSetup.GroupId != prev_Id)
                            {
                                prev_Id = qb_ProjValEmplProjSetup.GroupId;
                            }
                        }
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>