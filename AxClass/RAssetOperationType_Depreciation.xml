<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetOperationType_Depreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetOperationType_Depreciation extends RAssetOperationType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBePosted</Name>
				<Source><![CDATA[
        public boolean canBePosted()
    {
        return rAssetStatusType.allowDepreciation(rAssetStandardId, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        public boolean check()
    {
        boolean ret;
        ;

        ret = super();
        ret = ret && this.checkNetBookValue();
    //    ret = ret && this.checkDeprPeriod();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeprPeriod</Name>
				<Source><![CDATA[
        protected boolean checkDeprPeriod(boolean   _checkPrevPeriod = false)
    {
        RAssetTransDate      nextDeprDate;
        RAssetSuspend        assetSuspend;
        ;

        if (rAssetStandards.assetDeprMethod(transDate - 1) == RAssetDeprMethod::Value &&
            RAssetUse::findMth(rAssetStandards.AssetId, transDate).RecId           &&
            ! RAssetUse::mthValue(rAssetStandards.AssetId, transDate))
            return true;

        nextDeprDate = rAssetStandards.LastDepDate ?
                       rAssetStandards.LastDepDate + 1 :
                       rAssetStandards.DepStartDate;

        while (nextDeprDate)
        {
            assetSuspend = RAssetSuspend::findSuspend(rAssetStandards.AssetId, nextDeprDate);
            if (assetSuspend)
            {
                nextDeprDate = assetSuspend.SuspendEnd + 1;
            }
            else
                break;
        }
		
        if (nextDeprDate != transDate)
            return checkFailed(strfmt("@FixedAssets:FA_MessageError_BookDoesNotHaveAccruedDepreciation", rAssetStandards.AssetId, rAssetStandards.AssetStandardId));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLastDepDate</Name>
				<Source><![CDATA[
        public boolean checkLastDepDate()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        RAssetTrans        rAssetTrans;
        RAssetDeprAccount  rAssetDeprAccount;
        if (common.TableId == tablenum(LedgerJournalTrans))
        {
            ledgerJournalTrans = common;
            ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(ledgerJournalTrans.RecId);
            if (! ledgerJournalTrans.correct())
            {
                if (transDate < dateStartMth(rAssetStandards.LastDepDate))
                {
                    return checkFailed(strfmt("@FixedAssets:FA_MessageError_TransactionDateIsLessThanLastDepreciationDate", rAssetTable.AccountNum,rAssetStandardId));
                }
                if (ledgerJournalTrans_RAsset.DeprPeriod && endmth(ledgerJournalTrans_RAsset.DeprPeriod) <= endmth(rAssetStandards.LastDepDate))
                {
                    select count(RecId) from rAssetTrans
                        where rAssetTrans.AssetStandardId == rAssetStandards.AssetStandardId       &&
                              rAssetTrans.AccountNum      == rAssetTable.AccountNum                &&
                              rAssetTrans.AssetTransType  == RAssetTransType::Depreciation         &&
                              rAssetTrans.AssetDeprPeriod == ledgerJournalTrans_RAsset.DeprPeriod  &&
                              ! rAssetTrans.StornoRecId;
                    select count(RecId) from rAssetDeprAccount
                        where rAssetDeprAccount.AssetStandardId == rAssetStandards.AssetStandardId &&
                              rAssetDeprAccount.AssetId         == rAssetTable.AccountNum;
                    if (rAssetDeprAccount.RecId == 0 || rAssetTrans.RecId >= rAssetDeprAccount.RecId)
                    {
                        return checkFailed(strfmt("@FixedAssets:FA_MessageError_DepreciationOnBookForPeiodHasBeenAdded",rAssetTable.AccountNum,rAssetStandardId,ledgerJournalTrans_RAsset.DeprPeriod));
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType rAssetTransType()
    {
        return RAssetTransType::Depreciation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>