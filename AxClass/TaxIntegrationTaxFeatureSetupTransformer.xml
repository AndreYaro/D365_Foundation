<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxFeatureSetupTransformer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The class <c>TaxIntegrationTaxFeatureSetupTransformer</c> is used to transform tax feature setup into normalized xpp objects.
/// </summary>
internal class TaxIntegrationTaxFeatureSetupTransformer implements TaxIntegrationITaxFeatureSetupTransformer
{
    private Solution taxSolution;
    TaxIntegrationTaxFeatureSetupSyncContract contract;

    private TaxTable taxTableTempDB;
    private TaxData taxDataTempDB;
    private TaxCollectLimit taxCollectLimitTempDB;
    private TaxGroupData taxGroupDataTempDB;
    private TaxOnItem taxOnItemTempDB;

    private SysInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Solution _taxSolution)
    {
        taxSolution = _taxSolution;

        contract = new TaxIntegrationTaxFeatureSetupSyncContract();
        instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxIntegrationTaxFeatureSetupTransformer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxIntegrationITaxFeatureSetupTransformer construct(Solution _taxSolution)
    {
        TaxIntegrationITaxFeatureSetupTransformer transformer = new TaxIntegrationTaxFeatureSetupTransformer(_taxSolution);

        return transformer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTaxFeatureSetupToRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the tax feature setup to <c>TaxIntegrationTaxFeatureSetupSyncContract</c> which includes the records list of tax master data tables.
    /// </summary>
    /// <returns>An instance of <c>TaxIntegrationTaxFeatureSetupSyncContract</c>.</returns>
    public TaxIntegrationTaxFeatureSetupSyncContract convertTaxFeatureSetupToRecordList()
    {
        this.processTaxCodes();
        this.processTaxGroups();
        this.processItemTaxGroups();

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax codes from tax feature setup.
    /// </summary>
    protected void processTaxCodes()
    {
        if (taxSolution.TaxCodes)
        {
            List taxTableList = contract.getTaxTableList();
            List taxDataList = contract.getTaxDataList();
            List taxLimitList = contract.getTaxLimitList();

            TaxTable taxTable;
            System.Collections.IDictionary taxCodeById = taxSolution.TaxCodes;
            System.Collections.IDictionaryEnumerator taxCodesEnumerator = taxCodeById.GetEnumerator();
            while (taxCodesEnumerator.MoveNext())
            {
                Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCode taxCode = taxCodesEnumerator.Value;
                Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCodeWrapper taxCodeWrapper = new Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCodeWrapper();
                taxCodeWrapper.Value = taxCode;
                // Validate the length of the tax code
                DictField dictFieldTaxCode = new DictField(tableNum(TaxTable), fieldNum(TaxTable, TaxCode));
                this.validateFieldLength(dictFieldTaxCode, taxCode.Code, "@SYS125973");

                taxTable.clear();
                taxTable.TaxCode = taxCode.Code;
                taxTable.TaxName = taxCode.Name;
                taxTable.TaxCurrencyCode = Ledger::accountingCurrency();
                taxTable.TaxBase = this.getTaxBase(taxCode);
                taxTable.TaxOnTax = taxCode.TaxOnTax;
                taxTable.TaxUnit = taxCodeWrapper.GetExtensionField(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::TaxCodeUnitName);
                taxTable.TaxPackagingTax = taxCodeWrapper.GetExtensionField(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::TaxCodePackagingName);
                taxTable.TaxIncludeInTax = taxCodeWrapper.GetExtensionField(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::TaxCodeCalcBeforeTaxName);

                taxTableList.addEnd(taxTable);

                // Process rate matrix
                TaxData taxData;
                ListEnumerator rateMatrixFieldsEnumerator = TaxIntegrationTaxFeatureSetupTransformationUtils::convertLookupMatrixToXppList(taxCode.RateMatrix, true).getEnumerator();
                while (rateMatrixFieldsEnumerator.moveNext())
                {
                    Map fieldsMap = rateMatrixFieldsEnumerator.current();

                    taxData.clear();
                    taxData.TaxCode = taxCode.Code;
                    [taxData.TaxFromDate, taxData.TaxToDate] = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::TransactionDatePath);
                    [taxData.TaxLimitMin, taxData.TaxLimitMax] = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::AmountPath);
                    taxData.TaxValue = fieldsMap.lookup(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::TaxRateFieldName);
                    taxData.VATExemptPct = fieldsMap.lookup(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::NonDeductibleRateFieldName);

                    taxDataList.addEnd(taxData);
                }

                // Process limit matrix
                TaxCollectLimit taxCollectLimit;
                ListEnumerator limitMatrixFieldsEnumerator = TaxIntegrationTaxFeatureSetupTransformationUtils::convertLookupMatrixToXppList(taxCode.LimitMatrix, true).getEnumerator();
                while (limitMatrixFieldsEnumerator.moveNext())
                {
                    Map fieldsMap = limitMatrixFieldsEnumerator.current();

                    taxCollectLimit.clear();
                    taxCollectLimit.TaxCode = taxCode.Code;
                    [taxCollectLimit.TaxFromDate, taxCollectLimit.TaxToDate] = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::TransactionDatePath);
                    taxCollectLimit.TaxMin = fieldsMap.lookup(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::MinimumTaxAmountFieldName);
                    taxCollectLimit.TaxMax = fieldsMap.lookup(taxCode.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::MaximumTaxAmountFieldName);

                    taxLimitList.addEnd(taxCollectLimit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExpressionAndGetTaxCodes</Name>
				<Source><![CDATA[
    private List processExpressionAndGetTaxCodes(str _taxCodesInMatrixRow, System.Collections.ICollection _allTaxCodes)
    {
        List taxCodesList = new List(Types::String);
        Set taxCodesSet = new Set(Types::String);
        ListEnumerator taxCodeListEnumerator = strSplit(_taxCodesInMatrixRow, TaxIntegrationTaxServiceConstants::TaxCodeDelimiter).getEnumerator();

        while (taxCodeListEnumerator.moveNext())
        {
            str currentTaxCode = taxCodeListEnumerator.current();
            boolean isExpression = strScan(currentTaxCode, TaxIntegrationTaxServiceConstants::TaxServiceExpressionWildcard, 1, strLen(currentTaxCode)) != 0
                || currentTaxCode == TaxIntegrationTaxServiceConstants::TaxServiceExpressionAny;

            if (isExpression)
            {
                str expression = currentTaxCode == TaxIntegrationTaxServiceConstants::TaxServiceExpressionAny ? TaxIntegrationTaxServiceConstants::TaxServiceExpressionWildcard : strLRTrim(currentTaxCode);

                System.Collections.IEnumerator taxCodesEnum = _allTaxCodes.GetEnumerator();
                while (taxCodesEnum.MoveNext())
                {
                    str taxCodeStr = taxCodesEnum.get_Current();
                    if (taxCodeStr like expression && !taxCodesSet.in(taxCodeStr))
                    {
                        taxCodesSet.add(taxCodeStr);
                        taxCodesList.addEnd(taxCodeStr);
                    }
                }
            }
            else if (!taxCodesSet.in(currentTaxCode))
            {
                taxCodesSet.add(currentTaxCode);
                taxCodesList.addEnd(currentTaxCode);
            }
        }

        return taxCodesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax groups from tax feature setup.
    /// </summary>
    protected void processTaxGroups()
    {
        if (taxSolution.ApplicabilityMatrices
            && taxSolution.ApplicabilityMatrices.Contains(TaxIntegrationTaxServiceConstants::TaxGroupMatrixName))
        {
            System.Collections.IDictionary taxCodeById = taxSolution.TaxCodes;
            LookupMatrix taxGroupMatrix = taxSolution.ApplicabilityMatrices.get_Item(TaxIntegrationTaxServiceConstants::TaxGroupMatrixName);

            if (!taxGroupMatrix.Schema.ConditionItems.Contains(TaxIntegrationTaxServiceConstants::TaxGroupPath))
            {
                // If the Tax group isn't defined in tax group matrix then skip to sync tax group.
                return;
            }

            ListEnumerator taxGroupMatrixFieldsEnumerator = TaxIntegrationTaxFeatureSetupTransformationUtils::convertLookupMatrixToXppList(
                taxGroupMatrix,
                true,
                TaxIntegrationTaxServiceConstants::TaxGroupMatrixName).getEnumerator();

            TaxGroupData taxGroupData;
            List taxGroupDataList = contract.getTaxGroupDataList();
            Set taxCodeGroupCombinationProcessed = new Set(Types::Container);

            while (taxGroupMatrixFieldsEnumerator.moveNext())
            {
                Map fieldsMap = taxGroupMatrixFieldsEnumerator.current();

                str taxCodes = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::TaxCodeFieldName);
                str taxGroup = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::TaxGroupPath);
                if (!taxGroup)
                {
                    continue;
                }

                // Validate the length of the tax group
                DictField dictFieldTaxGroup = new DictField(tableNum(TaxGroupHeading), fieldNum(TaxGroupHeading, TaxGroup));
                LookupField lookupFieldTaxGroup = taxGroupMatrix.Schema.ConditionItems.get_Item(TaxIntegrationTaxServiceConstants::TaxGroupPath);
                this.validateFieldLength(dictFieldTaxGroup, taxGroup, lookupFieldTaxGroup.DisplayName);

                str taxCodeProcessing;

                ListEnumerator taxCodeListEnumerator = this.processExpressionAndGetTaxCodes(taxCodes, taxCodeById.Keys).getEnumerator();
                while (taxCodeListEnumerator.moveNext())
                {
                    taxCodeProcessing = taxCodeListEnumerator.current();
                    Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCode taxCodeObj = taxCodeById.get_Item(taxCodeProcessing);

                    if (!taxCodeGroupCombinationProcessed.in([taxCodeProcessing, taxGroup]))
                    {
                        taxGroupData.clear();
                        taxGroupData.TaxGroup = taxGroup;
                        taxGroupData.TaxCode = taxCodeProcessing;

                        if (taxCodeObj != null)
                        {
                            taxGroupData.ExemptTax = this.getExtensionFieldValueFromTaxCodeObject(
                                taxCodeObj,
                                taxCodeObj.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::IsExemptFieldName);

                            if (taxGroupData.ExemptTax)
                            {
                                str taxExemptCode = this.getExtensionFieldValueFromTaxCodeObject(
                                    taxCodeObj,
                                    taxCodeObj.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::ExemptCodeFieldName);

                                // Validate the length of the tax exempt code
                                DictField dictFieldExemptCode = new DictField(tableNum(taxGroupData), fieldNum(taxGroupData, TaxExemptCode));
                                this.validateFieldLength(dictFieldExemptCode, taxExemptCode, TaxIntegrationTaxServiceConstants::ExemptCodeFieldName);

                                taxGroupData.TaxExemptCode = taxExemptCode;
                            }

                            taxGroupData.UseTax = this.getExtensionFieldValueFromTaxCodeObject(
                                taxCodeObj,
                                taxCodeObj.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::IsUseTaxFieldName);
                            taxGroupData.ReverseCharge_W = this.getExtensionFieldValueFromTaxCodeObject(
                                taxCodeObj,
                                taxCodeObj.TaxCodePath + TaxIntegrationTaxServiceConstants::PathDelimiter + TaxIntegrationTaxServiceConstants::IsReverseChargeFieldName);
                        }

                        taxGroupDataList.addEnd(taxGroupData);
                        taxCodeGroupCombinationProcessed.add([taxCodeProcessing, taxGroup]);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processItemTaxGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the tax item groups from tax feature setup.
    /// </summary>
    protected void processItemTaxGroups()
    {
        if (taxSolution.ApplicabilityMatrices
            && taxSolution.ApplicabilityMatrices.Contains(TaxIntegrationTaxServiceConstants::ItemTaxGroupMatrixName))
        {
            System.Collections.IDictionary taxCodeById = taxSolution.TaxCodes;
            LookupMatrix itemTaxGroupMatrix = taxSolution.ApplicabilityMatrices.get_Item(TaxIntegrationTaxServiceConstants::ItemTaxGroupMatrixName);

            if (!itemTaxGroupMatrix.Schema.ConditionItems.Contains(TaxIntegrationTaxServiceConstants::ItemTaxGroupPath))
            {
                // If the Item tax group isn't defined in tax group matrix then skip to sync Item tax group.
                return;
            }

            ListEnumerator itemTaxGroupMatrixFieldsEnumerator = TaxIntegrationTaxFeatureSetupTransformationUtils::convertLookupMatrixToXppList(
                itemTaxGroupMatrix,
                true,
                TaxIntegrationTaxServiceConstants::ItemTaxGroupMatrixName).getEnumerator();

            TaxOnItem taxOnItem;
            List taxOnItemList = contract.getTaxOnItemList();
            Set taxCodeItemGroupCombinationProcessed = new Set(Types::Container);

            while (itemTaxGroupMatrixFieldsEnumerator.moveNext())
            {
                Map fieldsMap = itemTaxGroupMatrixFieldsEnumerator.current();

                str taxCodes = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::TaxCodeFieldName);
                str taxItemGroup = fieldsMap.lookup(TaxIntegrationTaxServiceConstants::ItemTaxGroupPath);
                if (!taxItemGroup)
                {
                    continue;
                }

                // Validate the length of the item tax group
                DictField dictFieldItemTaxGroup = new DictField(tableNum(TaxItemGroupHeading), fieldNum(TaxItemGroupHeading, TaxItemGroup));
                LookupField lookupFieldItemTaxGroup = itemTaxGroupMatrix.Schema.ConditionItems.get_Item(TaxIntegrationTaxServiceConstants::ItemTaxGroupPath);
                this.validateFieldLength(dictFieldItemTaxGroup, taxItemGroup, lookupFieldItemTaxGroup.DisplayName);

                str taxCodeProcessing;

                ListEnumerator taxCodeListEnumerator = this.processExpressionAndGetTaxCodes(taxCodes, taxCodeById.Keys).getEnumerator();
                while (taxCodeListEnumerator.moveNext())
                {
                    taxCodeProcessing = taxCodeListEnumerator.current();
                    Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCode taxCodeObj = taxCodeById.get_Item(taxCodeProcessing);

                    if (!taxCodeItemGroupCombinationProcessed.in([taxCodeProcessing, taxItemGroup]))
                    {
                        taxOnItem.clear();
                        taxOnItem.TaxItemGroup = taxItemGroup;
                        taxOnItem.TaxCode = taxCodeProcessing;

                        taxOnItemList.addEnd(taxOnItem);
                        taxCodeItemGroupCombinationProcessed.add([taxCodeProcessing, taxItemGroup]);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the length of the field value setting in the tax feature setup.
    /// </summary>
    /// <param name = "_dictField">The field that the value will be synchronized to.</param>
    /// <param name = "_fieldValueFromTaxSolution">The value that was set in the tax feature setup.</param>
    /// <param name = "_fieldDisplayNameInTaxFeatureSetup">The display name of the field in tax feature setup.</param>
    private void validateFieldLength(DictField _dictField, str _fieldValueFromTaxSolution, str _fieldDisplayNameInTaxFeatureSetup)
    {
        if (strLen(_fieldValueFromTaxSolution) > _dictField.stringLen())
        {
            instrumentationLogger.logError(strFmt('Field %1 exceeds the maximum length %2.', _fieldDisplayNameInTaxFeatureSetup, _dictField.stringLen()));

            throw error(strFmt("@TaxIntegration:TaxFeatureSyncOverlengthError",
                _fieldDisplayNameInTaxFeatureSetup,
                _fieldValueFromTaxSolution,
                _dictField.stringLen()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets TaxBaseType of TaxCode.
    /// </summary>
    /// <param name = "_taxCode">TaxCode defined in RCS</param>
    /// <returns>value of Enum TaxBaseType</returns>
    private TaxBaseType getTaxBase(Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCode _taxCode)
    {
        TaxBaseType taxBaseType;
        switch (_taxcode.TaxType)
        {
            case TaxIntegrationTaxServiceConstants::TaxTypeByNetAmount:
                taxBaseType = TaxBaseType::PctPerNet;
                break;
            case TaxIntegrationTaxServiceConstants::TaxTypeTaxOnTax:
                // TaxOnTax is the tax code that calculation based on, which is not mandatory in RCS.
                // If TaxOnTax is not set, it should be mapped to the default taxBaseType PctPerNet.
                if (_taxCode.TaxOnTax)
                {
                    taxBaseType = TaxBaseType::PctPerTax;
                }
                else
                {
                    taxBaseType = TaxBaseType::PctPerNet;
                }
                break;
            case TaxIntegrationTaxServiceConstants::TaxTypeByQuantity:
                taxBaseType = TaxBaseType::AmountByUnit;
                break;
            case TaxIntegrationTaxServiceConstants::TaxTypeByGrossAmount:
                taxBaseType = TaxBaseType::PctPerGross;
                break;
            case TaxIntegrationTaxServiceConstants::TaxTypeByMargin:
                taxBaseType = TaxBaseType::PctPerMargin;
                break;
            default:
                taxBaseType = TaxBaseType::PctPerNet;
                break;
        }
        return taxBaseType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFieldValueFromTaxCodeObject</Name>
				<Source><![CDATA[
    private anytype getExtensionFieldValueFromTaxCodeObject(
        Microsoft.Dynamics.TaxCalculation.ApiContracts.TaxCode _taxCodeObj,
        str _fieldPath)
    {
        anytype ret;

        if (_taxCodeObj.ExtensionFields.Contains(_fieldPath))
        {
            ret = _taxCodeObj.ExtensionFields.get_Item(_fieldPath);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>