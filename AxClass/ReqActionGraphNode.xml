<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqActionGraphNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents a node (requirement transaction) in action graph.
/// </summary>
class ReqActionGraphNode
{
    private ReqTrans    reqTrans;
    private boolean     isActionApplied = false;
    private Map         childRelations  = new Map(Types::Int64, Types::Class);
    private Map         parentRelations = new Map(Types::Int64, Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds child relation to provided requirement transaction.
    /// </summary>
    /// <param name="_toReqActionGraphNode">
    /// Child requirement transaction to add relation to.
    /// </param>
    /// <param name="_relationType">
    /// Type of the relation.
    /// </param>
    /// <param name="_reqTransCovQty">
    /// Requirement coverage associated with a relation.
    /// </param>
    public void addChildRelation(
        ReqActionGraphNode  _toReqActionGraphNode,
        ReqGraphEdgeType    _relationType           = ReqGraphEdgeType::ParentChild,
        ReqQtySettled       _reqTransCovQty         = 0.0)
    {
        if (!childRelations.exists(_toReqActionGraphNode.getReqTrans().RecId))
        {
            childRelations.insert(_toReqActionGraphNode.getReqTrans().RecId, ReqActionGraphRelation::construct(this, _toReqActionGraphNode, _relationType, _reqTransCovQty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParentRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds parent relation to provided requirement transaction.
    /// </summary>
    /// <param name="_fromReqActionGraphNode">
    /// Child requirement transaction to add relation to.
    /// </param>
    /// <param name="_relationType">
    /// Type of the relation.
    /// </param>
    /// <param name="_reqTransCovQty">
    /// Requirement coverage associated with a relation.
    /// </param>
    public void addParentRelation(
        ReqActionGraphNode  _fromReqActionGraphNode,
        ReqGraphEdgeType    _relationType           = ReqGraphEdgeType::ParentChild,
        ReqQtySettled       _reqTransCovQty         = 0.0)
    {
        if (!parentRelations.exists(_fromReqActionGraphNode.getReqTrans().RecId))
        {
            parentRelations.insert(_fromReqActionGraphNode.getReqTrans().RecId, ReqActionGraphRelation::construct(_fromReqActionGraphNode, this, _relationType, _reqTransCovQty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all child relations from current action graph node (requirement transaction).
    /// </summary>
    /// <returns>
    /// Enumerator with child requirement transactions.
    /// </returns>
    public MapEnumerator getChildRelations()
    {
        return childRelations.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentRelations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all parent relations from current action graph node (requirement transaction).
    /// </summary>
    /// <returns>
    /// Enumerator with parent requirement transactions.
    /// </returns>
    public MapEnumerator getParentRelations()
    {
        return parentRelations.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets requirement transaction of current node.
    /// </summary>
    /// <returns>
    /// Requirement transaction.
    /// </returns>
    public ReqTrans getReqTrans()
    {
        return reqTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsActionApplied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets if requirement transaction action was already applied.
    /// </summary>
    /// <returns>
    /// true if requirement transaction was already applied; otherwise, false.
    /// </returns>
    public boolean parmIsActionApplied(boolean _isActionApplied = isActionApplied)
    {
        isActionApplied = _isActionApplied;
        return isActionApplied;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActionable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if requirement transaction is actionable.
    /// </summary>
    /// <returns>
    /// true if requirement transaction is actionable; otherwise, false.
    /// </returns>
    public boolean isActionable()
    {
        return ReqTrans::isReqRefTypeActionable(this.getReqTrans().RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqActionGraphNode construct(ReqTrans _reqTrans)
    {
        var node = new ReqActionGraphNode();

        ReqTrans reqTransCopy;
        reqTransCopy.data(_reqTrans);

        node.reqTrans = reqTransCopy;

        return node;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>