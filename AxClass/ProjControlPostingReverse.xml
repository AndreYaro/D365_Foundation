<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPostingReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjControlPostingReverse extends ProjControlPosting implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (LedgerParameters::find().AcknowledgementDate_IT)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00010, funcName());
            if (acknowledgementDate < transDate)
            {
                // Posting date may not exceed competence date.
                ret = checkFailed("@SYS99223");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateRevenueTrans</Name>
				<Source><![CDATA[
    public boolean checkCreateRevenueTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostRevenueReverse</Name>
				<Source><![CDATA[
    public boolean checkPostRevenueReverse()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
    public boolean doAction(ProjControlPeriodTable _projControlPeriodTable)
    {
        return (select firstonly projControlPeriodTable
            where   projControlPeriodTable.ProjId       == _projControlPeriodTable.ProjId
            &&      projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Created).RecId ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertControlTrans</Name>
				<Source><![CDATA[
    protected void insertControlTrans(ProjControlPeriodTable        _projControlPeriod,
                                      ProjWIPType                   _wipType,
                                      ProjWIPAmount                 _wipAmount,
                                      ProjTransIdBase               _transId = '',
                                      ProjTransType                 _transType = ProjTransType::None,
                                      RefRecId                      _costRefRecId = 0)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCostTo</Name>
				<Source><![CDATA[
    protected ProjLedgerStatus ledgerStatusCostTo(ProjTrans _projTrans)
    {
        ProjLedgerStatus ret;
        ProjTable _projTable = ProjTable::find(_projTrans.projId());
        ProjGroup _projGroup;
        ProjRevenueProfile projRevenueProfileLoc;
        ProjRevRecContractLine projRevRecContractLine;
        boolean isMultipleContractLineFeatureEnable = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
        ProjWIPTable wipProject = _projTrans.getWIPProject();

        if(wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)
        {
            projRevenueProfileLoc = ProjRevRecHelper::getProfileForRevRecProjectContractLine(wipProject);
        }
        else if (isMultipleContractLineFeatureEnable)
        {
            projRevenueProfileLoc = ProjRevRecHelper::getRevProfile(_projTable, ProjContractBillingMethod::FixedPrice, true);
        }
        else
        {
            _projGroup = ProjGroup::find(_projTable.ProjGroupId);
        }

        // Handle Never Ledger (Hour or Item)
        if (_projTrans.ledgerStatusCost() ==  ProjLedgerStatus::Never)
        {
            ret = _projTrans.ledgerStatusCost();
        }
        else
        {
            // Since user can change costStatus on beginning balance we should first look at begBalTrans to get original ledger cost status.
            if (_projTrans.parmTransactionOrigin() == ProjOrigin::BeginningBalance)
            {
                // Sometimes original beginning balance transaction might not be in the database due to journal cleanups.
                // In that case just use the proj groups to best guess the status.
                ProjBegBalJournalTrans_CostSales begBalTrans = ProjBegBalJournalTrans_CostSales::findByTransIdAndProjId(_projTrans.transId(), _projTrans.projId());
                if (begBalTrans)
                {
                    ret = begBalTrans.ProjLedgerCostStatus;
                }
            }
            else
            {
                switch (_projTrans.transType())
                {
                    case ProjTransType::Hour :
                        ret = (isMultipleContractLineFeatureEnable || (wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)) ? projRevenueProfileLoc.EmplLedgerStatus : _projGroup.EmplTransCost;
                        break;

                    case ProjTransType::Cost :
                        ret = (isMultipleContractLineFeatureEnable || (wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)) ? ProjRevRecHelper::cost2LedgerStatus(projRevenueProfileLoc.CostLedgerStatus) : _projGroup.CostTransCost;
                        break;

                    case ProjTransType::Item :
                        ret = (isMultipleContractLineFeatureEnable || (wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)) ? ProjRevRecHelper::item2LedgerStatus(projRevenueProfileLoc.ItemLedgerStatus) : _projGroup.ItemTransCost;
                        break;
                }
            }

            // if not capitalize return P&L except when Hour is set to None
            if (!_projTrans.canBeCapitalize())
            {
                ret = ProjLedgerStatus::Operations;
                ProjLedgerStatus emplLedgerStatus =  (isMultipleContractLineFeatureEnable || (wipProject.IsContractLineUsed && contractLineBasedRevRecFeature)) ? projRevenueProfileLoc.EmplLedgerStatus : _projGroup.EmplTransCost;

                if (_projTrans.transType() == ProjTransType::Hour &&  emplLedgerStatus == ProjLedgerStatus::None)
                {
                    ret = ProjLedgerStatus::None;
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projControlPeriodStatusNew</Name>
				<Source><![CDATA[
    protected ProjControlPeriodStatus projControlPeriodStatusNew()
    {
        return ProjControlPeriodStatus::Reversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    [SysObsolete("This method is obsolete. Use IsReveral() method instead.", false, 9\7\2020)]
    public boolean reverse()
    {
        return this.isReversal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReversal</Name>
				<Source><![CDATA[
    protected boolean isReversal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS92318";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjEstimate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccruedCost</Name>
				<Source><![CDATA[
    //change

    void updateAccruedCost(
        ProjControlPeriodTable  _projControlPeriod,
        LedgerVoucher           _ledgerVoucher)
    {
        ProjCostTrans projCostTrans;
        ProjCostTransCost projCostTransCost;
        ProjTable projTable;
        ProjRevRecContractLine projRevRecContractLine;

        if(ProjWIPTable::find(_projControlPeriod.ProjId).IsContractLineUsed && contractLineBasedRevRecFeature)
        {
            while select RecId from projRevRecContractLine
            where projRevRecContractLine.RevenueRecognitionId == _projControlPeriod.ProjId
            join forupdate projCostTrans
            where projCostTrans.PSAContractLineNum == projRevRecContractLine.ContractLineNum &&
                  projCostTrans.TransactionOrigin == ProjOrigin::EstimateAccruedLoss
            join forupdate projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId &&
                  projCostTransCost.TransStatus == ProjTransStatus::Estimated &&
                  projCostTransCost.wipPeriod  == _projControlPeriod.PeriodTo
            {
                this.postAccruedCost(projCostTrans,projCostTransCost,_ledgerVoucher);
            }
        }
        else
        {
        while select RecId from projTable
            where projTable.wipProject == _projControlPeriod.ProjId
            join forupdate projCostTrans
            where projCostTrans.ProjId == projTable.ProjId &&
                  projCostTrans.TransactionOrigin == ProjOrigin::EstimateAccruedLoss
            join forupdate projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId &&
                  projCostTransCost.TransStatus == ProjTransStatus::Estimated &&
                  projCostTransCost.wipPeriod  == _projControlPeriod.PeriodTo
        {
            this.postAccruedCost(projCostTrans,projCostTransCost,_ledgerVoucher);
        }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccruedOnAcc</Name>
				<Source><![CDATA[
    public void updateAccruedOnAcc(
        ProjId        _projId,
        LedgerVoucher _ledgerVoucher)
    {
        ProjTable               projTable;
        ProjInvoiceOnAcc        projInvoiceOnAcc;
        ProjInvoiceOnAccDetail  projInvoiceOnAccDetail;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjPost                projPost;
        ProjRevRecContractLine projRevRecContractLine;

        if(ProjWIPTable::find(_projId).IsContractLineUsed && contractLineBasedRevRecFeature)
        {
            Set recIdInvOnAccDetail = new Set (Types::Int64);

            while select RecId from projRevRecContractLine
            where projRevRecContractLine.RevenueRecognitionId == _projId
            join forupdate projInvoiceOnAcc
            where projInvoiceOnAcc.PSAContractLineNum == projRevRecContractLine.ContractLineNum
                join projInvoiceOnAccDetail
                    where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId &&
                        projInvoiceOnAccDetail.wipPeriod == this.parmPeriodTo()
                exists join projOnAccTransSale
                    where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
            {
                projPost = ProjPost::newEnterOnAccEstimate(projInvoiceOnAcc,projInvoiceOnAccDetail,_ledgerVoucher,this.parmPeriodTo(),this.checkPostOnAcc(),this.isReversal(),false);
                if (this.parmBeginningBalance())
                {
                    projPost.parmPostToGeneralLedger(false);
                }
                projPost.postTrans();

                recIdInvOnAccDetail.add(projInvoiceOnAccDetail.RecId);
            }

            SetEnumerator iterator = recIdInvOnAccDetail.getEnumerator();
            RecId recId;
            while (iterator.moveNext())
            {
                recId = iterator.current();
                select forupdate  projInvoiceOnAccDetail where projInvoiceOnAccDetail.RecId == recId;
                ttsbegin;
                projInvoiceOnAccDetail.wipPeriod = dateNull();
                projInvoiceOnAccDetail.update();
                ttscommit;
            }
        }
        else
        {
        while select RecId from projTable
            where projTable.wipProject == _projId
            join forupdate projInvoiceOnAcc
            where projInvoiceOnAcc.ProjId == projTable.ProjId
                join forupdate projInvoiceOnAccDetail
                    where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId &&
                        projInvoiceOnAccDetail.wipPeriod == this.parmPeriodTo()
                exists join projOnAccTransSale
                    where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
        {
            projPost = ProjPost::newEnterOnAccEstimate(projInvoiceOnAcc,projInvoiceOnAccDetail,_ledgerVoucher,this.parmPeriodTo(),this.checkPostOnAcc(),this.isReversal(),false);
            if (this.parmBeginningBalance())
            {
                projPost.parmPostToGeneralLedger(false);
            }
            projPost.postTrans();
            projInvoiceOnAccDetail.wipPeriod = dateNull();
            projInvoiceOnAccDetail.update();
        }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjControlPeriodTableFields</Name>
				<Source><![CDATA[
    protected void setProjControlPeriodTableFields(ProjControlPeriodTable _projControlPeriodTable, LedgerVoucher _ledgerVoucher)
    {
        _projControlPeriodTable.PeriodStatus = this.projControlPeriodStatusNew();
        _projControlPeriodTable.VoucherReverse = _ledgerVoucher.lastVoucher();
        _projControlPeriodTable.VoucherDateReverse = _ledgerVoucher.lastTransDate();
        if (this.elimination() && this.isReversal())
        {
            _projControlPeriodTable.Elimination = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeriod</Name>
				<Source><![CDATA[
    protected void updatePeriod(LedgerVoucher _ledgerVoucher)
    {
        ProjControlPeriodTable  projControlPeriodTable;
        select forUpdate projControlPeriodTable
            where projControlPeriodTable.ProjId == this.parmProjId() &&
                  projControlPeriodTable.ControlId == controlId  &&
                  projControlPeriodTable.PeriodFrom == periodFrom &&
                  projControlPeriodTable.PeriodStatus == ProjControlPeriodStatus::Posted &&
                  projControlPeriodTable.BeginningBalance == this.parmBeginningBalance();

        if (projControlPeriodTable.RecId)
        {
            this.setProjControlPeriodTableFields(projControlPeriodTable, _ledgerVoucher);
            projControlPeriodTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRevenue</Name>
				<Source><![CDATA[
    public void updateRevenue(
        ProjControlPeriodTable  _projControlPeriod,
        LedgerVoucher           _ledgerVoucher)
    {
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        ProjPost                projPost;
        ProjTable ProjTable;
        ProjRevRecContractLine projRevRecContractLine;

        #localMacro.process
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            Set revTransRecIdSet =  new Set (Types::Int64);
            while select %1
            join %2
                where %2.%3 == %1.%3 &&
                    %2.TransStatus == ProjTransStatus::Estimated &&
                    %2.LedgerSalesPosted &&
                    %2.wipPeriod == _projControlPeriod.PeriodTo &&
                    %2.ControlVersion == projControlVersion &&
                    %1.TransactionOrigin != ProjOrigin::BeginningBalance &&
                    %2.WIPProjId == _projControlPeriod.ProjId
            {
                revTransRecIdSet.add(%1.RecId);
            }
            SetEnumerator iterator = revTransRecIdSet.getEnumerator();
            RecId recId;
            while (iterator.moveNext())
            {
                recId = iterator.current();
                select forupdate %1 where %1.RecId == recId;
                while select forupdate %2
                    where %2.%3 == %1.%3
                    {
                        ttsbegin;
                        projPost = ProjPost::newEnterRevenueEstimate(%1,
                                                  %2,
                                                  _ledgerVoucher,
                                                  this.isReversal(),
                                                  false,
                                                  true);
                        projPost.parmPostToGeneralLedger(!_projControlPeriod.BeginningBalance);
                        projPost.postTrans();
                        ttscommit;
                    }

            }
       }
        else
        {
        while select forupdate %1
            join projTable
            where projTable.WIPProject == _projControlPeriod.ProjId
                && %1.ProjId == projTable.ProjId
                && %1.TransactionOrigin != ProjOrigin::BeginningBalance
               join forupdate %2
                    where %2.%3 == %1.%3 &&
                        %2.TransStatus == ProjTransStatus::Estimated &&
                        %2.LedgerSalesPosted &&
                        %2.wipPeriod == _projControlPeriod.PeriodTo &&
                        %2.ControlVersion == projControlVersion
        {
            projPost = ProjPost::newEnterRevenueEstimate(%1,
                                              %2,
                                              _ledgerVoucher,
                                              this.isReversal(),
                                              false,
                                              true);
            projPost.parmPostToGeneralLedger(!_projControlPeriod.BeginningBalance);
            projPost.postTrans();
        }
        }
    #endMacro

        #localMacro.processCost
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            Set revTransRecIdSet =  new Set (Types::Int64);
            while select  %1
            join projRevRecContractLine
                where projRevRecContractLine.RevenueRecognitionId == _projControlPeriod.ProjId &&
                    projRevRecContractLine.ContractLineNum == %1.PSAContractLineNum
            join  %2
                where %2.%3 == %1.%3 &&
                    %2.TransStatus == ProjTransStatus::Estimated &&
                    %2.LedgerSalesPosted &&
                    %2.wipPeriod == _projControlPeriod.PeriodTo &&
                    %2.ControlVersion == projControlVersion
            {
                revTransRecIdSet.add(%1.RecId);
            }
            SetEnumerator iterator = revTransRecIdSet.getEnumerator();
            RecId recId;
            while (iterator.moveNext())
            {
                select forupdate %1 where %1.RecId == recId;
                while select forupdate %2
                    where %2.%3 == %1.%3
                {
                    ttsbegin;
                    projPost = ProjPost::newEnterRevenueEstimate(%1,
                                                                %2,
                                                                _ledgerVoucher,
                                                                this.isReversal(),
                                                                false,
                                                                true);
                    projPost.postTrans();
                    ttscommit;
                }
            }
        }
        else
        {
        while select forupdate %1
            join projTable
            where projTable.WIPProject == _projControlPeriod.ProjId
                && %1.ProjId == projTable.ProjId
                join forupdate %2
                    where %2.%3 == %1.%3 &&
                        %2.TransStatus == ProjTransStatus::Estimated &&
                        %2.LedgerSalesPosted &&
                        %2.wipPeriod == _projControlPeriod.PeriodTo &&
                        %2.ControlVersion == projControlVersion
            {
                projPost = ProjPost::newEnterRevenueEstimate(%1,
                                                    %2,
                                                    _ledgerVoucher,
                                                    this.isReversal(),
                                                    false,
                                                    true);
                projPost.postTrans();
            }
        }
    #endMacro

        if (this.getSalesPriceMatchingPrinciple() == ProjSalesPriceMatchingPrincip::None)
        {
            #process(projRevenueTrans, projRevenueTransSale, TransId)
        }
        else
        {
            #processCost(projEmplTrans, projEmplTransSale, TransId)
            #processCost(projCostTrans, projCostTransSale, TransId)
            #processCost(projItemTrans, projItemTransSale, ProjTransId)
            #process(projRevenueTrans, projRevenueTransSale, TransId)
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipPostCost</Name>
				<Source><![CDATA[
    protected void wipPostCost(
        ProjControlPeriodTable  _projControlPeriodTable,
        LedgerVoucher           _ledgerVoucher,
        ProjId                  _projId)
    {
        ProjCostTrans           projCostTrans;
        ProjCostTransCost       projCostTransCost;
        ProjTrans               projTrans;
        ProjLedgerStatus        projLedgerStatusTo;
        ProjPost                projPost;
        ProjRevRecContractLine projRevRecContractLine;
        boolean useBegBal = this.parmBeginningBalance() == NoYes::Yes;

        //Using projItemTransCost.wipPeriod == _projControlPeriod.PeriodTo because while posting the wipPeriod is set to the periodTo of estimate it was posted in.
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
                while select projRevRecContractLine
                    where projRevRecContractLine.RevenueRecognitionId == _projControlPeriodTable.ProjId
                join forupdate projCostTrans
                    where projCostTrans.PSAContractLineNum == projRevRecContractLine.ContractLineNum
                        && projCostTrans.TransactionOrigin != ProjOrigin::EstimateAccruedLoss
                        && ((useBegBal && projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance) || (!useBegBal && projCostTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
                join forupdate projCostTransCost
                    where projCostTransCost.TransId == projCostTrans.TransId
                        && projCostTransCost.TransStatus == ProjTransStatus::Estimated
                        && projCostTransCost.wipPeriod == _projControlPeriodTable.PeriodTo
            {
                projTrans   = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                projTrans.parmTransactionOrigin(ProjCostTrans.TransactionOrigin);
                projLedgerStatusTo = this.ledgerStatusCostTo(projTrans);

                if (projTrans.ledgerStatusCost() != projLedgerStatusTo)
                {
                    projPost = ProjPost::newEnterCost_TrxDetail(projCostTrans, projCostTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate);
                    projPost.postTrans();
                }

                projCostTransCost.wipPeriod     = dateNull();
                projCostTransCost.TransStatus   = ProjTransStatus::Posted;
                projCostTransCost.update();
            }
        }
        else
        {
        while select forupdate projCostTrans
            where projCostTrans.ProjId == _projId
                && projCostTrans.TransactionOrigin != ProjOrigin::EstimateAccruedLoss
                && ((useBegBal && projCostTrans.TransactionOrigin == ProjOrigin::BeginningBalance) || (!useBegBal && projCostTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
            join forupdate projCostTransCost
                where projCostTransCost.TransId == projCostTrans.TransId
                    && projCostTransCost.TransStatus == ProjTransStatus::Estimated
                    && projCostTransCost.wipPeriod == _projControlPeriodTable.PeriodTo
        {
            projTrans   = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
            projTrans.parmTransactionOrigin(ProjCostTrans.TransactionOrigin);
            projLedgerStatusTo = this.ledgerStatusCostTo(projTrans);

            if (projTrans.ledgerStatusCost() != projLedgerStatusTo)
            {
                projPost = ProjPost::newEnterCost_TrxDetail(projCostTrans, projCostTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate);
                projPost.postTrans();
            }

            projCostTransCost.wipPeriod     = dateNull();
            projCostTransCost.TransStatus   = ProjTransStatus::Posted;
            projCostTransCost.update();
        }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipPostEmpl</Name>
				<Source><![CDATA[
    protected void wipPostEmpl(
        ProjControlPeriodTable  _projControlPeriod,
        LedgerVoucher           _ledgerVoucher,
        ProjId                  _projId)
    {
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        ProjTrans               projTrans;
        ProjLedgerStatus        projLedgerStatusTo;
        ProjPost                projPost;
        PSAIndirectComponentTrans   psaIndirectComponentTrans;
        ProjRevRecContractLine projRevRecContractLine;
        boolean useBegBal = this.parmBeginningBalance() == NoYes::Yes;
        
        //Using projItemTransCost.wipPeriod == _projControlPeriod.PeriodTo because while posting the wipPeriod is set to the periodTo of estimate it was posted in.
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            while select projRevRecContractLine
                 where projRevRecContractLine.RevenueRecognitionId == _projControlPeriod.ProjId
            join forupdate projEmplTrans
                where projEmplTrans.PSAContractLineNum == projRevRecContractLine.ContractLineNum
                join forupdate projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.TransStatus == ProjTransStatus::Estimated
                    && projEmplTransCost.wipPeriod   == _projControlPeriod.PeriodTo
                    && ((useBegBal && projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                        || (!useBegBal && projEmplTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        {
            projTrans   = ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost);
            projTrans.parmTransactionOrigin(projEmplTrans.TransactionOrigin);
            projLedgerStatusTo = this.ledgerStatusCostTo(projTrans);

            if (projTrans.ledgerStatusCost() != projLedgerStatusTo)
            {
                while select psaIndirectComponentTrans
                    where psaIndirectComponentTrans.TransId == projEmplTransCost.TransId &&
                        psaIndirectComponentTrans.ProjFundingSource == projEmplTransCost.FundingSource &&
                        psaIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost
                {
                    projPost = ProjPost::newEnterCost_TrxDetail(projEmplTrans, projEmplTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate, false, false, psaIndirectComponentTrans);
                    projPost.postTrans();
                }

                projPost = ProjPost::newEnterCost_TrxDetail(projEmplTrans, projEmplTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate);
                projPost.postTrans();
            }

            projEmplTransCost.wipPeriod     = dateNull();
            projEmplTransCost.TransStatus   = ProjTransStatus::Posted;
            projEmplTransCost.update();
        }
        }
        else
        {

        while select forupdate projEmplTrans
            where projEmplTrans.ProjId == _projId
                join forupdate projEmplTransCost
                    where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.TransStatus == ProjTransStatus::Estimated
                    && projEmplTransCost.wipPeriod   == _projControlPeriod.PeriodTo
                    && ((useBegBal && projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                        || (!useBegBal && projEmplTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        {
            projTrans   = ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost);
            projTrans.parmTransactionOrigin(projEmplTrans.TransactionOrigin);
            projLedgerStatusTo = this.ledgerStatusCostTo(projTrans);

            if (projTrans.ledgerStatusCost() != projLedgerStatusTo)
            {
                while select psaIndirectComponentTrans
                    where psaIndirectComponentTrans.TransId == projEmplTransCost.TransId &&
                        psaIndirectComponentTrans.ProjFundingSource == projEmplTransCost.FundingSource &&
                        psaIndirectComponentTrans.IndirectComponentType == PSAIndirectComponentType::Cost
                {
                    projPost = ProjPost::newEnterCost_TrxDetail(projEmplTrans, projEmplTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate, false, false, psaIndirectComponentTrans);
                    projPost.postTrans();
                }

                projPost = ProjPost::newEnterCost_TrxDetail(projEmplTrans, projEmplTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate);
                projPost.postTrans();
            }

            projEmplTransCost.wipPeriod     = dateNull();
            projEmplTransCost.TransStatus   = ProjTransStatus::Posted;
            projEmplTransCost.update();
        }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipPostItem</Name>
				<Source><![CDATA[
    protected void wipPostItem(
        ProjControlPeriodTable  _projControlPeriod,
        LedgerVoucher           _ledgerVoucher,
        ProjId                  _projId)
    {
        ProjItemTransCost   projItemTransCost;
        ProjItemTrans       projItemTrans;
        ProjTrans           projTrans;
        ProjLedgerStatus    projLedgerStatusTo;
        ProjPost            projPost;
        ProjRevRecContractLine projRevRecContractLine;
        boolean useBegBal = this.parmBeginningBalance() == NoYes::Yes;

        //Using projItemTransCost.wipPeriod == _projControlPeriod.PeriodTo because while posting the wipPeriod is set to the periodTo of estimate it was posted in.
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            while select projRevRecContractLine
                 where projRevRecContractLine.RevenueRecognitionId == _projControlPeriod.ProjId
            join forupdate projItemTrans
                where projItemTrans.PSAContractLineNum == projRevRecContractLine.ContractLineNum
            join forupdate projItemTransCost
                where projItemTransCost.InventTransId == projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                    && projItemTransCost.TransStatus == ProjTransStatus::Estimated
                    && projItemTransCost.wipPeriod == _projControlPeriod.PeriodTo
                    && ((useBegBal && projItemTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                        || (!useBegBal && projItemTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        {
            projTrans   = ProjTrans::newProjItemTransCost(projItemTransCost);
            projTrans.parmTransactionOrigin(projItemTrans.TransactionOrigin);
            projLedgerStatusTo = this.ledgerStatusCostTo(projTrans);

            if (projTrans.ledgerStatusCost() != projLedgerStatusTo)
            {
                projPost = ProjPost::newEnterCost_TrxDetail(projItemTrans, projItemTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate);
                projPost.postTrans();
            }

            projItemTransCost.wipPeriod = dateNull();
            projItemTransCost.TransStatus = ProjTransStatus::Posted;
            projItemTransCost.update();
        }
        }
        else
        {
        while select forupdate projItemTrans
            where projItemTrans.ProjId == _projId
                join forupdate projItemTransCost
                    where projItemTransCost.InventTransId == projItemTrans.InventTransId
                        && projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                        && projItemTransCost.TransStatus == ProjTransStatus::Estimated
                        && projItemTransCost.wipPeriod == _projControlPeriod.PeriodTo
                        && ((useBegBal && projItemTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                            || (!useBegBal && projItemTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        {
            projTrans   = ProjTrans::newProjItemTransCost(projItemTransCost);
            projTrans.parmTransactionOrigin(projItemTrans.TransactionOrigin);
            projLedgerStatusTo = this.ledgerStatusCostTo(projTrans);

            if (projTrans.ledgerStatusCost() != projLedgerStatusTo)
            {
                projPost = ProjPost::newEnterCost_TrxDetail(projItemTrans, projItemTransCost, _ledgerVoucher, projLedgerStatusTo, ProjOrigin::ReverseEstimate);
                projPost.postTrans();
            }

            projItemTransCost.wipPeriod = dateNull();
            projItemTransCost.TransStatus = ProjTransStatus::Posted;
            projItemTransCost.update();
        }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS55483";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>