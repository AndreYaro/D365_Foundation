<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRDropShipStatusUpdate_PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRDropShipStatusUpdate_PurchLine</c> class calculates
/// and updates the drop ship update for the <c>PurchLine</c> table record.
/// </summary>
class MCRDropShipStatusUpdate_PurchLine extends MCRDropShipStatusUpdate
{
    PurchLine           purchLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>purchLineSetDropShipStatusUpdateObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the update object for setting drop ship status on a purchase line.
    /// </summary>
    /// <param name = "_purchLine">The purchase line to update.</param>
    /// <returns>The update object.</returns>
    protected SysDaUpdateObject purchLineSetDropShipStatusUpdateObject(PurchLine _purchLine)
    {
        SysDaUpdateObject updateObject = new SysDaUpdateObject(_purchLine);

        updateObject.settingClause(this.purchLineSetMCRDropShipStatus(expectedDropShipStatus));

        updateObject.whereClause(
            this.purchLineFieldEquals(_purchLine, fieldStr(PurchLine, RecId), purchLine.RecId).and(
            this.purchLineMCRDropShipmentIsYes(_purchLine)));

        return updateObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpectedDropShipStatus</Name>
				<Source><![CDATA[
    protected MCRDropShipStatus calculateExpectedDropShipStatus()
    {
        PurchTable          purchTable;

        if (purchLine.MCRDropShipment)
        {
            if (purchLine.isCanceled())
            {
                expectedDropShipStatus = MCRDropShipStatus::None;
            }
            else
            {
                purchTable = purchTable::find(purchLine.PurchId);
                switch (purchTable.DocumentState)
                {
                    case VersioningDocumentState::Approved :
                        expectedDropShipStatus = MCRDropShipStatus::POCreated;
                        break;

                    case VersioningDocumentState::Confirmed :
                        switch (purchLine.PurchStatus)
                        {
                            case PurchStatus::Backorder :
                                expectedDropShipStatus = MCRDropShipStatus::POReleased;
                                break;

                            case PurchStatus::Received, PurchStatus::Invoiced :
                                expectedDropShipStatus = MCRDropShipStatus::POShipped;
                                break;
                        }
                        break;
                }
            }
        }
        else
        {
            expectedDropShipStatus = MCRDropShipStatus::None;
        }

        return expectedDropShipStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>MCRDropShipStatusUpdate</c> class.
    /// </summary>
    /// <param name="_purchLine">
    /// The purchase order record.
    /// </param>
    /// <param name="_requestedStatus">
    /// The requested drop ship status.
    /// </param>
    public void new(PurchLine _purchLine, MCRDropShipStatus _requestedStatus)
    {
        purchLine = _purchLine;

        // Set specific status
        if (_requestedStatus != MCRDropShipStatus::None)
        {
            expectedDropShipStatus = _requestedStatus;
        }
        else
        {
            expectedDropShipStatus = purchLine.MCRDropShipStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchDropShipStatusOnRecord</Name>
				<Source><![CDATA[
    protected void updatePurchDropShipStatusOnRecord()
    {
        ttsBegin;

        super();

        // Update Purchase order
        PurchLine purchLineLocal;
        purchLineLocal.skipDataMethods(true);
        new SysDaUpdateStatement().execute(this.purchLineSetDropShipStatusUpdateObject(purchLineLocal));

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesDropShipStatusOnRecord</Name>
				<Source><![CDATA[
    protected void updateSalesDropShipStatusOnRecord()
    {
        ttsBegin;

        super();

        // Update Sales order
        if (purchLine.RecId)
        {
            SalesLine                   salesLine;
            MCRSalesLineDropShipment    mcrSalesLineDropShipment;

            mcrSalesLineDropShipment.skipDataMethods(true);
            if (MCRDropShipStatusUpdatPurchLineFlight::instance().isEnabled())
            {
                using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().dropShipStatusActivities().updateSalesDropShipStatusOnRecord(purchLine))
                {
                    while select forupdate mcrSalesLineDropShipment
                        exists join RecId from salesLine
                            where salesLine.RecId == mcrSalesLineDropShipment.SalesLine
                                &&  salesLine.InventRefTransId == purchLine.InventTransId
                    {
                        mcrSalesLineDropShipment.DropShipStatus = salesLineDropShipStatus;
                        mcrSalesLineDropShipment.update();
                    }
                }
            }
            else
            {
                using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().dropShipStatusActivities().updateRecordSetSalesDropShipStatusOnRecord(purchLine))
                {
                    update_recordset mcrSalesLineDropShipment
                        setting DropShipStatus = salesLineDropShipStatus
                        exists join salesLine
                            where salesLine.RecId == mcrSalesLineDropShipment.SalesLine
                                &&  salesLine.InventRefTransId == purchLine.InventTransId;
                }
            }
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>