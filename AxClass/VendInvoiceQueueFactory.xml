<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceQueueFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceQueueFactory</c> prepares an invoice queue object.
/// </summary>
internal static class VendInvoiceQueueFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendInvoiceQueue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a <c>VendInvoiceIQueue</c> object for the specified <c>VendInvoiceQueueType</c>.
    /// </summary>
    /// <param name = "_vendInvoiceQueueType">The type of invoice queue.</param>
    /// <returns>An invoice queue object.</returns>
    internal static VendInvoiceIQueue getVendInvoiceQueue(VendInvoiceQueueType _vendInvoiceQueueType = VendInvoiceQueueType::SQL)
    {
        VendInvoiceIQueue vendInvoiceQueue;

        try
        {
            SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
            metadataCollection.SetManagedValue(classStr(VendInvoiceIQueue), _vendInvoiceQueueType);

            vendInvoiceQueue = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application),
                classStr(VendInvoiceIQueue),
                metadataCollection);
        }
        catch
        {
            if (!vendInvoiceQueue
                && xSession::currentRetryCount() <= VendInvoicePostTaskConstants::MaxRetryAttemptsOnException)
            {
                retry;
            }
        }

        if (!vendInvoiceQueue)
        {
            throw error("@AccountsPayable:VendInvoiceQueue_Instantiate_Failed");
        }

        return vendInvoiceQueue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>