<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowProjectReportContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjCashFlowProjectReportContract</c> class is the Data Contract class for the
/// <c>ProjCashFlowProjectReport</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(ProjCashFlowReportUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)
]
public class ProjCashFlowProjectReportContract implements SysOperationValidatable,SysOperationInitializable
{
    boolean             timeMaterial;
    boolean             fixedPrice;
    boolean             timeMaterialBillingMethod;
    boolean             fixedPriceBillingMethod;
    boolean             investment;
    boolean             internalCost;
    boolean             time;
    TransDate           projFromDate;
    TransDate           projToDate;
    ProjActualBudget    actualBudgetDeviationSum;
    boolean             inclPaidPayment;
    boolean             inclExpectedPayment;
    boolean             hour;
    boolean             expenses;
    boolean             item;
    boolean             revenue;
    boolean             onAcc;
    TransDate           paymentFromDate;
    TransDate           paymentToDate;
    TransDate           paymentBreakDate;
    TransDate           projBreakDate;
    ForecastModelId     forecastModelId;
    RealBase            addDaysToSales;
    TransDate           minimumSalesPayDate;
    TransDate           expectedCostPayDate;
    RealBase            addDaysToCost;
    boolean             skipBlankId;
    boolean             skipZero;
    ProjShowAmount      showAmount;
    Integer             level;
    ProjListStateProjType    projView;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default value for the data contract parameter.
    /// </summary>
    public void initialize()
    {
        this.parmLevel(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualBudgetDeviationSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ActualBudgetDeviationSum.
    /// </summary>
    /// <param name="_actualBudgetDeviationSum">
    /// The new value of the datacontract parameter ActualBudgetDeviationSum; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ActualBudgetDeviationSum
    /// </returns>
    [DataMemberAttribute('ActualBudgetDeviationSum')]
    public ProjActualBudget parmActualBudgetDeviationSum(ProjActualBudget _actualBudgetDeviationSum = actualBudgetDeviationSum)
    {
        actualBudgetDeviationSum = _actualBudgetDeviationSum;
        return actualBudgetDeviationSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddDaysToCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter AddDaysToCost.
    /// </summary>
    /// <param name="_addDaysToCost">
    /// The new value of the datacontract parameter AddDaysToCost; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter AddDaysToCost
    /// </returns>
    [
        DataMemberAttribute('AddDaysToCost'),
        SysOperationLabelAttribute(literalstr("@SYS101788")),
        SysOperationHelpTextAttribute(literalstr("@SYS101787"))
    ]
    public RealBase parmAddDaysToCost(RealBase _addDaysToCost = addDaysToCost)
    {
        addDaysToCost = _addDaysToCost;
        return addDaysToCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddDaysToSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter AddDaysToSales.
    /// </summary>
    /// <param name="_addDaysToSales">
    /// The new value of the datacontract parameter AddDaysToSales; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter AddDaysToSales
    /// </returns>
    [
        DataMemberAttribute('AddDaysToSales'),
        SysOperationLabelAttribute(literalstr("@SYS101788")),
        SysOperationHelpTextAttribute(literalstr("@SYS101787"))
    ]
    public RealBase parmAddDaysToSales(RealBase _addDaysToSales = addDaysToSales)
    {
        addDaysToSales = _addDaysToSales;
        return addDaysToSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpectedCostPayDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ExpectedCostPayDate.
    /// </summary>
    /// <param name="_expectedCostPayDate">
    /// The new value of the datacontract parameter ExpectedCostPayDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ExpectedCostPayDate
    /// </returns>
    [
        DataMemberAttribute('ExpectedCostPayDate'),
        SysOperationLabelAttribute(literalstr("@SYS101799"))
    ]
    public TransDate parmExpectedCostPayDate(TransDate _expectedCostPayDate = expectedCostPayDate)
    {
        expectedCostPayDate = _expectedCostPayDate;
        return expectedCostPayDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Expenses.
    /// </summary>
    /// <param name="_expenses">
    /// The new value of the datacontract parameter Expenses; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Expenses
    /// </returns>
    [
        DataMemberAttribute('Expenses'),
        SysOperationLabelAttribute(literalstr("@SYS82720")),
        SysOperationHelpTextAttribute(literalstr("@SYS78369"))
    ]
    public boolean parmExpenses(boolean _expenses = expenses)
    {
        expenses = _expenses;
        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FixedPrice.
    /// </summary>
    /// <param name="_fixedPrice">
    /// The new value of the datacontract parameter FixedPrice; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FixedPrice
    /// </returns>
    [
        DataMemberAttribute('FixedPrice'),
        SysOperationLabelAttribute(literalstr("@SYS3237")),
        SysOperationHelpTextAttribute(literalstr("@SYS78361"))
    ]
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;
        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPriceBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FixedPricePSA.
    /// </summary>
    /// <param name="_fixedPrice">
    /// The new value of the datacontract parameter FixedPricePSA; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter FixedPricePSA
    /// </returns>
    [
        DataMemberAttribute('FixedPriceBillingMethod'),
        SysOperationLabelAttribute(literalstr("@SYS3237")),
        SysOperationHelpTextAttribute(literalstr("@Proj:FixedPriceBillingMethodHelp"))
    ]
    public boolean parmFixedPriceBillingMethod(boolean _fixedPriceBillingMethod = fixedPriceBillingMethod)
    {
        fixedPriceBillingMethod = _fixedPriceBillingMethod;
        return fixedPriceBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastModelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ForecastModelId.
    /// </summary>
    /// <param name="_forecastModelId">
    /// The new value of the datacontract parameter ForecastModelId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ForecastModelId
    /// </returns>
    [
        DataMemberAttribute('ForecastModelId'),
        SysOperationLabelAttribute(literalstr("@SYS82923"))
    ]
    public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Hour.
    /// </summary>
    /// <param name="_hour">
    /// The new value of the datacontract parameter Hour; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Hour
    /// </returns>
    [
        DataMemberAttribute('Hour'),
        SysOperationLabelAttribute(literalstr("@SYS5269")),
        SysOperationHelpTextAttribute(literalstr("@SYS91062"))
    ]
    public boolean parmHour(boolean _hour = hour)
    {
        hour = _hour;
        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclExpectedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InclExpectedPayment.
    /// </summary>
    /// <param name="_inclExpectedPayment">
    /// The new value of the datacontract parameter InclExpectedPayment; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InclExpectedPayment
    /// </returns>
    [
        DataMemberAttribute('InclExpectedPayment'),
        SysOperationLabelAttribute(literalstr("@SYS101786")),
        SysOperationHelpTextAttribute(literalstr("@SYS101785"))
    ]
    public boolean parmInclExpectedPayment(boolean _inclExpectedPayment = inclExpectedPayment)
    {
        inclExpectedPayment = _inclExpectedPayment;
        return inclExpectedPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclPaidPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InclPaidPayment.
    /// </summary>
    /// <param name="_inclPaidPayment">
    /// The new value of the datacontract parameter InclPaidPayment; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InclPaidPayment
    /// </returns>
    [
        DataMemberAttribute('InclPaidPayment'),
        SysOperationLabelAttribute(literalstr("@SYS101813")),
        SysOperationHelpTextAttribute(literalstr("@SYS101784"))
    ]
    public boolean parmInclPaidPayment(boolean _inclPaidPayment = inclPaidPayment)
    {
        inclPaidPayment = _inclPaidPayment;
        return inclPaidPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter InternalCost.
    /// </summary>
    /// <param name="_internalCost">
    /// The new value of the datacontract parameter InternalCost; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter InternalCost
    /// </returns>
    [
        DataMemberAttribute('InternalCost'),
        SysOperationLabelAttribute(literalstr("@SYS78366")),
        SysOperationHelpTextAttribute(literalstr("@SYS78363"))
    ]
    public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        internalCost = _internalCost;
        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Investment.
    /// </summary>
    /// <param name="_investment">
    /// The new value of the datacontract parameter Investment; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Investment
    /// </returns>
    [
        DataMemberAttribute('Investment'),
        SysOperationLabelAttribute(literalstr("@SYS78353")),
        SysOperationHelpTextAttribute(literalstr("@SYS78364"))
    ]
    public boolean parmInvestment(boolean _investment = investment)
    {
        investment = _investment;
        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Item.
    /// </summary>
    /// <param name="_item">
    /// The new value of the datacontract parameter Item; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Item
    /// </returns>
    [
        DataMemberAttribute('Item'),
        SysOperationLabelAttribute(literalstr("@SYS14428")),
        SysOperationHelpTextAttribute(literalstr("@SYS78372"))
    ]
    public boolean parmItem(boolean _item = item)
    {
        item = _item;
        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Level.
    /// </summary>
    /// <param name="_level">
    /// The new value of the datacontract parameter Level; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Level
    /// </returns>
    [
        DataMemberAttribute('Level'),
        SysOperationLabelAttribute(literalstr("@SYS90474")),
        SysOperationHelpTextAttribute(literalstr("@SYS90477"))
    ]
    public Integer parmLevel(Integer _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinimumSalesPayDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter MinimumSalesPayDate.
    /// </summary>
    /// <param name="_minimumSalesPayDate">
    /// The new value of the datacontract parameter MinimumSalesPayDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter MinimumSalesPayDate
    /// </returns>
    [
        DataMemberAttribute('MinimumSalesPayDate'),
        SysOperationLabelAttribute(literalstr("@SYS101789")),
        SysOperationHelpTextAttribute(literalstr("@SYS101787"))
    ]
    public TransDate parmMinimumSalesPayDate(TransDate _minimumSalesPayDate = minimumSalesPayDate)
    {
        minimumSalesPayDate = _minimumSalesPayDate;
        return minimumSalesPayDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter onAcc.
    /// </summary>
    /// <param name="_onAcc">
    /// The new value of the datacontract parameter onAcc; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter onAcc
    /// </returns>
    [
        DataMemberAttribute('OnAcc'),
        SysOperationLabelAttribute(literalstr("@SYS7659")),
        SysOperationHelpTextAttribute(literalstr("@SYS78371"))
    ]
    public boolean parmOnAcc(boolean _onAcc = onAcc)
    {
        onAcc = _onAcc;
        return onAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentBreakDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PaymentBreakDate.
    /// </summary>
    /// <param name="_paymentBreakDate">
    /// The new value of the datacontract parameter PaymentBreakDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PaymentBreakDate
    /// </returns>
    [
        DataMemberAttribute('PaymentBreakDate'),
        SysOperationLabelAttribute(literalstr("@SYS83773"))
    ]
    public TransDate parmPaymentBreakDate(TransDate _paymentBreakDate = paymentBreakDate)
    {
        paymentBreakDate = _paymentBreakDate;
        return paymentBreakDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PaymentFromDate.
    /// </summary>
    /// <param name="_paymentFromDate">
    /// The new value of the datacontract parameter PaymentFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PaymentFromDate
    /// </returns>
    [
        DataMemberAttribute('PaymentFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS80661")),
        SysOperationHelpTextAttribute(literalstr("@SYS101782"))
    ]
    public TransDate parmPaymentFromDate(TransDate _paymentFromDate = paymentFromDate)
    {
        paymentFromDate = _paymentFromDate;
        return paymentFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter PaymentToDate.
    /// </summary>
    /// <param name="_paymentToDate">
    /// The new value of the datacontract parameter PaymentToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter PaymentToDate
    /// </returns>
    [
        DataMemberAttribute('PaymentToDate'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS101783"))
    ]
    public TransDate parmPaymentToDate(TransDate _paymentToDate = paymentToDate)
    {
        paymentToDate = _paymentToDate;
        return paymentToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBreakDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjBreakDate.
    /// </summary>
    /// <param name="_projBreakDate">
    /// The new value of the datacontract parameter ProjBreakDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjBreakDate
    /// </returns>
    [
        DataMemberAttribute('ProjBreakDate'),
        SysOperationLabelAttribute(literalstr("@SYS83773"))
    ]
    public TransDate parmProjBreakDate(TransDate _projBreakDate = projBreakDate)
    {
        projBreakDate = _projBreakDate;
        return projBreakDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjFromDate.
    /// </summary>
    /// <param name="_projFromDate">
    /// The new value of the datacontract parameter ProjFromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjFromDate
    /// </returns>
    [
        DataMemberAttribute('ProjFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS24050")),
        SysOperationHelpTextAttribute(literalstr("@SYS101780"))
    ]
    public TransDate parmProjFromDate(TransDate _projFromDate = projFromDate)
    {
        projFromDate = _projFromDate;
        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjToDate.
    /// </summary>
    /// <param name="_projToDate">
    /// The new value of the datacontract parameter ProjToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjToDate
    /// </returns>
    [
        DataMemberAttribute('ProjToDate'),
        SysOperationLabelAttribute(literalstr("@SYS80934")),
        SysOperationHelpTextAttribute(literalstr("@SYS101781"))
    ]
    public TransDate parmProjToDate(TransDate _projToDate = projToDate)
    {
        projToDate = _projToDate;
        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ProjView.
    /// </summary>
    /// <param name="_projView">
    /// The new value of the datacontract parameter ProjView; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ProjView
    /// </returns>
    [
        DataMemberAttribute('ProjView'),
        SysOperationLabelAttribute(literalstr("@SYS75799")),
        SysOperationHelpTextAttribute(literalstr("@SYS90476"))
    ]
    public ProjListStateProjType parmProjView(ProjListStateProjType _projView = projView)
    {
        projView = _projView;
        return projView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Revenue.
    /// </summary>
    /// <param name="_revenue">
    /// The new value of the datacontract parameter Revenue; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Revenue
    /// </returns>
    [
        DataMemberAttribute('Revenue'),
        SysOperationLabelAttribute(literalstr("@SYS9154")),
        SysOperationHelpTextAttribute(literalstr("@SYS78818"))
    ]
    public boolean parmRevenue(boolean _revenue = revenue)
    {
        revenue = _revenue;
        return revenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ShowAmount.
    /// </summary>
    /// <param name="_showAmount">
    /// The new value of the datacontract parameter ShowAmount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ShowAmount
    /// </returns>
    [DataMemberAttribute('ShowAmount')]
    public ProjShowAmount parmShowAmount(ProjShowAmount _showAmount = showAmount)
    {
        showAmount = _showAmount;
        return showAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipBlankId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter SkipBlankId.
    /// </summary>
    /// <param name="_skipBlankId">
    /// The new value of the datacontract parameter SkipBlankId; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter SkipBlankId
    /// </returns>
    [
        DataMemberAttribute('SkipBlankId'),
        SysOperationLabelAttribute(literalstr("@SYS91206")),
        SysOperationHelpTextAttribute(literalstr("@SYS91208"))
    ]
    public boolean parmSkipBlankId(boolean _skipBlankId = skipBlankId)
    {
        skipBlankId = _skipBlankId;
        return skipBlankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter SkipZero.
    /// </summary>
    /// <param name="_skipZero">
    /// The new value of the datacontract parameter SkipZero; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter SkipZero
    /// </returns>
    [
        DataMemberAttribute('SkipZero'),
        SysOperationLabelAttribute(literalstr("@SYS19052")),
        SysOperationHelpTextAttribute(literalstr("@SYS90472"))
    ]
    public boolean parmSkipZero(boolean _skipZero = skipZero)
    {
        skipZero = _skipZero;
        return skipZero;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Time.
    /// </summary>
    /// <param name="_time">
    /// The new value of the datacontract parameter Time; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter Time
    /// </returns>
    [
        DataMemberAttribute('Time'),
        SysOperationLabelAttribute(literalstr("@SYS81306")),
        SysOperationHelpTextAttribute(literalstr("@SYS101779"))
    ]
    public boolean parmTime(boolean _time = time)
    {
        time = _time;
        return time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TimeMaterial.
    /// </summary>
    /// <param name="_timeMaterial">
    /// The new value of the datacontract parameter TimeMaterial; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TimeMaterial
    /// </returns>
    [
        DataMemberAttribute('TimeMaterial'),
        SysOperationLabelAttribute(literalstr("@SYS53874")),
        SysOperationHelpTextAttribute(literalstr("@SYS101778"))
    ]
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;
        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterialBillingMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter TimeMaterial.
    /// </summary>
    /// <param name="_timeMaterial">
    /// The new value of the datacontract parameter TimeMaterial; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter TimeMaterial
    /// </returns>
    [
        DataMemberAttribute('TimeMaterialBillingMethod'),
        SysOperationLabelAttribute(literalstr("@SYS53874")),
        SysOperationHelpTextAttribute(literalstr("@Proj:TimeMaterialBillingMethodHelp"))
    ]
    public boolean parmTimeMaterialBillingMethod(boolean _timeMaterialBillingMethod = timeMaterialBillingMethod)
    {
        timeMaterialBillingMethod = _timeMaterialBillingMethod;
        return timeMaterialBillingMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        // No project type selected
        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            !(this.parmForecastModelId() ||
              this.parmTimeMaterial() ||
              this.parmInternalCost() ||
              this.parmInvestment() ||
              this.parmTime()))
        {
            isValid = checkFailed("@SYS91026");
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()
            && !(this.parmTimeMaterialBillingMethod() ||
                this.parmFixedPriceBillingMethod()))
        {
            isValid = checkFailed("@Proj:BillingMethodIsEmptyError");
        }

        // No transaction type selected
        if (!(this.parmHour() || this.parmExpenses() || this.parmRevenue() || this.parmItem() || this.parmOnAcc()))
        {
            isValid = checkFailed("@SYS91027");
        }

        // Wrong date interval
        if ((this.parmProjFromDate() > this.parmProjToDate()) ||
                (this.parmPaymentFromDate() > this.parmPaymentToDate()))
        {
            // Invalid date interval
            isValid = checkFailed("@SYS91020");
        }

        // If budget is selected then forecast model id must be selected
        if (this.parmActualBudgetDeviationSum() == ProjActualBudget::Budget)
        {
            if (this.parmForecastModelId() == '')
            {
                isValid = checkFailed("@SYS87707");
            }
        }

        // Minimum date should be less than the To date
        if (this.parmExpectedCostPayDate() > this.parmPaymentToDate())
        {
            isValid = checkFailed("@SYS91020");
        }
        if (this.parmMinimumSalesPayDate() > this.parmPaymentToDate())
        {
            isValid = checkFailed("@SYS91020");
        }

        if (this.parmLevel() < 0)
        {
            isValid = checkFailed("@SYS104023");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ProjCashFlowProjectReportContract construct()
    {
        return new ProjCashFlowProjectReportContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>