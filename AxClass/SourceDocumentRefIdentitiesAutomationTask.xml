<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SourceDocumentRefIdentitiesAutomationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Manages source doc ref identities processing using the process automation task engine
/// </summary>
[ExportMetadata(classStr(ProcessAutomationTask), classStr(SourceDocumentRefIdentitiesAutomationTask))]
[Export(identifierStr('Microsoft.Dynamics.AX.Application.ProcessAutomationTask'))]
internal final class SourceDocumentRefIdentitiesAutomationTask extends ProcessAutomationTask implements BatchRetryable
{
    private RecId sourceLink;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isProcessAutomationEnabledForThisTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isProcessAutomationEnabledForThisTask()
    {
        return SourceDocumentRefIdentitiesAutomationEnableFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListOfWorkToBePerformed</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected List getListOfWorkToBePerformed()
    {
        List taskList = new List(Types::Class);
        int chunkSize = SourceDocumentParameters::find().SourceDocumentRefIdentitiesProcessorChunkSize;
        int maxThreads = 1;
        
        ProcessExecutionSourceStatus processExecutionSourceStatus = ProcessExecutionSourceStatus::Success;
        int startLine = infologLine();
        int totalRecordsForAllThreadsInsertedToInProcessTable = 0;

        using (SysInstrumentationActivityContext activityContext = SourceDocumentAccountingFrameworkInstrumentationLogger::getActivityContext(
            SourceDocumentInstrumentationConstants::InstrumentationNamespaceForReferenceIdentitiesAutomation,
            classStr(SourceDocumentRefIdentitiesAutomationTask),
            SourceDocumentInstrumentationConstants::SourceDocumentRefIdentitiesAutomationProcess))
        {
            try
            {
                if (SourceDocumentRefIdentitiesAutomationAllowMultithreadingFlight::instance().isEnabled())
                {
                    maxThreads = SourceDocumentParameters::find().SourceDocumentRefIdentitiesProcessorMaxConcurrentThreads;
                }

                int recordsPerThread = chunkSize div maxThreads;

                // Base transfer ID value, we will add i to this on each loop iteration to ensure each thread gets a unique value
                // Using int64 to match ASE, which uses SubledgerJournalEntry.RecId as ReferenceIdentityTransferId
                int64 baseTransferId = 10000;

                if (this.getNumberOfRefIdentitiesBatchTasksRunning() > 0)
                {
                    // Ensure we aren't already running the process to prevent overloading
                    return taskList;
                }
                else
                {
                    // Clear orphaned records from SubledgerJournalEntryIdentityInProcess which were reserved by old threads
                    this.prepareInProcessTable();
                }

                // Create tasks for each thread
                for (int i = 1; i <= maxThreads; i++)
                {
                    // Add i to the base transferID to ensure unique values for each thread
                    int64 threadTransferId = baseTransferId + i;

                    this.insertThreadId(threadTransferId);

                    int inserted = this.loadInProcessTable(threadTransferId, recordsPerThread, chunkSize mod maxThreads, i);

                    totalRecordsForAllThreadsInsertedToInProcessTable += inserted;

                    // If we insert less than the expected records per thread, we have run out of waiting documents
                    // Finish creating current thread but set i to maxThreads to finish after, addtional threads not needed
                    if (inserted < recordsPerThread)
                    {
                        i = maxThreads;
                    }

                    SourceDocumentRefIdentitiesAutomationProcessor processor = new SourceDocumentRefIdentitiesAutomationProcessor(
                        classStr(SourceDocumentRefIdentitiesAutomationProcessor),
                        methodStr(SourceDocumentRefIdentitiesAutomationProcessor, process),
                        SysOperationExecutionMode::Asynchronous);

                    SourceDocumentRefIdentitiesAutomationContract workItemContract = processor.getDataContractObject() as SourceDocumentRefIdentitiesAutomationContract;
                    ProcessScheduleWorkItem workItem = this.parmProcessScheduleWorkItem();

                    workItem.parmBatchJobRetriesOnFailure(0);
                    workItemContract.parmThreadId(threadTransferId);

                    if (workItem)
                    {
                        workItemContract.initializeFromScheduleWorkItem(workItem);
                    }

                    taskList.addEnd(processor);
                }

            }
            catch (Exception::Error)
            {
                processExecutionSourceStatus = ProcessExecutionSourceStatus::Error;
            }
            catch (Exception::Warning)
            {
                processExecutionSourceStatus = ProcessExecutionSourceStatus::Warning;
            }
            finally
            {
                SourceDocumentRefIdentitiesAutomationLoggerHelper sourceDocumentRefIdentitiesAutomationLoggerHelper = new SourceDocumentRefIdentitiesAutomationLoggerHelper();

                Integer currentLine = infologLine();
                container infoLogData = infolog.copy(startLine + 1, currentLine);
                SysInfologEnumerator infoLogEnumerator = SysInfologEnumerator::newData(infoLogData);

                ProcessExecutionSourceLink sourceLinkItem = sourceDocumentRefIdentitiesAutomationLoggerHelper.logSourceDocumentRefIdentitiesAutomationTaskResult(
                    this.parmProcessScheduleWorkItem(),
                    processExecutionSourceStatus,
                    activityContext,
                    infoLogEnumerator,
                    totalRecordsForAllThreadsInsertedToInProcessTable);

                this.parmSourceLink(sourceLinkItem.RecId);
            }

            return taskList;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchJobCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected BatchCaption batchJobCaption()
    {
        return "@SourceDocumentAccountingFramework:SourceDocumentRefIdentitiesAutomationProcessor";
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInProcessTable</Name>
				<Source><![CDATA[
    private void prepareInProcessTable()
    {
        SubledgerJournalEntryIdentityInProcess subledgerJournalEntryIdentityInProcess;
        SourceDocumentRefIdentitiesThreads sourceDocumentRefIdentitiesThreads;

        // Delete orphaned records from the InProcess table to start fresh
        // Only records created from process automation threads will be removed to preserve data being used by ASE
        delete_from subledgerJournalEntryIdentityInProcess
                exists join sourceDocumentRefIdentitiesThreads
                    where sourceDocumentRefIdentitiesThreads.ReferenceIdentityTransferId == subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId;

        // After removing InProcess records that were tied to inactive threads, clear info about the inactive threads
        delete_from sourceDocumentRefIdentitiesThreads
                notexists join subledgerJournalEntryIdentityInProcess
                    where subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId == subledgerJournalEntryIdentityInProcess.ReferenceIdentityTransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertThreadId</Name>
				<Source><![CDATA[
    private void insertThreadId(int64 _refIdentityTransferId)
    {
        // Track threads to ensure process automation handles the correct data for each
        SourceDocumentRefIdentitiesThreads sourceDocumentRefIdentitiesThreads;

        sourceDocumentRefIdentitiesThreads.ReferenceIdentityTransferId = _refIdentityTransferId;
        sourceDocumentRefIdentitiesThreads.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInProcessTable</Name>
				<Source><![CDATA[
    private int loadInProcessTable(int64 _refIdentityTransferId, int _recordsPerThread, int _remainder, int _thread)
    {
        int recordsForCurrentThread = _recordsPerThread;
        int inserted;
        
        // Primary thread takes the remaining records after dividing chunk size by the number of threads
        if (_thread == 1)
        {
            recordsForCurrentThread = recordsForCurrentThread + _remainder;
        }

        str loadInProcessTableQuery = strFmt(@"
        INSERT INTO SUBLEDGERJOURNALENTRYIDENTITYINPROCESS
            (SUBLEDGERJOURNALENTRY,
            ACCOUNTINGEVENT,
            REFERENCEIDENTITYTRANSFERID)
        SELECT TOP %1
            SUBLEDGERJOURNALENTRY.RECID,
            SUBLEDGERJOURNALENTRY.ACCOUNTINGEVENT,
            %2
        FROM SUBLEDGERJOURNALENTRY
            WHERE SUBLEDGERJOURNALENTRY.REFERENCEIDENTITYTRANSFERSTATUS = %3
            AND NOT EXISTS (
                SELECT SUBLEDGERJOURNALENTRYIDENTITYTRANSFERRED.RECID
                    FROM SUBLEDGERJOURNALENTRYIDENTITYTRANSFERRED
                    WHERE SUBLEDGERJOURNALENTRYIDENTITYTRANSFERRED.SUBLEDGERJOURNALENTRY = SUBLEDGERJOURNALENTRY.RECID)
            AND NOT EXISTS (
                SELECT SUBLEDGERJOURNALENTRYIDENTITYINPROCESS.RECID
                    FROM SUBLEDGERJOURNALENTRYIDENTITYINPROCESS
                    WHERE SUBLEDGERJOURNALENTRYIDENTITYINPROCESS.SUBLEDGERJOURNALENTRY = SUBLEDGERJOURNALENTRY.RECID);", recordsForCurrentThread, _refIdentityTransferId, enum2Int(ReferenceIdentityTransferStatus::ReadyForTransfer));

        
        UserConnection userConnection = new UserConnection();
        Statement statement = userConnection.createStatement();

        try
        {
            ttsbegin;

            SqlStatementExecutePermission sqlPermission = new SqlStatementExecutePermission(loadInProcessTableQuery);
            sqlPermission.assert();
            inserted = statement.executeUpdate(loadInProcessTableQuery);
            CodeAccessPermission::revertAssert();

            ttscommit;
        }
        catch
        {
        }
        finally
        {
            if (statement)
            {
                statement.close();
            }

            if (userConnection)
            {
                userConnection.finalize();
            }
        }

        return inserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceLink</Name>
				<Source><![CDATA[
    [DataMember, Hookable(false)]
    public RecId parmSourceLink(RecId _sourceLink = sourceLink)
    {
        sourceLink = _sourceLink;

        return sourceLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfRefIdentitiesBatchTasksRunning</Name>
				<Source><![CDATA[
    private RecId getNumberOfRefIdentitiesBatchTasksRunning()
    {
        Batch batch;

        select count(RecId) from batch
            where (batch.Status == BatchStatus::Executing ||
            batch.Status == BatchStatus::Waiting) &&
            batch.ClassNumber == classNum(SourceDocumentRefIdentitiesAutomationProcessor);

        return batch.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>