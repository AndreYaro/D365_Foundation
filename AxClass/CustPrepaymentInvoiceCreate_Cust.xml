<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentInvoiceCreate_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create a prepayment invoice for a sales order having a prepayment proposal.
/// </summary>
internal final class CustPrepaymentInvoiceCreate_Cust extends CustPrepaymentInvoiceCreate
{
    private SalesTotals salesTotals;
    private CustPrepaymentProposalTable custPrepaymentProposalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>CustPrepaymentInvoiceCreate_Cust</c>
    /// </summary>
    /// <param name = "_salesPurchTable">sales order for which prepayment invoice is to be created</param>
    /// <param name = "_table">prepayment invoice table instance</param>
    /// <param name = "_line">prepayment invoicr line instance</param>
    /// <param name = "_salesUpdate"> sales update type</param>
    public void new(SalesTable _salesPurchTable,
                    CustPrepaymentInvoiceTable _table,
                    CustPrepaymentInvoiceLine _line,
                    SalesUpdate _salesUpdate = SalesUpdate::All)
    {
        super(_salesPurchTable, _table, _line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordSortedListLine()
    {
        return salesTotals ? salesTotals.recordSortedListLine() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    protected SalesPurchLine salesPurchLine()
    {
        SalesLine salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTable</Name>
				<Source><![CDATA[
    protected void calcTable(SalesPurchTable _salesTable)
    {
        CustPrepaymentInvoiceTable tmpTable = prepaymentInvoiceTable;
        SalesTable localSalesTable = _salesTable;

        Debug::assert(_salesTable.TableId == tableNum(SalesTable));

        super(_salesTable);

        salesTotals = SalesTotals_Sales::construct(localSalesTable,
                                                   SalesUpdate::All,
                                                   AccountOrder::None,
                                                   '',
                                                   localSalesTable.SalesId);
        salesTotals.calc();

        custPrepaymentProposalTable = this.getPrepaymentProposal();

        if (!custPrepaymentProposalTable)
        {
            throw error("@AccountsReceivable:PrepaymentProposalMissingError");
        }
 
        if (custPrepaymentProposalTable.PrepaymentType == SalesPrepayType::Percent)
        {
            tmpTable.InvoiceAmount = CurrencyExchangeHelper::amount(salesTotals.totalAmount() * custPrepaymentProposalTable.PrepaymentValue / 100, tmpTable.CurrencyCode);
        }
        else
        {
            tmpTable.InvoiceAmount = custPrepaymentProposalTable.PrepaymentAmount;
        }

        prepaymentInvoiceTable.PostingProfile = localSalesTable.PostingProfile;
        prepaymentInvoiceTable.CustPostingProfile = localSalesTable.PostingProfile;
        prepaymentInvoiceTable.CategoryId = custPrepaymentProposalTable.CategoryId;
        prepaymentInvoiceTable.DeliveryDate = localSalesTable.DeliveryDate;
        prepaymentInvoiceTable.PostalAddress = localSalesTable.DeliveryPostalAddress;

        if (SalesOrderFinTagFeature::isEnabled())
        {
            prepaymentInvoiceTable.FinTag = localSalesTable.FinTag;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotalLine</Name>
				<Source><![CDATA[
    protected void insertTotalLine()
    {
        prepaymentInvoiceLine.TaxGroup = "";
        prepaymentInvoiceLine.TaxItemGroup = "";

        if(custPrepaymentProposalTable.PrepaymentType == SalesPrepayType::Percent)
        {
            prepaymentInvoiceLine.LineAmount = CurrencyExchangeHelper::amount(this.invoiceAmount() * custPrepaymentProposalTable.PrepaymentValue / 100, prepaymentInvoiceTable.CurrencyCode);
        }
        else
        {
            prepaymentInvoiceLine.LineAmount = custPrepaymentProposalTable.PrepaymentAmount;
        }

        prepaymentInvoiceLine.Description = "@AccountsReceivable:PrepaymentInvoicelLine";
        prepaymentInvoiceLine.LineNum++;
        prepaymentInvoiceLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineAmount</Name>
				<Source><![CDATA[
    protected Amount salesPurchLineAmount(SalesPurchLine _line)
    {
        return _line.salesPurchLineInterface().calcLineAmount(SalesQuantity::construct(DocumentStatus::Invoice).calcSalesQty(_line, SalesUpdate::All));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmount</Name>
				<Source><![CDATA[
    protected Amount invoiceAmount()
    {
        return salesTotals.totalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    protected Amount taxAmount()
    {
        return salesTotals.tax().taxAmountCalculated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    protected Tax tax()
    {
        return salesTotals ? salesTotals.tax() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSign</Name>
				<Source><![CDATA[
    protected int taxSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrepaymentProposal</Name>
				<Source><![CDATA[
    private CustPrepaymentProposalTable getPrepaymentProposal()
    {
        CustPrepaymentProposalTable prepaymentProsposal;
        SalesTable saleTable = salesPurchTable as SalesTable;

        prepaymentProsposal = custPrepaymentProposalTable::findCustPrepaymentProposalBySalesRecId(saleTable.RecId);

        return prepaymentProsposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>