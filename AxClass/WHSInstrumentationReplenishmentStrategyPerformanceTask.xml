<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInstrumentationReplenishmentStrategyPerformanceTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ApplicationEventSource = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

internal final class WHSInstrumentationReplenishmentStrategyPerformanceTask extends WHSInstrumentationPerformanceTask
{
    private Map initialParameters;
    private const str CategoryName = 'replenishmentStrategy';

    private const str WaveDemandReplenishmentStrategyPickLinesFailedAction      = 'waveDemandReplenishmentStrategyPickLinesFailed';
    private const str WaveDemandReplenishmentStrategyPickLinesValidationAction  = 'waveDemandReplenishmentStrategyPickLinesValidation';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c> that will be used to time a
    /// replenishment strategy related task.
    /// </summary>
    /// <param name = "_action">
    /// string describing the purpose of the new timer.
    /// </param>
    /// <param name = "_parameters">
    /// String to string map, that holds the different attributes and their values to log.
    /// </param>
    public void new(str _action, Map _parameters)
    {
        initialParameters = _parameters;
        super(CategoryName, _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preTaskStart</Name>
				<Source><![CDATA[
    protected void preTaskStart()
    {
        if (WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameters(initialParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaskStart</Name>
				<Source><![CDATA[
    protected void postTaskStart()
    {
        if (!WHSInstrumentationPerformanceTask::IsPostTaskStartFlightEnabled)
        {
            return;
        }

        this.setParameters(initialParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveDemandReplenishmentStrategyFailedPickLinesCleanup</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a new <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c> to 
    /// time how long it takes to delete the failed replenishment pick temporary work lines.
    /// </summary>
    /// <param name = "_workCreationHistoryLineRecId">
    /// The record id of the work creation history line, that holds important information about the 
    /// current task (i.e. replenishment work id, replenishment put location, item and replenishment
    /// template line).
    /// </param>
    /// <returns>
    /// A new instance of <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c>,
    /// </returns>
    public static WHSInstrumentationReplenishmentStrategyPerformanceTask newWaveDemandReplenishmentStrategyFailedPickLinesCleanup(RecId _workCreationHistoryLineRecId)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationReplenishmentStrategyPerformanceTask::setWorkCreationHistoryLineRecId(parameters, _workCreationHistoryLineRecId);

        return new WHSInstrumentationReplenishmentStrategyPerformanceTask('waveDemandReplenishmentStrategyFailedPickLinesCleanup', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveDemandReplenishmentStrategyAllPickLinesCleanup</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a new <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c> to
    /// time how long it takes to delete all the replenishment pick temporary work lines
    /// for a particular item and put location.
    /// </summary>
    /// <param name = "_workCreationHistoryLineRecId">
    /// The record id of the work creation history line, that holds important information about the
    /// current task (i.e. replenishment work id, replenishment put location, item and replenishment
    /// template line).
    /// </param>
    /// <returns>
    /// A new instance of <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c>,
    /// </returns>
    public static WHSInstrumentationReplenishmentStrategyPerformanceTask newWaveDemandReplenishmentStrategyAllPickLinesCleanup(RecId _workCreationHistoryLineRecId)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationReplenishmentStrategyPerformanceTask::setWorkCreationHistoryLineRecId(parameters, _workCreationHistoryLineRecId);

        return new WHSInstrumentationReplenishmentStrategyPerformanceTask('waveDemandReplenishmentStrategyAllPickLinesCleanup', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWaveDemandReplenishmentStrategyAdjustSalesLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a new <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c> to
    /// time how long it takes to adjust the quantities on the sales pick temporary work lines.
    /// </summary>
    /// <param name = "_workCreationHistoryLineRecId">
    /// The record id of the work creation history line, that holds important information about the
    /// current task (i.e. replenishment work id, replenishment put location, item and replenishment
    /// template line).
    /// </param>
    /// <returns>
    /// A new instance of <c>WHSInstrumentationReplenishmentStrategyPerformanceTask</c>,
    /// </returns>
    public static WHSInstrumentationReplenishmentStrategyPerformanceTask newWaveDemandReplenishmentStrategyAdjustSalesLines(RecId _workCreationHistoryLineRecId)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationReplenishmentStrategyPerformanceTask::setWorkCreationHistoryLineRecId(parameters, _workCreationHistoryLineRecId);

        return new WHSInstrumentationReplenishmentStrategyPerformanceTask('waveDemandReplenishmentStrategyAdjustSalesLines', parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWaveDemandReplenishmentStrategyPickLinesValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a log when we begin to validate the temporary pick work lines for a replenishment put location.
    /// </summary>
    /// <param name = "_workCreationHistoryLineRecId">
    /// The record id of the work creation history line, that holds important information about the
    /// current task (i.e. replenishment work id, replenishment put location, item and replenishment
    /// template line).
    /// </param>
    public static void logWaveDemandReplenishmentStrategyPickLinesValidation(RecId _workCreationHistoryLineRecId)
    {
        Map parameters = new Map(Types::String, Types::String);
        WHSInstrumentationReplenishmentStrategyPerformanceTask::setWorkCreationHistoryLineRecId(parameters, _workCreationHistoryLineRecId);

        ApplicationEventSource::EventWriteWhsPerformanceTaskStart(CategoryName, WaveDemandReplenishmentStrategyPickLinesValidationAction, 0, parameters.toString());
        
        WHSInstrumentationReplenishmentStrategyPerformanceTask::setAction(parameters, WaveDemandReplenishmentStrategyPickLinesValidationAction);
        WHSInstrumentationLogger::createLogger(CategoryName).logAttributeValueInformation(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReplenishmentStrategyPickLineFailureWithoutRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a log when we fail to create replenishment pick temporary work lines for replenishment put location,
    /// and there is no need to retry with reduced demand quantity.
    /// </summary>
    /// <param name = "_workCreationHistoryLineRecId">
    /// The record id of the work creation history line, that holds important information about the
    /// current task (i.e. replenishment work id, replenishment put location, item and replenishment
    /// template line).
    /// </param>
    public static void logReplenishmentStrategyPickLineFailureWithoutRetry(RecId _workCreationHistoryLineRecId)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationReplenishmentStrategyPerformanceTask::setWorkCreationHistoryLineRecId(parameters, _workCreationHistoryLineRecId);
        WHSInstrumentationReplenishmentStrategyPerformanceTask::setRetryToRecover(parameters, 'false');
        
        ApplicationEventSource::EventWriteWhsPerformanceTaskStart(CategoryName, WaveDemandReplenishmentStrategyPickLinesFailedAction, 0, parameters.toString());

        WHSInstrumentationReplenishmentStrategyPerformanceTask::setAction(parameters, WaveDemandReplenishmentStrategyPickLinesFailedAction);
        WHSInstrumentationLogger::createLogger(CategoryName).logAttributeValueInformation(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReplenishmentStrategyPickLineFailureWithRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates a log when we fail to create replenishment pick temporary work lines for replenishment put location,
    /// and and we retry with reduced demand quantity.
    /// </summary>
    /// <param name = "_workCreationHistoryLineRecId">
    /// The record id of the work creation history line, that holds important information about the
    /// current task (i.e. replenishment work id, replenishment put location, item and replenishment
    /// template line).
    /// </param>
    public static void logReplenishmentStrategyPickLineFailureWithRetry(RecId _workCreationHistoryLineRecId)
    {
        Map parameters = new Map(Types::String, Types::String);

        WHSInstrumentationReplenishmentStrategyPerformanceTask::setWorkCreationHistoryLineRecId(parameters, _workCreationHistoryLineRecId);
        WHSInstrumentationReplenishmentStrategyPerformanceTask::setRetryToRecover(parameters, 'true');
        
        ApplicationEventSource::EventWriteWhsPerformanceTaskStart(CategoryName, WaveDemandReplenishmentStrategyPickLinesFailedAction, 0, parameters.toString());
        
        WHSInstrumentationReplenishmentStrategyPerformanceTask::setAction(parameters, WaveDemandReplenishmentStrategyPickLinesFailedAction);
        WHSInstrumentationLogger::createLogger(CategoryName).logAttributeValueInformation(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkCreationHistoryLineRecId</Name>
				<Source><![CDATA[
    private static void setWorkCreationHistoryLineRecId(Map _parameters, int64 _workCreationHistoryLineRecId)
    {
        _parameters.insert('workCreationHistoryLineRecId', int642Str(_workCreationHistoryLineRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAction</Name>
				<Source><![CDATA[
    private static void setAction(Map _parameters, str _action)
    {
        _parameters.insert('action', _action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetryToRecover</Name>
				<Source><![CDATA[
    private static void setRetryToRecover(Map _parameters, str _retryToRecover)
    {
        _parameters.insert('retryToRecover', _retryToRecover);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>