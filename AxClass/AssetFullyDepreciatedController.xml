<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetFullyDepreciatedController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetFullyDepreciatedController</c> class is the controller for the <c>AssetFullyDepreciated</c> report.
/// </summary>
public class AssetFullyDepreciatedController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the default values for the query ranges.
    /// </summary>
    protected void prePromptModifyContract()
    {
        AssetFullyDepreciatedContract contract;
        AssetBookTable assetBookTable;
        Range bookIdRange;
        Query query;
        QueryBuildDataSource qbds;

        super();

        while select BookId from assetBookTable
            where assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            if (bookIdRange)
            {
                bookIdRange += ',';
            }

            bookIdRange += queryValue(assetBookTable.BookId);
        }

        query = this.getFirstQuery();
        qbds = query.dataSourceTable(tableNum(AssetBook));

        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, BookId)).value(bookIdRange);

        SysQuery::findOrCreateRange(qbds, fieldNum(AssetBook, Status)).value(queryValue(AssetStatus::Open));
        qbds.addRange(fieldNum(AssetBook, Status)).value(queryValue(AssetStatus::Suspended));
        qbds.addRange(fieldNum(AssetBook, Status)).value(queryValue(AssetStatus::Closed));

        contract = this.parmReportContract().parmRdpContract() as AssetFullyDepreciatedContract;

        if (!contract.parmCalculationDate())
        {
            contract.parmCalculationDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00021, funcName());

        AssetFullyDepreciatedController controller = new AssetFullyDepreciatedController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(AssetFullyDepreciated, Report));
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>