<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateIsNotInTransitToOtherWarehouseCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLicensePlateIsNotInTransitToOtherWarehouseCheck</c> class is responsible for validating that 
/// license plate is not in transit on other warehouse than the destination warehouse.
/// </summary>
final internal class WHSLicensePlateIsNotInTransitToOtherWarehouseCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation that License Plate is not in transit on other warehouses than the destination warehouse.
    /// </summary>
    /// <param name="_licensePlateId">The Id of the License Plate.</param>
    /// <param name="_inventLocationId">Destination inventory location.</param>
    /// <returns>true if the validation is passed; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean validateLicensePlate(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId)
    {
        return new WHSLicensePlateIsNotInTransitToOtherWarehouseCheck().checkLPIsNotInTransit(_licensePlateId, _inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLPIsNotInTransit</Name>
				<Source><![CDATA[
    private boolean checkLPIsNotInTransit(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId)
    {
        str cacheKey = this.getCacheKey(_licensePlateId, _inventLocationId);
        boolean ret = true;

        //We are not accounting for scenarios where the asn gets created while the current transaction is executing 
        //since it is unlikely to happen and would be a violation in another code path. 
        //The cache is used to improve performance for scenarios we the same LP is examined multiple times, e.g. moving an LP with serial numbers.
        if (SysTransactionScopeCache::isSet(funcName(), cacheKey))
        {
            return ret;
        }

        WHSASNItem asnItem;
        WHSLoadLine loadLine;
        InventTransferTable transferTable;

        select firstonly RecId from asnItem
            where asnItem.LicensePlateId == _licensePlateId
                && asnItem.Module == WHSModule::Transfer
            join TableId from loadLine
                where loadLine.RecId == asnItem.LoadLineRefRecId
            join InventLocationIdTo from transferTable
                where transferTable.TransferId == loadLine.OrderNum
                    && transferTable.InventLocationIdTo != _inventLocationId;

        if (asnItem)
        {
            ret = checkFailed(strFmt("@WAX:LicensePlateInTransitToOtherWarehouseError", _licensePlateId, transferTable.InventLocationIdTo));
        }
        else
        {
            SysTransactionScopeCache::set(funcName(), cacheKey, ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a key that is used to retrieve the validation result.
    /// </summary>
    /// <param name="_licensePlateId">The Id of the License Plate.</param>
    /// <param name="_inventLocationId">Destination inventory location.</param>
    /// <returns>
    /// A key that is used to retrieve the validation result.
    /// </returns>
    private str getCacheKey(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId)
    {
        return curExt() + '#' + _licensePlateId + '#' + _inventLocationId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>