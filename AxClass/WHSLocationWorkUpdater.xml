<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationWorkUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains logic to handle updating of <c>WMSLocation</c> records for warehouse activities.
/// </summary>
final internal class WHSLocationWorkUpdater
{
    private WMSLocation                 location;
    private WMSLocationAggregateStatus  locationAggregateStatus;
    private WHSLocationProfile          locationProfile;

    private WHSWorkType                 workType;
    private boolean                     correction;

    private WHSLastActivityDateTime     lastActivityDateTime;
    private WHSItemIdInLocation         itemIdInLocation;
    private WHSAgingDate                agingDate;
    private WHSLocationStatus           locationStatus;
    private WHSAgingDate                originAgingDate;

    private WHSInstrumentationLogger    instrumentationLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginAgingDate</Name>
				<Source><![CDATA[
    private WHSAgingDate parmOriginAgingDate(WHSAgingDate _originAgingDate = originAgingDate)
    {
        originAgingDate = _originAgingDate;

        return originAgingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrection</Name>
				<Source><![CDATA[
    private boolean parmCorrection(boolean _correction = correction)
    {
        correction = _correction;
    
        return correction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateItemInLocation</Name>
				<Source><![CDATA[
    private boolean parmUpdateItemInLocation()
    {
        return locationProfile.EnableItemInLocationUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateLastActivityDate</Name>
				<Source><![CDATA[
    private boolean parmUpdateLastActivityDate()
    {
        return locationProfile.EnableLocationActivityDateTimeUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateLocationStatus</Name>
				<Source><![CDATA[
    private boolean parmUpdateLocationStatus()
    {
        return locationProfile.EnableLocationStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkType</Name>
				<Source><![CDATA[
    private WHSWorkType parmWorkType(WHSWorkType _workType = workType)
    {
        workType = _workType;
    
        return workType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLocationInfo</Name>
				<Source><![CDATA[
    private void saveLocationInfo()
    {
        #OCCRetryCount
     
        using (var activityContext = instrumentationLogger.locationStatusUpdateActivities().saveLocationInfo())
        {
            instrumentationLogger.logRecordInformation(location);
            instrumentationLogger.logRecordInformation(locationProfile);

            try
            {
                ttsBegin;
    
                locationAggregateStatus = WMSLocationAggregateStatus::find(location.wMSLocationId, location.inventLocationId, true);

                if (locationAggregateStatus.RecId == 0)
                {
                    // Initialize aggregate status record if it does not yet exist.
                    locationAggregateStatus.initFromWMSLocation(location);
                }
    
                if (this.parmUpdateLastActivityDate())
                {
                    locationAggregateStatus.LastActivityDateTime                = lastActivityDateTime;
                    locationAggregateStatus.MaintainLocationActivityDateTime    = NoYes::Yes;
                }
    
                if (this.parmUpdateLocationStatus())
                {
                    locationAggregateStatus.LocationStatus          = locationStatus;
                    locationAggregateStatus.AgingDate               = agingDate;
                    locationAggregateStatus.MaintainLocationStatus  = NoYes::Yes;
                }
    
                if (this.parmUpdateItemInLocation())
                {
                    locationAggregateStatus.ItemIdInLocation        = itemIdInLocation;
                    locationAggregateStatus.MaintainItemInLocation  = NoYes::Yes;
                }

                locationAggregateStatus.write();
    
                ttsCommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLocationInfo</Name>
				<Source><![CDATA[
    private void calculateLocationInfo()
    {
        if (this.parmUpdateLastActivityDate())
        {
            this.assignLastActivityDate();
        }
    
        if (this.parmUpdateLocationStatus())
        {
            this.calculateLocationStatus();
        }
    
        if (this.parmUpdateItemInLocation())
        {
            this.calculateItemInLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemInLocation</Name>
				<Source><![CDATA[
    private void calculateItemInLocation()
    {
        InventSum           inventSum;
        PdsCatchWeightItem  pdsCatchWeightItem;
        Map                 m = new Map(Types::String, Types::Real);
        
        using (var activityContext = instrumentationLogger.locationStatusUpdateActivities().calculateItemInLocation(WHSCatchWeightConfigurationKeyManager::instance().isEnabled()))
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                // Non-catch weight items
                while select ItemId, sum(PhysicalInvent) from inventSum
                group by ItemId
                where inventSum.PhysicalInvent      > 0
                    && inventSum.ClosedQty          == NoYes::No
                    && inventSum.InventLocationId   == location.inventLocationId
                    && inventSum.wMSLocationId      == location.wMSLocationId
                notExists join pdsCatchWeightItem
                    where pdsCatchWeightItem.ItemId     == inventSum.ItemId
                {
                    m.insert(inventSum.ItemId, inventSum.PhysicalInvent);
                }

                // Catch weight items
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    while select ItemId, sum(PdsCWPhysicalInvent) from inventSum
                    group by ItemId
                    where inventSum.InventLocationId    == location.inventLocationId
                    &&    inventSum.wMSLocationId       == location.wMSLocationId
                    &&    inventSum.PdsCWPhysicalInvent  > 0
                    &&    inventSum.ClosedQty           == NoYes::No
                        exists join pdsCatchWeightItem
                        where pdsCatchWeightItem.ItemId == inventSum.ItemId
                    {
                        m.insert(inventSum.ItemId, inventSum.PdsCWPhysicalInvent);
                    }
                }
            }
            else
            {
                InventDim   inventDim;
        
                // Non-catch weight items
                while select ItemId, sum(PhysicalInvent) from inventSum
                group by ItemId
                exists join inventDim
                where inventSum.InventDimId         == inventDim.inventDimId
                    && inventSum.PhysicalInvent     > 0
                    && inventSum.ClosedQty          == NoYes::No
                    && inventDim.InventLocationId   == location.inventLocationId
                    && inventDim.wMSLocationId      == location.wMSLocationId
                    notExists join pdsCatchWeightItem
                    where pdsCatchWeightItem.ItemId     == inventSum.ItemId
                {
                    m.insert(inventSum.ItemId, inventSum.PhysicalInvent);
                }

                // Catch weight items
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    while select ItemId, sum(PdsCWPhysicalInvent) from inventSum
                    group by ItemId
                    exists join inventDim
                    where inventSum.InventDimId         == inventDim.inventDimId
                    &&    inventDim.InventLocationId    == location.inventLocationId
                    &&    inventDim.wMSLocationId       == location.wMSLocationId
                    &&    inventSum.PdsCWPhysicalInvent > 0
                    &&    inventSum.ClosedQty           == NoYes::No
                        exists join pdsCatchWeightItem
                        where pdsCatchWeightItem.ItemId == inventSum.ItemId
                    {
                        m.insert(inventSum.ItemId, inventSum.PdsCWPhysicalInvent);
                    }
                }
            }

            //deltas
            var updateOnHandInstance = InventUpdateOnhandGlobal::Instance().inventUpdateOnhand();
                
            if (updateOnHandInstance.mustAddAnyInventSumDeltaOnhand())
            {
                InventSumDelta inventSumDelta;
        
                var sqlTransactionId = updateOnHandInstance.sqlTransactionId();
            
                if (InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
                {
                    // Delta Non-catch weight items
                    while select ItemId, sum(PhysicalInvent) from inventSumDelta
                        group by ItemId
                        where inventSumDelta.InventLocationId   == location.inventLocationId
                        &&    inventSumDelta.wMSLocationId      == location.wMSLocationId
                        &&    inventSumDelta.SQLTransactionId   == sqlTransactionId
                            notExists join pdsCatchWeightItem
                            where pdsCatchWeightItem.ItemId == inventSumDelta.ItemId
                    {
                        if (!m.exists(inventSumDelta.ItemId))
                        {
                            m.insert(inventSumDelta.ItemId, inventSumDelta.PhysicalInvent);
                        }
                        else
                        {
                            var qty = m.lookup(inventSumDelta.ItemId);
                            qty = qty + inventSumDelta.PhysicalInvent;
    
                            if (qty != 0)
                            {
                                m.insert(inventSumDelta.ItemId, qty);
                            }
                            else
                            {
                                m.remove(inventSumDelta.ItemId);
                            }
                        }
                    }

                    // Delta catch weight items
                    if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                    {
                        while select ItemId, sum(PdsCWPhysicalInvent) from inventSumDelta
                            group by ItemId
                            where inventSumDelta.InventLocationId   == location.inventLocationId
                            &&    inventSumDelta.wMSLocationId      == location.wMSLocationId
                            &&    inventSumDelta.SQLTransactionId   == sqlTransactionId
                                exists join pdsCatchWeightItem
                                where pdsCatchWeightItem.ItemId == inventSumDelta.ItemId
                        {
                            if (!m.exists(inventSumDelta.ItemId))
                            {
                                m.insert(inventSumDelta.ItemId, inventSumDelta.PdsCWPhysicalInvent);
                            }
                            else
                            {
                                var qty = m.lookup(inventSumDelta.ItemId);
                                qty = qty + inventSumDelta.PdsCWPhysicalInvent;

                                if (qty != 0)
                                {
                                    m.insert(inventSumDelta.ItemId, qty);
                                }
                                else
                                {
                                    m.remove(inventSumDelta.ItemId);
                                }
                            }
                        }
                    }
                }
                else
                {
                    InventDim inventDim;
        
                    // Delta Non-catch weight items
                    while select ItemId, sum(PhysicalInvent) from inventSumDelta
                        group by ItemId
                        where inventSumDelta.SQLTransactionId   == sqlTransactionId                        
                    exists join inventDim
                        where inventSumDelta.InventDimId    == inventDim.inventDimId
                        &&    inventDim.InventLocationId    == location.inventLocationId
                        &&    inventDim.wMSLocationId       == location.wMSLocationId
                    notExists join pdsCatchWeightItem
                        where pdsCatchWeightItem.ItemId == inventSumDelta.ItemId
                    {
                        if (!m.exists(inventSumDelta.ItemId))
                        {
                            m.insert(inventSumDelta.ItemId, inventSumDelta.PhysicalInvent);
                        }
                        else
                        {
                            var qty = m.lookup(inventSumDelta.ItemId);
                            qty = qty + inventSumDelta.PhysicalInvent;
    
                            if (qty != 0)
                            {
                                m.insert(inventSumDelta.ItemId, qty);
                            }
                            else
                            {
                                m.remove(inventSumDelta.ItemId);
                            }
                        }
                    }

                    // Delta catch weight items
                    if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                    {
                        while select ItemId, sum(PdsCWPhysicalInvent) from inventSumDelta
                            group by ItemId
                            where inventSumDelta.SQLTransactionId   == sqlTransactionId                        
                        exists join inventDim
                            where inventSumDelta.InventDimId    == inventDim.inventDimId
                            &&    inventDim.InventLocationId    == location.inventLocationId
                            &&    inventDim.wMSLocationId       == location.wMSLocationId
                        exists join pdsCatchWeightItem
                            where pdsCatchWeightItem.ItemId == inventSumDelta.ItemId
                        {
                            if (!m.exists(inventSumDelta.ItemId))
                            {
                                m.insert(inventSumDelta.ItemId, inventSumDelta.PdsCWPhysicalInvent);
                            }
                            else
                            {
                                var qty = m.lookup(inventSumDelta.ItemId);
                                qty = qty + inventSumDelta.PdsCWPhysicalInvent;

                                if (qty != 0)
                                {
                                    m.insert(inventSumDelta.ItemId, qty);
                                }
                                else
                                {
                                    m.remove(inventSumDelta.ItemId);
                                }
                            }
                        }
                    }
                }
            }
            
            if (m.elements() == 1)
            {
                var me = m.getEnumerator();
                me.moveNext();
    
                itemIdInLocation = me.currentKey();
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignLastActivityDate</Name>
				<Source><![CDATA[
    private void assignLastActivityDate()
    {
        using (var activityContext = instrumentationLogger.locationStatusUpdateActivities().assignLastActivityDate())
        {
            lastActivityDateTime = DateTimeUtil::getSystemDateTime();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAgingDateForNonLPControlledLocation</Name>
				<Source><![CDATA[
    private WHSAgingDate calculateAgingDateForNonLPControlledLocation(WHSAgingDate _currentAgingDate)
    {
        WHSAgingDate newAgingDate;

        if (_currentAgingDate && originAgingDate)
        {
            newAgingDate = min(_currentAgingDate, originAgingDate);
        }
        else if (originAgingDate)
        {
            newAgingDate = originAgingDate;
        }
        else
        {
            newAgingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return newAgingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLocationStatus</Name>
				<Source><![CDATA[
    private void calculateLocationStatus()
    {
        WMSLocationAggregateStatus  currentLocationAggregateStatus = WMSLocationAggregateStatus::find(
                                                                        location.wMSLocationId,
                                                                        location.inventLocationId);
        locationStatus  = currentLocationAggregateStatus.LocationStatus;
        agingDate       = currentLocationAggregateStatus.AgingDate;

        boolean lpControlled = locationProfile.LPControlled;

        using (var activityContext = instrumentationLogger.locationStatusUpdateActivities().calculateLocationStatus(lpControlled, correction, workType))
        {
            // If work type is pick we have removed inventory from the location.
            if (workType == WHSWorkType::Pick)
            {
                // Evaluate if location is now empty
                if (location.whsLocationIdEmptyIncludeDeltaCW(true))
                {
                    locationStatus  = WHSLocationStatus::Empty;
                    agingDate       = dateNull();
                }
                else if (!correction)
                {
                    locationStatus = WHSLocationStatus::Picking;
                }
                else if (locationStatus == WHSLocationStatus::Undetermined)
                {
                    locationStatus = WHSLocationStatus::Storage;
                }
            }
            else if (workType == WHSWorkType::Put)
            {
                // If work type is put inventory has been added to the location.
                if (currentLocationAggregateStatus.LocationStatus   == WHSLocationStatus::Empty
                ||  currentLocationAggregateStatus.LocationStatus   == WHSLocationStatus::Undetermined)
                {
                    // Status is updated to storage if location was previously empty or status has not yet been assigned.
                    locationStatus = WHSLocationStatus::Storage;
                }

                // If location is not LP controlled use the oldest of current aging date and the origin one (from movement)
                if (!lpControlled)
                {
                    agingDate = this.calculateAgingDateForNonLPControlledLocation(agingDate);
                }
            }
    
            // If location is LP controlled, set aging date from oldest LP
            if (lpControlled)
            {                
                WHSAgingDate licensePlateAgingDate = WHSLicensePlate::agingDateByLocation(location);

                if (licensePlateAgingDate)
                {
                    agingDate = licensePlateAgingDate;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocation</Name>
				<Source><![CDATA[
    private boolean validateLocation()
    {
        boolean         ret = true;
    
        if (location.RecId == 0)
        {
            throw error("@WAX755");
        }
    
        if (!this.parmUpdateItemInLocation() && !this.parmUpdateLastActivityDate() && !this.parmUpdateLocationStatus())
        {
            ret = false;
        }

        // We do not track location status fields for receipt and final shipping locations.
        ret = ret && location.inventLocation().WMSLocationIdDefaultReceipt != location.wMSLocationId;
    
        ret = ret && locationProfile.LocType != WHSParameters::find().ShipFinalLocType;
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSWMSLocationWorkUpdater</c> class.
    /// </summary>
    /// <param name = "_inventLocationId">The warehouse the location being updated is in.</param>
    /// <param name = "_wmsLocationId">The location being updated.</param>
    /// <returns>An instance of the <c>WHSWMSLocationWorkUpdater</c> class.</returns>
    [Hookable(false)]
    internal static WHSLocationWorkUpdater newFromLocation(
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId)
    {
        if (_inventLocationId == '' || _wmsLocationId == '')
        {
            throw error("@WAX755");
        }
    
        WHSLocationWorkUpdater updater = new WHSLocationWorkUpdater();

        updater.location        = WMSLocation::find(_wmsLocationId, _inventLocationId);
        updater.locationProfile = WHSLocationProfile::find(updater.location.LocProfileId);

        return updater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationInfo</Name>
				<Source><![CDATA[
    private static void updateLocationInfo(
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId,
        WHSWorkType         _workType,
        boolean             _correction,
        WHSAgingDate        _originAgingDate = dateNull())
    {
        if (_wmsLocationId && _inventLocationId)
        {
            WHSLocationWorkUpdater   updater = WHSLocationWorkUpdater::newFromLocation(_inventLocationId, _wmsLocationId);
    
            if (updater.validateLocation())
            {
                updater.parmWorkType(_workType);
                updater.parmCorrection(_correction);
                updater.parmOriginAgingDate(_originAgingDate);

                updater.calculateLocationInfo();
    
                updater.saveLocationInfo();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationInfoFromAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that updates location status fields for warehouse adjustments.
    /// </summary>
    /// <param name = "_inventLocationId">The warehouse where inventory is being adjusted.</param>
    /// <param name = "_wmsLocationId">The location where inventory is being adjusted.</param>
    /// <param name = "_workType">The work type of the warehouse transaction.</param>
    [Hookable(false)]
    internal static void updateLocationInfoFromAdjustment(
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId,
        WHSWorkType         _workType)
    {
        WHSLocationWorkUpdater::updateLocationInfo(_inventLocationId, _wmsLocationId, _workType, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationInfoFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that updates location status fields for manual warehouse moves.
    /// </summary>
    /// <param name = "_fromInventLocationId">The from warehouse of the movement.</param>
    /// <param name = "_fromWmsLocationId">The from location of the movement.</param>
    /// <param name = "_toInventLocationId">The to warehouse of the movement.</param>
    /// <param name = "_toWmsLocationId">The to location of the movement.</param>
    /// <param name = "_fromLicensePlateId">The from license plate of the movement.</param>
    [Hookable(false)]
    internal static void updateLocationInfoFromMovement(
        InventLocationId    _fromInventLocationId,
        WMSLocationId       _fromWmsLocationId,
        InventLocationid    _toInventLocationId,
        WMSLocationId       _toWmsLocationId,
        WHSLicensePlateId   _fromLicensePlateId)
    {
        WHSAgingDate fromAgingDate = WHSLicensePlate::getAgingDate(_fromLicensePlateId, _fromWmsLocationId, _fromInventLocationId);

        WHSLocationWorkUpdater::updateLocationInfo(
            _fromInventLocationId,
            _fromWmsLocationId,
            WHSWorkType::Pick,
            true);

        WHSLocationWorkUpdater::updateLocationInfo(
            _toInventLocationId,
            _toWmsLocationId,
            WHSWorkType::Put,
            true,
            fromAgingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationInfoFromPickPutWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that updates location status fields for pick and put work execution.
    /// </summary>
    /// <param name = "_inventLocationId">The warehouse where work inventory is being moved.</param>
    /// <param name = "_wmsLocationId">The location where work inventory is being moved.</param>
    /// <param name = "_workType">The work type of the warehouse transaction.</param>
    /// <param name = "_targetLicensePlateId">The id of target license plate of the movement.</param>
    [Hookable(false)]
    internal static void updateLocationInfoFromPickPutWork(
        InventLocationId    _inventLocationId,
        WMSLocationId       _wmsLocationId,
        WHSWorkType         _workType,

        WHSLicensePlateId _targetLicensePlateId = '')
    {
        WHSAgingDate licensePlateAgingDate;
        if (_targetLicensePlateId)
        {
            licensePlateAgingDate = WHSLicensePlate::getAgingDate(_targetLicensePlateId, '', '');
        }

        WHSLocationWorkUpdater::updateLocationInfo(
            _inventLocationId,
            _wmsLocationId,
            _workType,
            false,
            licensePlateAgingDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>