<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_OwnershipChange</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Jour_OwnershipChange</c> class is used as a data carrier together with the <c>InventUpdate</c>
///    class when the inventory is updated with inventory ownership change journal lines.
/// </summary>
/// <remarks>
///    This class is used when creating or making changes to an inventory ownership change journal line.
///    An inventory ownership change journal does not have any financial impact, and it has the cost of zero.
///    The following methods will throw an exception.
///
///    <list type="bullet">
///    <item><description>Methods doing financial updates.</description></item>
///    <item><description>Methods doing cost amount updates.</description></item>
///    </list>
/// </remarks>
public class InventMov_Jour_OwnershipChange extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::InventOwnershipChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimatedMovement</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimatedMovement(InventMovement _movement_Orig)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueChanged</Name>
				<Source><![CDATA[
    protected CostAmount costValueChanged(InventTrans _inventTrans)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIssueCostValue</Name>
				<Source><![CDATA[
    public CostAmount financialIssueCostValue(
        InventTrans      _inventTrans,
        InventOnhand     _inventOnhand)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIssueCostValueSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount financialIssueCostValueSecCur_RU(
        InventTrans      _inventTrans,
        InventOnhand     _inventOnhand)
    {
        return this.financialIssueCostValue(_inventTrans, _inventOnhand);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryOwnerId</Name>
				<Source><![CDATA[
    protected InventOwnerId getInventoryOwnerId()
    {
        return inventJournalTrans.inventDim().InventOwnerId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostIndirectFinancial</Name>
				<Source><![CDATA[
    public InventCostIndirectFinancial inventCostIndirectFinancial()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCostIndirectPhysical</Name>
				<Source><![CDATA[
    public InventCostIndirectPhysical inventCostIndirectPhysical()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCostAmount</Name>
				<Source><![CDATA[
    public void journalSetCostAmount()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCostMarkup</Name>
				<Source><![CDATA[
    public void journalSetCostMarkup()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetCostPrice</Name>
				<Source><![CDATA[
    public void journalSetCostPrice()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetPriceUnit</Name>
				<Source><![CDATA[
    public void journalSetPriceUnit()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateCostTransactions</Name>
				<Source><![CDATA[
    public boolean mustCreateCostTransactions()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExcludeFromInventoryValue</Name>
				<Source><![CDATA[
    public boolean mustExcludeFromInventoryValue()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }

        return new InventMov_Jour_OwnershipChange(inventJournalTrans.orig(), inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the to inventory dimensions based on the from inventory dimensions.
    /// </summary>
    /// <param name = "_fromInventDimId">The ID of the from inventory dimensions.</param>
    /// <remarks>The to inventory dimension will be the same as the from inventory dimensions, but the owner will be defaulted to current legal entity.</remarks>
    private void setToInventDimId(InventDimId _fromInventDimId)
    {
        InventDim toInventDim = inventDim::find(_fromInventDimId);

        toInventDim.InventOwnerId_RU = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;

        inventJournalTrans.ToInventDimId = inventDim::findOrCreate(toInventDim).inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        super(_dimId);

        this.setToInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetInventDimFields</Name>
				<Source><![CDATA[
    public void journalSetInventDimFields(InventDim _inventDim)
    {
        super(_inventDim);

        InventDim newInventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(newInventDim.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreTransEstimated</Name>
				<Source><![CDATA[
    public void setPreTransEstimated(
        InventMovement        _this_Orig,
        InventUpd_Estimated   _updateNow)
    {
        _updateNow.parmPreEstimated(0);
        _updateNow.parmTransEstimated(this.remainPhysical());

        _updateNow.parmCWPreEstimated(0);
        _updateNow.parmCWTransEstimated(this.pdsCWRemainPhysical());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        if (inventJournalTrans.Qty >= 0)
        {
            return  -1;
        }
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postEstimated</Name>
				<Source><![CDATA[
    private void postEstimated(InventOwnershipChangeAvailableQuantityCalculator _availableQuantityCalculator)
    {
        if (InventTransOriginProdBomOwnershipChangeJournalTransLink::existByOwnershipChangeJournalLine(inventJournalTrans.RecId))
        {
            InventQty availableForChange = _availableQuantityCalculator.totalAvailableQuantity();

            if (inventJournalTrans.Qty > availableForChange && availableForChange > 0)
            {
                warning(strFmt("@Consignment:MessageWarning_OwnershipChangeJournalLineQuantityReduced", inventJournalTrans.Qty, availableForChange));
                inventJournalTrans.Qty = availableForChange;
                inventJournalTrans.update();
            }
        }

        var estimated = InventUpd_Estimated::newInventMovement(InventMovement::construct(inventJournalTrans));
        estimated.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPhysical</Name>
				<Source><![CDATA[
    private void postPhysical(LedgerVoucher _ledgerVoucher, InventOwnershipChangeAvailableQuantityCalculator _availableQuantityCalculator)
    {
        var physical = InventUpd_Physical::newCheckPostOwnerEnabledInventJournalTrans(InventMovement::construct(inventJournalTrans));

        boolean allowNegative = physical.parmAllowNegativePhysical();

        if (!allowNegative
            && InventTransOriginProdBomOwnershipChangeJournalTransLink::existByOwnershipChangeJournalLine(inventJournalTrans.RecId)
            && inventJournalTrans.Qty > _availableQuantityCalculator.onHandAvailableQuantity()
            && inventJournalTrans.Qty <= _availableQuantityCalculator.totalAvailableQuantity())
        {
            // Allow vendor owned stock to temporarily go negative, since we will change the production transactions
            // to reserve/pick legal-entity owned inventory later on in the posting process.
            allowNegative = true;
        }

        physical.parmAllowNegativePhysical(allowNegative);
        physical.updateNow(_ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFinancial</Name>
				<Source><![CDATA[
    private void postFinancial()
    {
        var inventUpd_FinancialLite = InventUpd_FinancialLite::newOwnerEnabledInventJournal(InventMovement::construct(inventJournalTrans));

        inventUpd_FinancialLite.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTransFinancialUpdate</Name>
				<Source><![CDATA[
    protected void journalPostTransFinancialUpdate(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _financial      = null,
        CostAmount              _costAmount     = 0)
    {
        var availableQuantityCalculator = InventOwnershipChangeAvailableQuantityCalculator::newFromJournalLine(inventJournalTrans);

        this.postEstimated(availableQuantityCalculator);
        this.postPhysical(_ledgerVoucher, availableQuantityCalculator);
        this.postFinancial();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemPriceInventoryDimensions</Name>
				<Source><![CDATA[
    protected inventDim getItemPriceInventoryDimensions()
    {
        return inventDim::find(inventJournalTrans.ToInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the inventory ownership change transaction is valid.
    /// </summary>
    /// <returns>false if there is an error in the inventory ownership change transaction; otherwise, true.</returns>
    public boolean journalCheckTrans()
    {
        boolean ok = super();

        if (ok
            && inventJournalTrans.Qty < 0
            && InventTransOriginProdBomOwnershipChangeJournalTransLink::existByOwnershipChangeJournalLine(inventJournalTrans.RecId))
        {
            ok = checkFailed(strFmt("@Consignment:Message_InventOwnershipChangeJournalLineNegativeQuantityNotAllowed", inventJournalTrans.LineNum));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>InventMov_Jour_OwnershipChange</c> class that is based on the specified record.
    /// </summary>
    /// <param name="_inventJournalTrans">The <c>InventJournalTrans</c> record for which the class is instantiated.</param>
    /// <returns>An instance of the <c>InventMov_Jour_OwnershipChange</c> class.</returns>
    public static InventMov_Jour_OwnershipChange newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_OwnershipChange(_inventJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>