<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountCreateItems</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventCountCreateItems extends InventCountCreate_Base implements BatchRetryable
{
    FormBuildStringControl  fbs_ControlInventLocation;
    FormStringControl       fb_ControlInventLocation;
    DialogField             dialogInventSiteId;
    DialogField             dialogInventOwnerId;

    boolean             dummy;

    InventLocationId    inventLocationId;
    InventSiteId        inventSiteId;
    InventOwnerId       inventOwnerId;

    #DEFINE.CurrentVersion(9)
    #LOCALMACRO.CurrentList
        inventLocationId,
        inventSiteId,
        inventOwnerId
    #ENDMACRO

    #LOCALMACRO.CurrentList8
        inventLocationId,
        inventSiteId
    #ENDMACRO

    #LOCALMACRO.CurrentList7
        inventLocationId
    #ENDMACRO

    #LOCALMACRO.CurrentList6
        inventLocationId,
        CountDate,
        journalId,
        dummy,
        CountGroupId,
        inventDimParm
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        dialogInventSiteId = dialog.addField(extendedTypeStr(InventSiteId), '', "@SYS117830");
        dialogInventSiteId.value(inventSiteId);
        dialogInventSiteId.fieldControl().mandatory(NoYes::Yes);

        FormBuildControl setupGroupControl = dialog.formBuildDesign().control(dialogGroupSetup.formBuildGroup().id());

        //the field is added like this to make it possible to control lookup and validation of the field in the dialog
        fbs_ControlInventLocation = setupGroupControl.addControl(FormControlType::String,'InventLocationId');
        fbs_ControlInventLocation.extendedDataType(extendedTypeNum(InventLocationId));
        fbs_ControlInventLocation.text(inventLocationId);
        fbs_ControlInventLocation.helpText("@FieldDescriptions_InventoryManagement:InventCountCreateItems_Warehouse");

        dialogInventOwnerId = dialog.addField(extendedTypeStr(InventOwnerId), '', "@FieldDescriptions_InventoryManagement:InventCountCreateItems_Owner");
        dialogInventOwnerId.value(inventOwnerId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        //lookup and validation for inventlocationId is overridden
        FormRun formRun = _dialog.dialogForm().formRun();
        formRun.controlMethodOverload(true);
        formRun.controlMethodOverloadObject(this);

        //do casting from formbuildstringcontrol to formstringcontrol
        fb_ControlInventLocation = formRun.design().control(fbs_ControlInventLocation.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        inventLocationId    = fb_ControlInventLocation.text();
        inventSiteId        = dialogInventSiteId.value();
        inventOwnerId       = dialogInventOwnerId.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected void initQueryRun()
    {
        queryRun = new QueryRun(queryStr(InventTableCount));
        InventInventoriedPolicy::addInventoriedRangeToInventTable(queryRun.query().dataSourceTable(tableNum(InventTable)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId_lookup</Name>
				<Source><![CDATA[
    public void inventLocationId_lookup()
    {
        InventLocation::lookupBySiteIdAllTypes(fb_ControlInventLocation,dialogInventSiteId.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId_validate</Name>
				<Source><![CDATA[
    public boolean inventLocationId_validate()
    {
        boolean ret = true;

        if (!fb_ControlInventLocation.text())
        {
            return true;
        }

        InventLocation inventLocation = InventLocation::find(fb_ControlInventLocation.text());

        if (!inventLocation.RecId)
        {
            return checkFailed(strFmt("@SYS5001",fb_ControlInventLocation.text()));
        }

        if (dialogInventSiteId.value() && inventLocation.InventSiteId != dialogInventSiteId.value())
        {
            return checkFailed(strFmt("@SYS104861",fb_ControlInventLocation.text(),dialogInventSiteId.value()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    private void initInventDim(InventDim _inventDim)
    {
        _inventDim.InventSiteId      = inventSiteId;
        _inventDim.InventLocationId  = inventLocationId;
        _inventDim.InventOwnerId_RU  = inventOwnerId;
        if (inventLocationId)
        {
            _inventDim.initFromInventLocation(InventLocation::find(_inventDim.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventDimParm</c> record.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record used in the initialization.
    /// </param>
    protected void initInventDimParm(InventDim _inventDim)
    {
        inventDimParm.initConsistentDimAllGrp();
        if (_inventDim.InventLocationId)
        {
            inventDimParm.InventLocationIdFlag  = NoYes::Yes;
        }
        inventDimParm.InventSiteIdFlag      = (_inventDim.InventSiteId ? NoYes::Yes : NoYes::No);
        inventDimParm.InventOwnerIdFlag_RU  = (_inventDim.InventOwnerId_RU ? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        InventSum                       inventSum;
        InventDim                       inventDim;
        InventDimCombination            inventDimCombination;
        InventDimParm                   inventDimParmLocal;
        InventDim                       inventDimLocal;

        setPrefix(InventCountCreateItems::description());

        this.initInventDim(inventDim);

        this.initInventDimParm(inventDim);

        inventDimParmLocal.data(inventDimParm.data());
        inventDimLocal.data(inventDim.data());
        var logger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = logger.activityContext(logger.activity('Create item counting jounral')))
        {
            try
            {
                ttsbegin;

                if (! this.validate())
                {
                    throw error("@SYS18447");
                }
                this.progressInit(InventCountCreateItems::description(), QueryRun::getQueryRowCount(queryRun.query(), maxInt()), #AviUpdate);

                this.initJournalTableData();

                this.addFilterToCountingGroup();

                while (queryRun.next())
                {
                    InventTable inventTable = queryRun.get(tableNum(InventTable)) as InventTable;

                    progress.setText(inventTable.ItemId, 1);
                    progress.incCount();
                    inventDimParm.data(inventDimParmLocal.data());
                    inventDim.data(inventDimLocal.data());

                    if (inventTable.inventItemType().mustInventBeControlled())
                    {
                        inventSum.ItemId                        = inventTable.ItemId;

                        inventDim.initFromInventLocation(inventDim.inventLocation());

                        if (inventTable.hasProductDimensions())
                        {
                            EcoResProductDimGroupSetup productDimGroupSetup = EcoResProductDimGroupSetup::newInventTable(inventTable);
                            InventDimParm inventDimParmActiveProductDimensions = productDimGroupSetup.inventDimParmActiveDimensions();

                            inventDim.clearProductDimensions();
                            inventDimParm.clearProductDimensions();
                            inventDimParm = InventDimParm::orParms(inventDimParm, inventDimParmActiveProductDimensions);

                            while select inventDimCombination
                            where inventDimCombination.ItemId == inventTable.ItemId
                            {
                                productDimGroupSetup.copyProductDimensions(inventDimCombination.inventDim(), inventDim);
                                inventDim = InventDim::findOrCreate(inventDim);

                                if (this.doCounting(inventSum, inventDim))
                                {
                                    this.createInventJournalTrans(inventSum, inventDim);
                                }

                                if (!this.allowMoreLines())
                                {
                                    break;
                                }
                            }
                        }
                        else if (this.doCounting(inventSum, inventDim))
                        {
                            this.createInventJournalTrans(inventSum, inventDim);
                        }
                        if (!this.allowMoreLines())
                        {
                            break;
                        }
                    }
                }

                inventDimParm.data(inventDimParmLocal.data());
                if (journalTableData.journalTable().JournalId == journalId && this.isInBatch())
                {
                    journalTableData.updateBlock(JournalBlockLevel::System,JournalBlockLevel::None,true);
                }
                else
                {
                    journalTableData.journalTable().update();
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                queryRun.reset();
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        queryRun.reset();
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version     = RunBase::getVersion(_packedClass);
        container       packedQuery;
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;
            case 8:
                [version,#CurrentList8, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;
            case 7:
                [version,#CurrentList7, base] = _packedClass;
                if (base)
                {
                    ret = super(base);
                }
                break;
            case 6:
                [version,#CurrentList6,packedQuery] = _packedClass;
                if (packedQuery)
                {
                   queryRun = new QueryRun(packedQuery);
                   InventInventoriedPolicy::addInventoriedRangeToInventTable(queryRun.query().dataSourceTable(tableNum(InventTable)));
                   ret = true;
                }
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        if (!inventSiteId)
        {
            ret = checkFailed("@SYS106937");
        }

        if (inventLocationId && !InventLocation::exist(inventLocationId))
        {
            ret = checkFailed(strFmt("@SYS5001",inventLocationId));
        }

        if (inventSiteId && inventLocationId)
        {
            if (InventLocation::find(inventLocationId).InventSiteId != inventSiteId)
            {
                ret = checkFailed(strFmt("@SYS104861",inventLocationId,inventSiteId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS27465";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JournalForm             journalForm         = JournalForm::fromArgs(_args);
        InventJournalId         journalId           = InventCountCreate_Base::argsJournalId(_args);
        InventCountCreateItems  inventCountCreate   = InventCountCreateItems::newCountCreateItems(journalId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        InventCountCreate_Base::mainHandling(inventCountCreate, journalId, journalForm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCountCreateItems</Name>
				<Source><![CDATA[
    public static InventCountCreateItems newCountCreateItems(
        InventJournalId _journalId,
        TransDate       _transDate)
    {
        InventCountCreateItems      inventCountCreateItems = new InventCountCreateItems();

        inventCountCreateItems.getLast();
        inventCountCreateItems.parmJournalId(_journalId);
        inventCountCreateItems.parmCountDate(_transDate);
        InventJournalTable inventJournalTable = InventJournalTable::find(_journalId);
        if (inventJournalTable.InventSiteId)
        {
            inventCountCreateItems.parmInventSiteId(inventJournalTable.InventSiteId);
            inventCountCreateItems.parmInventLocationId(inventJournalTable.InventLocationId);
        }

        return inventCountCreateItems;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>