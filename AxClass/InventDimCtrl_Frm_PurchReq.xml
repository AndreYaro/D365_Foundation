<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventDimCtrl_Frm_PurchReq extends InventDimCtrl_Frm_Editable
{
    RequisitionPurpose requisitionPurpose;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>forceField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory dimension field should be enabled or made mandatory forcibly.
    /// </summary>
    /// <param name="_fieldId">
    /// The field to be checked.
    /// </param>
    /// <returns>
    /// true if the field should be enabled or made mandatory; otherwise false.
    /// </returns>
    protected boolean forceField(FieldId _fieldId)
    {
        return ((requisitionPurpose == RequisitionPurpose::Replenishment)
            && (_fieldId == fieldNum(InventDim, InventLocationId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmEnabled</Name>
				<Source><![CDATA[
        public InventDimParm initDimParmEnabled()
    {
        InventDimParm ret;

        if (this.parmStorageDimensionGroup()
            || this.parmProductDimensionGroup()
            || this.parmTrackingDimensionGroup())
        {
            ret = super();
        }
        else
        {
            this.clearDimParmBuffer(dimParmEnabled);
            dimParmEnabled.initCovDimAllGrp();
            dimParmEnabled.initMandatoryDimAllGrp();
            dimParmEnabled.clearProductDimensions();
            ret = dimParmEnabled;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionActive</Name>
				<Source><![CDATA[
        public boolean isDimensionActive(FieldId _dimensionFieldId)
    {
        if (this.forceField(_dimensionFieldId))
        {
            return true;
        }

        return super(_dimensionFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableControl</Name>
				<Source><![CDATA[
        protected boolean mustEnableControl(
        InventDimFormControlInterface   _fc,
        InventDimParm                   _dimParmEnabled = dimParmEnabled)
    {
        if (this.forceField(inventDimControls.fieldId(_fc)))
        {
            return true;
        }
        return super(_fc, _dimParmEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEnableField</Name>
				<Source><![CDATA[
    protected NoYes mustEnableField(FieldId  _dimFieldId)
    {
        return _dimFieldId != fieldNum(InventDim, LicensePlateId) && super(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkControlAsMandatory</Name>
				<Source><![CDATA[
        protected boolean mustMarkControlAsMandatory(
        InventDimFormControlInterface   _fc,
        InventDimParm                   _dimParmEnabled = dimParmEnabled)
    {
        if (requisitionPurpose == RequisitionPurpose::Replenishment && inventDimControls.fieldId(_fc) == fieldNum(InventDim, InventLocationId))
        {
            return true;
        }
        return super(_fc, _dimParmEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkFieldAsMandatory</Name>
				<Source><![CDATA[
        protected NoYes mustMarkFieldAsMandatory(FieldId _dimFieldId)
    {
        if (!this.mustEnableField(_dimFieldId))
        {
            return NoYes::No;
        }

        InventDimGroupFieldSetup inventDimGroupFieldSetup = this.getFieldSetup(_dimFieldId);
        return
            this.forceField(_dimFieldId) ||
            inventDimGroupFieldSetup.isMandatory() || inventDimGroupFieldSetup.isProductDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequisitionPurpose</Name>
				<Source><![CDATA[
        public RequisitionPurpose parmRequisitionPurpose(RequisitionPurpose _requisitionPurpose = requisitionPurpose)
    {
        requisitionPurpose = _requisitionPurpose;
        return requisitionPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimCtrl_Frm_PurchReq construct()
    {
        return new InventDimCtrl_Frm_PurchReq();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that will be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    An instance of this class that will be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_PurchReq newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_PurchReq      inventDimCtrl   = InventDimCtrl_Frm_PurchReq::construct();
        InventDimAxFormAdapter          adapter         = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();

        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
