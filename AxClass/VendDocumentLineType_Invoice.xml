<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDocumentLineType_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendDocumentLineType_Invoice</c> class is used for validation and applying default values to invoice lines.
/// </summary>
public class VendDocumentLineType_Invoice extends VendDocumentLineType
{
    AgreementLine agreementLine;
    VendInvoiceInfoLine vendInvoiceInfoLine;
    private boolean shouldUpdateDefaultDimensionForInvoiceLine = false;
    private boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>agreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets local <c>AgreementLine</c> buffer and provides access to it.
    /// </summary>
    /// <returns>
    /// local <c>AgreementLine</c> buffer.
    /// </returns>
    public AgreementLine agreementLine()
    {
        if (!agreementLine)
        {
            agreementLine = AgreementLine::find(vendInvoiceInfoLine.AgreementLine_PSN);
        }

        return agreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventOwner_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks inventory owner for current line
    /// </summary>
    /// <param name="_inventDim">
    /// <c>InventDim</c> record with inventory owner specified
    /// </param>
    /// <returns>
    /// True if owner suitable, otherwise false
    /// </returns>
    public boolean checkInventOwner_RU(InventDim _inventDim = purchLine.inventDim())
    {
        InventDim inventDim = vendDocumentLineMap.inventDim();

        if (inventDim.InventOwnerId_RU &&
            inventDim.inventProfile_RU().InventOwnerIdCheckPurchOrder &&
            InventOwner_RU::findAccountNum(InventOwnerAccountType_RU::Vend,
                                           this.vendInvoiceInfoTable().OrderAccount,
                                           this.vendInvoiceInfoTable().vendInvoiceInfoTable_RU().AgreementHeaderExt_RU).InventOwnerId != inventDim.InventOwnerId_RU)
        {
            return checkFailed(strFmt("@GLS115705", _inventDim.InventOwnerId_RU, fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks inventory profile for current line
    /// </summary>
    /// <param name="_inventDim">
    /// <c>InventDim</c> record with inventory profile specified
    /// </param>
    /// <returns>
    /// True if profile suitable, otherwise false
    /// </returns>
    public boolean checkInventProfile_RU(InventDim _inventDim = vendDocumentLineMap.inventDim())
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;
        boolean ok = true;
        VendInvoiceInfoLine line = vendDocumentLineMap;
        InventProfileType_RU inventProfileType_RU = this.vendDocumentTableMap().VendDocumentTableMap::parmInventProfileType_RU();
        InventProfileId_RU inventProfileId_RU = this.vendDocumentTableMap().VendDocumentTableMap::parmInventProfileId_RU();

        if (! _inventDim.InventProfileId_RU)
        {
            return ok;
        }

        if (inventProfileType_RU && inventProfileType_RU != InventProfile_RU::find(_inventDim.InventProfileId_RU).InventProfileType)
        {
            ok = checkFailed(strFmt("@GLS113737", _inventDim.InventProfileId_RU, inventProfileType_RU));
        }
        if (inventProfileId_RU && inventProfileId_RU != _inventDim.InventProfileId_RU)
        {
            ok = checkFailed(strFmt("@GLS113734", _inventDim.InventProfileId_RU, inventProfileId_RU));
        }

        if (_inventDim.inventProfile_RU().LockCostAdjustment)
        {
            select firstonly RecId from markupTrans
                where markupTrans.TransTableId == line.TableId
                   && markupTrans.TransRecId == line.RecId
                   && ! markupTrans.Voucher
            exists join markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode
                   && markupTable.ModuleType == MarkupModuleType::Vend
                   && (markupTable.CustType == MarkupType::Item ||
                       markupTable.VendType == MarkupType::Item);

            if (markupTrans.RecId)
            {
                ok = checkFailed("@SYS16770");
            }
        }

        if (_inventDim.inventProfile_RU().LockMarkupCustVend)
        {
            select firstonly RecId from markupTrans
                where markupTrans.TransTableId == line.TableId
                   && markupTrans.TransRecId == line.RecId
                   && ! markupTrans.Voucher
            exists join markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode
                   && markupTable.ModuleType == MarkupModuleType::Vend
                   && (markupTable.CustType == MarkupType::CustVend ||
                       markupTable.VendType == MarkupType::CustVend);

            if (markupTrans.RecId)
            {
                ok = checkFailed("@GLS115688");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineQty</Name>
				<Source><![CDATA[
    protected boolean checkLineQty()
    {
        if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            // Always continue defaulting for non-PO lines, regardless of quantity
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks markup code for current line
    /// </summary>
    /// <returns>
    /// True if field filled correctly, otherwise false
    /// </returns>
    public boolean checkMarkupCode_RU()
    {
        MarkupTable markupTable;
        boolean ret = true;
        MarkupCodeVend_RU markupCode = vendDocumentLineMap.VendDocumentLineMap::parmMarkupCode_RU();

        if (vendDocumentLineMap.isMarkupCodeEnabled_RU())
        {
            if (markupCode)
            {
                markupTable = MarkupTable::find(MarkupModuleType::Vend, markupCode);

                if (markupTable.CustType != MarkupType::LedgerAccount)
                {
                    ret = checkFailed(strFmt("@SYS95333", fieldPName(MarkupTable, CustType), MarkupType::LedgerAccount));
                }
                if (markupTable.VendType != MarkupType::CustVend)
                {
                    ret = checkFailed(strFmt("@SYS95333", fieldPName(MarkupTable, VendType), MarkupType::CustVend));
                }
            }
        }
        else
        {
            if (markupCode)
            {
                ret = checkFailed(strFmt("@SYS119159", fieldPName(VendInvoiceInfoLine_W, MarkupCode_RU)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVATChargeSource_RU</Name>
				<Source><![CDATA[
    private boolean checkVATChargeSource_RU()
    {
        boolean ret = true;

        if (vendDocumentLineMap.TaxGroup &&
            vendDocumentLineMap.TaxItemGroup &&
            VendTable::find(this.vendInvoiceInfoTable().OrderAccount).vatTaxAgent_RU)
        {
            ret = Tax::checkVATChargeSource_RU(this.vendDocumentTableMap().VendDocumentTableMap::parmVATChargeSource_RU(), vendDocumentLineMap.TaxGroup, vendDocumentLineMap.TaxItemGroup);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWithholdingTax_MX</Name>
				<Source><![CDATA[
    private boolean checkWithholdingTax_MX()
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

        return CFDIWithholdingType_MX::checkWithholdingType(vendInvoiceInfoLine_W.WithholdingTypeCode_MX, vendInvoiceInfoLine.TaxGroup, vendInvoiceInfoLine.TaxItemGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAccountingDistributionTemplate</Name>
				<Source><![CDATA[
    protected void defaultAccountingDistributionTemplate()
    {
        RefRecId accountingDistributionTemplate;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, AccountingDistributionTemplate)))
        {
            if (!this.isTableToLine() || this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, AccountingDistributionTemplate)))
            {
                accountingDistributionTemplate = this.determineDefaultDistributionTemplate();
                vendInvoiceInfoLine.AccountingDistributionTemplate = accountingDistributionTemplate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultedVendInvLineAdditionalFields</Name>
				<Source><![CDATA[
    delegate void defaultedVendInvLineAdditionalFields(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAdditionalFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default fields that are specific to invoice.
    /// </summary>
    protected void defaultAdditionalFields()
    {
        #ISOCountryRegionCodes
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        super();

        this.defaultPurchUnit();

        this.defaultDefaultDimension();
        this.defaultAccountingDistributionTemplate();

        this.defaultDescription();

        this.defaultAddressRefRecId();
        this.defaultAddressRefTableId();

        this.defaultTransactionCode();
        this.defaultTransport();
        this.defaultPort();
        this.defaultStatProcId();
        this.defaultCountyOrigDest();
        this.defaultIntrastatCommodity();
        this.defaultOrigCountryRegionId();
        this.defaultOrigStateId();

        if (isFinTagConfigurationSetForCurrent && PurchaseOrderFinTagFeature::isEnabled())
        {
            this.defaultFinTag();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS]))
        {
            if (this.isTax1099Vendor())
            {
                this.defaultTax1099Fields();
                this.defaultTax1099Amount();
                this.defaultTax1099State();
                this.defaultTax1099StateAmount();

                if (isConfigurationkeyEnabled(configurationKeyNum(Tax1099S)) || isConfigurationkeyEnabled(configurationKeyNum(Tax1099G)))
                {
                    this.defaultTax1099BoxDetails();
                }
            }
        }

        if (TaxWithholdingGlobalFeature::isExtendedWHTSupportedInCountryRegionOrParamEnabled()
            || BrazilParameters::isEnabled())
        {
            this.defaultTaxItemGroup();
            this.defaultTaxWithholdGroup();
            this.defaultTaxWithholdItemGroupHeadingId();
        }

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
           this.defaultPurchCommitmentLine_PSN();
        }

        if (PublicSectorUtils::isBudgetReservationEnabled())
        {
            this.defaultBudgetReservationLine_PSN();
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            this.defaultForeignTrade_RU();
            this.defaultMarkupCode_RU();
            this.defaultAlcoholLicenseSeriesNum_RU();
        }
        // </GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.defaultIntrastatFulfillmentDate_HU();
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.defaultFreightNature_BR();
        }
        // </GBR>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            this.defaultDiotOperationType();
            this.defaultWithholdingTypeCode_MX();
        }

        this.defaultedVendInvLineAdditionalFields(vendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set default parameters of alcoholLicenseSeriesNum.
    /// </summary>
    protected void defaultAlcoholLicenseSeriesNum_RU()
    {
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;

        if (this.isTableToLine())
        {
            return;
        }

        vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

        if (!vendInvoiceInfoLine_W.isFieldSet(fieldNum(VendInvoiceInfoLine_W, AlcoholLicenseSeriesNum_RU)))
        {
            vendInvoiceInfoLine_W.AlcoholLicenseSeriesNum_RU = this.determineAlcoholLicenseSeriesNum_RU();
            vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCountyOrigDest</Name>
				<Source><![CDATA[
    protected void defaultCountyOrigDest()
    {
        AddressCountyOrigDest countyOrigDest;

        if (this.isTableToLine())
        {
            return;
        }

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, CountyOrigDest)))
        {
            countyOrigDest = this.determineDefaultCountyOrigDest();
            vendInvoiceInfoLine.CountyOrigDest = countyOrigDest;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIntrastatCommodity</Name>
				<Source><![CDATA[
    protected void defaultIntrastatCommodity()
    {
        vendInvoiceInfoLine.IntrastatCommodity = this.determineIntrastatCommodity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrigCountryRegionId</Name>
				<Source><![CDATA[
    protected void defaultOrigCountryRegionId()
    {
        vendInvoiceInfoLine.OrigCountryRegionId = this.determineOrigCountryRegionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOrigStateId</Name>
				<Source><![CDATA[
    protected void defaultOrigStateId()
    {
        vendInvoiceInfoLine.OrigStateId = this.determineOrigStateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDefaultDimension</Name>
				<Source><![CDATA[
    protected void defaultDefaultDimension()
    {
        DimensionDefault defaultDimension;

        if (ledgerJournalOperation == LedgerJournalOperation::Create || this.parmIsModifiedField() || vendInvoiceInfoLine.DefaultDimension == 0)
        {
            if (!this.isTableToLine() ||
                this.isHeaderFieldModified(fieldNum(vendInvoiceInfoTable, DefaultDimension)))
            {
                defaultDimension = this.determineDefaultDefaultDimension();
                vendInvoiceInfoLine.DefaultDimension = defaultDimension;
            }
        }
        else if (this.isTableToLine() &&
                this.isHeaderFieldModified(fieldNum(vendInvoiceInfoTable, DefaultDimension)))
        {
            shouldUpdateDefaultDimensionForInvoiceLine = true;
            defaultDimension = this.determineDefaultDefaultDimension();
            vendInvoiceInfoLine.DefaultDimension = defaultDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryLocation</Name>
				<Source><![CDATA[
    protected void defaultDeliveryLocation()
    {
        if (!this.isTableToLine())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeliveryName</Name>
				<Source><![CDATA[
    protected void defaultDeliveryName()
    {
        if (!this.isTableToLine())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAddressRefRecId</Name>
				<Source><![CDATA[
    protected void defaultAddressRefRecId()
    {
        if (!this.isTableToLine())
        {
            if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, AddressRefRecId)))
            {
                vendInvoiceInfoLine.AddressRefRecId = this.determineDefaultAddressRefRecId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAddressRefTableId</Name>
				<Source><![CDATA[
    protected void defaultAddressRefTableId()
    {
        if (!this.isTableToLine())
        {
            if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, AddressRefTableId)))
            {
                vendInvoiceInfoLine.AddressRefTableId = this.determineDefaultAddressRefTableId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultForeignTrade_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set default parameters of foreign trade.
    /// </summary>
    protected void defaultForeignTrade_RU()
    {
        PurchLine_W purchLine_W = this.purchLine().purchLine_W();

        vendDocumentLineMap.VendDocumentLineMap::parmCountryRegionName_RU(purchLine_W.CountryRegionName_RU);
        vendDocumentLineMap.VendDocumentLineMap::parmInvoiceGTDId_RU(purchLine_W.InvoiceGTDId_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIntrastatFulfillmentDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default value of Intrastat fulfillment date on <c>VendInvoiceInfoLine_W</c>.
    /// </summary>
    protected void defaultIntrastatFulfillmentDate_HU()
    {
        IntrastatFulfillmentDate_HU fulfillmentDate;

        if (this.isTableToLine())
        {
            return;
        }

        fulfillmentDate = this.determineDefaultFulfillmentDate_HU();
        vendDocumentLineMap.VendDocumentLineMap::parmIntrastatFulfillmentDate_HU(fulfillmentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDimId</Name>
				<Source><![CDATA[
    protected void defaultInventDimId()
    {
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldNum(VendDocumentLineMap, InventDimId), vendDocumentLineMap.TableId)))
        {
            InventDim inventDim;

            if (VendInvoicePrepaymentLineSetAllBlankInventDimFlihgt::instance().isEnabled() &&
                (vendInvoiceInfoLine.isAdvance() || vendInvoiceInfoLine.isAdvanceApplication()))
            {
                vendInvoiceInfoLine.setInventDimId(InventDim::findOrCreateBlank().InventDimId);
            }
            else if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
            {
                vendInvoiceInfoLine.setInventDimId(this.agreementLine().InventDimId, this.agreementLine().inventDim());
            }
            else if (vendDocumentLineMap.isNonPO())
            {
                if (!this.isTableToLine() ||
                    this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, InventLocationId)) ||
                    this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, InventSiteId)))
                {
                    if (VendInvoiceCleanupDimensionOnItemChangeFlight::instance().isEnabled() 
                        && vendInvoiceInfoLine.ItemId != '' 
                        && this.parmIsItemModified())
                    {
                        // if flight is enabled and the item is changed to another one, clear the inventDim at this point and also reset the DefaultDimension on the invoice line.
                        vendInvoiceInfoLine.DefaultDimension = 0;
                        vendInvoiceInfoLine.InventDimId = '';
                    }
                    else 
                    {
                        inventDim = vendDocumentLineMap.inventDim();
                    }

                    if (this.vendInvoiceInfoTable().isNonPO())
                    {
                        if (this.vendInvoiceInfoTable().InventLocationId != '' || this.vendInvoiceInfoTable().InventSiteId != '')
                        {
                            inventDim.InventLocationId = this.vendInvoiceInfoTable().InventLocationId;
                            inventDim.InventSiteId = this.vendInvoiceInfoTable().InventSiteId;
                        }
                        // <GEERU>
                        #ISOCountryRegionCodes
                        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
                        if (countryRegion_RU)
                        {
                            VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU = this.vendInvoiceInfoTable().vendInvoiceInfoTable_RU();
                            if (vendInvoiceInfoTable_RU.InventProfileId_RU)
                            {
                                inventDim.InventProfileId_RU = vendInvoiceInfoTable_RU.InventProfileId_RU;
                            }
                        }
                        // </GEERU>
                    }
                    else
                    {
                        PurchTable localPurchTable = this.vendInvoiceInfoTable().purchTable();
                        if (localPurchTable)
                        {
                            inventDim.InventLocationId = localPurchTable.InventLocationId;
                            inventDim.InventSiteId = localPurchTable.InventSiteId;
                        }
                    }

                    vendInvoiceInfoLine.setInventDimIdFromInventDim(inventDim);

                    if (vendInvoiceInfoLine.ItemId != '')
                    {
                        inventDim.initFromInventTable(vendDocumentLineMap.inventTable(), InventItemOrderSetupType::Purch, inventDim);

                        inventDim = InventDim::findOrCreate(inventDim);
                        vendInvoiceInfoLine.setInventDimId(inventDim.InventDimId, inventDim);

                        vendInvoiceInfoLine.setAddressFromInventDim(inventDim);
                    }
                }
            }
            else if (!VendInvoicePrepaymentLineSetAllBlankInventDimFlihgt::instance().isEnabled() &&
                     vendInvoiceInfoLine.isAdvance())
            {
                vendInvoiceInfoLine.setInventDimId(InventDim::findOrCreateBlank().InventDimId);
            }
            else
            {
                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMarkupCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set default parameters of markupCode.
    /// </summary>
    protected void defaultMarkupCode_RU()
    {
        if (vendInvoiceInfoLine.isMarkupCodeEnabled_RU())
        {
            if (this.purchLine())
            {
                vendDocumentLineMap.VendDocumentLineMap::parmMarkupCode_RU(this.purchLine().purchLine_W().MarkupCode_RU);
            }
            else if (vendInvoiceInfoLine.inventTable().isMarkupCodeEnabled_RU())
            {
                vendDocumentLineMap.VendDocumentLineMap::parmMarkupCode_RU(vendInvoiceInfoLine.inventTable().MarkupCode_RU);
            }
        }
        else
        {
            vendDocumentLineMap.VendDocumentLineMap::parmMarkupCode_RU('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDiotOperationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default vendor Operation type
    /// </summary>
    protected void defaultDiotOperationType()
    {
        PurchLine purchLineLocal = this.purchLine();
        VendInvoiceInfoLine_W vendInvoiceInfoLine_W;
        VendorOperationType_MX diotOperationType;

        if (purchLineLocal != null)
        {
            diotOperationType = purchLine.OperationType_MX;
        }
        else
        {
            diotOperationType = VendTable::find(vendDocumentLineMap.OrderAccount).OperationType_MX;
        }

        vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();
        vendInvoiceInfoLine_W.DiotOperationType = diotOperationType;

        vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFinTag</Name>
				<Source><![CDATA[
    internal void defaultFinTag()
    {
        FinTagRecId finTag;
        if (!vendDocumentLineMap.isFieldSet(this.fieldNum(fieldnum(VendDocumentLineMap, FinTag), vendDocumentLineMap.TableId)))
        {
            finTag = this.determineDefaultFinTag();
            vendDocumentLineMap.FinTag = finTag;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPort</Name>
				<Source><![CDATA[
    protected void defaultPort()
    {
        IntrastatPortId port;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Port)))
        {
            if (!this.isTableToLine() || this.isHeaderFieldModified(fieldNum(vendInvoiceInfoTable, Port)))
            {
                port = this.determineDefaultPort();
                vendInvoiceInfoLine.Port = port;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPriceUnit</Name>
				<Source><![CDATA[
    protected void defaultPriceUnit()
    {
        if (!this.isTableToLine())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultProcurementCategory</Name>
				<Source><![CDATA[
    protected void defaultProcurementCategory()
    {
        PurchCategory procurementCategory;

        if (this.isTableToLine())
        {
            return;
        }

        // If the Item was passed in, force the category to be the default
        if (vendDocumentLineMap.ItemId)
        {
            procurementCategory = this.determineDefaultProcurementCategory();

            vendInvoiceInfoLine.ProcurementCategory = procurementCategory;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default method to set <c>PurchCommitmentLine_PSN</c> field value.
    /// </summary>
    protected void defaultPurchCommitmentLine_PSN()
    {
        RefRecId purchCommitmentLine_PSN;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, PurchCommitmentLine_PSN)))
        {
            purchCommitmentLine_PSN = this.determineDefaultPurchCommitmentLine_PSN();
            vendInvoiceInfoLine.PurchCommitmentLine_PSN = purchCommitmentLine_PSN;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchPrice</Name>
				<Source><![CDATA[
    protected void defaultPurchPrice()
    {
        if (vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, PurchPrice)))
        {
            return;
        }

        if (this.isTableToLine())
        {
            return;
        }

        this.defaultPurchUnit();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            if (this.agreementLine().AgreementLineType == CommitmentType::ProductQuantity)
            {
                vendInvoiceInfoLine.PurchPrice = AgreementLineQuantityCommitment::find(this.agreementLine().RecId).PricePerUnit;
                vendInvoiceInfoLine.PriceUnit = AgreementLineQuantityCommitment::find(this.agreementLine().RecId).PriceUnit;
            }
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                vendInvoiceInfoLine.setPriceAgreement(vendInvoiceInfoLine.inventDim());
            }
            else
            {
                vendInvoiceInfoLine.PurchPrice = 0.0;
                vendInvoiceInfoLine.PurchMarkup = 0.0;
                vendInvoiceInfoLine.PriceUnit = 1.0;
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchQtys</Name>
				<Source><![CDATA[
    protected void defaultPurchQtys(PurchQty _receiveNow = naReal())
    {
        if (this.isTableToLine())
        {
            return;
        }

        super(_receiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPurchUnit</Name>
				<Source><![CDATA[
    protected void defaultPurchUnit()
    {
        PurchUnit purchUnit;

        if (this.isTableToLine())
        {
            return;
        }

        if (ledgerJournalOperation == LedgerJournalOperation::Create || this.parmIsModifiedField())
        {
            if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, PurchUnit)))
            {
                purchUnit = this.determineDefaultPurchUnit();
                vendInvoiceInfoLine.PurchUnit = purchUnit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultStatProcId</Name>
				<Source><![CDATA[
    protected void defaultStatProcId()
    {
        IntrastatProcId statProcId;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, StatProcId)))
        {
            if (!this.isTableToLine() || this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, StatProcId)))
            {
                statProcId = this.determineDefaultStatProcId();
                vendInvoiceInfoLine.StatProcId = statProcId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTax1099Amount</Name>
				<Source><![CDATA[
    protected void defaultTax1099Amount()
    {
        Tax1099Amount tax1099Amount;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.isTableToLine())
        {
            return;
        }

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Tax1099Amount)))
        {
            tax1099Amount = this.determineDefaultTax1099Amount();

            if (abs(tax1099Amount) <= abs(vendInvoiceInfoLine.LineAmount))
            {
                vendInvoiceInfoLine.Tax1099Amount = tax1099Amount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTax1099BoxDetails</Name>
				<Source><![CDATA[
    private void defaultTax1099BoxDetails()
    {
        Tax1099RecId tax1099RecId;

        if (this.isTableToLine())
        {
            return;
        }

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Tax1099BoxDetail)))
        {
            tax1099RecId = this.determineDefaultTax1099BoxDetails();
            vendInvoiceInfoLine.Tax1099BoxDetail = tax1099RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTax1099Fields</Name>
				<Source><![CDATA[
    protected void defaultTax1099Fields()
    {
        Tax1099FieldsRecId tax1099Fields;

        if (this.isTableToLine())
        {
            return;
        }

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Tax1099Fields)))
        {
            tax1099Fields = this.determineDefaultTax1099Fields();
            vendInvoiceInfoLine.Tax1099Fields = tax1099Fields;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTax1099State</Name>
				<Source><![CDATA[
    protected void defaultTax1099State()
    {
        Tax1099State tax1099State;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.isTableToLine())
        {
            return;
        }

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Tax1099State)))
        {
            tax1099State = this.determineDefaultTax1099State();
            vendInvoiceInfoLine.Tax1099State = tax1099State;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTax1099StateAmount</Name>
				<Source><![CDATA[
    protected void defaultTax1099StateAmount()
    {
        Tax1099StateAmount tax1099StateAmount;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && this.isTableToLine())
        {
            return;
        }

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Tax1099StateAmount)))
        {
            tax1099StateAmount = this.determineDefaultTax1099StateAmount();

            if (abs(tax1099StateAmount) <= abs(vendInvoiceInfoLine.LineAmount))
            {
                vendInvoiceInfoLine.Tax1099StateAmount = tax1099StateAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxGroup()
    {
        if (!this.isTableToLine() || this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, TaxGroup)))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxItemGroup()
    {
        if (!this.isTableToLine())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxWithholdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default <c>TaxWithholdGroup</c> value for the line.
    /// </summary>
    /// <returns>
    /// The default <c>TaxWithholdGroup</c> value.
    /// </returns>
    protected TaxWithholdGroup defaultTaxWithholdGroup()
    {
        TaxWithholdGroup taxWithholdGroup;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, TaxWithholdGroup)))
        {
            this.defaultOrderAccount();

            taxWithholdGroup = this.determineDefaultTaxWithholdGroup();
            vendInvoiceInfoLine.TaxWithholdGroup = taxWithholdGroup;
        }

        return taxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxWithholdItemGroupHeadingId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default <c>TaxWithholdItemGroupId_TH</c> value for the line.
    /// </summary>
    /// <returns>
    /// The default <c>TaxWithholdItemGroupId_TH</c> value.
    /// </returns>
    protected TaxWithholdItemGroupId_TH defaultTaxWithholdItemGroupHeadingId()
    {
        TaxWithholdItemGroupId_TH taxWithholdItemGroupHeadingId;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, TaxWithholdItemGroupHeadingId)))
        {
            taxWithholdItemGroupHeadingId = this.determineTaxWithholdItemGroupHeadingId();
            vendInvoiceInfoLine.TaxWithholdItemGroupHeadingId = taxWithholdItemGroupHeadingId;
        }

        return taxWithholdItemGroupHeadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransactionCode</Name>
				<Source><![CDATA[
    protected void defaultTransactionCode()
    {
        IntrastatTransactionCodeId transactionCode;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, TransactionCode)))
        {
            if (!this.isTableToLine() || this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, TransactionCode)))
            {
                transactionCode = this.determineDefaultTransactionCode();
                vendInvoiceInfoLine.TransactionCode = transactionCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTransport</Name>
				<Source><![CDATA[
    protected void defaultTransport()
    {
        IntrastatTransport transport;

        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, Transport)))
        {
            if (!this.isTableToLine() || this.isHeaderFieldModified(fieldNum(VendInvoiceInfoTable, Transport)))
            {
                transport = this.determineDefaultTransport();
                vendInvoiceInfoLine.Transport = transport;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWithholdingTypeCode_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets default value of Withholding type code on <c>VendInvoiceInfoLine_W</c>.
    /// </summary>
    protected void defaultWithholdingTypeCode_MX()
    {
        if (this.isTableToLine())
        {
            return;
        }

        VendInvoiceInfoLine_W vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

        if (this.purchLine())
        {
            vendInvoiceInfoLine_W.WithholdingTypeCode_MX = this.purchLine().purchLine_W().WithholdingTypeCode_MX;
        }
        else
        {
            vendInvoiceInfoLine_W.WithholdingTypeCode_MX = VendTable::find(vendInvoiceInfoLine.InvoiceAccount).WithholdingTypeCode_MX;
        }

        vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAlcoholLicenseSeriesNum_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines what the default <c>AlcoholLicenseSeriesNum_RU</c> value for the line should be.
    /// </summary>
    /// <returns>
    ///    The default <c>AlcoholLicenseSeriesNum_RU</c> value.
    /// </returns>
    protected AlcoholLicenseSeriesNum_RU determineAlcoholLicenseSeriesNum_RU()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (!vendDocumentLineMap.isNonPO() && vendDocumentLineMap.inventTable().AlcoholProductionTypeId_RU)
        {
            vendInvoiceInfoTable = vendInvoiceInfoLine.vendInvoiceInfoTable();

            if (!vendInvoiceInfoTable)
            {
                vendInvoiceInfoTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, TransDate), vendInvoiceInfoTable.TableId), this.purchTable());
                vendInvoiceInfoTable.defaultField(VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, DocumentDate), vendInvoiceInfoTable.TableId), this.purchTable());
            }

            vendInvoiceInfoLine.setAlcoholLicenseSeriesNum_RU(vendInvoiceInfoTable.documentDate());
            return vendInvoiceInfoLine.vendInvoiceInfoLine_W().AlcoholLicenseSeriesNum_RU;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCFOPTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default reference for CFOP table
    /// </summary>
    /// <returns>
    /// Returns the <c>RecId</c> of <c>CFOPTable_BR</c> table
    /// </returns>
    /// <remarks>
    /// Default value always comes from <c>PurchLineTable</c>
    /// </remarks>
    protected RefRecId determineDefaultCFOPTable_BR()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            vendInvoiceInfoLine.setCFOP_BR();
            return vendInvoiceInfoLine.vendInvoiceInfoLine_W().CFOPTable_BR;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCountyOrigDest</Name>
				<Source><![CDATA[
    protected AddressCountyOrigDest determineDefaultCountyOrigDest()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return IntrastatParameters::find().CountyOrigDest;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            return this.vendInvoiceInfoTable().CountyOrigDest;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIntrastatCommodity</Name>
				<Source><![CDATA[
    protected IntrastatCommodityId determineIntrastatCommodity()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return vendInvoiceInfoLine.inventTable().IntrastatCommodity;
            }
            else
            {
                return 0;
            }
        }

        return this.purchLine().IntrastatCommodity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOrigCountryRegionId</Name>
				<Source><![CDATA[
    protected ItemOrigCountryRegionId determineOrigCountryRegionId()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return vendInvoiceInfoLine.inventTable().OrigCountryRegionId;
            }
            else
            {
                return '';
            }
        }

        return this.purchLine().OrigCountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineOrigStateId</Name>
				<Source><![CDATA[
    protected ItemOrigStateId determineOrigStateId()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return vendInvoiceInfoLine.inventTable().OrigStateId;
            }
            else
            {
                return '';
            }
        }

        return this.purchLine().OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected VendCurrencyCode determineDefaultCurrencyCode()
    {
        PurchAgreementHeader purchAgreementHeader = this.agreementLine().purchAgreementHeader();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice() && purchAgreementHeader.Currency)
        {
            return purchAgreementHeader.Currency;
        }
        else if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().CurrencyCode;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault determineDefaultDefaultDimension()
    {
        DimensionDefault defaultDimension;
        
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) 
            && vendInvoiceInfoLine.isDirectInvoice()
            && !this.isTableToLine())
        {
            // This is a direct invoice which means that it is initialized from a Purchase Agreement so use the DefaultDimension from the AgreementLine
            defaultDimension = AgreementLine::find(vendInvoiceInfoLine.AgreementLine_PSN).DefaultDimension;
            
            if (!defaultDimension)
            {
                defaultDimension = this.vendInvoiceInfoTable().defaultDimension();
            }

            defaultDimension = vendInvoiceInfoLine.copyDimension(defaultDimension);
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (this.vendInvoiceInfoTable().isNonPO())
            {
                if (shouldUpdateDefaultDimensionForInvoiceLine)
                {
                    defaultDimension = vendInvoiceInfoLine.copyDimension(this.vendInvoiceInfoTable().DefaultDimension);
                }
                else
                {
                    defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(vendInvoiceInfoLine.DefaultDimension, this.vendInvoiceInfoTable().DefaultDimension);
                }
            }
            else
            {
                // If the invoice has a PO, copy its default dimension
                defaultDimension = vendInvoiceInfoLine.copyDimension(this.vendInvoiceInfoTable().purchTable().DefaultDimension);
            }

            if (vendInvoiceInfoLine.ItemId != '')
            {
                defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(defaultDimension, vendInvoiceInfoLine.inventTable().DefaultDimension);
            }
        }
        else if (vendInvoiceInfoLine.isAdvance())
        {
            //  Copy the prepay invoice's default dimension
            defaultDimension = vendInvoiceInfoLine.copyDimension(this.vendInvoiceInfoTable().DefaultDimension);
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryLocation</Name>
				<Source><![CDATA[
    protected LogisticsLocationRecId determineDefaultDeliveryLocation()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            LogisticsLocationRecId deliveryLocation = this.agreementLine().purchAgreementHeader().agreementHeaderDefault().DeliveryPostalAddress;
            
            return LogisticsPostalAddress::locationRecIdFromAddressRecId(deliveryLocation);
        }

        if (vendDocumentLineMap.isNonPO())
        {
            return LogisticsPostalAddress::locationRecIdFromAddressRecId(this.vendInvoiceInfoTable().DeliveryPostalAddress);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDeliveryName</Name>
				<Source><![CDATA[
    protected VendName determineDefaultDeliveryName()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return this.agreementLine().purchAgreementHeader().agreementHeaderDefault().DeliveryName;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            return this.vendInvoiceInfoTable().DeliveryName;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAddressRefRecId</Name>
				<Source><![CDATA[
    protected AddressRefRecId determineDefaultAddressRefRecId()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            return this.vendInvoiceInfoTable().AddressRefRecId;
        }
        else
        {
            return this.purchTable().AddressRefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultAddressRefTableId</Name>
				<Source><![CDATA[
    protected AddressRefTableId determineDefaultAddressRefTableId()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            return this.vendInvoiceInfoTable().AddressRefTableId;
        }
        else
        {
            return this.purchTable().AddressRefTableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDescription</Name>
				<Source><![CDATA[
    protected InvoiceLineDescription determineDefaultDescription()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return PurchParameters::nameAndOrDescription(InventTable::find(this.agreementLine().ItemId),
                                                        VendTable::find(vendInvoiceInfoLine.InvoiceAccount).languageId(),
                                                        vendInvoiceInfoLine.InventDimId,
                                                        EcoResCategory::find(vendInvoiceInfoLine.ProcurementCategory));
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            return PurchParameters::nameAndOrDescription(vendDocumentLineMap.inventTable(),
                                                         this.vendInvoiceInfoTable().vendTable_InvoiceAccount().languageId(),
                                                         vendInvoiceInfoLine.InventDimId,
                                                         EcoResCategory::find(vendInvoiceInfoLine.ProcurementCategory));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultDistributionTemplate</Name>
				<Source><![CDATA[
    protected RefRecId determineDefaultDistributionTemplate()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return 0;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (this.vendInvoiceInfoTable().isNonPO())
            {
                //  Copy the non-PO invoice's distribution template
                return this.vendInvoiceInfoTable().AccountingDistributionTemplate;
            }

            // If the invoice has a PO, return it's distribution template
            return this.vendInvoiceInfoTable().purchTable().AccountingDistributionTemplate;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFreightNature_BR</Name>
				<Source><![CDATA[
    protected void defaultFreightNature_BR()
    {
        vendDocumentLineMap.VendDocumentLineMap::parmFreightNature_BR(FreightNature_BR::Blank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFinTag</Name>
				<Source><![CDATA[
    internal FinTagRecId determineDefaultFinTag()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            return vendInvoiceInfoLine.FinTag;
        }
        else
        {
            return this.purchLine().FinTag;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultFulfillmentDate_HU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value of Intrastat fulfillment date on <c>VendInvoiceInfoLine_W</c>.
    /// </summary>
    /// <returns>
    /// The default value of Intrastat fulfillment date.
    /// </returns>
    protected IntrastatFulfillmentDate_HU determineDefaultFulfillmentDate_HU()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (vendDocumentLineMap.isNonPO())
        {
            vendInvoiceInfoTable = this.vendInvoiceInfoTable();

            if (vendInvoiceInfoTable.isNonPO())
            {
                return vendInvoiceInfoTable.vendInvoiceInfoTable_W().IntrastatFulfillmentDate_HU;
            }

            return vendInvoiceInfoTable.purchTable().IntrastatFulfillmentDate_HU;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultInvoiceAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultInvoiceAccount()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return this.agreementLine().purchAgreementHeader().VendAccount;
        }
        else if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().InvoiceAccount;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLineDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default method to set <c>LineDisc</c> field value.
    /// </summary>
    /// <returns>
    /// The <c>LineDisc</c> field value.
    /// </returns>
    protected PurchLineDisc determineDefaultLineDisc()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            if (this.agreementLine().AgreementLineType == CommitmentType::ProductQuantity)
            {
                return AgreementLineQuantityCommitment::find(this.agreementLine().RecId).LineDiscountAmount;
            }
            else
            {
                return 0.0;
            }
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLineNum</Name>
				<Source><![CDATA[
    protected TradeLineNumber determineDefaultLineNum()
    {
        if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            return 0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultLinePercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default method to set <c>LinePercent</c> field value.
    /// </summary>
    /// <returns>
    /// The <c>LinePercent</c> field value.
    /// </returns>
    protected PurchLinePercent determineDefaultLinePercent()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return this.agreementLine().LineDiscountPercent;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            return vendInvoiceInfoLine.LinePercent;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrderAccount</Name>
				<Source><![CDATA[
    protected VendAccount determineDefaultOrderAccount()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return this.agreementLine().purchAgreementHeader().VendAccount;
        }
        else if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().OrderAccount;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOrigPurchId</Name>
				<Source><![CDATA[
    protected PurchIdOrig determineDefaultOrigPurchId()
    {
        if (this.isNonPO())
        {
            return '';
        }

        if (vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().PurchId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPort</Name>
				<Source><![CDATA[
    protected IntrastatPortId determineDefaultPort()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return IntrastatParameters::find().PortParm;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            vendInvoiceInfoTable = this.vendInvoiceInfoTable();

            if (vendInvoiceInfoTable.isNonPO())
            {
                return vendInvoiceInfoTable.Port;
            }

            return vendInvoiceInfoTable.purchTable().Port;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPriceUnit</Name>
				<Source><![CDATA[
    protected PriceUnit determineDefaultPriceUnit()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            if (this.agreementLine().AgreementLineType == CommitmentType::ProductQuantity)
            {
                return AgreementLineQuantityCommitment::find(this.agreementLine().RecId).PriceUnit;
            }
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return InventTableModule::find(vendInvoiceInfoLine.ItemId, ModuleInventPurchSales::Purch).getPriceUnit();
            }
            else
            {
                return 1.0;
            }
        }

        if (vendInvoiceInfoLine.isAdvance())
        {
            return 1.0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultProcurementCategory</Name>
				<Source><![CDATA[
    protected PurchCategory determineDefaultProcurementCategory()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && vendInvoiceInfoLine.isDirectInvoice()
            && !vendInvoiceInfoLine.ProcurementCategory)
        {
            return this.agreementLine().Category;
        }

        if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return EcoResProductCategory::findByItemIdCategoryHierarchyRole(vendInvoiceInfoLine.ItemId, EcoResCategoryNamedHierarchyRole::Procurement).Category;
            }

            // If invoice line is category-based, the category should already be set
            return vendInvoiceInfoLine.ProcurementCategory;
        }

        if (vendInvoiceInfoLine.isAdvance())
        {
            return PurchPrepayTable::findPurchId(this.vendInvoiceInfoTable().PurchId).PrepayCategoryId;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>PurchCommitmentLine_PSN</c> field on the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <returns>
    /// The default value for the <c>PurchCommitmentLine</c> field on the <c>VendInvoiceInfoLine</c> table.
    /// </returns>
    public RefRecId determineDefaultPurchCommitmentLine_PSN()
    {
        if (!vendDocumentLineMap.isNonPO())
        {
            return this.purchLine().PurchCommitmentLine_PSN;
        }

        return vendInvoiceInfoLine.PurchCommitmentLine_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchLineRecId</Name>
				<Source><![CDATA[
    protected PurchLineRefRecId determineDefaultPurchLineRecId()
    {
        if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            return 0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchMarkup</Name>
				<Source><![CDATA[
    protected PurchMarkup determineDefaultPurchMarkup()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return InventTableModule::find(vendInvoiceInfoLine.ItemId, ModuleInventPurchSales::Purch).Markup;
            }
            else
            {
                return 0.0;
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default method to set <c>PurchPrice</c> field value.
    /// </summary>
    /// <returns>
    /// The <c>PurchPrice</c> field value.
    /// </returns>
    protected PurchPrice determineDefaultPurchPrice()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            if (this.agreementLine().AgreementLineType == CommitmentType::ProductQuantity)
            {
                return AgreementLineQuantityCommitment::find(this.agreementLine().RecId).PricePerUnit;
            }
            else
            {
                return 0.0;
            }
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultPurchUnit</Name>
				<Source><![CDATA[
    protected PurchUnit determineDefaultPurchUnit()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            if (this.agreementLine().AgreementLineType == CommitmentType::ProductQuantity)
            {
                return AgreementLineQuantityCommitment::find(this.agreementLine().RecId).ProductUnitOfMeasure;
            }
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return InventTableModule::find(vendInvoiceInfoLine.ItemId, ModuleInventPurchSales::Purch).UnitId;
            }
            else
            {
                return '';
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultRemainBeforeInventPhys</Name>
				<Source><![CDATA[
    protected TradeRemainBeforeInventPhysical determineDefaultRemainBeforeInventPhys()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            return 0.0;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultStatProcId</Name>
				<Source><![CDATA[
    protected IntrastatProcId determineDefaultStatProcId()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return IntrastatParameters::find().StatProcIdParm;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            vendInvoiceInfoTable = this.vendInvoiceInfoTable();

            if (vendInvoiceInfoTable.isNonPO())
            {
                return vendInvoiceInfoTable.StatProcId;
            }

            return vendInvoiceInfoTable.purchTable().StatProcId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTax1099Amount</Name>
				<Source><![CDATA[
    protected Tax1099Amount determineDefaultTax1099Amount()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (this.purchLine().Tax1099Amount != 0)
            {
                return this.purchLine().Tax1099Amount;
            }
        }
        else
        {
            if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
            {
                return vendInvoiceInfoLine.LineAmount;
            }
            else
            {
                return this.purchLine().Tax1099Amount;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTax1099BoxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default method to set <c>Tax1099BoxDetails</c> field value.
    /// </summary>
    /// <returns>
    /// The <c>Tax1099BoxDetails</c> field value.
    /// </returns>
    protected Tax1099RecId determineDefaultTax1099BoxDetails()
    {
        if (vendDocumentLineMap.isNonPO())
        {
            return 0;
        }
        else
        {
            return this.purchLine().Tax1099RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTax1099Fields</Name>
				<Source><![CDATA[
    protected Tax1099FieldsRecId determineDefaultTax1099Fields()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return VendTable::find(vendInvoiceInfoLine.InvoiceAccount).Tax1099Fields;
        }
        else if (vendDocumentLineMap.isNonPO() || vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().vendTable_InvoiceAccount().Tax1099Fields;
        }
        else
        {
            return this.purchLine().Tax1099Fields;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTax1099State</Name>
				<Source><![CDATA[
    protected Tax1099State determineDefaultTax1099State()
    {
        if (!vendDocumentLineMap.isNonPO())
        {
            return this.purchLine().Tax1099State;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTax1099StateAmount</Name>
				<Source><![CDATA[
    protected Tax1099StateAmount determineDefaultTax1099StateAmount()
    {
        if (!vendDocumentLineMap.isNonPO())
        {
            return this.purchLine().Tax1099StateAmount;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxGroup</Name>
				<Source><![CDATA[
    protected TaxGroup determineDefaultTaxGroup()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return VendTable::find(this.agreementLine().purchAgreementHeader().VendAccount).TaxGroup;
        }
        else if (vendInvoiceInfoLine.isAdvanceApplication())
        //prepayment application line defaulting need to be before non-PO since this also has OrigPurchId field as blank
        {
            return '';
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (this.vendInvoiceInfoTable().isNonPO())
            {
                return this.vendInvoiceInfoTable().TaxGroup;
            }
            else
            {
                return this.vendInvoiceInfoTable().purchTable().TaxGroup;
            }
        }
        else if (vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().TaxGroup;
        }
        else
        {
            return this.purchLine().TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected TaxItemGroup determineDefaultTaxItemGroup()
    {
        TaxItemGroupHeading taxItemGroupHeading;
        TaxItemGroup taxItemGroup = '';

        //prepayment application line defaulting need to be before non-PO since this also has OrigPurchId field as blank
        if (vendInvoiceInfoLine.isAdvanceApplication())
        {
            return '';
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return InventTableModule::find(vendInvoiceInfoLine.ItemId, ModuleInventPurchSales::Purch).TaxItemGroupId;
            }
            else
            {
                taxItemGroupHeading = EcoResCategory::getProcurementCategoryItemTaxGroup(vendInvoiceInfoLine.ProcurementCategory, CompanyInfo::current());
                if (taxItemGroupHeading)
                {
                    taxItemGroup = taxItemGroupHeading.TaxItemGroup;
                }
                return taxItemGroup;
            }
        }
        else if (vendInvoiceInfoLine.isAdvance())
        {
            return EcoResCategory::getProcurementCategoryItemTaxGroup(PurchPrepayTable::findPurchId(this.vendInvoiceInfoTable().PurchId).PrepayCategoryId,
                                                                      this.vendInvoiceInfoTable().companyInfo().RecId
                                                                      ).TaxItemGroup;
        }
        else
        {
            return this.purchLine().TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultOverrideSalesTax</Name>
				<Source><![CDATA[
    protected NoYes determineDefaultOverrideSalesTax()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return VendTable::find(this.agreementLine().purchAgreementHeader().VendAccount).OverrideSalesTax;
        }
        else if (vendInvoiceInfoLine.isAdvanceApplication())
        //prepayment application line defaulting need to be before non-PO since this also has OrigPurchId field as blank
        //Since tax group and item tax group in prepayment application line defaulting is empty value, here set override sales tax
        // as yes to avoid recaulte tax.
        {
            return NoYes::Yes;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            if (this.vendInvoiceInfoTable().isNonPO())
            {
                return this.vendInvoiceInfoTable().OverrideSalesTax;
            }
            else
            {
                return this.vendInvoiceInfoTable().purchTable().OverrideSalesTax;
            }
        }
        else if (vendInvoiceInfoLine.isAdvance())
        {
            return this.vendInvoiceInfoTable().OverrideSalesTax;
        }
        else
        {
            return this.purchLine().OverrideSalesTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTaxWithholdGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines what the default <c>TaxWithholdGroup</c> value for the line should be.
    /// </summary>
    /// <returns>
    /// The default <c>TaxWithholdGroup</c> value.
    /// </returns>
    protected TaxWithholdGroup determineDefaultTaxWithholdGroup()
    {
        return VendTable::find(vendInvoiceInfoLine.OrderAccount).TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransactionCode</Name>
				<Source><![CDATA[
    protected IntrastatTransactionCodeId determineDefaultTransactionCode()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return IntrastatParameters::find().DefaultSalePurchase;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            vendInvoiceInfoTable = this.vendInvoiceInfoTable();

            if (vendInvoiceInfoTable.isNonPO())
            {
                return vendInvoiceInfoTable.TransactionCode;
            }

            return vendInvoiceInfoTable.purchTable().TransactionCode;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultTransport</Name>
				<Source><![CDATA[
    protected IntrastatTransport determineDefaultTransport()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && vendInvoiceInfoLine.isDirectInvoice())
        {
            return IntrastatParameters::find().TransportModeParm;
        }
        else if (vendDocumentLineMap.isNonPO())
        {
            vendInvoiceInfoTable = this.vendInvoiceInfoTable();

            if (vendInvoiceInfoTable.isNonPO())
            {
                return vendInvoiceInfoTable.Transport;
            }

            return vendInvoiceInfoTable.purchTable().Transport;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxWithholdItemGroupHeadingId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines what the default <c>TaxWithholdItemGroupId_TH</c> value for the line should be.
    /// </summary>
    /// <returns>
    /// The default <c>TaxWithholdItemGroupId_TH</c> value.
    /// </returns>
    protected TaxWithholdItemGroupId_TH determineTaxWithholdItemGroupHeadingId()
    {
        ProcCategoryItemTaxGroup procCategoryItemTaxGroup;

        if (vendDocumentLineMap.isNonPO())
        {
            if (vendInvoiceInfoLine.ItemId != '')
            {
                return InventTableModule::find(vendInvoiceInfoLine.ItemId, ModuleInventPurchSales::Purch).TaxWithholdItemGroupHeading_TH;
            }
            else
            {
                procCategoryItemTaxGroup = ProcCategoryItemTaxGroup::getProcCategoryTaxItemWithholdItemGroup(vendInvoiceInfoLine.ProcurementCategory);

                return procCategoryItemTaxGroup.TaxWithholdItemGroupHeadingId;
            }
        }
        else
        {
            return this.purchLine().TaxWithholdItemGroupHeading_TH;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonPO</Name>
				<Source><![CDATA[
    private boolean isNonPO()
    {
        return (purchLine.RecId == 0 && vendInvoiceInfoLine.InventTransId == '' && !vendInvoiceInfoLine.isAdvance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTax1099Vendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the vendor for the invoice is marked as reporting 1099.
    /// </summary>
    /// <returns>
    /// true if vendor is marked as reporting tax 1099; otherwise, false.
    /// </returns>
    private boolean isTax1099Vendor()
    {
        return VendTable::find(vendInvoiceInfoLine.OrderAccount).Tax1099Reports == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendDocumentTableMap</Name>
				<Source><![CDATA[
    protected VendDocumentTableMap parmVendDocumentTableMap(VendDocumentTableMap _vendDocumentTableMap = vendDocumentTableMap)
    {
        if (!prmisDefault(_vendDocumentTableMap))
        {
            vendDocumentTableMap = _vendDocumentTableMap;
        }

        return vendDocumentTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>InventNow</c> field.
    /// </summary>
    /// <returns>
    /// true if the value is correct; otherwise, false.
    /// </returns>
    protected boolean validateInventNow()
    {
        boolean isValid = super();

        if (!VendInvoiceInfoLine::checkQuantitySign(vendInvoiceInfoLine.InventNow, this.purchLine().QtyOrdered, "@SYS331850"))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTransId</Name>
				<Source><![CDATA[
    protected boolean validateInventTransId()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = this.physicalStrategy().validateInventTransIdForInvoice();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemId</Name>
				<Source><![CDATA[
    protected boolean validateItemId()
    {
        boolean isValid = super();

        if (isValid)
        {
            isValid = this.physicalStrategy().validateItemIdForInvoice();
        }

        // Require a non-PO item to be non-stocked
        if (this.isNonPO()
            && vendInvoiceInfoLine.ItemId
            && vendDocumentLineMap.inventTable().modelGroup().StockedProduct == NoYes::Yes)
        {
            AifFault::checkFailedLogFault("@SYS312848", #NonPOLineCannotBeStocked);
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkupCode_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks markup code field filled correctly
    /// </summary>
    /// <returns>
    /// True if filled correctly or country is not Russia; otherwise false
    /// </returns>
    /// <remarks>
    /// Works only for RU companies
    /// </remarks>
    protected boolean validateMarkupCode_RU()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && this.isNonPO())
        {
            return this.checkMarkupCode_RU();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchCommitmentLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>PurchCommitmentLine_PSN</c> field on the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <returns>
    /// true if all validations pass or the commitments feature is disabled; otherwise, false.
    /// </returns>
    protected boolean validatePurchCommitmentLine_PSN()
    {
        FiscalCalendarYear fiscalCalendarYear;
        PurchCommitmentLine_PSN purchCommitmentLine = vendInvoiceInfoLine.getPurchCommitmentLine_PSN();
        PurchCommitmentHeader_PSN purchCommitmentHeader = purchCommitmentLine.getPurchCommitmentHeader_PSN();
        str error = "@SPS2134";

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            //Verify that the vendor account on the invoice matches the vendor account on the commitment.
            if (purchCommitmentHeader.VendorAccount != '' && vendInvoiceInfoLine.InvoiceAccount != purchCommitmentHeader.VendorAccount)
            {
                return checkFailed(error);
            }

            //Verify that the commitment line is of the current fiscal year
            fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::current()), this.vendInvoiceInfoTable().TransDate);

            if (purchCommitmentLine.LineDate < fiscalCalendarYear.StartDate || purchCommitmentLine.LineDate > fiscalCalendarYear.EndDate)
            {
                return checkFailed(error);
            }

            //Verify that the entered commitment header has a status of complete.
            if (purchCommitmentHeader.DocumentStatus != PurchCommitmentDocumentStatus_PSN::Complete)
            {
                return checkFailed(error);
            }

            //
            //Verify that the Purchase Agreement Line on the commitment document
            //line matches the Purchase Order Line Purchase Agreement field, if present
            //

            if (vendInvoiceInfoLine.AgreementLine_PSN != 0 && vendInvoiceInfoLine.AgreementLine_PSN != purchCommitmentLine.AgreementLine)
            {
                return checkFailed(error);
            }

            // validate that the source document line state is complete for the commitment line.
            if (purchCommitmentLine.getSourceDocumentLine().AccountingStatus != SourceDocumentLineAccountingStatus::Completed)
            {
                return checkFailed(error);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiveNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>ReceiveNow</c> field.
    /// </summary>
    /// <returns>
    /// true if the value of the <c>ReceiveNow</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateReceiveNow()
    {
        boolean isValid = super();
        AgreementLine localAgreementLine;

        if (isValid)
        {
            isValid = VendInvoiceInfoLine::checkQuantitySign(vendInvoiceInfoLine.ReceiveNow, this.purchLine().PurchQty, "@SYS331797");
        }

        if (isValid)
        {
            isValid = this.physicalStrategy().validateReceiveNowForInvoice();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (isValid && vendInvoiceInfoLine.isDirectInvoice())
            {
                // for quantity based purchase agreement;validating available quantity on agreement line.
                localAgreementLine = AgreementLine::find(vendInvoiceInfoLine.AgreementLine_PSN);

                if (localAgreementLine.isQuantityBased())
                {
                    isValid = localAgreementLine.checkRemaining(vendInvoiceInfoLine.ReceiveNow);

                    if (!isValid)
                    {
                        return checkFailed("@SYS135461");
                    }
                }
            }
        }
        
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfter</c> field.
    /// </summary>
    /// <returns>
    /// true if the value of the <c>RemainAfter</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateRemainAfter()
    {
        boolean isValid = super();

        if (!VendInvoiceInfoLine::checkQuantitySign(vendInvoiceInfoLine.RemainAfter, this.purchLine().PurchQty, "@SYS331849"))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainAfterInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value of the <c>RemainAfterInvent</c> field.
    /// </summary>
    /// <returns>
    /// true if the value of the <c>RemainAfterInvent</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateRemainAfterInvent()
    {
        boolean isValid = super();

        if (!VendInvoiceInfoLine::checkQuantitySign(vendInvoiceInfoLine.RemainAfterInvent, this.purchLine().QtyOrdered, "@SYS331851"))
        {
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the field values for a row of a table that are mapped to the
    /// <c>VendDocumentTableMap</c> map.
    /// </summary>
    /// <returns>
    /// true if the field values are mapped correctly; otherwise, false.
    /// </returns>
    public boolean validateRow()
    {
        boolean isValid = super();

        if (this.checkQuantityAndAmountHaveOppositeSigns())
        {
            AifFault::checkFailedLogFault("@SYS78848", #QtyAndNetAmountHaveOppositeSigns);
            return false;
        }

        if (vendInvoiceInfoLine.Transport != '' && vendInvoiceInfoLine.Port == '' && IntrastatTransportMode::isPortMandatory(vendInvoiceInfoLine.Transport))
        {
            AifFault::checkFailedLogFault("@SYS26970", #MissingIntrastatPort);
            isValid = false;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            if (isValid)
            {
                this.validatePurchCommitmentLine_PSN();
            }
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) && isValid)
        {
            isValid = this.validateBudgetReservationLine_PSN();
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && this.isNonPO())
        {
            isValid = isValid && this.checkMarkupCode_RU();
            isValid = isValid && this.checkInventOwner_RU();
            isValid = isValid && this.checkInventProfile_RU();
        }
        // </GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoMX ]) )
        {
            isValid = this.checkWithholdingTax_MX() && isValid;
        }

        if ((vendInvoiceInfoLine.LineType == PurchInvoiceLineType::AdvanceApplication || vendInvoiceInfoLine.LineType == PurchInvoiceLineType::Advance)
             && !vendInvoiceInfoLine.ProcurementCategory)
        {
            isValid = checkFailed("@AccountsPayable:CategoryIsMandatoryForPrepaymentApplication");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityAndAmountHaveOppositeSigns</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check the quantity and the amount have opposite signs.
    /// </summary>
    /// <returns>
    ///     true if the amount is negative and the line type is not advance application; otherwise, false.
    /// </returns>
    protected boolean checkQuantityAndAmountHaveOppositeSigns()
    {
        return ((vendInvoiceInfoLine.ReceiveNow * vendInvoiceInfoLine.LineAmount < 0) && 
                 vendInvoiceInfoLine.LineType != PurchInvoiceLineType::AdvanceApplication);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the sales tax group.
    /// </summary>
    /// <returns>
    ///     true if validation succeeded, otherwise false.
    /// </returns>
    protected boolean validateTaxGroup()
    {
        boolean isValid = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && isValid && this.isNonPO())
        {
            isValid = this.checkVATChargeSource_RU();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the item sales tax group.
    /// </summary>
    /// <returns>
    ///     true if validation succeeded, otherwise false.
    /// </returns>
    protected boolean validateTaxItemGroup()
    {
        boolean isValid = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && isValid && this.isNonPO())
        {
            isValid = this.checkVATChargeSource_RU();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendDocumentLineMap</Name>
				<Source><![CDATA[
    public VendDocumentLineMap vendDocumentLineMap(VendDocumentLineMap _vendDocumentLineMap = vendDocumentLineMap)
    {
        if (!prmisDefault(_vendDocumentLineMap))
        {
            vendInvoiceInfoLine = _vendDocumentLineMap;
        }

        return super(_vendDocumentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable vendInvoiceInfoTable()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = this.vendDocumentTableMap();

        Debug::assert(vendInvoiceInfoTable.RecId != 0);

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultBudgetReservationLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The default method to set the <c>BudgetReservationLine_PSN</c> field value.
    /// </summary>
    protected void defaultBudgetReservationLine_PSN()
    {
        if (!vendInvoiceInfoLine.isFieldSet(fieldNum(VendInvoiceInfoLine, BudgetReservationLine_PSN)))
        {
            vendInvoiceInfoLine.BudgetReservationLine_PSN = this.determineDefaultBudgetReservationLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultBudgetReservationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the default value for the <c>BudgetReservationLine_PSN</c> field on the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <returns>
    /// The default value for the <c>BudgetReservationLine_PSN</c> field on the <c>VendInvoiceInfoLine</c> table.
    /// </returns>
    public BudgetReservationLineRecId_PSN determineDefaultBudgetReservationLine()
    {
        if (!vendDocumentLineMap.isNonPO() )
        {
            return this.purchLine().BudgetReservationLine_PSN;
        }

        return vendInvoiceInfoLine.BudgetReservationLine_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetReservationLine_PSN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations on the <c>BudgetReservationLine_PSN</c> field on the <c>VendInvoiceInfoLine</c> table.
    /// </summary>
    /// <returns>
    /// true if all validations pass or the budget reservation feature is disabled; otherwise, false.
    /// </returns>
    protected boolean validateBudgetReservationLine_PSN()
    {
        BudgetReservationLine_PSN budgetReservationLine;
        boolean isValid = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)) &&
            (vendInvoiceInfoLine.isNonPO() && vendInvoiceInfoLine.isBudgetReservationLineReferenced()))
        {
            budgetReservationLine = BudgetReservationLine_PSN::find(vendInvoiceInfoLine.BudgetReservationLine_PSN);

            isValid = BudgetReservation_PSN::validateBudgetReservationToBeRelieved(
                this.vendInvoiceInfoTable().TransDate,
                budgetReservationLine.BudgetReservationHeader_PSN,
                BudgetReservationRelievingDocument_PSN::VendorInvoice,
                "@Budgeting_BudgetReservationPS:VIAccountingDateNotInGBRFiscalYearError",
                "@Budgeting_BudgetReservationPS:VIAccountingDateNotWithinGBRStartEndDatesError");

            if (isValid && budgetReservationLine)
            {
                SourceDocumentLine sourceDocumentLine = SourceDocumentLine::find(budgetReservationLine.SourceDocumentLine);

                if (sourceDocumentLine && (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized))
                {
                    BudgetReservationHeader_PSN budgetReservationHeader = BudgetReservationHeader_PSN::find(budgetReservationLine.BudgetReservationHeader_PSN);
                    isValid = checkFailed(strFmt("@Budgeting_BudgetReservationPS:BudgetReservationClassAmountExceedsBalanceInfolog", budgetReservationHeader.DocumentNumber));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>