<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreditVoucherTableController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Initializes the query by adding datasource and ranges to run the <c>RetailCreditVoucherTable</c> report.
/// </summary>
public class RetailCreditVoucherTableController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range and sets its value to the report query as per the record selected on <c>RetailCreditVoucherTable</c> passed.
    /// </summary>
    /// <param name="_entryId">
    /// Voucher id of the credit voucher.
    /// </param>
    /// <remarks>
    /// This modified query will be used by the report to fetch the specific credit voucher.
    /// </remarks>
    public void modifyQuery(RetailCreditVoucherId   _entryId)
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   query = this.parmReportContract().parmQueryContracts().lookup(
                                                                    this.getFirstQueryContractKey()
                                                                );

        queryBuildDataSource = query.dataSourceTable(tablenum(RetailCreditVoucherTable));

        if (!queryBuildDataSource)
        {
            queryBuildDataSource = query.addDataSource(Tablenum(RetailCreditVoucherTable));
        }

        queryBuildRange = queryBuildDataSource.findRange(fieldnum(RetailCreditVoucherTable, entryId));

        if (!queryBuildRange)
        {
            queryBuildRange = queryBuildDataSource.addRange(fieldnum(RetailCreditVoucherTable, entryId));
        }

        if (_entryId)
        {
            queryBuildRange.value(queryValue(_entryId));
            RetailTracer::Info('Credit voucher', funcName(), strFmt('Report prints for credit voucher %1', _entryId));
        }
        else
        {
            queryBuildRange.value("");
            RetailTracer::Info('Credit voucher', funcName(), 'Report prints for all credit voucher Ids');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is used to get or set the report name.
    /// </summary>
    /// <param name = "_reportName">The report name.</param>
    /// <returns>The report name.</returns>
    public SRSCatalogItemName parmReportName(SRSCatalogItemName _reportName = reportName)
    {
        return ssrsReportStr(RetailCreditVoucherTable, Report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is the static method called by the output menu item to run the report.
    /// </summary>
    /// <param name = "_args">The parameters for the report.</param>
    public static void main(Args _args)
    {
        RetailCreditVoucherTableController controller = new RetailCreditVoucherTableController();

        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>