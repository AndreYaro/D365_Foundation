<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkInventTransReservationCollectionBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkInventTransReservationCollectionBuilder</c> class is responsible for building collections of the data related to reservations for work.
/// </summary>
class WHSWorkInventTransReservationCollectionBuilder
{
    private List workInventTransReservationsList;
    private List workLinesList;
    private List workInventTransList;
    private Set trackedWorkLines; //this is just used for performance reasons since it is faster to check for existence in the set than in the list
    private List orderCommittedReservationList;
    private WHSReservationHierarchyLevel reservationFlexibleLevel;
    private ItemId reservationFlexibleItem;
    private InventDimParm inventDimParmReservationFlexible;
    private boolean hasFlexibleReservations;
    private boolean isFlexibleReservationEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        workInventTransReservationsList = new List(Types::Class);
        workLinesList = new List(Types::Record);
        workInventTransList = new List(Types::Record);
        trackedWorkLines = new Set(Types::Container);
        orderCommittedReservationList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkInventTransReservationCollectionBuilder construct()
    {
        return new WHSWorkInventTransReservationCollectionBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkInventTransEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator for a collection of <c>WHSWorkInventTrans</c> records.
    /// </summary>
    /// <returns>An enumerator for a collection of <c>WHSWorkInventTrans</c> records.</returns>
    public Enumerator getWorkInventTransEnumerator()
    {
        return workInventTransList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator for a collection of <c>WHSWorkLine</c> records.
    /// </summary>
    /// <returns>An enumerator for a collection of <c>WHSWorkLine</c> records.</returns>
    public Enumerator getWorkLineEnumerator()
    {
        return workLinesList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator for a collection of <c>WHSWorkInventTransReservation</c> objects.
    /// </summary>
    /// <returns>an enumerator for a collection of <c>WHSWorkInventTransReservation</c> objects.</returns>
    public Enumerator getEnumerator()
    {
        return workInventTransReservationsList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderCommittedReservationEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator for a collection of <c>WHSOrderCommittedTransReservation</c> objects.
    /// </summary>
    /// <returns>an enumerator for a collection of <c>WHSOrderCommittedTransReservation</c> objects.</returns>
    [Hookable(false)]
    internal Enumerator getOrderCommittedReservationEnumerator()
    {
        return orderCommittedReservationList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFlexibleReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the builder has flexible reservations.
    /// </summary>
    /// <returns>True if the builder has flexible reservations; otherwise, false</returns>
    [Hookable(false)]
    internal boolean hasFlexibleReservations()
    {
        return hasFlexibleReservations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveSpecificDimensionReservation</Name>
				<Source><![CDATA[
    private boolean canMoveSpecificDimensionReservation(
        InventDim       _inventDimReserved,
        InventDimParm   _inventDimParmNonSpecific,
        boolean         _isFlexibleReservation)
    {
        InventDimParm inventDimParmReserved = _inventDimReserved.toDimParm();

        if (_isFlexibleReservation)
        {
            if (InventDimParm::isInventDimParmEqual(inventDimParmReservationFlexible, InventDimParm::orParms(inventDimParmReservationFlexible, inventDimParmReserved)))
            {
                return true;
            }
        }
        else
        {
            if (InventDimParm::isInventDimParmEqual(inventDimParmReserved, _inventDimParmNonSpecific))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveReservationFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reservation can be moved from a work line.
    /// </summary>
    /// <param name = "_affectedWorkLine">The work line.</param>
    /// <returns>true if the reservation can be moved; otherwise, false.</returns>
    protected boolean canMoveReservationFromWorkLine(WHSWorkLine _affectedWorkLine)
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(_affectedWorkLine.whsWorkTable().WorkTransType).canMoveReservationFromWorkLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processItemDimLocationAndAboveMap</Name>
				<Source><![CDATA[
    private Map processItemDimLocationAndAboveMap(Map _itemDimLocationAndAboveMap, WHSWorkTable _workTable = null)
    {
        Map itemDimLocationAndAboveMapRemaining = new Map(Types::Container, Types::Real);

        MapEnumerator me = _itemDimLocationAndAboveMap.getEnumerator();
        while (me.moveNext())
        {
            ItemId itemId;
            InventDimId inventDimId;
            [itemId, inventDimId] = me.currentKey();
            InventQty moveQty = me.currentValue();

            InventHandlingQty qtyLeftToMove = this.addFromItemHandlingQty(itemId, InventDim::find(inventDimId), moveQty, _workTable);

            if (qtyLeftToMove > 0)
            {
                itemDimLocationAndAboveMapRemaining.insert(me.currentKey(), qtyLeftToMove);
            }
        }

        return itemDimLocationAndAboveMapRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds information to the collections based on the license plate.
    /// </summary>
    /// <param name = "_licensePlateLocation">The location that the license plate is on.</param>
    /// <param name = "_licensePlateId">The ID of the a license plate.</param>
    public void addFromLicensePlate(
        WMSLocation         _licensePlateLocation,
        WHSLicensePlateId   _licensePlateId)
    {
        Map itemDimLocationAndAboveMap	= new Map(Types::Container, Types::Real);
        itemDimLocationAndAboveMap		= this.buildItemDimLocationAndAboveOnHandMap(_licensePlateLocation, _licensePlateId, itemDimLocationAndAboveMap);

        // If the license plate is Target LP for work, we need to ensure we move the work reservations for that particular work first.
        WHSWorkTable workTable = WHSWorkTable::findByLicensePlate(_licensePlateId);
        if (workTable)
        {
            itemDimLocationAndAboveMap = this.processItemDimLocationAndAboveMap(itemDimLocationAndAboveMap, workTable);
        }

        this.processItemDimLocationAndAboveMap(itemDimLocationAndAboveMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemDimLocationAndAboveOnHandMap</Name>
				<Source><![CDATA[
    private Map buildItemDimLocationAndAboveOnHandMap(
        WMSLocation         _licensePlateLocation,
        WHSLicensePlateId   _licensePlateId,
        Map					_itemDimLocationAndAboveMap)
    {
        if (WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(_licensePlateId))
        {
            _itemDimLocationAndAboveMap = this.buildItemDimLocationAndAboveOnHandMapForContainerGroupingLicensePlate(_licensePlateLocation, _licensePlateId, _itemDimLocationAndAboveMap);
        }
        else
        {
            _itemDimLocationAndAboveMap = this.buildItemDimLocationAndAboveOnHandMapForLicensePlate(_licensePlateLocation, _licensePlateId, _itemDimLocationAndAboveMap);
        }

        return _itemDimLocationAndAboveMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemDimLocationAndAboveOnHandMapForLicensePlate</Name>
				<Source><![CDATA[
    private Map buildItemDimLocationAndAboveOnHandMapForLicensePlate(
        WMSLocation         _licensePlateLocation,
        WHSLicensePlateId   _licensePlateId,
        Map					_itemDimLocationAndAboveMap)
    {
        InventSum inventSum;
        InventDim inventDim;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // Aggregate quantities on the level of Location and above, only considering on-hand on the specified license plate
            // We are not using SUM(), because different items can have different reservation hierarchies
            while select ItemId, PdsCWPhysicalInvent, PhysicalInvent, #InventDimGroupAllFields from inventSum
                where   inventSum.ClosedQty         == NoYes::No
                    &&  inventSum.PhysicalInvent     > 0
                    &&  inventSum.InventLocationId  == _licensePlateLocation.InventLocationId
                    &&  inventSum.wmsLocationId		== _licensePlateLocation.wMSLocationId
                    &&  inventSum.LicensePlateId	== _licensePlateId
            {
                InventDim inventDimLocationAndAbove;
                inventDimLocationAndAbove.initFromInventSum(inventSum);

                this.calcReservationFlexibleParams(inventSum.ItemId);

                if (isFlexibleReservationEnabled)
                {
                    inventDimLocationAndAbove.clearNotSelectedDim(inventDimParmReservationFlexible);
                }
                else
                {
                    inventDimLocationAndAbove.clearBelowLocationDim(inventSum.ItemId);
                }

                inventDimLocationAndAbove = InventDim::findOrCreate(inventDimLocationAndAbove);
                container key = [inventSum.ItemId, inventDimLocationAndAbove.inventDimId];

                InventHandlingQty physicalHandlingQty = PdsGlobal::pdsIsCWItem(inventSum.ItemId)
                    ? inventSum.PdsCWPhysicalInvent
                    : inventSum.PhysicalInvent;

                if (physicalHandlingQty != 0)
                {
                    if (!_itemDimLocationAndAboveMap.exists(key))
                    {
                        _itemDimLocationAndAboveMap.insert(key, physicalHandlingQty);
                    }
                    else
                    {
                        InventQty currentQty = _itemDimLocationAndAboveMap.lookup(key);
                        _itemDimLocationAndAboveMap.insert(key, currentQty + physicalHandlingQty);
                    }
                }
            }
        }
        else
        {
            // Aggregate quantities on the level of Location and above, only considering on-hand on the specified license plate
            // We are not using SUM(), because different items can have different reservation hierarchies
            while select ItemId, PdsCWPhysicalInvent, PhysicalInvent from inventSum
                where inventSum.ClosedQty      == NoYes::No                
                   && inventSum.PhysicalInvent  > 0
                join inventDim
                    where inventDim.InventDimId			== inventSum.InventDimId
                        && inventDim.InventLocationId   == _licensePlateLocation.InventLocationId
                        && inventDim.wmsLocationId		== _licensePlateLocation.wMSLocationId
                        && inventDim.LicensePlateId		== _licensePlateId
            {
                InventDim inventDimLocationAndAbove = inventDim.data();

                this.calcReservationFlexibleParams(inventSum.ItemId);

                if (isFlexibleReservationEnabled)
                {
                    inventDimLocationAndAbove.clearNotSelectedDim(inventDimParmReservationFlexible);
                }
                else
                {
                    inventDimLocationAndAbove.clearBelowLocationDim(inventSum.ItemId);
                }

                inventDimLocationAndAbove = InventDim::findOrCreate(inventDimLocationAndAbove);
                container key = [inventSum.ItemId, inventDimLocationAndAbove.inventDimId];

                InventHandlingQty physicalHandlingQty = PdsGlobal::pdsIsCWItem(inventSum.ItemId)
                    ? inventSum.PdsCWPhysicalInvent
                    : inventSum.PhysicalInvent;

                if (physicalHandlingQty != 0)
                {
                    if (!_itemDimLocationAndAboveMap.exists(key))
                    {
                        _itemDimLocationAndAboveMap.insert(key, physicalHandlingQty);
                    }
                    else
                    {
                        InventQty currentQty = _itemDimLocationAndAboveMap.lookup(key);
                        _itemDimLocationAndAboveMap.insert(key, currentQty + physicalHandlingQty);
                    }
                }
            }
        }

        return _itemDimLocationAndAboveMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemDimLocationAndAboveOnHandMapForContainerGroupingLicensePlate</Name>
				<Source><![CDATA[
    private Map buildItemDimLocationAndAboveOnHandMapForContainerGroupingLicensePlate(
        WMSLocation         _licensePlateLocation,
        WHSLicensePlateId   _containerGroupingLicensePlateId,
        Map					_itemDimLocationAndAboveMap)
    {
        WHSLicensePlate childLicensePlate;

        while select LicensePlateId from childLicensePlate
            where childLicensePlate.LicensePlateParent == _containerGroupingLicensePlateId
        {
            _itemDimLocationAndAboveMap = this.buildItemDimLocationAndAboveOnHandMapForLicensePlate(_licensePlateLocation, childLicensePlate.LicensePlateId, _itemDimLocationAndAboveMap);
        }

        return _itemDimLocationAndAboveMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromItemHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventHandlingQty addFromItemHandlingQty(
        ItemId				_itemId,
        InventDim			_inventDimCriteria,
        InventHandlingQty	_quantityBeingMoved,
        WHSWorkTable		_preferredWorkTable)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _itemId))
        {
            return this.addFromItemAll(_itemId, _inventDimCriteria, _quantityBeingMoved, _preferredWorkTable);
        }
        return this.addFromItem(_itemId, _inventDimCriteria, _quantityBeingMoved, _preferredWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromItemAll</Name>
				<Source><![CDATA[
    private InventHandlingQty addFromItemAll(
        ItemId				_itemId,
        InventDim			_inventDimCriteria,
        InventHandlingQty	_quantityBeingMoved,
        WHSWorkTable		_preferredWorkTable)
    {
        // We might get a very specific inventDim, e.g. one with LP and serial, and we need to consider that the reservation is potentially on a higher level, e.g. location.
        InventDim     inventDimReservation = _inventDimCriteria.data();
        InventDim     inventDimReservationNoFlex = _inventDimCriteria.data();
        InventDimParm inventDimParmReservationAllowBlank;

        this.calcReservationFlexibleParams(_itemId);

        if (isFlexibleReservationEnabled)
        {
            InventTable inventTable = InventTable::find(_itemId);

            inventDimParmReservationAllowBlank = InventDimParm::andParms(inventDimParmReservationFlexible, WHSReservationHierarchyInventDimUtil::initInventDimParmBelowLocation(inventTable));
            inventDimReservation.clearNotSelectedDim(inventDimParmReservationFlexible);
        }
        else
        {
            // inventDimParmReservationAllowBlank is empty
            inventDimReservation.clearBelowLocationDim(_itemId);
        }

        inventDimReservationNoFlex.clearBelowLocationDim(_itemId);

        if (_preferredWorkTable.TargetLicensePlateId != ''
            && _preferredWorkTable.isLicensePlateSpecificReservationRequired())
        {
            inventDimReservation.LicensePlateId = _preferredWorkTable.TargetLicensePlateId;
            inventDimReservationNoFlex.LicensePlateId = _preferredWorkTable.TargetLicensePlateId;
        }
        inventDimReservation = InventDim::findOrCreate(inventDimReservation);

        InventHandlingQty availPhysicalHandlingQuantity = WHSInventOnHand::getPhysicalAvailHandlingQty(_itemId, inventDimReservation, true, true);

        // We have negative inventory which we cannot handle
        if (availPhysicalHandlingQuantity < 0)
        {
            throw error(strFmt("@WAX:ErrorMovementWithAssociatedWorkNegativeInventoryOnLocation", _itemId, availPhysicalHandlingQuantity));
        }

        InventHandlingQty physicalHandlingQty = WHSInventOnHand::getWorkPhysicalInventHandlingQtyByInventDim(_itemId, inventDimReservation);

        if (_quantityBeingMoved > physicalHandlingQty)
        {
            throw error(strFmt("@WAX:ErrorMovementWithAssociatedWorkNegativeInventoryOnLocation", _itemId, availPhysicalHandlingQuantity));
        }

        InventHandlingQty reservedQuantity = physicalHandlingQty - availPhysicalHandlingQuantity;
        //If we don't have any reservations we can exist early since we don't need to move them.
        //The less than case is for the case where we allow negative inventory and have more reserved than what is physically on-hand.
        if (reservedQuantity <= 0)
        {
            return 0;
        }

        InventHandlingQty reservedQuantityBeingMoved;
        //If we have a prefferedWorkTable we assume that the work has the full quantity being moved reserved since the works target license plate might be moved.
        if (_preferredWorkTable)
        {
            reservedQuantityBeingMoved = _quantityBeingMoved;
        }
        //Check if we are actually going to impact any reservations since we might only be moving a physical quantity that is not reserved.
        else
        {
            reservedQuantityBeingMoved = _quantityBeingMoved - availPhysicalHandlingQuantity;

            if (reservedQuantityBeingMoved <= 0)
            {
                return 0;
            }
        }

        // Catch weight items do not support being moved when inventory is reserved by work.
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            throw error(strFmt("@WAX:Error_MovementOfInventoryWithWorkNotSupportedForCW", _itemId));
        }
        
        if (WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled())
        {
            reservedQuantityBeingMoved -= this.addFromItemAllWhsInventoryTransaction(
                _itemId,
                reservedQuantityBeingMoved,
                inventDimReservation,
                inventDimReservationNoFlex,
                inventDimParmReservationAllowBlank,
                _preferredWorkTable);
        }

        reservedQuantityBeingMoved -= this.addFromItemAllInventTrans(
            _itemId,
            reservedQuantityBeingMoved,
            inventDimReservation,
            inventDimReservationNoFlex,
            inventDimParmReservationAllowBlank,
            _preferredWorkTable);

        return reservedQuantityBeingMoved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromItemAllWhsInventoryTransaction</Name>
				<Source><![CDATA[
    private InventHandlingQty addFromItemAllWhsInventoryTransaction(
        ItemId              _itemId,
        InventHandlingQty   _reservedQuantityToMove,
        InventDim           _inventDimReservation,
        InventDim           _inventDimReservationNoFlex,
        InventDimParm       _inventDimParmReservationAllowBlank,
        WHSWorkTable        _preferredWorkTable)
    {
        if (_reservedQuantityToMove <= 0)
        {
            return 0;
        }

        InventHandlingQty movedQuantity = 0;

        WHSInventoryTransactionReservationDescriptorEnumerator enumerator = WHSInventoryTransactionReservationQuery::construct()
            .setWorkIdToSearchFor(_preferredWorkTable.WorkId)
            .setAllowBlankDimensions(_inventDimParmReservationAllowBlank)
            .findReservations(
                _itemId,
                WHSInventoryStorageDimensions::newFromInventDim(_inventDimReservation),
                WHSInventoryProductTrackingDimensions::newFromInventDim(_inventDimReservation))
            .getEnumerator();

        while (enumerator.moveNext())
        {
            WHSInventoryTransactionReservationDescriptorElement reservationDescriptor = enumerator.current();
            WHSWorkInventTrans workInventTrans = WHSWorkInventTrans::findByInventoryTransactionOriginId(reservationDescriptor.parmInventoryTransactionOriginId());

            // The reservation API is explicitly searching for work-related reservations so we should never have a situation when we can't find a work inventory transaction here.
            Debug::assert(workInventTrans != null);

            InventQty reservationQuantity = reservationDescriptor.getInventoryFormatQuantity().parmInventQty();

            if (   workInventTrans.InventQtyRemain  != reservationQuantity       // Only move fully reserved WITs
                || workInventTrans.InventQtyRemain  >  _reservedQuantityToMove)  // Only move WITs in full
            {
                throw error("@WAX:ErrorMovementWithAssociatedWorkWillLeadToSplitWork");
            }

            InventDim inventDimReservation = reservationDescriptor.parmInventoryDimensionsDescriptor().convertToInventDim(true);

            var workInventTransReservation = WHSWorkInventTransReservation::newFromWorkInventTrans(
                workInventTrans,
                reservationDescriptor.parmInventoryDimensionsDescriptor().convertToInventDim(true).inventDimId,
                reservationQuantity);

            boolean isFlexibleReservation = false;

            if (isFlexibleReservationEnabled)
            {
                WHSWorkLine workLine = WHSWorkLine::find(workInventTrans.WorkId, workInventTrans.LineNum);

                if (workLine.OrderCommittedInventDimId) // When work line is not related to flexible reservation functionality we should keep legacy behavior
                {
                    workInventTransReservation.parmReservationFlexibleLevel(this.getTransReservationFlexLevel(_itemId, inventDimReservation.inventDimId));

                    isFlexibleReservation = true;
                }
            }

            if (!this.canMoveSpecificDimensionReservation(inventDimReservation, isFlexibleReservation ? _inventDimReservation.toDimParm() : _inventDimReservationNoFlex.toDimParm(), isFlexibleReservation))
            {
                throw error(strFmt("@WAX:ErrorMovementWithAssociatedWorkSpecificDimensions", workInventTrans.ItemId, InventTransType::WHSWork, workInventTrans.WorkId, inventDimReservation.preFix()));
            }

            if (isFlexibleReservation)
            {
                hasFlexibleReservations = true;
            }
            
            workInventTransReservation.parmItemSetId(workInventTrans.ItemSetId);

            workInventTransList.addEnd(workInventTrans);
            this.addWorkLineBasedOnWorkInventTrans(workInventTrans);
            workInventTransReservationsList.addEnd(workInventTransReservation);

            _reservedQuantityToMove -= reservationQuantity;
            movedQuantity += reservationQuantity;

            if (_reservedQuantityToMove <= 0)
            {
                break;
            }
        }

        return movedQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromItemAllInventTrans</Name>
				<Source><![CDATA[
    private InventHandlingQty addFromItemAllInventTrans(
        ItemId              _itemId,
        InventHandlingQty   _reservedQuantityToMove,
        InventDim           _inventDimReservation,
        InventDim           _inventDimReservationNoFlex,
        InventDimParm       _inventDimParmReservationAllowBlank,
        WHSWorkTable        _preferredWorkTable)
    {
        if (_reservedQuantityToMove <= 0)
        {
            return 0;
        }

        InventDimParm inventDimParmReservation = _inventDimReservation.toDimParm();
        InventDimParm inventDimParmReservationNoFlex = _inventDimReservationNoFlex.toDimParm();

        InventTrans inventTrans;
        InventDim   inventDimJoin;
        InventTransOrigin inventTransOrigin;
        InventTransOrigin inventTransOriginWork;
        WHSWorkInventTrans workInventTrans;
        InventTransOriginId prevInventTransOriginId;
        InventQty reservedQuantityMustBeMovedForWIT;
        WHSOrderCommittedReservation orderCommittedReservation;
        InventHandlingQty quantityMoved = 0;

        //When flexible reservation feature is disabled the inventDimParmReservationAllowBlank is empty and the #InventDimExistsJoinAllowBlank macro works as the #InventDimExistsJoin
        //We can have multiple reservations from different origins on the dimensions
        while select sum(Qty), inventDimId, inventTransOrigin from inventTrans
            group by inventTransOrigin, inventDimId //the grouping should also result in sorting so we get the list filled so reservations for workInventTrans are sequential
                where inventTrans.ItemId == _itemId
                && inventTrans.StatusReceipt == StatusReceipt::None
                && inventTrans.StatusIssue == StatusIssue::ReservPhysical
            exists join inventTransOriginWork
                where inventTransOriginWork.RecId == inventTrans.InventTransOrigin
                    && (!_preferredWorkTable || (inventTransOriginWork.ReferenceCategory == InventTransType::WHSWork && inventTransOriginWork.ReferenceId == _preferredWorkTable.WorkId))
                #InventDimExistsJoinAllowBlank(inventTrans.inventDimId, inventDimJoin, _inventDimReservation, inventDimParmReservation, _inventDimParmReservationAllowBlank)
        {
            //Only do this once for each origin and therefore only once for each WorkInventTrans
            if (prevInventTransOriginId != inventTrans.inventTransOrigin)
            {
                inventTransOrigin = InventTransOrigin::find(inventTrans.inventTransOrigin);

                if (isFlexibleReservationEnabled && inventTransOrigin.ReferenceCategory == InventTransType::WHSOrderCommittedReservation)
                {
                    orderCommittedReservation = inventTransOrigin.originator() as WHSOrderCommittedReservation;
                }
                else
                {
                    workInventTrans = inventTransOrigin.originator() as WHSWorkInventTrans;

                    if (!workInventTrans)
                    {
                        throw error(strFmt("@WAX:ErrorMovementWithAssociatedWorkOfUnsupportedTransactionType", inventTransOrigin.ItemId, inventTransOrigin.ReferenceId, inventTransOrigin.ReferenceCategory));
                    }

                    workInventTransList.addEnd(workInventTrans);
                    this.addWorkLineBasedOnWorkInventTrans(workInventTrans);

                    //we need to ensure that if we start removing reservations then we remove the entire qty for a WIT since we cannot support splitting the WIT
                    reservedQuantityMustBeMovedForWIT = workInventTrans.inventQtyRemain;
                }
            }

            InventHandlingQty reservedQuantityBeingMovedTrans = min(_reservedQuantityToMove, abs(inventTrans.Qty));
            boolean           isFlexibleReservation = false;

            if (inventTransOrigin.ReferenceCategory == InventTransType::WHSOrderCommittedReservation)
            {
                WHSOrderCommittedTransReservation orderCommittedTransReservation = WHSOrderCommittedTransReservation::newFromOrderCommittedReservation(orderCommittedReservation, inventTrans.inventDimId, reservedQuantityBeingMovedTrans, _itemId);

                orderCommittedTransReservation.parmReservationFlexibleLevel(this.getTransReservationFlexLevel(_itemId, inventTrans.inventDimId));
                orderCommittedReservationList.addEnd(orderCommittedTransReservation);

                isFlexibleReservation = true;
            }
            else
            {
                WHSWorkInventTransReservation workInventTransReservation = WHSWorkInventTransReservation::newFromWorkInventTrans(workInventTrans, inventTrans.inventDimId, reservedQuantityBeingMovedTrans);
                
                if (isFlexibleReservationEnabled)
                {
                    WHSWorkLine workLine = WHSWorkLine::find(workInventTrans.WorkId, workInventTrans.LineNum);

                    if (workLine.OrderCommittedInventDimId) // When work line is not related to flexible reservation functionality we should keep legacy behavior
                    {
                        workInventTransReservation.parmReservationFlexibleLevel(this.getTransReservationFlexLevel(_itemId, inventTrans.inventDimId));

                        isFlexibleReservation = true;
                    }
                }

                workInventTransReservationsList.addEnd(workInventTransReservation);

                reservedQuantityMustBeMovedForWIT -= reservedQuantityBeingMovedTrans;
            }

            if (!this.canMoveSpecificDimensionReservation(InventDim::find(inventTrans.inventDimId), isFlexibleReservation ? inventDimParmReservation : inventDimParmReservationNoFlex, isFlexibleReservation))
            {
                throw error(strFmt("@WAX:ErrorMovementWithAssociatedWorkSpecificDimensions", inventTransOrigin.ItemId, inventTransOrigin.ReferenceCategory, inventTransOrigin.ReferenceId, inventTrans.inventDim().preFix()));
            }

            if (isFlexibleReservation)
            {
                hasFlexibleReservations = true;
            }

            _reservedQuantityToMove -= reservedQuantityBeingMovedTrans;
            quantityMoved += reservedQuantityBeingMovedTrans;

            //We have found enough reservations
            if (_reservedQuantityToMove <= 0)
            {
                break;
            }

            prevInventTransOriginId = inventTrans.inventTransOrigin;
        }

        // Since we are going through the WIT in order we will always handle all reservations for a WIT before moving to the next one, hence we only need to check if something is left on the last processed WIT
        if (reservedQuantityMustBeMovedForWIT)
        {
            throw error("@WAX:ErrorMovementWithAssociatedWorkWillLeadToSplitWork");
        }

        return quantityMoved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkLineBasedOnWorkInventTrans</Name>
				<Source><![CDATA[
    private void addWorkLineBasedOnWorkInventTrans(WHSWorkInventTrans _workInventTrans)
    {
        container workLineKey = [_workInventTrans.WorkId, _workInventTrans.LineNum];

        // We can have multiple WorkInventTrans for a workLine so only add the work line once to the list
        if (!trackedWorkLines.in(workLineKey))
        {
            WHSWorkLine workLine = WHSWorkLine::find(_workInventTrans.WorkId, _workInventTrans.LineNum);

            if (!this.canMoveReservationFromWorkLine(workLine))
            {
                throw error(strFmt("@WAX:ErrorMovementWithAssociatedWorkOfUnsupportedWorkOrderType", _workInventTrans.ItemId, workLine.WorkId, workLine.whsWorkTable().WorkTransType));
            }

            workLinesList.addEnd(workLine);
            trackedWorkLines.add(workLineKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds information to the collections based on the item.
    /// </summary>
    /// <param name = "_itemId">An item ID</param>
    /// <param name = "_inventDimCriteria">The dimensions being moved.</param>
    /// <param name = "_quantityBeingMoved">The quantity being moved.</param>
    /// <param name = "_preferredWorkTable">If specified, try to find work reservations for this particular work.</param>
    /// <returns>Quantity still remaining to be moved.</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the addFromItemHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty addFromItem(
        ItemId			_itemId,
        InventDim		_inventDimCriteria,
        InventQty		_quantityBeingMoved,
        WHSWorkTable    _preferredWorkTable = null)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _itemId);

        return this.addFromItemAll(_itemId, _inventDimCriteria, _quantityBeingMoved, _preferredWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReservationFlexibleParams</Name>
				<Source><![CDATA[
    private void calcReservationFlexibleParams(ItemId _itemId)
    {
        if (reservationFlexibleItem == _itemId)
        {
            return;
        }

        InventTable inventTable = InventTable::find(_itemId);

        reservationFlexibleItem = _itemId;
        reservationFlexibleLevel = WHSReservationHierarchyElementPolicyProvider::singleton().getLowestLevelWithEnabledReservationOnDemandOrder(inventTable.whsReservationHierarchy());

        if (reservationFlexibleLevel)
        {
            inventDimParmReservationFlexible = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveAndIncludingLevel(inventTable, reservationFlexibleLevel);
            isFlexibleReservationEnabled = true;
        }
        else
        {
            inventDimParmReservationFlexible.clear();
            isFlexibleReservationEnabled = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransReservationFlexLevel</Name>
				<Source><![CDATA[
    private WHSReservationHierarchyLevel getTransReservationFlexLevel(ItemId _itemId, InventDimId _inventDimId)
    {
        InventTable                     inventTable = InventTable::find(_itemId);
        WhsReservationHierarchyProvider reservationHierarchyProvider = WhsReservationHierarchyProvider::construct();
        WHSReservationHierarchyLevel    level = WHSReservationHierarchyInventDimUtil::deepestLevelFromInventDimParm(reservationHierarchyProvider.getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp), InventDim::find(_inventDimId).toDimParm());

        Level = level > reservationHierarchyProvider.getDimLevel(inventTable, fieldNum(InventDim, WMSLocationId)) ? min(level, reservationFlexibleLevel) : 0;

        return level;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>