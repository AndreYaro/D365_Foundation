<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailENInfo_CustomerCreated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates email notification for customer creation.
/// </summary>
internal class RetailENInfo_CustomerCreated extends RetailENInfo
{
    // Email template placeholders
    private const str CustomerName = 'customername';

    Map                         parameterMap;
    RefRecId                    customerId;
    SysEmailMessageTable        emailMessage;
    SysEmailAddress             emailAddress;
    LanguageId                  languageId;
    CustTable                   custTable;
    LogisticsElectronicAddress  electronicAddress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::CustomerCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveENProfileId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the event notification profile Id.
    /// </summary>
    /// <param name="_refRecId">
    /// Reference for RecId.
    /// </param>
    protected RetailEventNotificationProfileId resolveENProfileId(RefRecId _refRecId)
    {
        customerId = _refRecId;
        custTable = custTable::findRecId(_refRecId);

        if (custTable)
        {
            electronicAddress = DirParty::primaryElectronicAddress(custTable.Party, LogisticsElectronicAddressMethodType::Email);
            emailAddress = electronicAddress ? electronicAddress.Locator : '';
        }
        else
        {
            eventSource.EventWriteEmailNotificationCustomerNotFound(customerId);
            error(strFmt("@Retail:RetailEventWriteEmailNotificationCustomerNotFound"));
            throw Exception::Error;
        }

        var enProfileId = RetailParameters::find().EventNotificationProfileId;
        var enProfile = RetailEventNotificationProfile::find(enProfileId);
        if (!enProfile)
        {
            // No email notification profile found for profile id %1. To use this config, set a valid email notification profile in commerce parameters.
            info(strFmt("@Retail:InvalidRetailEventNotificationProfileIdInCommerceParameters", enProfileId));
        }

        return enProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills map with the values for placeholders.
    /// </summary>
    protected void initParameterMap()
    {
        if (custTable)
        {
            languageId = CompanyInfo::languageId();

            if (!languageId)
            {
                eventSource.EventWriteEmailNotificationLanguageNotFound(customerId);
            }

            SysEmailId emailId = this.getEmailId();
            emailMessage = SysEmailMessageTable::find(emailId, languageId);

            if (!emailMessage)
            {
                // Message not found for this language.
                SysEmailTable emailTable = SysEmailTable::find(emailId);
                languageId = emailTable.DefaultLanguage;
                emailMessage = SysEmailMessageTable::find(emailId, languageId);

                if (!emailMessage)
                {
                    error(strFmt("@Retail:RetailEventWriteEmailNotificationMessageBodyIsEmptyForCustomerCreation", custTable.Recid, emailId, languageId));
                    throw Exception::Error;
                }
            }

            DirPartyTable person = DirPartyTable::findRec(custTable.Party);

            parameterMap = new Map(Types::String,Types::String);
            parameterMap.insert(CustomerName, person.Name);
        }
        else
        {
            eventSource.EventWriteEmailNotificationCustomerNotFound(customerId);
            error(strFmt("@Retail:RetailEventWriteEmailNotificationCustomerNotFound"));
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAddr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns email recipient address.
    /// </summary>
    /// <returns>
    /// To address of SysEmailAddress type.
    /// </returns>
    protected SysEmailAddress getToAddr()
    {
        return emailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns email subject with replaced placeholders.
    /// </summary>
    /// <returns>
    /// String with the subject.
    /// </returns>
    protected str getMessageSubject()
    {
        return SysEmailMessage::stringExpand(emailMessage.Subject, parameterMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns email body with replaced placeholders.
    /// </summary>
    /// <returns>
    /// String with the email body.
    /// </returns>
    protected str parseEmailTemplate()
    {
        if (!emailMessage)
        {
            throw error(strfmt("@SYS74260", languageId));
        }

        str emailTemplate = emailMessage.LayoutType == SysEmailLayoutType::DynamicLayout
            ? emailMessage.XSLTMail
            : emailMessage.Mail;

        return SysEmailMessage::stringExpand(emailTemplate, parameterMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>