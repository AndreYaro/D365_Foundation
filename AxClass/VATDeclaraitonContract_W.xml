<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclaraitonContract_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract of VAT declaration.
/// </summary>
[
    DataContract,
    SysOperationContractProcessing(classStr(VATDeclarationUIBuilder_W)),
    SysOperationGroup(identifierStr(Period), "@SYS40", '1'),
    SysOperationGroup(identifierStr(Parameters), "@SYS7764", '2'),
    SysOperationGroup(identifierStr(Export), "@SYS26056", '3')
]
public class VATDeclaraitonContract_W extends ERFormatMappingRunBaseContract implements SysPackable
{
    #ISOCountryRegionCodes

    LogisticsAddressCountryRegionISOCode isoCodeFromTaxRegistration;

    FromDate fromDate;
    ToDate toDate;
    RecId taxReportVoucherRecId;
    ERFormatMappingId formatMapping;

    str month;
    str year;
    DirPersonRecId empId;
    TaxDeclarationType_W declarationType;
    Amount thresHoldAmount;
    boolean salesAnnex;
    boolean purchAnnex;
    boolean declaration;
    Query query;

    boolean surplusUse;
    boolean invoiceTransfer;
    TransDate transDate;
    TransDate reasonDate;
    TransDate reportDate;
    TaxPeriod taxPeriod;
    Voucher voucher;
    str numberSequence;
    boolean use2012Format;
    boolean use2016Format;
    boolean quarterly;
    Quarter quarter;
    TmpTaxReportById tmpTaxReportById;
    Addressing addressing;
    NoYes noTaxLiability;
    TaxAmountOverpaid_LV taxAmountOverpaid;
    NoYes taxOverpaymentToBank;
    AmountMST overpaymentAmount;
    CompanyBankAccountId bankAccount;
    VATCSReferenceNumber_CZ referenceNumber;
    DataBox_CZ dataBox;
    TaxReportPeriodCode_NO taxReportPeriodCode;
    TaxRepVersion taxRepVersion;
    private boolean updateNow;

    private str packedQuery;
    private container tmpTaxReportByIdPacked;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        isoCodeFromTaxRegistration,
        fromDate,
        toDate,
        taxReportVoucherRecId,
        formatMapping,
        month,
        year,
        empId,
        declarationType,
        thresHoldAmount,
        salesAnnex,
        purchAnnex,
        declaration,
        packedQuery,
        surplusUse,
        invoiceTransfer,
        transDate,
        reasonDate,
        reportDate,
        taxPeriod,
        voucher,
        numberSequence,
        use2012Format,
        use2016Format,
        quarterly,
        quarter,
        tmpTaxReportByIdPacked,
        addressing,
        noTaxLiability,
        taxAmountOverpaid,
        taxOverpaymentToBank,
        overpaymentAmount,
        bankAccount,
        referenceNumber,
        dataBox,
        taxReportPeriodCode,
        taxRepVersion,
        updateNow
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
	[
        DataMember(identifierStr(FromDate)),
        SysOperationGroupMember(identifierStr(Period)),
        SysOperationLabel(literalStr("@ApplicationSuiteElectronicReportingIntegration:FromDate")),
        SysOperationDisplayOrder('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
		fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ToDate)),
        SysOperationGroupMember(identifierStr(Period)),
        SysOperationLabel(literalStr("@ApplicationSuiteElectronicReportingIntegration:ToDate")),
        SysOperationDisplayOrder('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMonth</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(Month)),
        SysOperationGroupMember(identifierStr(Period)),
        SysOperationLabel(literalStr("@SYS11451")),
        SysOperationCountryRegionCodes([#isoEE, #isoCZ, #isoLT, #isoLV, #isoNO]),
        SysOperationDisplayOrder('3')
    ]
    public str parmMonth(str _month = month)
    {
        month = _month;
        return month;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmYear</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(Year)),
        SysOperationGroupMember(identifierStr(Period)),
        SysOperationLabel(literalStr("@SYS32606")),
        SysOperationCountryRegionCodes([#isoEE, #isoCZ, #isoLT, #isoLV, #isoNO]),
        SysOperationDisplayOrder('4')
    ]
    public str parmYear(str _year = year)
    {
        year = _year;
        return year;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportVoucherRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides access to an internal variable - the tax report voucher record Id.
    /// </summary>
    /// <param name = "_taxReportVoucherRecId">
    /// The tax report voucher record Id.
    /// </param>
    [DataMember, SysOperationControlVisibility(false)]
    public RecId parmTaxReportVoucherRecId(RecId _taxReportVoucherRecId = taxReportVoucherRecId)
    {
        taxReportVoucherRecId = _taxReportVoucherRecId;
        return taxReportVoucherRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        Query ret;

        if (prmIsDefault(_query))
        {
            if (packedQuery)
            {
                ret = new Query(SysOperationHelper::base64Decode(packedQuery));
            }
        }
        else if (_query)
        {
            packedQuery = SysOperationHelper::base64Encode(_query.pack());
            ret = _query;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method for internal variable - packedQuery.
    /// </summary>
    /// <param name = "_packedQuery">
	/// The packed query.
	/// </param>
    [DataMember, SysOperationControlVisibility(false)]
    public str parmPackedQuery(str _packedQuery = packedQuery)
    {
        packedQuery = _packedQuery;
        return packedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmpId</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(EmpId)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@ElectronicReporting:Name")),
        SysOperationCountryRegionCodes([#isoEE, #isoLT, #isoLV, #isoCZ]),
        SysOperationDisplayOrder('1')
    ]
    public DirPersonRecId parmEmpId(DirPersonRecId _empId = empId)
    {
        empId = _empId;
        return empId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeclarationType</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(DeclarationType)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@TaxLocalization:TaxDeclarationType")),
        SysOperationCountryRegionCodes([#isoEE, #isoCZ, #isoLT]),
        SysOperationDisplayOrder('2')
    ]
    public TaxDeclarationType_W parmDeclarationType(TaxDeclarationType_W _declarationType = declarationType)
    {
        declarationType = _declarationType;
        return declarationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThresHoldAmount</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ThresHoldAmount)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@SYS118816")),
        SysOperationCountryRegionCodes([#isoEE, #isoLV]),
        SysOperationDisplayOrder('3')
    ]
    public Amount parmThresHoldAmount(Amount _thresHoldAmount = thresHoldAmount)
    {
        thresHoldAmount = _thresHoldAmount;
        return thresHoldAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonDate</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ReasonDate)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@GLS114623")),
        SysOperationCountryRegionCodes([#isoCZ]),
        SysOperationDisplayOrder('4')
    ]
    public TransDate parmReasonDate(TransDate _reasonDate = reasonDate)
    {
        reasonDate = _reasonDate;
        return reasonDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDate</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ReportDate)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@SYS117650")),
        SysOperationCountryRegionCodes([#isoCZ, #isoLT, #isoLV]),
        SysOperationDisplayOrder('5')
    ]
    public TransDate parmReportDate(TransDate _reportDate = reportDate)
    {
        reportDate = _reportDate;
        return reportDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoTaxLiability</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(NoTaxLiability)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@GLS114624")),
        SysOperationCountryRegionCodes([#isoCZ]),
        SysOperationDisplayOrder('6')
    ]
    public NoYes parmNoTaxLiability(NoYes _noTaxLiability = noTaxLiability)
    {
        noTaxLiability = _noTaxLiability;
        return noTaxLiability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAmountOverpaid</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(TaxAmountOverpaid)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@SYS4002471")),
        SysOperationCountryRegionCodes([#isoLV]),
        SysOperationDisplayOrder('7')
    ]
    public TaxAmountOverpaid_LV parmTaxAmountOverpaid(TaxAmountOverpaid_LV _taxAmountOverpaid = taxAmountOverpaid)
    {
        taxAmountOverpaid = _taxAmountOverpaid;
        return taxAmountOverpaid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxOverpaymentToBank</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(TaxOverpaymentToBank)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@GLS220672")),
        SysOperationCountryRegionCodes([#isoLV]),
        SysOperationDisplayOrder('8')
    ]
    public NoYes parmTaxOverpaymentToBank(NoYes _taxOverpaymentToBank = taxOverpaymentToBank)
    {
        taxOverpaymentToBank = _taxOverpaymentToBank;
        return taxOverpaymentToBank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverpaymentAmount</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(OverpaymentAmount)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@GLS220674")),
        SysOperationCountryRegionCodes([#isoLV]),
        SysOperationDisplayOrder('9')
    ]
    public AmountMST parmOverpaymentAmount(AmountMST _overpaymentAmount = overpaymentAmount)
    {
        overpaymentAmount = _overpaymentAmount;
        return overpaymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccount</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(BankAccount)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@SYS1517")),
        SysOperationCountryRegionCodes([#isoLV]),
        SysOperationDisplayOrder('10')
    ]
    public CompanyBankAccountId parmBankAccount(CompanyBankAccountId _bankAccount = bankAccount)
    {
        bankAccount = _bankAccount;
        return bankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVATCSReferenceNumber</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(ReferenceNumber)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@TaxLocalization:ReferenceNumber")),
        SysOperationCountryRegionCodes([#isoCZ]),
        SysOperationDisplayOrder('11')
    ]
    public VATCSReferenceNumber_CZ parmVATCSReferenceNumber(VATCSReferenceNumber_CZ _referenceNumber = referenceNumber)
    {
        referenceNumber = _referenceNumber;
        return referenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataBox</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(DataBox)),
        SysOperationGroupMember(identifierStr(Parameters)),
        SysOperationLabel(literalStr("@TaxLocalization:DataBox")),
        SysOperationCountryRegionCodes([#isoCZ]),
        SysOperationDisplayOrder('12')
    ]
    public DataBox_CZ parmDataBox(DataBox_CZ _dataBox = dataBox)
    {
        dataBox = _dataBox;
        return dataBox;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeclaration</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(Declaration)),
        SysOperationGroupMember(identifierStr(Export)),
        SysOperationLabel(literalStr("@TaxLocalization:TaxDeclaration")),
        SysOperationCountryRegionCodes([#isoEE]),
        SysOperationDisplayOrder('1')
    ]
    public boolean parmDeclaration(boolean _declaration = declaration)
    {
        declaration = _declaration;
        return declaration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAnnex</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(SalesAnnex)),
        SysOperationGroupMember(identifierStr(Export)),
        SysOperationLabel(literalStr("@TaxLocalization:TaxSalesAnnex")),
        SysOperationCountryRegionCodes([#isoEE]),
        SysOperationDisplayOrder('2')
    ]
    public boolean parmSalesAnnex(boolean _salesAnnex = salesAnnex)
    {
        salesAnnex = _salesAnnex;
        return salesAnnex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAnnex</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(PurchAnnex)),
        SysOperationGroupMember(identifierStr(Export)),
        SysOperationLabel(literalStr("@TaxLocalization:TaxPurchasesAnnex")),
        SysOperationCountryRegionCodes([#isoEE]),
        SysOperationDisplayOrder('3')
    ]
    public boolean parmPurchAnnex(boolean _purchAnnex = purchAnnex)
    {
        purchAnnex = _purchAnnex;
        return purchAnnex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSurplusUse</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(SurplusUse)),
        SysOperationLabel(literalstr("@SYS82359")),
        SysOperationHelpTextAttribute(literalstr("@SYS82360")),
        SysOperationCountryRegionCodes([#isoAT])
    ]
    public boolean parmSurplusUse(boolean _surplusUse = surplusUse)
    {
        surplusUse = _surplusUse;
        return surplusUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTransfer</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(InvoiceTransfer)),
        SysOperationLabel(literalstr("@SYS82361")),
        SysOperationHelpTextAttribute(literalstr("@SYS82362")),
        SysOperationCountryRegionCodes([#isoAT])
    ]
    public boolean parmInvoiceTransfer(boolean _invoiceTransfer = invoiceTransfer)
    {
        invoiceTransfer = _invoiceTransfer;
        return invoiceTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequence</Name>
				<Source><![CDATA[
    public str parmNumberSequence(str _numberSequence = numberSequence)
    {
        numberSequence = _numberSequence;
        return numberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxReportById</Name>
				<Source><![CDATA[
    public TmpTaxReportById parmTmpTaxReportById(TmpTaxReportById _tmpTaxReportById = tmpTaxReportById)
    {
        tmpTaxReportById = _tmpTaxReportById;
        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUse2012Format</Name>
				<Source><![CDATA[
    public boolean parmUse2012Format(boolean _use2012Format = use2012Format)
    {
        use2012Format = _use2012Format;
        return use2012Format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUse2016Format</Name>
				<Source><![CDATA[
    public boolean parmUse2016Format(boolean _use2016Format = use2016Format)
    {
        use2016Format = _use2016Format;
        return use2016Format;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides access to an internal variable - the tax period Id.
    /// </summary>
    /// <param name = "_taxPeriod">
    /// The tax period Id.
    /// </param>
    [DataMember, SysOperationControlVisibility(false)]
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuarterly</Name>
				<Source><![CDATA[
    public boolean parmQuarterly(boolean _quarterly = quarterly)
    {
        quarterly = _quarterly;
        return quarterly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuarter</Name>
				<Source><![CDATA[
    public Quarter parmQuarter(Quarter _quarter = quarter)
    {
        quarter = _quarter;
        return quarter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAuthorityAddressing</Name>
				<Source><![CDATA[
    public Addressing parmTaxAuthorityAddressing(Addressing _addressing = addressing)
    {
        addressing = _addressing;
        return addressing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxReportPeriodCode</Name>
				<Source><![CDATA[
    public TaxReportPeriodCode_NO parmTaxReportPeriodCode(TaxReportPeriodCode_NO _taxReportPeriodCode = taxReportPeriodCode)
    {
        taxReportPeriodCode = _taxReportPeriodCode;
        return taxReportPeriodCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides access to an internal variable - the tax report version.
    /// </summary>
    /// <param name = "_taxRepVersion">
    /// The tax report version.
    /// </param>
    [DataMember, SysOperationControlVisibility(false)]
    public TaxRepVersion parmTaxRepVersion(TaxRepVersion _taxRepVersion = taxRepVersion)
    {
        taxRepVersion = _taxRepVersion;
        return taxRepVersion;
	}

]]></Source>
			</Method>
			<Method>
				<Name>parmISOCodeFromTaxRegistration</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode parmISOCodeFromTaxRegistration(LogisticsAddressCountryRegionISOCode _isoCodeFromTaxRegistration = ISOCodeFromTaxRegistration)
    {
        isoCodeFromTaxRegistration = _isoCodeFromTaxRegistration;
        return isoCodeFromTaxRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatMapping</Name>
				<Source><![CDATA[
    [
        DataMember(identifierStr(FormatMapping)),
		SysOperationLabel(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationHelpTextAttribute(literalstr("@ElectronicReporting:FormatMapping"))
    ]
    public ERFormatMappingId parmFormatMapping(ERFormatMappingId _formatMapping = formatMapping)
    {
        formatMapping = _formatMapping;
        return formatMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedVouchers</Name>
				<Source><![CDATA[
    [ERTableName(tableStr(TaxReportVoucher))]
    public RecordLinkList getSelectedVouchers()
    {
        RecordLinkList result = new RecordLinkList();
        Query queryLoc = this.parmQuery();

        if (queryLoc)
        {
            QueryRun queryRun = new QueryRun(queryLoc);
            while (queryRun.next())
            {
                TaxReportVoucher taxReportVoucher = queryRun.get(tableNum(TaxReportVoucher)) as TaxReportVoucher;

                if (taxReportVoucher)
                {
                    result.ins(taxReportVoucher);
                }
            }
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateNow</Name>
				<Source><![CDATA[
    public boolean parmUpdateNow(boolean _updateNow = updateNow)
    {
        updateNow = _updateNow;
        return updateNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        this.packTmpTaxReportById();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = SysOperationHelper::getVersion(_packedClass);
        boolean ret = false;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                this.unpackTmpTaxReportById();
                ret = true;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packTmpTaxReportById</Name>
				<Source><![CDATA[
    private void packTmpTaxReportById()
    {
        Set tmpTaxReportByIdSet = new Set(Types::Record);

        while select tmpTaxReportById
        {
            tmpTaxReportByIdSet.add(tmpTaxReportById);
        }

        tmpTaxReportByIdPacked = tmpTaxReportByIdSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackTmpTaxReportById</Name>
				<Source><![CDATA[
    private void unpackTmpTaxReportById()
    {
        if (tmpTaxReportByIdPacked)
        {
            Set tmpTaxReportByIdSet = Set::create(tmpTaxReportByIdPacked);

            if (tmpTaxReportByIdSet && tmpTaxReportByIdSet.elements())
            {
                delete_from tmpTaxReportById;
                SetEnumerator se = tmpTaxReportByIdSet.getEnumerator();

                while (se.moveNext())
                {
                    tmpTaxReportById.data(se.current());
                    tmpTaxReportById.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>