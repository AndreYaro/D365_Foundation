<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTEPZCodeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTEPZCodeHelper</c> class is used to determine the EPZcode.
/// </summary>
public class TaxGSTEPZCodeHelper
{
    private LogisticsLocationExt logisticsLocationExt;
    private SalesTable salesTable;
    private CustInvoiceTable custInvoiceTable;
    private ProjProposalJour projProposalJour;
    private Common projectRelatedTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(Common _sourceTable, Common _projectRelatedTable = null)
    {
        this.initLogisticsLocationExt(_sourceTable, _projectRelatedTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static TaxGSTEPZCodeHelper construct(Common _sourceTable, Common _projectRelatedTable = null)
    {
        return new TaxGSTEPZCodeHelper(_sourceTable, _projectRelatedTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogisticsLocationExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LogisticsLocationExt</c> object.
    /// </summary>
    /// <param name = "_sourceTable">The source object.</param>
    /// <param name = "_projectRelatedTable">The related object.</param>
    private void initLogisticsLocationExt(Common _sourceTable, Common _projectRelatedTable = null)
    {
        switch (_sourceTable.tableId)
        {
            case tableNum(SalesTable) :
                salesTable = _sourceTable;
                if (FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                {
                    logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(salesTable.invoicePostalAddressRecId());
                }
                else
                {
                    logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(salesTable.DeliveryPostalAddress);
                }
                break;

            case tableNum(CustInvoiceTable) :
                custInvoiceTable = _sourceTable;
                if (FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                {
                    logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(custInvoiceTable.invoicePostalAddressRecId());
                }
                else
                {
                    logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(custInvoiceTable.PostalAddress);
                }
                break;

            case tableNum(ProjProposalJour) :
                projProposalJour = _sourceTable;
                projectRelatedTable = _projectRelatedTable;

                ProjFundingSource projFundingSource;
                CustTable custTable;

                select firstonly Party from custTable
                    join RecId from projFundingSource
                        where projFundingSource.CustAccount == custTable.AccountNum
                            && projFundingSource.RecId == projProposalJour.FundingSource;

                LogisticsPostalAddress postalAddress = custTable.postalAddress();
                logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(postalAddress.RecId);
                break;

            case tableNum(CustTable) :
                CustTable custTableLoc = _sourceTable;
                logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(custTableLoc.postalAddressRecId());
                break;

            case tableNum(VendTable) :
                VendTable vendTable = _sourceTable;
                logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(vendTable.postalAddress().RecId);
                break;

            case tableNum(PurchTable) :
                PurchTable purchTable = _sourceTable;
                if (FeatureStateProvider::isFeatureEnabled(TaxCalculateGSTBasedOnInvoiceAccountFeature::instance()))
                {
                    logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(purchTable.vendTable_InvoiceAccount().postalAddress().RecId);
                }
                else
                {
                    logisticsLocationExt = LogisticsLocationExt::findByLogisticsPostalAddressRecId(purchTable.vendTable_OrderAccount().postalAddress().RecId);
                }
                break;

            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSEZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the the EPZcode value is SEZ.
    /// </summary>
    /// <returns>
    /// yes if the the EPZcode value is SEZ; otherwise, no.
    /// </returns>
    public NoYes isSEZ()
    {
        TaxGSTEPZCode_IN taxGSTEPZCode_IN = logisticsLocationExt.TaxGSTEPZCode_IN;
        return taxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeemedExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the the EPZcode value is BTP/EHTP/EOU/STP.
    /// </summary>
    /// <returns>
    /// true if the the EPZcode value is BTP/EHTP/EOU/STP; otherwise, false.
    /// </returns>
    public boolean isDeemedExport()
    {
        return logisticsLocationExt.isDeemedExportType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExportOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the export order for transaction.
    /// </summary>
    /// <returns>
    /// true if the transaction is export order; otherwise, false.
    /// </returns>
    public boolean isExportOrder()
    {
        NoYesId exportOrderOrForeignCust;

        if (salesTable.CustomsExportOrder_IN)
        {
            exportOrderOrForeignCust = NoYes::Yes;
        }
        else if (custInvoiceTable && custInvoiceTable.OrderAccount)
        {
            exportOrderOrForeignCust = TaxInformationCustTable_IN::findByCustTable(custInvoiceTable.OrderAccount).IsForeign;
        }
        else if (projProposalJour && projectRelatedTable)
        {
            TransTaxInformationHelper helper = TransTaxInformationHelper::newHelper();
            exportOrderOrForeignCust = helper.findTransTaxInformationByRecord(projectRelatedTable).CustomsExportOrder;
        }

        return exportOrderOrForeignCust == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEPZCodeNotNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the EPZcode value is not none.
    /// </summary>
    /// <returns>
    /// true if the EPZcode value is not none; otherwise, false.
    /// </returns>
    public NoYes isEPZCodeNotNone()
    {
        TaxGSTEPZCode_IN taxGSTEPZCode_IN = logisticsLocationExt.TaxGSTEPZCode_IN;
        return taxGSTEPZCode_IN != TaxGSTEPZCode_IN::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedTableByProjProposalJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the projectRelatedTable by project proposal journal.
    /// </summary>
    /// <param name = "_projProposalJour">The project proposal journal object.</param>
    private void initRelatedTableByProjProposalJour(ProjProposalJour _projProposalJour)
    {
        ProjProposalItem projProposalItem;
        ProjProposalOnAcc projProposalOnAcc;
        ProjProposalRevenue projProposalRevenue;
        ProjProposalEmpl projProposalEmpl;
        ProjProposalCost projProposalCost;

        select firstonly projProposalItem where projProposalItem.ProposalId == _projProposalJour.ProposalId;
        select firstonly projProposalOnAcc where projProposalOnAcc.ProposalId == _projProposalJour.ProposalId;
        select firstonly projProposalRevenue where projProposalRevenue.ProposalId == _projProposalJour.ProposalId;
        select firstonly projProposalEmpl where projProposalEmpl.ProposalId == _projProposalJour.ProposalId;
        select firstonly projProposalCost where projProposalCost.ProposalId == _projProposalJour.ProposalId;

        // The combine scenarios are not supported currently.
        if (projProposalItem)
        {
            projectRelatedTable = projProposalItem;
        }
        else if (projProposalOnAcc)
        {
            projectRelatedTable = projProposalOnAcc;
        }
        else if (projProposalRevenue)
        {
            projectRelatedTable = projProposalRevenue;
        }
        else if (projProposalEmpl)
        {
            projectRelatedTable = projProposalEmpl;
        }
        else if (projProposalCost)
        {
            projectRelatedTable = projProposalCost;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>