<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestRejectedDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendRequestRejectedDataProvider</c> class is the data provider class for the
/// <c>VendRequestRejected</c> report.
/// </summary>
[SRSReportParameterAttribute(classstr(VendRequestContract))]
public class VendRequestRejectedDP extends SRSReportDataProviderBase
{
    VendTmpRequest  vendTmpRequest;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getVendTmpRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>VendTmpRequest</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute('VendTmpRequest'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTmpRequest getVendTmpRequest()
    {
        select * from vendTmpRequest;

        return vendTmpRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches records based on the parameter values and inserts the records into the temporary table.
    /// </summary>
    public void processReport()
    {
        Query               query = new Query(querystr(VendRequestRejected));
        QueryRun            queryRun = new QueryRun(query);
        QueryBuildRange     range;
        VendRequest         vendRequest;
        ReasonTableRef      rejectionReason;
        DataArea            dataArea;
        VendRequestContract contract = this.parmDataContract() as VendRequestContract;

        query.allowCrossCompany(true);
        query.clearCompanyRange();

        if (contract != null)
        {
            //0 represents all companies, otherwise this parameter is a specific DataArea RecId
            if (contract.parmCompanyAccount() == 0) //All
            {
                while select Id from dataArea
                    where dataArea.IsVirtual == false
                {
                    query.addCompanyRange(dataArea.Id);
                }
            }
            else
            {
                select Id from dataArea
                    where dataArea.RecId == contract.parmCompanyAccount();
                query.addCompanyRange(dataArea.Id);
            }

            if (contract.parmFromDate() || contract.parmToDate())
            {
                range = queryRun.query().dataSourceTable(tablenum(VendRequest)).addRange(fieldnum(VendRequest, CreatedDateTime));
                range.value(queryRange(contract.parmFromDate(), contract.parmToDate()));
            }
        }

        ttsbegin;

        while (queryRun.next())
        {
            vendRequest = queryRun.get(tablenum(VendRequest)) as VendRequest;
            rejectionReason = queryRun.get(tablenum(ReasonTableRef)) as ReasonTableRef;

            vendTmpRequest.clear();
            vendTmpRequest.DataArea = vendRequest.DataAreaId;
            switch (vendRequest.getInstanceRelationType())
            {
                case tablestr(VendRequestCompany):
                    vendTmpRequest.RequestType = VendRequestInstanceEntityType::Company;
                    break;
                case tablestr(VendRequestCategoryExtension):
                    vendTmpRequest.RequestType = VendRequestInstanceEntityType::CompanyExtension;
                    break;
                case tablestr(VendRequestStatusChange):
                    vendTmpRequest.RequestType = VendRequestInstanceEntityType::StatusChange;
                    break;
            }
            vendTmpRequest.RejectionReason = rejectionReason.Reason;
            vendTmpRequest.RequestCount = int642int(vendRequest.RecId); // RecId is a count
            vendTmpRequest.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
