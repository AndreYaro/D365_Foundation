<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalProforma_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventJournalProforma_RU implements SysPackable, InventJournalReportInterface_RU
{
    InventJournalReport_RU baseReportClass;
    OffSessionId_RU        offSessionId;
    RefRecId               analysisCode;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        offSessionId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use this method to initialize new instance of XML Excel report
    /// </summary>
    /// <returns>
    /// New instance of report, type of report corresponds with type of descendant
    /// </returns>
    /// <remarks>
    /// cannot be made abstract, since not all descendants use excel for output
    /// </remarks>
    public XMLExcelReport_RU createExcelReport()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public abstract List createXML(InventJournalTable _inventJournalTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public Name description()
    {
        return baseReportClass.description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabled</Name>
				<Source><![CDATA[
    public boolean enabled(InventJournalTable _inventJournalTable)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOffSessionId</Name>
				<Source><![CDATA[
    public OffSessionId_RU getOffSessionId()
    {
        return offSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficialsDefault</Name>
				<Source><![CDATA[
    public void initOfficialsDefault(OffSessionId_RU _offSessionId)
    {
        baseReportClass.initOfficialsDefault(_offSessionId);
        offSessionId = baseReportClass.getOffSessionId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method determines whether current report is an excel report
    /// </summary>
    /// <returns>
    /// Whether current report is an excel report
    /// </returns>
    public boolean isExcelReport()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalTypeSupported</Name>
				<Source><![CDATA[
    public boolean isJournalTypeSupported(InventJournalType _joutrnalType)
    {
        return baseReportClass.isJournalTypeSupported(_joutrnalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItem</Name>
				<Source><![CDATA[
    public abstract str menuItem()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItem_Posted</Name>
				<Source><![CDATA[
    public str menuItem_Posted()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        baseReportClass = InventJournalReport_RU::construct(this.reportType());

        analysisCode    = InventParameters::find().AnalysisDimensionAttribute_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType</Name>
				<Source><![CDATA[
    public abstract InventJournalReportType_RU reportType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportList</Name>
				<Source><![CDATA[
    public static List buildReportList(JournalNameId _journalNameId)
    {
        InventJournalReportParms_RU reportParms;
        List                        lst = new List(Types::Class);

        while select ReportType from reportParms
            where reportParms.InventJournalNameId == _journalNameId
        {
            lst.addEnd(InventJournalProforma_RU::construct(reportParms.ReportType));
        }
        return lst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalProforma_RU construct(InventJournalReportType_RU _reportType)
    {
        switch (_reportType)
        {
            case InventJournalReportType_RU::Loss      :
                return new InventJournalProforma_Loss_RU();

            case InventJournalReportType_RU::BOMReq    :
                return new InventJournalProforma_BomReq_RU();

            case InventJournalReportType_RU::CountColl :
                return new InventJournalProforma_CountColl_RU();

            case InventJournalReportType_RU::Transfer  :
                return new InventJournalProforma_Transfer_RU();

            case InventJournalReportType_RU::CountingList :
                return new InventJournalProforma_CountingList_RU();

            case InventJournalReportType_RU::CountingListInTransit :
                return new InventJournalProforma_CntLstInTransit_RU();

            case InventJournalReportType_RU::CountingListBailee :
                return new InventJournalProforma_CountListBailee_RU();

            default:
                return InventJournalProforma_RU::constructExt(_reportType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends construct method to support user extensions.
    /// </summary>
    /// <param name = "_reportType">The type of inventory journal report.</param>
    /// <exception>
    /// Inventory journal report type is not found.
    /// </exception>
    [Replaceable]
    protected static InventJournalProforma_RU constructExt(InventJournalReportType_RU _reportType)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>