<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeySum</Name>
	<SourceCode>
		<Declaration><![CDATA[
class KeySum
{
    container       listKey;
    container       listData;
    container       totals;

    int             numOfKeys;
    int             numOfData;
    int             sorting;
    int             numOfTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addKeySum</Name>
				<Source><![CDATA[
    void addKeySum(KeySum   markup)
    {
        int     idx;
        int     idxMax = markup.numOfTrans();

        while (idx < idxMax)
        {
            idx += 1;

            this.updateNow( markup.index2Key(idx), markup.index2Data( idx) );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>export</Name>
				<Source><![CDATA[
    container export()
    {
        return [listKey,listData,totals,numOfTrans];
    }

]]></Source>
			</Method>
			<Method>
				<Name>import</Name>
				<Source><![CDATA[
    void import(container expData)
    {
        [listKey,listData,totals,numOfTrans] = expData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>index2Data</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value of the Data at the specified index value.
    /// </summary>
    /// <param name="num">
    ///    The index value.
    /// </param>
    /// <returns>
    ///    The Data at the specified index value.
    /// </returns>
    public anytype index2Data(int num)
    {
        if (num    > 0 && num    <= numOfTrans)
        {
            //return the value of the Data at index 'num'
            return conpeek(listData,num);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>index2Key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value of the Key at the specified index value.
    /// </summary>
    /// <param name="num">
    ///    The index value.
    /// </param>
    /// <returns>
    ///    The specified Key.
    /// </returns>
    public anytype index2Key(int num)
    {
        if (num    > 0 && num    <= numOfTrans)
        {
            return conpeek(listKey,num);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indexDelete_W</Name>
				<Source><![CDATA[
    public void indexDelete_W(int _num)
    {
        int       idx;
        container data;

        if (_num >= 0 && _num <= numOfTrans)
        {
            data = conpeek(listData, _num);

            idx = 0;
            while (idx < numOfData)
            {
                idx    += 1;
                totals  = this.conPokeForSumDataTypes(totals, idx, conpeek(totals, idx) - conpeek(data, idx));
            }

            listKey  = condel(listKey,  _num, 1);
            listData = condel(listData, _num, 1);

            numOfTrans -= 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>key2Index_W</Name>
				<Source><![CDATA[
    public int key2Index_W(anytype _key)
    {
        return confind(listKey, _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>KeySum</c> object.
    /// </summary>
    /// <param name = "_numOfKeys">The number of keys.</param>
    /// <param name = "_numfData">The number of data.</param>
    /// <param name = "_sorting">The sorting factor.</param>
    /// <param name = "_expSumUp">Exported sum data.</param>
    /// <returns>A new <c>KeySum</c> object.</returns>
    public static KeySum construct(int _numOfKeys = 0,
             int       _numfData  = 0,
             int       _sorting   = 0,
             container _expSumUp  = connull())
    {
        return new KeySum(_numOfKeys, _numfData, _sorting, _expSumUp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(int       _numOfKeys = 0,
             int       _numfData  = 0,
             int       _sorting   = 0,
             container _expSumUp  = connull()   )
    {
        numOfKeys   = _numOfKeys;
        numOfData   = _numfData;
        sorting     = _sorting;

        if (_expSumUp)
        {
            this.import(_expSumUp);
        }

        if (! numOfData)
        {
            this.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfTrans</Name>
				<Source><![CDATA[
    int numOfTrans()
    {
        return numOfTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    void reset()
    {
        listKey        = connull();
        listData       = connull();
        totals         = connull();
        numOfTrans    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subKeySum</Name>
				<Source><![CDATA[
    void subKeySum(KeySum   markup)
    {
        int     idx;
        int     idxMax = markup.numOfTrans();

        int     x;
        int     xMax;

        container data;

        while (idx < idxMax)
        {
            idx += 1;

            if (numOfData > 1)
            {
                data = markup.index2Data(idx);
                xMax = conlen(data);

                x = 0;
                while (x < xMax)
                {
                    x += 1;
                    data = this.conPokeForSumDataTypes( data, x, -1 * conpeek(data,x));
                }

                this.updateNow( markup.index2Key(idx), data );
            }
            else
            {
                this.updateNow( markup.index2Key(idx), -1*markup.index2Data(idx) );
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>total</Name>
				<Source><![CDATA[
    anytype total()
    {
        if (numOfData > 1)
        {
            return totals;
        }
        else
        {
            return conpeek(totals,1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the data at the specified Key.
    /// </summary>
    /// <param name="Key">
    ///    The Key value where the data will be updated.
    /// </param>
    /// <param name="Data">
    ///    The update data.
    /// </param>
    /// <remarks>
    ///    If there is no data at the position, this method creates a new entry for the data.
    /// </remarks>
    void updateNow(anytype Key,
                 anytype Data   )
    {
        container       tmpSum;

        int             keyPos;
        int             idx;

        //find the Key in listKey
        keyPos   = confind(listKey,Key);

        //if it already exists
        if (keyPos)
        {
            if (numOfData > 1)
            {
                tmpSum = conpeek(listData,keyPos);

                for (idx =1;idx <=numOfData;idx++)
                {
                    tmpSum  = this.conPokeForSumDataTypes(tmpSum, idx, conpeek(tmpSum, idx) + conpeek(Data, idx));
                }
                //update the data
                listData = conpoke(listData,keyPos,tmpSum);
            }
            else
            {
                listData = this.conPokeForSumDataTypes(listData, keyPos, conpeek(listData, keyPos) + Data);
            }
        }
        else        //enter a new entry
        {
            if (sorting   == 0)
            {
                // No sorting : add it to the end of listKey
                keyPos   = conlen(listKey)+1;
            }
            else
            {
                keyPos   = 0;

                //find position to insert Key
                for (idx=1;idx<=numOfTrans;idx++)
                {
                    if ((sorting   > 0 && Key   > conpeek(listKey,idx)) ||
                        (sorting   < 0 && Key   < conpeek(listKey,idx))   )
                    {
                        keyPos   ++;
                    }
                    else
                    {
                        break;
                    }
                }
                keyPos   ++;
            }

            //add key in listKey at keyPos
            listKey   = this.conInsForSumDataTypes(listKey, keyPos, Key);
            listData  = this.conInsForSumDataTypes(listData, keyPos, Data);

            numOfTrans  ++;
        }

        if (totals)
        {
            if (numOfData > 1)
            {
                for (idx=1;idx <=numOfData;idx++)
                {
                    totals  = this.conPokeForSumDataTypes(totals, idx, conpeek(totals, idx) + conpeek(Data, idx));
                }
            }
            else
            {
                totals  = this.conInsForSumDataTypes(totals, 1, Data + conpeek(totals, 1));
            }
        }
        else
        {
            if (numOfData > 1)
            {
                totals  = Data;
            }
            else
            {
                totals  = this.conInsForSumDataTypes(totals, 1, Data);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>conInsForSumDataTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts an element of type anyType into a container.
    /// </summary>
    /// <param name = "_container">The container into which to insert elements.</param>
    /// <param name = "_start">The position at which to insert elements.</param>
    /// <param name = "_element">The element to insert into the container.</param>
    /// <returns>
    /// The new container with the inserted elements.
    /// </returns>
    /// <remarks>
    /// Use the standard conIns() if you know the data type of the element you are inserting.
    /// This method is to be used as a work around for the compile warning 'Attempt to insert an anytype value into a container.'.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The element type does not support a sum operation.
    /// </exception>
    private container conInsForSumDataTypes(container _container, int _start, anytype _element)
    {
        container newConIns;

        switch (typeOf(_element))
        {
            case Types::Container:
                container element = _element;
                newConIns = conIns(_container, _start, element);
                break;
            case Types::Integer:
                newConIns = conIns(_container, _start, any2Int(_element));
                break;
            case Types::Int64:
                newConIns = conIns(_container, _start, any2Int64(_element));
                break;
            case Types::Real:
                newConIns = conIns(_container, _start, any2Real(_element));
                break;
            case Types::Date:
                newConIns = conIns(_container, _start, any2Date(_element));
                break;
            case Types::String:
                newConIns = conIns(_container, _start, any2Str(_element));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return newConIns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conPokeForSumDataTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies a container by replacing one of the existing elements.
    /// </summary>
    /// <param name = "_container">The container to modify.</param>
    /// <param name = "_start">The position of the element to replace.</param>
    /// <param name = "_element">Element to replace.</param>
    /// <returns>
    /// The new container with the inserted elements.
    /// </returns>
    /// <remarks>
    /// Use the standard conPoke() if you know the data type of the element you are inserting.
    /// This method is to be used as a work around for the compile warning 'Attempt to insert an anytype value into a container.'.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The element type does not support a sum operation.
    /// </exception>
    private container conPokeForSumDataTypes(container _container, int _start, anytype _element)
    {
        container newConPoke;

        switch (typeOf(_element))
        {
            case Types::Container:
                container element = _element;
                newConPoke = conPoke(_container, _start, element);
                break;
            case Types::Integer:
                newConPoke = conPoke(_container, _start, any2Int(_element));
                break;
            case Types::Int64:
                newConPoke = conPoke(_container, _start, any2Int64(_element));
                break;
            case Types::Real:
                newConPoke = conPoke(_container, _start, any2Real(_element));
                break;
            case Types::Date:
                newConPoke = conPoke(_container, _start, any2Date(_element));
                break;
            case Types::String:
                newConPoke = conPoke(_container, _start, any2Str(_element));
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return newConPoke;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>