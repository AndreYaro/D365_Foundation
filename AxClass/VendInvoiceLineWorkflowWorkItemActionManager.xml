<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceLineWorkflowWorkItemActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceLineWorkflowWorkItemActionManager</c> class manages the workitem actions for vendor invoices line workflows.
/// </summary>
internal final class VendInvoiceLineWorkflowWorkItemActionManager extends VendInvoiceWorkflowWorkItemActionManager
{
    private VendInvoiceInfoLine vendInvoiceInfoLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    internal static VendInvoiceLineWorkflowWorkItemActionManager newFromVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        VendInvoiceLineWorkflowWorkItemActionManager vendInvoiceLineWorkflowWorkItemActionManager = new VendInvoiceLineWorkflowWorkItemActionManager();
        vendInvoiceLineWorkflowWorkItemActionManager.vendInvoiceInfoLine = _vendInvoiceInfoLine;
        vendInvoiceLineWorkflowWorkItemActionManager.parmVendInvoiceInfoTable(VendInvoiceInfoTable::findTableRefId(_vendInvoiceInfoLine.TableRefId));

        return vendInvoiceLineWorkflowWorkItemActionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WorkflowWorkItemTable workflowWorkItemTable = _args.caller().getActiveWorkflowWorkItem();

        if (workflowWorkItemTable.RecId != 0
            && _args.record()
            && _args.record().TableId == tableNum(VendInvoiceInfoLine))
        {
            VendInvoiceLineWorkflowWorkItemActionManager vendInvoiceLineWorkflowWorkItemActionManager = VendInvoiceLineWorkflowWorkItemActionManager::newFromVendInvoiceInfoLine(
                VendInvoiceInfoLine::findRecId(workflowWorkItemTable.RefRecId));
            vendInvoiceLineWorkflowWorkItemActionManager.parmArgs(_args);
            vendInvoiceLineWorkflowWorkItemActionManager.parmCaller(_args.caller());
            vendInvoiceLineWorkflowWorkItemActionManager.run();
        }
        else
        {
            VendInvoiceWorkflowWorkItemActionManager::main(_args);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    protected void checkBudget()
    {
        super();

        if (Ledger::isLedgerBudgetControlEnabled())
        {
            SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(
                vendInvoiceInfoLine,
                SourceDocumentLineAccountingStatus::None,
                this.parmCaller() as SourceDocumentProcessorCaller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocumentEventLog</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void insertDocumentEventLog(str _menuItemName)
    {
        super(_menuItemName);

        VendInvoiceAutomationLineWorkflowManualAction lineAction;

        switch (_menuItemName)
        {
            // Approved
            case menuitemActionStr(VendInvoiceLineApprovalApprove):
                lineAction = VendInvoiceAutomationLineWorkflowManualAction::Approved;
                break;

            // Delegated
            case menuitemActionStr(VendInvoiceLineApprovalDelegate):
                lineAction = VendInvoiceAutomationLineWorkflowManualAction::Delegated;
                break;

            // Change requested
            case menuitemActionStr(VendInvoiceLineApprovalRequestChange):
                lineAction = VendInvoiceAutomationLineWorkflowManualAction::ChangeRequested;
                break;

            // Rejected or Returned
            case menuitemActionStr(VendInvoiceLineApprovalReject):
                lineAction = VendInvoiceAutomationLineWorkflowManualAction::Rejected;
                break;

            // Unknown action
            default:
                lineAction = VendInvoiceAutomationLineWorkflowManualAction::None;
                break;
        }

        DocumentEventLogRequest documentEventLogRequest = new DocumentEventLogRequest();
        documentEventLogRequest.eventEnumId = enumNum(VendInvoiceAutomationLineWorkflowManualAction);
        documentEventLogRequest.eventEnumValue = lineAction;
        documentEventLogRequest.sourceRecId = vendInvoiceInfoLine.RecId;
        documentEventLogRequest.sourceTableId = tableNum(VendInvoiceInfoLine);

        DocumentEventLog::logDocumentEvent(documentEventLogRequest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>