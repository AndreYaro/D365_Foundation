<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRecord_NACHA</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendOutPaymRecord_NACHA extends VendOutPaymRecord
{
    container record;
    boolean endOfText;

    #define.NACHARecLen(94)
    #define.RoutingNumLength(8)

    #define.recordTypeCodeOffset(1)
    #define.transactionCodeOffset(2)
    #define.receivingDFI_IdentificationLength(8)
    #define.receivingDFI_IdentificationOffset(4)
    #define.checkDigitOffset(12)
    #define.DFI_AccountNumberOffset(13)
    #define.amountOffset(30)
    #define.identificationNumberLength(15)
    #define.identificationNumberOffset(40)
    #define.discretionaryDataLength(2)
    #define.discretionaryDataOffset(77)
    #define.addendaRecordIndicatorOffset(79)

    str #NACHARecLen outputRecord;
    str #RoutingNumLength bankRoutingNumber ;
    VendBankAccount vendBankAccount;
    AmountCur transactionAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null, RunbaseProgress _runbaseProgress = null)
    {
        VendPaymModeSpec vendPaymModeSpec;
        boolean ret = super(_ledgerJournalTrans, _runbaseProgress);

        if (!_ledgerJournalTrans.PaymSpec)
        {
            ret = checkFailed(strfmt("@SYS73168", custVendOutPaym.interfaceName(), fieldpname(LedgerJournalTrans, PaymSpec)));
        }

        if (ret)
        {
            // Change company to ensure that this validation is being done in the same company as the Company account
            //  on the payment journal line
            changecompany(custVendPaym.ledgerJournalTrans().Company)
            {
                // The Payment Mode (Method of Payment) can have only one payment specification for NACHA...
                select count(RecId) from vendPaymModeSpec
                       where vendPaymModeSpec.PaymMode == _ledgerJournalTrans.PaymMode;

                if (vendPaymModeSpec.RecId > 1)
                {
                    // Payments made via the '%1' method of payment can only have one payment specification.
                    ret = checkFailed(strfmt("@SYS98110", _ledgerJournalTrans.PaymMode));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField01</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Record Type Code field in the NACHA CCD, CTX, IAT, or PPD detail record.
    /// </summary>
    /// <remarks>
    /// The record type code will always be 6 for a NACHA detail record.
    /// </remarks>
    // Record Type Code -- Always '6' for a NACHA detail record
    //
    protected void fillField01()
    {
        #define.recordTypeCode('6')

        this.strInsert(#recordTypeCode, #recordTypeCodeOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField02</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the transaction code in the NACHA CCD, CTX, IAT, or PPD detail record.
    /// </summary>
    // Transaction Code:
    //
    // Module               Bank Account Type   Transaction Code Value
    // -------------------- ------------------- ----------------------
    // Accounts Payable     Checking            22
    // Accounts Payable     Savings             32
    // Accounts Receivable  Checking            27
    // Accounts Receivable  Savings             37
    //
    protected void fillField02()
    {
        this.strInsert(custVendOutPaym.getTransactionCode(vendBankAccount), #transactionCodeOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField03</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the receiving DFI identification in the NACHA CCD, CTX, IAT, or PPD detail record.
    /// </summary>
    /// <remarks>
    /// This is the eight digit bank routing number (excluding the check digit).
    /// </remarks>
    // Receiving DFI Identification (8 Digits Only - Exclude the Check Digit)
    protected void fillField03()
    {
        bankRoutingNumber = substr(custVendPaym.recieversBankRegistrationNumber(), 1, #receivingDFI_IdentificationLength);
        this.strInsert(bankRoutingNumber, #receivingDFI_IdentificationOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField04</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the check digit in the NACHA CCD, CTX, IAT, or PPD detail record.
    /// </summary>
    /// <remarks>
    /// This is the ninth digit of the bank routing number.
    /// </remarks>
    // Check Digit -- 9th digit of the Bank Routing Number (Registration Number)
    protected void fillField04()
    {
        this.strInsert(substr(custVendPaym.recieversBankRegistrationNumber(), 9, 1), #checkDigitOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField05</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the DFI account number in the NACHA CCD, CTX, or PPD detail record.
    /// </summary>
    /// <remarks>
    /// This is the bank account number of the receiver.
    /// </remarks>
    // DFI Account Number
    protected void fillField05()
    {
        this.strInsert(custVendPaym.recieversBankAccount(), #DFI_AccountNumberOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField06</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Amount in the NACHA CCD, CTX, or PPD detail record.
    /// </summary>
    // Amount in format $$$$$$$$cc
    protected void fillField06()
    {
        transactionAmount = custVendPaym.paymAmountInSendersCurrency();
        this.strInsert(custVendOutPaym.num2StrNACHA(transactionAmount, 10), #amountOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField07</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the Identification Number in the NACHA CCD, CTX, or PPD detail record.
    /// </summary>
    /// <remarks>
    /// This is the sender's identification of receiver or the vendor ID.
    /// </remarks>
    // Identification Number
    protected void fillField07()
    {
        this.strInsert(substr(custVendPaym.sendersIdentificationOfReciever(), 1, #identificationNumberLength), #identificationNumberOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField09</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the discretionary data field in the NACHA CCD or PPD detail record.
    /// </summary>
    /// <remarks>
    /// This is always blank.
    /// </remarks>
    // Discretionary Data       <BLANK>
    protected void fillField09()
    {
        #define.discData(' ')

        this.strInsert(strrep(#discData, #discretionaryDataLength), #discretionaryDataOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField10</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the addenda record indicator field in the NACHA CCD or PPD detail record.
    /// </summary>
    /// <remarks>
    /// This is always 0.
    /// </remarks>
    // Addenda Record Indicator -- Always '0' <ZERO>
    //
    // A value of '1' would indicate that one or more addenda records follow, '0' indicates no such record(s) is/are present.
    protected void fillField10()
    {
        #define.addendaIndicator('0')

        this.strInsert(#addendaIndicator, #addendaRecordIndicatorOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the output record.
    /// </summary>
    protected void fillRecord()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTraceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the trace number by concatenating the journal number and line number to create a number
    ///    that will be unique for most users.
    /// </summary>
    /// <returns>
    ///    The trace number.
    /// </returns>
    /// <remarks>
    ///    The concatenation is performed with the following limitations:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>The line number part of the trace number will be at least four characters long. This
    ///          allows for a minimum of 10,000 unique lines per journal.</description>
    ///       </item>
    ///       <item>
    ///          <description>If the journal number is shorter than 11 characters long, the number of characters
    ///          that the line number uses will grow to fill the 15 characters allowed for the trace
    ///          number.</description>
    ///       </item>
    ///       <item>
    ///          <description>If the journal number is longer than 11 characters, this method will use the
    ///          right-most 11 characters from the journal number when it generates the trace number.</description>
    ///       </item>
    ///       <item>
    ///          <description>If the line number is more than 9999, the right-most four characters of the line
    ///          number will be used.</description>
    ///       </item>
    ///       <item>
    ///          <description>If the line number is only four characters long, the numbers will wrap around to 0000
    ///          each 10,000 lines and increment from there. This will make this trace number non-unique and not
    ///          suited for electronic reconcile, but sufficiently unique for most manual needs.</description>
    ///       </item>
    ///       <item>
    ///          <description />
    ///       </item>
    ///       <item>
    ///          <description>Examples:</description>
    ///       </item>
    ///       <item>
    ///          <description>Journal Number: 000097_003</description>
    ///       </item>
    ///       <item>
    ///          <description>Line Number:    1</description>
    ///       </item>
    ///       <item>
    ///          <description>Trace Number: "000097_00300001"</description>
    ///       </item>
    ///       <item>
    ///          <description />
    ///       </item>
    ///       <item>
    ///          <description>Journal Number: 1234567890_003</description>
    ///       </item>
    ///       <item>
    ///          <description>Line Number:    11036</description>
    ///       </item>
    ///       <item>
    ///          <description>Trace Number: "4567890_0031036"</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    // Trace Number
    //
    // This is a number that we can use to attempt to uniquely identify the transaction.
    // Ideally, this would consist of an EFT Number, which would function like a Check Number.
    //
    // But because of time constraints, the Trace Number will be generated by concatinating
    // the Journal Numer & Sequence Number with the following limitations to create a number that
    // will be unique for most users:
    //
    //  The Seq Number portion of the Trace Number will be at least four characters,
    //  allowing for a minimum of 10000 unique lines per journal.  If the Journal Number
    //  is shorter than 11 characters, the number of characters the seq number uses will
    //  grow to fill the 15 characters allowed for the Trace Number.
    //  If the Journal Number is longer than 11 characters, this method will use the
    //  right-most 11 characters from the Journal Number when generating the Trace Number.
    //  If the Seq Number is greater than 9999, the right-most three characters of the
    //  Line Number will be used.
    //  So in the situation where there are only four characters for the seq number, the
    //  numbers will wrap-around to 0000 each 10000 lines and increment from there, which will
    //  make this trace number non-unique and not suitable for electronic reconcile, but it
    //  should be unique enough for most manual needs.
    //
    //  EXAMPLES:
    //      Journal Number: 000097_003
    //      Seq Number:     1
    //      Trace Number:   "000097_00300001"
    //
    //      Journal Number: 1234567890_003
    //      Seq Number:     11036
    //      Trace Number:   "4567890_0031036"
    //

    public str generateTraceNumber()
    {
        #define.MaxJournalNumLength(11)
        #define.MaxLen(15)
        #define.MinSeqLen(4)

        str journalNumber;
        str lineNumber;
        int strLength;

        journalNumber = custVendPaym.ledgerJournalTrans().JournalNum;

        strLength = strlen(journalNumber);

        if (strLength <= #MaxJournalNumLength)
        {
            // If the length of the Journal Number is less than 12 characters,
            // then we can use four or more characters from the line number:
            lineNumber = num2Str0(custVendOutPaym.getNextSequenceNumber(), #MaxLen);
            lineNumber = substr(lineNumber, strLength + 1, #MaxLen - strLength);
        }
        else
        {
            // If the length of the Journal Number is greater than 11 characters,
            // we need to shorten the Journal Number (use right-most characters)
            // to allow for four characters from the line number:
            journalNumber = substr(journalNumber, strLength - 10, #MaxJournalNumLength);
            lineNumber = num2Str0(custVendOutPaym.getNextSequenceNumber(), #MaxLen);
            lineNumber = substr(lineNumber, #MaxJournalNumLength + 1, #MinSeqLen);
        }

        return journalNumber + lineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the output record.
    /// </summary>
    protected void initRecord()
    {
        int i;

        #define.nullStr('')

        record = connull();

        for (i = 1; i <= #NACHARecLen; i++)
        {
            record += #nullStr;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outPut</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the payment detail to the Electronic Funds Transfer (EFT) output file and increments the totals for the transaction.
    /// </summary>
    public void outPut()
    {
        custVendOutPaym.total(custVendPaym.paymCurrencyCode(), custVendPaym.paymAmountInSendersCurrency());

        this.initRecord();
        this.fillRecord();
        file.writeExp(record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the supplied data at the instructed position in the NACHA payment record.
    /// </summary>
    /// <param name="_fieldValue">
    /// The data to write.
    /// </param>
    /// <param name="_fieldPosition">
    /// The position at which to write.
    /// </param>
    protected void strInsert(str _fieldValue, int _fieldPosition)
    {
        //  Poke a supplied string into the "outputRecord" at a given position
        outputRecord = strpoke(outputRecord, _fieldValue, _fieldPosition);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>