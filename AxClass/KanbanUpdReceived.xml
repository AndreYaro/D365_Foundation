<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanUpdReceived</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanUpdReceived</c> class performs status updates for kanbans with target status set to
///    the Received status.
/// </summary>
public class KanbanUpdReceived extends KanbanUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyHandlingUnitEmptyPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Skips to the <c>Empty</c> kanban status if the <c>HandlingUnitEmptyPolicy</c> enumeration type is
    ///    set to the <c>LeanHandlingUnitEmptyPolicy::HandlingUnit</c> enumeration value.
    /// </summary>
    protected void applyHandlingUnitEmptyPolicy()
    {
        // If the handling unit empty policy is Handling Unit
        // (which means that when a kanban is received, it is directly emptied)
        if (kanban.kanbanRule().HandlingUnitEmptyPolicy == LeanHandlingUnitEmptyPolicy::HandlingUnit)
        {
            // Start a change of the current kanban to the Empty status.
            Args args = new Args();
            args.record(kanban);
            args.parmEnumeration(KanbanMultiMode::Silent);
            KanbanMultiKanbanEmpty::main(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedEventKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes unused event kanbans that have the handling unit status set to the <c>NotAssigned</c>
    ///    enumeration value.
    /// </summary>
    protected void deleteUnusedEventKanbans()
    {
        ReqEventProcessDeleteUnusedKanban::newStandard().run(kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endAllKanbanJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Receives all kanban jobs that are related to the current kanban.
    /// </summary>
    protected void endAllKanbanJobs()
    {
        KanbanStatus            kanbanStatusLocal = kanban.status(updateJobs);
        KanbanJob               kanbanJob;

        if (kanbanStatusLocal.mustSynchronizeKanbanJobStatus())
        {
            LeanKanbanJobStatus leanKanbanJobStatus = kanbanStatusLocal.correspondingKanbanJobStatus(kanban.Status);

            ttsbegin;
            while select kanbanJob
                order by Sequence
                where kanbanJob.Kanban == kanban.RecId &&
                      kanbanJob.Status != leanKanbanJobStatus
            {
                KanbanJobStatus kanbanJobStatus = KanbanJobStatus::newKanbanJobKanbanStatusUpdate(kanbanJob,kanbanStatusUpdate);
                kanbanJobStatus.run(leanKanbanJobStatus);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRunStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Skip to the <c>Empty</c> kanban status if it is established by the kanban rule.
    /// </summary>
    protected void postRunStatus()
    {
        super();

        this.triggerEventOnParent();
        this.applyHandlingUnitEmptyPolicy();
        this.deleteUnusedEventKanbans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions for the Received status update.
    /// </summary>
    protected void runStatus()
    {
        this.setQuantity();
        this.setStatus(LeanKanbanStatus::Received);
        this.updateKanban();
        this.endAllKanbanJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the received quantity of the kanban.
    /// </summary>
    protected void setQuantity()
    {
        kanban.QuantityReceived  = kanbanStatusUpdate.QuantityReceived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanUpd construct()
    {
        return new KanbanUpdReceived();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes event processing for a record.
    /// </summary>
    /// <param name="_common">
    /// The record to process.
    /// </param>
    protected void processEvent(Common _common)
    {
        ReqEventProcessKanban::newStandard(_common, false).runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>triggerEventOnParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Triggers event processing for the parent issue of the kanban.
    /// </summary>
    protected void triggerEventOnParent()
    {
        if (kanban.QuantityReceived < kanban.QuantityOrdered
            && kanban.KanbanRule().ReplenishmentStrategy == LeanReplenishmentStrategy::Event)
        {
            // When the entire quantity could not be received then rerun the rule on the original record
            // to ensure that new kanbans for the remaining quantity will be created
            ReqPeggingTreeNodeKanban reqPeggingTreeNodeKanban = ReqPeggingTreeNode::newStandard(kanban);
            Common parentRecord = reqPeggingTreeNodeKanban.parent();

            if (parentRecord &&
                (parentRecord is SalesLine || parentRecord is KanbanJobPickingList))
            {
                this.processEvent(parentRecord);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
