<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrCapResConflictCheckIntervals</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WrkCtrCapResConflictCheckIntervals</c> class encapsulates a list of intervals that should be
/// checked for conflicts during the resource scheduling.
/// </summary>
class WrkCtrCapResConflictCheckIntervals implements Microsoft.Dynamics.AX.Planning.JobScheduling.IWrkCtrCapResConflictCheckIntervals
{
    RecordInsertList intervalsList;
    guid conflictCheckSessionId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addIntervalToBeChecked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an interval to be checked for new reservations.
    /// </summary>
    /// <param name="_resourceId">
    /// The resource ID of the resource or resource group for which to perform the capacity conflict check.
    /// </param>
    /// <param name="_intervalStartDate">
    /// The capacity conflict check interval start date.
    /// </param>
    /// <param name="_intervalStartTime">
    /// The capacity conflict check interval start time.
    /// </param>
    /// <param name="_intervalEndDate">
    /// The capacity conflict check interval end date.
    /// </param>
    /// <param name="_intervalEndTime">
    /// The capacity conflict check interval end time.
    /// </param>
    /// <param name="_timeStampCutoff">
    /// The cutoff timestamps used as lower bound to find new reservations.
    /// </param>
    /// <param name="_loadJobSchedulingCapacity">
    /// A Boolean value that indicates whether to consider job scheduling reservations as new reservations.
    /// </param>
    /// <param name="_loadOperationSchedulingCapacity">
    /// A Boolean that indicates whether to consider operation scheduling reservations as new reservations.
    /// </param>
    public void addIntervalToBeChecked(
        WrkCtrId    _resourceId,
        date        _intervalStartDate,
        timeofday   _intervalStartTime,
        date        _intervalEndDate,
        timeofday   _intervalEndTime,
        int64       _timeStampCutoff,
        boolean     _loadJobSchedulingCapacity,
        boolean     _loadOperationSchedulingCapacity)
    {
        WrkCtrCapResConflictCheck conflictCheckInterval;

        conflictCheckInterval.ResourceId = _resourceId;
        conflictCheckInterval.IntervalStartDate = _intervalStartDate;
        conflictCheckInterval.IntervalStartTime = _intervalStartTime;
        conflictCheckInterval.IntervalEndDate = _intervalEndDate;
        conflictCheckInterval.IntervalEndTime = _intervalEndTime;
        conflictCheckInterval.TimestampCutoff = _timeStampCutoff;
        conflictCheckInterval.LoadJobSchedulingCapacity = _loadJobSchedulingCapacity;
        conflictCheckInterval.LoadOperationSchedulingCapacity = _loadOperationSchedulingCapacity;
        conflictCheckInterval.SessionId = conflictCheckSessionId;

        intervalsList.add(conflictCheckInterval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up the conflict check data for the current conflict check session ID.
    /// </summary>
    /// <param name="_conflictCheckSessionId">
    /// The ID used to check for capacity conflicts.
    /// </param>
    public void cleanUp(guid _conflictCheckSessionId)
    {
        WrkCtrCapResConflictCheck wrkCtrCapResConflictCheck;

        delete_from WrkCtrCapResConflictCheck
            where WrkCtrCapResConflictCheck.SessionId == _conflictCheckSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Flushes the conflict check intervals to the database.
    /// </summary>
    public void flushData()
    {
        intervalsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConflictCheckSessionId</Name>
				<Source><![CDATA[
    public guid getConflictCheckSessionId()
    {
        return conflictCheckSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        intervalsList = new RecordInsertList(tableNum(WrkCtrCapResConflictCheck));
        conflictCheckSessionId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConflictCheckSessionId</Name>
				<Source><![CDATA[
    public guid parmConflictCheckSessionId(guid _conflictCheckSessionId = conflictCheckSessionId)
    {
        conflictCheckSessionId = _conflictCheckSessionId;
        return conflictCheckSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WrkCtrCapResConflictCheckIntervals construct()
    {
        return new WrkCtrCapResConflictCheckIntervals();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>