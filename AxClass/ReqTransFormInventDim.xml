<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormInventDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransFormInventDim extends ReqTransForm implements ButtonStateProvider
{
    InventDimCtrl_Frm           inventDimFormSetup;

    // InventDim

    InventDim                   inventDim;
    FormDataSource              inventDim_DS;
    InventDimParm               inventDimParmEnabled;

    // Listpages and FormButtonManager
    FormButtonManager           formButtonManager;
    ReqTrans                    reqTransCurrent;
    boolean                     reqTransCurrentCached;
    boolean                     markedRecordsCached;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkButtonRule</Name>
				<Source><![CDATA[
    boolean checkButtonRule(str _ruleFunctionName)
    {
        DictClass dictClass;

        // just call here all the rules eval methods
        dictClass = new DictClass(classnum(ReqTransFormInventDim));

        return dictClass.callObject(_ruleFunctionName, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleBOMOrProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if BOM and production functionality should be enabled.
    /// </summary>
    /// <returns>
    ///    true if BOM and production functionality should be enabled, false otherwise.
    /// </returns>
    private boolean checkRuleBOMOrProduction()
    {
        return reqTransCurrent.RecId  && (reqTransCurrent.RefType == ReqRefType::BOMPlannedOrder || reqTransCurrent.RefType == ReqRefType::Production);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleDerivedRequirements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether derived requirements functionality should be enabled.
    /// </summary>
    /// <returns>
    ///    true if derived requirements functionality should be enabled; otherwise, false.
    /// </returns>
    private  boolean checkRuleDerivedRequirements()
    {
        return reqTransCurrent.RecId && reqTransCurrent.isReceipt() && ReqTrans::derivedRefType(reqTransCurrent.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUsingBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected planned order has a bill of materials attached.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order has a bill of materials attached; otherwise, false.
    /// </returns>
    protected boolean checkRuleUsingBOM()
    {
        return reqTransCurrent.RecId  && ReqTrans::refTypeCanHaveBOM(reqTransCurrent.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUsingRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the selected planned order has a route attached.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order has a route attached; otherwise, false.
    /// </returns>
    protected boolean checkRuleUsingRoute()
    {
        return reqTransCurrent.RecId  && ReqTrans::refTypeCanHaveRoute(reqTransCurrent.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleUsingWorkCenterReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether functionality related to the scheduling of work centers should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the functionality related to the scheduling of work centers should be enabled; otherwise,
    ///    false.
    /// </returns>
    protected boolean checkRuleUsingWorkCenterReservation()
    {
        return reqTransCurrent.RecId && ReqTrans::refTypeCanReserveWorkCenter(reqTransCurrent.RefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    void clearCache()
    {
        markedRecordsCached = false;
        reqTransCurrentCached = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clickedButtonReqRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines which action should be taken based on the <c>RefType</c> value of the active
    ///    <c>ReqTrans</c> record.
    /// </summary>
    /// <returns>
    ///    <c>NoYes::Yes</c> if the <c>RefType</c> value is <c>BOMPlannedOrder</c>, <c>NoYes::No</c> if the
    ///    <c>RefType</c> value is <c>Production</c>.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <c>RefType</c> value is not either <c>BOMPlannedOrder</c> or <c>Production</c>.
    /// </exception>
    public NoYes clickedButtonReqRoute()
    {
        NoYes ret;

        switch (reqTransCurrent.RefType)
        {
            case ReqRefType::Production :
                ret = NoYes::No;
                break;
            case ReqRefType::BOMPlannedOrder:
                ret = NoYes::Yes;
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReqPlanIdSched</Name>
				<Source><![CDATA[
    ReqPlanId defaultReqPlanIdSched()
    {
        return ReqPlanSched::defaultStaticId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the states of the form buttons.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    Specifies the name of the function which implements the rule logic.
    /// </param>
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    void determineButtonStates(str _ruleFunctionName)
    {
        reqTrans_ds.leaveRecord();

        reqTransCurrent = ReqTrans::findRecId(reqTrans.RecId);

        reqTransCurrentCached = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementUpdateDesign</Name>
				<Source><![CDATA[
    void elementUpdateDesign(InventDimFormDesignUpdate mode)
    {
        switch (mode)
        {
            case InventDimFormDesignUpdate::Init        :
                this.parmInventDimFormSetup().parmDimParmVisibleGrid(this.parmInventDimParmEnabled().data());
                
            case InventDimFormDesignUpdate::Active      :
                this.parmInventDimFormSetup().formSetControls(true);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        super();

        this.elementUpdateDesign(InventDimFormDesignUpdate::Init);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimDSInitPost</Name>
				<Source><![CDATA[
    public void inventDimDSInitPost(InventDim _inventDim)
    {
        inventDim       = _inventDim;
        inventDim_DS    = FormDataUtil::getFormDataSource(_inventDim);

        inventDim_DS.query().dataSourceTable(tablenum(InventDim)).addSortIndex(indexnum(InventDim,DimIdIdx));
        inventDim_DS.query().dataSourceTable(tablenum(InventDim)).indexIsHint(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    Object inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormButtonManager</Name>
				<Source><![CDATA[
    FormButtonManager parmFormButtonManager(FormButtonManager _formButtonManager = formButtonManager)
    {
        if (!prmisdefault(_formButtonManager))
        {
            formButtonManager = _formButtonManager;
        }
        return formButtonManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimFormSetup</Name>
				<Source><![CDATA[
    protected InventDimCtrl_Frm parmInventDimFormSetup()
    {
        if (!inventDimFormSetup)
        {
            inventDimFormSetup = InventDimCtrl::newFromForm(formRun);
        }

        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmEnabled</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmEnabled(InventDimParm _inventDimParm = inventDimParmEnabled)
    {
        inventDimParmEnabled = _inventDimParm;
        
        return inventDimParmEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmEnabled</Name>
				<Source><![CDATA[
    private void initInventDimParmEnabled()
    {
        inventDimParmEnabled.initCovDimAllGrp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data source instances that are used by the helper class.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>reqtrans</c> table buffer.
    /// </param>
    /// <param name="datasources2">
    ///    An <c>inventDim</c> table buffer.
    /// </param>
    /// <param name="datasources3">
    ///    Not used.
    /// </param>
    /// <param name="datasources4">
    ///    Not used.
    /// </param>
    /// <param name="datasources5">
    ///    Not used.
    /// </param>
    [SuppressBpWarning('BPParameterNotUsed', 'The parameters _datasources3, _datasources4 and _datasources5 are not used but they are preserved due to API compatibility.')]
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
        reqTrans        = datasources1;
        reqTrans_ds     = FormDataUtil::getFormDataSource(reqTrans);
        inventDim       = datasources2;
        inventDim_DS    = FormDataUtil::getFormDataSource(inventDim);

        if (!inventDim_DS)
        {
            checkFailed(strfmt("@SYS117927", classId2Name(classidget(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    public static ReqTransFormInventDim newFormRun(FormRun _formRun)
    {
        ReqTransFormInventDim reqTransForm;
        reqTransForm = new ReqTransFormInventDim(_formRun);

        reqTransForm.initInventDimParmEnabled();

        return reqTransForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>