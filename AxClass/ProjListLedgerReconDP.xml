<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListLedgerReconDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListLedgerReconDP</c> class contains the declaration of the global variables to use in
///    this class.
/// </summary>
/// <remarks>
///    This class provides methods to retrieve data which is used by the
///    <c>ProjListLedgerReconPayroll</c>, <c>ProjListLedgerReconProfitLoss</c>, and
///    <c>ProjListledgerReconWIP</c> reports.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(ProjListLedgerRecon)),
    SRSReportParameterAttribute(classstr(ProjListLedgerReconContract))
]
public class ProjListLedgerReconDP extends SRSReportDataProviderPreProcessTempDB
{
    AmountMST                   emplCost, costCost, itemCost, costTotal, accruedTurnover;
    AmountMST                   invoicedTurnover, invoiceTotal, ledgerAmountMST, cost, production;
    AmountMST                   sales, profit, brutto, onAccount, netto;
    ProjId                      projId, oldProjId;
    LedgerDimensionDefaultAccount oldLedgerDimension;
    ProjLedgerSorting           projLedgerSorting, projView;
    boolean                     skipZero, printTotal;
    Level                       level;
    int                         menuItemType;
    TransDate                   fromDate , toDate;
    Map                         mapProjId;
    QueryRun                    queryRun;
    ProjListLedgerReconTmp      tmpProjTrans;
    TmpProjTransWIPOperation    tmpProjTransWIPOperation;
    TmpProjTransWIP             tmpProjTransWIP;
    ProjId                      projIdRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the temporary project transaction field.
    /// </summary>
    /// <returns>
    ///    The temporary project transaction field.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProjListLedgerReconTmp')
    ]
    public ProjListLedgerReconTmp getTmpProjTrans()
    {
        select tmpProjTrans;
        return tmpProjTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpProjWIPLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or inserts the values in the temporary table at the line level.
    /// </summary>
    /// <param name="_projTransPosting">
    /// A <c>ProjTransPosting</c> record to use to update or insert.
    /// </param>
    /// <param name="_ledgerDimension">
    /// A <c>_ledgerDimension</c> value to use to update or insert.
    /// </param>
    private void initTmpProjWIPLine(ProjTransPosting _projTransPosting, LedgerDimensionDefaultAccount _ledgerDimension)
    {
        DimensionProvider dimProvider = new DimensionProvider();

        if (!mapProjId)
        {
            mapProjId = new Map(Types::String, Types::String);
        }

        projId = ProjListLedgerTrans::setProjId(_projTransPosting.ProjId,level,mapProjId);

        if (menuItemType == 2)
        {
            select forupdate tmpProjTransWIP
                where tmpProjTransWIP.ProjId          == projId &&
                      tmpProjTransWIP.LedgerDimension == _ledgerDimension &&
                      tmpProjTransWIP.LineTotal       == ProjLineTotal::Line;

            if (tmpProjTransWIP.RecId)
            {
                tmpProjTransWIP.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIP.LineTotal = ProjLineTotal::Line;
                tmpProjTransWIP.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjPosting, LedgerDimension));
                tmpProjTransWIP.update();
            }
            else
            {
                tmpProjTransWIP.ProjId = projId;
                tmpProjTransWIP.LedgerDimension  = _ledgerDimension;
                tmpProjTransWIP.LineTotal = ProjLineTotal::Line;
                tmpProjTransWIP.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIP.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjPosting, LedgerDimension));
                tmpProjTransWIP.insert();
            }
        }
        else
        {
            select forupdate tmpProjTransWIPOperation
                where tmpProjTransWIPOperation.ProjId          == projId &&
                      tmpProjTransWIPOperation.LedgerDimension == _ledgerDimension &&
                      tmpProjTransWIPOperation.LineTotal       == ProjLineTotal::Line;

            if (tmpProjTransWIPOperation.RecId)
            {
                tmpProjTransWIPOperation.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIPOperation.LineTotal = ProjLineTotal::Line;
                tmpProjTransWIPOperation.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjTransPosting, LedgerDimension));
                tmpProjTransWIPOperation.update();
            }
            else
            {
                tmpProjTransWIPOperation.ProjId = projId;
                tmpProjTransWIPOperation.LedgerDimension = _ledgerDimension;
                tmpProjTransWIPOperation.LineTotal = ProjLineTotal::Line;
                tmpProjTransWIPOperation.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjTransPosting, LedgerDimension));
                tmpProjTransWIPOperation.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIPOperation.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpProjWIPTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or inserts the values in the temporary table at the total level.
    /// </summary>
    /// <param name="_projTransPosting">
    /// The <c>ProjTransPosting</c> table to use to manipulate.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The <c>_ledgerDimension</c> value to use to manipulate value.
    /// </param>
    private void initTmpProjWIPTotal(ProjTransPosting _projTransPosting, LedgerDimensionDefaultAccount _ledgerDimension)
    {
        ProjId              totalProjID = "@SYS9242";
        DimensionProvider   dimProvider = new DimensionProvider();

        if (menuItemType == 2)
        {
            select forupdate tmpProjTransWIP
                where tmpProjTransWIP.LedgerDimension == _ledgerDimension &&
                      tmpProjTransWIP.LineTotal == ProjLineTotal::Total;

            if (tmpProjTransWIP.RecId)
            {
                tmpProjTransWIP.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIP.LineTotal = ProjLineTotal::Total;
                tmpProjTransWIP.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjPosting, LedgerDimension));
                tmpProjTransWIP.update();
            }
            else
            {
                tmpProjTransWIP.ProjId = totalProjID;
                tmpProjTransWIP.LedgerDimension  = _ledgerDimension;
                tmpProjTransWIP.LineTotal = ProjLineTotal::Total;
                tmpProjTransWIP.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIP.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjPosting, LedgerDimension));
                tmpProjTransWIP.insert();
            }
        }
        else
        {
            select forupdate tmpProjTransWIPOperation
                where tmpProjTransWIPOperation.LedgerDimension == _ledgerDimension &&
                      tmpProjTransWIPOperation.LineTotal == ProjLineTotal::Total;

            if (tmpProjTransWIPOperation.RecId)
            {
                tmpProjTransWIPOperation.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIPOperation.LineTotal = ProjLineTotal::Total;
                tmpProjTransWIPOperation.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjPosting, LedgerDimension));
                tmpProjTransWIPOperation.update();
            }
            else
            {
                tmpProjTransWIPOperation.ProjId = totalProjID;
                tmpProjTransWIPOperation.LedgerDimension = _ledgerDimension;
                tmpProjTransWIPOperation.LineTotal = ProjLineTotal::Total;
                tmpProjTransWIPOperation.DimensionDisplayValue = dimProvider.getStringValueFromCursor(_projTransPosting, fieldstr(ProjPosting, LedgerDimension));
                tmpProjTransWIPOperation.addFromProjTransPosting(_projTransPosting);
                tmpProjTransWIPOperation.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpProjTrans</Name>
				<Source><![CDATA[
/// <summary>
    ///    Gets the specified record and inserts it in the temporary table.
    /// </summary>
    /// <param name="_tmpProjTransWIPOperation">
    ///    The <c>TmpProjTransWIPOperation</c> table.
    /// </param>
    /// <param name="_tmpProjTransWIP">
    ///    The <c>TmpProjTransWIP</c> table.
    /// </param>
    public void insertTmpProjTrans(TmpProjTransWIPOperation _tmpProjTransWIPOperation,
                                    TmpProjTransWIP _tmpProjTransWIP)
    {
        if (menuItemType ==  2)
        {
            tmpProjTrans.ProjId             =   _tmpProjTransWIP.ProjId;
            tmpProjTrans.Cost               =   _tmpProjTransWIP.Cost;
            tmpProjTrans.Production         =   _tmpProjTransWIP.Production;
            tmpProjTrans.Netto              =   _tmpProjTransWIP.Netto;
            tmpProjTrans.OnAccount          =   _tmpProjTransWIP.OnAccount;
            tmpProjTrans.Brutto             =   _tmpProjTransWIP.Brutto;
            tmpProjTrans.Sales              =   _tmpProjTransWIP.Sales;
            tmpProjTrans.Profit             =   _tmpProjTransWIP.Profit;
            tmpProjTrans.Ledger             =   ledgerAmountMST;
            tmpProjTrans.Diff               =   _tmpProjTransWIP.Netto - ledgerAmountMST;
            tmpProjTrans.LineTotal          =   _tmpProjTransWIP.LineTotal;
            tmpProjTrans.DimensionDisplayValue = _tmpProjTransWIP.DimensionDisplayValue;
        }
        else
        {
            tmpProjTrans.ProjId             =   _tmpProjTransWIPOperation.ProjId;
            tmpProjTrans.LineTotal          =   _tmpProjTransWIPOperation.LineTotal;
            tmpProjTrans.EmplCost           =   _tmpProjTransWIPOperation.EmplCost;
            tmpProjTrans.CostTotal          =   _tmpProjTransWIPOperation.CostTotal;
            tmpProjTrans.AccruedTurnover    =   _tmpProjTransWIPOperation.AccruedTurnover;
            tmpProjTrans.InvoicedTurnover   =   _tmpProjTransWIPOperation.InvoicedTurnover;
            tmpProjTrans.InvoiceTotal       =   _tmpProjTransWIPOperation.InvoiceTotal;
            if (projIdRange || _tmpProjTransWIPOperation.LineTotal == ProjLineTotal::Line)
            {
                tmpProjTrans.Ledger         = (_tmpProjTransWIPOperation.CostTotal ? _tmpProjTransWIPOperation.CostTotal: _tmpProjTransWIPOperation.InvoiceTotal);
            }
            else
            {
                tmpProjTrans.Ledger         =   ledgerAmountMST;
            }
            tmpProjTrans.Diff               =   (_tmpProjTransWIPOperation.LineTotal == ProjLineTotal::Total) ? _tmpProjTransWIPOperation.CostTotal + _tmpProjTransWIPOperation.InvoiceTotal - tmpProjTrans.Ledger : 0;
            tmpProjTrans.CostCost           =   _tmpProjTransWIPOperation.CostCost;
            tmpProjTrans.ItemCost           =   _tmpProjTransWIPOperation.ItemCost;
            tmpProjTrans.LineTotal          =   _tmpProjTransWIPOperation.LineTotal;
            tmpProjTrans.DimensionDisplayValue = _tmpProjTransWIPOperation.DimensionDisplayValue;
        }

        tmpProjTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a line is zeroed.
    /// </summary>
    /// <param name="_tmpProjTransWIPOperation">
    ///    The <c>TmpProjTransWIPOperation</c> table.
    /// </param>
    /// <param name="_tmpProjTransWIP">
    ///    The <c>TmpProjTransWIP</c> table.
    /// </param>
    /// <returns>
    ///    true if the line is zeroed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A line is zeroed if all fields contain a value of zero.
    /// </remarks>
    private boolean isLineZero(TmpProjTransWIPOperation _tmpProjTransWIPOperation,
                                TmpProjTransWIP _tmpProjTransWIP)
    {
        if (menuItemType == 2)
        {
            if (_tmpProjTransWIP.Cost       == 0 &&
                _tmpProjTransWIP.Production == 0 &&
                _tmpProjTransWIP.Sales      == 0 &&
                _tmpProjTransWIP.Profit     == 0 &&
                _tmpProjTransWIP.OnAccount  == 0)
            {
                return true;
            }
        }

        else
        {
            if (_tmpProjTransWIPOperation.CostCost          == 0 &&
                _tmpProjTransWIPOperation.EmplCost         == 0 &&
                _tmpProjTransWIPOperation.ItemCost         == 0 &&
                _tmpProjTransWIPOperation.AccruedTurnover  == 0 &&
                _tmpProjTransWIPOperation.InvoicedTurnover == 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the records of a report if a <c>ProjListLedgerReconPayRollSRS</c> or
    ///    <c>ProjListLedgerProfitLossSRS</c> is executed.
    /// </summary>
    /// <param name="_tmpProjTransWIPOperation">
    ///    The <c>TmpProjTransWIPOperation</c> table.
    /// </param>
    /// <param name="_tmpProjTransWIP">
    ///    The <c>TmpProjTransWIP</c> table.
    /// </param>
    public void printLine(TmpProjTransWIPOperation _tmpProjTransWIPOperation,
                            TmpProjTransWIP _tmpProjTransWIP)
    {
        if (projLedgerSorting == ProjLedgerSorting::Project)
        {
            if (oldProjId && (oldProjId != _tmpProjTransWIPOperation.ProjId))
            {
                this.printTotal();
            }
        }
        else
        {
            if (oldLedgerDimension && (oldLedgerDimension != _tmpProjTransWIPOperation.LedgerDimension))
            {
                    this.printTotal();
            }
        }

        if (_tmpProjTransWIPOperation.LineTotal == ProjLineTotal::Line)
        {
            printTotal = true;
        }

        this.insertTmpProjTrans(_tmpProjTransWIPOperation,_tmpProjTransWIP);

        emplCost += _tmpProjTransWIPOperation.EmplCost;

        if (menuItemType == 1)
        {
            costCost         += _tmpProjTransWIPOperation.CostCost;
            itemCost         += _tmpProjTransWIPOperation.ItemCost;
            costTotal        += _tmpProjTransWIPOperation.CostTotal;
            accruedTurnover  += _tmpProjTransWIPOperation.AccruedTurnover;
            invoicedTurnover += _tmpProjTransWIPOperation.InvoicedTurnover;
            invoiceTotal     += _tmpProjTransWIPOperation.InvoiceTotal;
        }

        if (projLedgerSorting == ProjLedgerSorting::Project)
        {
            oldProjId = _tmpProjTransWIPOperation.ProjId;
        }
        else
        {
            oldLedgerDimension = _tmpProjTransWIPOperation.LedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLineReconWip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the records of a report if a <c>ProjListLedgerReconWIPSRS</c> is executed.
    /// </summary>
    /// <param name="_tmpProjTransWIPOperation">
    ///    The <c>TmpProjTransWIPOperation</c> table.
    /// </param>
    /// <param name="_tmpProjTransWIP">
    ///    The <c>TmpProjTransWIP</c> table.
    /// </param>
    private void printLineReconWip(TmpProjTransWIPOperation _tmpProjTransWIPOperation,
                                    TmpProjTransWIP _tmpProjTransWIP)
    {
        if (projLedgerSorting == ProjLedgerSorting::Project)
        {
            if (oldProjId && (oldProjId != _tmpProjTransWIP.ProjId))
            {
                this.printTotal();
            }
        }
        else
        {
            if (oldLedgerDimension && (oldLedgerDimension != _tmpProjTransWIP.LedgerDimension))
            {
                this.printTotal();
            }
        }

        if (_tmpProjTransWIP.LineTotal == ProjLineTotal::Line)
        {
            printTotal = true;
        }

        this.insertTmpProjTrans(_tmpProjTransWIPOperation,_tmpProjTransWIP);

        cost        += _tmpProjTransWIP.Cost;
        production  += _tmpProjTransWIP.Production;
        sales       += _tmpProjTransWIP.Sales;
        profit      += _tmpProjTransWIP.Profit;
        brutto      += _tmpProjTransWIP.Brutto;
        onAccount   += _tmpProjTransWIP.OnAccount;
        netto       += _tmpProjTransWIP.Netto;

        if (projLedgerSorting == ProjLedgerSorting::Project)
        {
            oldProjId = _tmpProjTransWIP.ProjId;
        }
        else
        {
            oldLedgerDimension = _tmpProjTransWIP.LedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTotal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the total accumulated from all reports.
    /// </summary>
    public void printTotal()
    {
        if (printTotal)
        {
            printTotal = false;
            emplCost = 0;

            if (menuItemType == 1)
            {
                costCost = 0;
                itemCost = 0;
                costTotal = 0;
                accruedTurnover = 0;
                invoicedTurnover = 0;
                invoiceTotal = 0;
            }
            if (menuItemType == 2)
            {
                cost = 0;
                production = 0;
                sales = 0;
                profit = 0;
                brutto = 0;
                onAccount = 0;
                netto = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SSRS at
    ///    runtime. This method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjTransPosting        newProjTransPosting;
        QueryBuildRange         queryRangeTransDate;
        QueryBuildDataSource    queryDataSource;
        Query                   qr;
        ProjListLedgerReconContract contract = this.parmDataContract() as ProjListLedgerReconContract;

        projLedgerSorting = contract.parmProjView();
        level             = contract.parmProjLevel();
        skipZero          = contract.parmProjSkipZero();
        menuItemType      = contract.parmMenuItemType();
        fromDate          = contract.parmProjFromDate();
        toDate            = contract.parmProjToDate();

        if (fromDate > toDate && toDate)
        {
            return;
        }

        tmpProjTrans.recordLevelSecurity(true);
        tmpProjTransWIP.recordLevelSecurity(true);

        qr = new Query(this.parmQuery());
        queryDataSource     = qr.dataSourceTable(tablenum(ProjTransPosting));
        queryRangeTransDate = queryDataSource.addRange(fieldnum(ProjTransPosting, LedgerTransDate));

        if (fromDate && toDate)
        {
            queryRangeTransDate.value(queryValue(fromDate) + '..' + queryValue(toDate));
        }
        else if (fromDate && !toDate)
        {
            queryRangeTransDate.value(queryValue(fromDate) + '..');
        }
        else if (!fromDate && toDate)
        {
            queryRangeTransDate.value('..' + queryValue(toDate));
        }
        else
        {
            queryRangeTransDate.value('');
        }

        projIdRange = queryDataSource.findRange(fieldNum(ProjTransPosting, projId)).value();

        queryRun = new QueryRun(qr);

        while (queryRun.next())
        {
            newProjTransPosting = queryRun.get(tablenum(ProjTransPosting));

            if (menuItemType == 0)// If ProjListLedgerReconPayrollSRS is selected
            {
                if (ProjTransPosting::checkPayRollTrans(newProjTransPosting.PostingType))
                {
                    this.initTmpProjWIPLine(newProjTransPosting,newProjTransPosting.LedgerDimension);
                    this.initTmpProjWIPTotal(newProjTransPosting,newProjTransPosting.LedgerDimension);
                }
            }
            else if (menuItemType == 1) //If ProjListLedgerReconProfitLossSRS is selected
            {
                if (ProjTransPosting::checkProfitLossLedgerDimension(newProjTransPosting.LedgerDimension))
                {
                    if (ProjTransPosting::checkOperations(newProjTransPosting.PostingType,true))
                    {
                        this.initTmpProjWIPLine(newProjTransPosting,newProjTransPosting.LedgerDimension);
                        this.initTmpProjWIPTotal(newProjTransPosting,newProjTransPosting.LedgerDimension);
                    }
                }
            }
            else //If ProjListLedgerReconWIPSRS is selected
            {
                if (ProjTransPosting::checkStatusLedgerDimension(newProjTransPosting.LedgerDimension) &&
                       ProjTransPosting::checkActivated(newProjTransPosting.PostingType))
                {
                    this.initTmpProjWIPLine(newProjTransPosting,newProjTransPosting.LedgerDimension);
                    this.initTmpProjWIPTotal(newProjTransPosting,newProjTransPosting.LedgerDimension);
                }
            }
        }

        if (menuItemType == 2)
        {
            if (tmpProjTransWIP)
            {
                if (projLedgerSorting == ProjLedgerSorting::Project)
                {
                    while select tmpProjTransWIP
                       order by LineTotal desc, ProjId, DimensionDisplayValue
                    {
                            if (!this.isLineZero(tmpProjTransWIPOperation,tmpProjTransWIP) || !skipZero)
                            {
                                this.setLedger();
                                this.printLineReconWip(tmpProjTransWIPOperation,tmpProjTransWIP);
                            }
                    }
                }
                else
                {
                    while select tmpProjTransWIP
                        order by LineTotal desc, DimensionDisplayValue, ProjId
                    {
                        if (!this.isLineZero(tmpProjTransWIPOperation,tmpProjTransWIP) || !skipZero)
                        {
                                this.setLedger();
                                this.printLineReconWip(tmpProjTransWIPOperation,tmpProjTransWIP);
                        }
                    }
                }
            }
        }
        else
        {
            if (tmpProjTransWIPOperation)
            {
                if (projLedgerSorting == ProjLedgerSorting::Project)
                    {
                        while select tmpProjTransWIPOperation
                            order by LineTotal desc, ProjId, DimensionDisplayValue
                        {
                            if (!this.isLineZero(tmpProjTransWIPOperation,tmpProjTransWIP) || !skipZero)
                            {
                                this.setLedger();
                                this.printLine(tmpProjTransWIPOperation,tmpProjTransWIP);
                            }
                        }
                    }

                else
                {
                    while select tmpProjTransWIPOperation
                        order by LineTotal desc, DimensionDisplayValue, ProjId
                    {
                        if (!this.isLineZero(tmpProjTransWIPOperation,tmpProjTransWIP) || !skipZero)
                        {
                            this.setLedger();
                            this.printLine(tmpProjTransWIPOperation,tmpProjTransWIP);
                        }
                    }
                }
            }
        }
        printTotal  = true;
        this.printTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedger</Name>
				<Source><![CDATA[
/// <summary>
    ///    Sets the <c>LedgerAmountMST</c> value.
    /// </summary>
    private void setLedger()
    {
        MainAccount             mainAccount;
        MainAccountNum          mainAccountNum;

        if (menuItemType == 2)
        {
            if (tmpProjTransWIP.LedgerDimension)
            {
                mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(tmpProjTransWIP.LedgerDimension);
                mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
                ledgerAmountMST = mainAccount.calculateBalance(fromDate, toDate, FiscalPeriodType::Operating);

                DimensionAttributeValueCombination dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(tmpProjTransWIP.LedgerDimension);

                if (dimensionAttributeValueCombination.DisplayValue != mainAccountNum)
                {
                    ledgerAmountMST = 0;
                }
            }
            else
            {
                ledgerAmountMST = 0;
            }
        }
        else
        {
            if (tmpProjTransWIPOperation.LineTotal == ProjLineTotal::Total)
            {
                if (tmpProjTransWIPOperation.LedgerDimension)
                {
                    mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(tmpProjTransWIPOperation.LedgerDimension);
                    mainAccount = MainAccount::findByMainAccountId(mainAccountNum);
                    ledgerAmountMST = mainAccount.calculateBalance(fromDate, toDate, FiscalPeriodType::Opening);
                }

                DimensionAttributeValueCombination dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(tmpProjTransWIPOperation.LedgerDimension);

                if (dimensionAttributeValueCombination.DisplayValue != mainAccountNum)
                {
                    ledgerAmountMST = 0;
                }
            }
            else
            {
                ledgerAmountMST = 0;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>