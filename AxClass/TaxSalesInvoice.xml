<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class TaxSalesInvoice extends Tax
{
    SalesCalcTax    salesFormLetter;
    Common          sourceRecord;
    MarkupTrans     markupTrans;

    NoYes           markupAdminister;

    private TaxAmountCur transTotalTax = 0;

    // <GEERU>
    SalesInvoicePostingType_RU  invoicePostingType;

    boolean                     postNegativeLinesAsStorno;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    boolean checkParameters()
    {
        boolean ok = true;

        if (!salesFormLetter)
        {
            throw error(strFmt("@SYS22533",funcName(),classId2Name(classIdGet(salesFormLetter))));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxRegulation</Name>
				<Source><![CDATA[
    void deleteTaxRegulation()
    {
        TaxWorkRegulation taxWorkRegulation;
        ;
        delete_from taxWorkRegulation
        where taxWorkRegulation.HeadingTableId == origHeadingTableId
           && taxWorkRegulation.HeadingRecId == origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public CustExchRate exchRate()
    {
        return salesFormLetter.exchRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary()
    {
        return salesFormLetter.exchRateSecondary();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <returns>The reporting currency exchange rate.</returns>
    [Hookable(false)]
    protected ExchRate reportingCurrencyExchangeRate()
    {
        return salesFormLetter.reportingCurrencyExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModelTaxable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax taxable model.
    /// </summary>
    /// <param name="_documentMap">
    /// The document map.
    /// </param>
    /// <param name="_isScrap">
    /// True if the model is scrap.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxModelTaxable_IN</c> class.
    /// </returns>
    protected TaxModelTaxable_IN getTaxModelTaxable_IN(
        SalesPurchJournalLine _documentMap,
        boolean _isScrap = false)
    {
        SalesPurchJournalLine documentMap;
        CustInvoiceTrans custInvoiceTransLocal;
        CustInvoiceJour custInvoiceJourLocal;

        documentMap = _documentMap;

        if (_documentMap.SourceTableId == tableNum(SalesLine))
        {
            select firstOnly InvoiceId,InvoiceDate,SalesId, numberSequenceGroup, RecId from custInvoiceJourLocal
                where custInvoiceJourLocal.RecId == salesFormLetter.recID();

            select firstonly * from custInvoiceTransLocal
                where custInvoiceTransLocal.InvoiceId == custInvoiceJourLocal.InvoiceId
                    && CustInvoiceTransLocal.InvoiceDate == custInvoiceJourLocal.InvoiceDate
                    && CustInvoiceTransLocal.SalesId == custInvoiceJourLocal.SalesId
                    && CustInvoiceTransLocal.numberSequenceGroup == custInvoiceJourLocal.numberSequenceGroup
                    && custInvoiceTransLocal.InventTransId == _documentMap.InventTransId;

            if (custInvoiceTransLocal)
            {
                documentMap = custInvoiceTransLocal;
            }
        }

        return super(documentMap, _isScrap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxTrans</Name>
				<Source><![CDATA[
    void initTaxTrans(TaxTrans taxTrans, NumberSequenceCode _voucherSeriesCode)
    {
        TaxTrans_RU taxTrans_RU;

        super(taxTrans, _voucherSeriesCode);

        // <GEERU>
        if (invoicePostingType          == SalesInvoicePostingType_RU::GoodsInRoute)
        {
            taxTrans_RU = taxTrans.taxTrans_RU();
            if (taxTrans_RU.TaxSourceType_RU   == TaxSourceType_RU::MarkupTrans)
            {
                taxTrans_RU.GoodsInRouteToDelivery_RU = NoYes::Yes;
                taxTrans.packTaxTrans_RU(taxTrans_RU);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFromSales</Name>
				<Source><![CDATA[
    protected void moveFromSales(TableId   _salesOrderTableId,
                                 RecId     _salesOrderRecId)
    {
        TaxAmountCur sumTaxLocal = 0;

        // The HeadingTableId is not updated here, because in SO scenario, all process is using SalesTable instead of CustInvoiceJour, if we make change here, there would be big impact in all other places with such behavior.
        while select taxWorkTrans
            where taxWorkTrans.SourceTableId == _salesOrderTableId &&
                  taxWorkTrans.SourceRecId   == _salesOrderRecId
        {
            taxWorkTrans.HeadingRecId             = headingRecId;
            taxWorkTrans.SourceTableId            = this.sourceTableId();
            taxWorkTrans.SourceRecId              = this.sourceRecId();

            sumTaxLocal += taxWorkTrans.SourceRegulateAmountCur;
            taxWorkTrans.update(this.ignoreCalculatedSalesTax());
        }

        // updating the line tax for Sales order line
        if (CustInvoiceCalculateTaxFieldsForSalesInvoiceEntityFlight::instance().isEnabled())
        {
            this.updateLineTax(sumTaxLocal);
        }

        // move manually inserted tax lines to new owner.
        update_recordset taxWorkTrans
        setting
            HeadingRecId    = headingRecId,
            HeadingTableId  = this.headingTableId()
        where
            taxWorkTrans.HeadingTableId == origHeadingTableId &&
            taxWorkTrans.HeadingRecId   == origHeadingRecId &&
            taxWorkTrans.ManualInsertedTax == true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        NoYes              _post,
        SalesCalcTax       _salesForm,
        TmpTaxWorkTrans    _tmpTaxWorkTrans)
    {
        post                = _post;
        salesFormLetter     = _salesForm;
        taxWorkTrans        = _tmpTaxWorkTrans;

        taxModuleType       = TaxModuleType::SalesInvoice;

        headingTableId      = salesFormLetter.tableId();
        headingRecId        = salesFormLetter.recID();
        origHeadingTableId  = salesFormLetter.salesTableTableID();
        origHeadingRecId    = salesFormLetter.salesTableRecID();

        super();

        if(CustInvoiceBankExchangeRateEligibility_PL::isBankExchangeRateNotApplicableOnInvoice())
        {
            useTaxExchangeRate = false;
        }

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            if (! this.checkParameters())
                throw error("@SYS18447");

            taxDate = salesFormLetter.invoiceDate();
            sourceCurrencyCode = salesFormLetter.currencyCode();
        }

        triangulation = salesFormLetter.triangulation(taxDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoicePostingType_RU</Name>
				<Source><![CDATA[
    public SalesInvoicePostingType_RU parmInvoicePostingType_RU(SalesInvoicePostingType_RU _invoicePostingType = invoicePostingType)
    {
        invoicePostingType = _invoicePostingType;
        return invoicePostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostNegativeLinesAsStorno_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Post tax related to negative lines as correction.
    /// </summary>
    /// <param name="_value">
    ///   The new value.
    /// </param>
    /// <returns>
    ///   A current value.
    /// </returns>
    public boolean parmPostNegativeLinesAsStorno_RU(boolean _value = postNegativeLinesAsStorno)
    {
        postNegativeLinesAsStorno = _value;
        return postNegativeLinesAsStorno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(LedgerPostingController _ledgerPostingController,
                        TaxTrans                _taxTrans,
                        TaxAmount               _taxAmount,
                        TaxAmount               _chargeAmount,
                        CurrencyExchangeHelper  _exchRateHelper,
                        LedgerDimensionAccount  _ledgerDimension,
                        LedgerDimensionAccount  _operationLedgerDimension,
                        LedgerDimensionAccount  _taxOffsetUseTaxLedgerDimension,
                        LedgerDetailLevel       _ledgerDetailLevel  = LedgerDetailLevel::AsDefault,
                        ProjLedger              _projLedger = null
                        ,LedgerDimensionAccount _offsetLedgerDimension = 0,
                        AmountMSTSecondary      _amountMSTSecondary    = 0
                        )
    {
        // <GEEHU>
        TaxLedgerAccountGroup           taxLedgerAccountGroup;
        LedgerDimensionAccount          ledgerDimension;
        boolean                         isContinuousHU;
        DimensionDefault                dimensionDefault;
        // <GEERU>
        boolean                         oldCorrection;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (prmisDefault(_offsetLedgerDimension))
            {
                _offsetLedgerDimension = _taxTrans.taxTrans_RU().OffsetLedgerDimension_RU;
            }
            if (this.parmPostNegativeLinesAsStorno_RU())
            {
                oldCorrection = _ledgerPostingController.getReference().parmCorrection();
                _ledgerPostingController.getReference().parmCorrection(TaxTrans_RU::taxLineIsRelatedToNegativeLine(_taxTrans));
            }
        }
        // </GEERU>

        isContinuousHU = TaxContinuousHUHelper::isTransactionContinuousHU(_taxTrans.TaxItemGroup);
        // Initial tax transaction for Hungary requires that the deferred tax accounts be used. On the
        // VAT Due Date, the transaction gets reversed out of the deferred account and placed into the
        // Sales Tax account. The ledger dimension for the original transaction has to reflect the deferred
        // account value
        if (isContinuousHU)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00008, funcName());

            taxLedgerAccountGroup = TaxLedgerAccountGroup::find(TaxTable::findAccountGroup(_taxTrans.TaxCode));
            dimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerDimension);
            ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(taxLedgerAccountGroup.taxLedgerDimension_HU(_taxTrans.TaxDirection), dimensionDefault);
        }
        else
        {
            ledgerDimension = _ledgerDimension;
        }
        // </GEEHU>

        super(
        _ledgerPostingController,
        _taxTrans,
        _taxAmount,
        _chargeAmount,
        _exchRateHelper,
        ledgerDimension,
        _operationLedgerDimension,
        _taxOffsetUseTaxLedgerDimension,
        _ledgerDetailLevel);

        // For Hungarian Continuous Tax, add two additional transactions to a new voucher initialized in the getVoucherForContinuousHU call
        // <GEEHU>
        if (isContinuousHU)
        {
            _taxTrans.postponeLedgerTrans_HU(this.getVoucherForContinuousHU(_taxTrans.taxTrans_W().VatDueDate_W, _ledgerPostingController), dimensionDefault);
        }
        // </GEEHU>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (this.parmPostNegativeLinesAsStorno_RU())
            {
                _ledgerPostingController.getReference().parmCorrection(oldCorrection);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public RecId sourceRecId()
    {
        if (markupAdminister)
            return markupTrans.RecId;
        else
            return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        if (markupAdminister)
            return markupTrans.TableId;
        else
            return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxByMarkup</Name>
				<Source><![CDATA[
    protected void taxByMarkup()
    {
        NoYes   moreMarkup;
        Integer sign;
        ;
        moreMarkup  = true;
        while (moreMarkup)
        {
            markupTrans= salesFormLetter.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister= NoYes::Yes;
                this.moveFromSales(salesFormLetter.salesMarkupTableId(),
                                   salesFormLetter.salesMarkupRecId());
                
                // updating the line charge for Sales order line
                if (CustInvoiceCalculateTaxFieldsForSalesInvoiceEntityFlight::instance().isEnabled())
                {
                    this.updateLineCharge(markupTrans.CalculatedAmount);
                }

                if (salesFormLetter.markupAmount() < 0)
                    sign = -1;
                else
                    sign = 1;

                salesFormLetter.setTaxMarkup(this.taxWriteCode(), this.lineTaxAmount(sign));
                markupTrans.update();
            }
            else
            {
                markupAdminister= NoYes::No;
                moreMarkup  = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;
        boolean         moreLines;
        Integer         sign;

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;

        if (!skipTableMarkup)
        {
            salesFormLetter.initCursorMarkupHeader(salesFormLetter.tableId(),
                                                   salesFormLetter.recID());
            this.taxByMarkup();
        }

        salesFormLetter.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            sourceRecord= salesFormLetter.nextLine();
            if (sourceRecord)
            {
                this.moveFromSales(salesFormLetter.transTableId(),
                                   salesFormLetter.transRecId());

                if (salesFormLetter.transLineAmount() < 0 ||
                    salesFormLetter.transQty() < 0)
                    sign = -1;
                else
                    sign = 1;

                salesFormLetter.setTax(this.taxWriteCode(), this.lineTaxAmount(sign));

                if (CustInvoiceCalculateTaxFieldsForSalesInvoiceEntityFlight::instance().isEnabled())
                {
                    if (!skipLineMarkup)
                    {
                        this.taxByMarkup();
                    }

                    sourceRecord.update();
                }
                else
                {
                    sourceRecord.update();

                    if (!skipLineMarkup)
                    {
                        this.taxByMarkup();
                    }
                }
            }
            else
                moreLines   = false;
        }

        if (CustInvoiceCalculateTaxFieldsForSalesInvoiceEntityFlight::instance().isEnabled())
        {
            this.updateHeaderTax();
        }

        ttscommit;

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);
            // Post the additional voucher for Hungarian Continuous Tax
            // <GEEHU>
            this.postVoucherForContinuousHU(_ledgerPostingController, voucher, taxDate);
            // </GEEHU>

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            this.saveInJournalTrans(headingTableId, headingRecId);

            taxAmount = this.totalTaxAmount();
        }
        
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will update the charge amount for a SO line.
    /// </summary>
    private void updateLineCharge(AmountCur _lineCharge)
    {
        if (sourceRecord is CustInvoiceTrans &&
            salesFormLetter is SalesCalcTax_Invoice)
        {
            CustInvoiceTrans custInvoiceTransLocal = sourceRecord;
            custInvoiceTransLocal.TotalCharge += _lineCharge;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLineTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will update the total tax for a SO line.
    /// </summary>
    private void updateLineTax(TaxAmountCur _lineTax)
    {
        if (sourceRecord is CustInvoiceTrans &&
            salesFormLetter is SalesCalcTax_Invoice)
        {
            CustInvoiceTrans custInvoiceTransLocal = sourceRecord;

            custInvoiceTransLocal.TotalTax += (_lineTax * -1);
            transTotalTax += (_lineTax * -1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeaderTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will calculate and update the total tax on header.
    /// </summary>
    private void updateHeaderTax()
    {
        if (salesFormLetter is SalesCalcTax_Invoice)
        {
            SalesCalcTax_Invoice salesCalcTax_Invoice = salesFormLetter;
            CustInvoiceJour custinvoiceJour = salesCalcTax_Invoice.getCustInvoiceJour();

            if (custinvoiceJour)
            {
                custinvoiceJour.HeaderTax = custinvoiceJour.SumTax - transTotalTax;
                custinvoiceJour.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>