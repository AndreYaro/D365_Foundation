<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCreateBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdJournalCreateBOM extends ProdJournalCreate
{
    ProdJournalBOM              prodJournalBOM;
    ProdBOMConsumpProposal      consumpProposal;
    BOMAutoConsump              bomAutoConsump;
    ProdBOM                     consumptionProdBOM;
    NoYes                       consumpAsProposal;
    NoYes                       proposalAsConsump;

    NoYes                       drawNegative;
    NoYes                       skipAccError;

    OprNum                      oprNumFrom;
    OprNum                      oprNumTo;

    InventQty                   qtyCalc;
    BOMQty                      qtyConsumption;
    PdsCWQty                    cwQtyConsump;

    Object                      dialog;

    DialogField                 dialogProdId;
    DialogField                 dialogDate;
    DialogField                 dialogJournalNameId;

    DialogField                 dialogConsumpProposal;
    DialogField                 dialogConsumpAsProposal;

    DialogField                 dialogOprNum;
    DialogField                 dialogQtyCalc;

    InventDimId                 inventDimId;

    boolean                     isStart;
    boolean                     isFinish;// Reported as finished
    private boolean             isPickingListDerivedJournal;

    private Map prodQtyMap;
    private ProdTable currentProdTable;
    private boolean isPartiallyReceivedWork = false;
    private ProdAsBuiltBOMMatchId matchId;

    #DEFINE.CurrentVersion(15)
    #LOCALMACRO.CurrentList
        BOMAutoConsump,
        ConsumpProposal,
        ConsumpAsProposal,
        proposalAsConsump,
        OprNumFrom,
        oprNumTo,
        QtyCalc,
        drawNegative,
        skipAccError,
        isStart,
        isFinish,
        consumptionProdBOM,
        qtyConsumption
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreateLinesProdBOM</Name>
				<Source><![CDATA[
    boolean checkCreateLinesProdBOM()
    {
        boolean     ret                     = true;
        ProdBOM     prodBOM;
        // <GEERU>
        ProdTable   prodTable               = this.getProdTable();
        boolean     isProjMethodConsumed    = prodTable.isProjMethodConsumed();
        boolean     calculatingWIP_RU       = prodTable.calculatingWIP_RU();
        // </GEERU>

        // <GEERU>
        if (isProjMethodConsumed || calculatingWIP_RU)
        // </GEERU>
        {
            while select prodBOM
                index hint NumIdx
                where prodBOM.ProdId == prodId
                    &&  prodBOM.OprNum >= oprNumFrom
                    &&  (prodBOM.OprNum <= oprNumTo    || !oprNumTo)
            {
                // <GEERU>
                setprefix(strfmt("@SYS24300", prodBOM.ItemId));

                if (isProjMethodConsumed)
                {
                    // </GEERU>
                    ret = ret && prodBOM.validateProject();
                    // <GEERU>
                }

                if (calculatingWIP_RU)
                {
                    ret = ret && prodBOM.checkBOMQty_RU(true);
                }
                // </GEERU>
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;

        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    protected void createLines()
    {
        this.initProdJournalTableData(ProdJournalType::Picklist);

        prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM,prodJournalTableData);
        if (prodJournalTable.NumOfLines)
        {
            prodJournalTransData.parmLastLineNum(ProdJournalBOM::lastLineNum(journalId));
        }

        if (consumpProposal == ProdBOMConsumpProposal::Reversed && !TaxParameters::isExciseEnable_IN())
        {
            this.createLinesInventTrans();
        }
        else
        {
            this.createLinesProdBOM();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransCreateLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventTrans</c> <c>Query</c> instance with relevant Selection fields, Group By fields, and ranges.
    /// </summary>
    /// <returns>The created <c>InventTrans</c> <c>Query</c> instance.</returns>
    protected Query buildInventTransCreateLinesQuery()
    {
        Query inventTransQuery = new Query();

        QueryBuildDataSource inventTransQueryBuildDS = inventTransQuery.addDataSource(tableNum(InventTrans));

        this.addInventTransCreateLinesSelectionFields(inventTransQueryBuildDS);
        this.addInventTransCreateLinesGroupByFields(inventTransQueryBuildDS);
        this.addInventTransCreateLinesRanges(inventTransQueryBuildDS);

        QueryBuildDataSource inventTransOriginQueryBuildDS = inventTransQueryBuildDS.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryBuildDS.joinMode(JoinMode::ExistsJoin);
        inventTransOriginQueryBuildDS.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));

        this.addInventTransOriginCreateLinesRanges(inventTransOriginQueryBuildDS);
        
        return inventTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransCreateLinesSelectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Selection fields to the <c>InventTrans</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add Selection fields to.</param>
    protected void addInventTransCreateLinesSelectionFields(QueryBuildDataSource _inventTransQueryBuildDS)
    {
        _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, Qty), SelectionField::Sum);
        _inventTransQueryBuildDS.addSelectionField(fieldNum(InventTrans, PdsCWQty), SelectionField::Sum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransCreateLinesGroupByFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Group By fields to the <c>InventTrans</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add Group By fields to.</param>
    protected void addInventTransCreateLinesGroupByFields(QueryBuildDataSource _inventTransQueryBuildDS)
    {
        _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, ItemId));
        _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, InventTransOrigin));
        _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, InventDimId));
        _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, DatePhysical));
        _inventTransQueryBuildDS.addGroupByField(fieldNum(InventTrans, VoucherPhysical));
        _inventTransQueryBuildDS.addOrderByField(fieldNum(InventTrans, InventTransOrigin));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOriginCreateLinesRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the <c>InventTransOrigin</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransOriginQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add ranges to.</param>
    protected void addInventTransOriginCreateLinesRanges(QueryBuildDataSource _inventTransOriginQueryBuildDS)
    {
        _inventTransOriginQueryBuildDS.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(queryValue(InventTransType::ProdLine));
        _inventTransOriginQueryBuildDS.addRange(fieldNum(InventTransOrigin, ReferenceId)).value(queryValue(prodId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransCreateLinesRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the <c>InventTrans</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_inventTransQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add ranges to.</param>
    protected void addInventTransCreateLinesRanges(QueryBuildDataSource _inventTransQueryBuildDS)
    {
        _inventTransQueryBuildDS.addRange(fieldNum(InventTrans, StatusIssue)).value(strFmt('((%1.%2 == %3) || (%1.%4 == %5))',
                                                                                           _inventTransQueryBuildDS.name(),
                                                                                           fieldStr(InventTrans, StatusIssue),
                                                                                           enum2int(StatusIssue::Deducted),
                                                                                           fieldStr(InventTrans, StatusReceipt),
                                                                                           enum2int(StatusReceipt::Received)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainBOMFinancialSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>Qty</c> value for the released quantity was specified.
    /// </summary>
    /// <param name = "_remainFinancial">The financial remainder</param>
    /// <returns>true if a <c>Qty</c> value was specified; otherwise, false.</returns>
    protected boolean remainBOMFinancialSpecified(Qty _remainFinancial)
    {
        return _remainFinancial != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBOMProposal</Name>
				<Source><![CDATA[
    private BOMQty calculateBOMProposal(
        InventTrans _inventTrans,
        UnitOfMeasureSymbol _inventUnitOfMeasureSymbol,
        UnitOfMeasureSymbol _bomUnitOfMeasureSymbol,
        BOMQty _remainFinancial)
    {
        BOMQty bomProposal;

        if (_inventUnitOfMeasureSymbol != _bomUnitOfMeasureSymbol)
        {
            bomProposal = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_inventTrans.ItemId,
                                                                                                _inventTrans.inventDimId,
																								_inventTrans.Qty,
																								_inventUnitOfMeasureSymbol,
																								_bomUnitOfMeasureSymbol,
																								NoYes::Yes,
																								NoYes::No);

            bomProposal = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_inventTrans.ItemId,
                                                                                                _inventTrans.inventDimId,
																								bomProposal,
																								_bomUnitOfMeasureSymbol,
																								_bomUnitOfMeasureSymbol,
																								NoYes::Yes,
																								NoYes::Yes);

            if ((-bomProposal >= _remainFinancial)
                || !EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_inventTrans.ItemId,
                                                                                          _inventTrans.inventDimId,
																						  bomProposal + _remainFinancial,
																						  _bomUnitOfMeasureSymbol,
																		   				  _inventUnitOfMeasureSymbol,
																						  NoYes::Yes,
																						  NoYes::Yes))
            {
                bomProposal = -_remainFinancial;
            }
        }
        else
        {
            bomProposal = _inventTrans.Qty;
        }

        return bomProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdJournalBOM</Name>
				<Source><![CDATA[
    private void initializeProdJournalBOM(ProdJournalBOM _prodJournalBOM, ProdBOM _prodBOM, InventTrans _inventTrans)
    {
        prodJournalTableData.initJournalId();
        this.initTransFromProdBOM(_prodJournalBOM, _prodBOM);

        _prodJournalBOM.InventDimId      = _inventTrans.InventDimId;
        _prodJournalBOM.bomUnitId        = _prodBOM.UnitId;
        _prodJournalBOM.InventProposal   = _inventTrans.Qty;
        _prodJournalBOM.InventConsump    = _inventTrans.Qty;

        InventTransPosting inventTransPosting = InventTransPosting::findByNaturalKey(this.initializeInventTransPostingSearchParameters(_inventTrans));

        if (inventTransPosting)
        {
            _prodJournalBOM.DefaultDimension = _prodJournalBOM.copyDimension(inventTransPosting.DefaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventTransPostingSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>InventTransPosting</c> table.
    /// </summary>
    /// <param name = "_inventTrans">An <c>InventTrans</c> record.</param>
    /// <returns>The search parameters.</returns>
    protected InventTransPosting initializeInventTransPostingSearchParameters(InventTrans _inventTrans)
    {
        InventTransPosting inventTransPosting;

        inventTransPosting.TransDate = _inventTrans.DatePhysical;
        inventTransPosting.Voucher = _inventTrans.VoucherPhysical;
        inventTransPosting.InventTransOrigin = _inventTrans.InventTransOrigin;
        inventTransPosting.InventTransPostingType = InventTransPostingType::Physical;

        return inventTransPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignAdjustedQuantities</Name>
				<Source><![CDATA[
    private void assignAdjustedQuantities(
        ProdJournalBOM _prodJournalBOM,
        BOMQty _initialBomProposal,
        ProdBOM _prodBOM,
        InventTrans _inventTrans,
        Map _remainFinancialByProdBOM,
        Map _transactionCountByProdBOM)
    {
        BOMQty qtyAdjustment = 0;

        // If the quantities accumulated across all transactions do not sum up to the full quantity in BOM unit of measure,
        // we need to redistribute the difference equally between the transactions.
        if (_remainFinancialByProdBOM.exists(_prodBOM.InventTransId))
        {
            BOMQty leftoverQty = _remainFinancialByProdBOM.lookup(_prodBOM.InventTransId);
            int recordCount = _transactionCountByProdBOM.lookup(_prodBOM.InventTransId);

            qtyAdjustment = decRound(leftoverQty / recordCount, UnitOfMeasure::findBySymbol(_prodBOM.UnitId).DecimalPrecision);

            // qtyAdjustment won't always be identical for all transactions as it needs to be rounded. Keep track of the remainder.
            _transactionCountByProdBOM.insert(_prodBOM.InventTransId, recordCount - 1);
            _remainFinancialByProdBOM.insert(_prodBOM.InventTransId, leftoverQty - qtyAdjustment);
        }

        _prodJournalBOM.BOMProposal = _initialBomProposal - qtyAdjustment;
        _prodJournalBOM.bomConsump = prodJournalBOM.bomProposal;

        _prodJournalBOM.PdsCWInventProposal  = _inventTrans.PdsCWQty;
        _prodJournalBOM.PdsCWInventConsump   = _inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeBOMProposalForInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the BOM proposal must be included for the InventTrans line.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>ProdJournalCreateInventTransVerificationParameters</c>.</param>
    /// <returns>true, if the BOM proposal must be included for the InventTrans line; otherwise false.</returns>
    protected boolean mustIncludeBOMProposalForInventTrans(ProdJournalCreateInventTransVerificationParameters _parameters)
    {
        if (!this.remainBOMFinancialSpecified(_parameters.remainFinancial))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesInventTrans</Name>
				<Source><![CDATA[
    protected void createLinesInventTrans()
    {
        ProdBOM                     prodBOM;
        Qty                         remainFinancial;
        InventTransOriginId         prevInventTransOriginId = 0;

        setPrefix("@SYS28536");
        
        QueryRun queryRun = new QueryRun(this.buildInventTransCreateLinesQuery());

        List transactions = new List(Types::Container);
        Map remainFinancialByProdBOM = new Map(Types::String, Types::Real);
        Map transactionCountByProdBOM = new Map(Types::String, Types::Integer);

        while(queryRun.next())
        {
            InventTrans inventTrans = queryRun.get(tableNum(InventTrans));

            if (inventTrans.Qty == 0 && inventTrans.PdsCWQty == 0)
            {
                continue;
            }

            if (prevInventTransOriginId != inventTrans.InventTransOrigin)
            {
                prodBOM                  = ProdBOM::findTransId(InventTransOrigin::find(inventTrans.InventTransOrigin).InventTransId, true);
                prevInventTransOriginId  = inventTrans.InventTransOrigin;
                if (!remainFinancialByProdBOM.exists(prodBOM.InventTransId))
                {
                    remainFinancialByProdBOM.insert(prodBOM.InventTransId, prodBOM.RemainBOMFinancial);
                }
                remainFinancial          = remainFinancialByProdBOM.lookup(prodBOM.InventTransId);
            }

            ProdJournalCreateInventTransVerificationParameters parameters = ProdJournalCreateInventTransVerificationParameters::construct();
            parameters.remainFinancial = remainFinancial;
            parameters.inventTrans     = inventTrans;
            parameters.prodBOM         = prodBOM;

            if (!this.mustIncludeBOMProposalForInventTrans(parameters))
            {
                continue;
            }
            
            BOMQty bomProposal = this.calculateBOMProposal(inventTrans,
													       prodBOM.inventUnit(),
													       prodBOM.UnitId,
														   remainFinancial);

            remainFinancial += bomProposal;
            remainFinancialByProdBOM.insert(prodBOM.InventTransId, remainFinancial);
            transactions.addEnd([inventTrans, bomProposal]);

            if (transactionCountByProdBOM.exists(prodBOM.InventTransId))
            {
                transactionCountByProdBOM.insert(prodBOM.InventTransId, 1 + transactionCountByProdBOM.lookup(prodBOM.InventTransId));
            }
            else
            {
                transactionCountByProdBOM.insert(prodBOM.InventTransId, 1);
            }
        }

        ListEnumerator enum = transactions.getEnumerator();

        while(enum.moveNext())
        {
            InventTrans inventTrans;
            BOMQty bomProposal;

            [inventTrans, bomProposal] = enum.current();

            if (prevInventTransOriginId != inventTrans.InventTransOrigin)
            {
                prodBOM                  = ProdBOM::findTransId(InventTransOrigin::find(inventTrans.InventTransOrigin).InventTransId, true);
                prevInventTransOriginId  = inventTrans.InventTransOrigin;
            }

            this.initializeProdJournalBOM(prodJournalBOM, prodBOM, inventTrans);

            this.assignAdjustedQuantities(prodJournalBOM, bomProposal, prodBOM, inventTrans, remainFinancialByProdBOM, transactionCountByProdBOM);

            prodBOM.ConstantReleased = NoYes::Yes;
            prodJournalBOM.insertJournalCreate(prodJournalTransData, prodBOM);

            if (prodBOM.ConstantReleased != prodBOM.orig().ConstantReleased)
            {
                prodBOM.doUpdate();
            }
        }

        if (prodJournalTable.WaitCreateLine)
        {
            prodJournalTable.WaitCreateLine = NoYes::No;
            prodJournalTable.SystemBlocked  = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProdBomCreateLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>ProdBOM</c> <c>Query</c> instance with relevant indexes and ranges.
    /// </summary>
    /// <returns>The created <c>ProdBOM</c> <c>Query</c> instance.</returns>
    protected Query buildProdBomCreateLinesQuery()
    {
        Query prodBOMQuery = new Query();

        QueryBuildDataSource prodBOMQueryBuildDS = prodBOMQuery.addDataSource(tableNum(ProdBOM));
        prodBOMQueryBuildDS.update(true);
        prodBOMQueryBuildDS.addSortIndex(indexNum(ProdBOM, NumIdx));
        prodBOMQueryBuildDS.indexIsHint(true);

        this.addProdBOMCreateLinesRanges(prodBOMQueryBuildDS);

        return prodBOMQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdBOMCreateLinesRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the <c>ProdBOM</c> <c>QueryBuildDataSource</c> instance.
    /// </summary>
    /// <param name = "_prodBOMQueryBuildDS">The <c>QueryBuildDataSource</c> instance to add ranges to.</param>
    protected void addProdBOMCreateLinesRanges(QueryBuildDataSource _prodBOMQueryBuildDS)
    {
        _prodBOMQueryBuildDS.addRange(fieldNum(ProdBOM, ProdId)).value(queryValue(prodId));
        _prodBOMQueryBuildDS.addRange(fieldNum(ProdBOM, OprNum)).value(queryRange(oprNumFrom, oprNumTo ? oprNumTo : intMax()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdCOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdBomCalc</c> record.
    /// </summary>
    /// <param name = "_bomCalcData">The <c>BOMCalcData</c> instance to create the new <c>ProdBomCalc</c> record from.</param>
    /// <param name = "_prodBOM">The related <c>ProdBOM</c> record.</param>
    /// <returns>The created <c>ProdBomCalc</c> record.</returns>
    [Replaceable]
    protected ProdBomCalc createProdCOMCalc(BOMCalcData _bomCalcData, ProdBOM _prodBOM)
    {
        return ProdBOMCalc::newBOMCalcData(_bomCalcData, _prodBOM, consumpProposal, bomAutoConsump, !_prodBOM.ConstantReleased, skipAccError, isStart, isFinish);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesConsumptionProdBOM</Name>
				<Source><![CDATA[
    private void createLinesConsumptionProdBOM()
    {
        consumptionProdBOM.selectForUpdate(true);

        InventQty inventConsump = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(consumptionProdBOM.ItemId,
                                                                                                        consumptionProdBOM.InventDimId,
                                                                                                        qtyConsumption,
                                                                                                        consumptionProdBOM.UnitId,
                                                                                                        InventTableModule::find(consumptionProdBOM.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                                        NoYes::Yes);

        PdsCWInventQty cwConsump = cwQtyConsump ? cwQtyConsump : PdsCatchWeight::cwQty(consumptionProdBOM.ItemId, inventConsump);

        ProdBOMCreateSingleLineParameters parameters = ProdBOMCreateSingleLineParameters::construct();
        parameters.prodBOM             = consumptionProdBOM;
        parameters.bomConsump          = qtyConsumption;
        parameters.bomProposal         = 0;
        parameters.inventConsump       = inventConsump;
        parameters.inventProposal      = 0;
        parameters.pdsCWInventConsump  = cwConsump;
        parameters.pdsCWInventProposal = 0;

        this.createSingleLineProdBOM(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProdBomConsumptionSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the consumption is set for the provided <c>ProdBOM</c> instance.
    /// </summary>
    /// <param name = "_prodBom">The <c>ProdBOM</c> instance.</param>
    /// <returns>True if the consumption is set; false if not.</returns>
    /// <remarks>
    /// The Bom inventory consumption refers to the QtyInventCalc.
    /// On the other hand, since Bom consumption can be processed by a vendor,
    /// either the BOMConsump or the VendId will be set when the quantities have been processed.
    /// Additionally, the quantity should be recalculated if it is partially received.
    /// </remarks>
    protected boolean isProdBomConsumptionSet(ProdBOM _prodBom)
    {
        return  _prodBom                        &&
                _prodBOM.QtyInventCalc          &&
                (_prodBOM.BOMConsump  			||
                 (_prodBom.VendId 				&&
                    this.isFullReceive(_prodBom, this.getProdQty(_prodBom))
                  ));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesNonConsumptionProdBOM</Name>
				<Source><![CDATA[
    private void createLinesNonConsumptionProdBOM()
    {
        QueryRun queryRun = new QueryRun(this.buildProdBomCreateLinesQuery());

        while(queryRun.next())
        {
            ProdBOM prodBom = queryRun.get(tableNum(ProdBom));
            ProdBOMCreateSingleLineParameters parameters = this.createProdBOMLineParameters(prodBom);
            this.createSingleLineProdBOM(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdBOMLineParameters</Name>
				<Source><![CDATA[
    private ProdBOMCreateSingleLineParameters createProdBOMLineParameters(ProdBOM _prodBOM)
    {
        InventQty prodQty = this.getProdQty(_prodBOM);
        boolean fullReceive = this.isFullReceive(_prodBOM, prodQty);
        if (this.shouldRecalculate(_prodBOM, fullReceive))
        {
            ProdBOMCalc prodBOMCalc = this.createProdBOMCalc(_prodBOM, prodQty, fullReceive);
            return ProdBOMCreateSingleLineParameters::newProdBOMCalc(prodBOMCalc);
        }
        else
        {
            return ProdBOMCreateSingleLineParameters::newProdBOM(_prodBOM);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdBOMCalc</Name>
				<Source><![CDATA[
    private ProdBOMCalc createProdBOMCalc(ProdBOM _prodBOM, InventQty _prodQty, boolean _isFullReceive)
    {
        BOMCalcData bomCalcData = BOMCalcData::newProdTable(_prodQty, this.getProdTable());
        bomCalcData.parmApplyScrap(_isFullReceive);
        return this.createProdCOMCalc(bomCalcData, _prodBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRecalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quantities should be recalculated.
    /// </summary>
    /// <param name = "_prodBOM">The <c>ProdBOM</c> being processed.</param>
    /// <param name = "_isFullReceive">Is full or partial receipt</param>
    /// <returns>True, if quantities should be recalculated; false, if it should not.</returns>
    private boolean shouldRecalculate(ProdBOM _prodBOM, boolean _isFullReceive)
    {
        return !this.isProdBomConsumptionSet(_prodBOM) && !(this.prodQtyMap && _isFullReceive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFullReceive</Name>
				<Source><![CDATA[
    private boolean isFullReceive(ProdBOM _prodBOM, InventQty _prodQty)
    {
        return _prodBOM.QtyInventCalc == _prodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdQty</Name>
				<Source><![CDATA[
    public InventQty getProdQty(ProdBOM _prodBOM)
    {
        if (this.prodQtyMap)
        {
            if (this.prodQtyMap.exists(_prodBOM.RecId))
            {
                return this.prodQtyMap.lookup(_prodBOM.RecId);
            }
            if (!isPartiallyReceivedWork)
            {
                // record is not in map and work is fully received -> use the BOM's quantity for calculation
                return _prodBOM.QtyInventCalc;
            }
        }
        return qtyCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdTable</Name>
				<Source><![CDATA[
    private ProdTable getProdTable()
    {
        if (!this.currentProdTable || this.currentProdTable.ProdId != prodId)
        {
            this.currentProdTable = ProdTable::find(prodId);
        }
        return this.currentProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>ProdBOMLine</c> records.
    /// </summary>
    protected void createLinesProdBOM()
    {
        setPrefix("@SYS28536");

        if (consumptionProdBOM.RecId)
        {
            this.createLinesConsumptionProdBOM();
        }
        else
        {
            oprNumTo = !oprNumTo ? oprNumFrom : oprNumTo;

            this.createLinesNonConsumptionProdBOM();
        }

        if (prodJournalTable.WaitCreateLine)
        {
            prodJournalTable.WaitCreateLine = NoYes::No;
            prodJournalTable.SystemBlocked  = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateSingleLineProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a single line production BOM can be created.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>ProdBOMCreateSingleLineParameters</c>.</param>
    /// <returns>true if a single line production BOM can be created; otherwise, false.</returns>
    protected boolean canCreateSingleLineProdBOM(ProdBOMCreateSingleLineParameters _parameters)
    {
        ProdBOM prodBOM = _parameters.prodBOM;

        if (_parameters.bomConsump || _parameters.bomProposal || _parameters.inventConsump || _parameters.inventProposal
                || (endUpdate
                    && (bomAutoConsump != BOMAutoConsump::FlushingPrincip || prodBOM.ProdFlushingPrincip != ProdFlushingPrincipBOM::Manual)
                    &&  prodBOM.BackorderStatus == ProdBackStatus::Release))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSingleLineProdBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a single line production BOM table record.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>ProdBOMCreateSingleLineParameters</c>.</param>
    protected void createSingleLineProdBOM(ProdBOMCreateSingleLineParameters _parameters)
    {
        if (this.canCreateSingleLineProdBOM(_parameters))
        {
            ProdBOM prodBOM = _parameters.prodBOM;
            prodJournalTableData.initJournalId();
            this.initializeProdJournalBOMFromProdBOMParameters(_parameters);
            prodBOM.ConstantReleased = NoYes::Yes;

            // Notes: The additional logic only applies to resetting production order status from Started to Released
            if (TaxParameters::isExciseEnable_IN() && consumpProposal == ProdBOMConsumpProposal::Reversed)
            {
                this.createProdJournalBOMLines_IN(prodJournalBOM, prodBOM);
            }
            else if (BOMParameters::find().EnableTrackedComponents)
            {
                ProdAsBuiltBOMCreatePickingListBuilder::construct()
                        .setProdJournalTransData(prodJournalTransData)
                        .setProdBOM(prodBOM)
                        .setProdJournalBOM(prodJournalBOM)
                        .setFlushingPrinciple(prodBOM.ProdFlushingPrincip)
                        .setIsEndJob(false)
                        .setIsPickingListDerivedJournal(this.parmIsPickingListDerivedJournal())
                        .setIsAutoPick(true)
                        .setInventDimId(inventDimId)
                        .setMatchId(matchId).createPickingListLine();
            }
            else
            {
                if (this.parmIsPickingListDerivedJournal())
                {
                    prodJournalBOM.pickMaterialFromWarehouse(prodBOM);
                }

                prodJournalBOM.insertJournalCreate(prodJournalTransData, prodBOM, false, inventDimId);

            }

            if (prodBOM.ConstantReleased != prodBOM.orig().ConstantReleased)
            {
                prodBOM.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdJournalBOMFromProdBOMParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a production picking list journal line.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>ProdBOMCreateSingleLineParameters</c>.</param>
    protected void initializeProdJournalBOMFromProdBOMParameters(ProdBOMCreateSingleLineParameters _parameters)
    {
        this.initTransFromProdBOM(prodJournalBOM, _parameters.prodBOM);

        prodJournalBOM.bomConsump      = _parameters.bomConsump;
        prodJournalBOM.bomProposal     = _parameters.bomProposal;
        prodJournalBOM.InventConsump   = _parameters.inventConsump;
        prodJournalBOM.InventProposal  = _parameters.inventProposal;

        prodJournalBOM.PdsCWInventConsump = _parameters.pdsCWInventConsump;
        prodJournalBOM.PdsCWInventProposal= _parameters.pdsCWInventProposal;

        if (consumpAsProposal)
        {
            prodJournalBOM.bomConsump       = prodJournalBOM.bomProposal;
            prodJournalBOM.InventConsump    = prodJournalBOM.InventProposal;
            prodJournalBOM.PdsCWInventConsump = prodJournalBOM.PdsCWInventProposal;
        }

        if (proposalAsConsump)
        {
            prodJournalBOM.bomProposal      = prodJournalBOM.bomConsump;
            prodJournalBOM.InventProposal   = prodJournalBOM.InventConsump;
            prodJournalBOM.PdsCWInventProposal = prodJournalBOM.PdsCWInventConsump;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalBOMLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates production journal BOM lines per India excise fields.
    /// </summary>
    /// <param name="_prodJournalBOM">
    /// Production journal BOM information to be derived.
    /// </param>
    /// <param name="_prodBOM">
    /// Production BOM information.
    /// </param>
    /// <remarks>
    /// For SYS logic, only one production journal BOM line is created per production BOM.
    /// For India logic, need separate production journal BOM lines per India excise fields
    /// to keep the reverted register and excise information the same.
    /// </remarks>
    protected void createProdJournalBOMLines_IN(ProdJournalBOM _prodJournalBOM, ProdBOM _prodBOM)
    {
        ProdJournalTable                prodJournalTablePosted;
        ProdJournalBOM                  prodJournalBOMPosted;
        ProdJournalBOM                  prodJournalBOMNew;

        while select sum(BOMConsump), sum(InventConsump), sum(PdsCWInventConsump) from prodJournalBOMPosted
            where prodJournalBOMPosted.InventTransId        == _prodBOM.InventTransId
            exists join prodJournalTablePosted
                where prodJournalTablePosted.Posted
                    && prodJournalTablePosted.JournalId     == prodJournalBOMPosted.JournalId
                    && prodJournalTablePosted.JournalType   == ProdJournalType::Picklist
        {
            prodJournalBOMNew.data(_prodJournalBOM);
            prodJournalBOMNew.BOMConsump            = -prodJournalBOMPosted.BOMConsump;
            prodJournalBOMNew.BOMProposal           = -prodJournalBOMPosted.BOMConsump;
            prodJournalBOMNew.InventConsump         = -prodJournalBOMPosted.InventConsump;
            prodJournalBOMNew.InventProposal        = -prodJournalBOMPosted.InventConsump;
            prodJournalBOMNew.PdsCWInventConsump    = -prodJournalBOMPosted.PdsCWInventConsump;
            prodJournalBOMNew.PdsCWInventProposal   = -prodJournalBOMPosted.PdsCWInventConsump;

            ProdJournalTransData prodJournalTransDataLocal = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOMNew,prodJournalTableData);
            if (prodJournalTable.NumOfLines)
            {
                prodJournalTransDataLocal.parmLastLineNum(ProdJournalBOM::lastLineNum(prodJournalTable.journalId));
            }

            prodJournalBOMNew.insertJournalCreate(prodJournalTransDataLocal, _prodBOM);
            TransTaxInformationHelper::copyTransTaxInformation(prodJournalBOMPosted, prodJournalBOMNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Args args = new Args(formStr(ProdJournalCreateBOM));
        args.caller(this);

        dialog = classfactory.formRunClass(args);

        this.initDialogParameters();

        dialog.init();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Dialog</c> instance parameters.
    /// </summary>
    protected void initDialogParameters()
    {
        dialog.parmProdId(prodId);
        dialog.parmBOMAutoConsump(bomAutoConsump);
        dialog.parmProdOprNum(oprNumFrom);
        dialog.parmTransDate(transDate);
        dialog.parmInventQty(qtyCalc);
        dialog.parmProdJournalNameIdBOM(journalNameId);
        dialog.parmProdBOMConsumpProposal(consumpProposal);
        dialog.parmProdConsumpAsProposal(consumpAsProposal);
        // <GEERU>
        dialog.parmStornoPhysical_RU(InventParameters::find().StornoPhysicalPosting_RU);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        transDate           =    dialog.parmTransDate();
        prodId              =    dialog.parmProdId();
        bomAutoConsump      =    dialog.parmBOMAutoConsump();
        journalNameId       =    dialog.parmProdJournalNameIdBOM();
        consumpProposal     =    dialog.parmProdBOMConsumpProposal();
        consumpAsProposal   =    dialog.parmProdConsumpAsProposal();
        oprNumFrom          =    dialog.parmProdOprNum();
        qtyCalc             =    dialog.parmInventQty();
        // <GEERU>
        stornoPhysical      =    dialog.parmStornoPhysical_RU();
        // </GEERU>

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        drawNegative        = NoYes::No;

        journalNameId       = ProdParametersDim::findDefault().bomJournalNameId;
        bomAutoConsump      = BOMAutoConsump::Never;
        consumpProposal     = ProdBOMConsumpProposal::Qty;
        consumpAsProposal   = NoYes::Yes;
        skipAccError        = NoYes::No;
        // <GEERU>
        stornoPhysical      = InventParameters::find().StornoPhysicalPosting_RU;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalTableData</Name>
				<Source><![CDATA[
    void initProdJournalTableData(ProdJournalType _journalType)
    {
        super(_journalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromProdBOM</Name>
				<Source><![CDATA[
    protected void initTransFromProdBOM(
        ProdJournalBOM  _prodJournalBOM,
        ProdBOM         _prodBOM
        )
    {
        _prodJournalBOM.clear();
        _prodJournalBOM.initValue();

        prodJournalTransData.initFromJournalTable();

        _prodJournalBOM.initFromProdBOM(_prodBOM);

        if (inventDimId)
        {
            _prodJournalBOM.InventDimId = inventDimId;
        }

        _prodJournalBOM.TransDate      = transDate;
        _prodJournalBOM.EndConsump     = endUpdate;
        // <GEERU>
        if (countryRegion_RU)
        {
            _prodJournalBOM.StornoPhysical_RU = stornoPhysical;
        }
        // </GEERU>
        // <GIN>
        if (TaxParameters::isExciseEnable_IN())
        {
            TransTaxInformation transTaxInformation_Current;
            TransTaxInformation transTaxInformation_Origin;

            transTaxInformation_Current = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_prodJournalBOM, true);
            transTaxInformation_Origin  = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(_prodBOM.prodTable());

            transTaxInformation_Current.CompanyLocation = transTaxInformation_Origin.CompanyLocation;
            transTaxInformation_Current.TaxInformation  = transTaxInformation_Origin.TaxInformation;
            TransTaxInformationHelper::initFromTaxInformation(transTaxInformation_Current);
            transTaxInformation_Current.ExciseType = ExciseType_IN::Manufacturer;
            ttsbegin;
            transTaxInformation_Current.doUpdate();
            ttscommit;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEmpty</Name>
				<Source><![CDATA[
    boolean isJournalEmpty()
    {
        return !prodJournalTableData.hasLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdQtyMap</Name>
				<Source><![CDATA[
    public Map parmProdQtyMap(Map _prodQtyMap)
    {
        this.prodQtyMap = _prodQtyMap;
        return this.prodQtyMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartialReceive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor work is partially received and sets the corresponding field.
    /// </summary>
    /// <param name = "_prodBOM">The <c>ProdBOM</c> representing the vendor work.</param>
    /// <param name = "_prodQty">Received inventory quantity</param>
    internal void setPartialReceive(ProdBOM _prodBOM, InventQty _prodQty)
    {
        this.isPartiallyReceivedWork = !this.isFullReceive(_prodBOM, _prodQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMAutoConsump</Name>
				<Source><![CDATA[
    public BOMAutoConsump parmBOMAutoConsump(BOMAutoConsump _bomAutoConsump = bomAutoConsump)
    {
        bomAutoConsump = _bomAutoConsump;
        return bomAutoConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumpAsProposal</Name>
				<Source><![CDATA[
    public NoYes parmConsumpAsProposal(NoYes _consumpAsProposal = consumpAsProposal)
    {
        consumpAsProposal = _consumpAsProposal;
        return consumpAsProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumpProposal</Name>
				<Source><![CDATA[
    public ProdBOMConsumpProposal  parmConsumpProposal(ProdBOMConsumpProposal _consumpProposal = consumpProposal)
    {
        consumpProposal = _consumpProposal;
        return consumpProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDrawNegative</Name>
				<Source><![CDATA[
    public NoYes parmDrawNegative(NoYes _drawNegative = drawNegative)
    {
        drawNegative = _drawNegative;
        return drawNegative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumFrom</Name>
				<Source><![CDATA[
    public OprNum parmOprNumFrom(OprNum _oprNumFrom = oprNumFrom)
    {
        oprNumFrom = _oprNumFrom;
        return oprNumFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumTo</Name>
				<Source><![CDATA[
    public OprNum parmOprNumTo(OprNum _oprNumTo = oprNumTo)
    {
        oprNumTo = _oprNumTo;
        return oprNumTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdIsFinish</Name>
				<Source><![CDATA[
    public boolean parmProdIsFinish(boolean _isFinish = isFinish)
    {
        isFinish = _isFinish;
        return isFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdIsStart</Name>
				<Source><![CDATA[
    public boolean parmProdIsStart(boolean _isStart = isStart)
    {
        isStart = _isStart;
        return isStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProposalAsConsump</Name>
				<Source><![CDATA[
    public NoYes parmProposalAsConsump(NoYes _proposalAsConsump = proposalAsConsump)
    {
        proposalAsConsump = _proposalAsConsump;
        return proposalAsConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyCalc</Name>
				<Source><![CDATA[
    public InventQty parmQtyCalc(InventQty _qtyCalc = qtyCalc)
    {
        qtyCalc = _qtyCalc;
        return qtyCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipAccError</Name>
				<Source><![CDATA[
    public NoYes parmSkipAccError(NoYes _skipAccError = skipAccError)
    {
        skipAccError = _skipAccError;
        return skipAccError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumptionProdBOM</Name>
				<Source><![CDATA[
    public ProdBOM parmConsumptionProdBOM(ProdBOM _consumptionProdBOM = consumptionProdBOM)
    {
        consumptionProdBOM = _consumptionProdBOM;
        return consumptionProdBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWQtyConsump</Name>
				<Source><![CDATA[
    public PdsCWQty parmCWQtyConsump(PdsCWQty _cwQtyConsump = cwQtyConsump)
    {
        cwQtyConsump = _cwQtyConsump;
        return cwQtyConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyConsumption</Name>
				<Source><![CDATA[
    public BOMQty parmQtyConsumption(BOMQty _qtyConsumption = qtyConsumption)
    {
        qtyConsumption = _qtyConsumption;
        return qtyConsumption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPickingListDerivedJournal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsPickingListDerivedJournal(boolean _isPickingListDerivedJournal = isPickingListDerivedJournal)
    {
        isPickingListDerivedJournal = _isPickingListDerivedJournal;
        return isPickingListDerivedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchId</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMMatchId parmMatchId(ProdAsBuiltBOMMatchId _matchId = matchId)
    {
        matchId = _matchId;
        return matchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemoveCWZeroLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes journal lines with zero catch weight consumption.
    /// </summary>
    /// <param name="_journalId">
    /// The journal line ID.
    /// </param>
    public void pdsCWRemoveCWZeroLines(JournalId _journalId)
    {
        ttsbegin;
        while select forupdate prodJournalBOM
            where prodJournalBOM.JournalId == _journalId
        {
            if (PdsGlobal::pdsIsCWItem(prodJournalBOM.ItemId))
            {
                if (prodJournalBOM.PdsCWInventConsump == 0)
                {
                    prodJournalBOM.delete();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMAutoConsump</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Set automatic BOM consumption parameter according the production parameters.
    /// </summary>
    /// <param name="prodTable">
    ///  A <c>ProdTable</c> record which will be updated.
    /// </param>
    public void setBOMAutoConsump(ProdTable prodTable)
    {
        ProdParametersDim    prodParametersDim      = prodTable.prodParametersDim();

        if (prodTable.status().isBefore(ProdStatus::StartedUp))
        {
            bomAutoConsump  = prodParametersDim.bomAutoConsumpStUp;
            isStart         = true;
            isFinish        = false;
        }
        else
        {
            bomAutoConsump  = prodParametersDim.bomAutoConsumpRepFin;
            isStart         = false;
            isFinish        = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmForm</Name>
				<Source><![CDATA[
    void setParmForm(ProdId _prodId)
    {
        this.parmJournalId(''); // create new
        this.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        this.parmProdId(_prodId);
        this.parmOprNumFrom(0);
        this.parmOprNumTo(0);
        this.parmQtyCalc(0);

        this.parmBOMAutoConsump(BOMAutoConsump::Never);
        this.parmDrawNegative(NoYes::Yes);
        this.parmSkipAccError(NoYes::No);
        this.parmEndUpdate(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,base] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>ProdJournalBOM</c> record is not missing the posting.
    /// </summary>
    /// <returns>true if the posting is not missing; otherwise, false.</returns>
    protected boolean checkNotMissingPosting()
    {
        return ProdJournalBOM::checkNotMissingPosting(prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (consumpProposal == ProdBOMConsumpProposal::Reversed)
        {
            ok = ok && this.checkNotMissingPosting();
        }

        ok = ok && this.checkCreateLinesProdBOM();

        return ok && super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdJournalCreateBOM construct()
    {
        return new ProdJournalCreateBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS26120";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        JournalFormTable                journalForm;
        FormDataSource                  journalTable_DS;

        ProdJournalId                   journalId;

        switch (args.caller().name())
        {
            case formstr(ProdJournalTable):
                ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::newProdJournalTableForm(args);
                if (! prodJournalCreateBOM.prompt())
                {
                    return;
                }

                prodJournalCreateBOM.runOperation();

                prodJournalCreateBOM.pdsCWRemoveCWZeroLines(
                    prodJournalCreateBOM.usedProdJournalTable().JournalId);

                if (prodJournalCreateBOM.usedProdJournalTable().JournalId)
                {
                    journalForm     = args.caller().journalForm();
                    journalTable_DS = FormDataUtil::getFormDataSource(journalForm.journalTableData().journalTable());
                    if (journalForm.parmCtrlAllOpenPosted())
                    {
                        journalForm.parmCtrlAllOpenPosted().selection(AllOpenPosted::Open);
                    }
                    journalTable_DS.executeQuery();
                    journalTable_DS.positionToRecord(ProdJournalTable::find(prodJournalCreateBOM.usedProdJournalTable().JournalId));

                    args.name(formstr(ProdJournalTransBOM));

                    FormRun formProdJournalBOM = classfactory.formRunClass(args);
                    formProdJournalBOM.init();
                    formProdJournalBOM.run();
                    formProdJournalBOM.wait();
                }
                else
                {
                    info("@SYS71699");
                }
                break;
            case formstr(ProdJournalTransBOM):
                prodJournalCreateBOM = ProdJournalCreateBOM::newProdJournalTableForm(args);
                if (! prodJournalCreateBOM.prompt())
                {
                    return;
                }

                prodJournalCreateBOM.runOperation();

                prodJournalCreateBOM.pdsCWRemoveCWZeroLines(
                    prodJournalCreateBOM.usedProdJournalTable().JournalId);

                if (prodJournalCreateBOM.usedProdJournalTable().JournalId)
                {
                    JournalFormTrans journalFormTrans = args.caller().journalForm();
                    journalTable_DS = journalFormTrans.parmJournalFormTable().journalTable_DS();
                    journalTable_DS.executeQuery();
                    journalTable_DS.positionToRecord(ProdJournalTable::find(prodJournalCreateBOM.usedProdJournalTable().JournalId));
                }
                else
                {
                    info("@SYS71699");
                }
                break;

            case formstr(ProdJournalTransProd):
                ProdJournalProd prodJournalProd = args.record();
                ProdJournalTable prodJournalTable = ProdJournalTable::find(prodJournalProd.JournalId);

                if (prodJournalTable.Posted)
                {
                    return;
                }

                if (! prodJournalProd.ProdPickListJournalId)
                {
                    //
                    // Route scrap should be disregarded, because
                    // we manually specify the scrap by setting Error Quantity of produced items.
                    //
                    prodJournalCreateBOM = ProdJournalCreateBOM::newProdJournalProd(prodJournalProd, NoYes::Yes);

                    if (! prodJournalCreateBOM.prompt())
                    {
                        return;
                    }

                    prodJournalCreateBOM.runOperation();

                    if (prodJournalCreateBOM.usedProdJournalTable().JournalId)
                    {
                        prodJournalProd.ProdPickList           = NoYes::Yes;
                        prodJournalProd.ProdPickListJournalId  = prodJournalCreateBOM.usedProdJournalTable().JournalId;

                        if (FormDataUtil::getFormDataSource(prodJournalProd))
                        {
                            FormDataUtil::getFormDataSource(prodJournalProd).write();
                        }
                    }
                    else
                    {
                        info("@SYS71699");
                    }
                }

                if (prodJournalProd.ProdPickListJournalId)
                {
                    journalId = prodJournalProd.ProdPickListJournalId;
                }

                break;

            case formstr(ProdJournalTransRoute):
            case formstr(ProdJournalTransJob):

                ProdJournalRoute prodJournalRoute = args.record();
                prodJournalTable = ProdJournalTable::find(prodJournalRoute.JournalId);

                if (prodJournalTable.Posted)
                {
                    return;
                }

                if (! prodJournalRoute.ProdPickListJournalId)
                {
                    //
                    // Route scrap should be disregarded, because
                    // we manually specify the scrap by setting Error Quantity of produced items.
                    //
                    prodJournalCreateBOM = ProdJournalCreateBOM::newProdJournalRoute(prodJournalRoute, NoYes::Yes);

                    if (! prodJournalCreateBOM.prompt())
                    {
                        return;
                    }

                    prodJournalCreateBOM.runOperation();

                    if (prodJournalCreateBOM.usedProdJournalTable().JournalId)
                    {
                        prodJournalRoute.ProdPickList           = NoYes::Yes;
                        prodJournalRoute.ProdPickListJournalId  = prodJournalCreateBOM.usedProdJournalTable().JournalId;

                        if (FormDataUtil::getFormDataSource(prodJournalRoute))
                        {
                            FormDataUtil::getFormDataSource(prodJournalRoute).write();
                        }
                    }
                    else
                    {
                        info("@SYS71699");
                    }
                }

                if (prodJournalRoute.ProdPickListJournalId)
                {
                    journalId = prodJournalRoute.ProdPickListJournalId;
                }

                break;

            case formstr(ProdAsBuiltBOMProductComponentAssociation):
                ProdAsBuiltBOMProductLotAssociation productLotAssociation = args.record();
                if (productLotAssociation.IsCompleted)
                {
                    info("@SCM:TrackedComponentsProductAssocitionCompletion");
                    return;
                }

                prodJournalCreateBOM = ProdJournalCreateBOM::createPickingListFromProductLotAssociation(productLotAssociation);
                prodJournalCreateBOM.runOperation();

                journalId = prodJournalCreateBOM.usedProdJournalTable().JournalId;
                if (journalId)
                {
                    if (FormDataUtil::getFormDataSource(productLotAssociation))
                    {
                        FormDataUtil::getFormDataSource(productLotAssociation).write();
                    }
                }
                else
                {
                    info("@SYS71699");
                }
                break;

            default:
                throw error(strfmt("@SYS22828",funcname()));
        }

        if (journalId)
        {
            ProdJournalTable prodJournalTableBOM = ProdJournalTable::find(journalId);

            if (prodJournalTableBOM)
            {
                Args argsTable = new Args();
                argsTable.name(formstr(ProdJournalTable));
                argsTable.parmEnumType(enumnum(ProdJournalType));
                argsTable.parmEnum(ProdJournalType::Picklist);
                argsTable.record(prodJournalTableBOM);  //Dynalink used to this record

                FormRun formProdJournalTable = classfactory.formRunClass(argsTable);
                formProdJournalTable.init();
                formProdJournalTable.run();

                Object formRun = formProdJournalTable;
                journalForm = formRun.journalForm();
                journalForm.openLinesForm();
            }
            else
            {
                warning(strfmt("@SYS21496",journalId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalProd</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newProdJournalProd(
        ProdJournalProd _prodJournalProd,
        NoYes           _skipAccError = NoYes::No)
    {
        ProdJournalCreateBOM        prodJournalCreateBOM = ProdJournalCreateBOM::construct();

        prodJournalCreateBOM.getLast();

        prodJournalCreateBOM.parmJournalId(''); // create new
        prodJournalCreateBOM.parmJournalNameId(ProdJournalTable::find(_prodJournalProd.JournalId).JournalNameIdPickList);
        prodJournalCreateBOM.parmTransDate(_prodJournalProd.TransDate);
        prodJournalCreateBOM.parmProdId(_prodJournalProd.ProdId);
        prodJournalCreateBOM.parmEndUpdate(_prodJournalProd.ProdFinished);

        prodJournalCreateBOM.parmOprNumFrom(0);
        prodJournalCreateBOM.parmOprNumTo(0);
        prodJournalCreateBOM.parmQtyCalc(_prodJournalProd.QtyError + _prodJournalProd.QtyGood);
        prodJournalCreateBOM.parmConsumpAsProposal(NoYes::Yes);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::No);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
        prodJournalCreateBOM.parmBOMAutoConsump(BOMAutoConsump::Never);
        prodJournalCreateBOM.parmDrawNegative(NoYes::Yes);
        prodJournalCreateBOM.parmSkipAccError(_skipAccError);

        prodJournalCreateBOM.init();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalRoute</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newProdJournalRoute(
        ProdJournalRoute _prodJournalRoute,
        NoYes            _skipAccError = NoYes::No)
    {
        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::construct();

        prodJournalCreateBOM.getLast();

        prodJournalCreateBOM.parmJournalId(''); // create new
        prodJournalCreateBOM.parmJournalNameId(ProdJournalTable::find(_prodJournalRoute.JournalId).JournalNameIdPickList);
        prodJournalCreateBOM.parmTransDate(_prodJournalRoute.TransDate);
        prodJournalCreateBOM.parmProdId(_prodJournalRoute.ProdId);
        prodJournalCreateBOM.parmEndUpdate(_prodJournalRoute.OprFinished);

        prodJournalCreateBOM.parmOprNumFrom(_prodJournalRoute.OprNum);
        prodJournalCreateBOM.parmOprNumTo(_prodJournalRoute.OprNum);
        prodJournalCreateBOM.parmQtyCalc(_prodJournalRoute.QtyError + _prodJournalRoute.QtyGood);
        prodJournalCreateBOM.parmConsumpAsProposal(NoYes::Yes);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::No);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
        prodJournalCreateBOM.parmDrawNegative(NoYes::Yes);
        prodJournalCreateBOM.parmSkipAccError(_skipAccError);

        prodJournalCreateBOM.init();
        prodJournalCreateBOM.setBOMAutoConsump(_prodJournalRoute.prodTable());

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalTableBOMAuto</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newProdJournalTableBOMAuto(
        ProdJournalTable _prodJournalTableBOM,
        NoYes            _skipAccError = NoYes::No)
    {
        ProdJournalCreateBOM        prodJournalCreateBOM = ProdJournalCreateBOM::construct();

        prodJournalCreateBOM.getLast();

        prodJournalCreateBOM.parmJournalId(_prodJournalTableBOM.JournalId);
        prodJournalCreateBOM.parmJournalNameId(_prodJournalTableBOM.JournalNameId);
        prodJournalCreateBOM.parmTransDate(
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())
        );
        prodJournalCreateBOM.parmProdId(_prodJournalTableBOM.ProdId);
        prodJournalCreateBOM.parmEndUpdate(_prodJournalTableBOM.EndJob);

        prodJournalCreateBOM.parmOprNumFrom(_prodJournalTableBOM.OprNum);
        prodJournalCreateBOM.parmOprNumTo(_prodJournalTableBOM.OprNum);
        prodJournalCreateBOM.parmQtyCalc(_prodJournalTableBOM.QtyError + _prodJournalTableBOM.QtyGood);
        prodJournalCreateBOM.parmConsumpAsProposal(NoYes::Yes);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::No);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
        prodJournalCreateBOM.parmSkipAccError(_skipAccError);

        prodJournalCreateBOM.init();
        prodJournalCreateBOM.setBOMAutoConsump(ProdTable::find(_prodJournalTableBOM.ProdId));
        prodJournalCreateBOM.parmIsPickingListDerivedJournal(true);

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalTableForm</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newProdJournalTableForm(Args _args)
    {
        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::construct();

        prodJournalCreateBOM.getLast();

        prodJournalCreateBOM.setParmForm(ProdTable::argsProdId(_args));
        prodJournalCreateBOM.init();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStatusDecrease</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newStatusDecrease(ProdId _prodId)
    {
        ProdJournalCreateBOM        prodJournalCreateBOM = new ProdJournalCreateBOM();

        prodJournalCreateBOM.parmJournalId(''); // create new
        prodJournalCreateBOM.parmBOMAutoConsump(BOMAutoConsump::Always);
        prodJournalCreateBOM.parmQtyCalc(0);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Reversed);
        prodJournalCreateBOM.parmEndUpdate(NoYes::No);
        prodJournalCreateBOM.parmProdId(_prodId);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::Yes);
        prodJournalCreateBOM.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        prodJournalCreateBOM.parmJournalNameId(ProdTable::find(_prodId).prodParametersDim().bomJournalNameId);
        prodJournalCreateBOM.parmDrawNegative(NoYes::Yes);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            prodJournalCreateBOM.parmStornoPhysical_RU(InventParameters::find().StornoPhysicalPosting_RU);
        }
        // </GEERU>

        prodJournalCreateBOM.init();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>ProdJournalCreateBOM</c> for the specified parameters.
    /// </summary>
    /// <param name = "_consumptionProdBOM">The original <c>ProdBom</c>.</param>
    /// <param name = "_journalNameId">The name of the journal.</param>
    /// <param name = "_transDate">The date of the journal.</param>
    /// <param name = "_consumptionQty">The quantity to consume.</param>
    /// <returns>The <c>ProdJournalCreateBOM</c> instance</returns>
    public static prodJournalCreateBOM newConsumption(
        ProdBOM           _consumptionProdBOM,
        ProdJournalNameId _journalNameId,
        TransDate         _transDate,
        BOMQty            _consumptionQty)
    {
        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::construct();

        prodJournalCreateBOM.getLast();

        prodJournalCreateBOM.parmConsumptionProdBOM(_consumptionProdBOM);
        prodJournalCreateBOM.parmProdId(_consumptionProdBOM.ProdId);
        prodJournalCreateBOM.parmJournalNameId(_journalNameId);
        prodJournalCreateBOM.parmTransDate(_transDate);
        prodJournalCreateBOM.parmQtyConsumption(_consumptionQty);

        prodJournalCreateBOM.parmJournalId('');
        prodJournalCreateBOM.parmEndUpdate(NoYes::No);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
        prodJournalCreateBOM.parmBOMAutoConsump(BOMAutoConsump::Never);
        prodJournalCreateBOM.parmSkipAccError(NoYes::No);
        prodJournalCreateBOM.parmConsumpAsProposal(NoYes::No);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::Yes);

        prodJournalCreateBOM.init();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickingListFromProductLotAssociation</Name>
				<Source><![CDATA[
    internal static ProdJournalCreateBOM createPickingListFromProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _productLotAssociation)
    {
        ProdJournalCreateBOM prodJournalCreateBOM = ProdJournalCreateBOM::construct();

        prodJournalCreateBOM.getLast();

        prodJournalCreateBOM.parmMatchId(_productLotAssociation.MatchId);   // bucket identifier
        prodJournalCreateBOM.parmJournalId(''); // create new
        prodJournalCreateBOM.parmJournalNameId(ProdTable::find(_productLotAssociation.ReferenceId).prodParametersDim().bomJournalNameId);
        prodJournalCreateBOM.parmTransDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        prodJournalCreateBOM.parmProdId(_productLotAssociation.ReferenceId);
        prodJournalCreateBOM.parmEndUpdate(NoYes::No);

        prodJournalCreateBOM.parmOprNumFrom(0);
        prodJournalCreateBOM.parmOprNumTo(0);
        prodJournalCreateBOM.parmQtyCalc(_productLotAssociation.QtyGood + _productLotAssociation.QtyError);
        prodJournalCreateBOM.parmConsumpAsProposal(NoYes::Yes);
        prodJournalCreateBOM.parmProposalAsConsump(NoYes::No);
        prodJournalCreateBOM.parmConsumpProposal(ProdBOMConsumpProposal::Qty);
        prodJournalCreateBOM.parmBOMAutoConsump(BOMAutoConsump::Never);
        prodJournalCreateBOM.parmDrawNegative(NoYes::Yes);
        prodJournalCreateBOM.parmSkipAccError(NoYes::Yes);

        prodJournalCreateBOM.init();

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>