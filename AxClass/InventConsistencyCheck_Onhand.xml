<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventConsistencyCheck_Onhand</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventConsistencyCheck_Onhand extends SysConsistencyCheck implements BatchRetryable
{
    private SysOperationServiceController inventSumSummarizeController;
    private SysOperationServiceController inventCleanupWHSInventSumWithInventDimController;
    private SysOperationServiceController inventCleanupWHSInventSumController;
    private SysOperationServiceController inventCleanupTrackingInventSumController;
    private InventSumSummarizeContract inventSumSummarizeContract;
    private Query query;
    private InventCleanupWHSInventSumWithInventDimContract inventCleanupWHSInventSumWithInventDimContract;
    private InventCleanupWHSInventSumContract inventCleanupWHSInventSumContract;
    private InventCleanupTrackingInventSumContract inventCleanupTrackingInventSumContract;

    ListEnumerator  dimFieldListEnumerator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNotActiveDimensions</Name>
				<Source><![CDATA[
        void checkNotActiveDimensions(InventSum _inventSum)
    {
        InventDim       inventDim               = _inventSum.inventDim();
        InventDimParm   inventDimParmPresent;
        InventDimParm   inventDimParmActive;
        FieldId         dimFieldId;
        List            errorFields = new List(Types::Integer);
        str             errorDimensions;

        setPrefix(inventDim.preFix());
        inventDimParmPresent.initFromInventDim(inventDim); 
        InventDimGroupSetup::newItemId(_inventSum.ItemId).inventDimParmActive(inventDimParmActive);

        dimFieldListEnumerator.reset();
        while (dimFieldListEnumerator.moveNext())
        {
            dimFieldId = dimFieldListEnumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            if (inventDimParmPresent.(dimParmFieldId) == NoYes::Yes &&
                inventDimParmActive.(dimParmFieldId)  == NoYes::No)
            {
                errorFields.addEnd(dimFieldId);
            }
        }

        if (errorFields.elements() == 0)
        {
            return;
        }

        ListEnumerator errorFieldEnumerator = errorFields.getEnumerator();
        if (errorFields.elements() == 1)
        {
            errorFieldEnumerator.moveNext();
            checkFailed(strFmt("@SYS60820", new DictField(tableNum(InventDim),errorFieldEnumerator.current()).label()));
        }
        else
        {
            while (errorFieldEnumerator.moveNext())
            {
                dimFieldId = errorFieldEnumerator.current();
                if (errorDimensions)
                {
                    errorDimensions += ', ';
                }
                errorDimensions += '\'' + new DictField(tableNum(InventDim), dimFieldId).label() + '\'';
            }
            checkFailed(strFmt("@SYS60821", errorDimensions));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
        ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        super();
        dimFieldListEnumerator = InventDim::dimFieldListEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        InventSum                       inventSum;
        boolean                         hasCheckFixMethod = this.hasTableCheckFixMethod(tableNum(InventSum));

        InventConsistencyCheck_Table inventTableConsistencyCheck = consistencyCheckJob.parentClass(classIdGet(this));
        if (! inventTableConsistencyCheck)
        {
            return;
        }

        DictTable dictTable = new DictTable(tableNum(InventSum));
        QueryRun queryRun = inventTableConsistencyCheck.queryRun();

        const int MaxErrorCountToShow = 500;
        int curTotalErrorQty = 0;

        boolean skipInventOnhandConsistencyCheckCleanUp;
        if (consistencyCheckJob.parmCheckFix() == CheckFix::Fix)
        {
            skipInventOnhandConsistencyCheckCleanUp = InventParameters::find().SkipInventOnhandConsistencyCheckCleanUp;
        }

        while (queryRun.next())
        {
            InventTable inventTable = queryRun.get(tableNum(InventTable)) as InventTable;

            setPrefix(#prefixField(inventTable,ItemId));
            boolean showError = true;
            if (curTotalErrorQty >= MaxErrorCountToShow)
            {
                showError = false;
            }
            InventSumReCalcItem inventSumReCalcItem = new InventSumReCalcItem(inventTable.ItemId,showError,consistencyCheckJob.parmCheckFix());
            inventSumReCalcItem.updateNow();
            curTotalErrorQty += inventSumReCalcItem.numberOfErrors();

            if (consistencyCheckJob.parmCheckFix() == CheckFix::Fix)
            {
                this.updateCorrected(inventSumReCalcItem.numberOfErrors());
               
                if (!skipInventOnhandConsistencyCheckCleanUp)
                {
                    this.inventSumAggregationByFinancialInventoryDimensions(inventTable);
                    this.inventSumCleanup(inventTable);

                    if (FeatureStateProvider::isFeatureEnabled(InventCleanupAllClosedInventSumRecordsToggle::instance()))
                    {
                        this.cleanupAllClosedInventSumForItem(inventTable);
                    }
                }
            }
            
            while select inventSum
                where inventSum.ItemId == inventTable.ItemId
            {
                this.kernelCheckRecord(inventSum, dictTable, hasCheckFixMethod);
                if (!inventSum.Closed)
                {
                    this.checkNotActiveDimensions(inventSum);
                }
            }
        }
        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
        ClassId treeParentClassId()
    {
        return classNum(InventConsistencyCheck_Table);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        static ClassDescription description()
    {
        return "@SYS438";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
        static HelpTxt helpText()
    {
        return "@SYS55201";
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumAggregationByFinancialInventoryDimensions</Name>
				<Source><![CDATA[
    private void inventSumAggregationByFinancialInventoryDimensions(InventTable _inventTable)
    {  
        inventSumSummarizeController =  new InventSumSummarizeController(classstr(InventSumSummarizeService),
                                                                               methodstr(InventSumSummarizeService, summarize),
                                                                               SysOperationExecutionMode::Synchronous);

        inventSumSummarizeContract = inventSumSummarizeController.getDataContractObject() as InventSumSummarizeContract;

        query = new Query(querystr(InventSumSummarize));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, ItemId)).value(queryValue(_inventTable.ItemId));
        inventSumSummarizeContract.parmQuery(SysOperationHelper::base64Encode(query.pack()));
        try
        {
            new InventSumSummarizeService().summarize(inventSumSummarizeContract);
        }
        catch
        {
            // Ignore errors by intent. This process should not affect consistency check functions.
            exceptionTextFallThrough();
            warning(strFmt('@SCM:WarningOfOnHandAggregationByFinancialDimFailedInConsistencyCheck', _inventTable.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSumCleanup</Name>
				<Source><![CDATA[
    private void inventSumCleanup(InventTable _inventTable)
    {
        try
        {
            if (WHSInventEnabled::exist(_inventTable.ItemId))
            {
                if (InventCleanupWHSInventSumWithInventDimFlight::instance().isEnabled())
                {
                    inventCleanupWHSInventSumWithInventDimController = new InventCleanupWHSInventSumWithInventDimController(
                        classStr(InventCleanupWHSInventSumService),
                        methodStr(InventCleanupWHSInventSumService, cleanupInventSumWithInventDim),
                        SysOperationExecutionMode::Synchronous);

                    inventCleanupWHSInventSumWithInventDimContract = inventCleanupWHSInventSumWithInventDimController.getDataContractObject() as InventCleanupWHSInventSumWithInventDimContract;
                    query = new Query(queryStr(InventCleanupWHSInventSumWithInventDim));
                    SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, ItemId)).value(queryValue(_inventTable.ItemId));
                    inventCleanupWHSInventSumWithInventDimContract.parmQuery(SysOperationHelper::base64Encode(query.pack()));
                    new InventCleanupWHSInventSumService().cleanupInventSumWithInventDim(inventCleanupWHSInventSumWithInventDimContract);
                }
                else
                {
                    inventCleanupWHSInventSumController = new InventCleanupWHSInventSumController(
                        classStr(InventCleanupWHSInventSumService),
                        methodStr(InventCleanupWHSInventSumService, cleanup),
                        SysOperationExecutionMode::Synchronous);

                    inventCleanupWHSInventSumContract = inventCleanupWHSInventSumController.getDataContractObject() as InventCleanupWHSInventSumContract;
                    query = new Query(queryStr(InventCleanupWHSInventSum));
                    SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, ItemId)).value(queryValue(_inventTable.ItemId));
                    inventCleanupWHSInventSumContract.parmQuery(SysOperationHelper::base64Encode(query.pack()));
                    new InventCleanupWHSInventSumService().cleanup(inventCleanupWHSInventSumContract);
                }
            }
            else
            {
                if (!FeatureStateProvider::isFeatureEnabled(InventCleanupAllClosedInventSumRecordsToggle::instance()))
                {
                    inventCleanupTrackingInventSumController = new InventCleanupTrackingInventSumController(
                        classStr(InventCleanupTrackingInventSumService),
                        methodStr(InventCleanupTrackingInventSumService, cleanup),
                        SysOperationExecutionMode::Synchronous);
                    inventCleanupTrackingInventSumContract = inventCleanupTrackingInventSumController.getDataContractObject() as InventCleanupTrackingInventSumContract;

                    query = new Query(queryStr(InventCleanupTrackingInventSum));
                    SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventSum)), fieldNum(InventSum, ItemId)).value(queryValue(_inventTable.ItemId));
                    inventCleanupTrackingInventSumContract.parmQuery(SysOperationHelper::base64Encode(query.pack()));
                    new InventCleanupTrackingInventSumService().cleanup(inventCleanupTrackingInventSumContract);
                }
            }
        }
        catch
        {
            // Ignore errors by intent. This process should not affect consistency check functions.
            exceptionTextFallThrough();
            warning(strFmt('@SCM:WarningOfOnHandCleanupFailedInConsistencyCheck', _inventTable.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupAllClosedInventSumForItem</Name>
				<Source><![CDATA[
    private void cleanupAllClosedInventSumForItem(InventTable _inventTable)
    {
        ttsbegin;
        InventSum inventSum;
        inventSum.skipEvents(true);
        inventSum.skipDataMethods(true);
        inventSum.skipDeleteActions(true);
        inventSum.skipDeleteMethod(true);
        delete_from inventSum
                where inventSum.ItemId == _inventTable.ItemId && inventSum.Closed == true;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>