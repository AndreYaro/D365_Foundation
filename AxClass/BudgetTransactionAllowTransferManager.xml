<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransactionAllowTransferManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetTransactionAllowTransferManager</c> class manages the enable transfer status for a
/// transfer budget transaction.
/// </summary>
public class BudgetTransactionAllowTransferManager
{
    Guid instanceId;

    RecId budgetTransactionHeaderRecId;
    LedgerRecId primaryLedgerRecId;
    DimensionHierarchyId accountStructure;

    boolean isAllowTransferRuleEnabled;
    boolean isTransactionProcessed;
    boolean isTransferAllowed;

    // Set used to cache budget allow transfer rules that are valid for the entire budget transaction.
    Set transactionAllowTransferRules;

    // Map used to cache ledger dimensions with corresponding budget allow transfer rules.
    // Key: LedgerDimensionBase (Int64)
    // Value: Set (Class) of BudgetAllowTransferRule record IDs - source (Int64)
    Map ledgerDimsAllowTransferRules;

    // Set used to cache ledger dimensions that allowed to transfer as part of the transaction.
    Set ledgerDimsAllowTransfer;

    // Set used to cache ledger dimensions that are not allowed to transfer as part of the transaction.
    Set ledgerDimsNotAllowTransfer;

    // Set used to cache budget transaction line record IDs that allowed to transfer as part of the transaction.
    Set transLineAllowTransfer;

    // Set used to cache budget transaction line record IDs that are not allowed to transfer as part of the transaction.
    Set transLineNotAllowTransfer;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAllowTransferRulesForTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>BudgetAllowTransferRule</c> record ID in the specified set to the set of the
    /// <c>BudgetAllowTransferRule</c> record ID for the complete budget transaction.
    /// </summary>
    /// <param name="_allowTransferRules">
    /// The set of <c>BudgetAllowTransferRule</c> record ID to add.
    /// </param>
    protected void addAllowTransferRulesForTransaction(Set _allowTransferRules)
    {
        boolean transactionAllowTransferRulesUpdated;

        // Add all the rules to the set of rules for the transaction.
        SetEnumerator allowTransferRulesEnumerator = _allowTransferRules.getEnumerator();

        while (allowTransferRulesEnumerator.moveNext())
        {
            if (!transactionAllowTransferRules.in(allowTransferRulesEnumerator.current()))
            {
                // The rule was not found in the set of rules for the transaction.
                transactionAllowTransferRules.add(allowTransferRulesEnumerator.current());
                transactionAllowTransferRulesUpdated = true;
            }
        }

        if (transactionAllowTransferRulesUpdated)
        {
            // The set of rules has been updated.  Update the cache for any status changes.
            this.updateNotAllowTransferCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget transaction can transfer.
    /// </summary>
    /// <param name="_displayErrorMessages">
    /// A Boolean value that indicates whether to display error messages.
    /// </param>
    /// <returns>
    /// true if the transfer is enabled; otherwise, false.
    /// </returns>
    public boolean checkBudgetTransaction(boolean _displayErrorMessages)
    {
        // Process the budget transaction.
        this.processBudgetTransaction();

        if (_displayErrorMessages && !isTransferAllowed)
        {
            this.displayErrorMessage();
        }

        return isTransferAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget transaction line can transfer.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <param name="_displayErrorMessages">
    /// A Boolean value that indicates whether to display error messages.
    /// </param>
    /// <returns>
    /// true if the transfer is enabled for the line; otherwise, false.
    /// </returns>
    public boolean checkBudgetTransactionLine(RecId _budgetTransactionLineRecId, boolean _displayErrorMessages)
    {
        boolean isTransferAllowedForLine;

        if (isTransactionProcessed)
        {
            // Process the budget transaction line.
            this.processBudgetTransactionLine(BudgetTransactionLine::find(_budgetTransactionLineRecId));
        }
        else
        {
            // Process the entire budget transaction including the specified line.
            this.processBudgetTransaction();
        }

        if (transLineNotAllowTransfer.in(_budgetTransactionLineRecId))
        {
            // The transfer is not allowed for the line.
            isTransferAllowedForLine = false;

            if (_displayErrorMessages)
            {
                this.displayErrorMessage();
            }
        }
        else if (transLineAllowTransfer.in(_budgetTransactionLineRecId))
        {
            // The transfer is allowed for the line.
            isTransferAllowedForLine = true;
        }
        else
        {
            // The transfer was not processed, default to the transaction status.
            isTransferAllowedForLine = isTransferAllowed;
        }

        return isTransferAllowedForLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an error message which states that the transfer is not enabled.
    /// </summary>
    protected void displayErrorMessage()
    {
        // Inform the user that the transfer violates a rule.
        Box::infoOnce("@SYS320764", '', guid2str(instanceId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetTransactionAllowTransferManager</c> class.
    /// </summary>
    /// <param name="_budgetTransactionHeaderRecId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    protected void initialize(RecId _budgetTransactionHeaderRecId)
    {
        transactionAllowTransferRules = new Set(Types::Int64);

        ledgerDimsAllowTransferRules = new Map(Types::Int64, Types::Class);

        ledgerDimsAllowTransfer = new Set(Types::Int64);
        ledgerDimsNotAllowTransfer = new Set(Types::Int64);

        transLineAllowTransfer = new Set(Types::Int64);
        transLineNotAllowTransfer = new Set(Types::Int64);

        // Determine the transaction type of the header.
        BudgetTransactionHeader budgetTransactionHeader = BudgetTransactionHeader::find(_budgetTransactionHeaderRecId);

        if (budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::Transfer)
        {
            // The transaction is of type Transfer.
            budgetTransactionHeaderRecId = budgetTransactionHeader.RecId;
            primaryLedgerRecId = budgetTransactionHeader.PrimaryLedger;

            changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(primaryLedgerRecId)))
            {
                isAllowTransferRuleEnabled = BudgetParameters::find().IsAllowTransferRuleEnabled;
            }

            if (isAllowTransferRuleEnabled)
            {
                // Allow transfer rules are enabled and the default action is to prevent transfer.
                isTransferAllowed = false;
                isTransactionProcessed = false;
            }
            else
            {
                // Allow transfer rules are not enabled and all transfers are allowed.
                isTransferAllowed = true;
                isTransactionProcessed = true;
            }
        }
        else
        {
            isAllowTransferRuleEnabled = false;
            isTransferAllowed = true;
            isTransactionProcessed = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the budget transaction to determine whether the transfer is enabled.
    /// </summary>
    protected void processBudgetTransaction()
    {
        if (isAllowTransferRuleEnabled)
        {
            BudgetTransactionLine budgetTransactionLine;

            while select budgetTransactionLine
                order by budgetTransactionLine.LineNumber
                where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeaderRecId
            {
                this.processBudgetTransactionLine(budgetTransactionLine);
            }

            isTransactionProcessed = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the budget transaction line to determine whether the transfer is enabled.
    /// </summary>
    /// <param name="_budgetTransactionLine">
    /// The <c>BudgetTransactionLine</c> record to process.
    /// </param>
    protected void processBudgetTransactionLine(BudgetTransactionLine _budgetTransactionLine)
    {
        if (_budgetTransactionLine && isAllowTransferRuleEnabled)
        {
            if (_budgetTransactionLine.BudgetTransactionHeader != budgetTransactionHeaderRecId)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            if (transLineAllowTransfer.in(_budgetTransactionLine.RecId) ||
                transLineNotAllowTransfer.in(_budgetTransactionLine.RecId))
            {
                // Update the ledger dimensions in use as the ledger dimension may have changed
                // since the the last time the line was processed.
                this.updateLedgerDimensionsInUse();
            }

            // Process the ledger dimension for the line.
            this.processLedgerDimension(_budgetTransactionLine.LedgerDimension);

            if (ledgerDimsAllowTransfer.in(_budgetTransactionLine.LedgerDimension))
            {
                // The ledger dimension on the line is allowed to transfer.
                transLineAllowTransfer.add(_budgetTransactionLine.RecId);

                if (transLineNotAllowTransfer.in(_budgetTransactionLine.RecId))
                {
                    // Remove the line from the not allow cache as the status has changed.
                    transLineNotAllowTransfer.remove(_budgetTransactionLine.RecId);
                }
            }
            else
            {
                // The ledger dimension on the line is not allowed to transfer.
                transLineNotAllowTransfer.add(_budgetTransactionLine.RecId);

                if (transLineAllowTransfer.in(_budgetTransactionLine.RecId))
                {
                    // Remove the line from the allow cache as the status has changed.
                    transLineAllowTransfer.remove(_budgetTransactionLine.RecId);
                }
            }

            // Set the isAllowTransfer flag to reflect any changes.
            this.setIsTransferAllowed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the ledger dimension to determine whether the transfer is enabled.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The record ID of the ledger dimension record to process.
    /// </param>
    protected void processLedgerDimension(LedgerDimensionBase _ledgerDimension)
    {
        if (isAllowTransferRuleEnabled
            && !ledgerDimsAllowTransfer.in(_ledgerDimension)
            && !ledgerDimsNotAllowTransfer.in(_ledgerDimension))
        {
            boolean isTransferAllowedForLedgerDimension;
            Set allowTransferRules;

            DimensionHierarchyId ledgerDimensionAccountStructure = DimensionHierarchy::getAccountStructureFromDimensionCombination(_ledgerDimension).RecId;

            if (accountStructure
                && accountStructure != ledgerDimensionAccountStructure)
            {
                // The account structure for the line does not match the account structure in use
                // for the other transaction lines.
                isTransferAllowedForLedgerDimension = false;
            }
            else
            {
                accountStructure = ledgerDimensionAccountStructure;

                // Get the set of allow transfer rules for the ledger dimension.
                allowTransferRules = BudgetAllowTransferRuleManager::findAllowTransferRulesByLedgerDimension(
                    primaryLedgerRecId,
                    _ledgerDimension);

                if (allowTransferRules.elements() > 0)
                {
                    if (transactionAllowTransferRules.elements() > 0)
                    {
                        // The transfer is only allowed if one of the new rules is the same as an existing rule.
                        SetEnumerator allowTransferRulesEnumerator = allowTransferRules.getEnumerator();

                        while (allowTransferRulesEnumerator.moveNext())
                        {
                            if (transactionAllowTransferRules.in(allowTransferRulesEnumerator.current()))
                            {
                                isTransferAllowedForLedgerDimension = true;
                                break;
                            }
                        }
                    }
                    else
                    {
                        // This is the first ledger dimension to be processed that has allow transfer rules.
                        isTransferAllowedForLedgerDimension = true;
                    }

                    // Add the ledger dimension and allow transfer rules to the cache.
                    ledgerDimsAllowTransferRules.insert(_ledgerDimension, allowTransferRules);
                }
            }

            if (isTransferAllowedForLedgerDimension)
            {
                // The ledger dimension is allowed to transfer.
                ledgerDimsAllowTransfer.add(_ledgerDimension);

                // Add the ledger dimension allow transfer rules to the set of rules for the transaction.
                this.addAllowTransferRulesForTransaction(allowTransferRules);
            }
            else
            {
                // The ledger dimension is not allowed to transfer.
                ledgerDimsNotAllowTransfer.add(_ledgerDimension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBudgetTransactionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the <c>BudgetTransactionLine</c> record from the current instance of the
    /// <c>BudgetTransactionAllowTransferManager</c> class.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record to remove.
    /// </param>
    public void removeBudgetTransactionLine(RecId _budgetTransactionLineRecId)
    {
        if (isAllowTransferRuleEnabled)
        {
            BudgetTransactionLine budgetTransactionLine;

            budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineRecId);

            if (budgetTransactionLine.BudgetTransactionHeader != budgetTransactionHeaderRecId)
            {
                throw error(Error::wrongUseOfFunction(funcname()));
            }

            // Remove the ledger dimension from the cache if it is no longer used by other lines.
            this.removeLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.RecId);

            // Remove the line from the allow transfer status cache.
            if (transLineAllowTransfer.in(_budgetTransactionLineRecId))
            {
                transLineAllowTransfer.remove(_budgetTransactionLineRecId);
            }
            else if (transLineNotAllowTransfer.in(_budgetTransactionLineRecId))
            {
                transLineNotAllowTransfer.remove(_budgetTransactionLineRecId);
            }

            // The allow transfer status for the transaction might have changed.
            this.setIsTransferAllowed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the ledger dimension from the current instance of the
    /// <c>BudgetTransactionAllowTransferManager</c> class.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The record ID of the ledger dimension record.
    /// </param>
    /// <param name="_removedBudgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record that is being removed; optional.
    /// </param>
    /// <remarks>
    /// The ledger dimension is only removed if it is no longer referenced by the transaction.
    /// </remarks>
    protected void removeLedgerDimension(LedgerDimensionBase _ledgerDimension, RecId _removedBudgetTransactionLineRecId = 0)
    {
        if (isAllowTransferRuleEnabled
            && _ledgerDimension
            && (ledgerDimsAllowTransfer.in(_ledgerDimension)
            || ledgerDimsNotAllowTransfer.in(_ledgerDimension)))
        {
            BudgetTransactionLine budgetTransactionLine;

            // Determine whether the ledger dimension is still referenced.
            select firstonly RecId from budgetTransactionLine
                where budgetTransactionLine.RecId != _removedBudgetTransactionLineRecId
                    && budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeaderRecId
                    && budgetTransactionLine.LedgerDimension == _ledgerDimension;

            if (!budgetTransactionLine)
            {
                if (ledgerDimsAllowTransfer.in(_ledgerDimension))
                {
                    // The ledger dimension is no longer used for the transaction.
                    // The removal of the ledger dimension may cause joined ledger dimension allow transfer rules
                    // to no longer be joined through and could impact the allow transfer status for every line.
                    // Reset the overall allow transfer status by processing the transaction without the removed line.
                    this.initialize(budgetTransactionHeaderRecId);

                    while select budgetTransactionLine
                        order by budgetTransactionLine.LineNumber
                        where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeaderRecId
                            && budgetTransactionLine.RecId != _removedBudgetTransactionLineRecId
                    {
                        this.processBudgetTransactionLine(budgetTransactionLine);
                    }

                    isTransactionProcessed = true;
                }
                else
                {
                    // A ledger dimension that is no longer referenced and was not allowed to transfer
                    // can update the cache directly without impacting the overall transaction status.
                    ledgerDimsAllowTransferRules.remove(_ledgerDimension);
                    ledgerDimsNotAllowTransfer.remove(_ledgerDimension);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInstanceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance ID for the <c>BudgetTransactionAllowTransferManager</c> class.
    /// </summary>
    protected void setInstanceId()
    {
        // Set the unique identifier for the class.
        instanceId = newGuid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsTransferAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction can transfer based on the enable transfer status of each
    /// <c>BudgetTransactionLine</c> record that has been processed.
    /// </summary>
    protected void setIsTransferAllowed()
    {
        isTransferAllowed = true;

        if (transLineNotAllowTransfer.elements() > 0)
        {
            // At least one line is not allowed to transfer.
            // The transfer for the transaction is not allowed.
            isTransferAllowed = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerDimensionsInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger dimension cache for the ledger dimensions that are no longer being used by the
    /// transaction.
    /// </summary>
    protected void updateLedgerDimensionsInUse()
    {
        if (isAllowTransferRuleEnabled)
        {
            // Track the set of ledger dimensions to be removed from the cache.
            Set ledgerDimsToProcessForRemove = new Set(Types::Int64);

            if (ledgerDimsAllowTransfer.elements() > 0)
            {
                // Update the ledger dimension allow transfer cache.
                SetEnumerator ledgerDimsAllowTransferEnumerator = ledgerDimsAllowTransfer.getEnumerator();

                while (ledgerDimsAllowTransferEnumerator.moveNext())
                {
                    ledgerDimsToProcessForRemove.add(ledgerDimsAllowTransferEnumerator.current());
                }
            }

            if (ledgerDimsNotAllowTransfer.elements() > 0)
            {
                // Update the ledger dimension not allow transfer cache.
                SetEnumerator ledgerDimsNotAllowTransferEnumerator = ledgerDimsNotAllowTransfer.getEnumerator();

                while (ledgerDimsNotAllowTransferEnumerator.moveNext())
                {
                    ledgerDimsToProcessForRemove.add(ledgerDimsNotAllowTransferEnumerator.current());
                }
            }

            if (ledgerDimsToProcessForRemove.elements() > 0)
            {
                // Remove the ledger dimensions from the cache.
                SetEnumerator ledgerDimsToProcessForRemoveEnumerator = ledgerDimsToProcessForRemove.getEnumerator();

                while (ledgerDimsToProcessForRemoveEnumerator.moveNext())
                {
                    this.removeLedgerDimension(ledgerDimsToProcessForRemoveEnumerator.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNotAllowTransferCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the not enable transfer cache.
    /// </summary>
    protected void updateNotAllowTransferCache()
    {
        if (isAllowTransferRuleEnabled &&
            !isTransferAllowed &&
            transLineNotAllowTransfer.elements() > 0)
        {
            // Update the cache to reflect any status changes.
            SetEnumerator ledgerDimsNotAllowTransferEnumerator = ledgerDimsNotAllowTransfer.getEnumerator();

            // Track the set of new allow transfer rules for the transaction.
            Set newTransactionAllowTransferRules = new Set(Types::Int64);

            // Track the set of ledger dimensions to be removed from the not allow transfer set.
            Set ledgerDimsNotAllowToProcessForRemove = new Set(Types::Int64);

            while (ledgerDimsNotAllowTransferEnumerator.moveNext())
            {
                LedgerDimensionBase ledgerDimension = ledgerDimsNotAllowTransferEnumerator.current();
                DimensionHierarchyId ledgerDimensionAccountStructure = DimensionHierarchy::getAccountStructureFromDimensionCombination(ledgerDimension).RecId;

                if (ledgerDimensionAccountStructure == accountStructure
                    && ledgerDimsAllowTransferRules.exists(ledgerDimension))
                {
                    // Get the set of allow transfer rules for the ledger dimension.
                    Set allowTransferRules = ledgerDimsAllowTransferRules.lookup(ledgerDimension);

                    if (allowTransferRules.elements() > 0)
                    {
                        // The transfer is only allowed if one of the existing rules is
                        // is now in the set of rules for the transaction
                        SetEnumerator allowTransferRulesEnumerator = allowTransferRules.getEnumerator();

                        while (allowTransferRulesEnumerator.moveNext())
                        {
                            if (transactionAllowTransferRules.in(allowTransferRulesEnumerator.current()))
                            {
                                // Update the ledger dimension and allow transfer cache.
                                ledgerDimsAllowTransfer.add(ledgerDimension);
                                ledgerDimsNotAllowToProcessForRemove.add(ledgerDimension);

                                SetEnumerator newAllowTransferRulesEnumerator = allowTransferRules.getEnumerator();

                                while (newAllowTransferRulesEnumerator.moveNext())
                                {
                                    // Add the rule to the new rules set.
                                    newTransactionAllowTransferRules.add(newAllowTransferRulesEnumerator.current());
                                }

                                break;
                            }
                        }
                    }
                }
            }

            if (ledgerDimsNotAllowToProcessForRemove.elements() > 0)
            {
                // Remove the ledger dimensions from the not allow transfer cache.
                SetEnumerator ledgerDimsNotAllowToProcessForRemoveEnumerator = ledgerDimsNotAllowToProcessForRemove.getEnumerator();

                while (ledgerDimsNotAllowToProcessForRemoveEnumerator.moveNext())
                {
                    ledgerDimsNotAllowTransfer.remove(ledgerDimsNotAllowToProcessForRemoveEnumerator.current());
                }
            }

            if (newTransactionAllowTransferRules.elements() > 0)
            {
                // New rules need to be added to the set of rules for the transaction.
                this.addAllowTransferRulesForTransaction(newTransactionAllowTransferRules);
            }

            // Update the transaction lines.
            Set transLineNotAllowTransferToProcess;
            SetEnumerator transLineNotAllowTransferToProcessEnumerator;

            transLineNotAllowTransferToProcess = Set::create(transLineNotAllowTransfer.pack());
            transLineNotAllowTransferToProcessEnumerator = transLineNotAllowTransferToProcess.getEnumerator();

            while (transLineNotAllowTransferToProcessEnumerator.moveNext())
            {
                // Process the budget transaction line to determine if the transfer is now allowed.
                this.processBudgetTransactionLine(
                    BudgetTransactionLine::find(transLineNotAllowTransferToProcessEnumerator.current()));
            }

            // Set the isAllowTransfer flag to reflect any changes.
            this.setIsTransferAllowed();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BudgetTransactionAllowTransferManager</c> class.
    /// </summary>
    /// <param name="_budgetTransactionHeaderRecId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BudgetTransactionAllowTransferManager</c> class.
    /// </returns>
    public static BudgetTransactionAllowTransferManager construct(RecId _budgetTransactionHeaderRecId)
    {
        BudgetTransactionAllowTransferManager allowTransferManager = new BudgetTransactionAllowTransferManager();

        allowTransferManager.initialize(_budgetTransactionHeaderRecId);
        allowTransferManager.setInstanceId();

        return allowTransferManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget transaction can transfer.
    /// </summary>
    /// <param name="_budgetTransactionHeaderRecId">
    /// The record ID of the <c>BudgetTransactionHeader</c> record.
    /// </param>
    /// <returns>
    /// true if the transfer is enabled; otherwise, false.
    /// </returns>
    public static boolean isTransferAllowed(RecId _budgetTransactionHeaderRecId)
    {
        boolean isTransferAllowed = true;

        if (BudgetTransactionHeader::exist(_budgetTransactionHeaderRecId))
        {
            BudgetTransactionAllowTransferManager allowTransferManager = BudgetTransactionAllowTransferManager::construct(_budgetTransactionHeaderRecId);

            isTransferAllowed = allowTransferManager.checkBudgetTransaction(false);
        }

        return isTransferAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferAllowedForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the budget transaction line can transfer.
    /// </summary>
    /// <param name="_budgetTransactionLineRecId">
    /// The record ID of the <c>BudgetTransactionLine</c> record.
    /// </param>
    /// <returns>
    /// true if the transfer is enabled for the line; otherwise, false.
    /// </returns>
    public static boolean isTransferAllowedForLine(RecId _budgetTransactionLineRecId)
    {
        boolean isTransferAllowedForLine = true;

        BudgetTransactionLine budgetTransactionLine = BudgetTransactionLine::find(_budgetTransactionLineRecId);

        if (budgetTransactionLine)
        {
            BudgetTransactionAllowTransferManager allowTransferManager = BudgetTransactionAllowTransferManager::construct(budgetTransactionLine.BudgetTransactionHeader);

            isTransferAllowedForLine = allowTransferManager.checkBudgetTransactionLine(budgetTransactionLine.RecId, false);
        }

        return isTransferAllowedForLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>