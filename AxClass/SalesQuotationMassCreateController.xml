<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationMassCreateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SalesQuotationMassCreateController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeServiceParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and instance of the <c>SalesQuotationMassCreateContract</c> class.
    /// </summary>
    /// <param name="dictMethod">
    /// An instance of the <c>DictMethod</c> class that describes the service operation.
    /// </param>
    /// <param name="parameterIndex">
    /// The index of the service parameter.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesQuotationMassCreateContract</c> class.
    /// </returns>
    protected Object initializeServiceParameter(DictMethod dictMethod, int parameterIndex)
    {
        SalesQuotationMassCreateContract dataContract = new SalesQuotationMassCreateContract();

        if (!this.parmArgs())
        {
            // If args are null this means the controller is reinitialized in IL
            // and the data of it will be unpacted.
            return dataContract;
        }
        dataContract.parmQuotationType(this.parmArgs().parmEnum());
        return dataContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a service controller.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <remarks>
    /// <c>parm</c> methods exist for each constructor parameter. The
    /// <c>SysOperationServiceController.initializeFromArgs</c> method can also be used to initialize a
    /// controller. If those options for initialization are used, the default values can be used in the
    /// constructor.
    /// </remarks>
    protected void new(identifierName _className='', identifierName _methodName='', SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ReliableAsynchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    public static Query initQuery(SalesQuotationMassCreateContract _dataContract)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbDataSource;
        QueryBuildRange         rangeAccount;

        if (_dataContract.parmCampaignId())
        {
             qbDataSource  = query.addDataSource(tableNum(smmCampaignSelection));
             rangeAccount  = qbDataSource.addRange(fieldNum(smmCampaignSelection, CampaignId));
             rangeAccount.value(_dataContract.parmCampaignId());
        }
        else
        {
            if (_dataContract.parmAccountType() == smmQuotationAccountType::BusRelAccount)
            {
                qbDataSource = query.addDataSource(tableNum(smmBusRelTable));
                rangeAccount  = qbDataSource.addRange(fieldNum(smmBusRelTable,BusRelAccount));
                qbDataSource.addSelectionField(fieldNum(smmBusRelTable, BusRelAccount));
                qbDataSource.addSelectionField(fieldNum(smmBusRelTable, MainContactWorker));
                qbDataSource = qbDataSource.addDataSource(tableNum(smmBusRelTypeGroup));
                qbDataSource.relations(true);
                qbDataSource.joinMode(JoinMode::ExistsJoin);
                qbDataSource.addRange(fieldNum(smmBusRelTypeGroup, TableType)).value(queryValue(smmBusRelTypeSourceTable::Relation));

                qbDataSource = query.dataSourceTable(tableNum(smmBusRelTable));
            }
            else
            {
                qbDataSource = query.addDataSource(tableNum(CustTable));
                qbDataSource.joinMode(JoinMode::InnerJoin);
                qbDataSource.relations(true);
                rangeAccount  = qbDataSource.addRange(fieldNum(CustTable, AccountNum));
            }

            qbDataSource = qbDataSource.addDataSource(tableNum(ContactPerson));
            QueryBuildRange rangeTitle = qbDataSource.addRange(fieldNum(ContactPerson, Title));
            QueryBuildRange rangeInActive = qbDataSource.addRange(fieldNum(ContactPerson, Inactive));
            rangeInActive.value(queryValue(NoYes::No));
            rangeInActive.status(RangeStatus::Locked);
            qbDataSource.relations(true);
            qbDataSource.joinMode(JoinMode::OuterJoin);
        }

        _dataContract.parmQuery(SysOperationHelper::base64Encode(query.pack()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args)
        {
            throw error("@SYS25407");
        }
        SalesQuotationMassCreateController controller = SalesQuotationMassCreateController::newMassCreate(_args);

        SalesQuotationMassCreateContract dataContract = controller.getDataContractObject('_dataContract');

        dataContract.parmExpiryDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + SalesParameters::find().QuotationNumOfDaysExpiryDate);

        if (_args.dataset() == tableNum(smmCampaignTable))
        {
            smmCampaignTable campaignTable = _args.record();
            dataContract.parmCampaignId(campaignTable.CampaignId);
        }
        SalesQuotationMassCreateController::initQuery(dataContract);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMassCreate</Name>
				<Source><![CDATA[
    public static SalesQuotationMassCreateController newMassCreate(Args _args)
    {
        SalesQuotationMassCreateController controller = new SalesQuotationMassCreateController(classStr(SalesQuotationMassCreate), methodStr(SalesQuotationMassCreate, createMassQuotations));
        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
