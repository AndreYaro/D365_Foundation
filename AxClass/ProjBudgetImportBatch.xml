<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjBudgetImportBatch</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Does forecast transfer in a batch
/// </summary>
class ProjBudgetImportBatch extends RunBaseBatch implements BatchRetryable
{
    ProjId                  projId;
    RecId                   projBudgetRecId, projBudgetRevisionRecId;
    ProjBaseBudgetOn        projBaseBudgetOn;
    String255               source;
    real                    markValue;
    boolean                 summarizeByCategory;
    ProjBudgetImportOptions projBudgetImportOptions;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        projId,
        projBudgetRecId,
        projBudgetRevisionRecId,
        projBaseBudgetOn,
        source,
        markValue,
        summarizeByCategory,
        projBudgetImportOptions
    #ENDMACRO
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>allowSaveLast</Name>
        <Source><![CDATA[
    /// <summary>
    /// Determines whether or not to save and load last values.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmMarkValue</Name>
        <Source><![CDATA[
    public real parmMarkValue(real _markValue = markValue)
    {
        markValue = _markValue;
        return markValue;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjBaseBudgetOn</Name>
        <Source><![CDATA[
    public ProjBaseBudgetOn parmProjBaseBudgetOn(ProjBaseBudgetOn _projBaseBudgetOn = projBaseBudgetOn)
    {
        projBaseBudgetOn = _projBaseBudgetOn;
        return projBaseBudgetOn;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjBudgetImportOptions</Name>
        <Source><![CDATA[
    public ProjBudgetImportOptions parmProjBudgetImportOptions(ProjBudgetImportOptions _projBudgetImportOptions = projBudgetImportOptions)
    {
        projBudgetImportOptions = _projBudgetImportOptions;
        return projBudgetImportOptions;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjBudgetRecId</Name>
        <Source><![CDATA[
    public RecId parmProjBudgetRecId(RecId _projBudgetRecId = projBudgetRecId)
    {
        projBudgetRecId = _projBudgetRecId;
        return projBudgetRecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjBudgetRevisionRecId</Name>
        <Source><![CDATA[
    public RecId parmProjBudgetRevisionRecId(RecId _projBudgetRevisionRecId = projBudgetRevisionRecId)
    {
        projBudgetRevisionRecId = _projBudgetRevisionRecId;
        return projBudgetRevisionRecId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjId</Name>
        <Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmSource</Name>
        <Source><![CDATA[
    public String255 parmSource(String255 _source)
    {
        source = _source;
        return source;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmSummarizeByCategory</Name>
        <Source><![CDATA[
    public boolean parmSummarizeByCategory(boolean _summarizeByCategory = summarizeByCategory)
    {
        summarizeByCategory = _summarizeByCategory;
        return summarizeByCategory;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    public void run()
    {
        ProjTable           projTable;
        ProjBudget          projBudget;
        ProjBudgetRevision  projBudgetRevision;
        ProjBudgetManager   projBudgetManager = new ProjBudgetManager();

        if (projId)
        {
            projTable = ProjTable::find(projId);
        }

        if (projBudgetRecId)
        {
            projBudget = ProjBudget::find(projBudgetRecId);
        }

        if (projBudgetRevisionRecId)
        {
            projBudgetRevision = ProjBudgetRevision::find(projBudgetRevisionRecId);
        }

        try
        {
            ttsbegin;
            if (projBaseBudgetOn == ProjBaseBudgetOn::Forecast)
            {
                if (projBudgetImportOptions == ProjBudgetImportOptions::Units)
                {
                    projBudgetManager.createBudgetFromForecastModel(
                        source,
                        projId,
                        projBudget.RecId,
                        markValue,
                        0.0,
                        0.0,
                        summarizeByCategory,
                        projBudgetRevision.RecId);
                }
                else
                {
                    projBudgetManager.createBudgetFromForecastModel(
                        source,
                        projId,
                        projBudget.RecId,
                        0.0,
                        markValue,
                        markValue,
                        summarizeByCategory,
                        projBudgetRevision.RecId);
                }
            }
            else if (projBaseBudgetOn == ProjBaseBudgetOn::Estimates)
            {
                if (projBudgetImportOptions == ProjBudgetImportOptions::Units)
                {
                    projBudgetManager.createBudgetFromEstimates(
                        source,
                        projId,
                        projBudget.RecId,
                        markValue,
                        0.0,
                        0.0,
                        summarizeByCategory,
                        projBudgetRevision.RecId);
                }
                else
                {
                    projBudgetManager.createBudgetFromEstimates(
                        source,
                        projId,
                        projBudget.RecId,
                        0.0,
                        markValue,
                        markValue,
                        summarizeByCategory,
                        projBudgetRevision.RecId);
                }
            }
            else if (projBaseBudgetOn == ProjBaseBudgetOn::ProjectTransactions)
            {
                if (projBudgetImportOptions == ProjBudgetImportOptions::Units)
                {
                    projBudgetManager.createBudgetFromTransaction(
                        source,
                        projBudget.RecId,
                        projId,
                        markValue,
                        0.0,
                        0.0,
                        projBudgetRevision.RecId);
                }
                else
                {
                    projBudgetManager.createBudgetFromTransaction(
                        source,
                        projBudget.RecId,
                        projId,
                        0.0,
                        markValue,
                        markValue,
                        projBudgetRevision.RecId);
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= 3)
                {
                    ttsabort;
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsabort;
            throw error("@SYS18447");
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = conPeek(_packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>validateImport</Name>
        <Source><![CDATA[
    /// <summary>
    /// Validates if all the pre-requsites for the import are valid
    /// and warns the user of errors.
    /// </summary>
    /// <param name="_forcePrompt">
    /// Do we force the error dialogs.
    /// </param>
    /// <returns>
    /// true if ready to import, false otherwise.
    /// </returns>
    /// <remarks>
    /// The purpose of _forcePrompt parameter is to determine if we want
    /// to prompt the user, regardless of the execution mode, which may
    /// error out if in CIL.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Project stage does not allow recording.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Source cannot be empty.
    /// </exception>
    public boolean validateImport(boolean _forcePrompt = false)
    {
        ProjTable           projTable;
        ProjBudgetLine      projBudgetLine;
        boolean             canLoadBudget = true;

        projTable = ProjTable::find(projId);

        if (!projTable.status().checkRule(ProjStatusRule::CreateForecast))
        {
            throw error(strFmt("@SYS53010", projTable.Stage()));
        }

        if (source == '')
        {
            throw error(strFmt("@SYS136411", "@SYS4005257"));
        }

        select firstonly RecId from projBudgetLine
        where projBudgetLine.ProjBudget == projBudgetRecId;

        if (projBudgetLine.RecId != 0 && (!this.isInBatch() || _forcePrompt))
        {
            if (DialogButton::No == Box::yesNo("@SYS300485", DialogButton::No))
            {
                canLoadBudget = false;
            }
        }

        return canLoadBudget;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args args)
    {
        ProjBudgetImportBatch               batch;
        BatchHeader                         batchHeader;
        BatchInfo                           batchInfo;

        //Expects the argument to be a ProjBudgetImportBatch object
        //either run it, or schedule it as a batch
        batch = args.parmObject();
        if (batch.validateImport(true))
        {
            if (batch.parmInBatch())
            {
                batchInfo = batch.batchInfo();
                batchInfo.parmCaption("@SYS4005264");
                batchHeader = BatchHeader::construct();
                batchHeader.addTask(batch);
                batchHeader.save();
                info(strFmt("@SYS73254",''));
            }
            else
            {
                batch.runOperation();
            }
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>