<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceJourEInvoiceJourMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceJourEInvoiceJourMap_MX</c> class extends the <c>EInvoiceJourBaseMap_MX</c> class
/// to implement the source data between the <c>ProjInvoiceJour</c> tab le and the
/// <c>EInvoiceJour_MX</c> table.
/// </summary>
public class ProjInvoiceJourEInvoiceJourMap_MX extends EInvoiceJourBaseMap_MX
{
    ProjInvoiceJour projInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the currency code, used in the current CustInvoiceJour
    /// </summary>
    /// <returns>
    /// Invoice transaction currency code
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return projInvoiceJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// The sum of the discount that is given in the current <c>projInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    /// The discount amount that is given in the current <c>projInvoiceJour</c> record.
    /// </returns>
    public SalesEndDiscAmount endDiscMST()
    {
        return CurrencyExchangeHelper::amountCur2MST(projInvoiceJour.EndDisc, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// The sum of the header discount that is given in the current <c>projInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    /// The header discount amount that is given in the current <c>projInvoiceJour</c> record.
    /// </returns>
    public Amount endDisc()
    {
        return this.isPrintInMST()
            ? CurrencyExchangeHelper::amountCur2MST(projInvoiceJour.EndDisc, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate)
            : projInvoiceJour.EndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the lines amount that is given in the current <c>projInvoiceJour</c> record.
    /// </summary>
    /// <returns>The sum of the lines amount that is given in the current <c>projInvoiceJour</c> record.</returns>
    public Amount salesBalance()
    {
        return this.isPrintInMST()
            ? CurrencyExchangeHelper::amountCur2MST(projInvoiceJour.SalesOrderbalance, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate)
            : projInvoiceJour.SalesOrderbalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate of the transaction currency code and the company currency code that is used
    /// in the current <c>projInvoiceJour</c> record.
    /// </summary>
    /// <returns>
    /// The invoice transaction exchange rate.
    /// </returns>
    public ExchRate exchangeRate()
    {
        return projInvoiceJour.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables of this class.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// the <c>ProjInvoiceJour</c> record that is used.
    /// </param>
    protected void initProjInvoiceJour(ProjInvoiceJour _projInvoiceJour)
    {
        projInvoiceJour = _projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account that has been invoiced (charged).
    /// </summary>
    /// <returns>
    /// The customer invoiced account.
    /// </returns>
    public CustVendAC invoiceAccount()
    {
        return projInvoiceJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the order account that has been invoiced (charged).
    /// </summary>
    /// <returns>
    /// The order invoiced account.
    /// </returns>
    [Hookable(false)]
    public CustVendAC orderAccount()
    {
        return projInvoiceJour.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date that is related to the posted document.
    /// </summary>
    /// <returns>
    /// The transaction date of the posted document.
    /// </returns>
    public date invoiceDate()
    {
        return projInvoiceJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the posted document
    /// </summary>
    /// <returns>
    /// The invoice ID of the posted document.
    /// </returns>
    public InvoiceId invoiceId()
    {
        return projInvoiceJour.ProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it's necessary to create a Complemento node.
    /// </summary>
    /// <returns>
    /// Returns true if it is a Foreign trade; otherwise false.
    /// </returns>
    public boolean isForeignTrade()
    {
        return eInvoiceJour.CFDIForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTemporaryExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if it is a temporary export.
    /// </summary>
    /// <returns>
    /// Returns true if it is a temporary export; otherwise, false.
    /// </returns>
    public boolean isTemporaryExport()
    {
        return eInvoiceJour.CFDITemporaryExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the delivery address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the delivery address.</returns>
    protected LogisticsPostalAddressRecId deliveryPostalAddressRecId()
    {
        return projInvoiceJour.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the invoice address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the invoice address.</returns>
    protected LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return projInvoiceJour.DeliveryPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer name present on the posted document (account charged).
    /// </summary>
    /// <returns>
    /// The customer invoiced name.
    /// </returns>
    public SATRegistrationName_MX invoicingName()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of project invoice lines records.
    /// </summary>
    /// <returns>
    /// A List of <c>ProjInvoiceTransEInvoiceTransMap_MX</c> records.
    /// </returns>
    protected List journalLines()
    {
        ProjInvoiceCost     projInvoiceCost;
        ProjInvoiceItem     projInvoiceItem;
        ProjInvoiceEmpl     projInvoiceEmpl;
        ProjInvoiceOnAcc    projInvoiceOnAcc;
        ProjInvoiceRevenue  projInvoiceRevenue;
        List                journalLines;

        void addLine(ProjInvoiceTransMap_MX  _projInvoiceTrans)
        {
            journalLines.addEnd(_projInvoiceTrans);
        }

        journalLines = new List(Types::Record);

        while select projInvoiceCost
            where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceCost.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            addLine(projInvoiceCost);
        }

        while select projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            addLine(projInvoiceItem);
        }

        while select projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceEmpl.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            addLine(projInvoiceEmpl);
        }

        while select projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceOnAcc.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            addLine(projInvoiceOnAcc);
        }

        while select projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
               && projInvoiceRevenue.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            addLine(projInvoiceRevenue);
        }

        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RefNum
    /// </summary>
    /// <returns>
    /// Returns the RefNum
    /// </returns>
    public RefNum refNum()
    {
        return RefNum::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the current <c>projInvoiceJour</c> record.
    /// </summary>
    /// <returns>The record ID of the invoice document.</returns>
    public RefRecId refRecId()
    {
        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the invoice document.
    /// </summary>
    /// <returns>The <c>TableId</c> of the invoice document</returns>
    public tableId refTableId()
    {
        return projInvoiceJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesType</c> value of the posted document.
    /// </summary>
    /// <returns>
    /// The <c>SalesType</c> value of the posted document.
    /// </returns>
    public SalesType salesType()
    {
        return SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the sum without taxes and discounts included.
    /// </summary>
    /// <returns>The sum without taxes and discounts included</returns>
    /// <remarks>
    /// The sum is calculated as follows: ((quanity * price) + misc charges).
    /// </remarks>
    public Amount subTotal()
    {
        return projInvoiceJour.SalesOrderBalance + this.totalDiscountAmount() + projInvoiceJour.SumMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>termOfPaymDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the terms of payment description that is used by the posted invoice
    /// </summary>
    /// <returns>
    /// The terms of payment description that is used by the posted invoice.
    /// </returns>
    public Description termOfPaymDesc()
    {
        return projInvoiceJour.payment().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    protected TaxAmountCur taxAmount(TaxTrans taxTrans)
    {
        return taxTrans.SourceTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the project invoice.
    /// </summary>
    /// <returns>The total amount, without discounts, of the source transaction.</returns>
    public AmountCur totalAmount()
    {
        return projInvoiceJour.InvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total discont amount of the current custinvoicejour
    /// </summary>
    /// <returns>Invoice total discount amount.</returns>
    /// <remarks>
    /// header discount + discount given on the lines
    /// </remarks>
    public DiscAmount totalDiscountAmount()
    {
        return projInvoiceJour.SumLineDisc + projInvoiceJour.EndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount of a project invoice.
    /// </summary>
    /// <returns>
    /// The total discount amount of a project invoice.
    /// </returns>
    public DiscAmount totalDiscountAmountMST()
    {
        return CurrencyExchangeHelper::amountCur2MST(projInvoiceJour.SumLineDisc + projInvoiceJour.EndDisc, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountForeignTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the invoice transaction for foreign trade.
    /// </summary>
    /// <returns>
    /// The invoice transaction total amount for foreign trade.
    /// </returns>
    public Amount totalAmountForeignTrade()
    {
        Amount totalAmountForeignTrade;
        const SysFlightName OverrideCFDIForeignTradeTotalAmountWithAmountMST = 'OverrideCFDIForeignTradeTotalAmountWithAmountMST';

        if (isFlightEnabled(OverrideCFDIForeignTradeTotalAmountWithAmountMST))
        {
            totalAmountForeignTrade = projInvoiceJour.InvoiceAmount;
        }
        else
        {
            totalAmountForeignTrade = CurrencyExchangeHelper::amountCur2MST(
                projInvoiceJour.InvoiceAmount,
                projInvoiceJour.CurrencyId,
                projInvoiceJour.ExchRate);
        }

        return totalAmountForeignTrade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher number that is used for the posted document in ledger post.
    /// </summary>
    /// <returns>
    /// The invoice voucher number.
    /// </returns>
    public Voucher voucher()
    {
        return projInvoiceJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>EInvoiceJourBaseMap_MX</c> class.
    /// </summary>
    /// <param name="_projInvoiceJour">The original <c>projInvoiceJour</c> record that will be used as the data source.</param>
    /// <returns>A new instance of the <c>ProjInvoiceJourEInvoiceJourMap_MX</c> class.</returns>
    public static ProjInvoiceJourEInvoiceJourMap_MX construct(ProjInvoiceJour _projInvoiceJour)
    {
        ProjInvoiceJourEInvoiceJourMap_MX   invoiceMap;
        EInvoiceJour_MX                     eInvoiceJour;

        eInvoiceJour = EInvoiceJour_MX::findByRef(_projInvoiceJour.TableId,_projInvoiceJour.RecId);

        if (eInvoiceJour.CFDI)
        {
            switch (eInvoiceJour.CFDIVersion)
            {
                case EInvoiceCFDIVersion_MX::V3_2:
                case EInvoiceCFDIVersion_MX::V3_3:
                case EInvoiceCFDIVersion_MX::V4:
                    invoiceMap = new ProjInvoiceJourEInvoiceJourMap_MX();
                    break;

                default:
                    throw error("@SYS341183");
            }
        }
        else
        {
            throw error("@SYS341183");
        }

        invoiceMap.initProjInvoiceJour(_projInvoiceJour);
        invoiceMap.initEInvoice(EInvoiceJour_MX::findByRef(_projInvoiceJour.TableId, _projInvoiceJour.RecId));


        return invoiceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentPostalAddress</Name>
				<Source><![CDATA[
    internal LogisticsPostalAddress emitentPostalAddress()
    {
        LogisticsPostalAddress postalAddress = this.emitentPostalAddressFromInventSite();

        return postalAddress ? postalAddress : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventSiteQuery</Name>
				<Source><![CDATA[
    internal Query initInventSiteQuery()
    {
        Query query = super();

        QueryBuildDataSource qbdsInventDim = query.dataSourceTable(tableNum(InventDim));
        QueryBuildDataSource qbdsProjInvoiceItem = qbdsInventDim.addDataSource(tableNum(ProjInvoiceItem));
        qbdsProjInvoiceItem.relations(true);
        qbdsProjInvoiceItem.joinMode(JoinMode::ExistsJoin);
        qbdsProjInvoiceItem.addRange(fieldNum(ProjInvoiceItem , ProjInvoiceId)).value(queryValue(projInvoiceJour.ProjInvoiceId));
        qbdsProjInvoiceItem.addRange(fieldNum(ProjInvoiceItem , InvoiceDate)).value(queryValue(projInvoiceJour.InvoiceDate));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>