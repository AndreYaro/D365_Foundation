<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsReportServiceDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSDataContract</c> class implements a data contract
/// for the <c>WMSWorkLoadService</c> and <c>WMSSpaceUtilService</c> services.
/// </summary>
[DataContractAttribute]
class wmsReportServiceDataContract implements SysPackable
{
    ReqPlanId                       reqPlanId;
    int                             numberOfDays;
    WMSReportSetupId                reportSetupId;
    RecId                           reportSetupRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        reqPlanId,
        numberOfDays,
        reportSetupId,
        reportSetupRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>noReportSetupRecIdMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a validation error message for the case when no report setup ID is set.
    /// </summary>
    /// <returns>
    /// A validation error message
    /// </returns>
    /// <remarks>
    /// This method is used in the <c>validateContract</c> method.This method should be overwritten in the
    /// derived classes.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The exception is thrown if the method is not overwritten.
    /// </exception>
    protected str noReportSetupRecIdMessage()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the number of days for which the forecast should be created.
    /// </summary>
    /// <param name="_numberOfDays">
    /// The number of days.
    /// </param>
    /// <returns>
    /// The number of days  for which the workload projection should be created.
    /// </returns>
    [DataMemberAttribute,
        SysOperationLabelAttribute(literalStr("@GLS180110")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public int parmNumberOfDays(int _numberOfDays = numberOfDays)
    {
        numberOfDays = _numberOfDays;

        return numberOfDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the report setup ID for which the forecast should be created.
    /// </summary>
    /// <param name="_reportSetupId">
    /// The ID of the report setup.
    /// </param>
    /// <returns>
    /// The ID of the report setup for which the forecast should be created.
    /// </returns>
    public WMSReportSetupId parmReportSetupId(WMSReportSetupId _reportSetupId = reportSetupId)
    {
        reportSetupId = _reportSetupId;

        return reportSetupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetupRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the report setup record ID for which the forecast should be created.
    /// </summary>
    /// <param name="_reportSetupRecId">
    /// The record ID of the report setup.
    /// </param>
    /// <returns>
    /// The record ID of the report setup for which the forecast should be created.
    /// </returns>
    public RecId parmReportSetupRecId(RecId _reportSetupRecId = reportSetupRecId)
    {
        reportSetupRecId = _reportSetupRecId;

        return reportSetupRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the plan for which the forecast should be created.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The plan identificator.
    /// </param>
    /// <returns>
    /// The identificator of the plan for which the workload projection should be created.
    /// </returns>
    [DataMemberAttribute,
        SysOperationLabelAttribute(literalStr("@GLS180111")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        boolean     result  = false;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                result = true;
                break;

            default :
                result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates data contract members.
    /// </summary>
    /// <returns>
    /// true if the data contract has valid data members; otherwise, false.
    /// </returns>
    public boolean validateContract()
    {
        boolean ret = true;

        if (ret && !this.parmReqPlanId())
        {
            ret = ret && checkFailed("@GLS180113");
        }

        if (ret && !this.parmNumberOfDays() > 0)
        {
            ret = ret && checkFailed("@GLS180114");
        }

        if (ret && !this.parmReportSetupRecId())
        {
            ret = ret && checkFailed(this.noReportSetupRecIdMessage());
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>