<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanImportForecastDataContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanImportForecastDataContract</c> class contains the runtime parameters for forecast import.
/// </summary>
[DataContractAttribute]
class ReqDemPlanImportForecastDataContract extends SysOperationDataContractBase implements SysPackable
{
    // Container of containers, each sub-container is a pair of [DataAreaId, ForecastModelId]
    container                           companyForecastModelMapping;
    ReqDemPlanEnableChangeTracking      enableChangeTracking;
    TransDate                           todaysDate;
    ReqDemPlanForecastAttributeManager  attributeManager;
    ReqDemPlanForecastStart             forecastStart;
    ReqDemPlanForecastEnd               forecastEnd;
    ReqDemPlanForecastStart             availableForecastStart;
    ReqDemPlanForecastEnd               availableForecastEnd;
    
    private ReqDemPlanForecastAuthorizationBundleId bundleId;
    private ReqProcessNumThreads        numberOfThreads;

    #define.CurrentVersion(6)
    #localmacro.CurrentList
        enableChangeTracking,
        forecastStart,
        forecastEnd,
        availableForecastStart,
        availableForecastEnd,
        companyForecastModelMapping,
        bundleId,
        numberOfThreads
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>attributeManager</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the related instance of the attribute manager.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>ReqDemPlanForecastAttributeManager</c> class.
    /// </returns>
    public ReqDemPlanForecastAttributeManager attributeManager()
    {
        if (!attributeManager)
        {
            attributeManager = ReqDemPlanForecastAttributeManager::construct();
        }
        return attributeManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForecastEnd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual end date for which forecast will be imported.
    /// </summary>
    /// <param name="_forecastEnd">
    ///     The requested end date for which forecast will be imported.
    /// </param>
    /// <returns>
    ///     The calculated actual end date for which forecast will be imported.
    /// </returns>
    public ReqDemPlanForecastEnd calculateForecastEnd(ReqDemPlanForecastEnd _forecastEnd)
    {
        if (_forecastEnd < this.parmAvailableForecastStart() || _forecastEnd > this.parmAvailableForecastEnd())
        {
            _forecastEnd = this.parmAvailableForecastEnd();
        }
        else
        {
            _forecastEnd = ReqDemPlanDateConverter::getPeriodEndDate(_forecastEnd, this.determineForecastGranularity());
        }

        return this.parmForecastEnd(_forecastEnd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateForecastStart</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the actual date from which forecast will be imported.
    /// </summary>
    /// <param name="_forecastStart">
    ///     The requested date from which the forecast will be imported.
    /// </param>
    /// <returns>
    ///     The calculated actual date from which forecast will be imported.
    /// </returns>
    public ReqDemPlanForecastStart calculateForecastStart(ReqDemPlanForecastStart _forecastStart)
    {
        if (_forecastStart < this.parmAvailableForecastStart() || _forecastStart > this.parmAvailableForecastEnd())
        {
            _forecastStart = this.parmAvailableForecastStart();
        }
        else
        {
            _forecastStart = ReqDemPlanDateConverter::getFirstDateDimensionEntry(_forecastStart, this.determineForecastGranularity()).Date;
        }

        return this.parmForecastStart(_forecastStart);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllCompaniesHaveModels</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies that all records have models specified.
    /// </summary>
    /// <returns>
    ///     true if all models have been specified; otherwise, false.
    /// </returns>
    private boolean checkAllCompaniesHaveModels()
    {
        container   current;
        str         companyId;
        str         forecastModelId;
        int         conSize;
        int         i;
        boolean     result = true;

        conSize = conLen(companyForecastModelMapping);

        if (conSize)
        {
            for (i = 1; i <= conSize; i++)
            {
                current = conPeek(companyForecastModelMapping, i);
                [companyId, forecastModelId] = current;

                if (forecastModelId == '')
                {
                    result = checkFailed(strFmt("@DMP1188", companyId));
                }
                else
                {
                    changeCompany(companyId)
                    {
                        if (!ForecastModel::findForecastModelByName(forecastModelId))
                        {
                            result = checkFailed(strFmt("@DMP1189", forecastModelId, companyId));
                        }
                    }
                }
            }
        }
        else
        {
            result = checkFailed("@DMP1190");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkModelsAndSubmodels</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies that models and related submodels are not selected together.
    /// </summary>
    /// <returns>
    ///     true if models and related submodels are not selected together; otherwise, false.
    /// </returns>
    private boolean checkModelsAndSubmodels()
    {
        container       current;
        str             companyId;
        forecastModelId forecastModelId;
        int             conSize;
        int             i;
        boolean         result = true;
        ForecastModel   forecastModel;

        conSize = conLen(companyForecastModelMapping);

        for (i = 1; i <= conSize; i++)
        {
            current = conPeek(companyForecastModelMapping, i);
            [companyId, forecastModelId] = current;

            changeCompany(companyId)
            {
                while select SubModelId from forecastModel
                    where forecastModel.Type     == HeadingSub::SubModel
                        && forecastModel.ModelId == forecastModelId
                {
                    if (this.hasModelMapping(companyId, forecastModel.SubModelId))
                    {
                        result = checkFailed(strFmt("@DMP1191", companyId, forecastModelId, forecastModel.SubModelId));
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineForecastGranularity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the date granularity of the available forecast.
    /// </summary>
    /// <returns>
    /// The date granularity of the available forecast.
    /// </returns>
    public ReqDemPlanDateGranularity determineForecastGranularity()
    {
        ReqDemPlanGeneratedForecast lastForecast = ReqDemPlanGeneratedForecast::findLatest();

        return lastForecast.DateGranularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineForecastPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the period for which forecast exists.
    /// Both dates are inclusive.
    /// </summary>
    /// <returns>
    /// A container with start date and end date of available forecast.
    /// </returns>
    public container determineForecastPeriod()
    {
        ReqDemPlanForecast          forecast;

        Query query;
        QueryBuildDataSource qbds;
        QueryRun queryRun;

        ReqDemPlanDateGranularity dateGranularity = this.determineForecastGranularity();

        query = new Query();
        query.allowCrossCompany(true);
        qbds = query.addDataSource(tableNum(ReqDemPlanForecast));
        qbds.addRange(fieldNum(ReqDemPlanForecast, Version)).value(queryValue(enum2int(ReqDemPlanForecastVersion::Forecasted)));
        qbds.addSelectionField(fieldNum(ReqDemPlanForecast, ForecastDate), SelectionField::Min);

        queryRun = new QueryRun(query);
        queryRun.next();
        forecast = queryRun.get(tableNum(ReqDemPlanForecast));
        forecastStart = forecast.ForecastDate;
        availableForecastStart = forecastStart;

        query = new Query();
        query.allowCrossCompany(true);
        qbds = query.addDataSource(tableNum(ReqDemPlanForecast));
        qbds.addRange(fieldNum(ReqDemPlanForecast, Version)).value(queryValue(enum2int(ReqDemPlanForecastVersion::Forecasted)));
        qbds.addSelectionField(fieldNum(ReqDemPlanForecast, ForecastDate), SelectionField::Max);

        queryRun = new QueryRun(query);
        queryRun.next();
        forecast = queryRun.get(tableNum(ReqDemPlanForecast));
        forecastEnd = forecast.ForecastDate;

        forecastEnd = ReqDemPlanDateConverter::getPeriodEndDate(forecastEnd, dateGranularity);
        availableForecastEnd = forecastEnd;

        return [forecastStart, forecastEnd];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderedListAttributesForImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an ordered list of dimension levels corresponding to enabled attributes.
    /// </summary>
    /// <returns>
    ///     The ordered list of dimension levels.
    /// </returns>
    public List getOrderedListAttributesForImport()
    {
        List                        list        = new List(Types::Record);
        ReqDemPlanForecastAttribute attribute;

        //allocation key and item are the first attributes for the purpose of import performance
        select attribute
            where attribute.Attribute == ReqDemPlanForecastAttributeType::ItemId
                && attribute.Enabled;
        if (attribute)
        {
            list.addEnd(attribute);
        }

        select attribute
            where attribute.Attribute == ReqDemPlanForecastAttributeType::AllocationKey;
        list.addEnd(attribute);

        while select attribute
            order by attribute.Attribute
            where attribute.Enabled
                && attribute.BIDimensionLevel
                && attribute.Attribute != ReqDemPlanForecastAttributeType::ItemId
                && attribute.Attribute != ReqDemPlanForecastAttributeType::AllocationKey
                && attribute.Attribute != ReqDemPlanForecastAttributeType::DataAreaId   //Company is handled in a special way during import
        {
            if (this.shouldAttributeBeAddedToImportList(attribute))
            {
                list.addEnd(attribute);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAttributeBeAddedToImportList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the attribute should be added to the ordered list for import.
    /// </summary>
    /// <param name="_attribute">
    ///     The attribute to check.
    /// </param>
    /// <returns>
    ///     true if the attribute should be added to the ordered list for import; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Add a post-method handler for returning the right value when extending the <c>ReqDemPlanForecastAttributeType</c> enumeration.
    /// </remarks>
    [Hookable]
    protected boolean shouldAttributeBeAddedToImportList(ReqDemPlanForecastAttribute _attribute)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasModelMapping</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies if model mapping exists.
    /// </summary>
    /// <param name="_company">
    ///     The company ID.
    /// </param>
    /// <param name="_modelId">
    ///     The model ID.
    /// </param>
    /// <returns>
    ///     true if model mapping exists; otherwise, false.
    /// </returns>
    private boolean hasModelMapping(DataAreaId _company, ForecastModelId _modelId)
    {
        container       current;
        str             companyId;
        str             forecastModelId;
        int             conSize;
        int             i;

        conSize = conLen(companyForecastModelMapping);

        for (i = 1; i <= conSize; i++)
        {
            current = conPeek(companyForecastModelMapping, i);
            [companyId, forecastModelId] = current;

            if (companyId == _company && forecastModelId == _modelId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the contract from the model mapping buffer.
    /// </summary>
    /// <param name="_forecastModelPerCompany">
    ///     The buffer to initialize from.
    /// </param>
    public void initFromBuffer(ReqDemPlanImportForecastTmp _forecastModelPerCompany)
    {
        container   mapping = conNull();

        while select _forecastModelPerCompany
        {
            mapping += [[_forecastModelPerCompany.ForecastDataAreaID, _forecastModelPerCompany.ForecastModelId]];
        }

        this.parmCompanyForecastModelMapping(mapping);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes some default values for the data contract.
    /// </summary>
    /// <remarks>
    ///     Those values are overwritten by whatever comes back from SysLastValue,
    ///     so they're really just for first time initialization.
    /// </remarks>
    private void initValues()
    {
        this.parmEnableChangeTracking(true);
        this.parmTodaysDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        this.initValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailableForecastEnd</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ReqDemPlanForecastEnd parmAvailableForecastEnd(ReqDemPlanForecastEnd _availableForecastEnd = availableForecastEnd)
    {
        availableForecastEnd = _availableForecastEnd;

        return availableForecastEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailableForecastStart</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ReqDemPlanForecastStart parmAvailableForecastStart(ReqDemPlanForecastStart _availableForecastStart = availableForecastStart)
    {
        availableForecastStart = _availableForecastStart;

        return availableForecastStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyForecastModelMapping</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public container parmCompanyForecastModelMapping(container _companyForecastModelMapping = companyForecastModelMapping)
    {
        companyForecastModelMapping = _companyForecastModelMapping;
        return companyForecastModelMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableChangeTracking</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ReqDemPlanEnableChangeTracking parmEnableChangeTracking(ReqDemPlanEnableChangeTracking _enableChangeTracking = enableChangeTracking)
    {
        enableChangeTracking = _enableChangeTracking;

        return enableChangeTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastEnd</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ReqDemPlanForecastEnd parmForecastEnd(ReqDemPlanForecastEnd _forecastEnd = forecastEnd)
    {
        forecastEnd = _forecastEnd;

        return forecastEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastStart</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ReqDemPlanForecastStart parmForecastStart(ReqDemPlanForecastStart _forecastStart = forecastStart)
    {
        forecastStart = _forecastStart;

        return forecastStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTodaysDate</Name>
				<Source><![CDATA[
    public TransDate parmTodaysDate(TransDate _todaysDate = todaysDate)
    {
        todaysDate = _todaysDate;

        return todaysDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBundleId</Name>
				<Source><![CDATA[
    internal ReqDemPlanForecastAuthorizationBundleId parmBundleId(ReqDemPlanForecastAuthorizationBundleId _bundleId = bundleId)
    {
        bundleId = _bundleId;

        return bundleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfThreads</Name>
				<Source><![CDATA[
    internal ReqProcessNumThreads parmNumberOfThreads(ReqProcessNumThreads _numberOfThreads = numberOfThreads)
    {
        numberOfThreads = _numberOfThreads;

        return numberOfThreads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int     version = RunBase::getVersion(_packedClass);
        boolean result  = false;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                result = true;
                break;

            default :
                result = false;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the data contract.
    /// </summary>
    /// <returns>
    ///     true if the data contract is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean result;

        result = this.checkAllCompaniesHaveModels();
        result = result && this.checkModelsAndSubmodels();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>