<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlAccountingEventProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlAccountingEventProcessor</c> class is responsible for orchestrating budget checking
/// for accounting events for the specified source documents.
/// </summary>
internal final class BudgetControlAccountingEventProcessor
{
    private SourceDocumentHeaderTmp sourceDocumentHeaderTmp;
    private boolean isOverrunApproved;
    private BudgetControlDataMaintenaceCheckResultController checkResultController;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlAccountingEventProcessor construct(
        SourceDocumentHeaderTmp _sourceDocumentHeaderTmp,
        boolean _isOverrunApproved,
        BudgetControlDataMaintenaceCheckResultController _checkResultController)
    {
        BudgetControlAccountingEventProcessor processor =  new BudgetControlAccountingEventProcessor();
        processor.sourceDocumentHeaderTmp = _sourceDocumentHeaderTmp;
        processor.isOverrunApproved = _isOverrunApproved;
        processor.checkResultController = _checkResultController;

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocuments</Name>
				<Source><![CDATA[
    internal void processSourceDocuments()
    {
        this.initializeProcessor();
        this.preProcessDocuments();
        this.processAccountingEvents();
        this.processDraftAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAccountingEvents</Name>
				<Source><![CDATA[
    private void processAccountingEvents()
    {
        AccountingEvent accountingEvent;

        // -  Process the distributions for each accounting event in the order they were processed.
        //         This allows for accurate relieving, year-end, and finalization associations with the correct records.
        // -  Also order by type in case of the same created time (i.e. auto-created finalizing events after PR confirmation).
        // - For AX2012 Migration, CreatedDateTime is invalid. Use RecId as a last resort.
        while select RecId, Type, SourceDocumentHeader from accountingEvent
            order by CreatedDateTime, Type, RecId
            exists join sourceDocumentHeaderTmp
                where accountingEvent.SourceDocumentHeader == sourceDocumentHeaderTmp.SourceDocumentHeader
        {
            if (accountingEvent.Type == AccountingEventType::Finalize)
            {
                this.processFinalization(accountingEvent.RecId);
            }
            else if (accountingEvent.Type == AccountingEventType::PeriodClose && BudgetControlDataMaintenancePeriodCloseAccountingEventFlight::instance().isEnabled())
            {
                this.processSourceDocumentLinesForPeriodCloseAccountingEvent(accountingEvent.RecId);
            }
            else
            {
                boolean isCarryForward = accountingEvent.Type == AccountingEventType::PeriodOpen ? true : false;
                this.processSourceDocumentLinesForAccountingEvent(accountingEvent.RecId, isCarryForward);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDraftAmounts</Name>
				<Source><![CDATA[
    private void processDraftAmounts()
    {
        AccountingDistribution accountingDistribution;
        AccountingEvent accountingEvent;

        while select SourceDocumentLine from accountingDistribution
            group by SourceDocumentLine
            exists join sourceDocumentHeaderTmp
                where accountingDistribution.SourceDocumentHeader == sourceDocumentHeaderTmp.SourceDocumentHeader
            notexists join accountingEvent
                    where accountingEvent.RecId == accountingDistribution.AccountingEvent
        {
            // Processing any remaining budget that does not have an accounting event.
            BudgetControlDataMaintenanceSourceDocumentProcessor::submitSourceDocumentLineToCheckBudget(
                accountingDistribution.SourceDocumentLine,
                true,
                true);
        }

        this.performBudgetCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocumentLinesForAccountingEvent</Name>
				<Source><![CDATA[
    private void processSourceDocumentLinesForAccountingEvent(AccountingEventRecId _accountingEventRecId, boolean _isCarryForward)
    {
        AccountingDistribution accountingDistribution;
        SourceDocumentLine SourceDocumentLine;
        BudgetSourceTmp budgetSourceOverrunApproved;

        // Since the budget source is only created for the top source document line, accounting events of child documents
        // will process when the parent is processed.
        // (i.e. Charges on a PR with different accounting date are a child SDL and have their own AE).
        while select RecId from sourceDocumentLine
            exists join accountingDistribution
                where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
                    && accountingDistribution.AccountingEvent == _accountingEventRecId
        {
            this.setBudgetSourceOverrunApproved(sourceDocumentLine.RecId, budgetSourceOverrunApproved);
            BudgetControlDataMaintenanceSourceDocumentProcessor::submitSourceDocumentLineToCheckBudget(
                sourceDocumentLine.RecId,
                false,
                false,
                _isCarryForward,
                _accountingEventRecId);
        }

        this.performBudgetCheck();

        // Revert budget sources back into their original state
        this.disableBudgetSourceOverrunApproved(budgetSourceOverrunApproved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocumentLinesForPeriodCloseAccountingEvent</Name>
				<Source><![CDATA[
    private void processSourceDocumentLinesForPeriodCloseAccountingEvent(AccountingEventRecId _accountingEventRecId)
    {
        AccountingDistribution accountingDistribution;
        SourceDocumentLine SourceDocumentLine;
        BudgetSourceTmp budgetSourceOverrunApproved;

        while select RecId from sourceDocumentLine
            join AccountingDate from accountingDistribution
                where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
                    && accountingDistribution.AccountingEvent == _accountingEventRecId
        {
            this.setBudgetSourceOverrunApproved(sourceDocumentLine.RecId, budgetSourceOverrunApproved);
            BudgetControlDataMaintenanceSourceDocumentProcessor::submitSourceDocLineToReturnRemaining(
                sourceDocumentLine.RecId,
                accountingDistribution.AccountingDate,
                true);
        }

        this.performBudgetCheck();
        this.disableBudgetSourceOverrunApproved(budgetSourceOverrunApproved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFinalization</Name>
				<Source><![CDATA[
    private void processFinalization(AccountingEventRecId _finalizationAccountingEventRecId)
    {
        AccountingDistribution accountingDistribution;
        AccountingEvent accountingEvent;

        while select AccountingDate from accountingEvent
            where accountingEvent.RecId == _finalizationAccountingEventRecId
            join SourceDocumentLine from accountingDistribution
                where accountingDistribution.FinalizeAccountingEvent == accountingEvent.RecId
        {
            BudgetControlDataMaintenanceSourceDocumentProcessor::submitSourceDocLineToReturnRemaining(
                accountingDistribution.SourceDocumentLine,
                accountingEvent.AccountingDate);
        }

        this.performBudgetCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessDocuments</Name>
				<Source><![CDATA[
    private void preProcessDocuments()
    {
        BudgetControlSourceDocumentBudgetSourcePopulator populator = BudgetControlSourceDocumentBudgetSourcePopulator::construct(this.sourceDocumentHeaderTmp);
        BudgetControlBudgetSourceRemover::removeBudgetSourceData(populator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetSourceOverrunApproved</Name>
				<Source><![CDATA[
    private void setBudgetSourceOverrunApproved(SourceDocumentLineRecId _sourceDocumentLineRecId, BudgetSourceTmp _budgetSourceOverrunApproved)
    {
        if (this.isOverrunApproved)
        {
            // Since budget is being added that didn't exist before, it's possible that going overbudget is a valid state.
            // Override the budget check so that the budget check won't fail.
            // Since we don't know if the budget source exists yet or not, we can't do this set-based
            SourceDocumentLineRecId topParentSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(_sourceDocumentLineRecId).RecId;
            BudgetSourceRecId budgetSourceRecId = BudgetSourceSourceDocumentLine::saveBudgetSource(topParentSourceDocumentLine);
            BudgetSource budgetSource = BudgetSource::find(budgetSourceRecId, true);

            if (budgetSource.IsOverrunApproved == NoYes::No)
            {
                budgetSource.IsOverrunApproved = NoYes::Yes;
                budgetSource.update();

                _budgetSourceOverrunApproved.clear();
                _budgetSourceOverrunApproved.BudgetSourceRecId = budgetSource.RecId;
                _budgetSourceOverrunApproved.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableBudgetSourceOverrunApproved</Name>
				<Source><![CDATA[
    private void disableBudgetSourceOverrunApproved(BudgetSourceTmp _budgetSourceOverrunApproved)
    {
        if (this.isOverrunApproved)
        {
            BudgetSource budgetSource;
            BudgetSourceTracking budgetSourceTracking;
            SourceDocumentLine sourceDocumentLine;

            ttsbegin;

            update_recordset budgetSource
            setting IsOverrunApproved = NoYes::No
                where budgetSource.IsOverrunApproved == NoYes::Yes
            exists join _budgetSourceOverrunApproved
                where _budgetSourceOverrunApproved.BudgetSourceRecId == budgetSource.RecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBudgetCheck</Name>
				<Source><![CDATA[
    private void performBudgetCheck()
    {
        BudgetControlMaintenanceProcessor::instance().runBudgetCheck();

        // In the event of an error, all previous budget checks for the chain up to that point are lost due to the ttsabort
        // Keep in an in-memory storage of all budget checks after each check.
        checkResultController.saveBudgetCheckResults(sourceDocumentHeaderTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProcessor</Name>
				<Source><![CDATA[
    private void initializeProcessor()
    {
        checkResultController.initialize(this.sourceDocumentHeaderTmp);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>