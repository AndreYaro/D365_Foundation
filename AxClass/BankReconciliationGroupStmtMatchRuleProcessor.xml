<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationGroupStmtMatchRuleProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BankReconciliationMatchTypeAttribute(BankReconciliationStmtMatchMathingType::ManyToOne)]
internal final class BankReconciliationGroupStmtMatchRuleProcessor extends BankReconciliationGroupMatchRuleProcessorBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankReconciliationMatchRule _matchRule, BankReconciliationStatementOpenTmp _statementTmp, BankReconciliationDocumentOpenTmp _documentTmp, BankReconciliationHeader _reconciliation, BankReconciliationDataManager _dataManager)
    {
        super(_matchRule, _statementTmp, _documentTmp, _reconciliation, _dataManager);
        groupStatementQuery = new BankReconciliationGroupStatementOpenQuery(_matchRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentStatement</Name>
				<Source><![CDATA[
    internal protected Common getCurrentStatement(QueryRun _statementQueryRun)
    {
        return _statementQueryRun.get(tableNum(BankReconciliationGroupStatementOpenTmp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchAction</Name>
				<Source><![CDATA[
    internal protected void performMatchAction(Common _openStatementForMatch, BankStmtTmp _bankStatementsToUpdate)
    {
        QueryRun matchQuery = this.buildQueryForMatchedStatements(_openStatementForMatch);

        this.match(this.expandGroupStatement(matchQuery), searchedDocumentIdList);

        this.addStatementsToUpdate(matchQuery, _bankStatementsToUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchedDocumentIdList</Name>
				<Source><![CDATA[
    internal protected void getSearchedDocumentIdList(Common _tmpStatement)
    {
        searchedDocumentIdList = new List(Types::Int64);

        if (this.canProcessMatchRule(_tmpStatement))
        {
            documentQuery.setComparedRecordBuffer(_tmpStatement);
            documentQuery.buildQuery();
            QueryRun qrDocument = new QueryRun(documentQuery.getQuery());
            documentQuery.setQueryRunRecord(qrDocument, reconciliationDocumentTmp);
            if (qrDocument)
            {
                boolean firstRecord = true;
                while (qrDocument.next())
                {
                    if (!firstRecord)
                    {
                        searchedDocumentIdList = new List(Types::Int64);
                        break;
                    }
                    BankReconciliationDocumentOpenTmp documentTmpLocal = qrDocument.get(tableNum(BankReconciliationDocumentOpenTmp));
                    searchedDocumentIdList.addEnd(documentTmpLocal.RecId);

                    firstRecord = false;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>