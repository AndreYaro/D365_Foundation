<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxSpecPerledgerTransController</c> class is the controller for the <c>TaxSpecPerledgerTrans</c> report.
/// </summary>
public class TaxSpecPerLedgerTransController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        TaxSpecPerLedgerTransContract contract = this.parmReportContract().parmRdpContract() as TaxSpecPerLedgerTransContract;
        boolean isEasternEuropeOrVatDueDateFeatureEnabled = TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled();
        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        if (contract.parmTotalOnly())
        {
            contract.parmIsCalcOrigAmtFeatureEnabled(true);
            this.parmReportContract().parmReportName(ssrsReportStr(TaxSpecPerLedgerTrans, ReportTotalsOnly));
        }

        if (!isEasternEuropeOrVatDueDateFeatureEnabled &&
            ((contract.parmMainAccountOnly() || !contract.parmMainAccountOnly()) && !contract.parmTotalOnly()))
        {
            this.parmReportContract().parmReportName(ssrsReportStr(TaxSpecPerLedgerTrans,Report));
        }
        // <GEEU>
        else if (isEasternEuropeOrVatDueDateFeatureEnabled && !contract.parmTotalOnly())
        {
            this.parmReportContract().parmReportName(ssrsReportStr(TaxSpecPerLedgerTrans, Report_W));
        }
        // </GEEU>

        if (contract.parmGroupDataBy() == TaxSpecPerLedgerTransGroupBy::SalesTaxCode)
        {
            contract.parmSubtotalByTaxCode(false);
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
        // </GEEPL>
            contract.parmDisplayDescription(false);
        // <GEEPL>
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxSpecPerledgerTransController controller = new TaxSpecPerledgerTransController();
        controller.parmReportName(ssrsReportStr(TaxSpecPerledgerTrans, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>