<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransOnAccTransSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransOnAccTransSale extends ProjTransOnAccTrans
{
    ProjOnAccTransSale   projOnAccTransSale;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret = true;

        ret = super(_chargeable);

        if (ret)
        {
            projFundingSource = ProjFundingSource::find(this.fundingSource());
            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projOnAccTransSale.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projOnAccTransSale.FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
/// <summary>
    /// Indicates whether this transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// true if this transaction has been invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  boolean invoiced()
    {
        boolean ret;

        if (projOnAccTrans.TransactionOrigin == ProjOrigin::BeginningBalance
            && (projOnAccTransSale.TransStatus == ProjTransStatus::Invoiced
            || projOnAccTransSale.TransStatus == ProjTransStatus::Estimated
            ))
        {
            ret = true;
        }
        else
        {
            ret = ProjInvoiceOnAccDetail::find(this.recId()).RecId ? true : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the invoice for this transaction.
    /// </summary>
    /// <returns>
    /// The invoice ID of the invoice for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjInvoiceId invoiceId()
    {
        if (this.transStatus() == ProjTransStatus::CreditnoteProposal)
        {
            return '';
        }
        else
        {
            return  ProjInvoiceOnAccDetail::find(this.recId()).projInvoiceOnAcc().ProjInvoiceId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to be posted to the general ledger.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        return projOnAccTransSale.LedgerSalesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjOnAccTrans _projOnAccTrans, ProjOnAccTransSale _projOnAccTransSale)
    {
        projOnAccTransSale = _projOnAccTransSale;

        super(_projOnAccTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction. This base class implementation returns false.
    /// </remarks>
    public  boolean proposal()
    {
        return ProjProposalOnAccDetail::findActiveProposalId(this.recId()) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  ProjProposalId proposalId()
    {
        return ProjProposalOnAccDetail::findActiveProposalId(this.recId(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public recId recId()
    {
        return projOnAccTransSale.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SalesPrice salesPrice()
    {
        return projOnAccTransSale.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public tableId tableId()
    {
        return tablename2id(tablestr(ProjOnAccTransSale));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return projOnAccTransSale.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    public Voucher voucherInvoice()
    {
        ProjInvoiceOnAccDetail   projInvoiceOnAccDetail;
        ProjInvoiceOnAcc         projInvoiceOnAcc;

        if (ProjInvoiceOnAccDetail::exist(this.recId()))
        {
            projInvoiceOnAccDetail = ProjInvoiceOnAccDetail::find(this.recId());
            projInvoiceOnAcc = projInvoiceOnAccDetail.projInvoiceOnAcc();
            return ProjInvoiceJour::find(projInvoiceOnAcc.ProjInvoiceId, projInvoiceOnAcc.InvoiceDate).LedgerVoucher;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditNoteOrigTransInvoiceDate</Name>
				<Source><![CDATA[
    internal TransDate getCreditNoteOrigTransInvoiceDate()
    {
        ProjOnAccTransSale projOnAccTransSaleLoc;
        ProjInvoiceOnAcc projInvoiceOnAccLoc;
        ProjInvoiceOnAccDetail projInvoiceOnAccDetailLoc;

        select firstonly InvoiceDate from projInvoiceOnAccLoc
            order by projInvoiceOnAccLoc.InvoiceDate desc
            where projInvoiceOnAccLoc.TransId == this.transId()
                && projInvoiceOnAccLoc.Qty == this.qty()
            exists join ProjInvoiceOnAccDetailLoc
                where projInvoiceOnAccDetailLoc.InvoiceRefRecId == projInvoiceOnAccLoc.RecId
            exists join projOnAccTransSaleLoc
                where projOnAccTransSaleLoc.RecId == projInvoiceOnAccDetailLoc.SaleRefRecId
                    && projOnAccTransSaleLoc.TransStatus == ProjTransStatus::MarkedCreditNote
                    && projOnAccTransSaleLoc.FundingSource == this.fundingSource();

        InvoiceDate origInvoiceDate = projInvoiceOnAccLoc.InvoiceDate;
        
        return origInvoiceDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>