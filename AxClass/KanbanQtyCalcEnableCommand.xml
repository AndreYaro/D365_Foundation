<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQtyCalcEnableCommand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanQtyCalcEnableCommand</c> class creates one or more <c>KanbanQtyCalcTaskProcessor</c>
///    objects in order to update kanban rules or create new kanban rules.
/// </summary>
/// <remarks>
///    If several <c>KanbanQtyCalcTaskProcessor</c> objects are created, the creation or updating of
///    kanban rules is performed in parallel.
/// </remarks>
public class KanbanQtyCalcEnableCommand extends KanbanQtyCalcCommand implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or updates the kanban rules by implementing the main logic.
    /// </summary>
    protected void execute()
    {
        this.createTaskProcessor(this.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>CalculationStatus</c> field for the <c>KanbanQuantityCalculation</c> record.
    /// </summary>
    public void updateStatus()
    {
        kanbanQuantityCalculationLock.CalculationStatus = KanbanQuantityCalculationStatus::Updated;
        kanbanQuantityCalculationLock.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that <c>KanbanQuantityCalculationProposal</c> records can be updated.
    /// </summary>
    /// <param name="_calledFrom">
    ///    An object that represents the calling object.
    /// </param>
    /// <returns>
    ///    true if <c>KanbanQuantityCalculationProposal</c> records can be created; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        // The kanban quantity calculation must have status KanbanQuantityCalculationStatus::Calculated in order to enable kanban rules
        if ( kanbanQuantityCalculation.CalculationStatus == KanbanQuantityCalculationStatus::Created)
        {
            ret = checkFailed(strfmt("@SYS319235",KanbanQuantityCalculationStatus::Created));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQtyCalcEnableCommand</c> class.
    /// </summary>
    /// <returns>
    /// A <c>KanbanQtyCalcEnableCommand</c> object.
    /// </returns>
    private static KanbanQtyCalcEnableCommand construct()
    {
        return new KanbanQtyCalcEnableCommand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS318735";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        KanbanQuantityCalculation kanbanQuantityCalculation = KanbanQtyCalcCommand::getKanbanQuantityCalculationFromArgs(_args);

        KanbanQtyCalcEnableCommand kanbanQtyCalcEnableCommand = KanbanQtyCalcEnableCommand::newStandard(kanbanQuantityCalculation.data());
        kanbanQtyCalcEnableCommand.saveLast();

        if ( ! kanbanQtyCalcEnableCommand.prompt())
        {
            return;
        }

        kanbanQtyCalcEnableCommand.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQtyCalcEnableCommand</c> class.
    /// </summary>
    /// <param name="_kanbanQuantityCalculation">
    /// A <c>KanbanQuantityCalculation</c> record.
    /// </param>
    /// <returns>
    /// A <c>KanbanQtyCalcEnableCommand</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanQtyCalcEnableCommand    newStandard(
        KanbanQuantityCalculation   _kanbanQuantityCalculation)
    {
        KanbanQtyCalcEnableCommand kanbanQtyCalcEnableCommand = KanbanQtyCalcEnableCommand::construct();
        kanbanQtyCalcEnableCommand.parmKanbanQuantityCalculation(_kanbanQuantityCalculation);

        return kanbanQtyCalcEnableCommand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
