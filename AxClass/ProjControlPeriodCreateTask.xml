<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlPeriodCreateTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A task for generating project estimate creation that can run in Batch.
/// </summary>
public class ProjControlPeriodCreateTask extends RunBaseBatch implements BatchRetryable
{
    private ProjWipId projWIPId;
    private ProjControlPeriodCreate projControlPeriodCreate;
    private guid batchGUID;
    private int subtaskID;
    private ProjPeriodFrom periodFrom;
    private ProjPeriodTo periodTo;
    private ProjPeriodId periodId;
    private boolean periodic;
    private ProjBeginningBalance beginningBalance;
    private boolean skipCreateEstimateValidation;
    private boolean continuesPeriodes;
    private ProjEstimateMethod projEstimateMethod;
    private ProjControlCompletionMethod projCompletionMethod;
    private NoYes outputInfolog;
    private ProjControlTypeOutput outputResult;
    private ProjForecastModelId forecastModelId;
    private ProjForecastModelId forecastModelIdOld;
    private boolean isContractLineUsed;

    const int CurrentVersion = 2;
    #localmacro.CurrentList
        batchGUID,
        subtaskID,
        projWIPId,
        periodFrom,
        periodTo,
        periodId,
        periodic,
        beginningBalance,
        skipCreateEstimateValidation,
        continuesPeriodes,
        projEstimateMethod,
        ProjCompletionMethod,
        outputInfolog,
        outputResult,
        forecastModelId,
        forecastModelIdold
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProjWIPId</Name>
				<Source><![CDATA[
    public ProjWipId parmProjWIPId(ProjWipId _projWIPId = projWIPId)
    {
        projWIPId = _projWIPId;
        return projWIPId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of this class that can be used for executing the project estimation
    /// by the given project WIP ID.
    /// </summary>
    /// <param name = "_batchGUID">Batch unique GUID to identify the batch execution.</param>
    /// <param name = "_subtaskId">Subtask ID to idnentif the subtask execution.</param>
    /// <param name = "_projWIPId">The work in progress project ID to create project estimate.</param>
    /// <param name = "_projControlPeriodCreate">The project control period create object.</param>
    /// <returns>The <c>ProjControlPeriodTask</c> object.</returns>
    public static ProjControlPeriodCreateTask Construct(guid _batchGUID, int _subtaskId,
        ProjWipId _projWIPId, ProjControlPeriodCreate _projControlPeriodCreate)
    {
        ProjControlPeriodCreateTask batch = new ProjControlPeriodCreateTask();
        batch.batchGUID = _batchGUID;
        batch.subtaskID = _subtaskID;
        batch.projWIPId = _projWIPId;
        batch.projControlPeriodCreate = _projControlPeriodCreate;
        batch.populateFields(_projControlPeriodCreate);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
    private void populateFields(ProjControlPeriodCreate _projControlPeriodCreate)
    {
        periodFrom = _projControlPeriodCreate.parmProjPeriodFrom();
        periodTo = _projControlPeriodCreate.parmProjPeriodTo();
        forecastModelId = _projControlPeriodCreate.parmForecastModelId();
        forecastModelIdold = _projControlPeriodCreate.parmForcastModelold();
        periodic = _projControlPeriodCreate.parmPeriodic();
        periodId = _projControlPeriodCreate.parmProjPeriodId();
        continuesPeriodes = _projControlPeriodCreate.parmContinuesPeriodes();
        outputInfolog = _projControlPeriodCreate.parmShowInfoLog();
        outputResult = _projControlPeriodCreate.parmProjControlTypeOutput();
        projEstimateMethod = _projControlPeriodCreate.parmProjEstimateMethod();
        projCompletionMethod = _projControlPeriodCreate.parmProjCompletionMethod();
        beginningBalance = _projControlPeriodCreate.parmBeginningBalance();
        skipCreateEstimateValidation = _projControlPeriodCreate.parmSkipCreateEstimateValidation();
        isContractLineUsed = _projControlPeriodCreate.parmIsContractLineUsed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjControlPeriodObject</Name>
				<Source><![CDATA[
    private ProjControlPeriodCreate createProjControlPeriodObject()
    {
        ProjControlPeriodCreate projControlPeriodCreateLoc = ProjControlPeriod::construct(ProjControlType::Create);
        projControlPeriodCreateLoc.parmProjPeriodFrom(periodFrom);
        projControlPeriodCreateLoc.parmProjPeriodTo(periodTo);
        projControlPeriodCreateLoc.parmForecastModelId(forecastModelId);
        projControlPeriodCreateLoc.parmBeginningBalance(beginningBalance);
        projControlPeriodCreateLoc.parmForcastModelold(forecastModelIdold);
        projControlPeriodCreateLoc.parmProjWIPProjId(projWIPId);
        projControlPeriodCreateLoc.parmPeriodic(periodic);
        projControlPeriodCreateLoc.parmProjPeriodId(periodId);
        projControlPeriodCreateLoc.parmContinuesPeriodes(continuesPeriodes);
        projControlPeriodCreateLoc.parmShowInfoLog(outputInfolog);
        projControlPeriodCreateLoc.parmProjControlTypeOutput(outputResult);
        projControlPeriodCreateLoc.parmProjEstimateMethod(projEstimateMethod);
        projControlPeriodCreateLoc.parmProjCompletionMethod(ProjCompletionMethod);
        projControlPeriodCreateLoc.parmSkipCreateEstimateValidation(skipCreateEstimateValidation);
        projControlPeriodCreateLoc.parmProjWIPTable(ProjWIPTable::find(projWIPId));
        projControlPeriodCreateLoc.parmIsContractLineUsed(projControlPeriodCreateLoc.parmProjWIPTable().IsContractLineUsed);
        return projControlPeriodCreateLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = conPeek(_packedClass, 1);

        switch(version)
        {
            case CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            case 1:
                this.batchGUID = conPeek(_packedClass, 2);
                this.subtaskID = conPeek(_packedClass, 3);
                this.projWIPId = conPeek(_packedClass, 4);
                ProjControlPeriodCreate unpackedProjControlPeriod = ProjControlPeriod::construct(ProjControlType::Create);
                unpackedProjControlPeriod.unpack(conPeek(_packedClass, 5));
                this.projControlPeriodCreate = unpackedProjControlPeriod;
                break;
            default:
                return False;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProjControlPeriodCreate projControlPeriodCreateLoc = this.createProjControlPeriodObject();
        projControlPeriodCreateLoc.initQuery();
        ProjControlPeriodCreate::createEstimate(this.batchGUID, this.subtaskID, this.projWIPId, projControlPeriodCreateLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    public boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static ProjControlPeriodCreateTask create(container _packedObject)
    {
        ProjControlPeriodCreateTask estimateBatch = new ProjControlPeriodCreateTask();

        estimateBatch.unpack(_packedObject);

        return estimateBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>