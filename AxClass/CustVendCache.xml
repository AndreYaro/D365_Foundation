<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendCache</c> class caches customer and vendor information.
/// </summary>
class CustVendCache
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearAllScopes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the customer and vendor cache for all customer and vendor cache scopes.
    /// </summary>
    public static void clearAllScopes()
    {
        DictEnum             dictEnum = new DictEnum(enumnum(CustVendCacheScope));
        int                  i;

        for (i = 0; i <= dictEnum.values(); i++)
        {
            CustVendCache::clearScope(dictEnum.index2Value(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the customer and vendor cache for the specified customer and vendor cache scope.
    /// </summary>
    /// <param name="_scope">
    ///    The customer and vendor cache scope for which to clear.
    /// </param>
    public static void clearScope(CustVendCacheScope _scope)
    {
        SysGlobalObjectCache c = classfactory.globalObjectCache();
        c.clear(CustVendCache::getCacheScopeStr(_scope));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheScopeStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the customer and vendor cache scope identifier for the specified customer and vendor cache
    ///    scope.
    /// </summary>
    /// <param name="_scope">
    ///    The customer and vendor cache scope for which to get the identifier.
    /// </param>
    /// <returns>
    ///    The identifier of the customer and vendor cache scope.
    /// </returns>
    private static str getCacheScopeStr(CustVendCacheScope _scope)
    {
        // Int2Str is used instead of Enum2Str to get the int
        // value like '2' instead of the string value for
        // the scope to ensure uniqueness. The _scope enum
        // is implicitly cast to an int by this call. This
        // avoids calling strfmt() which causes a kernel
        // callback running under IL and is therefore significantly
        // slower.
        return 'CustVendCache_' + int2str(_scope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the customer and vendor cache value for the specified customer and vendor cache scope and
    ///    value key.
    /// </summary>
    /// <param name="_scope">
    ///    The customer and vendor cache scope for which to obtain the cache value.
    /// </param>
    /// <param name="_key">
    ///    The value key for which to obtain the cache value.
    /// </param>
    /// <returns>
    ///    The customer and vendor cache value.
    /// </returns>
    public static container getValue(CustVendCacheScope _scope, container _key)
    {
        SysGlobalObjectCache c = classfactory.globalObjectCache();
        return c.find(CustVendCache::getCacheScopeStr(_scope), _key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the customer and vendor cache value.
    /// </summary>
    /// <param name="_scope">
    ///    The customer and vendor cache scope to insert.
    /// </param>
    /// <param name="_key">
    ///    The value key to insert.
    /// </param>
    /// <param name="_value">
    ///    The value to insert.
    /// </param>
    public static void insertValue(CustVendCacheScope _scope, container _key, container _value)
    {
        SysGlobalObjectCache c = classfactory.globalObjectCache();
        c.insert(CustVendCache::getCacheScopeStr(_scope), _key, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the customer and vendor cache value.
    /// </summary>
    /// <param name="_scope">
    ///    The customer and vendor cache scope to remove.
    /// </param>
    /// <param name="_key">
    ///    The value key to remove.
    /// </param>
    public static void removeValue(CustVendCacheScope _scope, container _key)
    {
        SysGlobalObjectCache c = classfactory.globalObjectCache();
        c.remove(CustVendCache::getCacheScopeStr(_scope), _key);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>