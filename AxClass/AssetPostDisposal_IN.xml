<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetPostDisposal_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posts the asset disposal.
/// </summary>
class AssetPostDisposal_IN
{
    LedgerVoucher                   ledgerVoucher;
    AssetGroupTrans_IN              assetGroupTrans;
    AssetGroupInformation_IN        assetGroupInformation;
    AssetSumCalc_Trans_IN           assetSumPriorYears,
                                    assetSumAllYears;
    LedgerVoucherObject             ledgerVoucherObject;
    LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
    LedgerDimensionAccount          ledgerDimensionMerged;
    CurrencyExchangeHelper          exchangeRateHelper;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAssetTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new asset transaction.
    /// </summary>
    /// <param name="_exchRate">
    /// The exchange rate.
    /// </param>
    /// <param name="_exchRateSecond">
    /// The secondary exchane rate.
    /// </param>
    public void createAssetTrans(
        ExchRate              _exchRate,
        ExchrateSecondary     _exchRateSecond)
    {
        AssetTable                  assetTable;
        AssetGroupTrans_IN          assetTransNew;
        AssetGroupInformation_IN    assetGroupInformationNew;

        AssetBook                   assetBook;
        AmountMST                   profitLossAmount;
        AssetReserveType            assetReserveType;
        LedgerVoucherTransObject    ledgerVoucherTransObject;

        void insertTrans(AssetAmount      _assetAmount,
                         AssetTransType   _assetTransType)
        {
            if (_assetAmount)
            {
                assetGroupInformationNew.TransType   = _assetTransType;
                assetGroupInformationNew.AmountMst   = _assetAmount;
                assetGroupInformationNew.AmountCur   = _assetAmount;
                assetGroupInformationNew.insert();

                assetTransNew.AssetGroupInformation = assetGroupInformationNew.RecId;
                assetTransNew.insert();
            }
        }

        assetTransNew.data(assetGroupTrans);

        assetGroupInformationNew.CurrencyCode = Ledger::accountingCurrency();

        profitLossAmount = -assetSumAllYears.netBookValue()-assetGroupInformation.AmountMst;

        // Profit/Loss

        insertTrans(assetSumAllYears.netBookValue(), AssetTransType::NetBookValue);

        assetBook        = AssetBook::find(assetGroupTrans.AssetId,assetGroupTrans.BookId);
        assetReserveType = AssetReserveType::find(assetBook.ReserveTypeId);

        if (assetGroupInformation.TransType == AssetTransType::DisposalSale &&
            assetBook.ReserveTypeId                                         &&
            profitLossAmount > 0                                            &&
            assetBook.lifeTimeMonth(assetGroupInformation.TransDate) >= assetReserveType.LifeTime)
        {
            insertTrans(profitLossAmount, AssetTransType::CapitalReserve);
            assetTable = AssetTable::find(assetGroupTrans.AssetId);

            ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

            ledgerDimensionDefaultAccount = AssetLedgerAccounts::assetLedgerDimension(
                                                assetTable.AssetId,
                                                assetGroupTrans.BookId,
                                                assetGroupInformation.TransType,
                                                assetGroupTrans.PostingProfile);

            ledgerDimensionMerged = this.mergeLedgerDimensionAndDefaultDimension(ledgerDimensionDefaultAccount, assetGroupTrans.DefaultDimension);

            exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                    ledgerVoucherObject.parmAccountingDate());
            exchangeRateHelper.parmExchangeRate1(_exchRate);
            exchangeRateHelper.parmExchangeRate2(_exchRateSecond);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                ledgerVoucherObject,
                                                (profitLossAmount > 0 ? LedgerPostingType::FixedAssetsDebit : LedgerPostingType::FixedAssetsCredit),
                                                ledgerDimensionMerged,
                                                assetGroupInformation.CurrencyCode,
                                                profitLossAmount,
                                                exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceTableId(assetGroupTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(assetGroupTrans.RecId);

            ledgerVoucherTransObject.parmText(assetGroupInformation.Txt);
            if (assetBook.exchangeRateDate())
            {
                ledgerVoucherTransObject.parmHistoricalExchangeRateDate(assetBook.exchangeRateDate());
            }
            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                         ledgerVoucherObject,
                                         (-profitLossAmount > 0 ? LedgerPostingType::FixedAssetsDebit : LedgerPostingType::FixedAssetsCredit),
                                         ledgerDimensionMerged,
                                         assetGroupInformation.CurrencyCode,
                                         -profitLossAmount,
                                         exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceTableId(assetGroupTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(assetGroupTrans.RecId);

            ledgerVoucherTransObject.parmText(assetGroupInformation.Txt);
            if (assetBook.exchangeRateDate())
            {
                ledgerVoucherTransObject.parmHistoricalExchangeRateDate(assetBook.exchangeRateDate());
            }
            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerDimensionDefaultAccount = AssetLedgerAccounts::assetLedgerDimension(
                                             assetTable.AssetId,
                                             assetGroupTrans.BookId,
                                             AssetTransType::CapitalReserve,
                                             assetGroupTrans.PostingProfile);

            ledgerDimensionMerged = this.mergeLedgerDimensionAndDefaultDimension(ledgerDimensionDefaultAccount, assetGroupTrans.DefaultDimension);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                ledgerVoucherObject,
                                                (profitLossAmount > 0 ? LedgerPostingType::FixedAssetsDebit : LedgerPostingType::FixedAssetsCredit),
                                                ledgerDimensionMerged,
                                                assetGroupInformation.CurrencyCode,
                                                -profitLossAmount,
                                                exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceTableId(assetGroupTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(assetGroupTrans.RecId);

            ledgerVoucherTransObject.parmText(assetGroupInformation.Txt);
            if (assetBook.exchangeRateDate())
            {
                ledgerVoucherTransObject.parmHistoricalExchangeRateDate(assetBook.exchangeRateDate());
            }
            ledgerVoucher.addTrans(ledgerVoucherTransObject);

            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                ledgerVoucherObject,
                                                (-profitLossAmount > 0 ? LedgerPostingType::FixedAssetsDebit : LedgerPostingType::FixedAssetsCredit),
                                                ledgerDimensionMerged,
                                                assetGroupInformation.CurrencyCode,
                                                profitLossAmount,
                                                exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceTableId(assetGroupTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(assetGroupTrans.RecId);

            ledgerVoucherTransObject.parmText(assetGroupInformation.Txt);
            if (assetBook.exchangeRateDate())
            {
                ledgerVoucherTransObject.parmHistoricalExchangeRateDate(assetBook.exchangeRateDate());
            }
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
        else
        {
            insertTrans(profitLossAmount, AssetTransType::ProfitLoss);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeLedgerDimensionAndDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the ledger dimension default account and the default dimensions to create a ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension default account.
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimensions.
    /// </param>
    /// <returns>
    /// A ledger dimension.
    /// </returns>
    protected LedgerDimensionAccount mergeLedgerDimensionAndDefaultDimension(
        LedgerDimensionDefaultAccount _ledgerDimension,
        DimensionDefault _defaultDimension)
    {
        LedgerDimensionAccount  mergedLedgerDimension;
        List                    dimensionSources;

        dimensionSources = new List(Types::Class);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
        mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources);

        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>AssetPostDisposal_IN</c> class.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledger voucher.
    /// </param>
    /// <param name="_assetGroupTrans">
    /// The group asset transaction.
    /// </param>
    public void new(LedgerVoucher  _ledgerVoucher, AssetGroupTrans_IN  _assetGroupTrans)
    {
        ledgerVoucher           = _ledgerVoucher;
        assetGroupTrans         = _assetGroupTrans;
        assetGroupInformation   = AssetGroupInformation_IN::find(assetGroupTrans.AssetGroupInformation);
        assetSumPriorYears      = AssetSumCalc_Trans_IN::newAssetYear(assetGroupInformation.AssetGroup,
                                                                      _assetGroupTrans.BookId,
                                                                      assetGroupInformation.TransDate,
                                                                      AssetYear::PriorYears);
        assetSumAllYears        = AssetSumCalc_Trans_IN::newAssetYear(assetGroupInformation.AssetGroup,
                                                                      _assetGroupTrans.BookId,
                                                                      assetGroupInformation.TransDate,
                                                                      AssetYear::All);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the transaction.
    /// </summary>
    public void post()
    {
        AssetAmount                 assetAmount;
        AssetDisposalParameters     assetDisposalParameters;
        AssetDisposalParameters     l_assetDisposalParameters;
        AssetPostType               assetPostType;
        AssetSoldScrap              soldScrap;
        CurrencyCode                companyCurrency = CompanyInfoHelper::standardCurrency();
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        AssetGroupId                assetGroupId;
        TransDate                   acquisitionDate;

        ttsbegin;

        if ((assetGroupInformation.AmountMst + (assetSumAllYears.netBookValue())) < 0)
        {
            assetPostType = AssetPostType::Positive;
        }
        else
        {
            assetPostType = AssetPostType::Negative;
        }

        soldScrap = this.determineAssetSoldScrap();

        select assetDisposalParameters
              where assetDisposalParameters.PostValue       == AssetPostValue::NBV                                  &&
                    assetDisposalParameters.SoldScrap       == soldScrap                                            &&
                    assetDisposalParameters.PostingProfile  == assetGroupTrans.PostingProfile                       &&
                    assetDisposalParameters.BookId          == assetGroupTrans.BookId                               &&
                    (assetDisposalParameters.ValueType      == assetPostType                                        ||
                     assetDisposalParameters.ValueType      == AssetPostType::All)                                  &&
                    ((assetDisposalParameters.AssetCode     == TableGroupAll::Table                                 &&
                      assetDisposalParameters.AssetRelation == assetGroupTrans.AssetId)                             ||
                     (assetDisposalParameters.AssetCode     == TableGroupAll::GroupId                               &&
                      assetDisposalParameters.AssetRelation == AssetTable::find(assetGroupTrans.AssetId).AssetGroup)||
                      assetDisposalParameters.AssetCode     == TableGroupAll::All);
        if (!assetDisposalParameters.RecId)
        {
                throw error(strFmt("@SYS24602","@SYS67345" + '/' + "@SYS67538", "@SYS67500"));
        }

        // Cache the assetGroupId to avoid repeated calls to AssetTable::find.
        assetGroupId = AssetTable::find(assetGroupTrans.AssetId).AssetGroup;

        LedgerDimensionDefaultAccount ledgerDimentionLocal = assetDisposalParameters.LedgerDimension;
        acquisitionDate = AssetBook::find(assetGroupTrans.AssetId, assetGroupTrans.BookId).exchangeRateDate();

        while select PostValue from assetDisposalParameters
            group by PostValue
            where assetDisposalParameters.SoldScrap     == soldScrap                        &&
                assetDisposalParameters.PostingProfile  == assetGroupTrans.PostingProfile   &&
                assetDisposalParameters.BookId          == assetGroupTrans.BookId           &&
                (assetDisposalParameters.ValueType      == assetPostType                    ||
                 assetDisposalParameters.ValueType      == AssetPostType::All)
        {
            l_assetDisposalParameters = AssetDisposalParameters::findPostingAccount(SoldScrap,
                                                                                    assetGroupTrans.PostingProfile,
                                                                                    assetGroupTrans.BookId,
                                                                                    assetDisposalParameters.PostValue,
                                                                                    assetGroupTrans.AssetId,
                                                                                    assetGroupId,
                                                                                    assetPostType);

            assetAmount = this.postValue(l_assetDisposalParameters.PostValue);
            if (assetAmount)
            {
                ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

                ledgerDimensionMerged = this.mergeLedgerDimensionAndDefaultDimension(ledgerDimentionLocal, assetGroupTrans.DefaultDimension);

                exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                             ledgerVoucherObject.parmAccountingDate());

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                                  LedgerPostingType::FixedAssetsDebit,
                                                                                                  ledgerDimensionMerged,
                                                                                                  companyCurrency,
                                                                                                  -assetAmount,
                                                                                                  exchangeRateHelper);

                ledgerVoucherTransObject.parmText(assetGroupInformation.Txt);
                ledgerVoucherTransObject.parmSourceTableId(assetGroupTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(assetGroupTrans.RecId);
                if (acquisitionDate)
                {
                    ledgerVoucherTransObject.parmHistoricalExchangeRateDate(acquisitionDate);
                }
                ledgerVoucher.addTrans(ledgerVoucherTransObject);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(ledgerVoucherObject,
                                                                                                 LedgerPostingType::FixedAssetsDebit,
                                                                                                 ledgerDimensionMerged,
                                                                                                 companyCurrency,
                                                                                                 assetAmount,
                                                                                                 exchangeRateHelper);
                ledgerVoucherTransObject.parmText(assetGroupInformation.Txt);
                ledgerVoucherTransObject.parmSourceTableId(assetGroupTrans.TableId);
                ledgerVoucherTransObject.parmSourceRecId(assetGroupTrans.RecId);
                if (acquisitionDate)
                {
                    ledgerVoucherTransObject.parmHistoricalExchangeRateDate(acquisitionDate);
                }
                ledgerVoucher.addTrans(ledgerVoucherTransObject);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAssetSoldScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>AssetSoldScrap</c>.
    /// </summary>
    /// <returns>
    /// The asset sold scrap value.
    /// </returns>
    protected AssetSoldScrap determineAssetSoldScrap()
    {
        AssetSoldScrap soldScrap;

        if (assetGroupInformation.TransType == AssetTransType::DisposalSale)
        {
            soldScrap = AssetSoldScrap::Sold;
        }
        else
        {
            soldScrap = AssetSoldScrap::Scrap;
        }

        return soldScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find asset value to be posted.
    /// </summary>
    /// <param name="postValue">
    /// An <c>AssetPostValue</c> option denoting the value of the asset that has to be posted.
    /// </param>
    /// <returns>
    /// The amount to be posted.
    /// </returns>
    public AssetAmount postValue(AssetPostValue postValue)
    {
        switch (postValue)
        {
            case AssetPostValue::AcqPriorYears:          return assetSumPriorYears.acquisitionValue();
            case AssetPostValue::AcqAdjPriorYears:       return assetSumPriorYears.acquisitionAdjValue();
            case AssetPostValue::DepPriorYears:          return assetSumPriorYears.depreciationValue();
            case AssetPostValue::DepAdjPriorYears:       return assetSumPriorYears.depreciationAdjValue();
            case AssetPostValue::RevaluePriorYear:       return assetSumPriorYears.revaluationValue();
            case AssetPostValue::WriteUpAdjPriorYear:    return assetSumPriorYears.writeUpAdjValue();
            case AssetPostValue::WriteDownAdjPriorYear:  return assetSumPriorYears.writeDownAdjValue();
            case AssetPostValue::ExtraDepPriorYears:     return assetSumPriorYears.extraDepreciationValue();
            // This years value is the difference between all year and prior years.
            // Can't use the assetSumCalc "This year" because this doesn't include transactions
            // that are in year beyond the disposal year, and these need to be included.
            case AssetPostValue::DepThisYear:            return assetSumAllYears.depreciationValue() - assetSumPriorYears.depreciationValue();
            case AssetPostValue::AcqAdjThisYear:         return assetSumAllYears.acquisitionAdjValue() - assetSumPriorYears.acquisitionAdjValue();
            case AssetPostValue::AcqThisYear:            return assetSumAllYears.acquisitionValue() - assetSumPriorYears.acquisitionValue();
            case AssetPostValue::DepAdjThisYear:         return assetSumAllYears.depreciationAdjValue() - assetSumPriorYears.depreciationAdjValue();
            case AssetPostValue::RevalueThisYear:        return assetSumAllYears.revaluationValue() - assetSumPriorYears.revaluationValue();
            case AssetPostValue::WriteUpAdjThisYear:     return assetSumAllYears.writeUpAdjValue() - assetSumPriorYears.writeUpAdjValue();
            case AssetPostValue::WriteDownAdjThisYear:   return assetSumAllYears.writeDownAdjValue() - assetSumPriorYears.writeDownAdjValue();
            case AssetPostValue::ExtraDepThisYear:       return assetSumAllYears.extraDepreciationValue() - assetSumPriorYears.extraDepreciationValue();

            case AssetPostValue::Acquisition:            return assetSumAllYears.acquisitionValue();
            case AssetPostValue::NBV:                    return assetSumAllYears.netBookValue();
            case AssetPostValue::SaleValue:              return assetGroupInformation.AmountMst;
            case AssetPostValue::CapitalReserve:         return assetSumAllYears.capitalReserveValue();
            case AssetPostValue::CapitalReserveTransfer: return assetSumAllYears.capitalReserveTransferValue();
        }
        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>