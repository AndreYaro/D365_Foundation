<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationDataRetrievalActivityOnDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationDataRetrievalActivityOnDocument</c> class is for data retrieval.
/// </summary>
public class TaxIntegrationDataRetrievalActivityOnDocument
    extends TaxIntegrationAbstractActivityOnDocument
{
    public const str LoggerName = 'Tax Integration - Data Retrieval';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationDataRetrievalActivityOnDocument</c>.
    /// </summary>
    private final void new()
    {
        super(LoggerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationDataRetrievalActivityOnDocument</c>.
    /// </summary>
    /// <returns>The new <c>TaxIntegrationDataRetrievalActivityOnDocument</c>.</returns>
    public final static TaxIntegrationDataRetrievalActivityOnDocument construct()
    {
        return new TaxIntegrationDataRetrievalActivityOnDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>actInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document by retrieving the data, if the document is OK.
    /// </summary>
    /// <param name = "_document">The document.</param>
    [Replaceable]
    protected void actInternal(TaxIntegrationDocumentObject _document)
    {
        TaxIntegrationDataRetrievalActivityOnDocument::actStatic(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actStatic</Name>
				<Source><![CDATA[
    /// <summary>
    /// Conducts the activity on the document by retrieving the data.
    /// </summary>
    /// <param name = "_document">The document.</param>
    protected static void actStatic(TaxIntegrationDocumentObject _document)
    {
        Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());
        _document.setAccountingCurrencyCode(ledger.AccountingCurrency);
        _document.setLedgerRecId(ledger.RecId);

        _document.setAmountIncludingTax(new Map(Types::Container, Types::Real));
        _document.setAmountExcludingTax(new Map(Types::Container, Types::Real));

        TaxIntegrationAbstractDataRetrievalTemplate dataRetrievalInstance = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(
            classStr(TaxIntegrationAbstractDataRetrievalTemplate),
            new TaxIntegrationDataRetrievalAttribute(tableId2Name(_document.getLocalTableId())),
            new SysExtensionGenericInstantiation(_document));

        if (!dataRetrievalInstance)
        {
            _document.setException(new System.NotSupportedException(
                strFmt("@TaxIntegrationException:TableNotSupported", _document.getLocalTableId())));
            return;
        }

        dataRetrievalInstance.execute();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>