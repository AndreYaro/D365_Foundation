<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetRetirementResultAggregatorPosted_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Aggregator for posted amount.
/// </summary>
class AssetRetirementResultAggregatorPosted_JP extends AssetRetirementResultAggregator_JP
{
    TransDate firstYearBegin;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionSumResult</Name>
				<Source><![CDATA[
        protected AssetRetirementSumCalcResultTmp_JP getTransactionSumResult(Array _calculationResultArray, int _idx)
    {
        AssetRetirementSumCalcResultTmp_JP  calcResult;
        AssetRetirementSumCalculation_JP    sumCalculation;
        AssetDocumentPresentValueResult_JP  resultLocal;

        if (_idx > 1)
        {
            sumCalculation = AssetRetirementSumCalculation_JP::construct();
            sumCalculation.parmDocumentEntryRecId(documentEntryRecId);
            if (_idx == 2)
            {
                sumCalculation.parmFromDate(firstYearBegin);
            }
            else
            {
                resultLocal = _calculationResultArray.value(_idx - 1);
                sumCalculation.parmFromDate(resultLocal.parmTransactionDate() + 1);
            }

            resultLocal = _calculationResultArray.value(_idx);
            sumCalculation.parmToDate(resultLocal.parmTransactionDate());

            calcResult = sumCalculation.calculate();
        }

        return calcResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTypeIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the type is included.
    /// </summary>
    /// <param name="_type">
    /// Transaction type.
    /// </param>
    /// <returns>
    /// True if the type is included; otherwise, false.
    /// </returns>
    protected boolean isTypeIncluded(AssetRetirementObligationResultType_JP _type)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBegining</Name>
				<Source><![CDATA[
        protected void processBegining(Array _calculationResultArray)
    {
        AssetDepBookMap_JP                      assetDepBookMap;
        AssetDocumentPresentValueResult_JP      resultLocal;
        AssetTableInterval                      assetTableInterval;
        AssetRetirementSumCalculation_JP        sumCalculation;

        if (_calculationResultArray.lastIndex() >= 1)
        {
            resultLocal = _calculationResultArray.value(1);
            assetDepBookMap = AssetDepBookMap_JP::findByAssetIdBookId(assetDocumentEntry.AssetId, assetDocumentEntry.BookId);
            assetTableInterval = assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(resultLocal.parmTransactionDate());
            firstYearBegin = assetTableInterval.findFirstDayOfYear(resultLocal.parmTransactionDate());

            resultPeriod.clear();
            resultPeriod.Index = 1;
            resultPeriod.insert();

            sumCalculation = AssetRetirementSumCalculation_JP::construct();
            sumCalculation.parmDocumentEntryRecId(documentEntryRecId);
            sumCalculation.parmFromDate(dateNull());
            sumCalculation.parmToDate(firstYearBegin - 1);
            this.insertNewResult(sumCalculation.calculate(), 1);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>