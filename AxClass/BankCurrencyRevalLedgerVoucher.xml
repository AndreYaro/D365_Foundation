<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalLedgerVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalLedgerVoucher</c> handles state management of <c>LedgerVoucher</c> class instances for Bank - foreign currency revaluations.
/// </summary>
internal final class BankCurrencyRevalLedgerVoucher
{
    private LedgerVoucher ledgerVoucher;
    private NumberSeq numberSeq;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankCurrencyRevalLedgerVoucher construct()
    {
        return new BankCurrencyRevalLedgerVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNewNumberSeq</Name>
				<Source><![CDATA[
    private void initializeNewNumberSeq()
    {
        numberSeq = NumberSeq::newGetVoucher(BankParameters::numRefBankCurrencyRevalNum(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNewLedgerVoucher</Name>
				<Source><![CDATA[
    private void initializeNewLedgerVoucher()
    {
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Bank, numberSeq.parmVoucherSequenceCode());
        ledgerVoucher.parmCheckBlockedDimensions(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new <c>Voucher</c> to be posted.
    /// </summary>
    /// <param name = "_transDate">The transaction date to be used for the voucher.</param>
    internal void addVoucher(TransDate _transDate)
    {
        this.initializeNewNumberSeq();

        this.initializeNewLedgerVoucher();

        ledgerVoucher.addVoucher(this.getNewLedgerVoucherObject(numberSeq.voucher(), _transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubledgerTransactionText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction text to be used for the bank side of the currency revaluation.
    /// </summary>
    /// <returns>The transaction text to be used for the bank side of the currency revaluation.</returns>
    internal TransactionTextLarge getSubledgerTransactionText()
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::BankCurrencyRevalBank);

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerVoucherObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current <c>LedgerVoucherObject</c> class instance for the given transaction date.
    /// </summary>
    /// <param name = "_transDate">The transaction date for the voucher.</param>
    /// <returns>The current <c>LedgerVoucherObject</c> class instance for the given transaction date.</returns>
    internal LedgerVoucherObject getLedgerVoucherObject(TransDate _transDate)
    {
        LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(ledgerVoucher.lastVoucher(), _transDate);

        if (ledgerVoucherObject == null)
        {
            ledgerVoucherObject = this.getNewLedgerVoucherObject(ledgerVoucher.lastVoucher(), _transDate);

            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }

        return ledgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLedgerVoucherObject</Name>
				<Source><![CDATA[
    private LedgerVoucherObject getNewLedgerVoucherObject(Voucher _voucher, TransDate _transDate)
    {
        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(
            _voucher,
            _transDate,
            SysModule::Bank,
            LedgerTransType::ExchAdjustment);

        ledgerVoucherObject.lastTransTxt(this.getLedgerTransactionTxt());

        return ledgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionTxt</Name>
				<Source><![CDATA[
    private TransTxt getLedgerTransactionTxt()
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::BankCurrencyRevalLedger);

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last <c>Voucher</c> value for the current ledger voucher.
    /// </summary>
    /// <returns>The last <c>Voucher</c> value for the current ledger voucher.</returns>
    internal Voucher getLastVoucher()
    {
        return ledgerVoucher.lastVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the given <c>LedgerVoucherTransObject</c> class instance to the current <c>LedgerVoucher</c> class instance.
    /// </summary>
    /// <param name = "_ledgerVoucherTransObject">
    /// The <c>LedgerVoucherTransObject</c> class instance to be added to the current <c>LedgerVoucher</c> class instance.
    /// </param>
    /// <remarks>
    /// Regardless of the setting on the <c>LedgerVoucherTransObject</c> class instance provided, the parameter for skipping dimension validation is set to true
    /// in this method. This is done in order to ensure that the transactions properly post even if the account structure has been changed over time.
    /// </remarks>
    internal void addLedgerVoucherTransObject(LedgerVoucherTransObject _ledgerVoucherTransObject)
    {
        // The dimensions associated with this account being revalued may no longer be valid
        // according to current account rules, so skip dimension validation. For this process,
        // posting is more important than validating dimensions.
        _ledgerVoucherTransObject.parmSkipDimensionValidation(true);

        ledgerVoucher.addTrans(_ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the journal posting process and creates a log entry in the <c>TransactionLog</c> table.
    /// </summary>
    internal void end()
    {
        if (ledgerVoucher != null && ledgerVoucher.parmLedgerVoucherList() != null && ledgerVoucher.parmLedgerVoucherList().elements() > 0)
        {
            ledgerVoucher.end();

            TransactionLog::create(TransactionLogType::BankCurrencyReval, ledgerVoucher.lastVoucher());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>