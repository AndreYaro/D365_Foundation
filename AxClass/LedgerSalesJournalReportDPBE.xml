<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSalesJournalReportDPBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report data provider class for <c>LedgerSalesJournalReportBE</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the <c>LedgerSalesJournalReportBE</c> SSRS report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(LedgerPurchaseJournalReportBE)),
    SRSReportParameterAttribute(classstr(LedgerSalesJournalReportContractBE))
]
class LedgerSalesJournalReportDPBE extends SRSReportDataProviderPreprocessTempDB
{
    LegFinJourRepTmpLegTransBE          legFinJourRepTmpLegTransBE;
    GeneralJournalEntry                 generalJournalEntry;
    GeneralJournalAccountEntry          generalJournalAccountEntry;
    MainAccountLedgerDimensionView      mainAccountLedgerDimensionView;

    TmpAccountTotalsBE                  tmpAccountTotalsBE;
    TmpTaxJournalReport_BE              tmpTaxJournalReport_BE;
    TmpTaxTransTotalsBE                 tmpTaxTransTotals_BE;
    TmpTaxTransTotalsBE                 tmpTaxTransTotals_BE2;
    TmpTaxPurchLedger                   tmpTaxPurchLedger;
    TmpTaxSalesLedger                   tmpTaxSalesLedger;
    TmpTaxSalesLedger                   tmpTaxSumSalesLedger;
    TmpTaxPurchLedger                   tmpTaxSumPurchLedger;
    PageNo                              pageNumStart;
    boolean                             firstVoucherLine;
    boolean                             newPageNum;
    NoYes                               finalReporting;
    NoYes                               compression;
    LedgerPostingJournalId              ledgerPostingJournalId;
    FromDate                            fromDate;
    FromDate                            periodFromDate;
    FromDate                            periodOpeningDate;
    ToDate                              toDate;
    ToDate                              periodToDate;
    ToDate                              periodClosingDate;
    real                                totDeb;
    real                                totCred;
    real                                totInvBase;
    real                                totInvGds;
    real                                totInvCharge;
    real                                totCnBase;
    real                                totCnGds;
    real                                totCnCharge;
    str                                 stramountcur;
    int64                               voucherlines;
    boolean                             isCreditNote;
    Voucher                             prevVoucher;
    TransDate                           prevTransdate;
    VendTrans                           vendTrans;
    CustTrans                           custTrans;

    #taxReportingCodesBE
    #Define.maxLinesOnPage(52)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxBoxAmountSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>TmpTaxSalesLedger</c> record based on the <c>TaxReportField</c> value.
    /// </summary>
    /// <param name="_tmpTaxSalesLedger">
    ///    A <c>TmpTaxSalesLedger</c> table buffer.
    /// </param>
    /// <param name="_taxReportField">
    ///    A <c>TaxReportField</c> field value.
    /// </param>
    /// <param name="_amountMST">
    ///    An <c>AmountMST</c> field value.
    /// </param>
    /// <returns>
    ///    A <c>TmpTaxSalesLedger</c> record.
    /// </returns>
    protected TmpTaxSalesLedger addTaxBoxAmountSales(TmpTaxSalesLedger _tmpTaxSalesLedger,
                                                     TaxReportField    _taxReportField,
                                                     AmountMST         _amountMST)
    {
        TmpTaxSalesLedger taxSalesLedger  = _tmpTaxSalesLedger;

        switch (_taxReportField)
        {
            case #field_00 : taxSalesLedger.TaxBaseAmountMSTBox00     -= _amountMST;
                             break;
            case #field_01 : taxSalesLedger.TaxBaseAmountMSTBox01     -= _amountMST;
                             break;
            case #field_02 : taxSalesLedger.TaxBaseAmountMSTBox02     -= _amountMST;
                             break;
            case #field_03 : taxSalesLedger.TaxBaseAmountMSTBox03     -= _amountMST;
                             break;
            case #field_44 : taxSalesLedger.TaxExemptAmountMSTBox44   -= _amountMST;
                             break;
            case #field_45 : taxSalesLedger.TaxBaseAmountMSTBox45     -= _amountMST;
                             break;
            case #field_46 : taxSalesLedger.TaxExemptAmountMSTBox46   -= _amountMST;
                             break;
            case #field_47 : taxSalesLedger.TaxExemptAmountMSTBox47   -= _amountMST;
                             break;
            case #field_48 : taxSalesLedger.CreditNoteAmountMSTBox48  += _amountMST;
                             break;
            case #field_49 : taxSalesLedger.CreditNoteAmountMSTBox49  += _amountMST;
                             break;
            case #field_54 : taxSalesLedger.TaxAmountMSTBox54         -= _amountMST;
                             break;
            case #field_64 : taxSalesLedger.TaxAmountMSTBox64         += _amountMST;
                             break;
        }
        return taxSalesLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDebCredTotals</Name>
				<Source><![CDATA[
    void calcDebCredTotals()
    {
        select tmpAccountTotalsBE
            where tmpAccountTotalsBE.AccountNum  == mainAccountLedgerDimensionView.MainAccount;

        if (generalJournalAccountEntry.AccountingCurrencyAmount > 0)
        {
            totDeb   += generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            totCred  += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
        }
        if (tmpAccountTotalsBE)
        {
            if (generalJournalAccountEntry.AccountingCurrencyAmount >= 0)
            {
                tmpAccountTotalsBE.AmountMSTDebit   += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                tmpAccountTotalsBE.AmountMSTCredit  += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            tmpAccountTotalsBE.update();
        }
        else
        {
            tmpAccountTotalsBE.AccountNum   = mainAccountLedgerDimensionView.MainAccount;
            tmpAccountTotalsBE.AccountName  = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);

            if (generalJournalAccountEntry.AccountingCurrencyAmount >= 0)
            {
                tmpAccountTotalsBE.AmountMSTDebit   += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                tmpAccountTotalsBE.AmountMSTCredit  += abs(generalJournalAccountEntry.AccountingCurrencyAmount);
            }
            tmpAccountTotalsBE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total tax amounts and inserts into the <c>TmpTaxTransTotals_BE</c> table.
    /// </summary>
    void calcTaxTotals()
    {
        select tmpTaxTransTotals_BE
            where tmpTaxTransTotals_BE.TaxCode  == tmpTaxJournalReport_BE.TaxCode;

        if (isCreditNote)
        {
            if (tmpTaxTransTotals_BE)
            {
                tmpTaxTransTotals_BE.TaxCnAmount    += -(tmpTaxJournalReport_BE.TaxAmountGoods+ tmpTaxJournalReport_BE.TaxAmountInvest+tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxCnBase      += -(tmpTaxJournalReport_BE.TaxBaseAMount);
                tmpTaxTransTotals_BE.TaxCnAmCharge  += -(tmpTaxJournalReport_BE.TaxAmountCharge);
                tmpTaxTransTotals_BE.update();
            }
            else
            {
                tmpTaxTransTotals_BE.TaxCode        = tmpTaxJournalReport_BE.TaxCode;
                tmpTaxTransTotals_BE.TaxName        = TaxTable::find(tmpTaxJournalReport_BE.TaxCode).TaxName;
                tmpTaxTransTotals_BE.TaxCnAmount    += -(tmpTaxJournalReport_BE.TaxAmountGoods+ tmpTaxJournalReport_BE.TaxAmountInvest+tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxCnBase      += -(tmpTaxJournalReport_BE.TaxBaseAMount);
                tmpTaxTransTotals_BE.TaxCnAmCharge  += -(tmpTaxJournalReport_BE.TaxAmountCharge);
                tmpTaxTransTotals_BE.insert();
            }
        }
        else
        {
            if (tmpTaxTransTotals_BE)
            {
                tmpTaxTransTotals_BE.TaxInvAmount    += (tmpTaxJournalReport_BE.TaxAmountGoods + tmpTaxJournalReport_BE.TaxAmountInvest + tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxInvBase      += tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxTransTotals_BE.TaxInvAmCharge  += tmpTaxJournalReport_BE.TaxAmountCharge;
                tmpTaxTransTotals_BE.update();
            }
            else
            {
                tmpTaxTransTotals_BE.TaxCode         = tmpTaxJournalReport_BE.TaxCode;
                tmpTaxTransTotals_BE.TaxName         = TaxTable::find(tmpTaxJournalReport_BE.TaxCode).TaxName;
                tmpTaxTransTotals_BE.TaxInvAmount    += (tmpTaxJournalReport_BE.TaxAmountGoods + tmpTaxJournalReport_BE.TaxAmountInvest + tmpTaxJournalReport_BE.TaxAmountServices);
                tmpTaxTransTotals_BE.TaxInvBase      += tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxTransTotals_BE.TaxInvAmCharge  += tmpTaxJournalReport_BE.TaxAmountCharge;
                tmpTaxTransTotals_BE.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeJournalReport</Name>
				<Source><![CDATA[
    void closeJournalReport()
    {
        this.findTaxTransactions();
        this.printTaxInfoPerVoucher(); //print splitted tax info

        this.taxBoxCalcSales();

        this.printTaxBoxInfo(); //print taxbox info

        if (this.finalReporting())
        {
            this.updateJournalPeriodFinalPrint();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>compression</Name>
				<Source><![CDATA[
    private Description compression()
    {
        return compression ? "@SYS79685" : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>custName</Name>
				<Source><![CDATA[
    private Name custName()
    {
        return CustTrans::findVoucherDate(prevVoucher, prevTransdate).custTableName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalReporting</Name>
				<Source><![CDATA[
    private Description finalReporting()
    {
        return finalReporting ? "@SYS79662" : "@SYS79663";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerPostingJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records of <c>GeneralJournalEntry</c> table that is based on <c>AccountingDate</c>
    ///    and <c>ReferenceNumber</c> values.
    /// </summary>
    /// <param name="_accountingDate">
    ///    The <c>AccountingDate</c> field value.
    /// </param>
    /// <param name="_voucher">
    ///    The <c>Voucher</c> field value.
    /// </param>
    /// <returns>
    ///    A <c>GeneralJournalEntry</c> record.
    /// </returns>
    public LedgerPostingJournalId findLedgerPostingJournalId(TransDate  _accountingDate,
                                                             Voucher    _voucher)
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntryLoc;
        GeneralJournalEntry generalJournalEntryLoc;

        select firstonly LedgerPostingJournal from generalJournalEntryLoc
            exists join subledgerVoucherGeneralJournalEntryLoc
                where generalJournalEntryLoc.RecId == subledgerVoucherGeneralJournalEntryLoc.GeneralJournalEntry
                    && subledgerVoucherGeneralJournalEntryLoc.Voucher == _voucher
                    && subledgerVoucherGeneralJournalEntryLoc.AccountingDate == _accountingDate
                    && subledgerVoucherGeneralJournalEntryLoc.VoucherDataAreaId == curExt();

        return generalJournalEntryLoc.LedgerPostingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves records of the <c>TaxTrans</c> table and inserts into the temporary table that is based
    ///    on the <c>LedgerPostingJournal</c> and <c>AccountingDate</c> values.
    /// </summary>
    private void findTaxTransactions()
    {
        TaxTrans                            taxTrans;
        GeneralJournalEntry                 generalJournalEntryBuffer;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntryBuffer;

        while select Voucher, AccountingDate from subledgerVoucherGeneralJournalEntryBuffer
            group by Voucher, AccountingDate
            where subledgerVoucherGeneralJournalEntryBuffer.AccountingDate >= periodFromDate
               && subledgerVoucherGeneralJournalEntryBuffer.AccountingDate <= periodToDate
               && subledgerVoucherGeneralJournalEntryBuffer.VoucherDataAreaId == curext()
            exists join generalJournalEntryBuffer
                where generalJournalEntryBuffer.RecId == subledgerVoucherGeneralJournalEntryBuffer.GeneralJournalEntry &&
                      generalJournalEntryBuffer.LedgerPostingJournal == ledgerPostingJournalId
        {
            if (! compression)
            {
                while select taxTrans
                    where taxTrans.Voucher    == subledgerVoucherGeneralJournalEntryBuffer.Voucher
                       && taxTrans.TransDate  == subledgerVoucherGeneralJournalEntryBuffer.AccountingDate
                {
                    this.insertTmpTaxJournalReport_BE(taxTrans);
                }
            }
            else
            {
                while select Voucher, TransDate, TaxCode, TaxItemGroup, sum (TaxBaseAmount), sum(TaxAmount), sum(TaxInCostPriceMST)
                    from taxTrans
                    index hint VoucherDateIdx
                    group by Voucher, TransDate, TaxCode, TaxItemGroup
                    where taxTrans.Voucher    == subledgerVoucherGeneralJournalEntryBuffer.Voucher
                       && taxTrans.TransDate  == subledgerVoucherGeneralJournalEntryBuffer.AccountingDate
                {
                    this.insertTmpTaxJournalReport_BE(taxTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records of the <c>GeneralJournalEntry</c> table by using the <c>AccountingDate</c>
    ///    and <c>ReferenceNumber</c> values.
    /// </summary>
    /// <param name="_voucher">
    ///    A <c>ReferenceNumber</c> field value.
    /// </param>
    /// <param name="_transDate">
    ///    An <c>AccountingDate</c> field value.
    /// </param>
    /// <returns>
    ///    A <c>GeneralJournalEntry</c> table record.
    /// </returns>
    public GeneralJournalEntry findVoucherDate(Voucher    _voucher,
                                               TransDate  _transDate)
    {
        SubledgerVoucherGeneralJournalEntry voucherLink;

        generalJournalEntry.selectLocked(false);

        select RecId from voucherLink
            where voucherLink.Voucher  == _voucher &&
                voucherLink.AccountingDate   == _transDate &&
                voucherLink.VoucherDataAreaId == curext()
            join generalJournalEntry
                where generalJournalEntry.RecId == voucherLink.GeneralJournalEntry;

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegFinJourRepTmpLegTransBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>LegFinJourRepTmpLegTransBE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>LegFinJourRepTmpLegTransBE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(LegFinJourRepTmpLegTransBE))
    ]
    public LegFinJourRepTmpLegTransBE getLegFinJourRepTmpLegTransBE()
    {
        select legFinJourRepTmpLegTransBE;
        return legFinJourRepTmpLegTransBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpAccountTotalsBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpAccountTotalsBE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpAccountTotalsBE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpAccountTotalsBE))
    ]
    public TmpAccountTotalsBE getTmpAccountTotalsBE()
    {
        select tmpAccountTotalsBE;
        return tmpAccountTotalsBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxJournalReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxJournalReport_BE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxJournalReport_BE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpTaxJournalReport_BE))
    ]
    public TmpTaxJournalReport_BE getTmpTaxJournalReport_BE()
    {
        select tmpTaxJournalReport_BE;
        return tmpTaxJournalReport_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxSalesLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxSalesLedger</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxSalesLedger</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpTaxSalesLedger))
    ]
    public TmpTaxSalesLedger getTmpTaxSalesLedger()
    {
        select tmpTaxSalesLedger;
        return tmpTaxSalesLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxTransTotalsBE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>TmpTaxTransTotalsBE</c> table.
    /// </summary>
    /// <returns>
    ///    A populated instance of the <c>TmpTaxTransTotalsBE</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TmpTaxTransTotalsBE))
    ]
    public TmpTaxTransTotalsBE getTmpTaxTransTotalsBE()
    {
        select tmpTaxTransTotals_BE where ((tmpTaxTransTotals_BE.TaxCode  !='') || (tmpTaxTransTotals_BE.TaxInvAmount  !=0) ||(tmpTaxTransTotals_BE.TaxCnAmount  !=0));
        return tmpTaxTransTotals_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxSalesLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TmpTaxSalesLedger</c> table if no record exists; otherwise, updates the
    ///    table.
    /// </summary>
    /// <param name="_tmpTaxSalesLedger">
    ///    A <c>TmpTaxSalesLedger</c> table buffer.
    /// </param>
    protected void insertInTmpTaxSalesLedger(TmpTaxSalesLedger _tmpTaxSalesLedger)
    {
        select tmpTaxSalesLedger
        where tmpTaxSalesLedger.LedgerPostingJournalId  == _tmpTaxSalesLedger.LedgerPostingJournalId &&
              tmpTaxSalesLedger.Voucher                 == _tmpTaxSalesLedger.Voucher                &&
              tmpTaxSalesLedger.TransDate               == _tmpTaxSalesLedger.TransDate;
        if (tmpTaxSalesLedger)
        {
            tmpTaxSalesLedger.TaxBaseAmountMSTBox00     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox00;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox01     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox01;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox02     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox02;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox03     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox03;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox44   += _tmpTaxSalesLedger.TaxExemptAmountMSTBox44;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox45     += _tmpTaxSalesLedger.TaxBaseAmountMSTBox45;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox46   += _tmpTaxSalesLedger.TaxExemptAmountMSTBox46;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox47   += _tmpTaxSalesLedger.TaxExemptAmountMSTBox47;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox48  += _tmpTaxSalesLedger.CreditNoteAmountMSTBox48;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox49  += _tmpTaxSalesLedger.CreditNoteAmountMSTBox49;
            tmpTaxSalesLedger.TaxAmountMSTBox54         += _tmpTaxSalesLedger.TaxAmountMSTBox54;
            tmpTaxSalesLedger.TaxAmountMSTBox64         += _tmpTaxSalesLedger.TaxAmountMSTBox64;
            tmpTaxSalesLedger.AmountMSTInclTax          += _tmpTaxSalesLedger.AmountMSTInclTax;

            tmpTaxSalesLedger.update();
        }
        else
        {
            tmpTaxSalesLedger.LedgerPostingJournalId    = _tmpTaxSalesLedger.LedgerPostingJournalId;
            tmpTaxSalesLedger.Voucher                   = _tmpTaxSalesLedger.Voucher;
            tmpTaxSalesLedger.TransDate                 = _tmpTaxSalesLedger.TransDate;
            tmpTaxSalesLedger.CustAccount               = _tmpTaxSalesLedger.CustAccount;
            tmpTaxSalesLedger.AmountMSTInclTax          = _tmpTaxSalesLedger.AmountMSTInclTax;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox00     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox00;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox01     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox01;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox02     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox02;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox03     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox03;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox44   = _tmpTaxSalesLedger.TaxExemptAmountMSTBox44;
            tmpTaxSalesLedger.TaxBaseAmountMSTBox45     = _tmpTaxSalesLedger.TaxBaseAmountMSTBox45;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox46   = _tmpTaxSalesLedger.TaxExemptAmountMSTBox46;
            tmpTaxSalesLedger.TaxExemptAmountMSTBox47   = _tmpTaxSalesLedger.TaxExemptAmountMSTBox47;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox48  = _tmpTaxSalesLedger.CreditNoteAmountMSTBox48;
            tmpTaxSalesLedger.CreditNoteAmountMSTBox49  = _tmpTaxSalesLedger.CreditNoteAmountMSTBox49;
            tmpTaxSalesLedger.TaxAmountMSTBox54         = _tmpTaxSalesLedger.TaxAmountMSTBox54;
            tmpTaxSalesLedger.TaxAmountMSTBox64         = _tmpTaxSalesLedger.TaxAmountMSTBox64;
            tmpTaxSalesLedger.InvoiceId                 = _tmpTaxSalesLedger.InvoiceId;

            tmpTaxSalesLedger.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxJournalReport_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>TmpTaxJournalReport_BE</c> table if a <c>Voucher</c> object exists in the
    ///    <c>TaxTrans</c> table.
    /// </summary>
    /// <param name="_taxTrans">
    ///    A <c>TaxTrans</c> table buffer.
    /// </param>
    private void insertTmpTaxJournalReport_BE(TaxTrans _taxTrans)
    {
        if (_taxTrans.Voucher)
        {
            tmpTaxJournalReport_BE.Voucher        = _taxTrans.Voucher;
            tmpTaxJournalReport_BE.Transdate      = _taxTrans.TransDate;
            tmpTaxJournalReport_BE.TaxBaseAMount  = -_taxTrans.TaxBaseAmount;
            tmpTaxJournalReport_BE.TaxAmountCharge = _taxTrans.TaxInCostPriceMST;
            tmpTaxJournalReport_BE.TaxCode        = _taxTrans.TaxCode;
            switch (TaxItemGroupHeading::find(_taxTrans.TaxItemGroup).euSalesListType)
            {
                case EUSalesListType::Item:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = -_taxTrans.TaxAmount;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = 0;
                    tmpTaxJournalReport_BE.TaxAmountServices      = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = -_taxTrans.TaxBaseAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = 0;
                    break;
                case EUSalesListType::Service:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = 0;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = 0;
                    tmpTaxJournalReport_BE.TaxAmountServices      = -_taxTrans.TaxAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = -_taxTrans.TaxBaseAmount;
                    break;
                case EUSalesListType::Investment:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = 0;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = -_taxTrans.TaxAmount;
                    tmpTaxJournalReport_BE.TaxAmountServices      = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = -_taxTrans.TaxBaseAmount;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = 0;
                    break;
                default:
                    tmpTaxJournalReport_BE.TaxAmountGoods         = 0;
                    tmpTaxJournalReport_BE.TaxAmountInvest        = 0;
                    tmpTaxJournalReport_BE.TaxAmountServices      = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountGoods     = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountInvest    = 0;
                    tmpTaxJournalReport_BE.TaxBaseAmountServices  = 0;

                break;
            }
            tmpTaxJournalReport_BE.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceNo</Name>
				<Source><![CDATA[
    private  InvoiceId invoiceNo()
    {
        return CustTrans::findVoucherDate(prevVoucher, prevTransdate).Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPeriodFinalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>LedgerJournalPeriodFinalPrintBE</c> table.
    /// </summary>
    void journalPeriodFinalPrint()
    {
        LedgerJournalPeriodFinalPrintBE jpFinalPrintBE      = null;
        LedgerJournalPeriodFinalPrintBE jpFinalPrintBEPrev  = null;
        LedgerJournalTableTypeBE        lpJournal           = null;

        if (ledgerPostingJournalId)
        {
            jpFinalPrintBEPrev  = LedgerJournalPeriodFinalPrintBE::findPrev(ledgerPostingJournalId,periodFromDate-1,false);

            if ((jpFinalPrintBEPrev) && (!newPageNum))
            {
                jpFinalPrintBE.NumberLastPage      = jpFinalPrintBEPrev.NumberLastPage;
            }
            jpFinalPrintBE.LedgerPostingJournalId  = ledgerPostingJournalId;
            jpFinalPrintBE.Name                    = LedgerPostingJournal::find(ledgerPostingJournalId).Name;
            jpFinalPrintBE.PeriodStart             = periodFromDate;
            jpFinalPrintBE.PeriodEnd               = periodToDate;
            jpFinalPrintBE.Compressed              = compression;
            jpFinalPrintBE.insert();
        }
        else
        {
            while select LedgerPostingJournalId from lpJournal
                where lpJournal.JournalTypeBE  == LedgerJournalTypeBE::Purchase
            {
                jpFinalPrintBEPrev  = LedgerJournalPeriodFinalPrintBE::findPrev(lpJournal.LedgerPostingJournalId,periodFromDate-1,false);

                if ((jpFinalPrintBEPrev) && (!newPageNum))
                {
                    jpFinalPrintBE.NumberLastPage      = jpFinalPrintBEPrev.NumberLastPage;
                }
                jpFinalPrintBE.LedgerPostingJournalId  = lpJournal.LedgerPostingJournalId;
                jpFinalPrintBE.Name                    = LedgerPostingJournal::find(lpJournal.LedgerPostingJournalId).Name;
                jpFinalPrintBE.PeriodStart             = periodFromDate;
                jpFinalPrintBE.PeriodEnd               = periodToDate;
                jpFinalPrintBE.Compressed              = compression;
                jpFinalPrintBE.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxBoxInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the records of the <c>TmpTaxSalesLedger</c> table.
    /// </summary>
    private void printTaxBoxInfo()
    {
        tmpTaxSumSalesLedger  = tmpTaxSalesLedger;
        select sum(TaxBaseAmountMSTBox00),      sum(TaxBaseAmountMSTBox01),
               sum(TaxBaseAmountMSTBox02),      sum(TaxBaseAmountMSTBox03),
               sum(TaxBaseAmountMSTBox45),      sum(TaxExemptAmountMSTBox46),
               sum(TaxExemptAmountMSTBox47),    sum(CreditNoteAmountMSTBox48),
               sum(CreditNoteAmountMSTBox49),   sum(TaxAmountMSTBox54),
               sum(TaxAmountMSTBox64),          sum(TaxExemptAmountMSTBox44)
            from tmpTaxSalesLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTaxInfoPerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>Amount</c> totals.
    /// </summary>
    void printTaxInfoPerVoucher()
    {
        Counter  ctr        = 0;
        TaxTrans taxTrans   = null;
        boolean  firstLine  = true;
        int taxTotJourPage  = 1;

        prevVoucher         = '';
        while select tmpTaxJournalReport_BE
            order by  Voucher, Transdate, TaxCode
        {
            if (firstLine)
            {
                firstLine    = false;
                prevVoucher  = tmpTaxJournalReport_BE.Voucher;
            }
            else
            {
                if (tmpTaxJournalReport_BE.Voucher != prevVoucher && ctr != 0)
                {
                    prevVoucher  = tmpTaxJournalReport_BE.Voucher;
                }
            }

            if (#maxLinesOnPage - ctr <= 0)
            {
                taxTotJourPage++;
                ctr = 0;
            }
            select sum(TaxBaseAmount) from taxTrans
                index hint VoucherDateIdx
                group by Voucher, TransDate,TaxDirection
                where taxTrans.Voucher    == tmpTaxJournalReport_BE.Voucher
                   && taxTrans.TransDate  == tmpTaxJournalReport_BE.Transdate;

            isCreditNote = (taxTrans.TaxBaseAmount > 0);
            if (isCreditNote)
            {
                tmpTaxJournalReport_BE.IsCN                     = NoYes::Yes;
                tmpTaxJournalReport_BE.TaxBaseAmountCN          = tmpTaxJournalReport_BE.TaxBaseAMount;
                tmpTaxJournalReport_BE.TaxAmountGoodsCN         = tmpTaxJournalReport_BE.TaxAmountGoods;
                tmpTaxJournalReport_BE.TaxAmountInvestCN        = tmpTaxJournalReport_BE.TaxAmountInvest;
                tmpTaxJournalReport_BE.TaxAmountServicesCN      = tmpTaxJournalReport_BE.TaxAmountServices;
                tmpTaxJournalReport_BE.TaxBaseAmountServicesCN  = tmpTaxJournalReport_BE.TaxBaseAmountServices;
                tmpTaxJournalReport_BE.TaxBaseAmountInvestCN    = tmpTaxJournalReport_BE.TaxBaseAmountInvest;
                tmpTaxJournalReport_BE.TaxBaseAmountGoodsCN     = tmpTaxJournalReport_BE.TaxBaseAmountGoods;
            }
            else
            {
                tmpTaxJournalReport_BE.IsCN  = NoYes::No;
            }
            this.calcTaxTotals();

            tmpTaxJournalReport_BE.PageNum  = taxTotJourPage;
            tmpTaxJournalReport_BE.update();
            ctr++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by  at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryBuildRange  qbrPostingJournal = null;
        QueryBuildRange  qbrFromToDate     = null;
        Counter          ctr               = 0;
        Counter          lineCnt           = 0;
        boolean          printInvoice      = false;
        int              x                 = 0;
        Query            query;
        QueryRun         queryRun;
        recId            calendarRecId     = CompanyInfoHelper::fiscalCalendarRecId();
        int              pageNum           = 1;
        str              showCN            = '';
        SubledgerVoucherGeneralJournalEntry voucherLink;

        LedgerSalesJournalReportContractBE contract  = this.parmDataContract() as LedgerSalesJournalReportContractBE;

        query  = this.parmQuery();

        strAmountCur  = '';

        compression             = contract.parmCompression();
        finalReporting          = contract.parmFinalReporting();
        fromDate                = contract.parmFromDate();
        toDate                  = contract.parmToDate();
        ledgerPostingJournalId  = contract.parmSalesLedgerPostingJournalId();

        periodFromDate          = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId, fromDate);
        periodToDate            = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,toDate);
        periodClosingDate       = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId,periodFromDate);
        periodOpeningDate       = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId,periodFromDate);
        pageNum                 = this.setPageNumStart();

        tmpAccountTotalsBE.skipTTSCheck(true);
        tmpTaxJournalReport_BE.skipTTSCheck(true);
        tmpTaxTransTotals_BE.skipTTSCheck(true);
        tmpTaxSalesLedger.skipTTSCheck(true);

        if (ledgerPostingJournalId)
        {
            qbrPostingJournal  = query.dataSourceTable(tablenum(GeneralJournalEntry)).addRange(fieldnum(GeneralJournalEntry, LedgerPostingJournal));
            qbrPostingJournal.value(ledgerPostingJournalId);
        }

        query.dataSourceTable(tablenum(GeneralJournalEntry)).addRange(fieldnum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(periodFromDate, periodToDate));
        query.dataSourceTable(tableNum(GeneralJournalEntry)).addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        queryRun  = new QueryRun(query);

        if (finalReporting)
        {
            this.journalPeriodFinalPrint();
        }

        while (queryRun.next())
        {  
            generalJournalEntry             = queryRun.get(tablenum(GeneralJournalEntry));
            generalJournalAccountEntry      = queryRun.get(tablenum(GeneralJournalAccountEntry));
            voucherLink                     = queryRun.get(tablenum(SubledgerVoucherGeneralJournalEntry));

            mainAccountLedgerDimensionView  = queryRun.get(tablenum(MainAccountLedgerDimensionView));

            if (voucherLink.Voucher != prevVoucher)
            {
                lineCnt = 0;
                if (ctr != 0)
                {
                    ctr++;
                }
                strAmountCur   = strltrim('0' + ' ' + generalJournalAccountEntry.TransactionCurrencyCode);
                printInvoice   = true;
                prevVoucher    = voucherLink.Voucher;
                prevTransdate  = voucherLink.AccountingDate;
                showCN         = "@SYS79667";
            }

            // Start new page if no more empty lines left (end of page)
            if (#maxLinesOnPage - ctr <= 0)
            {
                pageNum++;
                ctr = 0;
            }

            ctr++;
            lineCnt++;

            //print invoice number on second line of each voucher block
            if ((printInvoice) && (lineCnt == 1))
            {
                printInvoice = false;
            }

            //legFinJourRepTmpLegTransBE.ShowCN = "@SYS79667";
            //if it's a line with posting type CustBalance or CustCollectionLetterFee
            if ((generalJournalAccountEntry.PostingType  == LedgerPostingType::CustBalance) ||
               (generalJournalAccountEntry.PostingType  == LedgerPostingType::CustCollectionLetterFee))
            {
                strAmountCur = strltrim(num2str(generalJournalAccountEntry.TransactionCurrencyAmount,10,2,2,1) + ' ' + generalJournalAccountEntry.TransactionCurrencyCode);
                if (generalJournalAccountEntry.PostingType  == LedgerPostingType::CustBalance
                    && generalJournalAccountEntry.AccountingCurrencyAmount <= 0)
                {
                    showCN  = "@SYS79668";
                }
                else
                {
                    showCN  = "@SYS79667";
                }
            }

            this.initLedgerJournalReportTmp(queryRun, pageNum, voucherLink, showCN);
            legFinJourRepTmpLegTransBE.insert();
            legFinJourRepTmpLegTransBE.clear();

            //update debit and credit totals
            this.calcDebCredTotals();
        }
        //close journal report
        this.closeJournalReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inits data in the <c>LegFinJourRepTmpLegTransBE</c> table.
    /// </summary>
    protected void initLedgerJournalReportTmp(
        QueryRun _queryRun,
        int _pageNum,
        SubledgerVoucherGeneralJournalEntry _voucherLink,
        str _showCN)
    {
        legFinJourRepTmpLegTransBE.AccountNum          = mainAccountLedgerDimensionView.MainAccount;
        legFinJourRepTmpLegTransBE.AccountName         = MainAccount::getLocalizedName(mainAccountLedgerDimensionView.MainAccountRecId);
        if ( generalJournalAccountEntry.AccountingCurrencyAmount >= 0 )
        {
            legFinJourRepTmpLegTransBE.AmountMSTDebit  = generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            legFinJourRepTmpLegTransBE.AmountMSTCredit   = -generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        legFinJourRepTmpLegTransBE.VendName            = this.custName();
        legFinJourRepTmpLegTransBE.InvoiceNo           = this.invoiceNo();
        legFinJourRepTmpLegTransBE.Voucher             = _voucherLink.Voucher;
        legFinJourRepTmpLegTransBE.TransDate           = _voucherLink.AccountingDate;
        legFinJourRepTmpLegTransBE.PageNum             = _pageNum;
        legFinJourRepTmpLegTransBE.AmountCur           = strAmountCur;
        legFinJourRepTmpLegTransBE.ShowCN              = _showCN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPageNumStart</Name>
				<Source><![CDATA[
    private int setPageNumStart()
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBe  = null;

        if ((newPageNum) ||(!finalReporting))
        {
            pageNumStart      = 1;
        }
        else
        {
            journalPeriodFinalPrintBe  = LedgerJournalPeriodFinalPrintBE::findPrev(ledgerPostingJournalId,periodFromDate-1,false);

            if (journalPeriodFinalPrintBe)
            {
                pageNumStart  = journalPeriodFinalPrintBe.NumberLastPage+1;
            }
            else
            {
                pageNumStart  = 1;
            }
        }

        return pageNumStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBoxCalcSales</Name>
				<Source><![CDATA[
    //Belgian calculation method:.
    //There has to be made a difference between an invoice and a creditnote.
    //An invoice must be handled in complete and not line per line as an invoice.
    //can have lines with negative amounts.
    private void taxBoxCalcSales()
    {
        TaxTrans           taxTrans;
        TaxTable           taxTable;
        Voucher            oldVoucher    = '';
        TransDate          oldTransDate  = dateNull();
        TmpTaxSalesLedger  tmpTaxSalesLedgerLocal;
        boolean            isInvoice     = false;
        TaxTrans           taxTransTotal;
        AmountMST          amountInclTax = 0;

        custTrans = null;

        select taxTransTotal;

        while select sum(TaxBaseAmount), sum(TaxAmount) from taxTransTotal
        group by Voucher, TransDate, TaxDirection
            where taxTransTotal.TransDate       >= fromDate                  &&
                  taxTransTotal.TransDate       <= toDate                    &&
                  taxTransTotal.TaxOrigin       != TaxOrigin::TaxReporting   &&
                  (taxTransTotal.TaxRepCounter  == TaxRepVersion::Original   ||
                  taxTransTotal.TaxRepCounter   == TaxRepVersion::Correct)   &&
                  (taxTransTotal.TaxDirection   == TaxDirection::OutgoingTax ||
                  (TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled() &&
                  taxTransTotal.TaxDirection    == TaxDirection::OutgoingTax_W) ||
                  taxTransTotal.TaxDirection    == TaxDirection::TaxExemptSales)
        {
            if (ledgerPostingJournalId  == this.findLedgerPostingJournalId(taxTransTotal.TransDate, taxTransTotal.Voucher))
            {
                if (taxTransTotal.TaxBaseAmount < 0)
                {
                    isInvoice  = true;
                }
                else
                {
                    isInvoice  = (taxTransTotal.TaxBaseAmount == 0 && taxTransTotal.TaxAmount < 0) ? true : false;
                }

                while select sum(TaxBaseAmount), sum(TaxAmount)
                    from taxTrans
                    group by Voucher, TransDate, TaxCode, TaxDirection
                    where taxTrans.Voucher       == taxTransTotal.Voucher   &&
                          taxTrans.TransDate     == taxTransTotal.TransDate &&
                          taxTrans.TaxDirection  == taxTransTotal.TaxDirection
                {
                    amountInclTax  = 0;
                    tmpTaxSalesLedgerLocal.clear();
                    taxTable       = TaxTable::find(taxTrans.TaxCode);
                    if (taxTrans.Voucher  != oldVoucher || taxTrans.TransDate != oldTransDate)
                    {
                        generalJournalEntry  = this.findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);
                        custTrans            = CustTrans::findVoucherDate(taxTrans.Voucher,   taxTrans.TransDate);
                        if (custTrans)
                        {
                            tmpTaxSalesLedgerLocal.CustAccount       = custTrans.AccountNum;
                            tmpTaxSalesLedgerLocal.AmountMSTInclTax  = custTrans.AmountMST;
                        }
                        oldVoucher    = taxTrans.Voucher;
                        oldTransDate  = taxTrans.TransDate;
                    }
                    tmpTaxSalesLedgerLocal.LedgerPostingJournalId  = generalJournalEntry.LedgerPostingJournal;
                    tmpTaxSalesLedgerLocal.Voucher                 = taxTrans.Voucher;
                    tmpTaxSalesLedgerLocal.TransDate               = taxTrans.TransDate;

                    if (taxTrans.TaxDirection == TaxDirection::OutgoingTax || taxTrans.TaxDirection == TaxDirection::OutgoingTax_W) // Domestic sale
                    {
                        if (isInvoice) // ordinary sale
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldBaseOutgoing, taxTrans.TaxBaseAmount);
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldTaxOutgoing,  taxTrans.TaxAmount);
                        }
                        else // creditNote
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldBaseOutgoingCreditNote, taxTrans.TaxBaseAmount);
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal, taxTable.RepFieldTaxOutgoingCreditNote,  taxTrans.TaxAmount);
                        }
                        amountInclTax  +=taxTrans.TaxBaseAmount+taxTrans.TaxAmount;
                    }
                    else  // Export
                    {
                        if (isInvoice) // ordinary sale
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal,taxTable.RepFieldTaxFreeSales, taxTrans.TaxBaseAmount);
                        }
                        else // creditNote
                        {
                            tmpTaxSalesLedgerLocal  = this.addTaxBoxAmountSales(tmpTaxSalesLedgerLocal,taxTable.RepFieldTaxFreeSalesCreditNote, taxTrans.TaxBaseAmount);
                        }
                        amountInclTax  +=taxTrans.TaxBaseAmount;
                    }
                    tmpTaxSalesLedgerLocal.AmountMSTInclTax  = amountInclTax;
                    tmpTaxSalesLedgerLocal.InvoiceId         = custTrans.Invoice;
                    this.insertInTmpTaxSalesLedger(tmpTaxSalesLedgerLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalPeriodFinalPrint</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>LedgerJournalPeriodFinalPrintBE</c> record based on UI parameter values.
    /// </summary>
    private void updateJournalPeriodFinalPrint()
    {
        LedgerJournalPeriodFinalPrintBE journalPeriodFinalPrintBE;

        ttsbegin;
        journalPeriodFinalPrintBE  = LedgerJournalPeriodFinalPrintBE::findByJournalIdPeriod(ledgerPostingJournalId, periodFromDate, periodToDate,true);
        if (journalPeriodFinalPrintBE)
        {
            journalPeriodFinalPrintBE.DebitTotal   = totDeb;
            journalPeriodFinalPrintBE.CreditTotal  = totCred;
            journalPeriodFinalPrintBE.Compressed   = compression;
            journalPeriodFinalPrintBE.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>