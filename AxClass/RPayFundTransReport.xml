<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayFundTransReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Off-funds allocations report base abstract class.
/// </summary>
abstract class RPayFundTransReport extends OXMLExcelReport_RPay
{
    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.Body('BODY')
    #define.Footer('FOOTER')
    #define.PrologLabels('PROLOGLABELS')
    #define.PrologDate('PROLOGDATE')
    #define.PrologPageNum('PROLOGPAGENUM')
    #define.OrgHeader('ORGHEADER')
    #define.OrgFooter('ORGFOOTER')
    #define.FundTotalsLabel('FundTotalsLabel')
    #define.FundTotals('FundTotals')
    #define.FundTotalsFooter('FundTotalsFooter')
    #define.FundTotalsOrg('FundTotalsOrg')
    #define.FundAmountLabel('FundAmountLabel')
    #define.TaxBaseLabel('TaxBaseLabel')
    #define.sheetHeader('SheetHeader')
    #define.sheetBody('SheetBody')
    #define.sheetFooter('SheetFooter')
    #define.sheetOrgFooter('SheetOrgFooter')
    #define.pagenum('pagenum')
    #define.date('date')
    #define.taxAmountBody('TaxAmountBody')
    #define.taxAmountOrg('TaxAmountOrg')
    #define.taxAmountBodyLabel('TaxAmountBodyLabel')
    #define.taxAmountFooter('TaxAmountFooter')
    #define.orgName('orgName')

    DialogField        dialogPayPeriod;
    DialogField        dialogPrintHrmOrganizationId;
    ReportPeriod_RU    rPayPeriod;
    NoYes              printHrmOrganizationId;
    Map                fundsMap;
    Counter            pageNum;
    QueryRun           queryRun;
    container          amounts;
    container          totalAmounts;
    container          orgAmounts;
    RPayAmount         footerTaxAmount, orgTaxAmount;
    RPayAmount         fundAmount, footerFundAmount, orgFundAmount;
    RpayHRMOrganizationId prevOrganizationId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        rPayPeriod,
        printHrmOrganizationId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        return max(this.getRangeHeight(_bookmark), #minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPointsToTwips</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts points to twips.
    /// </summary>
    /// <param name="_pointWidth">
    /// The point width.
    /// </param>
    /// <returns>
    /// The number in twips.
    /// </returns>
    #define.value256(256)
    #define.value128(128)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected real convertPointsToTwips(int _pointWidth)
    {
        return decRound((_pointWidth * #value256 - #value128) / (#value256 * document.workbook().maximumDigitWidth()), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createColumns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report columns.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void createColumns()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        #define.pageWidth(20)

        currentHeight = 0;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.updateQuery();

        this.createColumns();

        this.execute(#Prolog);

        this.execute(#Header);

        this.printBody();

        if (printHrmOrganizationId)
        {
            this.execute(#OrgFooter);
        }

        this.execute(#Footer);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialogPayPeriod = dialog.addField(extendedTypeStr(ReportPeriod_RU));
        dialogPayPeriod.value(rPayPeriod);

        dialogPrintHrmOrganizationId = dialog.addField(enumStr(NoYes));
        dialogPrintHrmOrganizationId.value(printHrmOrganizationId);
        dialogPrintHrmOrganizationId.label("@GLS106042");
        dialogPrintHrmOrganizationId.helpText("@GLS106043");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayFundTransReport';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash+ date2StrUsr(rPayPeriod, DateFlags::None)+#Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report body.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        int i;
        int fundsCount = fundsMap.elements();

        for (i = 1; i <= 2*fundsCount; i++)
        {
            this.insertValueToSection(#sheetBody + int2str(i), conPeek(amounts,i));
            totalAmounts = conPoke(totalAmounts, i, conPeek(totalAmounts,i) + conPeek(amounts, i));
            orgAmounts = conPoke(orgAmounts, i, conPeek(orgAmounts,i) + conPeek(amounts, i));
            amounts = conPoke(amounts, i, 0);
        }

        this.insertValueToSection(#FundTotals, fundAmount);
        orgFundAmount    += fundAmount;
        footerFundAmount += fundAmount;

        fundAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
            case #Footer:
                this.fillFooter();
                break;
            case #OrgHeader():
                this.fillOrgHeader();
                break;
            case #OrgFooter:
                this.fillOrgFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the report footer.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFooter()
    {
        int i;
        int fundsCount = fundsMap.elements();

        for (i = 1; i <= 2*fundsCount; i++)
        {
            this.insertValueToSection(#sheetFooter + int2str(i), conPeek(totalAmounts,i));
        }

        this.insertValueToSection(#taxAmountFooter, FooterTaxAmount);
        this.insertValueToSection(#FundTotalsFooter, FooterFundAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillHeader()
    {
        int                 fieldsCount, i;
        MapEnumerator       fundsEnumerator;

        fieldsCount = fundsMap.elements();
        fundsEnumerator = fundsMap.getEnumerator();

        for (i = 1; i <= fieldsCount; i++)
        {
            if ( !fundsEnumerator.moveNext())
            {
                break;
            }
            this.insertValueToSection(#sheetHeader + int2str(i), fundsEnumerator.currentValue());
            this.insertValueToSection(#sheetHeader + int2str(i+fieldsCount), fundsEnumerator.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrgFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills organization footer.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillOrgFooter()
    {
        int i;
        int fundsCount = fundsMap.elements();

        for (i = 1; i <= 2*fundsCount; i++)
        {
            this.insertValueToSection(#sheetOrgFooter + int2str(i), conPeek(orgAmounts,i));
            orgAmounts = conPoke(orgAmounts, i, 0);
        }

        this.insertValueToSection(#TaxAmountOrg, orgTaxAmount);
        this.insertValueToSection(#FundTotalsOrg, orgFundAmount);
        orgTaxAmount = 0;
        orgFundAmount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillOrgHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills organization header.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillOrgHeader()
    {
        Set mergeCells;
        RPayTrans rpayTrans = queryRun.get(tableNum(RPayTrans));
        this.insertValueToSection(#orgName, RPayHRMOrganization::find(rpayTrans.HrmOrganisationId).description);

        mergeCells = new Set(Types::Container);
        mergeCells.add([currentRow, currentRow,  1, 2*fundsMap.elements()+3]);
        document.workbook().getWorksheet(curWorksheetNum).addMergeCellsCopy(mergeCells, currentRow, currentRow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills prolog.
    /// </summary>
    #define.calcPeriodTitle('calcPeriodTitle')
    #define.calcPeriod('calcPeriod')
    #define.companyName('companyName')
    #define.title('title')
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillProlog()
    {
        this.insertValueToSection(#calcPeriodTitle, "@GLS105772");
        this.insertValueToSection(#calcPeriod, rPayPeriod);
        this.insertValueToSection(#date, date2StrUsr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), DateFlags::None));
        this.insertValueToSection(#companyName, CompanyInfo::find().Name);
        this.insertValueToSection(#pagenum, pageNum);
        this.insertValueToSection(#title, this.reportName());
        this.insertValueToSection(#FundAmountLabel, "@GLS106041");
        this.insertValueToSection(#TaxBaseLabel, "@RUP6236");
        this.insertValueToSection(#FundTotalsLabel, "@RUP6235");
        this.insertValueToSection(#taxAmountBodyLabel, "@SYS58659");
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstNumCol</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets number of first report data column.
    /// </summary>
    /// <returns>
    /// A number of a column.
    /// </returns>
    #define.firstNumCol(3)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int firstNumCol()
    {
        return #firstNumCol;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        this.updateQuery();

        rPayPeriod             = endmth(dialogPayPeriod.value());
        printHrmOrganizationId = dialogPrintHrmOrganizationId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report.
    /// </summary>
    /// <returns>
    /// True if initialization is successfull.
    /// </returns>
    public boolean init()
    {
        int fundsCount, i;
        boolean ret = super();

        pageNum = 1;

        this.initQuery();
        this.initFundsCodes();

        fundsCount = fundsMap.elements();
        for (i=1; i<= 2*fundsCount; i++)
        {
            amounts = conPoke(amounts, i, 0);
            totalAmounts = conPoke(totalAmounts, i, 0);
            orgAmounts = conPoke(orgAmounts, i, 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFundsCodes</Name>
				<Source><![CDATA[
    private void initFundsCodes()
    {
        RPayCounterTable rPayCounterTable;
        fundsMap = new Map(Types::String, Types::String);

        while select Name, CounterUnit from  rPayCounterTable
            where rPayCounterTable.CounterType == RPayCounterType::Fund &&
                  rPayCounterTable.LineType    == RPayCtypeType::BudgetFund
        {
            fundsMap.insert(rpayCounterTable.CounterUnit, rPayCounterTable.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        Query query = this.initQuery();

        super();
        queryRun = new QueryRun(query);
        rPayPeriod = RPayParameters::payPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report query.
    /// </summary>
    /// <returns>
    /// The report query.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected Query initQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#OrgHeader);
        this.addSection(#Body);
        this.addSection(#OrgFooter);
        this.addSection(#Footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints report body.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void printBody()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printHrmOrganizationId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes printHrmOrganizationId(NoYes _printHrmOrganizationId = printHrmOrganizationId)
    {
        printHrmOrganizationId = _printHrmOrganizationId;
        return printHrmOrganizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str reportName()
    {
        return "@RUP603";
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayFundTransReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.headerCells(30)
        #define.footerCells(20)
        #define.bodyCells(30)

        return #headerCells + #footerCells + #bodyCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container       packedQR;
        
        this.init();

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQR] = packedClass;

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : new queryRun(this.initQuery());

                break;
            default:
                queryRun = new queryRun(this.initQuery());
                rPayPeriod = endmth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates report query.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateQuery()
    {
        QueryBuildDataSource rpayTransDS = queryRun.query().dataSourceTable(tableNum(RPayTrans));

        rpayTransDS.sortClear();

        if (this.printHrmOrganizationId())
        {
            rpayTransDS.addSortField(fieldnum(RPayTrans, HrmOrganisationId), SortOrder::Ascending);
        }

        findOrCreateRange_W(rpayTransDS, fieldnum(RPayTrans, PayPeriod), queryValue(rPayPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    #define.parmCtype("Ctype")
    #define.parmLedgerAccount("LedgerAccount")
    private static RPayFundTransReport construct(Args _args)
    {
        RPayFundTransReport  rPayFundTransReport;

        switch (_args.parm())
        {
            case #parmCtype:
                rPayFundTransReport = new RPayFundTransReport_Ctype();
                break;
            case #parmLedgerAccount:
                rPayFundTransReport = new RPayFundTransReport_LedgerAccount();
                break;
        }
        rPayFundTransReport.parmArgs(_args);
        return rPayFundTransReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP603";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayFundTransReport rPayFundTransReport = RPayFundTransReport::construct(_args);

        if (rPayFundTransReport.prompt())
        {
            if (rPayFundTransReport.init())
            {
                rPayFundTransReport.runOperation();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>