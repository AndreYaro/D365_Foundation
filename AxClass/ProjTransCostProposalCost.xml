<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCostProposalCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransCostProposalCost extends ProjTransCostProposal
{
    ProjProposalCostDetail  projProposalCostDetail;
    ProjCostTransCost       projCostTransCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for this transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        return projCostTransCost.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimensions for this transaction.
    /// </summary>
    /// <returns>
    /// The default dimension for this transaction.
    /// </returns>
    public DimensionDefault defaultDimension()
    {
        return projCostTransCost.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return projCostTransCost.LedgerStatusCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalCost _projProposalCost, ProjProposalCostDetail _projProposalCostDetail, ProjCostTransCost _projCostTransCost, ProjTransStatus _saleTransStatus)
    {
        projProposalCostDetail = _projProposalCostDetail;
        projCostTransCost = _projCostTransCost;
        this.parmSaleTransStatus(_saleTransStatus);

        super(_projProposalCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        boolean invoiced   = ProjProposalJour::find(projProposalCost.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;

        if (invoiced)
        {
            return (select projInvoiceCost
                        where projInvoiceCost.ProjInvoiceId == ProjProposalJour::find(projProposalCost.ProposalId).ProjInvoiceId
                           && projInvoiceCost.TransId       == this.transId()).Qty;
        }
        else
        {
            if (this.parmSaleTransStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -projCostTrans.Qty;
            }
            else
            {
                return projCostTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return projCostTransCost.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public Amount transCost()
    {
        Amount ret;

        if (this.parmSaleTransStatus() == ProjTransStatus::CreditnoteProposal)
        {
            ret = -projCostTransCost.CostAmountLedger;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>