<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterOutputContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormLetterOutputContract</c> class will be used as the output data contract class for the <c>FormletterService</c> service.
/// </summary>
[DataContractAttribute]
class FormletterOutputContract
implements SysPackable
{
    Counter numberOfOrdersPosted;
    Common  journal;
    str     journalLines;
    str     allJournals;
    boolean updateError;
    private container  journalLinesPacked;
    private container  allJournalsPacked;

    // <GEERU>
    str     factureJournals;
    // </GEERU>

    // list of docuRefs per journal to print
    str     docuRefRecIdsPerJournal;

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    // <GEERU>
    #define.CurrentVersion(5)
    // </GEERU>
    #LOCALMACRO.ParmListOutput
        numberOfOrdersPosted,
        journal,
        updateError,
        docuRefRecIdsPerJournal,
        // <GEERU>
        factureJournals,
        // </GEERU>
        journalLinesPacked,
        allJournalsPacked
    #ENDMACRO

        #define.Version4(4)
        // </GEERU>
        #LOCALMACRO.ParmListOutputV4
        numberOfOrdersPosted,
        journal,
        journalLines,
        allJournals,
        updateError,
        docuRefRecIdsPerJournal
        // <GEERU>
        ,factureJournals
        // </GEERU>
    #ENDMACRO

    // <GEERU>
    #define.Version3(3)
    // </GEERU>
    #LOCALMACRO.ParmListOutputV3
        numberOfOrdersPosted,
        journal,
        journalLines,
        allJournals,
        updateError
        // <GEERU>
        ,factureJournals
        // </GEERU>
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#ParmListOutput];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllJournals</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysObsolete("This method is obsolete, use the parmAllJournalsPacked method instead.", true, 05\01\2022)]
    public str parmAllJournals(str _allJournals = allJournals)
    {
        if (prmIsDefault(_allJournals))
        {
            if (!allJournals && allJournalsPacked)
            {
                allJournals = SysOperationHelper::base64Encode(allJournalsPacked);
            }
        }
        else
        {
            this.validateSettingOfEncodedJournal(allJournalsPacked, funcName());
            allJournals = _allJournals;
            allJournalsPacked = SysOperationHelper::base64Decode(allJournals);
        }
        
        return allJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllJournalsPacked</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    public container parmAllJournalsPacked(container _allJournalsPacked = allJournalsPacked)
    {
        if (prmIsDefault(_allJournalsPacked))
        {
            if (!allJournalsPacked && allJournals)
            {
                allJournalsPacked = SysOperationHelper::base64Decode(allJournals);
            }
        }
        else
        {
            this.validateSettingOfPackedJournal(allJournals, funcName());
            allJournalsPacked = _allJournalsPacked;
        }
        return allJournalsPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuRefRecIdsPerJournal</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmDocuRefRecIdsPerJournal(str _docuRefRecIdsPerJournal = docuRefRecIdsPerJournal)
    {
        docuRefRecIdsPerJournal = _docuRefRecIdsPerJournal;
        return docuRefRecIdsPerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureJournals_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmFactureJournals_RU(str _factureJournals = factureJournals)
    {
        factureJournals = _factureJournals;
        return factureJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournal</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Common parmJournal(Common _journal = journal)
    {
        journal = _journal;
        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalLines</Name>
				<Source><![CDATA[
    [DataMemberAttribute, SysObsolete("This method is obsolete, use the parmJournalLinesPacked method instead.", true, 05\01\2022)]
    public str parmJournalLines(str _journalLines = journalLines)
    {
        if (prmIsDefault(_journalLines))
        {
            if (!journalLines && journalLinesPacked)
            {
                journalLines = SysOperationHelper::base64Encode(journalLinesPacked);
            }
        }
        else
        {
            this.validateSettingOfEncodedJournal(journalLinesPacked, funcName());
            journalLines = _journalLines;
            journalLinesPacked = SysOperationHelper::base64Decode(journalLines);
        }

        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalLinesPacked</Name>
				<Source><![CDATA[
    [HookableAttribute(false)]
    final public container parmJournalLinesPacked(container _journalLinesPacked = journalLinesPacked)
    {
        if (prmIsDefault(_journalLinesPacked))
        {
            if (! journalLinesPacked && journalLines)
            {
                journalLinesPacked = SysOperationHelper::base64Decode(journalLines);
            }
        }
        else
        {
            this.validateSettingOfPackedJournal(journalLines, funcName());
            journalLinesPacked = _journalLinesPacked;
        }

        return journalLinesPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfOrdersPosted</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Counter parmNumberOfOrdersPosted(Counter _numberOfOrdersPosted = numberOfOrdersPosted)
    {
        numberOfOrdersPosted = _numberOfOrdersPosted;
        return numberOfOrdersPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateError</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmUpdateError(boolean _updateError = updateError)
    {
        updateError = _updateError;
        return updateError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        void setEncodedJournalStrings()
        {
            allJournals     = SysOperationHelper::base64Encode(allJournalsPacked);
            journalLines    = SysOperationHelper::base64Encode(journalLinesPacked);
        }


        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListOutput] = _packedClass;
                return true;

            case #Version4:
                [version, #ParmListOutputV4] = _packedClass;
                setEncodedJournalStrings();
                return true;

            case #Version3:
                [version, #ParmListOutputV3] = _packedClass;
                setEncodedJournalStrings();
                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public FormletterOutputContract construct()
    {
        return new FormletterOutputContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettingOfEncodedJournal</Name>
				<Source><![CDATA[
    private boolean validateSettingOfEncodedJournal(container _packedJournalsCollection, str _funcName)
    {
        boolean ret = true;
        if (_packedJournalsCollection)
        {
            this.validateSettingJournalThrowError(_funcName);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettingOfPackedJournal</Name>
				<Source><![CDATA[
    private boolean validateSettingOfPackedJournal(str _encodedJournalsCollection, str _funcName)
    {
        boolean ret = true;
        if (_encodedJournalsCollection)
        {
            this.validateSettingJournalThrowError(_funcName);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettingJournalThrowError</Name>
				<Source><![CDATA[
    private void validateSettingJournalThrowError(str _funcName)
    {
        // To avoid ambiguity, only one of either the packed container object or the encoded string object representing journals and journal lines,
        // should be populated in the same class instance.
        throw error(Error::wrongUseOfFunction(_funcName));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>