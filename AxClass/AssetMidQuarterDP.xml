<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetMidQuarterDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetMidQuarterDP</c> class retrieves the records for the <c>AssetMidQuarter</c> SQL server.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetMidQuarterBaseData)),
    SRSReportParameterAttribute(classstr(AssetMidQuarterContract))
]
public class AssetMidQuarterDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetMidQuarterTmp      assetMidQuarterTmp;
    Integer                 currentQuarter;
    PeriodEnd               currentStartDate;
    PeriodEnd               currentEndDate;
    AssetAmount             currentTotal;
    Percent                 currentPercentage;   
    AssetBookId				assetBookId;
    NoYes                   showDisposed;
    TransDate               yearEnding;
    AssetAmountReportingCurrency currentTotalReportingCurrency;
    Percent currentPercentageReportingCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getassetMidQuarterTmp</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary <c>AssetMidQuarterTmp</c> table.
    /// </returns>
    [
        SrsReportDataSetAttribute(tablestr(AssetMidQuarterTmp))
    ]
    public assetMidQuarterTmp getassetMidQuarterTmp()
    {
        select assetMidQuarterTmp;
        return assetMidQuarterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetMidQuarterTmp</Name>
				<Source><![CDATA[
    private void insertAssetMidQuarterTmp(RecordInsertList _recordInsertList)
    {
        assetMidQuarterTmp.clear();
        assetMidQuarterTmp.QuarterNumber = currentQuarter;
        assetMidQuarterTmp.QuarterStartDate = currentStartDate;
        assetMidQuarterTmp.QuarterEndDate = currentEndDate;
        assetMidQuarterTmp.QuarterAmount = currentTotal;
        assetMidQuarterTmp.QuarterPercentage = currentPercentage;
        assetMidQuarterTmp.QuarterAmountReportingCurrency = currentTotalReportingCurrency;
        assetMidQuarterTmp.QuarterPercentageReportingCurrency = currentPercentageReportingCurrency;
        _recordInsertList.add(assetMidQuarterTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    ///<summary>
    ///    Retrieves the records based on the parameters entered.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;
        QueryBuildDataSource qbs;
        QueryBuildRange qr;

        AssetBook assetBook;
        AssetSumCalc_Trans assetSumCalc;
        RecId calendarId;
        PeriodEnd firstDayOfYear;
        Integer quartersInYear;
        PeriodEnd quarterDate;
        PeriodEnd q1StartDate;
        PeriodEnd q1EndDate;
        PeriodEnd q2StartDate;
        PeriodEnd q2EndDate;
        PeriodEnd q3StartDate;
        PeriodEnd q3EndDate;
        PeriodEnd q4StartDate;
        PeriodEnd q4EndDate;
        AssetAmount q1Total = 0;
        AssetAmount q2Total = 0;
        AssetAmount q3Total = 0;
        AssetAmount q4Total = 0;
        AssetAmountReportingCurrency q1TotalReportingCurrency = 0;
        AssetAmountReportingCurrency q2TotalReportingCurrency = 0;
        AssetAmountReportingCurrency q3TotalReportingCurrency = 0;
        AssetAmountReportingCurrency q4TotalReportingCurrency = 0;
        PeriodEnd yearEndDate;

        AssetMidQuarterContract contract = this.parmDataContract() as AssetMidQuarterContract;

        assetBookId = contract.parmBookId();
        yearEnding = contract.parmYearEnding();
        showDisposed = contract.parmShowDisposed();

        yearEndDate = yearEnding;

        calendarId = AssetBookTable::find(assetBookId).getFiscalCalendar();
        firstDayOfYear = LedgerFiscalCalendar::findFirstDayOfYear(calendarId, yearEndDate);

        //Need to calculate the start and end date for each quarter in the selected year.
        quartersInYear = LedgerFiscalCalendar::findQuarterByDate(calendarId, yearEndDate);
        quarterDate = yearEndDate;

        if (quartersInYear == 4)
        {
            q4StartDate = LedgerFiscalCalendar::findFirstDayOfQuarter(calendarId, quarterDate);
            q4EndDate = LedgerFiscalCalendar::findLastDayOfQuarter(calendarId, quarterDate);
            quarterDate = FiscalCalendars::findPrevQuarter(calendarId, quarterDate);
        }

        if (quartersInYear >= 3)
        {
            q3StartDate = LedgerFiscalCalendar::findFirstDayOfQuarter(calendarId, quarterDate);
            q3EndDate = LedgerFiscalCalendar::findLastDayOfQuarter(calendarId, quarterDate);
            quarterDate = FiscalCalendars::findPrevQuarter(calendarId, quarterDate);
        }

        if (quartersInYear >= 2)
        {
            q2StartDate = LedgerFiscalCalendar::findFirstDayOfQuarter(calendarId, quarterDate);
            q2EndDate = LedgerFiscalCalendar::findLastDayOfQuarter(calendarId, quarterDate);
            quarterDate = FiscalCalendars::findPrevQuarter(calendarId, quarterDate);
        }

        if (quartersInYear >= 1)
        {
            q1StartDate = LedgerFiscalCalendar::findFirstDayOfQuarter(calendarId,  quarterDate);
            q1EndDate = LedgerFiscalCalendar::findLastDayOfQuarter(calendarId, quarterDate);
            quarterDate = FiscalCalendars::findPrevQuarter(calendarId, quarterDate);
        }

        queryRun = new QueryRun(this.parmQuery());
        qbs = queryRun.query().dataSourceNo(1).addDataSource(tablenum(AssetBook));
        qbs.joinMode(0);
        qr = qbs.addRange(fieldnum(AssetBook, BookId));
        qr.value(queryValue(assetBookId));
        qbs.relations(true);

        while (queryRun.next())
        {
            assetBook = queryRun.get(tablenum(AssetBook));

            //Need to restrict Assets that use the conventions Mid month 1st or 15th.
            if (!(assetBook.DepreciationConvention == AssetDepreciationConvention::MidMonth15 ||
                  assetBook.DepreciationConvention == AssetDepreciationConvention::MidMonth1st))
            {
                //Check if disposed assets should be restricted and restict accordingly.
                if ((assetBook.Status == AssetStatus::Open)||
                    (assetBook.Status == AssetStatus::Closed)||
                    (assetBook.Status ==  AssetStatus::Suspended)||
                    (showDisposed && (assetBook.Status == AssetStatus::Scrapped || assetBook.Status==AssetStatus::Sold)))
                {
                    //Need to restrict Asset bought and disposed in the same year.
                    if ((!assetBook.DisposalDate) ||
                        ((assetBook.AcquisitionDate >= firstDayOfYear && assetBook.AcquisitionDate <= yearEndDate) &&
                        (!(assetBook.DisposalDate >= firstDayOfYear && assetBook.DisposalDate <= yearEndDate))))
                    {
                        //Need to create a new instance of AssetSumCalc for each quarter and add the acquisition amounts to the running total.
                        if (quartersInYear == 4)
                        {
                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, q4StartDate, q4EndDate);
                            q4Total = q4Total + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();

                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId, assetBook.BookId, q4StartDate, q4EndDate, AssetSumCalcType::Reporting);
                            q4TotalReportingCurrency = q4TotalReportingCurrency + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();
                        }

                        if (quartersInYear >= 3)
                        {
                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, q3StartDate, q3EndDate);
                            q3Total = q3Total + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();

                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId, assetBook.BookId, q3StartDate, q3EndDate, AssetSumCalcType::Reporting);
                            q3TotalReportingCurrency = q3TotalReportingCurrency + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();
                        }

                        if (quartersInYear >= 2)
                        {
                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, q2StartDate, q2EndDate);
                            q2Total = q2Total + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();

                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId, assetBook.BookId, q2StartDate, q2EndDate, AssetSumCalcType::Reporting);
                            q2TotalReportingCurrency = q2TotalReportingCurrency + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();
                        }

                        if (quartersInYear >= 1)
                        {
                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, q1StartDate, q1EndDate);
                            q1Total = q1Total + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();

                            assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId, assetBook.BookId, q1StartDate, q1EndDate, AssetSumCalcType::Reporting);
                            q1TotalReportingCurrency = q1TotalReportingCurrency + assetSumCalc.acquisitionValue() + assetSumCalc.acquisitionAdjValue();
                        }
                    }
                }
            }
        }
        // 4 for the data for each quarter.  Quarter (1-4), Start Date, End Date, Acqu Amt, Percent.
        // Need to create a new instance of AssetSumCalc for each quarter and add the acquisition amounts to the running total.
        currentQuarter = 1;
        currentStartDate = q1StartDate;
        currentEndDate = q1EndDate;
        currentTotal = q1Total;
        currentTotalReportingCurrency = q1TotalReportingCurrency;
        AssetAmountReportingCurrency totalReportingCurrencyAmount = q1TotalReportingCurrency + q2TotalReportingCurrency + q3TotalReportingCurrency + q4TotalReportingCurrency;

        if ((q1Total + q2Total + q3Total + q4Total) == 0)
        {
            currentPercentage = 0;
        }
        else
        {
            currentPercentage = q1Total/(q1Total + q2Total + q3Total + q4Total)*100;
        }

        if (totalReportingCurrencyAmount == 0)
        {
            currentPercentageReportingCurrency = 0;
        }
        else
        {
            currentPercentageReportingCurrency = q1TotalReportingCurrency/totalReportingCurrencyAmount * 100;
        }

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetMidQuarterTmp), true, true, true, false, true, assetMidQuarterTmp);

        this.insertAssetMidQuarterTmp(recordInsertList);

        if (quartersInYear >= 2)
        {
            currentQuarter = 2;
            currentStartDate = q2StartDate;
            currentEndDate = q2EndDate;
            currentTotal = q2Total;
            currentTotalReportingCurrency = q2TotalReportingCurrency;
            if ((q1Total + q2Total + q3Total + q4Total) == 0)
            {
                currentPercentage = 0;
            }
            else
            {
                currentPercentage = q2Total/(q1Total + q2Total + q3Total + q4Total)*100;
            }

            if (totalReportingCurrencyAmount == 0)
            {
                currentPercentageReportingCurrency = 0;
            }
            else
            {
                currentPercentageReportingCurrency = q2TotalReportingCurrency/totalReportingCurrencyAmount*100;
            }
            this.insertAssetMidQuarterTmp(recordInsertList);
        }

        if (quartersInYear >= 3)
        {
            currentQuarter = 3;
            currentStartDate = q3StartDate;
            currentEndDate = q3EndDate;
            currentTotal = q3Total;
            currentTotalReportingCurrency = q3TotalReportingCurrency;

            if ((q1Total + q2Total + q3Total + q4Total) == 0)
            {
                currentPercentage = 0;
            }
            else
            {
                currentPercentage = q3Total/(q1Total + q2Total + q3Total + q4Total)*100;
            }

            if (totalReportingCurrencyAmount == 0)
            {
                currentPercentageReportingCurrency = 0;
            }
            else
            {
                currentPercentageReportingCurrency = q3TotalReportingCurrency/totalReportingCurrencyAmount*100;
            }
            this.insertAssetMidQuarterTmp(recordInsertList);
        }

        if (quartersInYear == 4)
        {
            currentQuarter = 4;
            currentStartDate = q4StartDate;
            currentEndDate = q4EndDate;
            currentTotal = q4Total;
            currentTotalReportingCurrency = q4TotalReportingCurrency;

            if ((q1Total+q2Total+q3Total+q4Total) == 0)
            {
                currentPercentage = 0;
            }
            else
            {
                currentPercentage = q4Total/(q1Total + q2Total + q3Total + q4Total)*100;
            }

            if (totalReportingCurrencyAmount == 0)
            {
                currentPercentageReportingCurrency = 0;
            }
            else
            {
                currentPercentageReportingCurrency = q4TotalReportingCurrency/totalReportingCurrencyAmount*100;
            }
            this.insertAssetMidQuarterTmp(recordInsertList);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>