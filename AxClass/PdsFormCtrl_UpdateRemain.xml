<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_UpdateRemain</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is an abstract class to handle the updating of deliver remaindering forms.
/// </summary>
public abstract class PdsFormCtrl_UpdateRemain extends PmfFormCtrl
{
    boolean     cwItem;
    ItemId      itemId;

    UnitOfMeasureSymbol unitID;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called when the 'Cancel Quantity' button on
    /// the form is clicked
    /// </summary>
    /// <remarks>
    /// The method just sets the value of the cw remainder field to 0
    /// </remarks>
    public void cancelLine()
    {
        FormRealControl ctrl;

        if (cwItem)
        {
            ctrl = formRun.design().controlName(this.ctrlNameCWRemain());
            ctrl.realValue(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check method for the button manager
    /// </summary>
    /// <returns>
    /// true, if the form handles a catch weight line
    /// </returns>
    public boolean checkCWItem()
    {
        return cwItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNonCWItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check method for the button manager
    /// </summary>
    /// <returns>
    /// false, if the form handles a catch weight line
    /// </returns>
    public boolean checkNonCWItem()
    {
        return !cwItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called, when the 'OK' button on the form is pressed
    /// </summary>
    /// <remarks>
    /// This method has to be called within the transaction as it is setting
    /// the field for the catch weight remainder
    /// </remarks>
    public void closeOk()
    {
        FormRealControl ctrl;
        Common          callerRecord;

        if (cwItem)
        {
            this.updateQtyFields();
            ctrl = formRun.design().controlName(this.ctrlNameCWRemain());
            callerRecord = formRun.args().record();
            callerRecord.(this.cwDictField().id()) = ctrl.realValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlNameCWRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the name of the form control showing the cw remainder quantity
    /// </summary>
    /// <returns>
    /// the control name of the cw remainder qty
    /// </returns>
    /// <remarks>
    /// Example:
    /// #define.CtrlNameCWInventRemain('PdsCWRemainInventPhysical')
    /// return #CtrlNameCWInventRemain;
    /// </remarks>
    protected abstract utilElementName ctrlNameCWRemain()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlNameInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the name of the form control showing the remainder quantity
    /// in inventory units
    /// </summary>
    /// <returns>
    /// the control name of the remainder qty
    /// </returns>
    /// <remarks>
    /// Example:
    /// #define.CtrlNameInventRemain('RemainInventPhysical')
    /// return #CtrlNameInventRemain;
    /// </remarks>
    protected abstract utilElementName ctrlNameInventRemain()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlNameUnitRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the name of the form control for then remainder qty in
    /// a unit eventually different from the inventory unit
    /// </summary>
    /// <returns>
    /// the name of the form control
    /// </returns>
    /// <remarks>
    /// if this method returns '', no unit field will be handled. If the
    /// form contains such a qty field, the method has to be overridden
    /// to return the name of that control
    /// Example:
    /// #define.CtrlNamePurchRemain('RemainPurchPhysical')
    /// return #CtrlNamePurchRemain;
    /// </remarks>
    protected utilElementName ctrlNameUnitRemain()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwDictField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the dictionary representation of the cw remainder qty field
    /// </summary>
    /// <returns>
    /// the dictionary entry for the cw remainder qty field
    /// </returns>
    /// <remarks>
    /// Example:
    /// return new SysDictField(
    ///             tablenum(PurchLine),
    ///             fieldnum(PurchLine,PdsCWRemainInventPhysical));
    /// </remarks>
    protected abstract SysDictField cwDictField()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriden method to be called after the active record
    /// has been selected
    /// </summary>
    /// <remarks>
    /// The form values will be initialized at this point
    /// </remarks>
    public void dataSourceActivePost()
    {
        FormRealControl ctrl;

        super();

        if (cwItem)
        {
            ctrl = formRun.design().controlName(this.ctrlNameCWRemain());
            ctrl.realValue(
                    formRun.args().record().(this.cwDictField().id()));
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after a field has been modified
    /// </summary>
    /// <param name="_fieldId">
    /// the field, that has been modified
    /// </param>
    /// <remarks>
    /// The method triggers the update of the inventory and unit qty field
    /// from the catch weight quantity field
    /// </remarks>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case this.cwDictField().id():
                this.updateQtyFields();
                break;
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the following instance variables BEFORE
    /// calling this super method:
    ///  * itemId
    ///  * unitId (if the form has a unit qty field)
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// thrown, if the formrun or itemid variable has not been set
    /// </exception>
    public void initPost()
    {
        SysDictField    sysDictField;

        super();

        // item id may not be specified if the order line is category based
        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        cwItem = PdsGlobal::pdsIsCWItem(itemId);

        if (this.ctrlNameUnitRemain())
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(this.ctrlNameUnitRemain()),
                methodstr(PdsFormCtrl_UpdateRemain,checkNonCWItem),
                ButtonRuleEffectType::Enabled);
        }

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(this.ctrlNameInventRemain()),
            methodstr(PdsFormCtrl_UpdateRemain,checkNonCWItem),
            ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(this.ctrlNameCWRemain()),
            methodstr(PdsFormCtrl_UpdateRemain,checkCWItem),
            ButtonRuleEffectType::Visible);

        sysDictField = this.cwDictField();

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(this.ctrlNameCWRemain()),
            methodstr(PdsFormCtrl_UpdateRemain,checkCWItem),
            ButtonRuleEffectType::Label,
            sysDictField.label());

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(this.ctrlNameCWRemain()),
            methodstr(PdsFormCtrl_UpdateRemain,checkCWItem),
            ButtonRuleEffectType::HelpText,
            sysDictField.help());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// updates the design of the form
    /// </summary>
    public void updateDesign()
    {
        super();

        formButtonManager.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQtyFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the inventory and unit quantity fields from the catch wieght quantity field.
    /// </summary>
    public void updateQtyFields()
    {
        FormRealControl ctrl;
        PdsCWInventQty  cwQty;
        InventQty       qty;

        //
        // get the catch weight qty value
        //
        ctrl = formRun.design().controlName(this.ctrlNameCWRemain());
        cwQty = ctrl.realValue();
        //
        // calculate and set the inventory quantity from the
        // catch weight quantity
        //
        qty = PdsCatchWeight::inventQty(itemId, cwQty);
        ctrl = formRun.design().controlName(this.ctrlNameInventRemain());
        ctrl.realValue(qty);
        //
        // if a unit qty control exist, set the control with the
        // value converted from the inventory quantity
        //
        if (this.ctrlNameUnitRemain())
        {
            ctrl = formRun.design().controlName(this.ctrlNameUnitRemain());
            ctrl.realValue(PdsFormCtrl_UpdateRemain::convertQtyToUOM(itemId, unitID, qty));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyToUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>InventQty</c> to new unit of measure.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which conversion is done.
    /// </param>
    /// <param name="_toUomSymbol">
    /// The new unit of measure.
    /// </param>
    /// <param name="_qty">
    /// The quantity in old unit of measure.
    /// </param>
    /// <returns>
    /// <c>InventQty</c> in requested unit of measure.
    /// </returns>
    public static InventQty convertQtyToUOM(ItemId _itemId, UnitOfMeasureSymbol _toUomSymbol, InventQty _qty)
    {
        InventQty convertedQty;
        UnitOfMeasureConverter_Product unitOfMeasureConverter = UnitOfMeasureConverter_Product::construct();

        unitOfMeasureConverter.parmFromUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(_itemId).inventUnitId()));
        unitOfMeasureConverter.parmToUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(_toUomSymbol));
        unitOfMeasureConverter.parmProduct(InventTable::itemProduct(_itemId));
        convertedQty = unitOfMeasureConverter.convertValue(_qty);

        return convertedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the appropriate form control based on the passed formrun
    /// </summary>
    /// <param name="_fr">
    /// the formrun to create the form control for
    /// </param>
    /// <returns>
    /// the form control instance
    /// </returns>
    /// <exception cref="Exception::Error">
    /// if the method is being called with an unknown formrun, it will
    /// throw an exception
    /// </exception>
    public static PdsFormCtrl_UpdateRemain newFromForm(FormRun _fr)
    {
        PdsFormCtrl_UpdateRemain formCtrl;

        switch (_fr.name())
        {
            case formstr(PurchUpdateRemain):
                formCtrl = PdsFormCtrl_PurchUpdateRemain::construct();
                break;
            case formstr(SalesUpdateRemain):
                formCtrl = PdsFormCtrl_SalesUpdateRemain::construct();
                break;
            case formstr(InventTransferUpdateRemain):
                formCtrl = PdsFormCtrl_InventTransferUpdateRemain::construct();
                break;
            default:
                formCtrl = PdsFormCtrl_UpdateRemain::newFromFormDefault(_fr.name());
        }

        if (!formCtrl)
        {
            throw error(Error::wrongUseOfFunction(staticMethodStr(PdsFormCtrl_UpdateRemain, newFromForm)));
        }

        formCtrl.parmFormRun(_fr);

        return formCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormDefault</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static PdsFormCtrl_UpdateRemain newFromFormDefault(str _formName)
    {
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>