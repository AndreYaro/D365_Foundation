<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymProposalCleanupDataAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classStr(PaymProposalCleanupDataActionFlight))]
internal final class PaymProposalCleanupDataAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters, IDataMaintenanceActionScheduleParameters
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:PaymProposalCleanupActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@CashManagement:PaymProposalCleanupActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::DataCorruption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::CashManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(PaymProposalCleanupTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.checkData());
        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = true;
        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkData</Name>
				<Source><![CDATA[
    private boolean checkData()
    {
        return this.checkOrphanCustVendPaymProposalLinesForDeletedPaymentJournal()
            || this.checkOrphanCustVendPaymProposalLinesForPostedPaymentJournal()
            || this.checkOrphanSpecTransForDeletedPaymentProposal()
            || this.checkOrphanSpecTransForPostedPaymentJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrphanSpecTransForPostedPaymentJournal</Name>
				<Source><![CDATA[
    private boolean checkOrphanSpecTransForPostedPaymentJournal()
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;
        LedgerJournalTable ledgerJournalTable;

        select firstonly forceselectorder crosscompany RecId from specTrans
            where specTrans.SpecTableId == tableNum(CustVendPaymProposalLine)
            join JournalId from custVendPaymProposalLine
                where specTrans.SpecRecId == custVendPaymProposalLine.RecId
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == custVendPaymProposalLine.JournalId
                    && ledgerJournalTable.Posted;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrphanCustVendPaymProposalLinesForPostedPaymentJournal</Name>
				<Source><![CDATA[
    private boolean checkOrphanCustVendPaymProposalLinesForPostedPaymentJournal()
    {
        CustVendPaymProposalLine custVendPaymProposalLine;
        LedgerJournalTable ledgerJournalTable;

        select firstonly forceselectorder crosscompany RecId from custVendPaymProposalLine
            join RecId from ledgerJournalTable
                where ledgerJournalTable.JournalNum == custVendPaymProposalLine.JournalId
                    && ledgerJournalTable.Posted;

        return custVendPaymProposalLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrphanCustVendPaymProposalLinesForDeletedPaymentJournal</Name>
				<Source><![CDATA[
    private boolean checkOrphanCustVendPaymProposalLinesForDeletedPaymentJournal()
    {
        CustVendPaymProposalLine custVendPaymProposalLine;
        LedgerJournalTable ledgerJournalTable;

        select firstonly forceselectorder crosscompany RecId from custVendPaymProposalLine
            notexists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == custVendPaymProposalLine.JournalId;

        return custVendPaymProposalLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrphanSpecTransForDeletedPaymentProposal</Name>
				<Source><![CDATA[
    private boolean checkOrphanSpecTransForDeletedPaymentProposal()
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;

        select firstonly crosscompany RecId from specTrans
            where specTrans.SpecTableId == tableNum(CustVendPaymProposalLine)
            notexists join custVendPaymProposalLine
                where specTrans.SpecRecId == custVendPaymProposalLine.RecId
                    && specTrans.SpecCompany == custVendPaymProposalLine.DataAreaId;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionScheduleParameters scheduleParameters()
    {
        DataMaintenanceActionScheduleParameters params = new DataMaintenanceActionScheduleParameters();
        params.Frequency = DataMaintenanceActionScheduleFrequency::EveryWeek;
        return params;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>