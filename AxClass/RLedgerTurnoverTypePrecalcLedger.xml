<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverTypePrecalcLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverTypePrecalcLedger</c> class implements logic for ledger turnover statements.
/// </summary>
class RLedgerTurnoverTypePrecalcLedger extends RLedgerTurnoverTypeLedger
{
    RLedgerTurnoverParamTransLink paramTransLink;
    Map                           mapParamValues;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSelectParam</Name>
				<Source><![CDATA[
        public boolean canSelectParam(Name _name)
    {
        if (_name == conpeek(this.groupParamNames(), facture) && ! LedgerParameters::find().PrecalcDataActual_RU)
        {
            return checkFailed("@SYS4081774");
        }

        return super(_name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmountCur</Name>
				<Source><![CDATA[
        protected fieldId fieldAmountCur()
    {
        return fieldnum(RLedgerJournalAccountEntryModule, TransactionCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmountMST</Name>
				<Source><![CDATA[
        protected fieldId fieldAmountMST()
    {
        return fieldnum(RLedgerJournalAccountEntryModule, AccountingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAmountMSTSec</Name>
				<Source><![CDATA[
        protected fieldId fieldAmountMSTSec()
    {
        return fieldnum(RLedgerJournalAccountEntryModule, ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCorrection</Name>
				<Source><![CDATA[
        public container fieldCorrection(CurrencyType_RU _currencyType = CurrencyType_RU::Standard)
    {
        return [tableNum(RLedgerJournalAccountEntryModule), fieldnum(RLedgerJournalAccountEntryModule, IsCorrection)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyValue</Name>
				<Source><![CDATA[
        public anytype getKeyValue(Common _trans, fieldId _fieldId)
    {
        return _trans.(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValues</Name>
				<Source><![CDATA[
        public container groupParamValues(Common    _trans,
                                      container _key,
                                      Common    _transHeader = null,
                                      Common    _transSplit  = null)
    {
        int                                 idx;
        container                           value;
        container                           paramValues;
        str                                 paramName;
        container                           paramNames         = this.groupParamNames();
        RLedgerJournalAccountEntryModule accountEntryModule = _trans;

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            paramName = conpeek(_key, idx);
            switch (paramName)
            {
                case conpeek(paramNames, appModule) :
                    value = [enum2str(accountEntryModule.Module)];
                    break;

                case conpeek(paramNames, facture) :
                    if (! LedgerParameters::find().PrecalcDataActual_RU)
                    {
                        throw error("@SYS4081703");
                    }

                default :
                    if (mapParamValues.exists(paramName))
                    {
                        value = mapParamValues.lookup(paramName);
                        value = [con2Str(value, newLine)];
                    }
                    else
                    {
                        value = [''];
                    }
            }

            paramValues = conins(paramValues, conlen(paramValues) + 1, value);
        }

        return paramValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransIncluded</Name>
				<Source><![CDATA[
        public boolean isTransIncluded(Common           _trans,
                                   Common           _subtrans,
                                   CurrencyType_RU  _currencyType,
                                   TransDate        _fromDate = dateNull(),
                                   TransDate        _toDate   = dateNull())
    {
        LedgerAccount               mainAccountCorr;
        GeneralJournalAccountEntry  accountEntry = _subtrans;
        TransactionReversalTrans    reversalTrans;
        TransactionReversalTrans    reversalTransOffset;
        Common                      transOffset    = _trans.data();
        FieldId                     fieldTransDate = conPeek(this.fieldTransDate(), 2);

        if (paramTransLink.RefRecId != _trans.RecId)
        {
            paramTransLink = RLedgerTurnoverParamTransLink::find(_trans.TableId, _trans.RecId);
            mapParamValues = RLedgerTurnoverParamValue::getValues(paramTransLink.ParamValueCombination);
        }

        if (! paramTransLink)
        {
            throw error("@SYS4081703");
        }

        if (mapParamValues.exists(corrAccountParamName))
        {
            mainAccountCorr = con2Str(mapParamValues.lookup(corrAccountParamName));
            if (offsetAccountNumSet.elements() && ! offsetAccountNumSet.in(mainAccountCorr))
            {
                return false;
            }
        }
        else
        {
            throw error("@SYS4081703");
        }

        if (_trans.(this.fieldAmount(_currencyType)) == 0)
        {
            return false;
        }

        if (_fromDate && _toDate)
        {
            reversalTrans = TransactionReversalTrans::findTransactionReversalTrans(_subtrans.TableId, _subtrans.RecId);
            if (reversalTrans.Reversed)
            {
                select firstonly reversalTransOffset
                    where reversalTransOffset.TraceNum == reversalTrans.TraceNum
                       && reversalTransOffset.RecId    != reversalTrans.RecId
                exists join transOffset
                    where  transOffset.TableId           == reversalTransOffset.RefTableId
                       &&  transOffset.RecId             == reversalTransOffset.RecId
                       && (transOffset.(fieldTransDate)  <  _fromDate
                       ||  transOffset.(fieldTransDate)  >  _toDate);

                if (! reversalTransOffset)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
        public container query()
    {
        QueryBuildDataSource qBdAccountEntry,
                             qBdAccountEntryModule;
        Query                query = new Query(super());

        qBdAccountEntry = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));

        qBdAccountEntryModule = qBdAccountEntry.addDataSource(tablenum(RLedgerJournalAccountEntryModule));
        qBdAccountEntryModule.fetchMode(QueryFetchMode::One2One);
        qBdAccountEntryModule.joinMode(JoinMode::OuterJoin);
        qBdAccountEntryModule.relations(true);

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
        public QueryRun queryRun(Query _query, container _key = conNull())
    {
        QueryRun                queryRun;
        QueryBuildDataSource    queryDataSource;

        queryRun = new QueryRun(_query);
        if (tmpMainAccount)
        {
            queryDataSource = queryRun.query().dataSourceTable(tableNum(MainAccount));
            queryDataSource = queryDataSource.addDataSource(tableNum(TmpMainAccount));
            queryDataSource.addLink(fieldNum(MainAccount, RecId), fieldNum(TmpMainAccount, MainAccount));
            queryDataSource.joinMode(JoinMode::ExistsJoin);
            queryRun.setCursor(tmpMainAccount);
        }

        if (conFind(_key, factureParamName))
        {
            queryDataSource = queryRun.query().dataSourceTable(tableNum(GeneralJournalAccountEntry));

            findOrCreateRange_W(queryDataSource,
                                fieldNum(GeneralJournalAccountEntry, PostingType),
                                con2Str([LedgerPostingType::Tax, LedgerPostingType::TaxReport]));
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTrans</Name>
				<Source><![CDATA[
        public Common splitTrans(Common _trans)
    {
        Common trans;

        return trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTransTableId</Name>
				<Source><![CDATA[
        public TableId subTransTableId()
    {
        return tablenum(GeneralJournalAccountEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        public TableId transTableId()
    {
        return tablenum(RLedgerJournalAccountEntryModule);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>