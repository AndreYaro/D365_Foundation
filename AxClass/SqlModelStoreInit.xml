<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SqlModelStoreInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SqlModelStoreInit Extends SqlDatabaseInit
{
    ODBCConnection odbccon;
    LoginProperty odbclogin;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSystemVariablesTable</Name>
				<Source><![CDATA[
        boolean createSystemVariablesTable()
    {
        SqlStatementExecutePermission ssep;

        str sqlString =  'CREATE TABLE SQLSYSTEMVARIABLES'
                     + '('
                     + '  PARM     ' + nvarChar+ '(30) '+ notNull    +  ','
                     + '  VALUE    ' + nvarChar+ '(254)'+ allowNull    + ','
                     + '  IPARM    ' + number + ' '    + allowNull    + ','
                     + '  IVALUE   ' + number + ' '    + allowNull    + ')';

        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqlString);
        ssep.assert();
        stmt.executeUpdate(sqlString);
        CodeAccessPermission::revertAssert();

        // Set up primary key for Oracle.
        sqlString = 'ALTER TABLE SQLSYSTEMVARIABLES ADD CONSTRAINT iSV ' + primaryKey + ' (PARM)';

        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqlString);
        ssep.assert();
        stmt.executeUpdate(sqlString);
        CodeAccessPermission::revertAssert();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doConnect</Name>
				<Source><![CDATA[
        private void doConnect()
    {
        odbccon = new ODBCConnection(odbcLogin);
        stmt = odbccon.createStatement();
        sqlSystem = new SqlSystem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new()
    {
        super();
        odbcLogin = new LoginProperty();
        dbId = DatabaseId::MS_Sql_Server;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatabaseid</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void setDatabaseid(DatabaseId value)
    {
        dbId = value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatabaseName</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void setDatabaseName(str databasename)
    {
        odbclogin.setDatabase(databasename);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setServerName</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void setServerName(str servername)
    {
        odbclogin.setServer(servername);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args args)
    {
        SqlModelStoreInit sv = new SqlModelStoreInit();
        boolean configMode = args.parmEnum();
        str parm = args.parm();
        int len = strlen(parm);
        int pos = strFind(parm, ',', 0, len);

        str host = substr(parm, 0, pos-1);
        str databasename = substr(parm, pos+1, len-pos+1);

        sv.setServerName(host);
        sv.setDatabaseName(databasename);
        sv.doConnect();

        sv.setDatabaseId(DatabaseId::MS_Sql_Server);

        if (configMode)
        {
            if (! sv.initSystemVariables())
                return;
        }
        else
        {
            sv.upgradeSystemVariables();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>