<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntrastatContext</c> class provides
/// additional context for the <c>Intrastat</c> table.
/// </summary>
internal final class IntrastatContext implements System.IDisposable
{
    private static IntrastatContext instance;

    private static int nestedCounter;

    private Map dataAreaIdMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    public static IntrastatContext instance()
    {
        if (!instance)
        {
            instance = new IntrastatContext();
        }

        nestedCounter++;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    public void dispose()
    {
        nestedCounter--;

        if (!nestedCounter)
        {
            instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    public static IntrastatContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSeqNumForDispatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current <c>IntrastatSeqNum</c> value for the specified <c>IntrastatDispatchId</c> in the current company.
    /// </summary>
    /// <param name = "_dispatchId">The shipment batch.</param>
    /// <returns>
    /// The current <c>IntrastatSeqNum</c> value.
    /// </returns>
    public IntrastatSeqNum getCurrentSeqNumForDispatchId(IntrastatDispatchId _dispatchId)
    {
        IntrastatSeqNum currentNum;

        Map currentSeqNumForDispatchIdMap = this.getCurrentSeqNumMap();

        if (currentSeqNumForDispatchIdMap.exists(_dispatchId))
        {
            currentNum = currentSeqNumForDispatchIdMap.lookup(_dispatchId);
        }

        return currentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incCurrentSeqNumForDispatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Increases the current <c>IntrastatSeqNum</c> value for the specified <c>IntrastatDispatchId</c> in the current company.
    /// </summary>
    /// <param name = "_dispatchId">The shipment batch.</param>
    public void incCurrentSeqNumForDispatchId(IntrastatDispatchId _dispatchId)
    {
        IntrastatSeqNum currentNum;

        Map currentSeqNumForDispatchIdMap = this.getCurrentSeqNumMap();

        if (currentSeqNumForDispatchIdMap.exists(_dispatchId))
        {
            currentNum = currentSeqNumForDispatchIdMap.lookup(_dispatchId);
        }

        currentSeqNumForDispatchIdMap.insert(_dispatchId, currentNum + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCached</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks caching of the value for the specified <c>IntrastatDispatchId</c> in the current company.
    /// </summary>
    /// <param name = "_dispatchId">The shipment batch.</param>
    /// <returns>
    /// true if the value is cached; otherwise, false.
    /// </returns>
    public boolean isCached(IntrastatDispatchId _dispatchId)
    {
        Map currentSeqNumForDispatchIdMap = this.getCurrentSeqNumMap();

        return currentSeqNumForDispatchIdMap.exists(_dispatchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSeqNumMap</Name>
				<Source><![CDATA[
    private Map getCurrentSeqNumMap()
    {
        Map retCurrentSeqNumForDispatchIdMap;

        if (!dataAreaIdMap)
        {
            dataAreaIdMap = new Map(Types::String, Types::Class);
        }

        if (dataAreaIdMap.exists(curExt()))
        {
            retCurrentSeqNumForDispatchIdMap = dataAreaIdMap.lookup(curExt());
        }
        else
        {
            retCurrentSeqNumForDispatchIdMap = new Map(Types::String, Types::Int64);

            dataAreaIdMap.insert(curExt(), retCurrentSeqNumForDispatchIdMap);
        }

        return retCurrentSeqNumForDispatchIdMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>