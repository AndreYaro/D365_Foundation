<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StockTransferPriceCalcTransferPrice_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>StockTransferPriceCalcTransferPrice_IN</c> class performs calculation of the Transfer price for Indian stock transfer.
/// </summary>
[StockTransferPriceCalcAttribute_IN(PriceType_IN::TransferPrice)]
internal final class StockTransferPriceCalcTransferPrice_IN extends StockTransferPriceCalc_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePrice</Name>
				<Source><![CDATA[
    protected StockTransferPrice_IN calculatePrice()
    {
        PriceCur itemPrice;
        CurrencyCode priceCurrencyCode = inventTransferLineIN.CurrencyCode;

        TransferPrice_IN transPrice = TransferPrice_IN::getTransferPrice_IN(
            inventTransferLine.TransferId,
            inventTransferLine.ItemId,
            inventDim.InventDimId,
            inventDim);

        if (transPrice)
        {
            UnitOfMeasureSymbol unitIDFrom = transPrice.Unit;
            EcoResProductUnitConverter unitConverter;

            //Round by currency, instead of rounding by unit.
            if (InventTransferOrdersFixRoundTransferPrice_INFlight::instance().isEnabled())
            {
                unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                    inventTransferLine.ItemId,
                    inventDim.InventDimId,
                    unitIDFrom,
                    inventTransferLineIN.UnitId,
                    NoYes::No,
                    NoYes::No);
            }
            else
            {
                unitConverter = EcoResProductUnitConverter::newGivenUnitSymbolsForReleasedProduct(
                    inventTransferLine.ItemId,
                    inventDim.InventDimId,
                    unitIDFrom,
                    inventTransferLineIN.UnitId);
            }

            if (!unitConverter.canValueBeConverted())
            {
                throw error(strFmt("@SYS28690", unitIDFrom, inventTransferLineIN.UnitId));
            }

            ExchRate exchRate = 1;
            CurrencyCode accountingCurrency = Ledger::accountingCurrency();

            if (transPrice.Currency != accountingCurrency)
            {
                ExchangeRateTypeRecId exchangeRateTypeRecId = Ledger::defaultExchangeRateType(CompanyInfo::findDataArea(curext()).RecId);

                ExchangeRateType exchangeRateType = ExchangeRateType::find(exchangeRateTypeRecId);

                ExchangeRateDisplayFactor exchangeRateDisplayFactor = ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(transPrice.Currency, accountingCurrency, exchangeRateType.RecId, true);

                exchRate = ExchangeRateHelper::exchRate(transPrice.Currency) / InventTransferLine::getNumericDisplayFactor(exchangeRateDisplayFactor);

                priceCurrencyCode = transPrice.Currency;
            }

            if (transPrice.MethodPriceTrans_IN == MethodPriceTrans_IN::CostPlus)
            {
                CostPrice costPrice = inventTransferLine.inventSumUnitPrice_IN();
                itemPrice = (costPrice + (costPrice * transPrice.Price / 100)) * exchRate ;
            }
            else
            {
                itemPrice = transPrice.Price * exchRate;
            }
            //Round by currency, instead of rounding by unit.
            if (InventTransferOrdersFixRoundTransferPrice_INFlight::instance().isEnabled())
            {
                //Convert price by unit first without rounding. Then do rounding per currency.
                itemPrice = unitConverter.convertValue(itemPrice);
                itemPrice = CurrencyExchangeHelper::price(itemPrice, priceCurrencyCode);
            }
            else
            {
                itemPrice = CurrencyExchangeHelper::price(itemPrice, priceCurrencyCode);
                itemPrice = unitConverter.convertValue(itemPrice);
            }
        }

        return StockTransferPrice_IN::construct(itemPrice, priceCurrencyCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>