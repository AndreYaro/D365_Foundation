<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerOpeningAccounts_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to load balances to the opening sheet.
/// </summary>
public final class LedgerOpeningAccounts_ES extends RunBaseBatch implements BatchRetryable
{
    private OpeningSheet_ES openingSheet;
    private NoYes deleteOld;
    private TransDate fromDate;
    private TransDate toDate;
    private Counter progressCounter;

    private CurrentOperationsTax postingLayer;

    private Voucher voucher;

    private QueryRun query;

    private DialogField dialogDeleteOld;

    private const Version CurrentVersion = 2;

    #LOCALMACRO.CurrentList
                           OpeningSheet,
                           FromDate,
                           ToDate,
                           DeleteOld,
                           postingLayer
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase    dialog = super();

        dialogDeleteOld = dialog.addFieldValue(enumstr(NoYes),deleteOld,"@SYS12912");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays operation progress.
    /// </summary>
    /// <param name = "_mainAccountId">The main account.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void displayProgress(MainAccountNum _mainAccountId)
    {
        this.progressUpdate(strfmt("@SYS24991", _mainAccountId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        deleteOld = dialogDeleteOld.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        #ISOCountryRegionCodes
        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoES, GlobalizationConstants::FeatureReferenceES00006] ],
            funcName()
        );

        query = new QueryRun(querystr(LedgerOpeningAccounts_ES));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [CurrentVersion,#CurrentList,query.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    OpeningSheet_ES parmOpeningSheet(OpeningSheet_ES _openingSheet = openingSheet)
    {
        openingSheet = _openingSheet;
        return openingSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the posting layer value.
    /// </summary>
    /// <param name = "_currentOperationsTax">A <c>CurrentOperationsTax</c> enumeration value.</param>
    /// <returns>A <c>CurrentOperationsTax</c> enumeration value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _currentOperationsTax = CurrentOperationsTax::Current)
    {
        postingLayer = _currentOperationsTax;

        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the progress bar.
    /// </summary>
    /// <param name = "text">The progress bar text.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        MainAccount                     mainAccount;
        LedgerOpeningTable_ES           ledgerOpeningTable;
        QueryRun                        mainAccountQuery;
        LedgerOpeningSheet_ES           ledgerOpeningSheet;
        Counter                         progressTotal;
        QueryRun                        queryProgress;
        Query                           queryCopy;
        LedgerBalanceMainAccountAmounts ledgerBalance;
        boolean                         isPostingAccount;

        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        try
        {
            ttsbegin;
            queryCopy = query.query();
            queryProgress = new QueryRun(queryCopy);

            queryProgress.setRecord(mainAccount);

            progressTotal = 0;

            while (queryProgress.next())
            {
                progressTotal++;
            }

            this.progressInit("@SYS25781", progressTotal, #AviFormLetter);
            progress.setText("@SYS26577");

            ledgerOpeningSheet = LedgerOpeningSheet_ES::find(openingSheet);

            if (deleteOld)
            {
                if (ledgerOpeningSheet.validateDelete())
                {
                    progress.setText("@SYS4196");
                    while select forupdate ledgerOpeningTable
                        where ledgerOpeningTable.Sheet == openingSheet
                    {
                        ledgerOpeningTable.delete(false, false);
                    }
                }
                else
                    throw error("@SYS25904");
            }

            ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
            ledgerBalance.parmAccountingDateRange(fromDate, toDate);
            ledgerBalance.parmIncludeRegularPeriod(true);
            ledgerBalance.parmIncludeOpeningPeriod(true);
            ledgerBalance.parmIncludeClosingPeriod(true);
            ledgerBalance.parmPostingLayerList(con2List([postingLayer]));

            mainAccountQuery = query;
            mainAccountQuery.setRecord(mainAccount);
            while (mainAccountQuery.next())
            {
                isPostingAccount = !mainAccount.isNonPostingAccount();
                this.displayProgress(mainAccount.MainAccountId);

                select firstonly forupdate ledgerOpeningTable
                    where ledgerOpeningTable.Sheet       == openingSheet &&
                          ledgerOpeningTable.MainAccount == mainAccount.RecId;

                ledgerOpeningTable.Sheet         = openingSheet;
                ledgerOpeningTable.MainAccount   = mainAccount.RecId;
                ledgerOpeningTable.AccountType   = mainAccount.Type;
                ledgerOpeningTable.Reconciled    = !isPostingAccount;

                ledgerOpeningTable.TrialBalanceSheet = 0;
                if (isPostingAccount)
                {
                    ledgerBalance.calculateBalance(mainAccount);
                    ledgerOpeningTable.TrialBalanceSheet = ledgerBalance.getAccountingCurrencyBalance();
                    ledgerOpeningTable.Result = 0;
                    ledgerOpeningTable.autoEnd();
                }
                if (! ledgerOpeningTable)
                {
                    ledgerOpeningTable.insert(false, false);
                }
                else
                    ledgerOpeningTable.update(false, false);
            }

            select firstonly forupdate ledgerOpeningSheet
                where ledgerOpeningSheet.Sheet == openingSheet;

            ledgerOpeningSheet.updateBalances();
            ledgerOpeningSheet.update();

            ttscommit;
            progress = null;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend the <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c>
    ///    method and return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer          version         = conpeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (packedQuery)
                {
                    query = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        if (voucher)
        {
            return checkFailed("@SYS321285");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS321298";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerOpeningAccounts_ES ledgerOpeningAccounts;

        switch (args.dataset())
        {
            case tablenum(LedgerOpeningSheet_ES):
                ledgerOpeningAccounts  = LedgerOpeningAccounts_ES::newLedgerOpeningTable_ES(args.record());
                break;

            default:
                throw error("@SYS18626");
        }

        if (ledgerOpeningAccounts.validate())
        {
            if (ledgerOpeningAccounts.prompt())
            {
                ledgerOpeningAccounts.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerOpeningTable_ES</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static LedgerOpeningAccounts_ES newLedgerOpeningTable_ES(LedgerOpeningSheet_ES _ledgerOpeningSheet)
    {
        LedgerOpeningAccounts_ES ledgerOpeningAccounts;

        ledgerOpeningAccounts = new LedgerOpeningAccounts_ES();

        ledgerOpeningAccounts.getLast();

        ledgerOpeningAccounts.parmOpeningSheet(_ledgerOpeningSheet.Sheet);
        ledgerOpeningAccounts.parmFromDate(_ledgerOpeningSheet.FromDate);
        ledgerOpeningAccounts.parmToDate(_ledgerOpeningSheet.ToDate);
        ledgerOpeningAccounts.parmPostingLayer(_ledgerOpeningSheet.CurrentOperationsTax);
        ledgerOpeningAccounts.parmVoucher(_ledgerOpeningSheet.Voucher);

        return ledgerOpeningAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>