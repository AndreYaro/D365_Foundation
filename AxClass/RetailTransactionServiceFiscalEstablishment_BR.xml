<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceFiscalEstablishment_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
///  The <c>RetailTransactionServiceFiscalEstablishment_BR</c> implements the fiscal establishment related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
internal static final class RetailTransactionServiceFiscalEstablishment_BR
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTechnicalResponsibleCSRT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the technical responsible CSRT.
    /// </summary>
    /// <param name = "_fiscalEstablishmentId">The fiscal establishment id.</param>
    /// <returns>The result container.</returns>
    public static container getTechnicalResponsibleCSRT(str _fiscalEstablishmentId)
    {
        boolean success;
        int infologLine;
        str errorMessage;
        str csrt;

        try
        {
            infologLine = Global::infologLine();

            FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalEstablishmentId);
            if (fiscalEstablishment)
            {
                csrt = fiscalEstablishment.getTechnicalResponsibleCSRT();
            }

            success = true;
        }
        catch (Exception::Error)
        {
            success = false;
            errorMessage = RetailUtilities::getInfologMessages(infologLine);
            eventSource.EventWriteFiscalEstablishmentGetTechnicalResponsibleCSRTError(errorMessage);
        }
        catch (Exception::CLRError)
        {
            success = false;
            System.Exception clrException = RetailUtilities::getLatestClrException();
            errorMessage = clrException.get_Message();
            eventSource.EventWriteFiscalEstablishmentGetTechnicalResponsibleCSRTError(errorMessage);
        }

        return [success, errorMessage, csrt];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumerEFDocCsc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the consumer electronic fiscal document csc.
    /// </summary>
    /// <param name = "_fiscalEstablishmentId">The fiscal establishment id.</param>
    /// <returns>The result container.</returns>
    public static container getConsumerEFDocCsc(str _fiscalEstablishmentId)
    {
        boolean success;
        int infologLine;
        str errorMessage;
        str csc;

        try
        {
            infologLine = Global::infologLine();

            FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(_fiscalEstablishmentId);
            if (fiscalEstablishment)
            {
                csc = appl.DecryptFromStringForPurpose(fiscalEstablishment.ConsumerEFDocCsc, EFDocCscEncryptor_BR::EFDocCscEncryptionPurpose);
            }

            success = true;
        }
        catch (Exception::Error)
        {
            success = false;
            errorMessage = RetailUtilities::getInfologMessages(infologLine);
            eventSource.EventWriteFiscalEstablishmentGetConsumerEFDocCscError(errorMessage);
        }
        catch (Exception::CLRError)
        {
            success = false;
            System.Exception clrException = RetailUtilities::getLatestClrException();
            errorMessage = clrException.get_Message();
            eventSource.EventWriteFiscalEstablishmentGetConsumerEFDocCscError(errorMessage);
        }

        return [success, errorMessage, csc];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>