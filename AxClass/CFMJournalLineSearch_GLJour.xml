<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalLineSearch_GLJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CFMJournalLineSearch_GLJour extends CFMJournalLineSearch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accType</Name>
				<Source><![CDATA[
    abstract protected CFMPaymentAccountType accType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractGLJour parmContract = new CFMJournalProtoTransParmContractGLJour();

        parmContract.parmLedgerJournalTrans(_queryRun.get(tableNum(LedgerJournalTrans)));

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryList</Name>
				<Source><![CDATA[
    protected void initQueryList()
    {
        queryList.addEnd(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeByAccType</Name>
				<Source><![CDATA[
    private void rangeByAccType(QueryBuildDatasource _qbds, FieldId _fieldIdAccType, CFMPaymentAccountType _accType)
    {
        switch (_accType)
        {
            case CFMPaymentAccountType::Bank:
                findOrCreateRange_W(_qbds, _fieldIdAccType, queryValue(LedgerJournalACType::Bank));
                break;

            case CFMPaymentAccountType::Cash_RU:
                findOrCreateRange_W(_qbds, _fieldIdAccType, queryValue(LedgerJournalACType::RCash));
                break;

            default:
                throw error(funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query query = new Query();

        query = new Query();
        query.queryType(QueryType::Union);

        QueryBuildDataSource qbdsLedgerJournalTrans = query.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.unionType(QueryType::Union);

        qbdsLedgerJournalTrans.addSelectionField(fieldNum(LedgerJournalTrans, AmountCurDebit), SelectionField::Sum);
        qbdsLedgerJournalTrans.addSelectionField(fieldNum(LedgerJournalTrans, AmountCurCredit), SelectionField::Sum);

        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, CurrencyCode));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, LedgerDimension));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, DefaultDimension));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, AccountType));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, DataAreaId));

        filter.setDateIntervalOpenBankCashJour(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, TransDate));
        filter.setPaymentFilterOnLedgerDim(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, LedgerDimension), this.accType());
        this.rangeByAccType(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, AccountType), this.accType());

        QueryBuildRange qbr = qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, AmountCurDebit));
        qbr.value(strFmt('(%1.%2 %3) || (%1.%4 %5)',
                         qbdsLedgerJournalTrans.name(),
                         fieldStr(LedgerJournalTrans, AmountCurDebit),
                         cashFlowDirection == CFMCashFlowDirection::Inflow ? '>0' : '<0',
                         fieldStr(LedgerJournalTrans, AmountCurCredit),
                         cashFlowDirection == CFMCashFlowDirection::Inflow ? '<0' : '>0'));

        QueryBuildDataSource qbdsLedgerJournalTable = qbdsLedgerJournalTrans.addDataSource(tableNum(LedgerJournalTable));
        qbdsLedgerJournalTable.joinMode(JoinMode::ExistsJoin);
        qbdsLedgerJournalTable.relations(true);
        qbdsLedgerJournalTable.addRange(fieldNum(LedgerJournalTable, Posted)).value(queryValue(NoYes::No));

        qbdsLedgerJournalTrans = query.addDataSource(tableNum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.unionType(QueryType::Union);

        //order of selection fields changed!
        qbdsLedgerJournalTrans.addSelectionField(fieldNum(LedgerJournalTrans, AmountCurCredit), SelectionField::Sum);
        qbdsLedgerJournalTrans.addSelectionField(fieldNum(LedgerJournalTrans, AmountCurDebit), SelectionField::Sum);

        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, CurrencyCode));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, OffsetLedgerDimension));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, OffsetDefaultDimension));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, OffsetAccountType));
        qbdsLedgerJournalTrans.addGroupByField(fieldNum(LedgerJournalTrans, DataAreaId));

        filter.setDateIntervalOpenBankCashJour(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, TransDate));
        filter.setPaymentFilterOnLedgerDim(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, OffsetLedgerDimension), this.accType());
        this.rangeByAccType(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, OffsetAccountType), this.accType());

        qbr = qbdsLedgerJournalTrans.addRange(fieldNum(LedgerJournalTrans, AmountCurDebit));
        qbr.value(strFmt('(%1.%2 %3) || (%1.%4 %5)',
                         qbdsLedgerJournalTrans.name(),
                         fieldStr(LedgerJournalTrans, AmountCurDebit),
                         cashFlowDirection == CFMCashFlowDirection::Outflow ? '>0' : '<0',
                         fieldStr(LedgerJournalTrans, AmountCurCredit),
                         cashFlowDirection == CFMCashFlowDirection::Outflow ? '<0' : '>0'));

        qbdsLedgerJournalTable = qbdsLedgerJournalTrans.addDataSource(tableNum(LedgerJournalTable));
        qbdsLedgerJournalTable.joinMode(JoinMode::ExistsJoin);
        qbdsLedgerJournalTable.relations(true);
        qbdsLedgerJournalTable.addRange(fieldNum(LedgerJournalTable, Posted)).value(queryValue(NoYes::No));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>