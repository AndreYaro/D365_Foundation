<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMLineConsumption</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>BOMLineConsumption</c> implements functionality for computing the consumption for one BOM line.
/// </summary>
class BOMLineConsumption
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomConsumptionInInventUnit</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates the total consumption for the current bill of materials line.
    /// </summary>
    /// <param name="_bom">
    /// A <c>BOM</c> record that contains the BOM line data.
    /// </param>
    /// <param name="_bomCalcData">
    /// A <c>BOMCalcData</c> object that holds settings for the calculation and the parent item.
    /// </param>
    /// <param name="_accumulatedErrorFactor">
    /// A real value that holds the accumulated error factor; optional.
    /// </param>
    /// <param name="_toUnitId">
    /// A string value that holds an unit ID; optional.
    /// </param>
    /// <param name="_pmfYieldPct">
    /// The yield percentage; optional.
    /// </param>
    /// <param name="_pmfApplyYieldPct">
    /// A <c>boolean</c> value that determines if the yield percentage should be applied; optional.
    /// </param>
    /// <param name="_bomTable">
    /// A <c>BOMTable</c> record; optional.
    /// </param>
    /// <returns>
    /// A real value that holds the total consumption in inventory unit or convertet to the specified unit.
    /// </returns>
    public InventQtyConsumption bomConsumptionInInventUnit(
        BOM                 _bom,
        BOMCalcData         _bomCalcData,
        Factor              _accumulatedErrorFactor = 1,
        UnitOfMeasureSymbol _toUnitId               = InventTable::find(_bom.ItemId).inventUnitId(),
        PmfYieldPct         _pmfYieldPct            = 100,
        boolean             _pmfApplyYieldPct       = false,
        BOMTable            _bomTable               = null
        )
    {
        BOMCalcConsumption      bomCalcConsumption;
        BOMQty                  consumptionQty;

        bomCalcConsumption = BOMCalcConsumption::construct(_bom.Formula,
                                                           _bomCalcData,
                                                           _pmfYieldPct,
                                                           _pmfApplyYieldPct,
                                                           _bomTable);

        consumptionQty     = bomCalcConsumption.calcConsumption(_bom, _accumulatedErrorFactor);
        if (_bom.UnitId != _toUnitId)
        {
            consumptionQty     = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_bom.ItemId,
                                                                                                       _bom.InventDimId,
                                                                                                       consumptionQty,
                                                                                                       _bom.UnitId,
                                                                                                       _toUnitId,
                                                                                                       NoYes::Yes,
                                                                                                       NoYes::No);
        }
        return consumptionQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMLineConsumption construct()
    {
        return new BOMLineConsumption();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>