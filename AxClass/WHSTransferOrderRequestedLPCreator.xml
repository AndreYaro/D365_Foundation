<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferOrderRequestedLPCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferOrderRequestedLPCreator</c> class is responsible for creating requested license plates for a transfer order.
/// </summary>
class WHSTransferOrderRequestedLPCreator
{
    InventTransferId transferId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRequestedLicensePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the requested license plates.
    /// </summary>
    public void createRequestedLicensePlates()
    {
        InventTransferLine                  inventTransferLine;
        RetailBuyersPushLineQty             retailBuyersPushLineQty;
        RetailBuyersPushLine                retailBuyersPushLine;
        PurchLine                           purchLine;
        RetailPackagePurch                  retailPackagePurch;
        Qty                                 packageFactor, pushedNumberOfPackages;

        ttsBegin;

        //always start all over if we auto create licenseplates for a transfer order
        this.deleteRequestedLicensePlates();

        Map combinedDeliveryLinesPackages = new Map(Types::Int64, Types::Integer);

        while select CombinedTransferOrderLineDelivery from inventTransferLine
            where inventTransferLine.TransferId == this.parmTransferId()
            &&    inventTransferLine.CombinedTransferOrderLineDelivery != 0
        join Qty from RetailBuyersPushLineQty
            where RetailBuyersPushLineQty.RecId     == inventTransferLine.RetailReplenishRefRecId
            &&    RetailBuyersPushLineQty.tableId   == inventTransferLine.RetailReplenishRefTableId
        join tableId from RetailBuyersPushLine
            where RetailBuyersPushLine.BuyersPushId == RetailBuyersPushLineQty.BuyersPushId
            &&    RetailBuyersPushLine.LineNum      == RetailBuyersPushLineQty.LineNum
        join PurchQty from purchLine
            where purchLine.RecId == RetailBuyersPushLine.RefRecId
            &&    purchLine.PurchQty > 0
        join Qty from RetailPackagePurch
            where retailPackagePurch.LineNum == purchLine.RBOPackageLineNum
                &&  retailPackagePurch.PurchId    == purchLine.PurchId
                &&  retailPackagePurch.PackageId == purchLine.RetailPackageId
                &&  retailPackagePurch.Qty > 0
        {
            if (!combinedDeliveryLinesPackages.exists(inventTransferLine.CombinedTransferOrderLineDelivery))
            {
                //determine how much purchQty is in one package - we assume that the purchlines qty is in sync with the quantity on its related package
                packageFactor = purchLine.PurchQty/ RetailPackagePurch.Qty;

                //how many packages does the pushed qty correspond to?
                pushedNumberOfPackages = RetailBuyersPushLineQty.Qty/packageFactor;

                combinedDeliveryLinesPackages.insert(inventTransferLine.CombinedTransferOrderLineDelivery, pushedNumberOfPackages);
            }
        }

        //create the combined packages
        MapEnumerator me = combinedDeliveryLinesPackages.getEnumerator();

        while (me.moveNext())
        {
            this.createRequestedLPForCombinedDelivery(me.currentKey(),me.currentValue());
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRequestedLPForCombinedDelivery</Name>
				<Source><![CDATA[
    private void createRequestedLPForCombinedDelivery(
        InventTransferCombinedLineDeliveryRecID _inventTransferCombinedLineDeliveryRecID,
        int                                     _numberOfLicensePlates)
    {
        InventTransferRequestedLicensePlate     invenTransferRequestedLicensePlate;
        int                                     i;

        for (i = 0; i < _numberOfLicensePlates; i++)
        {
            invenTransferRequestedLicensePlate.clear();
            invenTransferRequestedLicensePlate.CombinedTransferOrderLineDelivery = _inventTransferCombinedLineDeliveryRecID;
            invenTransferRequestedLicensePlate.RequestedLicensePlateID = this.getNumberSeqExt().num(WHSNumberSeqExtParameters::emptyParameters());
            invenTransferRequestedLicensePlate.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRequestedLicensePlates</Name>
				<Source><![CDATA[
    private void deleteRequestedLicensePlates()
    {
        InventTransferRequestedLicensePlate     inventTransferRequestedLicensePlate;
        InventTransferLine                      inventTransferLine;

        delete_from inventTransferRequestedLicensePlate
            exists join inventTransferLine
            where inventTransferLine.TransferId == this.parmTransferId()
            &&    inventTransferLine.CombinedTransferOrderLineDelivery == inventTransferRequestedLicensePlate.CombinedTransferOrderLineDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeq</Name>
				<Source><![CDATA[
    private NumberSeq getNumberSeq()
    {
        return NumberSeq::newGetNum(WHSParameters::numRefWHSLicensePlateId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSeqExt</Name>
				<Source><![CDATA[
    private WHSNumberSeqExt getNumberSeqExt()
    {
        return WHSNumberSeqExt::newGetNum(WHSParameters::numRefWHSLicensePlateId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferId</Name>
				<Source><![CDATA[
    public InventTransferId parmTransferId(InventTransferId _transferId = transferId)
    {
        transferId = _transferId;

        return transferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSTransferOrderRequestedLPCreator construct()
    {
        return new whsTransferOrderRequestedLPCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSTransferOrderRequestedLPCreator</c> class.
    /// </summary>
    /// <param name="_transferId">
    /// A transfer ID for which requested license plates should be created.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSTransferOrderRequestedLPCreator</c> class.
    /// </returns>
    public static WHSTransferOrderRequestedLPCreator newFromTransferId(InventTransferId _transferId)
    {
        WHSTransferOrderRequestedLPCreator whsTransferOrderRequestedLPCreator = whsTransferOrderRequestedLPCreator::construct();
        whsTransferOrderRequestedLPCreator.parmTransferId(_transferId);

        return whsTransferOrderRequestedLPCreator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>