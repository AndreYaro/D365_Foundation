<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLCType</c> class is the business class of the <c>BankLC</c> table.
/// </summary>
abstract class BankLCType extends Object
{
    BankLCRefRecId  bankLCRecId;
    BankLC          bankLC;
    BankLCInfo      bankLCInfo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>BankLCLine</c> records for a letter of credit.
    /// </summary>
    public abstract void createShipmentLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an invoice related to a letter of credit can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The document.
    /// </param>
    /// <returns>
    ///    true if the invoice can be posted; otherwise, false.
    /// </returns>
    protected boolean doValidateUpdateInvoice(FormletterParmTable _formletterParmTable)
    {
        boolean ok = true;

        BankLCLine bankLCLineLocal = BankLCLine::find(_formletterParmTable.BankLCLine);

        VendInvoiceInfoLine vendInvoiceInfoLine;
        select firstonly LineType from vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _formletterParmTable.ParmId
            && vendInvoiceInfoLine.TableRefId == _formletterParmTable.TableRefId
            && vendInvoiceInfoLine.OrigPurchId == _formletterParmTable.OrderId;

        if (vendInvoiceInfoLine.LineType != PurchInvoiceLineType::Advance)
        {
            ok = this.validateUpdateTrans(_formletterParmTable);
            if (ok)
            {
                if (!bankLCLineLocal)
                {
                    // The order %1 referenced by Invoice is marked to use
                    // Letter of Credit / Import Collection.
                    // Letter of Credit shipment number must be selected for this invoice.
                    ok = checkFailed(strFmt("@SYS316188", _formletterParmTable.OrderId));
                }
            }

            if (ok)
            {
                if (!bankLCLineLocal.isUpdateInvoiceAllowed())
                {
                    // The Letter of Credit shipment used for Order %1 is invalid.
                    // The shipment status does not allow to post invoice.
                    ok = checkFailed(strFmt("@SYS316189", _formletterParmTable.OrderId, bankLCLineLocal.LineNum));
                }
            }
        }

        if (ok && bankLCLineLocal)
        {
            AmountCur amountInInvoice = this.getInvoiceAmount(_formletterParmTable);
            if (abs(bankLCLineLocal.ShipmentAmountCur - amountInInvoice) > bankLCLineLocal.getBankLCToleranceAmountCur())
            {
                // The total amount (%1) in the invoice for Order %2 is not equal
                // the shipment amount (%3) of Letter of Credit shipment %4.
                ok = checkFailed(
                        strFmt(
                            "@SYS316190",
                            amountInInvoice,
                            _formletterParmTable.OrderId,
                            bankLCLineLocal.ShipmentAmountCur,
                            bankLCLineLocal.LineNum
                            ));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdatePackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a packing slip related to a letter of credit can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The document.
    /// </param>
    /// <returns>
    ///    true if the packing slip can be posted; otherwise, false.
    /// </returns>
    protected boolean doValidateUpdatePackingSlip(FormletterParmTable _formletterParmTable)
    {
        boolean    ok = true;
        BankLCLine bankLCLine;
        AmountCur  amountInPackingSlip;

        ok = this.validateUpdateTrans(_formletterParmTable);

        if (ok)
        {
            bankLCLine = bankLCLine::find(_formletterParmTable.BankLCLine);
            if (!bankLCLine || bankLCLine.RecId == 0)
            {
                // The Order %1 referenced by this Packing Slip is marked to use
                // Letter of Credit / Import Collection.
                // Letter of Credit shipment number must be selected for this packing slip.
                ok = checkFailed(strFmt("@SYS316184", _formletterParmTable.OrderId));
            }
        }

        if (ok)
        {
            if (!bankLCLine.isUpdatePackingslipAllowed())
            {
                // The Letter of Credit shipment used for Order %1 is invalid.
                // The shipment status of the Letter of Credit shipment must be set as Open.
                ok = checkFailed(strFmt("@SYS316185", _formletterParmTable.OrderId, bankLCLine.LineNum));
            }
        }

        if (ok)
        {
            amountInPackingSlip = this.getPackingSlipAmount(_formletterParmTable);

            if (abs(bankLCLine.ShipmentAmountCur - amountInPackingSlip) > bankLCLine.getBankLCToleranceAmountCur())
            {
                // The total amount (%1) in the packing slip for order %2 is not equal
                // the shipment amount (%3) of Letter of Credit shipment %4.
                ok = checkFailed(
                        strFmt(
                            "@SYS316186",
                            amountInPackingSlip,
                            _formletterParmTable.OrderId,
                            bankLCLine.ShipmentAmountCur,
                            bankLCLine.LineNum
                            ));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateUpdatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that a payment that is related to the Letter of Credit is valid to post.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false
    /// </returns>
    protected boolean doValidateUpdatePayment(RecId _ledgerJournalTransRefRecId)
    {
        boolean                     allOk = true;
        LedgerJournalTrans          ledgerJournalTransLocal;
        LedgerJournalTransBankLC    ledgerJournalTransBankLCLocal;
        BankLC                      bankLCLocal;
        BankLCLine                  bankLCLineLocal;
        AmountCur                   amount;

        ledgerJournalTransLocal = LedgerJournalTrans::findRecId(_ledgerJournalTransRefRecId, false);

        if (!ledgerJournalTransLocal || ledgerJournalTransLocal.RecId == 0)
        {
            // The payment could not be found.
            allOk = checkFailed("@SYS321199");
        }

        if (allOk)
        {
            ledgerJournalTransBankLCLocal = ledgerJournalTransLocal.getLedgerJournalTransBankLC();
            if (ledgerJournalTransBankLCLocal.BankLCLine == 0)
            {
                // System could not find the required Letter of Cedit.
                allOk = checkFailed("@SYS321185");
            }
        }

        if (allOk)
        {
            bankLCLineLocal =  ledgerJournalTransBankLCLocal.getBankLCLine();
            if (!bankLCLineLocal || bankLCLineLocal.RecId == 0)
            {
                // System could not find the required Letter of Cedit.
                allOk = checkFailed("@SYS321185");
            }
        }

        if (allOk)
        {
            bankLCLocal = bankLCLineLocal.getBankLC();
            if (!bankLCLocal.isSettlementAllowed())
            {
                // Settlement transaction could not be posted due to Letter of Credit is
                // either not confirmed or still has unallocated margin transactions.
                allOk = checkFailed("@SYS321187");
            }
        }

        if (allOk)
        {
            if (ledgerJournalTransLocal.CurrencyCode != bankLCLocal.getCurrencyCode())
            {
                // The currency used for Letter of Credit Settlement tranaction
                // does not match the currecy code used for Letter of Credit.
                allOk = checkFailed("@SYS321188");
            }
        }

        if (allOk)
        {

            amount = this.getPaymentAmount(ledgerJournalTransLocal);
            if (abs(bankLCLineLocal.ShipmentAmountCur - amount) > bankLCLineLocal.getBankLCToleranceAmountCur())
            {
                // The difference between payment amount and shipment amount cannot exceed the tolerance.
                allOk = checkFailed("@ApplicationSuite_Localization:ToleranceValidation");
            }
        }

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the invoice.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The invoice document.
    /// </param>
    /// <returns>
    ///    The invoice amount.
    /// </returns>
    protected abstract AmountCur getInvoiceAmount(FormletterParmTable _formletterParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingSlipAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the packing slip.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The packing slip document.
    /// </param>
    /// <returns>
    ///    The packing slip amount.
    /// </returns>
    protected abstract AmountCur getPackingSlipAmount(FormletterParmTable _formletterParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount of the payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The payment record to get the amount.
    /// </param>
    /// <returns>
    ///    The amount of payment.
    /// </returns>
    protected AmountCur getPaymentAmount(LedgerJournalTrans _ledgerJournalTrans)
    {
        AmountCur ret;

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                ret = -_ledgerJournalTrans.amount();
                break;
            case LedgerJournalACType::Vend :
                ret = _ledgerJournalTrans.amount();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the letter of credit record buffer is loaded.
    /// </summary>
    /// <returns>
    ///    true the record buffer is loaded; otherwise, false.
    /// </returns>
    public boolean isDataLoaded()
    {
        return bankLC && bankLC.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBankLCInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the <c>BankLCInfo</c> record that is related to this letter of credit.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    The loaded <c>BankLCInfo</c> record.
    /// </returns>
    protected BankLCInfo loadBankLCInfo(boolean _forUpdate = false)
    {
        BankLCInfo bankLCInfoLocal;

        bankLCInfoLocal = this.parmBankLCInfo(BankLCInfo::findByBankLC(bankLCRecId, _forUpdate));

        return bankLCInfoLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLC</Name>
				<Source><![CDATA[
        protected BankLC parmBankLC(BankLC _bankLC = bankLC)
    {
        this.parmBankLCRecId(_bankLC.RecId);
        bankLC = _bankLC;
        if (bankLCInfo
            && bankLCInfo.RecId != 0)
        {
            this.loadBankLCInfo();
        }
        return bankLC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCInfo</Name>
				<Source><![CDATA[
        public BankLCInfo parmBankLCInfo(BankLCInfo _bankLCInfo = bankLCInfo)
    {
        bankLCInfo = _bankLCInfo;
        return bankLCInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCRecId</Name>
				<Source><![CDATA[
        public BankLCRefRecId parmBankLCRecId(BankLCRefRecId _bankLCRecId = bankLCRecId)
    {
        if (bankLCRecId != _bankLCRecId)
        {
            bankLC = null;
            bankLCInfo = null;
            bankLCRecId = _bankLCRecId;
        }

        return bankLCRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reLoadBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reloads the <c>BankLC</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to reload the <c>BankLCInfo</c> record; optional.
    /// </param>
    protected void reLoadBankLC(
        boolean _forUpdate  = false,
        boolean _isLoadInfo = false)
    {
        BankLC bankLCLocal;

        bankLCLocal = this.parmBankLC();

        if (this.isDataLoaded())
        {
            bankLCLocal.reread();

            bankLCLocal.selectForUpdate(_forUpdate);

            if (_isLoadInfo)
            {
                this.reLoadBankLCInfo(_forUpdate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reLoadBankLCInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reloads the <c>BankLCInfo</c> record
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    protected void reLoadBankLCInfo(boolean _forUpdate = false)
    {
        if (bankLCInfo && bankLCInfo.RecId != 0)
        {
            bankLCInfo.selectForUpdate(_forUpdate);
            bankLCInfo.reread();
        }
        else
        {
            this.loadBankLCInfo(_forUpdate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoicePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCLine</c> record after the invoice has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCLine</c> record that is marked on the invoice.
    /// </param>
    public abstract void updateInvoicePosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePackingSlipPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCLine</c> record after the packing slip has been posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCLine</c> record that is marked on the packing slip.
    /// </param>
    public abstract void updatePackingSlipPosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentPosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>BankLCLine</c> record after the payment is posted.
    /// </summary>
    /// <param name="_bankLCLineRefRecId">
    ///    The record ID of the <c>BankLCLine</c> table that is marked on the payment.
    /// </param>
    public abstract void updatePaymentPosted(BankLCLineRefRecId _bankLCLineRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a Letter of Credit can be confirmed.
    /// </summary>
    /// <returns>
    ///    true if the Letter of Credit can be confirmed; otherwise, false.
    /// </returns>
    protected boolean validateConfirmation()
    {
        boolean ok = true;

        ok = this.validateTableFieldsWhenConfirm();

        if (ok)
        {
            ok = this.validateLinesWhenConfirm();
        }

        if (ok)
        {
            ok = this.validateLCAmountWithOrder();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLCAmountWithOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the amount of the Letter of Credit equals the amount of the order.
    /// </summary>
    /// <returns>
    ///    true if the amounts are equal; otherwise, false.
    /// </returns>
    protected boolean validateLCAmountWithOrder()
    {
        BankLCToleranceAmountCur bankLCToleranceAmountCur;
        boolean ok = true;

        if (bankLC.ToleranceAmountCur)
        {
            bankLCToleranceAmountCur = abs(bankLC.ToleranceAmountCur);
        }

        if (bankLC.TolerancePercentage)
        {
            bankLCToleranceAmountCur = abs( bankLC.getTotalOrderAmount() * (bankLC.TolerancePercentage/100));
        }

        if (abs(bankLC.getTotalShipmentAmount() - bankLC.getTotalOrderAmount()) > bankLCToleranceAmountCur)
        {
            // The total amount of Letter of Credit shipment Lines is not equal to the order amount.
            ok = checkFailed("@SYS316195");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineFieldsWhenConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the fields of the <c>BankLCLine</c> record are valid for confirmation.
    /// </summary>
    /// <param name="_bankLCLine">
    ///    The shipment line to validate.
    /// </param>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected boolean validateLineFieldsWhenConfirm(BankLCLine _bankLCLine)
    {
        boolean ok = true;
        BankLC  bankLCLocal;

        bankLCLocal = this.parmBankLC();

        if (_bankLCLine.ActualMaturityDateTime    == DateTimeUtil::minValue()
            || _bankLCLine.ActualMaturityDateTime > bankLCLocal.ExpiryDateTime)
        {
            // The shipment actual maturity date cannot be greater than Letter of Credit expiry date.
            ok = checkFailed("@SYS316198");
        }

        if (ok)
        {
            if (_bankLCLine.ShipmentAmountCur == 0)
            {
                // The shipment amount could not be zero.
                ok = checkFailed("@SYS316199");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLinesWhenConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>BankLCLine</c> lines are valid for confirmation.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected abstract boolean validateLinesWhenConfirm()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTableFieldsWhenConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the fields of the <c>BankLC</c> table are valid for confirmation.
    /// </summary>
    /// <returns>
    ///    true if the validation passes; otherwise, false.
    /// </returns>
    protected boolean validateTableFieldsWhenConfirm()
    {
        boolean ok = true;
        BankLC  bankLCLocal;

        bankLCLocal = this.parmBankLC();

        if (bankLCLocal.BankLCNumber == '')
        {
            // Letter of Credit number could not be empty.
            ok = checkFailed("@SYS316196");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the invoice related to the Letter of Credit can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The invoice to validate.
    /// </param>
    /// <returns>
    ///    true if the invoice can be posted; otherwise, false.
    /// </returns>
    public abstract boolean validateUpdateInvoice(FormletterParmTable _formletterParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the packing slip related to the letter of credit can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The packing slip to validate.
    /// </param>
    /// <returns>
    ///    true if the packing slip can be posted; otherwise, false.
    /// </returns>
    public abstract boolean validateUpdatePackingSlip(FormletterParmTable _formletterParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdatePayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the payment related to the  Letter of Credit is valid to post.
    /// </summary>
    /// <param name="_ledgerJournalTransRefRecId">
    ///    The payment line.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public abstract boolean validateUpdatePayment(RecId _ledgerJournalTransRefRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUpdateTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the specified invoice or packing slip can be posted.
    /// </summary>
    /// <param name="_formletterParmTable">
    ///    The document to validate.
    /// </param>
    /// <returns>
    ///    true if the invoice or packing slip can be posted; otherwise, false.
    /// </returns>
    protected boolean validateUpdateTrans(FormletterParmTable _formletterParmTable)
    {
        boolean  ok = true;
        BankLC   bankLCLocal;

        if (ok)
        {
            if (!_formletterParmTable.BankLCLine)
            {
                // Order %1 is marked for Letter of credit/Import Collection.
                // Please select a shipment number.
                ok = checkFailed(strfmt("@SYS316249", _formletterParmTable.OrderId));
            }
        }

        if (ok)
        {
            bankLCLocal = this.parmBankLC();

            if (!bankLCLocal
                || bankLCLocal.RecId == 0
                || !bankLCLocal.isConfirmed())
            {
                //Letter of Credit of Order %1 is not confirmed.
                ok = checkFailed(strFmt("@SYS316248", _formletterParmTable.OrderId));
            }
        }

        if (ok)
        {
            ok = this.validateLCAmountWithOrder();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs the instance of the <c>BankLCType</c> class by the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The record ID of the <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_loadData">
    ///    A Boolean value that indicates whether to load the Letter of Credit record; optional.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_isLoadInfo">
    ///    A Boolean value that indicates whether to load the <c>BankLCInfo</c> record; optional.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BankLCImportType</c> class.
    /// </returns>
    public static BankLCType constructByLedgerJournalTrans(
        LedgerJournalTrans  _ledgerJournalTrans,
        boolean             _loadData       = false,
        boolean             _forUpdate      = false,
        boolean             _isLoadInfo     = false)
    {
        BankLCType                  ret;
        BankLCLine                  bankLCLineLocal;
        BankLC                      bankLCLocal;
        LedgerJournalTransBankLC    ledgerJournalTransBankLC;

        ledgerJournalTransBankLC = _ledgerJournalTrans.getLedgerJournalTransBankLC();

        if (ledgerJournalTransBankLC.BankLC)
        {
            bankLCLocal = ledgerJournalTransBankLC.getBankLC();
        }
        else if (LedgerJournalTransBankLC.BankLCLine)
        {
            bankLCLineLocal = _ledgerJournalTrans.getBankLCLine();
            bankLCLocal = bankLCLineLocal.getBankLC();
        }

        if (bankLCLocal.RecId != 0)
        {
            switch (bankLCLocal.getInstanceRelationType())
            {
                case tablestr(BankLCImport) :
                    ret = BankLCImportType::construct(bankLCLocal.RecId, _loadData, _forUpdate, _isLoadInfo);
                    break;
                case tablestr(BankLCExport) :
                    ret = BankLCExportType::construct(bankLCLocal.RecId, _loadData, _forUpdate, _isLoadInfo);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>