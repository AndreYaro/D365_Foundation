<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayKanbanEmpty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayKanbanEmpty</c> class builds and displays a form for processing
///     empty kanban transfer cards in the RF device.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::EmptyKanban)]
public class WHSWorkExecuteDisplayKanbanEmpty extends WHSWorkExecuteDisplay
{
    private const int GetKanbanCardId   = 0;
    private const int ProcessKanbanCard = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetKanbanCardId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the RF screen to scan empty kanban cards
    /// </summary>
    /// <param name="_con">
    ///    The container that holds information to be displayed to the user
    /// </param>
    /// <returns>
    ///    Container that will be used for display information in RF
    /// </returns>
    public container buildGetKanbanCardId(container _con)
    {
        container   ret = _con;

        ret += [this.buildControl(#RFLabel, #Enter, "@WAX:ScanKanbanCardId", 1, '', #WHSRFUndefinedDataType, '', 0)];
        if (WhsWorkExecuteDisplayKanbanCardIdEDTNumFlight::instance().isEnabled())
        {
            ret += [this.buildControl(#RFText, #KanbanCardId, "@SYS313448", 1, '', extendedTypeNum(KanbanCardId), '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, #KanbanCardId, "@SYS313448", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
        ret += [this.buildControl(#RFButton, #RFEmpty, "@SYS132712", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container of form layout information to be displayed on a RF device.
    /// </summary>
    /// <param name="_con">
    ///    A container of form state information.
    /// </param>
    /// <param name="_buttonClicked">
    ///    The name of a button that was clicked; optional.
    /// </param>
    /// <returns>
    ///    A container of form layout information to be displayed on a RF device.
    /// </returns>
    public container displayForm(
        container _con,
        str       _buttonClicked = '')
    {
        WHSRFPassthrough    globalPass = pass;

        pass    = WHSRFPassthrough::create(conPeek(_con,2));
        pass    = this.combineMaps(globalPass,pass);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }
        if (!pass.exists(#InventLocationId))
        {
            pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
        }

        container con = _con;

        if (this.hasError(con))
        {
            con = conDel(con, 3, 1);
            con = this.clearErrors(con);
        }

        container   ret;
        Map         fieldValues = new Map(Types::String, Types::String);
        int         startInfologLine = infologLine() + 1;

        switch (step)
        {
            case GetKanbanCardId:
                ret = this.buildGetKanbanCardId(conNull());
                step = ProcessKanbanCard;
                break;

            case ProcessKanbanCard:
                try
                {
                    container   tmpFieldValues;
                    [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                    fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                    pass = this.combineMaps(pass, fieldValues);

                    if (this.hasError(con))
                    {
                        ret = con;
                    }
                    else if (pass.hasValue(#KanbanCardId))
                    {
                        Kanban  kanban = Kanban::findKanbanCardId(pass.lookup(#KanbanCardId));

                        if (kanban.kanbanFlow().receiptInventLocationId() != pass.lookup(#InventLocationId))
                        {
                            throw error("@WAX1239");
                        }
                        else
                        {
                            Args    args = new Args();
                            args.record(kanban);
                            args.parmEnumeration(KanbanMultiMode::Silent);
                            KanbanMultiKanbanEmpty::main(args);
                        }

                        if (Kanban::findKanbanId(kanban.KanbanId).Status == LeanKanbanStatus::Emptied)
                        {
                            ret = this.addErrorLabel(conNull(), "@WAX866", WHSRFColorText::Success);
                        }
                        else
                        {
                            ret = this.addErrorLabelFromInfolog(conNull(), startInfologLine, WHSRFColorText::Error);
                        }
                        ret = this.buildGetKanbanCardId(ret);
                    }
                    else
                    {
                        ret = this.addErrorLabel(conNull(), "@WAX1080", WHSRFColorText::Error);
                        ret = this.buildGetKanbanCardId(ret);
                    }
                }
                finally
                {
                    pass.remove(#KanbanCardId);
                }

                break;

            default:
                ret = this.addErrorLabel(conNull(), "@WAX:MobileDeviceUnexpectedStep", WHSRFColorText::Error);
                ret = this.buildGetKanbanCardId(ret);
                step = ProcessKanbanCard;
                break;
        }

        ret = this.updateModeStepPass(ret, WHSWorkExecuteMode::EmptyKanban, step, pass);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor method for class instance.
    /// </summary>
    /// <returns>
    /// A newly created instance of <c>WHSWorkExecuteDisplayKanbanEmpty</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WHSWorkExecuteDisplayKanbanEmpty construct()
    {
        WHSWorkExecuteDisplayKanbanEmpty    workExecuteDisplayKanbanEmpty = new WHSWorkExecuteDisplayKanbanEmpty();

        return workExecuteDisplayKanbanEmpty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>