<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRemittance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendOutPaymRemittance extends VendOutPaym
{
    private BankRemittanceFilesVend bankRemittanceFiles;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isOffsetAccountValid</Name>
				<Source><![CDATA[
    protected boolean isOffsetAccountValid(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret;

        ret = _ledgerJournalTrans.parmLedgerDimension() == _ledgerJournalTrans.parmOffsetLedgerDimension();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankRemittanceFile</Name>
				<Source><![CDATA[
    private void updateBankRemittanceFile(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans;
        BankRemittanceFileId bankRemittanceFileId;

        if (!bankRemittanceFiles)
        {
            select firstonly BankRemittanceFileId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalId
                    && ledgerJournalTrans.BankRemittanceFileId != '';

            bankRemittanceFileId = ledgerJournalTrans.BankRemittanceFileId;

            if (bankRemittanceFileId)
            {
                bankRemittanceFiles = BankRemittanceFilesVend::find(bankRemittanceFileId, true);
                bankRemittanceFiles.AmountMst = 0;
            }
            else
            {
                bankRemittanceFileId = NumberSeq::newGetNum(CustParameters::numRefCustRemittanceFileId()).num();

                bankRemittanceFiles.clear();
                bankRemittanceFiles.JournalId = _ledgerJournalTrans.JournalNum;
                bankRemittanceFiles.FileId = bankRemittanceFileId;
                bankRemittanceFiles.FileName = filename;
                bankRemittanceFiles.PaymMode = _ledgerJournalTrans.PaymMode;
                bankRemittanceFiles.Closed = NoYes::No;
                bankRemittanceFiles.Posted = NoYes::No;
                bankRemittanceFiles.Printed = printControlReport;
                bankRemittanceFiles.PrintingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                bankRemittanceFiles.Received = NoYes::No;
                bankRemittanceFiles.Sent = NoYes::No;

                if (_ledgerJournalTrans.BankAccountId)
                {
                    bankRemittanceFiles.BankAccountId = _ledgerJournalTrans.BankAccountId;
                }
                else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
                {
                    bankRemittanceFiles.BankAccountId = _ledgerJournalTrans.parmOffsetAccount();
                }
                else
                {
                    bankRemittanceFiles.BankAccountId = '';
                }

                bankRemittanceFiles.insert();
            }
        }

        if (_ledgerJournalTrans.BankAccountId)
        {
            bankRemittanceFiles.BankAccountId = _ledgerJournalTrans.BankAccountId;
        }
        else if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankRemittanceFiles.BankAccountId = _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            bankRemittanceFiles.BankAccountId = '';
        }

        bankRemittanceFiles.AmountMst -= _ledgerJournalTrans.calcAmountMST();
        bankRemittanceFiles.update();

        _ledgerJournalTrans.BankRemittanceFileId = bankRemittanceFiles.FileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void updateLedgerJournalTrans(
        LedgerJournalTrans _ledgerJournalTrans,
        CustVendOutPaymRecord _custVendOutPaymRecord,
        boolean _generateRemittanceFeeTrans)
    {
        this.updateBankRemittanceFile(_ledgerJournalTrans);

        super(_ledgerJournalTrans, _custVendOutPaymRecord, _generateRemittanceFeeTrans);

        this.updatePromissoryNoteJour(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePromissoryNoteJour</Name>
				<Source><![CDATA[
    private void updatePromissoryNoteJour(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        QueryRun queryRun_OffsetVoucher;

        queryRun_OffsetVoucher = SpecTrans::createQueryRunToRefTable(
            ledgerJournalTrans.company(),
            ledgerJournalTrans.TableId,
            ledgerJournalTrans.RecId,
            tablenum(VendTransOpen));

        queryRun.allowCrossCompany(true);

        while (queryRun_OffsetVoucher.next())
        {
            if (queryRun_OffsetVoucher.changed(tablenum(VendTransOpen)))
            {
                vendTransOpen = queryRun_OffsetVoucher.get(tablenum(VendTransOpen));

                if (vendTransOpen)
                {
                    changecompany(vendTransOpen.company())
                    {
                        vendTrans = vendTransOpen.vendTrans();
                        if (vendTrans.PromissoryNoteID)
                        {
                            vendPromissoryNoteJour = VendPromissoryNoteJour::find(vendTrans.PromissoryNoteID, true);
                            vendPromissoryNoteJour.RemittanceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                            vendPromissoryNoteJour.update();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>