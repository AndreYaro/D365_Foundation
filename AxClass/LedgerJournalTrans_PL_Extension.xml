<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_PL_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_PL_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcUserTaxBase_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the User tax base for PL and countries with taxtype_w enabled.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void calcUserTaxBase_PL(LedgerJournalTrans _ledgerJournalTrans)
    {
        AmountCur vatAmount;
        TaxBase_W userTaxBase;
        TaxValue taxValue;
        boolean isWriteOff = (_ledgerJournalTrans.TransactionType == LedgerTransType::WriteOff);
        boolean isWriteOffBaseAmountSalesTaxDisabled = isWriteOff
            && !CustParameters::isWriteOffBaseAmountSalesTaxEnabled();

        #ISOCountryRegionCodes

        if (isWriteOff || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if (_ledgerJournalTrans.TaxCode
                && TaxTable::isTaxVat_PL(_ledgerJournalTrans.TaxCode)
                && !isWriteOffBaseAmountSalesTaxDisabled)
            {
                _ledgerJournalTrans.setUserTaxBase();
            }
            else
            {
                _ledgerJournalTrans.TaxBase_W = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendVatRegNums_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the from customer or vendor VAT information.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void initFromCustVendVatRegNums_PL(LedgerJournalTrans _ledgerJournalTrans)
    {
        PlCustVendVatRegNums custVendVatRegNums;

        if (_ledgerJournalTrans.CustVendAccount_PL)
        {
            custVendVatRegNums = PlCustVendVatRegNums::find(_ledgerJournalTrans.CustVendAccount_PL);

            _ledgerJournalTrans.vatNumJournal   = custVendVatRegNums.vatNum;
            LedgerJournalTransTaxExtension taxExtension = _ledgerJournalTrans.ledgerJournalTransTaxExtension();
            taxExtension.VATNumRecId            = 0;
            taxExtension.VATNumTableType        = TaxExemptNumberSourceType::None;
            _ledgerJournalTrans.packExtensionTable(taxExtension);

            _ledgerJournalTrans.Addressing_PL   = custVendVatRegNums.Addressing;
            _ledgerJournalTrans.CustVendName_PL = custVendVatRegNums.AccountName;
        }
        else
        {
            _ledgerJournalTrans.vatNumJournal   = "";
            LedgerJournalTransTaxExtension taxExtension = _ledgerJournalTrans.ledgerJournalTransTaxExtension();
            taxExtension.VATNumRecId            = 0;
            taxExtension.VATNumTableType        = TaxExemptNumberSourceType::None;
            _ledgerJournalTrans.packExtensionTable(taxExtension);

            _ledgerJournalTrans.Addressing_PL   = "";
            _ledgerJournalTrans.CustVendName_PL = "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesQty_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the there is a quantity on the line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>true if there is quantity; otherwise, false.</returns>
    public static boolean linesQty_PL(LedgerJournalTrans _ledgerJournalTrans)
    {
        return (select count(RecId) from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum &&
                    ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher    &&
                    ledgerJournalTrans.RecId      != _ledgerJournalTrans.RecId).RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountType_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the main account type of the current transaction.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The main account type of the current transaction is on.
    /// </returns>
    /// <remarks>
    /// Under Polish country/region context, the main account type is determined per transaction when possible, according to the following rules:
    /// 1. If either the <c>AccountType</c> or the <c>OffsetAccountType</c> is <c>Project</c>, then that is returned.
    /// 2. If either the <c>AccountType</c> or the <c>OffsetAccountType</c> is <c>Cust</c> or <c>Vend</c>, but both <c>Cust</c> and <c>Vend</c> are not present, then that is returned.
    /// 3. If either the <c>AccountType</c> or the <c>OffsetAccountType</c> is <c>RCash</c> then that is returned.
    /// 4. In all other cases, <c>Ledger</c> is returned.
    /// </remarks>
    public static LedgerJournalACType mainAccountType_PL(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalACType accountType;
        Counter counter;

        accountType = LedgerJournalACType::Ledger;

        if (_ledgerJournalTrans.AccountType       == LedgerJournalACType::Project ||
            _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project)
        {
            return LedgerJournalACType::Project;
        }

        if (accountType             != _ledgerJournalTrans.AccountType           &&
            (_ledgerJournalTrans.AccountType       == LedgerJournalACType::Cust  ||
             _ledgerJournalTrans.AccountType       == LedgerJournalACType::Vend  ||
            (_ledgerJournalTrans.AccountType       == LedgerJournalACType::RCash &&
             _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Cust  &&
             _ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Vend)))
        {
            accountType = _ledgerJournalTrans.AccountType;
            counter++;
        }

        if (accountType            != _ledgerJournalTrans.OffsetAccountType     &&
            (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust  ||
             _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend  ||
            (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::RCash &&
             _ledgerJournalTrans.AccountType       != LedgerJournalACType::Cust  &&
             _ledgerJournalTrans.AccountType       != LedgerJournalACType::Vend)))
        {
            accountType = _ledgerJournalTrans.OffsetAccountType;
            counter++;
        }

        if (counter > 1)
        {
            return LedgerJournalACType::Ledger;
        }

        return accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatData_copyLine_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the VAT data to the journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void vatData_copyLine_PL(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans localledgerJournalTrans;

        select firstonly reverse Invoice, DocumentNum, DocumentDate, vatNumJournal, CustVendAccount_PL, CustVendName_PL, Addressing_PL, VatDueDate_W, TaxPeriodPaymentCode_PL, RecId from localledgerJournalTrans index NumVoucherIdx
                    where localledgerJournalTrans.JournalNum   == _ledgerJournalTrans.JournalNum           &&
                            localledgerJournalTrans.Voucher      == _ledgerJournalTrans.Voucher              &&
                            (localledgerJournalTrans.AccountType == LedgerJournalACType::Cust ||
                            localledgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
                            localledgerJournalTrans.AccountType == LedgerJournalACType::Ledger);

        if (localledgerJournalTrans.RecId)
        {
            _ledgerJournalTrans.Invoice                 = localledgerJournalTrans.Invoice;
            _ledgerJournalTrans.DocumentNum             = localledgerJournalTrans.DocumentNum;
            _ledgerJournalTrans.DocumentDate            = localledgerJournalTrans.DocumentDate;

            _ledgerJournalTrans.VATNumJournal           = localledgerJournalTrans.VATNumJournal;
            LedgerJournalTransTaxExtension taxExtension = _ledgerJournalTrans.ledgerJournalTransTaxExtension();
            LedgerJournalTransTaxExtension taxExtensionLocal = localledgerJournalTrans.ledgerJournalTransTaxExtension();
            taxExtension.VATNumRecId                    = taxExtensionLocal.VATNumRecId;
            taxExtension.VATNumTableType                = taxExtensionLocal.VATNumTableType;
            _ledgerJournalTrans.packExtensionTable(taxExtension);

            _ledgerJournalTrans.CustVendAccount_PL      = localledgerJournalTrans.CustVendAccount_PL;
            _ledgerJournalTrans.CustVendName_PL         = localledgerJournalTrans.CustVendName_PL;
            _ledgerJournalTrans.Addressing_PL           = localledgerJournalTrans.Addressing_PL;
            _ledgerJournalTrans.VatDueDate_W            = localledgerJournalTrans.VatDueDate_W;
            _ledgerJournalTrans.TaxPeriodPaymentCode_PL = localledgerJournalTrans.TaxPeriodPaymentCode_PL;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>