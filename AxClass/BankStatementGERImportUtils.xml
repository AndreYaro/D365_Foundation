<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementGERImportUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankStatementGERImportUtils
{
    private const str Slash = '/';
    private const int CurrencyCodeLength = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountNumberFromMT940</Name>
				<Source><![CDATA[
    // _accountId is the content after tag :25: in MT940 bank statement
    public static str getAccountNumberFromMT940(str _accountId)
    {
        _accountId = strRTrim(_accountId);

        str accountNumber;
        if (BankMT940ParseAllDigitAccountIdFlight::instance().isEnabled() && !BankStatementGERImportUtils::stringContainsNonDigits(_accountId))
        {
            accountNumber = _accountId;
        }
        else
        {
            int separatorIndex = strFind(_accountId, Slash, 1, strLen(_accountId));
            if (separatorIndex)
            {
                accountNumber = subStr(_accountId, separatorIndex + 1, strLen(_accountId) - separatorIndex);
                str currencyCodeISO = subStr(accountNumber, strLen(accountNumber) - CurrencyCodeLength + 1, CurrencyCodeLength);
                if (!isInteger(currencyCodeISO))
                {
                    Currency currency;
                    select firstonly currency where currency.CurrencyCodeISO == currencyCodeISO;
                    if (currency.RecId)
                    {
                        accountNumber = subStr(accountNumber, 1, strLen(accountNumber) - CurrencyCodeLength);
                    }
                }
            }
            else
            {
                accountNumber =  BankIBANAccountValidator::construct(_accountId).getBankIBANAccountNumber();
            }
        }

        return accountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDestinationMappingVersionedEqualOrLater</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the mapping to destination solution is versioned equal or later than the given version.
    /// <c>BankRemoveBAI2StatementIDTimeZoneOffsetFeature</c> is supported when "ABR Bank statement Mapping to destination" >= 3.16
    /// </summary>
    /// <param name = "_erModelMappingId">GER model mapping format.</param>
    /// <param name = "_integrationPoint">Integration point.</param>
    /// <param name = "_majorVersion">Major version number.</param>
    /// <param name = "_minorVersion">Minor version number.</param>
    /// <returns>true if the destination mapping version is equal or later than the given version, otherwise false.</returns>
    internal static boolean isDestinationMappingVersionedEqualOrLater(
        ERModelMappingId _erModelMappingId,
        ERIntegrationPointKey _integrationPoint,
        int _majorVersion,
        int _minorVersion)
    {
        ERModelMappingTable modelMappingTable = ERModelMappingTable::find(_erModelMappingId).getDestinationMapping(_integrationPoint);
        ERSolutionTable solutionTable = modelMappingTable.ERSolutionTable();
        ERSolutionVersionTable versionTable = ERSolutionVersionTable::findDateEffectiveVersion(solutionTable.RecId);
        container versionSplit = str2con(versionTable.PublicVersionNumber, '.', true);

        if (!versionSplit)
        {
            return false;
        }

        return conPeek(versionSplit, 1) > _majorVersion ||
            (conPeek(versionSplit, 1) == _majorVersion && conPeek(versionSplit, 2) >= _minorVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>alignBAI2IdentificationWithTimeZoneSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aligns BAI2 format bank statement id generation design with time zone setup on bank statement import form.
    /// If return is an empty string, GER will use original Identification instead.
    /// </summary>
    /// <param name = "_fromDateTime">The from date time of the statement</param>
    /// <param name = "_accountTable">The bank account of the statement</param>
    /// <param name = "_importMultipleAccounts">Yes if the statement file contins multiple bank account</param>
    /// <param name = "_timeZonePreference">The time zone preference setup</param>
    /// <param name = "_timeZone">The time zone offset to be removed</param>
    /// <returns>BAI2 Identification.</returns>
    public static BankStatementId alignBAI2IdentificationWithTimeZoneSetup(
        utcdatetime _fromDateTime,
        BankAccountTable _accountTable,
        NoYes _importMultipleAccounts,
        DMFTimeZonePreference _timeZonePreference,
        Timezone _timeZone)
    {
        const str BAI2IdentificationSuffix = 'Z';
        BankStatementId identification;

        if (FeatureStateProvider::isFeatureEnabled(BankRemoveBAI2StatementIDTimeZoneOffsetFeature::instance()))
        {
            Timezone timeZoneOffsetToRemove;
            if (_importMultipleAccounts)
            {
                timeZoneOffsetToRemove = BankStatementImportUtils::getPreferedTimeZone(_accountTable.TimeZonePreference, _accountTable.TimeZone);
            }
            else
            {
                timeZoneOffsetToRemove = BankStatementImportUtils::getPreferedTimeZone(_timeZonePreference, _timeZone);
            }

            identification = DateTimeUtil::toStr(DateTimeUtil::removeTimeZoneOffset(_fromDateTime, timeZoneOffsetToRemove)) + BAI2IdentificationSuffix;
        }

        return identification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseCashBalanceFromBAI2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parse the '03' record in BAI2 bank statement into a more readable string
    /// For example, '7313329621,USD,010,0,,Z,015,0,,V,040622,' will be parsed into
    /// '010,0,,Z/////015,0,,V,040622,'
    /// </summary>
    /// <param name="_content">
    /// The content after '03,' record in BAI2 bank statement
    /// </param>
    /// <returns>
    /// The string after parse
    /// </returns>
    public static str parseCashBalanceFromBAI2(str _content)
    {
        List fields = strSplit(_content, ',');
        ListEnumerator fieldsEnumerator = fields.getEnumerator();
        str resultStr = '';
        const str Separator = '/////';
        
        BankStatementGERImportUtils::concatenateFields(fieldsEnumerator, 2);

        while (fieldsEnumerator.moveNext())
        {
            resultStr += fieldsEnumerator.current() + BankStatementGERImportUtils::concatenateFields(fieldsEnumerator, 3);

            str fundsType = fieldsEnumerator.current();

            int numOfFieldsToSkip;

            switch (fundsType)
            {
                case "S":
                    numOfFieldsToSkip = 3;
                    break;
                case "V":
                    numOfFieldsToSkip = 2;
                    break;
                case "D":
                    fieldsEnumerator.moveNext();
                    int numOfPairs = str2int(fieldsEnumerator.current());
                    resultStr += ',' + fieldsEnumerator.current();
                    numOfFieldsToSkip = 2 * numOfPairs;
                    break;
                default:
                    numOfFieldsToSkip = 0;
                    break;
            }

            resultStr += BankStatementGERImportUtils::concatenateFields(fieldsEnumerator, numOfFieldsToSkip);
            resultStr += Separator;
        }
        
        return subStr(resultStr, 1, strLen(resultStr) - 5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>concatenateFields</Name>
				<Source><![CDATA[
    private static str concatenateFields(ListEnumerator _enumerator, int _countOfSkipFields)
    {
        int counter = 1;
        str concatenateStr = '';

        while (counter <= _countOfSkipFields && _enumerator.moveNext())
        {
            counter ++;
            concatenateStr = concatenateStr + ',' + _enumerator.current();
        }

        if (counter <= _countOfSkipFields)
        {
            throw error("@CashManagement:WrongNumberOfFields");
        }

        return concatenateStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stringContainsNonDigits</Name>
				<Source><![CDATA[
    private static boolean stringContainsNonDigits(str _str)
    {
        return match('[^0-9]', _str);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>