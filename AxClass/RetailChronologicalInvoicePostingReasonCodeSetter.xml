<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChronologicalInvoicePostingReasonCodeSetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSalesTableReasonCodeSetter_IT</c> class sets the reason code required for correct invoice posting.
/// </summary>
internal final class RetailChronologicalInvoicePostingReasonCodeSetter
{
    private SalesTable  salesTable;
    private TransDate   invoiceDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constuct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>RetailSalesTableReasonCodeSetter_IT</c>.
    /// </summary>
    /// <param name = "_salesTable">The sales order to be updated.</param>
    /// <param name = "_invoiceDate">The transaction date to be used.</param>
    /// <returns>The <c>RetailChronologicalInvoicePostingReasonCodeSetter</c> object.</returns>
    [Hookable(false)]
    public static RetailChronologicalInvoicePostingReasonCodeSetter constuct(SalesTable _salesTable, TransDate _invoiceDate)
    {
        RetailChronologicalInvoicePostingReasonCodeSetter instance = new RetailChronologicalInvoicePostingReasonCodeSetter();
        instance.salesTable = _salesTable;
        instance.invoiceDate = _invoiceDate;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the reason code on <c>SalesTable</c>, if necessary.
    /// </summary>
    [Hookable(false)]
    public void setSalesReasonCode()
    {
        ReasonTable reasonTable = RetailChronologicalInvoicePostingReasonCodeSetter::getReasonTable();

        if (reasonTable)
        {
            // This object does not have the latest data in case of return order or sales quotation in retail. 
            // So, agreed to reread data.
            salesTable.reread();

            NumberSequenceReference referenceTable = NumberSeqReference::findReference(extendedTypeNum(InvoiceId));
            NumberSequenceTable numSeqTab = NumberSequenceTable::getNumberSequenceTable(referenceTable, salesTable.NumberSequenceGroup);

            if (numSeqTab &&
                !this.isReasonCodeSet() &&
                !CustInvoiceJour::validateInvoiceDate(numSeqTab.RecId, salesTable.InvoiceAccount, invoiceDate, false))
            {
                ttsbegin;
                salesTable.selectForUpdate(true);
                salesTable.CreditNoteReasonCode = ReasonTableRef::createFromCode(reasonTable.Reason);
                ReasonTableRef::updateComment(reasonTable.Description, salesTable.CreditNoteReasonCode);
                
                salesTable.update();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this class can be used with current settings.
    /// </summary>
    /// <returns>
    /// True, if this class can be used; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReasonCodeSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if reason code is set on sales table or its lines.
    /// </summary>
    /// <returns>
    /// True, if reason code was set; otherwise, false.
    /// </returns>
    private boolean isReasonCodeSet()
    {
        if (salesTable.CreditNoteReasonCode)
        {
            return true;
        }

        SalesLine salesLine;

        select firstonly RecId from salesLine
            where salesLine.SalesId == salesTable.SalesId
            && salesLine.CreditNoteReasonCode;

        return salesLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReasonTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reason table record to be used.
    /// </summary>
    /// <returns>The reason table record to be used.</returns>
    private static ReasonTable getReasonTable()
    {
        RetailChronologicalInvoicePostingParameters retailChronologicalInvoicePostingParameters = RetailChronologicalInvoicePostingParameters::find();
        ReasonTable result;

        if (retailChronologicalInvoicePostingParameters.IsPostingEarlierInvoicesEnabled)
        {
            result = ReasonTable::find(retailChronologicalInvoicePostingParameters.ReasonCodeForEarlierInvoices);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>