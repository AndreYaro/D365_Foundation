<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotalsCalculateServiceBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTotalsCalculateServiceBase</c> class represents base execution logic for 'Calculate sales quotation/order totals for Sales' batch job.
/// </summary>
internal abstract class SalesTotalsCalculateServiceBase extends SysOperationServiceBase
{
    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateInternal</Name>
				<Source><![CDATA[
    protected void calculateInternal(SalesITotalsCalculateContract _contract)
    {
        utcdatetime updateDateTime = DateTimeUtil::utcNow();
        utcdatetime cutoffDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::utcNow(), -_contract.parmMaximumAgeInDays())), 0);

        Query query = this.initializeQuery(_contract.getQuery(), cutoffDateTime);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            Common salesRecord = queryRun.get(this.queryTableId());

            this.calculateRecord(salesRecord, updateDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRecord</Name>
				<Source><![CDATA[
    private void calculateRecord(Common _salesRecord, utcdatetime _updateDateTime)
    {
        try
        {
            setPrefix(strFmt('%1:', _salesRecord.caption()));

            ttsbegin;
            this.calculateTotals(_salesRecord, _updateDateTime);
            ttscommit;

            if (TradeCDSMessageQueue::isCalculateSalesPricesAndTotalsAsyncEnabled())
            {
                info("@SCM:SalesTotalsCalculateServiceCalculationCompletedMessage");
            }
            else
            {
                info("@SCM:SalesTotalsCalculateServiceCalculationCompleted");
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTableId</Name>
				<Source><![CDATA[
    protected abstract TableId queryTableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    protected abstract Query initializeQuery(Query _query, utcdatetime _cutOffDateTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotals</Name>
				<Source><![CDATA[
    protected abstract void calculateTotals(Common _salesRecord, utcdatetime _updateDateTime)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>