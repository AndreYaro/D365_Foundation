<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanDocumentAggregator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanDocumentAggregator</c> class is the base abstract class for aggregating data that will
///    be used for additional creation of subcontracting documents.
/// </summary>
public abstract class LeanDocumentAggregator
{
    LeanDocumentDataProviderInterface   currentProvider;
    LeanDocumentLinesAggregationMode    aggregationMode;

    Map                                 processingData;

    KanbanJob                           currentKanbanJob;
    PlanActivityService                 currentPlanActivityService;
    InventDim                           serviceOutputDimensions;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSourceRecordToLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a source record from the current data provider to the document line.
    /// </summary>
    /// <param name="_line">
    ///    The document line to which the source record is added.
    /// </param>
    /// <remarks>
    ///    As part of adding the source record, some data is being aggregated too.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addSourceRecordToLine(LeanDocumentProcessingDataLine _line)
    {
        date                currentJobDate  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.kanbanJobDateTime(currentKanbanJob), DateTimeUtil::getCompanyTimeZone()));
        date                lineDate        = _line.parmDeliveryDate();
        date                lineLastDate    = _line.parmLastDate();
        UnitOfMeasureRecId  lineUom         = _line.parmLineUnitOfMeasure();

        // as the jobs that get aggregated together can potentially belong to different PlanActivityService
        // records, we always use the first one's UoM to accumulate the service quantity
        if (!lineUom)
        {
            lineUom = currentPlanActivityService.ServiceUnitOfMeasure;
            _line.parmLineUnitOfMeasure(lineUom);
        }

        InventQty newQuantity = this.serviceQuantityForJob(lineUom);

        // add the job to the line
        _line.parmSourceRecords().addEnd(currentKanbanJob);

        // maintain the earliest date
        if (!lineDate
            || currentJobDate < lineDate)
        {
            _line.parmDeliveryDate(currentJobDate);
        }

        // maintain the last date
        if (!lineLastDate
            || currentJobDate > lineLastDate)
        {
            _line.parmLastDate(currentJobDate);
        }

        // aggregate the service quantity
        _line.parmLineQuantity(_line.parmLineQuantity() + newQuantity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates the provided data.
    /// </summary>
    /// <param name="_dataProvider">
    /// An interface for obtaining all necessary data to be aggregated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void aggregateData(LeanDocumentDataProviderInterface _dataProvider)
    {
        LeanDocumentProcessingData      documentHeader;
        LeanDocumentProcessingDataLine  documentLine;

        this.parmCurrentProvider(_dataProvider);

        if (!this.validateOutputServiceDimensions())
        {
            // nothing to do for this source record
            return;
        }
        anytype documentHeaderKey = this.getDocumentHeaderKey();
        anytype documentLineKey = this.getDocumentLineKey();

        // get or create a document header
        if (!processingData.exists(documentHeaderKey))
        {
            documentHeader = this.createDocumentHeader(documentHeaderKey, typeof(documentLineKey));
            processingData.insert(documentHeaderKey, documentHeader);
        }
        else
        {
            documentHeader = processingData.lookup(documentHeaderKey);
        }

        Map documentLines = documentHeader.parmDocumentLines();

        // get or create a document line
        if (!documentLines.exists(documentLineKey))
        {
            documentLine = this.createDocumentLine(documentLineKey);
            documentLines.insert(documentLineKey, documentLine);
        }
        else
        {
            documentLine = documentLines.lookup(documentLineKey);
        }

        // add a source record to the line and aggregate data
        this.addSourceRecordToLine(documentLine);

        // update the header from the line
        this.updateDocumentHeaderFromLine(documentHeader, documentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a document header object.
    /// </summary>
    /// <param name="_documentHeaderKey">
    ///    The key that is used for the newly created object.
    /// </param>
    /// <param name="_linesKeyType">
    ///    The type of the values that are used for lines keys.
    /// </param>
    /// <returns>
    ///    A <c>LeanDocumentProcessingData</c> object that is empty, but initialized.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanDocumentProcessingData createDocumentHeader(anytype _documentHeaderKey, Types _linesKeyType)
    {
        LeanDocumentProcessingData header = LeanDocumentProcessingData::newStandard(_linesKeyType);
        header.parmSourceDocumentId(_documentHeaderKey);
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a document line object.
    /// </summary>
    /// <param name="_documentLineKey">
    ///    The key for which to create the object.
    /// </param>
    /// <returns>
    ///    A <c>LeanDocumentProcessingData</c> object that is empty, but initialized
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanDocumentProcessingDataLine createDocumentLine(anytype _documentLineKey)
    {
        PlanActivityService localService;
        LeanDocumentProcessingDataLine result = LeanDocumentProcessingDataLine::newStandard();
        localService.data(currentPlanActivityService);

        // store the service for future use
        result.parmAdditionalValues().insert(tablenum(PlanActivityService), localService);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the two objects are equal.
    /// </summary>
    /// <param name="otherObject">
    ///    The other object.
    /// </param>
    /// <returns>
    ///    true if the two objects hold the same state; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean equal(Object otherObject)
    {
        LeanDocumentAggregator otherAggregator = otherObject as LeanDocumentAggregator;

        return  otherObject == this
                || ( otherAggregator != null
                        && aggregationMode == otherAggregator.parmAggregationMode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentHeaderKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a document header key.
    /// </summary>
    /// <returns>
    ///    A key that can be used for identifying the document header.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected anytype getDocumentHeaderKey()
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a document line key.
    /// </summary>
    /// <returns>
    ///    A key that can be used for identifying the document line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected anytype getDocumentLineKey()
    {
        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTimePeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an accumulation key for a kanban job buffer based on the current aggregation mode.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The kanban job record.
    /// </param>
    /// <returns>
    ///    A date value for a aggregation mode that differs from none; otherwise, the record identificator of
    ///    the current job.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getTimePeriodKey(KanbanJob _kanbanJob)
    {
        utcdatetime jobDateTime = this.kanbanJobDateTime(_kanbanJob);
        str         result;

        #define.delimiterJobs('#j')
        #define.delimiterDates('#d')

        switch (aggregationMode)
        {
            case LeanDocumentLinesAggregationMode::None:
                // using the RecId as a differentiator guarantees every job ends up being grouped by itself only
                result = strfmt('%1%2', #delimiterJobs, _kanbanJob.RecId);
                break;

            case LeanDocumentLinesAggregationMode::Day:
                // group all jobs from the same day
                result = strfmt('%1%2%3%4%5',
                            DateTimeUtil::year(jobDateTime),
                            #delimiterDates,
                DateTimeUtil::month(jobDateTime),
                            #delimiterDates,
                DateTimeUtil::day(jobDateTime));
                break;

            case LeanDocumentLinesAggregationMode::Month:
                // group all jobs from the same month
                result = strfmt('%1%2%3',
                            DateTimeUtil::year(jobDateTime),
                            #delimiterDates,
                DateTimeUtil::month(jobDateTime));
                break;

            case LeanDocumentLinesAggregationMode::All:
                // jobs are grouped together within the same (service, dimensions) pair
                result = '';
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>utcDateTime</c> value that must be used for the current <c>KanbanJob</c> record.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    If the status is completed, this method returns the <c>ActualEndDateTime</c>; otherwise, it returns
    ///    the <c>ExpectedDateTime</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected utcdatetime kanbanJobDateTime(KanbanJob _kanbanJob)
    {
        utcdatetime result;

        switch (_kanbanJob.Status)
        {
            case LeanKanbanJobStatus::NotPlanned:
                result = _kanbanJob.DueDateTime;
                break;
            case LeanKanbanJobStatus::Completed:
                result = _kanbanJob.ActualEndDateTime;
                break;
            case LeanKanbanJobStatus::InProgress:
            // fallthrough
            case LeanKanbanJobStatus::Planned:
            // fallthrough
            case LeanKanbanJobStatus::Prepared:
                result = _kanbanJob.ExpectedDateTime;
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>LeanDocumentAggregator</c> class.
    /// </summary>
    /// <param name="_aggregationMode">
    ///    The aggregation mode of the object.
    /// </param>
    /// <param name="_headerDocumentKeyType">
    ///    The type of the header object key.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(LeanDocumentLinesAggregationMode _aggregationMode, Types _headerDocumentKeyType)
    {
        // make sure the passed enum is in the expected range
        if (_aggregationMode < LeanDocumentLinesAggregationMode::None
            || _aggregationMode > LeanDocumentLinesAggregationMode::All)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        aggregationMode = _aggregationMode;
        processingData  = new Map(_headerDocumentKeyType, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregationMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanDocumentLinesAggregationMode parmAggregationMode(LeanDocumentLinesAggregationMode _aggregationMode = aggregationMode)
    {
        aggregationMode = _aggregationMode;

        return aggregationMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentProvider</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanDocumentDataProviderInterface parmCurrentProvider(LeanDocumentDataProviderInterface _currentProvider = currentProvider)
    {
        currentProvider = _currentProvider;

        if (!prmisdefault(_currentProvider))
        {
            this.refreshData();
        }

        return currentProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the aggregated data in a form that is appropriate to be consumed by a
    ///    <c>LeanDocumentProcessor</c> derived class.
    /// </summary>
    /// <returns>
    ///    A list that has the <c>LeanDocumentProcessingData</c> objects.
    /// </returns>
    /// <remarks>
    ///    The method is used after all aggregation has finished because it returns an aggregate for only
    ///    those records that have already been processed.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List processingData()
    {
        List result = new List(Types::Class);
        MapEnumerator enum = processingData.getEnumerator();

        while (enum.moveNext())
        {
            result.addEnd(enum.currentValue());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the local buffers.
    /// </summary>
    /// <remarks>
    ///    The method is called after the current provider is set.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void refreshData()
    {
        currentKanbanJob            = currentProvider.getCurrentRecord(tablenum(KanbanJob));
        currentPlanActivityService  = PlanActivityService::findKanbanJob(currentKanbanJob, true);
        serviceOutputDimensions     = currentPlanActivityService.outputServiceDimensions(currentKanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceQuantityForJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the service quantity that will be used for the particular job.
    /// </summary>
    /// <param name="_targetUom">
    ///    The current unit of measure.
    /// </param>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> record.
    /// </param>
    /// <param name="_planActivityService">
    ///    The service settings.
    /// </param>
    /// <param name="_planActivity">
    ///    The plan activity.
    /// </param>
    /// <returns>
    ///    A number that represents the service quality for the job.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventQty serviceQuantityForJob(
                            UnitOfMeasureRecId  _targetUom,
                            KanbanJob           _kanbanJob           = currentKanbanJob,
                            PlanActivityService _planActivityService = currentPlanActivityService,
                            PlanActivity        _planActivity        = currentProvider.getCurrentRecord(tablenum(PlanActivity)))
    {
        return _kanbanJob.serviceQuantity(_planActivityService, _planActivity, _targetUom, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentHeaderFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a source record from the current data provider to the document line.
    /// </summary>
    /// <param name="_header">
    ///    The document header to be updated.
    /// </param>
    /// <param name="_line">
    ///    The document line to which the source record is to be added.
    /// </param>
    /// <remarks>
    ///    As part of adding the source record, some data is being aggregated too.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateDocumentHeaderFromLine(LeanDocumentProcessingData _header, LeanDocumentProcessingDataLine _line)
    {
        DlvDate lineDeliveryDate = _line.parmDeliveryDate();
        DlvDate headerDeliveryDdate = _header.parmDeliveryDate();

        if (headerDeliveryDdate == dateNull()
            || lineDeliveryDate < headerDeliveryDdate)
        {
            _header.parmDeliveryDate(lineDeliveryDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOutputServiceDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the output service dimensions against the service configuration.
    /// </summary>
    /// <returns>
    ///    true if the output is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateOutputServiceDimensions()
    {
        boolean         result = true;
        str             prodDimStr;
        InventDimParm   serviceInventDimParm;
        List            productDimFields = InventDim::dimProductDimFieldList();
        ListEnumerator  enumerator = (productDimFields) ? productDimFields.getEnumerator() : null;
        boolean         productDimensionsOk = true;

        #define.emptyValue('\'\'')

        // the output dimensions are not different than the service dimensions,
        // the it is valid (already validated during configuration)
        if (currentPlanActivityService.useAnyProductDimensions())
        {
            InventDimGroupSetup::newItemId(currentPlanActivityService.ItemId).inventDimParmActiveProductDimension(serviceInventDimParm);

            boolean hasAnyProductDimensionsEnabled = serviceInventDimParm.anyProductDimensionFlagSet();
            if (enumerator)
            {
                while (enumerator.moveNext())
                {
                    FieldId dimFieldId = enumerator.current();
                    if (prodDimStr)
                    {
                        prodDimStr += ', ';
                    }
                    else
                    {
                        prodDimStr = '(';
                    }
                    if (serviceOutputDimensions.(dimFieldId))
                    {
                        prodDimStr += strFmt('%1', serviceOutputDimensions.(dimFieldId));
                    }
                    else
                    {
                        prodDimStr += #emptyValue;
                    }
                    if (serviceOutputDimensions.(dimFieldId) && !serviceInventDimParm.(InventDim::dim2dimParm(dimFieldId)))
                    {
                        productDimensionsOk = false;
                    }
                }
                if (prodDimStr)
                {
                    prodDimStr += ')';
                }
            }

            // validate the derived dimensions are valid as a product variant for the service
            if ( !productDimensionsOk
                || (hasAnyProductDimensionsEnabled
                    && InventTable::getDistinctProductRecId(currentPlanActivityService.ItemId, serviceOutputDimensions) == 0))
            {
                result = checkFailed(strFmt("@SYS333231", prodDimStr, currentPlanActivityService.ItemId, currentKanbanJob.RecId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
