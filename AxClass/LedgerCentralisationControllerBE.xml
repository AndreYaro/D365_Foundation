<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCentralisationControllerBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCentralisationJournalControllerBE</c> class is a controller class for the <c>LedgerCentralisationJournalReportBE</c> report.
/// </summary>
class LedgerCentralisationControllerBE extends SrsReportRunController implements BatchRetryable
{
     #define.ReportName('LedgerCentralisationJournalReportBE.Report')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        this.setParameterValue(this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the UI Parameters for the SSRS report.
    /// </summary>
    /// <param name="_ledgerCentJournalReportContractBE">
    ///    The contract class for the <c>LedgerCentJournalReportContractBE</c> object.
    /// </param>
    public void setParameterValue(LedgerCentJournalReportContractBE _ledgerCentJournalReportContractBE)
    {
        ToDate                           periodToDate;
        FromDate                         periodFromDate;
        LedgerJournalTableTypeBE         ledgerJournalTableTypeBE;
        LedgerJournalPeriodFinalPrintBE  ledgerJournalPeriodFinalPrintBE;
        CompanyInfo companyInfo = CompanyInfo::find();
        recId calendarRecId     = CompanyInfoHelper::fiscalCalendarRecId();
        periodFromDate          = LedgerFiscalCalendar::findPeriodStartDateByDate(calendarRecId,_ledgerCentJournalReportContractBE.parmFromDate());
        periodToDate            = LedgerFiscalCalendar::findPeriodEndDateByDate(calendarRecId,_ledgerCentJournalReportContractBE.parmToDate());
        #define.coRegNumDigits('0123456789')

        select firstonly Compressed from ledgerJournalPeriodFinalPrintBE
            where ledgerJournalPeriodFinalPrintBE.PeriodStart             == periodFromDate
                && ledgerJournalPeriodFinalPrintBE.PeriodEnd              == periodToDate
            exists join ledgerJournalTableTypeBE
            where ledgerJournalPeriodFinalPrintBE.LedgerPostingJournalId  == ledgerJournalTableTypeBE.LedgerPostingJournalId
                && ledgerJournalTableTypeBE.JournalTypeBE != LedgerJournalTypeBE::Empty;

        _ledgerCentJournalReportContractBE.parmCompression(ledgerJournalPeriodFinalPrintBE.Compressed ? "@SYS79685" : "");
        _ledgerCentJournalReportContractBE.parmCompanyEnterpriseNumber(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, periodToDate));
        _ledgerCentJournalReportContractBE.parmCompanyVATNum(strIns(strIns(strKeep(companyInfo.CoRegNum, #coRegNumDigits),'.',4),'.',8));
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'BE-00024';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        LedgerCentralisationControllerBE ledgerCentralisationJournalControllerBE = new LedgerCentralisationControllerBE();
        ledgerCentralisationJournalControllerBE.parmReportName(#ReportName);
        ledgerCentralisationJournalControllerBE.parmArgs(_args);
        ledgerCentralisationJournalControllerBE.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>