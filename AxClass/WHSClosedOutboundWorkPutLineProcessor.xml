<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSClosedOutboundWorkPutLineProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSClosedOutboundWorkPutLineProcessor</c> class processes closed outbound put work lines.
/// </summary>
internal class WHSClosedOutboundWorkPutLineProcessor
{
    protected WHSWorkTable work;
    private WHSParameters whsParameters;

    private WhsInventTransPickIdAllocator pickIdAllocator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        whsParameters = WHSParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickIdAllocator</Name>
				<Source><![CDATA[
    internal WhsInventTransPickIdAllocator parmPickIdAllocator(WhsInventTransPickIdAllocator _pickIdAllocator = pickIdAllocator)
    {
        pickIdAllocator = _pickIdAllocator;
        return pickIdAllocator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the class based on the work.
    /// </summary>
    /// <param name = "_work">A work.</param>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSClosedOutboundWorkPutLineProcessor newFromWork(WHSWorkTable _work)
    {
        var processor = new WHSClosedOutboundWorkPutLineProcessor();

        processor.work = _work;

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanProcess</Name>
				<Source><![CDATA[
    private void checkCanProcess()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateSourceInventoryTransactions</Name>
				<Source><![CDATA[
    private boolean shouldUpdateSourceInventoryTransactions(WHSLocType _locType)
    {
        return (_locType == whsParameters.ShipFinalLocType
                    || work.isRawMaterialPick());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateContainerTable</Name>
				<Source><![CDATA[
    private boolean shouldUpdateContainerTable(WHSLocType _locType)
    {
        return (_locType == whsParameters.ShipFinalLocType
                    || _locType  == whsParameters.SortingLocationType
                    || work.isRawMaterialPick());
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the put work line.
    /// </summary>
    /// <param name = "_putWorkLine">A put work line.</param>
    [Hookable(false)]
    internal void process(WHSWorkLine _putWorkLine)
    {
        WHSLocType locType = WHSLocationProfile::find(WMSLocation::find(_putWorkLine.wmsLocationId, work.InventLocationId).LocProfileId).LocType;

        if (this.shouldUpdateSourceInventoryTransactions(locType)
            && this.mustUpdateSourceInventoryTransactions())
        {
            this.updateSourceInventoryTransactions(_putWorkLine);            
        }
        else
        {
            // Will not perform any picks, make pickIdAllocation aware of that so that it won't complain later
            if (pickIdAllocator)
            {
                pickIdAllocator.allocationAborted();
            }
        }

        if (this.shouldUpdateContainerTable(locType)
            && this.mustUpdateContainerTable())
        {
            this.updatecontainerTable(_putWorkLine.WMSLocationId);
        }

        if (locType == whsParameters.SortingLocationType
            && this.mustCreateOutboundSortRFInstruction())
        {
            this.createOutboundSortRFInstruction();
        }

        if (work.WorkTransType == WHSWorkTransType::SortedInventoryPicking
            && this.mustUpdateContainersBasedOnSortPositions())
        {
            this.updateContainersBasedOnSortPositions(_putWorkLine.WMSLocationId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceInventoryTransactions</Name>
				<Source><![CDATA[
    private void updateSourceInventoryTransactions(WHSWorkLine _putWorkLine)
    {
        work.updateSourceInventoryTransactions(_putWorkLine, pickIdAllocator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContainersBasedOnSortPositions</Name>
				<Source><![CDATA[
    private void updateContainersBasedOnSortPositions(WMSLocationId _wmsLocationId)
    {
        work.updateContainersBasedOnSortPositions(_wmsLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatecontainerTable</Name>
				<Source><![CDATA[
    private void updatecontainerTable(WMSLocationId _wmsLocationId)
    {
        work.updatecontainerTable(_wmsLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOutboundSortRFInstruction</Name>
				<Source><![CDATA[
    private void createOutboundSortRFInstruction()
    {
        work.createOutboundSortRFInstruction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSourceInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if source transactions should be updated.
    /// </summary>
    /// <returns>true if source transactions should be updated; otherwise, false.</returns>
    protected boolean mustUpdateSourceInventoryTransactions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateContainerTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a related container table should be updated.
    /// </summary>
    /// <returns>true if a related container tables should be updated; otherwise, false.</returns>
    protected boolean mustUpdateContainerTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateContainersBasedOnSortPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if related container tables should be updated based on sort positions.
    /// </summary>
    /// <returns>true if related container tables should be updated based on sort positions; otherwise, false.</returns>
    protected boolean mustUpdateContainersBasedOnSortPositions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateOutboundSortRFInstruction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if sort instructions should be created.
    /// </summary>
    /// <returns>true if sort instructions should be created; otherwise, false.</returns>   
    protected boolean mustCreateOutboundSortRFInstruction()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>