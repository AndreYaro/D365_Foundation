<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAdditionalDepreciationDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetAdditionalDepreciationDP_JP</c> class is the data provider class for the <c>AssetAdditionalDepreciation_JP</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetAdditionalDepreciation_JP)),
    SRSReportParameterAttribute(classStr(AssetAdditionalDepreciationContract_JP))
]
public class AssetAdditionalDepreciationDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetAdditionalDepreciationTmp_JP               assetAdditionalDepreciationTmp;
    AssetAdditionalDepreciationContract_JP          contract;

    FiscalYearName                                  fiscalYear;

    AssetTable                                      assetTable;
    AssetBook                                       assetBook;
    AssetDepDistribution_JP                         assetDistribution;
    AssetDepDistributionLine_JP                     assetDistributionLine;
    Query                                           query;

    #define.Blank('')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getassetAdditionalDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetAdditionalDepreciationTmp_JP</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetAdditionalDepreciationTmp_JP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetAdditionalDepreciationTmp_JP))
    ]
    public AssetAdditionalDepreciationTmp_JP getassetAdditionalDepreciationTmp()
    {
        select assetAdditionalDepreciationTmp;
        return assetAdditionalDepreciationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalYearEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the end date by fiscal year name.
    /// </summary>
    /// <param name="_fiscalYearName">
    /// Fiscal year name.
    /// </param>
    /// <returns>
    /// The end year of fiscal year.
    /// </returns>
    public TransDate getFiscalYearEndDate(FiscalYearName _fiscalYearName)
    {
        return FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), _fiscalYearName).EndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetAdditionalDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetAdditionalDepreciationTmp_JP</c> table.
    /// </summary>
    public void insertAssetAdditionalDepreciationTmp()
    {
        QueryRun                                queryRun;
        TransDate                               nextAllocationDate;
        AssetTransMerge                         assetTransMerge;
        TableId                                 assetTransTableId;
        AssetDepTransMap_JP                     assetTransMap;
        AssetTableMethod_JP                     assetTableMethod;
        AssetTableInterval                      assetTableInterval;
        AssetTransDate                          depreciationStartDate;
        AmountCur                               amountCur;
        TransDate                               periodEndDate;
        TransDate                               reserveTransDate;
        TransDate                               nextAllocationDateTmp;
        AmountMST                               reserveAmount;
        boolean                                 reserveDateChanged;
        real                                    signOfReserve;
        AssetAmount                             totalAmount;

        queryRun = new QueryRun(query);

        assetTransMap = AssetDepTransMap_JP::getEmptyTableBuffer(AssetBookType::ValueModel);
        while (queryRun.next())
        {
            assetTable      = queryRun.get(tableNum(AssetTable));
            assetBook       = queryRun.get(tableNum(AssetBook));
            assetTransMerge = queryRun.get(tableNum(AssetTransMerge));

            if (!reserveTransDate)
            {
                reserveTransDate = assetTransMerge.TransDate;
            }

            if (reserveTransDate == assetTransMerge.TransDate)
            {
                reserveDateChanged = false;
                reserveAmount += -assetTransMerge.AmountMST;
            }
            else
            {
                reserveDateChanged    = true;
                nextAllocationDateTmp = nextAllocationDate;
                nextAllocationDate    = dateNull();
            }

            assetTransTableId =  tablenum(AssetTrans);

            // inserts allocated trans
            while select TransDate, AmountMST, Voucher from assetDistributionLine
                where assetDistributionLine.RefReserveDate == assetTransMerge.TransDate
                    && assetDistributionLine.RefReserveTableId == assetTransTableId
                    && assetDistributionLine.RefReserveRecId == assetTransMerge.RecId
                exists join assetDistribution
                    where assetDistribution.RecId == assetDistributionLine.AssetDepDistribution_JP
                    exists join assetTransMap
                        where assetDistribution.RefTableId == assetTransMap.TableId
                            && assetDistribution.RefRecId == assetTransMap.RecId
                            && assetTransMap.AssetId == assetTable.AssetId
                            && assetTransMap.TransDate > assetTransMerge.TransDate
                            && assetTransMap.TransType == AssetTransType::AdditionalDepReserveAllocation_JP
            {
                assetAdditionalDepreciationTmp.TransactionDate           = assetTransMerge.TransDate;
                assetAdditionalDepreciationTmp.FixedAssetNumber          = assetTable.AssetId;
                assetAdditionalDepreciationTmp.AssetBookId               = assetBook.BookId;
                assetAdditionalDepreciationTmp.ReserveTransRecId         = assetTransMerge.RecId;
                assetAdditionalDepreciationTmp.TransactionType           = AssetTransType::AdditionalDepReserve_JP;
                assetAdditionalDepreciationTmp.AllocationTransactionDate = assetDistributionLine.TransDate;
                assetAdditionalDepreciationTmp.AllocationTransactionType = AssetTransType::AdditionalDepReserveAllocation_JP;
                assetAdditionalDepreciationTmp.AllocationAmount          = assetDistributionLine.AmountMST;
                assetAdditionalDepreciationTmp.Allocated                 = assetDistributionLine.AmountMST;
                assetAdditionalDepreciationTmp.AllocationVoucher         = assetDistributionLine.Voucher;
                assetAdditionalDepreciationTmp.insert();
            }

            // inserts planed reserve allocation trans
            signOfReserve       = sign(assetTransMerge.AmountMST);
            assetTableMethod = AssetTableMethod::construct(assetBook, dateMax(), '', false, false, true)
                as AssetTableMethod_JP;
            assetTableInterval  = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(assetBook);
            assetTableMethod.parmSpecialDepReserveDate(assetTransMerge.TransDate);
            assetTableMethod.parmSpecialDepReserveAmount(abs(assetTransMerge.AmountMST));
            assetTableMethod.parmSpecialDepReserveRecId(assetTransMerge.RecId);
            assetTableMethod.parmSpecialDepReserveTableId(assetTransTableId);
            assetTableMethod.initAdditional();
            depreciationStartDate = assetTableInterval.findLastDayOfYear(assetTransMerge.TransDate) + 1;
            depreciationStartDate = max(assetBook.SpecialDepLastAllocationDate_JP + 1, depreciationStartDate);
            assetTableMethod.parmPeriodStart_JP(depreciationStartDate);
            assetTableMethod.parmPeriodEnd_JP(assetTableInterval.endPeriod(depreciationStartDate));

            while (assetTableMethod.next())
            {
                periodEndDate = assetTableMethod.parmPeriodEnd_JP();
                amountCur     = -1 * signOfReserve * assetTableMethod.calc();
                if (amountCur)
                {
                    if (!nextAllocationDate
                        || nextAllocationDate > periodEndDate)
                    {
                        nextAllocationDate = periodEndDate;
                    }

                    assetAdditionalDepreciationTmp.TransactionDate           = assetTransMerge.TransDate;
                    assetAdditionalDepreciationTmp.FixedAssetNumber          = assetTable.AssetId;
                    assetAdditionalDepreciationTmp.AssetBookId               = assetBook.BookId;
                    assetAdditionalDepreciationTmp.ReserveTransRecId         = assetTransMerge.RecId;
                    assetAdditionalDepreciationTmp.TransactionType           = AssetTransType::AdditionalDepReserve_JP;
                    assetAdditionalDepreciationTmp.AllocationTransactionDate = periodEndDate;
                    assetAdditionalDepreciationTmp.AllocationTransactionType = AssetTransType::AdditionalDepReserveAllocation_JP;
                    assetAdditionalDepreciationTmp.AllocationAmount          = amountCur;
                    assetAdditionalDepreciationTmp.Allocated                 = 0;
                    assetAdditionalDepreciationTmp.AllocationVoucher         = #Blank;
                    assetAdditionalDepreciationTmp.insert();
                }
            }

            if (reserveDateChanged)
            {
                update_recordSet assetAdditionalDepreciationTmp
                    setting NextAllocationDate = nextAllocationDateTmp, Amount = reserveAmount
                    where assetAdditionalDepreciationTmp.TransactionDate == reserveTransDate;

                totalAmount      += reserveAmount;
                reserveTransDate = assetTransMerge.TransDate;
                reserveAmount    = -assetTransMerge.AmountMST;
            }
        }

         update_recordSet assetAdditionalDepreciationTmp
            setting NextAllocationDate = nextAllocationDate, Amount = reserveAmount
            where assetAdditionalDepreciationTmp.TransactionDate == reserveTransDate;

        totalAmount += reserveAmount;

        update_recordSet assetAdditionalDepreciationTmp
            setting TotalAmount = totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00022, funcName());

        QueryBuildDataSource    qbds;

        contract = this.parmDataContract() as AssetAdditionalDepreciationContract_JP;
        query    = this.parmQuery();

        if (contract)
        {
            fiscalYear = contract.parmFiscalYear();
        }

        qbds = query.dataSourceTable(tablenum(AssetTransMerge));
        qbds.addRange(fieldNum(AssetTransMerge, TransType)).value(queryValue(AssetTransType::AdditionalDepReserve_JP));

        if (fiscalYear)
        {
            qbds.addRange(fieldNum(AssetTransMerge, TransDate)).value(queryRange(dateNull(), this.getFiscalYearEndDate(fiscalYear)));
        }

        this.insertAssetAdditionalDepreciationTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>