<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerLedgerVoucherExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalizerLedgerVoucherExt</c> class is an extension for the
/// <c>SublegerJournalizer</c> class to put Inventory side entries coming from LedgerVoucher on the same
/// voucher as the Accrual/Liability entries during product receipt and vendor invoice posting.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt),
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice)
]
public class SubledgerJournalizerLedgerVoucherExt extends SubledgerJournalizerExtension
{
    // <GEEU>
    #ISOCountryRegionCodes
    // </GEEU>

    FormLetterJournalPostCaller     journalPostCaller;
    boolean                         isLedgerVoucherPosted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SubledgerJournalizer_validatingDebitCreditBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate that is called prior <c>SubledgerJournalizer.validateDebitCreditBalance</c> method logic.
    /// </summary>
    /// <param name="_args">
    /// Arguments of the delegate.
    /// </param>
    [SubscribesTo(classStr(SubledgerJournalizer), delegateStr(SubledgerJournalizer, validatingDebitCreditBalance))]
    public static void SubledgerJournalizer_validatingDebitCreditBalance(SubledgerJournalizerValidatingDebitCreditBalanceArgs _args)
    {
        FormLetterJournalPostCaller journalPostCaller;

        if (!_args)
        {
            _args = SubledgerJournalizerValidatingDebitCreditBalanceArgs::construct();
        }
        else if (_args.parmSubledgerJournalizerCaller())
        {
            journalPostCaller = _args.parmSubledgerJournalizerCaller() as FormLetterJournalPostCaller;
        }

        _args.parmRequireVoucherBalancedInTransCur(!journalPostCaller || journalPostCaller.parmRequireVoucherBalancedInTransCur());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether to subscribe to the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        boolean canSubscribe = false;

        journalPostCaller = subledgerJournalizer.parmCaller() as FormLetterJournalPostCaller;

        if (journalPostCaller != null && journalPostCaller.parmLedgerVoucher() != null && SourceDocumentCompletionRule::recognizeVoucherInSubledger())
        {
            canSubscribe = true;
        }

        return canSubscribe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordedSubledgerEntriesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and updates the ledger voucher objects that needs to posted to Subledger Journal, posts the ledger voucher
    /// which creates Subledger Journal Account Entries and marks the entries which balance to 0 for Accounting
    /// and Reporting currencies as 'DoNotTransfer'.
    /// </summary>
    /// <param name="_eventArgs">
    /// Event handler arguments.
    /// </param>
    /// <remarks>
    /// This event handler is only invoked during Product Receipt or Vendor Invoice journalization.
    /// </remarks>
    public void recordedSubledgerEntriesEventHandler(SubledgerJournalizerExtensionArgs _eventArgs)
    {
        LedgerVoucher                           ledgerVoucher;
        LedgerVoucherObject                     ledgerVoucherObject;
        AccountingDate                          accountingDate;
        SubledgerJournalEntry                   subledgerJournalEntry;
        Voucher                                 voucher;
        SubledgerJournalEntryType               subledgerJournalEntryType;
        CurrentOperationsTax                    postingLayer;
        Map                                     subledgerJournalEntries;
        MapEnumerator                           subledgerJournalEntriesEnumerator;
        Set                                     subledgerJournalEntryRecIdCollection;
        SetEnumerator                           subledgerJournalEntryRecIdEnumerator;

        if (!isLedgerVoucherPosted)
        {
        subledgerJournalEntryRecIdCollection = new Set(typeName2Type(extendedTypeStr(RecId)));

        subledgerJournalEntries = _eventArgs.parmSubledgerJournalEntries();

        ledgerVoucher = journalPostCaller.parmLedgerVoucher();

        if (subledgerJournalEntries != null && subledgerJournalEntries.elements() > 0)
        {
            subledgerJournalEntriesEnumerator = new MapEnumerator(subledgerJournalEntries);

            while (subledgerJournalEntriesEnumerator.moveNext())
            {
                [voucher, accountingDate, subledgerJournalEntryType, postingLayer] = subledgerJournalEntriesEnumerator.currentKey();
                subledgerJournalEntry = subledgerJournalEntriesEnumerator.currentValue();

                if (subledgerJournalEntryType == SubledgerJournalEntryType::None)
                {
                    // When encumbrance process is enabled, encumbrance entries will be created with Obligates subledger journal entry type during purchase
                    // order confirmation time.  When the vendor invoice is posted for the purchase order, there will be two subledger journal entries posted:
                    // one with None subledger journal entry type and the other with the Obligated subledger journal entry type. The enumbrance reversal
                    // entries are associated with the Obligated subledger journal entry type. The inventory voucher transactions should be associated with the
                    // None subledger journal entry type subledger journal entry.

                    ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(voucher, accountingDate, postingLayer);

                    if (ledgerVoucherObject != null)
                    {
                        ledgerVoucherObject.parmSubledgerJournalEntryRecId(subledgerJournalEntry.RecId);
                        subledgerJournalEntryRecIdCollection.add(subledgerJournalEntry.RecId);
                    }
                }
            }
        }

        ledgerVoucher.end();

            isLedgerVoucherPosted = true;

        if (subledgerJournalEntryRecIdCollection != null && subledgerJournalEntryRecIdCollection.elements() > 0)
        {
            subledgerJournalEntryRecIdEnumerator =  subledgerJournalEntryRecIdCollection.getEnumerator();

            while (subledgerJournalEntryRecIdEnumerator.moveNext())
            {
                SubledgerJournalizer::markDoNotTransferEntries(subledgerJournalEntryRecIdEnumerator.current());
            }
        }
    }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension's recordedSubledgerJournalAccountEntries event.
    /// </summary>
    protected void subscribe()
    {
        if (this.canSubscribe())
        {
            subledgerJournalizer.recordedSubledgerJournalAccountEntries += eventhandler(this.recordedSubledgerEntriesEventHandler);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>