<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCycleCountCreateItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCycleCountCreateItem</c> class is used to run batch job for cycle count for an item.
/// </summary>
public class WHSCycleCountCreateItem extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    QueryRun        queryRun;

    DialogField     dlgFieldMaxCounts;
    DialogField     dlgFieldWorkPoolId;

    WHSMaxCounts    maxCounts;
    WHSWorkPoolId   workPoolId;

    #define.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        maxCounts,
        workPoolId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for cycle count work for items.
    /// </summary>
    /// <returns>
    /// The query for cycle count work for items.
    /// </returns>
    Query buildQuery()
    {
        return new Query(querystr(WHSCycleCountCreateItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        dlgFieldMaxCounts   = dialog.addFieldValue(extendedTypeStr(WHSMaxCounts), maxCounts);
        dlgFieldWorkPoolId  = dialog.addFieldValue(extendedTypeStr(WHSWorkPoolId), workPoolId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains code to be executed after dialog run.
    /// </summary>
    /// <param name="dialog">
    /// Dialog that run previously.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        maxCounts   = dlgFieldMaxCounts.value();
        workPoolId  = dlgFieldWorkPoolId.value();

        boolean ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack(), #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            #OCCRetryCount

            try
            {
                Counter createdCycleCountWorkTablesCounter = 0;

                ttsbegin;

                WHSParameters   parameters = WHSParameters::find();
                WHSWorkCreateId  workCreateId = WHSWorkTable::getNextWorkCreateId();

                // Reset the queryRun, in case we ended up here as a result of retry.
                queryRun.reset();

                WHSWorkTable newWorkTable;

                while (queryRun.next())
                {
                    InventTable inventTable = queryRun.get(tablenum(InventTable));
                    InventSum inventSum = queryRun.get(tablenum(InventSum));
                    InventDim inventDim = queryRun.get(tablenum(InventDim));

                    if (InventLocation::find(inventDim.InventLocationId).WHSEnabled &&
                        WHSInventEnabled::exist(inventTable.ItemId))
                    {
                        WMSLocation wmsLocation = WMSLocation::find(inventDim.wmsLocationId, inventDim.InventLocationId);
                        WHSLocType locationType = wmsLocation.whsLocationType();

                        // If this location is not Cycle Countable, skip it.
                        if (!WHSLocationProfile::find(wmsLocation.LocProfileId).CycleCountable)
                        {
                            continue;
                        }

                        if (wmsLocation.RecId            > 0                                &&
                            locationType                != parameters.ShipFinalLocType      &&
                            locationType                != parameters.UserLocType           &&
                            locationType                != parameters.StageLocType          &&
                            inventSum.PhysicalInvent     > 0)
                        {
                            WHSWorkLine     workLine;
                            WHSWorkTable    workTable;

                            select firstonly RecId from workLine
                                where workLine.wmsLocationId == inventDim.wmsLocationId
                                    && workLine.WorkType == WHSWorkType::Count
                                exists join workTable
                                    where workTable.WorkId == workLine.WorkId
                                        && workTable.InventLocationId == inventDim.InventLocationId
                                        && workTable.InventSiteId == inventDim.InventSiteId
                                        && workTable.WorkStatus < WHSWorkStatus::Closed;

                            if (workLine.RecId == 0)
                            {
                                InventDim newInventDim;
                                newInventDim.InventLocationId = inventDim.inventLocationId;
                                newInventDim.InventSiteId = inventDim.InventSiteId;
                                newInventDim.wMSLocationId = inventDim.wMSLocationId;
                                newInventDim = InventDim::findOrCreate(newInventDim);

                                newWorkTable.clear();
                                newWorkTable.setWorkId();
                                newWorkTable.WorkBuildId        = workCreateId;
                                newWorkTable.WorkTransType      = WHSWorkTransType::CycleCount;
                                newWorkTable.InventSiteId       = newInventDim.InventSiteId;
                                newWorkTable.InventLocationId   = newInventDim.InventLocationId;
                                newWorkTable.WorkPriority       = parameters.CycleCountWorkPriority ? parameters.CycleCountWorkPriority : parameters.WorkPriority;
                                newWorkTable.WorkCreatedBy      = curUserId();
                                newWorkTable.WorkPoolId         = workPoolId;
                                newWorkTable.insert();

                                WHSWorkLine newWorkLine = this.initializeWorkLine(parameters, newWorkTable, newInventDim);
                                newWorkLine.insert();

                                ++createdCycleCountWorkTablesCounter;
                            }
                        }
                    }

                    if (maxCounts && createdCycleCountWorkTablesCounter == maxCounts)
                    {
                        break;
                    }
                }

                ttscommit;

                if (newWorkTable)
                {
                    info("@WAX697");
                }
                else
                {
                    info("@WAX698");
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError(#RetryNum))
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new work line record, based on the passed buffers.
    ///
    /// This method can be used as a hook to initialize extra fields,
    /// that would be added by partners/customers as extension fields to the work line table during the implementation.
    /// 
    /// </summary>
    /// <param name = "_parameters">Parameter record that should be used during the initialization of the new work line.</param>
    /// <param name = "_workTable">Related work table record.</param>    
    /// <param name = "_inventDim">Related inventory dimension record.</param>
    /// <returns>The initialized work line record to be inserted into the database.</returns>
    protected WHSWorkLine initializeWorkLine(WHSParameters _parameters, WHSWorkTable _workTable, InventDim _inventDim)
    {
        WHSWorkLine newWorkLine;

        newWorkLine.WorkId          = _workTable.WorkId;
        newWorkLine.LineNum         = 1;
        newWorkLine.WorkType        = WHSWorkType::Count;
        newWorkLine.WMSLocationId   = _inventDim.wMSLocationId;
        newWorkLine.InventDimId     = _inventDim.inventDimId;
        newWorkLine.Mandatory       = NoYes::Yes;
        newWorkLine.WorkClassId     = _parameters.DefaultCycleCountWorkClassId;
        
        return newWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to show query select button or not.
    /// </summary>
    /// <returns>
    /// True if to show query select button.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     ret = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery, #CurrentList] = packedClass;

                if (!packedQuery)
                {
                    ret = false;
                }
                else
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WHSCycleCountCreateItem construct()
    {
        return new WHSCycleCountCreateItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX497";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        WHSCycleCountCreateItem cycleCountCreateItem = WHSCycleCountCreateItem::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(cycleCountCreateItem))
        {
            if (cycleCountCreateItem.prompt())
            {
                cycleCountCreateItem.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSCycleCountCreateItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSCycleCountCreateItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>