<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class CustTableSearch
{
    private static CustInstrumentationLogger custInstrumentationLogger;

    internal static const int MAX_QUERY_SEARCH_RESULTS = 500;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    public static List search(CustTableSearchType _custTableSearchType, str _searchString, Guid _guid, UserId _userId)
    {
        List custTableRecIds;

        str searchString = strReplace(_searchString, '%', '*');

        switch(_custTableSearchType)
        {
            case CustTableSearchType::PhoneNumber: 
                custTableRecIds = CustTableSearch::searchByLogisticsElectronicAddress(LogisticsElectronicAddressMethodType::Phone, searchString, _guid, _userId);
                break;

            case CustTableSearchType::EmailAddress:
                custTableRecIds = CustTableSearch::searchByLogisticsElectronicAddress(LogisticsElectronicAddressMethodType::Email, searchString, _guid, _userId);
                break;

            default:
                // Do nothing as CustTableSearchType is extensible and CoC might handle new enum elements.
        }

        return custTableRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchByLogisticsElectronicAddress</Name>
				<Source><![CDATA[
    private static List searchByLogisticsElectronicAddress(LogisticsElectronicAddressMethodType _methodType,
                                                           str _searchString,
                                                           Guid _guid, 
                                                           UserId _userId)
    {
        CustTable custTable;
        DirPartyLocation dirPartyLocation;
        LogisticsElectronicAddress logisticsElectronicAddress;
        int searchResultCounter;
        boolean isTableRequired;
        CustTableCustomSearchResult custTableCustomSearchResult;
        List custTableRecIds = new List(Types::Int64);
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(custTableCustomSearchResult));

        using(SysInstrumentationActivityContext activityContext = CustTableSearch::getActivityContextForRun(CustTableCustomSearchInstrumentationConstants::CustTableCustomLogisticsElectronicsAddressSearch))
        {
            int startTime = activityContext.getElapsedMilliseconds();

            while select RecId from custTable
            exists join dirPartyLocation
            where dirPartyLocation.Party == custTable.Party
                && dirPartyLocation.IsPostalAddress == NoYes::No
            exists join logisticsElectronicAddress
            where logisticsElectronicAddress.Location == dirPartyLocation.Location
                && logisticsElectronicAddress.Type == _methodType
                && logisticsElectronicAddress.IsPrimary == NoYes::Yes
                && logisticsElectronicAddress.Locator like _searchString
            {
                searchResultCounter++;

                if (searchResultCounter <= MAX_QUERY_SEARCH_RESULTS + 1)
                {
                    custTableRecIds.addEnd(custTable.RecId);
                }

                custTableCustomSearchResult.clear();
                custTableCustomSearchResult.CustTable = custTable.RecId;
                custTableCustomSearchResult.SessionId = _guid;
                custTableCustomSearchResult.UserId = _userId;
                recordInsertList.add(custTableCustomSearchResult);
            }

            if (searchResultCounter > MAX_QUERY_SEARCH_RESULTS)
            {
                isTableRequired = true;
                recordInsertList.insertDatabase();
            }

            int endTime = activityContext.getElapsedMilliseconds();

            activityContext.addCustomProperty(CustTableCustomSearchInstrumentationConstants::TimeTakenToLoop, int2Str(endTime - startTime));
            activityContext.addCustomProperty(CustTableCustomSearchInstrumentationConstants::SearchResultRecordCount, ApplicationCommonInstrumentationMagnitude::log10magnitude(searchResultCounter));
            activityContext.addCustomProperty(CustTableCustomSearchInstrumentationConstants::IsTableRequired, any2Str(isTableRequired));
        }

        return custTableRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanCustomSearchResultBySessionId</Name>
				<Source><![CDATA[
    internal static void cleanCustomSearchResultBySessionId(guid _sessionId, UserId _userId)
    {
        CustTableCustomSearchResult custTableCustomSearchResult;

        delete_from custTableCustomSearchResult
            where custTableCustomSearchResult.SessionId == _sessionId
            && custTableCustomSearchResult.UserId == _userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForRun</Name>
				<Source><![CDATA[
    private static SysInstrumentationActivityContext getActivityContextForRun(str _activityName)
    {
        if (!custInstrumentationLogger)
        {
            custInstrumentationLogger = CustInstrumentationLogger::newFromInstrumentationNameSpace(CustTableCustomSearchInstrumentationConstants::CustTableCustomSearchInstrumentationNamespace);
        }

        return custInstrumentationLogger.activityContext(custInstrumentationLogger.activity(_activityName, CustTableCustomSearchInstrumentationConstants::CustTableCustomSearchInstrumentationNamespace));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>