<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFTCEventProcessBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRFTCEventProcessBatch</c> class handles processing FTC events in batch.
/// </summary>
class MCRFTCEventProcessBatch extends RunBaseBatch implements BatchRetryable
{
    // Packed variables
    int                 dummy;
    // Dialog fields
    DialogField         dlgStartDate;
    DialogField         dlgEndDate;

    transDate           startDate;
    transDate           endDate;
    MCROrderParameters  mcrOrderParameters;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        dummy,
        startDate,
        endDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>SalesID</c> to the dialog box
    /// allowing the user to run a batch over the selected
    /// <c>SalesID</c>.
    /// </summary>
    /// <returns>
    /// The dialog box box.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase               dialog;

        //Setup the dialog
        dialog = super();
        dialog.caption("@MCR12442");

        dlgStartDate = dialog.addField(extendedtypestr(transDate), "@SYS35856" );
        dlgStartDate.value('');

        dlgEndDate = dialog.addField(extendedtypestr(transDate), "@SYS22882" );
        dlgEndDate.value('');

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the user entered values from dialog form.
    /// </summary>
    /// <returns>
    /// true if the values are retrieved successfully; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (dlgStartDate && dlgStartDate.value())
        {
            startDate = dlgStartDate.value();
        }

        if (dlgStartDate && dlgStartDate.value())
        {
            endDate = dlgEndDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    boolean prompt()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes automatic notification events.
    /// </summary>
    /// <remarks>
    /// When this job runs, it captures the current date when it starts.
    /// Even if the job run time spans multiple days, it will still act as if it
    /// was run all on the first day.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If the validation fails; throws an error.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If the automatic notification event action is not supported; throws an error.
    /// </exception>
    public void run()
    {
        SalesTable              salesTable;
        MCROrderEventTable      mcrOrderEventTableStart, mcrOrderEventTableStop, mcrOrderEventTableInsert;
        utcDateTime             baseDateTime, firstDateTime, secondDateTime, cancelDateTime;
        //11:59:59
        int                     time = 86399;

        void processEvent( MCROrderEventType _mcrOrderEventType,
            RetailEventNotificationType _retailEventNotificationType)
        {
            ttsBegin;
            mcrOrderEventTableInsert.insertFTCEvent(
                    salesTable.SalesId,
                    _mcrOrderEventType);

            RetailEventNotificationAction::InsertRetailOENAction(_retailEventNotificationType,
                salesTable.RecId,
                salesTable);

            if (_mcrOrderEventType == MCROrderEventType::FTCBackOrderCancellation)
            {
                try
                {
                    MCRSalesOrderCancellation::cancelOrderFTC(salesTable, false);
                }
                catch
                {
                    Global::exceptionTextFallThrough();
                }
            }

            info(strfmt("@MCR4410284",
                enum2str(_mcrOrderEventType),
                salesTable.SalesId));
            ttsCommit;
        }

        mcrOrderParameters = MCROrderParameters::find();

        if (!this.validate())
        {
            throw error("@SYS21628");
        }
        info("@MCR12603");

        baseDateTime = DateTimeUtil::newDateTime(DateTimeUtil::date(DateTimeUtil::getSystemDateTime()), time);
        firstDateTime = DateTimeUtil::addDays(baseDateTime, -mcrOrderParameters.FTCDaysFirstNotice);
        secondDateTime = DateTimeUtil::addDays(baseDateTime, -mcrOrderParameters.FTCDaysSecondNotice);
        cancelDateTime = DateTimeUtil::addDays(baseDateTime, -mcrOrderParameters.FTCDaysCancellationNotice);

        if (startDate == dateNull())
        {
            startDate = DateTimeUtil::date(DateTimeUtil::minValue());
        }

        if (endDate == dateNull())
        {
            endDate = DateTimeUtil::date(DateTimeUtil::maxValue());
        }

        //select all order events whose start clock started within the user's entered range,
        //whose date has meet or exceeded the days after parameter,
        //that has not had a stopped clock or cancellation event
        while select createdDateTime, SalesId from mcrOrderEventTableStart
            where mcrOrderEventTableStart.MCROrderEventType == MCROrderEventType::FTCClockStarted
                && mcrOrderEventTableStart.createdDateTime >= DateTimeUtil::newDateTime(startDate, 0)
                && mcrOrderEventTableStart.createdDateTime <= DateTimeUtil::newDateTime(endDate, time)
                && (mcrOrderEventTableStart.createdDateTime <= firstDateTime
                    || mcrOrderEventTableStart.createdDateTime <= secondDateTime
                    || mcrOrderEventTableStart.createdDateTime <= cancelDateTime)
                join salesTable
                where salesTable.SalesId == mcrOrderEventTableStart.SalesId
                    && salesTable.SalesStatus == SalesStatus::Backorder
                notExists join mcrOrderEventTableStop
                where mcrOrderEventTableStop.SalesId == mcrOrderEventTableStart.SalesId
                    &&  (mcrOrderEventTableStop.MCROrderEventType == MCROrderEventType::FTCClockStopped
                        || mcrOrderEventTableStop.MCROrderEventType == MCROrderEventType::FTCBackOrderCancellation)
        {
            //create latest qualified event possible
            if (mcrOrderEventTableStart.createdDateTime <= cancelDateTime)
            {
                processEvent(MCROrderEventType::FTCBackOrderCancellation, RetailEventNotificationType::MCRFTCCancellationNotice);
            }
            else if (mcrOrderEventTableStart.createdDateTime <= secondDateTime)
            {
                if (!MCROrderEventTable::findIdEventType(mcrOrderEventTableStart.SalesId, MCROrderEventType::FTCSecondNotification))
                {
                    processEvent(MCROrderEventType::FTCSecondNotification, RetailEventNotificationType::MCRFTCSecondNotice);
                }
            }
            else
            {
                if (!MCROrderEventTable::findIdEventType(mcrOrderEventTableStart.SalesId, MCROrderEventType::FTCFirstNotification))
                {
                    processEvent(MCROrderEventType::FTCFirstNotification, RetailEventNotificationType::MCRFTCFirstNotice);
                }
            }
        }

        info("@MCR12604");
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = runbase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the automatic notification sales parameter is on.
    /// </summary>
    /// <param name="calledFrom">
    /// The object from which the validation is called; optional.
    /// </param>
    /// <returns>
    /// true if the automatic notification parameter is found on the <c>MCROrderParameters</c> table;
    /// otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        if (!MCROrderParameters::find().MCRFTCProcessing)
        {
            return checkFailed("@MCR12705");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRFTCEventProcessBatch construct()
    {
        return new MCRFTCEventProcessBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR12442";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRFTCEventProcessBatch mcrFTCEventProcessBatch = new MCRFTCEventProcessBatch();
        mcrFTCEventProcessBatch.parmInBatch(false);

        if (mcrFTCEventProcessBatch.prompt())
            mcrFTCEventProcessBatch.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>