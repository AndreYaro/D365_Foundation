<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleExpenseReportExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleExpenseReport))]
class DimDerJourRuleExpenseReportExt extends DimensionDerivationRuleExtension
{
    TrvExpTrans                             trvExpTrans;
    TrvPayMethod                            trvPayMethod;
    AccountingDistribution                  accountingDistribution;
    SourceDocumentLineItemITax              iTax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultAccountFromPaymethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerDimensionDefaultAccount getDefaultAccountFromPaymethod()
    {
        LedgerPostingType               ledgerPostingType;
        TrvPartyEmployeeRelationship    trvEmpSetup;
        LedgerDimensionAccount          ledgerDimension;
        TrvExchSetup                    trvExchSetup;
        CurrencyCode                    cashAdvanceCurrencyCode;
        TrvExpTrans                     trvExpTransForCashAdv;
        AccountingDistribution          parentAccountingDistribution;
        SourceDocumentLineRecId         sourceDocumentLineRecId;

        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger('DimDerJourRuleExpenseReportExt');
        ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(logger);

        using (var activityContext = taxActivities.getDefaultAccountFromPaymethodContext())
        {
            if (trvPayMethod)
            {
                switch (trvPayMethod.PostMethod)
                {
                    case TrvPostMethod::Vendor :
                        ledgerPostingType = LedgerPostingType::VendBalance;

                        ledgerDimension = VendLedgerAccounts::summaryLedgerDimension(
                        LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvPayMethod.parmOffsetLedgerDimension()),
                                            '', false);
                        break;
                    case TrvPostMethod::Bank:
                        ledgerPostingType = LedgerPostingType::Bank;
                        ledgerDimension = BankAccountTable::findByLedgerDimension(trvPayMethod.parmOffsetLedgerDimension()).LedgerDimension;
                        break;
                    case TrvPostMethod::Employee:
                        trvEmpSetup = TrvPartyEmployeeRelationship::find(trvExpTrans.CreatingWorker);
                        if (trvEmpSetup)
                        {
                            if (!trvEmpSetup.parmLedgerDimension())
                            {
                                warning(strFmt("@SYS305453",HcmWorker::find(trvExpTrans.CreatingWorker).PersonnelNumber));
                            }
                            switch (trvEmpSetup.AccountType)
                            {
                                case LedgerJournalACType::Bank :
                                    ledgerPostingType = LedgerPostingType::Bank;
                                    ledgerDimension = BankAccountTable::findByLedgerDimension(trvEmpSetup.parmLedgerDimension()).LedgerDimension;
                                    break;

                                case LedgerJournalACType::Cust :
                                    ledgerPostingType = LedgerPostingType::CustBalance;
                                    ledgerDimension = CustLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvEmpSetup.parmLedgerDimension()), '', false);
                                    break;

                                case LedgerJournalACType::Ledger:
                                case LedgerJournalACType::Vend:
                                    if (!TrvExpenseHelper::isTrvApplyCashAdvanceMappingFlightEnabled())
                                    {
                                        // Use cash advance currency code(i.e. Ledger dimension) if available
                                        cashAdvanceCurrencyCode = TrvAccountingDistribution::findByReferenceAccountingDistribution(accountingDistribution.RecId).AdvanceCurrencyCode;

                                        if (!cashAdvanceCurrencyCode)
                                        {
                                            cashAdvanceCurrencyCode = TrvAccountingDistribution::findByAccountingDistribution(accountingDistribution.RecId).AdvanceCurrencyCode;
                                        }
                                    }

                                    if (cashAdvanceCurrencyCode)
                                    {
                                        trvExchSetup = TrvExchSetup::find(cashAdvanceCurrencyCode);
                                        sourceDocumentLineRecId = accountingDistribution.SourceDocumentLine;

                                        if (accountingDistribution.MonetaryAmount == MonetaryAmount::Tax ||
                                        accountingDistribution.MonetaryAmount == MonetaryAmount::TaxNonRecoverable)
                                        {
                                            // Retrieve parent accounting distribution source document line record id for tax related distributions.
                                            select firstonly SourceDocumentLine from parentAccountingDistribution
                                            where parentAccountingDistribution.RecId == accountingDistribution.ParentDistribution;

                                            sourceDocumentLineRecId = parentAccountingDistribution.SourceDocumentLine;

                                            logger.logInformation(
                                                strFmt('SDL RecId from parentAccountingDistribution: %1, RecId from parentAccountingDistribution: %2, AccountType: %3',
                                                sourceDocumentLineRecId, parentAccountingDistribution.RecId, 
                                                (trvEmpSetup.AccountType == LedgerJournalACType::Ledger) ? 'Ledger' : 'Vendor'));
                                        }

                                        // Verify that expense line is not linked to return cash category type
                                        select RecId from trvExpTransForCashAdv
                                        where trvExpTransForCashAdv.SourceDocumentLine == sourceDocumentLineRecId
                                           && trvExpTransForCashAdv.CashAdvanceRecId == 0;

                                        if (trvExchSetup && trvExpTransForCashAdv.RecId != 0)
                                        {
                                            ledgerDimension = TrvExpTransSourceDocLineItem::convertToLedgerDimension(trvExchSetup.AccountType, trvExchSetup.AdvanceAccountLedgerDimension);
                                            ledgerPostingType = LedgerPostingType::LedgerJournal;
                                        }
                                        else
                                        {
                                            if (trvEmpSetup.AccountType == LedgerJournalACType::Ledger)
                                            {
                                                ledgerPostingType = LedgerPostingType::LedgerJournal;
                                                ledgerDimension = trvEmpSetup.LedgerDimension;
                                            }
                                            else
                                            {
                                                ledgerPostingType = LedgerPostingType::VendBalance;
                                                ledgerDimension = VendLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvEmpSetup.parmLedgerDimension()), '', false);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (trvEmpSetup.AccountType == LedgerJournalACType::Ledger)
                                        {
                                            ledgerPostingType = LedgerPostingType::LedgerJournal;
                                            ledgerDimension = trvEmpSetup.LedgerDimension;
                                        }
                                        else
                                        {
                                            ledgerPostingType = LedgerPostingType::VendBalance;
                                            ledgerDimension = VendLedgerAccounts::summaryLedgerDimension(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(trvEmpSetup.parmLedgerDimension()), '', false);
                                        }

                                    }
                                    break;

                                case LedgerJournalACType::FixedAssets:
                                case LedgerJournalACType::Project:
                                default:
                                    throw error(strFmt("@SYS305184",HcmWorker::find(trvEmpSetup.Worker).PersonnelNumber));
                            }
                        }
                        else
                        {
                            throw error("@Expense:WorkerMissingVendorMapping");
                        }
                        break;

                    default:
                        ledgerPostingType = LedgerPostingType::LedgerJournal;
                        ledgerDimension = trvPayMethod.OffsetLedgerDimension;
                        break;
                }
            }
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAccountFromTaxSetting</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount getDefaultAccountFromTaxSetting()
    {
        TaxAccountGroup                 taxAccountGroup;
        LedgerDimensionDefaultAccount   ledgerDimensionId;
        TaxTable                        taxTable;
        TaxDirection                    taxDirection;

        if (iTax)
        {
            changeCompany(iTax.parmTaxDataAreaId())
            {
                taxTable = taxTable::find(iTax.parmTaxCode());
            }
            taxDirection = iTax.parmTaxDirection();
        }
        else
        {
            return ledgerDimensionId;
        }

        taxAccountGroup   = taxTable.TaxAccountGroup;

        if (taxDirection == TaxDirection::UseTax)
        {
            ledgerDimensionId = TaxLedgerAccountGroup::offsetUseTaxLedgerDimension(taxTable.TaxCode);
        }
        else
        {
            ledgerDimensionId = TaxLedgerAccountGroup::find(taxAccountGroup).taxLedgerDimension(taxDirection);
        }

        return ledgerDimensionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        super();

        this.initializePayMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePayMethod</Name>
				<Source><![CDATA[
    private void initializePayMethod()
    {
        RefRecId                sourceDocumentLineExpense;
        SourceDocumentLineItem  sourceDocumentLineItem;

        sourceDocumentLineItem = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem();
        accountingDistribution = dimensionDerivationRule.parmAccountingRule().parmAccountingDistribution();

        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger('DimDerJourRuleExpenseReportExt');
        ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(logger);

        using (var activityContext = taxActivities.initializePayMethodContext())
        {
            if (sourceDocumentLineItem is SourceDocumentLineItemITax)
            {
                iTax = sourceDocumentLineItem as SourceDocumentLineItemITax;

                // if it is not getting an expense line here, something is wrong                
                RefRecId parentSourceDocumentLineRecId = sourceDocumentLineItem.parmParentSourceDocumentLine().RecId;
                logger.logInformation(strFmt('SDL child RecId: %1', sourceDocumentLineItem.parmSourceDocumentLine().RecId));
                if (parentSourceDocumentLineRecId == 0)
                {
                    logger.logError('SDL parent RecId: 0');
                }
                else
                {
                    logger.logInformation(strFmt('SDL parent RecId: %1', parentSourceDocumentLineRecId));
                }

                sourceDocumentLineExpense = parentSourceDocumentLineRecId;
            }
            else
            {
                sourceDocumentLineExpense = sourceDocumentLineItem.parmSourceDocumentLine().RecId;
            }

            trvExpTrans = TrvExpTrans::findBySourceDocumentLine(sourceDocumentLineExpense);

            if (CompanyInfo::exist(trvExpTrans.LegalEntity))
            {
                changeCompany(CompanyInfo::getDataArea(trvExpTrans.LegalEntity))
                {
                     trvPayMethod = TrvPayMethod::find(trvExpTrans.PayMethod);
                }
            }
            else
            {
                throw error("@Expense:InvalidExpenseLegalEntity");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the ledger dimension allocation list for balancing subledger journal account entry.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit                     side;
        boolean                         oppositeAccount;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerDimensionAllocation       ledgerDimensionAllocation;

        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger('DimDerJourRuleExpenseReportExt');
        ExpenseInstrumentationTaxActivities taxActivities = ExpenseInstrumentationTaxActivities::construct(logger);
        
        side = dimensionDerivationRule.parmAccountingRule().parmSide();
        oppositeAccount = true;

        if (!trvPayMethod)
        {
            this.initializePayMethod();
        }

        using (var activityContext = taxActivities.populateDimAllocListContext())
        {
            // For tax line
            if (iTax)
            {
                //iTax.
                if (iTax.parmTaxDirection() == TaxDirection::UseTax)
                {
                    ledgerDimensionDefaultAccount = this.getDefaultAccountFromTaxSetting();
                }
                else
                {
                    ledgerDimensionDefaultAccount = this.getDefaultAccountFromPaymethod();
                }

                logger.logInformation(strFmt("SourceDocumentLineItem is Tax - Tax Code: %1, " +
                    "Tax Data Area ID: %2, Tax Direction: %3, Tax Group: %4, Tax Item Group: %5, " +
                    "Purchase Tax on Operations: %6; Ledger Dimension Default Account: %7", 
                    iTax.parmTaxCode(), iTax.parmTaxDataAreaId(), enum2Str(iTax.parmTaxDirection()), 
                    iTax.parmTaxGroup(), iTax.parmTaxItemGroup(), iTax.parmPurchTaxOnOperations(), 
                    LedgerDimensionDefaultAccount));
            }
            else // This is for main expense line
            {
                ledgerDimensionDefaultAccount = this.getDefaultAccountFromPaymethod();
            }

            if (ledgerDimensionDefaultAccount)
            {
                ledgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(ledgerDimensionDefaultAccount,
                                                                                                dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution().LedgerDimension);

                ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                        1,
                                                                                        side,
                                                                                        oppositeAccount);

                _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>