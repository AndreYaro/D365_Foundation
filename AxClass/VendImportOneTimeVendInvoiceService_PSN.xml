<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendImportOneTimeVendInvoiceService_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class for importing one-time vendor and invoices data into <c>VendOneTimeVendInvoiceStaging_PSN</c> table.
/// </summary>
public class VendImportOneTimeVendInvoiceService_PSN
{
    #VendOneTimeVendorInvoice_PSN
    guid importID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readImportFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads one-time vendor import file.
    /// </summary>
    /// <param name="_vendOneTimeVendInvoiceDataContract">
    /// Record buffer for <c>VendOneTimeVendInvoiceDataContract.</c>.
    /// </param>
    /// <returns>
    /// Returns <c>container</c>, containing import operation result.
    /// </returns>
    public container readImportFile(VendImportOneTimeVendInvoiceContract_PSN _vendOneTimeVendInvoiceDataContract)
    {
        container                              importOperationResult;
        List                                   parmRowDataList, validRecordList;
        Map                                    errorList, uniqueInvoices, uniqueVendors, dimensionAttributeValuePair;
        ListIterator                           iterator;
        RecordInsertList                       filledRecordList;
        Filename                               fileName;
        Counter                                counter;
        VendOneTimeImportValidation_PSN        vendOneTimeVendorImportRecordValidation;
        VendOneTimeVendStagingDataContract_PSN vendOneTimeVendStagingDataContract_PSN;
        VendOneTimeVendInvoiceFileRead_PSN     fileRead;
        List                                   recordList;

        try
        {
            fileRead         = new VendOneTimeVendInvoiceFileRead_PSN();
            recordList       = fileRead.readFile(_vendOneTimeVendInvoiceDataContract.parmFileUrl(),
                                            _vendOneTimeVendInvoiceDataContract.parmAccountStructure());

            counter          = 1;
            uniqueInvoices   = new Map(Types::String, Types::Integer);
            uniqueVendors    = new Map(Types::String, Types::Integer);
            iterator         = new ListIterator(recordList);
            parmRowDataList  = new List(Types::Class);

            // Unpacking file row data contracts.
            while (iterator.more())
            {
                vendOneTimeVendStagingDataContract_PSN = new VendOneTimeVendStagingDataContract_PSN();
                vendOneTimeVendStagingDataContract_PSN.unpack(iterator.value());

                // Storing unique invoices for one-time vendor report.
                if (!uniqueInvoices.exists(vendOneTimeVendStagingDataContract_PSN.parmInvoiceNumber()))
                {
                    uniqueInvoices.insert(vendOneTimeVendStagingDataContract_PSN.parmInvoiceNumber(), counter);
                }

                // Storing unique vendors or organization name for one-time vendor report.
                if (vendOneTimeVendStagingDataContract_PSN.parmVendRecordType() == enum2str(DirPartyBaseType::Person))
                {
                    // Insert vendor name if not already exists in the list.
                    if (!uniqueVendors.exists(vendOneTimeVendStagingDataContract_PSN.parmPersonFirstName() +
                        vendOneTimeVendStagingDataContract_PSN.parmPersonMiddleName() +
                        vendOneTimeVendStagingDataContract_PSN.parmPersonLastName()))
                    {
                        uniqueVendors.insert(vendOneTimeVendStagingDataContract_PSN.parmPersonFirstName() +
                            vendOneTimeVendStagingDataContract_PSN.parmPersonMiddleName() +
                            vendOneTimeVendStagingDataContract_PSN.parmPersonLastName(),
                            counter);
                    }
                }
                else
                {
                    // Insert organization name if not already exists in the list.
                    if (!uniqueVendors.exists(vendOneTimeVendStagingDataContract_PSN.parmOrganizationName()))
                    {
                        uniqueVendors.insert(vendOneTimeVendStagingDataContract_PSN.parmOrganizationName(), counter);
                    }
                }

                if (vendOneTimeVendStagingDataContract_PSN.parmDimensionAttributeValuePair())
                {
                    dimensionAttributeValuePair = Map::create(vendOneTimeVendStagingDataContract_PSN.parmDimensionAttributeValuePair());
                }

                parmRowDataList.addEnd(vendOneTimeVendStagingDataContract_PSN);
                counter++;
                iterator.next();
            }

            // Validating row collection.
            vendOneTimeVendorImportRecordValidation = new VendOneTimeImportValidation_PSN();
            errorList                               = new Map(Types::Integer, Types::String);
            errorList                               = vendOneTimeVendorImportRecordValidation.validateImportFields(parmRowDataList, _vendOneTimeVendInvoiceDataContract.parmAccountStructure());
            fileName                                = _vendOneTimeVendInvoiceDataContract.parmFilename();
            validRecordList                         = vendOneTimeVendorImportRecordValidation.getValidImportData();

            // Only set the filledRecordList if the file reader returned a list with elements
            if (validRecordList.elements())
            {
                filledRecordList = this.createStagingRecords(validRecordList);
            }

            // Inserts data into staging table.
            if (errorList.elements() == 0 && filledRecordList)
            {
                ttsBegin;
                this.deleteExistingData();
                filledRecordList.insertDatabase();
                ttsCommit;

                info(strFmt("@SYP4950209", fileName));
            }
        }
        catch
        {
            throw Exception::Error;
        }

        // Sets return value of import file operation
        importOperationResult = this.returnImportOperationResult(errorList, parmRowDataList, uniqueVendors, uniqueInvoices, fileName, _vendOneTimeVendInvoiceDataContract.parmAccountStructure());

        return importOperationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStagingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>RecordInsertList</c> to be inserted.
    /// </summary>
    /// <param name="_validatedDataList">
    /// List of validated data which needs to be inserted.
    /// </param>
    /// <returns>
    /// Returns an object of <c>RecordInsertList</c>.
    /// </returns>
    private RecordInsertList createStagingRecords(List _validatedDataList)
    {
        ListEnumerator                         listEnumerator;
        DirPartyBaseType                       recordType;
        TaxIDType                              taxIDType;
        VendOneTimeVendInvoiceStaging_PSN      vendOneTimeVendInvoiceStaging;
        VendOneTimeVendStagingDataContract_PSN vendOneTimeVendStagingDataContract;
        RecordInsertList                       vendOneTimeVendInvoiceStagingRecordList;

        listEnumerator                          = _validatedDataList.getEnumerator();
        vendOneTimeVendInvoiceStagingRecordList = new RecordInsertList(tableNum(VendOneTimeVendInvoiceStaging_PSN));
        importID                                = newGuid();

        while (listEnumerator.moveNext())
        {
            vendOneTimeVendStagingDataContract = listEnumerator.current();

            vendOneTimeVendInvoiceStaging.ImportID                         = importID;
            vendOneTimeVendInvoiceStaging.UserID                           = curUserId();
            vendOneTimeVendInvoiceStaging.City                             = vendOneTimeVendStagingDataContract.parmCity();
            vendOneTimeVendInvoiceStaging.IBAN                             = vendOneTimeVendStagingDataContract.parmBankIBAN();
            vendOneTimeVendInvoiceStaging.Street                           = vendOneTimeVendStagingDataContract.parmStreet();
            vendOneTimeVendInvoiceStaging.ZipCode                          = vendOneTimeVendStagingDataContract.parmZipCode();
            vendOneTimeVendInvoiceStaging.SWIFTCode                        = vendOneTimeVendStagingDataContract.parmBankSWIFTNumber();
            vendOneTimeVendInvoiceStaging.LineNumber                       = str2num(vendOneTimeVendStagingDataContract.parmLineNumber());
            vendOneTimeVendInvoiceStaging.VendGroup                        = vendOneTimeVendStagingDataContract.parmVendGroupId();
            vendOneTimeVendInvoiceStaging.CountryRegionId                  = vendOneTimeVendStagingDataContract.parmCountryRegionId();
            vendOneTimeVendInvoiceStaging.LastName                         = vendOneTimeVendStagingDataContract.parmPersonLastName();
            vendOneTimeVendInvoiceStaging.Percent                          = str2num(vendOneTimeVendStagingDataContract.parmPercent());
            vendOneTimeVendInvoiceStaging.FirstName                        = vendOneTimeVendStagingDataContract.parmPersonFirstName();
            vendOneTimeVendInvoiceStaging.MiddleName                       = vendOneTimeVendStagingDataContract.parmPersonMiddleName();
            vendOneTimeVendInvoiceStaging.BankAccountId                    = vendOneTimeVendStagingDataContract.parmBankAccountId();
            vendOneTimeVendInvoiceStaging.InvoiceNumber                    = vendOneTimeVendStagingDataContract.parmInvoiceNumber();
            vendOneTimeVendInvoiceStaging.Quantity                         = str2num(vendOneTimeVendStagingDataContract.parmQuantity());
            vendOneTimeVendInvoiceStaging.LedgerDimension                  = vendOneTimeVendStagingDataContract.parmLedgerDimensionAccount();
            vendOneTimeVendInvoiceStaging.RoutingNumber                    = vendOneTimeVendStagingDataContract.parmBankRoutingNumber();
            vendOneTimeVendInvoiceStaging.OrganizationName                 = vendOneTimeVendStagingDataContract.parmOrganizationName();
            vendOneTimeVendInvoiceStaging.BankAccountNumber                = vendOneTimeVendStagingDataContract.parmBankAccountNumber();
            vendOneTimeVendInvoiceStaging.InvoiceDescription               = vendOneTimeVendStagingDataContract.parmInvoiceDescription();
            vendOneTimeVendInvoiceStaging.DueDate                          = str2Date(vendOneTimeVendStagingDataContract.parmDueDate(), #DateFormat);
            vendOneTimeVendInvoiceStaging.PostingDate                      = str2Date(vendOneTimeVendStagingDataContract.parmPostingDate(), #DateFormat);
            vendOneTimeVendInvoiceStaging.InvoiceDate                      = str2Date(vendOneTimeVendStagingDataContract.parmInvoiceDate(), #DateFormat);
            vendOneTimeVendInvoiceStaging.RecordType                       = str2enum(recordType, vendOneTimeVendStagingDataContract.parmVendRecordType());
            vendOneTimeVendInvoiceStaging.AccountingDistributionLineNumber = str2num(vendOneTimeVendStagingDataContract.parmAccountingDistributionLineNumber());
            vendOneTimeVendInvoiceStaging.Name                             = vendOneTimeVendStagingDataContract.parmProcurementCategory();
            vendOneTimeVendInvoiceStaging.ItemNumber                       = vendOneTimeVendStagingDataContract.parmItemNumber();
            vendOneTimeVendInvoiceStaging.ItemName                         = vendOneTimeVendStagingDataContract.parmItemName();
            vendOneTimeVendInvoiceStaging.PurchUnit                        = vendOneTimeVendStagingDataContract.parmUnit();
            vendOneTimeVendInvoiceStaging.UnitPrice                        = str2num(vendOneTimeVendStagingDataContract.parmUnitPrice());
            vendOneTimeVendInvoiceStaging.LineAmount                       = str2num(vendOneTimeVendStagingDataContract.parmLineAmount());
            vendOneTimeVendInvoiceStaging.FederalTaxID                     = vendOneTimeVendStagingDataContract.parmTax1099RegNum();
            vendOneTimeVendInvoiceStaging.FederalTaxIDType                 = str2enum(taxIDType, vendOneTimeVendStagingDataContract.parmTaxIDType());
            vendOneTimeVendInvoiceStaging.State                            = vendOneTimeVendStagingDataContract.parmState();
            vendOneTimeVendInvoiceStaging.ProcurementCategoryHierarchy     = vendOneTimeVendStagingDataContract.parmProcurementCategoryHierarchy();

            if (PublicSectorUtils::isBudgetReservationEnabled())
            {
                vendOneTimeVendInvoiceStaging.BudgetReservationDocumentNumber = vendOneTimeVendStagingDataContract.parmBudgetReservationDocumentNumber();
                vendOneTimeVendInvoiceStaging.BudgetReservationLineNumber = str2int(vendOneTimeVendStagingDataContract.parmBudgetReservationLineNumber());
            }

            if (this.validateFieldValue(vendOneTimeVendInvoiceStaging))
            {
                vendOneTimeVendInvoiceStagingRecordList.add(vendOneTimeVendInvoiceStaging);
            }
            else
            {
                vendOneTimeVendInvoiceStagingRecordList = null;
                break;
            }
        }

        return vendOneTimeVendInvoiceStagingRecordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes existing imported data for the user.
    /// </summary>
    private void deleteExistingData()
    {
        VendOneTimeVendInvoiceStaging_PSN vendOneTimeVendInvoiceStaging;

        delete_from vendOneTimeVendInvoiceStaging
            where vendOneTimeVendInvoiceStaging.UserID   == curUserId()
            &&    vendOneTimeVendInvoiceStaging.ImportID != importID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnImportOperationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets return values of import file operation.
    /// </summary>
    /// <param name="_errorList">
    /// Record buffer for invalid import data.
    /// </param>
    /// <param name="_stagingContractList">
    /// Record buffer for <c>VendOneTimeVendStagingDataContract_PSN</c>.
    /// </param>
    /// <param name="_uniqueVendor">
    /// Count of unique vendors in the file.
    /// </param>
    /// <param name="_uniqueInvoices">
    /// Count of unique invoices in the file.
    /// </param>
    /// <param name="_inputFileName">
    /// Name of the import file.
    /// </param>
    /// <param name="_accountStructure">
    /// Account structure selcted by the user.
    /// </param>
    /// <returns>
    /// Returns <c>container</c> for generating one-time vendor error report.
    /// </returns>
    private container returnImportOperationResult(Map _errorList, List _stagingContractList, Map _uniqueVendor, Map _uniqueInvoices, str _inputFileName, str _accountStructure)
    {
        container                              importOperationResult;
        List                                   packedStagingContractList;
        ListEnumerator                         stagingContractListEnumerator;
        VendOneTimeVendStagingDataContract_PSN vendOneTimeVendStagingDataContract_PSN;

        packedStagingContractList     = new List(Types::Container);
        stagingContractListEnumerator = _stagingContractList.getEnumerator();

        // Packing file row data contracts.
        while (stagingContractListEnumerator.moveNext())
        {
            vendOneTimeVendStagingDataContract_PSN = stagingContractListEnumerator.current();
            packedStagingContractList.addEnd(vendOneTimeVendStagingDataContract_PSN.pack());
        }

        // Inserting data into container
        importOperationResult = conIns(importOperationResult, 1, _errorList.pack());
        importOperationResult = conIns(importOperationResult, 2, packedStagingContractList.pack());
        importOperationResult = conIns(importOperationResult, 3, _uniqueVendor.elements());
        importOperationResult = conIns(importOperationResult, 4, _uniqueInvoices.elements());
        importOperationResult = conIns(importOperationResult, 5, _inputFileName);
        importOperationResult = conIns(importOperationResult, 6, _accountStructure);

        return importOperationResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates fields value from respective tables.
    /// </summary>
    /// <param name="_vendOneTimeVendInvoiceStaging">
    /// Record buffer for <c>VendOneTimeVendInvoiceStaging</c> table.
    /// </param>
    /// <returns>
    /// Returns true if validation is passed. Otherwise, false.
    /// </returns>
    private boolean validateFieldValue(VendOneTimeVendInvoiceStaging_PSN _vendOneTimeVendInvoiceStaging)
    {
        boolean isValid;
        Counter errorCounter;

        if (!_vendOneTimeVendInvoiceStaging.validateFieldValue(fieldStr(VendOneTimeVendInvoiceStaging_PSN, VendGroup)))
        {
            errorCounter++;
        }

        if (!_vendOneTimeVendInvoiceStaging.validateFieldValue(fieldStr(VendOneTimeVendInvoiceStaging_PSN, ItemNumber)))
        {
            errorCounter++;
        }

        if (!_vendOneTimeVendInvoiceStaging.validateFieldValue(fieldStr(VendOneTimeVendInvoiceStaging_PSN, PurchUnit)))
        {
            errorCounter++;
        }
        if (!_vendOneTimeVendInvoiceStaging.validateFieldValue(fieldStr(VendOneTimeVendInvoiceStaging_PSN, CountryRegionId)))
        {
            errorCounter++;
        }
        if (errorCounter == 0)
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>