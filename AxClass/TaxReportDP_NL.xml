<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_NL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportDP_NL</c> class provides data for the <c>TaxReport_NL</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxReportContract_NL))
]
[SysObsolete('This class is no longer used.', true, 01\12\2022)]
class TaxReportDP_NL extends SrsReportDataProviderPreProcessTempDB
{
    TaxReportTmp_NL         taxReportTmp_NL;
    TransDate               fromDate;
    TransDate               toDate;
    TaxPeriod               taxPeriod;
    TaxRepVersion           taxRepVersion;
    TaxVersion              taxRepCounter;
    TmpTaxReportById        tmpTaxReportById;
    NoYes                   updateNow;

    TaxReportAmounts_NL     amounts;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportDP_NL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the require report data.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TaxReportTmp_NL))
    ]
    public TaxReportTmp_NL getTaxReportDP_NL()
    {
        select * from taxReportTmp_NL;
        return taxReportTmp_NL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>TmpTaxReportById</c> temporary table.
    /// </summary>
    public void processReport()
    {
        SrsReportRunPermission permission;
        TaxReportContract_NL contract = this.parmDataContract() as TaxReportContract_NL;

        fromDate = contract.parmTaxFromDateContract();
        toDate = contract.parmTaxToDateContract();
        taxPeriod = contract.parmTaxPeriodContract();
        taxRepCounter = contract.parmTaxRepCounterContract();
        taxRepVersion = contract.parmTaxRepVerisonContract();
        updateNow   = contract.parmUpdateNow();

        permission          = new SrsReportRunPermission();
        permission.assert();

        this.initAmounts();

        this.fetchData();

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void fetchData()
    {
        this.insertIntoTempTable( 1, "@Tax_TaxReport_NL:Line1", amounts.base1a, amounts.amount1a);
        this.insertIntoTempTable( 2, "@Tax_TaxReport_NL:Line1a", amounts.base1a, amounts.amount1a);
        this.insertIntoTempTable( 3, "@Tax_TaxReport_NL:Line1b", amounts.base1b, amounts.amount1b);
        this.insertIntoTempTable( 4, "@Tax_TaxReport_NL:Line1c", amounts.base1c, amounts.amount1c);
        this.insertIntoTempTable (5, "@Tax_TaxReport_NL:Line1d", amounts.base1d, amounts.amount1d);
        this.insertIntoTempTable( 6, "@Tax_TaxReport_NL:Line1e", amounts.base1e);
        this.insertIntoTempTable( 7, '');
        this.insertIntoTempTable( 8, "@Tax_TaxReport_NL:Line2");
        this.insertIntoTempTable( 9, "@Tax_TaxReport_NL:Line2a", amounts.base2a, amounts.amount2a);
        this.insertIntoTempTable(10, '');
        this.insertIntoTempTable(11, "@Tax_TaxReport_NL:Line3");
        this.insertIntoTempTable(12, "@Tax_TaxReport_NL:Line3a", amounts.base3a);
        this.insertIntoTempTable(13, "@Tax_TaxReport_NL:Line3b", amounts.base3b);
        this.insertIntoTempTable(14, "@Tax_TaxReport_NL:Line3c", amounts.base3c);
        this.insertIntoTempTable(15, '');
        this.insertIntoTempTable(16, "@Tax_TaxReport_NL:Line4");
        this.insertIntoTempTable(17, "@Tax_TaxReport_NL:Line4a", amounts.base4a, amounts.amount4a);
        this.insertIntoTempTable(18, "@Tax_TaxReport_NL:Line4b", amounts.base4b, amounts.amount4b);
        this.insertIntoTempTable(19, '');
        this.insertIntoTempTable(20, "@Tax_TaxReport_NL:Line5");
        this.insertIntoTempTable(21, "@Tax_TaxReport_NL:Line5a", 0, amounts.amount5a);
        this.insertIntoTempTable(22, "@Tax_TaxReport_NL:Line5b", 0, amounts.amount5b);
        this.insertIntoTempTable(23, "@Tax_TaxReport_NL:Line5c", 0, amounts.amount5c);
        this.insertIntoTempTable(24, "@Tax_TaxReport_NL:Line5d", 0, amounts.amount5d);
        this.insertIntoTempTable(25, "@Tax_TaxReport_NL:Line5e", 0, amounts.amount5e);
        this.insertIntoTempTable(26, "@Tax_TaxReport_NL:Line5f", 0, amounts.amount5f);
        this.insertIntoTempTable(27, "@Tax_TaxReport_NL:Line5g", 0, amounts.amount5g);
        this.insertIntoTempTable(28, '');
        this.insertIntoTempTable(29, '');
        this.insertIntoTempTable(30, "@Tax_TaxReport_NL:Line6");
        this.insertIntoTempTable(31, "@Tax_TaxReport_NL:Line6a");
        this.insertIntoTempTable(32, "@Tax_TaxReport_NL:Line6b");

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data into instance of the temporary table.
    /// </summary>
    private void insertIntoTempTable(Integer _taxId, str _text, AmountMST _baseAmount = 0, AmountMST _amount = 0)
    {
        taxReportTmp_NL.clear();
        taxReportTmp_NL.TaxId             = _taxId;
        taxReportTmp_NL.Text              = _text;
        taxReportTmp_NL.BaseAmount        = _baseAmount;
        taxReportTmp_NL.Amount            = _amount;
        taxReportTmp_NL.TaxAuthorityName  = TaxAuthorityAddress::taxAuthorityName(TaxPeriodHead::find(taxPeriod).TaxAuthority);
        taxReportTmp_NL.Address           = TaxAuthorityAddress::address(TaxPeriodHead::find(taxPeriod).TaxAuthority);
        taxReportTmp_NL.FromDate          = fromDate;
        taxReportTmp_NL.ToDate            = toDate;
        taxReportTmp_NL.TaxRepVersion     = taxRepVersion;
        taxReportTmp_NL.TaxPeriodName     = TaxPeriodHead::find(taxPeriod).Name;

        CompanyInfo companyInfo = CompanyInfo::find();
        taxReportTmp_NL.vatNum            = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, toDate);
        taxReportTmp_NL.CompanyName       = companyInfo.name();
        taxReportTmp_NL.CompanyAddress    = companyInfo.postalAddress().Address;
        taxReportTmp_NL.CompanyPhone      = companyInfo.phone();

        taxReportTmp_NL.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount values.
    /// </summary>
    public void initAmounts()
    {
        tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate, toDate, taxPeriod, taxRepVersion, taxRepCounter, updateNow);

        amounts = TaxReportAmounts_NL::initFromTmpTaxReportById(tmpTaxReportById);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>