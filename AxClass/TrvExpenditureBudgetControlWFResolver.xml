<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenditureBudgetControlWFResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpenditureBudgetControlWFResolver extends BudgetControlWFResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the specified instance of the <c>WorkflowContext</c> class in a set of primary ledger and
    ///    source ledger dimension combinations to be checked.
    /// </summary>
    /// <param name="_context">
    ///    The instance of the <c>WorkflowContext</c> class in which to process.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The workflow document must be either <c>TrvExpTable</c> , <c>TrvExpTrans</c> ,
    ///    <c>TrvRequisitionTable</c> , or <c>TrvRequisitionLine</c> .
    /// </exception>
    protected void process(WorkflowContext _context)
    {
        Query                   query = new Query();
        QueryRun                queryRun;
        QueryBuildDataSource    childRecordDataSource;
        QueryBuildDataSource    distributionDataSource;
        RefTableId              childTableId;
        fieldId                 parentFieldId;
        fieldId                 recIdFieldId;
        fieldId                 sourceDocumentLineFieldId;
        Common                  parentRecord;
        AccountingDistribution  accountingDistribution;

        switch (_context.parmTableId())
        {
            case tablenum(TrvExpTable):
            case tablenum(TrvExpTrans):
                childTableId = tablenum(TrvExpTrans);
                parentFieldId = fieldnum(TrvExpTrans, TrvExpTable);
                recIdFieldId = fieldnum(TrvExpTrans, RecId);
                sourceDocumentLineFieldId = fieldnum(TrvExpTrans, SourceDocumentLine);
                if (_context.parmTableId() == tablenum(TrvExpTable))
                {
                    parentRecord = TrvExpTable::findRecId(_context.parmRecId());
                }
                else
                {
                    parentRecord = TrvExpTable::findRecId(TrvExpTrans::find(_context.parmRecId()).TrvExpTable);
                }
                break;
            case tablenum(TrvRequisitionTable):
            case tablenum(TrvRequisitionLine):
                childTableId = tablenum(TrvRequisitionLine);
                parentFieldId = fieldnum(TrvRequisitionLine, TrvRequisitionTable);
                recIdFieldId = fieldnum(TrvRequisitionLine, RecId);
                sourceDocumentLineFieldId = fieldnum(TrvRequisitionLine, SourceDocumentLine);
                if (_context.parmTableId() == tablenum(TrvRequisitionTable))
                {
                    parentRecord = TrvRequisitionTable::find(_context.parmRecId());
                }
                else
                {
                    parentRecord = TrvRequisitionTable::find(TrvRequisitionLine::find(_context.parmRecId()).TrvRequisitionTable);
                }
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        childRecordDataSource = query.addDataSource(childTableId);
        distributionDataSource = childRecordDataSource.addDataSource(tablenum(accountingDistribution));
        distributionDataSource.joinMode(JoinMode::InnerJoin);
        distributionDataSource.addLink(sourceDocumentLineFieldId, fieldnum(AccountingDistribution, SourceDocumentLine));

        if (_context.parmTableId() == childTableId)
        {
            childRecordDataSource.addRange(recIdFieldId).value(SysQuery::value(_context.parmRecId()));
        }
        else
        {
            childRecordDataSource.addRange(parentFieldId).value(SysQuery::value(parentRecord.RecId));
        }

        queryRun = new QueryRun(query);

        // The primary ledger and source ledger dimensions come from the accounting distributions on the lines.
        while (queryRun.next())
        {
            accountingDistribution = queryRun.get(tablenum(accountingDistribution));

            this.add(Ledger::primaryLedger(accountingDistribution.AccountingLegalEntity), accountingDistribution.LedgerDimension);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>