<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSlotDemandGenerate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSlotDemandGenerate</c> is responsible for running slot demand.
/// </summary>
public abstract class WHSSlotDemandGenerate
{
    private WHSSlotTemplate slotTemplate;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSlotTemplate</Name>
				<Source><![CDATA[
    protected WHSSlotTemplate parmSlotTemplate()
    {
        return slotTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the aggregate demand table.
    /// </summary>
    abstract protected void build()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSlotTemplate</Name>
				<Source><![CDATA[
    private void initSlotTemplate(WHSSlotTemplate _slotTemplate)
    {
        slotTemplate = _slotTemplate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the aggregate demand.
    /// </summary>
    /// <param name = "_slotTemplateTable">The slotting template record.</param>
    [Hookable(false)]
    public static void buildDemand(WHSSlotTemplate _slotTemplateTable)
    {
        WHSSlotDemandGenerate slotDemandGenerate = WHSSlotDemandGenerate::newFromSlotTemplateTable(_slotTemplateTable);

        slotDemandGenerate.build();

        if (slotDemandGenerate.validateInsertedDemand())
        {
            info("@WAX:SlottingDemandGenerated");
        }
        else
        {
            warning("@WAX:GeneratedSlotDemandIsEmpty");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInsertedDemand</Name>
				<Source><![CDATA[
    private boolean validateInsertedDemand()
    {
        WHSSlotDemand slotDemand;

        select firstonly RecId from slotDemand
            where slotDemand.SlotTemplate == this.parmSlotTemplate().RecId;

        return slotDemand.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSlotTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and instance of <c>WHSSlotDemandGenerate</c> based on <c>WHSSlotDemandType</c>.
    /// </summary>
    /// <param name="_slotTemplate">
    /// The slot template used to determine which child class to initialize.
    /// </param>
    /// <returns>
    /// An instance of <c>WHSSlotDemandGenerate</c>.
    /// </returns>
    private static WHSSlotDemandGenerate newFromSlotTemplateTable(WHSSlotTemplate _slotTemplate)
    {
        WHSSlotDemandGenerateAttribute slotDemandGenerateAttribute = new WHSSlotDemandGenerateAttribute(_slotTemplate.SlotDemandType);

        WHSSlotDemandGenerate slotDemandGenerate = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSSlotDemandGenerate), slotDemandGenerateAttribute);

        if (!slotDemandGenerate)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        slotDemandGenerate.initSlotTemplate(_slotTemplate);

        return slotDemandGenerate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the slot demand record associated with a demand line.
    /// </summary>
    /// <param name = "_itemId">The item Id of the demand line.</param>
    /// <param name = "_runningQty">The quantity of the demand line.</param>
    /// <param name = "_inventDimId">Inventory dimensions of the demand line.</param>
    /// <returns>true if successful; false if the creation of demand failed.</returns>
    [Hookable(false)]
    internal boolean createLineDemand(ItemId _itemId, Qty _runningQty, InventDimId _inventDimId)
    {
        if (_runningQty <= 0)
        {
            return true;
        }
        #WHSBuildQty

        UnitOfMeasureSymbol handlingUnit = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);        
        container buildQty = WHSInventTable::buildQty(_itemId, _runningQty, handlingUnit, _inventDimId);
        int       length   = conLen(buildQty);

        // Build the demand from largest possible unit of measure to the smallest.
        for (int i = length; i > 0; --i)
        {
            InventHandlingQty   tmpQty = conPeek(conPeek(buildQty, i), #BuildQtyQty);
            UnitOfMeasureSymbol tmpUOM = conPeek(conPeek(buildQty, i), #BuildQtyUOM);

            if (tmpQty >= 1)
            {
                InventHandlingQty   qty    = trunc(tmpQty);
                UnitOfMeasureSymbol unitId = tmpUOM;
                _runningQty -= WHSCatchWeightHelper::convertInventQuantity(_itemId, unitId, qty, _inventDimId);
                
                this.createOrUpdateSlotDemand(_itemId, qty, unitId, _inventDimId);
                
                if (!_runningQty)
                {
                    break;   
                }
                // Recalculate the quantities per unit after we've created demand for a larger unit.
                buildQty = WHSInventTable::buildQty(_itemId, _runningQty, handlingUnit, _inventDimId);
            }
        }

        // If we've exhausted the unit of measure breakdown and there's still running quantity, the method was called with incorrect units.
        return _runningQty <= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the demands associated to the current slot template.
    /// </summary>
    [Hookable(false)]
    internal void deleteDemand()
    {
        
        WHSSlotDemandLock::acquireSlottingLock(this.parmSlotTemplate(), this.instrumentationLogger().demandSlottingActivities());

        using (var activityContext = this.instrumentationLogger().demandSlottingActivities().deleteDemand())
        {
            WHSSlotDemand slotDemand;

            delete_from slotDemand
                where slotDemand.SlotTemplate == this.parmSlotTemplate().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateSlotDemand</Name>
				<Source><![CDATA[
    private void createOrUpdateSlotDemand(ItemId _itemId, Qty _qty, UnitOfMeasureSymbol _uom, InventDimId _inventDimId)
    {
        WHSSlotDemand slotDemand = WHSSlotDemand::find(this.parmSlotTemplate().RecId, _itemId, _inventDimId, _uom, true);

        if (slotDemand.RecId)
        {
            slotDemand.DemandQty += _qty;
            slotDemand.update();
        }
        else
        {
            slotDemand.SlotTemplate         = this.parmSlotTemplate().RecId;
            slotDemand.ItemId               = _itemId;
            slotDemand.EcoResProductName    = InventTable::name(_itemId, InventDim::find(_inventDimId));
            slotDemand.InventDimId          = _inventDimId;
            slotDemand.DemandQty            = _qty;
            slotDemand.UnitOfMeasureSymbol  = _uom;
            slotDemand.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>