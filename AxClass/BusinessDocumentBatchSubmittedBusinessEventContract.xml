<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentBatchSubmittedBusinessEventContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;

/// <summary>
/// The data contract for a <c>BusinessDocumentBatchSubmittedBusinessEvent</c>.
/// </summary>
[DataContract]
[SysObsoleteAttribute('BusinessDocumentBatchSubmittedBusinessEventContract is deprecated and should not be used ', true, 6\7\2024)]
public final class BusinessDocumentBatchSubmittedBusinessEventContract extends BusinessEventsContract
{
    private BusinessDocumentBatchSubmissionId batchSubmissionId;
    private LegalEntityDataAreaId legalEntity;
    private LogisticsAddressCountryRegionISOCode countryISOCode;
    private str invoiceEntity;
    private str fileName;
    private str fileNameVariableId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromBatchSubmission</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BusinessDocumentBatchSubmittedBusinessEventContract</c> from a <c>BusinessDocumentBatchSubmission</c> record.
    /// </summary>
    /// <param name = "_batchSubmission">A <c>BusinessDocumentBatchSubmission</c> record.</param>
    /// <returns>A <c>BusinessDocumentBatchSubmittedBusinessEventContract</c>.</returns>
    public static BusinessDocumentBatchSubmittedBusinessEventContract newFromBatchSubmission(BusinessDocumentBatchSubmission _batchSubmission)
    {
        var contract = new BusinessDocumentBatchSubmittedBusinessEventContract();
        contract.initialize(_batchSubmission);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BusinessDocumentBatchSubmission _batchSubmission)
    {
        batchSubmissionId = _batchSubmission.Id;
        legalEntity = _batchSubmission.DataAreaId;
        countryISOCode = SysCountryRegionCode::countryInfo();

        BusinessDocumentTypes documentTypeTable = BusinessDocumentTypes::find(_batchSubmission.DocumentTypeTableName);

        switch (documentTypeTable.TableName)
        {
            case tableStr(CustInvoiceJour):
                invoiceEntity = enum2Symbol(enumNum(InvoicePostedBusinessEventEntityType), InvoicePostedBusinessEventEntityType::SalesInvoiceEntity);
                break;
            case tableStr(ProjInvoiceJour):
                invoiceEntity = enum2Symbol(enumNum(InvoicePostedBusinessEventEntityType), InvoicePostedBusinessEventEntityType::ProjectInvoiceEntity);
                break;
            default:
                invoiceEntity = tablestr(BusinessDocumentBatchSubmissionItemEntity);
        }

        container fileNameAndId = documentTypeTable.getFileNameAndId();
        fileName = conPeek(fileNameAndId, 1);
        fileNameVariableId = conPeek(fileNameAndId, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchSubmissionId</Name>
				<Source><![CDATA[
    [DataMember('BatchSubmissionId'), BusinessEventsDataMember("@BusinessDocumentSubmissionService:BatchSubmitionId")]
    public BusinessDocumentBatchSubmissionId parmBatchSubmissionId(BusinessDocumentBatchSubmissionId _batchSubmissionId = batchSubmissionId)
    {
        batchSubmissionId = _batchSubmissionId;

        return batchSubmissionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryISOCode</Name>
				<Source><![CDATA[
    [DataMember('CountryISOCode'), BusinessEventsDataMember("@BusinessDocumentSubmissionService:CountryRegion")]
    public LogisticsAddressCountryRegionISOCode parmCountryISOCode(LogisticsAddressCountryRegionISOCode _countryISOCode = countryISOCode)
    {
        countryISOCode = _countryISOCode;

        return countryISOCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceEntity</Name>
				<Source><![CDATA[
    [DataMember('InvoiceEntity'), BusinessEventsDataMember("@BusinessDocumentSubmissionService:BusinessEventInvoiceEntity")]
    public str parmInvoiceEntity(str _invoiceEntity = invoiceEntity)
    {
        invoiceEntity = _invoiceEntity;

        return invoiceEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    [DataMember('LegalEntity'), BusinessEventsDataMember("@AccountsReceivable:LegalEntity")]
    public LegalEntityDataAreaId parmLegalEntity(LegalEntityDataAreaId _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    [DataMember('FileName'), BusinessEventsDataMember("@BusinessDocumentSubmissionService:OutputFiles")]
    public str parmFileName(LegalEntityDataAreaId _fileName = fileName)
    {
        fileName = _fileName;

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileNameVariableId</Name>
				<Source><![CDATA[
    [DataMember('FileNameVariableId'), BusinessEventsDataMember("@BusinessDocumentSubmissionService:VariableID")]
    public str parmFileNameVariableId(LegalEntityDataAreaId _fileNameVariableId = fileNameVariableId)
    {
        fileNameVariableId = _fileNameVariableId;

        return fileNameVariableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<IsObsolete>Yes</IsObsolete>
</AxClass>