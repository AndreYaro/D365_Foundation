<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSelfServiceProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlSelfServiceProcessor</c> class is responsible for handling requests to perform self-service operations
/// to counteract data corruption.
/// </summary>
internal final class BudgetControlSelfServiceProcessor
{
    private SourceDocumentHeaderRecId sourceDocumentHeaderRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BudgetControlSelfServiceProcessor construct()
    {
        return new BudgetControlSelfServiceProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitSourceDocumentToReturnRemaining</Name>
				<Source><![CDATA[
    internal static void submitSourceDocumentToReturnRemaining(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        BudgetControlSelfServiceProcessor processor = BudgetControlSelfServiceProcessor::construct();

        if (BudgetControlSelfServiceProcessor::existsRelievingBudgetForHeader(_sourceDocumentHeaderRecId))
        {
            throw error("@Budget:DocumentContainsRelievedAmountsError");
        }

        processor.initializeToReturnRemaining(_sourceDocumentHeaderRecId);

        processor.submitToReturnRemaining();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeToReturnRemaining</Name>
				<Source><![CDATA[
    private void initializeToReturnRemaining(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        this.sourceDocumentHeaderRecId = _sourceDocumentHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsRelievingBudgetForHeader</Name>
				<Source><![CDATA[
    private static boolean existsRelievingBudgetForHeader(SourceDocumentHeaderRecId _sourceDocumentHeaderRecId)
    {
        boolean doesDocumentContainAnyRelievedAmounts = false;

        SourceDocumentLine sourceDocumentLine;
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        select firstonly RecId
            from budgetSourceTrackingRelievingDetail
                where budgetSourceTrackingRelievingDetail.IsDeletePending == NoYes::No
            exists join budgetSourceTrackingDetail
                where budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail == budgetSourceTrackingDetail.RecId
                    && budgetSourceTrackingDetail.IsSummarized == NoYes::Yes
                    && budgetSourceTrackingDetail.IsDeletePending == NoYes::No
            exists join budgetSourceTracking
                where budgetSourceTracking.IsDeletePending == NoYes::No
                    && budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTracking.RecId
            exists join budgetSource
                where budgetSourceTracking.BudgetSource == budgetSource.RecId
            exists join sourceDocumentLine
                where budgetSource.SourceDocumentLine == sourceDocumentLine.RecId
                    && sourceDocumentLine.SourceDocumentHeader == _sourceDocumentHeaderRecId;

        if (budgetSourceTrackingRelievingDetail.RecId != 0)
        {
            doesDocumentContainAnyRelievedAmounts = true;
        }

        return doesDocumentContainAnyRelievedAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToReturnRemaining</Name>
				<Source><![CDATA[
    private void submitToReturnRemaining()
    {
        SourceDocumentLine sourceDocumentLine;

        date returnDate = this.getAccountingDate();

        ttsbegin;

        while select * from sourceDocumentLine
            where sourceDocumentLine.ParentSourceDocumentLine == 0
                && sourceDocumentLine.SourceDocumentHeader == this.sourceDocumentHeaderRecId
        {
            SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(sourceDocumentLine);

            BudgetControlSourceDocumentProcessor::submitSourceDocLineToReturnRemaining(
                sourceDocumentLine,
                returnDate,
                null);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingDate</Name>
				<Source><![CDATA[
    private TransDate getAccountingDate()
    {
        SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(this.sourceDocumentHeaderRecId);
        SourceDocumentHeaderImplementation sourceDocumentHeaderImplementation = sourceDocumentHeader.getSourceDocumentImplementation();
        SourceDocument sourceDocument = SourceDocument::newFromSourceDocumentHeader(sourceDocumentHeader, sourceDocumentHeaderImplementation);

        return sourceDocument.parmAccountingDate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>