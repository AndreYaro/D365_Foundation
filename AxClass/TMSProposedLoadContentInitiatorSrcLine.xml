<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProposedLoadContentInitiatorSrcLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSProposedLoadContentInitiatorSrcLine</c> class is responsible for initializing proposed load content for source lines.
/// </summary>
[TMSProposedLoadContentInitiatorAttribute(TMSLoadBuildSupplyDemandType::Sales),
TMSProposedLoadContentInitiatorAttribute(TMSLoadBuildSupplyDemandType::Purchase),
TMSProposedLoadContentInitiatorAttribute(TMSLoadBuildSupplyDemandType::TransferIssue)]
public class TMSProposedLoadContentInitiatorSrcLine extends TMSProposedLoadContentInitiator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePossibleLoadInventQtyIssue</Name>
				<Source><![CDATA[
    private InventQty calculatePossibleLoadInventQtyIssue(inventTransId _inventTransId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        WHSLoadLine         whsLoadLine;
        InventQty           unReleasedQty;

        //determine how much is open to put on a load
        select sum(Qty) from inventTrans
            where (inventTrans.StatusIssue  == StatusIssue::OnOrder
            || inventTrans.StatusIssue      == StatusIssue::ReservOrdered
            || inventTrans.StatusIssue      == StatusIssue::ReservPhysical)
            && inventTrans.StatusReceipt    == StatusReceipt::None
        exists join inventTransOrigin
            where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
            &&    inventTransOrigin.InventTransId   == _inventTransId;

        select sum(InventQty), sum(PickedQty) from whsLoadLine
            where whsLoadLine.InventTransId == _inventTransId;

        unReleasedQty = -inventTrans.Qty - (whsLoadLine.InventQty - whsLoadLine.PickedQty);

        return unReleasedQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calculatePossibleLoadInventQtyReceipt</Name>
				<Source><![CDATA[
    private InventQty calculatePossibleLoadInventQtyReceipt(inventTransId _inventTransId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        WHSLoadLine         whsLoadLine;
        InventQty           unReleasedQty;

        //determine how much is open to put on a load
        select sum(Qty) from inventTrans
            where inventTrans.StatusReceipt    == StatusReceipt::Ordered
            &&    inventTrans.StatusIssue  == StatusIssue::None
        exists join inventTransOrigin
            where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
            &&    inventTransOrigin.InventTransId   == _inventTransId;

        select sum(InventQty), sum(PickedQty) from whsLoadLine
            where whsLoadLine.InventTransId == _inventTransId;

        unReleasedQty = inventTrans.Qty - (whsLoadLine.InventQty - whsLoadLine.PickedQty);

        return unReleasedQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calculateVolume</Name>
				<Source><![CDATA[
    private Weight calculateVolume(
        InventTable     _inventTable,
        InventQty       _inventQty)
    {
        return (_inventTable.UnitVolume * _inventQty);
    }
]]></Source>
			</Method>
			<Method>
				<Name>calculateWeight</Name>
				<Source><![CDATA[
    private Weight calculateWeight(
        InventTable     _inventTable,
        InventQty       _inventQty)
    {
        return (_inventTable.grossWeight() * _inventQty);
    }
]]></Source>
			</Method>
			<Method>
				<Name>convertInventQtyToOrderQuantity</Name>
				<Source><![CDATA[
    private Qty convertInventQtyToOrderQuantity(
        InventTable         _inventTable,
        InventQty           _inventQtyNotReleased,
        TMSLoadLineSource   _tmsLoadLineSource)
    {
        Qty                 qtyNotReleased;
        UnitIDInventory     inventUnitId;

        inventUnitId = _inventTable.inventUnitId();

        qtyNotReleased = InventTable::unitConvert(_tmsLoadLineSource.ItemId,
                                                  inventUnitId,
                                                  _tmsLoadLineSource.UnitOfMeasureSymbol,
                                                  inventUnitId,
                                                  _inventQtyNotReleased,
                                                  _tmsLoadLineSource.InventDimId);

        return qtyNotReleased;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initProposedLoadContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSProposedLoadContent</c> buffer based on the <c>Common</c> buffer.
    /// </summary>
    /// <param name="_proposedLoadContent">
    /// The buffer that will be initialized.
    /// </param>
    /// <param name="_common">
    /// A source line that the buffer should be initialized from.
    /// </param>
    /// <remarks>
    /// The <c>Common</c> buffer should be mapped in the <c>TMSLoadLineSource</c> table map.
    /// </remarks>
    public void initProposedLoadContent(
        TMSProposedLoadContent  _proposedLoadContent,
        Common                  _common)
    {
        TMSLoadLineSource   tmsLoadLineSource;
        InventTransId       inventTransId;
        InventQty           inventQty;
        InventTable         inventTable;

        if (!SysDictTable::isTableMapped(tableNum(TMSLoadLineSource), _common.TableId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(_proposedLoadContent, _common);

        tmsLoadLineSource = _common;

        inventTable = inventTable::find(tmsLoadLineSource.ItemId);

        inventTransId = this.inventTransId(tmsLoadLineSource);

        if (this.direction() == TMSDirection::Outbound)
        {
            inventQty = this.calculatePossibleLoadInventQtyIssue(inventTransId);
        }
        else
        {
            inventQty = this.calculatePossibleLoadInventQtyReceipt(inventTransId);
        }

        _proposedLoadContent.InventTransId = inventTransId;
        _proposedLoadContent.Pieces     = this.convertInventQtyToOrderQuantity(inventTable, inventQty, tmsLoadLineSource);
        _proposedLoadContent.PiecesUOM  = tmsLoadLineSource.UnitOfMeasureSymbol;
        _proposedLoadContent.TotalVolume = this.calculateVolume(inventTable, inventQty);
        _proposedLoadContent.TotalWeight = this.calculateWeight(inventTable, inventQty);
    }
]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    private InventTransId inventTransId(TMSLoadLineSource _tmsLoadLineSource)
    {
        if (this.direction() == TMSDirection::Outbound)
        {
            return _tmsLoadLineSource.InventTransIdIssue;
        }

        return _tmsLoadLineSource.InventTransIdReceive;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmLoadBuildSupplyDemandType</Name>
				<Source><![CDATA[
    public TMSLoadBuildSupplyDemandType parmLoadBuildSupplyDemandType(TMSLoadBuildSupplyDemandType _loadBuildSupplyDemandType = loadBuildSupplyDemandType)
    {
        loadBuildSupplyDemandType = _loadBuildSupplyDemandType;

        return loadBuildSupplyDemandType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSProposedLoadContentInitiatorSrcLine construct()
    {
        return new TMSProposedLoadContentInitiatorSrcLine();
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>