<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventABCUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventABCUpdate extends RunBaseBatch implements BatchRetryable
{
    TransDate   fromDate;
    TransDate   toDate;
    InterestPct interest;
    Percent     categoryA;
    Percent     categoryB;
    Percent     categoryC;
    ABCModel    model;
    TmpABC      tmpABC;
    boolean     reportingMode;
    QueryRun    itemQueryRun;

    DialogField     fieldFromDate;
    DialogField     fieldToDate;
    DialogField     fieldInterest;
    DialogField     fieldCategoryA;
    DialogField     fieldCategoryB;
    DialogField     fieldCategoryC;
    DialogField     fieldModel;

    #define.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        FromDate,
        ToDate,
        Interest,
        CategoryA,
        CategoryB,
        CategoryC,
        Model
    #ENDMACRO

    #LOCALMACRO.CurrentList1
        FromDate,
        ToDate,
        Interest,
        CategoryA,
        CategoryB,
        CategoryC,
        Model
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class in which the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed, but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> method
    ///    returns false, this method will not have any effect.
    /// </remarks>
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        fieldFromDate  = dialog.addField(extendedTypeStr(FromDate));
        fieldToDate    = dialog.addField(extendedTypeStr(ToDate));
        fieldInterest  = dialog.addField(extendedTypeStr(InventInternalInterest));
        fieldCategoryA = dialog.addField(extendedTypeStr(ABCPercentA));
        fieldCategoryB = dialog.addField(extendedTypeStr(ABCPercentB));
        fieldCategoryC = dialog.addField(extendedTypeStr(ABCPercentC));
        fieldModel     = dialog.addField(extendedTypeStr(ABCModelType));

        fieldToDate.value(toDate);
        fieldFromDate.value(fromDate);
        fieldInterest.value(interest);
        fieldCategoryA.value(categoryA);
        fieldCategoryB.value(categoryB);
        fieldCategoryC.value(categoryC);
        fieldModel.value(model);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        fromDate    = fieldFromDate.value();
        toDate      = fieldToDate.value();
        interest    = fieldInterest.value();
        categoryA   = fieldCategoryA.value();
        categoryB   = fieldCategoryB.value();
        categoryC   = fieldCategoryC.value();
        model       = fieldModel.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found by using the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();
        itemQueryRun = new QueryRun(queryStr(InventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, itemQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryA</Name>
				<Source><![CDATA[
    public Percent parmCategoryA(Percent _categoryA = categoryA)
    {
        categoryA = _categoryA;
        return categoryA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryB</Name>
				<Source><![CDATA[
    public Percent parmCategoryB(Percent _categoryB = categoryB)
    {
        categoryB = _categoryB;
        return categoryB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryC</Name>
				<Source><![CDATA[
    public Percent parmCategoryC(Percent _categoryC = categoryC)
    {
        categoryC = _categoryC;
        return categoryC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterest</Name>
				<Source><![CDATA[
    public InterestPct parmInterest(InterestPct _interest = interest)
    {
        interest = _interest;
        return interest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmItemQueryRun(QueryRun _itemQueryRun = itemQueryRun)
    {
        itemQueryRun = _itemQueryRun;
        return itemQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModel</Name>
				<Source><![CDATA[
    public ABCModel parmModel(ABCModel _model = model)
    {
        model = _model;
        return model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpABC</Name>
				<Source><![CDATA[
    public void setTmpABC(TmpABC _tmpABC)
    {
        tmpABC = _tmpABC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpABC</Name>
				<Source><![CDATA[
    public Common parmTmpABC()
    {
        return tmpABC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateInventTable</Name>
				<Source><![CDATA[
    public boolean parmUpdateInventTable()
    {
        return reportingMode == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used when a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog. Do not instantiate the instance of the <c>QueryRun</c> class whenever this method is
    ///    called. Instantiate it in the <c>unpack</c> method and the <c>initParmDefault</c> method, or the
    ///    <c>init</c> method. Only use this method when it is not instantiated.
    /// </remarks>
    public QueryRun queryRun()
    {
        return itemQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        setPrefix(InventABCUpdate::description());

        if (!this.parmReportingMode() && !this.validate())
        {
            throw error("@SYS18447");
        }

        if (! toDate)
        {
            toDate  = maxDate();
        }

        try
        {
            ttsbegin;

            InventABC abC = InventABC::newFromInventABCUpdate(this);
            abC.calc();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            itemQueryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    itemQueryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instructs the class to run in reporting mode.
    /// </summary>
    /// <remarks>This prevents the class from updating data, and allows returning the <c>tmpABC</c> table for reporting.</remarks>
    public boolean parmReportingMode(boolean _reportingMode = reportingMode)
    {
        reportingMode = _reportingMode;
        return reportingMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can impersonate the user who requested the task.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add select button is to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid instance of the <c>QueryRun</c> class.If you change the return value to false, the
    ///    button will be no longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version      = RunBase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList1,packedQuery] = _packedClass;
                if (!packedQuery)
                    return false;
                itemQueryRun = new QueryRun(packedQuery);
                break;
            case 1                  :
                [version,#CurrentList1] = _packedClass;
                itemQueryRun = new QueryRun(queryStr(InventTable));
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        if (model == ABCModel::Link)
        {
            if (interest <= 0)
            {
                ok = checkFailed("@SYS8377") && ok;
            }
            if (! toDate)
            {
                ok = checkFailed("@SYS24515") && ok;
            }
        }

        if (categoryA < 0)
        {
            ok = checkFailed("@SYS1724") && ok;
        }

        if (categoryB < 0)
        {
            ok = checkFailed("@SYS10103") && ok;
        }

        if (categoryC < 0)
        {
            ok = checkFailed("@SYS1723") && ok;
        }

        if ((categoryA + categoryB + categoryC) != 100)
        {
            ok = checkFailed("@SYS17104") && ok;
        }

        if (fromDate && toDate && fromDate > toDate)
        {
            ok = checkFailed("@SYS91020");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventABCUpdate</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventABCUpdate</c> class.
    /// </returns>
    public static InventABCUpdate construct()
    {
        return new InventABCUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS19991";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventABCUpdate abcUpdate = InventABCUpdate::construct();

        if (abcUpdate.prompt())
        {
            abcUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return reportingMode == false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>