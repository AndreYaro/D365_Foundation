<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpdReset</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class KanbanJobUpdReset extends UpdateBase
{
    KanbanJobStatusUpdate   kanbanJobStatusUpdate;
    KanbanJob               kanbanJob, beforeResetKanbanjob;
    boolean                 updateKanban;

    ProdJournalVoucherId    voucherId;
    NumberSeq               numberSeq;
    LedgerVoucher           ledgerVoucher;

    LeanConversionCostUpd   costUpd;
    KanbanJobStatus         kanbanJobStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the data that is used to update the ledger voucher.
    /// </summary>
    /// <remarks>
    ///    The data is not committed before the <c>commitLedger</c> method is called.
    /// </remarks>
    protected void beginLedger()
    {
        TransactionTxt          transactionTxt = TransactionTxt::construct();
        KanbanJobType           kanbanJobType  = kanbanJob.type();
        TransDate               transDate      = max(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.getResetDateTime(), DateTimeUtil::getCompanyTimeZone())), LeanCosting::lastToDate() + 1);
        LeanCostingFacadeBase   leanCostingFacade;

        numberSeq      = NumberSeq::newGetNum(ProdParameters::numRefProdJournalVoucherId());
        voucherId      = numberSeq.num();

        ledgerVoucher  = LedgerVoucher::newLedgerPost(DetailSummary::Summary, kanbanJobType.sysModule(), numberSeq.parmNumberSequenceCode());

        transactionTxt.setType(LedgerTransTxt::Kanban);
        transactionTxt.setDate(transDate);
        transactionTxt.setVoucher(voucherId);
        transactionTxt.setKey1(kanbanJob.kanban().KanbanId);

        LedgerVoucherObject ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId,
                                                                                  transDate,
                                                                                  kanbanJobType.sysModule(),
                                                                                  kanbanJobType.ledgerTransType());
        ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        if (kanbanJobStatus)
        {
            leanCostingFacade = kanbanJobStatus.parmLeanCostingFacade();
        }

        costUpd = LeanConversionCostUpd::newFromParameters(ledgerVoucher, kanbanJob.kanban().leanProductionFlowReference(), leanCostingFacade, kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResetDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the reset date time.
    /// </summary>
    protected utcDateTime getResetDateTime()
    {
        return kanbanJobStatusUpdate.TransactionDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions for a specific status reset.
    /// </summary>
    abstract protected void cleanUp()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commits the voucher.
    /// </summary>
    protected void commitLedger()
    {
        if (ledgerVoucher)
        {
            costUpd.parmReversal(true);
            costUpd.updateNow();
            ledgerVoucher.end();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>KanbanJob</c> table buffer from a <c>ParmBuffer</c> object.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the specified value for update; optional.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The record is not valid; the update was canceled.
    /// </exception>
    protected void initKanbanJob(boolean _forUpdate = false)
    {
        ParmBuffer              parmBuffer  = this.parmParmBuffer();
        KanbanJobStatusUpdate   statusUpdate;

        statusUpdate.data(parmBuffer);

        kanbanJob = KanbanJob::find(statusUpdate.Job,_forUpdate);

        if (!kanbanJob.checkValid(statusUpdate.RecId))
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJoUpdReset</c> class.
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyRulesEngine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Notifies the <c>LeanRulesEngine</c> object about changes in the status.
    /// </summary>
    protected void notifyRulesEngine()
    {
        if (beforeResetKanbanjob.Status != kanbanJob.Status)
        {
            LeanRulesEngine::onKanbanJobStatusChange(kanbanJob, beforeResetKanbanjob.Status,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobStatus</Name>
				<Source><![CDATA[
    public KanbanJobStatus parmKanbanJobStatus(KanbanJobStatus _kanbanJobStatus = kanbanJobStatus)
    {
        kanbanJobStatus = _kanbanJobStatus;
        return kanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    public ParmBuffer parmParmBuffer(ParmBuffer _kanbanJobStatusUpdate = kanbanJobStatusUpdate)
    {
        if (!_kanbanJobStatusUpdate.RecId)
        {
            throw error(strFmt("@SYS134373",tableId2name(tableNum(KanbanJob))));
        }

        kanbanJobStatusUpdate = _kanbanJobStatusUpdate;

        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateKanban</Name>
				<Source><![CDATA[
    public boolean parmUpdateKanban(boolean _updateKanban = updateKanban)
    {
        updateKanban = _updateKanban;
        return updateKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Notifies the kanban rule engine that the status has been reset.
    /// </summary>
    /// <remarks>
    ///    This method is called after the status reset is completed.
    /// </remarks>
    protected void postCleanUp()
    {
        this.notifyRulesEngine();
        beforeResetKanbanjob.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores the data from the specified <c>KanbanJob</c> object to a field.
    /// </summary>
    protected void preCleanUp()
    {
        beforeResetKanbanjob.data(kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the parent kanban.
    /// </summary>
    protected void resetKanban()
    {
        KanbanJobStatus     kanbanJobStatusLocal = kanbanJob.status(updateKanban);

        if (kanbanJobStatusLocal.mustSynchronizeKanbanStatus(true))
        {
            KanbanStatus kanbanStatus = KanbanStatus::newKanbanKanbanJobStatusUpdate(kanbanJob.kanban(),kanbanJobStatusUpdate);
            kanbanStatus.runReset(kanbanJobStatusLocal.correspondingKanbanStatus(kanbanJob.Status));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the <c>Status</c> field of the <c>KanbanJob</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The new status.
    /// </param>
    /// <remarks>
    ///    The <c>KanbanJob</c> table buffer must already be selected for update.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The record validation failed.
    /// </exception>
    protected void resetStatus(LeanKanbanJobStatus _status)
    {
        ttsbegin;
        kanbanJob.Status = _status;
        kanbanJob.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUpdatePhysicalPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the related picking list.
    /// </summary>
    /// <param name="_flushing">
    ///    A <c>FlushingPrincipKanban</c> enumeration value that specifies the flushing principle.
    /// </param>
    protected void resetUpdatePhysicalPickingList(FlushingPrincipKanban _flushing)
    {
        KanbanJobPickingList                    kanbanJobPickingList;
        InventTransOriginKanbanJobPickList      inventTransOriginKanbanJobPickList;
        SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

        ttsbegin;
        while select forupdate kanbanJobPickingList
            where kanbanJobPickingList.Job == kanbanJob.RecId
                && kanbanJobPickingList.FlushingPrinciple == _flushing
            join InventTransOrigin from inventTransOriginKanbanJobPickList
                where inventTransOriginKanbanJobPickList.KanbanJobPickingList == kanbanJobPickingList.RecId
        {
            InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(inventTransOriginKanbanJobPickList.InventTransOrigin);
            InventQty        physicalQty      = inventTransIdSum.physical();
            InventQty        financialQty     = inventTransIdSum.financial();

            if (physicalQty)
            {
                // reverse physical component
                this.postPhysical(
                    inventUpd_Physical::newKanbanJobPickingList(kanbanJobPickingList),
                    kanbanJobPickingList.ItemId,
                    -physicalQty,
                    InventUpdate::physicalReturn());
            }

            if (financialQty)
                {
                // Post KanbanPickList Purchased transaction
                this.postPhysical(
                    InventUpd_Physical::newKanbanJobPickingList(kanbanJobPickingList),
                    kanbanJobPickingList.ItemId,
                    -financialQty,
                    InventUpdate::financialReturn());
                this.postFinancial(
                    inventUpd_Financial::newMovement(kanbanJobPickingList.inventMovement(), ledgerVoucher),
                    -financialQty);

                // Post KanbanJobPicklingListReversal Sold transaction
                KanbanJobPickingListReversal issueKanbanJobPickingListReversal = KanbanJobPickingListReversal::reverseKanbanJobPickingListWithNewLotId(kanbanJobPickingList, financialQty, 0);

                this.postPhysical(
                    InventUpd_Physical::newKanbanJobPickingListReversal(issueKanbanJobPickingListReversal),
                    kanbanJobPickingList.ItemId,
                    financialQty);
                this.postFinancial(
                    inventUpd_Financial::newMovement(issueKanbanJobPickingListReversal.inventMovement(), ledgerVoucher),
                    financialQty);

                // Post KanbanJobPicklingListReversal Received transaction
                KanbanJobPickingListReversal receiptKanbanJobPickingListReversal = KanbanJobPickingListReversal::reverseKanbanJobPickingListWithNewLotId(kanbanJobPickingList, -financialQty, issueKanbanJobPickingListReversal.RecId);

                this.postPhysical(
                    InventUpd_Physical::newKanbanJobPickingListReversal(receiptKanbanJobPickingListReversal),
                    kanbanJobPickingList.ItemId,
                    -financialQty);
                }

            if (physicalQty || financialQty)
            {
                //recreate estimated with original quantity
                InventMovement inventMovement = kanbanJobPickingList.inventMovement();
                InventUpd_Estimated inventUpd_Estimated = InventUpd_Estimated::newInventMovement(inventMovement);
                inventUpd_Estimated.parmEstimated(inventMovement.transQty());
                inventUpd_Estimated.updateNow();
            }
            sourceDocumentLineImplementationList.addEnd(kanbanJobPickingList);
        }

        this.resetSourceDocument(kanbanJob, sourceDocumentLineImplementationList, SourceDocumentAccountingStatus::InProcess);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSourceDocument</Name>
				<Source><![CDATA[
    protected void resetSourceDocument(SourceDocumentHeaderImplementation _sourceDocumentHeaderImplementation,
                                       SourceDocumentLineImplementationList _sourceDocumentLineImplementationList,
                                       SourceDocumentAccountingStatus _targetAccountingStatus)
    {
        const SourceDocumentProcessorCaller nullCaller = null;
        const boolean updateImplementationFalse = false;
        const boolean transitionToCompletedStateAccountFullyQualifiedValidationTrue = true;

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(_sourceDocumentHeaderImplementation,
                                                                          updateImplementationFalse,
                                                                          _targetAccountingStatus,
                                                                          nullCaller,
                                                                          curUserId(),
                                                                          transitionToCompletedStateAccountFullyQualifiedValidationTrue,
                                                                          _sourceDocumentLineImplementationList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the status reset.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The validation failed.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        setPrefix(KanbanMultiJob::description());
        setPrefix(#PreFixField(KanbanJobStatusUpdate,KanbanId));

        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw Exception::Error;
            }

            this.setParameters();
            this.preCleanUp();
            this.cleanUp();
            this.postCleanUp();

            this.updateJobJournal(ParmJobStatus::Executed);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateJobJournal(ParmJobStatus::ContainErrors);
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets parameters for the status update.
    /// </summary>
    protected void setParameters()
    {
        this.initKanbanJob(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> table buffer used to create the instance of the class.
    /// </param>
    /// <param name="_leanKanbanJobStatus">
    /// The target kanban job status.
    /// </param>
    /// <param name="_updateKanban">
    /// A Boolean value that specifies if the parent kanban must be updated.
    /// </param>
    /// <param name="_kanbanJobStatus">
    /// The <c>KanbanJobStatus</c> record to retrieve the <c>LeanCostingFacadeBase</c> instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanJobUpd</c> class.
    /// </returns>
    public static KanbanJobUpdReset newKanbanJob(
        KanbanJob           _kanbanJob,
        LeanKanbanJobStatus _leanKanbanJobStatus,
        boolean             _updateKanban,
        KanbanJobStatus     _kanbanJobStatus)
    {
        return KanbanJobUpdReset::newParmBuffer(KanbanJobStatusUpdate::makeParameters(_kanbanJob.status(),
                                                                                      _leanKanbanJobStatus),
                                                                                      _updateKanban,
                                                                                      _kanbanJobStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    /// The <c>KanbanJobStatusUpdate</c> table buffer used to instantiate the class.
    /// </param>
    /// <param name="_updateKanban">
    /// A Boolean value that specifies if the parent kanban must be updated.
    /// </param>
    /// <param name="_kanbanJobStatus">
    /// The <c>KanbanJobStatus</c> record to retrieve the <c>LeanCostingFacadeBase</c> instance.
    /// </param>
    /// <returns>
    /// An instance of the sub classes derived from the <c>KanbanJobUpd</c> class.
    /// </returns>
    public static KanbanJobUpdReset newParmBuffer(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        boolean               _updateKanban,
        KanbanJobStatus       _kanbanJobStatus)
    {
        KanbanJobUpdReset    kanbanJobUpdReset;

        if (!_kanbanJobStatusUpdate.ParmId)
        {
            _kanbanJobStatusUpdate.skipTTSCheck(true);
            _kanbanJobStatusUpdate.ParmBuffer::initParmId();
            _kanbanJobStatusUpdate.write();
        }

        switch (_kanbanJobStatusUpdate.kanbanJob().Status)
        {
            case LeanKanbanJobStatus::Planned:
                kanbanJobUpdReset = KanbanJobUpdResetPlan::construct();
                break;
            case LeanKanbanJobStatus::Prepared:
                kanbanJobUpdReset = KanbanJobUpdResetPrepare::construct();
                break;
            case LeanKanbanJobStatus::InProgress:
                kanbanJobUpdReset = KanbanJobUpdResetInProgress::construct();
                break;
            case LeanKanbanJobStatus::Completed:
                kanbanJobUpdReset = KanbanJobUpdResetComplete::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanJobUpdReset.parmParmBuffer(_kanbanJobStatusUpdate);
        kanbanJobUpdReset.parmUpdateKanban(_updateKanban);
        kanbanJobUpdReset.parmKanbanJobStatus(_kanbanJobStatus);

        return kanbanJobUpdReset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirectMaterialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts direct material consumption corresponding to a physical update
    /// </summary>
    /// <param name="_inventUpd_Physical">
    /// Reference to the physical update that for which consumption needs to be posted
    /// </param>
    /// <param name="_itemId">
    /// Item Id for which consumption is posted
    /// </param>
    private void addDirectMaterialConsumption(InventUpd_Physical _inventUpd_Physical, ItemId _itemId)
    {
        boolean            warningOnFailure = false;
        boolean            errorOnFailure = true;

        if (KanbanItemCheckItemId::newStandard(_itemId,warningOnFailure,errorOnFailure).isAllowed())
        {
            InventCostMovement inventCostMovement = _inventUpd_Physical.movement().inventModelType().inventCostMovement();
            costUpd.addDirectMaterialConsumption(inventCostMovement.parmInventItemPrice(), -inventCostMovement.totalQty());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Financially updates a physically posted transaction.
    /// </summary>
    /// <param name="_inventUpd_Financial">
    /// Pre-initialized instance of <c>InventUpd_Financial</c> class containing information about the source document
    /// </param>
    /// <param name="_qty">
    /// Quantity to be financially updated
    /// </param>
    private void postFinancial(InventUpd_Financial _inventUpd_Financial, InventQty _qty)
    {
        _inventUpd_Financial.parmFinancial(_qty);
        _inventUpd_Financial.parmFinancialUnit(_qty);
        _inventUpd_Financial.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts physical transacion for a <c>KanbanJobPickingList</c> or <c>KanbanJobPickingListReversal</c> record.
    /// </summary>
    /// <param name="_inventUpd_Physical">
    /// Instance of <c>InventUpd_Physical</c> class pre-initialized with source document record
    /// </param>
    /// <param name="_itemId">
    /// Item Id from the source document
    /// </param>
    /// <param name="_qty">
    /// Quantity to be posted
    /// </param>
    /// <param name="_returnMode">
    /// Indicates the type of return transaction, 0 if this is not a return
    /// </param>
    private void postPhysical(InventUpd_Physical _inventUpd_Physical, ItemId _itemId, InventQty _qty, int _returnMode = 0)
    {
        _inventUpd_Physical.parmPhysical(_qty);
        _inventUpd_Physical.parmPhysicalUnit(_qty);
        if (_returnMode)
        {
            _inventUpd_Physical.parmReturnMode(_returnMode);
        }
        _inventUpd_Physical.updateNow(ledgerVoucher);
        this.addDirectMaterialConsumption(_inventUpd_Physical, _itemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
