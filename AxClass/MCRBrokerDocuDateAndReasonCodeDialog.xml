<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerDocuDateAndReasonCodeDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRBrokerDocuDateAndReasonCodeDialog</c> class hanaldes the logic that allow the user to enter a document date for the vendor invoices that are to be created upon broker claim processing
/// and select reason code when the broker claim is beding closed(writen-off).
/// </summary>
public class MCRBrokerDocuDateAndReasonCodeDialog extends RunBase
{
    AmountCur                       diffAmount;
    boolean                         closing;
    MCRBrokerClaimProcessingArgs    mCRBrokerClaimProcessingArgs;
    VendInvoiceDocDate              vendInvoiceDocDate;
        
    // Dialog
    Dialog                      dialog;
    DialogField                 dialogDocumentDate;
    DialogField                 dialogReasonCode;
        
    // Parameters
    InvoiceDate                 invoiceDate;
    MCRBrokerClaimWriteOffCode  reasonCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns whether the dialog can close or not.
    /// </summary>
    /// <returns>
    ///     true if the dialog can be close; otherwise, false.
    /// </returns>
    public boolean checkCloseDialog(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);
        ret = ret && this.checkInvoiceDate();
        ret = ret && this.checkDiffExtraCondition();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDiffExtraCondition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check reason codes must be populated when diffAmount is not equal to zero.
    /// </summary>
    /// <returns>
    ///     true if it's been populated; otherwise, false and throw the error.
    /// </returns>
    private boolean checkDiffExtraCondition()
    {
        if (diffAmount)
        {
            if (reasonCode == '')
            {
                error ("@MCR10858");
                return false;
            }   
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check invoice document date has been specified when the "Require Document Date" field is set to Error.
    /// </summary>
    /// <returns>
    ///     true if it's been populated; otherwise, false and throw the error.
    /// </returns>
    private boolean checkInvoiceDate()
    {
        if (!closing)
        {
            if (invoiceDate == dateNull() && vendInvoiceDocDate == VendInvoiceDocDate::Error)
            {
                error("@SYS95922");
                return false;   
            }
        }
        return true; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();
        dialog.formBuildDesign().dialogSize(SysDialogSize::Small);
        dialog.allowUpdateOnSelectCtrl(true);
        
        if (closing)
        {
             dialog.caption("@SYS18742");
        }
        else
        {
            dialog.caption("@SYS108667");
            
            // When the "Require Document Date" field is set to warning
            // the dialog for invoice date entry should be shown when left blank
            vendInvoiceDocDate = VendParameters::find().VendInvoiceDocDate;
            if (vendInvoiceDocDate == VendInvoiceDocDate::Error)
            {
                invoiceDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
        
        DialogGroup reasonCodeGroup = dialog.addGroup(strFmt("@MCR34560", diffAmount));
        dialogReasonCode = dialog.addField(extendedTypeStr(ReasonCode));
        Object reasonCodeControl = dialogReasonCode.control();
        reasonCodeControl.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(MCRBrokerDocuDateAndReasonCodeDialog, reasonCode_Lookup), this);

        DialogGroup dateGroup = dialog.addGroup("@SYS57610");
        DialogText dialogDocumentDateMainInstruction = dialog.addText("@SalesAndMarketing:DocumentDateRequired");
        dialogDocumentDate = dialog.addField(extendedTypeStr(InvoiceDate));
        dialogDocumentDate.label("@SalesAndMarketing:InvoiceDocumentDate");
        dialogDocumentDate.control();
        dialogDocumentDate.value(invoiceDate);

        // If nothing is being written off or credited extra do not need a reason code
        if (diffAmount == 0)
        {
            reasonCodeGroup.visible(false);
        }
        
        // closing process do not need a invoice date
        if (closing || vendInvoiceDocDate == VendInvoiceDocDate::None)
        {
            dateGroup.visible(false);
            invoiceDate = dateNull();
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        invoiceDate = dialogDocumentDate.value();
        reasonCode  = dialogReasonCode.value();
        
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosing</Name>
				<Source><![CDATA[
    public boolean parmClosing(boolean _closing)
    {
        closing = _closing;
        return closing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDiffAmount</Name>
				<Source><![CDATA[
    public AmountCur parmDiffAmount(AmountCur _diffAmount)
    {
        diffAmount = _diffAmount;
        return diffAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonCode_Lookup</Name>
				<Source><![CDATA[
    private void reasonCode_Lookup(FormStringControl _control)
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(MCRBrokerWriteOffReason));
        
        SysTableLookup lookup = SysTableLookup::newParameters(tableNum(MCRBrokerWriteOffReason), _control, true);
        lookup.addLookupfield(fieldNum(MCRBrokerWriteOffReason, ReasonCode), true);
        lookup.addLookupfield(fieldNum(MCRBrokerWriteOffReason, Description));
        lookup.parmQuery(query);
        lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        // Prevents invalid reason codes from being entered.
        if (diffAmount != 0 && !MCRBrokerWriteOffReason::find(reasonCode))
        {
            error(strFmt("@MCR12053", reasonCode));
            return;
            
        }
        mCRBrokerClaimProcessingArgs = new MCRBrokerClaimProcessingArgs();
        mCRBrokerClaimProcessingArgs.parmWriteOffReasonCode(ReasonCode);
        mCRBrokerClaimProcessingArgs.parmInvoiceDate(invoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMCRBrokerClaimApprovegArgs</Name>
				<Source><![CDATA[
    private MCRBrokerClaimProcessingArgs sendMCRBrokerClaimApprovegArgs()
    {
        return mCRBrokerClaimProcessingArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts a dialog to allow the user enter invoice document date or reason code for the broker claims.
    /// </summary>
    /// <param name="_args">
    /// The args passing from broker claims.
    /// </param>
    /// <returns>
    /// The <c>MCRBrokerClaimProcessingArgs</c> object.
    /// </returns>
    public static MCRBrokerClaimProcessingArgs main(Args _args)
    {
        MCRBrokerDocuDateAndReasonCodeDialog brokerDialog = new MCRBrokerDocuDateAndReasonCodeDialog();
        
        if (_args)
        {
            brokerDialog.parmDiffAmount(str2num(_args.parm()));
            brokerDialog.parmClosing(_args.parmEnum());
        }
        
        if (brokerDialog.prompt())
        {
            brokerDialog.runOperation();
        }
        
        return brokerDialog.sendMCRBrokerClaimApprovegArgs();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>