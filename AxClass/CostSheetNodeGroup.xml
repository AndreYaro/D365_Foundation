<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetNodeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostSheetNodeGroup extends CostSheetNodeTotal
{
    CostGroupType       costGroupType;
    CostGroupId         costGroupId;
    CostGroupBehavior   costGroupBehavior;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        costGroupType,
        costGroupId,
        costGroupBehavior
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCalculatedCostsFromLowerLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets calculated earlier indirect costs from lower levels for indirect cost group nodes.
    /// </summary>
    /// <param name="_costCalcTransData">
    ///    A <c>CostCalcTransData</c> object that contains direct costs from all levels and indirect costs
    ///    from lower levels.
    /// </param>
    /// <remarks>
    ///    Only the <c>CostSheetNodeGroup</c> class should override this method.
    /// </remarks>
    protected void addCalculatedCostsFromLowerLevels(CostCalcTransData _costCalcTransData)
    {
        CostTmpCalcTrans costTmpCalcTrans = _costCalcTransData.getCostTmpCalcTrans();

        while select costTmpCalcTrans
            where costTmpCalcTrans.CostGroupId == costGroupId
        {
            this.getCostCalcTransData().addCostTmpCalcTrans(costTmpCalcTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLowestLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the concrete amounts based on input data and costing sheet structure for leaf nodes.
    /// </summary>
    /// <param name="_costSheet">
    ///    The costing sheet object.
    /// </param>
    /// <param name="_costCalcTransData">
    ///    The <c>CostCalcTransData</c> object that has input data.
    /// </param>
    public void calcLowestLevel(
        CostSheet           _costSheet,
        CostCalcTransData   _costCalcTransData)
    {
        if (this.hasSubnodes() || _costCalcTransData == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CostTmpCalcTrans costTmpCalcTrans = _costCalcTransData.getCostTmpCalcTrans();

        while select costTmpCalcTrans
            where costTmpCalcTrans.CostGroupId == costGroupId
        {
            this.getCostCalcTransData().addCostTmpCalcTrans(costTmpCalcTrans);
        }

        if (BOMCostGroup::find(costGroupId).TypeDefault == NoYes::Yes)
        {
            // There may be one or more cost groups those are not mapped in the sheet,
            // still some transactions in costTmpCalcTrans may exist with these cost groups
            // assigned. Default cost groups in the sheet should accumulate such amounts in
            // this case.

            CostSheetNodeRoot rootNode = _costSheet.getRootNode();
            Set unMappedCoveredCostGroupIdSet = rootNode.getCostPriceNode(this.getCostType()).getUnMappedCostGroupIdsForType(BOMCostGroup::find(costGroupId).CostGroupType);
            SetEnumerator costGroupIdEnumerator = unMappedCoveredCostGroupIdSet.getEnumerator();

            while (costGroupIdEnumerator.moveNext())
            {
                CostGroupId unMappedCoveredCostGroupId = costGroupIdEnumerator.current();
                while select costTmpCalcTrans
                    where costTmpCalcTrans.CostGroupId == unMappedCoveredCostGroupId
                {
                    this.getCostCalcTransData().addCostTmpCalcTrans(costTmpCalcTrans);
                }
            }
        }

        calculated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the instance of the <c>CostSheetNodeGroup</c> class can have subnodes.
    /// </summary>
    /// <returns>
    ///    true if the object can have subnodes; otherwise, false.
    /// </returns>
    public boolean canHaveSubnodes()
    {
        return costGroupType == CostGroupType::Undefined
            || costGroupType == CostGroupType::Indirect ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCostSheetNodeTable</Name>
				<Source><![CDATA[
    protected CostSheetNodeTable editCostSheetNodeTable(boolean _set = false, CostSheetNodeTable _costSheetNodeTable = null)
    {
        CostSheetNodeTable costSheetNodeTable = super(_set, _costSheetNodeTable);

        if (_set)
        {
            costGroupId         = _costSheetNodeTable.CostGroupId;
            costGroupType       = _costSheetNodeTable.costGroupType();
            costGroupBehavior   = _costSheetNodeTable.costGroupBehavior();
        }

        costSheetNodeTable.CostGroupId   = costGroupId;

        return costSheetNodeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>equal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Compares attributes and sub-node lists of two costing sheet nodes.
    /// </summary>
    /// <param name="_costSheetNode">
    ///    The costing sheet node to compare to.
    /// </param>
    /// <returns>
    ///    true if the nodes have equal attributes and lists of subnodes; otherwise, false.
    /// </returns>
    public boolean equal(Object _costSheetNode)
    {
        boolean ret = super(_costSheetNode);

        if (ret)
        {
            CostSheetNodeGroup costSheetNodeGroup = _costSheetNode;

            ret = costGroupId == costSheetNodeGroup.getCostGroupId();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillResultLineList</Name>
				<Source><![CDATA[
    public void fillResultLineList(
        CostSheet   _costSheet,
        List        _resultLineList)
    {
        AmountMST contributionVariable = costCalcTransData.getContributionVariable();
        AmountMST contributionConstant = costCalcTransData.getContributionConstant();

        if ((contributionVariable + contributionConstant) != 0.00)
        {
            _resultLineList.addEnd(CostSheetResultLine::construct(code,
                                                                   description,
                                                                   contributionVariable,
                                                                   contributionConstant,
                                                                   costCalcTransData.getCostVariable(),
                                                                   costCalcTransData.getCostFixed(),
                                                                   this.getLevel(_costSheet),
                                                                   costCalcTransData.getQty()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostGroupId</Name>
				<Source><![CDATA[
    public CostGroupId getCostGroupId()
    {
        return costGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the resource index of the image that will represent this node in the editor.
    /// </summary>
    /// <returns>
    ///    The resource ID.
    /// </returns>
    public int getImage()
    {
        return #imageCostGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    public CostSheetNodeType getType()
    {
        return CostSheetNodeType::CostGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCostGroupWithSubnodes</Name>
				<Source><![CDATA[
    protected boolean isCostGroupWithSubnodes()
    {
        return this.hasSubnodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSubnodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads subnodes from a database.
    /// </summary>
    /// <param name="_modeStrategy">
    ///    The mode in which the costing sheet is built.
    /// </param>
    protected void loadSubnodes(CostSheetModeStrategy _modeStrategy)
    {
        if (_modeStrategy.mustLoadCostGroupSubnodes())
        {
            QueryRun queryRun = this.subnodesQueryRun(_modeStrategy);
            while (queryRun.next())
            {
                CostSheetNodeTable costSheetNodeTable = queryRun.get(tableNum(CostSheetNodeTable));
                this.addSubnode(CostSheetNodeCalculation::construct(costSheetNodeTable, nodeId, _modeStrategy, costGroupId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>CostSheetNodeGroup</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    protected void new(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        costGroupId         = _costSheetNodeTable.CostGroupId;
        costGroupType       = _costSheetNodeTable.costGroupType();
        costGroupBehavior   = _costSheetNodeTable.costGroupBehavior();

        super(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack(boolean _areSurchargesPackedByParentContext = false)
    {
        return [#CurrentVersion, this.getType(), #CurrentList] + [super(_areSurchargesPackedByParentContext)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container           base;
        boolean             ret;
        Integer             version = RunBase::getVersion(_packedClass);
        CostSheetNodeType  nodeType;

        switch (version)
        {
            case #CurrentVersion:
                [version, nodeType, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(CostSheetNode _parentNode)
    {
        CostPriceType previousCostType = this.getCostType();

        super(_parentNode);

        if (this.getCostType() != previousCostType)
        {
            code = CostSheetNodeGroup::defaultCode(this.getCostGroupId(), this.getCostType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the costing sheet node.
    /// </summary>
    /// <param name="_costSheet">
    ///    A costing sheet instance.
    /// </param>
    /// <returns>
    ///    true if the node is valid; otherwise, false.
    /// </returns>
    public boolean validate(CostSheet _costSheet)
    {
        boolean ret = super(_costSheet);

        if (costGroupType == CostGroupType::Indirect)
        {
            ret = (this.hasSubnodes() ? true : this.checkFailed("@SYS105368")) && ret;
        }

        if (!costGroupId
            || !BOMCostGroup::exist(costGroupId))
        {
            ret = this.checkFailed(strFmt("@SYS34076", "@SYS8081")) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validSubnodeTypeSet</Name>
				<Source><![CDATA[
    public Set validSubnodeTypeSet()
    {
        Set ret = new Set(Types::Enum);

        if (this.canHaveSubnodes())
        {
            ret = this.addSubnodeTypeSet(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSubnodeTypeSet</Name>
				<Source><![CDATA[
	/// <summary>
    /// Adds cost sheet sub-node type.
    /// </summary>
    /// <param name = "_ret">
    /// Cost sheet sub-node type set.
	/// </param>
    /// <returns>
    /// Cost sheet sub-node type set.
	/// </returns>
    protected Set addSubnodeTypeSet(Set _ret)
    {
        switch (this.getCostType())
        {
            case CostPriceType::COGM:
                _ret.add(CostSheetNodeType::CalculationSurcharge);
                _ret.add(CostSheetNodeType::CalculationRate);
                _ret.add(CostSheetNodeType::CalculationOutUnitBased);
                _ret.add(CostSheetNodeType::CalculationInUnitBased);
                break;
            case CostPriceType::Purchase:
                _ret.add(CostSheetNodeType::CalculationSurcharge);
                _ret.add(CostSheetNodeType::CalculationPurchUnitBased);
                break;
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeGroup</c> class.
    /// </summary>
    /// <param name="_costSheetNodeTable">
    ///     The record in the <c>CostSheetNodeTable</c> table that will be used to initialize this object.
    /// </param>
    /// <param name="_parentNodeId">
    ///     The ID of the parent node.
    /// </param>
    /// <param name="_modeStrategy">
    ///     The <c>CostSheetModeStrategy</c> object that controls the creation of the costing sheet.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeGroup</c> class.
    /// </returns>
    public static CostSheetNodeGroup construct(
        CostSheetNodeTable      _costSheetNodeTable,
        CostSheetNodeId         _parentNodeId,
        CostSheetModeStrategy   _modeStrategy)
    {
        return new CostSheetNodeGroup(_costSheetNodeTable, _parentNodeId, _modeStrategy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CostSheetNodeGroup</c> class.
    /// </summary>
    /// <param name="_packedNode">
    ///     A container that holds a serialized <c>CostSheetNodeGroup</c> object.
    /// </param>
    /// <returns>
    ///     The new instance of the <c>CostSheetNodeGroup</c> class.
    /// </returns>
    public static CostSheetNodeGroup create(container _packedNode)
    {
        CostSheetNodeGroup node = CostSheetNodeGroup::construct(null, 0, CostSheetModeStrategyPackUnpack::construct());
        boolean ret = node.unpack(_packedNode);

        return ret ? node : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCode</Name>
				<Source><![CDATA[
    private static CostSheetNodeCode defaultCode(CostGroupId _costGroupId, CostPriceType _costType)
    {
        return strFmt("@SYS76785",
                      CostSheetNodePrice::getCostTypeShortName(_costType),
                      _costGroupId ? _costGroupId : "@SYS24248");
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCostGroup</Name>
				<Source><![CDATA[
    public static CostSheetNodeGroup newBOMCostGroup(
        CostSheetId         _sheetId,
        CostSheetNodeId     _nodeId,
        BOMCostGroup        _bomCostGroup)
    {
        CostSheetNodeTable costSheetNodeTable;

        costSheetNodeTable.clear();
        costSheetNodeTable.SheetId = _sheetId;
        costSheetNodeTable.NodeId = _nodeId;
        costSheetNodeTable.Code = CostSheetNodeGroup::defaultCode(_bomCostGroup.CostGroupId, CostPriceType::Undefined);
        costSheetNodeTable.Description = _bomCostGroup.Name;
        costSheetNodeTable.Type = CostSheetNodeType::CostGroup;
        costSheetNodeTable.CostGroupId = _bomCostGroup.CostGroupId;

        return CostSheetNodeGroup::construct(costSheetNodeTable, 0, CostSheetModeStrategyPackUnpack::construct());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>