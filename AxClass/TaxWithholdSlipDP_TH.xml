<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSlipDP_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdSlipDP_TH</c> class is the report data provider class for the
///    <c>TaxWithholdSlip_TH</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(TaxWithholdSlipContract_TH))
]
class TaxWithholdSlipDP_TH extends SRSReportDataProviderBase
{
    TaxWithholdSlipTmp_TH     taxWithholdSlipTmp_TH;
    TaxWithholdSlipTmpHeader_TH     taxWithholdSlipTmpHeader;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00005, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxWithholdSlipTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data in <c> TaxWithholdSlipTmp_TH </c> table.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    ///    The RecId of <c>LedgerJournalTrans</c> table record.
    /// </param>
    private void createTaxWithholdSlipTmp(LedgerJournalTransRefRecId _ledgerJournalTransRecId)
    {
        TaxWithholdRevenueTable_TH      taxWithholdRevenueTable;
        TaxWithholdItemGroupHeading_TH  taxWithholdItemGroupHeading;
        TaxWithholdTrans                taxWithholdTrans;
        TaxWithholdTransExtensionTH     taxWithholdTransExtensionTH;
        SortingNumber                   curSortingNumber;
        const str                       thaiPrefix = 'th';

        if (_ledgerJournalTransRecId)
        {
            select firstOnly forUpdate taxWithholdSlipTmpHeader;

            // Init the current sorting number. All table used sorting number should be greater than 0.
            curSortingNumber = 0;

            while select SortingNumber, Description
                from taxWithholdRevenueTable
                    order by taxWithholdRevenueTable.SortingNumber asc
                outer join RecId, Name, TaxWithholdItemGroup
                    from taxWithholdItemGroupHeading
                    where taxWithholdItemGroupHeading.TaxWithholdRevenueTable_TH == taxWithholdRevenueTable.RecId
                outer join WithholdBaseAmount, TaxWithholdAmount, TransDate
                    from taxWithholdTrans
                    where taxWithholdTrans.TaxWithholdItemGroupHeading_TH == taxWithholdItemGroupHeading.RecId
                outer join AccountingCurUpdatedWithholdBaseAmt
                    from taxWithholdTransExtensionTH
                    where taxWithholdTransExtensionTH.TaxWithholdTrans      == taxWithholdTrans.RecId
                        && taxWithholdTransExtensionTH.HideInReports        == NoYes::No
                        && taxWithholdTransExtensionTH.LedgerJournalTrans   == _ledgerJournalTransRecId

            {
                // taxWithholdTrans & taxWithholdTransExtensionTH should be considered as one table in this case. If the extension
                // table is not selected, then value in base table should not be used.
                if (taxWithholdTransExtensionTH.RecId == 0)
                {
                    taxWithholdTrans.WithholdBaseAmount     = 0;
                    taxWithholdTrans.TaxWithholdAmount      = 0;
                    taxWithholdTrans.TransDate              = dateNull();
                }

                if (curSortingNumber != taxWithholdRevenueTable.SortingNumber)
                {
                    if (curSortingNumber != 0)
                    {
                        taxWithholdSlipTmpHeader.TotalWithholdBaseAmount    += taxWithholdSlipTmp_TH.TaxWithholdBaseAmount;
                        taxWithholdSlipTmpHeader.TotalWithholdAmount        += taxWithholdSlipTmp_TH.TaxWithholdAmount;

                        taxWithholdSlipTmp_TH.insert();
                        taxWithholdSlipTmp_TH.clear();
                    }

                    curSortingNumber = taxWithholdRevenueTable.SortingNumber;
                }

                this.initTaxWithholdSlipTmpTH(taxWithholdRevenueTable, taxWithholdItemGroupHeading, taxWithholdTrans, taxWithholdTransExtensionTH);
            }

            if (curSortingNumber != 0)
            {
                taxWithholdSlipTmpHeader.TotalWithholdBaseAmount    += taxWithholdSlipTmp_TH.TaxWithholdBaseAmount;
                taxWithholdSlipTmpHeader.TotalWithholdAmount        += taxWithholdSlipTmp_TH.TaxWithholdAmount;
                if (strLwr(subStr(currentUserLanguage(), 1, 2)) == thaiPrefix)
                {
                    taxWithholdSlipTmpHeader.TotalWithholdAmountInLetters = numeralsToThaiTxt(taxWithholdSlipTmpHeader.TotalWithholdAmount);
                }
                else
                {
                    taxWithholdSlipTmpHeader.TotalWithholdAmountInLetters = numeralsToTxt(taxWithholdSlipTmpHeader.TotalWithholdAmount);
                }
                taxWithholdSlipTmpHeader.update();

                taxWithholdSlipTmp_TH.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxWithholdSlipTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the data in <c> TaxWithholdSlipTmpHeader_TH </c> table.
    /// </summary>
    /// <param name="_ledgerJournalTransRecId">
    ///    The RecId of <c>LedgerJournalTrans</c> table record.
    /// </param>
    private void createTaxWithholdSlipTmpHeader(LedgerJournalTransRefRecId _ledgerJournalTransRecId)
    {
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalTransExtensionTH       ledgerJournalTransExtensionTH;
        VendTable                           vendTable;
        TaxAgent                            taxAgent;
        VendTrans                           vendTrans;
        VendInvoiceJour                     vendInvoiceJour;
        VendInvoiceJourExtensionTH          vendInvoiceJourExtensionTH;
        LogisticsPostalAddress              logisticsPostalAddress;
        TaxWithholdTrans                    taxWithholdTrans;
        TaxWithholdTransExtensionTH         taxWithholdTransExtensionTH;
        utcDateTime                         minDateTime = DateTimeUtil::minValue();
        utcDateTime                         maxDateTime = DateTimeUtil::maxValue();

        ledgerJournalTrans              = LedgerJournalTrans::findRecId(_ledgerJournalTransRecId, false);
        ledgerJournalTransExtensionTH   = LedgerJournalTransExtensionTH::findByLedgerJournalTrans(_ledgerJournalTransRecId);
        taxAgent                        = TaxAgent::find(ledgerJournalTransExtensionTH.TaxAgent);

        Debug::assert(ledgerJournalTrans.AccountType == LedgerJournalACType::Vend);
        vendTable = VendTable::find(ledgerJournalTrans.parmAccount());

        select firstOnly validTimeState(minDateTime, maxDateTime) RecId from taxWithholdTransExtensionTH
            where taxWithholdTransExtensionTH.LedgerJournalTrans == ledgerJournalTrans.RecId
            join RecId from taxWithholdTrans
                where taxWithholdTrans.RecId == taxWithholdTransExtensionTH.TaxWithholdTrans
                join RecId from vendTrans
                    where vendTrans.RecId == taxWithholdTrans.VendTransInvoiceId
                    join DefaultDimension from vendInvoiceJour order by RecId
                        where vendInvoiceJour.LedgerVoucher     == vendTrans.Voucher
                            && vendInvoiceJour.InvoiceAccount   == vendTrans.AccountNum
                            && vendInvoiceJour.InvoiceDate      == vendTrans.TransDate
                        join RecId from vendInvoiceJourExtensionTH
                            where vendInvoiceJourExtensionTH.VendInvoiceJour == vendInvoiceJour.RecId
                            outer join Address, Location from logisticsPostalAddress
                                where logisticsPostalAddress.RecId == vendInvoiceJourExtensionTH.InvoicePostalAddress;

        if (!logisticsPostalAddress)
        {
            logisticsPostalAddress = vendTable.invoiceAddress();
        }

        CompanyInfo companyInfo = CompanyInfo::find();
        TransDateTime transDateTime = ledgerJournalTrans.ledgerJournalTable().PostedDateTime;
        LogisticsAddressing companyPostalAddress = this.getCompanyPostalAddressOnDate(transDateTime);

        taxWithholdSlipTmpHeader.CompanyName                = companyInfo.Name;
        taxWithholdSlipTmpHeader.CompanyAddress             = companyPostalAddress;
        taxWithholdSlipTmpHeader.CompanyTaxRegNum           = companyInfo.CoRegNum;
        taxWithholdSlipTmpHeader.CompanyTaxBranchNumber     = TaxBranchType::getTBDisplayValueByDefaultDimension(vendInvoiceJour.DefaultDimension);
        taxWithholdSlipTmpHeader.VendorName                 = vendTable.name();
        taxWithholdSlipTmpHeader.VendorTaxBranchNumber      = TaxInformation_TH::find(logisticsPostalAddress.Location).BranchNumber;
        taxWithholdSlipTmpHeader.VendAddress                = logisticsPostalAddress.Address;
        taxWithholdSlipTmpHeader.VendVATNum                 = ledgerJournalTransExtensionTH.TaxRegNum ? ledgerJournalTransExtensionTH.TaxRegNum : vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, ledgerJournalTrans.TransDate);
        taxWithholdSlipTmpHeader.PaymentGrossUpType         = ledgerJournalTransExtensionTH.PaymentGrossUpType;

        // Gets Tax agent information
        taxWithholdSlipTmpHeader.TaxAgentName               = taxAgent.name();
        taxWithholdSlipTmpHeader.TaxAgentRegNum             = taxAgent.TaxRegNum;
        taxWithholdSlipTmpHeader.TaxAgentAddress            = taxAgent.address();

        if (ledgerJournalTransExtensionTH.PaymentGrossUpType == TaxWithholdPaymentGrossUpType::Other)
        {
            taxWithholdSlipTmpHeader.PaymentGrossUpOtherDetail  = ledgerJournalTransExtensionTH.PaymentGrossUpOtherDetail;
        }
        taxWithholdSlipTmpHeader.CertificateNumber          = ledgerJournalTransExtensionTH.CertificateNumber;
        taxWithholdSlipTmpHeader.SequenceNumberFormType     = this.getSequenceNumberFormType(vendTable);

        taxWithholdSlipTmpHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequenceNumberFormType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value of the <c> TaxWithholdReportLayout_TH </c> depending on the value of the <c> VendTable </c> table.
    /// </summary>
    /// <param name="_vendTable">
    ///    The <c>VendTable</c> table record.
    /// </param>
    /// <returns>
    ///    The value of the <c> TaxWithholdReportLayout_TH </c>.
    /// </returns>
    public TaxWithholdReportLayout_TH getSequenceNumberFormType(VendTable _vendTable)
    {
        return
            (DirPartyTable::findRec(_vendTable.Party).baseType() == DirPartyBaseType::Person)
            ? TaxWithholdReportLayout_TH::ThaiPND3
            : TaxWithholdReportLayout_TH::ThaiPND53;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdSlipTmp_TH</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxWithholdSlipTmp_TH</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxWithholdSlipTmp_TH</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(TaxWithholdSlipTmp_TH))
    ]
    public TaxWithholdSlipTmp_TH getTaxWithholdSlipTmp_TH()
    {
        select taxWithholdSlipTmp_TH;
        return taxWithholdSlipTmp_TH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdSlipTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxWithholdSlipTmpHeader_TH</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxWithholdSlipTmpHeader_TH</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(TaxWithholdSlipTmpHeader_TH))]
    public TaxWithholdSlipTmpHeader_TH getTaxWithholdSlipTmpHeader()
    {
        select taxWithholdSlipTmpHeader;
        return taxWithholdSlipTmpHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data in the <c>TaxWithholdSlipTmp_TH</c> table.
    /// </summary>
    public void processReport()
    {
        TaxWithholdSlipContract_TH  taxWithholdSlipContract;
        LedgerJournalTransRefRecId  ledgerJournalTransRecId;

        taxWithholdSlipContract = this.parmDataContract() as TaxWithholdSlipContract_TH;
        ledgerJournalTransRecId = taxWithholdSlipContract.parmLedgerJournalTransRecId();

        this.createTaxWithholdSlipTmpHeader(ledgerJournalTransRecId);
        this.createTaxWithholdSlipTmp(ledgerJournalTransRecId);

        if (TaxWithholdSlipDPUpdateCompanyAddressForUnpostedJournalFlight_TH::instance().isEnabled())
        {
            this.updateCompanyAddressTaxWithholdSlipTmpHeader(ledgerJournalTransRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxWithholdSlipTmpTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes table of <c>TaxWithholdSlipTmp_TH</c>.
    /// </summary>
    /// <param name = "_taxWithholdRevenueTable">
    /// The buffer of <c>TaxWithholdRevenueTable_TH</c>.
    /// </param>
    /// <param name = "_taxWithholdItemGroupHeading">
    /// The buffer of <c>TaxWithholdItemGroupHeading_TH</c>.
    /// </param>
    /// <param name = "_taxWithholdTrans">
    /// The buffer of <c>TaxWithholdTrans</c>.
    /// </param>
    /// <param name = "_taxWithholdTransExtensionTH">
    /// The buffer of <c>TaxWithholdTransExtensionTH</c>.
    /// </param>
    protected void initTaxWithholdSlipTmpTH(
        TaxWithholdRevenueTable_TH      _taxWithholdRevenueTable,
        TaxWithholdItemGroupHeading_TH  _taxWithholdItemGroupHeading,
        TaxWithholdTrans                _taxWithholdTrans,
        TaxWithholdTransExtensionTH     _taxWithholdTransExtensionTH)
    {
        // The income type is the same for each sorting number. Use the last one here
        taxWithholdSlipTmp_TH.IncomeType            = _taxWithholdRevenueTable.Description;
        taxWithholdSlipTmp_TH.SortingNumber         = _taxWithholdRevenueTable.SortingNumber;
        // All transaction date should be the same. Use the last one here.
        if (_taxWithholdTrans.TransDate)
        {
            taxWithholdSlipTmp_TH.TransDate         = _taxWithholdTrans.TransDate;
        }
        taxWithholdSlipTmp_TH.TaxWithholdBaseAmount += (_taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt != 0)
                    ? _taxWithholdTransExtensionTH.AccountingCurUpdatedWithholdBaseAmt
                    : _taxWithholdTrans.WithholdBaseAmount;
        taxWithholdSlipTmp_TH.TaxWithholdAmount     += _taxWithholdTrans.TaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompanyAddressTaxWithholdSlipTmpHeader</Name>
				<Source><![CDATA[
    private void updateCompanyAddressTaxWithholdSlipTmpHeader(LedgerJournalTransRefRecId _ledgerJournalTransRecId)
    {
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_ledgerJournalTransRecId, false);
        if (ledgerJournalTrans.ledgerJournalTable().PostedDateTime == utcDateTimeNull())
        {
            select firstonly TransDate from taxWithholdSlipTmp_TH
                where taxWithholdSlipTmp_TH.TransDate;

            taxWithholdSlipTmpHeader.CompanyAddress = this.getCompanyPostalAddressOnDate(taxWithholdSlipTmp_TH.TransDate ? taxWithholdSlipTmp_TH.TransDate : ledgerJournalTrans.TransDate);
            taxWithholdSlipTmpHeader.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyPostalAddressOnDate</Name>
				<Source><![CDATA[
    private LogisticsAddressing getCompanyPostalAddressOnDate(TransDateTime _transDateTime)
    {
        LogisticsLocationEntity logisticsLocationEntity = LogisticsLocationEntity::constructFromLocationRecId(
            DirPartyLocation::findPrimaryPartyLocation(CompanyInfo::find().RecId, true).Location);

        return logisticsLocationEntity.getPostalAddressOn(_transDateTime).Address;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>