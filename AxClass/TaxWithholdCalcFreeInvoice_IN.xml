<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcFreeInvoice_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCalcFreeInvoice_IN</c> class integrates with the calculation of withhold tax from the free text invoice lines by the
/// <see cref="T:CustInvoiceCalcTax_Table" />.
/// </summary>
class TaxWithholdCalcFreeInvoice_IN extends TaxWithholdCalculation_IN
{
    RefRecId                    lineRecIdBeingCalculated;
    CustInvoiceCalcTax_Table    custInvoiceCalcTax;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the grossAmount for given FTI.
    /// </summary>
    protected void calcGrossAmountCur()
    {
        this.initGrossAmountCur();
        this.finalizeGrossAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Steps through Free text invoice lines to calculate withhold tax for a free text invoice.
    /// </summary>
    /// <returns>
    ///    The withhold tax amount.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        CustInvoiceLine     custInvoiceLineLoc;
        CustInvoiceTable    custInvoiceTableLoc;
        container           taxWithholdData;
        container           customerInformation;
        TaxAmountCur        taxWithHoldAmount;
        TaxWithholdType_IN  taxtype;
        TaxWithholdGroup    taxWithholdGroup;
        boolean             loadTaxUncommittedLoc;
        AmountCur           lineGrossAmountCur;
        boolean             isOnJewelry;
        boolean             isByCash;
        boolean             isSettled;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN;

        AmountCur           sumOfPaymentAmountCur = 0;

        if (!headingRecId)
        {
            return 0;
        }

        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        custInvoiceTableLoc = CustInvoiceTable::findRecId(headingRecId);

        if (custInvoiceTableLoc && !this.isTDSTCSApplicableForHeader(custInvoiceTableLoc))
        {
            return 0;
        }

        this.calcGrossAmountCur();

        custInvoiceCalcTax.initCursor();
        custInvoiceLineLoc = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
        custInvoiceTableLoc = custInvoiceLineLoc.custInvoiceTable();

        while (custInvoiceLineLoc)
        {
            custInvoiceLineTaxExtensionIN = custInvoiceLineLoc.custInvoiceLineTaxExtensionIN();
            isOnJewelry  = TaxWithholdDesignerTable_IN::isonJewelry(custInvoiceLineTaxExtensionIN.tdsGroup ? custInvoiceLineTaxExtensionIN.tdsGroup : custInvoiceLineTaxExtensionIN.tcsGroup, custInvoiceCalcTax.invoiceDate());
            isByCash     = PaymTerm::isbyCashTermsofPayment_IN(custInvoiceTableLoc.Payment) || CustPaymModeTable::isbyCashMethodofPayment_IN(custInvoiceTableLoc.PaymMode);
            isSettled = this.isSettled(custInvoiceTableLoc.company(), custInvoiceTableLoc.TableId, custInvoiceTableLoc.RecId);

            if (
                this.isTDSTCSApplicableForLine(custInvoiceLineLoc)
                &&(!(isOnJewelry && !isByCash && !isSettled))
               )
            {
                taxWithholdGroup = custInvoiceLineTaxExtensionIN.TDSGroup ? custInvoiceLineTaxExtensionIN.TDSGroup : custInvoiceLineTaxExtensionIN.TCSGroup;
                taxtype          = custInvoiceLineTaxExtensionIN.TDSGroup ? TaxWithholdType_IN::TDS : TaxWithholdType_IN::TCS;

                lineGrossAmountCur = TmpTransLineWithholdGrossAmount_IN::lineGrossAmountCur(tmpTransLineWithholdGrossAmount, custInvoiceLineLoc.TableId,custInvoiceLineLoc.RecId);

                if (lineGrossAmountCur > 0)
                {
                    if (isSettled && isOnJewelry && sumOfPaymentAmountCur == 0)
                    {
                        sumOfPaymentAmountCur = this.getSumOfPayment(custInvoiceTableLoc);
                        if (sumOfPaymentAmountCur > 0)
                        {
                            isByCash = true;
                        }
                    }

                    taxWithholdData = this.setWHTContainerData(custInvoiceLineLoc, lineGrossAmountCur);
                    this.setInvoiceCompany(curext());
                    this.setPaymentCompany(curext());

                    customerInformation += custInvoiceTableLoc.InvoiceAccount;
                    customerInformation += '';
                    customerInformation += '';
                    customerInformation += '';
                    customerInformation += curext();
                    customerInformation += curext();

                    taxWithHoldAmount   += this.totalTaxWithhold(custInvoiceTableLoc.InvoiceAccount,
                                                                taxWithholdGroup,
                                                                custInvoiceTableLoc.InvoiceDate,
                                                                taxWithholdData,
                                                                custInvoiceLineTaxExtensionIN.TDSGroup ? true : false,
                                                                false,
                                                                '',
                                                                '',
                                                                '',
                                                                0,
                                                                0,
                                                                LedgerJournalACType::Cust,
                                                                LedgerJournalACType::Cust,
                                                                customerInformation,
                                                                false,
                                                                0,
                                                                isOnJewelry,
                                                                isByCash);
                }
            }
            custInvoiceLineLoc = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
        }

        loadTaxUncommittedLoc = TaxWithholdUncommitted_IN::existByDocumentId(this.parmHeadingTableID(), this.parmHeadingRecID());

        if (!loadTaxUncommittedLoc)
        {
            this.updateTaxWithholdUncommitted();
        }

        // Note: it doesn't work if FTI contains both TDS and TCS lines, however it does not support posting FTI including both TDS and TCS lines.
        if (taxtype == TaxWithholdType_IN::TDS)
        {
            taxWithHoldAmount = -taxWithHoldAmount;
        }

        sw.Stop();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00054, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), sw.ElapsedMilliseconds);

        return taxWithHoldAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax withhold amount.
    /// </summary>
    /// <returns>
    /// The total tax withhold amount.
    /// </returns>
    public TaxAmountCur totalTaxWithholdAmount()
    {
        TaxAmountCur totalTaxWithholdAmount;
        totalTaxWithholdAmount = super();

        // Find the first line have WHT tax group set
        CustInvoiceLine custInvoiceLineLoc;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN;
        select firstonly custInvoiceLineTaxExtensionIN
            join RecId from custInvoiceLineLoc
            where custInvoiceLineTaxExtensionIN.CustInvoiceLine == custInvoiceLineLoc.RecId
                && custInvoiceLineLoc.ParentRecId == custInvoiceCalcTax.parmCustInvoiceTable().RecId
                && (custInvoiceLineTaxExtensionIN.TDSGroup|| custInvoiceLineTaxExtensionIN.TCSGroup);

        if(custInvoiceLineTaxExtensionIN)
        {
            TaxWithholdType_IN taxtype = custInvoiceLineTaxExtensionIN.TDSGroup ? TaxWithholdType_IN::TDS : TaxWithholdType_IN::TCS;

            if (taxtype == TaxWithholdType_IN::TDS)
            {
                totalTaxWithholdAmount = -totalTaxWithholdAmount;
            }
        }

        return totalTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// finalizes the grossAmount for given free text invoice lines and updates the <c>TmpTransLineWithholdGrossAmount_IN</c> table.
    /// </summary>
    protected void finalizeGrossAmountCur()
    {
        container                           paymentAmountCurCon;
        container                           taxWithholdCodeTypeCon;
        AmountCur                           paymentAmountCur;
        TaxWithholdCodeType_IN              paymentTaxWithholdCodeType;
        int                                 conPosition;
        CustInvoiceLine                     custInvoiceLineLoc;
        CustInvoiceTable                    custInvoiceTableLoc;
        boolean                             isLineSettled;
        TaxWithholdCodeType_IN              invoiceLineTaxWithholdCodeType;
        TmpTransLineWithholdGrossAmount_IN  tmpTransLineWithholdGrossAmountLoc;
        AmountCur                           invoiceLineRemainSettledAmountCur;
        AmountCur                           invoiceWHTSettledAmountCur;

        custInvoiceCalcTax.initCursor();
        custInvoiceLineLoc = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
        custInvoiceTableLoc = custInvoiceLineLoc.custInvoiceTable();
        conPosition = 1;
        ttsBegin;

        if(!TaxWithholdGroupHeading::find(custInvoiceTableLoc.TCSGroup_IN).TaxLiabilityOnPayment_IN)
        {
            [paymentAmountCurCon, taxWithholdCodeTypeCon] = this.settleSales(custInvoiceTableLoc);
        }

        paymentAmountCur            = conPeek(paymentAmountCurCon,conPosition);
        paymentTaxWithholdCodeType  = conPeek(taxWithholdCodeTypeCon, conPosition);
        while (custInvoiceLineLoc && (conPosition <= conLen(paymentAmountCurCon) || !paymentAmountCur))
        {
            invoiceLineTaxWithholdCodeType      = custInvoiceLineLoc.custInvoiceLineTaxExtensionIN().taxWithholdCodeType();
            tmpTransLineWithholdGrossAmountLoc  = TmpTransLineWithholdGrossAmount_IN::findBySource(tmpTransLineWithholdGrossAmount, custInvoiceLineLoc.TableId, custInvoiceLineLoc.RecId);
            invoiceLineRemainSettledAmountCur   = tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur;

            invoiceWHTSettledAmountCur          = 0;
            isLineSettled                       = false;
            while (!isLineSettled && conPosition <= conLen(paymentAmountCurCon))
            {
                if (paymentAmountCur == 0 && conPosition <= conLen(paymentAmountCurCon))
                {
                    conPosition ++;
                    paymentAmountCur = conPeek(paymentAmountCurCon,conPosition);
                    paymentTaxWithholdCodeType  = conPeek(taxWithholdCodeTypeCon, conPosition);
                }
                if (abs(invoiceLineRemainSettledAmountCur) > abs(paymentAmountCur))
                {
                    invoiceLineRemainSettledAmountCur += paymentAmountCur;
                    if (invoiceLineTaxWithholdCodeType != TaxWithholdCodeType_IN::None
                        && paymentTaxWithholdCodeType == invoiceLineTaxWithholdCodeType)
                    {
                        invoiceWHTSettledAmountCur += paymentAmountCur;
                    }
                    paymentAmountCur = 0;
                }
                else
                {
                    paymentAmountCur += invoiceLineRemainSettledAmountCur;
                    if (invoiceLineTaxWithholdCodeType != TaxWithholdCodeType_IN::None
                        && paymentTaxWithholdCodeType == invoiceLineTaxWithholdCodeType)
                    {
                        invoiceWHTSettledAmountCur -= invoiceLineRemainSettledAmountCur;
                    }
                    invoiceLineRemainSettledAmountCur = 0;
                    isLineSettled = true;
                }
            }
            tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur += invoiceWHTSettledAmountCur;
            tmpTransLineWithholdGrossAmountLoc.update();
            custInvoiceLineLoc = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumOfPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Sum Of Payment.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The custInvoiceTable information.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    Protected AmountCur getSumOfPayment(CustInvoiceTable _custInvoiceTable)
    {
        AmountCur           sumOfPaymentAmountCur = 0;
        SpecTrans           specTrans;
        CustTransOpen       custTransOpen;
        CustTrans           custTransLoc;
        TaxWithholdTrans    taxWithholdTransLoc;

        // calc Sum Amount of payments - for jewelry
        while select SpecRecId, SpecTableId, RefCompany, RefTableId, RefRecId, Balance01  from specTrans
            where specTrans.SpecRecId       == _custInvoiceTable.RecId
                && specTrans.SpecTableId    == _custInvoiceTable.TableId
        {
            select firstOnly TableId, RecId, AmountCur, CashDiscDate, DueDate, RefRecId, AccountNum, TransDate from custTransOpen
                where custTransOpen.TableId     == specTrans.RefTableId
                    && custTransOpen.RecId      == specTrans.RefRecId;

            if (custTransOpen.RecId)
            {
                select firstOnly AccountNum,RecId,PaymMode from custTransLoc
                    where custTransLoc.AccountNum   == custTransOpen.AccountNum
                        && custTransLoc.RecId       == custTransOpen.RefRecId;
                if (custTransLoc.RecId)
                {
                    //check whether it has calc tcs before on payment
                    select firstOnly CustTransInvoiceId,RecId from taxWithholdTransLoc
                        where taxWithholdTransLoc.CustTransInvoiceId == custTransLoc.RecId;

                    if (!taxWithholdTransLoc.RecId)
                    {
                        //check method of payment
                        if (CustPaymModeTable::isbyCashMethodofPayment_IN(custTransLoc.PaymMode))
                        {
                            sumOfPaymentAmountCur += -custTransOpen.AmountCur;
                        }
                    }
                }
            }
        }

        return sumOfPaymentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Object _initializationClass)
    {
        custInvoiceCalcTax = _initializationClass as CustInvoiceCalcTax_Table;
        if (custInvoiceCalcTax == null)
        {
            throw error("@SYS95118");
        }

        taxDate = custInvoiceCalcTax.invoiceDate();

        taxModuleType               = TaxModuleType::FreeTxtInvoice;
        headingTableId              = custInvoiceCalcTax.tableId();
        headingRecId                = custInvoiceCalcTax.recID();

        this.setExchRates(  custInvoiceCalcTax.currencyCode(),
                            custInvoiceCalcTax.exchRate(taxDate),
                            custInvoiceCalcTax.exchRateSecondary(taxDate),
                            Currency::noYes2UnknownNoYes(custInvoiceCalcTax.triangulation(taxDate)));

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the grossAmount for given FTI for withhold tax calculation to <c>TmpTransLineWithholdGrossAmount_IN</c> table.
    /// </summary>
    protected void initGrossAmountCur()
    {
        CustInvoiceLine             custInvoiceLineLoc;
        CustInvoiceTable            custInvoiceTableLoc;
        AmountCur                   indirectTaxAmount, grossAmount, lineAmount, miscAmount;
        TmpTaxWorkTrans             tmpTaxWorkTransLoc;
        TaxWithholdGroup            taxWithholdGroup;
        CurrencyCode                currencyCodeLoc;
        ExchRate                    exchangeRate;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN;

        custInvoiceCalcTax.initCursor();

        custInvoiceLineLoc = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
        custInvoiceTableLoc = custInvoiceLineLoc.custInvoiceTable();

        while (custInvoiceLineLoc)
        {
            // Misc charges amount
            MarkupTrans markupTrans;
            TaxWithholdGroupHeading taxWithholdGroupHeading;
            miscAmount = 0;

            while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
               where markupTrans.TransTableId == custInvoiceLineLoc.TableId
                  && markupTrans.TransRecId == custInvoiceLineLoc.RecId
               exists join custInvoiceLineTaxExtensionIN
                  where custInvoiceLineTaxExtensionIN.CustInvoiceLine == markupTrans.TransRecId
               exists join taxWithholdGroupHeading
                  where (taxWithholdGroupHeading.TaxWithholdGroup == custInvoiceLineTaxExtensionIN.TDSGroup
                        || taxWithholdGroupHeading.TaxWithholdGroup == custInvoiceLineTaxExtensionIN.TCSGroup)
                        && taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No
            {
               MarkupTable markupTable = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);
               if (markupTable.CustType == MarkupType::CustVend)
               {
                  switch (markupTrans.MarkupCategory)
                  {
                        case MarkupCategory::Percent:
                           miscAmount += (custInvoiceLineLoc.AmountCur * markupTrans.Value) / 100;
                           break;
                        case MarkupCategory::Pcs:
                           miscAmount += custInvoiceLineLoc.Quantity * markupTrans.Value;
                           break;
                        default:
                           miscAmount += markupTrans.Value;
                           break;
                  }
               }
               if (markupTable.VendType == MarkupType::CustVend)
               {
                  miscAmount -= markupTrans.Value;
               }
            }

            custInvoiceLineTaxExtensionIN = custInvoiceLineLoc.custInvoiceLineTaxExtensionIN();
            lineAmount  = custInvoiceLineLoc.AmountCur;
            taxWithholdGroup = custInvoiceLineTaxExtensionIN.tdsGroup ?  custInvoiceLineTaxExtensionIN.tdsGroup : custInvoiceLineTaxExtensionIN.tcsGroup;
            currencyCodeLoc  = custInvoiceTableLoc.CurrencyCode;
            exchangeRate     = exchRate;

            // Get the indirect taxes for Withhold tax baseAmount from TaxUncommitted table.
            indirectTaxAmount = TaxUncommitted::getIndirectTaxAmtForWHTSourceBaseCur_IN(custInvoiceLineLoc.TableId,
                                                                                        custInvoiceLineLoc.RecId,
                                                                                        custInvoiceLineLoc.TaxItemGroup,
                                                                                        '',
                                                                                        custInvoiceLineTaxExtensionIN.TDSGroup ? custInvoiceLineTaxExtensionIN.TDSGroup : custInvoiceLineTaxExtensionIN.TCSGroup);

            if (indirectTaxAmount == 0)
            {
                tmpTaxWorkTransLoc = custInvoiceCalcTax.tax().tmpTaxWorkTrans();

                // Get the indirect taxes for Withhold tax baseAmount from TmpTaxWorkTrans table.
                indirectTaxAmount = TmpTaxWorkTrans::getIndirectTaxAmtForWHTSourceBaseCur_IN(tmpTaxWorkTransLoc,
                                                                                             custInvoiceLineLoc.TableId,
                                                                                             custInvoiceLineLoc.RecId,
                                                                                             custInvoiceLineLoc.TaxItemGroup,
                                                                                             '',
                                                                                             custInvoiceLineTaxExtensionIN.TDSGroup ? custInvoiceLineTaxExtensionIN.TDSGroup : custInvoiceLineTaxExtensionIN.TCSGroup);
            }

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                taxWithholdGroupHeading = TaxWithholdGroupHeading::find(taxWithholdGroup);
                ITaxableDocument taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custInvoiceTableLoc));
                ITaxDocument taxDocument = TaxBusinessService::calculateTax(taxableDocument);

                if (taxDocument)
                {
                    TaxDocumentLineProxy taxDocumentLine = taxDocument.findLineBySource(custInvoiceLineLoc.TableId, custInvoiceLineLoc.RecId);
                    if (taxDocumentLine)
                    {
                        if (taxDocumentLine.priceInclTax())
                        {
                            lineAmount += taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                            lineAmount -= taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                        }

                        indirectTaxAmount = this.getIndirectTaxAmountByLine(
                            taxDocument,
                            taxDocumentLine,
                            taxWithholdGroupHeading);

                        // Misc charges' GST
                        if (taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No)
                        {
                            while select RecId from markupTrans
                                where markupTrans.TransTableId == custInvoiceLineLoc.TableId
                                    && markupTrans.TransRecId == custInvoiceLineLoc.RecId
                            {
                                TaxDocumentLineProxy markupTransTaxDocumentLine = taxDocument.findLineBySource(markupTrans.TableId, markupTrans.RecId);
                                if (markupTransTaxDocumentLine)
                                {
                                    if (markupTransTaxDocumentLine.priceInclTax())
                                    {
                                        miscAmount += markupTransTaxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(
                                            TaxAccountingProvider::Party,
                                            TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                                        miscAmount -= markupTransTaxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(
                                            TaxAccountingProvider::Party,
                                            TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                                    }
                                    indirectTaxAmount += this.getIndirectTaxAmountByLine(
                                        taxDocument,
                                        markupTransTaxDocumentLine,
                                        taxWithholdGroupHeading);
                                }
                            }
                        }

                        if (TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFrameworkFieldsConstants::TaxDirection)) == TaxDirection::IncomingTax)
                        {
                            indirectTaxAmount = -indirectTaxAmount;
                        }
                    }
                }
            }
            // </GTE>

            grossAmount = lineAmount + indirectTaxAmount + miscAmount;

            tmpTransLineWithholdGrossAmount.clear();
            tmpTransLineWithholdGrossAmount.LineGrossAmountCur      = grossAmount;
            tmpTransLineWithholdGrossAmount.HeadingTableId          = custInvoiceTableLoc.TableId;
            tmpTransLineWithholdGrossAmount.HeadingRecId            = custInvoiceTableLoc.RecId;
            tmpTransLineWithholdGrossAmount.SourceTableId           = custInvoiceLineLoc.TableId;
            tmpTransLineWithholdGrossAmount.SourceRecId             = custInvoiceLineLoc.RecId;
            tmpTransLineWithholdGrossAmount.TaxWithholdGroup        = taxWithholdGroup;
            tmpTransLineWithholdGrossAmount.AccountType             = AccountType_IN::Cust;
            tmpTransLineWithholdGrossAmount.AccountNumber           = custInvoiceTableLoc.InvoiceAccount;
            tmpTransLineWithholdGrossAmount.TransDate               = taxdate;
            tmpTransLineWithholdGrossAmount.AmountOriginMST         = CurrencyExchangeHelper::amountCur2MST(grossAmount, currencyCodeLoc, exchangeRate, taxdate);
            tmpTransLineWithholdGrossAmount.insert();

            custInvoiceLineLoc = custInvoiceCalcTax.nextLine() as CustInvoiceLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTDSTCSApplicableForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether TDS/TCS will be calculated for given FTI header.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The CustInvoiceTable buffer.
    /// </param>
    /// <returns>
    /// Returns true if TDS/TCS will be calculated for header; otherwise false.
    /// </returns>
    private boolean isTDSTCSApplicableForHeader(CustInvoiceTable _custInvoiceTable)
    {
        CustInvoiceLine custInvoiceLine;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN;
        select RecId from custInvoiceLine
            join custInvoiceLineTaxExtensionIN
            where custInvoiceLine.ParentRecId == _custInvoiceTable.RecID
                && custInvoiceLineTaxExtensionIN.CustInvoiceLine == custInvoiceLine.RecId
                && (custInvoiceLineTaxExtensionIN.TDSGroup || custInvoiceLineTaxExtensionIN.TCSGroup);
        return custInvoiceLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTDSTCSApplicableForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether TDS/TCS will be calculated for given FTI line.
    /// </summary>
    /// <param name="_custInvoiceLine">
    /// The CustInvoiceLine buffer.
    /// </param>
    /// <returns>
    /// Returns true if TDS/TCS will be calculated for line; otherwise false.
    /// </returns>
    private boolean isTDSTCSApplicableForLine(CustInvoiceLine _custInvoiceLine)
    {
        boolean             canCalculateTDSTCS = false;
        CustInvoiceTable    custInvoiceTable;
        TaxWithholdParameters_IN taxWithholdParameters = TaxWithholdParameters_IN::find();

        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN = _custInvoiceLine.custInvoiceLineTaxExtensionIN();

        custInvoiceTable = _custInvoiceLine.custInvoiceTable();

        boolean taxWithholdCalculate = CustTable::find(custInvoiceTable.InvoiceAccount).TaxWithholdCalculate_IN;
        canCalculateTDSTCS = taxWithholdCalculate
                                && ((taxWithholdParameters.tdsActivate  && taxWithholdParameters.tdsInvoice && custInvoiceLineTaxExtensionIN.TDSGroup)
                                || (taxWithholdParameters.tcsActivate   && taxWithholdParameters.tcsInvoice && custInvoiceLineTaxExtensionIN.TCSGroup));

        return canCalculateTDSTCS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        Object  _initializationClass,
        boolean _useTaxWithholdUncommitted,
        boolean _loadTaxWithholdUncommittedOnInit,
        boolean _loadTaxWithholdTrans,
        boolean _skipInit = false,
        boolean _maintainExistingTaxWithholdUncommitted = false)
    {
        super();

        maintainExistingTaxWithholdUncommitted = _maintainExistingTaxWithholdUncommitted;
        useTaxWithholdUncommitted              = _useTaxWithholdUncommitted;
        loadTaxWithholdUncommitted  = _loadTaxWithholdUncommittedOnInit;
        loadTaxWithholdTrans        = _loadTaxWithholdTrans;

        if (!_skipInit)
        {
            this.init(_initializationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets source line recId.
    /// </summary>
    /// <returns>
    /// Returns source line recId.
    /// </returns>
    public RecId sourceRecId()
    {
        return lineRecIdBeingCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source tableId.
    /// </summary>
    /// <returns>
    /// Returns the source tableId.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return tableNum(CustInvoiceLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>