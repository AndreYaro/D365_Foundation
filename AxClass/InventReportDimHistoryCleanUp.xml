<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReportDimHistoryCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventReportDimHistoryCleanUp extends RunBaseBatch implements BatchRetryable
{
    CreatedDateTime   createdDateTimeBefore;

    private DialogField     dialogHistoryCreatedDateTimeDelBefore;
    private str deleteInventReportDimHistorySqlStatement;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        createdDateTimeBefore
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSQLForInventReportDimHistory</Name>
				<Source><![CDATA[
    private str buildSQLForInventReportDimHistory(int _recordsToDeleteBatchSize)
    {
        SqlSystem sqlSystem = new SqlSystem();

        // example SQL:
        // DELETE TOP(100000) FROM InventReportDimHistory WHERE InventReportDimHistory.CREATEDDATETIME <= '2024-02-01T08:35:20' AND PARTITION = 5637144576 and DATAAREAID = N'usmf'
        str directSQL = strFmt('DELETE TOP(%1) FROM InventReportDimHistory', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(' WHERE InventReportDimHistory.CREATEDDATETIME <= %1 AND PARTITION = %2 and DATAAREAID = %3',
            sqlSystem.sqlLiteral(createdDateTimeBefore, true), sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true), sqlSystem.sqlLiteral(curext()));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSqlStatement</Name>
				<Source><![CDATA[
    private void initSqlStatement()
    {
        int recordsToDeleteBatchSize = this.getRecordsToDeleteBatchSize();

        deleteInventReportDimHistorySqlStatement = this.buildSQLForInventReportDimHistory(recordsToDeleteBatchSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToDeleteBatchSize</Name>
				<Source><![CDATA[
    protected int getRecordsToDeleteBatchSize()
    {
        return 100000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCleanUpDate</Name>
				<Source><![CDATA[
    protected boolean validateCleanUpDate(CreatedDateTime _cleanUpDate, utcdatetime _dateToCompare)
    {
        if (_cleanUpDate >= _dateToCompare)
        {
            return checkFailed("@SCM:InventReportDimHistoryCleanUpValidationFailed");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpDateValidate</Name>
				<Source><![CDATA[
    public boolean cleanUpDateValidate(FormDateTimeControl _control)
    {
        return _control.validate() && this.validateCleanUpDate(_control.dateTimeValue(), DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -7));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInventReportDimHistoryCleanUpByDate</Name>
				<Source><![CDATA[
    private void deleteInventReportDimHistoryCleanUpByDate()
    {
        int deletedRows;
        int recordsToDeleteBatchSize = this.getRecordsToDeleteBatchSize();

        deletedRows = recordsToDeleteBatchSize;
        while (deletedRows == recordsToDeleteBatchSize)
        {
            Connection connection = new Connection();
            Statement statement = connection.createStatement();

            try
            {
                connection.ttsbegin();

                deletedRows = statement.executeUpdateWithParameters(deleteInventReportDimHistorySqlStatement, SqlParams::create());
                connection.ttscommit();
            }
            catch
            {
                if (connection != null)
                {
                    connection.ttsabort();
                }

                throw;
            }
            finally
            {
                statement.close();
                connection.finalize();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            this.initSqlStatement();
            this.deleteInventReportDimHistoryCleanUpByDate();
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentBatchHeader</Name>
				<Source><![CDATA[
    public BatchHeader getCurrentBatchHeader()
    {
        return BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventReportDimHistoryCleanUp";
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        #define.textWidth(60)
        #define.textHeight(15)

        var dialog = super();

        str warningMessage = "@SCM:InventReportDimHistoryDeletionWarning";
        DialogField dialogField = dialog.addFieldValue(extendedTypeStr(Notes), warningMessage);
        dialogField.showLabel(false);
        dialogField.border(1);
        dialogField.allowEdit(false);
        dialogField.displayHeight(#textHeight);
        dialogField.displayLength(#textWidth);

        dialogHistoryCreatedDateTimeDelBefore = dialog.addField(extendedTypeStr(CreatedDateTime),"@SCM:InventReportDimHistoryCleanUpTimeDelBefore", "@SCM:InventReportDimHistoryCleanUpTimeDelBeforeDescription");
        dialogHistoryCreatedDateTimeDelBefore.value(createdDateTimeBefore);

        this.registerOverrideMethods();
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        createdDateTimeBefore = dialogHistoryCreatedDateTimeDelBefore.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        createdDateTimeBefore = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -7);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverrideMethods</Name>
				<Source><![CDATA[
    protected void registerOverrideMethods()
    {
        dialogHistoryCreatedDateTimeDelBefore.registerOverrideMethod(methodStr(FormDateTimeControl, validate), methodStr(InventReportDimHistoryCleanUp, cleanUpDateValidate), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        InventReportDimHistoryCleanUp cleanUp = new InventReportDimHistoryCleanUp();
        if (!cleanUp.prompt())
        {
            return;
        }

        cleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>