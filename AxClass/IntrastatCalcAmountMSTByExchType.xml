<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatCalcAmountMSTByExchType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates amount in the accounting currency using exchange rate type.
/// </summary>
class IntrastatCalcAmountMSTByExchType
{
    ExchangeRateTypeName exchangeRateTypeName;
    TransDate            invoiceDate;

    str exchRateErrorMessage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amount based on the <c>ExchangeRateType</c> value.
    /// </summary>
    /// <param name="_amountCur">
    /// The source amount in currency.
    /// </param>
    /// <param name="_transactionCurrencyCode">
    /// The currency code of source amount.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date of transaction.
    /// </param>
    /// <returns>
    /// The amount in company currency, calculated via the provided <c>ExchangeRateType</c> value.
    /// </returns>
    public AmountMST calc(AmountCur    _amountCur,
                          CurrencyCode _transactionCurrencyCode,
                          TransDate    _invoiceDate)
    {
        CurrencyExchangeRate        currencyExchangeRate;
        CurrencyCode                accountingCurrency;
        ExchangeRateType            exchangeRateType;
        AmountMST                   amount;

        exchRateErrorMessage = '';

        accountingCurrency = Ledger::accountingCurrency();

        if (accountingCurrency == _transactionCurrencyCode)
        {
            amount = _amountCur;
        }
        else
        {
            exchangeRateType     = ExchangeRateType::findByName(exchangeRateTypeName);
            currencyExchangeRate = this.getExchRate(exchangeRateType,
                                                _transactionCurrencyCode,
                                                accountingCurrency,
                                                _invoiceDate);

            if (currencyExchangeRate != 0)
            {
                amount = CurrencyExchangeHelper::amountCur2MST(_amountCur, _transactionCurrencyCode, currencyExchangeRate, _invoiceDate);
            }
            else
            {
                currencyExchangeRate = this.getExchRate(exchangeRateType,
                                                    accountingCurrency,
                                                    _transactionCurrencyCode,
                                                    _invoiceDate);

                if (currencyExchangeRate != 0)
                {
                    //find ReciprocalExchangeRate if ExchangeRate is not available
                    amount = CurrencyExchangeHelper::amountCur2MST(_amountCur,
                                                               _transactionCurrencyCode,
                                                                ExchangeRateCalculation::calculateReciprocalExchangeRate(currencyExchangeRate),
                                                               _invoiceDate);
                }
                else
                {
                    //store error message and use it for later
                    //the reason that an error is not throw here is because it is not needed
                    //to be thrown for transactions that is not includede in intrastat
                    exchRateErrorMessage = strFmt("@GLS222718",
                                        exchangeRateTypeName,
                                        _transactionCurrencyCode,
                                        accountingCurrency,
                                        mkDate(1, mthOfYr(_invoiceDate), year(_invoiceDate)),
                                        _invoiceDate);
                    amount = 0;
                }
            }
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateErrorMessage</Name>
				<Source><![CDATA[
    public str exchRateErrorMessage()
    {
        return exchRateErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateTypeName</Name>
				<Source><![CDATA[
    public ExchangeRateTypeName parmExchangeRateTypeName(ExchangeRateTypeName _exchangeRateTypeName = exchangeRateTypeName)
    {
        exchangeRateTypeName = _exchangeRateTypeName;
        return exchangeRateTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of class <c>IntrastatCalcAmountMSTByExchType</c> using parameters.
    /// </summary>
    /// <param name="_exchangeRateTypeName">
    /// A <c>ExchangeRateType</c> value with proper exchange rate defined.
    /// </param>
    /// <returns>
    /// Instance of class <c>IntrastatCalcAmountMSTByExchType</c>.
    /// </returns>
    public static IntrastatCalcAmountMSTByExchType newFromParameters(ExchangeRateTypeName _exchangeRateTypeName)
    {
        IntrastatCalcAmountMSTByExchType intrastatCalcAmountMSTByExchType = new IntrastatCalcAmountMSTByExchType();

        intrastatCalcAmountMSTByExchType.parmExchangeRateTypeName(_exchangeRateTypeName);

        return intrastatCalcAmountMSTByExchType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rates from the <c>ExchangeRateType</c> value.
    /// </summary>
    /// <param name="_exchangeRateType">
    /// The target <c>ExchangeRateType</c> value.
    /// </param>
    /// <param name="_fromCurrency">
    /// The currency to convert from.
    /// </param>
    /// <param name="_toCurrency">
    /// The currency to convert to.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The exchange rate based on given criteria.
    /// </returns>
    private CurrencyExchangeRate getExchRate(ExchangeRateType _exchangeRateType, CurrencyCode _fromCurrency, CurrencyCode _toCurrency, TransDate _transDate)
    {
        ExchangeRateCurrencyPair    exchangeRateCurrencyPair;
        ExchangeRate                exchangeRate;
        TransDate                   validFromDate;
        CurrencyExchangeRate        exchRate;

        validFromDate = mkDate(1, mthOfYr(_transDate), year(_transDate));

        select firstonly RecId from exchangeRateCurrencyPair
        where exchangeRateCurrencyPair.FromCurrencyCode    == _fromCurrency
            && exchangeRateCurrencyPair.ToCurrencyCode     == _toCurrency
            && exchangeRateCurrencyPair.ExchangeRateType   == _exchangeRateType.RecId;

        if (exchangeRateCurrencyPair.RecId)
        {
            select firstonly
            //select an exchange rate that is valid between the month start date of the transDate and the transDate
            validtimestate(validFromDate, _transDate)
            exchangeRate
            where exchangeRate.ExchangeRateCurrencyPair == exchangeRateCurrencyPair.RecId
                // ValidFrom date needs to be between the month start date of the transDate and the transDate
            && exchangeRate.ValidFrom >= validFromDate
                && exchangeRate.ValidFrom <= _transDate
                //ValidTo date needs to be greater or equal to transDate
            && exchangeRate.ValidTo >= _transDate;

            exchRate = exchangeRate.ExchangeRate;
        }

        return exchRate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>