<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimPhysDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimPhysDP</c> is the report data provider class for physical inventory by physical
///    dimensions report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(InventDimPhysContract)),
    SRSReportQueryAttribute(queryStr(InventDimPhys))
]
class InventDimPhysDP extends SrsReportDataProviderPreProcessTempDB
{
    protected InventSumDateTransReport    inventSumDateTransReport;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventSumDateTransReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>InventSumDateTransReport</c> temporary table with the data and returns the table.
    /// </summary>
    /// <returns>
    ///    The <c>InventSumDateTransReport</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('InventSumDateTransReport')
    ]
    public InventSumDateTransReport getInventSumDateTransReport()
    {
        select * from inventSumDateTransReport;
        return inventSumDateTransReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the inventory dimension parameters used to generate the report.
    /// </summary>
    /// <param name = "_contract">
    ///     The data provider contract.
    /// </param>
    /// <returns>
    ///     Inventory dimension parameters.
    /// </returns>
    protected InventDimParm initInventDimParm(InventDimPhysContract _contract)
    {
        InventDimParm         inventDimParm;

        InventDimViewContract inventDimViewContract = _contract.parmInventDimViewContract();

        inventDimParm.data(inventDimViewContract.parmInventDimParm());

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Parses the report parameters and inserts data into the temporary table.
    /// </summary>
    public void processReport()
    {
        InventDimPhysContract contract            = this.parmDataContract();

        super();
        
        TransDate             perDate             = contract.parmPerDate();
        NoYes                 showZeroLines       = contract.parmShowZeroLines();

        InventDimParm         inventDimParm       = this.initInventDimParm(contract);

        InventSumDateEngine   inventSumDateEngine = InventDimPhysProcessByItemTasksFlight::instance().isEnabled() ?
            InventSumDateEngineMultiThread::newParameters(perDate, inventDimParm, !showZeroLines, this.parmQuery()) :
            InventSumDateEngine::newParameters(perDate, inventDimParm, !showZeroLines, this.parmQuery());
        inventSumDateEngine.parmUserConnection(this.parmUserConnection());
        inventSumDateEngine.parmInventSumDateTransReport(inventSumDateTransReport);
        inventSumDateEngine.calcData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection on the table buffer.
    /// </summary>
    /// <param name="_common">
    /// The table buffer.
    /// </param>
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>