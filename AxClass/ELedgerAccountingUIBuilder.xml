<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EledgerAccountingUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ELedgerAccountingUIBuilder</c> is responsible for customizing the user interface of base data contract.
/// </summary>
public class ELedgerAccountingUIBuilder extends SysOperationAutomaticUIBuilder
{
    DialogField         dialogExportTrialBalance;
    DialogField         dialogDeliveryType;
    DialogField         dialogUpdateDate;

    DialogField         dialogExportLedgerEntries;
    DialogField         dialogExportAuxiliaryLedger;
    DialogField         dialogRequestType;
    DialogField         dialogOrderNum;
    DialogField         dialogProcessNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consolidateAccLookupBuild</Name>
				<Source><![CDATA[
    private void consolidateAccLookupBuild()
    {
        DialogField dialogConsolidateAccGroup;

        dialogConsolidateAccGroup = this.bindInfo().getDialogField(this.dataContractObject(),
                                                                methodStr(ELedgerAccountingContract, parmConsolidateAccountGroupId));

        dialogConsolidateAccGroup.registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                         methodStr(ELedgerAccountingUIBuilder, lookup),
                                                         this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerEntriesGrpBuild</Name>
				<Source><![CDATA[
    private void ledgerEntriesGrpBuild()
    {
        dialogExportLedgerEntries = this.bindInfo().getDialogField(this.dataContractObject(),
                                                                methodStr(ELedgerAccountingContract, parmLedgerEntries));

        dialogExportAuxiliaryLedger = this.bindInfo().getDialogField(this.dataContractObject(),
                                                                methodStr(ELedgerAccountingContract, parmAuxiliaryLedger));

        dialogRequestType = this.bindInfo().getDialogField(this.dataContractObject(),
                                                        methodStr(ELedgerAccountingContract, parmRequestType));

        dialogOrderNum = this.bindInfo().getDialogField(this.dataContractObject(),
                                                        methodStr(ELedgerAccountingContract, parmOrderNum));

        dialogProcessNum = this.bindInfo().getDialogField(this.dataContractObject(),
                                                       methodStr(ELedgerAccountingContract, parmProcessNum));

        dialogExportLedgerEntries.registerOverrideMethod(methodStr(FormCheckBoxControl, modified),
                                                        methodStr(ELedgerAccountingUIBuilder, modifiedLedgerEntries),
                                                        this);

        dialogExportAuxiliaryLedger.registerOverrideMethod(methodStr(FormCheckBoxControl, modified),
                                                        methodStr(ELedgerAccountingUIBuilder, modifiedAuxiliaryLedger),
                                                        this);

        dialogRequestType.registerOverrideMethod(methodStr(FormComboBoxControl, modified),
                                                methodStr(ELedgerAccountingUIBuilder, modifiedRequestType),
                                                this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerEntriesGrpUpdate</Name>
				<Source><![CDATA[
    private void ledgerEntriesGrpUpdate()
    {
        boolean allowEdit;

        allowEdit = (dialogExportLedgerEntries.value() || dialogExportAuxiliaryLedger.value());

        dialogRequestType.enabled(allowEdit);

        this.updateOrderNum(allowEdit);
        this.updateProcessNum(allowEdit);

        if (!allowEdit)
        {
            dialogRequestType.value(ELedgerAccRequestType_MX::Blank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the lookup for the Consolidate Account Group.
    /// </summary>
    /// <param name="_formStringControl">The control behind the dialog field that is looked up.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void lookup(FormStringControl _formStringControl)
    {
        LedgerConsolidateAccountGroup::lookUp(_formStringControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedAuxiliaryLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI after the Auxiliary Ledger control has been modified.
    /// </summary>
    /// <param name = "_checkBoxControl">The control behind the dialog field</param>
    /// <returns>Always returns true</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedAuxiliaryLedger(FormCheckBoxControl _checkBoxControl)
    {
        this.ledgerEntriesGrpUpdate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDeliveryType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI after the Delivery Type control has been modified.
    /// </summary>
    /// <param name = "_comboBox">The control behind the dialog field</param>
    /// <returns>Always returns true</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedDeliveryType(FormComboBoxControl _comboBox)
    {
        this.updateDate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedLedgerEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI after the Ledger Entries control has been modified.
    /// </summary>
    /// <param name = "_checkBoxControl">The control behind the dialog field</param>
    /// <returns>Always returns true</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedLedgerEntries(FormCheckBoxControl _checkBoxControl)
    {
        this.ledgerEntriesGrpUpdate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedRequestType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI after the Request Type control has been modified.
    /// </summary>
    /// <param name = "_comboBoxControl">The control behind the dialog field</param>
    /// <returns>Always returns true</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedRequestType(FormComboBoxControl _comboBoxControl)
    {
        this.updateOrderNum();
        this.updateProcessNum();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTrialBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI after the Trial Balanca control has been modified.
    /// </summary>
    /// <param name = "_checkBoxControl">The control behind the dialog field</param>
    /// <returns>Always returns true</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedTrialBalance(FormCheckBoxControl _checkBoxControl)
    {
        this.trialBalanceGrpUpdate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the UI after the Version control has been modified.
    /// </summary>
    /// <param name = "_comboBox">The control behind the dialog field</param>
    /// <returns>Always returns true</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean modifiedVersion(FormComboBoxControl _comboBox)
    {
        this.trialBalanceGrpUpdate();
        this.ledgerEntriesGrpUpdate();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Auguments the UI behavior.
    /// </summary>
    public void postBuild()
    {
        super();

        this.consolidateAccLookupBuild();
        this.trialBalanceGrpBuild();
        this.ledgerEntriesGrpBuild();

        this.trialBalanceGrpUpdate();
        this.ledgerEntriesGrpUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>trialBalanceGrpBuild</Name>
				<Source><![CDATA[
    private void trialBalanceGrpBuild()
    {
        dialogExportTrialBalance = this.bindInfo().getDialogField(this.dataContractObject(),
                                                                methodStr(ELedgerAccountingContract, parmTrialBalance));

        dialogDeliveryType = this.bindInfo().getDialogField(this.dataContractObject(),
                                                            methodStr(ELedgerAccountingContract, parmDeliveryType));

        dialogUpdateDate = this.bindInfo().getDialogField(this.dataContractObject(),
                                                        methodStr(ELedgerAccountingContract, parmUpdateDate));

        dialogExportTrialBalance.registerOverrideMethod(methodStr(FormCheckBoxControl, modified),
                                                        methodStr(ELedgerAccountingUIBuilder, modifiedTrialBalance),
                                                        this);

        dialogDeliveryType.registerOverrideMethod(methodStr(FormCheckBoxControl, modified),
                                                methodStr(ELedgerAccountingUIBuilder, modifiedDeliveryType),
                                                this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trialBalanceGrpUpdate</Name>
				<Source><![CDATA[
    private void trialBalanceGrpUpdate()
    {
        boolean allowEdit = dialogExportTrialBalance.value();

        dialogDeliveryType.enabled(allowEdit);
        this.updateDate(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    private void updateDate(boolean _allowEdit = true)
    {
        boolean allowEdit = _allowEdit &&
                            dialogDeliveryType.value() == ELedgerAccDeliveryType_MX::Complementary;

        dialogUpdateDate.enabled(allowEdit);

        if (!allowEdit)
        {
            dialogUpdatedate.value('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderNum</Name>
				<Source><![CDATA[
    private void updateOrderNum(boolean _allowEdit = true)
    {
        boolean allowEdit = _allowEdit &&
                           (dialogRequestType.value() == ELedgerAccRequestType_MX::AF || dialogRequestType.value() == ELedgerAccRequestType_MX::FC) ;

        dialogOrderNum.allowEdit(allowEdit);

        if (!allowEdit)
        {
            dialogOrderNum.value('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProcessNum</Name>
				<Source><![CDATA[
    private void updateProcessNum(boolean _allowEdit = true)
    {
        boolean allowEdit = _allowEdit &&
                           (dialogRequestType.value() == ELedgerAccRequestType_MX::DE || dialogRequestType.value() == ELedgerAccRequestType_MX::CO) ;

        dialogProcessNum.allowEdit(allowEdit);

        if (!allowEdit)
        {
            dialogProcessNum.value('');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>