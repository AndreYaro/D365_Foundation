<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleSaleOfProductExtendedPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::ExtendedPrice),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::Discount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::Tax),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::RoundingAmount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::ExtendedPrice),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::Discount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::Tax),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::TaxNonRecoverable),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::RoundingAmount),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::WithholdTax_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::WithholdTax_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::ServiceTaxInterimAmount_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::ServiceTaxExpense_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, CreditSaleOfProduct), MonetaryAmount::ServiceTaxInterimExpense_IN),
SourceDocumentEnumLiteralExtensionAttribute(enumStr(BusinessEvent_CustomerInvoice), enumLiteralStr(BusinessEvent_CustomerInvoice, ReturnOfProduct), MonetaryAmount::ServiceTaxInterimExpense_IN)
]
public class AccJourRuleSaleOfProductExtendedPrice extends AccountingJournalizingRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseTaxMainAccDimensionListProvider</Name>
				<Source><![CDATA[
    public boolean canUseTaxMainAccDimensionListProvider()
    {
        // <GIN>
        if (TaxParameters::isCustomsEnable_IN()
            && this.isCustomsTaxIncluded_IN())
        {
            return true;
        }
        // </GIN>
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomsTaxIncluded_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns if the current tax source document line is included in the price or not
    /// </summary>
    /// <returns>
    ///     True if the current source document line tax is included, otherwise false
    /// </returns>
    private boolean isCustomsTaxIncluded_IN()
    {
        TaxSourceDocSublineItem taxSourceDocSublineItem;
        TaxType_IN taxType;
        boolean isCustomsTaxIncluded;

        if (sourceDocumentLineItem is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = sourceDocumentLineItem;
            taxType = TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).TaxType_IN;

            switch (taxType)
            {
                case TaxType_IN::Customs:
                    isCustomsTaxIncluded = true;
                    break;
                default :
                    break;
            }
        }

        return isCustomsTaxIncluded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummarize</Name>
				<Source><![CDATA[
    public boolean parmSummarize()
    {
        boolean summarize = super();

        if (AssetDisposalSaleAccountingRuleSummarizeFlight::instance().isEnabled()
            && sourceDocumentLineItem is CustInvoiceLineSourceDocLineItem)
        {
            AssetBook assetBook;
            CustInvoiceLineSourceDocLineItem custInvoiceLineSourceDocLineItem;
            boolean isFixedAssetAccount;

            custInvoiceLineSourceDocLineItem = sourceDocumentLineItem as CustInvoiceLineSourceDocLineItem;

            if (custInvoiceLineSourceDocLineItem.parmAssetId()
                && custInvoiceLineSourceDocLineItem.parmValueModel())
            {
                assetBook = AssetBook::find(custInvoiceLineSourceDocLineItem.parmAssetId(),
                    custInvoiceLineSourceDocLineItem.parmValueModel());
            }

            if (assetBook)
            {
                isFixedAssetAccount = AssetLedgerAccounts::isFixedAssetAccount(
                        assetBook,
                        assetBook.AssetGroup,
                        this.parmAccountingdistribution().LedgerDimension,
                        AssetTransType::DisposalSale,
                        assetBook.currentOperationsTax());

                if (isFixedAssetAccount)
                {
                    summarize = false;
                }
            }
        }

        return summarize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        return LedgerPostingType::CustBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = DebitCredit::Debit;
        AccountingDistribution localAccountingDistribution;

        localAccountingDistribution = this.parmAccountingdistribution();

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters()
            && localAccountingDistribution.MonetaryAmount == MonetaryAmount::WithholdTax_IN)
        {
            if (localAccountingDistribution.TransactionCurrencyAmount > 0)
            {
                side = DebitCredit::Credit;
            }
            return side;
        }
        // </GIN>
        if (
            (localAccountingDistribution.TransactionCurrencyAmount > 0 &&
                // <GIN>
                (
                // </GIN>
                    localAccountingDistribution.MonetaryAmount == MonetaryAmount::Tax
                // <GIN>
                    ||
                    (TaxParameters::isServiceTaxEnable_IN()
                     && (localAccountingDistribution.MonetaryAmount == MonetaryAmount::ServiceTaxInterimAmount_IN
                         || localAccountingDistribution.MonetaryAmount == MonetaryAmount::ServiceTaxExpense_IN
                         || localAccountingDistribution.MonetaryAmount == MonetaryAmount::ServiceTaxInterimExpense_IN))
                )
                // </GIN>
            )
            ||
            (localAccountingDistribution.TransactionCurrencyAmount < 0 &&
                // <GIN>
                (
                // </GIN>
                    localAccountingDistribution.MonetaryAmount != MonetaryAmount::Tax
                 // <GIN>
                    &&
                    localAccountingDistribution.MonetaryAmount != MonetaryAmount::ServiceTaxInterimAmount_IN
                        && localAccountingDistribution.MonetaryAmount != MonetaryAmount::ServiceTaxExpense_IN
                        && localAccountingDistribution.MonetaryAmount != MonetaryAmount::ServiceTaxInterimExpense_IN
                )
                // </GIN>
            )
        )
        {
            side = DebitCredit::Credit;
        }

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingType_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the posting type for the current <c>SourceDocumentLineItem</c>.
    /// </summary>
    /// <param name="_retVal">
    /// Return value of the original method.
    /// </param>
    /// <returns>
    /// Posting type for <c>SourceDocumentLineItem</c>.
    /// </returns>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType postParmLedgerPostingType_BR(LedgerPostingType _retVal)
    {
        TaxSourceDocSublineItem taxSourceDocSublineItem;

        if (this.parmSourceDocumentLineItem() is TaxSourceDocSublineItem)
        {
            taxSourceDocSublineItem = this.parmSourceDocumentLineItem();

            if (this.parmMonetaryAmount() == monetaryAmount::Tax
                && !TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).RetainedTax_BR)
            {
                return LedgerPostingType::TaxExpense_BR;
            }

            if (this.parmMonetaryAmount() == monetaryAmount::TaxNonRecoverable // for IPI
                && !TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).RetainedTax_BR)
            {
                return LedgerPostingType::CustBalance;
            }
        }

        return _retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmLedgerPostingType_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the posting type for the current <c>SourceDocumentLineItem</c>.
    /// </summary>
    /// <param name="_retVal">
    /// Return value of the original method.
    /// </param>
    /// <returns>
    /// Posting type for <c>SourceDocumentLineItem</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType postParmLedgerPostingType_IN(LedgerPostingType _retVal)
    {
        TaxSourceDocSublineItem taxSourceDocSublineItem;
        TaxType_IN taxType;

        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (sourceDocumentLineItem is TaxSourceDocSublineItem
                && (this.parmMonetaryAmount() == MonetaryAmount::Tax
                || this.parmMonetaryAmount() == MonetaryAmount::Incentiveschemetax_IN))
            {
                taxSourceDocSublineItem = sourceDocumentLineItem;
                taxType = TaxTable::find(taxSourceDocSublineItem.parmTaxCode()).TaxType_IN;

                switch (taxType)
                {
                    case TaxType_IN::Customs:
                        _retVal = LedgerPostingType::Customs_IN;
                        break;
                    default :
                        break;
                }
            }
        }

        return _retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmSide_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the side of journalizing for taxes.
    /// </summary>
    /// <param name="_returnValue">
    /// The side returned by sys parmSide method.
    /// </param>
    /// <returns>
    /// Default side when source document line is not a tax source document line
    /// Credit when the tax source document line is posisitve
    /// Debit when the tax source document line is negative
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DebitCredit postParmSide_BR(DebitCredit _returnValue = 0)
    {
        DebitCredit side = _returnValue;
        AccountingDistribution localAccountingDistribution;

        localAccountingDistribution = this.parmAccountingdistribution();

        if (this.parmSourceDocumentLineItem() is TaxSourceDocSublineItem)
        {
            if (localAccountingDistribution.TransactionCurrencyAmount > 0)
            {
                side = DebitCredit::Credit;
            }
            else
            {
                side = DebitCredit::Debit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingTypeHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AccJourRuleSaleOfProductExtendedPrice), methodStr(AccJourRuleSaleOfProductExtendedPrice, parmLedgerPostingType))]
    /// <summary>
    /// Post event handler for parmLedgerPostingType method.
    /// </summary>
    /// <param name="_args">
    /// <c>XppPrePostArgs</c> parameter.
    /// </param>

    public static void parmLedgerPostingTypeHandler_BR(XppPrePostArgs _args)
    {
        AccJourRuleSaleOfProductExtendedPrice accountingRule = _args.getThis();

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        _args.setReturnValue(accountingRule.postParmLedgerPostingType_BR(_args.getReturnValue()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingTypeHandler_IN</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AccJourRuleSaleOfProductExtendedPrice), methodStr(AccJourRuleSaleOfProductExtendedPrice, parmLedgerPostingType))]
    /// <summary>
    /// Post event handler for parmLedgerPostingType method.
    /// </summary>
    /// <param name="_args">
    /// <c>XppPrePostArgs</c> parameter.
    /// </param>
    public static void parmLedgerPostingTypeHandler_IN(XppPrePostArgs _args)
    {
        AccJourRuleSaleOfProductExtendedPrice accountingRule = _args.getThis();

        if (!TaxParameters::isCustomsEnable_IN())
        {
            return;
        }

        _args.setReturnValue(accountingRule.postParmLedgerPostingType_IN(_args.getReturnValue()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postParmSideHandler_BR</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(AccJourRuleSaleOfProductExtendedPrice), methodStr(AccJourRuleSaleOfProductExtendedPrice, parmSide))]
    /// <summary>
    /// Post event handler for parmSideHandler method.
    /// </summary>
    /// <param name="_args">
    /// <c>XppPrePostArgs</c> parameter.
    /// </param>

    public static void postParmSideHandler_BR(XppPrePostArgs _args)
    {
        AccJourRuleSaleOfProductExtendedPrice AccJourRuleSaleOfProductExtendedPrice = _args.getThis();
        anyType returnValue;

        if (!BrazilParameters::isEnabled())
        {
            return;
        }

        returnValue = AccJourRuleSaleOfProductExtendedPrice.postParmSide_BR(_args.getReturnValue());

        _args.setReturnValue(returnValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>