<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanBaselineForecast</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanBaselineForecast</c> class is responsible for creating the forecast by delegating the forecast
///     generation to processor classes.
/// </summary>
class ReqDemPlanBaselineForecast
{
    ReqDemPlanAllocationKeyFilterTmp    allocationKeyFilterTable;
    ReqDemPlanTaskLoggerInterface       logger;
    List                                strategies;

    #ReqDemPlan

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the forecast.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    public void create(ReqDemPlanCreateForecastDataContract _dataContract)
    {
        ReqDemPlanDataProcessingHelper  dataHelper = new ReqDemPlanDataProcessingHelper();
        boolean reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled = ReqDemPlanCreateForecastService::isTransientSqlConnectionErrorRetryEnabled();
        int infologLineTry = infologLine();

        try
        {
            dataHelper.prepareAllocationKeyFilter(this.getAllocationKeysWithData(_dataContract.getFilterQuery()), allocationKeyFilterTable);
        
            var versionSymbol = enum2Symbol(enumNum(ReqDemPlanForecastVersion), ReqDemPlanForecastVersion::Forecasted);

            logger.startMonitoredTask(
                ReqDemPlanTaskCodes::CleanupForecastVersion + versionSymbol,
                strFmt("@DMP:TableCleanupForVersion", ReqDemPlanForecastVersion::Forecasted));

            ReqDemPlanForecast::cleanVersion(ReqDemPlanForecastVersion::Forecasted);

            logger.finishTask();

            this.executeStrategies(_dataContract);
        }
        #ReqDemPlanCatchRetryTransientSqlConnectionErrorFailLogTask(reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled, _dataContract, allocationKeyFilterTable, logger, infologLineTry)
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeStrategies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Runs all registered data processing classes to perform data generation.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    protected void executeStrategies(
        ReqDemPlanCreateForecastDataContract    _dataContract)
    {
        ListEnumerator                      strategiesEnumerator;
        ReqDemPlanForecastStrategy          strategy;

        strategiesEnumerator = strategies.getEnumerator();
        while (strategiesEnumerator.moveNext())
        {
            strategy = strategiesEnumerator.current();

            strategy.execute(allocationKeyFilterTable, _dataContract, ReqDemPlanForecastVersion::Forecasted, logger);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationKeysWithData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query that returns all allocation keys for which there is data
    ///     in the staging table.
    /// </summary>
    /// <param name="_allocKeysQuery">
    ///     The original query that returns the allocation keys.
    /// </param>
    /// <returns>
    ///     A query containing only allocation keys for which there is actual data.
    /// </returns>
    public Query getAllocationKeysWithData(Query _allocKeysQuery)
    {
        return ReqDemPlanBaselineForecast::getAllocationKeysWithDataStatic(_allocKeysQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationKeysWithDataStatic</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a query that returns all allocation keys for which there is data
    ///     in the staging table.
    /// </summary>
    /// <param name="_allocKeysQuery">
    ///     The original query that returns the allocation keys.
    /// </param>
    /// <returns>
    ///     A query containing only allocation keys for which there is actual data.
    /// </returns>
    internal static Query getAllocationKeysWithDataStatic(Query _allocKeysQuery)
    {
        QueryBuildDataSource    qbds = _allocKeysQuery.dataSourceTable(tableNum(ReqDemPlanPlanningGroupAllocKeys));

        qbds = qbds.addDataSource(tableNum(ReqDemPlanCubeFactView));
        qbds.addLink(fieldNum(ReqDemPlanPlanningGroupAllocKeys, DataAreaId),
                        fieldNum(ReqDemPlanCubeFactView, DataAreaId));

        qbds.addLink(fieldNum(ReqDemPlanPlanningGroupAllocKeys, AllocateId),
                    fieldNum(ReqDemPlanCubeFactView, AllocationKey));
        qbds.joinMode(JoinMode::ExistsJoin);

        return _allocKeysQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        // initialize logger instance
        this.parmLogger(null);

        strategies = ReqDemPlanExtensibilityHelper::construct().getInstancesWithAttribute(
            classStr(ReqDemPlanForecastStrategy), new ReqDemPlanForecastStrategyAttribute());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStrategies</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exposes all available forecast strategies.
    /// </summary>
    /// <returns>The list of forecast strategy objects.</returns>
    public List getStrategies()
    {
        return strategies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogger</Name>
				<Source><![CDATA[
    public ReqDemPlanTaskLoggerInterface parmLogger(ReqDemPlanTaskLoggerInterface _logger = logger)
    {
        if (!prmisDefault(_logger))
        {
            logger = _logger;

            if (logger == null)
            {
                // ensure logger instance is never null
                logger = ReqDemPlanDummyTaskLogger::construct();
            }
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanBaselineForecast construct()
    {
        return new ReqDemPlanBaselineForecast();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>