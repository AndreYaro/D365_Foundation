<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentSourceType_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgExportDocumentSourceType_CN</c> class is a data object that represents the basic information from the source invoice.
/// </summary>
class TaxIntgrExportDocumentSourceType_CN
{
    TaxIntgrExportDocumentSourceMap_CN          exportDocumentSourceMap;
    TaxIntgrExportDocSourcePostingMap_CN        exportDocumentSourcePostingMap;
    TaxIntgrExportDocSourceCharges_CN exportDocumentChargesSourceMap;

    CustAccount         invoiceAccount;
    CurrencyCode        currencyCode;
    AmountCur           transactionCurrencyInvoiceAmount;
    TaxCode             taxCode;
    InvoiceId           invoiceId;
    InvoiceDate         invoiceDate;
    CustBankAccountId   custBankAccount;
    RefRecId            vatInvoiceDescriptionRecId;
    int                 invoiceLineCount;

    Map                 taxCodeMap;
    Map chargesTaxCodeMap;
    ProjInvoiceProjId   projInvoiceProjId;
    SalesId             salesId;

    int miscChargesTotalLineCount;
    AmountCur miscChargesNetAmount;
    AmountCur miscChargesTaxAmount;
    Description descriptionCharges;
    TaxValue miscChargesTaxValue;
    TaxExemptTax miscChargesExemptTax;
    LineNum miscChargesLineNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRetrieveTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the retrieving of the tax code.
    /// </summary>
    protected void doRetrieveTaxCode()
    {
        boolean isTaxIntgrExportDocumentMultiTaxFeatureEnabled = FeatureStateProvider::isFeatureEnabled(TaxIntgrExportDocumentMultiTaxFeature::instance());

        if (isTaxIntgrExportDocumentMultiTaxFeatureEnabled && !TaxProfileTable_CN::findByTaxCode(''))
        {
            QueryRun anyTaxTransWithProfileQueryRun = new QueryRun(this.getAnyTaxTransQuery(true));

            if (!anyTaxTransWithProfileQueryRun.next())
            {
                QueryRun anyTaxTransQueryRun = new QueryRun(this.getAnyTaxTransQuery(false));

                if (anyTaxTransQueryRun.next())
                {
                    throw Error("@TaxIntgr:ThereIsNoValidTaxProfilers");
                }
            }
        }

        QueryRun queryRunTaxCode = new QueryRun(this.getTaxCodeQuery(!isTaxIntgrExportDocumentMultiTaxFeatureEnabled));

        while (queryRunTaxCode.next())
        {
            TaxTrans taxTrans = queryRunTaxCode.get(tableNum(TaxTrans));
            taxCodeMap.insert(taxTrans.TaxCode, taxTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllChargesTaxCodeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map containing all tax codes.
    /// </summary>
    /// <returns>
    /// The tax code map.
    /// </returns>
    public Map getAllChargesTaxCodeMap()
    {
        return chargesTaxCodeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTaxCodeMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the map containing all tax codes.
    /// </summary>
    /// <returns>
    /// The tax code map.
    /// </returns>
    public Map getAllTaxCodeMap()
    {
        return taxCodeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax registration.
    /// </summary>
    /// <returns>
    /// The tax registration.
    /// </returns>
    public TaxRegistration getTaxRegistration()
    {
        CompanyInfoExtension_CN     companyInfoExtension;

        companyInfoExtension = CompanyInfoExtension_CN::findByCompany(CompanyInfo::current());
        return TaxRegistration::getTaxRegistrationFromCust(this.parmInvoiceAccount(), this.parmInvoiceDate(), companyInfoExtension.TaxRegistrationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance. All attribute value is initialized.
    /// </summary>
    /// <remarks>
    /// Must be callsed before an instance can be used.
    /// </remarks>
    protected void initialize()
    {
        this.initializeProperty();
        this.retrieveMiscChargesTaxAmount();
        this.initializePostingProperty();

        this.retrieveTaxCode();
        this.retrieveChargesTaxCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePostingProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the property from posting parameter.
    /// </summary>
    protected void initializePostingProperty()
    {
        custBankAccount             = exportDocumentSourcePostingMap.TaxIntgrExportDocSourcePostingMap_CN::getCustBankAccountId();
        vatInvoiceDescriptionRecId  = exportDocumentSourcePostingMap.TaxIntgrExportDocSourcePostingMap_CN::getVATInvoiceDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the property.
    /// </summary>
    protected void initializeProperty()
    {
        invoiceAccount      = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getInvoiceAccount();
        currencyCode        = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getCurrencyCode();
        //the transaction currency must be the accounting currency
        transactionCurrencyInvoiceAmount = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getTransactionCurrencyInvoiceAmount();
        invoiceId           = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getInvoiceId();
        InvoiceDate         = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getInvoiceDate();
        invoiceLineCount    = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getExportDocumentLineSourceCount();
        projInvoiceProjId   = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getProjInvoiceProjId();
        salesId             = exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getSalesOrderId();
        TaxIntgrExportDocSourceChargesMap_CN taxIntgrExportDocSourceChargesMap = exportDocumentChargesSourceMap;
        descriptionCharges = taxIntgrExportDocSourceChargesMap.DescriptionCharges;
        miscChargesTotalLineCount = this.retrieveChargesLineCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        taxCodeMap = new Map(Types::String, Types::Integer);
        chargesTaxCodeMap = new Map (Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccount</Name>
				<Source><![CDATA[
    public CustBankAccountId parmCustBankAccount(CustBankAccountId _custBankAccount = custBankAccount)
    {
        custBankAccount = _custBankAccount;

        return custBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescriptionCharges</Name>
				<Source><![CDATA[
    public Description parmDescriptionCharges(Description _descriptionCharges = descriptionCharges)
    {
        descriptionCharges = _descriptionCharges;
        
        return descriptionCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSourceChargesMap</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocSourceCharges_CN parmExportDocumentSourceChargesMap(TaxIntgrExportDocSourceCharges_CN _exportDocumentSourceChargesMap = exportDocumentChargesSourceMap)
    {
        exportDocumentChargesSourceMap = _exportDocumentSourceChargesMap;
        
        return exportDocumentChargesSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSourceMap</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocumentSourceMap_CN parmExportDocumentSourceMap(TaxIntgrExportDocumentSourceMap_CN _exportDocumentSourceMap = exportDocumentSourceMap)
    {
        exportDocumentSourceMap = _exportDocumentSourceMap;

        return exportDocumentSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSourcePostingMap</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocSourcePostingMap_CN parmExportDocumentSourcePostingMap(TaxIntgrExportDocSourcePostingMap_CN _exportDocumentSourcePostingMap = exportDocumentSourcePostingMap)
    {
        exportDocumentSourcePostingMap = _exportDocumentSourcePostingMap;

        return exportDocumentSourcePostingMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
    public CustAccount parmInvoiceAccount(CustAccount _invoiceAccount = invoiceAccount)
    {
        invoiceAccount = _invoiceAccount;

        return invoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    public InvoiceDate parmInvoiceDate(InvoiceDate _invoiceDate = invoiceDate)
    {
        invoiceDate = _invoiceDate;

        return invoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesLineNum</Name>
				<Source><![CDATA[
    public LineNum parmMiscChargesLineNum(LineNum _miscChargesLineNum = MiscChargesLineNum)
    {
        miscChargesLineNum = _miscChargesLineNum;
        
        return miscChargesLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesNetAmount</Name>
				<Source><![CDATA[
    public AmountCur parmMiscChargesNetAmount(AmountCur _miscChargesNetAmount = miscChargesNetAmount)
    {
        miscChargesNetAmount = _miscChargesNetAmount;
        
        return miscChargesNetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesTaxAmount</Name>
				<Source><![CDATA[
    public AmountCur parmMiscChargesTaxAmount(AmountCur _miscChargesTaxAmount = miscChargesTaxAmount)
    {
        miscChargesTaxAmount = _miscChargesTaxAmount;
        
        return miscChargesTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesTaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmMiscChargesTaxValue(TaxValue _miscChargestaxValue = miscChargesTaxValue)
    {
        miscChargesTaxValue = _miscChargestaxValue;
        
        return miscChargesTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesExemptTax</Name>
				<Source><![CDATA[
    public TaxExemptTax parmMiscChargesExemptTax(TaxExemptTax _miscChargesExemptTax = miscChargesExemptTax)
    {
        miscChargesExemptTax = _miscChargesExemptTax;
        
        return miscChargesExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesTotalLineCount</Name>
				<Source><![CDATA[
    public int parmMiscChargesTotalLineCount(int _miscChargesTotalLineCount = miscChargesTotalLineCount)
    {
        miscChargesTotalLineCount = _miscChargesTotalLineCount;
        
        return miscChargesTotalLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmInvoiceId(InvoiceId _invoiceId = invoiceId)
    {
        invoiceId = _invoiceId;

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineCount</Name>
				<Source><![CDATA[
    public int parmInvoiceLineCount(int _invoiceLineCount = invoiceLineCount)
    {
        invoiceLineCount = _invoiceLineCount;

        return invoiceLineCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmProjInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId = projInvoiceProjId)
    {
        projInvoiceProjId = _projInvoiceProjId;

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    public SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;

        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxCode</Name>
				<Source><![CDATA[
    public TaxCode parmTaxCode(TaxCode _taxCode = taxCode)
    {
        taxCode = _taxCode;
        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyInvoiceAmount</Name>
				<Source><![CDATA[
    public Amount parmTransactionCurrencyInvoiceAmount(Amount _transactionCurrencyInvoiceAmount = transactionCurrencyInvoiceAmount)
    {
        transactionCurrencyInvoiceAmount = _transactionCurrencyInvoiceAmount;

        return transactionCurrencyInvoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatInvoiceDescriptionRecId</Name>
				<Source><![CDATA[
    public RefrecId parmVatInvoiceDescriptionRecId(RefrecId _vatInvoiceDescriptionRecId = vatInvoiceDescriptionRecId)
    {
        vatInvoiceDescriptionRecId = _vatInvoiceDescriptionRecId;

        return vatInvoiceDescriptionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveChargesLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Misc. Charges total Line count for both header and line.
    /// </summary>
    /// <returns>
    /// The Misc. charges line count.
    /// </returns>
    protected int retrieveChargesLineCount()
    {
        MarkupTrans markupTrans;
    
        select firstonly count(RecId) from markupTrans
            where markupTrans.Voucher == exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getVoucher()
                && markupTrans.TransDate == exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getInvoiceDate();
    
        return any2int(markupTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveChargesTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the retrieving of the charges tax code.
    /// </summary>
    protected void retrieveChargesTaxCode()
    {
        TaxTrans taxTrans;
        TaxProfileTable_CN taxProfileTableLocal;
    
        while select count(RecId) from taxTrans
            group by taxTrans.TaxCode
            where taxTrans.Voucher == exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getVoucher()
               && taxTrans.TransDate == exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getInvoiceDate()
               && taxTrans.SourceTableId == tableNum(MarkupTrans)
        exists join taxProfileTableLocal
            where taxProfileTableLocal.TaxCode == taxTrans.TaxCode
        {
            chargesTaxCodeMap.insert(taxTrans.TaxCode, taxTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMiscChargesTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Misc. charges tax amount and net amount.
    /// </summary>
    protected void retrieveMiscChargesTaxAmount()
    {
        TaxIntgrExportDocSourceChargesMap_CN taxIntgrExportDocSourceChargesMap = exportDocumentChargesSourceMap;
        int displaySign = Tax::changeDisplaySign(taxIntgrExportDocSourceChargesMap.TaxDirection);
        miscChargesTaxValue = taxIntgrExportDocSourceChargesMap.TaxValue;
        miscChargesExemptTax = taxIntgrExportDocSourceChargesMap.ExemptTax;
        miscChargesNetAmount = taxIntgrExportDocSourceChargesMap.SourceBaseAmountCur * displaySign;
        miscChargesTaxAmount = taxIntgrExportDocSourceChargesMap.SourceRegulateAmountCur * displaySign;
        miscChargesLineNum = taxIntgrExportDocSourceChargesMap.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax code from the invoice.
    /// </summary>
    protected void retrieveTaxCode()
    {
        MapEnumerator   mapEnumerator;
        const int SingleTax = 1;

        this.doRetrieveTaxCode();

        if (taxCodeMap.elements() == SingleTax)
        {
            mapEnumerator = taxCodeMap.getEnumerator();
            mapEnumerator.moveNext();

            if (TaxProfileTable_CN::findByTaxCode(mapEnumerator.current()))
            {
                taxcode = mapEnumerator.current();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntgExportDocumentSourceType_CN</c> instance for the source invoice.
    /// </summary>
    /// <param name="_exportDocumentSourceMap">
    /// An export document source map.
    /// </param>
    /// <param name="_exportDocumentSourcePostingMap">
    /// An export document source posting map.
    /// </param>
    /// <param name="_exportDocumentSourceChargesMap">
    /// An export document source charges map.
    /// </param>
    /// <returns>
    /// An <c>TaxIntgExportDocumentSourceType_CN</c> instance.
    /// </returns>
    public static TaxIntgrExportDocumentSourceType_CN construct (
        TaxIntgrExportDocumentSourceMap_CN          _exportDocumentSourceMap,
        TaxIntgrExportDocSourcePostingMap_CN        _exportDocumentSourcePostingMap,
        TaxIntgrExportDocSourceCharges_CN           _exportDocumentSourceChargesMap = null)
    {
        TaxIntgrExportDocumentSourceType_CN exportDocumentSourceType;
        exportDocumentSourceType = new TaxIntgrExportDocumentSourceType_CN();
        exportDocumentSourceType.parmExportDocumentSourceMap(_exportDocumentSourceMap);
        exportDocumentSourceType.parmExportDocumentSourcePostingMap(_exportDocumentSourcePostingMap);
        exportDocumentSourceType.parmExportDocumentSourceChargesMap(_exportDocumentSourceChargesMap);
        exportDocumentSourceType.initialize();

        return exportDocumentSourceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeQuery</Name>
				<Source><![CDATA[
    private Query getTaxCodeQuery(boolean _withProfile)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(TaxTrans));

        qbds.addSelectionField(fieldNum(TaxTrans, RecId), SelectionField::Count);

        qbds.addGroupByField(fieldNum(TaxTrans, TaxCode));

        this.addTaxTransRanges(qbds);

        if (_withProfile)
        {
            this.addTaxProfileTable(qbds);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnyTaxTransQuery</Name>
				<Source><![CDATA[
    private Query getAnyTaxTransQuery(boolean _withProfile)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(TaxTrans));
        qbds.firstOnly(true);
        qbds.addSelectionField(fieldNum(TaxTrans, TableId));

        this.addTaxTransRanges(qbds);

        if (_withProfile)
        {
            this.addTaxProfileTable(qbds);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxTransRanges</Name>
				<Source><![CDATA[
    private void addTaxTransRanges(QueryBuildDataSource _qbds)
    {
        _qbds.addRange(fieldNum(TaxTrans, Voucher)).value(queryValue(exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getVoucher()));
        _qbds.addRange(fieldNum(TaxTrans, TransDate)).value(queryValue(exportDocumentSourceMap.TaxIntgrExportDocumentSourceMap_CN::getInvoiceDate()));
        _qbds.addRange(fieldNum(TaxTrans, SourceTableId)).value(SysQuery::valueNot(tableNum(MarkupTrans)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxProfileTable</Name>
				<Source><![CDATA[
    private void addTaxProfileTable(QueryBuildDataSource _qbds)
    {
        QueryBuildDataSource qbdsTaxProfile = _qbds.addDataSource(tableNum(TaxProfileTable_CN));
        qbdsTaxProfile.joinMode(JoinMode::ExistsJoin);
        qbdsTaxProfile.addLink(fieldNum(TaxTrans, TaxCode), fieldNum(TaxProfileTable_CN, TaxCode));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>