<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceSettlementController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is SSRS report controller.
/// </summary>
public class CustVendInvoiceSettlementController_IT extends SrsReportRunController implements BatchRetryable
{
    public CustVendInvoiceSettlementBuild_IT custVendInvoiceSettlementBuild;
    public CustVendACType custVend;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>custVendInvoiceSettlementBuild</c> object.
    /// </summary>
    private void initFromArgs(Args _args)
    {
        custVendInvoiceSettlementBuild = _args.caller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides ability to modify the report contract before dialog is shown to user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        CustVendInvoiceSettlementContract_IT dataContract = this.parmReportContract().parmRdpContract();
        dataContract.parmFromDate(custVendInvoiceSettlementBuild.parmFromDate());
        dataContract.parmToDate(custVendInvoiceSettlementBuild.parmToDate());
        dataContract.parmInvoiceId(custVendInvoiceSettlementBuild.parmInvoiceId());
        dataContract.parmVoucher(custVendInvoiceSettlementBuild.parmInvoiceVoucher());
        dataContract.parmCustVend(custVendInvoiceSettlementBuild.parmModule() == ModuleCustVend::Cust ? CustVendACType::Cust : CustVendACType::Vend);
        dataContract.parmCustVendAccount(custVendInvoiceSettlementBuild.parmCustVendAccount());
        dataContract.parmShowOpenOnly(custVendInvoiceSettlementBuild.parmOpenTransOnly());
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>CustVendInvoiceSettlementController_IT</c> object.
    /// </summary>
    public static CustVendInvoiceSettlementController_IT construct(Args _args)
    {
        if (!_args || !_args.caller())
        {
            throw(error(strfmt("@SYS29104", classstr(CustVendInvoiceSettlementController_IT))));
        }

        CustVendInvoiceSettlementController_IT controller = new CustVendInvoiceSettlementController_IT();
        controller.parmArgs(_args);
        controller.initFromArgs(_args);
        controller.parmReportName(ssrsReportStr(CustVendInvoiceSettlementReport_IT, Report));
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    ///     The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        CustVendInvoiceSettlementController_IT controller = CustVendInvoiceSettlementController_IT::construct(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>