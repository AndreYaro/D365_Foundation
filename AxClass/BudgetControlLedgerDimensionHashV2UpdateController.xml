<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlLedgerDimensionHashV2UpdateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlLedgerDimensionHashV2UpdateProvider</c> class is an automatic budget control data maintenance scenario 
/// that finds all budget control tracking details that require an update to the budget control ledger dimension for hash changes.
/// </summary>
internal final class BudgetControlLedgerDimensionHashV2UpdateController extends SysOperationServiceController
{
    private const int MaxRetryCount = 5;

    private const ClassName ProviderClassName = classStr(BudgetControlLedgerDimensionHashV2UpdateController);
    private const MethodName ProviderMethodName = methodStr(BudgetControlLedgerDimensionHashV2UpdateController, processUpdate);
    private const Description255 ProviderName = "@Budget:DataMaintenanceLedgerDimensionHashControllerName";
    private const Description255 ProviderDescription = "@Budget:DataMaintenanceLedgerDimensionHashControllerDescription";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return ProviderName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedule an update operation for the budget control ledger dimension hash changes.
    /// </summary>
    internal static void scheduleUpdate()
    {
        if (!BudgetControlLedgerDimensionHashV2UpdateController::hasBeenScheduled())
        {
            var controller = new BudgetControlLedgerDimensionHashV2UpdateController(
                ProviderClassName, 
                ProviderMethodName, 
                SysOperationExecutionMode::ScheduledBatch);

            controller.parmShowDialog(false);
            controller.startOperation();

            BudgetControlLedgerDimensionHashV2UpdateController::logScheduledExecution();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenScheduled</Name>
				<Source><![CDATA[
    private static boolean hasBeenScheduled()
    {
        return (select firstonly RecId from ReleaseUpdateScriptsLog
                    where ReleaseUpdateScriptsLog.ClassName == ProviderClassName
                    && ReleaseUpdateScriptsLog.MethodName == ProviderMethodName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logScheduledExecution</Name>
				<Source><![CDATA[
    private static void logScheduledExecution()
    {
        try
        {
            if (!BudgetControlLedgerDimensionHashV2UpdateController::hasBeenScheduled())
            {
                ReleaseUpdateScriptsLog releaseUpdateScriptLog;
                releaseUpdateScriptLog.ClassName = ProviderClassName;
                releaseUpdateScriptLog.MethodName = ProviderMethodName;
                releaseUpdateScriptLog.insert();
            }
            
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() < MaxRetryCount)
            {
                retry;
            }
        }
                
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUpdate</Name>
				<Source><![CDATA[
    internal void processUpdate()
    {
        BudgetControlConfiguration controlConfiguration;

        while select PrimaryLedger, RecId from controlConfiguration
            where controlConfiguration.IsActive == NoYes::Yes
        {
            changecompany(CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(controlConfiguration.PrimaryLedger)))
            {
                // Determine the budget control ledger dimension references that have only changes to the hash.
                var configurationSynchronize = BudgetControlDimensionConfigurationSynchronize::constructForHashChange();
                
                configurationSynchronize.determineDimensionHashDifferences();

                if (configurationSynchronize.synchronizeChangesDetected)
                {
                    ttsbegin;
                    
                    // Log each update that will be made to budget control data maintenance tracking.
                    var dataMaintenanceRecId = this.createDataMaintenanceTracking(configurationSynchronize.budgetControlLedgerDimensionTmp);
                
                    // Update the budget control ledger dimension references that have only changes to the hash.
                    configurationSynchronize.updateAllControlLedgerDimensionReferences();

                    // Call create rule ledger dimension associations for all the new hash generated budget control ledger dimensions.
                    BudgetControlConfigurationManager::createBudgetControlRuleLedgerDimensions(controlConfiguration.RecId);

                    // Call create group ledger dimension associations for all the new hash generated budget control ledger dimensions.
                    BudgetControlConfigurationManager::createBudgetGroupLedgerDimensions(controlConfiguration.RecId);
                    
                    BudgetControlDataMaintenance::setProcessGroupStatus(dataMaintenanceRecId, BudgetControlDataMaintenanceStatus::Completed);

                    ttscommit;

                    // Rebuild the budget source summary balances for the primary ledger to reference the new hash budget control ledger dimensions.
                    // The rebuild is executed in a seperate user connection and needs to be processed after the hash update commit.
                    BudgetControlLedgerDimensionMaintenanceProvider::reprocessSummaryBalance();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataMaintenanceTracking</Name>
				<Source><![CDATA[
    private BudgetControlDataMaintenanceRecId createDataMaintenanceTracking(BudgetControlLedgerDimensionTmp _controlLedgerDimensionTmp)
    {
        var dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();
        var trackingIsSelected = NoYes::Yes;
        var trackingStatus = BudgetSourceTrackingStatus::Confirmed;
        var processCheckResult = BudgetCheckResult::Passed;
        var processStatus = BudgetControlDataMaintenanceStatus::Completed;
        int undefinedIntegrator = -1;

        ttsbegin;

        var dataMaintenanceRecId = this.createDataMaintenance();

        BudgetControlLedgerDimensionTmp controlLedgerDimensionTmp;
        controlLedgerDimensionTmp.linkPhysicalTableInstance(_controlLedgerDimensionTmp);

        BudgetControlDataMaintenanceTracking controlDataMaintenanceTracking;

        insert_recordset controlDataMaintenanceTracking (
                BudgetControlDataMaintenance, DataMaintenanceProvider, DataMaintenanceProviderName, 
                Selected, TrackingStatus, TrackingControlLedgerDimension, ReplacementControlLedgerDimension,
                TrackingSourceIntegrator, OriginatingTrackingSourceIntegrator, ProcessCheckResult, ProcessStatus, DataMaintenanceProviderDetectionDateTime)
            select dataMaintenanceRecId, ProviderClassName, ProviderName,
                trackingIsSelected, trackingStatus, BudgetControlLedgerDimension, ReplacementControlLedgerDimension, 
                undefinedIntegrator, undefinedIntegrator, processCheckResult, processStatus, dataMaintenanceDetectionDateTime
                from controlLedgerDimensionTmp;

        ttscommit;

        return dataMaintenanceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDataMaintenance</Name>
				<Source><![CDATA[
    private BudgetControlDataMaintenanceRecId createDataMaintenance()
    {
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        try
        {
            ttsbegin;

            budgetControlDataMaintenance.initValue();
            budgetControlDataMaintenance.Description = ProviderDescription;
            budgetControlDataMaintenance.DocumentFromDate = this.getTrackingFromDate();
            budgetControlDataMaintenance.DocumentToDate = this.getTrackingToDate();
            budgetControlDataMaintenance.insert();

            // Deliberately setting status to Executing to provide accurate start time.
            BudgetControlDataMaintenance::setProcessGroupStatus(budgetControlDataMaintenance.RecId, BudgetControlDataMaintenanceStatus::Executing);
            
            ttscommit;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (xSession::currentRetryCount() < MaxRetryCount)
            {
                retry;
            }
        }

        return budgetControlDataMaintenance.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrackingFromDate</Name>
				<Source><![CDATA[
    private TransDate getTrackingFromDate()
    {
        BudgetSourceTracking sourceTracking;
        BudgetSourceTrackingDetail sourceTrackingDetail;

        select minof(TrackingDate) from sourceTracking
            exists join sourceTrackingDetail
                where sourceTrackingDetail.BudgetSourceTracking == sourceTracking.RecId
                    && sourceTrackingDetail.PrimaryLedger == Ledger::current();

        return sourceTracking.TrackingDate; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTrackingToDate</Name>
				<Source><![CDATA[
    private TransDate getTrackingToDate()
    {
        BudgetSourceTracking sourceTracking;
        BudgetSourceTrackingDetail sourceTrackingDetail;

        select maxof(TrackingDate) from sourceTracking
            exists join sourceTrackingDetail
                where sourceTrackingDetail.BudgetSourceTracking == sourceTracking.RecId
                    && sourceTrackingDetail.PrimaryLedger == Ledger::current();

        return sourceTracking.TrackingDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>