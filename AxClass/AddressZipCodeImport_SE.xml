<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressZipCodeImport_SE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AddressZipCodeImport_SE extends AddressZipCodeImport
{
    private LogisticsAddressZipCodeId zipCodeId;
    private LogisticsAddressZipCodeId zipCodeTrim;
    private LogisticsAddressZipCode deleteZipCode;
    private LogisticsAddressCityName city;
    private boolean inclStreet;

    private const str delimiterEnter = '\r\n';
    private const int perCallNumber = 50;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>readInclStreet</Name>
				<Source><![CDATA[
    private void readInclStreet()
    {
        str 154 zipLine;

        StreetName streetName;
        StreetNum fromNum;
        StreetNum toNum;

        container con;
        int no = 0;

        while (importFile.status() == IO_Status::Ok)
        {
            [zipLine] = importFile.read();

            zipCodeId = subStr(zipLine, 75, 5);
            zipCodeTrim = strLRTrim(zipCodeId);
            city = strLwr(subStr(zipLine, 80, 20));
            city = strPoke(city, strUpr(subStr(city, 1, 1)), 1);
            streetName = strLwr(subStr(zipLine, 3, 40));
            streetName = strPoke(streetName, strUpr(subStr(streetName, 1, 1)), 1);
            fromNum = str2int(subStr(zipLine, 43, 10));
            toNum = str2int(subStr(zipLine, 59, 10));

            if (zipCodeTrim && zipCodeTrim != '0')
            {
                con += [[zipCodeTrim, city, streetName, fromNum, toNum]];
                no++;
                if (no == perCallNumber)
                {
                    this.processData(con, logisticsAddressCountryRegion.CountryRegionId);
                    no = 0;
                    con = conNull();
                }
            }
        }

        if (con != conNull())
        {
            this.processData(con, logisticsAddressCountryRegion.CountryRegionId);
            no = 0;
            con = conNull();
        }

        this.updateZipCodes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readExclStreet</Name>
				<Source><![CDATA[
    private void readExclStreet()
    {
        container con;
        int no = 0;
        str 32 zipLine;

        while (importFile.status() == IO_Status::Ok)
        {
            [zipLine] = importFile.read();

            zipCodeId = subStr(zipLine, 1, 5);
            zipCodeTrim = strLRTrim(zipCodeId);
            city = strLwr(subStr(zipLine, 6, 20));
            city = strPoke(city, strUpr(subStr(city, 1, 1)), 1);

            if (zipCodeTrim && zipCodeTrim != '0')
            {
                con += [[zipCodeTrim, city]];
                no++;
                if (no == perCallNumber)
                {
                    this.processData(con, logisticsAddressCountryRegion.CountryRegionId);
                    no = 0;
                    con = conNull();
                }
            }
        }

        if (con != conNull())
        {
            this.processData(con, logisticsAddressCountryRegion.CountryRegionId);
            no = 0;
            con = conNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    private void processData(container _con, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressZipCode zipCode;
        StreetName streetName;
        StreetNum fromNum;
        StreetNum toNum;

        if (inclStreet)
        {
            for (int i = 1; i <= conLen(_con); i++)
            {
                [zipCodeTrim, city, streetName, fromNum, toNum] = conPeek(_con, i);

                RecId cityId = this.createCity(city, _countryRegionId);

                if (!this.existZipCodeForStreet(zipCodeTrim, city, _countryRegionId, streetName, fromNum, toNum))
                {
                    zipCode.ZipCode = zipCodeTrim;
                    zipCode.City = city;
                    zipCode.CityAlias = name2Alias(city);
                    zipCode.CityRecId = cityId;
                    zipCode.CountryRegionId = _countryRegionId;
                    zipCode.StreetName = streetName;
                    zipCode.FromNum = fromNum;
                    zipCode.ToNum = toNum;
                    zipCode.EvenOdd = AllEvenOdd::All;
                    zipCode.insert();
                }
            }
        }
        else
        {
            for (int i = 1; i <= conLen(_con); i++)
            {
                [zipCodeTrim, city] = conPeek(_con,i);

                RecId cityId = this.createCity(city, _countryRegionId);

                if (!LogisticsAddressZipCode::existZipCodeCityCountryRegion(zipCodeTrim, city, _countryRegionId))
                {
                    zipCode.ZipCode = zipCodeTrim;
                    zipCode.City = city;
                    zipCode.CityAlias = name2Alias(city);
                    zipCode.CityRecId = cityId;
                    zipCode.CountryRegionId = _countryRegionId;
                    zipCode.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCity</Name>
				<Source><![CDATA[
    private RecId createCity(LogisticsAddressCityName _cityName, LogisticsAddressCountryRegionId _countryRegionId)
    {
        LogisticsAddressCity logisticsAddressCity;

        select firstonly RecId from logisticsAddressCity
            where logisticsAddressCity.CountryRegionId == _countryRegionId
                && logisticsAddressCity.Name == _cityName;

        if (!logisticsAddressCity)
        {
            logisticsAddressCity.Name = _cityName;
            logisticsAddressCity.CityKey = _cityName;
            logisticsAddressCity.CountryRegionId = _countryRegionId;
            logisticsAddressCity.insert();
        }

        return logisticsAddressCity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existZipCodeForStreet</Name>
				<Source><![CDATA[
    private boolean existZipCodeForStreet(
        LogisticsAddressZipCodeId _zipCode,
        LogisticsAddressCityName _city,
        LogisticsAddressCountryRegionId _countryRegionId,
        StreetName _streetName,
        StreetNum _fromNum,
        StreetNum _toNum)
    {
            return _zipCode && _city && _countryRegionId && _streetName &&
            (select RecId from logisticsAddressZipCode
                where logisticsAddressZipCode.ZipCode == _zipCode
                    && logisticsAddressZipCode.City == _city
                    && logisticsAddressZipCode.CountryRegionId == _countryRegionId
                    && logisticsAddressZipCode.StreetName == _streetName
                    && (!_fromNum || logisticsAddressZipCode.FromNum == _fromNum)
                    && (!_toNum || logisticsAddressZipCode.ToNum == _toNum)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateZipCodes</Name>
				<Source><![CDATA[
    private void updateZipCodes()
    {
        LogisticsAddressZipCode zipCode;
        LogisticsAddressZipCode oldZipCode;
        LogisticsAddressCityName oldCity = '';
        StreetName oldStreetName = '';
        StreetNum oldFromNum = 0;
        StreetNum oldToNum = 0;
        RecId oldRecId = 0;
        boolean firstRecord = true;

        while select forupdate zipCode
              order City, StreetName, FromNum
              where zipCode.FromNum != 0 && zipCode.ToNum != 0
        {
            if (firstRecord)
            {
                firstRecord = false;
            }
            else if (strLRTrim(zipCode.City) == strLRTrim(oldCity)
                    && strLRTrim(zipCode.StreetName) == strLRTrim(oldStreetName))
            {
                if (zipCode.FromNum > oldFromNum && zipCode.FromNum < oldToNum)
                {
                    if ((oldFromNum mod 2 != 0) && (oldToNum mod 2 != 0))
                    {
                        select forupdate firstonly oldZipCode where oldZipCode.RecId == oldRecId;

                        oldZipCode.EvenOdd = AllEvenOdd::Odd;
                        oldZipCode.update();

                        zipCode.EvenOdd = AllEvenOdd::Even;
                        zipCode.update();
                    }
                    else if ((oldFromNum mod 2 == 0) && (oldToNum mod 2 == 0))
                    {
                        select forupdate firstonly oldZipCode where oldZipCode.RecId == oldRecId;

                        oldZipCode.EvenOdd = AllEvenOdd::Even;
                        oldZipCode.update();

                        zipCode.EvenOdd = AllEvenOdd::Odd;
                        zipCode.update();
                    }
                }
            }

            oldCity = zipCode.City;
            oldStreetName = zipCode.StreetName;
            oldFromNum = zipCode.FromNum;
            oldToNum = zipCode.ToNum;
            oldRecId = zipCode.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        const str digits = '0123456789';
        str 121 testZipLine;
        str 5 testZipCodeId;
        int testCounter;

        this.openFile();

        [testZipLine] = importFile.read();

        testZipCodeId = subStr(testZipLine, 1, 5);
        testZipCodeId = strKeep(testZipCodeId, digits);
        testZipCodeId = strLRTrim(testZipCodeId);
        testCounter = strLen(testZipCodeId);

        if (testCounter == 5)
        {
            inclStreet = false;
        }
        else
        {
            testZipCodeId = subStr(testZipLine, 75, 5);
            testZipCodeId = strKeep(testZipCodeId, digits);
            testZipCodeId = strLRTrim(testZipCodeId);
            testCounter = strLen(testZipCodeId);

            if (testCounter == 5)
            {
                inclStreet = true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected void openFile()
    {
        // ISO 8859-1 Latin 1; Western European (ISO)
        importFile = TextStreamIo::constructForRead(fileStream, 28591);
        importFile.inRecordDelimiter(delimiterEnter);
        importFile.inFieldDelimiter(delimiterEnter);

        if (!importFile)
        {
            throw error(strFmt("@SYS18678", filename));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    protected void readFile()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSE00001, funcName());

        if (this.delete())
        {
            AddressZipCodeImport::deleteAllCountryRegionZipCodes(logisticsAddressCountryRegion.CountryRegionId);
        }

        if (this.validate())
        {
            this.openFile();

            if (inclStreet)
            {
                this.readInclStreet();
            }
            else
            {
                this.readExclStreet();
            }

            info("@SYS112337");
            processOK = true;
        }
        else
        {
            error("@SYS98433");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>