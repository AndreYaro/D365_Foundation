<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanyMarkup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InterCompanyMarkup
{
    MarkupTrans                 markupTrans;
    MarkupAmount                markupAmount;
    InterCompanyMarkupAction    markupAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkMarkupCode</Name>
				<Source><![CDATA[
    boolean checkMarkupCode(MarkupTrans markupTransRef)
    {
        boolean ret;

        changecompany(markupTransRef.company())
        {
            ret = MarkupTable::exist(markupTransRef.ModuleType,markupTransRef.MarkupCode);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFrom</Name>
				<Source><![CDATA[
    void copyFrom(boolean _insert = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInclTax</Name>
				<Source><![CDATA[
    protected boolean isInclTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInterCompanyTradingValueMap</Name>
				<Source><![CDATA[
    public InterCompanyTradingValueMap fromInterCompanyTradingValueMap()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupUseValue</Name>
				<Source><![CDATA[
    boolean markupUseValue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupAction</Name>
				<Source><![CDATA[
    InterCompanyMarkupAction parmMarkupAction(InterCompanyMarkupAction _markupAction = markupAction)
    {
        markupAction = _markupAction;

        return markupAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupAmount</Name>
				<Source><![CDATA[
    MarkupAmount parmMarkupAmount(MarkupAmount _markupAmount = markupAmount)
    {
        markupAmount = _markupAmount;

        return markupAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupTrans</Name>
				<Source><![CDATA[
    MarkupTrans parmMarkupTrans(MarkupTrans _markupTrans = markupTrans)
    {
        markupTrans = _markupTrans;

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run(boolean _insert = false)
    {
        MarkupTable markupTable = MarkupTable::find(markupTrans.ModuleType,markupTrans.MarkupCode);

        if (markupTable
            && (markupTable.CustType == MarkupType::CustVend || markupTable.VendType == MarkupType::CustVend))
        {
            this.copyFrom(_insert);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNum</Name>
				<Source><![CDATA[
    real setLineNum(MarkupTrans _markupTransRef)
    {
        MarkupTrans markupTransLinenum;
        real        ret;

        select firstonly LineNum from markupTransLinenum
            index hint TableRecIdIdx
            order by TransTableId,TransRecId,LineNum desc
            where markupTransLinenum.TransRecId   == _markupTransRef.TransRecId
              &&  markupTransLinenum.TransTableId == _markupTransRef.TransTableId;

        ret = markupTransLinenum.LineNum;
        ret++;

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransDerived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the charge for the derived sales order from the source order's charge
    /// </summary>
    /// <param name = "_markupTrans">
    /// The charge from the source order
    /// </param>
    /// <returns>
    /// The charge for the derived sales order
    /// </returns>
    MarkupTrans setMarkupTransDerived(MarkupTrans _markupTrans = markupTrans)
    {
        MarkupTrans markupTransRef;

        select firstonly forupdate markupTransRef
               index hint InterCompanyRefIdx
               where markupTransRef.InterCompanyCompanyId == _markupTrans.DataAreaId
               &&    markupTransRef.InterCompanyRefRecId  == _markupTrans.RecId
               &&   !markupTransRef.IsDeleted;

        return markupTransRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarkupTransDerived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the charge for the derived sales order from the source order's charge
    /// </summary>
    /// <param name = "_transRecId">
    /// The RecId of the source order.
    /// </param>
    /// <param name = "_markupTrans">
    /// The charge from the source order.
    /// </param>
    /// <returns>
    /// The charge for the derived sales order.
    /// </returns>
	protected MarkupTrans getMarkupTransDerived(MarkupTransRefRecId _transRecId, MarkupTrans _markupTrans = markupTrans)
    {
        MarkupTrans markupTransRef;

        select firstonly forupdate markupTransRef
            index hint InterCompanyRefIdx
            where markupTransRef.InterCompanyCompanyId == _markupTrans.DataAreaId
                && markupTransRef.InterCompanyRefRecId  == _markupTrans.RecId
                && markupTransRef.TransRecId == _transRecId
                && !markupTransRef.IsDeleted;

        return markupTransRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the charge on the source order from the derived order's charge
    /// </summary>
    /// <param name = "_markupTrans">
    /// The charge from the derived order
    /// </param>
    /// <returns>
    /// The charge for the source order
    /// </returns>
    MarkupTrans setMarkupTransSource(MarkupTrans _markupTrans = markupTrans)
    {
        MarkupTrans markupTransRef;

        if (_markupTrans.InterCompanyCompanyId)
        {
            changecompany(_markupTrans.InterCompanyCompanyId)
            {
                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                select firstonly forupdate markupTransRef
                       index hint recId
                       where markupTransRef.RecId == _markupTrans.InterCompanyRefRecId
                         && !markupTransRef.IsDeleted;
            }
        }

        return markupTransRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines markup module type based on a table ID.
    /// </summary>
    /// <param name="_refCommon">
    /// A table buffer to determine the module type for.
    /// </param>
    /// <returns>
    /// Markup module type.
    /// </returns>
    /// <remarks>
    /// The <c>ModuleInventCustVend</c> enum was replaced with a more specific enum for markup functionality, use the <c>MarkupModuleType</c> enum.
    /// </remarks>
    MarkupModuleType setModuleType(Common _refCommon)
    {
        MarkupModuleType ret;

        switch (_refCommon.TableId)
        {
            case tableNum(SalesTable):
                ret = MarkupModuleType::Cust;
                break;

            case tableNum(PurchTable):
                ret = MarkupModuleType::Vend;
                break;

            case tableNum(SalesLine):
                ret = MarkupModuleType::Cust;
                break;

            case tableNum(PurchLine):
                ret = MarkupModuleType::Vend;
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the intercompany <c>MarkupTrans</c> records.
    /// </summary>
    /// <param name="_moduleType">
    ///    The module for the new target <c>MarkupTrans</c> record
    /// </param>
    /// <param name="_markupTransRef">
    ///    The specified <c>MarkupTrans</c> record.
    /// </param>
    /// <param name="_markupTrans">
    ///    The source <c>MarkupTrans</c> record.
    /// </param>
    /// <param name="_updateRef">
    ///    A Boolean value that indicates whether to update the intercompany reference.
    /// </param>
    protected void synchronizeMarkupTrans(MarkupModuleType  _moduleType,
                                          MarkupTrans       _markupTransRef,
                                          MarkupTrans       _markupTrans,
                                          boolean           _updateRef)
    {
        AifEndpointActionValueMap   fromGateway;
        AifEndpointActionValueMap   toGateway;
        TradeInterCompanyConv       convMarkup;
        MarkupCode                  axMarkupCode;

        changecompany(_markupTrans.company())
        {
            setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

            fromGateway  = this.fromInterCompanyTradingValueMap();
            convMarkup   = TradeInterCompanyConv::construct();
            convMarkup.axMarkupCode(fromGateway, _markupTrans.ModuleType, _markupTrans.MarkupCode);
        }

        toGateway      = this.toInterCompanyTradingValueMap();
        axMarkupCode   = convMarkup.  axMarkupCode  (toGateway, _moduleType);

        _markupTransRef.MarkupCode                      = axMarkupCode;
        _markupTransRef.CurrencyCode                    = _markupTrans.CurrencyCode;
        _markupTransRef.MarkupCategory                  = _markupTrans.MarkupCategory;
        _markupTransRef.Value                           = _markupTrans.Value;
        _markupTransRef.InterCompanyMarkupUseValue      = this.markupUseValue();
        
        if (AutoChargesSetupLineLevelUnitOfMeasureFeature::instance().isEnabled())
        {
            _markupTransRef.SpecificUnitSymbol          = _markupTrans.SpecificUnitSymbol;
        }

        if (this.isInclTax())
        {
            _markupTransRef.InterCompanyMarkupValue = this.parmMarkupAmount() + _markupTrans.TaxAmount;
        }
        else
        {
            _markupTransRef.InterCompanyMarkupValue     = this.parmMarkupAmount();
        }

        if (_updateRef)
        {
            _markupTransRef.InterCompanyCompanyId       = _markupTrans.DataAreaId;
            _markupTransRef.InterCompanyRefRecId        = _markupTrans.RecId;
        }

        _markupTransRef.Keep = _markupTrans.Keep;
        _markupTransRef.modifiedField(fieldNum(MarkupTrans, MarkupCategory));

        _markupTransRef.InterCompanySkipUpdate          = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInterCompanyTradingValueMap</Name>
				<Source><![CDATA[
    public InterCompanyTradingValueMap toInterCompanyTradingValueMap()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeMarkupTrans</Name>
				<Source><![CDATA[
    MarkupTrans writeMarkupTrans(MarkupTrans    _markupTransRef,
                                 Common         _refCommon,
                                 boolean        _updateRef,
                                 MarkupTrans    _markupTrans = markupTrans,
                                 InvoiceId      _invoiceId   = "")
    {
        MarkupModuleType moduleType = this.setModuleType(_refCommon);

        switch (markupAction)
        {
            case InterCompanyMarkupAction::Calc:
                if (!_markupTransRef.RecId)
                {
                    _markupTransRef = null;

                    _markupTransRef.initFromCaller(_refCommon.TableId,_refCommon);
                    _markupTransRef.RecId = 0;

                    this.synchronizeMarkupTrans(moduleType, _markupTransRef, _markupTrans, _updateRef);

                    _markupTransRef.initFromMarkupTable(MarkupTable::find(_markupTransRef.ModuleType,_markupTransRef.MarkupCode));
                    _markupTransRef.LineNum = this.setLineNum(_markupTransRef);

                    if (!prmisDefault(_invoiceId))
                    {
                        _markupTransRef.InterCompanyInvoiceId       = _invoiceId;
                        _markupTransRef.MarkupCategory              = MarkupCategory::Fixed;
                        _markupTransRef.Keep                        = NoYes::No;
                    }

                    _markupTransRef.insert();

                    if (_updateRef)
                    {
                        _markupTrans.InterCompanyCompanyId          = _markupTransRef.DataAreaId;
                        _markupTrans.InterCompanyRefRecId           = _markupTransRef.RecId;
                    }
                    else
                    {
                        if (!_markupTrans.InterCompanyCompanyId
                        ||  !_markupTrans.InterCompanyRefRecId)
                        {
                            _markupTrans.InterCompanyCompanyId      = _markupTransRef.DataAreaId;
                            _markupTrans.InterCompanyRefRecId       = _markupTransRef.RecId;
                            changecompany(_markupTrans.company())
                            {
                                setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

                                _markupTrans.InterCompanySkipUpdate = true;
                                _markupTrans.update();
                            }
                        }
                    }
                }
                else
                {
                    _markupTransRef.Txt                             = _markupTrans.Txt;
                    _markupTransRef.ModuleCategory                  = _markupTrans.ModuleCategory;
                    _markupTransRef.ModuleType                      = moduleType;

                    this.synchronizeMarkupTrans(moduleType, _markupTransRef, _markupTrans, _updateRef);

                    if (!prmisDefault(_invoiceId))
                    {
                        _markupTransRef.InterCompanyInvoiceId       = _invoiceId;
                        _markupTransRef.MarkupCategory              = MarkupCategory::Fixed;
                        _markupTransRef.Keep                        = NoYes::No;

                        if (this.isInclTax())
                        {
                            _markupTransRef.Value = this.parmMarkupAmount() + _markupTrans.TaxAmount;
                        }

                        else
                        {
                            _markupTransRef.Value = this.parmMarkupAmount();
                        }
                    }

                    if (!_markupTransRef.isEditingBlockedByVendorInvoice())
                    {
                        _markupTransRef.update(true, false);
                    }
                }

                if (AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled() && _markupTransRef.isInterCompanyAndPercentCategory())
                {
                    checkFailed("@SCM:IntercompanySalesOrderChargePercentError");
                }

                if (!this.checkMarkupCode(_markupTransRef))
                {
                    throw error(strFmt("@SYS94089",_markupTrans.MarkupCode, TradeInterCompany::curCompanyName(_markupTransRef.DataAreaId)));
                }
                break;

            case InterCompanyMarkupAction::Delete:
                if (_markupTransRef.RecId
                &&  _markupTransRef.TransTableId != tableNum(CustInvoiceJour)
                &&  _markupTransRef.TransTableId != tableNum(CustInvoiceTrans)
                &&  _markupTransRef.TransTableId != tableNum(VendInvoiceJour)
                &&  _markupTransRef.TransTableId != tableNum(VendInvoiceTrans)
                &&  this.shouldChargeBeDeleted(_markupTransRef))
                {
                    _markupTransRef.InterCompanySkipUpdate = true;
                    _markupTransRef.delete();
                }
                break;
        }

        return _markupTransRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InterCompanyMarkup construct(InterCompanyMarkupAction    _markupAction,
                                        MarkupTrans                 _markupTrans,
                                        MarkupAmount                _markupAmount = 0)
    {
        InterCompanyMarkup interCompanyMarkup;

        switch (_markupTrans.TransTableId)
        {
            case tableNum(CustInvoiceJour):
                interCompanyMarkup = new InterCompanyMarkup_CustInvoiceJour();
                break;
            case tableNum(CustInvoiceTrans):
                interCompanyMarkup = new InterCompanyMarkup_CustInvoiceTrans();
                break;
            case tableNum(PurchLine):
                interCompanyMarkup = new InterCompanyMarkup_PurchLine();
                break;
            case tableNum(PurchTable):
                interCompanyMarkup = new InterCompanyMarkup_PurchTable();
                break;
            case tableNum(SalesLine):
                interCompanyMarkup = new InterCompanyMarkup_SalesLine();
                break;
            case tableNum(SalesTable):
                interCompanyMarkup = new InterCompanyMarkup_SalesTable();
                break;
            default:
                interCompanyMarkup = new InterCompanyMarkup();
                break;
        }

        interCompanyMarkup.parmMarkupAction(_markupAction);
        interCompanyMarkup.parmMarkupTrans (_markupTrans);
        interCompanyMarkup.parmMarkupAmount(_markupAmount);

        return interCompanyMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromMarkupTrans</Name>
				<Source><![CDATA[
    static MarkupTrans updateFromMarkupTrans(MarkupTrans  _markupTrans,
                                             MarkupAmount _markupAmount)
    {
        InterCompanyMarkup  interCompanyMarkup;
        MarkupTrans         markupTrans = _markupTrans;

        interCompanyMarkup = InterCompanyMarkup::construct(InterCompanyMarkupAction::Calc,_markupTrans,_markupAmount);
        if (interCompanyMarkup)
        {
            interCompanyMarkup.run();
            markupTrans = interCompanyMarkup.parmMarkupTrans();
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldChargeBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the charge in the intercompany purchase order (ICPO) to be deleted is not a virtual charge it should not be removed
    /// </summary>
    /// <param name="_markupTransRef">
    /// The current charge considered for deletion.
    /// </param>
    /// <returns>
    /// true if we have created a new entry for the charge and it should be deleted; otherwise false.
    /// </returns>
    /// <remarks>
    /// For the charges with Keep set to no in the ICPO that invoke deletion when posting the invoice
    /// in the ICSO, the original charge has been updated with the InterCompanyInvoiceId instead of
    /// recreating a new one: therefore, deletion is not needed.
    /// </remarks>
    private boolean shouldChargeBeDeleted(MarkupTrans _markupTransRef)
    {
        boolean ret = true;

        if (_markupTransRef.TransTableId == tableNum(PurchTable) || _markupTransRef.TransTableId == tableNum(PurchLine))
        {
            if (_markupTransRef.InterCompanyInvoiceId)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>