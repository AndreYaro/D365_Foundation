<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsInventWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsInventWorkTransactionType</c> class handles logic specific to the inventory movement work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::Invent)]
class WhsInventWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    public boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWholeLPWithChildrenPrevented</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isWholeLPWithChildrenPrevented()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateSpecificReservationRequired</Name>
				<Source><![CDATA[
    internal boolean isLicensePlateSpecificReservationRequired()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        return queryStr(WHSInventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::Movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        ItemId itemId = _parameters.itemId;
        if (itemId)
        {
            SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(InventTable)), fieldNum(InventTable, ItemId)).value(queryValue(itemId));
        }

        InventBatchId inventBatchId = _parameters.inventBatchId;
        if (inventBatchId)
        {
            QueryBuildDataSource qbdsInventBatch = _parameters.query.dataSourceTable(tableNum(InventBatch));
            if (qbdsInventBatch)
            {
                SysQuery::findOrCreateRange(qbdsInventBatch, fieldNum(InventBatch, InventBatchId)).value(queryValue(inventBatchId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocDirCodeForWorkTemplateLine</Name>
				<Source><![CDATA[
    public WHSWorkTemplateErrorText validateLocDirCodeForWorkTemplateLine(WHSWorkTemplateLine _templateLine, boolean _isLastLine)
    {
        if (_templateLine.WorkType == WHSWorkType::Put
            && _isLastLine 
            && _templateLine.LocDirHintCode)
        {
            return "@WAX:LastPutMustNotHaveDirectiveCode";
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInternalMovement</Name>
				<Source><![CDATA[
    internal boolean isInternalMovement()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>