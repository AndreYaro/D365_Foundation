<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTotals_Proj extends SalesTotals
{
    ProjProposalJour    projProposalJour;
    ProjProposalItem    projProposalItem;
    private ProjInvoiceParmTable projInvoiceParmTable;

    SalesLine           salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    public CashDiscCode cashDiscCode()
    {
        return projProposalJour.CashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        SalesCalcTax salesCalcTax = SalesCalcTax::construct(projProposalJour);
        if (projInvoiceParmTable)
        {
            salesCalcTax.projInvoiceParmTable(this.projInvoiceParmTable);
        }
        return salesCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode  currencyCode()
    {
        return projProposalJour.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected  DiscPct  discPercent()
    {
        return salesLine.salesTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate  exchRate()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return ProjInvoiceCurrency::find(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId).ExchRate;
        }

        return ExchangeRateHelper::exchRate(projProposalJour.CurrencyId, projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary  exchRateSecondary()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return 0;
        }

        return ExchangeRateHelper::exchRateSecond(projProposalJour.CurrencyId, projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmountExclTaxForGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get price exclude tax line amount when GTE enabled.
    /// </summary>
    /// <param name = "_lineAmount">
    /// The line amount of current projProposalItem record.
    /// </param>
    /// <returns>
    /// The line amount that excludes tax amount.
    /// </returns>
    private LineAmount getLineAmountExclTaxForGTE(LineAmount _lineAmount)
    {
        ITaxDocumentLine             taxDocumentLineObject;
        AmountCur                    inclTaxAmount;
        AmountCur                    lineAmountExclTax;
        TaxEngineProjItemSOTransHeader itemSOTransHeader = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalItem.projProposalJour());
        ITaxDocument                   taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(itemSOTransHeader.TableId, itemSOTransHeader.RecId);
        
        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(projProposalItem.TableId, projProposalItem.RecId);

            if (taxDocumentLineObject)
            {
                inclTaxAmount = taxDocumentLineObject.getInclTax().amountTransactionCurrency();

                if (inclTaxAmount)
                {
                    if (_lineAmount < 0)
                    {
                        lineAmountExclTax = CurrencyExchangeHelper::amount(abs(_lineAmount) - abs(inclTaxAmount)) * -1;
                    }
                    else
                    {
                        lineAmountExclTax = CurrencyExchangeHelper::amount(_lineAmount - abs(inclTaxAmount));
                    }

                    return lineAmountExclTax;
                }
                else
                {
                    return _lineAmount;
                }

            }
            else
            {
                return _lineAmount;
            }
        }
        else
        {
            return _lineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(ProjProposalItem));

        recordSortedListLine.sortOrder(fieldNum(ProjProposalItem,RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected InventTransId inventTransId()
    {
        return projProposalItem.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    protected CustAccount  invoiceAccount()
    {
        return projProposalJour.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return projProposalJour.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return projProposalItem.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount lineAmount(SalesQty salesQty, TransDate transDate)
    {
        ProjProposalItemDetail projProposalItemDetail;

        select sum(LineAmount) from projProposalItemDetail
            where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId;

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return this.getLineAmountExclTaxForGTE(projProposalItemDetail.LineAmount);
        }
        else
        {
        // </GTE>
            return projProposalItemDetail.LineAmount;
        // <GTE>
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty unitQty, TransDate transDate)
    {
        DiscAmount  discAmount = 0;

        if (salesLine.SalesPrice)
        {
            discAmount += salesLine.calcLineDiscExclTax(unitQty, transDate, tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(TradeTotalsIQueryRun _lineQueryRun)
    {
        projProposalItem = super(_lineQueryRun);

        if (projProposalItem)
        {
            salesLine = projProposalItem.salesLine();
        }
        else
        {
            salesLine = null;
        }

        return projProposalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProjProposalJour _projProposalJour)
    {
        super(_projProposalJour);

        projProposalJour = _projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract parmContract()
    {
        return SalesTotalsProjProposalContract::newFromProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty qtyInvent()
    {
        return projProposalItem.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount that remains in inventory units.
    /// </summary>
    /// <returns>
    /// The amount that remains in inventory units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected InventQty qtyInventRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return projProposalItem.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        return new QueryRun(projProposalJour.querySalesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesTable querySalesTable;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation  triangulation()
    {
        if (ProjInvoiceCurrency::exist(projProposalJour.ProjInvoiceProjId,projProposalJour.CurrencyId))
        {
            return NoYes::No;
        }

        return  Currency::triangulation(projProposalJour.CurrencyId,projProposalJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceParmTable</Name>
				<Source><![CDATA[
    internal ProjInvoiceParmTable parmProjInvoiceParmTable(ProjInvoiceParmTable _projInvoiceParmTable = projInvoiceParmTable)
    {
        projInvoiceParmTable = _projInvoiceParmTable;
        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>