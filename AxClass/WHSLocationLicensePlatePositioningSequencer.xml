<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationLicensePlatePositioningSequencer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationLicensePlatePositioningSequencer</c> class arranges the positions 
/// on the <c>WHSLocationLicensePlatePositioning</c> table whenever inventory is moved in or out 
/// of a lp controlled location for the location license plate positioning feature.
/// </summary>
internal final class WHSLocationLicensePlatePositioningSequencer
{
    private WHSLicensePlateId   licensePlateId;
    private WMSLocation         wmsLocation;

    internal static const WHSLocationLicensePlatePosition FirstPosition = 1;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLicensePlateAtLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLocationLicensePlatePositioningSequencer</c> class.
    /// </summary>
    /// <param name = "_licensePlateId">
    /// The license plate to be positioned.
    /// </param>
    /// <param name = "_wmsLocation">
    /// The location of the license plate.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLocationLicensePlatePositioningSequencer</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSLocationLicensePlatePositioningSequencer newFromLicensePlateAtLocation(WHSLicensePlateId _licensePlateId, WMSLocation _wmsLocation)
    {
        WHSLocationLicensePlatePositioningSequencer locationLicensePlatePositioningSequencer = new WHSLocationLicensePlatePositioningSequencer();

        locationLicensePlatePositioningSequencer.licensePlateId    = _licensePlateId;
        locationLicensePlatePositioningSequencer.wmsLocation       = _wmsLocation;

        return locationLicensePlatePositioningSequencer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickLicensePlateFromCurrentPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the license plate positioning in a location when picking from a license plate 
    /// if enabled for the location.
    /// </summary>
    [Hookable(false)]
    internal void pickLicensePlateFromCurrentPosition()
    {
        if (this.isLicensePlatePositioningAtLocationEnabled())
        {
            this.pickLicensePlate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlatePositioningAtLocationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the license plate positions can be updated for the location.
    /// </summary>
    /// <returns>
    /// true if the positions can be updated; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean isLicensePlatePositioningAtLocationEnabled()
    {
        return wmsLocation.whsLocationProfile().EnableLocationLicensePlatePositioning
            && WHSLicensePlate::find(licensePlateId).LicensePlateParent == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickLicensePlate</Name>
				<Source><![CDATA[
    private void pickLicensePlate()
    {
        ttsbegin;

        WHSLocationLicensePlatePositioning locationLicensePlatePositioning = WHSLocationLicensePlatePositioning::find(licensePlateId, true);

        using (var activityContext = this.instrumentationLogger().locationLicensePlatePositioningActivities().pickLicensePlateAtPosition(locationLicensePlatePositioning.LicensePlatePosition))
        {
            this.instrumentationLogger().logRecordInformation(wmsLocation);
            this.instrumentationLogger().logRecordInformation(locationLicensePlatePositioning);

            int movedLicensePlates;

            if (this.hasEntireLicensePlateQtyMoved())
            {
                movedLicensePlates = this.removeLicensePlatePositioningAndUpdateRemainingPositions(locationLicensePlatePositioning);
            }
            else
            {
                movedLicensePlates = this.moveCurrentLicensePlateToFrontAndUpdateRemainingPositions(locationLicensePlatePositioning);
            }

            this.instrumentationLogger().locationLicensePlatePositioningActivities().pickedLicensePlateAtPosition(activityContext, movedLicensePlates);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLicensePlatePositioningAndUpdateRemainingPositions</Name>
				<Source><![CDATA[
    private int removeLicensePlatePositioningAndUpdateRemainingPositions(WHSLocationLicensePlatePositioning _locationLicensePlatePositioning)
    {
        int movedLicensePlates;

        if (_locationLicensePlatePositioning.RecId != 0)
        {
            _locationLicensePlatePositioning.delete();
            movedLicensePlates = this.updateSubsequentLicensePlatesForwardOnePosition(_locationLicensePlatePositioning.LicensePlatePosition);
        }

        return movedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveCurrentLicensePlateToFrontAndUpdateRemainingPositions</Name>
				<Source><![CDATA[
    private int moveCurrentLicensePlateToFrontAndUpdateRemainingPositions(WHSLocationLicensePlatePositioning _locationLicensePlatePositioning)
    {
        int movedLicensePlates;

        WHSLocationLicensePlatePosition furthestPosition = this.calculateFurthestPositionAtLocation();

        if (WHSLocationLPPositioningUpdateRemainingPositionsFlight::instance().isEnabled())
        {
            boolean numberOfPositionsIncreased = this.areNumberOfPositionsIncreasing(_locationLicensePlatePositioning.RecId);

            if (numberOfPositionsIncreased)
            {
                furthestPosition++;
            }
            else 
            {
                this.temporarilySetPositionToZero(_locationLicensePlatePositioning);
            }
            
            movedLicensePlates = this.updatePositionForSubsequentLicensePlates(FirstPosition, furthestPosition);
        }
        else
        {
            if (_locationLicensePlatePositioning.RecId != 0)
            {
                this.temporarilySetPositionToZero(_locationLicensePlatePositioning);
                movedLicensePlates = this.updatePositionForSubsequentLicensePlates(FirstPosition, furthestPosition);
            }
        }

        this.placeLicensePlateAtPosition(_locationLicensePlatePositioning, FirstPosition);

        return movedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEntireLicensePlateQtyMoved</Name>
				<Source><![CDATA[
    private boolean hasEntireLicensePlateQtyMoved()
    {
        return (this.getQtyInLocation() + this.getQtyDelta()) <= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyInLocation</Name>
				<Source><![CDATA[
    private Qty getQtyInLocation()
    {
        InventSum inventSum;
        InventDim inventDim;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            // We want to return any quantity value regardless of item for comparison checks.
            select sum(PhysicalInvent) from inventSum
                where   inventSum.wMSLocationId     == wmsLocation.wMSLocationId
                    &&  inventSum.InventLocationId  == wmsLocation.inventLocationId
                    &&  inventSum.LicensePlateId    == licensePlateId
                    &&  inventSum.PhysicalInvent     > 0;
        }
        else
        {
            // We want to return any quantity value regardless of item for comparison checks.
            select sum(PhysicalInvent) from inventSum
            exists join inventDim
            where inventDim.wMSLocationId == wmsLocation.wMSLocationId
                && inventDim.InventLocationId == wmsLocation.inventLocationId
                && inventDim.inventDimId == inventSum.InventDimId
                && inventDim.LicensePlateId == licensePlateId
                && inventSum.PhysicalInvent > 0;
        }

        return inventSum.PhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyDelta</Name>
				<Source><![CDATA[
    private Qty getQtyDelta()
    {
        InventSumDelta inventSumDelta;
        InventDim inventDim;

        if (InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            // We want to return any quantity value regardless of item for comparison checks.
            select sum(PhysicalInvent) from inventSumDelta
            where inventSumDelta.InventLocationId  == wmsLocation.inventLocationId
                && inventSumDelta.wMSLocationId     == wmsLocation.wMSLocationId
                && inventSumDelta.LicensePlateId    == licensePlateId;
        }
        else
        {
            // We want to return any quantity value regardless of item for comparison checks.
            select sum(PhysicalInvent) from inventSumDelta
                exists join inventDim
                where inventDim.inventDimId == inventSumDelta.InventDimId
                    && inventDim.InventLocationId == wmsLocation.inventLocationId
                    && inventDim.wMSLocationId == wmsLocation.wMSLocationId
                    && inventDim.LicensePlateId == licensePlateId;
        }

        return inventSumDelta.PhysicalInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>temporarilySetPositionToZero</Name>
				<Source><![CDATA[
    private void temporarilySetPositionToZero(WHSLocationLicensePlatePositioning _locationLicensePlatePositioning)
    {
        _locationLicensePlatePositioning.updatePosition(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSubsequentLicensePlatesForwardOnePosition</Name>
				<Source><![CDATA[
    private int updateSubsequentLicensePlatesForwardOnePosition(WHSLocationLicensePlatePosition _currentPosition)
    {
        WHSLocationLicensePlatePositioning locationLicensePlatePositioning;
        WHSLocationLicensePlatePosition position = _currentPosition;

        int movedLicensePlates;

        while select forUpdate locationLicensePlatePositioning
            order by LicensePlatePosition asc
            where locationLicensePlatePositioning.LicensePlatePosition  >= _currentPosition
               && locationLicensePlatePositioning.WMSLocationId         == wmsLocation.WMSLocationId
               && locationLicensePlatePositioning.InventLocationId      == wmsLocation.InventLocationId
        {
            locationLicensePlatePositioning.updatePosition(position);
            
            position++;
            movedLicensePlates++;
        }

        return movedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putLicensePlateAtPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the license plate positionings in a location when putting to a license plate if enabled.
    /// </summary>
    /// <param name = "_newPosition">
    /// The new position of the license plate in the location.
    /// </param>
    [Hookable(false)]
    internal void putLicensePlateAtPosition(WHSLocationLicensePlatePosition _newPosition)
    {
        if (this.isLicensePlatePositioningAtLocationEnabled())
        {
            this.putLicensePlate(_newPosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>putLicensePlateAtFirstPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the license plate positionings in a location when putting a license plate
    /// to the first position if enabled for the location.
    /// </summary>
    [Hookable(false)]
    internal void putLicensePlateAtFirstPosition()
    {
        this.putLicensePlateAtPosition(FirstPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>putLicensePlate</Name>
				<Source><![CDATA[
    private void putLicensePlate(WHSLocationLicensePlatePosition _newPosition)
    {
        ttsbegin;

        WHSLocationLicensePlatePositioning  locationLicensePlatePositioning = WHSLocationLicensePlatePositioning::find(licensePlateId, true);

        using (var activityContext = this.instrumentationLogger().locationLicensePlatePositioningActivities().placeLicensePlateAtPosition(_newPosition))
        {
            this.instrumentationLogger().logRecordInformation(wmsLocation);
            this.instrumentationLogger().logRecordInformation(locationLicensePlatePositioning);

            WHSLocationLicensePlatePosition     furthestPosition = this.calculateFurthestPositionAtLocation();

            boolean numberOfPositionsIncreased = this.areNumberOfPositionsIncreasing(locationLicensePlatePositioning.RecId);

            if (numberOfPositionsIncreased)
            {
                furthestPosition++;
            }

            int movedLicensePlates;

            if (_newPosition > furthestPosition)
            {
                _newPosition = furthestPosition;
            }
            
            if (this.isNotIncreaseInPositionsAndNewPositionIsFurthest(_newPosition, furthestPosition, numberOfPositionsIncreased))
            {
                movedLicensePlates = this.updateOtherPositionsWhenNewPositionIsFurthestAndNotAnIncrease(locationLicensePlatePositioning, _newPosition);
            }
            else
            {
                if (!numberOfPositionsIncreased)
                {
                    this.temporarilySetPositionToZero(locationLicensePlatePositioning);
                }
            
                movedLicensePlates = this.updatePositionForSubsequentLicensePlates(_newPosition, furthestPosition);
            }    

            this.placeLicensePlateAtPosition(locationLicensePlatePositioning, _newPosition);

            this.instrumentationLogger().locationLicensePlatePositioningActivities().placedLicensePlateAtPosition(activityContext, movedLicensePlates);
        }

        ttscommit;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFurthestPositionAtLocation</Name>
				<Source><![CDATA[
    private WHSLocationLicensePlatePosition calculateFurthestPositionAtLocation()
    {
        WHSLocationLicensePlatePositioning locationLicensePlateFurthestPositioning;

        select firstonly LicensePlatePosition from locationLicensePlateFurthestPositioning
            order by licensePlatePosition desc
            where locationLicensePlateFurthestPositioning.WMSLocationId     == wmsLocation.wMSLocationId
               && locationLicensePlateFurthestPositioning.InventLocationId  == wmsLocation.inventLocationId;

        return locationLicensePlateFurthestPositioning.LicensePlatePosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areNumberOfPositionsIncreasing</Name>
				<Source><![CDATA[
    private boolean areNumberOfPositionsIncreasing(WHSLocationLicensePlatePositioningRecId _recId)
    {
        return _recId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotIncreaseInPositionsAndNewPositionIsFurthest</Name>
				<Source><![CDATA[
    private boolean isNotIncreaseInPositionsAndNewPositionIsFurthest(
        WHSLocationLicensePlatePosition _newPosition,
        WHSLocationLicensePlatePosition _furthestPosition,
        boolean                         _numberOfPositionsIncreased)
    {
        return ((_newPosition == _furthestPosition)
                && !_numberOfPositionsIncreased);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOtherPositionsWhenNewPositionIsFurthestAndNotAnIncrease</Name>
				<Source><![CDATA[
    private int updateOtherPositionsWhenNewPositionIsFurthestAndNotAnIncrease(WHSLocationLicensePlatePositioning _locationLicensePlatePositioning, WHSLocationLicensePlatePosition _newPosition)
    {
        WHSLocationLicensePlatePosition originalPosition = _locationLicensePlatePositioning.LicensePlatePosition;

        this.temporarilySetPositionToZero(_locationLicensePlatePositioning);

        int movedLicensePlates = this.updatePositionForLeadingLicensePlates(_newPosition, originalPosition);

        return movedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePositionForLeadingLicensePlates</Name>
				<Source><![CDATA[
    private int updatePositionForLeadingLicensePlates(WHSLocationLicensePlatePosition _newPosition, WHSLocationLicensePlatePosition _originalPosition)
    {
        WHSLocationLicensePlatePositioning  locationLicensePlatePositioning;
        WHSLocationLicensePlatePosition     position = _originalPosition;

        int movedLicensePlates;

        while select forUpdate locationLicensePlatePositioning
            order by LicensePlatePosition asc
            where locationLicensePlatePositioning.LicensePlatePosition  <= _newPosition
               && locationLicensePlatePositioning.LicensePlatePosition  >  _originalPosition
               && locationLicensePlatePositioning.WMSLocationId         == wmsLocation.WMSLocationId
               && locationLicensePlatePositioning.InventLocationId      == wmsLocation.InventLocationId
        {
            locationLicensePlatePositioning.updatePosition(position);
            
            position++;
            movedLicensePlates++;
        }

        return movedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>placeLicensePlateAtPosition</Name>
				<Source><![CDATA[
    private void placeLicensePlateAtPosition(WHSLocationLicensePlatePositioning _locationLicensePlatePositioning, WHSLocationLicensePlatePosition _licensePlatePosition)
    {
        if (_locationLicensePlatePositioning.RecId != 0)
        {
            _locationLicensePlatePositioning.updatePosition(_licensePlatePosition);
        }
        else
        {
            WHSLocationLicensePlatePositioning::createPositionForLicensePlateInLocation(licensePlateId, wmsLocation, _licensePlatePosition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePositionForSubsequentLicensePlates</Name>
				<Source><![CDATA[
    private int updatePositionForSubsequentLicensePlates(WHSLocationLicensePlatePosition _newPosition, WHSLocationLicensePlatePosition _furthestPosition)
    {
        WHSLocationLicensePlatePositioning  locationLicensePlatePositioning;
        WHSLocationLicensePlatePosition     position = _furthestPosition;

        int movedLicensePlates;

        while select forUpdate locationLicensePlatePositioning
            order by LicensePlatePosition desc
            where locationLicensePlatePositioning.LicensePlatePosition  >= _newPosition
               && locationLicensePlatePositioning.WMSLocationId         == wmsLocation.WMSLocationId
               && locationLicensePlatePositioning.InventLocationId      == wmsLocation.InventLocationId
        {
            locationLicensePlatePositioning.updatePosition(position);
            
            position--;
            movedLicensePlates++;
        }

        return movedLicensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>