<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximUpd_Approval_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim update approve class.
/// </summary>
class EximUpd_Approval_IN extends EximUpdate_IN implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteUnMarkedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes unmarked transactions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void deleteUnMarkedTransactions()
    {
        EximConfirmOrderTable_IN    confirmOrderTable;
        EximConfirmOrderLines_IN    confirmOrderLines;
        EximExportOrderTable_IN     exportOrderTable;
        EximExportOrderLines_IN     exportOrderLines;
        EximDEPBExportOrderTable_IN depbExportOrderTable;
        EximDEPBExportOrderLine_IN  depbExportOrderLine;
        EximAuthorizationBasis_IN   authorizationBasis;

        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):

                authorizationBasis = EximAuthorizationSchemesTable_IN::find(schemeTableRecId).AuthorizationBasis;

                if (authorizationBasis == EximAuthorizationBasis_IN::ConfirmedOrder)
                {
                    while select RecId
                        from confirmOrderTable
                            where confirmOrderTable.AuthorizationSchemesTableRecId == schemeTableRecId
                    {
                        delete_from confirmOrderLines
                            where confirmOrderLines.ConfirmOrderTableRecId == confirmOrderTable.RecId
                               && confirmOrderLines.Mark                   == NoYes::No;
                    }
                }
                else if (authorizationBasis == EximAuthorizationBasis_IN::ExportOrder)
                {
                    while select RecId
                        from exportOrderTable
                            where exportOrderTable.AuthorizationSchemesTableRecId == schemeTableRecId
                    {
                        delete_from exportOrderLines
                            where exportOrderLines.ExportOrderTableRecId == exportOrderTable.RecId
                               && exportOrderLines.Mark                  == NoYes::No;
                    }
                }
                break;
            case tablenum(EximDEPBSchemesTable_IN):

                while select forupdate RecId
                    from depbExportOrderTable
                        where depbExportOrderTable.SchemeTableRecId == schemeTableRecId
                {
                    delete_from depbExportOrderLine
                        where depbExportOrderLine.ExportOrderTableRecId == depbExportOrderTable.RecId
                           && depbExportOrderLine.Mark                  == NoYes::No;

                    select firstonly ExportOrderTableRecId from depbExportOrderLine
                        where depbExportOrderLine.ExportOrderTableRecId == depbExportOrderTable.RecId;

                    if (!depbExportOrderLine.ExportOrderTableRecId)
                    {
                        depbExportOrderTable.delete();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize authorization scheme.
    /// </summary>
    public void initAuthorizationScheme()
    {
        super();
        if (schemeType == EximAuthorizationType_IN::DEPB)
        {
            this.insertExportOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExportOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts export order.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertExportOrder()
    {
        EximDEPBExportOrderTable_IN  eximDEPBExportOrderTable;
        TmpEximEntitlementDetails_IN tmpEximEntitlementDetailsLoc;

        while select EximProductGroupTable,AllowableDutyEntitlement from eximDEPBExportOrderTable
           where eximDEPBExportOrderTable.SchemeTableRecId == schemeTableRecId
        {
            tmpEximEntitlementDetailsLoc.EximProductGroupTable = eximDEPBExportOrderTable.EximProductGroupTable;
            tmpEximEntitlementDetailsLoc.DutyEntitlement       = eximDEPBExportOrderTable.AllowableDutyEntitlement;
            totalDutyAmount                                   += tmpEximEntitlementDetailsLoc.DutyEntitlement;
            tmpEximEntitlementDetailsLoc.insert();
        }

        this.parmTmpEximEntitlementDetails(tmpEximEntitlementDetailsLoc);

        totalDutyEntitlement = totalDutyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        container schemeValues;

        if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            licenseNum,
                            issueDate,
                            transferrable,
                            importAssessableValue,
                            exportAssessableValue,
                            importExpiryDate,
                            exportExpiryDate,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }
        else
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            licenseNum,
                            issueDateTime,
                            importExpiryDateTime,
                            txt,
                            totalDutyEntitlement,
                            totalComponentAmount,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }

        EximUpd_Approval_IN::runOnServer(
            schemeType,
            schemeValues,
            tmpTaxDetails,
            tmpEximEntitlementDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the authorization scheme information.
    /// </summary>
    protected void updateAuthorizationScheme()
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTableLoc;

        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):
                authorizationSchemesTableLoc = EximAuthorizationSchemesTable_IN::find(schemeTableRecId, true);

                if (authorizationSchemesTableLoc)
                {
                    authorizationSchemesTableLoc.LicenseNum   = licenseNum;
                    authorizationSchemesTableLoc.IssueDate    = issueDate;
                    authorizationSchemesTableLoc.Transferable = transferrable;
                    authorizationSchemesTableLoc.Status       = EximAuthorizationStatus_IN::Approved;
                    authorizationSchemesTableLoc.update();
                }

                this.updateAuthorizationSchemeLine();
                break;
            case tablenum(EximDEPBSchemesTable_IN):
                depbSchemesTable = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId, true);

                if (depbSchemesTable)
                {
                    depbSchemesTable.LicenseNum    = licenseNum;
                    depbSchemesTable.IssueDateTime = DateTimeUtil::removeTimeZoneOffset(issueDateTime, DateTimeUtil::getUserPreferredTimeZone());
                    depbSchemesTable.Status        = EximAuthorizationStatus_IN::Approved;
                    depbSchemesTable.update();
                }

                this.updateDEPBSchemeLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationSchemeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the authorization scheme line information.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateAuthorizationSchemeLine()
    {
        authorizationSchemesLine = EximAuthorizationSchemesLine_IN::findByAuthorizationVersionId(schemeTableRecId, 0, true);

        if (authorizationSchemesLine)
        {
            authorizationSchemesLine.AuthorizationSchemesTableRecId = schemeTableRecId;
            authorizationSchemesLine.ExportAssessableValue          = exportAssessableValue;
            authorizationSchemesLine.ImportAssessableValue          = importAssessableValue;
            authorizationSchemesLine.ImportExpiryDate               = importExpiryDate;
            authorizationSchemesLine.ExportExpiryDate               = exportExpiryDate;
            authorizationSchemesLine.iecTaxRegistrationNumber       = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company,
                                                                                                                      TaxType_IN::Customs,
                                                                                                                      iECNumber).RecId;
            authorizationSchemesLine.TaxLedgerAccountGroup          = TaxLedgerAccountGroup_IN::findByTaxAccountGroup(taxAccountGroup).RecId;
            authorizationSchemesLine.LicenseStatus                  = this.licenseStatus();
            authorizationSchemesLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates incentive scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;

            this.updateAuthorizationScheme();

            this.updateAndPost();

            if (schemeType == EximAuthorizationType_IN::AA
                || schemeType == EximAuthorizationType_IN::DFIA)
            {
                this.writeImportDetails();
            }

            this.deleteUnMarkedTransactions();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on server side.
    /// </summary>
    /// <param name="_schemeType">
    /// The scheme type.
    /// </param>
    /// <param name="_schemeValues">
    /// The scheme values.
    /// </param>
    /// <param name="_tmpTaxDetails">
    /// The tmp tax details.
    /// </param>
    /// <param name="_tmpEximEntitlementDetails">
    /// The tmp exim entitlement details.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximAuthorizationType_IN     _schemeType,
        container                    _schemeValues,
        TmpEximTaxDetails_IN         _tmpTaxDetails,
        TmpEximEntitlementDetails_IN _tmpEximEntitlementDetails = null)
    {
        EximUpd_Approval_IN eximUpdApproval = new EximUpd_Approval_IN();

        eximUpdApproval.parmSchemeType(_schemeType);
        eximUpdApproval.parmTmpEximTaxDetails(_tmpTaxDetails);
        eximUpdApproval.parmTmpEximEntitlementDetails(_tmpEximEntitlementDetails);

        if (_schemeType == EximAuthorizationType_IN::AA || _schemeType == EximAuthorizationType_IN::DFIA)
        {
            eximUpdApproval.parmSchemeTableId(conpeek(_schemeValues, 1));
            eximUpdApproval.parmSchemeTableRecId(conpeek(_schemeValues, 2));
            eximUpdApproval.parmLicenseNumber(conpeek(_schemeValues, 3));
            eximUpdApproval.parmIssueDate(conpeek(_schemeValues, 4));
            eximUpdApproval.parmTransferrable(conpeek(_schemeValues, 5));
            eximUpdApproval.parmImportAssessableValue(conpeek(_schemeValues, 6));
            eximUpdApproval.parmExportAssessableValue(conpeek(_schemeValues, 7));
            eximUpdApproval.parmImportExpiryDate(conpeek(_schemeValues, 8));
            eximUpdApproval.parmExportExpiryDate(conpeek(_schemeValues, 9));
            eximUpdApproval.parmTaxAccountGroup(conpeek(_schemeValues, 10));
            eximUpdApproval.parmIECNumber(conpeek(_schemeValues, 11));
            eximUpdApproval.parmTransDate(conpeek(_schemeValues, 12));
        }
        else
        {
            eximUpdApproval.parmSchemeTableId(conpeek(_schemeValues, 1));
            eximUpdApproval.parmSchemeTableRecId(conpeek(_schemeValues, 2));
            eximUpdApproval.parmLicenseNumber(conpeek(_schemeValues, 3));
            eximUpdApproval.parmIssueDateTime(conpeek(_schemeValues, 4));
            eximUpdApproval.parmImportExpiryDateTime(conpeek(_schemeValues, 5));
            eximUpdApproval.parmTxt(conpeek(_schemeValues, 6));
            eximUpdApproval.parmTotalDutyEntitlement(conpeek(_schemeValues, 7));
            eximUpdApproval.parmTotalComponentAmount(conpeek(_schemeValues, 8));
            eximUpdApproval.parmTaxAccountGroup(conpeek(_schemeValues, 9));
            eximUpdApproval.parmIECNumber(conpeek(_schemeValues, 10));
            eximUpdApproval.parmTransDate(conpeek(_schemeValues, 11));
        }

        eximUpdApproval.updateIncentiveScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if can run the inquiry in new session or not.
    /// </summary>
    /// <returns>
    /// True if can run the inquiry in new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>