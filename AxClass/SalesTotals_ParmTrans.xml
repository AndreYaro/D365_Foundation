<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals_ParmTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTotals_ParmTrans extends SalesTotals_Sales
{
    SalesParmTable  salesParmTable;
    SalesParmLine   salesParmLine;
    SalesLine       salesLine;

    ParmId          parmId;
    AccountOrder    sumBy;
    SalesId         sumSalesId;
    DocumentStatus  documentStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcMarkupForTable</Name>
				<Source><![CDATA[
    public void calcMarkupForTable(ParmId _parmId, SalesId _salesId)
    {
        MarkupTrans     markupTrans;
        SalesParmTable  localSalesParmTable;

        // To get the right markup amount = only once per order, on the totals form called from the
        // salesEditLines form when markup of type fix has been set on the header and the order has
        // been split into more parm tables, because of site or delivery addresses.

        // do we have a markup of type fixed for this order header and not keep
        select markupTrans
            where markupTrans.TransTableId      == salesParmTable.salesTable().TableId
                && markupTrans.TransRecId       == salesParmTable.salesTable().RecId
                && markupTrans.MarkupCategory   == MarkupCategory::Fixed
                && markupTrans.Keep             == NoYes::No
                && !markupTrans.IsDeleted;

        if (markupTrans)
        {
            // do we have a split situation - same order in more updates.
            if (salesParmTable.numberOfTables() > 1)
            {
                select minof(TableRefId) from localSalesParmTable
                    where localSalesParmTable.ParmId     == _parmId
                        && localSalesParmTable.SalesId    == _salesId;

                TradeLineRefId minTableRefId = localSalesParmTable.TableRefId;

                // if this is the first line in the salesUpdate - calc markup for the salesTotals form
                if (salesParmTable.ParmId           == _parmId
                    && salesParmTable.TableRefId    == minTableRefId
                    && salesParmTable.SalesId       == _salesId)
                {
                    // markup will be calculated
                    markupTableAmountCalculated     = false;
                    markupTableAmountTaxCalculated  = false;
                }
                else
                {
                    // markup will not be calculated
                    markupTableAmountCalculated     = true;
                    markupTableAmountTaxCalculated  = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the weight of a category-based order line.
    /// </summary>
    /// <returns>
    ///    The weight of the category-based order line.
    /// </returns>
    protected Weight categoryWeight()
    {
        return SalesLineForeignTradeCategory::findSalesLine(salesLine).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return SalesCalcTax::construct(salesParmTable, specQty, sumBy, parmId, sumSalesId, documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected  DiscPct  discPercent()
    {
        return salesParmLine.salesTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus documentStatus()
    {
        return documentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate exchRate(date _date = maxDate())
    {
        date workdate;

        if (prmIsDefault(_date))
        {
            if (salesParmTable.Transdate)
            {
                workdate = salesParmTable.Transdate;
            }
            else
            {
                workdate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
        else
        {
            workdate = _date;
        }

        return salesTable.exchRate(salesParmTable.getExchRateDate(workdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reporting currency exchange rate.
    /// </summary>
    /// <returns>The reporting currency exchange rate.</returns>
    internal CustExchRate reportingCurrencyExchangeRate()
    {
        return salesTable.reportingCurrencyFixedExchangeRate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary(date _date = maxDate())
    {
        date workdate;

        if (prmIsDefault(_date))
        {
            if (salesParmTable.Transdate)
            {
                workdate = salesParmTable.Transdate;
            }
            else
            {
                workdate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
        else
        {
            workdate = _date;
        }
        return salesTable.exchRateSecondary(salesParmTable.getExchRateDate(workdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineSign_RU</Name>
				<Source><![CDATA[
    protected int getOrderLineSign_RU(Common _line)
    {
        SalesParmLine parmLine = _line;
        return this.getSignIndexByAmount_RU(parmLine.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(SalesParmLine));

        if (documentStatus == DocumentStatus::PickingList)
        {
            recordSortedListLine.sortOrder(fieldNum(SalesParmLine, RecId));
        }
        else
        {
            //Added sorting by Delivery fields
            recordSortedListLine.sortOrder(fieldNum(SalesParmLine, TableRefId),
                                           fieldNum(SalesParmLine, OrigSalesId),
                                           fieldNum(SalesParmLine, DeliveryName),
                                           fieldNum(SalesParmLine, DeliveryPostalAddress),
                                           fieldNum(SalesParmLine, DlvMode),
                                           fieldNum(SalesParmLine, LineNum),
                                           fieldNum(SalesParmLine, salesLineRecId),
                                           fieldNum(SalesParmLine, RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyLineAmount</Name>
				<Source><![CDATA[
    LineAmount interCompanyLineAmount(SalesQty _salesQty, InvoiceDate _invoiceDate)
    {
        return salesLine.interCompanyLineAmount(_salesQty, _invoiceDate, tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>InventDimId</c> field of the current order line.
    /// </summary>
    /// <returns>
    ///    The value of the <c>InventDimId</c> field of the current order line.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return salesParmLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected TradeInventTransId inventTransId()
    {
        return salesParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category-based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category-based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        return salesLine.isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    /// true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean isStocked()
    {
        return salesLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return salesParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount lineAmount(SalesQty _salesQty, TransDate _transDate)
    {
        if (skipTaxCalculations)
        {
            return salesParmLine.effectiveLineAmount();
        }
        else
        {
            return salesParmLine.lineAmountExclTax(_transDate, tax, trackUnroundedBalances);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty _unitQty, TransDate _transDate)
    {
        DiscAmount  discAmount = 0;

        if (this.shouldCalculateLineDiscountAmount())
        {
            discAmount += salesParmLine.calcLineDiscExclTax(_unitQty, _transDate, tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateLineDiscountAmount</Name>
				<Source><![CDATA[
    protected boolean shouldCalculateLineDiscountAmount()
    {
        return salesLine.SalesPrice != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineHasDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a discount is applied to the line.
    /// </summary>
    /// <returns>
    ///     true if a discount ammount, a discount percentage, a multi line discount amount or a multi line discount percentage is applied; otherwise, false.
    /// </returns>
    protected boolean lineHasDiscount()
    {
        return (salesLine.LineDisc
                || salesLine.LinePercent
                || salesLine.MultiLnDisc
                || salesLine.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMarkupTransExist</Name>
				<Source><![CDATA[
    public boolean lineMarkupTransExist()
    {
        SalesLine           localSalesLine;
        MarkupTrans         localMarkUpTrans;
        if (!lineMarkupTransExistSet)
        {
            if (SalesTotalsReplaceExistJoinWithJoinFlight::instance().isEnabled())     
            {
                select firstOnly RecId from salesParmLine
                    where salesParmLine.ParmId          == salesParmTable.ParmId
                        && salesParmLine.TableRefId     == salesParmTable.TableRefId
                    join RecId from localSalesLine
                        where localSalesLine.RecId      == salesParmLine.SalesLineRecId
                    join RecId from localMarkUpTrans
                        where localMarkUpTrans.TransTableId == tableNum(SalesLine)
                        && localMarkUpTrans.IsDeleted   == NoYes::No
                        && localSalesLine.RecId         == localMarkUpTrans.TransRecId;
            }
            else
            {
                select firstOnly RecId from localMarkUpTrans
                    where localMarkUpTrans.TransTableId == tableNum(SalesLine)
                        && localMarkUpTrans.IsDeleted   == NoYes::No
                    exists join localSalesLine
                        where localSalesLine.RecId      == localMarkUpTrans.TransRecId
                    exists join salesParmLine
                        where localSalesLine.RecId      == salesParmLine.SalesLineRecId
                        && salesParmLine.ParmId         == salesParmTable.ParmId
                        && salesParmLine.TableRefId     == salesParmTable.TableRefId;
            }
            lineMarkupTransExist = localMarkUpTrans.RecId;
            if (localMarkUpTrans.RecId)
            {
                lineMarkupTransExistSet = true;
            }
        }

        return lineMarkupTransExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        salesParmLine = super(_lineQueryRun);

        if (salesParmLine)
        {
            salesLine = salesParmLine.salesLine();
        }
        else
        {
            salesLine = null;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetParmId</Name>
				<Source><![CDATA[
    public parmId mcrGetParmId()
    {
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrGetParmTableRefId</Name>
				<Source><![CDATA[
    public TradeLineRefId mcrGetParmTableRefId()
    {
        return SalesParmTable.TableRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrReturnDiscPercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total order discount percentage that was on the original
    ///     sales order of the sales line.
    /// </summary>
    /// <returns>
    ///     The discount percentage of the sales order transaction.
    /// </returns>
    protected DiscPct mcrReturnDiscPercent()
    {
        //Get the sales line that is indicated by the salesparmline.
        //Then get that sales line's ORIGINAL sales table from the return.
        SalesLine salesLineLocal = SalesLine::findInventTransId(salesParmLine.InventTransId);
        return SalesLine::findInventTransId(salesLineLocal.InventTransIdReturn).salesTable().DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSalesParmTable</Name>
				<Source><![CDATA[
    public SalesParmTable mcrSalesParmTable()
    {
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _source,
             SalesUpdate    _specQty,
             AccountOrder   _sumBy,
             ParmId         _parmId,
             SalesId        _sumSalesId,
             DocumentStatus _documentStatus)
    {
        sumBy               = _sumBy;
        parmId              = _parmId;
        sumSalesId          = _sumSalesId;
        documentStatus      = _documentStatus;

        switch (_source.TableId)
        {
            case tablenum(SalesTable):
                salesTable       = _source;
                salesParmTable   = SalesParmTable::findSalesId(salesTable.SalesId, parmId);
                break;

            case tablenum(SalesParmTable):
                salesParmTable   = _source;
                salesTable       = salesParmTable.salesTable();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(salesTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract  parmContract()
    {
        return SalesTotalsParmTransContract::newFromSalesParmTable(salesParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity that remains in catch weight units.
    /// </summary>
    /// <returns>
    /// The quantity that remains in catch weight units.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The method is not implemented in a derived class.
    /// </exception>
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        return SalesQuantity::construct(documentStatus).pdsCWQtyRemainPhysical(salesLine,salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the sales parameter line total catch weight quantity.
    /// </summary>
    /// <returns>
    ///     The catch weight quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return salesParmLine.PdsCWDeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty qtyInvent()
    {
        return salesParmLine.InventNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in inventory units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in inventory units.
    /// </returns>
    protected InventQty qtyInventRemain()
    {
        // <GEERU>
        SalesQuantity   salesQuantity = SalesQuantity::construct(documentStatus);
        InventDimParm   inventDimParm;
        InventDim       inventDim;
        if (salesParmTable.InventOwnerId_RU)
        {
            inventDimParm.InventOwnerIdFlag_RU  = NoYes::Yes;
            inventDim.InventOwnerId_RU          = salesParmTable.InventOwnerId_RU;
            salesQuantity.parmInventDimCriteria_RU(inventDim);
            salesQuantity.parmInventDimParm_RU(inventDimParm);
        }
        return salesQuantity.qtyRemainInventPhysical(salesLine,salesParmLine);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return salesParmLine.DeliverNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnitRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in order line units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in order line units.
    /// </returns>
    protected InventQty qtyUnitRemain()
    {
        return SalesQuantity::construct(documentStatus).qtyRemainSalesPhysical(salesLine,salesParmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        return new QueryRun(salesParmTable.querySalesParmLine(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        return new QueryRun(salesParmTable.querySalesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun  _queryRun)
    {
        if (_queryRun.changed(tableNum(SalesParmLine)))
        {
            salesParmLine = _queryRun.get(tableNum(SalesParmLine));
        }
        else
        {
            salesParmLine = null;
        }

        if (salesParmLine)
        {
            salesLine = salesParmLine.salesLine();
        }
        else
        {
            salesLine = null;
        }

        return salesParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesTable          querySalesTable;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitQtyInInventoryUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from order line units to inventory units.
    /// </summary>
    /// <param name="_unitQty">
    /// The order line quantity to convert.
    /// </param>
    /// <returns>
    /// The order line quantity in inventory units.
    /// </returns>
    protected InventQty unitQtyInInventoryUnits(UnitQty _unitQty)
    {
        Debug::assert(inventTable != null);
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
																					 salesLine.InventDimId,
																					 _unitQty,
																					 salesLine.SalesUnit,
																					 inventTable.inventUnitId(),
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepCustomTaxInResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes tax other than customs from the calculated tax result.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    /// The calculated tax result.
    /// </param>
    private static void keepCustomTaxInResult(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TmpTaxWorkTrans     tmpTaxWorkTrans = _tmpTaxWorkTrans;

        ttsBegin;

        while select forupdate tmpTaxWorkTrans
        {
            TaxTable taxTable = TaxTable::find(tmpTaxWorkTrans.TaxCode);
            if (taxTable.TaxType_IN != TaxType_IN::Customs)
            {
                tmpTaxWorkTrans.delete();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    public static FormRun showTax(str _menuItemDisplayStr, SalesParmTable _salesParmTable, SalesUpdate _specQty
        , FormRun _formRun = null
        , DocumentStatus _documentStatus = DocumentStatus::None
        )
    {
        SalesTotals salesTotals = SalesTotals::construct(_salesParmTable, _specQty, AccountOrder::None, _salesParmTable.ParmId,
                                                         '',_salesParmTable.Ordering);
        salesTotals.calc();

        // <GIN>
        if (_documentStatus == DocumentStatus::ShippingBill_IN)
        {
            SalesTotals_ParmTrans::keepCustomTaxInResult(salesTotals.tax().tmpTaxWorkTrans());
        }
        // </GIN>

        return Tax::showTaxes(_menuItemDisplayStr, salesTotals.tax(),_salesParmTable.salesTable()
            // <GEEU>
            , _formRun
            // </GEEU>
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    // <GTE>
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        WMSPickingRoute WMSPickingRoute;
        CustPackingSlipJour custPackingSlipJour;
        CustomsShippingBillJour_IN customsShippingBillJour;

        if (salesParmTable.ParmJobStatus == ParmJobStatus::Executed)
        {
            if (documentStatus == DocumentStatus::ShippingBill_IN)
            {
                select firstOnly customsShippingBillJour
                    where customsShippingBillJour.SalesId == salesParmTable.SalesId
                        && customsShippingBillJour.ParmId == salesParmTable.ParmId;

                if (customsShippingBillJour.RecId)
                {
                    return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(customsShippingBillJour);
                }
            }
            else if (documentStatus == DocumentStatus::PickingList)
            {
                select firstonly WMSPickingRoute
                    where WMSPickingRoute.transRefId == salesTable.SalesId;

                if (WMSPickingRoute.RecId)
                {
                    return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(WMSPickingRoute);
                }
            }
            else if (documentStatus == DocumentStatus::PackingSlip)
            {
                select firstonly custPackingSlipJour
                    where custPackingSlipJour.SalesId == salesTable.SalesId;

                if (custPackingSlipJour.RecId)
                {
                    return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custPackingSlipJour);
                }
            }
        }
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable);
    }
    // </GTE>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>