<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrRoyaltyVendTableFindAndCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableFindAndCreate</c> class serves to create royalties.
/// </summary>
class McrRoyaltyVendTableFindAndCreate
{
    CustInvoiceJour         custInvoiceJour;
    CustInvoiceTrans        custInvoiceTrans;

    PdsCWInventQty          sumCWQty;
    SalesQty                sumQty;
    AmountCur               sumGrossAmt;
    AmountCur               sumNetAmt;

    MCRRoyaltyItemCode      mcrRoyaltyItemCode;
    MCRRoyaltyTable         mcrRoyaltyTable;
    MCRRoyaltyTablePricing  mcrRoyaltyTablePricing;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity and amount totals for the royalty based on the customer invoice transactions.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table record; optional.
    /// </param>
    private void calculateSums(CustInvoiceTrans _custInvoiceTrans)
    {
        this.resetTransSums();
        // Gross amount is required to determine royalties.  Gross amount is determined
        // by Quantity * Price.
		
		sumCWQty    = _custInvoiceTrans.PdsCWQty;
		sumQty      = _custInvoiceTrans.Qty;
        sumGrossAmt = CurrencyExchangeHelper::curAmount2CurAmount(_custInvoiceTrans.Qty * _custInvoiceTrans.SalesPrice, _custInvoiceTrans.CurrencyCode, custInvoiceTrans.CurrencyCode);
        sumNetAmt   = CurrencyExchangeHelper::curAmount2CurAmount(_custInvoiceTrans.LineAmount, _custInvoiceTrans.CurrencyCode, custInvoiceTrans.CurrencyCode);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the amount totals for the royalty from the customer invoice currency to the
    /// royalty contract currency.
    /// </summary>
    /// <param name="_mcrRoyaltyContract">
    /// The <c>MCRRoyaltyContract</c> table record.
    /// </param>
    private void convertSums(MCRRoyaltyContract _mcrRoyaltyContract)
    {
        sumGrossAmt = CurrencyExchangeHelper::curAmount2CurAmount(sumGrossAmt, custInvoiceTrans.CurrencyCode, _mcrRoyaltyContract.Currency);
        sumNetAmt   = CurrencyExchangeHelper::curAmount2CurAmount(sumNetAmt, custInvoiceTrans.CurrencyCode, _mcrRoyaltyContract.Currency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRoyalty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a royalty from a <c>MCRRoyaltyTablePricing</c> record.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table record; optional.
    /// </param>
    /// <param name="_mcrRoyaltyTablePricing">
    /// The <c>MCRRoyaltyTablePricing</c> table record; optional.
    /// </param>
    /// <param name="_mcrRoyaltyContractRecId">
    /// The RecId of <c>MCRRoyaltyContract</c>.
    /// </param>
    protected void createRoyalty(
        CustInvoiceTrans        _custInvoiceTrans,
        MCRRoyaltyTablePricing  _mcrRoyaltyTablePricing = null,
        RecId                   _mcrRoyaltyContractRecId = 0)
    {
        MCRRoyaltyVendTable         newMCRRoyaltyVendTable;

        newMCRRoyaltyVendTable.initValue();

        newMCRRoyaltyVendTable.initFromMCRRoyaltyTablePricing(_mcrRoyaltyTablePricing, _mcrRoyaltyContractRecId);
        newMCRRoyaltyVendTable.initFromCustInvoiceJour(
                                custInvoiceJour,
                                _custInvoiceTrans,
                                sumQty,
                                sumGrossAmt,
                                sumNetAmt,
                                sumCWQty,
                                _mcrRoyaltyContractRecId);
        newMCRRoyaltyVendTable.calculateRoyaltyAmount();
        newMCRRoyaltyVendTable.status().setInitialStatus();
        ttsbegin;

        newMCRRoyaltyVendTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZeroRoyalty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates zero royalty for the sales orders that do not meet the royalty quantity and amount requirements initially
    /// and if the royalty agreement has accumulation of periodic.
    /// </summary>
    /// <param name="_mcrRoyaltyTable">
    /// The royalty table record for which to create the zero royalty claim.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The customer invoice transaction table record for which to create the zero royalty claim.
    /// </param>
    protected void createZeroRoyalty(
        MCRRoyaltyTable         _mcrRoyaltyTable,
        CustInvoiceTrans        _custInvoiceTrans)
    {
        MCRRoyaltyVendTable     newMCRRoyaltyVendTable;
        MCRRoyaltyContract      mcrRoyaltyContract;

        ttsbegin;
        newMCRRoyaltyVendTable.initValue();

        if (_mcrRoyaltyTable)
        {
            mcrRoyaltyContract  = _mcrRoyaltyTable.royaltyContract();
            newMCRRoyaltyVendTable.RoyaltyCode                  = _mcrRoyaltyTable.RoyaltyCode;
            newMCRRoyaltyVendTable.VendAccount                  = _mcrRoyaltyTable.VendAccount;
            newMCRRoyaltyVendTable.LedgerDimension              = mcrRoyaltyContract.LedgerDimension;
            newMCRRoyaltyVendTable.OffsetLedgerDimension        = mcrRoyaltyContract.OffsetLedgerDimension;
            newMCRRoyaltyVendTable.mcrRoyaltyTableRefRecId      = _mcrRoyaltyTable.RecId;
            newMCRRoyaltyVendTable.RoyaltyAmtType               = _mcrRoyaltyTable.RoyaltyAmtType;
        }

        newMCRRoyaltyVendTable.initFromCustInvoiceJour(
                                custInvoiceJour,
                                _custInvoiceTrans,
                                sumQty,
                                sumGrossAmt,
                                sumNetAmt,
                                sumCWQty);
        newMCRRoyaltyVendTable.calculateRoyaltyAmount();
        newMCRRoyaltyVendTable.status().setInitialStatus();

        newMCRRoyaltyVendTable.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMCRRoyaltyTableAndCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>MCRRoyaltyTable</c> table record to create the royalty.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table record.
    /// </param>
    protected void findMCRRoyaltyTableAndCreate(CustInvoiceTrans    _custInvoiceTrans)
    {
        CustInvoiceTrans        custInvoiceTransLocal   = _custInvoiceTrans;
        SalesTable              salesTable              = custInvoiceJour.salesTable();
        SalesLine               salesLine               = custInvoiceTransLocal.salesLine();
        InventTable             inventTable             = custInvoiceTransLocal.inventTable();
        VendTable               vendTable               = VendTable::find(mcrRoyaltyTable.VendAccount);
        InventDim               inventDim;
        InventDim               inventDimRoyaltyItemCode;
        InventDim               inventDimcustInvoiceTrans;
        InventQty               calcQty;
        UnitOfMeasureSymbol     calcUOM;
        date                    systemDate              = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        date                    calcDate;
        AmountCur               calcAmt;
        MCRRoyaltyContract      mcrRoyaltyContract;
        MCRRoyaltyVendTable     mcrRoyaltyVendTable;
        MCRRoyaltyTablePricing  mcrRoyaltyTablePricingLocal;

        // Royalties should apply for sales orders with partial invoice sales order
        // or if the sales type is a subscription (in which case the sales status
        // will not be invoiced)
        if (!custInvoiceTransLocal.RecId
            && salesTable.SalesType !=SalesType::Subscription)
        {
            return;
        }

        InventDim inventDimTransaction    = InventDim::find(_custInvoiceTrans.InventDimId);

        //Find all approved applicable royalty agreements.
        while select RecId, InventDimId from mcrRoyaltyItemCode
            where mcrRoyaltyItemCode.ItemID             == custInvoiceTransLocal.ItemId
            join RecId, RoyaltyTakenFrom, UnitType, CumulateSalesBy, ItemRoyaltyCode, Currency
            from  mcrRoyaltyContract
            where mcrRoyaltyContract.RoyaltyContract    == mcrRoyaltyItemCode.RoyaltyContract
               && mcrRoyaltyContract.ItemRoyaltyCode    == MCRItemRoyaltyCode::Selection
               && mcrRoyaltyContract.Validated          == NoYes::Yes
            join  mcrRoyaltyTable
            where mcrRoyaltyTable.RoyaltyContract       == mcrRoyaltyContract.RoyaltyContract
               && mcrRoyaltyTable.RoyaltyCode           == mcrRoyaltyItemCode.RoyaltyCode
            notexists join mcrRoyaltyVendTable
            where mcrRoyaltyVendTable.CustInvoiceTransRefRecId  == custInvoiceTransLocal.RecId
               && mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId   == mcrRoyaltyTable.RecId
            #TAMRebateInventDimExistsJoin(mcrRoyaltyItemCode.InventDimId, inventDim, inventDimTransaction)
        {
            inventDimRoyaltyItemCode = InventDim::find(mcrRoyaltyItemCode.InventDimID);
            inventDimcustInvoiceTrans = InventDim::find(custInvoiceTransLocal.InventDimId);
            if (InventDim::isInventDimContain(inventDimRoyaltyItemCode, inventDimcustInvoiceTrans, List::merge(InventDim::dimStorageDimFieldList(), InventDim::dimProductDimFieldList())))
            {
                this.calculateSums(custInvoiceTransLocal);

                calcDate = mcrRoyaltyContract.setCalcDate(salesLine);

                if (!mcrRoyaltyTable.checkValidDate(calcDate))
                {
                    continue;
                }

                if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::CWUnit
                && !PdsGlobal::pdsIsCWItem(custInvoiceTransLocal.ItemId))
                {
                    continue;
                }

                this.convertSums(mcrRoyaltyContract);

                if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::InventoryUnit)
                {
                    calcQty = sumQty;
                    calcUOM = custInvoiceTransLocal.SalesUnit;
                }
                else
                {
                    calcQty = sumCWQty;
                    calcUOM = custInvoiceTransLocal.pdsCWUnitId();
                }

                if (mcrRoyaltyContract.RoyaltyTakenFrom == MCRRoyaltyTakenFrom::Gross)
                {
                    calcAmt = sumGrossAmt;
                }
                else
                {
                    calcAmt = sumNetAmt;
                }

                mcrRoyaltyTablePricingLocal = MCRRoyaltyTablePricing::selectMCRRoyaltyTablePricing(
                                            mcrRoyaltyTable,
                                            custInvoiceTransLocal,
                                            calcQty,
                                            custInvoiceTransLocal.SalesUnit,
                                            mcrRoyaltyContract.Currency,
                                            calcAmt,
                                            mcrRoyaltyContract.RecId);

                if (mcrRoyaltyTablePricingLocal)
                {
                    this.createRoyalty(custInvoiceTransLocal, mcrRoyaltyTablePricingLocal, mcrRoyaltyContract.RecId);
                }
                else if (mcrRoyaltyContract.CumulateSalesBy != MCRRoyaltyCumulationPeriod::Invoice
                    && !MCRRoyaltyVendTable::checkIfRoyaltyClaimsExist(mcrRoyaltyTable.RecId, custInvoiceTransLocal.RecId))
                {
                    this.createZeroRoyalty(mcrRoyaltyTable, custInvoiceTransLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustInvoiceJour</c> table record for which the royalty is being created.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table record.
    /// </param>
    /// <returns>
    /// The customer invoice journal record.
    /// </returns>
    protected CustInvoiceJour parmCustInvoiceJour(Common _custInvoiceJour = custInvoiceJour)
    {
        if (!prmisDefault(_custInvoiceJour))
        {
            custInvoiceJour = _custInvoiceJour;
        }

        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustInvoiceTrans</c> table records for which the royalty is being created.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table records.
    /// </param>
    /// <returns>
    /// The vendor invoice transactions.
    /// </returns>
    protected CustInvoiceTrans parmCustInvoiceTrans(Common  _custInvoiceTrans = custInvoiceTrans)
    {
        if (!prmisDefault(_custInvoiceTrans))
        {
            custInvoiceTrans = _custInvoiceTrans;
        }

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTransSums</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the amount and quantity totals for the royalty.
    /// </summary>
    private void resetTransSums()
    {
        sumCWQty    = 0;
        sumQty      = 0;
        sumGrossAmt = 0;
        sumNetAmt   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the creation of royalties from the invoice transactions.
    /// </summary>
    public void run()
    {
        CustInvoiceTrans    localCustInvoiceTrans;
        SalesLine           localSalesLine;

        if (this.validate())
        {
            while select localCustInvoiceTrans
                where localCustInvoiceTrans.SalesId                 == custInvoiceJour.SalesId
                    && localCustInvoiceTrans.InvoiceId              == custInvoiceJour.InvoiceId
                    && localCustInvoiceTrans.InvoiceDate            == custInvoiceJour.InvoiceDate
                    && localCustInvoiceTrans.NumberSequenceGroup    == custInvoiceJour.NumberSequenceGroup
                exists join localSalesLine
                    where localSalesLine.InventTransId              == localCustInvoiceTrans.InventTransId
            {
                this.parmCustInvoiceTrans(localCustInvoiceTrans);
                this.resetTransSums();
                this.findMCRRoyaltyTableAndCreate(localCustInvoiceTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>CustInvoiceJour</c> table record.
    /// </summary>
    /// <returns>
    /// true if the customer invoice journal is present; otherwise false.
    /// </returns>
    protected boolean validate()
    {
        boolean ret = true;

        if (!custInvoiceJour)
        {
            ret = checkFailed("@MCR4410058");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>MCRRoyaltyVendTableFindAndCreate</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>MCRRoyaltyVendTableFindAndCreate</c> class.
    /// </returns>
    public static MCRRoyaltyVendTableFindAndCreate construct()
    {
        return new MCRRoyaltyVendTableFindAndCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>MCRRoyaltyVendTableFindAndCreate</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table.
    /// </param>
    /// <returns>
    /// A new instance of <c>MCRRoyaltyVendTableFindAndCreate</c> class.
    /// </returns>
    public static MCRRoyaltyVendTableFindAndCreate newFromCustInvoiceJour(
        CustInvoiceJour  _custInvoiceJour)
    {
        MCRRoyaltyVendTableFindAndCreate    findAndCreate = MCRRoyaltyVendTableFindAndCreate::construct();

        findAndCreate.parmCustInvoiceJour(_custInvoiceJour);

        return findAndCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>MCRRoyaltyVendTableFindAndCreate</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table.
    /// </param>
    /// <returns>
    /// A new instance of <c>MCRRoyaltyVendTableFindAndCreate</c> class.
    /// </returns>
    public static MCRRoyaltyVendTableFindAndCreate newFromCustInvoiceTrans(
        CustInvoiceJour  _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans)
    {
        MCRRoyaltyVendTableFindAndCreate    findAndCreate = MCRRoyaltyVendTableFindAndCreate::construct();

        findAndCreate.parmCustInvoiceJour(_custInvoiceJour);
        findAndCreate.parmCustInvoiceTrans(_custInvoiceTrans);

        return findAndCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>