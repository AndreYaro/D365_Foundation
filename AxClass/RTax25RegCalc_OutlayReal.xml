<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_OutlayReal</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_OutlayReal extends RTax25RegCalc implements BatchRetryable
{
    Set     profits;
    int     transCount;
    Amount                      profitTotal, registerTotal;
    RTax25Query                 childQuery;
    RTax25RegisterJournalTrans  childJournalTrans;
    RecordSortedList            registerTransList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProfits</Name>
				<Source><![CDATA[
        private void addProfits(RefRecId _profitTableRecId)
    {
        if (RTax25ProfitTable::checkProfitRecursion(RTax25ProfitTable::find(_profitTableRecId).ParentProfitRecId,
                                                                            _profitTableRecId))
        {
            profits.add(_profitTableRecId);
            this.buildChildProfit(_profitTableRecId, _profitTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildChildProfit</Name>
				<Source><![CDATA[
        private void buildChildProfit(
        RefRecId _parentProfitTableRecId,
        RefRecId _mainProfitTableRecId)
    {
        RTax25ProfitTable  rTax25ProfitTable;

        while select RecId from rTax25ProfitTable
            where rTax25ProfitTable.ParentProfitRecId  == _parentProfitTableRecId
               && rTax25ProfitTable.RecId              != _mainProfitTableRecId
        {
            this.addProfits(rTax25ProfitTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProfitList</Name>
				<Source><![CDATA[
private void buildProfitList()
    {
        RTax25RegisterProfit rTax25RegisterProfit;

        profits             = new Set(Types::Int64);

        while select rTax25ProfitTable
            from rTax25RegisterProfit
            where  rTax25RegisterProfit.RegisterId == regType.registerId()
        {
            this.addProfits(rTax25RegisterProfit.rTax25ProfitTable);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
public void calc()
    {
        try
        {
            ttsbegin;

                super();

                this.buildProfitList();
                this.loopRegisterTrans();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>getProfitTableRecId</Name>
				<Source><![CDATA[
        private RefRecId getProfitTableRecId(RTax25ProfitTable _profitTable)
    {
        return _profitTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFooter</Name>
				<Source><![CDATA[
private void insertFooter(RefRecId _profitTableRecId)
    {
        regQuery.addFooterRecord(_profitTableRecId,
                                 [dateNull(),
                                 RTax25ProfitTable::find(_profitTableRecId).ProfitId,
                                  "@SYS58659",
                                  profitTotal],
                                 0,
                                 strFmt("@GLS103999", RTax25ProfitTable::find(_profitTableRecId).ProfitId),
                                 transCount);

        profitTotal     = 0;
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
private void insertHeader(RefRecId _profitTableRecId)
    {
        regQuery.addHeaderRecord(_profitTableRecId, conNull(), 0, strFmt("@GLS104111", RTax25ProfitTable::find(_profitTableRecId).ProfitId), transCount);
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
private void insertRegisterFooter()
    {
        regQuery.addFooterRecord(0, [dateNull(), "", "@GLS104902", registerTotal], 0, "@GLS104902", transCount);
    }
]]></Source>
			</Method>
			<Method>
				<Name>insertTrans</Name>
				<Source><![CDATA[
#define.Deferrals             ([ 8, 4, 0, 7 ])
    #define.IntangibleDepreciation([ 1, 2, 3, 9 ])
    #define.StdCurrentExpense     ([ 4, 3, 0, 8 ])
    #define.InventReceipt         ([ 2, 1, 0, 13])
    #define.NonInventReceipt      ([ 2, 1, 4, 9 ])
    #define.OutlayRealTax         ([ 3, 1, 0, 6 ])
    #define.ConPos9(9)
    private void insertTrans(RTax25RegisterTransMap _regTrans)
    {
        RTax25RegisterTrans_OutlayReal regTrans;

        RTax25FieldId               dateField,
                                    txtField,
                                    txtField2,
                                    amountField;
        TransDate                   dateValue;

        boolean                     set2beginningOfMonth = false;
        int                         periodCount = 1;

        Amount                      profitAmount;
        container                   values;
        str                         txt, txt2;

        if (! profits.in(_regTrans.RTax25ProfitTable))
            return;

        switch (_regTrans.TableId)
        {
            case tablenum(RTax25RegisterTrans_Deferrals):
                periodCount = childQuery.getField(#ConPos9);
                if (! periodCount)
                    return;
                [ dateField, txtField, txtField2, amountField ] = #Deferrals;
                set2beginningOfMonth                 = true;
                break;
            case tablenum(RTax25RegisterTrans_IntangibleDepr):
                [ dateField, txtField, txtField2, amountField ] = #IntangibleDepreciation;
                break;
            case tablenum(RTax25RegisterTrans_StdCurrentExpense):
                [ dateField, txtField, txtField2, amountField ] = #StdCurrentExpense;
                break;
            case tablenum(RTax25RegisterTrans_InventReceipt):
                [ dateField, txtField, txtField2, amountField ] = #InventReceipt;
                break;
            case tablenum(RTax25RegisterTrans_NonInventReceipt):
                [ dateField, txtField, txtField2, amountField ] = #NonInventReceipt;
                break;
            case tablenum(RTax25RegisterTrans_OutlayRealTax):
                [ dateField, txtField, txtField2, amountField ] = #OutlayRealTax;
                break;
            default                                         :
                throw error(strFmt("@GLS104769", childJournalTrans.RegisterId));
        }

        txt  = txtField  ? childQuery.getField(txtField)  : nullValueFromType(Types::String);
        txt2 = txtField2 ? childQuery.getField(txtField2) : nullValueFromType(Types::String);

        if (amountField)
        {
            profitAmount = childQuery.getField(amountField);
        }
        else
        {
            profitAmount = 0.0;
        }

        if (dateField)
        {
            dateValue    = childQuery.getField(dateField);
        }
        else
        {
            dateValue    = dateNull();
        }

        if (_regTrans.TableId == tablenum(RTax25RegisterTrans_Deferrals))
        {
            profitAmount = -profitAmount;
            dateValue = dateMthFwd(dateValue, periodCount - 1);
        }

        if (set2beginningOfMonth)
        {
            dateValue = num2date(date2num(dateValue) + 1 - dayOfMth(dateValue));
        }

        values       = [dateValue,
                        RTax25ProfitTable::find(_regTrans.rTax25ProfitTable).ProfitId,
                        txt + (txt && txt2 ? "@SYS35667"+"@GLS102908" : "") + txt2,
                        profitAmount ];

        transCount ++;
        regTrans = regQuery.addBodyRecord(_regTrans.rTax25ProfitTable,
                               values,
                                          _regTrans.TableId,
                                          _regTrans.RecId,
                                          _regTrans.LineDescription,
                                          -transCount,
                               profitAmount);

        regTrans.LineNumber = -regTrans.LineNumber;
        registerTransList.ins(regTrans);
    }
]]></Source>
			</Method>
			<Method>
				<Name>loopRegisterTrans</Name>
				<Source><![CDATA[
private void loopRegisterTrans()
    {
        int                  idx;
        TableId              detachedTableId;
        RTax25RegisterTrans_OutlayReal    regTrans;
        boolean              loop;
        container            childRegisters = regType.childRegisters();
        RefRecId             prevProfit = 0;

        if (profits.empty())
        {
            info("@GLS104907");
            return;
        }

        if (! conlen(childRegisters))
        {
            info("@GLS104908");
            return;
        }

        this.progressInit("", conlen(childRegisters) + 1);
        progress.setCaption("@GLS101407");
        progress.setCount(0);

        transCount = 0;

        for (idx = 1; idx <= conlen(childRegisters); idx ++)
        {
            childJournalTrans = RTax25RegCalcController::findChildJournalTrans(conpeek(childRegisters, idx), registerJournalTrans);
            childQuery = RTax25Query::newParameters(conpeek(childRegisters, idx), childJournalTrans, true);
            detachedTableId = childQuery.getRegType().detachedTableId();

            if (childQuery.first())
            {
                do
                {
                    this.insertTrans(childQuery.getRecord());
                }
                while (childQuery.next());
            }

            progress.setText(childQuery.getRegType().description());
            progress.incCount();
        }

        progress.setText("@SYP4860779");

        transCount = 0;
        loop = registerTransList.first(regTrans);
        while (loop)
        {
            if (regTrans.RTax25ProfitTable != prevProfit)
            {
                if (prevProfit)
                {
                    transCount++;
                    this.insertFooter(prevProfit);
                }
                prevProfit = regTrans.RTax25ProfitTable;
                transCount++;
                this.insertHeader(prevProfit);
                }

            transCount++;

            regTrans.LineNumber = -regTrans.LineNumber;
            if (regQuery.getSortedList().find(regTrans))
            {
                regQuery.getSortedList().del(regTrans);
                regTrans.LineNumber = transCount;
                regQuery.getSortedList().ins(regTrans);
            }

            profitTotal   += regTrans.profitAmount;
            registerTotal += regTrans.profitAmount;

            loop = registerTransList.next(regTrans);
        }
        if (prevProfit)
        {
            transCount++;
            this.insertFooter(prevProfit);
        }
        progress.incCount();

        transCount++;
        this.insertRegisterFooter();
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;

        ret = super(_registerJournalTrans, _batch);
        registerTransList = new RecordSortedList(tablenum(RTax25RegisterTrans_OutlayReal));
        registerTransList.sortOrder(fieldnum(RTax25RegisterTrans_OutlayReal, RTax25ProfitTable), fieldnum(RTax25RegisterTrans_OutlayReal, LineNumber));

        return ret;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>