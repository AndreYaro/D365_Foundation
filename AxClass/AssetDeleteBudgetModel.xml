<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDeleteBudgetModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetDeleteBudgetModel extends RunBaseBatch implements BatchRetryable
{
    // The following fields can be directly persisted to a container as they are primitive data types or tables.
    NoYesId                 deleteLedger;
    NoYesId                 deleteAsset;

    // The following fields cannot be directly persisted to a container as they are object type.
    QueryRun                queryRun; // This field is packed explicitly in the pack method.
    DialogField             dialogdeleteLedger;
    DialogField             dialogdeleteAsset;

    // The following fields are for processing and don't need to be persisted to a container.
    BudgetTransactionCode budgetTransactionCode;

    Query queryExistingLedgerBudget;
    QueryBuildRange qbrBudgetTransactionLineAssetBudget_AssetBudget;
    QueryBuildRange qbrBudgetTransactionHeader_TransactionStatus;

    // Map to cache reversal managers by budget model
    // Key: Budget model id
    // Value: BudgetTransactionReverseManager
    Map reversalManagers;

    // This list defines which fields will be persisted and restored via the system's
    // SysLastValue functionality.
    #DEFINE.SysLastValuesCurrentVersion(100)
    #LOCALMACRO.SysLastValuesList
        deleteLedger,
        deleteAsset
    #ENDMACRO

    #DEFINE.SysLastValuesForkedFromVersion(1) // Defines what version of CurrentList that SysLastValuesList forked from.

    // This list defines how the object is serialized and unserialized as it is sent across the wire. This
    // list should contain all non-object types defined on this class declaration.
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        deleteLedger,
        deleteAsset
    #ENDMACRO

    #DEFINE.Version1(1)
    #LOCALMACRO.CurrentListV1
        deleteLedger,
        deleteAsset
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCompletedBudgetTransLinesToReverse</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the completed ledger budget transaction lines to the set to reverse.
    /// </summary>
    /// <param name="_assetBudget">
    ///    The asset budget transaction that is associated with the ledger budget transaction lines.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addCompletedBudgetTransLinesToReverse(AssetBudget _assetBudget)
    {
        QueryRun transToReverseQueryRun;
        BudgetTransactionLine budgetTransactionLine;

        BudgetTransactionReverseManager reversalManager;

        if (queryExistingLedgerBudget == null)
        {
            // Initialize the query for existing budget transactions to be reversed.
            this.buildQueryExistingLedgerBudget();
        }

        // Set up the range for existing related budget transaction lines for asset budget.
        qbrBudgetTransactionLineAssetBudget_AssetBudget.value(SysQuery::value(_assetBudget.RecId));

        // Set up the range to restrict to completed budget transaction lines for finding lines to reverse.
        qbrBudgetTransactionHeader_TransactionStatus.value(int2str(enum2int(BudgetTransactionStatus::Completed)));

        // Get the completed budget transaction lines to reverse.
        transToReverseQueryRun = new QueryRun(queryExistingLedgerBudget);

        while (transToReverseQueryRun.next())
        {
            // Get reversal manager for budget model.
            if (reversalManagers.exists(_assetBudget.BudgetModel))
            {
                reversalManager = reversalManagers.lookup(_assetBudget.BudgetModel);
            }
            else
            {
                reversalManager = BudgetTransactionReverseManager::construct(
                                    budgetTransactionCode.Name,
                                    _assetBudget.BudgetModel);
            }

            budgetTransactionLine = transToReverseQueryRun.get(tablenum(BudgetTransactionLine)) as BudgetTransactionLine;

            if (budgetTransactionLine.RecId != 0)
            {
                // Add budget transaction line to reversal manager.
                reversalManager.addTransactionLineToReverse(budgetTransactionLine.RecId);

                // Add reversal manager to cache.
                reversalManagers.insert(_assetBudget.BudgetModel, reversalManager);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryExistingLedgerBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the query for ledger budget transactions that exist.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void buildQueryExistingLedgerBudget()
    {
        QueryBuildDataSource qbdsBudgetTransactionLine;
        QueryBuildDataSource qbdsBudgetTransactionLineReversed;
        QueryBuildDataSource qbdsBudgetTransactionLineReversing;
        QueryBuildDataSource qbdsBudgetTransactionHeader;

        DictRelation reversedLineRelation;
        DictRelation reversingLineRelation;

        // Initialize query.
        queryExistingLedgerBudget = new Query();

        // Add BudgetTransactionLine to query for previously transferred budget transactions.
        qbdsBudgetTransactionLine = queryExistingLedgerBudget.addDataSource(tablenum(BudgetTransactionLine));
        qbrBudgetTransactionLineAssetBudget_AssetBudget = qbdsBudgetTransactionLine.addRange(fieldnum(BudgetTransactionLine, AssetBudget));

        // Add BudgetTransactionLineReverse to query for previously transferred budget transactions to exclude reversed budget transactions.
        qbdsBudgetTransactionLineReversed = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionLineReverse));
        reversedLineRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 1);
        reversedLineRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversedBudgetTransactionLine));
        qbdsBudgetTransactionLineReversed.addRelation(reversedLineRelation);
        qbdsBudgetTransactionLineReversed.joinMode(JoinMode::NoExistsJoin);

        // Add BudgetTransactionLineReverse to query for previous transferred budget transactions to exclude reversed budget transactions.
        qbdsBudgetTransactionLineReversing = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionLineReverse));
        reversingLineRelation = new DictRelation(tablenum(BudgetTransactionLineReverse), UtilElementType::Table, 2);
        reversingLineRelation.loadFieldRelation(fieldnum(BudgetTransactionLineReverse, ReversingBudgetTransactionLine));
        qbdsBudgetTransactionLineReversing.addRelation(reversingLineRelation);
        qbdsBudgetTransactionLineReversing.joinMode(JoinMode::NoExistsJoin);

        // Add BudgetTransactionHeader to query for previously transferred budget transactions.
        qbdsBudgetTransactionHeader = qbdsBudgetTransactionLine.addDataSource(tablenum(BudgetTransactionHeader));
        qbdsBudgetTransactionHeader.relations(true);
        qbdsBudgetTransactionHeader.joinMode(JoinMode::ExistsJoin);

        // Restrict BudgetTransactionHeader to transaction type to Fixed Asset.
        qbdsBudgetTransactionHeader.addRange(fieldnum(BudgetTransactionHeader, BudgetTransactionType)).value(int2str(enum2int(BudgetTransactionType::FixedAsset)));

        // Add range on BudgetTransactionHeader to restrict results by TransactionStatus.
        qbrBudgetTransactionHeader_TransactionStatus = qbdsBudgetTransactionHeader.addRange(fieldnum(BudgetTransactionHeader, TransactionStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDraftBudgetTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the draft ledger budget transaction lines.
    /// </summary>
    /// <param name="_assetBudget">
    ///    The asset budget transaction that is associated with the ledger budget transaction lines.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deleteDraftBudgetTransLines(AssetBudget _assetBudget)
    {
        QueryRun transToDeleteQueryRun;
        BudgetTransactionLine budgetTransactionLine;

        if (queryExistingLedgerBudget == null)
        {
            // Initialize the query for existing budget transactions to be reversed.
            this.buildQueryExistingLedgerBudget();
        }

        // Set up the range for existing related budget transaction lines for asset budget.
        qbrBudgetTransactionLineAssetBudget_AssetBudget.value(SysQuery::value(_assetBudget.RecId));

        // Set up the range to restrict to draft budget transaction lines for finding lines to delete.
        qbrBudgetTransactionHeader_TransactionStatus.value(int2str(enum2int(BudgetTransactionStatus::Draft)));

        // Get the draft budget transaction lines to delete.
        transToDeleteQueryRun = new QueryRun(queryExistingLedgerBudget);

        while (transToDeleteQueryRun.next())
        {
            budgetTransactionLine = transToDeleteQueryRun.get(tablenum(BudgetTransactionLine)) as BudgetTransactionLine;

            if (budgetTransactionLine.RecId != 0)
            {
                budgetTransactionLine.selectForUpdate(true);

                // Call delete to remove the transferred data from budgetary control.
                budgetTransactionLine.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;

        dialog.addGroup("@SYS26269");
        dialogdeleteAsset = dialog.addField(extendedtypestr(NoYesId),"@SYS71127");
        dialogdeleteAsset.value(deleteAsset);

        dialogdeleteLedger = dialog.addField(extendedtypestr(NoYesId),"@SYS71128");
        dialogdeleteLedger.value(deleteLedger);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;

        deleteAsset  = dialogdeleteAsset.value();
        deleteLedger = dialogdeleteLedger.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing (by using <c>pack</c> and <c>unpack</c>) and
    ///    persisting user input (<c>SysLastValue</c>).
    /// </remarks>
    public void getLast()
    {
        container packedValues;
        ;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled   = true;
        inGetSaveLast   = true;

        // Restore the pertinent values from the SysLastValue table.
        packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                               this.lastValueUserId(),
                                               this.lastValueType(),
                                               this.lastValueElementName(),
                                               this.lastValueDesignName());

        this.unpackSysLastValues(packedValues);

        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        ;

        super();
        queryRun = new QueryRun(querystr(assetBudgetModel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        ;

        return [#CurrentVersion, [#CurrentList, queryRun.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the object for the <c>SysLastValue</c> framework to support persisting user input.
    /// </summary>
    /// <returns>
    ///    A container storing the list of values specified by the <c>SysLastValuesList</c> macro.
    /// </returns>
    /// <remarks>
    ///    This method brings support for inheritance to the <c>SysLastValue</c> implementation on this class.
    ///    Derivative classes should override this method and provide their own implementation with a pack
    ///    list like "[#SysLastValuesList, super()]".
    /// </remarks>
    public container packSysLastValues()
    {
        ;

        return [#SysLastValuesCurrentVersion, #SysLastValuesList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c>.
    /// </summary>
    /// <returns>
    /// The <c>QueryRun</c> object.
    /// </returns>
    /// <remarks>
    /// This method is used if the dialog box is a query prompt and also if a Select menu item is added to
    /// a dialog box. Do not initialize the <c>queryRun</c> object whenever the method is called. This
    /// should be done in the <c>unpack</c> and <c>initParmDefault</c> methods. Otherwise, it should be
    /// used in the <c>init</c> method or in the method only when it is not initialized.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        AssetBudget assetBudget;
        MapEnumerator reversalsToProcess;
        BudgetTransactionReverseManager reversalManager;

        ttsbegin;

        // Get the default budget transaction code for Asset.
        budgetTransactionCode = BudgetTransactionCode::findDefaultByTransactionType(BudgetTransactionType::FixedAsset);

        // Initialize map for caching reversal managers.
        reversalManagers = new Map(Types::String, Types::Class);

        while (queryRun.next())
        {
            assetBudget = queryRun.get(tablenum(AssetBudget)) as AssetBudget;

            if (assetBudget.BudgetPostingStatus == AssetBudgetPostingStatus::PostedToBudgets && deleteLedger)
            {
                this.addCompletedBudgetTransLinesToReverse(assetBudget);
                this.deleteDraftBudgetTransLines(assetBudget);
            }

            if (deleteAsset)
            {
                assetBudget.delete();
            }
        }

        if (deleteLedger == true)
        {
            // Remove any draft budget transaction headers where all budget transaction lines were deleted.
            AssetDeleteBudgetModel::deleteDraftBudgetTransHeaders();
        }

        ttscommit;

        if (reversalManagers.elements() > 0)
        {
            // Process the ledger budget transaction reversals outside of the tts to ensure any
            // budget funds available checks for the reversal are processed as confirmed.
            reversalsToProcess = reversalManagers.getEnumerator();

            while (reversalsToProcess.moveNext())
            {
                reversalManager = reversalsToProcess.currentValue();
                reversalManager.reverseTransactionLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    ///    This is a customization of the standard <c>SysLastValues</c> functionality and is required to
    ///    support the split implementation of serializing (by using <c>pack</c> and <c>unpack</c>) and
    ///    persisting user input (<c>SysLastValue</c>).
    /// </remarks>
    public void saveLast()
    {
        ;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        //super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast   = true;

        // Persist the pertinent values to the SysLastValue table.
        xSysLastValue::putValue(this.packSysLastValues(),
                                this.lastValueDataAreaId(),
                                this.lastValueUserId(),
                                this.lastValueType(),
                                this.lastValueElementName(),
                                this.lastValueDesignName());

        // This is a RunBaseBatch derivative class. Manually save the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::saveLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.
    /// </remarks>
    public boolean showQueryValues()
    {
        ;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version     = conpeek(packedClass,1);
        PackedQueryRun packedQueryRun;
        container packedValues;
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedValues] = packedClass;

                [#CurrentList, packedQueryRun] = packedValues;

                break;
            case #Version1:
                [version, #CurrentListV1, packedQueryRun] = packedClass;

                break;
            default :
                return false;
        }

        if (SysQuery::isPackedOk(packedQueryRun))
        {
            queryRun = new QueryRun(packedQueryRun);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the object for <c>SysLastValue</c> framework to support persisting user input.
    /// </summary>
    /// <param name="_packedValues">
    /// A packed instance of <c>LedgerJournalSave</c>.
    /// </param>
    /// <remarks>
    /// This method brings support for inheritance to the <c>SysLastValue</c> implementation on this class.
    /// Derivative classes should override this method and provide their own implementation with an unpack
    /// list such as the following: [#SysLastValuesList, baseClassPackedValues] = _packedValues;
    /// super(baseClassPackedValues);
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        Version version = RunBase::getVersion(_packedValues);
        ;

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList] = _packedValues;

                break;
            case #SysLastValuesForkedFromVersion:
                // This pack list came from the forked version of the
                // CurrentList list.
                [version, #CurrentListV1] = _packedValues;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDraftBudgetTransHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the draft ledger budget transaction headers that have no ledger budget transaction lines.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void deleteDraftBudgetTransHeaders()
    {
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetTransactionLine budgetTransactionLine;

        delete_from budgetTransactionHeader
            where budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                && budgetTransactionHeader.BudgetTransactionType == BudgetTransactionType::FixedAsset
            notexists join budgetTransactionLine
                where budgetTransactionLine.BudgetTransactionHeader == budgetTransactionHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS71097";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AssetDeleteBudgetModel  assetDeleteBudgetModel = new AssetDeleteBudgetModel();
        ;

        if (assetDeleteBudgetModel.prompt())
        {
            assetDeleteBudgetModel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>