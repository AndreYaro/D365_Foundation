<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvCheck_ModelGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventStdCostConvCheck_ModelGroup extends InventStdCostConvCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the new inventory model group can be updated on the item being checked.
    /// </summary>
    /// <returns>
    ///    true if accounts could be found; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean                 ret = true;

        if (!this.validateField())
            ret = false;

        if (!this.validateWrite())
            ret = false;

        if (!this.validateModelPostOnhandPhysical())
            ret = false;

        if (!this.validateModelPostOnhandFinancial())
            ret = false;

        if (!this.validatePhysicalInventTransNotPosted())
            ret = false;

        if (!this.validateFinancialInventTransNotPosted())
            ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    protected boolean validateField()
    {
        boolean                 ret = true;
        // <GEERU>
        // </GEERU>

        InventModelGroupItem inventModelGroupItem     = InventModelGroupItem::findByItemIdLegalEntity(inventStdCostConvItem.ItemId);
        inventModelGroupItem.ModelGroupId             = inventStdCostConvItem.ModelGroupId;
        InventModelType      inventModelType          = inventModelGroupItem.modelGroup().inventModelType();
        // <GEERU>
        InventModelType      inventModelTypeSecCur_RU = inventModelGroupItem.modelGroup().inventModelTypeSecCur_RU();
        // </GEERU>

        int infologNum = infolog.num();

        // <GEERU>
        if (inventStdCostConvItem.inventStdCostConv().InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur)
        {
            ret = inventModelType.validateFieldInventModelGroupItem(inventModelGroupItem, fieldstr(inventModelGroupItem, ModelGroupId));
        }
        else
        {
            ret = inventModelTypeSecCur_RU.validateFieldInventModelGroupItem(inventModelGroupItem, fieldstr(inventModelGroupItem, ModelGroupId));
        }
        // </GEERU>

        if (!ret)
        {
            SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(infolog.copy(infologNum + 1,infolog.num()));
            while (sysInfologEnumerator.moveNext())
            {
                this.addError(sysInfologEnumerator.currentMessage());
            }
            infolog.clear(infologNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialInventTransNotPosted</Name>
				<Source><![CDATA[
    protected boolean validateFinancialInventTransNotPosted()
    {
        boolean                 ret = true;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventTransPosting      inventTransPosting;
    
        #macro.ReferenceCategoryTransferFilterOut
            where inventTransOrigin.ItemId            == inventStdCostConvItem.ItemId               &&
                  inventTransOrigin.ReferenceCategory != InventTransType::InventTransfer            &&
                  inventTransOrigin.ReferenceCategory != InventTransType::TransferOrderShip         &&
                  inventTransOrigin.ReferenceCategory != InventTransType::TransferOrderReceive      &&
                  inventTransOrigin.ReferenceCategory != InventTransType::WMSTransport              &&
                  inventTransOrigin.ReferenceCategory != InventTransType::QuarantineOrder           &&
                  inventTransOrigin.ReferenceCategory != InventTransType::SummedUp                  &&
                  inventTransOrigin.ReferenceCategory != InventTransType::Blocking                  &&
                  inventTransOrigin.ReferenceCategory != InventTransType::KanbanJobTransferIssue    &&
                  inventTransOrigin.ReferenceCategory != InventTransType::KanbanJobTransferReceipt  &&
                  inventTransOrigin.ReferenceCategory != InventTransType::WHSWork                   &&
                  inventTransOrigin.ReferenceCategory != InventTransType::WHSContainer              &&
                  inventTransOrigin.ReferenceCategory != InventTransType::WHSQuarantine             &&
                  inventTransOrigin.ReferenceCategory != InventTransType::WHSOrderCommittedReservation
        #endmacro
    
        select firstonly RecId from inventTransOrigin
            #ReferenceCategoryTransferFilterOut
        exists join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId  &&
                  inventTrans.ValueOpen         == InventTransOpen::Yes     &&
                ((inventTrans.StatusIssue       == StatusIssue::Sold        && inventTrans.StatusReceipt == StatusReceipt::None) ||
                 (inventTrans.StatusReceipt     == StatusReceipt::Purchased && inventTrans.StatusIssue   == StatusIssue::None))
        notexists join inventTransPosting
            where inventTransPosting.InventTransOrigin      == inventTrans.InventTransOrigin
               && inventTransPosting.IsPosted               == NoYes::Yes
               && inventTransPosting.TransDate              == inventTrans.DateFinancial
               && inventTransPosting.Voucher                == inventTrans.Voucher
               && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial;
    
        ret = inventTransOrigin.RecId == 0;

        if (ret)
        {
            select firstonly RecId from inventTransOrigin
                #ReferenceCategoryTransferFilterOut
            exists join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId  &&
                      inventTrans.ValueOpen         == InventTransOpen::Yes     &&
                    ((inventTrans.StatusIssue       == StatusIssue::Sold        && inventTrans.StatusReceipt == StatusReceipt::None) ||
                     (inventTrans.StatusReceipt     == StatusReceipt::Purchased && inventTrans.StatusIssue   == StatusIssue::None))
            exists join inventTransPosting
                where inventTransPosting.InventTransOrigin      == inventTrans.InventTransOrigin
                   && inventTransPosting.IsPosted               == NoYes::Yes
                   && inventTransPosting.LedgerDimension        == 0
                   && inventTransPosting.TransDate              == inventTrans.DateFinancial
                   && inventTransPosting.Voucher                == inventTrans.Voucher
                   && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial;
    
            ret = inventTransOrigin.RecId == 0;
        }

        if (!ret)
        {
            this.addError("@SYS121745");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModelPostOnhandFinancial</Name>
				<Source><![CDATA[
    protected boolean validateModelPostOnhandFinancial()
    {
        boolean                 ret = true;
        InventModelGroup        inventModelGroup = InventTable::modelGroupByItemId(inventStdCostConvItem.ItemId);

        if (!inventModelGroup.PostOnhandFinancial)
        {
            this.addError(strFmt("@SYS121743", inventStdCostConvItem.ItemId, inventModelGroup.ModelGroupId, fieldPName(InventModelGroup, PostOnhandFinancial)));
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateModelPostOnhandPhysical</Name>
				<Source><![CDATA[
    protected boolean validateModelPostOnhandPhysical()
    {
        boolean                 ret = true;
        InventModelGroup        inventModelGroup = InventTable::modelGroupByItemId(inventStdCostConvItem.ItemId);

        if (!inventModelGroup.PostOnhandPhysical)
        {
            this.addError(strFmt("@SYS121743", inventStdCostConvItem.ItemId, inventModelGroup.ModelGroupId, fieldPName(InventModelGroup, PostOnhandPhysical)));
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePhysicalInventTransNotPosted</Name>
				<Source><![CDATA[
    protected boolean validatePhysicalInventTransNotPosted()
    {
        boolean                 ret = true;
        InventTrans             inventTrans;
        InventTransPosting      inventTransPosting;

        select firstonly RecId from inventTrans
            where inventTrans.ItemId    == inventStdCostConvItem.ItemId
             &&   inventTrans.ValueOpen == InventTransOpen::Yes
             && ((inventTrans.StatusIssue   == StatusIssue::Deducted    && inventTrans.StatusReceipt    == StatusReceipt::None)
             ||  (inventTrans.StatusReceipt == StatusReceipt::Received  && inventTrans.StatusIssue      == StatusIssue::None))
        notexists join inventTransPosting
            where inventTransPosting.InventTransOrigin      == inventTrans.InventTransOrigin
             &&   inventTransPosting.IsPosted               == NoYes::Yes
             &&   inventTransPosting.TransDate              == inventTrans.DatePhysical
             &&   inventTransPosting.Voucher                == inventTrans.VoucherPhysical
             &&   inventTransPosting.InventTransPostingType == InventTransPostingType::Physical;

        if (inventTrans.RecId)
        {
            this.addError("@SYS121744");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    protected boolean validateWrite()
    {
        boolean                 ret = true;
        // <GEERU>
        // </GEERU>

        InventModelGroupItem inventModelGroupItem     = InventModelGroupItem::findByItemIdLegalEntity(inventStdCostConvItem.ItemId);
        inventModelGroupItem.ModelGroupId             = inventStdCostConvItem.ModelGroupId;
        InventModelType      inventModelType          = inventModelGroupItem.modelGroup().inventModelType();
        // <GEERU>
        InventModelType      inventModelTypeSecCur_RU = inventModelGroupItem.modelGroup().inventModelTypeSecCur_RU();
        // </GEERU>

        int infologNum = infolog.num();

        InventTable inventTable = inventStdCostConvItem.inventTable();
        // <GEERU>
        if (inventStdCostConvItem.inventStdCostConv().InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur)
        {
            // </GEERU>
            ret = inventModelType.validateWriteInventTable(inventTable);
            ret = ret && inventModelType.validateWriteInventModelGroupItem(inventModelGroupItem, false);
            // <GEERU>
        }
        else
        {
            ret = inventModelTypeSecCur_RU.validateWriteInventTable(inventTable);
            ret = ret && inventModelTypeSecCur_RU.validateWriteInventModelGroupItem(inventModelGroupItem, false);
        }
        // </GEERU>

        if (!ret)
        {
            SysInfologEnumerator sysInfologEnumerator = SysInfologEnumerator::newData(infolog.copy(infologNum + 1,infolog.num()));
            while (sysInfologEnumerator.moveNext())
            {
                this.addError(sysInfologEnumerator.currentMessage());
            }
            infolog.clear(infologNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an <c>InventStdCostConvCheck_ModelGroup</c> object.
    /// </summary>
    /// <param name="_inventStdCostConvItem">
    ///    An <c>InventStdCostConvItem</c> record buffer that must be checked.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConvCheck_ModelGroup</c> object
    /// </returns>
    /// <remarks>
    ///    This method should not be called directly. An <c>InventStdCostConvCheck</c> object should be
    ///    instantiated using the constructor on the <c>InventStdCostConvCheck</c> class.
    /// </remarks>
    static public InventStdCostConvCheck_ModelGroup construct(InventStdCostConvItem _inventStdCostConvItem)
    {
        return new InventStdCostConvCheck_ModelGroup(_inventStdCostConvItem);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>