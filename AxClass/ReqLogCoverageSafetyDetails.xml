<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqLogCoverageSafetyDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements in-memory tracking of planning coverage statistics. This class is intended to only be used by ReqLogCoverageSafety.
/// </summary>
public class ReqLogCoverageSafetyDetails
{
    ReqCovPeriod minCovPeriod, maxCovPeriod;
    InventQtyMinOnhand minMinQty, maxMinQty;
    InventQtyMaxOnhand minMaxQty, maxMaxQty;

    int numItemsWithNoMin;
    int numItemsWithNoMax;

    Set items;
    Set covInventDims;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct new instance of planning safety stock statistics. This instance has no knowledge of the process ID, plan ID, coverage rule or fulfilment trigger context.
    /// </summary>
    public void new()
    {
        minCovPeriod = maxInt();
        maxCovPeriod = 0;
        minMinQty = maxInt();
        maxMinQty = 0;
        minMaxQty = maxint();
        maxMaxQty = 0;

        numItemsWithNoMin = 0;
        numItemsWithNoMax = 0;

        items = new Set(Types::String);
        covInventDims = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add planning statistics for this instance. Iteratively invoke to incrementally add more and more statistics for different items/dimensions.
    /// </summary>
    /// <param name = "_itemId">The item ID being coverage planned.</param>
    /// <param name = "_covInventDimId">The inventory dimensions being coverage planned.</param>
    /// <param name = "_covPeriod">The coverage period being used.</param>
    /// <param name = "_minimum">The minimum stock level being used.</param>
    /// <param name = "_maximum">The maximum stock level being used.</param>
    public void add(ItemId _itemId, ReqCovInventDimId _covInventDimId, ReqCovPeriod _covPeriod, InventQtyMinOnhand _minimum, InventQtyMaxOnhand _maximum)
    {
        boolean skip = true;

        if (!items.in(_itemId))
        {
            items.add(_itemId);
            skip = false;

            if (_minimum == 0) numItemsWithNoMin++;
            if (_maximum == 0) numItemsWithNoMax++;
        }

        if (!covInventDims.in(_covInventDimId))
        {
            covInventDims.add(_covInventDimId);
            skip = false;
        }

        if (!skip)
        {
            if (minCovPeriod > _covPeriod) minCovPeriod = _covPeriod;
            if (maxCovPeriod < _covPeriod) maxCovPeriod = _covPeriod;

            if (_minimum > 0)
            {
                if (minMinQty > _minimum) minMinQty = _minimum;
                if (maxMinQty < _minimum) maxMinQty = _minimum;
            }

            if (_maximum > 0)
            {
                if (minMaxQty > _maximum) minMaxQty = _maximum;
                if (maxMaxQty < _maximum) maxMaxQty = _maximum;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enter the statistics in this instance, along with the parameter values (context for this instance) into telemetry.
    /// Invoking this method does not alter the data in this instance.
    /// </summary>
    /// <param name = "_processId">The process ID for planning run.</param>
    /// <param name = "_dataAreaId">The data area ID for the plan being run.</param>
    /// <param name = "_reqPlanId">The plan ID for the plan being run.</param>
    /// <param name = "_covRule">The coverage rule being used.</param>
    /// <param name = "_minSatisfy">The fulfilment trigger being used.</param>
    /// <returns>Boolean value returned from the instrumentation API invocation.</returns>
    public boolean invokeTelemetry(ReqProcessId _processId, DataAreaId _dataAreaId, ReqPlanId _reqPlanId, ReqCovType _covRule, ReqMinSatisfy _minSatisfy)
    {
        if (items.elements() == 0) return true;

        return Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteMrpCompletedMarkerCoverageStats(
            _processId,
            CompanyInfo::findDataArea(_dataAreaId).RecId,
            ReqPlan::findReqPlanId(_reqPlanId).RecId,
            enum2Symbol(enumNum(ReqCovType), _covRule),
            enum2Symbol(enumNum(ReqMinSatisfy), _minSatisfy),
            minCovPeriod == maxInt() ? 0 : minCovPeriod,
            maxCovPeriod,
            minMinQty == maxInt() ? 0 : minMinQty,
            maxMinQty,
            minMaxQty == maxInt() ? 0 : minMaxQty,
            maxMaxQty,
            items.elements(),
            covInventDims.elements(),
            numItemsWithNoMin,
            numItemsWithNoMax
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinCovPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// The minimum coverage period used.
    /// </summary>
    /// <returns>Coverage period in days.</returns>
    public ReqCovPeriod parmMinCovPeriod()
    {
        return minCovPeriod == maxInt() ? 0 : minCovPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxCovPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// The maximum coverage period used.
    /// </summary>
    /// <returns>Coverage period in days.</returns>
    public ReqCovPeriod parmMaxCovPeriod()
    {
        return this.maxCovPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinMinimunQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// The smallest minimum safety stock used.
    /// </summary>
    /// <returns>Safety stock value in inventory units.</returns>
    public InventQtyMinOnhand parmMinMinimunQty()
    {
        return minMinQty == maxInt() ? 0 : minMinQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxMinimumQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// The largest minimum safety stock used.
    /// </summary>
    /// <returns>Safety stock value in inventory units.</returns>
    public InventQtyMinOnhand parmMaxMinimumQty()
    {
        return this.maxMinQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinMaximumQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// The smallest maximum safety stock used.
    /// </summary>
    /// <returns>Safety stock value in inventory units.</returns>
    public InventQtyMaxOnhand parmMinMaximumQty()
    {
        return minMaxQty == maxInt() ? 0 : minMaxQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxMaximumQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// The largest maximum safety stock used.
    /// </summary>
    /// <returns>Safety stock value in inventory units.</returns>
    public InventQtyMaxOnhand parmMaxMaximumQty()
    {
        return this.maxMaxQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of items used.
    /// </summary>
    /// <returns>Count of items used.</returns>
    public int numItems()
    {
        return this.items.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of dimensions used across all items.
    /// </summary>
    /// <returns>Count of dimensions used.</returns>
    public int numDimensions()
    {
        return this.covInventDims.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItemsWithZeroMin</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of items with zero minimum quantity.
    /// </summary>
    /// <returns>Count of items which have zero as their minimum quantity.</returns>
    public int numItemsWithZeroMin()
    {
        return this.numItemsWithNoMin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numItemsWithZeroMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// The number of items with zero maximum quantity.
    /// </summary>
    /// <returns>Count of items which have zero as their maximum quantity.</returns>
    public int numItemsWithZeroMax()
    {
        return this.numItemsWithNoMax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>