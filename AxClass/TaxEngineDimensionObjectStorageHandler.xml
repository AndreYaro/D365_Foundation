<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEngineDimensionObjectStorageHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxEngineDimensionObjectStorageHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>skipReferences</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionObjectStorageTableReferenceProcessor), delegatestr(DimensionObjectStorageTableReferenceProcessor,skipReferences ))]
    static void skipReferences(TableId _tableId, EventHandlerResult _result)
    {
        switch(_tableId)
        {
            case(tableNum(TaxDocumentComponentMeasureAccounting)):
            case(tableNum(TaxSolutionScopeParameters)):
            case(tableNum(TaxDocumentComponentMeasureAccounting)):
                _result.result(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTableFieldForChartOfAccountsUsageDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionDefaultAccountValidation), delegatestr(DimensionDefaultAccountValidation, checkTableFieldForChartOfAccountsUsageDelegate))]
    static void checkTableFieldForChartOfAccountsUsageDelegate(DimensionDefaultAccountValidationContract _contract, TableId _tableId, FieldId _fieldId, EventHandlerResult _result)
    {
        if (_tableId == tableNum(TaxSettlementBalance))
        {
            TaxSettlementBalance taxSettleBal;
            TaxSettlementSession taxSession;
            TaxPeriodHeader periodHeader;
            TaxRuntimeSettingTaxPeriodHeaderMapping headerMapping;
            TaxPeriodHead periodHead;
            
            DimensionAttributeValueCombination dimAttrValCombo;
            MainAccount mainAccount;

            switch(_fieldId)
            {
                case(fieldNum(TaxSettlementBalance, RecoverableLedgerDimension)):
                    select count(RecId) from taxSettleBal
                    join taxSession
                        where taxSession.RecId == taxSettleBal.SessionId
                    join periodHeader
                        where periodHeader.TaxPeriodId == taxSession.TaxPeriodId
                    join headerMapping
                        where headerMapping.RuntimeTaxPeriodId == periodHeader.TaxPeriodId
                    join periodHead //Restricts this to current data area
                        where periodHead.RecId == headerMapping.SourceTaxPeriodHead
                    join dimAttrValCombo
                        where dimAttrValCombo.RecId == taxSettleBal.RecoverableLedgerDimension
                    join mainAccount
                        where mainAccount.RecId == dimAttrValCombo.MainAccount
                            && mainAccount.LedgerChartOfAccounts == _contract.ChartOfAccountsRecId;
                
                    _result.result(taxSettleBal.RecId);
                    break;
                case(fieldNum(TaxSettlementBalance, PayableLedgerDimension)):

                    select count(RecId) from taxSettleBal
                    join taxSession 
                        where taxSession.RecId == taxSettleBal.SessionId
                    join periodHeader
                        where periodHeader.TaxPeriodId == taxSession.TaxPeriodId
                    join headerMapping
                        where headerMapping.RuntimeTaxPeriodId == periodHeader.TaxPeriodId
                    join periodHead
                        where periodHead.RecId == headerMapping.SourceTaxPeriodHead
                    join dimAttrValCombo
                        where dimAttrValCombo.RecId == taxSettleBal.PayableLedgerDimension
                    join mainAccount
                        where mainAccount.RecId == dimAttrValCombo.MainAccount
                            && mainAccount.LedgerChartOfAccounts == _contract.ChartOfAccountsRecId;

                    _result.result(taxSettleBal.RecId);
                    break;
            }
        }
        else if ( _tableId == tableNum(TaxRuntimeLookupAccountingResultDetail) && _fieldId == fieldNum(TaxRuntimeLookupAccountingResultDetail, LedgerDimension))
        {
            TaxRuntimeLookupAccountingResultDetail acctResultDetail;
            TaxRuntimeLookupAccountingResult acctResult;
            TaxRuntimeLookupCondition lookupCondition;
            Ledger ledger;
            DimensionAttributeValueCombination dimAttrValCombo;
            MainAccount mainAccount;

            select count(RecId) from acctResultDetail
            join acctResult 
                where acctResult.RecId == acctResultDetail.LookupAccountingResult
            join lookupCondition
                where lookupCondition.RecId == acctResult.LookupCondition
                   && lookupCondition.Ledger == Ledger::current()
            join dimAttrValCombo
                where dimAttrValCombo.RecId == acctResultDetail.LedgerDimension
            join mainAccount
                where mainAccount.RecId == dimAttrValCombo.MainAccount
                    && mainAccount.LedgerChartOfAccounts == _contract.ChartOfAccountsRecId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>