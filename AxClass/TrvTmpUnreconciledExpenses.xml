<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvTmpUnreconciledExpenses</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class holds all the methods required to populate data for the <c>TmpTrvUnreconciledExpenseTransUnion</c>
/// </summary>
class TrvTmpUnreconciledExpenses
{
    List allUnreconciledExpensesForWorker;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateRecordsForWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates all records for a worker to the <c>TmpTrvUnreconciledExpenseTransUnion</c> temp table buffer.
    /// </summary>
    /// <param name = "_hcmWorkerRecId">An optional parameter corresponding to the worker for which to populate records. Defaults to the current worker.</param>
    /// <returns>The table buffer containing all records.</returns>
    public TmpTrvUnreconciledExpenseTransUnion populateRecordsForWorker(HcmWorkerRecId _hcmWorkerRecId = HcmWorkerLookup::currentWorker())
    {
        TrvUnreconciledExpenseTransUnion currentUnreconciledExpense;
        TmpTrvUnreconciledExpenseTransUnion tmpTable;

        allUnreconciledExpensesForWorker = new List(Types::Record);

        while select * from currentUnreconciledExpense
            where currentUnreconciledExpense.Worker == _hcmWorkerRecId
        {
            tmpTable.clear();
            tmpTable.Amount = currentUnreconciledExpense.Amount;
            tmpTable.BusinessName = currentUnreconciledExpense.BusinessName;
            tmpTable.TransDate = currentUnreconciledExpense.TransDate;
            tmpTable.TransactionSource = TrvUnreconciledExpenseHelper::getTransactionSource(currentUnreconciledExpense.OriginalTableId);
            tmpTable.CostType = currentUnreconciledExpense.CostType;
            tmpTable.ExchCode = currentUnreconciledExpense.CurrencyCode;
            tmpTable.OriginalRecId = currentUnreconciledExpense.RecId;
            tmpTable.OriginalTableId = currentUnreconciledExpense.OriginalTableId;
            tmpTable.insert();

            allUnreconciledExpensesForWorker.addEnd(currentUnreconciledExpense);
        }
        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBulkEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the expense categories for unreconciled expenses based
    /// off a comparison of the selected records from the data source
    /// </summary>
    /// <param name = "_dataSource">FormDataSource object used to get selected unreconciled expenses.</param>
    /// <param name = "_costType">Category to apply to the unreconciled expenses.</param>
    /// <remarks>
    /// The <c>FormDataSource</c> object must be for the <c>TmpTrvUnreconciledExpenseTransUnion</c> table.
    /// </remarks>
    public void applyBulkEdit(FormDataSource _dataSource, TrvCostTypeEDT _costType)
    {
        if (_dataSource.table() != tableNum(TmpTrvUnreconciledExpenseTransUnion))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator unreconciledListEnumerator = allUnreconciledExpensesForWorker.getEnumerator();

        // Iterate over selected record from the datasource
        for (TmpTrvUnreconciledExpenseTransUnion currentUnreconciledExpense = _dataSource.getFirst(1);
            currentUnreconciledExpense;
            currentUnreconciledExpense = _dataSource.getNext())
        {
            // Enumerate from the first record in the unreconciled list.
            unreconciledListEnumerator.reset();

            // Iterate through the original list to find original record and change the expense category.
            while (unreconciledListEnumerator.moveNext())
            {
                TrvUnreconciledExpenseTransUnion original = unreconciledListEnumerator.current();

                if (original.RecId == currentUnreconciledExpense.OriginalRecId)
                {
                    // Commit the record changes to the database
                    if (currentUnreconciledExpense.OriginalTableId == tableNum(TrvPBSMaindata))
                    {
                        // Cannot edit category on a credit card transaction with an import only category
                        if (TrvCostType::find(original.CostType).isImportOnly)
                        {
                            warning(strFmt("@Expense:CategoryWasNotUpdatedImportOnly", currentUnreconciledExpense.CostType, currentUnreconciledExpense.TransDate, currentUnreconciledExpense.Amount));
                            break;
                        }

                        TrvPBSMaindata trvPBSMaindata = TrvPBSMaindata::findRecId(currentUnreconciledExpense.OriginalRecId, true);
                        trvPBSMaindata.updateCategoryAndMerchant(_costType);
                    }
                    else
                    {
                        // Mobile expenses are not allowed to have an expense type of personal
                        if (TrvCostType::find(_costType).ExpType == TrvExpType::Personal)
                        {
                            warning(strFmt("@Expense:CategoryWasNotUpdatedPersonalForMobile", currentUnreconciledExpense.CostType, currentUnreconciledExpense.TransDate, currentUnreconciledExpense.Amount));
                            break;
                        }

                        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction = TrvUnreconciledExpenseTransaction::find(currentUnreconciledExpense.OriginalRecId, true);
                        trvUnreconciledExpenseTransaction.updateCategoryAndMerchant(_costType);
                    }

                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedUnreconciledExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of updated expense categories for unreconciled expenses based
    /// off a comparison of the selected records from the data source and list arguments provided.
    /// </summary>
    /// <param name = "_dataSource">FormDataSource object used to get selected unreconciled expenses.</param>
    /// <returns>A list of categorized unreconciled expenses.</returns>
    /// <remarks>
    /// The <c>FormDataSource</c> object must be for the <c>TmpTrvUnreconciledExpenseTransUnion</c> table.
    /// </remarks>
    public List getSelectedUnreconciledExpenses(FormDataSource _dataSource)
    {
        List categorizedUnreconciledExpenses = new List(Types::Record);

        if (_dataSource.table() != tableNum(TmpTrvUnreconciledExpenseTransUnion))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator unreconciledListEnumerator = allUnreconciledExpensesForWorker.getEnumerator();

        // Iterate through the original list and change the expense category.
        for (TmpTrvUnreconciledExpenseTransUnion currentUnreconciledExpense = _dataSource.getFirst(1);
            currentUnreconciledExpense;
            currentUnreconciledExpense = _dataSource.getNext())
        {
            // Enumerate from the first record.
            unreconciledListEnumerator.reset();

            while (unreconciledListEnumerator.moveNext())
            {
                TrvUnreconciledExpenseTransUnion original = unreconciledListEnumerator.current();

                // Save the latest expense category and merchant name from the UI.
                if (original.RecId == currentUnreconciledExpense.OriginalRecId)
                {
                    // Update the old records to be passed forward via the returned list
                    original.CostType = currentUnreconciledExpense.CostType;
                    original.BusinessName = currentUnreconciledExpense.BusinessName;
                    categorizedUnreconciledExpenses.addEnd(original);
                    break;
                }
            }
        }

        return categorizedUnreconciledExpenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySelectedUnreconciledExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of updated expense categories for unreconciled expenses based
    /// off a comparison of the selected records from the data source and list arguments provided.
    /// </summary>
    /// <param name = "_dataSource">FormDataSource object used to get selected unreconciled expenses.</param>
    /// <returns>A list of categorized unreconciled expenses.</returns>
    /// <remarks>
    /// The <c>FormDataSource</c> object must be for the <c>TmpTrvUnreconciledExpenseTransUnion</c> table.
    /// </remarks>
    public void modifySelectedUnreconciledExpenses(FormDataSource _dataSource)
    {
        if (_dataSource.table() != tableNum(TmpTrvUnreconciledExpenseTransUnion))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ListEnumerator unreconciledListEnumerator = allUnreconciledExpensesForWorker.getEnumerator();

        for (TmpTrvUnreconciledExpenseTransUnion currentUnreconciledExpense = _dataSource.getFirst(1);
            currentUnreconciledExpense;
            currentUnreconciledExpense = _dataSource.getNext())
        {
            // Enumerate from the first record.
            unreconciledListEnumerator.reset();

            while (unreconciledListEnumerator.moveNext())
            {
                TrvUnreconciledExpenseTransUnion oldUnreconciledExpense = unreconciledListEnumerator.current();

                // Save the latest expense category and merchant name from the UI.
                if (oldUnreconciledExpense.RecId == currentUnreconciledExpense.OriginalRecId)
                {
                    // Commit the record changes to the database
                    if (currentUnreconciledExpense.OriginalTableId == tableNum(TrvPBSMaindata))
                    {
                        TrvPBSMaindata trvPBSMaindata = TrvPBSMaindata::findRecId(currentUnreconciledExpense.OriginalRecId, true);
                        trvPBSMaindata.updateCategoryAndMerchant(currentUnreconciledExpense.CostType, currentUnreconciledExpense.BusinessName);
                    }
                    else
                    {
                        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction = TrvUnreconciledExpenseTransaction::find(currentUnreconciledExpense.OriginalRecId, true);
                        trvUnreconciledExpenseTransaction.updateCategoryAndMerchant(currentUnreconciledExpense.CostType, currentUnreconciledExpense.BusinessName);
                    }
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the category provided is valid for unreconciled expenses
    /// </summary>
    /// <param name = "_costType">Category to apply to the unreconciled expenses.</param>
    /// <returns>True if the category provided is valid for unreconciled expenses; otherwise, false.</returns>
    public static boolean validateCategory(TrvCostTypeEdt _costType, boolean _displayInfo = true)
    {
        TrvCostType newCategory = TrvCostType::find(_costType);
        if (!newCategory.RecId)
        {
            if (_displayInfo)
            {
                return checkFailed("@Expense:InvalidCostType");
            }

            return false;
        }

        if (newCategory.isImportOnly)
        {
            if (_displayInfo)
            {
                return checkFailed("@Expense:CannotSelectImportOnlyCategoryForUnreconciledExpense");
            }

            return false;
        }

        if (newCategory.IsInactive)
        {
            if (_displayInfo)
            {
                return checkFailed(strFmt("@Expense:ExpenseCategory1IsNotActive", newCategory.CostType));
            }

            return false;
        }
        
        TrvExpType trvExpType = newCategory.ExpType;
        if ((trvExpType == TrvExpType::Empty) ||
                    (trvExpType == TrvExpType::Advance) ||
                    (trvExpType == TrvExpType::Allowance) ||
                    (trvExpType == TrvExpType::Transport))
        {
            // Cash advance return, mileage and perdiem are not allowed for all unreconciled records
            if (_displayInfo)
            {
                return checkFailed("@Expense:InvalidCostType");
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnreconciledExpenses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all the selected unreconciled expenses in the data source have a valid expense category.
    /// </summary>
    /// <param name = "_dataSource">The <c>FormDataSource</c> object containing the list of selected records.</param>
    /// <param name = "_costType">Category to apply to the unreconciled expenses.</param>
    /// <returns>True if all records have a valid category, false otherwise.</returns>
    /// <remarks>
    /// The <c>FormDataSource</c> object must be for the <c>TmpTrvUnreconciledExpenseTransUnion</c> table.
    /// </remarks>
    public static boolean validateUnreconciledExpenses(FormDataSource _dataSource, TrvCostTypeEDT _costType = null)
    {
        if (_dataSource.table() != tableNum(TmpTrvUnreconciledExpenseTransUnion))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_costType == null)
        {
            // Expense isn't valid without a category
            return false;
        }

        // Iterate over datasource and validate each record
        for (TmpTrvUnreconciledExpenseTransUnion currentUnreconciledExpense = _dataSource.getFirst(1);
            currentUnreconciledExpense;
            currentUnreconciledExpense = _dataSource.getNext())
        {
            if (!TrvTmpUnreconciledExpenses::validateCategory(_costType))
            {
                return false;
            }

            // Cannot edit category on a credit card transaction with an import only category
            if (TrvUnreconciledExpenseHelper::isCreditCardTransactionWithImportOnlyCategory(currentUnreconciledExpense))
            {
                return checkFailed(strFmt("@Expense:CategoryWasNotUpdatedImportOnly", currentUnreconciledExpense.CostType, currentUnreconciledExpense.TransDate, currentUnreconciledExpense.Amount));
            }

            if (currentUnreconciledExpense.OriginalTableId != tableNum(TrvPBSMaindata))
            {
                // Mobile expenses are not allowed to have an expense type of personal
                if (TrvCostType::find(_costType).ExpType == TrvExpType::Personal)
                {
                    return checkFailed(strFmt("@Expense:CategoryWasNotUpdatedPersonalForMobile", currentUnreconciledExpense.CostType, currentUnreconciledExpense.TransDate, currentUnreconciledExpense.Amount));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectedRecordProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the properties of the currently selected record.
    /// </summary>
    /// <param name = "_costTypeControl">The control corresponding to the expense category on the form.</param>
    /// <param name = "_businessNameControl">The control corresponding to the merchant id on the form.</param>
    /// <param name = "_tmpTable">The currently selected record.</param>
    /// <remarks>
    /// The selected record must be from a <c>FormDataSource</c> in order to determine its current selected or marked state.
    /// </remarks>
    public static void setSelectedRecordProperties(FormStringControl _costTypeControl,
                                                   FormStringControl _businessNameControl,
                                                   TmpTrvUnreconciledExpenseTransUnion _tmpTable)
    {
        if (FormDataUtil::isFormDataSource(_tmpTable))
        {
            FormDataSource TmpTrvUnreconciledExpenseTransUnion_DS = FormDataUtil::getFormDataSource(_tmpTable);

            boolean isSelected = TmpTrvUnreconciledExpenseTransUnion_DS.mark();

            // Do not allow editing of cost type for credit card transactions with import only type
            boolean isCCAndImportOnly = TrvUnreconciledExpenseHelper::isCreditCardTransactionWithImportOnlyCategory(_tmpTable);

            _costTypeControl.mandatory(isSelected);
            _costTypeControl.allowEdit(isSelected && !isCCAndImportOnly);

            if (_tmpTable.OriginalTableId != tableNum(TrvPBSMaindata))
            {
                _businessNameControl.allowEdit(isSelected);
            }
            else
            {
                _businessNameControl.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>