<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardBreakDownRunnerHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CreditCardBreakDownRunnerHelper
{
    private const str CaptionPrefix = 'CreditCardPaymentBreakDown_ExecutionId-%1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesOrderType</Name>
				<Source><![CDATA[
    internal static CreditCardSalesOrderType getSalesOrderType(SalesTable _salesTable)
    {
        if (_salesTable.mcrIsCallCenter())
        {
            return CreditCardSalesOrderType::CallCenterOrder;
        }
        if (RetailCommercePaymentsFeatureHelper::commercePaymentsEnabledForOrder(_salesTable, funcName()))
        {
            return CreditCardSalesOrderType::ECommerceOrder;
        }
        return CreditCardSalesOrderType::NonRetailOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaptionStr</Name>
				<Source><![CDATA[
    internal static str getCaptionStr(RecId _recId)
    {
        str caption = strFmt(CaptionPrefix, any2Str(_recId));
        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustInvoiceFullySettled</Name>
				<Source><![CDATA[
    internal static boolean isCustInvoiceFullySettled(CustInvoiceJour _custInvoiceJour)
    {
        CustTrans custTrans = _custInvoiceJour.custTrans();
        return custTrans.AmountCur != 0 && custTrans.AmountCur == custTrans.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsRefundFromCreditCardPaymentOperation</Name>
				<Source><![CDATA[
    internal static boolean getIsRefundFromCreditCardPaymentOperation(CreditCardPaymentOperation _creditCardPaymentOperation, CustInvoiceJour _custInvoiceJour, CreditCardPaymentStatus _paymentStatus)
    {
        boolean isRefund = _creditCardPaymentOperation == CreditCardPaymentOperation::RefundOperation;
        if ((_custInvoiceJour.InvoiceAmount >= 0 && isRefund) || (_custInvoiceJour.InvoiceAmount < 0 && !isRefund))
        {
            CreditCardPaymentBreakDownLogger creditCardPaymentBreakDownLogger = CreditCardPaymentBreakDownLogger::createLogger();
            using (var runActivityContext = creditCardPaymentBreakDownLogger.activityContextWithCustomProperties(CreditCardPaymentBreakDownInstrumentationConstants::CreditCardPaymentBreakDownPaymentProcess))
            {
                creditCardPaymentBreakDownLogger.logError(strFmt('Wrong amount and refund flag, Rec Id %1', _custInvoiceJour.RecId));
            }
            throw error(strFmt("@CashManagement:CreditCardPaymentBreakDownSystemErrorStage", _paymentStatus));
        }

        return isRefund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreditCardSalesTable</Name>
				<Source><![CDATA[
    internal static boolean validateCreditCardSalesTable(SalesTable _salesTable)
    {
        return _salesTable.CreditCardCustRefId != 0 && _salesTable.isCreditCardPaymentType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportErrorInActionCenter</Name>
				<Source><![CDATA[
    internal static void reportErrorInActionCenter(SalesInvoiceId _salesInvoiceId, SalesId _salesId)
    {
        SystemNotificationDataContract notificationDataContract = new SystemNotificationDataContract();
        Array actions = new Array(Types::Class);
        Array userList = new Array(Types::String);

        userList.value(1, curUserId());

        notificationDataContract.Message(strfmt("@CashManagement:CreditCardPaymentBreakDownActionCenterMessage", _salesInvoiceId, _salesId));
        notificationDataContract.Title("@CashManagement:CreditCardPaymentBreakDownActionCenterHeader");
        notificationDataContract.Type(SystemNotificationType::Alert);
        notificationDataContract.State(SystemNotificationState::Active);
        notificationDataContract.Severity(SystemNotificationSeverity::Informational);
        notificationDataContract.Users(userList);
        notificationDataContract.RuleId(classStr(CreditCardPaymentBreakDownController));
        utcdatetime expirationDateTime = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), 1);
        notificationDataContract.ExpirationDateTime(expirationDateTime);

        // Create the hyperlink to the form
        SystemNotificationActionDataContract actionDataContract = new SystemNotificationActionDataContract();
        actionDataContract.Message("@CashManagement:CheckDetails");

        actionDataContract.Type(SystemNotificationActionType::AxDisplayMenuFunction);

        SystemNotificationMenuFunctionDataContract notificationActionData = new SystemNotificationMenuFunctionDataContract();
        notificationActionData.MenuItemName(menuItemDisplayStr(CreditCardBreakDownRecover));
        notificationActionData.Data(any2Str("@CashManagement:CreditCardPaymentBreakDownActionCenterHeader"));
        actionDataContract.Data(FormJsonSerializer::serializeClass(notificationActionData));
        actions.value(1, actionDataContract);
        notificationDataContract.Actions(actions);

        // Add to the Message center
        SystemNotificationsManager::AddSystemNotification(notificationDataContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>