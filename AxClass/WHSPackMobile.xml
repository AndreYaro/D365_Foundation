<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPackMobile</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSPackMobile
{
    private WHSContainerPackingValidator packingValidator = new WHSContainerPackingValidator();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>packItemQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void packItemQty(
        ItemId            _itemId,
        Qty               _qty,
        WHSContainerId    _containerId,
        WHSTmpPackingLine _tmpPackingLine,
        InventDim         _inventDimCriteria)
    {
        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            throw error("@WAX:RFPackingCWNotSupported_Error");
        }

        WHSTmpPackingLine localTmpPackingLine;
        localTmpPackingLine.setTmpData(_tmpPackingLine);

        Qty remainingQty = _qty;

        InventDim inventDim;
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDimCriteria);

        while select localTmpPackingLine
            where localTmpPackingLine.ItemId == _itemId
                && localTmpPackingLine.QtyRemaining > 0
                #InventDimExistsJoin(localTmpPackingLine.inventDimId, inventDim, _inventDimCriteria, inventDimParm)
        {
            Qty qtyToPackNow = min(localTmpPackingLine.QtyRemaining, remainingQty);

            this.packItem(_containerId, qtyToPackNow, localTmpPackingLine);
            remainingQty -= qtyToPackNow;

            if (remainingQty == 0)
            {
                return;
            }
        }

        if (remainingQty > 0)
        {
            throw Error("@WAX1445");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packAll</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerLines packAll(WHSContainerId _containerId, WHSTmpPackingLine _tmpPackingLine, InventDim _inventDimCriteria)
    {
        WHSTmpPackingLine localTmpPackingLine;
        localTmpPackingLine.setTmpData(_tmpPackingLine);

        InventDim inventDim;
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDimCriteria);

        WHSContainerLines packedLines = 0;
        while select localTmpPackingLine
            where localTmpPackingLine.QtyRemaining > 0
                #InventDimExistsJoin(localTmpPackingLine.inventDimId, inventDim, _inventDimCriteria, inventDimParm)
        {
            if (PdsGlobal::pdsIsCWItem(localTmpPackingLine.ItemId))
            {
                throw error("@WAX:RFPackingCWNotSupported_Error");
            }

            this.packItem(_containerId, localTmpPackingLine.QtyRemaining, localTmpPackingLine);
            packedLines++;
        }

        return packedLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packItem</Name>
				<Source><![CDATA[
    private void packItem(
        WHSContainerId      _containerId,        
        Qty					_qty,
        WHSTmpPackingLine   _tmpPackingLine)
    {
        ItemId itemId = _tmpPackingLine.ItemId;
        InventHandlingUnitId unitId = WHSCatchWeightHelper::inventHandlingUnitId(itemId);
        InventDim inventDimCriteria = InventDim::find(_tmpPackingLine.InventDimId);
        
        if (packingValidator.validateWeightPrecise(_containerId, _tmpPackingLine.ShipmentId, itemId, unitId, _qty, _tmpPackingLine.InventDimId))
        {
            WHSContainerTable::packItemHandlingQty(itemId, _qty, unitId, _containerId, _tmpPackingLine, inventDimCriteria, 0, '');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>