<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiSchedulingOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>rodMultiSchedulingOperation</c> class shows the user dialog for operation scheduling of
///    production orders.
/// </summary>
/// <remarks>
///    Several production orders can be selected in the user dialog. Each production order will be
///    scheduled by using the <see cref="T:ProdUpdScheduling_Operation" />.
/// </remarks>
class ProdMultiSchedulingOperation extends ProdMultiScheduling implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    public boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;

        return  !ProdParmScheduling::exist(parmId, prodTable.ProdId) && prodTable.status().runOperationScheduling(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form that is provided with a user interface for specifying parameters for
    ///    update of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formstr(ProdSchedule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common          _prodTable,
        ParmBuffer      _prodParmScheduling
        )
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmScheduling prodParmScheduling = _prodParmScheduling;
        super(prodTable,prodParmScheduling);

        prodParmScheduling.SchedMethod     = ProdSchedMethod::OperationScheduling;
        prodParmScheduling.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        if (toggleIsEnabledForEnsuringParamsAreSet)
        {
            Query query = super();
            return (query ? query : new QueryRun(queryStr(ProdMultiSelectSchedulingOperation)).query());
        }
        else
        {
            return new QueryRun(querystr(ProdMultiSelectSchedulingOperation)).query();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        var instrumentationAdditionalParameters = SysInstrumentationAdditionalParameters::construct().addIsBatchParameter(this.inBatch);

        using (var instrumentation = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiSchedulingOperation, ProdInstrumentationActivities::DefaultActivityId, instrumentationAdditionalParameters))
        {
            #OCCRetryCount

            WrkCtrScheduler wrkCtrScheduler = WrkCtrScheduler_Prod::newCheckLockingTTSLevel(false);

            super();

            ProdMultiPurchLateSubmissionToWorkflow subcontractingHelper = ProdMultiPurchLateSubmissionToWorkflow::construct();
            subcontractingHelper.setLateSubmissionOfPurchaseOrdersToWorkflow(this.setProduction());

            ProdPurch prodPurch = ProdPurch::newProd();

            this.updateProdDeleted();
			
            ProdParmScheduling prodParmScheduling = this.setProduction();
            
            int parametersCount = 0;

            setPrefix(ProdMultiSchedulingOperation::description());
            while (prodParmScheduling)
            {
                parametersCount++;

                setPrefix(#PreFixField(ProdParmScheduling,ProdId));
                try
                {
                    this.operationScheduleProductionOrder(prodParmScheduling, prodPurch, wrkCtrScheduler);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
                next prodParmScheduling;
            }

            subcontractingHelper.performLateSubmissionOfPurchaseOrdersToWorkflow();
            
            wrkCtrScheduler.dispose();

            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmIsMoreThanOne, int2Str(parametersCount > 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationScheduleProductionOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs operation scheduling on a single production order.
    /// </summary>
    /// <param name = "_prodParmScheduling">Production order scheduling parameters.</param>
    /// <param name = "_prodPurch">A linked purchase order creation helper.</param>
    /// <param name = "_wrkCtrScheduler">A resource scheduling processor.</param>
    [Replaceable]
    protected void operationScheduleProductionOrder(ProdParmScheduling _prodParmScheduling, ProdPurch _prodPurch, WrkCtrScheduler _wrkCtrScheduler)
    {
        // Only run when the Prod Order is not Stopped.
        if (WHSProdTable::find(_prodParmScheduling.ProdId).Stopped)
        {
            error(strFmt("@WAX1701", _prodParmScheduling.ProdId));
        }
        else
        {
            // Only run when the Prod Order has no active work.
            if (WHSProdTable::isWorkActiveForProdOrder(_prodParmScheduling.ProdId))
            {
                warning("@SYS4010250");
            }
            else
            {
                this.initProdTable(_prodParmScheduling.ProdId).status().runOperationScheduling(_prodParmScheduling,false,_prodPurch,this,_wrkCtrScheduler);

                this.addUpdateRec(ProdTable::find(_prodParmScheduling.ProdId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS10062";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args.parmEnum() == RunChoose::Run)
        {
            ProdMultiSchedulingOperation prodMultiScheduling = ProdMultiScheduling::construct(ProdSchedMethod::OperationScheduling);
            RunBaseMultiParm::initFromForm(prodMultiScheduling,_args);

            if (! prodMultiScheduling.prompt())
            {
                return;
            }

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(prodMultiScheduling.formName(), _args.menuItemName()))
            {
                prodMultiScheduling.runOnServer();
            }

            prodMultiScheduling.refreshCaller(_args);
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>