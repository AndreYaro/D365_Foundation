<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcConfigurationReuseManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides data access to the configuration reuse data.
/// </summary>
class PcConfigurationReuseManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReusableConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a reusable configuration.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_inventDimId">
    /// An inventory dimension ID.
    /// </param>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <param name="_configurationReuseCode">
    /// A configuration reuse code value.
    /// </param>
    /// <param name="_configurationReuseString">
    /// A configuration reuse string value.
    /// </param>
    /// <returns>
    /// A <c>PCConfigurationReuse</c> record.
    /// </returns>
    public PCConfigurationReuse createReusableConfiguration(
        ItemId                      _itemId,
        InventDimId                 _inventDimId,
        PCClassRecId                _componentRecId,
        PCConfigurationReuseCode    _configurationReuseCode,
        str                         _configurationReuseString)
    {
        PCConfigurationReuse    configurationReuse;

        ttsbegin;
        configurationReuse.ItemId           = _itemId;
        configurationReuse.InventDimId      = _inventDimId;
        configurationReuse.ComponentClass   = _componentRecId;
        configurationReuse.ReuseCode        = _configurationReuseCode;
        configurationReuse.insert();
        ttscommit;

        return configurationReuse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteComponentEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all the reuse entries for a component.
    /// </summary>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    public void deleteComponentEntries(PCClassRecId _componentRecId)
    {
        PCConfigurationReuse configurationReuse;
        PCSubComponent       subComponent;

        ttsbegin;
        delete_from configurationReuse
              where configurationReuse.ComponentClass == _componentRecId;

        while select ParentComponentClass from subComponent
              where subComponent.ChildComponentClass == _componentRecId

        {
            this.deleteComponentEntries(subComponent.ParentComponentClass);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsReusableConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reusable configuration exists.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <param name="_configurationReuseCode">
    /// A configuration reuse Code value.
    /// </param>
    /// <param name="_inventSiteId">
    /// An inventory site ID.
    /// </param>
    /// <returns>
    /// true if a reusable configuration exists; otherwise, false.
    /// </returns>
    public boolean existsReusableConfiguration(
        ItemId                      _itemId,
        PCClassRecId                _componentRecId,
        PCConfigurationReuseCode    _configurationReuseCode,
        InventSiteId                _inventSiteId)
    {
        PCConfigurationReuse configurationReuse;
        InventDim            inventDim;

        select firstonly RecId from inventDim
            where inventDim.InventSiteId == _inventSiteId
                join TableId from configurationReuse
                where   configurationReuse.InventDimId      == inventDim.InventDimId
                &&      configurationReuse.ItemId           == _itemId
                &&      configurationReuse.ComponentClass   == _componentRecId
                &&      configurationReuse.ReuseCode        == _configurationReuseCode;

        return inventDim.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReusableConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a reusable configuration.
    /// </summary>
    /// <param name="_itemId">
    /// An item ID.
    /// </param>
    /// <param name="_componentRecId">
    /// A component record ID.
    /// </param>
    /// <param name="_configurationReuseCode">
    /// A configuration reuse code value.
    /// </param>
    /// <param name="_inventSiteId">
    /// An inventory site ID.
    /// </param>
    /// <returns>
    /// A <c>InventDim</c> record.
    /// </returns>
    public InventDim findReusableConfiguration(
        ItemId                      _itemId,
        PCClassRecId                _componentRecId,
        PCConfigurationReuseCode    _configurationReuseCode,
        InventSiteId                _inventSiteId)
    {
        PCConfigurationReuse configurationReuse;
        InventDim            inventDim;

        select firstonly inventDim
            where inventDim.InventSiteId == _inventSiteId
            join RecId from configurationReuse
            where   configurationReuse.InventDimId      == inventDim.InventDimId
            &&      configurationReuse.ItemId           == _itemId
            &&      configurationReuse.ComponentClass   == _componentRecId
            &&      configurationReuse.ReuseCode        == _configurationReuseCode;

        PCContractNotNull::assertRecord(inventDim, funcName());

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCConfigurationReuseManager construct()
    {
        return new PCConfigurationReuseManager();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>