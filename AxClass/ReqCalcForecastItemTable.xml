<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcForecastItemTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqCalcForecastItemTable extends ReqCalc implements BatchRetryable
{
    QueryRun    query;

    Set         setItemForecast;
    Set         setItemSafety;

    #DEFINE.CurrentVersion(8)

    #LOCALMACRO.CurrentList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class two times with the
    ///    same parameters is not always possible. If the <see cref="M:RunBaseBatch.canGoBatch" /> returns
    ///    false, this method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SYS25296";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSafetyInvent</Name>
				<Source><![CDATA[
    protected void createSafetyInvent(
        ReqSetupDim     _setupDim,
        boolean         _fromCoverage
        )
    {
        if (_setupDim.covRule() == ReqCovType::MinMax)
        {
            super(_setupDim,_fromCoverage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRequirement</Name>
				<Source><![CDATA[
    protected void deleteRequirement()
    {
        ReqTransCov         reqTransCov;
        ReqTrans            reqTrans;
        ReqPO               reqPO;
        WrkCtrCapRes        wrkCtrCapRes;
        ReqRoute            reqRoute;
        ReqRouteJob         reqRouteJob;

        reqTrans.skipDataMethods(true);
        reqTrans.skipDeleteActions(true);

        reqPO.skipDataMethods(true);
        reqPO.skipDeleteActions(true);

        reqRoute.skipDataMethods(true);
        reqRoute.skipDeleteActions(true);

        reqRouteJob.skipDataMethods(true);
        reqRouteJob.skipDeleteActions(true);

        reqTransCov.skipDataMethods(true);
        reqTransCov.skipDeleteActions(true);

        wrkCtrCapRes.skipDataMethods(true);
        wrkCtrCapRes.skipDeleteActions(true);

        delete_from reqTransCov
            where reqTransCov.PlanVersion            == this.reqPlanVersionRefRecId();

        delete_from reqTrans
            where reqTrans.PlanVersion            == this.reqPlanVersionRefRecId();

        delete_from reqPO
            where reqPO.PlanVersion            == this.reqPlanVersionRefRecId();

        delete_from wrkCtrCapRes
            where wrkCtrCapRes.PlanVersion            == this.reqPlanVersionRefRecId() &&
                  wrkCtrCapRes.RefType                == WrkCtrCapRefType::PlannedOrder
            notexists join reqPO
                  where wrkCtrCapRes.PlanVersion            == reqPO.PlanVersion         &&
                        wrkCtrCapRes.RefId                  == reqPO.RefId;

        delete_from reqRoute
            where reqRoute.PlanVersion            == this.reqPlanVersionRefRecId()
            notexists join reqPO
                  where reqRoute.PlanVersion            == reqPO.PlanVersion            &&
                        reqRoute.RefId                  == reqPO.RefId;

        delete_from reqRouteJob
            where reqRouteJob.PlanVersion            == this.reqPlanVersionRefRecId()
            notexists join reqPO
                  where reqRouteJob.PlanVersion            == reqPO.PlanVersion            &&
                        reqRouteJob.ReqPOId                == reqPO.RefId;
        
        this.deletedRequirement(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletedRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for doing additional actions during deletion of item requirement.
    /// </summary>
    /// <param name = "_reqCalcForecastItemTable">A <c>ReqCalcForecastItemTable</c> instance.</param>
    delegate void deletedRequirement(ReqCalcForecastItemTable _reqCalcForecastItemTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogGroup     parametersGroup;
        Object          mainFormGroupOrig;

        dialog = super();

        //Save the original main form group so we can set it back later
        //This needs to be done because the dialog framework can't handle it automatically when showQueryValues is
        //set to true.
        mainFormGroupOrig   = dialog.mainFormGroup();

        parametersGroup     = dialog.addGroup("@SYS7764");
        dflReqPlanId        = dialog.addFieldValue(extendedTypeStr(ReqPlanIdForecast), reqPlanId);
        parametersGroup.addFieldname(dflReqPlanId.name());

        dflIsTaskTraceEnabled = dialog.addFieldValue(enumStr(NoYes), isTaskTraceEnabled, "@SYS107551", "@SYS107552");
        parametersGroup.addFieldname(dflIsTaskTraceEnabled.name());

        dflmaxChildThreads  = dialog.addFieldValue(extendedTypeStr(ReqProcessNumThreads), maxChildThreads);
        dflComment          = dialog.addFieldValue(extendedTypeStr(ReqComment), comment);

        dialog.mainFormGroup(mainFormGroupOrig);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>futuresInitLevel</Name>
				<Source><![CDATA[
    protected void futuresInitLevel(BOMLevel _level)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        reqPlanId           = dflReqPlanId.value();

        maxChildThreads     = dflmaxChildThreads.value();

        isTaskTraceEnabled  = dflIsTaskTraceEnabled.value();

        comment             = dflComment.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeIntercompanyDemand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a value that indicates whether to include intercompany demand or not.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether to include intercompany demand or not.
    /// </returns>
    public boolean includeIntercompanyDemand()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    protected void insertData()
    {
        if (!thisIsChildThread)
        {
            try
            {
                reqTransCache.insertProcessItemsFromQuery(query.pack());
            }
            catch (Exception::Deadlock)
            {
                if (this.manageExceptionDeadLock())
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (this.retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if ( this.manageExceptionUpdateConflict() )
                {
                    retry;
                }
            }
        }

        if (updateAllItems && maxChildThreads == 0)
        {
            this.insertDataComplete();
        }
        else
        {
            this.insertDataQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataComplete</Name>
				<Source><![CDATA[
    protected void insertDataComplete()
    {
        ReqItemTable        reqItemTable;

        ForecastInvent  forecastInvent;

        setItemForecast = new Set(Types::String);
        setItemSafety   = new Set(Types::String);

        while select ItemId from forecastInvent
            group ItemId
        {
            setItemForecast.add(forecastInvent.ItemId);
        }

        while select ItemId,ReqGroupId,CovRule from reqItemTable
            group by ItemId,ReqGroupId,CovRule
            where reqItemTable.MinInventOnhand > 0
        {
            if (reqItemTable.CovRule == ReqCovType::MinMax ||
               (! reqItemTable.CovFieldsActive && ReqGroup::find(reqItemTable.ReqGroupId).CovRule == ReqCovType::MinMax))
            {
                setItemSafety.add(reqItemTable.ItemId);
            }
        }

        try
        {
            ttsbegin;

            this.deleteRequirement();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (this.manageExceptionDeadLock())
            {
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (this.retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if ( this.manageExceptionUpdateConflict() )
            {
                retry;
            }
        }

        this.insertTasksForAllItems(ReqProcessStatus::Update, ReqLevelState::NotApplicable, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataItem</Name>
				<Source><![CDATA[
    protected void insertDataItem(BOMLevel _level, ItemId _itemId)
    {
        super(_level, _itemId);

        if (updateAllItems && maxChildThreads == 0)
        {
            this.updateDataItemComplete(_level, _itemId);
        }
        else
        {
            this.updateDataItemQuery(_level, _itemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs one time actions for inserting data and creates the tasks for inserting data for each item list.
    /// </summary>
    protected void insertDataQuery()
    {
        if (!thisIsChildThread)
        {
            if (updateAllItems)
            {
                try
                {
                    ttsbegin;
                    this.deleteRequirement();
                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    if (this.manageExceptionDeadLock())
                    {
                        retry;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (this.retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if ( this.manageExceptionUpdateConflict() )
                    {
                        retry;
                    }
                }
            }
        }

        this.insertTasksForAllItems(ReqProcessStatus::Update, ReqLevelState::NotApplicable, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReqLog</Name>
				<Source><![CDATA[
    protected void insertReqLog(boolean _cancelled)
    {
        if (!hasErrors)
        {
            info("@SYS28664");
        }
        else
        {
            info("@SCM:ReqItemCoveragePartiallyUpdated");
        }

        super(_cancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompleteUpdate</Name>
				<Source><![CDATA[
    boolean isCompleteUpdate()
    {
        return updateAllItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        query = this.buildBaseQuery();

        reqCalcUpdate = ReqCalcUpdate::Regeneration;

        thisIsPeriodicProcess = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateInstrumentationContext</Name>
				<Source><![CDATA[
    protected SysInstrumentationActivityContext initiateInstrumentationContext()
    {
        return this.reqInstrumentationLogger().calc().forecast();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,super(),query.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the base query used to find items to schedule.
    /// </summary>
    /// <returns>The base query used to find items to schedule</returns>
    protected QueryRun buildBaseQuery()
    {
        return new QueryRun(queryStr(ReqCalcForecastItemTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        void doError()
        {
            this.cleanUp();

            if (!isReqLogMerged)
            {
                hasErrors = true;
                this.insertReqLog(true);
            }

            if (!thisIsChildThread)
            {
                ReqProcessList::setStatus(processId, ReqProcessStatus::Error);
            }

            throw Exception::Error;
        }

        updateAllItems = this.shouldUpdateAllItems(query);

        query.query().dataSourceTable(tableNum(InventTable)).addRange(fieldNum(InventTable,ItemType)).value(InventItemType::valueMustBeReqCreated());

        if (!this.isInBatch())
        {
            this.progressInitSeries();
            if (progress)
            {
                progress.update(true);
            }
        }
        else
        {
            progress = null;
        }

        try
        {
            super();
        }
        catch
        {
            doError();
        }
        finally
        {
            this.dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyStockDate</Name>
				<Source><![CDATA[
    protected TransDate safetyStockDate(ReqSetupDim     setupDim)
    {
        if (setupDim.covRule() == ReqCovType::MinMax)
        {
            return reqPlanData.todaysdate();
        }

        return super(setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version        = conPeek(packedClass,1);
        container       packedQuery;
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,packedQuery] = packedClass;
                super(base);
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    query = new QueryRun(packedQuery);
                }
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataItemComplete</Name>
				<Source><![CDATA[
    [SuppressBpWarning("BPParameterNotUsed", "Parameter _level is used by deriving classes that override this method.")]
    protected void updateDataItemComplete(BOMLevel _level, ItemId _itemId)
    {
        boolean         loopSafety;
        boolean         loopForecast;
        ReqSetup        setup;

        loopForecast    = setItemForecast.in(_itemId);
        loopSafety      = setItemSafety.in(_itemId);

        if (loopForecast || loopSafety)
        {
            setup = reqPlanData.newReqSetup(_itemId);

            try
            {
                ttsbegin;
                if (setup.mustItemReqBeCreated())
                {
                    if (loopSafety)
                    {
                        this.insertItemSafetyInvent(setup);
                    }

                    if (loopForecast)
                    {
                        this.insertItemForecastInvent(setup);
                    }
                }
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (this.manageExceptionDeadLock())
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (this.retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if ( this.manageExceptionUpdateConflict() )
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDataItemQuery</Name>
				<Source><![CDATA[
    [SuppressBpWarning("BPParameterNotUsed", "Parameter _level is used by deriving classes that override this method.")]
    private void updateDataItemQuery(BOMLevel _level, ItemId _itemId)
    {
        ReqSetup        setup;

        if (!_itemId)
        {
            return;
        }

        setup = reqPlanData.newReqSetup(_itemId);

        if (setup.mustItemReqBeCreated())
        {
            if (!updateAllItems)
            {
                try
                {
                    ttsbegin;
                    this.deleteItemRequirement(setup);
                    ttscommit;
                }
                catch (Exception::Deadlock)
                {
                    if (this.manageExceptionDeadLock())
                    {
                        retry;
                    }
                }
                catch (Exception::TransientSqlConnectionError)
                {
                    if (this.retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        throw;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if ( this.manageExceptionUpdateConflict() )
                    {
                        retry;
                    }
                }
            }

            this.addItem2ReqTransCache(_itemId,false);

            try
            {
                ttsbegin;
                this.insertItemSafetyInvent(setup);
                this.insertItemForecastInvent(setup);
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (this.manageExceptionDeadLock())
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (this.retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if ( this.manageExceptionUpdateConflict() )
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransUpdate</Name>
				<Source><![CDATA[
    protected void updateReqTransUpdate(ItemId _itemId)
    {
          // nothing to update
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (! ReqPlanForecast::find(this.parmReqPlanId()).RecId)
        {
            return checkFailed(strFmt("@SYS25369",this.parmReqPlanId()));
        }

        if (!ReqCalc::validateMaxChildThreads(this, this.maxChildThreads))
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ReqCalcForecastItemTable construct()
    {
        return new ReqCalcForecastItemTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS25296";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqCalcForecastItemTable reqCalcForecastItemTable = ReqCalcForecastItemTable::newStandard();

        if (!reqCalcForecastItemTable.prompt())
        {
            return;
        }

        reqCalcForecastItemTable.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    public static ReqCalcForecastItemTable newStandard()
    {
        ReqCalcForecastItemTable reqCalcForecastItemTable  = ReqCalcForecastItemTable::construct();
        reqCalcForecastItemTable.getLast();
        reqCalcForecastItemTable.parmAutoReserveCoverage(false);

        return reqCalcForecastItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunMultiThreaded</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canRunMultiThreaded()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>