<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconMatchingMatchSingleStatement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankReconMatchingMatchSingleStatement</c> class contains business logic
///     for matching single bank statement.
/// </summary>
[BankReconciliationMatchingAttribute(BankReconciliationMatchingType::SingleStatement)]
class BankReconMatchingMatchSingleStatement extends BankReconciliationMatchingMatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateBalance</Name>
				<Source><![CDATA[
        protected boolean validateBalance()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankDocumentReversalType</Name>
				<Source><![CDATA[
        protected boolean validateBankDocumentReversalType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankTransType</Name>
				<Source><![CDATA[
        protected boolean validateBankTransType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCounter</Name>
				<Source><![CDATA[
        protected boolean validateCounter()
    {
        boolean     ret;

        //this match is to mark single statement line as new, so only 1 statement line is allowed
        if (this.isEntryCounterSingle(statementList.elements())
            && this.isEntryCounterNone(documentList.elements()))
        {
            ret = true;
        }
        else
        {
            ret = checkFailed("@GLS222653");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
        protected boolean validateDate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            this.matchedEventHandler += eventhandler(this.createDocumentMatchingItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentMatchingItem</Name>
				<Source><![CDATA[
    private void createDocumentMatchingItem(
        List _statementList,
        List _documentList,
        BankReconciliationMatchingType _matchingType)
    {
        if (_statementList.elements() == 1)
        {
            ListEnumerator enumerator = _statementList.getEnumerator();
            enumerator.moveNext();
            BankReconciliationMatchingEntry matchingEntry = enumerator.current();
            BankStmtISOReportEntry reportEntry = BankStmtISOReportEntry::find(matchingEntry.parmRefRecId());
            if (reportEntry)
            {
                BankReconciliationMatchingItem statementMatchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(reportEntry.RecId);
                if (statementMatchingItem)
                {
                    BankDocumentTable documentTable = BankDocumentTable::findBySource(reportEntry.TableId, reportEntry.RecId);
                    if (documentTable)
                    {
                        BankReconciliationMatchingItem documentMatchingItem;
                        documentMatchingItem.BankReconciliationMatching = statementMatchingItem.BankReconciliationMatching;
                        documentMatchingItem.BankDocumentTable = documentTable.RecId;
                        documentMatchingItem.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>