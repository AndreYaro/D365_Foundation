<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvAdminCustomFieldsCacheHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for expense module that provides utility methods for the trvAdminCustomFields. It facilitates interfacing with the cache
/// used for the setup information.
/// </summary>
public static class TrvAdminCustomFieldsCacheHelper
{
    // The container containing a cache key for header admin custom fields.
    static container                cacheKeyHeaderAdminFields;

    // The container containing a cache key for transaction admin custom fields.
    static container                cacheKeyTransactionAdminFields;

    // The globalObjectCacheScope that defines the cache scope.
    static globalObjectCacheScope   cacheScope;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the two cache keys and cache scope in static constructor.
    /// </summary>
    static void typeNew()
    {
        cacheKeyHeaderAdminFields           += ['_TACFs_' + strUpr(curext()) + '_' + 'Header'];
        cacheKeyTransactionAdminFields      += ['_TACFs_' + strUpr(curext()) + '_' + 'Transaction'];
        cacheScope                          =  'TrvExpense';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderAdminFieldsCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container of cached admin custom header fields setup.
    /// </summary>
    /// <returns>
    /// A container of <c>TrvAdminCustomFields</c> record data stored as value for expense report header fields.
    /// </returns>
    public static container getHeaderAdminFieldsCacheValue()
    {
        TrvAdminCustomFields    trvAdminCustomHeaderFields;
        SysGlobalObjectCache    sysGlobalObjectCache = new SysGlobalObjectCache();
        container               trvAdminCustomHeaderFieldsContainer;

        trvAdminCustomHeaderFieldsContainer = sysGlobalObjectCache.find(cacheScope, cacheKeyHeaderAdminFields);

        if (trvAdminCustomHeaderFieldsContainer == connull())
        {
            trvAdminCustomHeaderFields = TrvAdminCustomFields::getHeaderFields();

            // Insert the container of admin custom fields setup as the cache container.
            trvAdminCustomHeaderFieldsContainer = TrvAdminCustomFieldsCacheHelper::convertBufferToContainer(trvAdminCustomHeaderFields);

            sysGlobalObjectCache.insert(cacheScope, cacheKeyHeaderAdminFields, trvAdminCustomHeaderFieldsContainer);
        }

        return trvAdminCustomHeaderFieldsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionAdminCustomFieldsCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container of cached admin custom transaction fields setup.
    /// </summary>
    /// <returns>
    /// A container of <c>TrvAdminCustomFields</c> record data stored as value for expense line fields.
    /// </returns>
    public static container getTransactionAdminCustomFieldsCacheValue()
    {
        TrvAdminCustomFields    trvAdminCustomTransactionFields;
        SysGlobalObjectCache    sysGlobalObjectCache = new SysGlobalObjectCache();
        container               trvAdminCustomTransactionFieldsContainer;

        trvAdminCustomTransactionFieldsContainer = sysGlobalObjectCache.find(cacheScope, cacheKeyTransactionAdminFields);

        if (trvAdminCustomTransactionFieldsContainer == connull())
        {
            trvAdminCustomTransactionFields = TrvAdminCustomFields::getTransactionFields();
            trvAdminCustomTransactionFieldsContainer = TrvAdminCustomFieldsCacheHelper::convertBufferToContainer(trvAdminCustomTransactionFields);

            sysGlobalObjectCache.insert(cacheScope, cacheKeyTransactionAdminFields, trvAdminCustomTransactionFieldsContainer);
        }

        return trvAdminCustomTransactionFieldsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionSplitFieldsCacheValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a container of cached split transaction fields setup.
    /// </summary>
    /// <returns>
    /// A container of <c>TrvAdminCustomFields</c> record data stored as value for split expense line fields.
    /// </returns>
    public static container getTransactionSplitFieldsCacheValue()
    {
        TrvAdminCustomFields    trvAdminCustomTransactionSplitFields;
        SysGlobalObjectCache    sysGlobalObjectCache = new SysGlobalObjectCache();
        container               trvAdminCustomTransactionSplitFieldsContainer;

        trvAdminCustomTransactionSplitFieldsContainer = sysGlobalObjectCache.find(cacheScope, cacheKeyTransactionAdminFields);

        if (trvAdminCustomTransactionSplitFieldsContainer == connull())
        {
            trvAdminCustomTransactionSplitFields = TrvAdminCustomFields::getTransactionSplitFields();
            trvAdminCustomTransactionSplitFieldsContainer = TrvAdminCustomFieldsCacheHelper::convertBufferToContainer(trvAdminCustomTransactionSplitFields);
            
            sysGlobalObjectCache.insert(cacheScope, cacheKeyTransactionAdminFields, trvAdminCustomTransactionSplitFieldsContainer);
        }
        
        return trvAdminCustomTransactionSplitFieldsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertBufferToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>TrvAdminCustomFields</c> table buffer into a container containing the values of the buffer.
    /// </summary>
    /// <param name = "_trvAdminCustomFields">
    /// The <c>TrvAdminCustomFields</c> table buffer.
    /// </param>
    /// <returns>
    /// A container of <c>TrvAdminCustomFields</c> record objects data stored as value.
    /// </returns>
    private static container convertBufferToContainer(TrvAdminCustomFields _trvAdminCustomFields)
    {
        container trvAdminCustomFieldsContainer;

        while (_trvAdminCustomFields)
        {
            trvAdminCustomFieldsContainer += [[_trvAdminCustomFields.LegalEntity, _trvAdminCustomFields.MethodName, _trvAdminCustomFields.RefFieldId, _trvAdminCustomFields.RefTableId, _trvAdminCustomFields.ShowInForm, _trvAdminCustomFields.Visibility]];
            next _trvAdminCustomFields;
        }

        return trvAdminCustomFieldsContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertContainerToTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the container row into <c>TrvAdminCustomFields</c> table buffer.
    /// </summary>
    /// <param name = "_trvAdminCustomFieldsContainer">
    /// A container of <c>TrvAdminCustomFields</c> record objects data stored as value.
    /// </param>
    /// <param name = "_peekIndex">
    /// The index of the container row to convert to table buffer.
    /// </param>
    /// <returns>
    /// The <c>TrvAdminCustomFields</c> table buffer.
    /// </returns>
    public static TrvAdminCustomFields convertContainerToTableBuffer(container _trvAdminCustomFieldsContainer, int _peekIndex)
    {
        TrvAdminCustomFields        trvAdminCustomFields;

        // Extract the container as table buffer fields exactly as inserted by convertBufferToContainer method.
        [trvAdminCustomFields.LegalEntity, trvAdminCustomFields.MethodName, trvAdminCustomFields.RefFieldId, trvAdminCustomFields.RefTableId, trvAdminCustomFields.ShowInForm, trvAdminCustomFields.Visibility] = conpeek(_trvAdminCustomFieldsContainer, _peekIndex);

        return trvAdminCustomFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAdminCustomFieldsCacheValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cached admin custom setup header and transaction field values from global cache.
    /// </summary>
    public static void clearAdminCustomFieldsCacheValues()
    {
        SysGlobalObjectCache    sysGlobalObjectCache = new SysGlobalObjectCache();

        sysGlobalObjectCache.remove(cacheScope, cacheKeyHeaderAdminFields);
        sysGlobalObjectCache.remove(cacheScope, cacheKeyTransactionAdminFields);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>