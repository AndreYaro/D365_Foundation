<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjResourceMoveTasksAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles updating assignment records of Tasks updated with new start and end dates or Effort hours.
/// </summary>
/// <remarks>
/// This class handles shrinking of Task dates and hours as well as moving assignment records
/// when Tasks get scheduled to a different date.
/// </remarks>
class ProjResourceMoveTasksAssignment
{
    #TimeConstants
    Num                 activityRefTypeId;
    ActivityRecId       activity;
    Hours               activityEffortHours;
    TransDate           activityStartDate, activityEndDate, assignDate, previousAssignDate;
    CalendarId          activityCalendarId;
    boolean             isProject, noDateChange, useResourceCalendar, effortShrink, durationShrink;
    TimeOfDay           assignmentEndTime;
    Days                activityDuration;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOpenDates</Name>
				<Source><![CDATA[
    private Container getOpenDates( TransDate   _activityStartDate,
                                    TransDate   _activityEndDate,
                                    CalendarId  _calendarId)
    {
        container   calendarDateContainer;
        TransDate   assigmentDate;

        assigmentDate = _activityStartDate - 1;
        while (assigmentDate <= _activityEndDate)
        {
            assigmentDate++;
            if (_calendarId)
            {
                assigmentDate = WorkCalendar::findOpenDateForward(_calendarId, assigmentDate, 0, true);
            }

            calendarDateContainer += [assigmentDate];
        }

        return calendarDateContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveAllTasksAssign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow moving WBS task assignment to new start and end dates.  It will only move upto activity effort hours.
    /// </summary>
    /// <remarks>
    /// Assignment hours patter will be conserved with user has change the start date or not.
    /// However if WBS task start date is changed, 0 effort day will be ignore.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void moveAllTasksAssign()
    {
        ttsBegin;

        if (activityEffortHours)
        {
            // reduce task assignment hours of all impacted resources
            this.reduceTaskAssignments();
        }
        else
        {
            // release task assignments when task effort became zero
            this.releaseFromActivity();
        }

        ttsCommit;

        // Update task scheduling status.
        ProjActivityCapacity::updateScheduleStatusByActivity(activity);

        // update validation group and project status
        if (isProject)
        {
            ResUtil::updateTeamInfo(activity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ProjResourceMoveTasksAssignment</c> class.
    /// </summary>
    /// <param name="_activityRefTypeId">
    /// Project or Quotation Id.
    /// </param>
    /// <param name="_isProject">
    /// Determines whether the specified ActivityId is a Project.
    /// </param>
    /// <param name="_activity">
    /// <c>smmActivities</c> record ID for within project or quotation.
    /// </param>
    /// <param name="_activityEffortHours">
    /// Task effort hours.
    /// </param>
    /// <param name="_activityStartDate">
    /// Task start date.
    /// </param>
    /// <param name="_activityEndDate">
    /// Task end date.
    /// </param>
    /// <param name="_activityCalendarId">
    /// Task calendar Id.
    /// </param>
    /// <param name="_activityDuration">
    /// Task duration in Days.
    /// </param>
    /// <param name="_noDateChange">
    /// Determines whether the Task has date changes.
    /// </param>
    /// <param name="_effortShrink">
    /// Determines whether the Task has Effort hour changes.
    /// </param>
    /// <param name="_durationShrink">
    /// Determines whether the Task has Duration changes.
    /// </param>
    /// <remarks>
    /// Creates a new instance of the <c>ProjResourceMoveTasksAssignment</c> class
    /// and initializes buffers used related to the Activity and updated Task.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(Num                 _activityRefTypeId,
                    boolean             _isProject,
                    ActivityRecId       _activity,
                    Hours               _activityEffortHours,
                    SchedFromDate       _activityStartDate,
                    SchedToDate         _activityEndDate,
                    CalendarId          _activityCalendarId,
                    Days                _activityDuration,
                    boolean             _noDateChange,
                    boolean             _effortShrink,
                    boolean             _durationShrink)
    {
        activityRefTypeId   = _activityRefTypeId;
        isProject           = _isProject;
        activity            = _activity;
        activityEffortHours = _activityEffortHours;
        activityStartDate   = _activityStartDate;
        activityEndDate     = _activityEndDate;
        activityCalendarId  = _activityCalendarId;
        activityDuration    = _activityDuration;
        noDateChange        = _noDateChange;
        effortShrink        = _effortShrink;
        durationShrink      = _durationShrink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceTaskAssignments</Name>
				<Source><![CDATA[
    private void reduceTaskAssignments()
    {
        ResAssignment               resAssignment;
        Hours                       tempAssignedHours;
        utcdatetime                 previousDate, effortLimitHour, endDateLimitDay, finalLimitDate;
        utcdatetime                 maxDateValue = DateTimeUtil::maxValue();
        ActivityResourceRecId       effortLimitActivityResource;
        TimeOfDay                   effortLimitEndTime, remainingEndTime;
        Days                        tempDuration;
        real                        roundUpUnit = 0.01;

        // For effort shrink scenario, identify the date with current assignment records
        // which the sum of assignments reaches activity effort hours and associated data.
        // For duration shrink scenario, identify the date with current assignment records
        // which reaches the end date.
        if (effortShrink || durationShrink)
        {
            endDateLimitDay = maxDateValue;
            effortLimitHour = maxDateValue;

            while select Day, Hour, End, ActivityResource, CommitType from resAssignment
            order by Hour, ActivityResource
                where resAssignment.Activity == activity
            {
                if ((durationShrink && endDateLimitDay == maxDateValue)
                || (effortShrink && effortLimitHour == maxDateValue))
                {
                    if ((isProject && resAssignment.CommitType == ResCommitType::HardBook)
                        || (!isProject))
                    {
                        tempAssignedHours += resAssignment.End / #SecondsPerHour;
                    }

                    if (resAssignment.Day > previousDate)
                    {
                        tempDuration++;
                    }

                    if (durationShrink
                        && endDateLimitDay == maxDateValue
                        && (tempDuration >= activityDuration))
                    {
                        endDateLimitDay = resAssignment.Day;
                    }

                    if (effortShrink
                        && effortLimitHour == maxDateValue
                        && (roundUp(tempAssignedHours, roundUpUnit) >= roundUp(activityEffortHours, roundUpUnit)))
                    {
                        effortLimitHour = resAssignment.Hour;
                        effortLimitEndTime = real2int(resAssignment.End);
                        remainingEndTime = real2int(round((tempAssignedHours - activityEffortHours) * #SecondsPerHour, 1));
                        effortLimitActivityResource = resAssignment.ActivityResource;
                    }

                    previousDate = resAssignment.Day;
                }
                else
                {
                    break;
                }
            }
            finalLimitDate = DateTimeUtil::date(endDateLimitDay) < DateTimeUtil::date(effortLimitHour) ? endDateLimitDay : effortLimitHour;
        }

        if (noDateChange)
        {
            if (effortShrink && (DateTimeUtil::date(effortLimitHour) <= DateTimeUtil::date(endDateLimitDay)))
            {
                this.updateAssignmentHoursOnShrinkDate(activity, effortLimitHour, effortLimitEndTime,
                                    remainingEndTime, effortLimitActivityResource, isProject);
            }

            if (durationShrink)
            {
                this.removeExcessiveAssignmentRecords(activity, finalLimitDate);
            }
        }
        else
        {
            if (effortShrink && (DateTimeUtil::date(effortLimitHour) <= DateTimeUtil::date(endDateLimitDay)))
            {
                this.UpdateAssignmentHoursOnShrinkDate(activity, effortLimitHour, effortLimitEndTime,
                                    remainingEndTime, effortLimitActivityResource, isProject);
            }

            if (durationShrink)
            {
                this.RemoveExcessiveAssignmentRecords(activity, finalLimitDate);
            }

            this.updateAssignmentDates( activityRefTypeId, activity, activityStartDate, activityEndDate,
                                    activityEffortHours, activityCalendarId, isProject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseFromActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Release task assignments.
    /// </summary>
    /// <remarks>
    /// This method deletes assignments of the specified commitment type related to the task.
    /// </remarks>
    private void releaseFromActivity()
    {
        ResAssignment resAssignment;

        delete_from resAssignment
        where resAssignment.Activity == activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExcessiveAssignmentRecords</Name>
				<Source><![CDATA[
    private void removeExcessiveAssignmentRecords(ActivityRecId     _activity,
                                              utcdatetime       _finalLimitDate)
    {
        ResAssignment resAssignment;

        resAssignment.skipDatabaseLog(true);
        resAssignment.skipDataMethods(true);
        resAssignment.skipEvents(true);

        delete_from resAssignment
            where resAssignment.Activity == _activity &&
                resAssignment.Day > _finalLimitDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeUpdatedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes an updated date for each record that is involved in the task move transaction.
    /// </summary>
    /// <param name = "_activity">
    /// The activity for which to compute updated dates.
    ///</param>
    /// <param name = "_calendarDateContainer">
    /// The list of updated dates.
    /// </param>
    /// <returns>
    /// The map that holds RecIds and updated dates.
    /// </returns>
    private Map computeUpdatedDates(ActivityRecId    _activity,
                               Container        _calendarDateContainer)
    {
        ResAssignment resAssignment;
        ActivityResourceRecId previousActivityResource;
        Map assignmentRecIdToDayMap = new Map(Types::Int64, Types::UtcDateTime);
        utcDateTime previousDay;
        int dayIndex = 0;

        while select ActivityResource, Hour, Day, RecId from resAssignment
        order by ActivityResource, Hour
        where resAssignment.Activity == _activity &&
            (resAssignment.CommitType == ResCommitType::HardBook ||
            resAssignment.CommitType == ResCommitType::SoftBook)
        {
            if (previousActivityResource != resAssignment.ActivityResource)
            {
                // When we hit a new activity resource, start the list of the updated dates from the beginning.
                dayIndex = 0;
                previousDay = DateTimeUtil::minValue();
            }

            if (previousDay != resAssignment.Day)
            {
                // Increment the dayIndex when we hit a new date in the ResAssignment table.
                dayIndex++;
            }

            if (!assignmentRecIdToDayMap.exists(resAssignment.RecId))
            {
                assignmentRecIdToDayMap.insert(resAssignment.RecId,
                                           DateTimeUtil::newDateTime(conPeek(_calendarDateContainer, dayIndex), 0));
            }
            previousDay = resAssignment.Day;
            previousActivityResource = resAssignment.ActivityResource;
        }
        return assignmentRecIdToDayMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssignmentDates</Name>
				<Source><![CDATA[
    private void updateAssignmentDates( Num                     _activityRefTypeId,
                                        ActivityRecId           _activity,
                                        transDate               _activityStartDate,
                                        transDate               _activityEndDate,
                                        Hours                   _activityEffortHours,
                                        CalendarId              _calendarId,
                                        boolean                 _isProject)
    {
        ResAssignment                   resAssignment;
        container                       calendarDateContainer;
        PreferredLocale                 preferredLocale = (new xSession()).PreferredLocale();

        calendarDateContainer = this.getOpenDates(_activityStartDate, _activityEndDate, _calendarId);

        // Update assignment records to new date
        Map assignmentRecIdToDayMap = this.computeUpdatedDates(_activity, calendarDateContainer);
        ttsbegin;
        while select forupdate Hour, RecId from resAssignment
            where resAssignment.Activity == _activity
        {
            if (assignmentRecIdToDayMap.exists(resAssignment.RecId))
            {
                // Read from the map that holds the updated dates and update the current records accordingly.
                utcdatetime hour = DateTimeUtil::newDateTime(DateTimeUtil::date(assignmentRecIdToDayMap.lookup(resAssignment.RecId)), 
                    DateTimeUtil::time(resAssignment.Hour));
                resAssignment.Hour = hour;
                resAssignment.Day = AVTimeframe::getTimeframe(hour, AVTimeframeType::Day).start();
                resAssignment.Week = AVTimeframe::getTimeframe(hour, AVTimeframeType::Week).start();
                resAssignment.Month = AVTimeframe::getTimeframe(hour, AVTimeframeType::Month).start();
                resAssignment.Quarter = AVTimeframe::getTimeframe(hour, AVTimeframeType::Quarter).start();
                resAssignment.HalfYear = AVTimeframe::getTimeframe(hour, AVTimeframeType::HalfYear).start();

                resAssignment.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssignmentHoursOnShrinkDate</Name>
				<Source><![CDATA[
    private void updateAssignmentHoursOnShrinkDate( ActivityRecId       _activity,
                                                utcdatetime             _effortLimitHour,
                                                TimeOfDay               _effortLimitEndTime,
                                                TimeOfDay               _remainingEndTime,
                                                ActivityResourceRecId   _activityResource,
                                                boolean                 _isProject)
    {
        ResAssignment resAssignment;

        if (_isProject)
        {
            // Update assignment record remaining hours for the activity resource at the hour
            // which hit the task effort hours.
            select firstonly forUpdate resAssignment
                where resAssignment.ActivityResource == _activityResource
                    && resAssignment.Activity == activity
                    && resAssignment.Hour == _effortLimitHour
                    && resAssignment.CommitType == ResCommitType::HardBook;

            if (resAssignment)
            {
                resAssignment.End = _effortLimitEndTime - _remainingEndTime;
                if (resAssignment.End > 0)
                {
                    resAssignment.update();
                }
                else
                {
                    resAssignment.delete();
                }
            }

            resAssignment.skipDatabaseLog(true);
            resAssignment.skipDataMethods(true);
            resAssignment.skipEvents(true);

            // Remove assignment record that at the task effort hours which assigned
            // to activity resource rec ID larger than the target activity resource.
            delete_from resAssignment
            where resAssignment.ActivityResource > _activityResource
                && resAssignment.Activity == activity
                && resAssignment.CommitType == ResCommitType::HardBook
                && resAssignment.Hour == _effortLimitHour;

            // Remove excessive assignment records larger than the hour which hit task effort hours
            delete_from resAssignment
            where resAssignment.Activity == activity
                && resAssignment.CommitType == ResCommitType::HardBook
                && resAssignment.Hour > _effortLimitHour;
        }
        else
        {
            // Update assignment record remaining hours for the activity resource at the hour
            // which hit the task effort hours.
            select firstonly forUpdate resAssignment
                where resAssignment.ActivityResource == _activityResource
                    && resAssignment.Activity == activity
                    && resAssignment.Hour == _effortLimitHour;

            if (resAssignment)
            {
                resAssignment.End = _effortLimitEndTime - _remainingEndTime;
                if (resAssignment.End > 0)
                {
                    resAssignment.update();
                }
                else
                {
                    resAssignment.delete();
                }
            }

            resAssignment.skipDatabaseLog(true);
            resAssignment.skipDataMethods(true);
            resAssignment.skipEvents(true);

            // Remove assignment record that at the task effort hours which assigned
            // to activity resource rec ID larger than the target activity resource.
            delete_from resAssignment
            where resAssignment.ActivityResource > _activityResource
                && resAssignment.Activity == activity
                && resAssignment.Hour == _effortLimitHour;

            // Remove excessive assignment records larger than the hour which hit task effort hours
            delete_from resAssignment
            where resAssignment.Activity == activity
                && resAssignment.Hour > _effortLimitHour;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>