<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPriceActivationCalcFactor</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventPriceActivationCalcFactor extends InventPriceActivation
{
    CostSheetNodeId            calculationNodeId;
    CostSheetNodeCode          calculationNodeCode;
    TableGroupAll               itemCode;
    CostItemRelation            itemRelation;
    CostSheetId                costSheetId;
    InventSiteId                inventSiteId;
    CostSheetCalculationFactor tmpCostSheetCalculationFactor;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    public void activate()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            super();

            CostSheetCalculationFactor costSheetCalculationFactorCurrent = CostSheetCalculationFactor::findCurrent(calculationNodeId,
                                                                                                                     itemCode,
                                                                                                                     itemRelation,
                                                                                                                     inventSiteId,
                                                                                                                     tmpCostSheetCalculationFactor,
                                                                                                                     true);

            costSheetCalculationFactorCurrent.moveCurrentToPrevious();

            CostSheetCalculationFactor costSheetCalculationFactorPending = CostSheetCalculationFactor::find( calculationNodeId,
                                                                                                               itemCode,
                                                                                                               itemRelation,
                                                                                                               versionId,
                                                                                                               fromDate,
                                                                                                               0,
                                                                                                               inventSiteId,
                                                                                                               tmpCostSheetCalculationFactor,
                                                                                                               true);

            this.checkFromDate();
            costSheetCalculationFactorPending.movePendingToCurrent();

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateCheckFailedMessage</Name>
				<Source><![CDATA[
    protected str dateCheckFailedMessage()
    {
        return strFmt("@SYS112798",
                      calculationNodeCode, fromDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationNodeCode</Name>
				<Source><![CDATA[
    public CostSheetNodeCode parmCalculationNodeCode(CostSheetNodeCode _calculationNodeCode = calculationNodeCode)
    {
        calculationNodeCode = _calculationNodeCode;

        return calculationNodeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationNodeId</Name>
				<Source><![CDATA[
    public CostSheetNodeId parmCalculationNodeId(CostSheetNodeId _calculationNodeId = calculationNodeId)
    {
        calculationNodeId = _calculationNodeId;

        return calculationNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostSheetId</Name>
				<Source><![CDATA[
    public CostSheetId parmCostSheetId(CostSheetId _costSheetId = costSheetId)
    {
        costSheetId = _costSheetId;

        return costSheetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemCode</Name>
				<Source><![CDATA[
    public TableGroupAll parmItemCode(TableGroupAll _itemCode = itemCode)
    {
        itemCode = _itemCode;

        return itemCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemRelation</Name>
				<Source><![CDATA[
    public CostItemRelation parmItemRelation(CostItemRelation _itemRelation = itemRelation)
    {
        itemRelation = _itemRelation;

        return itemRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpCostSheetCalculationFactor</Name>
				<Source><![CDATA[
    public CostSheetCalculationFactor parmTmpCostSheetCalculationFactor(CostSheetCalculationFactor _tmpCostSheetCalculationFactor = tmpCostSheetCalculationFactor)
    {
        tmpCostSheetCalculationFactor = _tmpCostSheetCalculationFactor;

        return tmpCostSheetCalculationFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventPriceActivationCalcFactor construct()
    {
        return new InventPriceActivationCalcFactor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostSheetCalculationFactor</Name>
				<Source><![CDATA[
    public static InventPriceActivationCalcFactor newCostSheetCalculationFactor(
        CostSheetNodeId            _calculationNodeId,
        CostSheetNodeCode          _calculationNodeCode,
        TableGroupAll               _itemCode,
        CostItemRelation            _itemRelation,
        CostingVersionId            _versionId,
        FromDate                    _fromDate,
        InventSiteId                _inventSiteId,
        CostSheetCalculationFactor _tmpCostSheetCalculationFactor,
        CostSheetId                _costSheetId = CostSheetTable::defaultCostSheetTable().SheetId
        )
    {
        InventPriceActivationCalcFactor inventPriceActivationCalcFactor = InventPriceActivationCalcFactor::construct();

        inventPriceActivationCalcFactor.parmCostSheetId(_costSheetId);
        inventPriceActivationCalcFactor.parmCalculationNodeId(_calculationNodeId);
        inventPriceActivationCalcFactor.parmCalculationNodeCode(_calculationNodeCode);
        inventPriceActivationCalcFactor.parmItemCode(_itemCode);
        inventPriceActivationCalcFactor.parmItemRelation(_itemRelation);
        inventPriceActivationCalcFactor.parmVersionId(_versionId);
        inventPriceActivationCalcFactor.parmFromDate(_fromDate);
        inventPriceActivationCalcFactor.parmInventSiteId(_inventSiteId);
        inventPriceActivationCalcFactor.parmTmpCostSheetCalculationFactor(_tmpCostSheetCalculationFactor);

        return inventPriceActivationCalcFactor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
