<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventLedgerConflictController</c> class handles the report initialization for the
///    <c>InventLedgerConflict</c> report.
/// </summary>
class InventLedgerConflictController extends SrsReportRunController implements BatchRetryable
{
    CostSelectPeriodState costSelectPeriodState;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Closes the dialog if the report viewer form is not being shown for the report viewer.
    /// </summary>
    /// <remarks>
    ///    This method is overridden to let you view multiple copies of same report.
    /// </remarks>
    protected void dialogClose()
    {
        if (!useReportViewerForm)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogShow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    If report viewer form is being shown, we do not want to close this.Overriding this method to detach
    ///    the form after report viewer is shown. This can show multiple report viewers.
    /// </summary>
    protected void dialogShow()
    {
        if (useReportViewerForm)
        {
            var sysOperationDialog = dialog as SysOperationDialog;
            if (sysOperationDialog)
            {
                sysOperationDialog.run();
                this.dialogPostRun();
                var formRun = sysOperationDialog.formRun();
                formRun.detach();
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventLedgerConflictController construct()
    {
        return new InventLedgerConflictController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostSelectPeriodState</Name>
				<Source><![CDATA[
    protected void parmCostSelectPeriodState(CostSelectPeriodState _costSelectPeriodState)
    {
        costSelectPeriodState = _costSelectPeriodState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        super();

        if (costSelectPeriodState)
        {
            var inventLedgerConflictContract    = this.parmReportContract().parmRdpContract() as InventLedgerConflictContract;
            var inventCostDateCodeContract      = inventLedgerConflictContract.parmInventCostDateCodeContract();

            inventCostDateCodeContract.parmDateCode(costSelectPeriodState.parmDateCode());
            inventCostDateCodeContract.parmFromDate(costSelectPeriodState.parmFromDate());
            inventCostDateCodeContract.parmToDate(costSelectPeriodState.parmToDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventLedgerConflictController  controller = InventLedgerConflictController::construct();

        CostSelectPeriodState costSelectPeriodState = _args.parmObject() as CostSelectPeriodState;
        controller.parmCostSelectPeriodState(costSelectPeriodState);
        controller.parmReportName(ssrsReportStr(InventLedgerConflict, Report));

        controller.parmDialogCaption("@SYS314037");
        controller.parmDisableRefreshButton(true);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;

        ret = super();

        if (ret
            && InventLedgerConflictReportCleanUpFeature::isEnabled()
            && InventLedgerConflictReportCleanUp::cleanUpJobIsRunning())
        {
            ret = checkFailed("@SCM:InventLedgerConflictCleanUpRunning");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportIsRunning</Name>
				<Source><![CDATA[
    public static boolean reportIsRunning()
    {
        Batch    batch;
        BatchJob batchJob;

        select firstOnly crosscompany RecId from batchJob
            exists join batch
            where batch.BatchJobId == batchJob.RecId
                && (batch.status == BatchStatus::Waiting
                    || batch.status == BatchStatus::Executing)
                && (batch.ClassNumber == classNum(InventLedgerConflictController)
                    || batch.ClassNumber == classNum(ProdWIPLedgerConflictController));

        return batchJob.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>