<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransItemPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransItemPurchLine extends ProjTransItem
{
    PurchLine   purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        ProjFundingSource   projFundingSource;
        boolean             ret = true;

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret == true)
        {
            projFundingSource = ProjFundingSource::find(this.fundingSource());
            if ((projFundingSource.FundingType == ProjFundingType::Organization) ||
                (projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource))
            {
                ret = false;
            }
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
        public ProjCategoryId categoryId()
    {
        return purchLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
        ProjSalesCurrencyCode currencyIdSales()
    {
        return purchLine.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
        public DimensionDefault defaultDimension()
    {
        return purchLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory dimension for this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory dimension for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    InventDimId inventDimId()
    {
        return purchLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return purchLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemType::Project</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to return a different transaction
    /// origin for the specific transaction.
    /// </remarks>
    ProjTransactionOrigin itemType()
    {
        return ProjOrigin::ItemJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus::None</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return ProjLedgerStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
        public ProjLinePropertyId linePropertyId()
    {
        return purchLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether project budget needs to be validated.
    /// </summary>
    /// <returns>
    /// true if project budget needs to be validated; otherwise, false.
    /// </returns>
    public boolean mustValidateBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(PurchLine _purchLine)
    {
        purchLine    = _purchLine;

        super(_purchLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
        public ProjId projId()
    {
        return purchLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
        public Qty qty()
    {
        return purchLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
        public SalesPrice salesPrice()
    {
        return purchLine.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// The sales unit for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public UnitOfMeasureSymbol salesUnit()
    {
        return purchLine.ProjSalesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(InventJournalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
        public TaxGroup taxGroup()
    {
        return purchLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
        public TransDate transDate()
    {
        return purchLine.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
        public AmountCur transTurnover()
    {
        return PriceDisc::price2Amount(this.salesPrice(),
                                       InventTable::find(this.itemId()).salesPriceUnit(),
                                       0,
                                       this.qty(), // Deliver now
                                       0,
                                       0,
                                       0,
                                       this.currencyIdSales(),
                                       0,
                                       false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>