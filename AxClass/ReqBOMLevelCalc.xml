<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqBOMLevelCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqBOMLevelCalc</c> class is responsible for calculating planning BOM levels.
/// </summary>
public class ReqBOMLevelCalc extends BOMLevelCalc implements BatchRetryable
{
    Map  itemIdMap;
    Map  itemIdCoProductMap;
    Map  inventDimMap;
    Map  distinctProductMap;
    Map  distinctProductActiveForPlanningMap;
    List productDimensionsList;
    ListEnumerator productDimensionsListEnumerator;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>distinctProductsForItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the set of distinct product RecIds matching the specified ItemId.
    /// </summary>
    /// <param name = "_itemId">ItemId to search for.</param>
    /// <returns>A set of matching RecIds.</returns>
    private Set distinctProductsForItemId(ItemId _itemId)
    {
        if (!itemIdMap.exists(_itemId))
        {
            itemIdMap.insert(_itemId, new Set(Types::Int64));
        }

        return itemIdMap.lookup(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>coProductsForItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the set of distinct product RecIds which are co-products for the specified ItemId.
    /// </summary>
    /// <param name = "_itemId">ItemId to search for.</param>
    /// <returns>A list of co-product RecIds.</returns>
    private List coProductsForItemId(ItemId _itemId)
    {
        if (!itemIdCoProductMap.exists(_itemId))
        {
            itemIdCoProductMap.insert(_itemId, new List(Types::Int64));
        }

        return itemIdCoProductMap.lookup(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityContext</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext createActivityContext()
    {
        return BomInstrumentationLogger::createLogger(classStr(ReqBOMLevelCalc)).bom().reqLevelCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dictinctProductsForProductDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the set of distinct product RecIds matching the specified product dimension value.
    /// </summary>
    /// <param name = "_itemId">The item id to get applicable product dimensions for.</param>
    /// <param name = "_fieldId">FieldId of the field inside InventDim.</param>
    /// <param name = "_fieldValue">Value to look for in the specified field.</param>
    /// <returns>A set of matching RecIds.</returns>
    private Set dictinctProductsForProductDimensionValue(ItemId _itemId, FieldId _fieldId, str _fieldValue)
    {
        str key = strFmt("%1#%2#%3", _itemId, _fieldId, _fieldValue);

        if (!inventDimMap.exists(key))
        {
            inventDimMap.insert(key, new Set(Types::Int64));
        }

        return inventDimMap.lookup(key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductDimensionFieldList</Name>
				<Source><![CDATA[
    private List buildProductDimensionFieldList()
    {
        List result = new List(Types::Container);

        Enumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();

        while (enum.moveNext())
        {
            InventProductDimension productDimension = enum.current() as InventProductDimension;
            FieldId inventDimFieldId = productDimension.parmInventDimFieldId();
            FieldId inventDistinctProductFieldId = InventDistinctProduct::productDimensionFieldId(productDimension);

            if (inventDimFieldId && inventDistinctProductFieldId)
            {
                result.addEnd([inventDimFieldId, inventDistinctProductFieldId]);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMatchingDistinctProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of RecIds of all distinct products matching the specified ItemId and product dimensions.
    /// </summary>
    /// <param name = "_itemId">ItemId to look for.</param>
    /// <param name = "_inventDim">InventDim buffer containing the product dimension values to look for.</param>
    /// <returns>A set of RecIds matching all the criteria.</returns>
    private Set findMatchingDistinctProducts(ItemId _itemId, InventDim _inventDim)
    {
        Set result;

        RecId directMatchRecId = this.findInventDistinctProductRecIdWithFullProductDimMatch(_itemId, _inventDim);
        if (directMatchRecId)
        {
            boolean isActiveForPlanning = distinctProductActiveForPlanningMap.exists(directMatchRecId) && distinctProductActiveForPlanningMap.lookup(directMatchRecId);
            if (isActiveForPlanning)
            {
                result = new Set(Types::Int64);
                result.add(directMatchRecId);
            }
        }
        else
        {
            result = this.distinctProductsForItemId(_itemId);
            
            productDimensionsListEnumerator.reset();
            while (productDimensionsListEnumerator.moveNext())
            {
                FieldId inventDimFieldId, distinctProductFieldId;

                [inventDimFieldId, distinctProductFieldId] = productDimensionsListEnumerator.current();

                if (_inventDim.(inventDimFieldId))
                {
                    result = Set::intersection(this.dictinctProductsForProductDimensionValue(_itemId, inventDimFieldId, _inventDim.(inventDimFieldId)), result);
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDistinctProductRecIdWithFullProductDimMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventDistinctProduct</c> RecId matching the specified item and all the product dimension values.
    /// </summary>
    /// <param name = "_itemId">The ItemId to look for.</param>
    /// <param name = "_inventDim">The product dimensions to look for.</param>
    /// <returns>The matching RecId if any.</returns>
    private RecId findInventDistinctProductRecIdWithFullProductDimMatch(ItemId _itemId, InventDim _inventDim)
    {
        FieldId  inventDimFieldId, reqItemLevelFieldId;
        str key = _itemId;
        
        productDimensionsListEnumerator.reset();
        while (productDimensionsListEnumerator.moveNext())
        {
            [inventDimFieldId, reqItemLevelFieldId] = productDimensionsListEnumerator.current();
            key += this.productDimValueToKey(_inventDim.(inventDimFieldId));
        }
        
        if (distinctProductMap.exists(key))
        {
            return distinctProductMap.lookup(key);
        }
        
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimValueToKey</Name>
				<Source><![CDATA[
    private str productDimValueToKey(anytype _value)
    {
        return '#' + InventDim::dimValueAsStringInvariant(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProductInformation</Name>
				<Source><![CDATA[
    private void loadProductInformation()
    {
        InventDistinctProduct distinctProduct;
        EcoResProductLifecycleState lifecycleState;

        itemIdMap = new Map(Types::String, Types::Class);
        itemIdCoProductMap = new Map(Types::String, Types::Class);
        inventDimMap = new Map(Types::String, Types::Class);
        distinctProductMap = new Map(Types::String, Types::Int64);
        distinctProductActiveForPlanningMap = new Map(Types::Int64, Types::Integer);

        while select distinctProduct
            outer join lifecycleState
                where lifecycleState.StateId == distinctProduct.ProductLifecycleStateId
        {
            this.addToOriginalBomLevelMap(distinctProduct.RecId, distinctProduct.Level);

            boolean isActiveForPlanning = (lifecycleState.RecId ? lifecycleState.IsActiveForPlanning : true);
            if (isActiveForPlanning)
            {
                this.distinctProductsForItemId(distinctProduct.ItemId).add(distinctProduct.RecId);

                if (distinctProduct.PmfProductType == PmfProductType::Co_Product)
                {
                    this.coProductsForItemId(distinctProduct.PmfPlanningItemId).addEnd(distinctProduct.RecId);
                }
            }

            var itemProductDimKey = distinctProduct.ItemId;

            productDimensionsListEnumerator.reset();
            while (productDimensionsListEnumerator.moveNext())
            {
                FieldId inventDimFieldId, distinctProductFieldId;
                [inventDimFieldId, distinctProductFieldId] = productDimensionsListEnumerator.current();

                if (isActiveForPlanning && distinctProduct.(distinctProductFieldId))
                {
                    this.dictinctProductsForProductDimensionValue(distinctProduct.ItemId, inventDimFieldId, distinctProduct.(distinctProductFieldId)).add(distinctProduct.RecId);
                }

                itemProductDimKey += this.productDimValueToKey(distinctProduct.(distinctProductFieldId));
            }
            
            distinctProductMap.insert(itemProductDimKey, distinctProduct.RecId);
            distinctProductActiveForPlanningMap.insert(distinctProduct.RecId, isActiveForPlanning);
        }

        MapEnumerator coProductEnumerator = itemIdCoProductMap.getEnumerator();

        while (coProductEnumerator.moveNext())
        {
            SetEnumerator itemEnumerator = this.distinctProductsForItemId(coProductEnumerator.currentKey()).getEnumerator();

            while (itemEnumerator.moveNext())
            {
                List coProductList = coProductEnumerator.currentValue();
                ListEnumerator coProductListEnumerator = coProductList.getEnumerator();

                while (coProductListEnumerator.moveNext())
                {
                    analyzer.pmfAddEndItemGroupMember(coProductListEnumerator.current(), itemEnumerator.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the dependencies between all the distinct products matching the header and the distinct products matching the line.
    /// </summary>
    /// <param name = "_headerSet">Set of RecIds matching the header.</param>
    /// <param name = "_lineSet">Set of RecIds matching the line.</param>
    private void addDependencies(Set _headerSet, Set _lineSet)
    {
        if (_headerSet != null && _lineSet != null)
        {
            SetEnumerator headerEnumerator = _headerSet.getEnumerator();
            while (headerEnumerator.moveNext())
            {
                SetEnumerator lineEnumerator = _lineSet.getEnumerator();

                while (lineEnumerator.moveNext())
                {
                    RefRecId headerRecId = headerEnumerator.current();
                    RefRecId lineRecId = lineEnumerator.current();

                    if (lineRecId != headerRecId)
                    {
                        analyzer.addDependency(lineRecId, headerRecId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads is-produced-from dependencies from BOM and production BOM into the analyzer.
    /// </summary>
    protected void loadDependencies()
    {
        productDimensionsList = this.buildProductDimensionFieldList();
        productDimensionsListEnumerator = productDimensionsList.getEnumerator();

        this.loadProductInformation();

        date todayDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        BOMVersion bomVersion;
        BOM        bomLine;
        InventDim  bomVersionInventDim;
        InventDim  bomLineInventDim;

        while select
            ItemId from bomVersion
                where (!isConfigurationkeyEnabled(configurationKeyNum(BOMApprove)) || bomVersion.Approved == NoYes::Yes)
                   && (bomVersion.ToDate >= todayDate || bomVersion.ToDate == dateNull())
            join bomVersionInventDim
                where bomVersionInventDim.inventDimId == bomVersion.InventDimId
            join ItemId from bomLine
                where bomLine.BOMId == bomVersion.BOMId
                   && (bomLine.ToDate >= todayDate || bomLine.ToDate == dateNull())
            join bomLineInventDim
                where bomLineInventDim.inventDimId == bomLine.InventDimId
        {
            Set headerItems = this.findMatchingDistinctProducts(bomVersion.ItemId, bomVersionInventDim);
            Set lineItems   = this.findMatchingDistinctProducts(bomLine.ItemId, bomLineInventDim);

            this.addDependencies(headerItems, lineItems);
        }

        this.loadDependenciesForProductionOrders();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDependenciesForProductionOrders</Name>
				<Source><![CDATA[
    protected void loadDependenciesForProductionOrders()
    {
        ProdTable prodTable;
        ProdBOM   prodBom;
        InventDim prodTableInventDim;
        InventDim prodBomInventDim;

        while select
            ItemId from prodTable
                where (prodTable.ProdStatus == ProdStatus::CostEstimated
                    || prodTable.ProdStatus == ProdStatus::Scheduled
                    || prodTable.ProdStatus == ProdStatus::Released
                    || prodTable.ProdStatus == ProdStatus::StartedUp
                    || prodTable.ProdStatus == ProdStatus::ReportedFinished)
            join prodTableInventDim
                where prodTableInventDim.inventDimId == prodTable.InventDimId
            join ItemId from prodBom
                where prodBom.ProdId == prodTable.ProdId
            join prodBomInventDim
                where prodBomInventDim.inventDimId == prodBom.InventDimId
        {
            Set headerItems = this.findMatchingDistinctProducts(prodTable.ItemId, prodTableInventDim);
            Set lineItems   = this.findMatchingDistinctProducts(prodBom.ItemId, prodBomInventDim);

            this.addDependencies(headerItems, lineItems);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMLevels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the BOM levels of all items.
    /// </summary>
    protected void updateBOMLevels()
    {
        InventDistinctProduct    inventDistinctProduct;
        RefRecId        inventDistinctProductRecId;
        MapEnumerator   enumLevels;
        BOMLevel        newLevel;
        BOMLevel        maxLevel;

        this.validateUserConnection();
        inventDistinctProduct.setConnection(connection);

        connection.ttsbegin();

        inventDistinctProduct.skipDataMethods(true);

        // Update BOM level for the items where the bom level is changed.
        enumLevels = analyzer.getLevels().getEnumerator();
        while (enumLevels.moveNext())
        {
            inventDistinctProductRecId = enumLevels.currentKey();
            newLevel = enumLevels.currentValue();

            if (newLevel != originalBOMLevelMap.lookup(inventDistinctProductRecId))
            {
                update_recordset inventDistinctProduct
                    setting Level = newLevel
                    where inventDistinctProduct.RecId == inventDistinctProductRecId;
            }
            maxLevel = max(newLevel, maxLevel);
        }

        // Make all co-products that are not being planned with a planning item go to the last BOM level
        update_recordset inventDistinctProduct
            setting Level = maxLevel + 1
            where inventDistinctProduct.PmfProductType == PmfProductType::Co_Product
               && inventDistinctProduct.PmfPlanningItemId == '';

        connection.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markLevelsUpToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a flag marking levels as recalculated.
    /// </summary>
    protected void markLevelsUpToDate()
    {
        this.validateUserConnection();

        BOMLevelRecalculation bomLevelRecalculation = BOMLevelRecalculation::find(curext(), true);
        bomLevelRecalculation.setConnection(connection);
        
        bomLevelRecalculation.PlanningBomLevelRecalculationNeeded = NoYes::No;
        bomLevelRecalculation.update();

    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMLevelCalcNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes whether the BOM level recalculation is needed.
    /// </summary>
    /// <returns>
    ///    true if the BOM level recalculation is needed; otherwise, false.
    /// </returns>
    public boolean isBOMLevelCalcNeeded()
    {
        return BOMLevelRecalculation::find().PlanningBOMLevelRecalculationNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useCostCalculationLevel</Name>
				<Source><![CDATA[
    protected boolean useCostCalculationLevel()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqBOMLevelCalc construct()
    {
        return new ReqBOMLevelCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS112515";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>