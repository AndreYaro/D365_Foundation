<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendTransSettlement</c> class is used to manage a collection of <c>VendTrans</c> records and
///    <c>VendSettlement</c> records.
/// </summary>
public class VendTransSettlement extends CustVendTransSettlement
{
    private MainAccountNum nextTransSummaryAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setNextTransSummaryAccount</Name>
				<Source><![CDATA[
    internal void setNextTransSummaryAccount(MainAccountNum _summaryAccount)
    {
        if (VendTransAssignSummaryAccountIdToSettlementTransFlight::instance().isEnabled())
        {
            this.nextTransSummaryAccount = _summaryAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransAndSettlement</Name>
				<Source><![CDATA[
    public void addTransAndSettlement(CustVendTrans _custVendTrans,
        CustVendSettlement _custVendSettlement,
        Counter _settlementGroupPlaceHolder,
        boolean _setOffsetRecId = false,
        CustVendSettlement _previousCustVendSettlement = null)
    {
        if (VendTransAssignSummaryAccountIdToSettlementTransFlight::instance().isEnabled() && !_custVendTrans.SummaryAccountId && nextTransSummaryAccount)
        {
            _custVendTrans.SummaryAccountId = nextTransSummaryAccount;
            nextTransSummaryAccount = '';
        }
        super(_custVendTrans, _custVendSettlement, _settlementGroupPlaceHolder, _setOffsetRecId, _previousCustVendSettlement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified <c>VendTransOpen</c> record and moves the associated
    ///    <c>VendTransCashDisc</c> records to the specified <c>VendSettlement</c> record.
    /// </summary>
    /// <param name = "_vendTransOpenRecIdToDelete">The record ID of the <c>VendTransOpen</c> record that will be deleted.</param>
    /// <param name = "_custVendSettlement">The <c>VendSettlement</c> record to move <c>VendTransCashDisc</c> records.</param>
    protected void deleteCustVendTransOpen(RecId _custVendTransOpenRecIdToDelete, CustVendSettlement _custVendSettlement)
    {
        if (_custVendTransOpenRecIdToDelete != 0)
        {
            VendTransOpen vendTransOpen;

            VendTransCashDisc::moveCashDisc(tableNum(VendTransOpen),
                _custVendTransOpenRecIdToDelete,
                tableNum(VendSettlement),
                _custVendSettlement.RecId);

            delete_from vendTransOpen
                where vendTransOpen.RecId == _custVendTransOpenRecIdToDelete;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a properly initialized CustVendSettlement map.
    /// </summary>
    /// <param name="_company">
    /// The company used to initialize the record.
    /// </param>
    /// <returns>
    /// A VendSettlement table.
    /// </returns>
    protected CustVendSettlement initCustVendSettlementMap(dataAreaId _company)
    {
        VendSettlement vendSettlement;
        ;

        changecompany(_company)
        {
            vendSettlement.clear();
        }
        return vendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransMap</Name>
				<Source><![CDATA[
    protected CustVendTrans initCustVendTransMap(DataAreaId _company)
    {
        VendTrans vendTrans;
        ;

        changecompany(_company)
        {
            vendTrans.clear();
        }
        return vendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransSettlementOffsetRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the OffsetRecId field on the CustVendTrans table and CustVendSettlement table.
    /// </summary>
    /// <param name="_recIdOfTransaction">
    /// The rec ID of the transaction to update.
    /// </param>
    /// <param name="_offsetRecId">
    /// The record ID value used to update the OffsetRecId field.
    /// </param>
    /// <param name="_offsetVoucher">
    /// The voucher value used to update the LastSettleVoucher field and OffsetTransVoucher field.
    /// </param>
    /// <param name="_companyOfTransaction">
    /// The company of the records to update.
    /// </param>
    protected void updateTransSettlementOffsetRecId(
        RefRecId _recIdOfTransaction,
        RefRecId _offsetRecId,
        Voucher _offsetVoucher,
        CompanyId _companyOfTransaction)
    {
        VendSettlement  vendSettlement;
        VendTrans       vendTrans;
        ;

        changecompany(_companyOfTransaction)
        {
            update_recordset vendTrans
                setting OffsetRecId = _offsetRecId,
                LastSettleVoucher = _offsetVoucher
                where vendTrans.RecId == _recIdOfTransaction;

            update_recordset vendSettlement
                setting OffsetRecId = _offsetRecId,
                OffsetTransVoucher = _offsetVoucher
                where vendSettlement.TransRecId == _recIdOfTransaction;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>