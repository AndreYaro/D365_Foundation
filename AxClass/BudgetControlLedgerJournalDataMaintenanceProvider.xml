<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlLedgerJournalDataMaintenanceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlLedgerJournalDataMaintenanceProvider</c> class is responsible for orchestrating
/// the finding and processing of ledger journal budget data.
/// </summary>
internal class BudgetControlLedgerJournalDataMaintenanceProvider extends BudgetControlDataMaintenanceProvider
    implements BudgetControlIDataMaintenanceOverrunSupported,
               BudgetControlIDataMaintenanceOrderByUpdatable
{
    private str providerClassName;
    private BudgetControlDataMaintenanceRecId budgetControlDataMaintenanceRecId;
    private BudgetControlLedgerJournalDataMaintenanceRequest maintenanceRequest;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        providerClassName = classStr(BudgetControlLedgerJournalDataMaintenanceProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlLedgerJournalDataMaintenanceProvider construct()
    {
        BudgetControlLedgerJournalDataMaintenanceProvider budgetControlLedgerJournalDataMaintenanceProvider
            = new BudgetControlLedgerJournalDataMaintenanceProvider();

        return budgetControlLedgerJournalDataMaintenanceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFindDocuments</Name>
				<Source><![CDATA[
    public void preFindDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        super(_budgetControlDataMaintenanceRecId);

        if (maintenanceRequest && maintenanceRequest.RemoveFoundDocuments)
        {
            BudgetControlDataMaintenanceProvider::removeExistingFoundDocuments(_budgetControlDataMaintenanceRecId, providerClassName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds documents that require budget control data maintenance.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> process group record Id.
    /// </param>
    public void findDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        budgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
        BudgetControlDataMaintenance budgetControlDataMaintenance = BudgetControlDataMaintenance::find(budgetControlDataMaintenanceRecId);

        this.maintenanceRequest = BudgetControlLedgerJournalDataMaintenanceProvider::determineLedgerJournalRequest(
                                    _budgetControlDataMaintenanceRecId, this);

        if (maintenanceRequest)
        {
            SysOperationSandbox::callStaticMethod(classNum(BudgetControlLedgerJournalDataMaintenanceProvider),
                staticMethodStr(BudgetControlLedgerJournalDataMaintenanceProvider, findAndPopulateDocuments),
                maintenanceRequest.pack(),
                "@Budget:LedgerJournalDataMaintenanceProviderName");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndPopulateDocuments</Name>
				<Source><![CDATA[
    private static void findAndPopulateDocuments(container _inputParameters)
    {
        BudgetControlLedgerJournalDataMaintenanceProvider provider = new BudgetControlLedgerJournalDataMaintenanceProvider();
        provider.findRequestedDocuments(_inputParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRequestedDocuments</Name>
				<Source><![CDATA[
    private void findRequestedDocuments(container _inputParameters)
    {
        BudgetControlLedgerJournalDataMaintenanceRequest request = BudgetControlLedgerJournalDataMaintenanceRequest::construct();
        request.unpack(_inputParameters);

        LedgerRecId ledgerRecId = Ledger::findByLegalEntity(CompanyInfo::findDataArea(request.DataAreaId).RecId).RecId;
        Description255 dataMaintenanceProviderName = this.getName();
        Description255 dataMaintenanceDescription = this.getDescription();
        
        BudgetControlDataMaintenance dataMaintenance = BudgetControlDataMaintenance::find(request.BudgetControlDataMaintenanceRecId);

        BudgetControlSourceIntegrator sourceIntegrator = BudgetSourceLedgerJournalTrans::getBudgetControlSourceIntegrator(request.LedgerJournalType);
        BudgetSourceTrackingStatus budgetSourceTrackingStatus = dataMaintenance.DocumentSourceTrackingStatus;
        NoYes isPosted = budgetSourceTrackingStatus == BudgetSourceTrackingStatus::Draft ? NoYes::No : NoYes::Yes;
        DimensionHierarchyId budgetControlAccountStructureId = BudgetControlConfiguration::findActiveByPrimaryLedger(ledgerRecId).DimensionHierarchyAccountStructure;
        BudgetControlDataMaintenanceRecId dataMaintenanceRecId = request.BudgetControlDataMaintenanceRecId;
        
        this.preFindDocuments(budgetControlDataMaintenanceRecId);

        BudgetControlDataMaintenanceTracking dataMaintenanceTrackingExisting;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;
        DimensionAttributeValueCombination ledgerDimension;

        changecompany (request.DataAreaId)
        {
            BudgetControlDataMaintenanceTracking dataMaintenanceTracking;

            ttsbegin;

            insert_recordset dataMaintenanceTracking (
                BudgetControlDataMaintenance,
                DataMaintenanceProvider,
                DataMaintenanceProviderName,
                DataMaintenanceProviderDescription,
                TrackingDocument,
                TrackingNumber,
                TrackingStatus,
                TrackingSourceIntegrator,
                OriginatingTrackingNumber,
                OriginatingTrackingSourceIntegrator)
            select dataMaintenanceRecId,
                    providerClassName,
                    dataMaintenanceProviderName,
                    dataMaintenanceDescription,
                    RecId,
                    JournalNum,
                    budgetSourceTrackingStatus,
                    sourceIntegrator,
                    JournalNum,
                    sourceIntegrator
                from ledgerJournalTable
                    where ledgerJournalTable.Posted == isPosted
                        && ledgerJournalTable.JournalType == request.LedgerJournalType
                        && ledgerJournalTable.JournalNum == request.FilterValue
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                        && ledgerJournalTrans.TransDate >= dataMaintenance.DocumentFromDate
                        && ledgerJournalTrans.TransDate <= dataMaintenance.DocumentToDate
                        && (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                            || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                exists join ledgerDimension
                    where ledgerDimension.AccountStructure == budgetControlAccountStructureId
                        && (ledgerDimension.RecId == ledgerJournalTrans.LedgerDimension
                            || ledgerDimension.RecId == ledgerJournalTrans.OffsetLedgerDimension)
                notexists join dataMaintenanceTrackingExisting
                    where dataMaintenanceTrackingExisting.BudgetControlDataMaintenance == request.BudgetControlDataMaintenanceRecId
                        && dataMaintenanceTrackingExisting.DataMaintenanceProvider == providerClassName
                        && dataMaintenanceTrackingExisting.TrackingDocument == ledgerJournalTable.RecId;

            this.updateDetectionDateTime(request.BudgetControlDataMaintenanceRecId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLedgerJournalRequest</Name>
				<Source><![CDATA[
    private static BudgetControlLedgerJournalDataMaintenanceRequest determineLedgerJournalRequest(
        BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId,
        Object _caller)
    {
        BudgetControlLedgerJournalDataMaintenanceRequest maintenanceRequest;
        BudgetControlDataMaintenance budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);
        NoYes isPosted = budgetControlDataMaintenance.DocumentSourceTrackingStatus == BudgetSourceTrackingStatus::Draft ? NoYes::No : NoYes::Yes;

        Args args = new Args();
        args.caller(_caller);
        args.record(budgetControlDataMaintenance);

        FormRun ledgerJournalDataMaintenance = new MenuFunction(menuItemDisplayStr(BudgetControlLedgerJournalDataMaintenance), MenuItemType::Display).create(args);

        if (ledgerJournalDataMaintenance)
        {
            ledgerJournalDataMaintenance.run();
            ledgerJournalDataMaintenance.wait();
            if (ledgerJournalDataMaintenance.closedOk())
            {
                var requestable = ledgerJournalDataMaintenance as BudgetControlILedgerJournalDataMaintenanceRequestable;

                maintenanceRequest = requestable.getRequest();
                maintenanceRequest.FromDate = budgetControlDataMaintenance.DocumentFromDate;
                maintenanceRequest.ToDate = budgetControlDataMaintenance.DocumentToDate;
                maintenanceRequest.BudgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;

                if (BudgetDMAvoidVendAcctJournalLinesProcessingFlight::instance().isEnabled())
                {
                    BudgetControlLedgerJournalDataMaintenanceProvider::avoidProcessingJournalDocumentWithVendorAccountType(maintenanceRequest, isPosted);
                }
            }
        }

        return maintenanceRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>avoidProcessingJournalDocumentWithVendorAccountType</Name>
				<Source><![CDATA[
    internal static void avoidProcessingJournalDocumentWithVendorAccountType(BudgetControlLedgerJournalDataMaintenanceRequest _dataMaintenanceRequest, NoYes _isPosted)
    {
        changecompany (_dataMaintenanceRequest.DataAreaId)
        {
            LedgerJournalTable ledgerJournalTable;
            LedgerJournalTrans ledgerJournalTrans;

            select firstonly JournalNum from ledgerJournalTable
                where ledgerJournalTable.Posted == _isPosted
                    && ledgerJournalTable.JournalType == _dataMaintenanceRequest.LedgerJournalType
                    && ledgerJournalTable.JournalNum == _dataMaintenanceRequest.FilterValue
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                        && ledgerJournalTrans.TransDate >= _dataMaintenanceRequest.FromDate
                        && ledgerJournalTrans.TransDate <= _dataMaintenanceRequest.ToDate
                        && (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                            || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend);

            if (ledgerJournalTable.JournalNum)
            {
                throw error("@Budget:VendorAcctBudgetDataMaintenanceErrorMsg");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDetectionDateTime</Name>
				<Source><![CDATA[
    private void updateDetectionDateTime(RecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlDataMaintenanceTracking dataMaintenanceTracking;
        utcdatetime dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();

        update_recordset dataMaintenanceTracking
            setting DataMaintenanceProviderDetectionDateTime = dataMaintenanceDetectionDateTime
                where dataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                    && dataMaintenanceTracking.DataMaintenanceProvider == providerClassName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes data maintenance operations for a single document.
    /// </summary>
    /// <param name="_dataMaintenanceTrackingRecId">
    /// A <c>BudgetControlDataMaintenanceTracking</c> record Id.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the processed document.
    /// </returns>
    internal BudgetCheckResult processDocument(RecId _dataMaintenanceTrackingRecId)
    {
        BudgetCheckResult result;
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        ttsBegin;
        select firstonly TrackingDocument from budgetControlDataMaintenanceTracking
            where budgetControlDataMaintenanceTracking.RecId == _dataMaintenanceTrackingRecId
                && budgetControlDataMaintenanceTracking.Selected == NoYes::Yes
            join DocumentSourceTrackingStatus from budgetControlDataMaintenance
                where budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == budgetControlDataMaintenance.RecId;

        LedgerJournalTable ledgerJournalTable = this.getLedgerJournalTable(budgetControlDataMaintenanceTracking.TrackingDocument);
        RecId legalEntity = CompanyInfo::findDataArea(ledgerJournalTable.company()).RecId;

        // Data maintenance could be run in an offset company while a LedgerJournalTrans record was created in a different company.
        // In that case, the LedgerJournalTrans record need to run budget check in its original company.
        if (ledgerJournalTable)
        {
            try
            {
                changecompany (ledgerJournalTable.company())
                {
                    BudgetControlLedgerJournalBudgetSourcePopulator populator = BudgetControlLedgerJournalBudgetSourcePopulator::construct(
                                                                                    ledgerJournalTable.JournalNum, legalEntity);
                    BudgetControlBudgetSourceRemover::removeBudgetSourceData(populator);

                    BudgetControlInstrumentationLogger logger 
                        = BudgetControlInstrumentationLogger::createLogger(classStr(BudgetControlLedgerJournalDataMaintenanceProvider));
                    int voucherCount = this.countVouchersByJournalNum(ledgerJournalTable.RecId);

                    using (var dataMaintenanceActivityContext = logger.dataMaintenance().processLedgerJournalTransByJournalNum(_dataMaintenanceTrackingRecId, voucherCount))
                    {
                        BudgetControlDataMaintenanceJournalProcessor::submitLedgerJournalTableToCheckBudget(ledgerJournalTable.RecId);

                        if (budgetControlDataMaintenance.DocumentSourceTrackingStatus == BudgetSourceTrackingStatus::Confirmed)
                        {
                            // Submit as confirmation check to avoid the ledger journal posting logic to capture budget details.
                            BudgetControlProcessor::instance().parmDoBudgetCheckForConfirmation(true);
                        }
                    }
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw Exception::Error;
                }
            }
            catch
            {
                throw error("@Budget:BudgetControlProcessingFailedError");
            }

            result = BudgetSourceLedgerJournalTable::findBudgetCheckResult(ledgerJournalTable.RecId);
            this.setBudgetCheckResult(_dataMaintenanceTrackingRecId, result);
        }

        ttsCommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countVouchersByJournalNum</Name>
				<Source><![CDATA[
    private RecIdCount countVouchersByJournalNum(RecId _ledgerJournalTableRecId)
    {
        int voucherCount;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;

        while select Voucher from ledgerJournalTrans
            group by ledgerJournalTrans.Voucher
            where ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
            join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.RecId == _ledgerJournalTableRecId
        {
            voucherCount ++;
        }

        return voucherCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable getLedgerJournalTable(RecId _ledgerJournalTableRecId)
    {
        LedgerJournalTable ledgerJournalTable;

        if (_ledgerJournalTableRecId)
        {
            select crosscompany ledgerJournalTable
                where ledgerJournalTable.RecId == _ledgerJournalTableRecId;
        }

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control data maintenance scenario description.
    /// </summary>
    /// <returns>
    /// The description of the scenario.
    /// </returns>
    public Description255 getDescription()
    {
        return "@Budget:LedgerJournalDataMaintenanceProviderDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget control data maintenance scenario name.
    /// </summary>
    /// <returns>
    /// The name of the scenario.
    /// </returns>
    public Description255 getName()
    {
        return "@Budget:LedgerJournalDataMaintenanceProviderName";
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcessDocuments</Name>
				<Source><![CDATA[
    public void preProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        this.budgetControlDataMaintenanceRecId = _budgetControlDataMaintenanceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessDocuments</Name>
				<Source><![CDATA[
    public void postProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlDataMaintenanceProvider::reprocessSummaryBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOverrunSupported</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isOverrunSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderBy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void updateOrderBy(BudgetControlIDataMaintenanceDesigner _designer)
    {
        if (_designer)
        {
            FormDataSource budgetControlDataMaintenanceTrackingDataSource = _designer.getBudgetControlDataMaintenanceTrackingDataSource();
            Query trackingQuery = budgetControlDataMaintenanceTrackingDataSource.query();
            int orderByCount = trackingQuery.orderByFieldCount();

            boolean orderByExists = false;
            for (int i = 1; i <= orderByCount; i++)
            {
                if (trackingQuery.orderByField(i).fieldID() == fieldNum(BudgetControlDataMaintenanceTracking, OriginatingTrackingNumber))
                {
                    orderByExists = true;
                    break;
                }
            }

            if (!orderByExists)
            {
                trackingQuery.dataSourceTable(tableNum(BudgetControlDataMaintenanceTracking)).addOrderByField(fieldNum(BudgetControlDataMaintenanceTracking, OriginatingTrackingNumber), SortOrder::Ascending);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>