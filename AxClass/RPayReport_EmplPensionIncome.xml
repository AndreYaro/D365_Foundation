<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_EmplPensionIncome</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll pension income report.
/// </summary>
final class RPayReport_EmplPensionIncome extends XMLExcelReport_Standard_RU implements BatchRetryable
{
    DialogField         fieldStartPeriod, fieldEndPeriod, fieldEmplId;
    ReportPeriod_RU     startPeriod, endPeriod, curPeriod;
    ReportPeriod_RU     startPeriodFromDilog, endPeriodFromDilog;
    ReportPeriod_RU     startDate, endDate;
    RPayAmount          curAmount;

    RHRMEmplTable       emplTable;
    RHRMEmplId          emplId;
    RPayCounterUnit     fund;
    RPayAmount          totalSum;
    int                 totalPeriodsCount;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        startPeriodFromDilog,
        endPeriodFromDilog,
        emplId
    #endmacro

    #LOCALMACRO.dateToStr
        date2str(%1, 123, 1, 2, 2, 2, 4, DateFlags::None)
        #UNDEF.ARG
    #ENDMACRO

    #define.CompanyName("CompanyName")
    #define.Period("Period")
    #define.PersonShortName("PersonShortName")
    #define.PeriodsCount("PeriodsCount")
    #define.TotalSum("TotalSum")
    #define.AvgSum("AvgSum")
    #define.Amount('Amount')
    #define.LineNo('lineNo')
    #define.PeriodStr('PeriodStr')
    #define.MonthToReg('MonthToReg')
    #define.PageNum('PageNum')
    #define.width(5)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    protected void addTotals()
    {
        totalSum += curAmount;
        totalPeriodsCount += 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return max(document.getNamedRangeHeightWrapped(#PeriodStr, this.getPeriodStr()),
                   document.getNamedRangeHeightWrapped(#Amount, strFmt('%1', curAmount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    private void checkAndPrepareParameters()
    {
        setprefix("@RUP461");

        fund = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayEmplPensionIncome, 1, "@RUP2170", "@RUP1945");
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    protected void clearTotals()
    {
        totalSum = 0;
        totalPeriodsCount = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        converter       = RNumDateInWordConverter::construct();
        curWorkSheetNum = 1;
        widthCols       = #width;

        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();

        fieldStartPeriod    = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@GLS106049");
        fieldEndPeriod      = dialog.addField(extendedTypeStr(ReportPeriod_RU), "@GLS106050");
        fieldEmplId         = dialog.addField(extendedTypeStr(RHRMEmplId));

        fieldStartPeriod.value(startPeriodFromDilog ? startPeriodFromDilog : RPayParameters::payPeriod());
        fieldEndPeriod.value(endPeriodFromDilog ? endPeriodFromDilog : RPayParameters::payPeriod());
        fieldEmplId.value(emplId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    protected boolean fetchHeader()
    {
        boolean ret;

        if (queryRunHeader.next())
        {
            ret = true;
            emplTable = queryRunHeader.get(tableNum(RHRMEmplTable));

            this.updatePeriod();

            if (startPeriod > endPeriod)
            {
                ret = checkFailed(strFmt("@RUP6208",
                    dateStartMth(startPeriodFromDilog),
                    endPeriodFromDilog,
                    emplTable.EmployeeId,
                    emplTable.name()));
            }

            numOfLines = this.getNumOfLines();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    protected boolean fetchLines()
    {
        if (curPeriod < endPeriod)
        {
            curPeriod = endmth(nextMth(curPeriod));
            curAmount = RPayTrans::calculateFund(fund, curPeriod, emplId);

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return strFmt("@RUP884" + ' %1 %2', emplId, startPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    protected void fillBody()
    {
        this.insertValueToSection(#LineNo, lineNo);
        this.insertValueToSection(#PeriodStr, this.getPeriodStr());
        this.insertValueToSection(#MonthToReg, 1);
        this.insertValueToSection(#Amount, curAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    protected void fillPageHeader()
    {
        this.insertValueToSection(#PageNum, this.pageNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    protected void fillReportFooter()
    {
        RPayAmount avgSum = (lineNo ? decround(totalSum / lineNo, 2) : 0);

        this.insertValueToSection(#PeriodsCount, totalPeriodsCount);
        this.insertValueToSection(#TotalSum, totalSum);
        this.insertValueToSection(#AvgSum, avgSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    protected void fillReportHeader()
    {
        this.insertValueToSection(#CompanyName, CompanyInfo::find().Name);
        this.insertValueToSection(#Period, strfmt("@GLS106626", #dateToStr(startDate), #dateToStr(endDate)));
        this.insertValueToSection(#PersonShortName, emplTable.name());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        startPeriodFromDilog    = fieldStartPeriod.value();
        endPeriodFromDilog      = fieldEndPeriod.value();
        emplId                  = fieldEmplId.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of lines.
    /// </summary>
    /// <returns>
    /// The number of lines.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Counter getNumOfLines()
    {
        ReportPeriod_RU payPeriodLoc;
        int totalPeriods;

        for (payPeriodLoc = startPeriod; payPeriodLoc <= endPeriod; payPeriodLoc = endmth(nextMth(payPeriodLoc)))
        {
            totalPeriods ++;
        }

        return totalPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodStr</Name>
				<Source><![CDATA[
    private str getPeriodStr()
    {
        ReportPeriod_RU displayStartDate, displayEndDate;

        displayStartDate = dateStartMth(curPeriod);
        displayEndDate   = curPeriod;

        return strfmt("@GLS106626", #dateToStr(displayStartDate), #dateToStr(displayEndDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    protected void initQueryRunHeader()
    {
        Query query = new Query();
        QueryBuildDataSource qbds;

        qbds = query.addDataSource(tableNum(RHRMEMplTable));
        qbds.addRange(fieldNum(RHRMEMplTable, EmployeeId)).value(emplId);

        queryRunHeader = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    protected void initQueryRunLines()
    {
        curPeriod = endmth(prevMth(startPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipSections</Name>
				<Source><![CDATA[
    protected void initSkipSections()
    {
        skipSections += pageFooterName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns string which contains data about page number
    /// </summary>
    /// <returns>
    /// String which contains data about page number
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PageNum_RU pageNum()
    {
        if (pageNum > 1)
        {
            return strFmt(SysLabel::labelId2String(literalStr("@SYS24160")), pageNum);
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport_EmplPensionIncome);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    #define.CellsBody(3)
    #define.CellsOther(7)
    protected Counter totalCells()
    {
        Counter totalPeriods;

        totalPeriods = this.getNumOfLines();

        return totalPeriods * #CellsBody + #CellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeriod</Name>
				<Source><![CDATA[
    private void updatePeriod()
    {
        startDate = dateStartMth(startPeriodFromDilog);

        if (emplTable.PayEmploymentDate && startDate < emplTable.PayEmploymentDate)
        {
            startDate = emplTable.PayEmploymentDate;
        }

        endDate = endmth(endPeriodFromDilog);

        if (emplTable.PayResignedDate && endDate > emplTable.PayResignedDate)
        {
            endDate = emplTable.PayResignedDate;
        }

        if (endDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        startPeriod = endmth(startDate);
        endPeriod = endmth(endDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the report parameters.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// True if validation passed without errors.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (! startPeriodFromDilog)
        {
            ret = checkFailed("@RUP881");
        }

        if (! endPeriodFromDilog)
        {
            ret = checkFailed("@RUP882");
        }

        if (startPeriodFromDilog > endPeriodFromDilog)
        {
            ret = checkFailed("@RUP883");
        }

        if (! emplId)
        {
            ret = checkFailed("@GLS106048");
        }

        if (!RHRMEmplTable::exist(emplId))
        {
            ret = checkFailed(strFmt("@RUP298", emplId));
        }

        startPeriodFromDilog = endmth(startPeriodFromDilog);
        endPeriodFromDilog   = endmth(endPeriodFromDilog);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayReport_EmplPensionIncome construct()
    {
        return new RPayReport_EmplPensionIncome();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP884";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReport_EmplPensionIncome emplPensionIncomeReport = RPayReport_EmplPensionIncome::construct();

        emplPensionIncomeReport.checkAndPrepareParameters();

        if (emplPensionIncomeReport.prompt())
        {
            emplPensionIncomeReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>