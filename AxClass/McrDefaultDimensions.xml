<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrDefaultDimensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>McrDefaultDimensions</c> controlls the getting and setting of default dimensions.
/// </summary>
abstract class McrDefaultDimensions
{
    MCRSourceID mcrSourceCode;
    DimensionDefault dimensions;

    DimensionDefault custDimension;
    DimensionDefault itemDimension;
    DimensionDefault catalogDimension;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the dimensions based on the hierarchy.
    /// </summary>
    /// <param name="_mcrItemOrCustOrCatalog">
    /// The <c>MCRItemOrCustOrCatalog</c> value that specifies whether to find dimensions for
    /// an item, a customer, or a catalog.
    /// </param>
    protected abstract void determineDimensions(MCRItemOrCustOrCatalog _mcrItemOrCustOrCatalog)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCatalogDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catalog dimensions based on the source code attached to the table buffer
    /// that was initialized in the construct method.
    /// </summary>
    /// <returns>
    /// The catalog default dimensions.
    /// </returns>
    protected abstract DimensionDefault getCatalogDimensions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the customer dimensions based on the
    /// customer account attached to the table buffer
    /// that was initialized in the construct method.
    /// </summary>
    /// <returns>
    /// The default customer dimensions.
    /// </returns>
    protected abstract DimensionDefault getCustDimensions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy from the account revenue field on the
    /// <c>CustParameters</c> table.
    /// </summary>
    /// <returns>
    /// The account revenue hierarchy.
    /// </returns>
    protected MCRItemCustCatalog getHierarchy()
    {
        return CustParameters::find().mcrDefaultDimensionHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item dimensions based on the item number attached to the table buffer
    /// that was initialized in construct.
    /// </summary>
    /// <returns>
    /// The default item dimensions for the item.
    /// </returns>
    protected abstract DimensionDefault getItemDimensions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatalogDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the catalog dimension if the dimension has not already been assigned.
    /// </summary>
    protected void setCatalogDefaults()
    {
        catalogDimension = this.getCatalogDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomerDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the customer default dimension if the dimension has not already been assigned.
    /// </summary>
    protected void setCustomerDefaults()
    {
        custDimension = this.getCustDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the hierarchy of how to assign dimensions and then set
    /// the dimensions.
    /// </summary>
    public void setDefaultDimensions()
    {
        MCRItemCustCatalog  mcrItemCustCatalog;
        DimensionDefault    mergedDimensions;

        // Default the site dimension first.
        this.setSiteDimension();

        // Find hierarchy
        mcrItemCustCatalog = this.getHierarchy();

        switch (mcrItemCustCatalog)
        {
            case MCRItemCustCatalog::CustItemCatalog :
                this.determineDimensions(MCRItemOrCustOrCatalog::Customer);
                this.determineDimensions(MCRItemOrCustOrCatalog::Item);
                this.determineDimensions(MCRItemOrCustOrCatalog::Catalog);
                mergedDimensions = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensions, custDimension, itemDimension, catalogDimension);
                this.setDefaults(mergedDimensions);

                break;

            case MCRItemCustCatalog::CustCatalogItem :
                this.determineDimensions(MCRItemOrCustOrCatalog::Customer);
                this.determineDimensions(MCRItemOrCustOrCatalog::Catalog);
                this.determineDimensions(MCRItemOrCustOrCatalog::Item);
                mergedDimensions = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensions, custDimension, catalogDimension, itemDimension);
                this.setDefaults(mergedDimensions);
                break;

            case MCRItemCustCatalog::ItemCustCatalog :
                this.determineDimensions(MCRItemOrCustOrCatalog::Item);
                this.determineDimensions(MCRItemOrCustOrCatalog::Customer);
                this.determineDimensions(MCRItemOrCustOrCatalog::Catalog);
                mergedDimensions = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensions, itemDimension, custDimension, catalogDimension);
                this.setDefaults(mergedDimensions);
                break;

            case MCRItemCustCatalog::ItemCatalogCust :
                this.determineDimensions(MCRItemOrCustOrCatalog::Item);
                this.determineDimensions(MCRItemOrCustOrCatalog::Catalog);
                this.determineDimensions(MCRItemOrCustOrCatalog::Customer);
                mergedDimensions = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensions, itemDimension, catalogDimension, custDimension);
                this.setDefaults(mergedDimensions);
                break;

            case MCRItemCustCatalog::CatalogCustItem :
                this.determineDimensions(MCRItemOrCustOrCatalog::Catalog);
                this.determineDimensions(MCRItemOrCustOrCatalog::Customer);
                this.determineDimensions(MCRItemOrCustOrCatalog::Item);
                mergedDimensions=LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensions, catalogDimension, custDimension, itemDimension);
                this.setDefaults(mergedDimensions);
                break;

            case MCRItemCustCatalog::CatalogItemCust :
                this.determineDimensions(MCRItemOrCustOrCatalog::Catalog);
                this.determineDimensions(MCRItemOrCustOrCatalog::Item);
                this.determineDimensions(MCRItemOrCustOrCatalog::Customer);
                mergedDimensions = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimensions, catalogDimension, itemDimension, custDimension);
                this.setDefaults(mergedDimensions);
                break;
        }

        this.setDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMCRSourceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the source code value of sale order/sales quotatin to the global variable mcrSourceCode.
    /// </summary>
    /// <param name = "_mcrSourceCode">The new value of the parameter _mcrSourceCode</param>
    public void setMCRSourceCode(MCRSourceID _mcrSourceCode)
    {
        mcrSourceCode = _mcrSourceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCleanCurrentDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will verify if sourceId exists and no catalog dimensions.
    /// </summary>
    /// <returns>
    /// Returns true if condition satisfies, other wise false.
    /// </returns>
    public boolean shouldCleanCurrentDimensions()
    {
        return (mcrSourceCode && !this.getCatalogDimensions());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the global dimensions variable based on the dimensions passed in for defaulting
    /// when the individual dimension is blank.
    /// </summary>
    /// <param name="_dimension">
    /// The <c>DimensionDefault</c> buffer passed in for defaulting.
    /// </param>
    protected void setDefaults(DimensionDefault  _dimension)
    {
        dimensions = _dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the dimensions to the table buffer in the child classes.
    /// </summary>
    protected abstract void setDimensions()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemDefaults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the item dimension if the dimension has not already been assigned.
    /// </summary>
    protected void setItemDefaults()
    {
        itemDimension = this.getItemDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSiteDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default site dimension.
    /// </summary>
    protected abstract void setSiteDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class bassed on the table that is calling
    /// it.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> data type object that will hold the table buffer
    /// for the table that called this class.
    /// </param>
    /// <returns>
    /// The constructed <c>MCRDefaultDimensions</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If the class is called from an unhandled table, an error will be thrown.
    /// </exception>
    public static MCRDefaultDimensions construct(Common  _common)
    {
        MCRDefaultDimensions mcrDefaultDimensions;

        switch (_common.TableId)
        {
            case tableNum(SalesTable):
                mcrDefaultDimensions = new MCRDefaultDimensions_SalesTable(_common);
                break;

            case tableNum(SalesLine):
                mcrDefaultDimensions = new MCRDefaultDimensions_SalesLine(_common);
                break;

            case tableNum(SalesQuotationTable):
                mcrDefaultDimensions = new MCRDefaultDimensions_SalesQuotationTable(_common);
                break;

            case tableNum(SalesQuotationLine):
                mcrDefaultDimensions = new MCRDefaultDimensions_SalesQuotationLine(_common);
                break;

            default:    // unhandled case
                throw error(strFmt("@MCR10766",funcName())) ;
        }

        return mcrDefaultDimensions;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>