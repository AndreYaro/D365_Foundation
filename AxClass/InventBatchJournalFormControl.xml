<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBatchJournalFormControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBatchJournalFormControl</c> class provides shared form control support for any
///    Inventory Batch Journal form.
/// </summary>
class InventBatchJournalFormControl
{
    FormRun                         formRun;

    InventTable                     inventTable;
    InventDimGroupSetup             inventDimGroupSetup;
    boolean                         itemIsOwnerEnabled;

    InventBatchJournalController    journalController;

    InventBatchJournal              inventBatchJournal;
    InventDim                       inventDimJournal;

    FormDataSource                  inventBatchJournal_ds;
    FormDataSource                  inventDimJournal_ds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>areMandatorySelectionFieldsFilled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if all the mandatory selection fields have been filled.
    /// </summary>
    /// <returns>
    ///    true if all the mandatory selection fields have been filled; otherwise, false.
    /// </returns>
    public boolean areMandatorySelectionFieldsFilled()
    {
        boolean ret = inventBatchJournal.ItemId != "";

        if (ret)
        {
            ListEnumerator fieldListEnumerator = InventDim::dimFieldListEnumerator();
            while (fieldListEnumerator.moveNext())
            {
                FieldId fieldId = fieldListEnumerator.current();
                if (inventDimJournal_ds.object(fieldId).mandatory() && !inventDimJournal.(fieldId))
                {
                    ret = false;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the item ID for the inventory batch journal.
    /// </summary>
    /// <returns>
    ///    The item ID for the inventory batch journal.
    /// </returns>
    public ItemId itemId()
    {
        return inventBatchJournal.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalController</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>InventBatchJournalController</c> for the current inventory batch journal.
    /// </summary>
    /// <returns>
    ///     The <c>InventBatchJournalController</c> for the current inventory batch journal.
    /// </returns>
    public InventBatchJournalController journalController()
    {
        if (!journalController)
        {
            journalController = inventBatchJournal.journalController();
        }

        return journalController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the item related object variables for the current item.
    /// </summary>
    private void loadItemData()
    {
        inventTable         = InventTable::find(this.itemId());
        inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        journalController   = null;

        itemIsOwnerEnabled = inventTable.isItemInventoryOwnerActivated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeItemProductDimensionsMandatory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Makes the active product dimension fields for the current item in the given form data source mandatory.
    /// </summary>
    /// <param name="_inventDim_ds">
    ///    A form data source for the <c>InventDim</c> table in which to make the fields mandatory or not mandatory.
    /// </param>
    protected void makeItemProductDimensionsMandatory(FormDataSource _inventDim_ds)
    {
        ListEnumerator dimEnumerator = InventDim::dimProductDimFieldList().getEnumerator();
        while (dimEnumerator.moveNext())
        {
            FieldId dimFieldId = dimEnumerator.current();
            _inventDim_ds.object(dimFieldId).mandatory(inventDimGroupSetup.isDimensionActive(dimFieldId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBatchJournalCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic for the <c>InventBatchJournal</c> data source <c>create</c> event.
    /// </summary>
    /// <remarks>
    ///    This is intended to be called after the form data source <c>create</c> event executes.
    /// </remarks>
    public void onBatchJournalCreate()
    {
        journalController = null;
        this.onItemChanged(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInventBatchJournalInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic for the <c>InventBatchJournal</c> data source <c>init</c> event.
    /// </summary>
    /// <param name="_inventBatchJournal">
    ///    The buffer for the <c>InventBatchJournal</c> form data source.
    /// </param>
    /// <remarks>
    ///    This is intended to be called after the form data source <c>init</c> event executes.
    /// </remarks>
    public void onInventBatchJournalInit(InventBatchJournal _inventBatchJournal)
    {
        inventBatchJournal    = _inventBatchJournal;
        inventBatchJournal_ds = FormDataUtil::getFormDataSource(_inventBatchJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInventBatchJournalWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic for the <c>InventBatchJournal</c> data source <c>write</c> event.
    /// </summary>
    /// <remarks>
    ///    This is intended to be called after the form data source <c>write</c> event executes.
    /// </remarks>
    public void onInventBatchJournalWrite()
    {
        journalController = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onInventDimJournalInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic for the <c>init</c> event for the <c>InventDim</c> data source related
    ///    to the <c>InventBatchHandling</c> data source.
    /// </summary>
    /// <param name="_inventDim">
    ///    The buffer for the <c>InventDim</c> form data source.
    /// </param>
    /// <remarks>
    ///    This is intended to be called after the form data source <c>init</c> event executes.
    /// </remarks>
    public void onInventDimJournalInit(InventDim _inventDim)
    {
        inventDimJournal    = _inventDim;
        inventDimJournal_ds = FormDataUtil::getFormDataSource(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onItemChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic when the item ID for the inventory batch journal changes or potentially changes.
    /// </summary>
    /// <param name="activeRecordChanged">
    ///    Determines if the item ID has changed due to the active journal record changing.
    /// </param>
    public void onItemChanged(boolean activeRecordChanged = false)
    {
        if (!activeRecordChanged)
        {
            inventDimJournal.clearProductDimensions();
            inventDimJournal.clearTrackingDimensions();
            inventDimJournal.clearNotActiveDim(inventDimGroupSetup);
        }

        this.loadItemData();
        this.setOwnerDimension();
        this.updateSelectionControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOwnerDimension</Name>
				<Source><![CDATA[
    private void setOwnerDimension()
    {
        if (!this.canEnableDimensionInCurrentCountryContext(fieldNum(InventDim, InventOwnerId_RU)))
        {
            if (itemIsOwnerEnabled)
            {
                inventDimJournal.InventOwnerId_RU = InventOwner_RU::findOrCreateCurrentLegalEntity().InventOwnerId;
            }
            else
            {
                inventDimJournal.InventOwnerId_RU ='';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onBatchAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes actions to be performed when a batch is being added to the batch merge.
    /// </summary>
    public void onBatchAdded()
    {
        inventBatchJournal.InventDimId = InventDim::findOrCreate(inventDimJournal).inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEditPropertyForInventDimFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the edit property for fields in a form data source for an <c>InventDim</c> table based on which dimensions are active
    ///    for the current item.
    /// </summary>
    /// <param name="_inventDim_ds">
    ///    The form data source for an <c>InventDim</c> table.
    /// </param>
    /// <param name="_inventDimParm">
    ///    An <c>InventDimParm</c> that defines what inventory dimension fields to update.
    /// </param>
    /// <param name="_disableAll">
    ///    Determines if this should disable edit for all fields selected by <paramref name="_inventDimParm"/> instead of
    ///    checking the dimension setup of the item.
    /// </param>
    public void setEditPropertyForInventDimFields(FormDataSource _inventDim_ds, InventDimParm _inventDimParm, boolean _disableAll = false)
    {
        ListEnumerator dimEnumerator = _inventDimParm.selectedDimFields().getEnumerator();
        while (dimEnumerator.moveNext())
        {
            FieldId dimFieldId = dimEnumerator.current();
            FormDataObject field = _inventDim_ds.object(dimFieldId);
            if (field.visible())
            {
                boolean allowEdit = !_disableAll && inventDimGroupSetup.isDimensionActive(dimFieldId) && this.canEnableDimensionInCurrentCountryContext(dimFieldId);
                field.allowEdit(allowEdit);
                field.skip(!allowEdit);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableDimensionInCurrentCountryContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified inventory dimension can be enabled in the current country context.
    /// </summary>
    /// <param name="_fieldId">The ID of the inventory dimension field.</param>
    /// <returns>true, if the inventory dimension can be enabled; otherwise, false.</returns>
    private boolean canEnableDimensionInCurrentCountryContext(FieldId _fieldId)
    {
        if (_fieldId == fieldNum(InventDim, InventOwnerId_RU))
        {
            #ISOCountryRegionCodes
            return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSelectionControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the item and dimension selection controls for the inventory batch journal.
    /// </summary>
    public void updateSelectionControls()
    {
        boolean         hasSelection = InventBatchJournalSource::existForJournal(inventBatchJournal.RecId);
        InventDimParm   inventDimParm;

        inventBatchJournal_ds.object(fieldNum(InventBatchJournal, ItemId)).allowEdit(!hasSelection);
        inventBatchJournal_ds.object(fieldNum(InventBatchJournal, ItemId)).skip(hasSelection);

        inventDimParm.setAllInventDim();
        this.setEditPropertyForInventDimFields(inventDimJournal_ds, inventDimParm, hasSelection);
        this.makeItemProductDimensionsMandatory(inventDimJournal_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventBatchJournalFormControl construct()
    {
        return new InventBatchJournalFormControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of <c>InventBatchJournalFormControl</c> for the given form.
    /// </summary>
    /// <param name="_formRun">
    ///    The <c>FormRun</c> which the form control object is to manage.
    /// </param>
    /// <returns>
    ///    A new instance of <c>InventBatchJournalFormControl</c> to manage the form.
    /// </returns>
    public static InventBatchJournalFormControl newFormRun(FormRun _formRun)
    {
        InventBatchJournalFormControl formControl = InventBatchJournalFormControl::construct();

        formControl.parmFormRun(_formRun);
        return formControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
