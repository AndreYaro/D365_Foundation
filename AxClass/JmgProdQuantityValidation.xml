<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgProdQuantityValidation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a functionality to validate job feedback quantity.
/// </summary>
public class JmgProdQuantityValidation
{
    ProdJobId jobId;
    ProdId    prodId;
    Qty       expectedQty;
    Qty       checkQty;
    str       checkFailedLabel;
    ItemId    itemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initCoByProductFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the expected quantity and check failed label values.
    /// </summary>
    /// <param name="_prodCoBy">
    /// The <c>PmfProdCoBy</c> record.
    /// </param>
    /// <param name="_validateMethod">
    /// The validation method.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Cannot validate quantity for certain validation types.
    /// </exception>
    private void initCoByProductFromProdTable(PmfProdCoBy _prodCoBy, JMGFeedbackValidateMethod _validateMethod)
    {
        switch (_validateMethod)
        {
            case JmgFeedbackValidateMethod::ProdPlannedQty:
                expectedQty = _prodCoBy.QtyCoByCalc;
                checkFailedLabel = "@SYS39594";
                break;
            case JmgFeedbackValidateMethod::ProdStartedQty:
                expectedQty = _prodCoBy.QtyCoByStUp;
                checkFailedLabel = "@SYS39595";
                break;
            case JmgFeedbackValidateMethod::PrevOprFinishedQty:
            case JmgFeedbackValidateMethod::ActOprStartedQty:
                throw error (strFmt("@SCM:JmgFeedbackValidateQuantity", _validateMethod));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the expected quantity and check failed label values.
    /// </summary>
    /// <param name="_prodJob">
    /// The class containing information about the job.
    /// </param>
    /// <param name="_validateMethod">
    /// The validation method.
    /// </param>
    /// <param name="_unpostedOperQtyMap">
    /// The unposted operation Qty values.
    /// </param>
    /// <returns>
    /// True if no further validation is needed, otherwise false.
    /// </returns>
    private boolean initFromJob(JmgTermJob_Prod _prodJob, JMGFeedbackValidateMethod _validateMethod, Map _unpostedOperQtyMap)
    {
        boolean         previousOperationEncountered;
        ProdRoute       prevOperation;
        ProdRouteTrans  prodRouteTrans;
        Qty             unpostedQty;

        ProdRoute prodRoute = _prodJob.prodRoute();
        ProdTable prodTable = prodRoute.prodTable();

        switch (_validateMethod)
        {
            case JmgFeedbackValidateMethod::ProdPlannedQty:
                expectedQty = prodTable.QtySched;
                checkFailedLabel = "@SYS39594";
                break;
            case JmgFeedbackValidateMethod::ProdStartedQty:
                expectedQty = prodTable.QtyStUp;
                checkFailedLabel = "@SYS39595";
                break;
            case JmgFeedbackValidateMethod::PrevOprFinishedQty:
                previousOperationEncountered = false;
                boolean expectedQtySet = false;
                ListEnumerator previousOperationListEnumerator = ProdRoute::getPreviousOperationsForQuantityValidation(prodRoute.ProdId, prodRoute.OprNum, true).getEnumerator();
                while (previousOperationListEnumerator.moveNext())
                {
                    prevOperation = previousOperationListEnumerator.current();

                    previousOperationEncountered = true;
                    Qty newExpectedQty = JmgJobStatusFactory::buildJmgJobStatusInstance().calculateGoodQtyPerProdRoute(prevOperation);

                    if(_unpostedOperQtyMap != null && _unpostedOperQtyMap.exists([prevOperation.ProdId, prevOperation.OprNum]))
                    {
                        newExpectedQty += conPeek(_unpostedOperQtyMap.lookup([prevOperation.ProdId, prevOperation.OprNum]), 1);
                    }
                    if (!expectedQtySet)
                    {
                        expectedQty = newExpectedQty;
                        expectedQtySet = true;
                    }
                    else
                    {
                        expectedQty = min(expectedQty, newExpectedQty);
                    }
                }
                checkFailedLabel = "@SYS39596";
                break;
            case JmgFeedbackValidateMethod::ActOprStartedQty:
                expectedQty = JmgProdStartup::qtyStartup(prodRoute);
                checkFailedLabel = "@SYS39597";
                break;
        }

        return
            !previousOperationEncountered
            && _validateMethod == JmgFeedbackValidateMethod::PrevOprFinishedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the expected quantity and check failed label values.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record.
    /// </param>
    /// <param name="_validateMethod">
    /// The validation method.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Cannot validate quantity for certain validation types.
    /// </exception>
    private void initFromProdTable(ProdTable _prodTable, JMGFeedbackValidateMethod _validateMethod)
    {
        switch (_validateMethod)
        {
            case JmgFeedbackValidateMethod::ProdPlannedQty:
                expectedQty = _prodTable.QtySched;
                checkFailedLabel = "@SYS39594";
                break;
            case JmgFeedbackValidateMethod::ProdStartedQty:
                expectedQty = _prodTable.QtyStUp;
                checkFailedLabel = "@SYS39595";
                break;
            case JmgFeedbackValidateMethod::PrevOprFinishedQty:
            case JmgFeedbackValidateMethod::ActOprStartedQty:
                throw error (strFmt("@SCM:JmgFeedbackValidateQuantity", _validateMethod));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFeedbackQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the quantity entered is valid.
    /// </summary>
    /// <param name="_quantityDelta">
    /// The newly added quantity.
    /// </param>
    /// <param name="_throwError">
    /// True if an error should be thrown if validation fails, otherwise false.
    /// </param>
    /// <param name="_finished">
    /// True if this is the end of the production step, otherwise false.
    /// </param>
    /// <param name="_unpostedOperQtyMap">
    /// A map container unposted operation quantities, optional.
    /// </param>
    /// <returns>
    /// True if the quantity is valid, otherwise valse.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Cannot report the operation as finished due to a surplus.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Cannot report the operation as finished due to a shortage.
    /// </exception>
    /// <remarks>
    /// The item parameter only needs to be passed in if it is possible that a
    /// co/by product will be passed in.
    /// </remarks>
    public boolean validateFeedbackQuantity(
        Qty     _quantityDelta,
        boolean _throwError = false,
        boolean _finished = false,
        Map     _unpostedOperQtyMap = null)
    {
        real                    overDelivery;
        real                    underDelivery;
        JmgTermJob_Prod         prodJob;
        JmgProdParametersDim    jmgProdParametersDim;
        ProdTable               prodTable;
        PmfProdCoBy             pmfProdCoBy;
        PmfProductType          productType;

        if (jobId != '')
        {
            prodJob     = JmgTermJob::construct(jobId);
        }
        else if (prodId != '')
        {
            prodTable = prodTable::find(prodId);
        }

        jmgProdParametersDim = jobId != '' ? JmgProdParametersDim::find(prodJob.siteInventDimId())
                                       : JmgProdParametersDim::find(prodTable.inventDim().InventDimId);

        if (jmgProdParametersDim.ValidateFeedbackQuantity)
        {
            if (jobId)
            {
                // Only process jobs should be validated.
                if (prodJob.jourRegType() != JmgJourRegTypeEnum::MrpProcess)
                {
                    return true;
                }
                if (this.initFromJob(prodJob, jmgProdParametersDim.FeedbackValidateMethod, _unpostedOperQtyMap))
                {
                    return true;
                }
                ProdRoute prodRoute = prodJob.prodRoute();
                JmgIJobStatus jmgJobStatus = JmgJobStatusFactory::buildJmgJobStatusInstance();
                Qty qtyGood = jmgJobStatus.calculateGoodQtyPerProdRoute(prodRoute);
                Qty qtyError = jmgJobStatus.calculateErrorQtyPerProdRoute(prodRoute);
                checkQty = _quantityDelta + qtyGood + qtyError;
            }
            else if (prodId != '')
            {
                productType = InventTable::find(itemId).PmfProductType;
                if (productType == PmfProductType::Co_Product || productType == PmfProductType::By_Product)
                {
                    PmfProdCoBy = PmfProdCoBy::findByProdItemDim(prodTable.ProdId, itemId);
                    this.initCoByProductFromProdTable(pmfProdCoBy, jmgProdParametersDim.FeedbackValidateMethod);
                    checkQty = _quantityDelta + pmfProdCoBy.reportedFinishedGood() + pmfProdCoBy.reportedFinishedError();
                }
                else
                {
                    this.initFromProdTable(prodTable, jmgProdParametersDim.FeedbackValidateMethod);
                    checkQty = _quantityDelta + prodTable.reportedFinishedGood() + prodTable.reportedFinishedError();
                }
            }

            overDelivery = 0.0;

            if (jmgProdParametersDim.FeedbackAcceptOverDelivery)
            {
                overDelivery = expectedQty * jmgProdParametersDim.FeedbackOverDeliveryPercentage / 100;
            }

            if (checkQty > expectedQty + overDelivery)
            {
                if (_throwError)
                {
                    throw error(strFmt(checkFailedLabel, checkQty, expectedQty, overDelivery));
                }
                else
                {
                    return checkFailed(strFmt(checkFailedLabel, checkQty, expectedQty, overDelivery));
                }
            }

            if (_finished)
            {
                underDelivery = 0.0;
                if (jmgProdParametersDim.FeedbackAcceptUnderDelivery)
                {
                    underDelivery = expectedQty * jmgProdParametersDim.FeedbackUnderDeliveryPercentage / 100;
                }

                if (checkQty < expectedQty - underDelivery)
                {
                    if (_throwError)
                    {
                        throw error(strFmt("@SYS39598", checkQty, expectedQty, underDelivery));
                    }
                    else
                    {
                        return checkFailed(strFmt("@SYS39598", checkQty, expectedQty, underDelivery));
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromJobId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of JmgProdQuantityValidation using the production order number and item number.
    /// </summary>
    /// <param name="_jobId">
    /// The job number to be validated.
    /// </param>
    /// <returns>
    /// An instance of <c>JmgProdQuantityValidation</c>
    /// </returns>
    public static JmgProdQuantityValidation constructFromJobId(ProdJobId _jobId)
    {
        JmgProdQuantityValidation prodQuantityValidation =  new JmgProdQuantityValidation();

        prodQuantityValidation.jobId = _jobId;

        return prodQuantityValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromProdIdAndItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of JmgProdQuantityValidation using the production order number and item number.
    /// </summary>
    /// <param name="_prodId">
    /// The production order to be validated.
    /// </param>
    /// <param name="_itemId">
    /// The item number to be validated.
    /// </param>
    /// <returns>
    /// An instance of <c>JmgProdQuantityValidation</c>
    /// </returns>
    public static JmgProdQuantityValidation constructFromProdIdAndItem(prodId _prodId, ItemId _itemId)
    {
        JmgProdQuantityValidation prodQuantityValidation =  new JmgProdQuantityValidation();

        prodQuantityValidation.prodId = _prodId;
        prodQuantityValidation.itemId = _itemId;

        return prodQuantityValidation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>