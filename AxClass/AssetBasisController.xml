<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBasisController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetBasisController</c> class is the controller class for the <c>AssetBasis</c> report.
/// </summary>
public class AssetBasisController extends SrsReportRunController implements BatchRetryable
{
    private const str ParameterFromDate = 'FromDate';
    private const str ParameterToDate = 'ToDate';
    private const str ParameterBookID = 'BookId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract    contract            = this.parmReportContract().parmRdlContract();

        date                        fromDate            = contract.getParameter(ParameterFromDate).getValueTyped();
        date                        toDate              = contract.getParameter(ParameterToDate).getValueTyped();
        AssetBookId                 bookId              = contract.getParameter(ParameterBookID).getValueTyped();

        Query                       query               = this.getFirstQuery();

        // Modify the query contract based on fromDate & toDate.
        SrsReportHelper::addFromAndToDateRangeToQuery(query,
                                                      fromDate,
                                                      toDate,
                                                      tableNum(AssetBasis),
                                                      fieldNum(AssetBasis, UsedFromDate));

        // Modify the query contract based on DepreciationBookId.
        SrsReportHelper::addParameterValueRangeToQuery(query,
                                                       tableNum(AssetBasis),
                                                       fieldNum(AssetBasis, BookId),
                                                       bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AssetBasisController construct(Args _args)
    {
        #define.ReportName('AssetBasis.Report')

        AssetBasisController controller = new AssetBasisController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AssetBasisController::construct(args).startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>