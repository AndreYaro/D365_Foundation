<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerEnrollmentFormExtensionPayrollEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll form extension events for the HcmWorkerEnrollment form.
/// </summary>
class HcmWorkerEnrollmentFormExtensionPayrollEventHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormReferenceGroupControl positionControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form extension event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmWorkerEnrollmentFormExtensionPayrollEventHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorkerEnrollment_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitializing event handler for the <c>HcmWorkerEnrollment.ExtensionPayroll</c> form extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmWorkerEnrollment</c> form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmWorkerEnrollment), FormEventType::Initializing)]
    public static void HcmWorkerEnrollment_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmWorkerEnrollmentFormExtensionPayrollEventHandler extensionInstance = new HcmWorkerEnrollmentFormExtensionPayrollEventHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorkerEnrollment_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitialized event handler for the <c>HcmWorkerEnrollment.ExtensionPayroll</c> form extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmWorkerEnrollment</c> form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmWorkerEnrollment), FormEventType::Initialized)]
    public static void HcmWorkerEnrollment_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        // Initialize the instance of this form extension handler now that the controls exist
        FormRun hcmWorkerEnrollmentForm = _sender as FormRun;
        HcmWorkerEnrollmentFormExtensionPayrollEventHandler extensionInstance = hcmWorkerEnrollmentForm.getExtensionInstance(classStr(HcmWorkerEnrollmentFormExtensionPayrollEventHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Benefit_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// HcmWorkerEnrolledBenefit Benefit form data object OnModified event handler for the HcmWorkerEnrollment form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerEnrollment, HcmWorkerEnrolledBenefit, Benefit), FormDataFieldEventType::Modified)]
    public static void Benefit_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(HRMAdministrationPayrollInfo)))
        {
            FormDataSource hcmWorkerEnrolledBenefit_ds = _sender.dataSource();
            HcmWorkerEnrolledBenefit hcmWorkerEnrolledBenefit  = hcmWorkerEnrolledBenefit_ds.cursor();

            FormRun hcmWorkerEnrollmentForm = hcmWorkerEnrolledBenefit_ds.formRun();

            FormDataSource payrollWorkerEnrolledBenefitLimit_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitLimit)) as FormDataSource;
            PayrollWorkerEnrolledBenefitLimit payrollWorkerEnrolledBenefitLimit = payrollWorkerEnrolledBenefitLimit_ds.cursor();

            FormDataSource payrollWorkerGarnishmentDetail_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail)) as FormDataSource;
            PayrollWorkerGarnishmentDetail payrollWorkerGarnishmentDetail = payrollWorkerGarnishmentDetail_ds.cursor();

            FormDataSource hcmBenefitType_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, HcmBenefitType)) as FormDataSource;
            HcmBenefitType hcmBenefitType = hcmBenefitType_ds.cursor();

            FormDataSource hcBenefitPlan_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, HcmBenefitPlan)) as FormDataSource;
            HcmBenefitPlan hcmBenefitPlan = hcBenefitPlan_ds.cursor();

            // The <c>PayrollWorkerEnrolledBenefitLimit</c> and <c>PayrollWorkerGarnishmentDetail</c> might be dirty and 
            // have the field values set from previous calls to modified(). Reset the field values to table defaults. 
            // This will ensure that the unit of work doesn't create unnecessary records in <c>PayrollWorkerEnrolledBenefitLimit</c>
            // and <c>PayrollWorkerGarnishmentDetail</c> tables.
            payrollWorkerEnrolledBenefitLimit.initValue();
            payrollWorkerGarnishmentDetail.initValue();

            if (hcmBenefitPlan.PayrollImpact != PayrollImpact::None)
            {
                // Load field values from setup tables
                payrollWorkerEnrolledBenefitLimit.loadDefaultValues(hcmWorkerEnrolledBenefit);

                switch (hcmBenefitType.PayrollCategory)
                {
                    case PayrollCategory::Garnishment:
                    case PayrollCategory::TaxLevy:
                        payrollWorkerGarnishmentDetail.loadDefaultValues(hcmWorkerEnrolledBenefit.RecId, hcmBenefitType.PayrollCategory);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail LegalEntity form data object OnModified event handler for the HcmWorkerEnrollment form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitDetail, LegalEntity), FormDataFieldEventType::Modified)]
    public static void LegalEntity_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail  = _sender.dataSource().cursor();
        payrollWorkerEnrolledBenefitDetail.VendAccountNum = '';
        payrollWorkerEnrolledBenefitDetail.VendDataAreaId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendAccountNum_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail VendAccountNum form data object OnModified event handler for the HcmWorkerEnrollment form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitDetail, VendAccountNum), FormDataFieldEventType::Modified)]
    public static void VendAccountNum_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail  = _sender.dataSource().cursor();

        DataAreaId vendDataAreaId = CompanyInfo::getDataArea(payrollWorkerEnrolledBenefitDetail.LegalEntity);

        payrollWorkerEnrolledBenefitDetail.VendDataAreaId = vendDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendAccountNum_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail VendAccountNum form data object OnValidated event handler for the HcmWorkerEnrollment form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitDetail, VendAccountNum), FormDataFieldEventType::Validated)]
    public static void VendAccountNum_OnValidated(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail  = _sender.dataSource().cursor();

        if (payrollWorkerEnrolledBenefitDetail.LegalEntity)
        {
            DataAreaId paidByDataArea = CompanyInfo::getDataArea(payrollWorkerEnrolledBenefitDetail.LegalEntity);

            changecompany(paidByDataArea)
            {
                if (!VendTable::exist(payrollWorkerEnrolledBenefitDetail.VendAccountNum))
                {
                    throw error(strFmt("@Payroll:TheValue1InField2IsNotFoundInTheRelatedTable3",
                        payrollWorkerEnrolledBenefitDetail.VendAccountNum,
                        fieldPName(PayrollWorkerEnrolledBenefitDetail, VendAccountNum),
                        tablePName(VendTable)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerEnrolledBenefitDetail_VendAccountNum_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerEnrolledBenefitDetail VendAccountNum form control OnLookup event handler for the HcmWorkerEnrollment form extension.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitDetail_VendAccountNum), FormControlEventType::Lookup)]
    public static void PayrollWorkerEnrolledBenefitDetail_VendAccountNum_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmWorkerEnrollmentForm = _sender.formRun();

        FormDataSource payrollWorkerEnrolledBenefitDetail_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitDetail)) as FormDataSource;
        PayrollWorkerEnrolledBenefitDetail payrollWorkerEnrolledBenefitDetail = payrollWorkerEnrolledBenefitDetail_ds.cursor();

        if (payrollWorkerEnrolledBenefitDetail.LegalEntity)
        {
            DataAreaId paidByDataArea = CompanyInfo::getDataArea(payrollWorkerEnrolledBenefitDetail.LegalEntity);

            VendTable::lookupVendor(_sender, paidByDataArea);
        }

        FormControlCancelableSuperEventArgs cancelEventArgs = _e as FormControlCancelableSuperEventArgs;

        cancelEventArgs.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerGarnishmentDetail_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnActivated event handler for the <c>HcmWorkerEnrollment.ExtensionPayroll</c> form extension's
    /// PayrollWorkerGarnishmentDetail data source.
    /// </summary>
    /// <param name="_sender">The form data source being activated.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail), FormDataSourceEventType::Activated)]
    public static void PayrollWorkerGarnishmentDetail_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        PayrollWorkerGarnishmentDetail payrollWorkerGarnishmentDetail = _sender.cursor();

        FormRun hcmWorkerEnrollmentForm = _sender.formRun();

        FormDataSource hcmBenefitType_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, HcmBenefitType)) as FormDataSource;
        HcmBenefitType hcmBenefitType = hcmBenefitType_ds.cursor();

        FormDataSource hcmWorkerEnrolledBenefit_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, HcmWorkerEnrolledBenefit)) as FormDataSource;
        HcmWorkerEnrolledBenefit hcmWorkerEnrolledBenefit = hcmWorkerEnrolledBenefit_ds.cursor();

        if (payrollWorkerGarnishmentDetail)
        {
            if ((hcmBenefitType.PayrollCategory == PayrollCategory::Garnishment || hcmBenefitType.PayrollCategory == PayrollCategory::TaxLevy)
                && !PayrollWorkerGarnishmentRule::existByTypeWorkerStateCountry(payrollWorkerGarnishmentDetail.GarnishmentTaxLevyType, hcmWorkerEnrolledBenefit.Worker, payrollWorkerGarnishmentDetail.StateId, payrollWorkerGarnishmentDetail.CountryRegionId))
            {
                warning("@Workforce:RulesForTheGarnishmentTypeHaveNotBeenSetUpClickGarnishmentAn");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerGarnishmentDetail_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitValue event handler for the <c>HcmWorkerEnrollment.ExtensionPayroll</c> form extension's
    /// PayrollWorkerGarnishmentDetail data source.
    /// </summary>
    /// <param name="_sender">The form data source raising the event.</param>
    /// <param name="_e">The args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail), FormDataSourceEventType::InitValue)]
    public static void PayrollWorkerGarnishmentDetail_OnInitValue(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        #ISOCountryRegionCodes
        PayrollWorkerGarnishmentDetail payrollWorkerGarnishmentDetail = _sender.cursor();

        payrollWorkerGarnishmentDetail.CountryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GarnishmentTaxLevyType_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// PayrollWorkerGarnishmentDetail GarnishmentTaxLevyType form data object OnModified event handler for the HcmWorkerEnrollment form extension.
    /// </summary>
    /// <param name="_sender">The form data object raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail, GarnishmentTaxLevyType), FormDataFieldEventType::Modified)]
    public static void GarnishmentTaxLevyType_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        FormDataSource payrollWorkerGarnishmentDetail_ds = _sender.datasource();
        PayrollWorkerGarnishmentDetail payrollWorkerGarnishmentDetail = payrollWorkerGarnishmentDetail_ds.cursor();

        FormRun hcmWorkerEnrollmentForm = payrollWorkerGarnishmentDetail_ds.formRun();

        FormDataSource hcmBenefitType_ds = hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, HcmBenefitType)) as FormDataSource;
        HcmBenefitType hcmBenefitType = hcmBenefitType_ds.cursor();

        boolean isCategoryTaxLevy  = payrollWorkerGarnishmentDetail.isCategoryTaxLevy(hcmBenefitType.PayrollCategory);
        boolean isTypeStateOrLocal = payrollWorkerGarnishmentDetail.isTypeStateOrLocalTaxLevy();

        if (payrollWorkerGarnishmentDetail.isTypeFederalTaxLevy())
        {
            payrollWorkerGarnishmentDetail.StateId = '';
        }

        payrollWorkerGarnishmentDetail_ds.object(fieldNum(PayrollWorkerGarnishmentDetail, StateId)).allowEdit(isCategoryTaxLevy && isTypeStateOrLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerGarnishmentDetail_StateId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnLookup event handler for the <c>HcmWorkerEnrollment.ExtensionPayroll</c> form extension's
    /// PayrollWorkerGarnishmentDetail_StateId control.
    /// </summary>
    /// <param name="_sender">The form control being looked up</param>
    /// <param name="_e">The args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail_StateId), FormControlEventType::Lookup)]
    public static void PayrollWorkerGarnishmentDetail_StateId_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun hcmWorkerEnrollmentForm = _sender.formRun();

        FormDataSource payrollWorkerGarnishmentDetail_ds =  hcmWorkerEnrollmentForm.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail)) as FormDataSource;
        PayrollWorkerGarnishmentDetail payrollWorkerGarnishmentDetail = payrollWorkerGarnishmentDetail_ds.cursor();

        LogisticsAddressState::lookupStateId(_sender, payrollWorkerGarnishmentDetail.CountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGarnishmentTaxLevyControls</Name>
				<Source><![CDATA[
    private static void setGarnishmentTaxLevyControls(FormRun _element, boolean _isPayrollInfoEnabled, PayrollCategory _category)
    {
        boolean displayGarnishmentFields = (_isPayrollInfoEnabled && (_category == PayrollCategory::Garnishment || _category == PayrollCategory::TaxLevy));

        FormTabPageControl payrollWorkerGarnishmentTaxLevyTab = _element.design().controlName(formControlStr(HcmWorkerEnrollment, payrollWorkerGarnishmentTaxLevyTab)) as FormTabPageControl;

        if (displayGarnishmentFields)
        {
            payrollWorkerGarnishmentTaxLevyTab.visible(true);

            FormDataSource payrollWorkerGarnishmentDetail_ds = _element.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentDetail)) as FormDataSource;
            PayrollWorkerGarnishmentDetail payrollWorkerGarnishmentDetail = payrollWorkerGarnishmentDetail_ds.cursor();

            boolean isStateTaxLevy = (payrollWorkerGarnishmentDetail.GarnishmentTaxLevyType == PayrollGarnishmentTaxLevyType::StateTaxLevy);
            boolean isLocalTaxLevy = (payrollWorkerGarnishmentDetail.GarnishmentTaxLevyType == PayrollGarnishmentTaxLevyType::LocalTaxLevy);

            if (!isStateTaxLevy && !isLocalTaxLevy)
            {
                payrollWorkerGarnishmentDetail.StateId = '';
            }

            payrollWorkerGarnishmentDetail_ds.object(fieldNum(PayrollWorkerGarnishmentDetail, StateId)).allowEdit(isStateTaxLevy || isLocalTaxLevy);
        }
        else
        {
            payrollWorkerGarnishmentTaxLevyTab.visible(false);
        }

        FormFunctionButtonControl payrollWorkerGarnishmentRules = _element.design().controlName(formControlStr(HcmWorkerEnrollment, PayrollWorkerGarnishmentRules)) as FormFunctionButtonControl;
        payrollWorkerGarnishmentRules.visible(displayGarnishmentFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorkerEnrollment_postUpdatePayrollControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the postSetPayrollControls event on the <c>HcmWorkerEnrollment</c> from and updates the controls on the form.
    /// </summary>
    /// <param name = "_formElement">The form context.</param>
    /// <param name = "_isPayrollInfoEnabled">true if the <c>HRMAdministrationPayrollInfo</c> configuration key is enabled.</param>
    /// <param name = "_hasPayrollImpact">true if the benefit plan has payroll impact.</param>
    /// <param name = "_isOverrideLimitSelected">true if the override limit is selected.</param>
    /// <param name = "_isRetirementBenefit">true if the benefit plan is a retirement benefit.</param>
    /// <param name = "_isRetirementType401">true if the benefit plan is a retirment type of 401k.</param>
    /// <param name = "_isContributionOnly">true if the payroll impact is contribution only.</param>
    /// <param name = "_isDeductionOnly">true if the payroll impact is deduction only.</param>
    [SubscribesTo(formStr(HcmWorkerEnrollment), delegateStr(HcmWorkerEnrollment, postUpdatePayrollControls))]
    public static void HcmWorkerEnrollment_postUpdatePayrollControls(FormRun _formElement,
        boolean _isPayrollInfoEnabled,
        boolean _hasPayrollImpact,
        boolean _isOverrideLimitSelected,
        boolean _isRetirementBenefit,
        boolean _isRetirementType401,
        boolean _isContributionOnly,
        boolean _isDeductionOnly)
    {
        if (_isPayrollInfoEnabled)
        {
            FormDataSource hcmBenefitType_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerEnrollment, HcmBenefitType)) as FormDataSource;
            HcmBenefitType hcmBenefitType = hcmBenefitType_ds.cursor();

            HcmWorkerEnrollmentFormExtensionPayrollEventHandler::setGarnishmentTaxLevyControls(_formElement, _isPayrollInfoEnabled, hcmBenefitType.PayrollCategory);

            if (_hasPayrollImpact)
            {
                FormGroupControl deductionLimitGroup = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, deductionLimitGroup)) as FormGroupControl;
                FormRealControl deductionLimitGroup_DeductionLimitAmountCur = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, deductionLimitGroup_DeductionLimitAmountCur)) as FormRealControl;
                FormComboBoxControl deductionLimitGroup_DeductionLimitPeriod = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, deductionLimitGroup_DeductionLimitPeriod)) as FormComboBoxControl;
                FormDateControl deductionLimitGroup_DeductionLimitEndDate = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, deductionLimitGroup_DeductionLimitEndDate)) as FormDateControl;
                FormRealControl deductionLimitGroup_DeductionLimitPeriodRemaining = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, deductionLimitGroup_DeductionLimitPeriodRemaining)) as FormRealControl;
                FormGroupControl contributionLimitGroup = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, contributionLimitGroup)) as FormGroupControl;
                
                deductionLimitGroup.visible(!_isRetirementBenefit && !_isContributionOnly);
                contributionLimitGroup.visible(!_isRetirementBenefit && !_isDeductionOnly);

                if (_isRetirementBenefit)
                {
                    boolean allowRetirementLimitOverrideSelected = PayrollParameters::find().AllowRetirementLimitOverride;

                    FormCheckBoxControl payrollWorkerEnrolledBenefitDetail_OverrideLimit = _formElement.design().controlName(formControlStr(HcmWorkerEnrollment, payrollWorkerEnrolledBenefitDetail_OverrideLimit)) as FormCheckBoxControl;
                    payrollWorkerEnrolledBenefitDetail_OverrideLimit.visible(allowRetirementLimitOverrideSelected && !_isRetirementType401);

                    deductionLimitGroup.visible(_isOverrideLimitSelected);
                    deductionLimitGroup_DeductionLimitAmountCur.visible(_isOverrideLimitSelected);
                    deductionLimitGroup_DeductionLimitPeriod.visible(_isOverrideLimitSelected);
                    deductionLimitGroup_DeductionLimitPeriod.enabled(false);
                    deductionLimitGroup_DeductionLimitEndDate.visible(false);
                    deductionLimitGroup_DeductionLimitPeriodRemaining.visible(false);

                    if (_isOverrideLimitSelected)
                    {
                        FormDataSource payrollWorkerEnrolledBenefitLimit_ds = _formElement.dataSource(formDataSourceStr(HcmWorkerEnrollment, PayrollWorkerEnrolledBenefitLimit)) as FormDataSource;
                        PayrollWorkerEnrolledBenefitLimit payrollWorkerEnrolledBenefitLimit = payrollWorkerEnrolledBenefitLimit_ds.cursor();

                        payrollWorkerEnrolledBenefitLimit.DeductionLimitPeriod = PayrollLimitPeriod::Year;
                    }
                }
                else
                {
                    deductionLimitGroup_DeductionLimitAmountCur.visible(true);
                    deductionLimitGroup_DeductionLimitPeriod.visible(true);
                    deductionLimitGroup_DeductionLimitPeriod.enabled(true);
                    deductionLimitGroup_DeductionLimitEndDate.visible(true);
                    deductionLimitGroup_DeductionLimitPeriodRemaining.visible(true);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>