<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReportDispatcher_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class allows choosing the layout and functionality of reports,
// when standard reports are substituted by several local reports
//
// Each report that is expected to be split by local functionalities,
// corresponds on ancsestor of ReportDispatcher_EEurope ('report class')
// Example: Sales invoice <--> SalesInvoiceDispatcher_EEurope
//
// Localized reports are to be launched by ancsestors of 'report classes'
// Example: Latvian sales invoice <--> SalesInvoiceDispatcher_Lv
//          Russion sales invoice <--> SalesInvoiceDispatcher_Ru
//
// Use construct() on 'report classes' to select on which conditions
// one or another report is used
// Example of possible behavior:
//static SalesInvoiceDispatcher_EEurope construct(Args _args)
//{
//    SalesInvoiceDispatcher_EEurope dispatcher;
//
//    // conditions to choose report functionality
//
//    // primary condition
//    if (/* condition */)
//    {
//        dispatcher = new ... ();
//    }
//
//    // following conditions
//    if (! dispatcher &&
//        /* condition */)
//    {
//        dispatcher = new ... ();
//    }
//
// ...
//
//    // default behavior
//    if (! dispatcher)
//    {
//        dispatcher = new ... ();
//    }
//
//    dispatcher.parmArgs(_args);
//
//    return dispatcher;
//}
abstract class ReportDispatcher_W
{
    Args args;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    abstract protected menuItemName getMenuItemName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemType</Name>
				<Source><![CDATA[
    abstract protected MenuItemType getMenuItemType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    final public reportName getReportName()
    {
        reportName   reportName;
        MenuFunction menuFunction = this.initMenuFunction();

        reportName = menuFunction.object();

        return reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMenuFunction</Name>
				<Source><![CDATA[
    private MenuFunction initMenuFunction()
    {
        MenuFunction menuFunction = new MenuFunction(this.getMenuItemName(), this.getMenuItemType());

        if (! menuFunction)
        {
            throw error(strFmt("@SYS77671", strFmt("@SYS26868", this.getMenuItemName(), this.getMenuItemType())));
        }

        return menuFunction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    final protected Args parmArgs(Args _args = args)
    {
        ;
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    // overloaded in SalesInvoiceDispatcher_Ru
    protected void run()
    {
        this.initMenuFunction().run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>