<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidationBatchService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationAddressValidationBatchService</c> class provides the service operation for the address validation.
/// </summary>
internal final class TaxIntegrationAddressValidationBatchService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the processing of the address validation.
    /// </summary>
    /// <param name = "_dirPartyTable">A record of <c>DirPartyTable<c></param>
    protected void processValidation(DirPartyTable _dirPartyTable, boolean _needForceValidate)
    {
        DirPartyLocation dirPartyLocation;
        LogisticsLocation logisticsLocation;
        LogisticsPostalAddress logisticsPostalAddressOrig;

        while select logisticsPostalAddressOrig
            join logisticsLocation
                where logisticsPostalAddressOrig.Location == logisticsLocation.RecId
                    && logisticsLocation.IsPostalAddress == NoYes::Yes
            join dirPartyLocation
                where logisticsLocation.RecId == dirPartyLocation.Location
                    && dirPartyLocation.IsPostalAddress == NoYes::Yes
                    && dirPartyLocation.Party == _dirPartyTable.RecId
        {
            LogisticsPostalAddressTaxExtension logisticsPostalAddressTaxExtension;
            logisticsPostalAddressTaxExtension = LogisticsPostalAddressTaxExtension::findByLocation(logisticsPostalAddressOrig.Location);
            // We should skip the validated address when doing batch validation. However,
            // when the parameter 'Forced validate' in the batch schedule form is enabled,
            // we need to force to validate all addresses in the batch even if it has been validated.

            setPrefix(strFmt("@TaxIntegration:TaxIntegrationAddressValidationPartyID", _dirPartyTable.PartyNumber));
            if (_needForceValidate || !logisticsPostalAddressTaxExtension || logisticsPostalAddressTaxExtension.AddressGroupId == '')
            {
                setPrefix(strFmt("@SYS137200", logisticsLocation.Description));
                TaxIntegrationAddressValidationObject taxIntegrationAddressValidationObject = this.validateAddress(logisticsPostalAddressOrig);
                int validatedAddressCount = taxIntegrationAddressValidationObject.getValidatedAddressCount();
                TaxLogisticsPostalAddressValidationTmp taxLogisticsPostalAddressValidationTmp = taxIntegrationAddressValidationObject.getValidatedAddressResultList();

                if (validatedAddressCount)
                {
                    if (logisticsPostalAddressOrig.Address == taxLogisticsPostalAddressValidationTmp.Address)
                    {
                        info(strFmt("@TaxIntegration:TaxIntegrationAddressValidationMatchedMsg", logisticsLocation.Description, _dirPartyTable.PartyNumber));
                    }
                    else
                    {
                        info(strFmt("@TaxIntegration:TaxIntegrationAddressValidationOverwrittenMsg", logisticsLocation.Description, _dirPartyTable.PartyNumber));
                    }

                    this.acceptValidationChange(logisticsPostalAddressOrig, taxLogisticsPostalAddressValidationTmp);
                }
                else
                {
                    warning(strFmt("@TaxIntegration:TaxIntegrationAddressValidationNotFoundMsg", logisticsLocation.Description, _dirPartyTable.PartyNumber));
                }
            }
            else
            {
                info(strFmt("@TaxIntegration:TaxIntegrationAddressValidationSkipMsg", logisticsLocation.Description, _dirPartyTable.PartyNumber));
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Address validation entrance.
    /// </summary>
    /// <param name = "_logisticsPostalAddress">A record of the table <c>LogisticsPostalAddress<c></param>
    /// <returns>Validation result.</returns>
    private TaxIntegrationAddressValidationObject validateAddress(LogisticsPostalAddress _logisticsPostalAddress)
    {
        TaxIntegrationAddressValidator taxIntegrationAddressValidator = new TaxIntegrationAddressValidator();
        taxIntegrationAddressValidator.validateAddress(_logisticsPostalAddress);
        return taxIntegrationAddressValidator.getTaxIntegrationLogisticsPostalAddressObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptValidationChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accept validation change
    /// </summary>
    /// <param name = "_taxLogisticsPostalAddressValidationTmp">The selected TaxLogisticsPostalAddressValidationTmp</param>
    private void acceptValidationChange(
        LogisticsPostalAddress _logisticsPostalAddress,
        TaxLogisticsPostalAddressValidationTmp _taxLogisticsPostalAddressValidationTmp)
    {
        LogisticsPostalAddressTaxExtension logisticsPostalAddressTaxExtension;
        LogisticsPostalAddress logisticsPostalAddressLoc;
        UserConnection userConnection = new UserConnection();
        try
        {
            logisticsPostalAddressLoc = LogisticsPostalAddress::findRecId(_logisticsPostalAddress.RecId, true);
            logisticsPostalAddressLoc.setConnection(userConnection);
            userConnection.ttsbegin();
            TaxIntegrationAddressValidationUIController::copyAddressEntry(
                logisticsPostalAddressLoc,
                _taxLogisticsPostalAddressValidationTmp,
                true);

            if (!logisticsPostalAddressLoc.validateWrite())
            {
                throw error("@SYS136548");
            }

            // Confirmed we need to use ValidTimeStateUpdate::CreateNewTimePeriod here.
            logisticsPostalAddressLoc.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
            logisticsPostalAddressLoc.update();

            logisticsPostalAddressTaxExtension.setConnection(userConnection);
            // Save the returned address group Id.
            logisticsPostalAddressTaxExtension.Location = logisticsPostalAddressLoc.Location;
            logisticsPostalAddressTaxExtension.AddressGroupId = _taxLogisticsPostalAddressValidationTmp.AddressGroupId;
            LogisticsPostalAddressTaxExtension::insertOrUpdateByLocation(logisticsPostalAddressTaxExtension);

            userConnection.ttscommit();
        }
        catch
        {
            userConnection.ttsabort();
        }
        finally
        {
            if (userConnection)
            {
                userConnection.finalize();
                userConnection = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void execute(TaxIntegrationAddressValidationBatchContract _dataContract)
    {
        try
        {
            if (conLen(_dataContract.parmDirPartyTableRecordsContainer()) > 0)
            {
                container dirPartyTableCon = _dataContract.parmDirPartyTableRecordsContainer();
                boolean needForceValidate = _dataContract.parmNeedForceValidate();

                for (int countIdx = 1; countIdx <= conLen(dirPartyTablecon); countIdx++)
                {
                    DirPartyTable dirPartyTableLoc = DirPartyTable::findRec(conPeek(dirPartyTablecon, countIdx));
                    this.processValidation(dirPartyTableLoc, needForceValidate);
                }
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>