<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceDecoratorRuleWorkListDisplayArea</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppServiceDecoratorRuleWorkListDisplayArea</c> class populates the DisplayArea and AttachedTo Attributes for the WorkList pattern.
/// </summary>
public class WHSMobileAppServiceDecoratorRuleWorkListDisplayArea implements WHSIMobileAppServiceXMLDecoratorRule
{
    #WHSRF
    private const ExtendedTypeId WorkIdExtendedType = extendedTypeNum(WHSWorkId);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileAppServiceDecoratorRuleWorkListDisplayArea construct()
    {
        return new WHSMobileAppServiceDecoratorRuleWorkListDisplayArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastControl</Name>
				<Source><![CDATA[
    private boolean isLastControl(Map _controlMap)
    {
        return this.compareControlName(_controlMap, WHSMobileAppControlNames::RFPrev);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkListHeaderControl</Name>
				<Source><![CDATA[
    private boolean isWorkListHeaderControl(Map _controlMap)
    {
        return this.compareControlName(_controlMap, #WorkList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkIDControl</Name>
				<Source><![CDATA[
    private boolean isWorkIDControl(Map _controlMap)
    {
        return _controlMap.lookup(#XMLControlInputType) == WorkIdExtendedType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>compareControlName</Name>
				<Source><![CDATA[
    private boolean compareControlName(Map _controlMap, WHSMobileAppControlName _targetName)
    {
        return _controlMap.lookup(#XMLControlName) == _targetName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSubHeaderControls</Name>
				<Source><![CDATA[
    private boolean setSubHeaderControls(ListEnumerator _listEnum)
    {
        while (_listEnum.moveNext())
        {
            Map controlMap = _listEnum.current();
            controlMap.insert(#XMLControlDisplayArea, WHSMobileAppXMLDisplayArea::SubHeaderArea);
            if (this.isWorkListHeaderControl(controlMap))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstWorkIdControl</Name>
				<Source><![CDATA[
    private boolean findFirstWorkIdControl(ListEnumerator _listEnum)
    {
        while (_listEnum.moveNext())
        {
            Map controlMap = _listEnum.current();
            if (this.isWorkIDControl(controlMap))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>decorateBody</Name>
				<Source><![CDATA[
    private void decorateBody(ListEnumerator _listEnum)
    {
        str currentWorkId = '';
        do
        {
            Map controlMap = _listEnum.current();
            if (this.isLastControl(controlMap))
            {
                break;
            }
            if (this.isWorkIDControl(controlMap))
            {
                currentWorkId = controlMap.lookup(#XMLControlName);
            }
            controlMap.insert(#XMLControlAttachedTo, currentWorkId);
            controlMap = _listEnum.current();
        }
        while (_listEnum.moveNext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to run the transformation.
    /// </summary>
    /// <param name = "_pageInfo">
    /// The <c>WHSMobileAppPageInfo</c> containing controls and information to carry out the transformation.
    /// </param>
    public void run(WHSMobileAppPageInfo _pageInfo)
    {
        ListEnumerator le = _pageInfo.parmControlsEnumerator();

        boolean workListHeaderFound = this.setSubHeaderControls(le);

        if (workListHeaderFound)
        {
            boolean workIdControlFound = this.findFirstWorkIdControl(le);

            if (workIdControlFound)
            {
                this.decorateBody(le);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>