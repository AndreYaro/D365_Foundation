<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostCancel</c> class cancels the <c>inventCostTrans</c> and
///    <c>inventCostTransVariance</c> records for a given voucher.
/// </summary>
/// <remarks>
///    The methods on this class follow the principle of duplicating the records with a reverted sign to
///    cancel them.
/// </remarks>

class InventCostCancel
{
    // Global objects
    InventCostTransVarianceList     inventCostTransVarianceList;
    InventCostTransList             inventCostTransList;
    InventCostTransVarianceMap      inventCostTransVarianceMap;

    // Caller parameters
    InventTransRefId                transRefId;

    // Variables containing Ledger Information
    Voucher                         newVoucher;
    TransDate                       newTransDate;
    Voucher                         cancelVoucher;
    TransDate                       cancelTransDate;

    boolean isReleaseMemoryFlightEnabled = InventCostRemoveCursorCopyToReleaseMemoryFlight::instance().isEnabled();

    // Variables that will be filled by processing on inventTrans record and
    // creating the corresponding inventCostTrans record
    InventCostTrans                 costTrans;
    /// <summary>
    ///    Adds a given <c>InventCostTrans</c> record to the <c>recordSortedList</c>, which will then be
    ///    passed to the inventory cost framework.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    The <c>InventCostTrans</c> record that should be added.
    /// </param>
    /// <remarks>
    ///    All quantity fields will be multiplied by -1.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToCostTransList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addToCostTransList(InventCostTrans   _inventCostTrans)
    {
        // Now set the costTrans record, so that it can be reused for the insertion
        // of the keyCostTransVarianceMap
        if (isReleaseMemoryFlightEnabled)
        {
            costTrans = null;
        }
        costTrans = _inventCostTrans.data();

        // Set the new voucher informations
        costTrans.Voucher   = newVoucher;
        costTrans.TransDate = newTransDate;
        costTrans.Canceled  = NoYes::Yes;

        // reverse the signs
        costTrans.reverseSign();

        inventCostTransList.add(costTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCostTransVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a given <c>InventCostTransVariance</c> record to the record sorted list, which will then be
    ///    passed to the inventory cost framework.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    ///    The <c>InventCostTransVariance</c> record that should be added.
    /// </param>
    /// <remarks>
    ///    All amount fields will be multiplied by -1.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addToCostTransVarianceList(InventCostTransVariance   _inventCostTransVariance)
    {
        InventCostTransVariance     inventCostTransVariance;

        inventCostTransVariance = _inventCostTransVariance.data();

        inventCostTransVariance.CostAmountPosted        = -1 * inventCostTransVariance.CostAmountPosted;
        inventCostTransVariance.CostAmount              = -1 * inventCostTransVariance.CostAmount;
        inventCostTransVariance.IsPosted                = NoYes::No;
        inventCostTransVariance.InventCostTransRefRecId = 0;

        inventCostTransVarianceList.insert(inventCostTransVariance, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCostTransVarianceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the currently filled <c>inventCostTransVarianceList</c> list to a variance map.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// No voucher is specified.
    /// </exception>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addToCostTransVarianceMap()
    {
        str                            parmKey;

        // Check if I have a inventCostTrans record to which the variance has to be assigned
        // Voucher can be checked, not the recid or the inventTransId
        // because record is not written to DB yet and it might not have an inventTransId
        if (!costTrans.Voucher)
        {
            // Assert: should not occur
            throw error("@SYS111327");
        }
        else
        {
            parmKey = InventCostTransVarianceMap::buildKey(costTrans);
        }

        if (inventCostTransVarianceList && inventCostTransVarianceList.length() != 0)
        {
            // Now add for this inventCostTrans record the variance to the keyCostTransVarianceMap
            inventCostTransVarianceMap.add(parmKey, inventCostTransVarianceList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the sequence of canceling the records.
    /// </summary>
    /// <remarks>
    ///    All the <c>InventCostTrans</c> and <c>InventCostTransVariance</c> records are ordered by
    ///    <c>recId</c> and grouped in record sorted lists and then passed to the variance map.This data will
    ///    then be passed to the inventory cost framework.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void cancel()
    {
        // Records
        InventCostTransVariance   inventCostTransVariance;
        InventCostTrans           inventCostTrans;
        RecId                     prevCostTransRecId;

        ttsbegin;

        prevCostTransRecId = 0;

        // Insert the prodTableJour records
        while select * from inventCostTrans
            order by RecId
            where inventCostTrans.Voucher        == cancelVoucher
               && inventCostTrans.TransDate      == cancelTransDate
               && inventCostTrans.TransRefId     == transRefId
               && inventCostTrans.Canceled    == NoYes::No
            outer join inventCostTransVariance
            where inventCostTransVariance.InventCostTransRefRecId == inventCostTrans.RecId
        {
            if (prevCostTransRecId != inventCostTrans.RecId)
            {
                // Costtrans record has changed
                if (prevCostTransRecId != 0)
                {
                    this.addToCostTransVarianceMap();
                }

                prevCostTransRecId = inventCostTrans.RecId;

                // initialize the lists
                inventCostTransVarianceList = InventCostTransVarianceList::construct();

                // Add the records to the costTransList
                this.addToCostTransList(inventCostTrans);
            }

            if (inventCostTransVariance.RecId)
            {
                this.addToCostTransVarianceList(inventCostTransVariance);
            }
        }

        if (prevCostTransRecId != 0)
        {
            this.addToCostTransVarianceMap();
        }

        this.markAsCanceled();

        // Hand over the record sorted lists to the costUpdate framework
        InventCostUpdateGlobal::Instance().inventCostUpdate().finalizeCostTransVariance(inventCostTransList, inventCostTransVarianceMap);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks <c>InventCostTrans</c> records as canceled.
    /// </summary>
    /// <remarks>
    ///    The records that have been duplicated will be marked as canceled.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void markAsCanceled()
    {
        InventCostTrans           inventCostTrans;

        // Mark the inventCostTrans records as cancelled
        update_recordset inventCostTrans
            setting Canceled = NoYes::Yes
            where inventCostTrans.Voucher    == cancelVoucher
               && inventCostTrans.TransDate  == cancelTransDate
               && inventCostTrans.TransRefId == transRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostCancel</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to make sure that the <c>construct</c> method will be used.
    /// </remarks>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        // Initialize the local trans and variance lists
        inventCostTransVarianceList   = InventCostTransVarianceList::construct();
        inventCostTransList           = InventCostTransList::construct();
        inventCostTransVarianceMap    = InventCostTransVarianceMap::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmCancelTransDate(TransDate _cancelTransDate = cancelTransDate)
    {
        cancelTransDate = _cancelTransDate;

        return cancelTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmCancelVoucher(Voucher _cancelVoucher = cancelVoucher)
    {
        cancelVoucher = _cancelVoucher;

        return cancelVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmNewTransDate(TransDate _newTransDate = newTransDate)
    {
        newTransDate = _newTransDate;

        return newTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Voucher parmNewVoucher(Voucher _newVoucher = newVoucher)
    {
        newVoucher = _newVoucher;

        return newVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransRefId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventTransRefId parmTransRefId(InventTransRefId _transRefId = transRefId)
    {
        transRefId = _transRefId;

        return transRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelFromInventCostProdCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the variances for a given production ID and voucher.
    /// </summary>
    /// <param name="_prodId">
    ///    The production ID for which the variances should be canceled.
    /// </param>
    /// <param name="_cancelVoucher">
    ///    The voucher for which the variances should be canceled.
    /// </param>
    /// <param name="_cancelTransDate">
    ///    The transaction date for which the variances should be canceled.
    /// </param>
    /// <param name="_newVoucher">
    ///    The voucher to which the canceled adjustments should be attached.
    /// </param>
    /// <param name="_newTransDate">
    ///    The transaction date that should be used to cancel the adjustments.
    /// </param>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void cancelFromInventCostProdCancel(ProdId           _prodId,
                                                      Voucher          _cancelVoucher,
                                                      TransDate        _cancelTransDate,
                                                      Voucher          _newVoucher,
                                                      TransDate        _newTransDate)
    {
        InventCostCancel     inventCostCancel;

        // Initialize instance
        inventCostCancel = InventCostCancel::newFromParameter(_prodId,
                                                              _cancelVoucher,
                                                              _cancelTransDate,
                                                              _newVoucher,
                                                              _newTransDate);

        // Create closing records
        inventCostCancel.cancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static InventCostCancel construct()
    {
        return new InventCostCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventCostCancel</c> class.
    /// </summary>
    /// <param name="_transRefId">
    ///    The transaction reference for which the variances should be canceled.
    /// </param>
    /// <param name="_cancelVoucher">
    ///    The voucher for which the variances should be canceled.
    /// </param>
    /// <param name="_cancelTransDate">
    ///    The transaction date for which the variances should be canceled.
    /// </param>
    /// <param name="_newVoucher">
    ///    The voucher to which the canceled adjustments should be attached.
    /// </param>
    /// <param name="_newTransDate">
    ///    The transaction date that should be used to cancel the adjustments.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>InventCostCancel</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    There is no transaction reference.
    /// </exception>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static InventCostCancel newFromParameter(InventTransRefId _transRefId,
                                                       Voucher          _cancelVoucher,
                                                       TransDate        _cancelTransDate,
                                                       Voucher          _newVoucher,
                                                       TransDate        _newTransDate)
    {
        InventCostCancel    inventCostCancel;

        // A ledgerVoucher needs to be passed
        if (! _transRefId || ! _cancelVoucher || ! _newVoucher)
        {
            throw error("@SYS25407");
        }

        // Create instance
        inventCostCancel = InventCostCancel::construct();

        inventCostCancel.parmTransRefId(_transRefId);

        inventCostCancel.parmCancelVoucher(_cancelVoucher);
        inventCostCancel.parmCancelTransDate(_cancelTransDate);
        inventCostCancel.parmNewVoucher(_newVoucher);
        inventCostCancel.parmNewTransDate(_newTransDate);

        return inventCostCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>