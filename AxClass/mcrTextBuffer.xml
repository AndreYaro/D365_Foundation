<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>mcrTextBuffer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRTextBuffer</c> class provides additional functionality for string manipulation.
/// </summary>
class mcrTextBuffer extends TextBuffer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getColumnNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the column number for the specified position in the text buffer.
    /// </summary>
    /// <param name="_position">
    /// The position in text buffer to obtain column number.
    /// </param>
    /// <returns>
    /// An <c>integer</c> representing column number for the specified position in text buffer.
    /// If the specified position is less than 1 or greater than the size of the
    /// text buffer, the return value is 0.
    /// </returns>
    /// <remarks>
    /// The column number is calculated as the number of characters after the
    /// preceeding carriage return, line feed, or newline character.
    /// </remarks>
    public int getColumnNum(int _position)
    {
        str subString;

        int lastReturn;
        int lastLineFeed;
        int lastNewLine;

        int lineStart;

        if (_position <= 0 || _position > this.size())
        {
            return 0;
        }

        subString = this.subStr(1, _position - 1);

        lastReturn =
             strScan(subString, '\r', _position - 1, -(strLen(subString)));

        lastLineFeed =
             strScan(subString, num2char(0x0a), _position - 1, -(strLen(subString)));

        lastNewLine =
            strScan(subString, '\n', _position - 1, -(strLen(subString)));

        lineStart = max(max(lastReturn, lastLineFeed), lastNewLine);

        return _position - lineStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line number for the specified position in the text buffer.
    /// </summary>
    /// <param name="_position">
    /// The position in text buffer to obtain line number.
    /// </param>
    /// <returns>
    /// An <c>integer</c> representing line number for the specified position in text buffer.
    /// If the specified position is less than 1 or greater than the size of the
    /// text buffer, the return value is 0.
    /// </returns>
    public int getLineNum(int _position)
    {
        str subString = this.subStr(1, _position - 1);

        if (_position <= 0 || _position > this.size())
        {
            return 0;
        }

        // Count the number of carriage-returns and newlines occurring prior
        // to the specified position
        return 1
               + conLen(str2con(subString, '\r')) - 1
               + conLen(str2con(subString, '\n')) - 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>