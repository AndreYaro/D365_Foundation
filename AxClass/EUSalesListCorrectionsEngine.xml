<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListCorrectionsEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>EUSalesListCorrectionsEngine</c> implements logic for Latvian EU Sales list corrections report
/// </summary>
public class EUSalesListCorrectionsEngine extends RunBaseBatch implements BatchRetryable
{
    str erModelName = 'EU Sales list';

    QueryRun                            queryRun;
    Filename                            filename;
    HcmWorkerRecid                      workerRecId;
    HcmWorkerName                       workerName;
    HcmTitleId                          workerTitle;
    DialogField                         dialogFilename;
    DialogField                         dialogHcmWorker;
    DialogGroup                         dialogGroupExportOptions;
    TmpEUSalesListCorrections           tmpEUSalesListCorrections;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        filename,
        workerRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        // Export options group
        dialogGroupExportOptions    = dialog.addGroup("@SYS7764");

        dialogFilename              = dialog.addFieldValue(extendedTypeStr(Filename), filename);
        dialogHcmWorker             = dialog.addFieldValue(extendedTypeStr(HcmWorkerRecid), workerRecId, "@GLS160280");

        // Without a dataSource, client cannot determine the companyInfo for a form/dialog
        dialog.form().addDataSource(tableStr(EUSalesList));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the values from the dialog box fields and performs the validation.
    /// </summary>
    /// <returns>
    ///    true, if the values are valid; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        filename            = dialogFilename.value();
        workerRecId         = dialogHcmWorker.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilename</Name>
				<Source><![CDATA[
    public Filename parmFilename(Filename _filename = filename)
    {
        filename = _filename;
        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkerRecId</Name>
				<Source><![CDATA[
    public HcmWorkerRecid parmWorkerRecId(HcmWorkerRecid _workerRecId = workerRecId)
    {
        workerRecId = _workerRecId;
        return workerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkerName</Name>
				<Source><![CDATA[
    public DirPartyName parmWorkerName(DirPartyName _workerName = workerName)
    {
        workerName = _workerName;
        return workerName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmTitleId</Name>
				<Source><![CDATA[
    public HcmTitleId parmHcmTitleId(HcmTitleId _workerTitle = workerTitle)
    {
        workerTitle = _workerTitle;
        return workerTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEUSalesListCorrections</Name>
				<Source><![CDATA[
    public TmpEUSalesListCorrections parmTmpEUSalesListCorrections(TmpEUSalesListCorrections _tmpEUSalesListCorrections = tmpEUSalesListCorrections)
    {
        tmpEUSalesListCorrections = _tmpEUSalesListCorrections;
        return tmpEUSalesListCorrections;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        queryRun      = new QueryRun(queryStr(EUSalesListCorrections));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of the <c>EUSalesListCorrectionsEngine</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>EUSalesListCorrectionsEngine</c> class.
    /// </returns>
    public static EUSalesListCorrectionsEngine construct()
    {
        return new EUSalesListCorrectionsEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the state of the internal variables.
    /// </summary>
    /// <param name="calledFrom">
    ///     An object which this method has been called from; optional.
    /// </param>
    /// <returns>
    ///    true, or adds warning messages to the Infolog, depending on the state of the internal variables.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean             ret = true;

        if (!filename)
        {
            ret = checkFailed("@SYS18624");
        }

        if (this.validateQuery())
        {
            ret  = checkFailed("@SYS26947");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        EUSalesList     euSalesListOld;
        EUSalesList     euSalesListNew;

        this.initParmDefault();

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(EUSalesList)))
            {
                euSalesListNew = queryRun.get(tableNum(EUSalesList));
                euSalesListOld = queryRun.get(tableNum(EUSalesList), 2);

                if (euSalesListNew.Listcode != Listcode::IncludeNot &&
                       (euSalesListOld.Listcode != Listcode::IncludeNot || !euSalesListOld))
                {
                    this.processEUSalesListRecord(euSalesListNew, euSalesListOld);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            this.processReport();
            this.runER(tmpEUSalesListCorrections);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS93835");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EUSalesListCorrectionsEngine euSalesListCorrectionsEngine = EUSalesListCorrectionsEngine::construct();

        if (euSalesListCorrectionsEngine.prompt())
        {
            euSalesListCorrectionsEngine.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates query.
    /// </summary>
    /// <returns>True if query is empty; otherwise returns false.</returns>
    protected boolean validateQuery()
    {
        EUSalesList euSalesList;
        boolean     isEmpty = true;
        QueryRun    localQueryRun = new QueryRun(queryStr(EUSalesListCorrections));

        while (localQueryRun.next())
        {
            isEmpty = false;
            if (localQueryRun.changed(tableNum(EUSalesList)))
            {
                euSalesList = localQueryRun.get(tableNum(EUSalesList));

                euSalesList.check(true, #PreFixField(EUSalesList,AccountNum));
            }
        }

        localQueryRun.reset();

        return isEmpty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runER</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs export via ER solution.
    /// </summary>
    /// <param name = "_euSalesListCorrectionsTmp">The <c>TmpEUSalesListCorrections</c> table record.</param>
    protected void runER(TmpEUSalesListCorrections _tmpEUSalesListCorrections, filename _filename = filename)
    {
        this.initParameters();

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(IntrastatParameters::find().EUSLFileCorrectionsERFormatMappingId, _filename)
            .withFileDestination(ERObjectsFactory::createFileDestinationBrowser())
                .withParameter(new ERModelDefinitionDatabaseContext()
                    .addTemporaryTable(_tmpEUSalesListCorrections)).
                        withCreatingObjectParameter(erModelName, classStr(EUSalesListCorrectionsEngine),  this).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        workerName          = HcmWorker::find(workerRecId).name();
        workerTitle         = HcmWorker::find(workerRecId).title();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEUSalesListRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes a single <c>EUSalesList</c> record.
    /// </summary>
    /// <param name="_euSalesListNew">
    ///     The <c>EUSalesList</c> record that contains new or updated values.
    /// </param>
    /// <param name="_euSalesListOld">
    ///     The <c>EUSalesList</c> record that contains original values.
    /// </param>
    private void processEUSalesListRecord(EUSalesList _euSalesListNew, EUSalesList _euSalesListOld)
    {
        boolean oldEUSalesListLineInEU;

        // Special case when changing from Triangular EU Trade to EUTrade:
        boolean isChangeFromTriangularToEUTrade = (_euSalesListOld.Listcode == Listcode::TriangularEUTrade &&
                                            _euSalesListNew.Listcode == Listcode::EUTrade);

        oldEUSalesListLineInEU = IntrastatCountryRegionParameters::isInEU(_euSalesListOld.CountryRegionId);

        // Non-Service
        if ((!_euSalesListOld.AmountMST && _euSalesListNew.AmountMST) ||            // New line, not correcting old line
            (oldEUSalesListLineInEU && _euSalesListOld.AmountMST &&                 // Correction to old line.
            (_euSalesListOld.CountryRegionId  != _euSalesListNew.CountryRegionId ||
             _euSalesListOld.VATNum           != _euSalesListNew.VATNum ||
             _euSalesListOld.AmountMST        != _euSalesListNew.AmountMST ||
             !this.isEqualListCodeValue(_euSalesListOld.Listcode, _euSalesListNew.Listcode))))
        {
            this.insertTmpTable(_euSalesListNew, _euSalesListOld, false, isChangeFromTriangularToEUTrade);
        }

        // Service
        if ((!_euSalesListOld.ServiceAmountMST && _euSalesListNew.ServiceAmountMST) ||      // New line, not correcting old line
            (oldEUSalesListLineInEU && _euSalesListOld.ServiceAmountMST &&                  // Correction to old line.
            (_euSalesListOld.CountryRegionId  != _euSalesListNew.CountryRegionId ||
             _euSalesListOld.VATNum           != _euSalesListNew.VATNum ||
             _euSalesListOld.ServiceAmountMST != _euSalesListNew.ServiceAmountMST)))
        {
            this.insertTmpTable(_euSalesListNew, _euSalesListOld, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record in the <c>TmpEUSalesListCorrections</c> table for either services or goods.
    /// </summary>
    /// <param name="_euSalesListNew">
    ///     The <c>EUSalesList</c> record that contains new or updated values.
    /// </param>
    /// <param name="_euSalesListOld">
    ///     The <c>EUSalesList</c> record that contains original values.
    /// </param>
    /// <param name="_isServices">
    ///     Used to indicate whether the transaction to be created is for services or goods.
    /// </param>
    /// <param name="_isChangeFromTriangularToEUTrade">
    ///     Flag indicating special case where triangular trade was originally reported, and now it must be reported as normal EU Trade instead.
    /// </param>
    private void insertTmpTable(EUSalesList _euSalesListNew,
                            EUSalesList _euSalesListOld,
                            boolean     _isServices,
                            boolean     _isChangeFromTriangularToEUTrade = false)
    {
        AmountMST       amountOld = _isServices ? _euSalesListOld.ServiceAmountMST : _euSalesListOld.AmountMST;
        AmountMST       amountNew = _isServices ? _euSalesListNew.ServiceAmountMST : _euSalesListNew.AmountMST;
        EUSalesListTax  euSalesListTaxOld = TaxCountryRegionParameters::find(_euSalesListOld.CountryRegionId).SalesTaxCode;
        EUSalesListTax  euSalesListTaxNew = TaxCountryRegionParameters::find(_euSalesListNew.CountryRegionId).SalesTaxCode;
        VATNum          strippedVatNumOld = TaxVATNumTable::stripVATNum(_euSalesListOld.vatNum, euSalesListTaxOld);
        VATNum          strippedVatNumNew = TaxVATNumTable::stripVATNum(_euSalesListNew.vatNum, euSalesListTaxNew);

        // If the new amount is the original amount with negative sign, it means it should be cancelled. In which case we should not show any values for the new line.
        boolean     isFullCancellation = _euSalesListOld && _euSalesListNew && amountOld + amountNew == 0;

        // Even if we have an old record, we may be reporting a new line. Example is if old line has 0 ServicesAmountMST but the corrected line has a non-0 value.
        // Typical case could be if original line reported a non-service amount, and the correction is to "move" the amount to service instead.
        boolean     isNewLine = amountOld == 0;

        tmpEUSalesListCorrections.clear();

        // If correction an old transaction, show original values
        if (_euSalesListOld && amountOld)
        {
            tmpEUSalesListCorrections.OldAmount              = amountOld;
            tmpEUSalesListCorrections.OldEUSalesListTaxCode  = euSalesListTaxOld;
            tmpEUSalesListCorrections.OldVATNum              = strippedVatNumOld;
            tmpEUSalesListCorrections.OldListCode            = _euSalesListOld.Listcode;
            tmpEUSalesListCorrections.OldTransDate           = _euSalesListOld.TransDate;
        }

        if (!isFullCancellation)
        {
            // Only show the new values if they have changed or in the special case of ListCode change.
            if (_isChangeFromTriangularToEUTrade || isNewLine || amountOld != amountNew)
            {
                tmpEUSalesListCorrections.NewAmount = amountNew;
            }

            if (_isChangeFromTriangularToEUTrade || isNewLine || _euSalesListOld.CountryRegionId != _euSalesListNew.CountryRegionId)
            {
                tmpEUSalesListCorrections.NewEUSalesListTaxCode = TaxCountryRegionParameters::find(_euSalesListNew.CountryRegionId).SalesTaxCode;
            }

            if (_isChangeFromTriangularToEUTrade || isNewLine || strippedVatNumOld != strippedVatNumNew)
            {
                tmpEUSalesListCorrections.NewVATNum = strippedVatNumNew;
            }

            if (_isChangeFromTriangularToEUTrade || isNewLine || !this.isEqualListCodeValue(_euSalesListNew.Listcode, _euSalesListOld.Listcode, _isServices))
            {
                tmpEUSalesListCorrections.NewListCode = _euSalesListNew.Listcode;
            }
        }

        // Only show new Tax period, when processing a completely new transaction.
        if (isNewLine)
        {
            tmpEUSalesListCorrections.NewTransDate = _euSalesListNew.TransDate;
        }

        tmpEUSalesListCorrections.IsService = _isServices;
        tmpEUSalesListCorrections.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEqualListCodeValue</Name>
				<Source><![CDATA[
    private boolean isEqualListCodeValue (Listcode _oldListCode, Listcode _newListCode, boolean _isServices = false)
    {
        if (_isServices)
        {
            return true;
        }
        else
        {
            if (
                ((_oldListCode == Listcode::EUTrade || _oldListCode == Listcode::ProductionOnToll) &&
                 (_newListCode == Listcode::EUTrade || _newListCode == Listcode ::ProductionOnToll)) ||
                ((_oldListCode == Listcode::TriangularEUTrade || _oldListCode == Listcode::TriangularProductionOnToll) &&
                 (_newListCode == Listcode::TriangularEUTrade || _newListCode == Listcode ::TriangularProductionOnToll)) ||
                  (_oldListCode == Listcode::PurchasedOnBehalf_LV && _newListCode == Listcode::PurchasedOnBehalf_LV)
                )
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>