<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransRevenueJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransRevenueJournal
extends ProjTransRevenue
{
    ProjJournalTrans    projJournalTrans;
    PSAContractLineNum  psaContractLineNum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that determines whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(boolean _chargeable = false)
    {
        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId categoryId()
    {
        return projJournalTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    public CostPrice costPrice()
    {
        return projJournalTrans.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projJournalTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projJournalTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether sales have been posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The <c>NoYes::No</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public NoYes ledgerSalesPosted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger date.
    /// </summary>
    /// <returns>
    /// The ledger date.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransDate ledgerTransDate()
    {
        TransDate ret;

        ret = projJournalTrans.TransDate;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projJournalTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean mustHandleBudget()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjJournalTrans _projJournalTrans, PSAContractLineNum _psaContractLineNum = '')
    {
        projJournalTrans    = _projJournalTrans;
        psaContractLineNum  = _psaContractLineNum;

        super(_projJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return projJournalTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    /// <remarks>
    /// This method returns an uninitialized value and must be overridden by classes that extend this class
    /// to provide the necessary functionality for the specific revenue transaction.
    /// </remarks>
    public Qty qty()
    {
        return projJournalTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projJournalTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projJournalTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    public SalesPrice salesPrice()
    {
        return projJournalTrans.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(LedgerJournalTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projJournalTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projJournalTrans.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return projJournalTrans.ProjTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransTxt txt()
    {
        return projJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the transaction.
    /// </summary>
    /// <returns>
    /// true if the transaction is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public boolean validateWrite()
    {
        return projJournalTrans.validateWrite();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>