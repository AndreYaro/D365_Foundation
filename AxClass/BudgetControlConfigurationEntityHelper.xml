<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlConfigurationEntityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlConfigurationEntityHelper</c> class is a helper for the entities associated with budget control configuration.
/// </summary>
public class BudgetControlConfigurationEntityHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDraftBudgetControlConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the draft <c>BudgetControlConfiguration</c> record for the given legal entity.
    /// </summary>
    /// <param name = "_legalEntityId">
    /// The legal entity associated with the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name = "_doCreateOrReadForUpdate">
    /// A Boolean value that indicates whether to create the record when it does not exist or read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlConfiguration</c> table.
    /// </returns>
    public static BudgetControlConfiguration getDraftBudgetControlConfiguration(DataAreaId _legalEntityId, boolean _doCreateOrReadForUpdate = false)
    {
        LedgerRecId primaryLedger = Ledger::primaryLedger(CompanyInfo::current(_legalEntityId));

        if (!BudgetControlConfiguration::existDraftForPrimaryLedger(primaryLedger)
            && (BudgetControlConfiguration::existActiveForPrimaryLedger(primaryLedger) || _doCreateOrReadForUpdate))
        {
            BudgetControlConfigurationManager::createDraftConfiguration(primaryLedger);
        }

        BudgetControlConfiguration draftControlConfiguration = BudgetControlConfiguration::findDraftByPrimaryLedger(primaryLedger, _doCreateOrReadForUpdate);

        if (!draftControlConfiguration)
        {
            throw error(strFmt("@Budget:BudgetControlConfigurationEntityHelperFailedToFindOrCreateDraft", _legalEntityId));
        }
        else if (!BudgetControlConfigurationManager::validateConfigurationEditPermitted(draftControlConfiguration.RecId))
        {
            // The validate edit permitted call will log errors.
            throw Exception::Error;
        }

        return draftControlConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDraftBudgetControlConfigurationFromOfficeAppCustomLookupFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the draft <c>BudgetControlConfiguration</c> record for the given entity lookup fields.
    /// </summary>
    /// <param name = "_entityName">
    /// The entity name.
    /// </param>
    /// <param name = "_legalEntityId">
    /// The legal entity ID field name.
    /// </param>
    /// <param name = "_entityFields">
    /// The <c>Array</c> of entity field values on the instance performing the lookup.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetControlConfiguration</c> table.
    /// </returns>
    public static BudgetControlConfiguration getDraftBudgetControlConfigurationFromOfficeAppCustomLookupFields(
        TableName _entityName,
        FieldName _legalEntityFieldName,
        Array _entityFields)
    {
        Map fieldMap = BudgetEntityHelper::getOfficeAppCustomLookupFieldMap(_entityName, _entityFields);

        LedgerRecId primaryLedgerRecId = BudgetEntityHelper::getPrimaryLedgerFromOfficeAppCustomLookupFieldMap(fieldMap, _legalEntityFieldName);

        BudgetControlConfiguration draftControlConfiguration = BudgetControlConfiguration::findDraftByPrimaryLedger(primaryLedgerRecId);

        return draftControlConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCycleTimeSpan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified time span name and fiscal calendar ID in the <c>BudgetCycleTimeSpan</c> table.
    /// </summary>
    /// <param name = "_name">
    /// The <c>BudgetCycleTimeSpanName</c> value that needs to be found.
    /// </param>
    /// <param name = "_fiscalCalendarId">
    /// The <c>FiscalCalendarId</c> value that needs to be found.
    /// </param>
    /// <returns>
    /// A record in the <c>BudgetCycleTimeSpan</c> table; otherwise, an empty record.
    /// </returns>
    public static BudgetCycleTimeSpan getBudgetCycleTimeSpan(BudgetCycleTimeSpanName _name, FiscalCalendarId _fiscalCalendarId)
    {
        FiscalCalendar fiscalCalendar = FiscalCalendar::findByCalendarId(_fiscalCalendarId);

        return BudgetCycleTimeSpan::findByNameAndCalendar(_name, fiscalCalendar.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportToExcelDataEntityContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specified menu item.
    /// </summary>
    /// <param name="_menuItem">
    /// The export menu item.
    /// </param>
    /// <param name="_legalEntityId">
    /// The legal entity associated with the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <param name="_status">
    /// The status associated with the <c>BudgetControlConfiguration</c> record.
    /// </param>
    /// <returns>
    /// Returns the <c>ExportToExcelDataEntityContext</c> that specifies what should be exported for the specified menu item; otherwise, null.
    /// </returns>
    public static ExportToExcelDataEntityContext getExportToExcelDataEntityContext(
        OfficeGeneratedExportMenuItem       _menuItem,
        DataAreaId                          _legalEntityId,
        BudgetControlConfigurationStatus    _status)
    {
        ExportToExcelDataEntityContext context = ExportToExcelDataEntityContext::construct();

        ExportToExcelDataEntityInfo entity = new ExportToExcelDataEntityInfo();

        entity.entityName(_menuItem.dataEntityName());

        BudgetControlConfigurationEntityOfficeMenuOption entityOfficeMenuOption = BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(entity.entityName());

        ExportToExcelFilterTreeBuilder filterBuilder = new ExportToExcelFilterTreeBuilder(entity.entityName());

        if (entityOfficeMenuOption.parmLegalEntityIdFieldName())
        {
            if (entityOfficeMenuOption.parmStatusFieldName())
            {
                var filter = filterBuilder.and(
                    filterBuilder.areEqual(entityOfficeMenuOption.parmLegalEntityIdFieldName(), _legalEntityId),
                    filterBuilder.areEqual(entityOfficeMenuOption.parmStatusFieldName(), _status));

                entity.filter(filter);
            }
            else
            {
                var filter = filterBuilder.areEqual(entityOfficeMenuOption.parmLegalEntityIdFieldName(), _legalEntityId);

                entity.filter(filter);
            }
        }

        context.entities().addEnd(entity);

        ExportToExcelDataEntityBindingInfo binding = new ExportToExcelDataEntityBindingInfo();
        binding.entityName(entity.entityName());

        if (entityOfficeMenuOption.parmDisplayFieldGroupName())
        {
            if (entityOfficeMenuOption.parmDataAreaIdFieldName())
            {
                binding.useFieldGroup(false);
                BudgetControlConfigurationEntityHelper::addGroupFieldsToFieldList(
                    entityOfficeMenuOption.parmEntityName(),
                    entityOfficeMenuOption.parmDisplayFieldGroupName(),
                    binding.fieldList());

                binding.fieldList().addEnd(entityOfficeMenuOption.parmDataAreaIdFieldName());
            }
            else
            {
                binding.useFieldGroup(true);
                binding.fieldGroupName(entityOfficeMenuOption.parmDisplayFieldGroupName());
            }
        }

        context.bindings().addEnd(binding);

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupFieldsToFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the fields from a field group to a list of field names.
    /// </summary>
    /// <param name = "_tableName">
    /// The table name.
    /// </param>
    /// <param name = "_fieldGroupName">
    /// The field group name.
    /// </param>
    /// <param name = "_fieldList">
    /// A list of field names.
    /// </param>
    public static void addGroupFieldsToFieldList(TableName _tableName, FieldGroupName _fieldGroupName, List _fieldList)
    {
        TableId tableId = tableName2Id(_tableName);
        DictFieldGroup fieldGroup = new DictFieldGroup(tableId, _fieldGroupName);
        FieldId fieldId;

        if (fieldGroup)
        {
            for (int i = 1; i <= fieldGroup.numberOfFields(); i++)
            {
                fieldId = fieldGroup.field(i);

                if (fieldId)
                {
                    _fieldList.addEnd(fieldId2Name(tableId, fieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customizeOfficeMenuOptions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customizes the Office menu options used to populate the Office Menu.
    /// </summary>
    /// <param name = "_menuOptions">
    /// The Office menu options to be customized.
    /// </param>
    /// <param name = "_isEditInOfficeAllowed">
    /// A Boolean value indicating whether editing in Office is allowed.
    /// </param>
    public static void customizeOfficeMenuOptions(OfficeMenuOptions _menuOptions, boolean _isEditInOfficeAllowed)
    {
        ListIterator dataEntityOptionsIterator = new ListIterator(_menuOptions.dataEntityOptions());

        // Remove auto-added data entities from the menu.
        while (dataEntityOptionsIterator.more())
        {
            dataEntityOptionsIterator.delete();
        }

        if (_isEditInOfficeAllowed)
        {
            // Add a custom export option for each entity so a custom filter can be added later.
            ListEnumerator entityListEnumerator = BudgetControlConfigurationEntityHelper::getEnityOfficeMenuOptionList().getEnumerator();

            while (entityListEnumerator.moveNext())
            {
                BudgetControlConfigurationEntityOfficeMenuOption entityOfficeMenuOption = entityListEnumerator.current();

                OfficeGeneratedExportMenuItem menuItem = OfficeGeneratedExportMenuItem::construct(entityOfficeMenuOption.parmEntityName(), entityOfficeMenuOption.parmEntityName());
                menuItem.displayName(entityOfficeMenuOption.parmDisplayName());

                _menuOptions.customMenuItems().addEnd(menuItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnityOfficeMenuOptionList</Name>
				<Source><![CDATA[
    private static List getEnityOfficeMenuOptionList()
    {
        List entityList = new List(Types::Class);

        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlConfigurationEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlDimensionAttributeEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlOverBudgetPermissionsEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlDocumentsAndJournalsEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlCycleModelEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlRuleEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlRuleCriterionEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlGroupEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlGroupCriterionEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlMessageLevelEntity)));
        entityList.addEnd(BudgetControlConfigurationEntityHelper::getEntityOfficeMenuOption(tableStr(BudgetControlConfigurationActivationEntity)));

        return entityList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityOfficeMenuOption</Name>
				<Source><![CDATA[
    private static BudgetControlConfigurationEntityOfficeMenuOption getEntityOfficeMenuOption(TableName _entityName)
    {
        BudgetControlConfigurationEntityOfficeMenuOption entityOfficeMenuOption = BudgetControlConfigurationEntityOfficeMenuOption::newForConfigurationEntity(_entityName);

        BudgetControlConfigurationEntityHelper controlConfigurationEntityHelper = new BudgetControlConfigurationEntityHelper();

        controlConfigurationEntityHelper.setEntityOfficeMenuOptionDelegate(entityOfficeMenuOption);

        return entityOfficeMenuOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEntityOfficeMenuOptionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the signature of the event that will respond to setting the Office menu options for the entity.
    /// </summary>
    /// <param name="_entityOfficeMenuOption">
    /// The <c>BudgetControlConfigurationEntityOfficeMenuOption</c> instance.
    /// </param>
    delegate void setEntityOfficeMenuOptionDelegate(BudgetControlConfigurationEntityOfficeMenuOption _entityOfficeMenuOption)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>