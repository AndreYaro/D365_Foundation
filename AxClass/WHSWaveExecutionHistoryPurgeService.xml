<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveExecutionHistoryPurgeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveExecutionHistoryPurgeService</c> class is used to purge the wave processing history logs
/// </summary>
class WHSWaveExecutionHistoryPurgeService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteHistoryWhereWaveNoLongerExists</Name>
				<Source><![CDATA[
    private void deleteHistoryWhereWaveNoLongerExists(utcDateTime _beforeDateTime)
    {
        WHSWaveTable waveTable;
        WHSWaveExecutionHistory waveExecutionHistory;

        ttsbegin;

        delete_from waveExecutionHistory
            where waveExecutionHistory.CreatedDateTime < _beforeDateTime
        notexists join waveTable
            where waveTable.WaveId == waveExecutionHistory.WaveId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHistoryWhereWaveIsInFinalState</Name>
				<Source><![CDATA[
    private void deleteHistoryWhereWaveIsInFinalState(utcDateTime _beforeDateTime)
    {
        WHSWaveTable waveTable;
        WHSWaveExecutionHistory waveExecutionHistory;

        ttsbegin;

        delete_from waveExecutionHistory
            where waveExecutionHistory.CreatedDateTime < _beforeDateTime
        exists join waveTable
            where waveTable.WaveId == waveExecutionHistory.WaveId &&
                    waveTable.WaveStatus == WHSWaveStatus::Shipped;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHistoryWhereWaveWillNotReachFinalState</Name>
				<Source><![CDATA[
    private void deleteHistoryWhereWaveWillNotReachFinalState(utcDateTime _beforeDateTime)
    {
        WHSWaveExecutionHistory waveExecutionHistory;

        while select waveExecutionHistory
            group by WaveId
            where waveExecutionHistory.CreatedDateTime < _beforeDateTime
        {
            WhsWaveTable whsWaveTable = WHSWaveTable::find(waveExecutionHistory.WaveId);

            if (whsWaveTable &&
                whsWaveTable.waveStatus == WHSWaveStatus::Released &&
                whsWaveTable.waveStatus() == WHSWaveStatus::Picked)
            {
                if (whsWaveTable.DemandWaveId != '')
                {
                    WHSWaveExecutionHistory::clearWaveExecutionHistory(whsWaveTable.WaveId);
                }
                else
                {
                    WHSWorkTransType workTransType = WHSWaveTable::getWorkTransType(whsWaveTable.WaveId);
                    if (workTransType == WHSWorkTransType::ProdPick ||
                        workTransType == WHSWorkTransType::KanbanPick)
                    {
                        WHSWaveExecutionHistory::clearWaveExecutionHistory(whsWaveTable.WaveId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run deletion of wave processing history logs
    /// </summary>
    /// <param name = "_contract">Contract including values for the process via SysOperation</param>
    public void execute(WHSWaveExecutionHistoryPurgeContract _contract)
    {
        utcDateTime beforeDateTime = DateTimeUtil::utcNow();

        // If they don't want to keep any history then adjust the date so that it is one day in the future.
        if (_contract.parmDaysToKeep() == 0)
        {
            beforeDateTime = DateTimeUtil::addDays(beforeDateTime, 1);
        }
        else
        {
            beforeDateTime = DateTimeUtil::addDays(beforeDateTime, -_contract.parmDaysToKeep());
        }

        WHSWaveTable waveTable;
        WHSWaveExecutionHistory waveExecutionHistory;

        // delete WHSWaveExecutionHistory only for "closed" waves
        
        this.deleteHistoryWhereWaveNoLongerExists(beforeDateTime);
        this.deleteHistoryWhereWaveIsInFinalState(beforeDateTime);
        this.deleteHistoryWhereWaveWillNotReachFinalState(beforeDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>