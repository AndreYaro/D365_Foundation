<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCopying_CreditNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesPurchCopyFactory(SalesPurchCopy::CreditNoteHeader, tablestr(PurchTable))]
[SalesPurchCopyFactory(SalesPurchCopy::CreditNoteLines, tablestr(PurchTable))]
public class PurchCopying_CreditNote extends PurchCopying
{
    SpecTransManager specTransManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkHeaderAgreement</Name>
				<Source><![CDATA[
    public boolean checkHeaderAgreement(Common _header)
    {
        return super(_header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineAgreement</Name>
				<Source><![CDATA[
    public boolean checkLineAgreement(Common _line, AgreementHeaderExtRecId_RU _newAgreementHeaderExt = 0)
    {
        return super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLinesAgreement</Name>
				<Source><![CDATA[
    public boolean checkLinesAgreement()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Copies the exchange rate.
    /// </summary>
    /// <param name="_exchRate">
    ///   An exchange rate.
    /// </param>
    protected void copyExchRate(ExchRate _exchRate)
    {
        if (copyExchRate)
        {
            purchTable.FixedExchRate = _exchRate;
            purchTable.setReportingCurrencyFixedExchangeRateFromAccounting();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInTransaction</Name>
				<Source><![CDATA[
    protected void copyInTransaction()
    {
        PurchSettlementType creditNoteSettlementType = VendParameters::find().CreditNoteSettlementType;

        ttsbegin;

        // clear out any existing tax adjustments for the Purchase Order.
        TaxWorkRegulation::clearRegulation(purchTable.TableId, purchTable.RecId);

        super();

        if (purchTable.SettleVoucher != creditNoteSettlementType)
        {
            purchTable.SettleVoucher = creditNoteSettlementType;
            if (purchTable.validateWrite())
                purchTable.update();
            else
            {
                purchTable.reread();
                throw error("@SYS18722");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginalSourceDocumentLineRequired</Name>
				<Source><![CDATA[
    protected boolean isOriginalSourceDocumentLineRequired(PurchLine _purchLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSettlement</Name>
				<Source><![CDATA[
    void deleteSettlement()
    {
        if (deleteSettlement)
        {
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(PurchCopyingContract _contract)
    {
        super(_contract);

        if (this.settleInvoiceTrans())
        {
            specTransManager = SpecTransManager::newFromSpec(_contract.parmCallingTable());
        }

        deleteSettlement = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markForSettlement</Name>
				<Source><![CDATA[
    void markForSettlement(VendInvoiceTrans _vendInvoiceTrans)
    {
        VendTrans   vendTrans;

        ttsbegin;

        vendTrans = _vendInvoiceTrans.vendInvoiceJour().vendTrans();
        while (vendTrans)
        {
            vendTrans.transData().markForSettlement(purchTable);
            next vendTrans;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the remainder quantities should be set for the <c>purchLine</c> parameter.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>purchLine</c> record to be updated.
    /// </param>
    /// <returns>
    /// A boolean value indicating whether or not the quantities should be set.
    /// </returns>
    /// <remarks>
    /// True if the <c>ItemId</c> on the <c>purchLine</c> record is not a catch weight item.
    /// </remarks>
    public boolean pdsSetRemain(PurchLine _purchLine)
    {
        return !PdsGlobal::pdsIsCWItem(_purchLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCILUserInterAction</Name>
				<Source><![CDATA[
    public void preCILUserInterAction(PurchCopyingContract _contract = null)
    {
        super(_contract);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.promptCheckCostAllocation_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptCheckCostAllocation_RU</Name>
				<Source><![CDATA[
    protected void promptCheckCostAllocation_RU()
    {
        str  messageStr;

        while select tmpFrmVirtualLines
            where tmpFrmVirtualLines.TableNum == tableNum(VendInvoiceTrans)
        {
            if (CostAllocationHistory_RU::existAllocationAsSource(tmpFrmVirtualLines.RecordNo))
            {
                messageStr = "@GLS114551";
                break;
            }

            if (CostAllocationHistory_RU::existAllocationAsBase(tmpFrmVirtualLines.RecordNo))
            {
                messageStr = "@GLS114552";
                break;
            }
        }

        if (messageStr && Box::yesNo(messageStr, DialogButton::No) == DialogButton::No)
        {
            throw error("@SYS18722");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveSettlement</Name>
				<Source><![CDATA[
    void promptRemoveSettlement()
    {
        if (this.settleInvoiceTrans() && specTransManager.getSpecTransCount() > 0)
        {
            deleteSettlement = SpecTrans::promptRemoveMarkedTransactions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdReturn_W</Name>
				<Source><![CDATA[
    public void setInventTransIdReturn_W(PurchLine _purchLine, VendInvoiceTrans _vendInvoiceTrans)
    {
        Qty checkQty = !_purchLine.StockedProduct
            ? _purchLine.PurchQty
            : _purchLine.QtyOrdered;

        if (_vendInvoiceTrans.RecId && checkQty < 0)
        {
            PurchLine_W purchLine_W = _purchLine.purchLine_W();
            purchLine_W.RefReturnInvoiceTrans_W = _vendInvoiceTrans.RecId;
            _purchLine.packPurchLine_W(purchLine_W);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the remainder values for the <c>purchLine</c> parameter record.
    /// </summary>
    /// <param name="_purchLine">
    /// <c>PurchLine</c> record to be modified.
    /// </param>
    /// <param name="_reverseSign">
    /// Boolean value that determines whether the inventory sign should be reversed.
    /// </param>
    /// <param name="_qtyFactor">
    /// Factor used to determine new quantities.
    /// </param>
    public void setPdsCWQty(
        PurchLine   _purchLine,
        boolean     _reverseSign,
        real        _qtyFactor)
    {
        _purchLine.PdsCWQty     = _reverseSign ? -_purchLine.PdsCWQty : _purchLine.PdsCWQty;
        _purchLine.PdsCWQty     = decRound(
            _purchLine.PdsCWQty * _qtyFactor,
            UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(_purchLine.pdsCWUnitId())));

        _purchLine.PurchQty     = _reverseSign ? -_purchLine.PurchQty : _purchLine.PurchQty;
        _purchLine.QtyOrdered   = _reverseSign ? -_purchLine.QtyOrdered : _purchLine.QtyOrdered;

        // set the remainders
        _purchLine.PdsCWRemainInventFinancial   = 0;
        _purchLine.PdsCWRemainInventPhysical    = _purchLine.PdsCWQty;
        _purchLine.RemainPurchPhysical          = _purchLine.PurchQty;
        _purchLine.RemainInventPhysical         = _purchLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInvoiceTrans</Name>
				<Source><![CDATA[
    boolean settleInvoiceTrans()
    {
        return VendParameters::find().CreditNoteSettlementType == SettlementType::SelectedTransact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefInvoice_MY</Name>
				<Source><![CDATA[
    public void setRefInvoice_MY(PurchLine _purchLine, VendInvoiceJour _invoicejour)
    {
        PurchLine_W purchLine_W;

        super(_purchLine, _invoicejour);

        purchLine_W = _purchLine.purchLine_W();
        purchline_W.RefInvoiceId_MY     = _invoiceJour.InvoiceId;
        purchline_W.RefInvoiceDate_MY   = _invoiceJour.InvoiceDate;

        _purchline.packPurchLine_W(purchline_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceCreditCopy</Name>
				<Source><![CDATA[
    void updateInvoiceCreditCopy(PurchLine _purchLine, VendInvoiceTrans _vendInvoiceTrans)
    {
        VendInvoiceJour   localVendInvoiceJour;

        // <GEERU>
        InventTrans       inventTransFrom;
        InventTrans       inventTransTo;
        InventTransOrigin inventTransOriginFrom;
        InventTransOrigin inventTransOriginTo;
        RAssetPurchTrans  rassetPurchTransFrom;
        RAssetPurchTrans  rassetPurchTransTo;
        RAssetTable       rAssetTable;

        // Check for the specific country.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            inventTransOriginFrom = InventTransOrigin::findByInventTransId(_vendInvoiceTrans.InventTransId);
            inventTransOriginTo   = InventTransOrigin::findByInventTransId(_purchLine.InventTransId);

            while select RecId from inventTransFrom
                where inventTransFrom.InventTransOrigin           == inventTransOriginFrom.RecId &&
                      inventTransFrom.MarkingRefInventTransOrigin == inventTransOriginTo.RecId
                join RecId from inventTransTo
                    where inventTransTo.InventTransOrigin == inventTransOriginTo.RecId   &&
                          inventTransTo.InventDimId       == inventTransFrom.InventDimId
            {
                TransLink_RU::create(tableNum(InventTrans), inventTransFrom.RecId, inventTransTo.RecId);
            }

            while select AccountNum from rAssetTable
                where rAssetTable.InventTransId == _vendInvoiceTrans.InventTransId
                exists join rassetPurchTransFrom
                    where rassetPurchTransFrom.AssetId       == rAssetTable.AccountNum
                        && rassetPurchTransFrom.TableTableId == tableNum(PurchLine)
                        && rassetPurchTransFrom.Posted       == NoYes::Yes
            {
                rassetPurchTransTo.clear();
                rassetPurchTransTo.initValue();
                rassetPurchTransTo.initFromPurchLine(_purchLine);
                rassetPurchTransTo.AssetId = rAssetTable.AccountNum;
                rassetPurchTransTo.insert();
            }
        }
        // </GEERU>

        localVendInvoiceJour = VendInvoiceJour::findFromVendInvoiceTrans(_vendInvoiceTrans.PurchID,
                                                                         _vendInvoiceTrans.InvoiceId,
                                                                         _vendInvoiceTrans.InvoiceDate,
                                                                         _vendInvoiceTrans.NumberSequenceGroup,
                                                                         _vendInvoiceTrans.InternalInvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isCreditNote()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>