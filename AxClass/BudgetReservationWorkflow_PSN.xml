<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationWorkflow_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationWorkflow_PSN</c> class handles the logic for the submit to workflow and resubmit to workflow actions.
/// </summary>
public class BudgetReservationWorkflow_PSN
{
    BudgetReservationHeader_PSN     budgetReservationHeader;
    BudgetReservation_PSN           budgetReservation;
    WorkflowVersionTable            workflowVersionTable;
    WorkflowComment                 workflowComment;
    boolean                         submit;
    WorkflowWorkItemTable           workflowWorkItemTable;
    UserId                          userId;
    MenuItemName                    menuItemName;
    WorkflowTypeName                workflowTypeName;
    AccountingDate                  sessionDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box so a user can confirm a workflow submission or resubmission of a general budget reservation document.
    /// </summary>
    /// <returns>
    /// true if the dialog box was closed by clicking the Ok button; otherwise, false.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        boolean                         okSubmission;
    
        if (menuItemName == menuitemactionstr(BudgetReservationWorkflowSubmit_PSN))
        {
            WorkflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
    
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            okSubmission = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (menuItemName == menuitemactionstr(BudgetReservationWorkflowReSubmit_PSN))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
                workflowWorkItemTable,
                WorkflowWorkItemActionType::Resubmit,
                new MenuFunction(menuitemactionstr(BudgetReservationWorkflowReSubmit_PSN), MenuItemType::Action));
    
            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            okSubmission = workflowWorkItemActionDialog.parmIsClosedOK();
            userId = workflowWorkItemActionDialog.parmTargetUser();
        }
    
        return okSubmission;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the general budget reservation workflow.
    /// </summary>
    /// <param name="_documentRecord">
    /// The document record for which the workflow is initialized.
    /// </param>
    /// <param name="_menuItemName">
    /// The name of the caller menu item.
    /// </param>
    /// <param name="_workflowVersionTable">
    /// A record in the <c>WorkflowVersionTable</c> table.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    /// A record in the <c>WorkflowWorkItemTable</c> table.
    /// </param>
    public void init(
        Common                  _documentRecord,
        menuItemName            _menuItemName,
        WorkflowVersionTable    _workflowVersionTable,
        WorkflowWorkItemTable   _workflowWorkItemTable)
    {
        this.parmBudgetReservationHeader(_documentRecord);
        this.parmSubmit(_menuItemName == menuitemactionstr(BudgetReservationWorkflowSubmit_PSN));
        this.parmMenuItemName(_menuItemName);
    
        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
        this.parmWorkflowTypeName(this.parmWorkflowVersionTable().workflowTable().TemplateName);
        this.parmBudgetReservation(BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(budgetReservationHeader));
        
        if (BudgetParameters::find().UseSessionDateForAccounting == NoYes::Yes)
        {
            sessionDate = PublicSectorUtils::getSystemDateWithUserTimeZoneOffset();
            this.parmBudgetReservation().parmSessionDate(sessionDate);
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservation</Name>
				<Source><![CDATA[
    public BudgetReservation_PSN parmBudgetReservation(BudgetReservation_PSN _budgetReservation = budgetReservation)
    {
        budgetReservation = _budgetReservation;
    
        return budgetReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationHeader</Name>
				<Source><![CDATA[
    public BudgetReservationHeader_PSN parmBudgetReservationHeader(BudgetReservationHeader_PSN _budgetReservationHeader = budgetReservationHeader)
    {
        budgetReservationHeader = _budgetReservationHeader;
    
        return budgetReservationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;
    
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmit</Name>
				<Source><![CDATA[
    public boolean parmSubmit(boolean _submit = submit)
    {
        submit = _submit;
    
        return submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;
    
        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTypeName</Name>
				<Source><![CDATA[
    public WorkflowTypeName parmWorkflowTypeName(WorkflowTypeName _workflowTypeName = workflowTypeName)
    {
        workflowTypeName = _workflowTypeName;
    
        return workflowTypeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;
    
        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemTable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;
    
        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the general budget reservation to workflow.
    /// </summary>
    /// <remarks>
    /// This method is called from the workflow framework when the task/approval is resubmitted.
    /// </remarks>
    public void reSubmit()
    {
        if (this.parmWorkflowWorkItemtable() && this.parmBudgetReservationHeader())
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(
                this.parmWorkflowWorkItemtable(),
                this.parmWorkflowComment(),
                userId,
                WorkflowWorkItemActionType::Resubmit,
                this.parmMenuItemName());
    
            if (sessionDate != dateNull())
            {
                if (BudgetParameters::find().UseSessionDateForAccounting)
                {
                    BudgetReservation_PSN::correctionDistributionDateUpdate(sessionDate,
                        0,
                        this.parmBudgetReservationHeader().RecId);
                }
            }

            budgetReservation.updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::WorkflowSubmit);
    
            this.updateFormDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the general budget reservation workflow.
    /// </summary>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>activateFromWorkflowTemplate</c>
    /// method of the <c>Workflow</c> class using information about the general budget reservation record.
    /// </remarks>
    public void submit()
    {
        budgetReservation = BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(this.parmBudgetReservationHeader());
        
        if (this.parmBudgetReservationHeader().canSubmitToWorkflow())
        {
            if (this.validateWorkflowVersionTable())
            {
                Workflow::activateFromWorkflowConfigurationId(
                    this.parmWorkflowVersionTable().ConfigurationId,
                    this.parmBudgetReservationHeader().RecId,
                    this.parmWorkflowComment(),
                    false);
                                
                budgetReservation.updateDocumentStatusFields(BudgetReservationDocumentAction_PSN::WorkflowSubmit);
                
                if (sessionDate != dateNull())
                {
                    if (BudgetParameters::find().UseSessionDateForAccounting)
                    {
                        BudgetReservation_PSN::correctionDistributionDateUpdate(sessionDate,
                        0,
                        this.parmBudgetReservationHeader().RecId);
                    }
                }
            }
    
            this.updateFormDataSource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the data source associated with the budget reservation header.
    /// </summary>
    public void updateFormDataSource()
    {
        FormDataSource budgetReservationHeader_ds;
    
        budgetReservationHeader_ds = FormDataUtil::getFormDataSource(this.parmBudgetReservationHeader());
    
        if (budgetReservationHeader_ds)
        {
            budgetReservationHeader_ds.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>WorkflowVersionTable</c> table reference
    /// from the <c>BudgetReservationType_PSN</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>WorkflowVersionTable</c> table is valid; otherwise, false.
    /// </returns>
    protected boolean validateWorkflowVersionTable()
    {
        boolean                     isValid = true;
        BudgetReservationType_PSN   budgetReservationType;
    
        budgetReservationType = BudgetReservationType_PSN::find(this.parmBudgetReservationHeader().budgetReservationType_PSN);
    
        if (budgetReservationType.WorkflowTableSequenceNumber &&
            !BudgetReservationType_PSN::isWorkflowTableSequenceNumberValid(budgetReservationType.RecId))
        {
            isValid = checkFailed(strfmt(
                "@Budgeting_BudgetReservationPS:CannotSubmitGBRToWorkflowError",
                fieldid2pname(tablenum(BudgetReservationType_PSN), fieldnum(BudgetReservationType_PSN, WorkflowTableSequenceNumber)),
                formstr(BudgetReservationType_PSN)));
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetReservationWorkflow_PSN</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetReservationWorkflow_PSN</c> class.
    /// </returns>
    public static BudgetReservationWorkflow_PSN construct()
    {
        return new BudgetReservationWorkflow_PSN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a general budget reservation workflow document and starts the corresponding workflow.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
        BudgetReservationWorkflow_PSN   budgetReservationWorkflow;
        BudgetReservationHeader_PSN     budgetReservationHeader;
        BudgetReservation_PSN           budgetReservation;
        str                             menuItemName;
        FormRun                         budgetReservationForm;
    
        budgetReservationWorkflow       = BudgetReservationWorkflow_PSN::construct();
        budgetReservationHeader         = _args.record() as BudgetReservationHeader_PSN;
        menuItemName                    = _args.menuItemName();
        budgetReservationForm           = _args.caller();
        budgetReservation               = BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(budgetReservationWorkflow.parmBudgetReservationHeader());
        
        if (budgetReservationHeader && (strLen(menuItemName) > 0))
        {
            if ((budgetReservationForm != null)
                && (menuItemName == menuitemactionstr(BudgetReservationWorkflowSubmit_PSN)
                    || menuItemName == menuitemactionstr(BudgetReservationWorkflowReSubmit_PSN)))
            {
                BudgetReservationWorkflow.init(
                    budgetReservationHeader,
                    menuItemName,
                    budgetReservationForm.getActiveWorkflowConfiguration(),
                    budgetReservationForm.getActiveWorkflowWorkItem());
            }
            else
            {
                BudgetReservationWorkflow.init(budgetReservationHeader, menuItemName, null, null);
            }
    
            if (budgetReservation.validateBudgetCheckOnBudgetResLines(budgetReservationWorkflow.parmBudgetReservationHeader()))
            {
                if (BudgetReservationWorkflow.dialogOk())
                {
                    if (BudgetReservationWorkflow.parmSubmit())
                    {
                        BudgetReservationWorkflow.submit();
                    }
                    else
                    {
                        BudgetReservationWorkflow.reSubmit();
                    }
    
                    if ((budgetReservationForm != null)
                        && (menuItemName == menuitemactionstr(BudgetReservationWorkflowSubmit_PSN)
                            || menuItemName == menuitemactionstr(BudgetReservationWorkflowReSubmit_PSN)))
                    {
                        budgetReservationForm.updateWorkflowControls();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>