<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanLineItem</c> class provides information for a <c>BudgetPlanLine</c> and <c>BudgetPlanLineActiveView</c> document.
/// </summary>
public abstract class BudgetPlanLineItem
{
    Common  budgetPlanLineActiveViewLine;

    public static str BudgetPlanHeader;
    public static str AssetId;
    public static str ProjectId;
    public static str ProposedAsset;
    public static str ProposedProject;
    public static str EstimateType;
    public static str TransactionCurrencyCode;
    public static str LedgerDimension;
    public static str EffectiveDate;
    public static str BudgetPlanScenario;
    public static str UnitOfMeasure;
    public static str IsRecurring;
    public static str BudgetClass;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        budgetPlanLineActiveViewLine.setFieldValue(IsRecurring, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessCycleStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget cycle start date for the <c>BudgetCycle</c> field on the
    /// <c>BudgetPlanningProcess</c> table.
    /// </summary>
    /// <returns>
    /// The start date of the budget planning process budget cycle, if found; otherwise, a null date.
    /// </returns>
    protected BudgetPlanLineEffectiveDate getProcessCycleStartDate()
    {
        BudgetPlanningProcessRecId  planningProcessRecId;
        BudgetCycleRecId            budgetCycleRecId;
        BudgetPlanLineEffectiveDate effectiveDateLocal;

        planningProcessRecId = BudgetPlanHeader::find(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader)).BudgetPlanningProcess;
        budgetCycleRecId     = BudgetPlanningProcess::find(planningProcessRecId).BudgetCycle;
        effectiveDateLocal   = BudgetCycle::find(budgetCycleRecId).getStartDate();

        return effectiveDateLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts line corresponding to <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c>.
    /// </summary>
    public void insert()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates line corresponding to <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c>.
    /// </summary>
    public void update()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>AssetId</c> field value.
    /// </summary>
    protected void modifiedAssetId()
    {
        this.setSourceDataAreaId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values based on the modified <c>ProjectId</c> field value.
    /// </summary>
    protected void modifiedProjectId()
    {
        this.setSourceDataAreaId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDataAreaId</Name>
				<Source><![CDATA[
    public abstract void setSourceDataAreaId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssetId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>AssetId</c> field in the <c>BudgetPlanLine</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetId</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateAssetId()
    {
        boolean isValid = true;

        if (budgetPlanLineActiveViewLine.getFieldValue(AssetId) && budgetPlanLineActiveViewLine.getFieldValue(ProposedAsset))
        {
            isValid = checkFailed("@GLS150308");
        }

        if (isValid && budgetPlanLineActiveViewLine.getFieldValue(AssetId))
        {
            changeCompany (BudgetPlan::getDataAreaId(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader)))
            {
                if (!AssetTable::exist(budgetPlanLineActiveViewLine.getFieldValue(AssetId)))
                {
                    isValid = checkFailed(strFmt("@GLS180006",
                                                    budgetPlanLineActiveViewLine.getFieldValue(AssetId),
                                                    fieldId2name(tableNum(AssetTable), fieldNum(AssetTable, AssetId)),
                                                    tableId2Name(tableNum(AssetTable))));
                }

                if (isValid && !this.assetStatusIsValid())
                {
                    isValid = checkFailed(strFmt("@Budget:CannotSelectValueWithInvalidStatus",
                                                    fieldId2pname(tableNum(AssetTable), fieldNum(AssetTable, AssetId)),
                                                    budgetPlanLineActiveViewLine.getFieldValue(AssetId)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetStatusIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>AssetId</c> field in the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> table has a valid status.
    /// </summary>
    /// <returns>
    /// true if the <c>AssetId</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean assetStatusIsValid()
    {
        QueryRun queryRun = new QueryRun(BudgetPlanLookupHelper::getAssetTableQuery(budgetPlanLineActiveViewLine.getFieldValue(AssetId)));
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>LedgerDimension</c> field in the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> table
    /// is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>LedgerDimension</c> field is valid; otherwise, false.
    /// </returns>
    protected abstract boolean validateLedgerDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePlanCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>PlanCurrencyCode</c> field in the <c>BudgetPlanLine</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>PlanCurrencyCode</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validatePlanCurrencyCode()
    {
        AifFault                    fault;
        boolean                     isValid = true;
        BudgetPlanningProcessRecId  planningProcessRecId;
        BudgetPlanLineEffectiveDate cycleStartDate;
        ExchangeRateHelper          exchangeRateHelper;
        LedgerRecId                 ledgerRecId;
        CurrencyCode                accountingCurrency;
        ExchangeRateTypeRecId       budgetExchangeRateType;
        str                         faultReason;

        if ((budgetPlanLineActiveViewLine.TableId == tableNum(BudgetPlanLine)
                && budgetPlanLineActiveViewLine.getFieldValue(EstimateType) == BudgetPlanEstimateType::Monetary)
            || budgetPlanLineActiveViewLine.TableId == tableNum(BudgetPlanLineActiveView))
        {
            planningProcessRecId = BudgetPlanHeader::find(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader)).BudgetPlanningProcess;

            ledgerRecId = BudgetPlanningProcess::find(planningProcessRecId).Ledger;
            accountingCurrency = Ledger::accountingCurrencyByLedger(ledgerRecId);
            budgetExchangeRateType = Ledger::budgetExchangeRateTypeByLedger(ledgerRecId);

            cycleStartDate = this.getProcessCycleStartDate();

            exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(budgetPlanLineActiveViewLine.getFieldValue(TransactionCurrencyCode), accountingCurrency);
            exchangeRateHelper.parmExchangeRateTypeRecId(budgetExchangeRateType);
            exchangeRateHelper.parmExchangeDate(cycleStartDate);
            exchangeRateHelper.parmErrorType(AifErrorType::Fault);

            // If the entered currency differs from the accounting currency, MUST
            // validate that a currency exchange rate exists between the selected currency and accounting currency
            // Note: If an exchange rate doesn't exist, the methods getExchangeRate1 and getExchangeRate2 will raise
            //       the appropriate error message
            exchangeRateHelper.getExchangeRate2();

            fault       = AifFault::getRootFault();
            faultReason = strFmt(
                "@SYS321719",
                    ExchangeRateType::find(budgetExchangeRateType).Name,
                    budgetPlanLineActiveViewLine.getFieldValue(TransactionCurrencyCode),
                    accountingCurrency,
                    cycleStartDate);

            // Validate that a currency exchange rate 2 if required, exists between the selected currency and accounting currency
            isValid = !(fault != null
                        && fault.getReason() == faultReason);

            if (isValid)
            {
                // Validate that a currency exchange rate 1 exists between the selected currency and accounting currency
                isValid = (exchangeRateHelper.getExchangeRate1() != 0);
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>ProjectId</c> field in the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>ProjectId</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateProjectId()
    {
        boolean isValid = true;

        if (budgetPlanLineActiveViewLine.getFieldValue(ProjectId) && budgetPlanLineActiveViewLine.getFieldValue(ProposedProject))
        {
            isValid = checkFailed("@GLS150307");
        }

        if (isValid && budgetPlanLineActiveViewLine.getFieldValue(ProjectId))
        {
            changeCompany (BudgetPlan::getDataAreaId(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader)))
            {
                if (!ProjTable::exist(budgetPlanLineActiveViewLine.getFieldValue(ProjectId)))
                {
                    isValid = checkFailed(strFmt("@GLS180006",
                                                    budgetPlanLineActiveViewLine.getFieldValue(ProjectId),
                                                    fieldId2name(tableNum(ProjTable), fieldNum(ProjTable, ProjId)),
                                                    tableId2Name(tableNum(ProjTable))));
                }

                if (isValid && !this.projectStatusIsValid())
                {
                    isValid = checkFailed(strFmt("@Budget:CannotSelectValueWithInvalidStatus",
                                                    fieldId2pname(tableNum(ProjTable), fieldNum(ProjTable, ProjId)),
                                                    budgetPlanLineActiveViewLine.getFieldValue(ProjectId)));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectStatusIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>ProjectId</c> field in the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> table has a valid status.
    /// </summary>
    /// <returns>
    /// true if the <c>ProjectId</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean projectStatusIsValid()
    {
        QueryRun queryRun = new QueryRun(BudgetPlanLookupHelper::getProjTableQuery(budgetPlanLineActiveViewLine.getFieldValue(ProjectId)));
        return queryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProposedAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>ProposedAsset</c> field in the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>ProposedAsset</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateProposedAsset()
    {
        boolean isValid = true;

        if (budgetPlanLineActiveViewLine.getFieldValue(AssetId) && budgetPlanLineActiveViewLine.getFieldValue(ProposedAsset))
        {
            isValid = checkFailed("@GLS150308");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProposedProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>ProposedProject</c> field in the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>ProposedProject</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateProposedProject()
    {
        boolean isValid = true;

        if (budgetPlanLineActiveViewLine.getFieldValue(ProjectId) && budgetPlanLineActiveViewLine.getFieldValue(ProposedProject))
        {
            isValid = checkFailed("@GLS150307");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>UnitOfMeasure</c> field in the <c>BudgetPlanLine</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>UnitOfMeasure</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateUnitOfMeasure()
    {
        boolean                 isValid = true;
        BudgetPlanScenario      scenario;
        UnitOfMeasureConverter  unitOfMeasureConverter;

        scenario = BudgetPlanScenario::find(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanScenario));

        // If the entered unit differs from the default unit defined for the scenario, MUST
        // validate that a unit conversion exists between the selected unit and default unit for the standard conversion
        if (budgetPlanLineActiveViewLine.getFieldValue(UnitOfMeasure) && budgetPlanLineActiveViewLine.getFieldValue(UnitOfMeasure) != scenario.UnitOfMeasure)
        {
            unitOfMeasureConverter = UnitOfMeasureConverter::newFromConversionParameters(
                                            budgetPlanLineActiveViewLine.getFieldValue(UnitOfMeasure),
                                            scenario.UnitOfMeasure,
                                            NoYes::No);

            if (!unitOfMeasureConverter.canValueBeConverted())
            {
                isValid = checkFailed("@GLS150011");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetPlanLineForDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> record can be deleted.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> record is valid; otherwise, false.
    /// </returns>
    public boolean checkBudgetPlanLineForDelete()
    {
        boolean                 isValid = true;
        BudgetPlanHeader        budgetPlanHeaderDelete;
        BudgetPlanningStageRule stageRule;

        budgetPlanHeaderDelete = BudgetPlanHeader::find(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader));

        stageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                        budgetPlanHeaderDelete.BudgetPlanningProcess,
                        budgetPlanHeaderDelete.BudgetingOrganization,
                        budgetPlanHeaderDelete.BudgetPlanningStage);

        // Check whether the budget planning stage rule allows modification of plan line
        if (!stageRule.CanModifyBudgetPlanLines)
        {
            isValid = checkFailed("@GLS150039");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetPlanLineForWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanLine</c>  or <c>BudgetPlanLineActiveView</c> record is
    /// valid and ready to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetPlanLine</c> or <c>BudgetPlanLineActiveView</c> record is valid; otherwise, false.
    /// </returns>
    public boolean checkBudgetPlanLineForWrite()
    {
        boolean                 isValid = true;
        BudgetPlanHeader        budgetPlanHeaderWrite;
        BudgetPlanningStageRule stageRule;

        budgetPlanHeaderWrite = BudgetPlanHeader::find(budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader));

        stageRule = BudgetPlanningStageRule::findByProcessOrganizationStage(
                        budgetPlanHeaderWrite.BudgetPlanningProcess,
                        budgetPlanHeaderWrite.BudgetingOrganization,
                        budgetPlanHeaderWrite.BudgetPlanningStage);

        // Check whether the budget planning stage rule allows the adding or modification of plan line
        if (!budgetPlanLineActiveViewLine.RecId)
        {
            if (!stageRule.CanAddBudgetPlanLines && !stageRule.CanModifyBudgetPlanLines)
            {
                isValid = checkFailed("@GLS150037");
            }
        }
        else
        {
            if (!stageRule.CanModifyBudgetPlanLines)
            {
                isValid = checkFailed("@GLS150038");
            }
        }

        // If the stage rule allows modifying budget plan lines but not adding lines, verify that the line
        // being added or the ledger dimension being modified exists for a different scenario.
        if (stageRule.CanModifyBudgetPlanLines
            && !stageRule.CanAddBudgetPlanLines
            && !BudgetPlanLine::findFirstByHeaderLedgerDimensionDate(
                budgetPlanLineActiveViewLine.getFieldValue(BudgetPlanHeader),
                budgetPlanLineActiveViewLine.getFieldValue(LedgerDimension),
                budgetPlanLineActiveViewLine.getFieldValue(EffectiveDate)))
        {
            isValid = checkFailed("@GLS70605");
        }

        // Check that the asset ID and project ID are valid.
        isValid = isValid && this.validateAssetId();
        isValid = isValid && this.validateProjectId();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nonZeroLinesExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if non zero values exist in lines for given parameters.
    /// </summary>
    /// <param name = "_budgetPlanScenario">
    /// The <c>BudgetPlanScenario</c> record to filter budget plan lines by unit of measure.
    /// </param>
    /// <param name = "_budgetPlanHeader">
    /// The <c>BudgetPlanHeader</c> record to filter budget plan lines.
    /// </param>
    /// <param name = "_ordinal">
    /// The <c>BudgetPlanLayoutElementOrdinal</c> value to filter active view detail records.
    /// </param>
    /// <param name = "_budgetPlanLineActiveViewRecId">
    /// The <c>BudgetPlanLineActiveView</c> record to filter budget plan lines associated with active view detail records.
    /// </param>
    /// <returns>
    /// true if non zero lines exist for the given parameters; otherwise, false.
    /// </returns>
    public static boolean nonZeroLinesExist(
        BudgetPlanHeaderRecId           _budgetPlanHeader,
        BudgetPlanScenario              _budgetPlanScenario,
        BudgetPlanLayoutElementOrdinal  _ordinal,
        BudgetPlanLineActiveViewRecId   _budgetPlanLineActiveViewRecId = 0)
    {
        boolean                         linesExist;
        boolean                         doNotUseActiveView = (_budgetPlanLineActiveViewRecId == 0);
        BudgetPlanLineActiveViewDetail  budgetPlanLineActiveViewDetail;
        BudgetPlanLine                  budgetPlanLine;

        select firstonly RecId from budgetPlanLine
            where ((_budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Quantity
                    && budgetPlanLine.Quantity != 0)
                   || (_budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary
                       && budgetPlanLine.TransactionCurrencyAmount != 0.00))
                && budgetPlanLine.BudgetPlanScenario == _budgetPlanScenario.RecId
                && budgetPlanLine.BudgetPlanHeader == _budgetPlanHeader
                exists join budgetPlanLineActiveViewDetail
                    where budgetPlanLineActiveViewDetail.Line == budgetPlanLine.RecId
                        && budgetPlanLineActiveViewDetail.Ordinal == _ordinal
                        && (doNotUseActiveView
                            || budgetPlanLineActiveViewDetail.ActiveView == _budgetPlanLineActiveViewRecId);

        if (budgetPlanLine.RecId)
        {
            linesExist = true;
        }

        return linesExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default field values for the mapped <c>BudgetPlanLine</c> and <c>BudgetPlanLineActiveView</c> table records.
    /// </summary>
    public void defaultRow()
    {
        budgetPlanLineActiveViewLine.setFieldValue(IsRecurring, NoYes::Yes);
        budgetPlanLineActiveViewLine.setFieldValue(BudgetClass, BudgetClass::Expense);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>