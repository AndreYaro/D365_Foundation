<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PackingSlip)]
[SysOperationJournaledParametersAttribute(true)]
class       SalesFormLetter_PackingSlip
extends     SalesFormLetter implements BatchRetryable
{
    CustPackingSlipJour     custPckSlpJour;
    boolean                 resetProforma;
    boolean                 proforma;

    #define.CurrentVersion(8)
    #LOCALMACRO.ParmList
        resetProforma
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beforeOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executed before a service operation is executed.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <remarks>
    /// Override this method to implement pre-processing logic before a service operation is called.
    /// </remarks>
    protected void beforeOperation(SysOperationExecutionMode _executionMode)
    {
        InventQualityManagementCreateHandler::createSalesPackingSlipBefore(this);

        super(_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A <c>ClassDescription</c> value.
    /// </returns>
    public ClassDescription caption()
    {       
        return SalesFormLetter_PackingSlip::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified <c>SalesParmLine</c> record.
    /// </summary>
    /// <param name="_salesParmLine">
    /// The <c>SalesParmLine</c> record to verify.
    /// </param>
    /// <param name="_salesLine">
    /// The source <c>SalesLine</c> table record.
    /// </param>
    /// <returns>
    /// true if the <c>SalesParmLine</c> record is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// An Infolog message can be shown if a correction is being made for a line with active tracking
    /// dimensions, but no specific dimension is specified.
    /// </remarks>
    protected boolean checkSalesLineChanged(SalesParmLine _salesParmLine, SalesLine _salesLine)
    {
        boolean ok = super(_salesParmLine, _salesLine);

        // Validates the length of sales order line names are valid.
        if (ok
            && this.needValidateLineName_PL())
        {
            ok = this.validateLineName_PL(_salesParmLine);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    public void  chooseLines(boolean _append = false, boolean _directDeliveryUpdate = false)
    {
        if (resetProforma)
        {
            this.proforma(proforma);
        }
        super(_append, _directDeliveryUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesDocumentTimezonePreference</Name>
				<Source><![CDATA[
    protected SalesDocumentTimezonePreference getSalesDocumentTimezonePreference()
    {
        return SalesParameters::find().PackingSlipTimezonePreference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBasedOnMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object that is based on the action command by which it was opened.
    /// </summary>
    /// <param name="_callerMenuItem">
    /// The command by which the object was opened.
    /// </param>
    public void initBasedOnMenuItem(MenuItemNameAction _callerMenuItem)
    {
        super(_callerMenuItem);

        if (_callerMenuItem == menuitemActionStr(SalesFormLetter_PackingSlipCancel)
            || _callerMenuItem == menuitemActionStr(SalesFormLetter_PackingSlipProjectCancel))
        {
            this.parmVersioningUpdateType(VersioningUpdateType::Cancel);
        }
        else
        {
            this.parmVersioningUpdateType(VersioningUpdateType::Correction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes printer settings with default values for sales order posting.
    /// </summary>
    public void initPrinterSettingsFormletter()
    {
        super();

        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(this.printerSettingsFormletter(PrintSetupOriginalCopy::Original));
        printSettings.parmPrintToArchive(CustFormletterParameters::find().StoreInPrintArchivePackingSlip);
        this.updatePrinterSettingsFormLetter(printSettings.pack(), PrintSetupOriginalCopy::Original);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPrintShippingLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether to print the freight slips.
    /// </summary>
    /// <param name="_toPrint">
    ///     A <c>NoYes</c> enumeration that determines whether or not to print the label.
    /// </param>
    /// <remarks>
    ///     Needed ability to turn on printing of freight slips from
    ///     quality check module if a shipping application does not exist.
    ///     Basically is a wrapper that performs some checks and passes
    ///     information to the printShippingLabel method.
    ///     On called, will set options to print shipping labels if the parameter
    ///     passed is set to print shipping labels, and also provided
    ///     that the other parameters (in useShippingStatOnPackingSlip() method)
    ///     are set to allow shipping labels to be printed.
    /// </remarks>
    public void mcrPrintShippingLabel(NoYes _toPrint)
    {
        if (_toPrint && SalesParameters::find().useShippingStatOnPackingSlip())
        {
            this.printShippingLabel (_toPrint);
            return;
        }

        this.printShippingLabel(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrUpdatePrinterSettingsShippingLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the printer settings based on the passed container.
    /// </summary>
    /// <param name="_printerSettings">
    ///     The container that consists of the various settings regarding
    ///     the printer.
    /// </param>
    /// <remarks>
    ///     Wrapper method for the quality check form to update the printer
    ///     settings on freight slips.  Needed since
    ///     updatePrinterSettingsShippinglabel is a protected method.
    /// </remarks>
    public void mcrUpdatePrinterSettingsShippingLabel(container _printerSettings)
    {
        this.updatePrinterSettingsShippingLabel(_printerSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckIntrastat</Name>
				<Source><![CDATA[
    protected boolean mustCheckIntrastat()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesFormLetter_PackingSlip</c> class.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <remarks>
    /// The <c>initializeFromArgs</c> method can also be used to initialize a controller. If those options
    /// for initialization are used the default values can be used in the constructor.
    /// </remarks>
    void  new(
        IdentifierName _className = classStr(FormletterService),
        IdentifierName _methodName= methodStr(FormletterService, postSalesOrderPackingSlip),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#ParmList] + [super()]
            + [this.pdsPack()]
        ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && prmisDefault(_showDialog))
        {
            return super(_showDialog);
        }
        // </GEERU>
        if (prmisDefault(_showDialog) && this.parmVersioningUpdateType() == VersioningUpdateType::Cancel)
        {
            return false;
        }

        return super(_showDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printExtraDocuments</Name>
				<Source><![CDATA[
    protected boolean printExtraDocuments()
    {
        return this.printEntryCertificate_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for sales order packing slip.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::SalesOrderPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    public void resetParmListCommonCS()
    {
        super();
        this.creditRemaining(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProformaUponPhysicalUpdatable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Turns off the sample packing slip if the sales order can be updated.
    /// </summary>
    /// <remarks>
    /// If the order can be updated, the final packing slip is printed instead of the proforma.
    /// </remarks>
    public void resetProformaUponPhysicalUpdatable()
    {
        boolean         canNotPhysicalUpdSalesOrder;

        if (this.parmLineIdSet())
        {
            SetEnumerator se = Set::create(this.parmLineIdSet()).getEnumerator();
            while (se.moveNext())
            {
                WMSShipment localWMSShipment = WMSShipment::find(se.current());
                canNotPhysicalUpdSalesOrder = !localWMSShipment.canPhysicalUpdSalesOrder();
                if (canNotPhysicalUpdSalesOrder)
                {
                    break;
                }
            }
            resetProforma = true;
            this.proforma(canNotPhysicalUpdSalesOrder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShipCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes any functionality that will require user interaction.
    /// </summary>
    /// <remarks>
    /// This method is called after the <c>run</c> method.
    /// </remarks>
    public void runShipCarrier()
    {
        super();

        // This method contains a dialog.
        this.shipCarrierTestMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCarrierTestMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Permits the user to input values, acting as if those were feedback from third-party shipping
    ///    software.
    /// </summary>
    /// <remarks>
    ///    This method is called after a packing slip has been posted. It is used for testing.
    /// </remarks>
    private void shipCarrierTestMode()
    {
        if (!Global::isConfigurationkeyEnabled(configurationKeyNum(ShipCarrier)) || this.isInBatch())
        {
            return;
        }

        SetEnumerator se = Set::create(formletterOutputContract.parmAllJournalsPacked()).getEnumerator();
        while (se.moveNext())
        {
            custPckSlpJour = se.current();
            if (ShipCarrierTable::isCarrierInterfaceInTestMode(custPckSlpJour.ShipCarrierId))
            {
                ShipCarrierPackage::testMode(custPckSlpJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        container packedBase;
        NoYes    approved;
        str      approvedBy; // EmplId is no longer supported,
                             // however we still need to have corresponding string field if we need to unpack old package

        container   pdsPackedClass;
        ParmId          parmId;
        SalesParmUpdate salesParmUpdate;
        NoYes           backorder;
        NoYes           queryCriteria;
        NoYes           editing;
        Printout        printout;
        NoYes           printFormletter;
        container       printersettingsFormletter;
        NoYes           printFreightSlip;
        container       printerSettingsFreightSlip;
        NoYes           printShippingLabel;
        container       printerSettingsShippingLabel;
        container       printersettingsFormletterCopy;
        boolean         usePrintManagement;

        #LOCALMACRO.ParmList_v25sp2
            parmId,
            salesParmUpdate.proforma,
            salesParmUpdate.specQty,
            backorder,
            salesParmUpdate.creditRemaining,
            queryCriteria,
            editing,
            approved,
            approvedBy,
            printout,
            printFormletter,
            printersettingsFormletter,
            printFreightSlip,
            printerSettingsFreightSlip,
            printShippingLabel,
            printerSettingsShippingLabel
        #ENDMACRO

        #LOCALMACRO.ParmList_v30
            parmId,
            salesParmUpdate,
            backorder,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printFreightSlip,
            printerSettingsFreightSlip,
            printShippingLabel,
            printerSettingsShippingLabel
        #ENDMACRO

        #LOCALMACRO.ParmList_v401
            parmId,
            salesParmUpdate,
            backorder,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printFreightSlip,
            printerSettingsFreightSlip,
            printShippingLabel,
            printerSettingsShippingLabel,
            printersettingsFormletterCopy
        #ENDMACRO

        #LOCALMACRO.ParmList_v5
            parmId,
            salesParmUpdate,
            backorder,
            queryCriteria,
            editing,
            printout,
            printFormletter,
            printersettingsFormletter,
            printFreightSlip,
            printerSettingsFreightSlip,
            printShippingLabel,
            printerSettingsShippingLabel,
            printersettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version, #ParmList, packedBase
                , pdsPackedClass
                ]  = _packedClass;
                this.pdsUnpack(pdsPackedClass);

                return super(packedBase);

            case 6+1 /*case is old currentversion + old parentversion*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(SalesFormLetterContract::construct(DocumentStatus::PackingSlip));

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.salesParmUpdate(salesParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.printShippingLabel(printShippingLabel);
                this.updatePrinterSettingsShippingLabel(printerSettingsShippingLabel);
                this.usePrintManagement(usePrintManagement);
                break;

            case 5                  :   [version, #ParmList_v401]               = _packedClass;
                                        break;

            case 4                  :   [version, #ParmList_v30]                = _packedClass;
                                        printersettingsFormletterCopy           = printersettingsFormletter;
                                        break;

            case 2                  :   [version, #ParmList_v25sp2]             = _packedClass;
                                        break;

            default :
                                        return super(_packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether it is all right to continue.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    /// true if it is all right to continue; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The validate method is used for validating if it is all right to close the sales posting form when
    /// you post sales orders.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (ret)
        {
            ret = this.validateBankLC();
        }

        if (ret && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            ret = this.validateFiscalCalendar();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the letter of credit required information is attached with the packing slip.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    private boolean validateBankLC()
    {
        boolean ret = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        if (BankLCExportFeatureChecker::checkBankLCExportEnabled()
            && !this.proforma()
            && !this.isVersioningCorrectionOrCancel())
        {
            ret = BankLCExportType::validateDocuments(salesParmUpdate.ParmId, salesParmUpdate.DocumentStatus);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalCalendar</Name>
				<Source><![CDATA[
    private boolean validateFiscalCalendar()
    {
        SalesParmTable      salesParmTableLocal = SalesParmTable::findSalesId(this.salesTable().SalesId, this.salesParmUpdate().ParmId);

        return LedgerFiscalCalendar::checkDateIsValid(Ledger::fiscalCalendar(CompanyInfo::current()), salesParmTableLocal.TransDate ? salesParmTableLocal.TransDate : this.transDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS2094";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWMSShipment</Name>
				<Source><![CDATA[
    static SalesFormLetter  newFromWMSShipment(Set _shipmentIDSet)
    {
        SalesFormLetter_PackingSlip salesFormLetter_PackingSlip = SalesFormLetter::construct(DocumentStatus::PackingSlip);
        ParmId parmId = salesFormLetter_PackingSlip.parmId();

        salesFormLetter_PackingSlip.getLast();
        salesFormLetter_PackingSlip.parmId(parmId);
        salesFormLetter_PackingSlip.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesFormLetter_PackingSlip.multiForm(true);
        salesFormLetter_PackingSlip.parmLineIdSet(_shipmentIDSet.pack());

        return salesFormLetter_PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPackingSlip</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesFormLetter::construct() instead.', false, 31\05\2017)]
    static public SalesFormLetter_PackingSlip newPackingSlip(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postSalesOrderPackingSlip),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return SalesFormLetter::construct(DocumentStatus::PackingSlip, _className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the packing slip process can be ran in a new session.
    /// </summary>
    /// <returns>true if packing slip can run in a new session; otherwise, false</returns>
    protected boolean canRunInNewSession()
    {
        // Packing slips for intercompany orders cannot run in a new session,
        // due to they also run packing slip for the PO.
        return this.checkRunInNewSession()
            && !salesFormLetterContract.parmSalesTable().isInterCompanyOrder()
            && !WHSLoadTable::hasInterCompanySalesOrder(salesFormLetterContract.parmWHSLoadId())
            && !this.isCustPackingSlipJourInterCompanyOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustPackingSlipJourInterCompanyOrder</Name>
				<Source><![CDATA[
    private boolean isCustPackingSlipJourInterCompanyOrder()
    {
        if (salesFormLetterContract.parmCallerTable() is CustPackingSlipJour)
        {
            CustPackingSlipJour custPackingSlipJour = salesFormLetterContract.parmCallerTable();
            if (custPackingSlipJour.salesTable().isInterCompanyOrder())
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunAsRealAsync</Name>
				<Source><![CDATA[
    public boolean canRunAsRealAsync()
    {
        return SalesFormLetterPackingSlipRealAsyncFlight::instance().isEnabled()
            && !this.proforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysRealAsyncOperationId</Name>
				<Source><![CDATA[
    public SysRealAsyncOperationId getSysRealAsyncOperationId()
    {
        Common sourceTable = this.parmSourceTable();
        str operationId;

        if (sourceTable && sourceTable is SalesTable)
        {
            SalesTable salesTable = sourceTable;
            operationId = salesTable.SalesId;
        }
        else
        {
            operationId = this.parmId();
        }

        return operationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVersioningUpdateTypePost</Name>
				<Source><![CDATA[
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected void setVersioningUpdateTypePost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferredJournalPost</Name>
				<Source><![CDATA[
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean isDeferredJournalPost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetVersioningUpdateType</Name>
				<Source><![CDATA[
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean mustResetVersioningUpdateType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (SalesFormLetterErrorMessageHelpScopePackingSlipFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>