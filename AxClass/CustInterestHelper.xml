<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustInterestHelper</c> class manages calculations of interest.
/// </summary>
class CustInterestHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFeeLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension account that is associated with the interest fee transcation.
    /// </summary>
    /// <param name="_ledgerDimensionInterestTransRecord">
    /// The interest transaction record.
    /// </param>
    /// <returns>
    /// The ledger account associated with the interest interest fee transcation.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// This method throws exception if the passed buffer is not of the interest journal type.
    /// </exception>
    protected LedgerDimensionDefaultAccount getFeeLedgerAccount(Common _ledgerDimensionInterestTransRecord)
    {
        CustPostingProfile custPostingProfile;
        CustInterest custInterest;
        LedgerDimensionDefaultAccount interestFeeFullAccount;
        CustInterestHelper custInterestHelper = new CustInterestHelper();
        Common ledgerDimensionInterestTransRecord = _ledgerDimensionInterestTransRecord.data();
        CustInterestVersion custInterestVersion;
        CustInterestVersionDetail custInterestVersionDetail;
        CustInterestJour custInterestJour;
        TransDate versionDate;
        AmountCur interestFee;
        CustInterestFee custInterestFee;

        if (_ledgerDimensionInterestTransRecord.TableId != tableNum(CustInterestJour))
        {
            throw error ("@SYS83964");
        }

        custPostingProfile = custInterestHelper.getPostingProfile(ledgerDimensionInterestTransRecord);
        custInterest = custInterestHelper.getInterestRecord(ledgerDimensionInterestTransRecord, custPostingProfile);
        custInterestJour = _ledgerDimensionInterestTransRecord;
        versionDate = custInterestJour.ToDate;

        interestFee = custInterestJour.Fee;

        custInterestVersion = CustInterestVersion::findByDate(custInterest.RecId, versionDate);

        custInterestVersionDetail = CustInterestVersionDetail::findByFeeType(custInterestVersion.RecId, this.getCustInterestFeeTypeForFeeLedgerAccount());

        custInterestFee = CustInterestFee::findByCustInterestVersionDetail(custInterestVersionDetail.RecId, custInterestJour.CurrencyCode);

        interestFeeFullAccount = custInterestFee.FeeLedgerDimension;

        return interestFeeFullAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInterestFeeTypeForFeeLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInterestFeeType</c> enumeration value used to find the <c>CustInterestVersionDetail</c> table buffer
    /// when determining the fee ledger account.
    /// </summary>
    /// <returns>The <c>CustInterestFeeType</c> enumeration value.</returns>
    protected CustInterestFeeType getCustInterestFeeTypeForFeeLedgerAccount()
    {
        return CustInterestFeeType::Earning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves interest code record that is associated with the Interest Fee, transaction or with the line record.
    /// </summary>
    /// <param name="_ledgerDimensionInterestTransRecord">
    /// The record of the interest transaction.
    /// </param>
    /// <param name="_custPostingProfile">
    /// The Posting profile associated with the interest transaction.
    /// </param>
    /// <returns>
    /// The interest record.
    /// </returns>
    protected CustInterest getInterestRecord(Common _ledgerDimensionInterestTransRecord, CustPostingProfile _custPostingProfile = '')
    {
        CustInterest custInterest;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        CustInterestTransLine custInterestTransLine;

        switch (_ledgerDimensionInterestTransRecord.TableId)
        {
            case tableNum(CustInterestJour):

                custInterestJour = _ledgerDimensionInterestTransRecord;
                custInterest = CustInterest::find(CustLedgerAccounts::custInterest(custInterestJour.AccountNum,
                                                     this.getPostingProfile(custInterestJour)));
                break;

            case tableNum(CustInterestTrans):

                custInterestTrans = _ledgerDimensionInterestTransRecord;
                custInterestJour = CustInterestJour::find(custInterestTrans.InterestNote);
                custInterest = CustInterest::find(CustLedgerAccounts::custInterest(custInterestJour.AccountNum,
                                                     this.getPostingProfile(custInterestTrans)));

                break;

            case tableNum(CustInterestTransLine):

                custInterestTransLine = _ledgerDimensionInterestTransRecord;
                custInterest = CustInterest::find(custInterestTransLine.CustInterest);

                break;
        }

        return custInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves posting profile that is associated with the Interest transaction record.
    /// </summary>
    /// <param name="_ledgerDimensionInterestTransRecord">
    /// The record of the interest transaction.
    /// </param>
    /// <returns>
    /// The Posting profile associated with the interest transaction.
    /// </returns>
    protected CustPostingProfile getPostingProfile(Common _ledgerDimensionInterestTransRecord)
    {
        CustPostingProfile custPostingProfile;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        CustInterestTransLine custInterestTransLine;

        switch (_ledgerDimensionInterestTransRecord.TableId)
        {
            case tableNum(CustInterestJour):

                custInterestJour = _ledgerDimensionInterestTransRecord;
                custPostingProfile = custInterestJour.PostingProfile;

                break;

            case tableNum(CustInterestTrans):

                custInterestTrans = _ledgerDimensionInterestTransRecord;
                custPostingProfile = CustTrans::find(custInterestTrans.CustTransId).PostingProfile;

                break;

            case tableNum(CustInterestTransLine):

                custInterestTransLine = _ledgerDimensionInterestTransRecord;
                custInterestTrans = CustInterestTrans::find(custInterestTransLine.InterestNote, custInterestTransLine.CustInterestTrans);
                custPostingProfile = CustTrans::find(custInterestTrans.CustTransId).PostingProfile;

                break;
        }

        return custPostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension account that is associated with the interest transcation.
    /// </summary>
    /// <param name="_ledgerDimensionInterestTransRecord">
    /// The interest transaction record.
    /// </param>
    /// <returns>
    /// The ledger account associated with the interest transaction.
    /// </returns>
    protected LedgerDimensionDefaultAccount getTransLedgerAccount(Common _ledgerDimensionInterestTransRecord)
    {
        CustPostingProfile custPostingProfile;
        CustInterest custInterest;
        LedgerDimensionDefaultAccount interestFullAccount;
        CustInterestHelper custInterestHelper = new CustInterestHelper();
        Common ledgerDimensionInterestTransRecord = _ledgerDimensionInterestTransRecord.data();

        custPostingProfile = custInterestHelper.getPostingProfile(ledgerDimensionInterestTransRecord);
        custInterest = custInterestHelper.getInterestRecord(ledgerDimensionInterestTransRecord, custPostingProfile);
        interestFullAccount = custInterestHelper.getVerDetailLedgerDimensionByIntTrans(ledgerDimensionInterestTransRecord, custInterest);

        return interestFullAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransLineLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the ledger dimension associated with the interest transcation line.
    /// </summary>
    /// <param name="_ledgerDimensionInterestTransRecord">
    /// The interest transaction record.
    /// </param>
    /// <returns>
    /// The ledger account associated with the interest transaction line.
    /// </returns>
    protected LedgerDimensionDefaultAccount getTransLineLedgerAccount(Common _ledgerDimensionInterestTransRecord)
    {
        CustInterest custInterest;
        LedgerDimensionDefaultAccount interestFullAccount;
        CustInterestHelper custInterestHelper = new CustInterestHelper();
        Common ledgerDimensionInterestTransRecord = _ledgerDimensionInterestTransRecord.data();

        // There is no need for the retrieving the posting profile since the interest code for the line is stored in the <c>CustInteresTransLine</c> table
        custInterest = custInterestHelper.getInterestRecord(ledgerDimensionInterestTransRecord);
        interestFullAccount = custInterestHelper.getVerDetailLedgerDimensionByIntTrans(ledgerDimensionInterestTransRecord, custInterest);

        return interestFullAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVerDetailLedgerDimensionByIntTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves <c>LedgerDimensionDefaultAccount</c> that is associated with the Interest version record.
    /// </summary>
    /// <param name="_ledgerDimensionInterestTransRecord">
    ///  The interest transaction record.
    /// </param>
    /// <param name="_custInterest">
    /// The interest record.
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> that is associated with the Interest version record.
    /// </returns>
    protected LedgerDimensionDefaultAccount getVerDetailLedgerDimensionByIntTrans(Common _ledgerDimensionInterestTransRecord, CustInterest _custInterest)
    {
        CustInterestVersion custInterestVersion;
        CustInterestJour custInterestJour;
        CustInterestTrans custInterestTrans;
        CustInterestTransLine custInterestTransLine;
        TransDate versionDate;
        AmountCur amount;

        if (_ledgerDimensionInterestTransRecord.TableId != tableNum(CustInterestTrans)
            && _ledgerDimensionInterestTransRecord.TableId != tableNum(CustInterestTransLine))
        {
            throw error ("@SYS83964");
        }

        switch (_ledgerDimensionInterestTransRecord.TableId)
        {
            case tableNum(CustInterestTrans):

                custInterestTrans = _ledgerDimensionInterestTransRecord;
                custInterestJour = CustInterestJour::find(custInterestTrans.InterestNote);
                versionDate = custInterestTrans.CalcFrom;
                amount = custInterestTrans.InterestAmount;

                break;

            case tableNum(CustInterestTransLine):

                custInterestTransLine = _ledgerDimensionInterestTransRecord;
                custInterestTrans = CustInterestTrans::find(custInterestTransLine.InterestNote, custInterestTransLine.CustInterestTrans);
                versionDate = custInterestTransLine.CalcFrom;
                amount = custInterestTransLine.InterestAmount;

                break;
        }

        custInterestVersion = CustInterestVersion::findByDate(_custInterest.RecId, versionDate);

        CustInterestVersionDetail custInterestVersionDetail = this.getCustInterestVersionDetailByAmount(amount, custInterestVersion.RecId);

        return custInterestVersionDetail.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInterestVersionDetailByAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustInterestVersionDetail</c> table buffer based on the amount interest transaction.
    /// </summary>
    /// <param name = "_amount">The amount of the interest transaction.</param>
    /// <param name = "_custInterestVersionRecId">The Record Id of the <c>CustInterestVersion</c> table buffer.</param>
    /// <returns>The <c>CustInterestVersionDetail</c> table buffer.</returns>
    protected CustInterestVersionDetail getCustInterestVersionDetailByAmount(AmountCur _amount, CustInterestVersionRecId _custInterestVersionRecId)
    {
        CustInterestVersionDetail custInterestVersionDetail;

        if (_amount >= 0)
        {
            custInterestVersionDetail = CustInterestVersionDetail::findByFeeType(_custInterestVersionRecId, CustInterestFeeType::Earning);
        }
        else
        {
            custInterestVersionDetail = CustInterestVersionDetail::findByFeeType(_custInterestVersionRecId, CustInterestFeeType::Payment);
        }

        return custInterestVersionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestTransLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger account associated with the interest transaction.
    /// </summary>
    /// <param name="_interestLedgerDimensionsOptions">
    /// The interest ledger dimension retrieval options.
    /// </param>
    /// <param name="_ledgerDimensionInterestTransRecord">
    /// The interest transaction record.
    /// </param>
    /// <returns>
    /// The ledger account associated with the interest transaction.
    /// </returns>
    /// <remarks>
    /// This method finds only the ledger dimension for a interest fee, transcation or a line. The other options that supports combination of ledger dimensions
    /// will not work in this method, since this method only retrieves single ledger account and not the list.
    /// </remarks>
    public static LedgerDimensionDefaultAccount getInterestTransLedgerAccount(
        CustInterestLedgerDimensionsOptions_PSN _interestLedgerDimensionsOptions,
        Common _ledgerDimensionInterestTransRecord)
    {
        LedgerDimensionDefaultAccount interestFullAccount;
        CustInterestHelper custInterestHelper = new CustInterestHelper();

        switch (_interestLedgerDimensionsOptions)
        {
            case CustInterestLedgerDimensionsOptions_PSN::InterestHeaderLedgerDimension:
                interestFullAccount = custInterestHelper.getFeeLedgerAccount(_ledgerDimensionInterestTransRecord);
                break;

            case CustInterestLedgerDimensionsOptions_PSN::InterestTransactionLedgerDimension:
                interestFullAccount = custInterestHelper.getTransLedgerAccount(_ledgerDimensionInterestTransRecord);
                break;

            case CustInterestLedgerDimensionsOptions_PSN::InterestLinesLedgerDimension:
                interestFullAccount = custInterestHelper.getTransLineLedgerAccount(_ledgerDimensionInterestTransRecord);
                break;

            default:
                throw error("@SYS83964");
        }

        return interestFullAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInterestTransLedgerAccountList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of ledger accounts associated with the interest transaction.
    /// </summary>
    /// <param name="_custInterestLedgerDimensionsOptions">
    /// The interest ledger dimension retrieval options.
    /// </param>
    /// <param name="_ledgerDimensionInterestTransRecord">
    ///  The interest transaction record.
    /// </param>
    /// <returns>
    /// The list of ledger accounts associated with the interest transaction.
    /// </returns>
    public static List getInterestTransLedgerAccountList(
        CustInterestLedgerDimensionsOptions_PSN _custInterestLedgerDimensionsOptions,
        Common _ledgerDimensionInterestTransRecord)
    {
        List intLedgerDimensionAccountsList = new List(Types::Int64);
        LedgerDimensionDefaultAccount interestFullAccount;
        CustInterestHelper custInterestHelper = new CustInterestHelper();
        CustInterestTrans custInterestTrans;
        CustInterestJour custInterestJour;
        CustInterestTransLine custInterestTransLine;

        switch (_custInterestLedgerDimensionsOptions)
        {
            case CustInterestLedgerDimensionsOptions_PSN::InterestHeaderLedgerDimension:
                if (_ledgerDimensionInterestTransRecord.TableId == tableNum(CustInterestJour))
                {
                    interestFullAccount = custInterestHelper.getFeeLedgerAccount(_ledgerDimensionInterestTransRecord);

                    intLedgerDimensionAccountsList.addEnd(interestFullAccount);
                }
                break;

            case CustInterestLedgerDimensionsOptions_PSN::InterestTransactionLedgerDimension:
                if (_ledgerDimensionInterestTransRecord.TableId == tableNum(CustInterestTrans))
                {
                    interestFullAccount = custInterestHelper.getTransLedgerAccount(_ledgerDimensionInterestTransRecord);

                    intLedgerDimensionAccountsList.addEnd(interestFullAccount);
                }
                break;

            case CustInterestLedgerDimensionsOptions_PSN::InterestLinesLedgerDimension:
                if (_ledgerDimensionInterestTransRecord.TableId == tableNum(CustInterestTransLine))
                {
                    interestFullAccount = custInterestHelper.getTransLedgerAccount(_ledgerDimensionInterestTransRecord);

                    intLedgerDimensionAccountsList.addEnd(interestFullAccount);
                }
                break;

            case CustInterestLedgerDimensionsOptions_PSN::InterestFeeAndTransLedgerDimensions:
                if (_ledgerDimensionInterestTransRecord.TableId == tableNum(CustInterestJour))
                {
                    interestFullAccount = custInterestHelper.getFeeLedgerAccount(_ledgerDimensionInterestTransRecord);
                    intLedgerDimensionAccountsList.addEnd(interestFullAccount);

                    custInterestJour = _ledgerDimensionInterestTransRecord;

                    while select custInterestTrans
                        where custInterestTrans.InterestNote == custInterestJour.InterestNote
                    {
                        interestFullAccount = custInterestHelper.getTransLedgerAccount(custInterestTrans);
                        intLedgerDimensionAccountsList.addEnd(interestFullAccount);
                    }
                }
                break;

            case CustInterestLedgerDimensionsOptions_PSN::InterestTransAndLinesLedgerDimensions:
                if (_ledgerDimensionInterestTransRecord.TableId == tableNum(CustInterestTrans))
                {
                    interestFullAccount = custInterestHelper.getTransLedgerAccount(_ledgerDimensionInterestTransRecord);
                    intLedgerDimensionAccountsList.addEnd(interestFullAccount);

                    custInterestTrans = _ledgerDimensionInterestTransRecord;

                    while select custInterestTransLine
                        where custInterestTransLine.CustInterestTrans == custInterestTrans.RecId
                    {
                        interestFullAccount = custInterestHelper.getTransLineLedgerAccount(custInterestTransLine);
                        intLedgerDimensionAccountsList.addEnd(interestFullAccount);
                    }
                }
                break;
        }

        return intLedgerDimensionAccountsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CustInterestHelper</c> class.
    /// </summary>
    /// <returns>A new instance of the <c>CustInterestHelper</c> class.</returns>
    public CustInterestHelper construct()
    {
        return new CustInterestHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>