<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostEmplCostInternal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjForecastPostEmplCostInternal extends ProjForecastPostEmpl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
        protected boolean checkEnterCost()
    {
        boolean ret = true;

        ret = super();

        if (ret)
        {
            switch (this.forecastUpdateType())
            {
                case ProjForecastUpdateType::Journals:
                    
                    ProjLedgerStatus emplLedgerStatus;
                    if (isMultipleContractLineFeatureEnabled)
                    {
                        emplLedgerStatus = this.isIncludedInProjectContractForMultipleContractLines(projTable, ProjTransType::Hour) ?
                            projRevProfile.EmplLedgerStatus : ProjLedgerStatus::Operations;
                    }
                    else
                    {
                        emplLedgerStatus = projGroup.EmplTransCost;
                    }

                    if (emplLedgerStatus == ProjLedgerStatus::Never || emplLedgerStatus == ProjLedgerStatus::None)
                    {
                        ret = false;
                    }
                    break;

                case ProjForecastUpdateType::Invoice:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Estimate:
                    ret = false;
                    break;

                case ProjForecastUpdateType::Elimination:
                    ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterNoneLedger</Name>
				<Source><![CDATA[
        public boolean checkEnterNoneLedger()
    {
        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals && this.ledgerStatusCost() == ProjLedgerStatus::None)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
        protected boolean checkEnterTurnover()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNoneLedger</Name>
				<Source><![CDATA[
        void postNoneLedger()
    {
        MapEnumerator   fundingAllocationEnumerator;
        Map             splitTransQty;

        if (this.forecastUpdateType() == ProjForecastUpdateType::Journals)
        {
            this.accountNum(0);
            this.postingType(LedgerPostingType::ProjNoLedger);
            this.costSales(ProjCostSales::Cost);
            this.ledgerTransDate(projTrans.transDate());

            if (projTrans.transCostMST())
            {
                fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.transCostMST(), projTrans.currencyIdCost()).getEnumerator();
                splitTransQty = ProjFundingEngine::distributeQty(fundingSourceList, projTrans.qty());
                while (fundingAllocationEnumerator.moveNext())
                {
                    this.qty(splitTransQty.exists(fundingAllocationEnumerator.currentKey()) ? splitTransQty.lookup(fundingAllocationEnumerator.currentKey()) * 1 : 0.0);
                    this.amountMST(fundingAllocationEnumerator.currentValue());
                    this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                }

                if (projTrans.indirectCostAmount())
                {
                    fundingAllocationEnumerator = ProjFundingEngine::ledgerDistributions(fundingSourceList, projTrans.indirectCostAmount(), projTrans.currencyIdCost()).getEnumerator();
                    while (fundingAllocationEnumerator.moveNext())
                    {
                        this.qty(0.0);
                        this.amountMST(fundingAllocationEnumerator.currentValue());
                        this.createForecastPosting(fundingAllocationEnumerator.currentKey());
                    }
                }
            }
            else
            {
                this.createForecastPosting(0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRevenueProfileForMultipleContractLines</Name>
				<Source><![CDATA[
    protected internal void initializeRevenueProfileForMultipleContractLines()
    {
        if (this.isIncludedInProjectContractForMultipleContractLines(projTable, projTrans.transType()))
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>