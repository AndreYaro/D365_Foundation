<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowBatchJobValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class CashFlowBatchJobValidator implements FinanceInsightsIPipelineValidator
{
    protected SysInstrumentationLogger logger;
    protected FinanceInsightsPipelineValidatorResult result;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        logger  = SysInstrumentationLoggerFactory::CreateLogger(this.GetType().FullName);
        result = FinanceInsightsPipelineValidatorResult::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchClassId</Name>
				<Source><![CDATA[
    protected abstract ClassId getBatchClassId(){}

]]></Source>
			</Method>
			<Method>
				<Name>isBatchJobCompanySpecific</Name>
				<Source><![CDATA[
    protected abstract boolean isBatchJobCompanySpecific(){}

]]></Source>
			</Method>
			<Method>
				<Name>logBatchJobDoesNotExist</Name>
				<Source><![CDATA[
    protected abstract void logBatchJobDoesNotExist(){}

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    protected abstract boolean isActive(){}

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FinanceInsightsPipelineValidatorResult validate()
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(this.GetType().FullName, funcName());

        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(activity))
        {
            if (this.isActive() && LedgerLiquidity::existForCompany())
            {
                if (!this.doesActiveBatchJobExist())
                {
                    this.logBatchJobDoesNotExist();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesActiveBatchJobExist</Name>
				<Source><![CDATA[
    private boolean doesActiveBatchJobExist()
    {
        Batch batch;
        
        if (this.isBatchJobCompanySpecific())
        {
            select firstonly batch
                where batch.ClassNumber == this.getBatchClassId()
                    && batch.Company == curExt()
                    && (batch.Status == BatchStatus::Ready
                        || batch.Status == BatchStatus::Waiting
                        || batch.Status == BatchStatus::Scheduled
                        || batch.Status == BatchStatus::Executing);
        }
        else
        {
            select firstonly batch
                where batch.ClassNumber == this.getBatchClassId()
                    && (batch.Status == BatchStatus::Ready
                        || batch.Status == BatchStatus::Waiting
                        || batch.Status == BatchStatus::Scheduled
                        || batch.Status == BatchStatus::Executing);
        }

        return batch.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>