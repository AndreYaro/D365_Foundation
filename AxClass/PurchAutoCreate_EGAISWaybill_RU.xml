<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate_EGAISWaybill_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAutoCreate_EGAISWaybill_RU extends PurchAutoCreate
{
    EGAISWaybillJour_RU     waybillJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    public void createPurchLine() 
    {
        EGAISWaybillLine_RU                     waybillLine;
        EGAISAlcoholProduction_RU               alcoholProduction;
        InventDim                               inventDim;
        EGAISWaybillSettlement_RU               settlement;
        InventDimGroupSetup                     inventDimGroupSetup;
        InventDimGroupFieldSetupEnumerator      enumerator;
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        FieldId                                 inventDimFieldId;
        InventOwner_RU                          inventOwner;

        while select waybillLine
            where waybillLine.WaybillJour == waybillJour.RecId
        {
            setPrefix(strFmt("@EGAIS:EgaisBolLineIdentity", waybillLine.Identity));

            alcoholProduction   = EGAISAlcoholProduction_RU::findRecId(waybillLine.AlcoholProduction);

            if (!alcoholProduction.ItemId)
            {
                throw error(strFmt("@EGAIS:EgaisAlcoholProductIsNotSettledWithAnItem", alcoholProduction.AlcCode), '',
                        SysInfoAction_TableField::newBufferField(alcoholProduction, fieldNum(EGAISAlcoholProduction_RU, ItemId)));
            }

            if (!alcoholProduction.Unit)
            {
                throw error(strFmt("@EGAIS:UnitIsNotSetUpForTheEgaisAlcoholProduct", alcoholProduction.AlcCode), '',
                        SysInfoAction_TableField::newBufferField(alcoholProduction, fieldNum(EGAISAlcoholProduction_RU, Unit)));
            }

            inventDim.InventSiteId      = vendTable.InventSiteId;
            inventDim.InventLocationId  = vendTable.InventLocation;
            inventDim.inventBatchId     = waybillLine.informB().InventBatchId;
            inventDim.configId          = alcoholProduction.ConfigId;
            inventDim.InventSizeId      = alcoholProduction.InventSizeId;
            inventDim.InventColorId     = alcoholProduction.InventColorId;
            inventDim.InventStyleId     = alcoholProduction.InventStyleId;
            inventDim.InventVersionId   = alcoholProduction.InventVersionId;

            inventDimGroupSetup = InventDimGroupSetup::newInventTableNoProductDimensions(InventTable::find(alcoholProduction.ItemId));
            enumerator          = inventDimGroupSetup.getFieldSetupEnumerator();

            while (enumerator.moveNext())
            {
                inventDimGroupFieldSetup = enumerator.current();
                inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

                if (   (   inventDimGroupFieldSetup.isMandatory()
                        || inventDimGroupFieldSetup.isActive())
                    && !inventDimGroupFieldSetup.isProductDimension()
                    && !inventDim.(inventDimFieldId))
                {
                    switch (inventDimFieldId)
                    {
                        case fieldNum(InventDim, InventProfileId_RU):
                            inventDim.InventProfileId_RU  = vendTable.InventProfileId_RU;
                            break;

                        case fieldNum(InventDim, InventSiteId):
                            inventDim.InventSiteId = vendTable.InventSiteId;
                            break;

                        case fieldNum(InventDim, InventLocationId):
                            inventDim.InventLocationId = vendTable.InventLocation;
                            break;

                        case fieldNum(InventDim, InventStatusId):
                            inventDim.InventStatusId = vendTable.DefaultInventStatusId;
                            break;

                        case fieldNum(InventDim, InventOwnerId_RU):
                            select count(RecId) from inventOwner
                                where inventOwner.AccountType == InventOwnerAccountType_RU::Vend
                                   && inventOwner.AccountNum  == vendTable.AccountNum;

                            if (inventOwner.RecId == 1)
                            {
                                select firstOnly InventOwnerId from inventOwner
                                    where inventOwner.AccountType == InventOwnerAccountType_RU::Vend
                                       && inventOwner.AccountNum  == vendTable.AccountNum;

                                inventDim.InventOwnerId_RU = inventOwner.InventOwnerId;
                            }
                            else
                            {
                                warning(strFmt("@SYS62948", "@GLS115561"));
                            }
                            break;
                    }
                }
            }

            purchLine.clear();
            purchLine.initValue(purchTable.PurchaseType);
            purchLine.initFromPurchTable(purchTable);
            purchLine.ItemId        = alcoholProduction.ItemId;
            purchLine.PurchUnit     = alcoholProduction.Unit;
            purchLine.InventDimId   = InventDim::findOrCreate(inventDim).InventDimId;
            purchLine.PurchQty      = waybillLine.Qty;
            purchLine.PurchPrice    = waybillLine.Price;

            purchLine.createLine(false, false, true, true, false, false);

            purchLine.PurchPrice    = waybillLine.Price;
            purchLine.LineAmount    = purchLine.calcLineAmount();
            purchLine.update();

            settlement.clear();
            settlement.WaybillLine      = waybillLine.RecId;
            settlement.InventTransId    = purchLine.InventTransId;
            settlement.Qty              = purchLine.PurchQty;
            settlement.InventDimId      = purchLine.InventDimId;
            settlement.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    public VendInvoiceAccount invoiceAccount()
    {
        return vendTable.InvoiceAccount ? vendTable.InvoiceAccount : vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(EGAISWaybillJour_RU  _waybillJour,
                       Object               _callBackClass = null)
    {
        super(_waybillJour, _callBackClass);

        waybillJour = _waybillJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchType</Name>
				<Source><![CDATA[
    public PurchaseType purchType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVend</Name>
				<Source><![CDATA[
    public void setVend()
    {
        if (this.vendAccount())
        {
            vendTable = VendTable::find(this.vendAccount());
        }

        if (!vendTable)
        {
            throw error(strFmt("@EGAIS:VendorAccountCorrespondingToTheEgaisCounteragentHa", waybillJour.shipper().RegId),
                        '',
                        SysInfoAction_TableField::newBuffer(waybillJour.shipper()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    protected VendAccount vendAccount()
    {
        return VendTable::findByPartyRecId(waybillJour.shipper().Party).AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchAutoCreate_EGAISWaybill_RU construct(EGAISWaybillJour_RU    _waybillJour   = null,
                                                     Object                 _callBackClass = null)
    {
        return new PurchAutoCreate_EGAISWaybill_RU(_waybillJour, _callBackClass);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>