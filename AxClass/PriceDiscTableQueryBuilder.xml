<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscTableQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscTableQueryBuilder</c> class is used to build ranges on a <c>PricDiscTable</c> query.
/// </summary>
class PriceDiscTableQueryBuilder
{
    SalesTable                  salesTable;
    PurchTable                  purchTable;
    SalesQuotationTable         salesQuotationTable;
    VendTable                   vendTable;

    ModuleInventCustVend        module;
    PriceDiscAccountRelation    accountRelation;
    boolean                     callerExists;
    NoYesId                     onlyShowValid;
    Query                       query;
    QueryBuildRange             rangeAccountCode;
    QueryBuildRange             blockCodeOrderedItems;
    CustTable                   custTable;
    Common                      callerRecord;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addItemDiscountGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds discount groups applicable for an item.
    /// </summary>
    /// <param name="_inventTableModule">
    /// An inventory module parameters record representing the item either on sales or purchase side.
    /// </param>
    /// <param name="_itemGroups">
    /// Sets of discount groups found.
    /// </param>
    private void addItemDiscountGroups(InventTableModule _inventTableModule, Set _itemGroups)
    {
        if (_inventTableModule && _itemGroups)
        {
            if (_inventTableModule.LineDisc && !_itemGroups.in(_inventTableModule.LineDisc))
            {
                _itemGroups.add(_inventTableModule.LineDisc);
            }

            if (_inventTableModule.MultiLineDisc && !_itemGroups.in(_inventTableModule.MultiLineDisc))
            {
                _itemGroups.add(_inventTableModule.MultiLineDisc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendInventCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends additional filtering criteria to a filter string for items.
    /// </summary>
    /// <param name="_inventSet">
    /// A set of IDs by which to filter.
    /// </param>
    /// <param name="_tableGroupAll">
    /// A type of the IDs.
    /// </param>
    /// <param name="_criteria">
    /// The input string to which to append additional criteria.
    /// </param>
    /// <returns>
    /// Filter string for items.
    /// </returns>
    private str appendInventCriteria(Set _inventSet, PriceDiscProductCodeType _tableGroupAll, str _criteria)
    {
        SetEnumerator  inventSetEnumerator;

        if (_inventSet.elements())
        {
            inventSetEnumerator = _inventSet.getEnumerator();

            while (inventSetEnumerator.moveNext())
            {
                if (_criteria)
                {
                    _criteria += ' || ';
                }

                _criteria += strFmt('((%1.%2==%3) && (%1.%4=="%5"))',
                                  query.dataSourceTable(tableNum(PriceDiscTable)).name(),
                                  fieldStr(PriceDiscTable, ItemCode),
                                  any2int(_tableGroupAll),
                                  fieldStr(PriceDiscTable, ItemRelation),
                                  queryValue(inventSetEnumerator.current()));
            }
        }

        return _criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the customer filter for trade agreements
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object that should have the filters added
    /// </param>
    private void buildCustFilter(Query _query)
    {
        str             filter = '';
        Set             groupsToAdd = new Set(Types::String);
        SetEnumerator   groupsToAddEnumerator;

        filter = strFmt('(((%1.%2==%3) && (%1.%4=="%5")) || (%1.%2==%6)',
                            _query.dataSourceTable(tableNum(PriceDiscTable)).name(),
                            fieldStr(PriceDiscTable, AccountCode),
                            any2int(PriceDiscPartyCodeType::Table),
                            fieldStr(PriceDiscTable, AccountRelation),
                            queryValue(accountRelation),
                            any2int(PriceDiscPartyCodeType::All));

        if (custTable.PriceGroup)
            groupsToAdd.add(custTable.PriceGroup);
        if (custTable.EndDisc )
            groupsToAdd.add(custTable.EndDisc);
        if (custTable.MultiLineDisc )
            groupsToAdd.add(custTable.MultiLineDisc);
        if (custTable.LineDisc )
            groupsToAdd.add(custTable.LineDisc);

        groupsToAddEnumerator = groupsToAdd.getEnumerator();
        while (groupsToAddEnumerator.moveNext())
        {
            filter += strFmt(' || ((%1.%2==%3) && (%1.%4=="%5"))',
                                _query.dataSourceTable(tableNum(PriceDiscTable)).name(),
                                fieldStr(PriceDiscTable, AccountCode),
                                any2int(PriceDiscPartyCodeType::GroupId),
                                fieldStr(PriceDiscTable, AccountRelation),
                                queryValue(groupsToAddEnumerator.current()));
        }

        filter += ')';

        rangeAccountCode.value(filter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOrderLineFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the item filter for trade agreements based on items from the order line or price query.
    /// </summary>
    private void buildOrderLineFilter()
    {
        str filter = '';

        Set itemGroupsToAdd  = new Set(Types::String);
        Set itemsToAdd = new Set(Types::String);

        SalesLine salesLine;
        PurchLine purchLine;

        // Only item based lines are considered
        if (salesTable)
        {
            while select SalesId, ItemId from salesLine
                where salesLine.SalesId == salesTable.SalesId
                    && salesLine.ItemId
            {
                if (!itemsToAdd.in(salesLine.ItemId))
                {
                    itemsToAdd.add(salesLine.ItemId);
                    this.addItemDiscountGroups(salesLine.inventTable().inventTableModuleSales(), itemGroupsToAdd);
                }
            }
        }
        else if (purchTable)
        {
            while select PurchId, ItemId from purchLine
                where purchLine.PurchId == purchTable.PurchId
                    && purchLine.IsDeleted == NoYes::No
                    && purchLine.ItemId
            {
                if (!itemsToAdd.in(purchLine.ItemId))
                {
                    itemsToAdd.add(purchLine.ItemId);

                    this.addItemDiscountGroups(purchLine.inventTable().inventTableModulePurch(), itemGroupsToAdd);
                }
            }
        }

        filter = this.appendInventCriteria(itemsToAdd, PriceDiscProductCodeType::Table,filter);

        filter = this.appendInventCriteria(itemGroupsToAdd, PriceDiscProductCodeType::GroupId, filter);

        if (filter)
        {
            filter += ' || ';
        }

        // add also filter criteria for trade agreements that apply for all items

        filter += strFmt('(%1.%2==%3)',
                  query.dataSourceTable(tableNum(PriceDiscTable)).name(),
                  fieldStr(PriceDiscTable, ItemCode),
                  any2int(PriceDiscProductCodeType::All));

        if (filter)
        {
            blockCodeOrderedItems.value(filter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildToDateFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the end date filter for trade agreements.
    /// </summary>
    /// <param name="_queryBuildDataSource">
    /// A <c>QueryBuildDataSource</c> object for the <c>PriceDiscTable</c> record.
    /// </param>
    private void buildToDateFilter(QueryBuildDataSource _queryBuildDataSource)
    {
        QueryBuildRange rangeDate;

        // ToDate should be greater than or equal to today
        rangeDate = _queryBuildDataSource.addRange(fieldNum(PriceDiscTable, ToDate));
        rangeDate.value(SysQueryRangeUtil::greaterThanDate(-1));

        // Or empty date
        rangeDate = _queryBuildDataSource.addRange(fieldNum(PriceDiscTable, ToDate));
        rangeDate.value(queryValue(dateNull()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables based on the caller record.
    /// </summary>
    public void initCaller()
    {
        callerExists = callerRecord.RecId ? true : false;

        switch (callerRecord.TableId)
        {
            case tableNum(SalesTable) :
                salesTable = callerRecord as SalesTable;
                module = ModuleInventCustVend::Cust;
                accountRelation = salesTable.CustAccount;
                break;

            case tableNum(PurchTable) :
                purchTable = callerRecord as PurchTable;
                module = ModuleInventCustVend::Vend;
                accountRelation = purchTable.OrderAccount;
                break;

            case tableNum(SalesQuotationTable) :
                salesQuotationTable = callerRecord as SalesQuotationTable;
                module = ModuleInventCustVend::Cust;
                accountRelation = salesQuotationTable.CustAccount;
                break;

            case tableNum(CustTable) :
                custTable = callerRecord as CustTable;
                module = ModuleInventCustVend::Cust;
                accountRelation = custTable.AccountNum;
                break;

            case tableNum(VendTable) :
                vendTable = callerRecord as VendTable;
                module = ModuleInventCustVend::Vend;
                accountRelation = vendTable.AccountNum;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for trade agreements.
    /// </summary>
    /// <param name="_query">
    /// The query from a list page or data set.
    /// </param>
    /// <param name="_addItemRange">
    /// A Boolean value that indicates whether the filters for items are added.
    /// </param>
    public void initializeQuery(Query _query, boolean _addItemRange = false)
    {
        QueryBuildDataSource    qbds;
        QueryBuildRange         rangeModule;
        QueryBuildRange         rangeAccountRelation;
        QueryBuildRange         rangeRelation;

        if (callerExists)
        {
            query = _query;
            qbds = _query.dataSourceTable(tableNum(PriceDiscTable));

            switch (module)
            {
                case ModuleInventCustVend::Cust:
                    qbds.clearRanges();
                    qbds.clearDynalinks();

                    rangeRelation = qbds.addRange(fieldNum(PriceDiscTable, Relation));
                    rangeRelation.status(RangeStatus::Hidden);

                    rangeRelation.value(queryValue(PriceType::PriceSales));
                    rangeRelation = qbds.addRange(fieldNum(PriceDiscTable, Relation));
                    rangeRelation.status(RangeStatus::Hidden);

                    rangeRelation.value(queryValue(PriceType::LineDiscSales));
                    rangeRelation = qbds.addRange(fieldNum(PriceDiscTable, Relation));
                    rangeRelation.status(RangeStatus::Hidden);

                    rangeRelation.value(queryValue(PriceType::MultiLineDiscSales));
                    rangeRelation = qbds.addRange(fieldNum(PriceDiscTable, Relation));
                    rangeRelation.status(RangeStatus::Hidden);
                    rangeRelation.value(queryValue(PriceType::EndDiscSales));

                    rangeAccountCode = qbds.addRange(fieldNum(PriceDiscTable, AccountCode));
                    rangeAccountCode.status(RangeStatus::Hidden);
                    this.buildCustFilter(_query);

                    if (_addItemRange)
                    {
                        blockCodeOrderedItems = qbds.addRange(fieldNum(PriceDiscTable, ItemCode));
                        blockCodeOrderedItems.status(RangeStatus::Hidden);

                        this.buildOrderLineFilter();
                    }
                break;
                default :
                    rangeModule = qbds.addRange(fieldNum(PriceDiscTable, Module));
                    rangeModule.status(RangeStatus::Hidden);
                    rangeModule.value(queryValue(module));

                    rangeAccountRelation = qbds.addRange(fieldNum(PriceDiscTable, AccountRelation));
                    rangeAccountRelation.status(RangeStatus::Hidden);
                    rangeAccountRelation.value(queryValue(accountRelation));

                    rangeAccountCode = qbds.addRange(fieldNum(PriceDiscTable, AccountCode));
                    rangeAccountCode.status(RangeStatus::Hidden);
                    rangeAccountCode.value(queryValue(PriceDiscPartyCodeType::Table));
                break;
            }

            if (onlyShowValid)
            {
                this.buildToDateFilter(qbds);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        onlyShowValid = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    public Common parmCallerRecord(Common _callerRecord = callerRecord)
    {
        callerRecord = _callerRecord;

        return callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyShowValid</Name>
				<Source><![CDATA[
    public NoYesId parmOnlyShowValid(NoYesId _onlyShowValid = onlyShowValid)
    {
        onlyShowValid = _onlyShowValid;

        return onlyShowValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PriceDiscTableQueryBuilder construct()
    {
        return new PriceDiscTableQueryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>