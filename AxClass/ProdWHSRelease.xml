<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWHSRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Responsible to executing the release of a production order to warehouse
/// </summary>
class ProdWHSRelease
{
    ProdParmRelease		        prodParmRelease;
    WHSProdBOMReleaseEnumerator enumerator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWHSProdBOMReleaseEnumerator</Name>
				<Source><![CDATA[
    public WHSProdBOMReleaseEnumerator parmWHSProdBOMReleaseEnumerator(WHSProdBOMReleaseEnumerator _enumerator = enumerator)
    {
        enumerator = _enumerator;

        return enumerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdParmRelease</Name>
				<Source><![CDATA[
    public ProdParmRelease parmProdParmRelease(ProdParmRelease _prodParmRelease = prodParmRelease)
    {
        prodParmRelease = _prodParmRelease;

        return prodParmRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPoolAndWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in production pool, and a wave is the wave template has been set up accordingly
    /// </summary>
    /// <param name="_prodId">
    /// ID of the production order for which production pool needs to be created
    /// </param>
    public void createPoolAndWave(ProdId _prodId)
    {
        WHSPoolProdBOM::createPoolAndWave(_prodId, enumerator, prodParmRelease);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves item from inventory for the production BOM line
    /// </summary>
    /// <param name="_prodBom">
    /// <c>ProdBOM</c> record for which reservation should be made
    /// </param>
    /// <remarks>
    /// If the entire quantity in the BOM line is not available to be reserved,
    /// then the available quantity is reserved; no error is thrown
    /// </remarks>
    public void reserveBOM(ProdBOM _prodBom)
    {
        InventMovement::construct(_prodBOM).updateReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ProdWHSRelease</c> class and stores an enumerator.
    /// </summary>
    /// <param name = "_enumerator">The collection of production orders and boms to release.</param>
    /// <returns>An initialized instance of the <c>ProdWHSRelease</c> class.</returns>
    public static ProdWHSRelease newFromEnumerator(WHSProdBOMReleaseEnumerator _enumerator)
    {
        ProdWHSRelease prodWHSRelease = ProdWHSRelease::construct();
        
        prodWHSRelease.parmWHSProdBOMReleaseEnumerator(_enumerator);
        
        return prodWHSRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdParmRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ProdWHSRelease</c> class and stores an enumerator.
    /// </summary>
    /// <param name = "_prodParmRelease">The <c>ProdParmRelease</c> record that holds criteria for the release.</param>
    /// <returns>An initialized instance of the <c>ProdWHSRelease</c> class.</returns>
    public static ProdWHSRelease newFromProdParmRelease(ProdParmRelease _prodParmRelease)
    {
	    OprNum fromOprNum	= _prodParmRelease.FromOprNum;
        OprNum toOprNum		= _prodParmRelease.ToOprNum;
        Query  releaseQuery	= new Query(queryStr(WHSProdBOMRelease));

        QueryBuildDataSource prodTable_ds = releaseQuery.dataSourceTable(tableNum(ProdTable));
        prodTable_ds.addRange(fieldNum(ProdTable, ProdId)).value(_prodParmRelease.ProdId);

        QueryBuildDataSource prodBOM_ds = releaseQuery.dataSourceTable(tableNum(ProdBOM));
        prodBOM_ds.addRange(fieldNum(ProdBOM, OprNum)).value(strFmt('((%1 >= %2) && ((%1 <= %3) || (%3 == 0)))',
                                                                    fieldStr(ProdBOM, OprNum),
                                                                    fromOprNum,
                                                                    toOprNum));
        
        WHSProdBOMReleaseQueryEnumerator enumerator = WHSProdBOMReleaseQueryEnumerator::newFromQuery(releaseQuery);
        enumerator.parmProdOrderLoopProdId(_prodParmRelease.ProdId);

        ProdWHSRelease prodWHSRelease = ProdWHSRelease::construct();        
        prodWHSRelease.parmWHSProdBOMReleaseEnumerator(enumerator);
        prodWHSRelease.parmProdParmRelease(_prodParmRelease);
        
        return prodWHSRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWHSProdBOMReleaseEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default production enumerator for a specified production order.
    /// </summary>
    /// <param name = "_prodId">The production ID the enumerator will be created for.</param>
    /// <returns>An enumerator for the <c>WHSProdBOMRelease</c> query with the given production ID as a range.</returns>
    public static WHSProdBOMReleaseQueryEnumerator defaultWHSProdBOMReleaseEnumerator(ProdId _prodId)
    {
        return WHSProdBOMReleaseQueryEnumerator::newFromProdId(_prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>ProdWHSRelease</c> class using a given production ID.
    /// </summary>
    /// <param name = "_prodId">The production ID to release.</param>
    /// <returns>An initialized instance of the <c>ProdWHSRelease</c> class.</returns>
    public static ProdWHSRelease newFromProdId(ProdId _prodId)
    {
        ProdWHSRelease prodWHSRelease = ProdWHSRelease::construct();
         
        WHSProdBOMReleaseQueryEnumerator enumerator = ProdWHSRelease::defaultWHSProdBOMReleaseEnumerator(_prodId);
        enumerator.parmProdOrderLoopProdId(_prodId);
        
        prodWHSRelease.parmWHSProdBOMReleaseEnumerator(enumerator);
        
        return prodWHSRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFullReservation</Name>
				<Source><![CDATA[
    protected boolean requireFullReservation(ProdTable _prodTable, ProdBOM _prodBom)
    {
        return (_prodTable.ProdWHSReleasePolicy == ProdWHSReleasePolicy::RequireFullReservation ||
               (_prodTable.ProdWHSReleasePolicy == ProdWHSReleasePolicy::UseProdBomValue && _prodBom.BomWHSReleasePolicy == BomWHSReleasePolicy::RequireFullReservation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsReleaseSingleOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases a production order to warehouse
    /// </summary>
    /// <param name="_prodTable">
    /// <c>ProdTable</c> record that should be released to warehouse
    /// </param>
    /// <param name="_whsReleaseOnly">
    /// Represents whether the release to warehouse is done independently
    /// or as part of production order release process
    /// </param>
    /// <param name="_fromRTWJob">
    /// true if this method is called from automatic release to warehouse job; otherwise, false
    /// </param>
    public void whsReleaseSingleOrder(
        ProdTable   _prodTable, 
        boolean     _whsReleaseOnly = false,
        boolean     _fromRTWJob     = false)
    {
        WHSInventEnabled whsInventEnabled;
        InventDim        inventDim;
        InventLocation   inventLocation;
        boolean          fullyReserved = true;
        boolean          whsItemPresent = false;

        if (!_prodTable.isBatchBalancingEnabled())
        {
            try
            {
                ttsBegin;

                if (enumerator == null)
                {
                    enumerator = ProdWHSRelease::defaultWHSProdBOMReleaseEnumerator(_prodTable.ProdId);
                }
                else
                {
                    enumerator.restartFromFirstProdBOMLineInProdOrder();
                }

                while (enumerator.nextProdBOMInOrder())
                {
                    ProdBOM prodBom = enumerator.currentProdBOM();

                    whsItemPresent = true;

                    if (this.canReserveBom(_fromRTWJob, prodBom))
                    {
                        this.reserveBOM(prodBom);
                    }

                    if (this.requireFullReservation(_prodTable, prodBom))
                    {
                        var inventTransIdSum = prodBom.getInventTransIdSum();
                        var qtyReserved = -inventTransIdSum.reservPhysical();
                        var qtyPicked   = -inventTransIdSum.picked();

                        boolean itemFullyReserved = (qtyReserved + qtyPicked == prodBom.RemainInventPhysical);

                        if (!itemFullyReserved)
                        {
                            warning(strFmt("@SYS4010249",prodBom.ItemId));
                        }
                        fullyReserved = fullyReserved && itemFullyReserved;
                    }
                }

                if (!whsItemPresent)
                {
                    if (_whsReleaseOnly)
                    {
                        warning("@SYS4010246");
                    }
                }
                else
                {
                    if (_prodTable.status().isBefore(ProdStatus::Released))
                    {
                        throw error("@SYS4010245");
                    }

                    if (!_prodTable.status().isBefore(ProdStatus::Completed))
                    {
                        throw error(strFmt("@SYS4010247",ProdStatus::Completed));
                    }

                    if (!fullyReserved)
                    {
                        throw error("@SYS4010248");
                    }

                    this.createPoolAndWave(_prodTable.ProdId);
                }

                ttsCommit;
            }
            catch(Exception::Error)
            {
                exceptionTextFallThrough();
            }
        }
        else if (ProdBOM::hasWHSItem(_prodTable.ProdId))
        {
            // Add infolog redirecting user to where release should take place. No error is thrown in case multiple orders are being released.
            info(strFmt("@WAX:BatchBalancingEnabled", _prodTable.ProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReserveBom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a production BOM can be reserved.
    /// </summary>
    /// <param name="_fromRTWJob">
    /// true if this method is called from automatic release to warehouse job; otherwise, false
    /// </param>
    /// <param name = "_prodBOM">The production BOM reference</param>
    /// <returns>true, if a production BOM can be reserved; otherwise, false.</returns>
    protected boolean canReserveBom(boolean _fromRTWJob, ProdBOM _prodBOM)
    {
        return (_fromRTWJob
             || _prodBOM.Reservation == ProdReservation::Estimation
             || _prodBOM.Reservation == ProdReservation::Scheduling
             || _prodBOM.Reservation == ProdReservation::Release);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>ProdWHSRelease</c> class.
    /// </summary>
    /// <returns>
    ///     An initialized instance of the <c>ProdWHSRelease</c> class.
    /// </returns>
    /// <remarks>
    ///     This method runs exclusively on the server tier.
    /// </remarks>
    public static ProdWHSRelease construct()
    {
        return new ProdWHSRelease();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@WAX1884";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdOrdersFromDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the production orders from the datasource and returns the RecID's in a container
    /// </summary>
    /// <param name="_prodTable">
    /// Buffer of prodTable records
    /// </param>
    /// <returns>
    /// Container with RecID's of the records in buffer
    /// </returns>
    public static container getProdOrdersFromDataSource(ProdTable _prodTable)
    {
        container prodTableContainer;

        if (_prodTable)
        {
            setPrefix(ProdWHSRelease::description());
            FormDataSource orderDataSource = FormDataUtil::getFormDataSource(_prodTable);

            if (orderDataSource)
            {
                ProdTable iterateProdTable = orderDataSource.getFirst(true);

                if (!iterateProdTable)
                {
                    iterateProdTable = _prodTable;
                }

                while (iterateProdTable)
                {
                    prodTableContainer += iterateProdTable.RecId;
                    iterateProdTable = orderDataSource.getNext();
                }
            }
        }

        return prodTableContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdWHSRelease::whsReleaseOrders(ProdWHSRelease::getProdOrdersFromDataSource(_args.record()), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsReleaseOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases selected production orders to warehouse
    /// </summary>
    /// <param name="_prodTableContainer">
    /// container with RecIds of <c>ProdTable</c> records to be deleted
    /// </param>
    /// <param name="_whsReleaseOnly">
    /// Specifies whether this an indepenedent release to warehouse,
    /// or is part of a production order release
    /// </param>
    public static void whsReleaseOrders(container _prodTableContainer, boolean _whsReleaseOnly = false)
    {
        ProdTable iterateProdTable;
        int       counter = 1;

        setPrefix(ProdWHSRelease::description());

        while (counter <= conLen(_prodTableContainer))
        {
            RefRecId recId = conPeek(_prodTableContainer, counter);
            select firstOnly * from iterateProdTable
                where iterateProdTable.RecId == recId;

            setPrefix(#PreFixField(iterateProdTable,ProdId));
            ProdWHSRelease::newFromProdId(iterateProdTable.ProdId).whsReleaseSingleOrder(iterateProdTable, _whsReleaseOnly);
            counter++;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>