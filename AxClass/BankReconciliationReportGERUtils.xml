<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationReportGERUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the util class for updating data in temp tables for printing bank reconciliation by GER frame.
/// </summary>
internal final class BankReconciliationReportGERUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the booking date of <c>BankReconciliationElectronicReportStatementTmp</c> with the date in the company time zone.
    /// </summary>
    /// <param name = "_tmpStatement">The temporary table storing the bank statement information for report printing.</param>
    internal static void updateBookingDate(BankReconciliationElectronicReportStatementTmp _tmpStatement)
    {
        BankReconciliationBookingDateUpdateTmp bookingDateUpdate;
        BankStmtISOReportEntry reportEntry;

        RecordInsertList insertList = new RecordInsertList(tableNum(BankReconciliationBookingDateUpdateTmp), true, true, true, true, true, bookingDateUpdate);

        while select BookingDateTime from reportEntry
            join BookingDate from _tmpStatement
               where reportEntry.RecId == _tmpStatement.BankStmtISOReportEntry
        {
            date utcBookingDate = _tmpStatement.BookingDate;
            date companyTimezoneBookingDate = reportEntry.getBookingDate();

            if (utcBookingDate != companyTimezoneBookingDate)
            {
                bookingDateUpdate.clear();
                bookingDateUpdate.BankStmtISOReportEntry = reportEntry.RecId;
                bookingDateUpdate.BookingDate = companyTimezoneBookingDate;

                insertList.add(bookingDateUpdate);
            }
        }

        insertList.insertDatabase();

        update_recordset _tmpStatement
            setting BookingDate = bookingDateUpdate.BookingDate
            join BookingDate from bookingDateUpdate
                where _tmpStatement.BankStmtISOReportEntry == bookingDateUpdate.BankStmtISOReportEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankClearingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the bank clearing status info of <c>BankReconciliationElectronicReportDocumentTmp</c>.
    /// </summary>
    /// <param name = "_tmpDocument">The temporary table storing the company transactions information for report printing.</param>
    internal static void updateBankClearingInfo(BankReconciliationElectronicReportDocumentTmp _tmpDocument)
    {
        /// An extra NoYes field IsBridgingCleared is added to the document temp table, marking Yes for bank document lines whose document type
        /// is BankClearing and bridging status is cleared. When calculating company ending balance, the correction amount of these lines will be included.
        BankBridgingTrans bankBridgingTrans;
        LedgerJournalTrans ledgerJournalTransBridged;
        BankDocumentTable bankDocumentTable;
        update_recordset _tmpDocument
            setting IsBridgingCleared = NoYes::Yes
                where _tmpDocument.DocumentType == BankDocumentBookType::BankClearing
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == _tmpDocument.BankDocumentTableView
                    && bankDocumentTable.SourceRelationType == tableNum(LedgerJournalTrans)
            join RecId from ledgerJournalTransBridged
                where ledgerJournalTransBridged.RecId == bankDocumentTable.SourceRecId
            join RecId from bankBridgingTrans
                where bankBridgingTrans.BridgedLedgerJournalTransRecId == ledgerJournalTransBridged.RecId
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Cleared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDateForPDC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction date with maturity date of <c>BankReconciliationElectronicReportDocumentTmp</c> for PDC transactions,
    /// and exclude those whose transaction date is later than cut off date.
    /// </summary>
    /// <param name = "_tmpDocument">The temporary table storing the company transactions information for report printing</param>
    /// <param name = "reconciliationHeader">The bank reconciliation header for print.</param>
    internal static void updateTransDateForPDC(BankReconciliationElectronicReportDocumentTmp _tmpDocument, BankReconciliationHeader reconciliationHeader)
    {
        BankDocumentTable bankDocumentTable;
        BankChequeTable bankChequeTable;
        CustVendPDCRegister custVendPDCRegister;

        update_recordset _tmpDocument
            setting TransactionDate = custVendPDCRegister.MaturityDate
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == _tmpDocument.BankDocumentTableView
                    && bankDocumentTable.SourceRelationType == tableNum(BankChequeTable)
            join RecId from bankChequeTable
                where bankChequeTable.RecId == bankDocumentTable.SourceRecId
            join MaturityDate from custVendPDCRegister
                where custVendPDCRegister.LedgerJournalTrans == bankChequeTable.SourceRecId
                    && bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans)
                    && custVendPDCRegister.MaturityDate != dateNull();

        delete_from _tmpDocument
            where _tmpDocument.TransactionDate > reconciliationHeader.CutOffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDateForGenerateVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the transaction date for generate voucher with the accounting date of bank statement.
    /// </summary>
    /// <param name = "_tmpDocument">The temporary table storing the company transactions information for report printing</param>
    internal static void updateTransDateForGenerateVoucher(BankReconciliationElectronicReportDocumentTmp _tmpDocument)
    {
        BankDocumentTable bankDocumentTable;
        BankStmtISOReportEntry bankStmtISOReportEntry;

        update_recordset _tmpDocument
            setting TransactionDate = bankStmtISOReportEntry.AccountingDate
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == _tmpDocument.BankDocumentTableView
                    && bankDocumentTable.BankDocumentBookType == BankDocumentBookType::BankStatement
                    && bankDocumentTable.SourceRelationType == tableNum(BankStmtISOReportEntry)
            join AccountingDate from bankStmtISOReportEntry
                where bankStmtISOReportEntry.RecId == bankDocumentTable.SourceRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>