<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTrans_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(MarkupTrans))]
public final class MarkupTrans_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>discardTransactionForFree_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transaction must be discarded or not.
    /// </summary>
    /// <returns>true if the transaction must be discarded, otherwise false.</returns>
    public boolean discardTransactionForFree_IT()
    {
        boolean excludeLine;

        if (this.SkipInFreeInvoices_IT && FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            switch(this.TransTableId)
            {
                case tablenum(SalesTable):
                    SalesTable salesTable = SalesTable::findRecId (this.TransRecId);
                    excludeLine = SalesTable::invoiceForFree_IT(salesTable);
                    break;
    
                case tablenum(SalesLine):
                    SalesLine salesLine = salesLine::findRecId(this.TransRecId);
                    excludeLine = salesLine.GoodsForFree_IT;
                    break;
    
                case tablenum(SalesParmTable):
                    SalesParmTable salesParmTable = SalesParmTable::findRecId_W(this.TransRecId);
                    excludeLine = SalesTable::invoiceForFree_IT(salesParmTable.salesTable());
                    break;
    
                case tablenum(salesParmLine):
                    SalesParmLine salesParmLine = SalesParmLine::findRecId(this.TransRecId);
                    excludeLine = salesParmLine.salesLine().GoodsForFree_IT;
                    break;
            }
        }
    
        return (excludeLine && this.SkipInFreeInvoices_IT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHTOnChargesEnabled</Name>
				<Source><![CDATA[
    private boolean isWHTOnChargesEnabled()
    {
        return LedgerParameters::find().EnableWHTOnCharges == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    public void initFromVendInvoiceInfoSubTable(VendInvoiceInfoSubTable _vendInvoiceInfoSubTable)
    {
        next initFromVendInvoiceInfoSubTable(_vendInvoiceInfoSubTable);

        if (!this.TaxWithholdGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdGroup = _vendInvoiceInfoSubTable.purchTable().vendTable_InvoiceAccount().TaxWithholdGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    public void initFromVendInvoiceInfoLine(VendInvoiceInfoLine _vendInvoiceInfoLine)
    {
        next initFromVendInvoiceInfoLine(_vendInvoiceInfoLine);

        if (!this.TaxWithholdGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdGroup = _vendInvoiceInfoLine.purchLine().vendTable_InvoiceAccount().TaxWithholdGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTable</Name>
				<Source><![CDATA[
    public void initFromMarkupTable(MarkupTable _markupTable)
    {
        next initFromMarkupTable(_markupTable);

        if (FeatureStateProvider::isFeatureEnabled(SeparateInvoiceOnGoodsDeliveredForFreeFeature::instance()))
        {
            this.SkipInFreeInvoices_IT = _markuptable.SkipInFreeInvoices_IT;
        }

        if (!this.TaxWithholdItemGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdItemGroup = _markupTable.TaxWithholdItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMarkupTrans</Name>
				<Source><![CDATA[
    public void initFromMarkupTrans(MarkupTrans _source)
    {
        next initFromMarkupTrans(_source);

        if (this.isWHTOnChargesEnabled())
        {
            if (!this.TaxWithholdGroup)
            {
                this.TaxWithholdGroup = _source.TaxWithholdGroup;
            }

            if (!this.TaxWithholdItemGroup)
            {
                this.TaxWithholdItemGroup = _source.TaxWithholdItemGroup;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    public void initFromSalesTable(SalesTable _salesTable)
    {
        next initFromSalesTable(_salesTable);

        if (!this.TaxWithholdGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdGroup = _salesTable.custTable_InvoiceAccount().TaxWithholdGroup_TH;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    public void initFromSalesLine(SalesLine _salesLine)
    {
        next initFromSalesLine(_salesLine);

        if (!this.TaxWithholdGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdGroup = _salesLine.custTable_InvoiceAccount().TaxWithholdGroup_TH;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    public void initFromPurchTable(PurchTable _purchTable)
    {
        next initFromPurchTable(_purchTable);

        if (!this.TaxWithholdGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdGroup = _purchTable.vendTable_InvoiceAccount().TaxWithholdGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    public void initFromPurchLine(PurchLine _purchLine)
    {
        next initFromPurchLine(_purchLine);

        if (!this.TaxWithholdGroup && this.isWHTOnChargesEnabled())
        {
            this.TaxWithholdGroup = _purchLine.vendTable_InvoiceAccount().TaxWithholdGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUsualExporterTaxGroup_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set Usual exporter group from Customer properties for <c>MarkupTrans</c> when there is active intent letter for Customer.
    /// </summary>
    /// <param name = "_markupTrans"><c>MarkupTrans</c> for wich <c>TaxGroup</c> are updated.</param>
    /// <param name = "_deliveryDate"><c>TransDate</c> transaction date.</param>
    /// <param name = "_invoiceAccount"><c>CustAccount</c> to define <c>TaxGroup</c>.</param>
    internal static void updateUsualExporterTaxGroup_IT(MarkupTrans _markupTrans, TransDate _deliveryDate, CustAccount _invoiceAccount)
    {

        TaxGroup usExpExemptionTaxGroup = CustParameters::find().UsualExporterExemptionTaxGroup_IT;

        if (CustParameters::find().AutomaticIntentLetterAssignment_IT && usExpExemptionTaxGroup)
        {
            TransDate refDate = _deliveryDate ? _deliveryDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::findActiveIntentLetterByType(
                _invoiceAccount,
                IntentLetterType_IT::Amount,
                refDate);

            if (custIntentLetter)
            {
                _markupTrans.setTaxGroup_IT(usExpExemptionTaxGroup);
                _markupTrans.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup_IT</Name>
				<Source><![CDATA[
    private void setTaxGroup_IT(TaxGroup _taxGroup)
    {
        this.TaxGroup = _taxGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>