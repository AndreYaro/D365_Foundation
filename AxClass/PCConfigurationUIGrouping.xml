<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcConfigurationUIGrouping</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PCConfigurationUIGrouping</c> class is a helper class for the
///    <c>PCConfigurationUIGrouping</c> form.
/// </summary>
public class PcConfigurationUIGrouping
{
    private static boolean isPCSubComponentSysDaRefactoringFlightEnabled = PCSubComponentSysDaRefactoringFlight::instance().isEnabled();
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCConfigurationUIGrouping construct()
    {
        return new PCConfigurationUIGrouping();
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeUIControlSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that the records of the UI controls exists for each component in the model.
    /// </summary>
    /// <param name="_subComponent">
    ///    A reference to a sub-component.
    /// </param>
    /// <param name="_parentComponentControl">
    ///    A reference to the parent configuration control.
    /// </param>
    /// <param name="_configurationControl">
    ///    A reference to a configuration control.
    /// </param>
    /// <param name="_order">
    ///    The new order that is assigned to the control.
    /// </param>
    public static void synchronizeUIControlSubTree( PCSubComponent  _subComponent,
                                                    RefRecId        _parentComponentControl,
                                                    RefRecId        _configurationControl,
                                                    int             _order)
    {
        PCSubComponent      subComponent;
        PCComponentControl  componentControl;
        int                 childOrderNumber = 1;
        componentControl = PCComponentControl::findOrCreateFromModelAndSubComponent(_configurationControl, _subComponent.RecId, _parentComponentControl, _order);

        if (isPCSubComponentSysDaRefactoringFlightEnabled)
        {
            var searchObject = new SysDaSearchObject(PCConfigurationUIGrouping::getSubComponentQueryForParentComponentClass(subComponent, _subComponent.ChildComponentClass));
            var searchStatement = new SysDaSearchStatement();

            while (searchStatement.findNext(searchObject))
            {
                PCConfigurationUIGrouping::synchronizeUIControlSubTree(subComponent, componentControl.RecId, _configurationControl, childOrderNumber);
                childOrderNumber++;
            }
        }
        else
        {
            while select subComponent
                where   subComponent.ParentComponentClass   == _subComponent.ChildComponentClass
            {
                PCConfigurationUIGrouping::synchronizeUIControlSubTree(subComponent, componentControl.RecId, _configurationControl, childOrderNumber);
                childOrderNumber++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeUIControlWithModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that the user interface controls records exist for each component in the model.
    /// </summary>
    /// <param name="_model">
    ///    A product configuration model.
    /// </param>
    public static void synchronizeUIControlWithModel(PCProductConfigurationModel _model)
    {
        PCConfigurationControl  configurationControl;
        PCSubComponent          subComponent;
        PCComponentControl      componentControl;
        int                     childOrderNumber = 1;
        configurationControl = PCConfigurationControl::findByProductConfigurationModel(_model.RecId);

        ttsbegin;
        if (configurationControl.RecId == 0)
        {
            configurationControl.ConfigurationModel = _model.RecId;
            configurationControl.insert();
        }

        componentControl = PCComponentControl::findOrCreateFromModelAndRootComponent(configurationControl.RecId, _model.RootComponentClass);

        if (isPCSubComponentSysDaRefactoringFlightEnabled)
        {
            var searchObject = new SysDaSearchObject(PCConfigurationUIGrouping::getSubComponentQueryForParentComponentClass(subComponent, _model.RootComponentClass));
            var searchStatement = new SysDaSearchStatement();

            while (searchStatement.findNext(searchObject))
            {
                PCConfigurationUIGrouping::synchronizeUIControlSubTree(subComponent, componentControl.RecId, configurationControl.RecId, childOrderNumber);
                childOrderNumber++;
            }
        }
        else
        {
            while select subComponent
            where    subComponent.ParentComponentClass   == _model.RootComponentClass
            {
                PCConfigurationUIGrouping::synchronizeUIControlSubTree(subComponent, componentControl.RecId, configurationControl.RecId, childOrderNumber);
                childOrderNumber++;
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubComponentQueryForParentComponentClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object for the sub-components of a parent component class.
    /// </summary>
    /// <param name="_subComponentQueryBuffer">The table buffer that will hold the result.</param>
    /// <param name="_parentComponentClass">The record ID of the parent component class.</param>
    /// <returns>
    /// The query object.
    /// </returns>
    protected static SysDaQueryObject getSubComponentQueryForParentComponentClass(PCSubComponent _subComponentQueryBuffer, RefRecId _parentComponentClassRecId)
    {
        /*
        select _subComponentQueryBuffer
            where _subComponentQueryBuffer.ParentComponentClass == _parentComponentClassRecId
        */

        var queryObject = new SysDaQueryObject(_subComponentQueryBuffer);

        queryObject.WhereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(_subComponentQueryBuffer, fieldStr(PCSubComponent, ParentComponentClass)),
            new SysDaValueExpression(_parentComponentClassRecId)));
        
        return queryObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>