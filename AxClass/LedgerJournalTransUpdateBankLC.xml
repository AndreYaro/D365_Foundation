<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransUpdateBankLC</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalTransUpdateBankLC</c> class is a subclass of the <c>LedgerJournalTransUpdateVend</c> class.
///    This class controls posted actions after margin payment.
/// </summary>
class LedgerJournalTransUpdateBankLC extends LedgerJournalTransUpdateVend
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBankVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the bank voucher based on the posted margin.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to pass the transaction data.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    The <c>GeneralJournalAccountEntry</c> record to pass the transaction data.
    /// </param>
    /// <param name="_bankLCImportMargin">
    ///    The posted margin.
    /// </param>
    /// <param name="_marginAmountCur">
    ///    The margin amount.
    /// </param>
    private void addBankVoucher(
        LedgerVoucher               _ledgerVoucher,
        LedgerJournalTrans          _ledgerJournalTrans,
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        BankLCImportMargin          _bankLCImportMargin,
        BankLCImportMarginAmountCur _marginAmountCur)
    {
        BankVoucher bankVoucher = this.initBankVoucher(_ledgerJournalTrans, _bankLCImportMargin, _generalJournalAccountEntry, _marginAmountCur);
       
        bankVoucher.post(_ledgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Posts the ledger voucher based on the posted margin.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    ///    The ledger voucher object.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to pass the transaction data.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    The <c>GeneralJournalAccountEntry</c> record to pass the transaction data.
    /// </param>
    /// <param name="_exchangeRateHelper">
    ///    The exchange rate helper instance to help calculate exchange rate.
    /// </param>
    /// <param name="_marginAmountCur">
    ///    The posted margin amount.
    /// </param>
    private void addLedgerVoucher(
        LedgerVoucher               _ledgerVoucher,
        LedgerVoucherObject         _ledgerVoucherObject,
        LedgerJournalTrans          _ledgerJournalTrans,
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        CurrencyExchangeHelper      _exchangeRateHelper,
        BankLCImportMarginAmountCur _marginAmountCur)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject;

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                     _ledgerVoucherObject,
                                     LedgerPostingType::LedgerJournal,
                                     _generalJournalAccountEntry.LedgerDimension,
                                     _generalJournalAccountEntry.TransactionCurrencyCode,
                                     _marginAmountCur,
                                     _exchangeRateHelper);
        ledgerVoucherTransObject.parmSourceTableId(_ledgerJournalTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(_ledgerJournalTrans.RecId);
        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initializes data for a new <c>BankVoucher</c> class instance.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to pass the transaction data.
    /// </param>
    /// <param name="_bankLCImportMargin">
    ///  The posted margin.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    The <c>GeneralJournalAccountEntry</c> record to pass the transaction data.
    /// </param>
    /// <param name="_marginAmountCur">
    ///    The posted margin amount.
    /// </param>
    /// <returns>
    ///    The new <c>BankVoucher</c> class instance.
    /// </returns>
    protected BankVoucher initBankVoucher(LedgerJournalTrans _ledgerJournalTrans,
        BankLCImportMargin _bankLCImportMargin, 
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        BankLCImportMarginAmountCur _marginAmountCur)
    {
        BankLCImport bankLCImport = BankLCImport::find(_bankLCImportMargin.BankLCImport);

        BankVoucher bankVoucher = BankVoucher::newBankVoucher(
                                    _marginAmountCur,
                                    _ledgerJournalTrans.CurrencyCode,
                                    bankLCImport.getBankAccount(),
                                    '',
                                    '',
                                    '',
                                    // Letter of Credit %1 margin transaction %2 reduced.
                                    strFmt(
                                    "@SYS332235",
                                    bankLCImport.BankLCNumber,
                                    _bankLCImportMargin.JournalNum + ',' + _bankLCImportMargin.Voucher),
                                    LedgerPostingType::Bank,
                                    0,
                                    _generalJournalAccountEntry.LedgerDimension,
                                    '',
                                    _ledgerJournalTrans.ExchRate,
                                    _ledgerJournalTrans.ExchRateSecond,
                                    Currency::noYes2UnknownNoYes(_ledgerJournalTrans.Triangulation),
                                    _ledgerJournalTrans.ReportingCurrencyExchRate,
                                    _ledgerJournalTrans.ReportingCurrencyExchRateSecondary);

        bankVoucher.parmTransDate(_ledgerJournalTrans.TransDate);
        bankVoucher.parmReasonRefRecID(_ledgerJournalTrans.ReasonRefRecID);
        bankVoucher.parmJournalType(_ledgerJournalTrans.ledgerJournalTable().JournalType);
        bankVoucher.parmReconcile(_ledgerJournalTrans.BankReconcileAccountAtPost);
        bankVoucher.parmSourceTableId(_bankLCImportMargin.TableId);
        bankVoucher.parmSourceRecId(_bankLCImportMargin.RecId);
        bankVoucher.parmFinTag(_ledgerJournalTrans.FinTag);

        return bankVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeRateHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CurrencyExchangeHelper</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The ledger journal trans record.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    ///    The ledger voucher object.
    /// </param>
    /// <returns>
    ///    The new <c>CurrencyExchangeHelper</c> object.
    /// </returns>
    private CurrencyExchangeHelper getExchangeRateHelper(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerVoucherObject _ledgerVoucherObject)
    {
        CurrencyExchangeHelper exchangeRateHelper;

        exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
        exchangeRateHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);
        return exchangeRateHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseMarginTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the margin transaction after it is paid back.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher.
    /// </param>
    /// <param name="_ledgerVoucherObject">
    ///    The ledger voucher object.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record to pass the trans data.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    ///    The <c>GeneralJournalAccountEntry</c> record to pass the trans data.
    /// </param>
    /// <param name="_bankLCImportMargin">
    ///    The posted margin record.
    /// </param>
    /// <param name="_marginAmountCur">
    ///    The posted margin amount.
    /// </param>
    /// <param name="_exchangeRateHelper">
    ///    The exchange rate helper instance to help calculate exchange rate.
    /// </param>
    private void reverseMarginTrans(
        LedgerVoucher               _ledgerVoucher,
        LedgerVoucherObject         _ledgerVoucherObject,
        LedgerJournalTrans          _ledgerJournalTrans,
        GeneralJournalAccountEntry  _generalJournalAccountEntry,
        BankLCImportMargin          _bankLCImportMargin,
        BankLCImportMarginAmountCur _marginAmountCur,
        CurrencyExchangeHelper      _exchangeRateHelper)
    {
        if (_generalJournalAccountEntry.PostingType == LedgerPostingType::Bank)
        {
            this.addBankVoucher(
                _ledgerVoucher,
                _ledgerJournalTrans,
                _generalJournalAccountEntry,
                _bankLCImportMargin,
                _marginAmountCur);
        }
        else
        {
            this.addLedgerVoucher(
                _ledgerVoucher,
                _ledgerVoucherObject,
                _ledgerJournalTrans,
                _generalJournalAccountEntry,
                _exchangeRateHelper,
                _marginAmountCur);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates bank letter of credit transaction and reverse the posted margin.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The <c>LedgerVoucher</c> instance.
    /// </param>
    /// <param name="_posting">
    ///    The ledger posting type.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///    The <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_originalLedgerJournalTrans">
    ///    The original <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_interCompany">
    ///    The parameter whether it is inter company.
    /// </param>
    /// <param name="_reversalsMayExist">
    ///    true if reversals might exist for the journal, otherwise false. This is a performance optimization.
    /// </param>
    /// <param name="_isDueToDueFromAccount">
    ///    true if this is a due to or due from account; otherwise, false.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_interCompany" /> parameter is set to true.
    /// </exception>
    public void updateNow(
        LedgerVoucher _ledgerVoucher,
        LedgerPostingType _posting,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _interCompany = false,
        boolean _reversalsMayExist = true,
        boolean _isDueToDueFromAccount =  false
        )
    {
        LedgerVoucherObject             ledgerVoucherObject;
        BankLCImportMarginAllocation    bankLCImportMarginAllocation;
        BankLCImportMargin              bankLCImportMargin;
        CurrencyExchangeHelper          exchangeRateHelper;

        GeneralJournalEntry                 generalJournalEntryLocal;
        GeneralJournalAccountEntry          generalJournalAccountEntryLocal;
        LedgerEntryJournal                  ledgerEntryJournalLocal;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntryLocal;

        if (_interCompany)
        {
            throw error (Error::wrongUseOfFunction(funcName()));
        }

        super(
            _ledgerVoucher,
            _posting,
            _ledgerJournalTrans,
            _originalLedgerJournalTrans,
            _interCompany);

        ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
        exchangeRateHelper =  this.getExchangeRateHelper(_ledgerJournalTrans, ledgerVoucherObject);

        while select bankLCImportMargin
            join AllocatedAmountCur from bankLCImportMarginAllocation
                where bankLCImportMarginAllocation.BankLCImportMargin == bankLCImportMargin.RecId
                    && bankLCImportMarginAllocation.Settled == NoYes::No
                    && bankLCImportMarginAllocation.BankLCImportLine == _ledgerJournalTrans.getLedgerJournalTransBankLC().BankLCLine
        {
            while select ledgerEntryJournalLocal
                where ledgerEntryJournalLocal.JournalNumber == bankLCImportMargin.JournalNum
                join RecId from generalJournalEntryLocal
                    where ledgerEntryJournalLocal.RecId == generalJournalEntryLocal.LedgerEntryJournal
                        && generalJournalEntryLocal.AccountingDate == bankLCImportMargin.PostedDate
                join generalJournalAccountEntryLocal
                    where generalJournalAccountEntryLocal.GeneralJournalEntry == generalJournalEntryLocal.RecId
                exists join subledgerVoucherGeneralJournalEntryLocal
                    where subledgerVoucherGeneralJournalEntryLocal.GeneralJournalEntry == generalJournalEntryLocal.RecId
                        && subledgerVoucherGeneralJournalEntryLocal.Voucher == bankLCImportMargin.Voucher
            {
                if (generalJournalAccountEntryLocal.IsCredit == NoYes::No)
                {
                    this.reverseMarginTrans(
                        _ledgerVoucher,
                        ledgerVoucherObject,
                        _ledgerJournalTrans,
                        generalJournalAccountEntryLocal,
                        bankLCImportMargin,
                        -bankLCImportMarginAllocation.AllocatedAmountCur,
                        exchangeRateHelper);
                }
                else
                {
                    this.reverseMarginTrans(
                        _ledgerVoucher,
                        ledgerVoucherObject,
                        _ledgerJournalTrans,
                        generalJournalAccountEntryLocal,
                        bankLCImportMargin,
                        bankLCImportMarginAllocation.AllocatedAmountCur,
                        exchangeRateHelper);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>