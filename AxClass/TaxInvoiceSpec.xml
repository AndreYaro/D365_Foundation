<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInvoiceSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxInvoiceSpec</c> class is used by invoice reports to hold and return several variables.
/// </summary>
/// <remarks>
///    This class is derived from the <c>TaxSpec</c> class.
/// </remarks>
final class TaxInvoiceSpec extends TaxSpec
{
    TaxTrans    taxTrans;
    Voucher     voucher;
    TransDate   taxDate;
    recId       ledgerJournalTransrecId;
    boolean     isTaxInvoice;

    InventTransId       transid;
    InvoiceId           invoiceid;
    RetailCustInvoiceJour  rboCustInvoiceJour;
    // <GEELT><GEEHU>
    #ISOCountryRegionCodes
    // </GEEHU></GEELT>
    // <GEELT>
    boolean         countryRegion_LT;
    // </GEELT>
    // <GEEHU>
    boolean         countryRegion_HU;

    private boolean forceTaxRateAsWriteSelection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>forceTaxRateAsWriteSelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the class to act as if <c>TaxWriteSelection</c> values
    /// in corresponding <c>TaxTable</c> records were <c>TaxRate</c>.
    /// </summary>
    /// <param name = "_value">Behaviour switch flag.</param>
    internal void forceTaxRateAsWriteSelection(boolean _value = true)
    {
        forceTaxRateAsWriteSelection = _value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteSelection</Name>
				<Source><![CDATA[
    private TaxWriteSelection getTaxWriteSelection(TaxCode _taxCode)
    {
        return forceTaxRateAsWriteSelection
            ? TaxWriteSelection::TaxRate
            : TaxTable::find(_taxCode).TaxWriteSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxSpecCodeSet</Name>
				<Source><![CDATA[
    private Set initTaxSpecCodeSet()
    {
        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables in the <c>TaxInvoiceSpec</c> class.
    /// </summary>
    /// <param name="_voucher">
    /// A <c>voucher</c> value.
    /// </param>
    /// <param name="_date">
    /// A <c>date</c> value
    /// </param>
    /// <param name="_ledgerJournalTransRecID">
    /// A <c>ledgerJournalTransrecID</c> value.
    /// </param>
    /// <param name="_isTaxInvoice">
    /// A <c>isTaxInvoice</c> value.
    /// </param>
    /// <param name="_invoiceid">
    /// A <c>invoiceId</c> value.
    /// </param>
    /// <param name="_rboCustInvoiceJour">
    /// A <c>rboCustInvoiceJour</c> value.
    /// </param>
    void new(Voucher    _voucher,
             TransDate  _date,
             recId      _ledgerJournalTransRecID = 0,
             boolean    _isTaxInvoice = false,
             InvoiceId          _invoiceid = '',
             RetailCustInvoiceJour _rboCustInvoiceJour = NoYes::No
            )
    {
        voucher     = _voucher;
        taxDate     = _date;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            invoiceid   = _invoiceid;
            rboCustInvoiceJour = _rboCustInvoiceJour;
        }

        released    = NoYes::No;

        ledgerJournalTransrecId = _ledgerJournalTransRecID;
        isTaxInvoice            = _isTaxInvoice;
        //<GEELT>
        countryRegion_LT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]);
        //</GEELT>
        //<GEEHU>
        countryRegion_HU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]);
        //</GEEHU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpec</Name>
				<Source><![CDATA[
    public boolean parmTaxSpec(
        boolean _canGroupOnTaxDirection = true
    )
    {
        TaxWriteSelection   taxWriteSelection;
        TaxGroup            lastTaxGroup;
        TaxItemGroup        lastTaxItemGroup;
        InventTransId       lastInventTransId;
        RefRecId            lastSourceRecId;
        Set                 taxSpecCodeSet;
        boolean             okInitNewSet;
        // <GIN>
        TaxTrans_W          taxTrans_W;
        Percent             reverseChargePct;
        TaxItemGroupHeading taxItemGroupHeadingRev;
        ServiceTaxBasis_IN  serviceTaxBasis;
        VendTable           vendTable;
        boolean             isGTACashBasis;
        boolean             isCreditNote;
        VendTrans           vendTransServTax;
        // </GIN>
        TaxModuleType       taxModuleType;
        Query               query;

        if (released == NoYes::No)
        {
            taxSpecTmp.setTmp();
            lastTaxGroup         = '';
            lastTaxItemGroup     = '';
            lastInventTransId    = '';
            taxSpecCodeSet = this.initTaxSpecCodeSet();

            if ( ledgerJournalTransrecId && isTaxInvoice)
            {
                query = this.queryForLedgerJournalTrans();
                QueryRun queryRun = new QueryRun(query);

                while(QueryRun.next())
                {
                    taxTrans = queryRun.get(tableNum(TaxTrans));
                    if (taxTrans.TaxPrintDetail != TaxPrintDetail::NoDetail)
                    {
                        taxSpecTmp.clear();

                        if (taxTrans.TaxCode && !taxTrans.ExemptCode)
                        {
                            switch (taxTrans.TaxPrintDetail)
                            {
                                case TaxPrintDetail::TaxCode:
                                    taxSpecTmp.TaxSpecCode  = taxTrans.TaxCode;
                                    break;
                                case TaxPrintDetail::TaxGroup:
                                    taxSpecTmp.TaxSpecCode  = taxTrans.TaxGroup;
                                    break;
                            }
                        }

                        if (taxTrans.TaxCode && taxTrans.ExemptTax && taxTrans.ExemptCode)
                        {
                            taxSpecTmp.TaxSpecCode  = taxTrans.ExemptCode;
                        }

                        //
                        //  If the grouping is by "TaxCode" and the "TaxCode" is not
                        //  exempt then every TaxTrans will have to be in the taxSpecTmp
                        //  buffer in order to make sure that the reported base amounts are correct.
                        //
                        //  If the grouping is by "TaxCode" and the "TaxCode" is exempt or
                        //  grouping by "TaxGroup" and if the current taxTrans values for the
                        //  lastTaxGroup, lastTaxItemGroup, lastInventId, or lastOperationAccount
                        //  have not changed then a check on the lastTaxRefId should be done
                        //  to insure that the reported base amounts are correct.
                        //
                        okInitNewSet = false;

                        if (taxTrans.TaxPrintDetail == TaxPrintDetail::TaxCode &&
                           (!taxTrans.TaxCode || !taxTrans.ExemptTax || !taxTrans.ExemptCode))
                        {
                            okInitNewSet = true;
                        }
                        else
                        {
                            if ((taxTrans.TaxPrintDetail == TaxPrintDetail::TaxCode &&
                                (taxTrans.TaxCode && taxTrans.ExemptTax && taxTrans.ExemptCode)) ||                        (taxTrans.TaxPrintDetail == TaxPrintDetail::TaxGroup) &&
                                (taxTrans.TaxGroup         != lastTaxGroup ||
                                 taxTrans.TaxItemGroup     != lastTaxItemGroup ||
                                 taxTrans.InventTransId    != lastInventTransId
                                 ) ||
                                (taxTrans.TaxGroup         == lastTaxGroup &&
                                 taxTrans.TaxItemGroup     == lastTaxItemGroup &&
                                 taxTrans.InventTransId    == lastInventTransId &&
                                 taxTrans.SourceRecId != lastSourceRecId))
                            {
                                okInitNewSet = true;
                            }
                        }

                        if (okInitNewSet)
                        {
                            //
                            //  Create a new taxSpecCodeSet and assign the taxTrans row's
                            //  equivalent values to the "last" values for the next comparison.
                            //
                            taxSpecCodeSet       = this.initTaxSpecCodeSet();
                            lastTaxGroup         = taxTrans.TaxGroup;
                            lastTaxItemGroup     = taxTrans.TaxItemGroup;
                            lastInventTransId    = taxTrans.InventTransId;
                            lastSourceRecId      = taxTrans.SourceRecId;
                        }

                        taxWriteSelection = this.getTaxWriteSelection(taxTrans.TaxCode);
                        if (!taxSpecCodeSet.in(taxSpecTmp.TaxSpecCode) || (taxWriteSelection == TaxWriteSelection::TaxRate && taxTrans.TaxPrintDetail == TaxPrintDetail::TaxCode))
                        {
                            taxSpecTmp.SourceBaseAmountCur  = taxTrans.SourceBaseAmountCur;
                            taxSpecTmp.TaxBaseAmount        = taxTrans.TaxBaseAmount;
                            taxSpecTmp.TaxBaseQty           = taxTrans.TaxBaseQty;
                            taxSpecCodeSet.add(taxSpecTmp.TaxSpecCode);
                        }
                        else
                        {
                            taxSpecTmp.SourceBaseAmountCur  = 0;
                            taxSpecTmp.TaxBaseAmount        = 0;
                            taxSpecTmp.TaxBaseQty           = 0;
                        }

                        taxSpecTmp.SourceTaxAmountCur       = taxTrans.SourceTaxAmountCur;
                        taxSpecTmp.SourceRegulateAmountCur  = taxTrans.SourceRegulateAmountCur;
                        taxSpecTmp.TaxAmount                = taxTrans.TaxAmount;
                        taxSpecTmp.TaxInCostPriceCur        = taxTrans.TaxInCostPriceCur;
                        taxSpecTmp.TaxCode                  = taxTrans.TaxCode;
                        taxSpecTmp.SourceCurrencyCode       = taxTrans.SourceCurrencyCode;
                        taxSpecTmp.TaxDirection             = taxTrans.TaxDirection;
                        taxSpecTmp.TaxAutoGenerated         = taxTrans.TaxAutogenerated;
                        taxSpecTmp.TransDate                = taxTrans.TransDate;
                        taxSpecTmp.euroTriangulation        = taxTrans.euroTriangulation;
                        taxSpecTmp.Voucher                  = taxTrans.Voucher;
                        taxSpecTmp.ExemptTax                = taxTrans.ExemptTax;
                        taxSpecTmp.ExemptCode               = taxTrans.ExemptCode;
                        // <GEELT><GEEHU>
                        if (countryRegion_LT || countryRegion_HU)
                        {
                            taxSpecTmp.ExcludeFromInvoice = taxTrans.parmExcludeFromInvoice();
                        }
                        // </GEEHU></GEELT>

                        if (!taxTrans.ExemptCode && taxTrans.TaxPrintDetail != TaxPrintDetail::TaxGroup)
                        {
                            if (taxWriteSelection == TaxWriteSelection::PrintCode)
                            {
                                if (taxTrans.PrintCode)
                                {
                                    taxSpecTmp.PrintCode    = taxTrans.PrintCode;
                                }
                                else
                                {
                                    taxSpecTmp.PrintCode    = TaxTable::printCode(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmountCur);
                                }
                            }
                            if (taxWriteSelection == TaxWriteSelection::TaxRate)
                            {
                                taxSpecTmp.PrintCode    = this.taxValue2str(taxTrans.TaxValue);
                            }
                        }
                        else if (taxTrans.ExemptCode && taxWriteSelection == TaxWriteSelection::PrintCode &&
                             (taxTrans.Source == TaxModuleType::Sales || taxTrans.Source == TaxModuleType::FreeTxtInvoice))
                        {
                            if (taxTrans.PrintCode)
                            {
                                taxSpecTmp.PrintCode    = taxTrans.PrintCode;
                            }
                            else
                            {
                                taxSpecTmp.PrintCode    = TaxTable::printCode(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmountCur);
                            }
                            taxSpecTmp.TaxSpecCode  = taxTrans.TaxCode;
                        }
                        taxModuleType   = taxTrans.Source;

                        if (taxTrans.IntracomVAT)
                        {
                           taxSpecTmp.IntracomVAT = taxTrans.IntracomVAT;
                        }
                        taxSpecTmp.insert();
                    }
                }
            }
            else
            {
                // This order will allow for the correct summarization of the base amounts.
                // We only want the base amount for the first tax line for a given source line
                // to be set on the tmp table if displaying by tax group.
                query =  this.query();

                QueryRun queryRun = new QueryRun(query);
                while(QueryRun.next())
                {
                    taxTrans = queryRun.get(tableNum(TaxTrans));

                    // <GIN>
                    if (TaxParameters::isServiceTaxEnable_IN())
                    {
                        taxTrans_W = taxTrans.taxTrans_W();
                        if (taxTrans_W.TaxType_IN == TaxType_IN::ServiceTax)
                        {
                            taxItemGroupHeadingRev = TaxItemGroupHeading::find(taxTrans.TaxItemGroup);
                            serviceTaxBasis = taxItemGroupHeadingRev.ServiceTaxBasis_IN;
                            vendTransServTax = VendTrans::findVoucherDate(taxTrans.Voucher, taxTrans.TransDate);
                            isCreditNote = vendTransServTax.isCreditNote();
                            if (serviceTaxBasis == ServiceTaxBasis_IN::CashBasis)
                            {
                                vendTable = VendTable::find(vendTransServTax.AccountNum);
                                if (vendTable.isGTA())
                                {
                                    isGTACashBasis = true;
                                }
                            }
                            else
                            {
                                reverseChargePct = taxItemGroupHeadingRev.ReverseChargePercentage_IN;
                            }
                            // Skip -ve entries for normal order and +ve entries for credit note invoice.
                            if (reverseChargePct == 100 || isGTACashBasis)
                            {
                                if (isCreditNote)
                                {
                                    if (taxTrans.SourceRegulateAmountCur > 0)
                                    {
                                        continue;
                                    }
                                }
                                else
                                {
                                    if (taxTrans.SourceRegulateAmountCur < 0)
                                    {
                                        continue;
                                    }
                                }
                            }
                        }
                    }
                    // </GIN>
                    if (taxTrans.TaxPrintDetail != TaxPrintDetail::NoDetail)
                    {
                        taxSpecTmp.clear();

                        if (taxTrans.TaxCode && !taxTrans.ExemptCode)
                        {
                            switch (taxTrans.TaxPrintDetail)
                            {
                                case TaxPrintDetail::TaxCode:
                                    taxSpecTmp.TaxSpecCode  = taxTrans.TaxCode;
                                    break;
                                case TaxPrintDetail::TaxGroup:
                                    taxSpecTmp.TaxSpecCode  = taxTrans.TaxGroup;
                                    break;
                            }
                        }

                        if (taxTrans.TaxCode && taxTrans.ExemptTax && taxTrans.ExemptCode)
                        {
                            taxSpecTmp.TaxSpecCode  = taxTrans.ExemptCode;
                        }

                        //
                        //  If the grouping is by "TaxCode" and the "TaxCode" is not
                        //  exempt then every TaxTrans will have to be in the taxSpecTmp
                        //  buffer in order to make sure that the reported base amounts are correct.
                        //
                        //  If the grouping is by "TaxCode" and the "TaxCode" is exempt or
                        //  grouping by "TaxGroup" and if the current taxTrans values for the
                        //  lastTaxGroup, lastTaxItemGroup, lastInventId, or lastOperationAccount
                        //  have not changed then a check on the lastTaxRefId should be done
                        //  to insure that the reported base amounts are correct.
                        //
                        okInitNewSet = false;

                        if (taxTrans.TaxPrintDetail == TaxPrintDetail::TaxCode &&
                           (!taxTrans.TaxCode || !taxTrans.ExemptTax || !taxTrans.ExemptCode))
                        {
                            okInitNewSet = true;
                        }
                        else
                        {
                            if ((taxTrans.TaxPrintDetail == TaxPrintDetail::TaxCode &&
                                (taxTrans.TaxCode && taxTrans.ExemptTax && taxTrans.ExemptCode)) ||                        (taxTrans.TaxPrintDetail == TaxPrintDetail::TaxGroup) &&
                                (taxTrans.TaxGroup         != lastTaxGroup ||
                                 taxTrans.TaxItemGroup     != lastTaxItemGroup ||
                                 taxTrans.InventTransId    != lastInventTransId
                                 ) ||
                                (taxTrans.TaxGroup         == lastTaxGroup &&
                                 taxTrans.TaxItemGroup     == lastTaxItemGroup &&
                                 taxTrans.InventTransId    == lastInventTransId &&
                                 taxTrans.SourceRecId != lastSourceRecId))
                            {
                                okInitNewSet = true;
                            }
                        }

                        if (okInitNewSet)
                        {
                            //
                            //  Create a new taxSpecCodeSet and assign the taxTrans row's
                            //  equivalent values to the "last" values for the next comparison.
                            //
                            taxSpecCodeSet       = this.initTaxSpecCodeSet();
                            lastTaxGroup         = taxTrans.TaxGroup;
                            lastTaxItemGroup     = taxTrans.TaxItemGroup;
                            lastInventTransId    = taxTrans.InventTransId;
                            lastSourceRecId      = taxTrans.SourceRecId;
                        }

                        if (!taxSpecCodeSet.in(taxSpecTmp.TaxSpecCode))
                        {
                            taxSpecTmp.SourceBaseAmountCur  = taxTrans.SourceBaseAmountCur;
                            taxSpecTmp.TaxBaseAmount        = taxTrans.TaxBaseAmount;
                            taxSpecTmp.TaxBaseQty           = taxTrans.TaxBaseQty;
                            taxSpecCodeSet.add(taxSpecTmp.TaxSpecCode);
                        }
                        else
                        {
                            taxSpecTmp.SourceBaseAmountCur  = 0;
                            taxSpecTmp.TaxBaseAmount        = 0;
                            taxSpecTmp.TaxBaseQty           = 0;
                        }

                        taxSpecTmp.SourceTaxAmountCur       = taxTrans.SourceTaxAmountCur;
                        taxSpecTmp.SourceRegulateAmountCur  = taxTrans.SourceRegulateAmountCur;
                        taxSpecTmp.TaxAmount                = taxTrans.TaxAmount;
                        taxSpecTmp.TaxInCostPriceCur        = taxTrans.TaxInCostPriceCur;
                        taxSpecTmp.TaxCode                  = taxTrans.TaxCode;
                        taxSpecTmp.SourceCurrencyCode       = taxTrans.SourceCurrencyCode;
                        taxSpecTmp.TaxDirection             = taxTrans.TaxDirection;
                        taxSpecTmp.TaxAutoGenerated         = taxTrans.TaxAutogenerated;
                        taxSpecTmp.TransDate                = taxTrans.TransDate;
                        taxSpecTmp.euroTriangulation        = taxTrans.euroTriangulation;
                        taxSpecTmp.Voucher                  = taxTrans.Voucher;
                        taxSpecTmp.ExemptTax                = taxTrans.ExemptTax;
                        taxSpecTmp.ExemptCode               = taxTrans.ExemptCode;
                        // <GEELT><GEEHU>
                        if (countryRegion_LT || countryRegion_HU)
                        {
                            taxSpecTmp.ExcludeFromInvoice = taxTrans.parmExcludeFromInvoice();
                        }
                        // </GEEHU></GEELT>
                        taxSpecTmp.InvoiceId                = taxTrans.InvoiceId;

                        taxWriteSelection = this.getTaxWriteSelection(taxTrans.TaxCode);
                        if (!taxTrans.ExemptCode && taxTrans.TaxPrintDetail != TaxPrintDetail::TaxGroup)
                        {
                            if (taxWriteSelection == TaxWriteSelection::PrintCode)
                            {
                                if (taxTrans.PrintCode)
                                {
                                    taxSpecTmp.PrintCode    = taxTrans.PrintCode;
                                }
                                else
                                {
                                    taxSpecTmp.PrintCode    = TaxTable::printCode(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmountCur);
                                }
                            }

                            if (taxWriteSelection == TaxWriteSelection::TaxRate)
                            {
                                taxSpecTmp.PrintCode    = this.taxValue2str(taxTrans.TaxValue);
                            }
                        }
                        else if (taxTrans.ExemptCode && taxWriteSelection == TaxWriteSelection::PrintCode &&
                            (taxTrans.Source == TaxModuleType::Sales || taxTrans.Source == TaxModuleType::FreeTxtInvoice))
                        {
                            if (taxTrans.PrintCode)
                            {
                                taxSpecTmp.PrintCode    = taxTrans.PrintCode;
                            }
                            else
                            {
                                taxSpecTmp.PrintCode    = TaxTable::printCode(taxTrans.TaxCode, taxTrans.TransDate, taxTrans.TaxBaseAmountCur);
                            }
                            taxSpecTmp.TaxSpecCode  = taxTrans.TaxCode;
                        }
                        taxModuleType   = taxTrans.Source;
                        if (taxTrans.IntracomVAT)
                        {
                           taxSpecTmp.IntracomVAT = taxTrans.IntracomVAT;
                        }
                        // <GIN>
                        if ((taxTrans_W.TaxType_IN == TaxType_IN::ServiceTax)
                            && reverseChargePct == 100)
                        {
                            // When reverse charge is 100%, the TaxAmount field on invoice report should be zero, as there are no recoverables.
                            // and reverse charge has new field that shows values.
                            taxSpecTmp.SourceTaxAmountCur       = 0;
                            taxSpecTmp.SourceRegulateAmountCur  = 0;
                            taxSpecTmp.TaxAmount                = 0;
                        }
                        taxSpecTmp.insert();
                    }
                }
            }

            if (intracomVATInvoice)
            {
               this.taxSpecNoIntracomVAT();
            }
            else
            {
                if (_canGroupOnTaxDirection)
                {
                    // <GEELT><GEEHU>
                    if (countryRegion_LT || countryRegion_HU)
                    {
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount),
                            sum(TaxInCostPriceCur)
                        from taxSpecTmp
                            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ExcludeFromInvoice
                            where taxSpecTmp.Voucher      == voucher &&
                                  taxSpecTmp.TransDate    == taxDate;
                    }
                    else if (released == NoYes::No && rboCustInvoiceJour)
                    {
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount),
                            sum(TaxInCostPriceCur)
                        from taxSpecTmp
                            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TaxAutoGenerated, TransDate, euroTriangulation
                            where taxSpecTmp.Voucher      == voucher &&
                                taxSpecTmp.TransDate    == taxDate &&
                                taxSpecTmp.InvoiceId    == invoiceid;
                    }
                    else
                    {
                        // <GIN>
                        if (TaxParameters::isServiceTaxEnable_IN())
                        {
                            select
                                sum(TaxBaseQty),
                                sum(SourceTaxAmountCur),
                                sum(SourceBaseAmountCur),
                                sum(SourceRegulateAmountCur),
                                sum(TaxAmount),
                                sum(TaxBaseAmount),
                                sum(TaxInCostPriceCur)
                                from taxSpecTmp
                                group by TaxSpecCode, ExemptTax, ExemptCode, SourceCurrencyCode, TransDate
                                where taxSpecTmp.Voucher == voucher
                                   && taxSpecTmp.TransDate == taxDate;
                        }
                        // </GIN>
                        else
                        {
                            select
                                sum(TaxBaseQty),
                                sum(SourceTaxAmountCur),
                                sum(SourceBaseAmountCur),
                                sum(SourceRegulateAmountCur),
                                sum(TaxAmount),
                                sum(TaxBaseAmount),
                                sum(TaxInCostPriceCur)
                            from taxSpecTmp
                                group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation
                                where taxSpecTmp.Voucher      == voucher &&
                                      taxSpecTmp.TransDate    == taxDate;
                        }
                    }
                }
                else
                {
                    // <GEELT><GEEHU>
                    if (countryRegion_LT || countryRegion_HU)
                    {
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount),
                            sum(TaxInCostPriceCur)
                        from taxSpecTmp
                            group by TaxSpecCode, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation, ExcludeFromInvoice
                            where taxSpecTmp.Voucher      == voucher &&
                                  taxSpecTmp.TransDate    == taxDate;
                    }
                    else
                    {
                    // </GEEHU></GEELT>
                        select
                            sum(TaxBaseQty),
                            sum(SourceTaxAmountCur),
                            sum(SourceBaseAmountCur),
                            sum(SourceRegulateAmountCur),
                            sum(TaxAmount),
                            sum(TaxBaseAmount),
                            sum(TaxInCostPriceCur)
                        from taxSpecTmp
                            group by TaxSpecCode, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TransDate, euroTriangulation
                            where taxSpecTmp.Voucher      == voucher &&
                                    taxSpecTmp.TransDate    == taxDate;
                    // <GEELT><GEEHU>
                    }
                    // </GEEHU></GEELT>
                }
            }
        }
        else
        {
            next taxSpecTmp;
        }

        released = NoYes::Yes;

        if (taxSpecTmp)
        {
            taxCode                 = taxSpecTmp.TaxSpecCode;
            taxDirection            = taxSpecTmp.TaxDirection;
            taxExemptTax            = taxSpecTmp.ExemptTax;
            taxExemptCode           = taxSpecTmp.ExemptCode;
            taxWriteCode            = taxSpecTmp.PrintCode;
            currencyCode            = taxSpecTmp.SourceCurrencyCode;
            taxExemptDescription    = '';
            taxExemptDescriptionText = '';
            // <GEELT><GEEHU>
            if (countryRegion_LT || countryRegion_HU)
            {
                this.parmExcludeFromInvoice(taxSpecTmp.ExcludeFromInvoice);
                if (taxSpecTmp.ExcludeFromInvoice)
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00028, funcName());
                }
            }
            // </GEEHU></GEELT>

            if (taxSpecTmp.ExemptTax && taxSpecTmp.ExemptCode
                // <GMY>
                && !this.parmIsGSTInvoice_MY()
                // </GMY>
                )
            {
                taxExemptDescriptionText = TaxExemptCodeTable::txtText(taxExemptCode, languageId);
                taxExemptDescription = taxExemptDescriptionText;

                taxCode              = '';
                taxWriteCode         = '';
            }

            if (taxExemptDescription && (taxTrans.Source == TaxModuleType::Sales || taxTrans.Source == TaxModuleType::FreeTxtInvoice))
            {
                taxCode              = taxSpecTmp.TaxSpecCode;
                taxWriteCode         = taxSpecTmp.PrintCode;
            }
            taxAmountCur    = taxSpecTmp.SourceRegulateAmountCur;
            taxAmountMST    = taxSpecTmp.TaxAmount;
            totalTaxAmountCur    += taxSpecTmp.SourceRegulateAmountCur;
            totalTaxAmountMST    += taxSpecTmp.TaxAmount;

            // <GIN>
            if (TaxParameters::isServiceTaxEnable_IN())
            {
                // Written the Query here to get this ServiceTaxReverseChargeOriginAmount_IN Field value from Table TaxTrans_W for the report to be displayed.
                select sum(ServiceTaxReverseChargeOriginAmount_IN) from taxTrans_w
                        join TaxCode, RecId, Voucher, TaxDirection from taxTrans
                group by TaxCode,SourceCurrencyCode,TransDate
                    where taxTrans.RecId   == taxTrans_w.TaxTrans &&
                          taxTrans.Voucher == voucher   &&
                          taxTrans.TransDate == taxDate &&
                          taxTrans.TaxDirection == TaxDirection::OutgoingTax &&
                          taxTrans.TaxCode == taxSpecTmp.TaxSpecCode;
                serviceTaxReverseChargeOriginAmount_IN = taxtrans_w.ServiceTaxReverseChargeOriginAmount_IN;
            }
            // </GIN>
            taxInCostPriceCur   = taxSpecTmp.TaxInCostPriceCur;
            taxInCostPriceMST   = CurrencyExchangeHelper::mstAmount(taxInCostPriceCur, taxSpecTmp.SourceCurrencyCode, taxSpecTmp.TransDate, Currency::noYes2UnknownNoYes(taxSpecTmp.euroTriangulation));

            taxBaseAmountCur    = taxSpecTmp.SourceBaseAmountCur;
            taxBaseAmountMST    = taxSpecTmp.TaxBaseAmount;
            totalTaxBaseAmountCur    += taxSpecTmp.SourceBaseAmountCur;
            totalTaxBaseAmountMST    += taxSpecTmp.TaxBaseAmount;
            taxBaseQty          = taxSpecTmp.TaxBaseQty;
            if (intracomVATInvoice)
            {
                taxInvoiceAmount   += taxAmountCur;
            }
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets an instance of the <c>TmpTaxWorkTrans</c> table.
    /// </summary>
    /// <param name="_tmpTaxWorkTrans">
    ///    The instance of the <c>TmpTaxWorkTrans</c> table to set; optional
    /// </param>
    void setTmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSpecNoIntracomVAT</Name>
				<Source><![CDATA[
    private void taxSpecNoIntracomVAT()
    {
        select
            sum(TaxBaseQty),
            sum(SourceTaxAmountCur),
            sum(SourceBaseAmountCur),
            sum(SourceRegulateAmountCur),
            sum(TaxAmount),
            sum(TaxBaseAmount),
            sum(TaxInCostPriceCur)
        from taxSpecTmp
            group by TaxSpecCode, TaxDirection, ExemptTax, ExemptCode, PrintCode, SourceCurrencyCode, TaxAutoGenerated, TransDate, euroTriangulation
            where taxSpecTmp.Voucher      == voucher &&
                  taxSpecTmp.TransDate    == taxDate &&
                  !taxSpecTmp.IntracomVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryForLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for <c>TaxTrans</c> for <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <returns>
    /// Return the query for <c>TaxTrans</c>.
    /// </returns>
    protected Query queryForLedgerJournalTrans()
    {
        Query  query = new Query();
        QueryBuildDataSource    qbds;
        qbds = query.addDataSource(tablenum(TaxTrans));
        
        qbds.addRange(FieldNum(TaxTrans, Voucher)).value(queryValue(voucher));
        qbds.addRange(FieldNum(TaxTrans, TransDate)).value(queryValue(taxDate));
        qbds.addRange(FieldNum(TaxTrans, SourceTableId)).value(queryValue(tableName2id('LedgerJournalTrans')));
        qbds.addRange(FieldNum(TaxTrans, SourceRecId)).value(queryValue(ledgerJournalTransrecId));

        return query;

    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for <c>TaxTrans</c>.
    /// </summary>
    /// <returns>
    /// Return the query for <c>TaxTrans</c>.
    /// </returns>
    protected Query query()
    {
        Query  query = new Query();
        QueryBuildDataSource    qbds;
        qbds = query.addDataSource(tablenum(TaxTrans));
        
        qbds.orderMode(OrderMode::OrderBy);
        qbds.addOrderByField(FieldNum(TaxTrans, SourceTableId));
        qbds.addOrderByField(FieldNum(TaxTrans, SourceRecId));
        
        qbds.addRange(FieldNum(TaxTrans, Voucher)).value(queryValue(voucher));
        qbds.addRange(FieldNum(TaxTrans, TransDate)).value(queryValue(taxDate));

        return query;
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>