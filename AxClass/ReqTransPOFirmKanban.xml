<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPOFirmKanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransPOFirmKanban</c> class will create one or more kanbans from a planned kanban.
/// </summary>
/// <remarks>
/// This class will be used when a planned kanban is firmed.
/// </remarks>
public class ReqTransPOFirmKanban
{
    ReqPO               reqPO;                  // The planned order to be firmed - will be deleted and replaced by real kanban(s).
    KanbanRule          kanbanRule;
    ReqPlanData         reqPlanData;
    boolean             isAutoFirm;
    private boolean     mustSkipTTS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmIsAutoFirm</Name>
				<Source><![CDATA[
    public boolean parmIsAutoFirm(boolean _isAutoFirm = isAutoFirm)
    {
        isAutoFirm = _isAutoFirm;
        return isAutoFirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsMustSkipTTS</Name>
				<Source><![CDATA[
    public boolean parmIsMustSkipTTS(boolean _mustSkipTTS = mustSkipTTS)
    {
        mustSkipTTS = _mustSkipTTS;
        return mustSkipTTS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipTTS</Name>
				<Source><![CDATA[
    private boolean mustSkipTTS()
    {
        return mustSkipTTS || isAutoFirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>ReqTrans</c> record and adds the record to the specified instance of the
    ///    <c>RecordSortedList</c> class.
    /// </summary>
    /// <param name="_inventTrans">
    ///    An <c>InventTrans</c> record.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    An <c>InventTransOrigin</c> record.
    /// </param>
    /// <param name="_reqTransSortedList">
    ///    An instance of the <c>RecordSortedList</c> class that contains the <c>ReqTrans</c> records.
    /// </param>
    protected void addReqTrans(
        InventTrans         _inventTrans,
        InventTransOrigin   _inventTransOrigin,
        RecordSortedList    _reqTransSortedList)
    {
        ReqTrans    reqTransCreate;
        InventDim   inventDim;
        ReqSetup    reqSetup;
        ReqSetupDim reqSetupDim;

        reqSetup = reqPlanData.newReqSetup(_inventTrans.ItemId);

        inventDim = InventDim::find(_inventTrans.InventDimId);
        if (inventDim.clearNotCovPrDim(InventDimGroupSetup::newItemId(_inventTrans.ItemId)))
        {
            inventDim = InventDim::findOrCreate(inventDim);
        }

        reqSetupDim = reqPlanData.newReqSetupDim(reqSetup,inventDim.InventDimId);

        reqTransCreate.PlanVersion                  = reqPO.PlanVersion;
        reqTransCreate.ItemId                       = _inventTrans.ItemId;
        reqTransCreate.CovInventDimId               = inventDim.InventDimId;
        reqTransCreate.Qty                          = _inventTrans.Qty;
        reqTransCreate.InventTransOrigin            = _inventTrans.InventTransOrigin;
        reqTransCreate.MarkingRefInventTransOrigin  = _inventTrans.MarkingRefInventTransOrigin;
        reqTransCreate.Priority                     = ReqTrans::statusIssue2Priority(_inventTrans.StatusIssue);
        reqTransCreate.initDateTimeFromInvent(_inventTrans.DateStatus,_inventTrans.TimeExpected,reqPlanData,reqSetupDim);
        reqTransCreate.RefType                      = ReqTrans::transType2RefType(_inventTransOrigin.ReferenceCategory,reqTransCreate.Qty);
        reqTransCreate.setSupplyDemandSubClassification(_inventTransOrigin.ReferenceCategory);
        reqTransCreate.RefId                        = _inventTransOrigin.ReferenceId;
        reqTransCreate.Level                        = reqSetupDim.itemLevel();
        reqTransCreate.setDirection();

        // Summeraize records if sort fields are equal - could be the case if fewer coverage dimensions are used.
        if (_reqTransSortedList.find(reqTransCreate))
        {
            reqTransCreate.Qty += _inventTrans.Qty;
            _reqTransSortedList.ins(reqTransCreate,true);
        }
        else
        {
            _reqTransSortedList.ins(reqTransCreate,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbanListInclDerivedEventKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a list of kanbans and derived event kanbans.
    /// </summary>
    /// <param name="_listTopLevel">
    ///    The top level <c>List</c> object of kanban records.
    /// </param>
    /// <param name="_listPrevLevel">
    ///    The previous level <c>List</c> object of kanban records; optional.
    /// </param>
    /// <param name="_level">
    ///    The current level, starting with top level 1; optional.
    /// </param>
    /// <returns>
    ///    A <c>List</c> object of kanban records.
    /// </returns>
    /// <remarks>
    ///    The method recursively calls itself for each level of kanbans, as long as derived kanbans are found.
    ///    The list may contain duplicates if a kanban covers more than one event.
    /// </remarks>
    protected List createKanbanListInclDerivedEventKanbans(
        List _listTopLevel,
        List _listPrevLevel = _listTopLevel,
        int  _level         = 1)
    {
        #define.maxLevel(100)
        KanbanJobPickingList    kanbanJobPickingList;
        KanbanJob               kanbanJob;
        Kanban                  kanban;
        ListEnumerator          le;
        List                    list;
        List                    listLevel;
        List                    listNextLevel;

        listLevel = new List(Types::Record);

        if (_level <= #maxLevel)
        {
            if (   _listPrevLevel
                && _listPrevLevel.elements())
            {
                le = _listPrevLevel.getEnumerator();
                while (le.moveNext())
                {
                    kanban = le.current();

                    // find any event kanbans created for kanban jobs of the current kanban
                    while select kanbanJob
                        where kanbanJob.Kanban == kanban.RecId
                    {
                        list = KanbanEventQuantityMap::newStandard(kanbanJob).mappedKanbansAsList();
                        if (   list
                            && list.elements())
                        {
                            listLevel.appendList(list);
                        }
                    }

                    if (kanban.type().canHaveBOM())
                    {
                        // find any event kanban created for picking list lines of the current kanban
                        while select kanbanJobPickingList
                            where kanbanJobPickingList.Kanban == kanban.RecId
                        {
                            list = KanbanEventQuantityMap::newStandard(kanbanJobPickingList).mappedKanbansAsList();
                            if (   list
                                && list.elements())
                            {
                                listLevel.appendList(list);
                            }
                        }
                    }
                }

                // if any new event kanbans were found, recurse to find further kanbans
                if (listLevel.elements())
                {
                    listNextLevel = this.createKanbanListInclDerivedEventKanbans(_listTopLevel,
                                                                                 listLevel,
                                                                                 _level+1);
                    if (   listNextLevel
                        && listNextLevel.elements())
                    {
                        listLevel.appendList(listNextLevel);
                    }
                }
            }
        }

        // concatenate the initial top level list with the result of all derived lower level lists
        if (   _level == 1
            || _level > #maxLevel)
        {
            if (_listTopLevel)
            {
                listLevel = listLevel.elements()
                                ? List::merge(_listTopLevel,listLevel)
                                : _listTopLevel;
            }
        }

        return listLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the kanbans records.
    /// </summary>
    /// <returns>
    ///    A list that holds the <c>Kanban</c> records.
    /// </returns>
    protected List createKanbans()
    {
        List    listCreatedKanban = new List(Types::Record);

        listCreatedKanban = LeanRulesEngine::triggerRuleReqPO(kanbanRule,reqPO);

        return listCreatedKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>ReqTrans</c> records based on created kanbans.
    /// </summary>
    /// <param name="_listCreatedKanban">
    ///    A list that holds the <c>Kanban</c> records.
    /// </param>
    /// <returns>
    ///    An instance of the <c>RecordSorteList</c> class that holds the created <c>ReqTrans</c> records.
    /// </returns>
    protected RecordSortedList createReqTrans(List _listCreatedKanban)
    {
        #LOCALMACRO.inventTransSelect
        while select sum(Qty) from inventTrans
        group by ItemId,InventTransOrigin, MarkingRefInventTransOrigin, InventDimId, StatusIssue, StatusReceipt, DateStatus, TimeExpected
        where  (inventTrans.StatusIssue   >= StatusIssue::ReservPhysical && inventTrans.StatusIssue   <= StatusIssue::OnOrder)
            || (inventTrans.StatusReceipt >= StatusReceipt::Arrived      && inventTrans.StatusReceipt <= StatusReceipt::Ordered)
        join ReferenceCategory, ReferenceId, InventTransId from inventTransOrigin
        group by ReferenceCategory, ReferenceId, InventTransId
        where inventTransOrigin.RecId == inventTrans.InventTransOrigin
        #ENDMACRO

        Kanban                              kanban;
        KanbanJob                           kanbanJob;
        KanbanJobPickingList                kanbanJobPickingList;
        InventTrans                         inventTrans;
        List                                list;
        ListEnumerator                      le;
        InventTransOrigin                   inventTransOrigin;
        InventTransOriginKanbanJobPickList  inventTransOriginPickingList;
        InventTransOriginKanbanJobTrsIssue  inventTransOriginTrsIssue;
        RecordSortedList                    reqTransSortedList;
        Set                                 setHandledKanbanRecId;

        reqTransSortedList = this.initReqTransSortedList();

        if (   _listCreatedKanban
            && _listCreatedKanban.elements())
        {
            list                  = this.createKanbanListInclDerivedEventKanbans(_listCreatedKanban);
            le                    = list.getEnumerator();
            setHandledKanbanRecId = new Set(Types::Int64);

            while (le.moveNext())
            {
                kanban = le.current();

                if (!setHandledKanbanRecId.in(kanban.RecId))
                {
                    // ignore duplicates, if any.
                    setHandledKanbanRecId.add(kanban.RecId);

                    // find transactions from kanbanJobs
                    #inventTransSelect
                    exists join kanbanJob
                            where  kanbanJob.InventTransDataAreaId == inventTransOrigin.DataAreaId
                                && kanbanJob.InventTransId         == inventTransOrigin.InventTransId
                                && kanbanJob.Kanban                == kanban.RecId
                    {
                        this.addReqTrans(inventTrans,inventTransOrigin,reqTransSortedList);
                    }

                    // find transactions from picklists generated by kanbanJobs
                    #inventTransSelect
                    exists join inventTransOriginPickingList
                            where inventTransOriginPickingList.InventTransOrigin == inventTransOrigin.RecId
                        exists join kanbanJobPickingList
                            where kanbanJobPickingList.RecId == inventTransOriginPickingList.KanbanJobPickingList
                               && kanbanJobPickingList.Kanban == kanban.RecId
                    {
                        this.addReqTrans(inventTrans,inventTransOrigin,reqTransSortedList);
                    }

                    // find transactions from kanban transfer issues
                    #inventTransSelect
                    exists join inventTransOriginTrsIssue
                            where inventTransOriginTrsIssue.InventTransOrigin == inventTransOrigin.RecId
                        exists join kanbanJob
                            where kanbanJob.RecId == inventTransOriginTrsIssue.KanbanJob
                               && kanbanJob.Kanban == kanban.RecId
                    {
                        this.addReqTrans(inventTrans,inventTransOrigin,reqTransSortedList);
                    }
                }
            }

            // insert reqTrans records -> the sorted list will now have recId's
            reqTransSortedList.insertDatabase();
        }

        return reqTransSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqTransCov</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>ReqTransCov</c> records to the specified instance of the <c>RecordInsertList</c> class.
    /// </summary>
    /// <param name="_listReqTransKanban">
    ///    A list that holds the <c>ReqTrans</c> records.
    /// </param>
    /// <param name="_reqTransCovInsertList">
    ///    An instance of the <c>RecordInsertList</c> class that holds a <c>ReqTransCov</c> records.
    /// </param>
    protected void createReqTransCov(
        List                _listReqTransKanban,
        RecordInsertList    _reqTransCovInsertList)
    {
        List            listReqTransSettled;

        ListEnumerator  leReqTransKanban;
        ListEnumerator  leReqTransSettled;

        ReqTrans        reqTransKanban;
        ReqTrans        reqTransSettled;
        boolean         moreRecords;

        if (! _listReqTransKanban.elements())
        {
            return;
        }

        // find first reqTrans record in list (all reqTrans records has same itemId and coverage dimensionId)
        leReqTransKanban  = _listReqTransKanban.getEnumerator();
        leReqTransKanban.moveNext();
        reqTransKanban = leReqTransKanban.current();

        // find list of original reqtrans records pegged to the planned order transactions for the same item and dimensions.
        listReqTransSettled = this.listReqTransSettled(reqTransKanban.ItemId,reqTransKanban.CovInventDimId,reqTransKanban.Direction);

        leReqTransKanban = _listReqTransKanban.getEnumerator();
        leReqTransSettled = listReqTransSettled.getEnumerator();

        moreRecords = leReqTransKanban.moveNext() && leReqTransSettled.moveNext();

        while (moreRecords)
        {
            if (!reqTransKanban)
            {
                reqTransKanban = leReqTransKanban.current();
            }

            if (!reqTransSettled)
            {
                reqTransSettled = leReqTransSettled.current();
            }

            this.updateFutures(reqTransKanban.isReceipt() ? reqTransSettled : reqTransKanban,
                               reqTransKanban.isReceipt() ? reqTransKanban  : reqTransSettled);

            ReqTransCov::insertFromReceiptIssue(reqTransKanban.isReceipt() ? reqTransKanban  : reqTransSettled,
                                                reqTransKanban.isReceipt() ? reqTransSettled : reqTransKanban,
                                                reqPlanData,
                                                _reqTransCovInsertList);
            if (! reqTransKanban.openQty())
            {
                reqTransKanban = null;
                moreRecords = moreRecords && leReqTransKanban.moveNext();
            }

            if (! reqTransSettled.openQty())
            {
                reqTransSettled = null;
                moreRecords = moreRecords && leReqTransSettled.moveNext();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqTransFirmLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a <c>ReqTransFirmLog</c> record for each created kanban.
    /// </summary>
    /// <param name="_listCreatedKanban">
    ///    A list that holds the <c>Kanban</c> records.
    /// </param>
    protected void createReqTransFirmLog(List   _listCreatedKanban)
    {
        Kanban              kanban;
        ReqTransFirmLog     reqTransFirmLog;
        ListEnumerator      le;

        if (_listCreatedKanban.elements())
        {
            le = _listCreatedKanban.getEnumerator();

            while (le.moveNext())
            {
                kanban = le.current();

                reqTransFirmLog.clear();
                reqTransFirmLog.initFromKanban(kanban);

                reqTransFirmLog.ReqFirmDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                reqTransFirmLog.ReqFirmUserId       = curUserId();
                reqTransFirmLog.ReqPlanId           = ReqPlanVersion::find(reqPO.PlanVersion).ReqPlanId;

                reqTransFirmLog.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>ReqPO</c> record and the related <c>ReqTrans</c> and <c>ReqTransCov</c> records.
    /// </summary>
    protected void deleteReqPO()
    {
        ReqTrans        reqTrans;
        ReqTransCov     reqTransCov;
        ReqPO           reqPODelete;

        reqTransCov.skipDataMethods(true);

        delete_from reqTransCov
        exists join reqTrans
            where  reqTrans.PlanVersion == reqPO.PlanVersion
                && reqTrans.RefId       == reqPO.RefId
                && reqTrans.RefType     == reqPO.RefType
                && reqTrans.RecId       == reqTransCov.ReceiptRecId;

        delete_from reqTransCov
        exists join reqTrans
            where  reqTrans.PlanVersion == reqPO.PlanVersion
                && reqTrans.RefId       == reqPO.RefId
                && reqTrans.RefType     == ReqTrans::derivedRefType(reqPO.RefType)
                && reqTrans.RecId       == reqTransCov.IssueRecId;

        reqTrans.skipDeleteActions(true);
        reqTrans.skipDeleteMethod(true);

        delete_from reqTrans
            where reqTrans.PlanVersion == reqPO.PlanVersion
               && reqTrans.RefId       == reqPO.RefId
               && (   reqTrans.RefType == reqPO.RefType 
                   || reqTrans.RefType == ReqTrans::derivedRefType(reqPO.RefType));

        if (reqPO.selectForUpdate())
        {
            reqPO.delete();
        }
        else
        {
            delete_from reqPODelete
                where reqPODelete.RecId == reqPO.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>firmReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates kanbans and updates the requirement profile of the current plan and the dynamic plan.
    /// </summary>
    protected void firmReqPO()
    {
        List                            listCreatedKanban;
        RecordSortedList                reqTransSortedList;   // RecordSortedList of reqTrans records representing the created kanban(s) and picking list.

        listCreatedKanban = this.createKanbans();

        if (   listCreatedKanban.elements()
            && reqPlanData.useMovements())
        {
            reqTransSortedList = this.createReqTrans(listCreatedKanban);
            this.updatePegging(reqTransSortedList);
            this.updateRequisitionLineReferences(reqTransSortedList);
        }

        if (reqTransSortedList)
        {
            this.updateDynamicPlan(reqTransSortedList);
        }

        this.deleteReqPO();

        this.createReqTransFirmLog(listCreatedKanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes instance variables.
    /// </summary>
    protected void init()
    {
        reqPlanData = ReqPlanData::newReqPlanVersion(reqPO.PlanVersion);
        reqPlanData.parmUseSetupCache(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqTransSortedList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>RecordSortedList</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>RecordSortedList</c> class that can contain <c>ReqTrans</c> records.
    /// </returns>
    protected RecordSortedList initReqTransSortedList()
    {
        RecordSortedList        reqTransSortedList;

        // make sorted list
        reqTransSortedList = new RecordSortedList(tableNum(ReqTrans));
        reqTransSortedList.sortOrder(   fieldNum(ReqTrans,ItemId),
                                        fieldNum(ReqTrans,CovInventDimId),
                                        fieldNum(ReqTrans,Direction),
                                        fieldNum(ReqTrans,ReqDate),
                                        fieldNum(ReqTrans,ReqTime),
                                        fieldNum(ReqTrans,InventTransOrigin),
                                        fieldNum(ReqTrans,MarkingRefInventTransOrigin),
                                        fieldNum(ReqTrans,Priority));
        return reqTransSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listReqTransSettled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the pegged <c>ReqTrans</c> records for the planned order and the derived transactions.
    /// </summary>
    /// <param name="_itemId">
    ///    A string value that holds an item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    A string value that holds an inventory dimension ID.
    /// </param>
    /// <param name="_direction">
    ///    A <c>InventDirection</c> enumeration value that hold the requirement direction.
    /// </param>
    /// <returns>
    ///    A list that holds the <c>ReqTrans</c> records.
    /// </returns>
    /// <remarks>
    ///    Requirement transactions pegged against the planned order and the derived transactions must be
    ///    released and instead used to the created kanban.
    /// </remarks>
    protected List listReqTransSettled(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        InventDirection _direction)
    {
        ReqTrans        reqTransObsolete;
        ReqTrans        reqTransSettled;
        ReqTrans        reqTransSettledForUpdate;
        ReqTransCov     reqTransCov;

        List            listReqTransSettled = new List(Types::Record);

        while select forceplaceholders reqTransSettled
            group by RecId
            join sum(Qty) from reqTransCov
                where  reqTransCov.PlanVersion      == reqPO.PlanVersion
                    && (reqTransCov.IssueRecId      == reqTransSettled.RecId || _direction == InventDirection::Issue)
                    && (reqTransCov.ReceiptRecId    == reqTransSettled.RecId || _direction == InventDirection::Receipt)
            exists join reqTransObsolete
                where (reqTransObsolete.RecId == reqTransCov.IssueRecId     ||  _direction == InventDirection::Receipt)
                   && (reqTransObsolete.RecId == reqTransCov.ReceiptRecId   ||  _direction == InventDirection::Issue)
                   && reqTransObsolete.PlanVersion     == reqPO.PlanVersion
                   && reqTransObsolete.RefId           == reqPO.RefId
                   && reqTransObsolete.ItemId          == _itemId
                   && reqTransObsolete.CovInventDimId  == _inventDimId
                   && reqTransObsolete.Direction       == _direction
        {
            reqTransSettledForUpdate = ReqTrans::findRecIdPessimistic(reqTransSettled.RecId, true); // Applying pessimistic locking to eliminate update conflicts
            reqTransSettledForUpdate.subCov(reqTransCov);
            listReqTransSettled.addEnd(reqTransSettledForUpdate);
        }

        return listReqTransSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a string value that is based on the selected values from the specified <c>ReqTrans</c>
    ///    record.
    /// </summary>
    /// <param name="_reqTrans">
    ///    A <c>ReqTrans</c> record that represents a requirement transaction.
    /// </param>
    /// <returns>
    ///    A string value that represents a sorting key.
    /// </returns>
    /// <remarks>
    ///    Sorting by the string will secure that the lowest items in a BOM structure will be processed first.
    /// </remarks>
    protected str mapKey(ReqTrans     _reqTrans)
    {
        #define.LevelOffset(1000)
        #define.numLength(4)

        return strFmt('%1#%2#%3#%4',num2Str0(#LevelOffset-_reqTrans.Level,#numLength),_reqTrans.ItemId,_reqTrans.CovInventDimId,_reqTrans.Direction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPO</Name>
				<Source><![CDATA[
    public ReqPO parmReqPO(ReqPO _reqPO = reqPO)
    {
        reqPO = _reqPO;

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Firms a planned kanban.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The specified parameters are invalid.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred, and kept occurring when it was discontinued.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsBegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            // stop logging of changes as the dynamic plan is updated directly
            InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().parmSkipInventSumLogTTS(this.parmIsMustSkipTTS());

            this.init();
            this.firmReqPO();

            InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().parmSkipInventSumLogTTS(false);

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch
        {
            InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().parmSkipInventSumLogTTS(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDynamicPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the requirement profile in another plan.
    /// </summary>
    /// <param name="_reqTransSortedList">
    ///    An instance of the <c>RecordSortedList</c> class that holds the <c>ReqTrans</c> records that
    ///    represent the created kanbans and assigned picking lists.
    /// </param>
    protected void updateDynamicPlan(RecordSortedList     _reqTransSortedList)
    {
        ReqPlanId                       reqPlanId;
        ReqParameters                   reqParameters;
        ReqPO                           reqPODynamic;

        ReqTransPOFirmKanbanUpdatePlan  reqTransPOFirmKanbanUpdatePlan;

        // update dynamic plan
        reqPlanId = ReqPlanVersion::find(reqPO.PlanVersion).ReqPlanId;
        reqParameters = ReqParameters::find();
        if (reqParameters.autoUpdateDynamicPlan(reqPlanId))
        {
            reqPODynamic = reqPO.reqPOPlanId(reqParameters.CurrentReqPlanIdSchedDynamic,true);
            if (reqPODynamic)
            {
                // Firm the reqPODynamic planned order by using a derived class
                reqTransPOFirmKanbanUpdatePlan = ReqTransPOFirmKanbanUpdatePlan::newParameters(reqPODynamic,_reqTransSortedList);
                reqTransPOFirmKanbanUpdatePlan.run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFutures</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the future date and time for the specified <c>ReqTrans</c> records.
    /// </summary>
    /// <param name="_reqTransIssue">
    ///    A <c>ReqTrans</c> record that represents an issue requirement transaction.
    /// </param>
    /// <param name="_reqTransReceipt">
    ///    A <c>ReqTrans</c> record that represents a receipt requirement transaction.
    /// </param>
    protected void updateFutures(
        ReqTrans            _reqTransIssue,
        ReqTrans            _reqTransReceipt)
    {
        ReqSetupDim     reqSetupDim = reqPlanData.newReqSetupDimReqTrans(_reqTransIssue);

        _reqTransReceipt.setFuturesDateTimeReceipt(reqPlanData,reqSetupDim,true);
        _reqTransIssue.setFuturesDateTimeIssue(_reqTransReceipt,reqPlanData,reqSetupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePegging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes pegging from the planned order and creates new pegging for the created kanbans.
    /// </summary>
    /// <param name="_reqTransSortedList">
    ///    An instance of the <c>RecordSortedList</c> class that holds the <c>ReqTrans</c> records that
    ///    represent the created kanbans.
    /// </param>
    protected void updatePegging(RecordSortedList    _reqTransSortedList)
    {
        ReqTrans            reqTransCreated;

        boolean             moreRecords;
        str                 mapKey;

        List                listReqTransEqual;
        RecordInsertList    reqTransCovInsertList   = new RecordInsertList(tableNum(ReqTransCov));
        Map                 mapReqTransSorted       = new Map(Types::String,Types::Class);
        MapEnumerator       me;

        // loop the new created reqTrans and sort these in reverse bom level - then futures can be updated directly

        moreRecords = _reqTransSortedList.first(reqTransCreated);

        while (moreRecords)
        {
            mapKey = this.mapKey(reqTransCreated);
            if (! mapReqTransSorted.exists(mapKey))
            {
                listReqTransEqual = new List(Types::Record);
                mapReqTransSorted.insert(mapKey,listReqTransEqual);
            }
            else
            {
                listReqTransEqual = mapReqTransSorted.lookup(mapKey);
            }
            listReqTransEqual.addEnd(reqTransCreated);
            moreRecords = _reqTransSortedList.next(reqTransCreated);
        }

        me = mapReqTransSorted.getEnumerator();

        while (me.moveNext())
        {
            listReqTransEqual = me.currentValue();
            this.createReqTransCov(listReqTransEqual, reqTransCovInsertList);
        }

        reqTransCovInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequisitionLineReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the requisition lines (and creates respective references) for any
    /// requisition line issues covered by the kanbans that have just been firmed.
    /// </summary>
    /// <param name="_reqTransSortedList">
    /// List of ReqTrans of type kanban that were just firmed.
    /// </param>
    protected void updateRequisitionLineReferences(RecordSortedList _reqTransSortedList)
    {
        ReqTrans            reqTrans;
        boolean             moreRecords;

        RecordInsertList    requisitionLineRefInsertList;

        requisitionLineRefInsertList = new RecordInsertList(tableNum(RequisitionLineFirmedOrderLine));

        moreRecords = _reqTransSortedList.first(reqTrans);

        while (moreRecords)
        {
            ReqRequisitionsHelper::updateRequisitionLinesFromFirmedReqTrans(reqTrans, requisitionLineRefInsertList);

            moreRecords = _reqTransSortedList.next(reqTrans);
        }

        requisitionLineRefInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether specified parameters are correct.
    /// </summary>
    /// <returns>
    ///    true if parameters are correct; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        if (! reqPO)
        {
            return checkFailed(strFmt("@SYS89866","@SYS8597"));
        }

        if (! kanbanRule)
        {
            return checkFailed(strFmt("@SYS89866","@SYS131887"));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    private static ReqTransPOFirmKanban contruct()
    {
        return new ReqTransPOFirmKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqTransPOFirmKanban</c> class.
    /// </summary>
    /// <param name="_reqPO">
    ///    A <c>ReqPO</c> record that represents a planned kanban.
    /// </param>
    /// <param name="_kanbanRule">
    ///    A <c>KanbanRule</c> record that represents the connected kanban rule.
    /// </param>
    /// <returns>
    ///    An instance of the <c>ReqTransPOFirmKanban</c> class.
    /// </returns>
    public static ReqTransPOFirmKanban newParameters(
        ReqPO       _reqPO,
        KanbanRule  _kanbanRule)
    {
        ReqTransPOFirmKanban    reqTransPOFirmKanban;

        reqTransPOFirmKanban = ReqTransPOFirmKanban::contruct();
        reqTransPOFirmKanban.parmReqPO(_reqPO);
        reqTransPOFirmKanban.parmKanbanRule(_kanbanRule);

        return reqTransPOFirmKanban;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>