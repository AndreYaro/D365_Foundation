<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
[NettingProcessorTypeAttribute(NettingProcessorType::CustVendNetting)]
internal final class CustVendNettingProcessor extends AbstractNettingProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void main(Args _args)
    {
        CustVendNettingExecution execution = _args.record();
        NettingProcessorSandboxRunner::runInSandbox(
            NettingProcessorType::CustVendNetting,
            execution.RecId,
            execution.NettingDate,
            "@CashManagement:NettingPostingCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCalculator</Name>
				<Source><![CDATA[
    internal protected INettingAmountCalculator getDefaultCalculator()
    {
        return CustVendNettingComponentFactory::CustVendNettingAmountCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultJournalGenerator</Name>
				<Source><![CDATA[
    internal protected INettingJournalGenerator getDefaultJournalGenerator()
    {
        return CustVendNettingComponentFactory::CustVendNettingJournalGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityName</Name>
				<Source><![CDATA[
    internal protected str activityName()
    {
        return CustVendNettingInstrumentationConstants::CustVendNetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preprocess</Name>
				<Source><![CDATA[
    internal protected void preprocess(CustVendNettingExecution _execution)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNettingAmountDistribution</Name>
				<Source><![CDATA[
    internal protected NettingAmountDistribution constructNettingAmountDistribution(CustVendNettingExecution _execution)
    {
        return NettingAmountDistribution::constructFromCustVendNettingExecution(_execution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal protected boolean validate()
    {
        CustVendNettingExecution execution = CustVendNettingExecution::find(executionRecId);

        if (execution.ProcessingStatus != CustVendNettingProcessStatus::Ready || !execution.validateType(false))
        {
            throw error("@CashManagement:CustVendNettingInvalidStatus");
        }

        if (CustVendNettingExecution::hasActiveExecution(
            execution.CreditAccountNum,
            execution.CreditAccountType,
            execution.DebitAccountNum,
            execution.DebitAccountType,
            execution.CurrencyToProcess))
        {
            throw error("@CashManagement:CustVendNettingHasActiveRunning");
        }

        MainAccount mainAccount = MainAccount::findByLedgerDimension(execution.LedgerDimension);

        if (mainAccount.isBlockedForManualEntry())
        {
            throw error(strFmt("@SYS319027", mainAccount.MainAccountId));
        }

        if ((execution.CreditCompany != curExt() || execution.DebitCompany != curExt()) && !BankParameters::find().AllowNettingIntercompany)
        {
            throw error("@CashManagement:NettingIntercompanyExectuionValidation");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeSettlement</Name>
				<Source><![CDATA[
    internal protected void closeSettlement()
    {
        this.setCustVendTrans();

        if (custTransRecId)
        {
            changecompany(creditLine.Company)
            {
                this.closeCustSettlement(custTransRecId);
            }
        }

        if (vendTransRecId)
        {
            changecompany(debitLine.Company)
            {
                this.closeVendSettlement(vendTransRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExecution</Name>
				<Source><![CDATA[
    internal protected void updateExecution(CustVendNettingExecution _execution, LedgerJournalTable _journal)
    {
        _execution.selectForUpdate(true);
        _execution.LedgerJournalTable = _journal.RecId;
        _execution.JournalNum = _journal.JournalNum;

        _execution.CreditTransId = custTransRecId;
        _execution.CreditTransTableId = tableNum(CustTrans);

        _execution.DebitTransId = vendTransRecId;
        _execution.DebitTransTableId = tableNum(VendTrans);

        _execution.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResult</Name>
				<Source><![CDATA[
    internal protected void validateResult(CustVendNettingExecution _execution)
    {
        CustTrans custTrans = CustTrans::findByCompany(_execution.CreditCompany, _execution.CreditTransId);

        this.validateCustVendTransFullySettled(custTrans);

        VendTrans vendTrans = VendTrans::findByCompany(_execution.DebitCompany, _execution.DebitTransId);

        this.validateCustVendTransFullySettled(vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalStatus</Name>
				<Source><![CDATA[
    internal protected CustVendNettingProcessStatus getFinalStatus()
    {
        return CustVendNettingProcessStatus::Posted;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>