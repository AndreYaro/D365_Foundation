<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymentMethodEntityUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// General utility methods used across the <c>CustomerPaymentMethodEntity</c> and <c>VendorPaymentMethodEntity</c>.
/// </summary>
class CustVendPaymentMethodEntityUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDefaultAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>LedgerJournalACType</c> value based on settings.
    /// </summary>
    /// <param name = "_paymentMethodEntity"><c>CustomerPaymentMethodEntity</c> or <c>VendorPaymentMethodEntity</c> entity record.</param>
    /// <returns><c>LedgerJournalACType</c> value.</returns>
    public static LedgerJournalACType getDefaultAccountType(common _paymentMethodEntity)
    {
        CustomerPaymentMethodEntity customerPaymentMethodEntity = _paymentMethodEntity as CustomerPaymentMethodEntity;
        VendorPaymentMethodEntity vendorPaymentMethodEntity = _paymentMethodEntity as VendorPaymentMethodEntity;
        
        if (!(customerPaymentMethodEntity || vendorPaymentMethodEntity))
        {
            throw Exception::FunctionArgument;
        }
            
        FurtherPostingType futherPostingType = customerPaymentMethodEntity ? customerPaymentMethodEntity.BridgingPostingEnabled
                                                                        : vendorPaymentMethodEntity.BridgingPostingEnabled;
        LedgerJournalACType accountType = customerPaymentMethodEntity ? customerPaymentMethodEntity.AccountType
                                                                        : vendorPaymentMethodEntity.AccountType;

        return futherPostingType ? LedgerJournalACType::Ledger : accountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAccountDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default <c>DimensionDisplayValue</c> value based on settings.
    /// </summary>
    /// <param name = "_paymentMethodEntity"><c>CustomerPaymentMethodEntity</c> or <c>VendorPaymentMethodEntity</c> entity record.</param>
    /// <returns><c>DimensionDisplayValue</c> value.</returns>
    public static DimensionDisplayValue getDefaultAccountDisplayValue(common _paymentMethodEntity)
    {
        DimensionDisplayValue retVal;
        CustomerPaymentMethodEntity customerPaymentMethodEntity = _paymentMethodEntity as CustomerPaymentMethodEntity;
        VendorPaymentMethodEntity vendorPaymentMethodEntity = _paymentMethodEntity as VendorPaymentMethodEntity;

        if (!(customerPaymentMethodEntity || vendorPaymentMethodEntity))
        {
            throw Exception::FunctionArgument;
        }
        
        LedgerJournalACType accountType = CustVendPaymentMethodEntityUtility::getDefaultAccountType(_paymentMethodEntity);

        if (accountType == LedgerJournalACType::Ledger)
        {
            FurtherPostingType futherPostingType = customerPaymentMethodEntity ? customerPaymentMethodEntity.BridgingPostingEnabled
                                                                            : vendorPaymentMethodEntity.BridgingPostingEnabled;
            LedgerDimensionDefaultAccount dimensionAccount;

            if (futherPostingType)
            {
                dimensionAccount = customerPaymentMethodEntity ? customerPaymentMethodEntity.BridgingPostingAccount
                                                                : vendorPaymentMethodEntity.BridgingPostingAccount;
            }
            else
            {
                dimensionAccount =  customerPaymentMethodEntity ? customerPaymentMethodEntity.PaymentAccount
                                                                : vendorPaymentMethodEntity.PaymentAccount;
            }

            // Resolve the default account to a full ledger dimension and format to match the entity integration format (as opposed to the app UI format)
            LedgerDimensionAccount ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(dimensionAccount);
   
            if (ledgerDimension)
            {
                DimensionCombinationEntity dimensionCombinationEntity;
                select firstonly DisplayValue
                    from dimensionCombinationEntity
                    where dimensionCombinationEntity.RecId == ledgerDimension;
                retVal = dimensionCombinationEntity.DisplayValue;
            }
        }
        else
        {
            retVal = customerPaymentMethodEntity ? customerPaymentMethodEntity.PaymentAccountDisplayValue
                                                : vendorPaymentMethodEntity.PaymentAccountDisplayValue;;
        }

        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>