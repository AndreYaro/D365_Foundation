<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionConfigurationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventoryTransactionConfigurationProvider</c> class allows to check if the new warehouse inventory stack can be used.
/// </summary>
public final class WHSInventoryTransactionConfigurationProvider
{
    private static Map workTransTypeToWarehouseTransactionScenarioMap = new Map(Types::Enum, Types::Enum);
    private static Map isWarehouseInventoryTransactionStackEnabledMapCached = new Map(Types::String, Types::Enum);  // cache per-company.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldUseWorkInventoryTransactionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the work inventory transaction query API should be used for the given warehouse work.
    /// </summary>
    /// <param name = "_workId">An id of the work to check.</param>
    /// <returns>true if the work inventory transaction query API should be used; otherwise, false.</returns>
    /// <remarks>Note, that the inventory transaction query API can be used also for works which use <c>InventTrans</c> as a transaction mechanism.</remarks>
    internal static boolean shouldUseWorkInventoryTransactionQuery(WHSWorkId _workId)
    {
        return WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(_workId)
            || WHSWorkInventoryTransactionQueryEnforceUseOfUserActionsFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseInventoryTransactionStackEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the warehouse-specific inventory transactions are enabled.
    /// </summary>
    /// <returns>true if the warehouse-specific inventory transactions are enabled; otherwise, false.</returns>
    /// <remarks>
    /// Results are cached per-company. Results are dependent on the current company parameters.
    /// </remarks>
    internal static boolean isWarehouseInventoryTransactionStackEnabled()
    {
        NoYes isEnabled = NoYes::No;

        CompanyId curDataAreaId = curExt();

        if (isWarehouseInventoryTransactionStackEnabledMapCached.exists(curDataAreaId))
        {
            isEnabled = isWarehouseInventoryTransactionStackEnabledMapCached.lookup(curDataAreaId);
        }
        else
        {
            if (WHSInventoryScenarioInventoryTransactionMechanism::anyScenarioUsesWarehouseSpecificInventoryTransactions()   // any scenario uses warehosue-specific transactions.
                || WHSInventoryTransactionView::anyExists())   // any existing warehouse-specific transactions exist.
            {
                isEnabled = NoYes::Yes;
            }
            else
            {
                isEnabled = NoYes::No;
            }

            // save in cache.
            isWarehouseInventoryTransactionStackEnabledMapCached.insert(curDataAreaId, isEnabled);
        }

        return isEnabled == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetIsWarehouseInventoryTransactionStackEnabledCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the cached value if the warehouse-specific inventory transactions are enabled.
    /// </summary>
    /// <remarks>
    /// Reset cached value for the current company.
    /// </remarks>
    [Hookable(false)]
    internal static void resetIsWarehouseInventoryTransactionStackEnabledCache()
    {
        CompanyId curDataAreaId = curExt();

        if (isWarehouseInventoryTransactionStackEnabledMapCached.exists(curDataAreaId))
        {
            isWarehouseInventoryTransactionStackEnabledMapCached.remove(curDataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseWarehouseInventoryTransactionStack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the warehouse-specific inventory transactions should be used for the given warehouse work.
    /// </summary>
    /// <param name = "_workId">An id of the work to check.</param>
    /// <returns>true if the warehouse-specific inventory transactions should be used; otherwise, false.</returns>
    [Hookable(false)]
    public static boolean shouldUseWarehouseInventoryTransactionStack(WHSWorkId _workId)
    {
        return WHSInventoryTransactionConfigurationProvider::findOrCalculateShouldUseWarehouseInventoryTransactionStack(_workId, WHSInventoryTransactionReferenceCategoryEnum::Work);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseWarehouseInventoryTransactionStackForContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the warehouse-specific inventory transactions should be used for the given warehouse container.
    /// </summary>
    /// <param name = "_containerId">An id of the container to check.</param>
    /// <returns>true if the warehouse-specific inventory transactions should be used; otherwise, false.</returns>
    internal static boolean shouldUseWarehouseInventoryTransactionStackForContainer(WHSContainerId _containerId)
    {
        return WHSInventoryTransactionConfigurationProvider::findOrCalculateShouldUseWarehouseInventoryTransactionStack(_containerId, WHSInventoryTransactionReferenceCategoryEnum::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCalculateShouldUseWarehouseInventoryTransactionStack</Name>
				<Source><![CDATA[
    private static boolean findOrCalculateShouldUseWarehouseInventoryTransactionStack(str _identifier, WHSInventoryTransactionReferenceCategoryEnum _category)
    {
        boolean ret = false;
        UnknownNoYes cachedValue = WHSInventoryTransactionConfigurationProvider::getShouldUseWarehouseInventoryTransactionStackFromCache(_identifier, _category);

        if (cachedValue == UnknownNoYes::Unknown)
        {
            ret = WHSInventoryTransactionConfigurationProvider::findShouldUseWarehouseInventoryTransactionStack(_identifier, _category);

            WHSInventoryTransactionConfigurationProvider::setShouldUseWarehouseInventoryTransactionStackInCache(_identifier, ret, _category);
        }
        else
        {
            ret = cachedValue == UnknownNoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findShouldUseWarehouseInventoryTransactionStack</Name>
				<Source><![CDATA[
    private static boolean findShouldUseWarehouseInventoryTransactionStack(str _identifier, WHSInventoryTransactionReferenceCategoryEnum _category)
    {
        switch (_category)
        {
            case WHSInventoryTransactionReferenceCategoryEnum::Work :
                WHSWorkTable work = WHSWorkTable::find(_identifier);
                WHSEnforceInventoryTransactionMechanismContext context = WHSEnforceInventoryTransactionMechanismContext::current();

                if (!work && context && WHSInventTransConfigProviderGetWorkInventTransMechanismFlight::instance().isEnabled())
                {
                    return context.parmInventoryTransactionMechanismToEnforce() == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction;
                }

                if (!work && !context && WHSInventTransConfigProviderNoWorkOrContextThrowErrorFlight::instance().isEnabled())
                {
                    throw error(strFmt("@WAX:WHSUnableDetermineWorkTransMechanism", _identifier));
                }

                return work.InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction;

            case WHSInventoryTransactionReferenceCategoryEnum::Container :
                return WHSContainerTable::findByContainerId(_identifier).InventoryTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseAppropriateTransactionMechanismForContainer</Name>
				<Source><![CDATA[
    internal static WHSInventoryTransactionMechanismEnum chooseAppropriateTransactionMechanismForContainer()
    {
        // Additional checks will go here like:
        // - work type is supported;
        // - check configuration settings;
        // - unsupported features are not activated;
        // - etc.

        WHSInventoryTransactionMechanismEnum chosenTransactionMechanism = WHSInventoryTransactionMechanismEnum::InventTrans;

        if (WHSEnforceInventoryTransactionMechanismContext::current())
        {
            chosenTransactionMechanism = WHSEnforceInventoryTransactionMechanismContext::current().parmInventoryTransactionMechanismToEnforce();
        }
        else 
        {
            chosenTransactionMechanism = WHSInventoryTransactionConfigurationProvider::chooseTransactionMechanismBasedOnInventoryTransactionScenario(WHSInventoryTransactionScenarioEnum::Container);
        }

        if (chosenTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction)
        {
            if (WHSInventoryTransactionConfigurationProvider::isWarehouseExecutionWorkloadEnabled())
            {
                chosenTransactionMechanism = WHSInventoryTransactionMechanismEnum::InventTrans;
            }
        }

        return chosenTransactionMechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseAppropriateTransactionMechanism</Name>
				<Source><![CDATA[
    internal static WHSInventoryTransactionMechanismEnum chooseAppropriateTransactionMechanism(WHSWorkTable _workTable)
    {
        // Additional checks will go here like:
        // - work type is supported;
        // - check configuration settings;
        // - unsupported features are not activated;
        // - etc.

        WHSInventoryTransactionMechanismEnum chosenTransactionMechanism = WHSInventoryTransactionMechanismEnum::InventTrans;

        if (WHSEnforceInventoryTransactionMechanismContext::current())
        {
            chosenTransactionMechanism = WHSEnforceInventoryTransactionMechanismContext::current().parmInventoryTransactionMechanismToEnforce();
        }
        else
        {
            chosenTransactionMechanism = WHSInventoryTransactionConfigurationProvider::chooseTransactionMechanismBasedOnWorkTransType(_workTable.WorkTransType);
        }

        if (chosenTransactionMechanism == WHSInventoryTransactionMechanismEnum::WHSInventoryTransaction)
        {
            if (WHSInventoryTransactionConfigurationProvider::isWarehouseExecutionWorkloadEnabled())
            {
                chosenTransactionMechanism = WHSInventoryTransactionMechanismEnum::InventTrans;
            }
        }

        return chosenTransactionMechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseTransactionMechanismBasedOnWorkTransType</Name>
				<Source><![CDATA[
    private static WHSInventoryTransactionMechanismEnum chooseTransactionMechanismBasedOnWorkTransType(WHSWorkTransType _workTransType)
    {
        // default is the InventTrans-based stack.
        WHSInventoryTransactionMechanismEnum chosenTransactionMechanism = WHSInventoryTransactionMechanismEnum::InventTrans;

        if (workTransTypeToWarehouseTransactionScenarioMap.exists(_workTransType))
        {
            WHSInventoryTransactionScenarioEnum inventoryTransactionScenario = workTransTypeToWarehouseTransactionScenarioMap.lookup(_workTransType);
            chosenTransactionMechanism = WHSInventoryTransactionConfigurationProvider::chooseTransactionMechanismBasedOnInventoryTransactionScenario(inventoryTransactionScenario);
        }

        return chosenTransactionMechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseTransactionMechanismBasedOnInventoryTransactionScenario</Name>
				<Source><![CDATA[
    private static WHSInventoryTransactionMechanismEnum chooseTransactionMechanismBasedOnInventoryTransactionScenario(WHSInventoryTransactionScenarioEnum _inventoryTransactionScenario)
    {
        WHSInventoryScenarioInventoryTransactionMechanism inventoryScenarioInventoryTransactionMechanism;

        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSInventoryTransactionConfigurationProvider));

        using (var activityContext = logger.inventoryTransactionConfigurationProviderActivities().chooseTransactionMechanismBasedOnInventoryTransactionScenario())
        {
            inventoryScenarioInventoryTransactionMechanism = WHSInventoryScenarioInventoryTransactionMechanism::find(_inventoryTransactionScenario);
           
            logger.inventoryTransactionConfigurationProviderActivities().logInventoryScenarioInventoryTransactionMechanism(activityContext, inventoryScenarioInventoryTransactionMechanism);
        }

        return inventoryScenarioInventoryTransactionMechanism.InventoryTransactionMechanism;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseExecutionWorkloadEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the warehouse execution workload is enabled.
    /// </summary>
    /// <returns>true if the warehouse execution workload is enabled; false, otherwise.</returns>
    /// <remarks>
    /// This method is en extension point. The WarehouseExecutionWorkload model extends it, reads the configuration and returns correct result.
    /// </remarks>
    [Wrappable(true), Replaceable(true)]
    internal static boolean isWarehouseExecutionWorkloadEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShouldUseWarehouseInventoryTransactionStackInCache</Name>
				<Source><![CDATA[
    private static void setShouldUseWarehouseInventoryTransactionStackInCache(str _identifier, boolean _shouldUseStack, WHSInventoryTransactionReferenceCategoryEnum _category)
    {
        SysTransactionScopeCache::set(enum2Str(_category) + classStr(WHSInventoryTransactionConfigurationProvider), _identifier, _shouldUseStack ? UnknownNoYes::Yes : UnknownNoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShouldUseWarehouseInventoryTransactionStackFromCache</Name>
				<Source><![CDATA[
    private static UnknownNoYes getShouldUseWarehouseInventoryTransactionStackFromCache(str _identifier, WHSInventoryTransactionReferenceCategoryEnum _category)
    {
        return SysTransactionScopeCache::get(enum2Str(_category) + classStr(WHSInventoryTransactionConfigurationProvider), _identifier, UnknownNoYes::Unknown);
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        WHSInventoryTransactionConfigurationProvider::initWorkTransTypeToTransactionScenarioMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTransTypeToTransactionScenarioMap</Name>
				<Source><![CDATA[
    public static void initWorkTransTypeToTransactionScenarioMap()
    {
        // WorkCancel, CycleCount, CycleCountAccepted and Packing work trans types are not mapped, as they do not generate transactions
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::Purch, WHSInventoryTransactionScenarioEnum::Purch);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::Sales, WHSInventoryTransactionScenarioEnum::Sales);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::ProdPick, WHSInventoryTransactionScenarioEnum::ProdPick);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::ProdPut, WHSInventoryTransactionScenarioEnum::ProdPut);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::ProdProcessPut, WHSInventoryTransactionScenarioEnum::ProdProcessPut);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::TransferIssue, WHSInventoryTransactionScenarioEnum::TransferIssue);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::TransferReceipt, WHSInventoryTransactionScenarioEnum::TransferReceipt);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::Invent, WHSInventoryTransactionScenarioEnum::Invent);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::Replenishment, WHSInventoryTransactionScenarioEnum::Replenishment);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::ReturnOrder, WHSInventoryTransactionScenarioEnum::ReturnOrder);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::KanbanPick, WHSInventoryTransactionScenarioEnum::KanbanPick);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::KanbanPut, WHSInventoryTransactionScenarioEnum::KanbanPut);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::PackedContainerPicking, WHSInventoryTransactionScenarioEnum::PackedContainerPicking);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::SortedInventoryPicking, WHSInventoryTransactionScenarioEnum::SortedInventoryPicking);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::CrossDocking, WHSInventoryTransactionScenarioEnum::CrossDocking);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::QualityItemSampling, WHSInventoryTransactionScenarioEnum::QualityItemSampling);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::QualityOrder, WHSInventoryTransactionScenarioEnum::QualityOrder);
        WHSInventoryTransactionConfigurationProvider::addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType::QualityInQualityCheck, WHSInventoryTransactionScenarioEnum::QualityInQualityCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToWorkTransTypeToTransactionScenarioMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void addToWorkTransTypeToTransactionScenarioMap(WHSWorkTransType workTransType, WHSInventoryTransactionScenarioEnum scenario)
    {
        workTransTypeToWarehouseTransactionScenarioMap.add(workTransType, scenario);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>