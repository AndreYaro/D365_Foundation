<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlQtyToPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlQtyToPick</c> class is responsible for handling the quantity to pick controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#QtyToPick)]
class WhsControlQtyToPick extends WhsControl
{
    InventQty qtyToPickInvent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmQtyToPickInvent</Name>
				<Source><![CDATA[
    public InventQty parmQtyToPickInvent()
    {
        return qtyToPickInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        Qty qtyToPick = WHSWorkExecuteDisplay::str2numDisplay(data);
        ItemId itemId = fieldValues.parmItemId();

        fieldValues.parmQtyToPick(data);
        var inventDimIdProduct = controlData.findInventDimIdProduct();
        qtyToPickInvent = WHSCatchWeightHelper::convertInventQuantity(context.workLine.ItemId, fieldValues.parmUOM(), qtyToPick, inventDimIdProduct);

        if ((step == #ShortPick && qtyToPickInvent != 0) &&
            this.negativeInventoryNotAllowed(itemId, fieldValues.parmInventLocationId(), fieldValues.parmWMSLocationId()))
        {
            if (WMSLocation::find(fieldValues.parmWMSLocationId(), fieldValues.parmInventLocationId()).whsLocationIsLPControlled())
            {
                InventDimId inventDimIdFromValues = controlData.findInventDimIdInclWorkLine();
                Qty qtyOnLicensePlate = WHSInvent::getQtyOnLicensePlate(fieldValues.parmLicensePlateId(), fieldValues.parmItemId(), inventDimIdFromValues, fieldValues.parmWMSLocationId());
                if (qtyOnLicensePlate < qtyToPickInvent)
                {
                    return this.fail("@WAX:InsufficientQtyOnLicensePlate");
                }
            }
            else if (!controlData.validateItemInLocation(itemId))
            {
                return this.fail("@WAX1172");
            }
        }

        if (!qtyToPickInvent 
            && !pass.exists(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed)
			&& ((fieldValues.exists(#ProductConfirmation) 
                    && !fieldValues.lookup(#ProductConfirmation))
                || (pass.exists(#ProductConfirmation) 
                    && !pass.lookup(#ProductConfirmation)))
            && (InventTable::find(context.workLine.ItemId).productSubtype() == EcoResProductSubtype::Product))
        {
            fieldValues.insert(#ProductConfirmation, context.workLine.ItemId);
        }

        if (!super())
        {
            return false;
        }

        if (mode != WHSWorkExecuteMode::ClusterPicking && mode != WHSWorkExecuteMode::SystemDirectedClusterPicking)
        {
            if (!this.isQtyToPickValid())
            {
                return this.fail("@WAX1172");
            }
        }

        if (step == #ShortPick 
            && fieldValues.parmQtyToPick() == 0 
            && fieldValues.parmLicensePlateId() == '')
        {
            fieldValues.remove(#LicensePlateId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>negativeInventoryNotAllowed</Name>
				<Source><![CDATA[
    private boolean negativeInventoryNotAllowed(ItemId _itemId, InventLocationId _inventLocationId, WMSLocationId _wmsLocationId)
    {
        return  (!InventTable::find(_itemId).whsAllowPhysNeg()
            || !WMSLocation::find(_wmsLocationId, _inventLocationId).whsLocationProfile().AllowNegative);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQtyToPickValid</Name>
				<Source><![CDATA[
    private boolean isQtyToPickValid()
    {
        if (qtyToPickInvent < 0)
        {
            return false;
        }

        if (pass.isGroupPick())
        {
            if (WHSGroupPickLineDetails::newFromWorkLine(context.workLine).inventQty - qtyToPickInvent < 0)
            {
                return false;
            }
        }
        else
        {
            if ((context.workLine.InventQtyRemain - qtyToPickInvent < 0)
                 && step != #OverpickStep)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>