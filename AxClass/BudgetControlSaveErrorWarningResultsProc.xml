<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSaveErrorWarningResultsProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlSaveErrorWarningResultsProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlSaveErrorWarningResultsProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlSaveErrorWarningResultsProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlSaveErrorWarningResultsProc]
    (
         @PartitionId           BIGINT
        ,@ResultRecordsArray    VARCHAR(3860) -- 20 positions with a position size of 193 each
        ,@IsOpenTranRequired    INT = 1
        ,@logErrorFl            CHAR(1) = 'Y'
    )

    AS

    SET NOCOUNT ON;

    DECLARE  @SPName                            VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode                           INT = 0
            ,@ErrorTrying                       NVARCHAR(4000) -- string describing command that failed
            ,@Error_Number                      INT -- from ERROR_NUMBER()
            ,@Error_Line                        INT -- from ERROR_LINE()
            ,@Error_State                       INT = 1 -- from ERROR_STATE()
            ,@Error_Severity                    INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure                   NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage                      NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@isIncludeErrorLineNum             CHAR(1) = 'Y'
            ,@TranCount                         INT
            ,@BudgetControlBuildErrorMsg        NVARCHAR(4000)

            ,@ResultRecordsArrayLength          INT
            ,@ResultRecordsArrayIndex           INT = 0

            ,@ResultRecordLength                INT = 193 -- Total length of a single array position

            ,@BudgetSourceStart                 INT = 1
            ,@BudgetSourceLength                INT = 20
            ,@SourceLedgerDimStart              INT = 21
            ,@SourceLedgerDimLength             INT = 20
            ,@AmountOverThresholdStart          INT = 41
            ,@AmountOverThresholdLength         INT = 32
            ,@AmountOverAvailableStart          INT = 73
            ,@AmountOverAvailableLength         INT = 32
            ,@SequenceNumberStart               INT = 105
            ,@SequenceNumberLength              INT = 20
            ,@ControlLedgerDimStart             INT = 125
            ,@ControlLedgerDimLength            INT = 20
            ,@PrimaryLedgerStart                INT = 145
            ,@PrimaryLedgerLength               INT = 20
            ,@BudgetGroupMemberStart            INT = 165
            ,@BudgetGroupMemberLength           INT = 20
            ,@CheckResultStart                  INT = 185
            ,@CheckResultLength                 INT = 3
            ,@CheckResultErrorWarningStart      INT = 188
            ,@CheckResultErrorWarningLength     INT = 3
            ,@CheckResultErrorWarningTypeStart  INT = 191
            ,@CheckResultErrorWarningTypeLength INT = 3
    ;

    -- Check that a transaction is open
    SELECT @TranCount = @@TRANCOUNT;

    IF @IsOpenTranRequired = 1
    AND @TranCount = 0
      BEGIN
        SELECT @ErrorTrying = N'Cannot execute without an open transaction, @@TRANCOUNT=0';
        GOTO lblErrorTrap;
      END;

    -- Check that the passed in parameter is of the correct size
    SELECT @ResultRecordsArrayLength = LEN(@ResultRecordsArray);

    IF @ResultRecordsArrayLength = 0
    OR @ResultRecordsArrayLength % @ResultRecordLength > 0
      BEGIN
        SELECT @ErrorTrying = N'@ResultRecordsArrayLength length must be a non-zero product of '
                            + CAST(@ResultRecordLength AS NVARCHAR)
                            + N', actual length=' + CAST(@ResultRecordsArrayLength AS NVARCHAR);
        GOTO lblErrorTrap;
      END;

    BEGIN TRY
        WHILE @ResultRecordsArrayIndex < @ResultRecordsArrayLength
          BEGIN
            INSERT INTO BUDGETCHECKRESULTERRORWARNINGDETAIL
                ([BUDGETSOURCE]
                ,[BUDGETSOURCELEDGERDIMENSION]
                ,[ACCOUNTINGCURRENCYAMOUNTOVERTHRESHOLD]
                ,[ACCOUNTINGCURRENCYAMOUNTOVERAVAILABLE]
                ,[SEQUENCENUMBER]
                ,[BUDGETCONTROLLEDGERDIMENSION]
                ,[PRIMARYLEDGER]
                ,[BUDGETGROUPMEMBER]
                ,[CHECKRESULT]
                ,[CHECKRESULTERRORWARNINGTYPE]
                ,[CHECKRESULTERRORWARNING]
                ,[PARTITION]
                )
            SELECT
                 CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @BudgetSourceStart, @BudgetSourceLength) AS BIGINT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @SourceLedgerDimStart, @SourceLedgerDimLength) AS BIGINT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @AmountOverThresholdStart, @AmountOverThresholdLength) AS NUMERIC(32,16))
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @AmountOverAvailableStart, @AmountOverAvailableLength) AS NUMERIC(32,16))
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @SequenceNumberStart, @SequenceNumberLength) AS BIGINT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @ControlLedgerDimStart, @ControlLedgerDimLength) AS BIGINT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @PrimaryLedgerStart, @PrimaryLedgerLength) AS BIGINT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @BudgetGroupMemberStart, @BudgetGroupMemberLength) AS BIGINT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @CheckResultStart, @CheckResultLength) AS INT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @CheckResultErrorWarningStart, @CheckResultErrorWarningLength) AS INT)
                ,CAST(SUBSTRING(@ResultRecordsArray, @ResultRecordsArrayIndex + @CheckResultErrorWarningTypeStart, @CheckResultErrorWarningTypeLength) AS INT)
                ,@PartitionId;

            SELECT @ResultRecordsArrayIndex = @ResultRecordsArrayIndex + @ResultRecordLength;
          END;
    END TRY
    BEGIN CATCH
        SELECT @ErrorTrying = N'INSERT INTO BUDGETCHECKRESULTERRORWARNINGDETAIL failed at @ResultRecordsArrayIndex='
                            + CAST(@ResultRecordsArrayIndex AS NVARCHAR);

        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;

    --lblNormalTerm:
    SELECT @RetCode = 0;
    SELECT @ErrorTrying = N'BudgetControlSaveErrorWaringResultsProc completed.';
    
    SELECT @RetCode, @ErrorTrying;

    RETURN (0)

    -- error termination

    lblErrorTrap:

    EXEC [BudgetControlBuildErrorMessageProc] 
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@isIncludeErrorLineNum = @isIncludeErrorLineNum
        ,@ReturnErrorMsg		= @BudgetControlBuildErrorMsg OUTPUT
    ;

    IF @RetCode = 0
        BEGIN
            SELECT @RetCode = -1;
        END;

    SELECT @RetCode, @BudgetControlBuildErrorMsg;

    RETURN (@RetCode)
        ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>