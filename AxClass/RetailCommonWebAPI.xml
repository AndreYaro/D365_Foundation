<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCommonWebAPI</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCommonWebAPI</c> class is the class grouping several over-the-web communication
/// methods like sending an HTTP POST or GET requests and transforming the response to X++ data structures.
/// </summary>
class RetailCommonWebAPI
{
    private static const str AuthenticationRecIdParameterName = "RecId";

    #define.MethodPost("POST")
    #define.MethodDelete("DELETE")
    #define.FormDataBoundary("---------------------------7db2511d20514")
    #define.FormContentType("multipart/form-data; boundary=")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get retail web access request.
    /// </summary>
    /// <param name="_request">
    /// Retail web request.
    /// </param>
    /// <returns>
    /// Web response to access.
    /// </returns>
    public RetailWebResponse getResponse(RetailWebRequest _request)
    {
        System.Net.HttpWebRequest request = null;
        System.Net.HttpWebResponse response = null;
        CLRObject webResponse;
        System.Net.WebHeaderCollection headers;
        System.IO.MemoryStream stream;
        Binary requestContent;
        str responseData;
        System.Exception ex;
        System.Net.WebException webException;
        RetailWebResponse retailWebResponse;
        int httpStatusCode;
        str contentType;

        try
        {
            request = System.Net.WebRequest::Create(_request.parmUrl()) as System.Net.HttpWebRequest;

            if (strLen(_request.parmMethod()) > 0)
            {
                request.set_Method(_request.parmMethod());
            }

            headers = request.get_Headers();
            if (strLen(_request.parmHeader()) > 0)
            {
                headers.Add(_request.parmHeader());
            }

            if (strLen(_request.parmContentType()) > 0)
            {
                request.set_ContentType(_request.parmContentType());
            }

            requestContent = _request.parmContent();
            if (requestContent)
            {
                stream = requestContent.getMemoryStream();
                RetailCommonWebAPI::writeRequestData(request, stream.ToArray());
            }

            webResponse = request.GetResponse();
            response = webResponse as System.Net.HttpWebResponse;
        }
        catch (Exception::CLRError)
        {
            ex = ClrInterop::getLastException();
            if (ex != null)
            {
                ex = ex.get_InnerException();
                if ((ex != null) && (ex is System.Net.WebException))
                {
                    webException = ex as System.Net.WebException;
                    webResponse = webException.get_Response();
                    response = webResponse as System.Net.HttpWebResponse;
                }
            }
        }

        responseData = RetailCommonWebAPI::readResponseData(response);
        response.Close();

        httpStatusCode = response.get_StatusCode();

        contentType = response.get_ContentType();
        retailWebResponse = new RetailWebResponse(httpStatusCode, responseData, contentType);

        return retailWebResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDeleteRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs HTTP request using the DELETE method.
    /// </summary>
    /// <param name="_requestUrl">
    /// The URL of the end-point to issue the request to
    /// </param>
    /// <returns>
    /// Returns instance of the <c>RetailWebResponse</c> class with results of the HTTP request, such as
    /// HTTP status code and raw response data.
    /// </returns>
    public RetailWebResponse makeDeleteRequest(str _requestUrl)
    {
        RetailWebRequest request = RetailWebRequest::newUrl(_requestUrl);
        request.parmMethod(#MethodDelete);
        return this.getResponse(request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFormPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs HTTP request using the POST method and content encoded using
    /// multipart/form-data encoding.
    /// This method allows to provide  a Map of key/value pairs
    /// for data representable as a text using the <c>_strFields</c> parameter,
    /// as well as a Map of key/value pairs for binary data using the <c>_docFields</c> parameter.
    /// Optionally, a custom HTTP header can be set through the <c>_header</c> parameter.
    /// </summary>
    /// <param name="_requestUrl">
    /// The URL of the end-point to issue the request to
    /// </param>
    /// <param name="_strFields">
    /// The Map of key/value pairs for data representable as text.
    /// The key and value must be URL-encoded.
    /// </param>
    /// <param name="_docFields">
    /// The Map of key/value pairs for binary data.
    /// The key must be URL-encoded. The value is either a RefId of the DocuRef record
    /// of the document to send, or an instance of the <c>RetailMediaFileDescription</c> class.
    /// </param>
    /// <param name="_header">
    /// The optional HTTP header to include into the request.
    /// </param>
    /// <returns>
    /// Returns instance of the <c>RetailWebResponse</c> class with results of the HTTP request, such as
    /// HTTP status code and raw response data.
    /// </returns>
    public RetailWebResponse makeFormPost(str _requestUrl, Map _strFields, Map _docFields, str _header = '')
    {
        RetailWebRequest request = RetailWebRequest::newUrl(_requestUrl);
        System.Byte[] bytes;

        bytes = RetailCommonWebAPI::getMultipartFormData(_strFields, _docFields);

        /*
            Some web-servers, for example, Twitter's API servers, does not support the 100-Continue behavior
            as described in IETF RFC 2616 Section 10.1.1.
        */
        System.Net.ServicePointManager::set_Expect100Continue(false);

        request.parmMethod(#MethodPost);
        request.parmHeader(_header);
        request.parmContentType(#FormContentType + #FormDataBoundary);
        request.setContentBytes(bytes);

        return this.getResponse(request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makePostRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs HTTP request using the POST method.
    /// This method allows to provide the raw data using the <c>_postData</c> parameter.
    /// Note that the data will be encoded with the UTF-8 encoding.
    /// Optionally, a custom HTTP header can be set through the <c>_header</c> parameter.
    /// The default content type can be overriden using the optional <c>_contentType</c> parameter.
    /// </summary>
    /// <param name="_requestUrl">
    /// The URL of the end-point to issue the request to
    /// </param>
    /// <param name="_postData">
    /// The raw data. Note that the data will be encoded with the UTF-8 encoding.
    /// </param>
    /// <param name="_header">
    /// The optional HTTP header to include into the request.
    /// </param>
    /// <param name="_contentType">
    /// The optional parameter. If supplued, will override the default content type
    /// </param>
    /// <returns>
    /// Returns instance of the <c>RetailWebResponse</c> class with results of the HTTP request, such as
    /// HTTP status code and raw response data.
    /// </returns>
    public RetailWebResponse makePostRequest(str _requestUrl, str _postData, str _header = '', str _contentType = '')
    {
        RetailWebRequest request = RetailWebRequest::newUrl(_requestUrl);
        System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();

        request.parmMethod(#MethodPost);
        request.parmHeader(_header);
        request.parmContentType(_contentType);
        if (strLen(_postData) > 0)
        {
            request.setContentBytes(encoding.GetBytes(_postData));
        }

        return this.getResponse(request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs HTTP request using the GET method.
    /// </summary>
    /// <param name="_requestUrl">
    /// The URL of the end-point to issue the request to
    /// </param>
    /// <returns>
    /// Returns instance of the <c>RetailWebResponse</c> class with results of the HTTP request, such as
    /// HTTP status code and raw response data.
    /// </returns>
    public RetailWebResponse makeRequest(str _requestUrl)
    {
        RetailWebRequest request = RetailWebRequest::newUrl(_requestUrl);

        return this.getResponse(request);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailCommonWebAPI construct()
    {
        return new RetailCommonWebAPI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCLRObjectToContainer</Name>
				<Source><![CDATA[
    private static container convertCLRObjectToContainer(CLRObject _clrObject)
    {
        System.Type valueType;
        container packedValue;

        if (_clrObject)
        {
            valueType = _clrObject.GetType();

            if (_clrObject is System.Array)
            {
                List arrayValue = RetailCommonWebAPI::getList(_clrObject);
                packedValue = arrayValue.pack();
            }
            else if (!valueType.get_IsValueType() && !(_clrObject is System.String))
            {
                Map complexValue = RetailCommonWebAPI::getMap(_clrObject);
                packedValue = complexValue.pack();
            }
            else if (_clrObject is System.DateTime)
            {
                str stringValue = DateTimeUtil::toStr(_clrObject);
                packedValue = [stringValue];
            }
        }

        if (!_clrObject)
        {
            packedValue = [''];
        }
        else if (conLen(packedValue) == 0)
        {
            str stringValue = _clrObject;
            packedValue = [stringValue];
        }

        return packedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getList</Name>
				<Source><![CDATA[
    private static List getList(CLRObject _array)
    {
        List result;
        container packedValue;

        System.Collections.IEnumerator itemsEnumerator;
        System.Array deserializedArray;
        CLRObject value;

        deserializedArray = _array;
        itemsEnumerator = deserializedArray.GetEnumerator();

        result = new List(Types::Container);

        while (itemsEnumerator.MoveNext())
        {
            value = itemsEnumerator.get_Current();
            packedValue = RetailCommonWebAPI::convertCLRObjectToContainer(value);
            result.addEnd(packedValue);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMap</Name>
				<Source><![CDATA[
    private static Map getMap(CLRObject deserializedCollection)
    {
        Map result;
        System.Collections.ICollection keys;
        System.Collections.IEnumerator keysEnumerator;
        str key;
        CLRObject value;
        container packedValue;

        keys = deserializedCollection.get_Keys();
        keysEnumerator = keys.GetEnumerator();

        result = new Map(Types::String, Types::Container);

        while (keysEnumerator.MoveNext())
        {
            key = keysEnumerator.get_Current();
            value = deserializedCollection.get_Item(key);

            packedValue = RetailCommonWebAPI::convertCLRObjectToContainer(value);
            result.insert(key, packedValue);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapFromJsonString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decodes JSON-encoded object tree represented as a string
    /// </summary>
    /// <param name="_jsonString">
    /// JSON-encoded object tree represented as a string
    /// </param>
    /// <returns>
    /// Returns the object tree recreated from JSON-encoded object tree represented as a string
    /// </returns>
    /// <remarks>
    /// The object tree returned has the following structure:
    /// key - represents the name of the object
    /// value - is always a container containing one of the following:
    ///     a) a string, when the object value is a plain string
    ///     b) a List of object trees, when the object is an array
    ///     c) an object tree, when the object value is a complex data structure
    /// </remarks>
    public static Map getMapFromJsonString(str _jsonString)
    {
        Map result;
        System.Web.Script.Serialization.JavaScriptSerializer ser = new System.Web.Script.Serialization.JavaScriptSerializer();

        CLRObject dict = ser.DeserializeObject(_jsonString);

        result = RetailCommonWebAPI::getMap(dict);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapFromQueryString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a Map of the key/value pairs of the supplied request query string.
    /// The query string is expected to have the following format:
    ///
    /// para1=value1&amp;para2=value2
    ///
    /// So, key/value pairs must be separated with '&amp;' characters and keys and values must be
    /// separated with '=' character.
    /// </summary>
    /// <param name="_queryString">
    /// The query string in the following format:
    ///
    /// para1=value1&amp;para2=value2
    /// </param>
    /// <returns>
    /// A Map of the key/value pairs of the supplied request query string
    /// </returns>
    public static Map getMapFromQueryString(str _queryString)
    {
        Map map = new Map(Types::String, Types::String);

        List parameters = strSplit(_queryString, '&');
        ListEnumerator parametersE = parameters.getEnumerator();

        List keyValuePair;
        ListEnumerator keyValuePairE;
        str key, value;
        while (parametersE.moveNext())
        {
            keyValuePair = strSplit(parametersE.current(), '=');
            keyValuePairE = keyValuePair.getEnumerator();
            if (keyValuePairE.moveNext())
            {
                key = keyValuePairE.current();
                if (keyValuePairE.moveNext())
                {
                    value = keyValuePairE.current();
                }
                else
                {
                    value = '';
                }

                map.insert(key, value);
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBaseUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base URI of the application.
    /// </summary>
    /// <returns>The base URI of the application.</returns>
    public static System.Uri GetBaseUri()
    {
        System.Uri currentUri = RetailCommonWebAPI::GetCurrentUri();
        System.Uri baseUri = new System.UriBuilder(currentUri.get_Scheme(), currentUri.get_Host()).get_Uri();

        return baseUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCurrentUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current URI of the application.
    /// </summary>
    /// <returns>The current URI of the application.</returns>
    public static System.Uri GetCurrentUri()
    {
        Microsoft.Dynamics.Client.ServerForm.Contexts.SessionContext sessionContext = Microsoft.Dynamics.Client.ServerForm.Contexts.SessionContext::get_Current();
        System.Uri currentUri = sessionContext.get_RequestUrl();

        return currentUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAuthenticationCallBackUri</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the callback URI for the media channel authentication.
    /// </summary>
    /// <param name = "_retailMediaChannelConnectorSettingsRecId">
    /// RecId of the <c>RetailMediaChannelConnectorSettings</c>.
    /// </param>
    /// <returns>
    /// The callback URI for the media channel authentication.
    /// </returns>
    public static str GetAuthenticationCallBackUri(RecId _retailMediaChannelConnectorSettingsRecId)
    {
        str baseUrl = RetailCommonWebAPI::GetBaseUri().ToString();
        str redirectUriFormat = "\%1?mi=\%2&\%3=\%4";

        str authenticationCallBackUri = strfmt(redirectUriFormat, baseUrl, MenuItemDisplayStr(RetailMediaChannelAuthenticationCallBack), RetailCommonWebAPI::AuthenticationRecIdParameterName, _retailMediaChannelConnectorSettingsRecId);

        return authenticationCallBackUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAuthenticationRecIdPrameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets RecId parameter value from the URI query.
    /// </summary>
    /// <param name = "_uriQuery">The URI query.</param>
    /// <returns>
    /// The RecId parameter value.
    /// </returns>
    public static RecId GetAuthenticationRecIdPrameterValue(str _uriQuery)
    {
        if (!_uriQuery)
        {
            throw Exception::FunctionArgument;
        }

        str recIdParameterValue = System.Web.HttpUtility::ParseQueryString(_uriQuery).Get(RetailCommonWebAPI::AuthenticationRecIdParameterName);

        RecId retailMediaChannelConnectorSettingsRecId;

        if (recIdParameterValue)
        {
            retailMediaChannelConnectorSettingsRecId = str2RecId(recIdParameterValue);
        }

        return retailMediaChannelConnectorSettingsRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMultipartFormData</Name>
				<Source><![CDATA[
    private static System.Byte[] getMultipartFormData(Map _strFields, Map _docFields)
    {
        #define.StrFieldFormat('--\%1\r\nContent-Disposition: form-data; name=\"\%2\"\r\n\r\n\%3\r\n')
        #define.DocFieldFormat('--\%1\r\nContent-Disposition: form-data; name=\"\%2\"; filename=\"\%3\";\r\nContent-Type: ' + '\%4\r\n\r\n')
        #define.GenericMimeType('application/octet-stream')

        System.IO.MemoryStream stream = new System.IO.MemoryStream();
        System.Text.UTF8Encoding encoding = new System.Text.UTF8Encoding();
        MapEnumerator strMapEnumerator = _strFields.getEnumerator();
        MapEnumerator docMapEnumerator = _docFields.getEnumerator();
        DocuRef docuRef;
        RetailMediaFileDescription picture;
        BinData binData = new BinData();
        System.Byte[] bytes;
        str s;
        str mimeType;
        RetailMediaSupportedFileType fileType;

        while (strMapEnumerator.moveNext())
        {
            s = strFmt(
                #StrFieldFormat,
                #FormDataBoundary,
                strMapEnumerator.currentKey(),
                strMapEnumerator.currentValue());
            bytes = encoding.GetBytes(s);
            stream.Write(bytes, 0, bytes.get_Length());
        }

        while (docMapEnumerator.moveNext())
        {
            if (_docFields.valueType() == Types::Record)
            {
                docuRef = docMapEnumerator.currentValue();
                picture = RetailMediaFileDescription::construct(docuRef.RecId);
            }
            else
            {
                picture = docMapEnumerator.currentValue();
            }

            select firstOnly fileType
                where fileType.FileType == picture.parmFileExtension();
            if (fileType)
            {
                mimeType = fileType.mimeType;
            }
            else
            {
                mimeType = #GenericMimeType;
            }

            // Header
            s = strFmt(
                #DocFieldFormat,
                #FormDataBoundary,
                docMapEnumerator.currentKey(),
                picture.parmFileName(),
                mimeType);
            bytes = encoding.GetBytes(s);
            stream.Write(bytes, 0, bytes.get_Length());

            // Body
            binData.setData(picture.parmFileContent());
            s = binData.base64Encode();
            bytes = System.Convert::FromBase64String(s);
            stream.Write(bytes, 0, bytes.get_Length());
        }

        s = "\r\n--" + #FormDataBoundary + "--\r\n";
        bytes = encoding.GetBytes(s);
        stream.Write(bytes, 0, bytes.get_Length());

        bytes = stream.ToArray();
        stream.Close();

        return bytes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readResponseData</Name>
				<Source><![CDATA[
    private static str readResponseData(System.Net.HttpWebResponse response)
    {
        int batchSize = 1024;
        System.IO.Stream receiveStream;
        System.IO.StreamReader readStream;
        System.Text.Encoding encode;
        System.Char[] read;
        System.Text.StringBuilder sb;
        System.String readString;
        str contentEncoding;

        int countRead;

        if (response == null)
        {
            return "";
        }

        receiveStream = response.GetResponseStream();
        contentEncoding = response.get_ContentEncoding();
        if (contentEncoding)
        {
            encode = System.Text.Encoding::GetEncoding(contentEncoding);
        }
        else
        {
            encode = new System.Text.UTF8Encoding();
        }

        readStream = new System.IO.StreamReader(receiveStream, encode);
        read = new System.Char[batchSize]();

        countRead = readStream.Read(read, 0, batchSize);

        sb = new System.Text.StringBuilder();
        while (countRead > 0)
        {
            readString = new System.String(read, 0, countRead);
            sb.Append(readString);
            countRead = readStream.Read(read, 0, batchSize);
        }

        readStream.Close();

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRequestData</Name>
				<Source><![CDATA[
    private static void writeRequestData(System.Net.HttpWebRequest _request, System.Byte[] _bytes)
    {
        System.IO.Stream stream;

        _request.set_ContentLength(_bytes.get_Length());

        stream = _request.GetRequestStream();
        stream.Write(_bytes, 0, _bytes.get_Length());
        stream.Close();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>