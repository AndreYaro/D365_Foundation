<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookDeleteTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Deletes the asset transactions which are not posted to general ledger.
/// </summary>
public class AssetBookDeleteTransaction extends RunBaseBatch implements BatchRetryable
{
    QueryRun  queryRun;
    AssetTransDate startDate;
    AssetDeleteTransactionTransType transType;
    Set journalsToBeUpdated;

    DialogField dialogStartDate;
    DialogField dialogTransType;

    boolean exceptionFound;

    const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        dialog = super();

        dialog.addGroup("@SYS22526");
        dialogStartDate = dialog.addFieldValue(extendedtypestr(AssetTransDate), startDate, "@SYS2168", "@SYS97272");

        dialog.addGroup("@SYS21201");
        dialogTransType = dialog.addFieldValue(enumstr(AssetDeleteTransactionTransType), transType, "@SYS21201", "@SYS97267");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            startDate = dialogStartDate.value();
            transType = dialogTransType.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        journalsToBeUpdated = new Set(Types::String);

        super();
        this.initializeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    private void initializeQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSourceBook = query.addDataSource(tablenum(AssetBook));
        queryBuildDataSourceBook.addSortField(fieldnum(AssetBook, BookId));

        queryBuildDataSourceBook.addRange(fieldnum(AssetBook, AssetId));
        queryBuildDataSourceBook.addRange(fieldnum(AssetBook, AssetGroup));
        queryBuildDataSourceBook.addRange(fieldnum(AssetBook, BookId));
        queryBuildDataSourceBook.addRange(fieldnum(AssetBook, Status));

        QueryBuildDataSource queryBuildDataSourceBookTable = queryBuildDataSourceBook.addDataSource(tableNum(AssetBookTable));
        queryBuildDataSourceBookTable.addLink(fieldNum(AssetBook, BookId), fieldNum(AssetBookTable, BookId));

        QueryBuildRange queryBuildRange = queryBuildDataSourceBookTable.addRange(fieldnum(AssetBookTable, CurrentOperationsTax));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(SysQuery::value(CurrentOperationsTax::None));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmStartDate(AssetTransDate _startDate = startDate)
    {
        startDate = _startDate;
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransType</Name>
				<Source><![CDATA[
    public AssetDeleteTransactionTransType parmTransType( AssetDeleteTransactionTransType _transType = transType)
    {
        transType = _transType;
        return transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method deletes the transactions specified from the selected value models.
    /// </summary>
    public void run()
    {
        AssetBook assetBook;

        try
        {
            while (queryRun.next())
            {
                assetBook = queryRun.get(tablenum(AssetBook));

                this.processDeleteTrans(assetBook.AssetId, assetBook.BookId);
            }

            this.updateJournalTotals(journalsToBeUpdated);
        }
        catch
        {
            info("@SYS97554");
        }

        if (!exceptionFound)
        {
            info("@SYS97553");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeleteTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the deleion of transactions for each value model
    /// </summary>
    /// <param name = "_assetId">The asset id</param>
    /// <param name = "_bookId">The value model id</param>
    private void processDeleteTrans(AssetId _assetId, AssetBookId _bookId)
    {
        AssetBook    assetBook;
        AssetBookDeleteTransProcess assetBookDeleteTransProcess;
        #OCCRetryCount

        try
        {
            assetBook = AssetBook::find(_assetId, _bookId, true);
            if (assetBook)
            {
                assetBookDeleteTransProcess = AssetBookDeleteTransProcess::construct(assetBook, transType, startDate);
                journalsToBeUpdated = Set::union(journalsToBeUpdated, assetBookDeleteTransProcess.deleteTrans());
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                exceptionFound = true;
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    exceptionFound = true;
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                exceptionFound = true;
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Warning)
        {
            exceptionTextFallThrough();
            exceptionFound = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, startDate, transType, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version     = conpeek(packedClass,1);
        PackedQueryRun  packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, startDate, transType, packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal totals after line deletion.
    /// </summary>
    /// <param name = "_journalsToBeUpdated">List of journals to be updates</param>
    private void updateJournalTotals(Set _journalsToBeUpdated)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerjournalTrans ledgerjournalTrans;
        SetEnumerator setEnumerator;

        setEnumerator = journalsToBeUpdated.getEnumerator();

        ttsBegin;

        while (setEnumerator.moveNext())
        {
            ledgerJournalTable = LedgerJournalTable::find(setEnumerator.current(), true);

            if (ledgerJournalTable)
            {
                select sum(AmountCurDebit), sum(AmountCurCredit) from ledgerjournalTrans
                    where ledgerjournalTrans.JournalNum == setEnumerator.current();

                ledgerJournalTable.JournalTotalDebit = ledgerjournalTrans.AmountCurDebit;
                ledgerJournalTable.JournalTotalCredit = ledgerjournalTrans.AmountCurCredit;
                ledgerJournalTable.update();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (!startDate)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiantes a new object of the class <c>AssetBookDeleteTransaction</c>
    /// </summary>
    /// <returns></returns>
    public static AssetBookDeleteTransaction construct()
    {
        return new AssetBookDeleteTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@FixedAssets:FA_ClassTitle_DeleteTransactionsNotPostedToLedger";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        AssetBookDeleteTransaction   assetBookDeleteTransaction = AssetBookDeleteTransaction::construct();

        assetBookDeleteTransaction.getLast();

        if (assetBookDeleteTransaction.prompt())
        {
            assetBookDeleteTransaction.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>