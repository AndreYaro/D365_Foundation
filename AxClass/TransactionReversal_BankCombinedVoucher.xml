<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransactionReversal_BankCombinedVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TransactionReversal_BankCombinedVoucher</c> class reverses the bank acount trans with correction amount in combined voucher.
/// </summary>
internal final class TransactionReversal_BankCombinedVoucher extends TransactionReversal_Bank
{
    private Voucher voucherToReverse;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static TransactionReversal_BankCombinedVoucher construct()
    {
        return new TransactionReversal_BankCombinedVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherToReverse</Name>
				<Source><![CDATA[
    internal void findVoucherToReverse()
    {
        voucherToReverse = bankAccountTransToReverse.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReconciliationAccounting</Name>
				<Source><![CDATA[
    internal void reverseReconciliationAccounting()
    {
        this.reverseGeneralJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseGeneralJournal</Name>
				<Source><![CDATA[
    private void reverseGeneralJournal()
    {
        this.initLedgerVoucher();
        this.createGeneralJournal();
        ledgerVoucher.end();
        this.createTransactionReversalTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGeneralJournal</Name>
				<Source><![CDATA[
    private void createGeneralJournal()
    {
        this.createReversalTraceNum();
        this.createReversalVoucher();

        LedgerPostingController ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);
        LedgerVoucherObject ledgerPostingReference = LedgerVoucherObject::newReference(
            reversalVoucher,
            reversalDate);

        ledgerPostingController.addReference(ledgerPostingReference);
        this.setTransactionTxt(bankAccountTransToReverse.transDate, voucherToReverse);

        RecId generalJournalEntryRecId = this.findGeneralJournalEntryOfBankCorrection();

        GeneralJournalAccountEntry generalJournalAccountEntry;

        while select generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntryRecId
        {
            TransactionReversalTrans::createTransaction(
                tableNum(GeneralJournalAccountEntry),
                generalJournalAccountEntry.RecId,
                reversalTraceNum,
                false,
                false);

            TransactionReversalLedgerInitializeLedgerVoucherTransObjectParameters parameters = TransactionReversalLedgerInitializeLedgerVoucherTransObjectParameters::construct();
            parameters.parmGeneralJournalAccountEntry(generalJournalAccountEntry);
            parameters.parmLedgerPostingReference(ledgerPostingReference);

            LedgerVoucherTransObject ledgerPostingTransaction = this.initializeLedgerVoucherTransObject(parameters);

            ledgerPostingController.addTrans(ledgerPostingTransaction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGeneralJournalEntryOfBankCorrection</Name>
				<Source><![CDATA[
    private RecId findGeneralJournalEntryOfBankCorrection()
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        QueryRun qr = new QueryRun(this.buildQuery());

        if (qr.next())
        {
            subledgerVoucherGeneralJournalEntry = qr.get(tableNum(SubledgerVoucherGeneralJournalEntry)) as SubledgerVoucherGeneralJournalEntry;
        }

        return subledgerVoucherGeneralJournalEntry.GeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery()
    {
        Query query = new Query();

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        queryBuildDataSource.addOrderByField(fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry), SortOrder::Descending);
        queryBuildDataSource.firstOnly(true);

        queryBuildDataSource.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(queryValue(voucherToReverse));
        queryBuildDataSource.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId)).value(queryValue(curext()));;
        queryBuildDataSource.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate)).value(queryValue(bankAccountTransToReverse.transDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransactionReversalTrans</Name>
				<Source><![CDATA[
    private void createTransactionReversalTrans()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;
        
        while select RecId from generalJournalAccountEntry
            exists join generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
            exists join subledgerVoucherLink
                where subledgerVoucherLink.GeneralJournalEntry == generalJournalEntry.RecId
                    && subledgerVoucherLink.Voucher == reversalVoucher
                    && subledgerVoucherLink.VoucherDataAreaId == curext()
                    && subledgerVoucherLink.AccountingDate == reversalDate
        {
            TransactionReversalTrans::createTransaction(
                tableNum(GeneralJournalAccountEntry),
                generalJournalAccountEntry.RecId,
                reversalTraceNum,
                false,
                false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerVoucherTransObject</Name>
				<Source><![CDATA[
    private LedgerVoucherTransObject initializeLedgerVoucherTransObject(TransactionReversalLedgerInitializeLedgerVoucherTransObjectParameters _parameters)
    {
        LedgerVoucherTransObject ledgerPostingTransaction = LedgerVoucherTransObject::newGeneralJournal(_parameters.parmGeneralJournalAccountEntry(), _parameters.parmLedgerEntry());

        ledgerPostingTransaction.parmSkipDimensionValidation(true);
        ledgerPostingTransaction.updateSignSide(true, true);

        TaxTransGeneralJournalAccountEntry::reversePostedLinks(
            _parameters.parmGeneralJournalAccountEntry().RecId,
            taxTransRecIdMap,
            ledgerPostingTransaction);

        if (transactionTxt.txt() != '')
        {
            ledgerPostingTransaction.parmText(transactionTxt.txt());
        }

        ledgerPostingTransaction.parmReasonCode(reasonRefRecID);
        //don't allocate since we are reversing records that have already been allocated
        ledgerPostingTransaction.parmIgnoreAllocation(true);

        ledgerPostingTransaction.parmHistoricalExchangeRateDate(_parameters.parmGeneralJournalAccountEntry().HistoricalExchangeRateDate);

        return ledgerPostingTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalVoucher</Name>
				<Source><![CDATA[
    private void createReversalVoucher()
    {
        reversalVoucher = NumberSeq::newGetNum(LedgerParameters::numRefLedgerReversalVoucher(), false).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalTraceNum</Name>
				<Source><![CDATA[
    private void createReversalTraceNum()
    {
        reversalTraceNum = NumberSeq::newGetNum(LedgerParameters::numRefTraceNum(), false).num();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>