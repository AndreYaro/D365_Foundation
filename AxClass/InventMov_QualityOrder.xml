<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_QualityOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMov_QualityOrder</c> class is a special <c>InventMovement</c> class that handles
/// quality orders with destructive testing.
/// </summary>
[InventMovementFactoryAttribute(tableStr(InventQualityOrderTable))]
class InventMov_QualityOrder extends InventMovement
{
    InventQualityOrderTable inventQualityOrderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a ledger account number.
    /// </summary>
    /// <returns>
    ///    A ledger account number.
    /// </returns>
    /// <remarks>
    ///    This method is an override of a base method. Use standard inventory issue and receipt accounts for
    ///    posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a ledger account number.
    /// </summary>
    /// <returns>
    ///    A ledger account number.
    /// </returns>
    /// <remarks>
    ///    This is an override of a base method. Use standard inventory profit and loss accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventProfit));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTransactionInventDimEstimated</Name>
				<Source><![CDATA[
    public InventDim adjustTransactionInventDimEstimated()
    {
        InventDim retInventDim = super();
        if (inventQualityOrderTable.whsIsForWorkGeneratingProcess())
        {
            retInventDim.clearLocationAndBelowDim(this.itemId());
            retInventDim = InventDim::findOrCreate(retInventDim);
        }

        return retInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLoadOnInventoryAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates load on inventory amount if applied India Tax on quality order
    /// </summary>
    /// <returns>
    /// Load on inventory amount
    /// </returns>
    public CostAmount calcLoadOnInventoryAmount_IN()
    {
        TaxUncommitted      taxUncommitted;
        TaxTable            taxTable;

        switch (inventQualityOrderTable.ApplyIndiaTaxes_IN)
        {
            case ApplyIndiaTaxes_IN::VAT:
                select sum(TaxInCostPriceMST) from taxUncommitted
                    join TaxCode from taxTable
                        where taxUncommitted.TaxCode == taxTable.TaxCode
                            && taxTable.TaxType_IN == TaxType_IN::VAT;
                break;
            case ApplyIndiaTaxes_IN::Excise:
                select sum(TaxInCostPriceMST) from taxUncommitted
                    join TaxCode from taxTable
                        where taxUncommitted.TaxCode == taxTable.TaxCode
                            && taxTable.TaxType_IN == TaxType_IN::Excise;
                break;
            case ApplyIndiaTaxes_IN::Both:
                select sum(TaxInCostPriceMST) from taxUncommitted
                    join TaxCode from taxTable
                        where taxUncommitted.TaxCode == taxTable.TaxCode
                            && (taxTable.TaxType_IN == TaxType_IN::Excise
                                || taxTable.TaxType_IN == TaxType_IN::VAT);
                break;
            case ApplyIndiaTaxes_IN::None:
                break;
        }

        return CurrencyExchangeHelper::amount(taxUncommitted.TaxInCostPriceMST * this.itemSamplingValue_IN() / 100) * -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    /// <remarks>
    ///     This is override of the base method.
    /// </remarks>
    public boolean canUpdateInventStatusBlocking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReservedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the movement type can have WHS work created that takes over reserving the lower levels of the hierarchy.
    /// </summary>
    /// <returns>
    /// This method return true for this type of movement if the movement item is WHS enabled.
    /// </returns>
    public boolean canHaveReservedWork()
    {
        return this.isItemWHSEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventQualityOrderTable)
        {
            InventTransOriginQualityOrder::writeOriginOwnerRelationship(inventQualityOrderTable.DataAreaId, inventQualityOrderTable.QualityOrderId, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventQualityOrderTable)
        {
            InventTransOriginQualityOrder::deleteOwnerRelationship(inventQualityOrderTable.DataAreaId, inventQualityOrderTable.QualityOrderId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialIssueCostValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Find the financial issue cost value applying Indian taxes if required.
    /// </summary>
    /// <param name="_inventTrans">
    ///    An issue inventory transaction record.
    /// </param>
    /// <param name="_inventOnhand">
    ///    An <c>InventOnHand</c> record buffer to search for the cost price.
    /// </param>
    /// <returns>
    ///    The cost amount of the financial issue.
    /// </returns>
    public CostAmount financialIssueCostValue(InventTrans _inventTrans, InventOnhand _inventOnhand)
    {
        // <GIN>
        boolean    countryRegion_IN         =  SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // <GIN>

        CostAmount ret = super(_inventTrans, _inventOnhand);

        // <GIN>
        if (countryRegion_IN
            && inventQualityOrderTable.ApplyIndiaTaxes_IN != ApplyIndiaTaxes_IN::None)
        {
            ret += this.calcLoadOnInventoryAmount_IN();
        }
        // </GIN>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimForIssueTransFromReceipt</Name>
				<Source><![CDATA[
    public InventDim getInventDimForIssueTransFromReceipt(InventDim _inventDimIssue, InventDim _inventDimReceipt)
    {
        InventDim retInventDim;

        if (inventQualityOrderTable.whsIsForWorkGeneratingProcess())
        {
            retInventDim = InventDim::find(_inventDimReceipt.InventDimId);
            retInventDim.clearLocationAndBelowDim(this.itemId());
            retInventDim = InventDim::findOrCreate(retInventDim);
        }
        else
        {
            retInventDim = super(_inventDimIssue, _inventDimReceipt);
        }

        return retInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the value of the <c>InventDimId</c> field.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimId</c> value.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base method. Use the <c>InventDimId</c> field from the quality order
    ///    table.
    /// </remarks>
    public InventDimId inventDimId()
    {
        return inventQualityOrderTable.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginQualityOrder::findInventTransOriginId(inventQualityOrderTable.DataAreaId, inventQualityOrderTable.QualityOrderId);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns <c>inventQualityOrderTable.ItemId</c>.
    /// </summary>
    /// <returns>
    ///    An item number.
    /// </returns>
    /// <remarks>
    ///    This is an override of a base method. Use <c>ItemId</c> field from quality order table.
    /// </remarks>
    public ItemId  itemId()
    {
        return inventQualityOrderTable.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemSamplingValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets item sampling value for <c>inventQualityOrderTable</c>
    /// </summary>
    /// <returns>
    /// Item sampling value
    /// </returns>
    public InventItemSamplingValue itemSamplingValue_IN()
    {
        return InventItemSampling::find(inventQualityOrderTable.ItemSamplingId).ItemSamplingValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingInventDimParmFixed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills an <c>InventDimParm</c> buffer with flags that specify which dimensions are fixed when marking is applied.
    /// </summary>
    /// <returns>
    /// An <c>InventDimParm</c> buffer.
    /// </returns>
    /// <remarks>
    /// For inventory quality transactions is important to keep all inventory dimensions that are specified.
    /// </remarks>
    public InventDimParm markingInventDimParmFixed()
    {
        if (!markingInventDimParmFixedCached)
        {
            markingInventDimParmFixed.initFromInventDim(this.inventdim());
            markingInventDimParmFixedCached = true;
        }

        return markingInventDimParmFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingPreferPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the physically updated transactions should be prefered over expected when finding transaction for marking with.
    /// </summary>
    /// <returns>
    ///    Returns true because physical receipts should be prefered for marking.
    /// </returns>
    public boolean markingPreferPhysical()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(inventQualityOrderTable.InventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true.
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
    /// <remarks>
    ///     This is an override of the base method.
    /// </remarks>
    public boolean mustBeAutoReserved()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    false.
    /// </returns>
    /// <remarks>
    ///    This is an override of a base method.
    /// </remarks>
    public boolean  mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventMov_QualityOrder</c> class.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///    The underlying quality order table object.
    /// </param>
    /// <param name="_inventType">
    ///    The <c>InventType</c> class to use; optional.
    /// </param>
    protected void new(
        InventQualityOrderTable _inventQualityOrderTable,
        InventType              _inventType = null)
    {
        inventQualityOrderTable = _inventQualityOrderTable;

        super(inventQualityOrderTable, _inventType ? _inventType : InventType::construct(inventQualityOrderTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventMovement</c> record that matches the record in the database.
    /// </summary>
    /// <returns>
    ///    An <c>InventMovement</c> instance.
    /// </returns>
    public InventMovement newMovement_Orig()
    {
        InventQualityOrderTable origTable = this.buffer().orig();

        if (this.buffer().RecId)
        {
            if (origTable.InventTransId)
            {
                return InventMovement::construct(this.buffer().orig(),this.inventMovSubType());
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the inventory quantity in the <c>InventQualityOrderTable</c> record.
    /// </summary>
    /// <param name="_inventQty">
    /// The quantity in inventory units.
    /// </param>
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        if (    inventQualityOrderTable.InventTransId
            &&  inventQualityOrderTable.TestDestructive
            &&  inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open)
        {
            inventQualityOrderTable.Qty += this.transSign() * _inventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining physical catch weight quantity.
    /// </summary>
    /// <returns>
    /// The remaining physical catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        if (!inventQualityOrderTable.InventTransId
         || !inventQualityOrderTable.TestDestructive
         || inventQualityOrderTable.OrderStatus != InventTestOrderStatus::Open)
        {
            return 0;
        }

        return this.transSign() * inventQualityOrderTable.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the catch weight quantity that will be used for reservation.
    /// </summary>
    /// <returns>
    /// The catch weight quantity that will be used for reservation.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quality order catch weight transactional quantity.
    /// </summary>
    /// <returns>
    /// The inventory transaction catch weight quantity if a quality order is destructive; otherwise, zero quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        if (!inventQualityOrderTable.InventTransId
         || !inventQualityOrderTable.TestDestructive)
        {
            return 0;
        }

        return this.transSign() * inventQualityOrderTable.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch attributes should be considered for reservation.
    /// </summary>
    /// <returns>
    /// false if the batch attributes should not be considered for reservation; otherwise, true .
    /// </returns>
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns <c>LedgerPostingType::InventReceipt</c> if <c>transQty</c> is zero or more. Otherwise it
    ///    returns <c>LedgerPostingType::InventIssue</c>.
    /// </summary>
    /// <returns>
    ///    A ledger posting type.
    /// </returns>
    /// <remarks>
    ///    This is an override of base method. Use standard inventory receipt and issue account types for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingBalanceSheet()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventReceipt;
        }

        return LedgerPostingType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a value of <c>LedgerPostingType::InventProfit</c> if the value of the <c>transQty</c>
    ///    field is zero or larger; otherwise a value of <c>LedgerPostingType::InventLoss</c>.
    /// </summary>
    /// <returns>
    ///    A ledger posting type.
    /// </returns>
    /// <remarks>
    ///    This is an override of a base method. Use standard inventory profit and loss account types for
    ///    posting.
    /// </remarks>
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventProfit;
        }

        return LedgerPostingType::InventLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to handle quality order specific rules.
    /// </summary>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty   remainPhysical()
    {
        if (!inventQualityOrderTable.InventTransId
         || !inventQualityOrderTable.TestDestructive
         || inventQualityOrderTable.OrderStatus != InventTestOrderStatus::Open)
        {
            return 0;
        }

        return this.transSign() * inventQualityOrderTable.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservationHierarchyLevelStrategyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list containing one <c>WHSReservationLevelStrategyNone</c> instance.
    ///
    /// We override the default behavior of InventMovement because we don't want dimensions below location to be automatically filled.
    /// </summary>
    /// <param name="_inventDimReservationCriteria">
    /// An <c>InventDim</c> buffer with the values that are required to be reserved.
    /// </param>
    /// <returns>
    /// A list containing one <c>WHSReservationLevelStrategyNone</c> instance.
    /// </returns>
    public List reservationHierarchyLevelStrategyList(InventDim _inventDimReservationCriteria)
    {
        List reservationStrategyList = new List(Types::Class);

        reservationStrategyList.addEnd(WHSReservationHierarchyLevelStrategy::newFromStrategyType(WHSReservationHierarchyLevelStrategyType::None, this.inventTable(), _inventDimReservationCriteria));

        return reservationStrategyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns quantity to be reserved for destructive quality order.
    /// </summary>
    /// <returns>
    ///     Quality order quantity for a destructive quality order; otherwise, 0
    /// </returns>
    public InventQty reserveQty()
    {
        return inventQualityOrderTable.TestDestructive ?
                    -inventQualityOrderTable.Qty       :
                    0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to set the InventDimId field for the quality order.
    /// </summary>
    /// <param name="_dimId">
    ///    The new InventDimId value to set on the quality order table.
    /// </param>
    public void setInventDimId(InventDimId _dimId)
    {
        inventQualityOrderTable.InventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to handle quality order specific rules.
    /// </summary>
    /// <returns>
    ///    A transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to handle quality order specific rules.
    /// </summary>
    /// <returns>
    ///    An inventory transaction ID.
    /// </returns>
    public InventTransId transId()
    {
        return inventQualityOrderTable.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to handle quality order specific rules.
    /// </summary>
    /// <returns>
    ///    An inventory quantity.
    /// </returns>
    public InventQty transQty()
    {
        InventQty ret = 0;

        if (!inventQualityOrderTable.InventTransId
         || !inventQualityOrderTable.TestDestructive)
        {
            return 0;
        }

        return this.transSign() * inventQualityOrderTable.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to handle quality order specific rules.
    /// </summary>
    /// <returns>
    ///    An inventory transaction reference ID.
    /// </returns>
    public InventTransRefId transRefId()
    {
        return inventQualityOrderTable.QualityOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the base method to handle quality order specific rules.
    /// </summary>
    /// <returns>
    ///    An inventory transaction type.
    /// </returns>
    public InventTransType transType()
    {
        return InventTransType::QualityOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventMov_QualityOrder</c> class.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///    The underlying quality order table object.
    /// </param>
    /// <param name="_inventType">
    ///    The <c>InventType</c> class to use; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventMov_QualityOrder</c> class.
    /// </returns>
    public static InventMov_QualityOrder construct(
        InventQualityOrderTable     _inventQualityOrderTable,
        InventType                  _inventType = null)
    {
        return new InventMov_QualityOrder(_inventQualityOrderTable, _inventType);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>