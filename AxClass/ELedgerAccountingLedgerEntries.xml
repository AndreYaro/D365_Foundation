<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingLedgerEntries</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ELedgerAccountingLedgerEntries</c> class handles the creation of the 'Polizas' XML.
/// </summary>
public class ELedgerAccountingLedgerEntries extends ELedgerAccountingLedgerBalance
{
    #ELedgerAccStatement_MX

    Query      viewQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new xml formatter class
    /// </summary>
    /// <param name="_contract">
    /// The contract instance with necessary parameters
    /// </param>
    protected void new(eledgerAccountingContract _contract)
    {
        super(_contract);

        formatMapping = LedgerParameters::find().ELedgerAccountingLedgerEntriesFormatMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    private Query getQuery()
    {
        var ret = new Query();

        var ds = ret.addDataSource(tableNum(EledgerAccountingLedgerEntriesView));
        ds.addRange(fieldNum(EledgerAccountingLedgerEntriesView, AccountingDate)).value(SysQuery::range(fromDate, toDate));
        ds.addRange(fieldNum(EledgerAccountingLedgerEntriesView, Ledger)).value(SysQuery::value(Ledger::current()));
        ds.addRange(fieldNum(EledgerAccountingLedgerEntriesView, PostingLayer)).value(SysQuery::value(OperationsTax::Current));
        ds.addRange(fieldNum(EledgerAccountingLedgerEntriesView, FiscalCalendarPeriodType)).value(SysQuery::value(FiscalPeriodType::Operating));
        if (contract.parmIncludeClosingPeriods())
        {
            ds.addRange(fieldNum(EledgerAccountingLedgerEntriesView, FiscalCalendarPeriodType)).value(SysQuery::value(FiscalPeriodType::Opening));
            ds.addRange(fieldNum(EledgerAccountingLedgerEntriesView, FiscalCalendarPeriodType)).value(SysQuery::value(FiscalPeriodType::Closing));
        }
        ds.addOrderByField(fieldNum(EledgerAccountingLedgerEntriesView, SubledgerVoucher));
        ds.addOrderByField(fieldNum(EledgerAccountingLedgerEntriesView, AccountingDate));
        ds.addOrderByField(fieldNum(EledgerAccountingLedgerEntriesView, GeneralJournalAccountEntry));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the ledger entries query.
    /// </summary>
    protected void processQuery()
    {
        viewQuery = this.getQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFormatMappingRunParameters</Name>
				<Source><![CDATA[
    protected void setupFormatMappingRunParameters()
    {
        var context = new ERModelDefinitionDatabaseContext()
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext());

        context.addQuery(tableNum(EledgerAccountingLedgerEntriesView), viewQuery);

        formatMappingRun.withParameter(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ELedgerAccountingLedgerEntries construct(eledgerAccountingContract _contract)
    {
        return new ELedgerAccountingLedgerEntries(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the file name
    /// </summary>
    /// <returns>
    /// The string that represents file name
    /// </returns>
    public Filename fileName()
    {
        return strFmt('%1%2PL', reportHeader.getRFC(), date2str(toDate, 321, 0, 0, 2, 0, 4, DateFlags::None));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>