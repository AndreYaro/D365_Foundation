<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXScheduleLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the logger for CDX schedule runner operations.
/// </summary>
internal class RetailCDXScheduleLogger extends RetailCDXLogger
{
    RetailCDXScheduleRunner scheduleRunner;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailCDXScheduleLogger</c>.
    /// </summary>
    /// <param name = "_scheduleRunner">The schedule runner object.</param>
    internal void new(RetailCDXScheduleRunner _scheduleRunner)
    {
        super();
        scheduleRunner = _scheduleRunner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSchedulingStart</Name>
				<Source><![CDATA[
    internal void logCDXSchedulingStart()
    {
        this.logStartEvent('CDXScheduleRunner', this.getEventDataFromScheduleRunner());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSchedulingFailure</Name>
				<Source><![CDATA[
    internal void logCDXSchedulingFailure(System.Exception exception)
    {
        this.logEvent('CDXScheduleRunnerFailure', this.getEventDataFromScheduleRunner(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSchedulingStop</Name>
				<Source><![CDATA[
    internal void logCDXSchedulingStop(System.Exception exception)
    {
        this.logStopEvent('CDXScheduleRunner', this.getEventDataFromScheduleRunner(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleSkippedDisabledJob</Name>
				<Source><![CDATA[
    internal void logCDXScheduleSkippedDisabledJob()
    {
        this.logEvent('CDXScheduleSkippedDisabledJob', this.getEventDataFromScheduleRunner());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleValidJobsNotFound</Name>
				<Source><![CDATA[
    internal void logCDXScheduleValidJobsNotFound()
    {
        this.logEvent('CDXScheduleValidJobsNotFound', this.getEventDataFromScheduleRunner());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromScheduleRunner</Name>
				<Source><![CDATA[
    private container getEventDataFromScheduleRunner(System.Exception exception = null)
    {
        container operationResult = this.getResultFromException([exception]);

        container eventData = [this.getSyncType(scheduleRunner),                //syncType
                               scheduleRunner.getScheduleName(),                //scheduleName
                               scheduleRunner.paramDeleteExistingData(),        //deleteExistingData
                               con2Str(scheduleRunner.paramTargetDataStores()), //targetDataStores
                               scheduleRunner.paramJobId(),                     //jobId
                               scheduleRunner.paramRowVersion(),                //rowVersion
                               scheduleRunner.isInBatch(),                      //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),              //recurrence data
                               scheduleRunner.paramCorrelationId(),             // event correlation identifier
                               this.duration('CDXScheduleRunner'),              //DurationInMS
                               conPeek(operationResult, 1),                     //success
                               conPeek(operationResult, 2),                     //errorMessage
                               this.previousErrorEvent];                        //previousErrorEvent

        return eventData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleRunnerBatchCreated</Name>
				<Source><![CDATA[
    internal void logCDXScheduleRunnerBatchCreated()
    {
        container eventData = [this.getSyncType(scheduleRunner),                 //syncType
                               scheduleRunner.getScheduleName(),                 //scheduleName
                               scheduleRunner.paramDeleteExistingData(),         //deleteExistingData
                               con2Str(scheduleRunner.paramTargetDataStores()),  //targetDataStores
                               scheduleRunner.paramJobId(),                      //jobId
                               scheduleRunner.paramRowVersion(),                 //rowVersion
                               null,                                             //isInBatchMode
                               scheduleRunner.batchInfo().parmBatchHeader().parmBatchHeaderId(),    //batchRecId
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId(),              //event correlation identifier
                               0,                                                //DurationInMS
                               true,                                             //success
                               '',                                               //errorMessage
                               ''];                                              //previousErrorEvent

        this.logEvent('CDXScheduleRunnerBatchCreated', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleQueuedJobRunnerAsBatchTask</Name>
				<Source><![CDATA[
    internal void logCDXScheduleQueuedJobRunnerAsBatchTask(RetailCDXJobRunner jobRunner)
    {
        container eventData = [this.getSyncType(scheduleRunner),                //syncType
                               scheduleRunner.getScheduleName(),
                               jobRunner.paramDeleteExistingData(),             //deleteExistingData
                               con2Str(jobRunner.paramTargetDataStore()),       //targetDataStores
                               jobRunner.paramJobId(),                          //jobId
                               jobRunner.paramLastSyncVer(),                    //rowVersion
                               scheduleRunner.isInBatch(),                      //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId(),             // event correlation identifier
                               0,                                               //DurationInMS
                               null,                                            //success
                               '',                                              //errorMessage
                               ''];                                             //previousErrorEvent

        this.logEvent('CDXScheduleQueuedJobRunnerAsBatchTask', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleTriggeredDownloadSourceProcessingInProc</Name>
				<Source><![CDATA[
    internal void logCDXScheduleTriggeredDownloadSourceProcessingInProc(container cdxJobParameters)
    {
        //cdxJobParameters = [scheduleRecID, _dataGroupRecID, _jobID, _lastSyncVer, _targetDataStore, _deleteExistingData, _readingOnly, this.correlationId];

        container eventData = [this.getSyncType(scheduleRunner),      //syncType
                               scheduleRunner.getScheduleName(),      //scheduleName
                               conPeek(cdxJobParameters, 6),          //deleteExistingData
                               con2Str(conPeek(cdxJobParameters, 5)), //targetDataStores
                               conPeek(cdxJobParameters, 3),          //jobId
                               conPeek(cdxJobParameters, 4),          //rowVersion
                               scheduleRunner.isInBatch(),            //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),    //recurrenceData
                               scheduleRunner.paramCorrelationId(),   // event correlation identifier
                               0,                                    //DurationInMS
                               null,                                  //success
                               '',                                    //errorMessage
                               ''];                                   //previousErrorEvent

        this.logEvent('CDXScheduleTriggeredDownloadSourceProcessingInProc', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataWritingBatchJobNotFound</Name>
				<Source><![CDATA[
    internal void logDataWritingBatchJobNotFound(RetailConnDatabaseProfile dataStore)
    {
        container eventData = [scheduleRunner.getScheduleName(),
                               dataStore.RecId,                    //dataStoreRecId
                               dataStore.Name,                     //dataStoreName
                               dataStore.DataWritingBatchJob,      //batchRecId
                               '',                                 //batchRecurrence
                               scheduleRunner.paramCorrelationId(),//event correlation identifier
                               true,                               //success
                               '',                                 //errorMessage
                               ''];                                //previousErrorEvent

        this.logEvent('CDXScheduleDataWritingBatchNotFound', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataWritingBatchJobUserIsInvalid</Name>
				<Source><![CDATA[
    internal void logDataWritingBatchJobUserIsInvalid(RetailConnDatabaseProfile dataStore)
    {
        container eventData = [scheduleRunner.getScheduleName(),
                               dataStore.RecId,                    //dataStoreRecId
                               dataStore.Name,                     //dataStoreName
                               dataStore.DataWritingBatchJob,      //batchRecId
                               '',                                 //batchRecurrence
                               scheduleRunner.paramCorrelationId(),//event correlation identifier
                               true,
                               '',                                 //errorMessage
                               ''];                                //previousErrorEvent

        this.logEvent('CDXScheduleDataWritingBatchUserIsInvalid', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDataWritingBatchStatusWarning</Name>
				<Source><![CDATA[
    internal void logDataWritingBatchStatusWarning(RetailConnDatabaseProfile dataStore, BatchJob batchJob)
    {
        container eventData = [scheduleRunner.getScheduleName(),
                               dataStore.RecId,                    //dataStoreRecId
                               dataStore.Name,                     //dataStoreName
                               dataStore.DataWritingBatchJob,      //batchRecId
                               '',                                 //batchRecurrence
                               scheduleRunner.paramCorrelationId(),//event correlation identifier
                               true,
                               strFmt('The data writing batch is currently in "%1" state and can not apply available download sessions.', enum2Symbol(enumNum(BatchStatus), batchJob.Status)), //message
                               ''];                                //previousErrorEvent

        this.logEvent('CDXScheduleDataWritingBatchStatusWarning', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCreatedDataWritingBatchJob</Name>
				<Source><![CDATA[
    internal void logCreatedDataWritingBatchJob(RetailConnDatabaseProfile dataStore, BatchHeader _batchHeader)
    {
        str recurrenceStr = new SysRecurrence(_batchHeader.parmRecurrenceData()).toString();

        container eventData = [scheduleRunner.getScheduleName(),
                               dataStore.RecId,                    //dataStoreRecId
                               dataStore.Name,                     //dataStoreName
                               _batchHeader.parmBatchHeaderId(),   //batchRecId
                               recurrenceStr,                      //batchRecurrence
                               scheduleRunner.paramCorrelationId(),//event correlation identifier
                               true,                               //success
                               '',                                 //errorMessage
                               ''];                                //previousErrorEvent

        this.logEvent('CDXScheduleDataWritingBatchCreated', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleDataWritingBatchCreationFailure</Name>
				<Source><![CDATA[
    internal void logCDXScheduleDataWritingBatchCreationFailure(RetailConnDatabaseProfile dataStore, BatchHeader _batchHeader, System.Exception ex)
    {
        str recurrenceStr;
        RefRecId batchRecId;

        if (_batchHeader != null)
        {
            recurrenceStr = new SysRecurrence(_batchHeader.parmRecurrenceData()).toString();
            batchRecId = _batchHeader.parmBatchHeaderId();
        }

        container eventData = [scheduleRunner.getScheduleName(),
                               dataStore.RecId,                    //dataStoreRecId
                               dataStore.Name,                     //dataStoreName
                               batchRecId,                         //batchRecId
                               recurrenceStr,                      //batchRecurrence
                               scheduleRunner.paramCorrelationId(),//event correlation identifier
                               false,                              //success
                               ex.ToString(),                      //errorMessage
                               ''];                                //previousErrorEvent

        this.logEvent('CDXScheduleDataWritingBatchCreationFailure', eventData, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logReusedExistingDataWiritingBatch</Name>
				<Source><![CDATA[
    internal void logReusedExistingDataWiritingBatch(RetailConnDatabaseProfile dataStore, BatchHeader _batchHeader)
    {
        str recurrenceStr = new SysRecurrence(_batchHeader.parmRecurrenceData()).toString();

        container eventData = [scheduleRunner.getScheduleName(),
                               dataStore.RecId,                    //dataStoreRecId
                               dataStore.Name,                     //dataStoreName
                               _batchHeader.parmBatchHeaderId(),   //batchRecId
                               recurrenceStr,                      //batchRecurrence
                               scheduleRunner.paramCorrelationId(),//event correlation identifier
                               true,                               //success
                               '',                                 //errorMessage
                               ''];                                //previousErrorEvent

        this.logEvent('CDXScheduleReusedDataWiritingBatch', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSyncType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sync operation type.
    /// </summary>
    /// <param name = "_shedulerRunner">The schedule runner object.</param>
    /// <returns>The operation type.</returns>
    internal str getSyncType(RetailCDXScheduleRunner _shedulerRunner)
    {
        str syncType;
        switch(_shedulerRunner.paramParameterSet())
        {
            case 0:
                syncType = 'DeltaSync';
                break;
            case 1:
                syncType = 'FullSync';
                break;
            case 2:
                syncType = 'Rerun';
                break;
            default:
                syncType = 'Unknown';
                break;
        }

        return syncType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleUpdateSchedulerBatchHeaderDeadlockRetry</Name>
				<Source><![CDATA[
    internal void logCDXScheduleUpdateSchedulerBatchHeaderDeadlockRetry(int retryCount)
    {
        container eventData = [this.getSyncType(scheduleRunner),
                               scheduleRunner.getScheduleName(),
                               retryCount,
                               scheduleRunner.isInBatch(),
                               scheduleRunner.paramSchedulerBatchJobId(),
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId()];

        this.logEvent('CDXScheduleSaveSchedulerBatchHeaderDeadlockRetry', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleUpdateSchedulerBatchHeaderUpdateConflictRetry</Name>
				<Source><![CDATA[
    internal void logCDXScheduleUpdateSchedulerBatchHeaderUpdateConflictRetry(int retryCount)
    {
        container eventData = [this.getSyncType(scheduleRunner),
                               scheduleRunner.getScheduleName(),
                               retryCount,
                               scheduleRunner.isInBatch(),
                               scheduleRunner.paramSchedulerBatchJobId(),
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId()];

        this.logEvent('CDXScheduleSaveSchedulerBatchHeaderUpdateConflictRetry', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleQueuedUploadTargetWriterAsBatchTask</Name>
				<Source><![CDATA[
    internal void logCDXScheduleQueuedUploadTargetWriterAsBatchTask(RetailCDXDataUpload uploader)
    {
        container eventData = [this.getSyncType(scheduleRunner),
                               scheduleRunner.getScheduleName(),
                               con2Str(uploader.paramTargetDataStore()),       //targetDataStores
                               uploader.paramJobId(),                          //jobId
                               uploader.paramLastSyncVer(),                    //rowVersion
                               scheduleRunner.isInBatch(),                     //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId()];           //event correlation identifier;

        this.logEvent('CDXScheduleQueuedUploadTargetWriterAsBatchTask', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleQueuedUploadSourceReaderAsBatchTask</Name>
				<Source><![CDATA[
    internal void logCDXScheduleQueuedUploadSourceReaderAsBatchTask(RetailCdxChannelDbDirectAccess readRunner)
    {
        container eventData = [this.getSyncType(scheduleRunner),
                               scheduleRunner.getScheduleName(),
                               readRunner.paramDataStoreRecId(),
                               readRunner.paramJobId(),                         //jobId
                               scheduleRunner.isInBatch(),                     //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId()];            //event correlation identifier;

        this.logEvent('CDXScheduleQueuedUploadSourceReaderAsBatchTask', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleTriggeredUploadTargetWriterInProc</Name>
				<Source><![CDATA[
    internal void logCDXScheduleTriggeredUploadTargetWriterInProc(RetailCDXDataUpload uploader)
    {
        container eventData = [this.getSyncType(scheduleRunner),
                               scheduleRunner.getScheduleName(),
                               con2Str(uploader.paramTargetDataStore()),       //targetDataStores
                               uploader.paramJobId(),                          //jobId
                               uploader.paramLastSyncVer(),                    //rowVersion
                               scheduleRunner.isInBatch(),                     //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId()];           //event correlation identifier;

        this.logEvent('CDXScheduleTriggeredUploadTargetWriterInProc', eventData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXScheduleTriggeredUploadSourceReaderInProc</Name>
				<Source><![CDATA[
    internal void logCDXScheduleTriggeredUploadSourceReaderInProc(RetailCdxChannelDbDirectAccess readRunner)
    {
        container eventData = [this.getSyncType(scheduleRunner),
                               scheduleRunner.getScheduleName(),
                               readRunner.paramDataStoreRecId(),
                               readRunner.paramJobId(),                         //jobId
                               scheduleRunner.isInBatch(),                     //isInBatchMode
                               scheduleRunner.isInBatch() ? scheduleRunner.parmCurrentBatch().BatchJobId : 0,//batchRecId
                               scheduleRunner.getRecurrenceData(),
                               scheduleRunner.paramCorrelationId()];           //event correlation identifier;

        this.logEvent('CDXScheduleTriggeredUploadSourceReaderInProc', eventData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>