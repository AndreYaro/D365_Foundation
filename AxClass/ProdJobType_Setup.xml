<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJobType_Setup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdJobType_Setup extends ProdJobType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRouteExecutedPct</Name>
				<Source><![CDATA[
    void addRouteExecutedPct(
        ProdRoute       _prodRoute,
        ProdExecutedPct _executedPct)
    {
        _prodRoute.ExecutedSetup += _executedPct;

        if (_prodRoute.ExecutedSetup < 0)
            _prodRoute.ExecutedSetup = 0;

        if (_prodRoute.ExecutedSetup > 100)
            _prodRoute.ExecutedSetup = 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmount</Name>
				<Source><![CDATA[
    CostAmount calcAmount(ProdRouteTrans prodRouteTrans)
    {
        return prodRouteTrans.calcAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCalcHours</Name>
				<Source><![CDATA[
    Hours calcCalcHours(
        BOMCalcData             itemCalcData,
        RouteMap                primaryRoute,
        RouteOprMap             primaryOpr,
        RouteMap                route,
        RouteOprMap             opr,
        RouteAutoConsump        routeAutoConsump        = RouteAutoConsump::Always,
        NoYes                   includeConstantConsump  = NoYes::Yes
        )
    {
        if (! includeConstantConsump)
            return 0;

        if (routeAutoConsump    == RouteAutoConsump::Always ||
           (routeAutoConsump    == RouteAutoConsump::RouteDependent && opr.routeGroup().AutoSetUpTime))
        {
            RouteCalcConsumption routeCalcConsumption = RouteCalcConsumption::construct(primaryOpr.Formula);

            return routeCalcConsumption.calcSetUpTime(itemCalcData,primaryRoute,primaryOpr,route,opr);
        }
        else
            return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcJobSchedJobTime</Name>
				<Source><![CDATA[
    Hours calcJobSchedJobTime(
        ProdRouteJob    _prodRouteJob,
        ProdRoute       _prodRoute,
        Hours           _calcTime)
    {
        if (_prodRouteJob.JobStatus >= ProdJobStatus::Completed || _prodRoute.OprFinished || _prodRoute.ExecutedProcess)
            return 0;
        else
            return _calcTime * (100 - min(max(_prodRouteJob.ExecutedPct,_prodRoute.ExecutedSetup),100)) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRouteSchedJobTime</Name>
				<Source><![CDATA[
    Hours calcRouteSchedJobTime(
        ProdRoute   _prodRoute,
        Hours       _calcTime)
    {
        if (_prodRoute.OprFinished || _prodRoute.ExecutedProcess)
            return 0;
        else
            return _calcTime * (100 - min(_prodRoute.ExecutedSetup,100)) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWrkCtrHours</Name>
				<Source><![CDATA[
    public Hours calcWrkCtrHours(BOMCalcData    _itemCalcData,
                                 RouteMap       _primaryRoute,
                                 RouteOprMap    _primaryOpr,
                                 WrkCtrId       _wrkCtrId,
                                 RouteMap       _route,
                                 RouteOprMap    _opr,
                                 ItemId         _itemId         = '', // BOM itemId
                                 InventDimId    _inventDimId    = '') // BOM item's dimension
    {
        RouteCalcConsumption  routeCalcConsumption = RouteCalcConsumption::construct(_primaryOpr.Formula);

        return routeCalcConsumption.calcWrkCtrSetUpTime(_itemCalcData,
                                                        _primaryRoute,
                                                        _primaryOpr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalCategoryHours</Name>
				<Source><![CDATA[
    boolean checkJournalCategoryHours(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,ProdParametersDim::find(prodJournalRoute.ProdInventDimId).MandatoryCategoryHours);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the employee that is specified in the route journal is valid.
    /// </summary>
    /// <param name="prodJournalRoute">
    /// A record in the <c>ProdJournalRoute</c> table.
    /// </param>
    /// <param name="mandatory">
    /// A <c>NoYes</c> enumeration value; optional.
    /// </param>
    /// <returns>
    /// true if the check is successful; otherwise, false.
    /// </returns>
    boolean checkJournalEmployee(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalHours</Name>
				<Source><![CDATA[
    boolean checkJournalHours(ProdJournalRoute prodJournalRoute,boolean ask = false)
    {
        if (ask)
        {
            return true;
        }

        if (prodJournalRoute.Hours < 0
            && prodJournalRoute.OprNum
            && decRound(ProdRouteTrans::hoursOpr(prodJournalRoute.ProdId,
                                        prodJournalRoute.OprNum,
                                        prodJournalRoute.OprPriority,
                                        RouteJobType::Setup) + prodJournalRoute.Hours, 2) < 0)
        {
            return checkFailed("@SYS2093");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalPayrollCategoryHours</Name>
				<Source><![CDATA[
    boolean checkJournalPayrollCategoryHours(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalPayrollCategoryQty</Name>
				<Source><![CDATA[
    boolean checkJournalPayrollCategoryQty(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournalWrkCtrId</Name>
				<Source><![CDATA[
    boolean checkJournalWrkCtrId(ProdJournalRoute prodJournalRoute,NoYes mandatory= NoYes::No)
    {
        return super(prodJournalRoute,NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEstimateHours</Name>
				<Source><![CDATA[
    NoYes costEstimateHours(RouteGroup routeGroup)
    {
        return routeGroup.CalcSetUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalRoute</Name>
				<Source><![CDATA[
    ProdJournalRoute initProdJournalRoute(ProdRoute         _prodRoute,
                                        ProdJournalRoute    _prodJournalRoute     = null,
                                        ProdRouteJob        _prodRouteJob         = null,
                                        boolean             _resetCategoryId      = false
                                   )
    {
        if (_resetCategoryId)
        {
            _prodJournalRoute.CategoryHoursId = '';
            _prodJournalRoute.CategoryQtyId = '';
        }
        super(_prodRoute, _prodJournalRoute, _prodRouteJob, _resetCategoryId);

        if (_prodRouteJob)
        {
            WrkCtrTable wrkCtrTable = WrkCtrTable::find(_prodRouteJob.WrkCtrId);

            _prodJournalRoute.setCategoryHours(wrkCtrTable.SetUpCategoryId);
            _prodJournalRoute.setCategoryQty(wrkCtrTable.QtyCategoryId, _prodRoute.PhantomBOMFactor);
        }

        if ( !_prodJournalRoute.CategoryHoursId)
        {
            _prodJournalRoute.setCategoryHours(_prodRoute.SetUpCategoryId);
        }

        if ( !_prodJournalRoute.CategoryQtyId)
        {
            _prodJournalRoute.setCategoryQty(_prodRoute.QtyCategoryId,_prodRoute.PhantomBOMFactor);
        }

        return _prodJournalRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRouteJobSetup</Name>
				<Source><![CDATA[
    RouteJobSetup initRouteJobSetup(RouteJobSetup routeJobSetup = null)
    {
        routeJobSetup.Activation        = NoYes::Yes;
        routeJobSetup.SchedCapacity     = NoYes::Yes;
        routeJobSetup.SchedWorkTime     = NoYes::Yes;
        routeJobSetup.JobCtrlTime       = NoYes::Yes;

        return routeJobSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcBePosted</Name>
				<Source><![CDATA[
    boolean  mustCalcBePosted(ProdRouteTrans prodRouteTrans)
    {
        if (prodRouteTrans.isProjMethodConsumed())
            return false;

        return prodRouteTrans.Amount ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProjBePosted</Name>
				<Source><![CDATA[
    boolean  mustProjBePosted(ProdRouteTrans prodRouteTrans)
    {
        return prodRouteTrans.isProjMethodConsumed() ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustWIPBePosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if work in process must be posted for the specified <c>ProdRouteTrans</c> record.
    /// </summary>
    /// <param name="_prodRouteTrans">
    /// A <c>ProdRouteTrans</c> record which represent a route transaction.
    /// </param>
    /// <returns>
    /// true if the work in process ledger accounts must be posted; otherwise, false.
    /// </returns>
    boolean  mustWIPBePosted(ProdRouteTrans _prodRouteTrans)
    {
        // <GEERU>
        if (! _prodRouteTrans.mustWIPBePosted_RU() || _prodRouteTrans.isProjMethodConsumed())
        // </GEERU>
        {
            return false;
        }

        if (   _prodRouteTrans.Hours
            && this.costEstimateHours(_prodRouteTrans.prodRoute().routeGroup()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numType</Name>
				<Source><![CDATA[
    Integer numType()
    {
        return 20;
    }

]]></Source>
			</Method>
			<Method>
				<Name>propertyId</Name>
				<Source><![CDATA[
    PropertyId propertyId(
        RouteMap        route,
        RouteOprMap     opr)
    {
        if (! route.OprPriority)
            return opr.PropertyId;
        else
            return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeJobType</Name>
				<Source><![CDATA[
    RouteJobType routeJobType()
    {
        return RouteJobType::Setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleAllJobs</Name>
				<Source><![CDATA[
    boolean scheduleAllJobs()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleNextJobLinkType</Name>
				<Source><![CDATA[
    SchedJobLinkType scheduleNextJobLinkType()
    {
        return SchedJobLinkType::Hard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleSecondaryJobs</Name>
				<Source><![CDATA[
    boolean scheduleSecondaryJobs()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalcConsumptionProdRoute</Name>
				<Source><![CDATA[
    void setCalcConsumptionProdRoute(ProdRoute          prodRoute,
                               BOMCalcData      itemCalcData
                              )
    {
        prodRoute.CalcSetUp= this.calcCalcHours(itemCalcData,prodRoute.primary(),prodRoute.primary(),prodRoute,prodRoute);

        if (prodRoute.isProjMethodConsumed())
            ProjJournalTransMapForm::construct(prodRoute.prodRouteProj(ItemCalcType::Setup), prodRoute).fieldModifiedQtyPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostCategoryHoursFromResource</Name>
				<Source><![CDATA[
    internal void setCostCategoryHoursFromResource(ProdJournalRoute  _prodJournalRoute,
                                                   WrkCtrTable       _wrkCtrTable)
    {
        _prodJournalRoute.setCategoryHours(_wrkCtrTable.SetUpCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealConsumption</Name>
				<Source><![CDATA[
    void updateRealConsumption(ProdTable        _prodTable,
                               ProdRouteTrans   _prodRouteTrans,
                               boolean          _addValues = true,
                               Percent          _allocation = 100)
    {
        ProdRoute       prodRoute = _prodRouteTrans.prodRoute();

        setprefix("@SYS28532");
        setprefix(#PreFixField(_ProdRouteTrans,OprNum));
        var costGroupId = BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, _prodRouteTrans.routeCostCategory().CostGroupId);

        if ((prodRoute.routeGroup().CalcSetUp   ==  NoYes::Yes) &&
            (_prodRouteTrans.TransType  ==  ProdRouteTransType::Time)
           )
        {
            ItemCalcType calcType = ItemCalcType::Setup;

            ProdCalcTrans prodCalcTrans = ProdCalcTrans::findIdRefCalcType(prodRoute.TableId,
                                                                           prodRoute.RecId,
                                                                           calcType,
                                                                           true,
                                                                           _prodRouteTrans.WrkCtrId,
                                                                           _prodRouteTrans.OprId,
                                                                           _prodRouteTrans.OprNum,
                                                                           costGroupId);

            if (!prodCalcTrans)
            {
                prodCalcTrans.initFromProdTable(_prodTable, calcType);
                prodCalcTrans.initFromProdRoute(prodRoute);
                prodCalcTrans.Resource      = _prodRouteTrans.WrkCtrId;
                prodCalcTrans.OprId         = _prodRouteTrans.OprId;
                prodCalcTrans.OprNum        = _prodRouteTrans.OprNum;
                prodCalcTrans.CostGroupId   = costGroupId;
                prodCalcTrans.Production    = NoYes::No;
                prodCalcTrans.LineNum       = ProdCalcTrans::lastLineNum(_prodTable.ProdId, ProdTransRefType::Production) + 1;
            }

            if (_addValues)
            {
                prodCalcTrans.RealConsump      += _prodRouteTrans.Hours
                    * _allocation/100
                    ;
                prodCalcTrans.RealCostAmount   += _prodRouteTrans.Amount
                    * _allocation/100
                    ;
            }
            else
            {
                prodCalcTrans.RealConsump      = _prodRouteTrans.Hours
                    * _allocation/100
                    ;
                prodCalcTrans.RealCostAmount   = _prodRouteTrans.Amount
                    * _allocation/100
                    ;
            }

            prodCalcTrans.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRealConsumptionCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the actual consumption for the co-product or byproduct.
    /// </summary>
    /// <param name="_prodTable">
    /// A production record.
    /// </param>
    /// <param name="_prodRouteTrans">
    /// A production route transaction.
    /// </param>
    /// <param name="_allocation">
    /// A cost allocation percentage.
    /// </param>
    /// <param name="_cobyRecId">
    /// The record ID of the co-product or byproduct record.
    /// </param>
    public void updateRealConsumptionCoBy(
        ProdTable       _prodTable,
        ProdRouteTrans  _prodRouteTrans,
        Percent         _allocation,
        RecId           _cobyRecId)
    {
        PmfCoByProdCalcTrans    pmfCoByProdCalcTrans;
        ProdRoute               prodRoute = _prodRouteTrans.prodRoute();

        setprefix("@SYS28532");
        setprefix(#PreFixField(_prodRouteTrans,OprNum));

        if ((prodRoute.routeGroup().CalcSetUp   ==  NoYes::Yes) &&
            (_prodRouteTrans.TransType  ==  ProdRouteTransType::Time))
        {
            ItemCalcType calcType = ItemCalcType::Setup;

            select firstonly forupdate pmfCoByProdCalcTrans
                where pmfCoByProdCalcTrans.IdRefTableId       == prodRoute.TableId
                    && pmfCoByProdCalcTrans.IdRefRecId        == prodRoute.RecId
                    && pmfCoByProdCalcTrans.CalcType          == calcType
                    && pmfCoByProdCalcTrans.PmfIdRefCoByRecId == _cobyRecId;

            if (!pmfCoByProdCalcTrans)
            {
                pmfCoByProdCalcTrans.initFromProdTable(_prodTable, calcType);
                pmfCoByProdCalcTrans.initFromProdRoute(prodRoute);
                pmfCoByProdCalcTrans.Resource = _prodRouteTrans.WrkCtrId;
                pmfCoByProdCalcTrans.CostGroupId    =
                    BOMCostGroup::costGroupId(CostGroupType::DirectManufacturing, _prodRouteTrans.routeCostCategory().CostGroupId);
                pmfCoByProdCalcTrans.Production     = NoYes::No;
                pmfCoByProdCalcTrans.CalcType       = calcType;
                pmfCoByProdCalcTrans.UnitId         = PmfCoByProdCalcTrans::calcHourUnit();
                pmfCoByProdCalcTrans.OprId          = _prodRouteTrans.OprId;
                pmfCoByProdCalcTrans.OprNum     = _prodRouteTrans.OprNum;

                pmfCoByProdCalcTrans.PmfIdRefCoByRecId = _coByRecId;
            }

            pmfCoByProdCalcTrans.RealConsump    +=
                _prodRouteTrans.Hours * _allocation/100;
            pmfCoByProdCalcTrans.RealCostAmount +=
                _prodRouteTrans.Amount * _allocation/100;

            pmfCoByProdCalcTrans.write();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>