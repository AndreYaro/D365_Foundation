<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TsWorkflowActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class  TsWorkflowActionManager implements IValidateWorkflowWorkItemAction
{
    WorkflowComment         workflowComment;
    WorkflowVersionTable    workflowVersionTable;
    TSTimesheetTable        tsTimesheetValidate;
    boolean bypassDialog;
    boolean canceledAction;

    private WorkflowUser workflowUser;
    private WorkflowWorkItemTable workflowWorkItemTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the submit validation dialog.
    /// </summary>
    /// <param name="ok">
    /// If true is passed in the dialog will be bypassed
    /// </param>
    /// <returns>
    /// True if the user verified the submit; otherwise, false.
    /// </returns>
    public boolean dialogOk(boolean ok = false)
    {
        WorkflowSubmitDialog        workflowSubmitDialog;

        if (!ok)
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(workflowVersionTable);
            workflowSubmitDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
            workflowSubmitDialog.run();

            if (workflowSubmitDialog.parmIsClosedOK())
            {
                ok = true;
                workflowComment =  workflowSubmitDialog.parmWorkflowComment();
            }
            else
            {
                canceledAction = true;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogOkForResubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the resubmit validation dialog.
    /// </summary>
    /// <param name="_args">
    /// The arguments the resubmit was called with.
    /// </param>
    /// <param name="ok">
    /// If true is passed in the dialog will be bypassed
    /// </param>
    /// <returns>
    /// True if the user verified the resubmit; otherwise, false.
    /// </returns>
    public boolean dialogOkForResubmit(Args _args, boolean ok = false)
    {
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        WorkflowWorkItemActionType      workItemActionType;
        WorkflowWorkItemTable           workItem;
        MenuFunction                    workItemActionMenuFunc;

        this.validateArgsObject(_args, funcName());

        if (!ok)
        {
            workItem = this.getCallerActiveWorkflowWorkItem(_args);
            workItemActionType = WorkflowWorkItemActionManager::findActionTypeForMenuItem(workItem, _args.menuItemName());
            workItemActionMenuFunc = new MenuFunction(_args.menuItemName(),_args.menuItemType());
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workItem, workItemActionType, workItemActionMenuFunc);

            workflowWorkItemActionDialog.run();

            if (workflowWorkItemActionDialog.parmIsClosedOK())
            {
                ok = true;
                workflowComment =  workflowWorkItemActionDialog.parmWorkflowComment();
            }
            else
            {
                canceledAction = true;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResubmitAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>args</c> value in the method.
    /// </summary>
    /// <param name="_args">
    /// The original <c>args</c> object from resubmit menu item action.
    /// </param>
    /// <returns>
    /// true if there are no validation error; otherwise, false.
    /// </returns>
    public boolean doResubmitAction(Args _args)
    {
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetLineWeek tsTimesheetLineWeek;
        WorkflowContext workflowContext = WorkflowContext::construct();

        this.validateArgsObject(_args, funcName());

        TableId callerDataSet = _args.dataset();

        // Flag to check if zero hour lines have to be deleted during the validateSubmit.
        boolean deleteZeroHourLines = true;

        if (!this.validatePolicies(_args.record()))
        {
            // The policies failed validation do not allow the resubmit.
            return false;
        }

        if (callerDataSet == tableNum(TSTimesheetTable))
        {
            WorkflowWorkItemTable workItem;
            workItem.clear();

            // Attempt to get the workItem from the caller.
            workItem = this.getCallerActiveWorkflowWorkItem(_args);

            if (workItem.RecId == 0)
            {
                throw error("@SYS109040");
            }

            ttsbegin;

            var tsTimesheetTable =  TSTimesheetTable::findRecId(_args.record().RecId, true);

            if (!tsTimesheetTable.validateSubmit())
            {
                ttsabort;
                return false;
            }

            ttscommit;
        }
        else if (callerDataSet == tableNum(TSTimesheetLine))
        {
            tsTimesheetLine = TSTimesheetLine::findRecId(_args.record().RecId, true);

            ttsbegin;

            if (tsTimesheetLine.totalWeekHours() == 0 )
            {
                // When the total number of hours for the week is zero while resubmitting, set the deleteZeroHourLines flag to false.
                deleteZeroHourLines = false;
            }

            if (!tsTimesheetLine.validateSubmit(true, deleteZeroHourLines))
            {
                // The timesheet lines did not pass vaidation do not allow the resubmit.
                ttsabort;
                return false;
            }

            ttscommit;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBypassDialog</Name>
				<Source><![CDATA[
    public boolean parmBypassDialog(boolean _bypassDialog = bypassDialog)
    {
        bypassDialog = _bypassDialog;

        return bypassDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanceledAction</Name>
				<Source><![CDATA[
    public boolean parmCanceledAction(boolean _canceledAction = canceledAction)
    {
        canceledAction = _canceledAction;

        return canceledAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowUser</Name>
				<Source><![CDATA[
    internal WorkflowUser parmWorkflowUser(WorkflowUser _workflowUser = workflowUser)
    {
        workflowUser = _workflowUser;

        return workflowUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItemTable(WorkflowWorkItemTable _workflowWorkItemTable = WorkflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(Args _args)
    {
        WorkflowWorkItemActionManager workflowWorkItemActionManager = new WorkflowWorkItemActionManager();
        FormRun                 timesheetEntryCaller;
        TSTimesheetLine         tsLine;
        TSTimesheetTable        tsTimesheetTable;
        TSTimesheetLineWeek     tsTimesheetLineWeek;
        TSTimesheetTrans        tsTimesheetTrans;

        // Validate the args object isn't null.
        this.validateArgsObject(_args, funcName());

        // Set the local caller properties.
        Object caller = _args.caller();
        Common callerRecord = _args.record();
        TableId callerDataSet = _args.dataset();
        str callerMenuItem = _args.menuItemName();
        str callerParm = _args.parm();

        if (callerRecord is TSTimesheetTable)
        {
            tsTimesheetValidate = callerRecord as TSTimesheetTable;
        }

        timesheetEntryCaller = TSWorkflowActionManager::getTsITimesheetEntryFromArgs(_args);
            
        if (timesheetEntryCaller == null)
        {
            timesheetEntryCaller = TsWorkflowActionManager::getTsITimesheetEntryMobileFromArgs(_args);
        }

        if (callerParm == TSConstants::BypassDialog)
        {
            this.parmBypassDialog(true);
        }

        this.parmCanceledAction(false);

        if (callerMenuItem == menuitemActionStr(TSWorkflowSubmit) && callerDataSet == tableNum(TSTimesheetTable))
        {
            if (!this.validateIsOwnerOrDelegateOnSubmit(callerRecord as TSTimesheetTable)
                || !this.submitToWorkflow(_args))
            {
                return;
            }
        }
        else
        {
            if (callerMenuItem == menuitemActionStr(TSWorkflowResubmit))
            {
                if (!this.doResubmitAction(_args))
                {
                    return;
                }
            }
            else if (callerMenuItem == menuitemActionStr(TSWorkflowApprove))
            {
                if (!this.validatePolicies(callerRecord) || !this.validateProjectStatus(callerRecord))
                {
                    return;
                }
            }

            if (this.parmBypassDialog())
            {
                // Perform workflow action headlessly
                WorkflowWorkItemActionType workItemActionType = WorkflowWorkItemActionManager::findActionTypeForMenuItem(this.parmWorkflowWorkItemTable(), callerMenuItem);
                WorkflowWorkItemActionManager::dispatchWorkItemAction(this.parmWorkflowWorkItemTable(), this.parmWorkflowComment(), this.parmWorkflowUser(), workItemActionType, callerMenuItem);
            }
            else if (callerMenuItem == menuitemActionStr(TSWorkflowApprove))
            {
                // Executes specific action dialog run event for timesheet workflow approve actions.
                TSWorkflowWorkItemActionManager tsWorkflowWorkItemActionManager = TSWorkflowWorkItemActionManager::construct();

                tsWorkflowWorkItemActionManager.parmArgs(_args);
                tsWorkflowWorkItemActionManager.parmCaller(caller);
                tsWorkflowWorkItemActionManager.run();
                this.parmCanceledAction(!tsWorkflowWorkItemActionManager.parmIsActionDialogClosedOK());
            }
            else
            {
                workflowWorkItemActionManager.parmArgs(_args);
                workflowWorkItemActionManager.parmCaller(caller);
                workflowWorkItemActionManager.run();
                this.parmCanceledAction(!workflowWorkItemActionManager.parmIsActionDialogClosedOK());
            }
        }

        if (this.parmCanceledAction() && timesheetEntryCaller != null && timesheetEntryCaller is FormRun)
        {
            this.refreshTimesheetEntryCaller(timesheetEntryCaller, _args);
        }

        if (callerMenuItem == menuitemActionStr(TSWorkflowResubmit) && !this.parmCanceledAction())
        {
            if (callerDataSet == tableNum(TSTimesheetTable))
            {
                tsTimesheetTable = callerRecord as TSTimesheetTable;

                if (tsTimesheetTable.RecId)
                {
                    this.updateToInReview(tsTimesheetTable, TSTimesheetHelper::recordHasLineItemApproval(tsTimesheetTable));
                    tsTimesheetTable.createCommitmentCostRecords();
                }
            }

            if (callerDataSet == tableNum(TSTimesheetLine))
            {
                ttsbegin;

                tsLine = TSTimesheetLine::findRecId(callerRecord.RecId, true);
                tsLine.ApprovalStatus = TSAppStatus::Pending;
                tsLine.doUpdate();

                while select forupdate tsTimesheetTrans
                    exists join tsTimesheetLineWeek
                        where tsTimesheetTrans.TSTimesheetLineWeek == tsTimesheetLineWeek.RecId &&
                            tsTimesheetLineWeek.TSTimesheetLine == tsLine.RecId
                {
                    tsTimesheetTrans.createCommitmentCostRecords();
                    tsTimesheetTrans.ApprovalStatus = TSAppStatus::Pending;
                    tsTimesheetTrans.doUpdate();
                }

                ttscommit;
            }
        }
        else if (callerMenuItem == menuitemActionStr(TSWorkflowReturn) && !this.parmCanceledAction())
        {
            if (callerDataSet == tableNum(TSTimesheetLine))
            {
                tsLine = callerRecord as TSTimesheetLine;
                tsLine.selectForUpdate(true);

                ttsbegin;
                tsLine.ApprovalStatus = TSAppStatus::Returned;
                tsLine.doUpdate();
                ttscommit;
            }
        }

        if (callerDataSet == tableNum(TSTimesheetTable) && !this.parmCanceledAction())
        {
            // Handle logic to be performed if the workflow action taken was doc level and not cancelled
            TsWorkflowActionManager::onTimesheetDocLevelWorkflowActionCompleted(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTimesheetDocLevelWorkflowActionCompleted</Name>
				<Source><![CDATA[
    private static void onTimesheetDocLevelWorkflowActionCompleted(Args _args)
    {
        var timesheetEntryForm = TSWorkflowActionManager::getTsITimesheetEntryFromArgs(_args);
        if (timesheetEntryForm)
        {
            timesheetEntryForm.workflowActionCompleted();
        }

        if (timesheetEntryForm == null)
        {
            var timesheetEntryMobile = TsWorkflowActionManager::getTsITimesheetEntryMobileFromArgs(_args);
            if (timesheetEntryMobile)
            {
                timesheetEntryMobile.workflowActionCompleted();
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTsITimesheetEntryFromArgs</Name>
				<Source><![CDATA[
    private static TSITimesheetEntry getTsITimesheetEntryFromArgs(Args _args)
    {
        if (_args.caller() is TSITimesheetEntry)
        {
            return _args.caller();
        }
        else if (_args.caller() is WorkflowIDropDialog)
        {
            var dropDialogForm = _args.caller() as WorkflowIDropDialog;

            if (dropDialogForm.getCallingForm().args().caller() is TSITimesheetEntry)
            {
                return dropDialogForm.getCallingForm().args().caller();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTsITimesheetEntryMobileFromArgs</Name>
				<Source><![CDATA[
    private static TSITimesheetEntryMobile getTsITimesheetEntryMobileFromArgs(Args _args)
    {
        if (_args.caller() is TSITimesheetEntryMobile)
        {
            return _args.caller();
        }
        else if (_args.caller() is WorkflowIDropDialog)
        {
            var dropDialogForm = _args.caller() as WorkflowIDropDialog;

            if (dropDialogForm.getCallingForm().args().caller() is TSITimesheetEntryMobile)
            {
                return dropDialogForm.getCallingForm().args().caller();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a timesheet document was submitted to workflow by the current user.
    /// </summary>
    /// <param name="_args">
    /// The menu item that contains the current selected record and the workflow related information.
    /// </param>
    /// <returns>
    /// true if there are no validation errors; otherwise, false.
    /// </returns>
    public boolean submitToWorkflow(Args _args)
    {
        TSTimesheetTable tsTimesheetTable;
        FormDataSource callerFormDataSource;
        
        TSTimesheetInstrumentationLogger workflowSubmissionLogger = TSTimesheetInstrumentationLogger::createLogger('TsWorkflowActionManager');
        TSTimesheetInstrumentationActivities submissionActivities = TSTimesheetInstrumentationActivities::construct(workflowSubmissionLogger);
        using (var submitContext = submissionActivities.submitToWorkflowContext())
        {
            this.validateArgsObject(_args, funcName());

            Common callerRecord = _args.record();

            workflowVersionTable = Workflow::findWorkflowConfigToActivateForType(workFlowTypeStr(TSDocumentTemplate),
                                                                             callerRecord.RecId,
                                                                             callerRecord.TableId);

            workflowSubmissionLogger.logInformation(strFmt('WorkflowVersionTable - RecId: %1, WorkflowTable: %2, Version: %3.%4.%5.%6',
                workflowVersionTable.RecId, workflowVersionTable.workflowTable, workflowVersionTable.VersionIdMajor,
                workflowVersionTable.VersionIdMinor, workflowVersionTable.VersionIdBuild, workflowVersionTable.VersionIdRevision));

            Debug::assert(workflowVersionTable.RecId != 0);

            tsTimesheetTable = callerRecord as TSTimesheetTable;

            Debug::assert(tsTimesheetTable.RecId != 0);

            if (!this.validatePolicies(callerRecord))
            {
                workflowSubmissionLogger.logInformation(strFmt('validatePolicies for TimeSheet with RecId:%1 if false', 
                    tsTimesheetTable.RecId));
                return false;
            }

            //
            // Exclusively save the table buffer so that the grid is refreshed
            // We need this because the validateSubmit actually changes the data buffer - to accomodate the budget changes
            // Get the line week datasource
            //

            FormRun timesheetEntryCaller = TsWorkflowActionManager::getTsITimesheetEntryFromArgs(_args);

            if (timesheetEntryCaller == null)
            {
                timesheetEntryCaller = TsWorkflowActionManager::getTsITimesheetEntryMobileFromArgs(_args);
            }

            if (timesheetEntryCaller != null)
            {
                callerFormDataSource = timesheetEntryCaller.dataSource(tablestr(TSTimesheetLineWeek));

                if (callerFormDataSource)
                {
                    callerFormDataSource.reread();
                    callerFormDataSource.refresh();
                }

                // Do the same for line datasource
                callerFormDataSource = timesheetEntryCaller.dataSource(tablestr(TSTimesheetLine));

                if (callerFormDataSource)
                {
                    callerFormDataSource.reread();
                    callerFormDataSource.refresh();
                }
            }

            canceledAction = false;

            if (this.dialogOk(this.parmBypassDialog()))
            {
                ttsbegin;
                tsTimesheetTable.selectForUpdate(true);
                Workflow::activateFromWorkflowConfigurationId(workflowVersionTable.ConfigurationId,
                                                          callerRecord.RecId,
                                                          this.parmWorkflowComment(),
                                                          NoYes::No);
                this.updateToInReview(tsTimesheetTable, false);
                ttscommit;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToInReview</Name>
				<Source><![CDATA[
    private void updateToInReview(TSTimesheetTable tsTimesheetTable, boolean isLineItemApprovalConfigured)
    {
        TSTimesheetLine tsTimesheetLine;
        TSTimesheetTrans tsTrans;

        if (tsTimesheetTable.ApprovalStatus != TSAppStatus::Pending)
        {
            if (!TSStateChangeManager::validateStatusChange(tsTimesheetTable.ApprovalStatus, TSAppStatus::Pending))
            {
                throw error(strFmt("@SYS108515",tsTimesheetTable.ApprovalStatus, TSAppStatus::Pending));
            }

            tsTimesheetTable.ApprovalStatus = TSAppStatus::Pending;
            ttsbegin;
            tsTimesheetTable.doUpdate();
            ttscommit;
        }

        if (!isLineItemApprovalConfigured)
        {
            // The status change is unrelated to other data changes and should not require any row-by-row processing.
            tsTimesheetLine.skipDataMethods(true);
            tsTrans.skipDataMethods(true);

            tsTimesheetLine.skipDatabaseLog(true);
            tsTrans.skipDatabaseLog(true);

            tsTimesheetLine.skipEvents(true);
            tsTrans.skipEvents(true);

            update_recordset tsTimesheetLine setting ApprovalStatus = TSAppStatus::Pending where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
            update_recordset tsTrans setting ApprovalStatus = TSAppStatus::Pending where tsTrans.TimesheetNbr == tsTimesheetTable.TimesheetNbr;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the project budget
    /// </summary>
    /// <param name = "common">
    /// TSTimesheetTable or TSTimesheetLine record
    /// </param>
    /// <returns>
    /// true if within the budget range; otherwise, false.
    /// </returns>
    public boolean validateBudget(Common common)
    {
        TSTimesheetTable tsTimesheetTable;
        TSTimesheetLine tsTimesheetLine;
        boolean retval = true;

        if (common is TSTimesheetTable)
        {
            tsTimesheetTable = common;
            retval = tsTimesheetTable.validateBudget();
        }
        else
        {
            tsTimesheetLine = common;
            retval = tsTimesheetLine.validateBudget();
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WorkflowWorkItemTable</c> table.
    /// </summary>
    /// <param name="_tableId">
    ///    The table ID of the table to find.
    /// </param>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    A record in the <c>WorkflowWorkItemTable</c> table; otherwise, an empty record.
    /// </returns>
    public static WorkflowWorkItemTable findWorkItem(TableId _tableId, RecId _recId)
    {
        WorkflowWorkItemTable workItem;

        select firstonly workItem where workItem.RefTableId == _tableId &&
                                        workItem.RefRecId == _recId &&
                                        workItem.Status == WorkflowWorkItemStatus::Pending &&
                                        workItem.UserId == curUserId();

        if (!workItem.RecId)
        {
            return null;
        }

        return workItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineItemApprovalConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a line item approval is configured for the supplied workflow correlation reference.
    /// </summary>
    /// <param name = "rootCorrelationId">The supplied workflow correlation reference</param>
    /// <returns>true if line item approval is configured the workflow correlation reference; otherwise, false</returns>
    public static boolean isLineItemApprovalConfigured(WorkflowCorrelationId rootCorrelationId)
    {
        WorkflowVersionTable versionTable;
        WorkflowSubWorkflow subWorkflow;
        SysWorkflowTable workflowTable = SysWorkflowTable::find(rootCorrelationId);

        if (workflowTable.RecId)
        {
            select RecId,ConfigurationId from versionTable
                    join RecId,WorkflowVersionTable from subWorkflow
                    where versionTable.RecId == subWorkflow.WorkflowVersionTable
                        && subWorkflow.ElementType == WorkflowElementType::LineItemWorkflow
                        && versionTable.ConfigurationId == workflowTable.ConfigurationId;

            return versionTable.RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLineItemConfiguredForWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a line item approval is configured for the supplied workflow version reference.
    /// </summary>
    /// <param name = "workflowVersionTable">The supplied workflow version reference</param>
    /// <returns>true if line item approval is configured the workflow version reference; otherwise, false</returns>
    public static boolean isLineItemConfiguredForWorkflow(WorkflowVersionTable workflowVersionTable)
    {
        WorkflowSubWorkflow subWorkflow;

        select firstonly RecId, WorkflowVersionTable from subWorkflow
            where subWorkflow.ElementType == WorkflowElementType::LineItemWorkflow
                && subWorkflow.WorkflowVersionTable == workflowVersionTable.RecId;

        return subWorkflow.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsOwnerOrDelegateOnSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the supplied timesheet is being submitted by the owner or a delagate for the owner.
    /// </summary>
    /// <param name = "_timeSheetTable">The timesheet being submitted</param>
    /// <returns>true if the timesheet was submitted by the owner or a delegate; otherwise, false</returns>
    public boolean validateIsOwnerOrDelegateOnSubmit(TSTimesheetTable _timeSheetTable)
    {
        TSResourceRecId currentResourceRecId = ResourceFacade::findByCurrentWorker();

        boolean isOwnerOrDelegateOnSubmit = TSTimesheetHelper::isOwnerOrDelegate(_timeSheetTable, currentResourceRecId);

        if (!isOwnerOrDelegateOnSubmit)
        {
            //
            // Current resource is neither a timesheet owner nor a delegate of the timesheet owner so they
            // are not allowed to submit the timesheet.
            //
            error(strFmt("@SYS340336", this.getUserName(currentResourceRecId)));
        }

        return isOwnerOrDelegateOnSubmit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TSWorkflowActionManager  workflowActionManager = TSWorkflowActionManager::construct();

        workflowActionManager.validateArgsObject(_args, funcName());

        workflowActionManager.run(_args);

        if (_args.menuItemName() == 'TSWorkflowApprove')
        {
            TSWorkflowActionManager::logTimesheetDetails(_args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTimesheetDetails</Name>
				<Source><![CDATA[
    private static void logTimesheetDetails(common record)
    {
        TSTimesheetTable timesheetTable = record as TSTimesheetTable;

        if (timesheetTable is TSTimesheetTable)
        {
            TSManagementLogger logger = TSManagementLogger::createLogger('TSTimesheetTable');
            TSInstrumentationActivities activites = TSInstrumentationActivities::construct(logger);
            using (var context = logger.timesheetInstrumentationActivity().workflowApproveContext())
            {
                AccountingDistribution accountingDistribution;
                TSTimesheetLine tsTimesheetLine;
                TSTimesheetTrans tsTimesheetTrans;
                TSTimesheetLineWeek tsTimesheetLineWeek;
                DimensionAttributeValueSet dimensionAttributeValueSet;
                DimensionAttributeValueCombination dimensionAttributeValueCombination;
                ProjTable projTable;

                while select RecId, LedgerDimension from accountingDistribution
                    where accountingDistribution.SourceDocumentHeader == timesheetTable.SourceDocumentHeader
                    join SourceDocumentLine, TimesheetNbr from tsTimesheetTrans
                        where tsTimesheetTrans.SourceDocumentLine == accountingDistribution.SourceDocumentLine
                    join RecId, DefaultDimension, ProjId, ProjectDataAreaId, Resource from tsTimesheetLine
                        where tsTimesheetLine.TimesheetNbr == tsTimesheetTrans.TimesheetNbr
                    join ProjId, DefaultDimension from projTable
                        where projTable.ProjId == tsTimesheetLine.ProjId
                {

                    if (tsTimesheetLine.DefaultDimension == 0)
                    {
                        var logStr = strFmt(
                                'AccountingDistribution for TSTimesheetline is missing DefaultDimension: ' +
                                'AccountingDistibution RecId: %1, TSTimesheetLine RecId: %2, ' +
                                'TSTimesheetLine DefaultDimension: %3, TSTimesheetLine ProjId: %4' ,
                                accountingDistribution.RecId, tsTimesheetLine.RecId,
                                tsTimesheetLine.DefaultDimension, tsTimesheetLine.ProjId);
                        logger.logWarning(logStr);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default constructor
    /// </summary>
    /// <returns>A <c>TSWorkflowActionManager</c> object instance</returns>
    public static TSWorkflowActionManager construct()
    {
        return new TSWorkflowActionManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePolicies</Name>
				<Source><![CDATA[
    private boolean validatePolicies(common record)
    {
        return TSPolicyEvalEngine::evaluatePoliciesForTimesheet(record, SysPolicyTypeEnum ::TimesheetPolicy );
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the timesheet can be approved or posted based on the related project status and the project status rules.
    /// </summary>
    /// <param name="_common">
    /// <c>Common</c> buffer.
    /// </param>
    /// <returns>
    /// Returns true if the timesheet can be posted or approved based on the project status and project rules; otherwise, returns false.
    /// </returns>
    private boolean validateProjectStatus(Common _common)
    {
        TSTimesheetTable    tsTimesheetTable;
        TSTimesheetLine     tsTimesheetLine;
        boolean             retval = true;

        switch (_common.TableId)
        {
            case tableNum(TSTimesheetTable):
                tsTimesheetTable = _common;
                retval = tsTimesheetTable.checkProjId();
                break;

            case tableNum(TSTimesheetLine):
                tsTimesheetLine = _common;
                retval = tsTimesheetLine.checkProjId();

                break;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user's name using a supplied timesheet resource ID.
    /// </summary>
    /// <param name = "_currentResourceRecId">The supplied timesheet resource ID</param>
    /// <returns>The user's name</returns>
    private Name getUserName(TSResourceRecId _currentResourceRecId)
    {
        Name userName;

        if (_currentResourceRecId)
        {
            // The current resource is a worker, use the worker's name.
            userName = ResourceFacade::getName(_currentResourceRecId);
        }
        else
        {
            // The current resource is a not a worker, use the user's name.
            userName = xUserInfo::find(false, curUserId()).name;
        }

        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTimesheetEntryCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the workflow controls and the TsTimesheetTable and TsTimesheet line datasources in the caller form.
    /// </summary>
    /// <param name = "_timesheetEntryCaller">Caller form.</param>
    /// <param name = "_args">Args that have been passed to the workflow and that contains the record being processed.</param>
    private void refreshTimesheetEntryCaller(FormRun _timesheetEntryCaller, Args _args)
    {
        _timesheetEntryCaller.updateWorkflowControls();

        var formDs = _timesheetEntryCaller.dataSource(tablestr(TSTimesheetTable));

        if (formDs)
        {
            formDs.reread();
            formDs.refresh();

            var lineDs = _timesheetEntryCaller.dataSource(tablestr(TSTimesheetLine));
            if (lineDs)
            {
                if (_args.dataset() == tableNum(TSTimesheetLine))
                {
                    lineDs.reread();
                    lineDs.refresh();
                }
                else
                {
                    lineDs.research();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateArgsObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that supplied <c>Args</c> object instance for the called function is not null.
    /// </summary>
    /// <param name = "_args">The supplied <c>Args</c> object instance</param>
    /// <param name = "_funcName">The called function</param>
    private void validateArgsObject(Args _args, str _funcName)
    {
        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(_funcname));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerActiveWorkflowWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the active workflow work item from the caller object on the supplied <c>Args</c> object instance.
    /// </summary>
    /// <param name = "_args">The supplied <c>Args</c> object instance</param>
    /// <returns>A <c>WorkflowWorkItemTable</c> buffer</returns>
    private WorkflowWorkItemTable getCallerActiveWorkflowWorkItem(Args _args)
    {
        WorkflowWorkItemTable workItem;
        workItem.clear();

        if (_args && _args.caller())
        {
            var caller = _args.caller();

            if (caller is FormRun)
            {
                if (formHasMethod(caller, identifierStr(getActiveWorkflowWorkItem)))
                {
                    // Get the work item from the caller form.
                    workItem = caller.getActiveWorkflowWorkItem();
                }
            }
            else
            {
                // Get the work item from the caller object.
                SysDictClass callerClass = new SysDictClass(classIdGet(caller));

                if (callerClass && callerClass.hasObjectMethod(identifierStr(getActiveWorkflowWorkItem)))
                {
                    workItem = caller.getActiveWorkflowWorkItem();
                }
            }
        }

        return workItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the workflow dialog run event.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        // validates timesheet to confirming the workflow dialog to allow users to cancel the action.

        if(!tsTimesheetValidate.validateSubmit())
        {
            throw error("@Timesheet:Timesheet_TSValidation");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements IValidateWorkflowWorkItemAction.validate().
    /// </summary>
    public boolean validate(WorkflowWorkItemActionValidationContext _context)
    {
        WorkflowWorkItemTable workItem;
        Common document;

        if(!_context)
        {
            throw error("@ApplicationSuite_Localization:ValidationContextNotProvided");
        }

        workItem = _context.parmWorkItem();

        switch (workItem.RefTableId)
        {
            case tableNum(TSTimesheetTable):
                document = TSTimesheetTable::findRecId(workItem.RefRecId);
                break;

            case tableNum(TSTimesheetLine):
                document = TSTimesheetLine::findRecId(workItem.RefRecId);
                break;
            default:
                throw error(strFmt("@ApplicationSuite_Localization:InvalidRefTableIdFormat", 
                    workItem.RefTableId, tableStr(TSTimesheetTable), tableNum(TSTimesheetTable), 
                    tableStr(TSTimesheetLine), tableNum(TSTimesheetLine)));
        }

        return this.validatePolicies(document) && this.validateBudget(document) && this.validateProjectStatus(document);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>