<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcFormulaDesigner_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdCalcFormulaDesigner_IN</c> class calculates the withhold taxes based on TaxWithholdGroup, BaseAmount,TransDate, AccountNumber and TaxWithholdDirection.
/// </summary>
class TaxWithholdCalcFormulaDesigner_IN
{
    TmpTaxWithholdWorkTrans_IN  tmpTaxWithholdWorkTransloc;
    TaxWithholdGroup            taxWithholdGroup;
    Percent                     rateOfDeduction;
    TaxAmountCur                amountBaseOriginCur;
    TransDate                   transDate;
    AccountNum                  accountNum;
    RefRecId                    taxWithholdJournalRecId;
    TaxWithholdDirection_IN     taxWithholdDirection;
    boolean                     isVendorTransaction;
    CurrencyCode                currencyCode;

    #Operator_IN
    #define.Zero('0')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmountFormula</Name>
				<Source><![CDATA[
    private str calculateAmountFormula(
        str     _formula,
        real    _amount,
        str     _chargeName,
        str     _openingDelimiter = "",
        str     _closingDelimiter = "")
    {
        int     postion, chargeLength;
        str     formula;
        #define.Percentile('%')
        #define.PercentileOne('1')

        formula         = _formula;
        postion         = strScan(formula, strFmt(_openingDelimiter + #Percentile + #PercentileOne + _closingDelimiter, _chargeName), 1, strLen(formula));
        chargeLength    = strLen(strFmt(_openingDelimiter + #Percentile + #PercentileOne + _closingDelimiter, _chargeName));

        while (postion)
        {
            formula   = subStr(formula, 1, postion - 1) + num2str(any2real(_amount), 1, 4, 1, 0)
                                     + subStr(formula, postion + chargeLength, strLen(formula));
            postion = strScan(formula, strFmt(_openingDelimiter + #Percentile + #PercentileOne + _closingDelimiter, _chargeName), 1, strLen(formula));
        }
        return formula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountFormulaforTaxCode</Name>
				<Source><![CDATA[
    private container calculateAmountFormulaforTaxCode(
        str                        _formula,
        container                  _taxcode,
        Counter                    _countI,
        container                  _totalTDSAmount,
        TaxWithholdGroup           _taxWithholdGroup,
        TaxWithholdCode            _taxWithholdCode)
    {
        str                 chargeName;
        real                amount, totalAmountOrigin;
        container           taxWithhold;
        TaxWithholdCode     taxWithholdCode;
        str                 formulaLoc;

        formulaLoc      = _formula;
        chargeName      = conPeek(_taxcode, _countI);
        taxWithholdCode = chargeName;

        amount          = conPeek(_totalTDSAmount, _countI);

        totalAmountOrigin   += amount;
        formulaLoc          = this.calculateAmountFormula(formulaLoc, amount, chargeName, num2char(#nintyOne), num2char(#nintyThree));
        taxwithhold         = conPoke(taxwithhold, 1, formulaLoc);
        taxwithhold         = conPoke(taxwithhold, 2, totalAmountOrigin);

        return taxWithhold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the withhold taxes based on TaxWithholdGroup, BaseAmount,TransDate, AccountNumber and TaxWithholdDirection.
    /// </summary>
    public void calculateTax()
    {
        TaxWithholdDesignerTable_IN     taxWithholdDesignerTable;
        TaxWithholdTable                taxWithholdTableloc;
        CustTable                       custTableloc;
        VendTable                       vendTableloc;
        str                             formula, taxBasisTxt;
        TaxWithholdGroupData            taxWithholdGroupDataLoc;
        Counter                         countI, countJ = 1;
        container                       totalTDSAmount, taxcode;
        int                             checkTaxCode;
        container                       taxWithhold;
        AmountCur                       taxWithholdAmountCur, convertedAmountCur;
        AmountCur                       taxBaseAmountCur;
        real                            taxWithholdValue;
        TaxWithholdData                 taxWithholdDataLoc;
        str                             taxAmount;

        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            transDate);

        if (isVendorTransaction)
        {
            vendTableloc = VendTable::find(accountNum);
            if (vendTableloc.TaxWithholdCalculate == NoYes::No)
            {
                return;
            }
        }
        else
        {
            custTableloc = CustTable::find(accountNum);
            if (custTableloc.TaxWithholdCalculate_IN == NoYes::No)
            {
                return;
            }
        }

        rateOfDeduction  = this.rateOfDeduction();

        while select taxWithholdDesignerTable order by id
            where taxWithholdDesignerTable.TaxWithholdGroup == taxWithholdGroup
        {
            countI++;
            taxBaseAmountCur = 0;
            select firstonly taxWithholdTableLoc
                        where taxWithholdTableLoc.TaxWithholdCode == taxWithholdDesignerTable.TaxWithholdCode;

            select firstonly TaxWithholdCode, Exempt_IN from taxWithholdGroupDataLoc
                where taxWithholdGroupDataLoc.TaxWithholdCode    == taxWithholdTableLoc.TaxWithholdCode
                    && taxWithholdGroupDataLoc.TaxWithholdGroup  == taxWithholdDesignerTable.TaxWithholdGroup;

            select firstonly TaxWithholdCode, TaxWithholdFromDate, TaxWithholdToDate, TaxWithholdValue from taxWithholdDataLoc
                where taxWithholdDataLoc.TaxWithholdCode        == taxWithholdDesignerTable.TaxWithholdCode
                    && (!taxWithholdDataLoc.TaxWithholdFromDate
                    || (taxWithholdDataLoc.TaxWithholdFromDate   <= transDate
                    && taxWithholdDataLoc.TaxWithholdToDate      >= transDate));

            switch (taxWithholdDesignerTable.Basis)
                {
                    case TaxWithholdBasis_IN::GrossAmount:
                        formula         = enum2str(taxWithholdDesignerTable.Basis) + taxWithholdDesignerTable.Expression;
                        taxBasisTxt = "@SYS11818";

                        formula           = this.calculateAmountFormula(formula, amountBaseOriginCur, taxBasisTxt);
                        taxBaseAmountCur += amountBaseOriginCur;

                        if (taxWithholdGroupDataLoc.Exempt_IN)
                        {
                            formula = #zero;
                        }
                        else
                        {
                            for (countJ = 1; countJ <= conLen(taxcode); countJ++)
                            {
                                checkTaxCode = strScan(formula, strFmt("[%1]", conPeek(taxcode, countJ)), 1, strLen(formula));
                                if (checkTaxCode)
                                {
                                    taxWithhold         = this.calculateAmountFormulaforTaxCode(formula,
                                                                                            taxcode,
                                                                                            countJ,
                                                                                            totalTDSAmount,
                                                                                            taxWithholdGroup,
                                                                                            taxWithholdTableLoc.TaxWithholdCode);

                                    formula             = conPeek(taxWithhold, 1);
                                    taxBaseAmountCur   += conPeek(taxWithhold, 2);
                                }
                            }
                        }
                        break;

                    case TaxWithholdBasis_IN::ExclGrossAmount:
                        if (taxWithholdGroupDataLoc.Exempt_IN)
                        {
                            formula = #Zero;
                        }
                        else
                        {
                            formula     = strDel(taxWithholdDesignerTable.Expression,1,1);

                            for (countJ = 1; countJ <= conLen(taxcode); countJ++)
                            {
                                checkTaxCode = strScan(formula, strFmt("[%1]", conPeek(taxcode, countJ)), 1, strLen(formula));
                                if (checkTaxCode)
                                {
                                    taxWithhold         = this.calculateAmountFormulaforTaxCode(formula,
                                                                                            taxcode,
                                                                                            countJ,
                                                                                            totalTDSAmount,
                                                                                            taxWithholdGroup,
                                                                                            taxWithholdTableLoc.TaxWithholdCode);

                                    formula             = conPeek(taxWithhold, 1);
                                    taxBaseAmountCur   += conPeek(taxWithhold, 2);
                                }
                            }
                        }
                        break;

                    default:
                        break;
                }

            taxWithholdValue = taxWithholdDataLoc.getTaxWithHoldValue_IN(accountNum, isVendorTransaction);

            taxAmount = formula ? strFmt("%1 %2 %3 %4 %5",num2char(#fourZero),formula,num2char(#fourOne), num2char(#fourTwo),
                                num2str(taxWithholdValue, 5, 5, 1, 1)) : num2char(#fourEight);

            if (formula)
            {
                // Input to evalbuf has been validated
                // Only limited safe elements are allowed
                convertedAmountCur   = TaxWithholdCalculation_IN::evaluate(taxAmount);
                convertedAmountCur   = convertedAmountCur / 100;
                taxWithholdAmountCur = this.roundOffTaxWithholdAmount(CurrencyExchangeHelper::amount(convertedAmountCur),
                                                                            taxWithholdTableLoc);
            }
            totalTDSAmount  = conPoke(totalTDSAmount, countI, taxWithholdAmountCur);
            taxcode         = conPoke(taxcode, countI, taxWithholdDesignerTable.TaxWithholdCode);

            tmpTaxWithholdWorkTransloc.clear();
            tmpTaxWithholdWorkTransloc.TaxWithholdCode     = taxWithholdDesignerTable.TaxWithholdCode;
            tmpTaxWithholdWorkTransloc.SourceTaxAmountCur  = taxWithholdAmountCur;
            tmpTaxWithholdWorkTransloc.SourceBaseAmountCur = taxBaseAmountCur;
            tmpTaxWithholdWorkTransloc.RateOfDeduction     = rateOfDeduction;
            tmpTaxWithholdWorkTransloc.SourceCurrencyCode  = currencyCode;
            tmpTaxWithholdWorkTransloc.CalculationDate     = transDate;

            if (taxWithholdDirection == TaxWithholdDirection_IN::IncomingTax)
            {
                tmpTaxWithholdWorkTransloc.LedgerDimensionDefaultAccount = taxWithholdTableloc.LedgerDimension_IN;
            }
            else
            {
                tmpTaxWithholdWorkTransloc.LedgerDimensionDefaultAccount = taxWithholdTableloc.LedgerDimension;
            }

            if (currencyCode == Ledger::accountingCurrency())
            {
                tmpTaxWithholdWorkTransloc.TaxBaseAmount   = taxBaseAmountCur;
                tmpTaxWithholdWorkTransloc.TaxAmount       = taxWithholdAmountCur;
                tmpTaxWithholdWorkTransloc.AmountOriginMST = amountBaseOriginCur;
            }
            else
            {
                tmpTaxWithholdWorkTransloc.TaxBaseAmount   = currencyExchangeHelper.calculateTransactionToAccounting(currencyCode, taxBaseAmountCur, true);
                tmpTaxWithholdWorkTransloc.TaxAmount       = currencyExchangeHelper.calculateAccountingToTransaction(currencyCode, taxWithholdAmountCur, true);
                tmpTaxWithholdWorkTransloc.AmountOriginMST = currencyExchangeHelper.calculateAccountingToTransaction(currencyCode, amountBaseOriginCur, true);
            }

            tmpTaxWithholdWorkTransloc.Insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdCalcFormulaDesigner_IN</c> class.
    /// </summary>
    /// <param name="_taxWithholdGroup">
    /// The tax withhold group.
    /// </param>
    /// <param name="_amountBaseOriginCur">
    /// The original amount base cur.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <param name="_taxWithholdJournalRecId">
    /// The tax withhold journal rec id.
    /// </param>
    /// <param name="_taxWithholdDirection">
    /// The tax withhold direction.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_isVendAccount">
    /// True if the account is vend account.
    /// </param>
    public void new(
        TaxWithholdGroup        _taxWithholdGroup,
        TaxAmountCur            _amountBaseOriginCur,
        TransDate               _transDate,
        AccountNum              _accountNum,
        RefRecId                _taxWithholdJournalRecId,
        TaxWithholdDirection_IN _taxWithholdDirection,
        CurrencyCode            _currencyCode,
        boolean                 _isVendAccount = false)
    {
        taxWithholdGroup        =  _taxWithholdGroup;
        amountBaseOriginCur     = _amountBaseOriginCur;
        transDate               = _transDate;
        accountNum              = _accountNum;
        taxWithholdJournalRecId = _taxWithholdJournalRecId;
        taxWithholdDirection    = _taxWithholdDirection;
        isVendorTransaction     = _isVendAccount;
        currencyCode            = _currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxWithholdWorkTrans</Name>
				<Source><![CDATA[
    public TmpTaxWithholdWorkTrans_IN parmTmpTaxWithholdWorkTrans(TmpTaxWithholdWorkTrans_IN _tmpTaxWithholdWorkTrans = null)
    {
        if (!prmisDefault(_tmpTaxWithholdWorkTrans))
        {
            tmpTaxWithholdWorkTransloc.setTmpData(_tmpTaxWithholdWorkTrans);
        }

        return tmpTaxWithholdWorkTransloc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateOfDeduction</Name>
				<Source><![CDATA[
    private Percent rateOfDeduction()
    {
        int                             checkTaxCode;
        str                             formula, chargeName;
        real                            taxWithholdValue, taxWithholdAmount, resultStr;
        Percent                         totalTDS;
        container                       totalTDSAmount, taxcode;
        Counter                         countI, countJ = 1, countK = 1;
        TaxWithholdDesignerTable_IN     taxWithholdDesignerTable;
        TaxWithholdData                 taxWithholdDataLoc;
        ExecutePermission               permission;
        TaxWithholdGroupData            taxWithholdGroupDataLoc;
        real                            previousLineTaxWithHoldAmt;

        permission = new ExecutePermission();
        permission.assert();
        taxcode             = conNull();
        totalTDSAmount      = conNull();
        countI              = 0;

        while select taxWithholdDesignerTable order by id
            where taxWithholdDesignerTable.TaxWithholdGroup == taxWithholdGroup
        {
            countI++;
            taxWithholdAmount       = 0;
            taxWithholdValue        = 0;

            select TaxWithholdCode, TaxWithholdFromDate, TaxWithholdToDate, TaxWithholdValue from taxWithholdDataLoc
                where taxWithholdDataLoc.TaxWithholdCode        == taxWithholdDesignerTable.TaxWithholdCode
                   && (!taxWithholdDataLoc.TaxWithholdFromDate
                   || (taxWithholdDataLoc.TaxWithholdFromDate   <= transDate
                   && taxWithholdDataLoc.TaxWithholdToDate      >= transDate));

            select TaxWithholdCode, TaxWithholdGroup, Exempt_IN from taxWithholdGroupDataLoc
                where taxWithholdGroupDataLoc.TaxWithholdCode   == taxWithholdDesignerTable.TaxWithholdCode
                   && taxWithholdGroupDataLoc.TaxWithholdGroup  == taxWithholdGroup;

            switch (taxWithholdDesignerTable.Basis)
            {
                case TaxWithholdBasis_IN::GrossAmount:
                    if (taxWithholdGroupDataLoc.Exempt_IN)
                    {
                        formula = #Zero;
                    }
                    else
                    {
                        formula     = enum2str(taxWithholdDesignerTable.Basis) + taxWithholdDesignerTable.Expression;
                        chargeName  = "@SYS11818";

                        taxWithholdValue    = taxWithholdDataLoc.getTaxWithHoldValue_IN(accountNum, isVendorTransaction);

                        formula     = this.calculateAmountFormula(formula, taxWithholdValue, chargeName);
                        for (countJ = 1; countJ <= conLen(taxcode); countJ++)
                        {
                            checkTaxCode = strScan(formula, strFmt("[%1]", conPeek(taxcode, countJ)), 1, strLen(formula));
                            if (checkTaxCode)
                            {
                                chargeName      = conPeek(taxcode, countJ);
                                previousLineTaxWithHoldAmt = conPeek(totalTDSAmount, countJ);
                                formula         = this.calculateAmountFormula(formula, previousLineTaxWithHoldAmt, chargeName, num2char(#nintyOne), num2char(#nintyThree));
                            }
                        }
                    }
                    break;

                case TaxWithholdBasis_IN::ExclGrossAmount:
                    if (taxWithholdGroupDataLoc.Exempt_IN)
                    {
                        formula = #Zero;
                    }
                    else
                    {
                        formula     = strDel(taxWithholdDesignerTable.Expression,1,1);
                        for (countJ = 1; countJ <= conLen(taxcode); countJ++)
                        {
                            checkTaxCode = strScan(formula, strFmt("[%1]", conPeek(taxcode, countJ)), 1, strLen(formula));
                            if (checkTaxCode)
                            {
                                chargeName      = conPeek(taxcode, countJ);
                                previousLineTaxWithHoldAmt = conPeek(totalTDSAmount, countJ);
                                formula         = this.calculateAmountFormula(formula, previousLineTaxWithHoldAmt, chargeName, num2char(#nintyOne), num2char(#nintyThree));
                            }
                        }

                        taxWithholdValue    = taxWithholdDataLoc.getTaxWithHoldValue_IN(accountNum, isVendorTransaction);
                    }
                    if (formula)
                    {
                        formula = strFmt("%1 %2 %3 %4 %5",num2char(#fourZero),formula,num2char(#fourOne), num2char(#fourTwo), num2str(taxWithholdValue, 5, 2, 1, 1));
                    }
                    break;

                default:
                    break;
            }

            if (formula)
            {
                // Input to evalbuf has been validated
                // Only limited safe elements are allowed
                resultStr = TaxWithholdCalculation_IN::evaluate(formula);
            }
            else
            {
                resultStr = 0;
            }

            taxWithholdAmount = taxWithholdDesignerTable.Basis == TaxWithholdBasis_IN::ExclGrossAmount ?
                                                                  resultStr/100 : resultStr;

            totalTDSAmount        = conPoke(totalTDSAmount, countI, taxWithholdAmount);
            taxcode               = conPoke(taxcode, countI, taxWithholdDesignerTable.TaxWithholdCode);
        }

        for (countK = 1; countK <= conLen(totalTDSAmount); countK++)
        {
            totalTDS += conPeek(totalTDSAmount, countK);
        }

        return totalTDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffTaxWithholdAmount</Name>
				<Source><![CDATA[
    private AmountCur roundOffTaxWithholdAmount(
        AmountCur         _taxWithholdAmount,
        TaxWithholdTable  _taxWithholdTable)
    {
        AmountCur           taxWithholdAmount;
        TaxWithholdTable    taxWithholdTable    = _taxWithholdTable;

        if (_taxWithholdAmount)
        {
            switch (taxWithholdTable.TaxWithholdRoundOffType)
            {
                case RoundOffType::Ordinary :
                    if (taxWithholdTable.TaxWithholdRoundOff)
                    {
                        taxWithholdAmount = round(_taxWithholdAmount, taxWithholdTable.TaxWithholdRoundOff);
                    }
                    else
                    {
                        taxWithholdAmount = round(_taxWithholdAmount, 0.01);
                    }
                    break;
                case RoundOffType::RoundDown :
                    if (taxWithholdTable.TaxWithholdRoundOff)
                    {
                        if (_taxWithholdAmount >= 0)
                        {
                            taxWithholdAmount = round(_taxWithholdAmount -
                                                      taxWithholdTable.TaxWithholdRoundOff / 2,
                                                      taxWithholdTable.TaxWithholdRoundOff);
                        }
                        else
                        {
                            taxWithholdAmount = round(_taxWithholdAmount +
                                                      taxWithholdTable.TaxWithholdRoundOff / 2,
                                                      taxWithholdTable.TaxWithholdRoundOff);
                        }
                    }
                    else
                    {
                         taxWithholdAmount = trunc(_taxWithholdAmount);
                    }
                    break;
                case RoundOffType::RoundUp :
                    if (taxWithholdTable.TaxWithholdRoundOff)
                    {
                        if (_taxWithholdAmount >= 0)
                        {
                            taxWithholdAmount = round(_taxWithholdAmount +
                                                      taxWithholdTable.TaxWithholdRoundOff / 2.01,
                                                      taxWithholdTable.TaxWithholdRoundOff);
                        }
                        else
                        {
                            taxWithholdAmount = round(_taxWithholdAmount -
                                                      taxWithholdTable.TaxWithholdRoundOff / 2.01,
                                                      taxWithholdTable.TaxWithholdRoundOff);
                        }
                    }
                    else
                    {
                        if (_taxWithholdAmount >= 0)
                        {
                            taxWithholdAmount = round(_taxWithholdAmount + 0.5, 1.0);
                        }
                        else
                        {
                            taxWithholdAmount = round(_taxWithholdAmount - 0.5, 1.0);
                        }
                    }
                    break;
            }
        }
        return taxWithholdAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>