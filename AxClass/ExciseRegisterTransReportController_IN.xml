<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ExciseRegisterTransReportController_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller class for <c>ExciseRegisterTransReport_IN</c> report.
/// </summary>
class ExciseRegisterTransReportController_IN extends SRSReportRunController implements BatchRetryable
{
    TmpExciseRegisterInquiryTable_IN tmpExciseRegisterInquiryTableLoc;
    RecId                            tmpTableDataRecId;
    container                        fieldValues;
    str                              headerNote;
    str                              footerNote;
    ExciseRegister_IN                exciseRegister;
    TaxPeriod                        settlementPeriod;
    TaxRegistrationNumber_IN         eccNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to execute query.
    /// </summary>
    /// <returns>
    /// Returns query instance.
    /// </returns>
    public Query executeQuery()
    {
        Query                query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange      queryBuildRange;
        RefRecId             eccRefId;

        queryBuildDataSource = query.addDataSource(tablenum(TmpExciseRegisterInquiryTable_IN));
        queryBuildRange      = queryBuildDataSource.addRange(fieldnum(TmpExciseRegisterInquiryTable_IN, eccTaxRegistrationNumberTable));
        eccRefId             = TaxRegistrationNumbers_IN::findByNaturalKey(TaxRegistrationType_IN::Company,
                                                                   TaxType_IN::Excise,
                                                                   eccNumber).RecId;
        queryBuildRange.value(queryValue(eccRefId));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(TmpExciseRegisterInquiryTable_IN, TaxSettlementPeriod));
        queryBuildRange.value(queryValue(settlementPeriod));
        queryBuildRange = queryBuildDataSource.addRange(fieldnum(TmpExciseRegisterInquiryTable_IN, ExciseRegister));
        queryBuildRange.value(queryValue(exciseRegister));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterNameByIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getting selected parameter value based on index.
    /// </summary>
    /// <param name="_parameterIndex">
    /// <c>_parameterIndex</c> to which it is assigned to.
    /// </param>
    /// <returns>
    /// Parameter name based on index.
    /// </returns>
    public str getParameterNameByIndex(int _parameterIndex)
    {
        #define.FieldName('ParamSort')

        return (#FieldName + int2str(_parameterIndex));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpExciseRegInqTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records to the <c>TmpExciseRegisterInquiryTable_IN</c> temporary table.
    /// </summary>
    /// <param name="_tmpExciseRegisterInquiryTable_IN">
    /// Instance of temporary table <c>TmpExciseRegisterInquiryTable_IN</c>.
    /// </param>
    private void insertTmpExciseRegInqTable(TmpExciseRegisterInquiryTable_IN _tmpExciseRegisterInquiryTable_IN)
    {
        tmpExciseRegisterInquiryTableLoc.ExciseRegister = _tmpExciseRegisterInquiryTable_IN.ExciseRegister;
        tmpExciseRegisterInquiryTableLoc.TaxSettlementPeriod = _tmpExciseRegisterInquiryTable_IN.TaxSettlementPeriod;
        tmpExciseRegisterInquiryTableLoc.TransDate = _tmpExciseRegisterInquiryTable_IN.TransDate;
        tmpExciseRegisterInquiryTableLoc.ECCTaxRegistrationNumberTable = _tmpExciseRegisterInquiryTable_IN.ECCTaxRegistrationNumberTable;

        tmpExciseRegisterInquiryTableLoc.sort1  = _tmpExciseRegisterInquiryTable_IN.sort1;
        tmpExciseRegisterInquiryTableLoc.sort2  = _tmpExciseRegisterInquiryTable_IN.sort2;
        tmpExciseRegisterInquiryTableLoc.sort3  = _tmpExciseRegisterInquiryTable_IN.sort3;
        tmpExciseRegisterInquiryTableLoc.sort4  = _tmpExciseRegisterInquiryTable_IN.sort4;
        tmpExciseRegisterInquiryTableLoc.sort5  = _tmpExciseRegisterInquiryTable_IN.sort5;
        tmpExciseRegisterInquiryTableLoc.sort6  = _tmpExciseRegisterInquiryTable_IN.sort6;
        tmpExciseRegisterInquiryTableLoc.sort7  = _tmpExciseRegisterInquiryTable_IN.sort7;
        tmpExciseRegisterInquiryTableLoc.sort8  = _tmpExciseRegisterInquiryTable_IN.sort8;
        tmpExciseRegisterInquiryTableLoc.sort9  = _tmpExciseRegisterInquiryTable_IN.sort9;
        tmpExciseRegisterInquiryTableLoc.sort10 = _tmpExciseRegisterInquiryTable_IN.sort10;
        tmpExciseRegisterInquiryTableLoc.sort11 = _tmpExciseRegisterInquiryTable_IN.sort11;
        tmpExciseRegisterInquiryTableLoc.sort12 = _tmpExciseRegisterInquiryTable_IN.sort12;
        tmpExciseRegisterInquiryTableLoc.sort13 = _tmpExciseRegisterInquiryTable_IN.sort13;
        tmpExciseRegisterInquiryTableLoc.sort14 = _tmpExciseRegisterInquiryTable_IN.sort14;
        tmpExciseRegisterInquiryTableLoc.sort15 = _tmpExciseRegisterInquiryTable_IN.sort15;
        tmpExciseRegisterInquiryTableLoc.sort16 = _tmpExciseRegisterInquiryTable_IN.sort16;
        tmpExciseRegisterInquiryTableLoc.sort17 = _tmpExciseRegisterInquiryTable_IN.sort17;
        tmpExciseRegisterInquiryTableLoc.sort18 = _tmpExciseRegisterInquiryTable_IN.sort18;
        tmpExciseRegisterInquiryTableLoc.sort19 = _tmpExciseRegisterInquiryTable_IN.sort19;
        tmpExciseRegisterInquiryTableLoc.sort20 = _tmpExciseRegisterInquiryTable_IN.sort20;
        tmpExciseRegisterInquiryTableLoc.sort21 = _tmpExciseRegisterInquiryTable_IN.sort21;
        tmpExciseRegisterInquiryTableLoc.sort22 = _tmpExciseRegisterInquiryTable_IN.sort22;
        tmpExciseRegisterInquiryTableLoc.sort23 = _tmpExciseRegisterInquiryTable_IN.sort23;
        tmpExciseRegisterInquiryTableLoc.sort24 = _tmpExciseRegisterInquiryTable_IN.sort24;
        tmpExciseRegisterInquiryTableLoc.sort25 = _tmpExciseRegisterInquiryTable_IN.sort25;
        tmpExciseRegisterInquiryTableLoc.sort26 = _tmpExciseRegisterInquiryTable_IN.sort26;
        tmpExciseRegisterInquiryTableLoc.sort27 = _tmpExciseRegisterInquiryTable_IN.sort27;
        tmpExciseRegisterInquiryTableLoc.sort28 = _tmpExciseRegisterInquiryTable_IN.sort28;
        tmpExciseRegisterInquiryTableLoc.sort29 = _tmpExciseRegisterInquiryTable_IN.sort29;
        tmpExciseRegisterInquiryTableLoc.sort30 = _tmpExciseRegisterInquiryTable_IN.sort30;
        tmpExciseRegisterInquiryTableLoc.sort31 = _tmpExciseRegisterInquiryTable_IN.sort31;
        tmpExciseRegisterInquiryTableLoc.sort32 = _tmpExciseRegisterInquiryTable_IN.sort32;
        tmpExciseRegisterInquiryTableLoc.sort33 = _tmpExciseRegisterInquiryTable_IN.sort33;
        tmpExciseRegisterInquiryTableLoc.sort34 = _tmpExciseRegisterInquiryTable_IN.sort34;
        tmpExciseRegisterInquiryTableLoc.sort35 = _tmpExciseRegisterInquiryTable_IN.sort35;
        tmpExciseRegisterInquiryTableLoc.sort36 = _tmpExciseRegisterInquiryTable_IN.sort36;
        tmpExciseRegisterInquiryTableLoc.sort37 = _tmpExciseRegisterInquiryTable_IN.sort37;
        tmpExciseRegisterInquiryTableLoc.sort38 = _tmpExciseRegisterInquiryTable_IN.sort38;
        tmpExciseRegisterInquiryTableLoc.sort39 = _tmpExciseRegisterInquiryTable_IN.sort39;
        tmpExciseRegisterInquiryTableLoc.sort40 = _tmpExciseRegisterInquiryTable_IN.sort40;
        tmpExciseRegisterInquiryTableLoc.sort41 = _tmpExciseRegisterInquiryTable_IN.sort41;
        tmpExciseRegisterInquiryTableLoc.sort42 = _tmpExciseRegisterInquiryTable_IN.sort42;
        tmpExciseRegisterInquiryTableLoc.sort43 = _tmpExciseRegisterInquiryTable_IN.sort43;
        tmpExciseRegisterInquiryTableLoc.sort44 = _tmpExciseRegisterInquiryTable_IN.sort44;
        tmpExciseRegisterInquiryTableLoc.sort45 = _tmpExciseRegisterInquiryTable_IN.sort45;
        tmpExciseRegisterInquiryTableLoc.sort46 = _tmpExciseRegisterInquiryTable_IN.sort46;
        tmpExciseRegisterInquiryTableLoc.sort47 = _tmpExciseRegisterInquiryTable_IN.sort47;
        tmpExciseRegisterInquiryTableLoc.sort48 = _tmpExciseRegisterInquiryTable_IN.sort48;
        tmpExciseRegisterInquiryTableLoc.sort49 = _tmpExciseRegisterInquiryTable_IN.sort49;
        tmpExciseRegisterInquiryTableLoc.sort50 = _tmpExciseRegisterInquiryTable_IN.sort50;

        tmpExciseRegisterInquiryTableLoc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        this.setParameters(this.parmArgs().record(), this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLabelsCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// This will set field captions.
    /// </summary>
    /// <param name="_fieldValues">
    /// <c>_fieldValues</c> to which it is assigned to.
    /// </param>
    /// <param name="_headerNote">
    /// <c>_headerNote</c> to which it is assigned to.
    /// </param>
    /// <param name="_footerNote">
    /// <c>_footerNote</c> to which it is assigned to.
    /// </param>
    /// <param name="_exciseRegister">
    /// <c>_exciseRegister</c> to which it is assigned to.
    /// </param>
    /// <param name="_eccNumber">
    /// <c>_eccNumber</c> to which it is assigned to.
    /// </param>
    /// <param name="_settlementPeriod">
    /// <c>_settlementPeriod</c> to which it is assigned to.
    /// </param>
    public void setLabelsCaption(
        container                _fieldValues,
        str                      _headerNote,
        str                      _footerNote,
        ExciseRegister_IN        _exciseRegister,
        TaxRegistrationNumber_IN _eccNumber,
        TaxPeriod                _settlementPeriod)
    {
        fieldValues      = _fieldValues;
        headerNote       = _headerNote;
        footerNote       = _footerNote;
        exciseRegister   = _exciseRegister;
        eccNumber        = _eccNumber ;
        settlementPeriod = _settlementPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class objects and processes the report business logic.
    /// </summary>
    /// <param name="_tmpExciseRegisterInquiryTable_IN">
    /// An instance of <c>TmpExciseRegisterInquiryTable_IN</c> temporary table.
    /// </param>
    /// <param name="_contract">
    /// An instance of contract <c>ExciseRegisterTransReportContract_IN</c> class.
    /// </param>
    public void setParameters(
        TmpExciseRegisterInquiryTable_IN _tmpExciseRegisterInquiryTable_IN,
        SrsTmpTblMarshallerContract      _contract)
    {
        SrsReportRunPermission   permission;
        int                      idx;
        SrsReportRdlDataContract rdlContract;
        Query                    query;
        QueryRun                 queryRun;

        #define.HeaderNote('HeaderNote')
        #define.FooterNote('FooterNote')
        #define.ReportTitle('ReportTitle')

        rdlContract = this.parmReportContract().parmRdlContract();

        rdlContract.setValue(#HeaderNote, headerNote);
        rdlContract.setvalue(#FooterNote, footerNote);
        rdlContract.setvalue(#ReportTitle, enum2str(exciseRegister));

        for (idx = 1; idx <= conlen(fieldValues); idx++)
        {
           rdlContract.setvalue(this.getParameterNameByIndex(idx), conpeek(fieldValues, idx));
        }

        //storing the temp table data using SRSTmpTblMarshaller
        permission = new SrsReportRunPermission();
        permission.assert();

        query    = this.executeQuery();
        queryRun = new QueryRun(query);

        queryRun.setCursor(_tmpExciseRegisterInquiryTable_IN);

        while (queryRun.next())
        {
            _tmpExciseRegisterInquiryTable_IN = queryRun.get(tablenum(TmpExciseRegisterInquiryTable_IN));
            this.insertTmpExciseRegInqTable(_tmpExciseRegisterInquiryTable_IN);
        }

        tmpTableDataRecId = SRSTmpTblMarshaller::SendTmpTblToDataProvider(tmpExciseRegisterInquiryTableLoc);
        delete_from tmpExciseRegisterInquiryTableLoc;
        CodeAccessPermission::revertAssert();

        _contract.parmTmpTableDataRecId(tmpTableDataRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        ExciseRegisterTransReportController_IN controller = _args.parmObject();

        if (controller != null)
        {
            controller.parmReportName(ssrsReportStr(ExciseRegisterTransReport_IN, Report));
            controller.parmArgs(_args);
            controller.parmShowDialog(false);
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>