<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationAddressValidationUIController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class TaxIntegrationAddressValidationUIController
{
    public static boolean overWriteAddress = false;
    private int addressValidationResultCount = 0;
    private TaxIntegrationAddressValidationController taxIntegrationAddressValidationController = TaxIntegrationAddressValidationController::instance();
    private static boolean isAddressValidationEnabled = TaxIntegrationAddressValidationController::instance().isAddressValidationEnabled();
    private static TaxLogisticsPostalAddressValidationTmp taxLogisticsPostalAddressValidationTmpOrigin;
    private static TaxLogisticsPostalAddressValidationTmp selectedTaxLogisticsPostalAddressValidationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTaxLogisticsPostalAddressValidationTmpOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set taxLogisticsPostalAddressValidationTmpOrigin
    /// </summary>
    /// <param name = "_taxLogisticsPostalAddressValidationTmp">taxLogisticsPostalAddressValidationTmpOrigin</param>
    public void setTaxLogisticsPostalAddressValidationTmpOrigin(TaxLogisticsPostalAddressValidationTmp _taxLogisticsPostalAddressValidationTmp)
    {
        TaxIntegrationAddressValidationUIController::taxLogisticsPostalAddressValidationTmpOrigin = _taxLogisticsPostalAddressValidationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Address validation entrance
    /// </summary>
    /// <returns>Validation result table</returns>
    public TaxLogisticsPostalAddressValidationTmp validate()
    {
        TaxLogisticsPostalAddressValidationTmp result;

        TaxIntegrationAddressValidator taxIntegrationAddressValidator = new TaxIntegrationAddressValidator();
        LogisticsPostalAddress logisticsPostalAddressLoc = TaxIntegrationAddressValidationUIController::taxLogisticsPostalAddressValidationTmpOrigin.convertToLogisticsPostalAddress();
        taxIntegrationAddressValidator.validateAddress(logisticsPostalAddressLoc);
        result.setTmpData(taxIntegrationAddressValidator.getTaxIntegrationLogisticsPostalAddressObject().getValidatedAddressResultList());
        this.addressValidationResultCount = taxIntegrationAddressValidator.getTaxIntegrationLogisticsPostalAddressObject().getValidatedAddressCount();
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptValidationChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accept validation change
    /// </summary>
    /// <param name = "_taxLogisticsPostalAddressValidationTmp">selected TaxLogisticsPostalAddressValidationTmp</param>
    public void acceptValidationChange(TaxLogisticsPostalAddressValidationTmp _taxLogisticsPostalAddressValidationTmp)
    {
        LogisticsPostalAddressTaxExtension logisticsPostalAddressTaxExtension;
        LogisticsPostalAddress logisticsPostalAddressLoc;

        ttsbegin;
        logisticsPostalAddressLoc = LogisticsPostalAddress::findByLocation(TaxIntegrationAddressValidationUIController::taxLogisticsPostalAddressValidationTmpOrigin.Location, true);

        TaxIntegrationAddressValidationUIController::copyAddressEntry(
            logisticsPostalAddressLoc,
            _taxLogisticsPostalAddressValidationTmp,
            TaxIntegrationAddressValidationUIController::overWriteAddress);

        if (TaxIntegrationAddressValidationUIController::overWriteAddress && !logisticsPostalAddressLoc.validateWrite())
        {
            ttsabort;
            throw error("@SYS136548");
        }

        using (TaxIntegrationAddressValidationMessageContext context = new TaxIntegrationAddressValidationMessageContext())
        {
            // We skip the field modify check here because when calling standard API of address modify,
            // there will be many checkeds altering the address e.g. zipcode would effect street. So that the check sometimes would get false alarm.
            // Thus disable the check and warning msg.
            context.setSkipFieldModifyCheck(true);

            // in case we need to update current LogisticsPostalAddress directly we need to set ValidTimeStateUpdate::Correction
            // but if we want to create a new record for a new validate period, we should use ValidTimeStateUpdate::CreateNewTimePeriod
            // which is the purpose of table attribute: valid time state field type
            logisticsPostalAddressLoc.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
            logisticsPostalAddressLoc.update();
        }
        // save returned address group Id
        logisticsPostalAddressTaxExtension.Location = TaxIntegrationAddressValidationUIController::taxLogisticsPostalAddressValidationTmpOrigin.Location;
        logisticsPostalAddressTaxExtension.AddressGroupId = _taxLogisticsPostalAddressValidationTmp.AddressGroupId;
        logisticsPostalAddressTaxExtension.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preAcceptValidationChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-accept validation change
    /// </summary>
    /// <param name = "_taxLogisticsPostalAddressValidationTmp">TaxLogisticsPostalAddressValidationTmp</param>
    /// <param name = "_callerDataSource">callerDataSource</param>
    /// <param name = "_sender">xFormRun</param>
    public static void preAcceptValidationChange(TaxLogisticsPostalAddressValidationTmp _taxLogisticsPostalAddressValidationTmp, FormDataSource _callerDataSource, xFormRun _sender)
    {
        LogisticsPostalAddress logisticsPostalAddressLoc = _callerDataSource.cursor() as LogisticsPostalAddress;
        formRun formRun = _sender as FormRun;
        FormCheckBoxControl overWriteAddressCheckBoxControl = formRun.design().controlName(formControlStr(TaxIntegrationAddressValidation, overWriteAddressCheckBoxControl));
        boolean overWriteAddressLoc = overWriteAddressCheckBoxControl.checked();

        TaxIntegrationAddressValidationUIController::copyAddressEntry(
            logisticsPostalAddressLoc,
            _taxLogisticsPostalAddressValidationTmp,
            overWriteAddressLoc);

        formRun callerForm = _sender.args().caller() as FormRun;
        OpenMode openModeLoc = callerForm.args().openMode();
        
        if (overWriteAddressLoc && openModeLoc == OpenMode::Edit)
        {
            if (!logisticsPostalAddressLoc.validateWrite())
            {
                throw error("@SYS136548");
            }
        }

        TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp = _taxLogisticsPostalAddressValidationTmp;
        if (openModeLoc == OpenMode::New)
        {
            TaxIntegrationAddressValidationUIController::taxLogisticsPostalAddressValidationTmpOrigin = _taxLogisticsPostalAddressValidationTmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAcceptValidationChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post-accept validation change
    /// </summary>
    /// <param name = "_callerDataSource">callerDataSource</param>
    public static void postAcceptValidationChange(FormDataSource _callerDataSource)
    {
        if (!TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp)
        {
            return;
        }

        LogisticsPostalAddressTaxExtension logisticsPostalAddressTaxExtension;
        LogisticsPostalAddress logisticsPostalAddressLoc = _callerDataSource.cursor() as LogisticsPostalAddress;

        if (!TaxIntegrationAddressValidationUIController::isValidatedAddressChanged(
                logisticsPostalAddressLoc,
                TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp)
                || !TaxIntegrationAddressValidationUIController::overWriteAddress)
        {
            // save returned address group Id
            logisticsPostalAddressTaxExtension.Location = logisticsPostalAddressLoc.Location;
            logisticsPostalAddressTaxExtension.AddressGroupId = TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp.AddressGroupId;
            logisticsPostalAddressTaxExtension.insert();
        }
        else
        {
            info::addMessage(Exception::Warning, "@TaxIntegration:AddressValidationInvalidateMsg");
        }
        TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIntegrationAddressValidationController</Name>
				<Source><![CDATA[
    public TaxIntegrationAddressValidationController getTaxIntegrationAddressValidationController()
    {
        return this.taxIntegrationAddressValidationController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressValidationResultCount</Name>
				<Source><![CDATA[
    public int getAddressValidationResultCount()
    {
        return this.addressValidationResultCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidatedAddressChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// This would help comparing if any differences between origin and changed entity. In case any changes, it would return true which should not trigger address group Id written.
    /// And should make sure the _changed parameter should contain the fields in the check list
    /// </summary>
    /// <param name = "_logisticsPostalAddressLoc">LogisticsPostalAddress</param>
    /// <param name = "_changed">Table or view that is based on table LogisticsPostalAddress and contains checking list fields</param>
    /// <returns>True if any fields are changed, otherwise false</returns>
    public static boolean isValidatedAddressChanged(LogisticsPostalAddress _logisticsPostalAddressLoc, Common _changed)
    {
        boolean res = (_logisticsPostalAddressLoc.City == _changed.getFieldValue((fieldStr(LogisticsPostalAddress, City)))) 
                        && (_logisticsPostalAddressLoc.CountryRegionId == _changed.getFieldValue((fieldStr(LogisticsPostalAddress, CountryRegionId))))
                        && (_logisticsPostalAddressLoc.County == _changed.getFieldValue((fieldStr(LogisticsPostalAddress, County))))
                        && (_logisticsPostalAddressLoc.State == _changed.getFieldValue((fieldStr(LogisticsPostalAddress, State))))
                        && (_logisticsPostalAddressLoc.Street == _changed.getFieldValue((fieldStr(LogisticsPostalAddress, Street))))
                        && (_logisticsPostalAddressLoc.ZipCode == _changed.getFieldValue((fieldStr(LogisticsPostalAddress, ZipCode))));
        return !res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy temp result address entry to <C>LogisticsPostalAddress</C>
    /// </summary>
    /// <param name = "_logisticsPostalAddressLoc">LogisticsPostalAddress</param>
    /// <param name = "_taxLogisticsPostalAddressValidationTmp">TaxLogisticsPostalAddressValidationTmp</param>
    /// <param name = "_overWriteAddress">boolean</param>
    public static void copyAddressEntry(LogisticsPostalAddress _logisticsPostalAddressLoc, TaxLogisticsPostalAddressValidationTmp _taxLogisticsPostalAddressValidationTmp, boolean _overWriteAddress)
    {
        _logisticsPostalAddressLoc.Latitude = _taxLogisticsPostalAddressValidationTmp.Latitude;
        _logisticsPostalAddressLoc.Longitude = _taxLogisticsPostalAddressValidationTmp.Longitude;

        if (_overWriteAddress)
        {
            // Putting ZipCode before all other address info. since zip code would derive some default City/Street/State.
            // But this would lead to street derived by zipcode disabled. since we would only repect user input street.
            _logisticsPostalAddressLoc.ZipCode = _taxLogisticsPostalAddressValidationTmp.ZipCode;
            _logisticsPostalAddressLoc.modifiedField(fieldNum(LogisticsPostalAddress, ZipCode));

            _logisticsPostalAddressLoc.City = _taxLogisticsPostalAddressValidationTmp.City;
            _logisticsPostalAddressLoc.modifiedField(fieldNum(LogisticsPostalAddress, City));

            // State may impact county, so put state before county
            _logisticsPostalAddressLoc.State = _taxLogisticsPostalAddressValidationTmp.State;
            _logisticsPostalAddressLoc.modifiedField(fieldNum(LogisticsPostalAddress, State));

            _logisticsPostalAddressLoc.Street = _taxLogisticsPostalAddressValidationTmp.Street;
            _logisticsPostalAddressLoc.modifiedField(fieldNum(LogisticsPostalAddress, Street));

            _logisticsPostalAddressLoc.CountryRegionId = _taxLogisticsPostalAddressValidationTmp.CountryRegionId;
            _logisticsPostalAddressLoc.County = _taxLogisticsPostalAddressValidationTmp.County;
            if (_logisticsPostalAddressLoc.County)
            {
                _logisticsPostalAddressLoc.modifiedField(fieldNum(LogisticsPostalAddress, County));
            }

            _logisticsPostalAddressLoc.formatAddressInstance();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to LogisticsPostalAddress deleting
    /// </summary>
    /// <param name="target">LogisticsPostalAddress</param>
    [SubscribesTo(tableStr(LogisticsPostalAddress), delegateStr(LogisticsPostalAddress, deleting))]
    public static void LogisticsPostalAddress_deleting(LogisticsPostalAddress target)
    {
        if (TaxIntegrationAddressValidationUIController::isAddressValidationEnabled)
        {
            LogisticsPostalAddressTaxExtension::deleteByLocation(target.Location);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to LogisticsPostalAddress updated
    /// </summary>
    /// <param name="original">Original LogisticsPostalAddress</param>
    /// <param name="changed">Changed LogisticsPostalAddress</param>
    [SubscribesTo(tableStr(LogisticsPostalAddress), delegateStr(LogisticsPostalAddress, updated))]
    public static void LogisticsPostalAddress_updated(LogisticsPostalAddress original, LogisticsPostalAddress changed)
    {
        if (TaxIntegrationAddressValidationUIController::isAddressValidationEnabled)
        {
            TaxIntegrationAddressValidationMessageContext context = TaxIntegrationAddressValidationMessageContext::current();
            if ((context && context.getSkipFieldModifyCheck()) // from one step accept in address validation scenario 
                || (TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp // from two step accept but user has not changed address after validation in address validation scenario
                    && !TaxIntegrationAddressValidationUIController::isValidatedAddressChanged(changed, TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp))
                || !TaxIntegrationAddressValidationUIController::overWriteAddress)
            {
                LogisticsPostalAddressTaxExtension::deleteByLocation(original.Location);
            }
            else if ((TaxIntegrationAddressValidationUIController::isValidatedAddressChanged(original, changed)) // from normal edit scenario without address validation
                        || (TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp // from two step accept and user has changed address after validation in address validation scenario
                            && TaxIntegrationAddressValidationUIController::isValidatedAddressChanged(changed, TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp)))
            {
                if (LogisticsPostalAddressTaxExtension::deleteByLocation(original.Location))
                {
                    info::addMessage(Exception::Warning, "@TaxIntegration:AddressValidationInvalidateMsg");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddressGrid_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle AddressValidation in form LogisticsPostalAddressGrid
    /// </summary>
    /// <param name="sender">xFormRun</param>
    /// <param name="e">FormEventArgs</param>
    [FormEventHandler(formStr(LogisticsPostalAddressGrid), FormEventType::Initialized)]
    public static void LogisticsPostalAddressGrid_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        formRun.design().controlName(formControlStr(LogisticsPostalAddressGrid, AddressValidation))
            .visible(TaxIntegrationAddressValidationUIController::isAddressValidationEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMLegalEntity_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle AddressValidation in form OMLegalEntity
    /// </summary>
    /// <param name="sender">xFormRun</param>
    /// <param name="e">FormEventArgs</param>
    [FormEventHandler(formStr(OMLegalEntity), FormEventType::Initialized)]
    public static void OMLegalEntity_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        formRun.design().controlName(formControlStr(OMLegalEntity, AddressValidation))
            .visible(TaxIntegrationAddressValidationUIController::isAddressValidationEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle AddressValidation in form LogisticsPostalAddress
    /// </summary>
    /// <param name="sender">xFormRun</param>
    /// <param name="e">FormEventArgs</param>
    [FormEventHandler(formStr(LogisticsPostalAddress), FormEventType::Initialized)]
    public static void LogisticsPostalAddress_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        if (formRun.args().openMode() != OpenMode::View)
        {
            formRun.design().controlName(formControlStr(LogisticsPostalAddress, AddressValidation))
                .visible(TaxIntegrationAddressValidationUIController::isAddressValidationEnabled);
            formRun.design().controlName(formControlStr(LogisticsPostalAddress, AddressValidationNewEdit))
                .visible(TaxIntegrationAddressValidationUIController::isAddressValidationEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventLocation_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle AddressValidation in form InventLocation
    /// </summary>
    /// <param name="sender">xFormRun</param>
    /// <param name="e">FormEventArgs</param>
    [FormEventHandler(formStr(InventLocation), FormEventType::Initialized)]
    public static void InventLocation_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        formRun.design().controlName(formControlStr(InventLocation, AddressValidation))
            .visible(TaxIntegrationAddressValidationUIController::isAddressValidationEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handel validated address written
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::Written)]
    public static void LogisticsPostalAddress_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (TaxIntegrationAddressValidationUIController::isAddressValidationEnabled 
            && TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp)
        {
            TaxIntegrationAddressValidationUIController::postAcceptValidationChange(sender);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handle AddressValidation in form DirPartyTable
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    [FormEventHandler(formStr(DirPartyTable), FormEventType::Initialized)]
    public static void DirPartyTable_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        formRun.design().controlName(formControlStr(DirPartyTable, TaxIntegrationAddressValidationBatch))
            .visible(TaxIntegrationAddressValidationUIController::isAddressValidationEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CancelButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the cancel relevant logic in the form LogisticsPostalAddress
    /// </summary>
    /// <param name="sender">xFormRun</param>
    /// <param name="e">FormControlEventArgs</param>
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, CancelButton), FormControlEventType::Clicked)]
    public static void CancelButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        if (TaxIntegrationAddressValidationUIController::isAddressValidationEnabled)
        {
            TaxIntegrationAddressValidationUIController::selectedTaxLogisticsPostalAddressValidationTmp = null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>