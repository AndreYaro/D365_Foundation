<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSlicedPriceReportScheduleController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSlicedPriceReportScheduleController</c> class is the controller class for scheduling of the sliced price report.
/// </summary>
internal class RetailSlicedPriceReportScheduleController
    extends SysOperationServiceController
    implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    public ClassDescription defaultCaption()
    {
        return "@RetailPricing:PriceReportBatchJobClassDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super(
            classStr(RetailSlicedPriceReportScheduleService),
            methodStr(RetailSlicedPriceReportScheduleService, process),
            SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    internal void initialize(RetailStoreTable _store)
    {
        RetailSlicedPriceReportScheduleContract contract =
            this.getDataContractInfoObject().dataContractObject() as RetailSlicedPriceReportScheduleContract;

        date priceCalculationStartDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        date priceCalculationEndDate = priceCalculationStartDate + 1;

        if (_store)
        {
            // User can specify in the dialog as well.
            RetailStoreId storeNumber = _store.StoreNumber;
            contract.parmFileName(RetailSlicedPriceReportScheduleUtils::getFileName(storeNumber));
            contract.parmStoreNumber(storeNumber);
        }

        contract.parmFileFormat(SRSReportFileFormat::Excel);
        contract.parmPriceCalculationStartDate(priceCalculationStartDate);
        contract.parmPriceCalculationEndDate(priceCalculationEndDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailSlicedPriceReportScheduleController controller =
            new RetailSlicedPriceReportScheduleController();

        RetailStoreTable store = _args.record();
        controller.initialize(store);

        if (controller.prompt())
        {
            controller.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>