<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCreatePaymJournalBill_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCreatePaymJournalBill_Cust extends CustVendCreatePaymJournal_Cust implements BatchRetryable
{
    CustVendNegInstStatus negInstStatus;
    NoYes dueBillsOnly;
    TransDate lackDate;
    BankRemittanceType remittanceType;

    DialogGroup dialogGroupNegInst;

    DialogField dialogNegInstStatus;
    DialogField dialogDueBillsOnly;
    DialogField dialogLackDate;
    DialogField dialogRemittanceType;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        negInstStatus,
        lackDate,
        dueBillsOnly,
        remittanceType
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.showBatchTab(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected boolean calc(CustVendTransOpen _custTransOpen)
    {
        boolean ok = true;
        TransDate dueDate;

        ok = ok && super(_custTransOpen);

        if (ok && dueBillsOnly)
        {
            dueDate = _custTransOpen.BankDiscNoticeDeadline ? _custTransOpen.BankDiscNoticeDeadline
                                                            :(_custTransOpen.DueDate ?
                                                              _custTransOpen.DueDate :
                                                              _custTransOpen.TransDate);

            ok = ok && dueDate <= lackDate;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        #ISOCountryRegionCodes

        this.parmSkipProposalEditForm(NoYes::Yes);

        super();

        dialogPaymProposalType.visible(false);

        dialogGroupNegInst = dialog.addGroup("@SYS69795");

        dialogDueBillsOnly = dialog.addFieldValue(enumstr(NoYes), dueBillsOnly, "@SYS73831", "@SYS73835");
        dialogLackDate = dialog.addFieldValue(extendedtypestr(TransDate), lackDate, "@SYS14475", "@SYS73834");
        dialogNegInstStatus = dialog.addFieldValue(enumstr(CustVendNegInstStatus), negInstStatus, "", "");

        // Italian only feature so dialog only needed then
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            dialog.curFormGroup(dialogGroupDateOfPayment.formGroup());
            dialogUseFutureDueDate.visible(false);
        }

        // intercompany Bill Of Exchange not supported - hide the selection which enables separate payment percompany and default it to false
        dialogProposeSeparatePaymentPerCompany.visible(false);
        dialogProposeSeparatePaymentPerCompany.value(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddOffsetAccountMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the menu item for the offset account that is associated with centralized payments processing
    ///    to the dialog box.
    /// </summary>
    /// <param name="_dialog">
    ///    The dialog box to which to add fields.
    /// </param>
    protected void dialogAddOffsetAccountMenuItem(Dialog _dialog)
    {
        // No offset account show for bill of exchange so method just initialized the backing values.
        this.parmDefaultOffsetAccountType(LedgerJournalACTypeForPaymProposal::None);
        this.parmDefaultOffsetLedgerDimension(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Transfers values from dialog box fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    ///    The return value of a call to the <c>super</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is invoked by the <c>RunBase</c> framework when the OK button of the dialog box is
    ///    pressed.
    /// </remarks>
    public boolean getFromDialog()
    {
        negInstStatus = dialogNegInstStatus.value();
        lackDate = dialogLackDate.value();
        dueBillsOnly = dialogDueBillsOnly.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the entry point of the payment proposal processing logic.
    /// </summary>
    /// <remarks>
    ///    This method is invoked by the <c>RunBase</c> framework when the OK button is pressed.
    /// </remarks>
    public void run()
    {
        // intercompany Bill Of Exchange not supported - setup to limit payment proposals to current company only
        limitPaymCreationToLedgerCompanyOnly = true;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container base;
        boolean ret;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryWithQueryRun</Name>
				<Source><![CDATA[
    protected void updateQueryWithQueryRun(QueryRun _queryRun)
    {
        QueryBuildDataSource qbdsCustTrans;
        QueryBuildRange qbrNegInstStatus;

        qbdsCustTrans = _queryRun.query().dataSourceTable(tablenum(CustTrans));

        qbrNegInstStatus = SysQuery::findOrCreateRange(qbdsCustTrans, fieldnum(CustTrans, BillOfExchangeStatus));

        qbrNegInstStatus.value(SysQuery::value(negInstStatus));

        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super();

        switch (LedgerJournalTable::find(ledgerJournalId).JournalType)
        {
            case LedgerJournalType::CustBillOfExchangeProtest :
                if (negInstStatus != CustVendNegInstStatus::Drawn &&
                    negInstStatus != CustVendNegInstStatus::Redrawn &&
                    negInstStatus != CustVendNegInstStatus::Remitted)
                {
                    ret = checkFailed(strfmt("@SYS73045", negInstStatus));
                }
                break;

            case LedgerJournalType::CustPaymRemittance:
                if (negInstStatus != CustVendNegInstStatus::Drawn &&
                    negInstStatus != CustVendNegInstStatus::Redrawn)
                {
                    ret = checkFailed(strfmt("@SYS73045", negInstStatus));
                }
                break;

            case LedgerJournalType::CustBillOfExchangeRedraw :
                if (negInstStatus != CustVendNegInstStatus::Protested)
                {
                    ret = checkFailed(strfmt("@SYS73045", negInstStatus));
                }
                break;

            case LedgerJournalType::CustBillOfExchangeSettle,
                 LedgerJournalType::CustBillOfExchangeDraw :
                break;

            default :
                ret = checkFailed("@SYS68235");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS75712";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustVendCreatePaymJournalBill_Cust custVendCreatePaymJournalBill_Cust;
        LedgerJournalTable ledgerJournalTable = args.caller().ledgerJournalTable();
        boolean canProceed;

        if (ledgerJournalTable.JournalNum)
        {
            custVendCreatePaymJournalBill_Cust = CustVendCreatePaymJournalBill_Cust::newForJournalType(ledgerJournalTable.JournalType);

            custVendCreatePaymJournalBill_Cust.getLast();
            custVendCreatePaymJournalBill_Cust.parmLedgerJournalId(ledgerJournalTable.JournalNum);

            canProceed = custVendCreatePaymJournalBill_Cust.userInteraction(args).doPromptForCreatingPaymentProposal();

            if (canProceed)
            {
                custVendCreatePaymJournalBill_Cust.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CustVendCreatePaymJournalBill_Cust</c> object for the specified ledger journal type.
    /// </summary>
    /// <param name = "_journalType">
    /// The <c>LedgerJournalType</c>.
    /// </param>
    /// <returns>
    /// The initialized <c>CustVendCreatePaymJournalBill_Cust</c> object.
    /// </returns>
    [Hookable(false)]
    public static CustVendCreatePaymJournalBill_Cust newForJournalType(LedgerJournalType _journalType)
    {
        CustVendCreatePaymJournalBill_Cust custVendCreatePaymJournalBill_Cust;

        switch (_journalType)
        {
            case LedgerJournalType::CustBillOfExchangeDraw :
                custVendCreatePaymJournalBill_Cust = new CustVendCreatePaymJournalBillDraw_Cust();
                break;

            case LedgerJournalType::CustBillOfExchangeProtest :
                custVendCreatePaymJournalBill_Cust = new CustVendCreatePaymJournalBillProtest();
                break;

            case LedgerJournalType::CustBillOfExchangeSettle :
                custVendCreatePaymJournalBill_Cust = new CustVendCreatePaymJournalBillSettle_Cust();
                break;

            default :
                custVendCreatePaymJournalBill_Cust = new CustVendCreatePaymJournalBill_Cust();
        }

        return custVendCreatePaymJournalBill_Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>