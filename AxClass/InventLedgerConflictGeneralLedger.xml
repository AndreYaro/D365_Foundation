<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventLedgerConflictGeneralLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Executes the data collection that includes both the extraction and the verification, of the general
///    ledger data. It also calculates the balance for the general ledger.
/// </summary>
class InventLedgerConflictGeneralLedger implements CostILedgerConflict, CostIAsyncRunnable
{
    InventLedgerConflictContract        inventLedgerConflictContract;
    CostReconciliationMethodStrategy    reconciliationMethodStrategy;
    
    private InventLedgerConflictGLPurchDiscRule inventLedgerConflictGLPurchDiscRule;

    #define.CurrentVersion  (1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotallingIntervals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds account totaling intervals based on the <c>DimensionAttributeValueTotallingCriteria</c> table
    /// to the specified data source.
    /// </summary>
    /// <param name="_mainAccountQueryBuildDataSource">
    /// The data source for the <c>MainAccount</c> table to which to add the account intervals.
    /// </param>
    /// <remarks>
    /// If no account totaling intervals are in the <c>DimensionAttributeValueTotallingCriteria</c> table,
    /// the main account from the dialog box is used as an interval, both from-account and to-account are
    /// set to this main account.
    /// </remarks>
    protected void addTotallingIntervals(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
        if (!reconciliationMethodStrategy)
        {
            reconciliationMethodStrategy = CostReconciliationMethodStrategy::newFromParameters();
        }
        reconciliationMethodStrategy.addInventoryMainAccountRanges(_mainAccountQueryBuildDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query that finds the potential general ledger conflicts.
    /// </summary>
    /// <returns>
    ///    A query that finds the potential general ledger conflicts.
    /// </returns>
    protected Query buildQuery()
    {
        Query query = new Query(queryStr(GeneralJournal));

        QueryBuildDataSource qbdsGeneralJournalAccountEntry = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, PostingType));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        // These fields are necessary to select because they are used by the postLoad method on the table
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
        qbdsGeneralJournalAccountEntry.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCorrection));

        QueryBuildDataSource qbdsGeneralJournalEntry = query.dataSourceTable(tableNum(GeneralJournalEntry));
        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(CurrentOperationsTax::Current));
        qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmFromDate(),
            inventLedgerConflictContract.parmInventCostDateCodeContract().parmToDate()));
        qbdsGeneralJournalEntry.addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate));
        qbdsGeneralJournalEntry.addSelectionField(fieldNum(GeneralJournalEntry, JournalCategory));

        // Filter on dimension attribute if selected in the dialog
        if (inventLedgerConflictContract.parmDimensionAttribute())
        {
            QueryBuildDataSource qbdsDimAttrValueComb = query.dataSourceTable(tableNum(DimensionAttributeValueCombination));
            qbdsDimAttrValueComb.addSelectionField(fieldNum(DimensionAttributeValueCombination, TableId)); // Trick to avoid selection of fields
            QueryBuildDataSource qbdsDimAttrLevelValueView = qbdsDimAttrValueComb.addDataSource(tableNum(DimensionAttributeLevelValueView));
            qbdsDimAttrLevelValueView.addLink(fieldNum(DimensionAttributeValueCombination, RecId), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
            qbdsDimAttrLevelValueView.fetchMode(QueryFetchMode::One2One);
            qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(inventLedgerConflictContract.parmDimensionAttribute()));
            if (inventLedgerConflictContract.parmIncludeBlankDimensions())
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::NoExistsJoin);
            }
            else
            {
                qbdsDimAttrLevelValueView.joinMode(JoinMode::InnerJoin);
                qbdsDimAttrLevelValueView.addRange(fieldNum(DimensionAttributeLevelValueView, EntityInstance)).value(queryValue(inventLedgerConflictContract.parmEntityInstance()));
            }
            qbdsDimAttrValueComb.addSelectionField(fieldNum(DimensionAttributeLevelValueView, TableId)); // Trick to avoid selection of fields
        }

        // the relationship to SubledgerVoucherGeneralJournalEntry is added explicitly when it is needed
        QueryBuildDataSource qbdsSubledgerVoucherLink = qbdsGeneralJournalEntry.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        qbdsSubledgerVoucherLink.relations(true);
        qbdsSubledgerVoucherLink.joinMode(JoinMode::InnerJoin);
        qbdsSubledgerVoucherLink.fetchMode(QueryFetchMode::One2One); // the relationship for this scenario is explicitly 1:1
        qbdsSubledgerVoucherLink.addSelectionField(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher));

        QueryBuildDataSource qbdsFiscalCalendarPeriod = query.dataSourceTable(tableNum(FiscalCalendarPeriod));
        qbdsFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(queryRange(FiscalPeriodType::Operating, FiscalPeriodType::Closing));
        qbdsFiscalCalendarPeriod.addSelectionField(fieldNum(FiscalCalendarPeriod, Type));

        QueryBuildDataSource qbdsMainAccount = query.dataSourceTable(tableNum(MainAccount));
        qbdsMainAccount.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));
        qbdsMainAccount.addRange(fieldNum(MainAccount, Type)).value(queryRange(0, DimensionLedgerAccountType::Equity));
        qbdsMainAccount.addSelectionField(fieldNum(MainAccount, MainAccountId));

        this.addTotallingIntervals(qbdsMainAccount);

        qbdsMainAccount.addOrderByField(fieldNum(MainAccount, MainAccountId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingTypeSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the posting type and the period code for potential general ledger conflicts with due regard to origin.
    /// </summary>
    /// <param name="_postingType">The posting type of the ledger posting.</param>
    /// <param name="_periodType">The period type of the ledger posting.</param>
    /// <param name = "_journalCategory">The ledger transaction type.</param>
    /// <param name = "_mainAccountId">The ID of the main account.</param>
    /// <returns>
    /// A list of conflict messages.
    /// </returns>
    protected List checkPostingTypeSource(
        LedgerPostingType   _postingType,
        FiscalPeriodType    _periodType,
        LedgerTransType     _journalCategory,
        MainAccountNum      _mainAccountId)
    {
        List retVal;

        if (_postingType == LedgerPostingType::PurchDisc)
        {
            retVal = inventLedgerConflictGLPurchDiscRule.checkPostingTypeSource(
                    _journalCategory,
                    _mainAccountId);
        }

        if (retVal)
        {
            this.blankDimensionExtraMessage(retVal);
        }
        else
        {
            retVal = this.checkPostingType(_postingType, _periodType);
        }
	
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blankDimensionExtraMessage</Name>
				<Source><![CDATA[
    private void blankDimensionExtraMessage(List _messageList)
    {
        // If a conflict has occured and it has a blank dimension, an extra conflict message must be added.
        if (inventLedgerConflictContract.parmIncludeBlankDimensions() && _messageList.elements() > 0)
        {
            _messageList.addEnd(InventLedgerConflictMessage::newFromParm("@SYS332489", -1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies the posting type and the period code for potential general ledger conflicts.
    /// </summary>
    /// <param name="_postingType">
    /// The posting type of the ledger posting.
    /// </param>
    /// <param name="_periodType">
    /// The period type of the ledger posting.
    /// </param>
    /// <returns>
    /// A list of conflict messages.
    /// </returns>
    /// <remarks>
    /// Debit amounts are displayed with minus and credit amounts are displayed without sign.
    /// </remarks>    
    protected List checkPostingType(LedgerPostingType _postingType, FiscalPeriodType _periodType)
    {
        List    retVal = new List(Types::Class);

        switch (_postingType)
        {
            case LedgerPostingType::TransferOpeningClosing:
                if (_periodType != FiscalPeriodType::Closing)
                {
                    retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS317328", -1));
                }
                break;
            case LedgerPostingType::Closing:
                if (_periodType == FiscalPeriodType::Closing || _periodType == FiscalPeriodType::Operating)
                {
                    retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS317339", -1));
                }
                break;
            case LedgerPostingType::LedgerJournal:
                retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS317347", -1));
                break;
            case LedgerPostingType::SalesRoundOff:
            case LedgerPostingType::SalesPackingSlip:
            case LedgerPostingType::SalesIssue:
            case LedgerPostingType::PurchaseInvoiceRoundOff:
            case LedgerPostingType::PurchPckSlp:
            case LedgerPostingType::PurchReceipt:
            case LedgerPostingType::PurchStdOffsetAccount:
            case LedgerPostingType::InventReceipt:
            case LedgerPostingType::InventIssue:
            case LedgerPostingType::ProdReportFinished:
            case LedgerPostingType::ProdIssue:
            case LedgerPostingType::ProdIssueOffsetAccount:
            case LedgerPostingType::ProdReceipt:
            case LedgerPostingType::ProdReceiptOffsetAccount:
            case LedgerPostingType::ProdPicklist:
            case LedgerPostingType::ProdScrap:
            case LedgerPostingType::ProdWrkCtrIssueOffsetAccount:
            case LedgerPostingType::PurchOffsetAccountPckSlp:
            case LedgerPostingType::SalesOffsetAccountPackingSlip:
            case LedgerPostingType::ProdPicklistOffsetAccount:
            case LedgerPostingType::SalesConsump:
            case LedgerPostingType::PurchConsump:
            case LedgerPostingType::ProdReportFinishedOffsetAccount:
            case LedgerPostingType::InventInterUnitPayable:
            case LedgerPostingType::InventInterUnitReceivable:
            case LedgerPostingType::InventSystemRounding:
            case LedgerPostingType::InventProfit:
            case LedgerPostingType::InventLoss:
            case LedgerPostingType::ProdScrapOffsetAccount:
            case LedgerPostingType::None:
            // <GIN>
            case LedgerPostingType::TransferIssue_IN:
            case LedgerPostingType::TransferReceipt_IN:
            case LedgerPostingType::TransferGoodsTransit_IN:
            case LedgerPostingType::VAT_IN:
            case LedgerPostingType::Excise_IN:
            case LedgerPostingType::SalesTax_IN:
            // </GIN>
            case LedgerPostingType::SalesGoodsInRoute_RU:
                // These are legal posting types
                break;

            default:
                retVal = this.checkPostingTypeDefault(retVal, _postingType);
                break;
        }

        // If a conflict has occured and it has a blank dimension, an extra conflict message must be added.
        if (inventLedgerConflictContract.parmIncludeBlankDimensions() && retVal.elements() > 0)
        {
            retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS332489", -1));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostingTypeDefault</Name>
				<Source><![CDATA[
    [Replaceable]
    protected List checkPostingTypeDefault(List _conflicts, LedgerPostingType _postingType)
    {
        List retVal = _conflicts;

        retVal.addEnd(InventLedgerConflictMessage::newFromParm("@SYS317328", -1));

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        this.setPurchDiscProperties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchDiscProperties</Name>
				<Source><![CDATA[
    private void setPurchDiscProperties()
    {
        inventLedgerConflictGLPurchDiscRule = InventLedgerConflictGLPurchDiscRule::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, inventLedgerConflictContract.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLedgerConflictContract</Name>
				<Source><![CDATA[
    public InventLedgerConflictContract parmInventLedgerConflictContract(InventLedgerConflictContract _inventLedgerConflictContract = inventLedgerConflictContract)
    {
        inventLedgerConflictContract = _inventLedgerConflictContract;

        return inventLedgerConflictContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the data collection, and both the extraction and the verification, of the general ledger
    ///    data. It also calculates the balance for the general ledger.
    /// </summary>
    public void run()
    {
        SRSDynaLink                         dynaLink = new SRSDynaLink();
        AmountMST                           balance = 0;
        InventLedgerConflictTmpBalance      inventLedgerConflictTmpBalance;
        InventLedgerConflictTmpConflict     inventLedgerConflictTmpConflict;
        Map                                 generalLedgerRelevantFields = new Map(Types::String, Types::Container);

        // Prepare drillThrough string
        dynaLink.context(SRSDynaLink::getReportRunContext(inventLedgerConflictContract.parmSRSPrintMediumType()));
        dynaLink.clientMenuFunction(menuitemDisplayStr(InventLedgerConflictLedgerTransVoucher), MenuItemType::Display);
        dynaLink.tableId(tableNum(GeneralJournalEntry));
        
        Query query = this.buildQuery();

        // Fields from the temporary table that are relevant to the GL query are applied
        generalLedgerRelevantFields.insert(fieldStr(InventLedgerConflictTmpConflict, PostingType),
                                        [fieldNum(GeneralJournalAccountEntry, PostingType),
                                        tableNum(GeneralJournalAccountEntry)]);

        generalLedgerRelevantFields.insert(fieldStr(InventLedgerConflictTmpConflict, ReferenceNumber),
                                        [fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher),
                                        tableNum(SubledgerVoucherGeneralJournalEntry)]);

        InventLedgerConflictInit::applyInputQuery(generalLedgerRelevantFields, inventLedgerConflictContract.parmQuery(), query);
        QueryRun queryRun = new QueryRun(query);

        ttsbegin;
        
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        MainAccount mainAccount;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherLink;

        if (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            mainAccount = queryRun.get(tableNum(MainAccount)) as MainAccount;
            fiscalCalendarPeriod = queryRun.get(tableNum(FiscalCalendarPeriod)) as FiscalCalendarPeriod;
            subledgerVoucherLink = queryRun.get(tableNum(SubledgerVoucherGeneralJournalEntry)) as SubledgerVoucherGeneralJournalEntry;
        }

        void nextRecord()
        {
            next generalJournalAccountEntry;
        }

        while (generalJournalAccountEntry)
        {
            if (generalJournalAccountEntry.PostingType == LedgerPostingType::TransferOpeningClosing && fiscalCalendarPeriod.Type == FiscalPeriodType::Closing)
            {
                nextRecord();
                continue;
            }
            List comments = this.checkPostingTypeSource(
                generalJournalAccountEntry.PostingType,
                fiscalCalendarPeriod.Type,
                generalJournalEntry.JournalCategory,
                mainAccount.MainAccountId);

            if (comments.elements() > 0)
            {
                ListEnumerator listEnumerator = comments.getEnumerator();
                int messageNumber = 1;
                dynaLink.recordKey(queryValue(fieldNum(GeneralJournalEntry, RecId)) + ':' + queryValue(generalJournalEntry.RecId));
                while (listEnumerator.moveNext())
                {
                    InventLedgerConflictMessage inventLedgerConflictMessage = listEnumerator.current();
                    inventLedgerConflictTmpConflict.clear();
                    inventLedgerConflictTmpConflict.DimensionValue			= mainAccount.MainAccountId;

                    // The amount is not printed (or summed) for subsequent conflict messages.
                    if (messageNumber == 1)
                    {
                        inventLedgerConflictTmpConflict.Amount				= inventLedgerConflictMessage.parmAmountMultiplier() * generalJournalAccountEntry.AccountingCurrencyAmount;
                    }
                    inventLedgerConflictTmpConflict.TransDate				= generalJournalEntry.AccountingDate;
                    inventLedgerConflictTmpConflict.PostingType				= generalJournalAccountEntry.PostingType;
                    inventLedgerConflictTmpConflict.ReferenceNumber			= subledgerVoucherLink.Voucher;
                    inventLedgerConflictTmpConflict.Comment					= inventLedgerConflictMessage.parmMessage();
                    inventLedgerConflictTmpConflict.DrillThroughAction		= dynaLink.url();
                    inventLedgerConflictTmpConflict.MessageNumber			= messageNumber;
                    inventLedgerConflictTmpConflict.PrintAsterisk			= NoYes::No;
                    inventLedgerConflictTmpConflict.SessionId				= inventLedgerConflictContract.parmSessionId();
                    inventLedgerConflictTmpConflict.ReportId				= inventLedgerConflictContract.parmReportId();
                    inventLedgerConflictTmpConflict.ReportDate				= inventLedgerConflictContract.parmReportDate();
                    inventLedgerConflictTmpConflict.insert();

                    messageNumber++;
                }
            }
            balance += generalJournalAccountEntry.AccountingCurrencyAmount;

            nextRecord();
        }
        
        inventLedgerConflictTmpBalance.Balance					= balance;
        inventLedgerConflictTmpBalance.Module					= InventLedgerConflictModule::GeneralLedger;
        inventLedgerConflictTmpBalance.SessionId				= inventLedgerConflictContract.parmSessionId();
        inventLedgerConflictTmpBalance.ReportId					= inventLedgerConflictContract.parmReportId();
        inventLedgerConflictTmpBalance.ReportDate				= inventLedgerConflictContract.parmReportDate();
        inventLedgerConflictTmpBalance.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventLedgerConflictGeneralLedger),
                                                          staticMethodStr(InventLedgerConflictGeneralLedger, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventLedgerConflictGeneralLedger   dataCollectionTask = new InventLedgerConflictGeneralLedger();
        container                           packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);

        dataCollectionTask.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedInventLedgerConflictContract;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedInventLedgerConflictContract] = _packedClass;
                if (packedInventLedgerConflictContract)
                {
                    inventLedgerConflictContract = InventLedgerConflictContract::construct();
                    return inventLedgerConflictContract.unpack(packedInventLedgerConflictContract);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventLedgerConflictGeneralLedger construct()
    {
        return new InventLedgerConflictGeneralLedger();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>