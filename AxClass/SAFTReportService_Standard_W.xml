<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SAFTReportService_Standard_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class that runs SAF-T Standard report for the EU.
/// </summary>
internal abstract class SAFTReportService_Standard_W extends SAFTReportService_Base_W
{
    protected SAFTReportContract_Standard_W dataContract;
    protected Query userModifiedQuery,
                    generalJournalQuery;

    private boolean exportAllAssets;
    private boolean exportAllAnalysisTypeTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmExportAllAssets</Name>
				<Source><![CDATA[
    public boolean parmExportAllAssets(boolean _exportAllAssets = exportAllAssets)
    {
        exportAllAssets = _exportAllAssets;
        return exportAllAssets;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportAllAnalysisTypeTable</Name>
				<Source><![CDATA[
    public boolean parmExportAllAnalysisTypeTable(boolean _exportAllAnalysisTypeTable = exportAllAnalysisTypeTable)
    {
        exportAllAnalysisTypeTable = _exportAllAnalysisTypeTable;
        return exportAllAnalysisTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueriesForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes basic queries for the report.
    /// </summary>
    internal protected void initQueriesForReport()
    {
        userModifiedQuery = dataContract.parmQuery();
        this.parmExportAllAnalysisTypeTable(dataContract.parmExportAllAnalysisTypeTable());
        this.initGeneralJournalQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueriesToContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all queries to be passed in GER-configuration to the data base context.
    /// </summary>
    /// <param name = "_databaseContext">
    /// The instantiated object of the electronic reporting context to add queries to.
    /// </param>
    protected void addQueriesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        this.addEmptyQuery(tableNum(GeneralJournalEntry), _databaseContext);
        this.addEmptyQuery(tableNum(BankAccountTable), _databaseContext);
        this.addEmptyQuery(tableNum(CustInvoiceJour), _databaseContext);
        this.addEmptyQuery(tableNum(ProjInvoiceJour), _databaseContext);
        this.addEmptyQuery(tableNum(CzCustAdvanceInvoiceTable), _databaseContext);
        this.addEmptyQuery(tableNum(InventTrans), _databaseContext);
        // if Export All Assets is set to "true", assets are added by query
        // otherwise, assets are added through tmp table
        if (exportAllAssets)
        {
            this.addEmptyQuery(tableNum(AssetBook), _databaseContext);
        }

        this.addEmptyQuery(tableNum(VendInvoiceJour), _databaseContext);
        this.addEmptyQuery(tableNum(AssetTrans), _databaseContext);
        this.addDimensionAttributeValueQuery(_databaseContext);
        this.addGeneralJournalEntryQuery(_databaseContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTablesToContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds all temporary tables to be passed in GER-configuration to the data base context.
    /// </summary>
    /// <param name = "_databaseContext">
    /// The instantiated object of the electronic reporting context to add temporarily tables to.
    /// </param>
    protected void addTmpTablesToContext(ERModelDefinitionDatabaseContext _databaseContext)
    {
        super(_databaseContext);

        this.addLedgerTurnoverAndBalanceTmp(_databaseContext);

        // if Export All Analysis is set to "true", dimensions are added by query
        // otherwise, dimensions are added through tmp table
        if (!dataContract.parmExportAllAnalysisTypeTable())
        {
            this.addDimensionAttributeTmp(_databaseContext);
        }
        
        CustTable custTable;
        custTable.setTempDB();
        _databaseContext.addTemporaryTable(custTable);

        VendTable vendTable;
        vendTable.setTempDB();
        _databaseContext.addTemporaryTable(vendTable);

        TaxTable taxTable;
        taxTable.setTempDB();
        _databaseContext.addTemporaryTable(taxTable);

        UnitOfMeasure unitOfMeasure;
        unitOfMeasure.setTempDB();
        _databaseContext.addTemporaryTable(unitOfMeasure);

        InventTable inventTable;
        inventTable.setTempDB();
        _databaseContext.addTemporaryTable(inventTable);

        // if Export All Assets is set to "true", assets are added by query
        // otherwise, assets are added through tmp table
        if (!exportAllAssets)
        {
            AssetBook assetBook;
            assetBook.setTempDB();
            _databaseContext.addTemporaryTable(assetBook);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionAttributeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds temporary table with dimensions to data base context.
    /// </summary>
    /// <param name = "_databaseContext">Data base context.</param>
    private void addDimensionAttributeTmp(ERModelDefinitionDatabaseContext _databaseContext)
    {
        DimensionAttributeValue tableTmp;
        tableTmp.setTempDB();
        RecordInsertList rowRIL = new RecordInsertList(tableNum(DimensionAttributeValue), false, false, false, false, false, tableTmp);
        Set processedIDs = new Set(Types::Int64);

        this.addDimAttributesFromQueries(rowRIL, tableTmp, processedIDs);

        rowRIL.insertDatabase();
        select tableTmp;
        _databaseContext.addTemporaryTable(tableTmp, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimAttributesFromQueries</Name>
				<Source><![CDATA[
    internal protected void addDimAttributesFromQueries(RecordInsertList _rowRIL, DimensionAttributeValue _tableTmp, Set _processedIDs)
    {
        this.addDimAttrGeneralJournalSetBased(_tableTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimAttrGeneralJournalSetBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects <c>DimensionAttributeValue</c> records, related to general journal transactions,
    /// that are begin reported into temporary table using set-based approach.
    /// </summary>
    /// <param name = "_targetTableTmp">
    /// The target <c>DimensionAttributeValue</c> temporary table, that will be pushed further withing reporting flow.
    /// </param>
    /// <remarks>Uses <c>DimensionAttributeLevelValueView</c> like <c>SAFTERHelper_W.getAnalysis</c> method, instead of
    /// <c>DimensionStorage</c> class like <c>addDimAttrGeneralJournal</c> method.
    /// </remarks>
    private void addDimAttrGeneralJournalSetBased(DimensionAttributeValue _targetTableTmp)
    {
        Query glQuery = new Query(this.generalJournalQuery);
        this.disableOneToManyDataSourcesForGeneralJournalQuery(glQuery);
        
        RefRecIdTmp_W dimensionsWithFisCalendPeriods;
        this.collectLedgerDimesionsFromGeneralJournalQueryToTmpTable(glQuery, dimensionsWithFisCalendPeriods);

        RefRecIdTmp_W attributeValueRecIdTmp;
        this.collectDimesionAttributeValueRecIdsFromLedgerDimensions(dimensionsWithFisCalendPeriods, attributeValueRecIdTmp);

        this.insertAttributeValuesByCollectedRecIds(attributeValueRecIdTmp, _targetTableTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>disableOneToManyDataSourcesForGeneralJournalQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prevents exception being thrown during <c>Query.insert_recordset</c> method call, disabling query data sources that
    /// create situation when parent data source has several children data sources.
    /// </summary>
    /// <param name = "_generalJournalQuery">The <c>Query</c> object being prepared for insert_recordset</param>
    /// <remarks>
    /// The <c>Query.insert_recordset</c> method throws an exception when executes on query having
    /// multiple children for some datasource, even if they has <c>One2One</c> fetch mode.
    /// </remarks>
    private void disableOneToManyDataSourcesForGeneralJournalQuery(Query _generalJournalQuery)
    {
        _generalJournalQuery.dataSourceTable(tableNum(FiscalCalendarPeriod)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectLedgerDimesionsFromGeneralJournalQueryToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>LederDimension</c> and <c>FiscalCalendarPeriod</c> values from general journal query
    /// using set-based approach into temporary table.
    /// </summary>
    /// <param name = "_generalJournalQuery">The query to get records from.</param>
    /// <param name = "_tmpTable">The temporary table to insert records into.</param>
    /// <remarks><c>FiscalCalendarPeriod</c> values are collected to provide calling context ability to
    /// implement substitution logic for disabled <c>FiscalCalendarPeriod</c> data source.
    /// Please see the <c>disableOneToManyDataSourcesForGeneralJournalQuery</c> method documentation.
    /// </remarks>
    private void collectLedgerDimesionsFromGeneralJournalQueryToTmpTable(Query _generalJournalQuery, RefRecIdTmp_W _tmpTable)
    {
        QueryBuildDataSource glQbds = _generalJournalQuery.dataSourceTable(tableNum(GeneralJournalForGDPdUView));
        _generalJournalQuery.clearAllFields();
        glQbds.addSelectionField(fieldNum(GeneralJournalForGDPdUView, GeneralJournalAccountEntryLedgerDimension));
        glQbds.addSelectionField(fieldNum(GeneralJournalForGDPdUView, GeneralJournalEntryFiscalCalendarPeriod));
        
        Map insertRecordsetMap = new Map(Types::String, Types::Container);
        insertRecordsetMap.insert(
            fieldStr(RefRecIdTmp_W, RefRecIdWithoutIndex),
            [glQbds.uniqueId(), fieldStr(GeneralJournalForGDPdUView, GeneralJournalAccountEntryLedgerDimension)]
        );
        insertRecordsetMap.insert(
            fieldStr(RefRecIdTmp_W, RefRecIdIndexed),
            [glQbds.uniqueId(), fieldStr(GeneralJournalForGDPdUView, GeneralJournalEntryFiscalCalendarPeriod)]
        );
        try
        {
            Query::insert_recordset(_tmpTable, insertRecordsetMap, _generalJournalQuery);
        }
        catch
        {
            throw error(strFmt(
                "@StandardAuditFile_SAFT_W:SAFTDimensionAttributeValueCollectionOptimizationNOFeatureLimitation",
                "@StandardAuditFile_SAFT_W:SAFTDimensionAttributeValueCollectionOptimizationNOFeatureLabel"
                ));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectDimesionAttributeValueRecIdsFromLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record ids of <c>DimensionAttributeValue</c> records related to ledger dimensions got from
    /// source temp table into target temp table using set-based approach.
    /// </summary>
    /// <param name = "_ledgerDimensionTmp">The source temp table having record ids of ledger dimensions</param>
    /// <param name = "_attributeValueTmp">The target temporary table to insert attribute values record ids into.</param>
    /// <remarks>It also implements substitution logic for disabled <c>FiscalCalendarPeriod</c> data source,
    /// filtering out dimension-period pairs that does satisfy <c>FiscalCalendarPeriod</c> requirements.
    /// Please see the <c>disableOneToManyDataSourcesForGeneralJournalQuery</c> method documentation.
    /// </remarks>
    private void collectDimesionAttributeValueRecIdsFromLedgerDimensions(RefRecIdTmp_W _ledgerDimensionTmp, RefRecIdTmp_W _attributeValueTmp)
    {
        DimensionAttribute dimensionAttribute;
        DimensionAttributeLevelValueView dimensionView;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        
        insert_recordset _attributeValueTmp(RefRecIdIndexed)
            select fiscalCalendarPeriod
                where fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join _ledgerDimensionTmp
                where _ledgerDimensionTmp.RefRecIdIndexed == fiscalCalendarPeriod.RecId
            join AttributeValueRecId from dimensionView
                group by dimensionView.AttributeValueRecId
                where dimensionView.ValueCombinationRecId == _ledgerDimensionTmp.RefRecIdWithoutIndex
            exists join dimensionAttribute
                where dimensionAttribute.RecId == dimensionView.DimensionAttribute
                && (dimensionAttribute.Type == DimensionAttributeType::ExistingList
                    || dimensionAttribute.Type == DimensionAttributeType::CustomList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAttributeValuesByCollectedRecIds</Name>
				<Source><![CDATA[
    private void insertAttributeValuesByCollectedRecIds(RefRecIdTmp_W _attributeValueTmp, DimensionAttributeValue _targetTableTmp)
    {
        DimensionAttributeValue dimensionAttributeValue;
        insert_recordset _targetTableTmp(
            ActiveFrom,
            ActiveTo,
            BackingRecordDataAreaId,
            CachedDisplayValue,
            CachedInvariantName,
            CachedName,
            DimensionAttribute,
            DisplayValue,
            EntityInstance,
            GroupDimension,
            IsDeleted,
            HashKey
            )
            select
            ActiveFrom,
            ActiveTo,
            BackingRecordDataAreaId,
            CachedDisplayValue,
            CachedInvariantName,
            CachedName,
            DimensionAttribute,
            DisplayValue,
            EntityInstance,
            GroupDimension,
            IsDeleted,
            HashKey
            from dimensionAttributeValue
            exists join _attributeValueTmp
                where _attributeValueTmp.RefRecIdIndexed == dimensionAttributeValue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimAttrGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds elements from query with ledger dimensions from General Journal Account Entries
    /// to tmp table with dimensions.
    /// </summary>
    /// <param name = "_query">Query with General Journal Entry Accounts.</param>
    /// <param name = "_rowRIL">List with records to insert.</param>
    /// <param name = "_tableTmp">Temporary table with dimensions.</param>
    /// <param name = "_processedIDs">Set with dimensions' processed identifiers.</param>
    /// <exception cref="Exception::Error">
    /// Wrong parameters specified for dimension storage.
    /// </exception>
    private void addDimAttrGeneralJournal(Query _query, RecordInsertList _rowRIL, DimensionAttributeValue _tableTmp, Set _processedIDs)
    {
        QueryRun queryRun = new QueryRun(_query);
        while (queryRun.next())
        {
            GeneralJournalForGDPdUView generalJournalView = queryRun.get(tableNum(GeneralJournalForGDPdUView));

            DimensionHierarchy dimensionHierarchy;
            DimensionAttributeValueCombination dimensionAttributeValueCombination;
            select firstonly dimensionHierarchy
                exists join dimensionAttributeValueCombination
                    where dimensionAttributeValueCombination.AccountStructure == dimensionHierarchy.RecId
                        && dimensionAttributeValueCombination.RecId == generalJournalView.GeneralJournalAccountEntryLedgerDimension;

            DimensionStorage dimensionStorage = DimensionStorage::findById(generalJournalView.GeneralJournalAccountEntryLedgerDimension);
            if (!dimensionStorage)
            {
                throw error("@SYS83964");
            }
            
            int hierarchyCount = dimensionStorage.hierarchyCount();
            for (int hierarchyIndex = 1; hierarchyIndex <= hierarchyCount; hierarchyIndex++)
            {
                if (dimensionHierarchy.RecId == DimensionHierarchy::find(dimensionStorage.getHierarchyId(hierarchyIndex)).RecId)
                {
                    this.selectDimFromHierarchy(dimensionStorage, hierarchyIndex, _rowRIL, _tableTmp, _processedIDs);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDimFromHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all used dimensions from hierarchy.
    /// </summary>
    /// <param name = "_dimensionStorage">Current dimension storage.</param>
    /// <param name = "_hierarchyIndex">Current hierarchy's index.</param>
    /// <param name = "_rowRIL">List with records to insert.</param>
    /// <param name = "_tableTmp">Temporary table with dimensions.</param>
    /// <param name = "_processedIDs">Set with dimensions' processed identifiers.</param>
    private void selectDimFromHierarchy(DimensionStorage _dimensionStorage, int _hierarchyIndex
        , RecordInsertList _rowRIL, DimensionAttributeValue _tableTmp, Set _processedIDs)
    {
        int segmentCount = _dimensionStorage.segmentCountForHierarchy(_hierarchyIndex);
        for (int segmentIndex = 1; segmentIndex <= segmentCount; segmentIndex++)
        {
            DimensionStorageSegment segment = _dimensionStorage.getSegmentForHierarchy(_hierarchyIndex, segmentIndex);

            if (segment.parmDimensionAttributeValueId() != 0)
            {
                this.selectDimFromSegment(segment, _rowRIL, _tableTmp, _processedIDs);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDimFromSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all used dimensions from segment.
    /// </summary>
    /// <param name = "_segment">Current segment.</param>
    /// <param name = "_rowRIL">List with records to insert.</param>
    /// <param name = "_tableTmp">Temporary table with dimensions.</param>
    /// <param name = "_processedIDs">Set with dimensions' processed identifiers.</param>
    private void selectDimFromSegment(DimensionStorageSegment _segment, RecordInsertList _rowRIL
        , DimensionAttributeValue _tableTmp, Set _processedIDs)
    {
        DimensionAttribute dimensionAttribute = DimensionAttribute::find(
            DimensionAttributeValue::find(_segment.parmDimensionAttributeValueId()).DimensionAttribute);

        if (dimensionAttribute.Type == enum2int(DimensionAttributeType::ExistingList)
            || dimensionAttribute.Type == enum2int(DimensionAttributeType::CustomList))
        {
            DimensionAttributeValue dimensionAttributeValue;
            while select dimensionAttributeValue
                    where dimensionAttribute.RecId == dimensionAttributeValue.DimensionAttribute
            {
                if (_segment.parmDisplayValue() == dimensionAttributeValue.getValue())
                {
                    // insert RecIds of dimensions in set
                    if (_processedIDs.add(dimensionAttributeValue.RecId))
                    {
                        _tableTmp.data(dimensionAttributeValue);
                        _rowRIL.add(_tableTmp);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionAttributeValueQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds query with dimensions to data base context.
    /// </summary>
    /// <param name = "_databaseContext">Data base context.</param>
    private void addDimensionAttributeValueQuery(ERModelDefinitionDatabaseContext _databaseContext)
    {
        // if Export All Dimensions is set to "true", then dimensions are processed by special separate query
        // otherwise, information about dimensions is collected from next in Source Documents:
        // Sales Invoices, Purchase Invoices, Payments and General Ledger Entries
        if (dataContract.parmExportAllAnalysisTypeTable())
        {
            var query = new Query();
            var dimAttrValueDS = query.addDataSource(tableNum(DimensionAttributeValue));
            
            if (userModifiedQuery)
            {
                var qbds = userModifiedQuery.dataSourceTable(tableNum(DimensionAttribute));
                if (qbds)
                {
                    var copiedQueryDataSource = dimAttrValueDS.addDataSource(qbds.table());
                    SysQuery::copyDataSource(qbds, copiedQueryDataSource, true);
                    copiedQueryDataSource.relations(true);
                    copiedQueryDataSource.joinMode(JoinMode::ExistsJoin);
                }
            }
            
            _databaseContext.addQuery(dimAttrValueDS.table(), query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalEntryQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds query with general journal entries to data base context.
    /// </summary>
    /// <param name = "_databaseContext">Data base context.</param>
    private void addGeneralJournalEntryQuery(ERModelDefinitionDatabaseContext _databaseContext)
    {
        if (dataContract.parmExportGeneralLedgerEntries())
        {
            _databaseContext.addQuery(tableNum(GeneralJournalForGDPdUView), this.generalJournalQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGeneralJournalQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query with general journal entries.
    /// </summary>
    private void initGeneralJournalQuery()
    {
        if (dataContract.parmExportGeneralLedgerEntries())
        {
            this.generalJournalQuery = this.createQueryWithCopiedDataSource(userModifiedQuery, tableNum(GeneralJournalForGDPdUView));
            QueryBuildDataSource generalJournalViewDs = generalJournalQuery.dataSourceTable(tableNum(GeneralJournalForGDPdUView));
            generalJournalViewDs.applyFilter(
                new FieldFilterValue(
                    AbsoluteFieldBinding::construct(
                        fieldStr(GeneralJournalForGDPdUView, GeneralJournalEntryAccountingDate),
                        tableStr(GeneralJournalForGDPdUView)),
                    SysQuery::range(dataContract.parmDateFrom(), dataContract.parmDateTo())));

            QueryBuildDataSource mainAccountDs = generalJournalViewDs.addDataSource(tableNum(MainAccount));
            QueryBuildDataSource userModifiedMainAccountDs = userModifiedQuery.dataSourceTable(tableNum(MainAccount));
            userModifiedMainAccountDs.fetchMode(QueryFetchMode::One2One);
            SysQuery::copyDataSource(userModifiedMainAccountDs, mainAccountDs, true);
            this.copyFilters(userModifiedQuery, generalJournalQuery, mainAccountDs);

            mainAccountDs.relations(false);
            mainAccountDs.fetchMode(QueryFetchMode::One2One);
            mainAccountDs.addLink(
                fieldNum(GeneralJournalForGDPdUView, GeneralJournalAccountEntryMainAccount),
                fieldNum(MainAccount, RecId));

            QueryBuildDataSource fiscalCalendarPeriodDs = generalJournalViewDs.addDataSource(tableNum(FiscalCalendarPeriod));
            fiscalCalendarPeriodDs.joinMode(JoinMode::ExistsJoin);
            fiscalCalendarPeriodDs.relations(false);
            fiscalCalendarPeriodDs.fetchMode(QueryFetchMode::One2One);
            fiscalCalendarPeriodDs.addLink(
                fieldNum(GeneralJournalForGDPdUView, GeneralJournalEntryFiscalCalendarPeriod),
                fieldNum(FiscalCalendarPeriod, RecId));
            fiscalCalendarPeriodDs.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLedgerTurnoverAndBalanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds temporary table with General Ledger Accounts to data base context.
    /// </summary>
    /// <param name = "_databaseContext">Data base context.</param>
    private void addLedgerTurnoverAndBalanceTmp(ERModelDefinitionDatabaseContext _databaseContext)
    {
        LedgerTurnoverAndBalanceContract trialBalanceContract = new LedgerTurnoverAndBalanceContract();
        trialBalanceContract.parmFromDate(dataContract.parmDateFrom());
        trialBalanceContract.parmToDate(dataContract.parmDateTo());
        trialBalanceContract.parmPrintZeroBalances(false);
        LedgerTurnoverAndBalanceDP provider = new LedgerTurnoverAndBalanceDP();
        provider.parmDataContract(trialBalanceContract);
        
        this.setupLedgerTurnoverAndBalnceDP(provider);

        provider.processReport();
        LedgerTurnoverAndBalanceTmp tableTmp = provider.getLedgerTurnoverAndBalanceTmp();
        select tableTmp;
        _databaseContext.addTemporaryTable(tableTmp, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupLedgerTurnoverAndBalnceDP</Name>
				<Source><![CDATA[
    internal protected void setupLedgerTurnoverAndBalnceDP(LedgerTurnoverAndBalanceDP _provider)
    { }

]]></Source>
			</Method>
			<Method>
				<Name>getERFormatMappingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the identifier of the format mapping to be run.
    /// </summary>
    /// <returns>
    /// The identifier of the format mapping to be run.
    /// </returns>
    protected ERFormatMappingId getERFormatMappingRecId()
    {
        TaxParameters taxParameters;
        select firstonly SAFTERFormatMapping_W from taxParameters;
        return taxParameters.SAFTERFormatMapping_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEmptyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds empty query to data base context.
    /// </summary>
    /// <param name = "_tableId">Table id of added data source.</param>
    /// <param name = "_databaseContext">Database context.</param>
    private void addEmptyQuery(TableId _tableId, ERModelDefinitionDatabaseContext _databaseContext)
    {
        var query = new Query();
        var ds = query.addDataSource(_tableId);
        ds.addRange(fieldnum(Common, RecId)).value(queryValue('-1'));
        _databaseContext.addQuery(_tableId, query);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>