<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportController_BE</c> class is the controller class for the <c>TaxReport_BE</c> report.
/// </summary>
public class TaxReportController_BE extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('TaxReport_BE.Report')
    #TaxReportingCodesBE

    Array                   taxValues;
    TaxCalcReportBEFields   taxCalcReportBEFields;
    boolean                 periodQuarter;
    str                     reportDesign;

    TmpTaxReportById        tmpTaxReportById;
    TaxReportTmp_BE         taxReportTmp_BE;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00009, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyName</Name>
				<Source><![CDATA[
    private Name companyName()
    {
        return CompanyInfo::find().name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>identLabel</Name>
				<Source><![CDATA[
    private TaxRegistrationNumber identLabel()
    {
        return CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Args _args)
    {
        TaxCorrectionsBE    taxCorrectionsBE;
        TaxPeriodHead       taxPeriodHead;
        int                 i;
        real                xX, yy, dummy;

        this.initFromArgs(_args);

        if (taxCalcReportBEFields.calc(true))
        {
            tmpTaxReportById.setTmpData(this.parmTmpTaxReportById());
        }

        //create and initialize new array taxValues
        taxValues = new Array(Types::Real);
        for (i = 1; i < 101; i ++)
        {
            taxValues.value(i, 0.00);
        }

        //decide if it is VAT report by month or by quarter.
        taxPeriodHead = TaxPeriodHead::find(taxCalcReportBEFields.parmTaxPeriod());
        if (taxPeriodHead.QtyUnit == 1 && taxPeriodHead.PeriodUnit == PeriodUnit::Month)
        {
            periodQuarter = false;
        }
        else
        {
            periodQuarter = true;
        }

        CurrencyCode currencyCode = Ledger::accountingCurrency();
        //Select the values of the tax fields and put them in the array 'taxValues'
        while select TaxReportField, Amount from tmpTaxReportById
            order by TaxReportField
            where tmpTaxReportById.TaxReportField <  101
               && tmpTaxReportById.Amount         != 0
        {
            if (tmpTaxReportById.TaxReportField == #field_61 || tmpTaxReportById.TaxReportField == #field_62)
            {
                tmpTaxReportById.Amount = abs(tmpTaxReportById.Amount);
            }
            taxValues.value(tmpTaxReportById.TaxReportField, CurrencyExchange::round(tmpTaxReportById.Amount, currencyCode));
        }

        //Select all corrections for this taxperiod and between the given startday, and endday, and update the array 'taxValues'
        while select Field, Amount from taxCorrectionsBE
            order by Field
            where taxCorrectionsBE.TaxPeriod == taxCalcReportBEFields.parmTaxPeriod()
               && taxCorrectionsBE.StartDate <= taxCalcReportBEFields.parmFromDate()
               && taxCorrectionsBE.EndDate   >= taxCalcReportBEFields.parmToDate()
        {
            dummy = taxValues.value(str2int(taxCorrectionsBE.Field)) + CurrencyExchange::round(taxCorrectionsBE.Amount, currencyCode);
            taxValues.value(str2int(taxCorrectionsBE.Field), dummy);
        }

        //Check for negative values
        for (i = 1; i < 101; i ++)
        {
            if (taxValues.value(i) < 0)
            {
                taxValues.value(i, 0.00);
            }
        }

        //recalculate totals with taxcorrections included
        xX = taxValues.value(54) + taxValues.value(55) +taxValues.value(56) + taxValues.value(57) + taxValues.value(61) + taxValues.value(63);
        yy = taxValues.value(59) + taxValues.value(62) +taxValues.value(64);

        if (xX > yy)
        {
            taxValues.value(71, xX-yy);
            taxValues.value(72, 0.00);
        }
        else
        {
            if (yy > xx)
            {
                taxValues.value(71, 0.00);
                taxValues.value(72, yy-xX);
            }
            else
            {
                taxValues.value(71, 0.00);
                taxValues.value(72, 0.00);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    private void initFromArgs(Args  _args)
    {
        TaxReport_BE     taxReport_BE;
        TaxReportVoucher taxReportVoucher;

        if (_args && _args.dataset() == tablenum(TaxReportVoucher))
        {
            taxCalcReportBEFields = TaxCalcReportBEFields::newTaxReportVoucher(args.record());
        }
        else
        {
            if (_args && _args.dataset() == tablenum(TaxReportExtraFieldsBE))
            {
                taxCalcReportBEFields = TaxCalcReportBEFields::newTaxReportExtraFieldsBE(args.record());
            }
            else
            {
                if (_args && classidget(args.caller()) == classnum(TaxReport_BE))
                {
                    taxReport_BE = _args.caller();
                    select taxReportVoucher
                        where taxReportVoucher.FromDate  == taxReport_BE.fromDate()
                           && taxReportVoucher.ToDate    == taxReport_BE.toDate()
                           && taxReportVoucher.TaxPeriod == taxReport_BE.taxPeriod()
                           && taxReportVoucher.TaxRepVersion == taxReport_BE.taxRepVersion()
                           && taxReportVoucher.TaxRepVersion != TaxRepVersion::Latest;
					
                    if (taxReportVoucher)
                    {
                        taxCalcReportBEFields = TaxCalcReportBEFields::newTaxReportVoucher(taxReportVoucher);
                    }
                    else
                    {
                        taxCalcReportBEFields = TaxCalcReportBEFields::newTaxReport_BE(args.caller());
                    }
                }
                else
                {
                    throw error(strfmt("@SYS25516", classstr(TaxReportController_BE)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportTmp_BE</Name>
				<Source><![CDATA[
    private TaxReportTmp_BE insertTaxReportTmp_BE()
    {
        taxReportTmp_BE.Field00             = taxValues.value(100);
        taxReportTmp_BE.Field01             = taxValues.value(1);
        taxReportTmp_BE.Field02             = taxValues.value(2);
        taxReportTmp_BE.Field03             = taxValues.value(3);
        taxReportTmp_BE.Field44             = taxValues.value(44);
        taxReportTmp_BE.Field45             = taxValues.value(45);
        taxReportTmp_BE.Field46             = taxValues.value(46);
        taxReportTmp_BE.Field47             = taxValues.value(47);
        taxReportTmp_BE.Field48             = taxValues.value(48);
        taxReportTmp_BE.Field49             = taxValues.value(49);
        taxReportTmp_BE.Field81             = taxValues.value(81);
        taxReportTmp_BE.Field82             = taxValues.value(82);
        taxReportTmp_BE.Field83             = taxValues.value(83);
        taxReportTmp_BE.Field84             = taxValues.value(84);
        taxReportTmp_BE.Field85             = taxValues.value(85);
        taxReportTmp_BE.Field86             = taxValues.value(86);
        taxReportTmp_BE.Field87             = taxValues.value(87);
        taxReportTmp_BE.Field88             = taxValues.value(88);
        taxReportTmp_BE.Field54             = taxValues.value(54);
        taxReportTmp_BE.Field55             = taxValues.value(55);
        taxReportTmp_BE.Field56             = taxValues.value(56);
        taxReportTmp_BE.Field57             = taxValues.value(57);
        taxReportTmp_BE.Field61             = taxValues.value(61);
        taxReportTmp_BE.Field63             = taxValues.value(63);
        taxReportTmp_BE.Field65             = taxValues.value(65);
        taxReportTmp_BE.Field59             = taxValues.value(59);
        taxReportTmp_BE.Field62             = taxValues.value(62);
        taxReportTmp_BE.Field64             = taxValues.value(64);
        taxReportTmp_BE.Field66             = taxValues.value(66);
        taxReportTmp_BE.Field71             = num2Str(taxValues.value(71),0,2,2,3);
        taxReportTmp_BE.Field71Real         = taxValues.value(71);
        taxReportTmp_BE.Field72             = taxValues.value(72);
        taxReportTmp_BE.Field91             = taxValues.value(91);
        taxReportTmp_BE.Field91Real         = taxValues.value(91);

        taxReportTmp_BE.CompanyName         = this.companyName();
        taxReportTmp_BE.Identlabel          = this.identLabel();
        taxReportTmp_BE.Reimbursement       = taxCalcReportBEFields.parmReImbursement();
        taxReportTmp_BE.PaymentFormOrder    = taxCalcReportBEFields.parmPaymentFormOrder();
        taxReportTmp_BE.FromDate            = taxCalcReportBEFields.parmFromDate();
        taxReportTmp_BE.ToDate              = taxCalcReportBEFields.parmToDate();
        taxReportTmp_BE.TaxPeriod           = taxCalcReportBEFields.parmTaxPeriod();
        taxReportTmp_BE.TaxPeriodFrequency  = this.taxPeriodFrequency();
        taxReportTmp_BE.vatNum              = this.vatNum();
        taxReportTmp_BE.NihilAnnualListing  = taxCalcReportBEFields.parmNihilAnnualListing();

        taxReportTmp_BE.insert();

        return taxReportTmp_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxReportById</Name>
				<Source><![CDATA[
    private TmpTaxReportById parmTmpTaxReportById()
    {
        return taxCalcReportBEFields.parmTmpTaxReportById();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsTmpTblMarshallerContract     contract;
        recId                           recId;

        contract = this.parmReportContract().parmRdpContract() as SrsTmpTblMarshallerContract;

        this.init(this.parmArgs());

        this.insertTaxReportTmp_BE();

        recId = this.sendTaxReportTmp_BE();

        contract.parmTmpTableDataRecId(recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTaxReportTmp_BE</Name>
				<Source><![CDATA[
    public recId sendTaxReportTmp_BE()
    {
        SRSReportRunPermission      srsPermission;
        recId                       reportParamRecId;

        srsPermission = new SRSReportRunPermission();
        srsPermission.assert();
        reportParamRecId = SRSTmpTblMarshaller::sendTmpTblToDataProvider(taxReportTmp_BE);
        CodeAccessPermission::revertAssert();

        delete_from taxReportTmp_BE;

        return reportParamRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPeriodFrequency</Name>
				<Source><![CDATA[
    private str taxPeriodFrequency()
    {
        TaxPeriodHead   taxPeriodHead;
        str             ret;

        taxPeriodHead = TaxPeriodHead::find(taxCalcReportBEFields.parmTaxPeriod());

        if (taxPeriodHead)
        {
            if (taxPeriodHead.QtyUnit == 1 && taxPeriodHead.PeriodUnit == PeriodUnit::Month)
            {
                ret = "@SYS67526";
            }
            else if (taxPeriodHead.QtyUnit == 3 && taxPeriodHead.PeriodUnit == PeriodUnit::Month)
            {
                ret = "@SYS67527";
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatNum</Name>
				<Source><![CDATA[
    private VATNum vatNum()
    {
        return CompanyInfo::find().getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, taxCalcReportBEFields.parmToDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController  controller = new TaxReportController_BE();

        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>