<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMandatoryCheckManagement</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailMandatoryCheckManagement</c> class is used to check for the mandatory fields, validates the values in the fields and returns error text
/// messages if not proper.
/// </summary>
class RetailMandatoryCheckManagement extends RunBase
{
    Common          m_oBuffer;
    QueryRun        m_oQry;

    #Retail
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks for the errors in the journal lines.
    /// </summary>
    /// <param name="_sImportJournalId">
    /// Table buffer of <c>RetailImportJournalId</c>.
    /// </param>
    /// <returns>
    /// Error count.
    /// </returns>
    /// <remarks>
    /// ImportJournalTrans.mandatoryCheck method validates and throws error if the mandatory fields are not filled.
    /// </remarks>
    int checkJournal(RetailImportJournalId    _sImportJournalId)
    {
        RetailImportJournalTrans   tImportJournalTrans;
        Counter                 iErrorCount, iTotalRecs;

        SysOperationProgress oProgress = new SysOperationProgress();
        #MACROLIB.AviFiles
        ;

        oProgress.setCaption("@RET952");

        select count(recid) from tImportJournalTrans
            where tImportJournalTrans.journalId == _sImportJournalId;

        oProgress.setTotal(tImportJournalTrans.RecId);

        ttsbegin;
        while select forupdate * from tImportJournalTrans
            where tImportJournalTrans.journalId == _sImportJournalId
               && tImportJournalTrans.Status    != RetailJournalTransStatusBase::Posted
        {
            oProgress.setCount(iTotalRecs);
            oProgress.setText(strfmt("%1-%2",tImportJournalTrans.ItemId, tImportJournalTrans.ItemName));

            if (tImportJournalTrans.mandatoryCheck())
            {
                iErrorCount++;
            }

            iTotalRecs++;
        }
        ttscommit;

        if (iErrorCount)
            error(strFmt("@RET953", iErrorCount, iTotalRecs));
        else if (!iTotalRecs)
            error("@RET954");
        else
            info("@RET955");

        return iErrorCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to initialize the <c>common</c> object with args.record; else throws error.
    /// </summary>
    /// <param name="_args">
    /// Args class to pass the arguments.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws error if the call is for wrong class.
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.dataset())
        {
            m_oBuffer   = _args.record();
        }
        else
        {
            throw error ("@RET4123");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to create the query and the range.
    /// </summary>
    void queryBuild()
    {
        QueryBuildDataSource    oQryBuildDS;
        SysDictTable            dictTable;

        m_oQry = new QueryRun(new Query());
        m_oQry.name("@RET4275");

        oQryBuildDS = m_oQry.query().addDataSource(m_oBuffer.TableId);
        oQryBuildDS.clearRanges();

        dictTable = new SysDictTable(m_oBuffer.TableId);
        oQryBuildDS.addRange( dictTable.titleField1() ).value(m_oBuffer.(dictTable.titleField1()) );
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks for the mandatory fields, validates the values in the fields and returns error text messages if not proper.
    /// </summary>
    /// <remarks>
    /// RetailMandatoryCheckManagement::checkRecord method is used for validating the mandatory fields.
    /// </remarks>
    void run()
    {
        RetailErrorDescription     sErrorTxt;
        ;

        sErrorTxt = RetailMandatoryCheckManagement::checkRecord(m_oBuffer);
        if (sErrorTxt)
            error(sErrorTxt);
        else
            info("@SYS40526");
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method loops the <c>RetailMandatoryCheck</c> for the <c>TableId</c> and executes the following cases:
    /// 1.RetailMandatoryCheckForBase::Blank
    /// -In this case method checks for the dictField.type is equal to Date. If RetailMandatoryCheck.refFieldId is not of datenull() then <c>sErrorTxt</c> is initialized
    /// with the error text. If the dictField.type is not of type Date and RetailMandatoryCheck.refFieldId is not empty string then <c>sErrorTxt</c> is initialized with
    /// the error text message.
    /// 2.RetailMandatoryCheckForBase::NotBlank
    /// -In this case method checks for the dictField.type is equal to Date. If RetailMandatoryCheck.refFieldId is of datenull() then <c>sErrorTxt</c> is initialized
    /// with the error text. If the dictField.type is not of type Date and RetailMandatoryCheck.refFieldId is empty string then <c>sErrorTxt</c> is initialized with
    /// the error text message.
    /// 3.RetailMandatoryCheckForBase::Zero
    /// -If RetailMandatoryCheck.refFieldId is not zero then <c>sErrorTxt</c> is initialized with the error text message.
    /// 4.RetailMandatoryCheckForBase::NotZero
    /// -If RetailMandatoryCheck.refFieldId is zero then <c>sErrorTxt</c> is initialized with the error text message.
    /// 5.RetailMandatoryCheckForBase::Constant
    /// -If the enum values are not constant then <c>sErrorTxt</c> is initialized with the error text message.
    /// 6.RetailMandatoryCheckForBase::OneOf
    /// -Here method checks for the string length and if it is zero then <c>sErrorTxt</c> is initialized with the proper error text message.
    /// </summary>
    /// <param name="tTable">
    /// Common object.
    /// </param>
    /// <returns>
    /// Error text.
    /// </returns>
    static RetailErrorDescription checkRecord(Common  tTable)
    {
        RetailMandatoryCheck           tRBOMandatoryCheck;
        SysDictField                dictField;
        str                         sSource, sCheckValue,sErrorTxt;
        ;

        while select * from tRBOMandatoryCheck
            where tRBOMandatoryCheck.refTableId == tTable.TableId
        {
            dictField = new SysDictField(tRBOMandatoryCheck.refTableId, tRBOMandatoryCheck.refFieldId);

            switch (tRBOMandatoryCheck.mandatoryCheckFor)
            {
                case RetailMandatoryCheckForBase::Blank:
                    if ( dictField.type() == Types::Date )
                    {
                        if ( tTable.(tRBOMandatoryCheck.refFieldId) != datenull() )
                            sErrorTxt += strfmt("@RET4269",dictField.name()) + #CharNewLine;
                    }
                    else
                        if ( tTable.(tRBOMandatoryCheck.refFieldId) != "")
                            sErrorTxt += strfmt("@RET4269",dictField.name()) + #CharNewLine;
                break;
                case RetailMandatoryCheckForBase::NotBlank:
                    if ( dictField.type() == Types::Date )
                    {
                        if ( tTable.(tRBOMandatoryCheck.refFieldId) == datenull() )
                            sErrorTxt += strfmt("@RET4269",dictField.name())+ #CharNewLine;
                    }
                    else
                    if ( tTable.(tRBOMandatoryCheck.refFieldId) == "")
                            sErrorTxt += strfmt("@RET4270",dictField.name() )+ #CharNewLine;
                break;
                case RetailMandatoryCheckForBase::Zero:
                    if ( tTable.(tRBOMandatoryCheck.refFieldId) != 0)
                            sErrorTxt += strfmt("@RET4271",dictField.name())+ #CharNewLine;
                break;
                case RetailMandatoryCheckForBase::NotZero:
                    if ( tTable.(tRBOMandatoryCheck.refFieldId) == 0)
                            sErrorTxt += strfmt("@RET4272",dictField.name())+ #CharNewLine;
                break;
                case RetailMandatoryCheckForBase::Constant:
                    if ( enum2str(tTable.(tRBOMandatoryCheck.refFieldId)) != tRBOMandatoryCheck.mandatoryValue)
                            sErrorTxt += strfmt("@RET4273",dictField.name(),tRBOMandatoryCheck.mandatoryValue )+ #CharNewLine;
                break;
                case RetailMandatoryCheckForBase::OneOf:
                    sCheckValue = "," + tTable.(tRBOMandatoryCheck.refFieldId) + ",";
                    sSource     = "," + tRBOMandatoryCheck.mandatoryValue + ",";
                    if ( StrScan(sSource,sCheckValue,0,strLen(sSource) ) == 0)
                            sErrorTxt += strfmt("@RET4274",dictField.name(),tRBOMandatoryCheck.mandatoryValue)+ #CharNewLine;
                break;
            }
        }
        return sErrorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record from <c>RetailMandatoryCheckErrorLines</c> table for the given RetailMandatoryCheckErrorLines.refTableId and RetailMandatoryCheckErrorLines.refFieldId fields.
    /// </summary>
    /// <param name="_iRefTableId">
    /// ID of the RetailMandatoryCheckErrorLines.refTableId field.
    /// </param>
    /// <param name="_iRefFieldId">
    /// ID of the RetailMandatoryCheckErrorLines.refFieldId field.
    /// </param>
    static void deleteError(TableId _iRefTableId, FieldId _iRefFieldId)
    {
        RetailMandatoryCheckErrorLines     tErrorLine;

        ttsbegin;

        delete_from tErrorLine
            where tErrorLine.refTableId ==  _iRefTableId
               && tErrorLine.refFieldId ==  _iRefFieldId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks for the record in <c>RetailMandatoryCheckErrorLines</c> table. If the record does not exist then new record is created; else updates the value
    /// in RetailMandatoryCheckErrorLines.Txt field.
    /// </summary>
    /// <param name="_iRefTableId">
    /// ID of the RetailMandatoryCheckErrorLines.refTableId field.
    /// </param>
    /// <param name="_iRefFieldId">
    /// ID of the RetailMandatoryCheckErrorLines.refFieldId field.
    /// </param>
    /// <param name="_sErrorTxt">
    /// Error text for the RetailMandatoryCheckErrorLines.Txt field.
    /// </param>
    static void insertOrUpdateError(TableId _iRefTableId, FieldId _iRefFieldId, str _sErrorTxt)
    {
        RetailMandatoryCheckErrorLines     tErrorLine;

        ttsbegin;

        tErrorLine = RetailMandatoryCheckErrorLines::find(_iRefTableId,  _iRefFieldId, true);

        if (!tErrorLine)
        {
            tErrorLine.refTableId   =   _iRefTableId;
            tErrorLine.refFieldId   =   _iRefFieldId;
            tErrorLine.Txt           =   _sErrorTxt;
            tErrorLine.insert();
        }
        else
        {
            tErrorLine.Txt           =   _sErrorTxt;
            tErrorLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method is used to create the new instance of <c>RetailMandatoryCheckManagement</c> class and performs the validation of mandatory fields.
    /// </summary>
    /// <param name="oArgs">
    /// Args class to pass the arguments.
    /// </param>
    /// <remarks>
    /// RetailMandatoryCheckManagement.initFromArgs method is used to initialize the <c>common</c> object with args.record; else throws error.
    /// RetailMandatoryCheckManagement.queryBuild method is used to create the query and the range.
    /// RetailMandatoryCheckManagement.run method checks for the mandatory fields, validates the values in the fields and returns error text messages if not proper.
    /// </remarks>
    static void main(Args oArgs)
    {
        RetailMandatoryCheckManagement            oRBOMandatoryCheckManagement = new RetailMandatoryCheckManagement();

        oRBOMandatoryCheckManagement.initFromArgs(oArgs);

        oRBOMandatoryCheckManagement.queryBuild();

        oRBOMandatoryCheckManagement.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>