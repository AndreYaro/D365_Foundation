<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTillLayoutUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailTillLayoutUpgrade</c> is a utility used in the postSyncUpgradeTillLayouts method
/// of the <c>ReleaseUpdateDB71_Retail</c> class.
/// </summary>
public class RetailTillLayoutUpgrade
{
    private const str emptyLayout = '';
    private const str migratedLayoutPrefix = 'Full';
    private const str migratedLayoutSeparator = 'x';
    private const str storeGroupFormat = 'StoreGrp\%1';
    private const str staffGroupFormat = 'StaffGrp\%1';
    private const int LegacyModernPOSWindowsPhone = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>UpgradeTillLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrates RetailTillLayout records to the new schmea for the AX7 Update 3 release.
    /// The existing till layouts will be preserved, with any layout data bing copied to a more
    /// normalized schmea for use with the latest data entities (used by retail designer) and POS clients.
    /// </summary>
    public static void UpgradeTillLayout()
    {
        RetailTillLayoutUpgrade::UpdateDeviceTypes();
        RetailTillLayoutUpgrade::UpdateLayouts();
        RetailTillLayoutUpgrade::UpgradeStoreLayoutReferences();
        RetailTillLayoutUpgrade::UpgradeStaffLayoutReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateLayoutZones</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the new field layout type on zone table and remove dead data from zone that does not 
    /// have an existing related device type.
    /// </summary>
    /// <remarks>This method should be executed in minor upgrade 7.1 to 7.2.</remarks>This></remarks>
    public static void UpdateLayoutZones()
    {
        RetailTillLayoutZone            retailTillLayoutZone;
        RetailTillLayoutZoneReference   retailTillLayoutZoneReference;
        RetailDeviceTypes               retailDeviceType, androidDeviceType, iosDeviceType;

        ttsbegin;

        retailDeviceType = RetailDeviceTypes::find(RetailDeviceTypeBase::EnterprisePOS);

        if (retailDeviceType.RecId)
        {
            update_recordset retailTillLayoutZone
                setting LayoutType = RetailLayoutType::EPOS
                where retailTillLayoutZone.DeviceType == retailDeviceType.RecId;
        }

        retailDeviceType = RetailDeviceTypes::find(RetailDeviceTypeBase::ModernPOS);

        if (retailDeviceType.RecId)
        {
            update_recordset retailTillLayoutZone
                setting LayoutType = RetailLayoutType::MPOSFull
                where retailTillLayoutZone.DeviceType == retailDeviceType.RecId;
        }

        retailDeviceType = RetailDeviceTypes::find(RetailDeviceTypeBase::CloudPOS);

        // When we have the same zones for ModernPOS and CloudPOS (old records based on DeviceType),
        // we need to move the references of CloudPOS records to the ModernPOS ones,
        // once they have the same LayoutType (column that should replace DeviceType)
        if (retailDeviceType.RecId)
        {
            while select forupdate retailTillLayoutZone
                where retailTillLayoutZone.DeviceType == retailDeviceType.RecId
            {
                RetailTillLayoutZone mPosFullLayoutZone;

                select RecId from mPosFullLayoutZone
                    where   mPosFullLayoutZone.ZoneId == retailTillLayoutZone.ZoneId
                        &&  mPosFullLayoutZone.ZoneType == retailTillLayoutZone.ZoneType
                        &&  mPosFullLayoutZone.LayoutType == RetailLayoutType::MPOSFull;

                if (mPosFullLayoutZone)
                {
                    // Updating old refereces of Cloud POS zone to the new MPOS Full zones
                    update_recordset retailTillLayoutZoneReference
                        setting Zone = mPosFullLayoutZone.RecId
                        where retailTillLayoutZoneReference.Zone == retailTillLayoutZone.RecId;

                    retailTillLayoutZone.delete();
                }
                else
                {
                    retailTillLayoutZone.LayoutType = RetailLayoutType::MPOSFull;
                    retailTillLayoutZone.update();
                }
            }
        }

        retailDeviceType = RetailDeviceTypes::find(RetailDeviceTypeBase::ModernPOSWindowsPhone);

        if (retailDeviceType.RecId)
        {
            update_recordset retailTillLayoutZone
                setting LayoutType = RetailLayoutType::MPOSCompact
                where retailTillLayoutZone.DeviceType == retailDeviceType.RecId;
        }

        androidDeviceType = RetailDeviceTypes::find(RetailDeviceTypeBase::ModernPOSAndroid);
        iosDeviceType = RetailDeviceTypes::find(RetailDeviceTypeBase::ModernPOSiOS);

        // When we have the same zone id/type for ModernPOSWindowsPhone, ModernPOSAndroid or ModernPOSiOS 
        // (old records based on DeviceType), we need to move the references of ModernPOSAndroid and 
        // ModernPOSiOSrecords to the ModernPOSWindowsPhone ones, once they have the same LayoutType 
        // (column that should replace DeviceType)
        if (androidDeviceType.RecId || iosDeviceType.RecId)
        {
            while select forupdate retailTillLayoutZone
                where   retailTillLayoutZone.DeviceType == androidDeviceType.RecId
                    ||  retailTillLayoutZone.DeviceType == iosDeviceType.RecId
            {
                RetailTillLayoutZone mPosCompactLayoutZone;

                select RecId from mPosCompactLayoutZone
                    where   mPosCompactLayoutZone.ZoneId == retailTillLayoutZone.ZoneId
                        &&  mPosCompactLayoutZone.ZoneType == retailTillLayoutZone.ZoneType
                        &&  mPosCompactLayoutZone.LayoutType == RetailLayoutType::MPOSCompact;

                if (mPosCompactLayoutZone)
                {
                    update_recordset retailTillLayoutZoneReference
                        setting Zone = mPosCompactLayoutZone.RecId
                        where retailTillLayoutZoneReference.Zone == retailTillLayoutZone.RecId;

                    retailTillLayoutZone.delete();
                }
                else
                {
                    retailTillLayoutZone.LayoutType = RetailLayoutType::MPOSCompact;
                    retailTillLayoutZone.update();
                }
            }
        }

        // Zones that does not have device types
        RetailTillLayoutSize    retailTillLayoutSize;
        RetailTillLayoutZone    existingRetailTillLayoutZone;

		// When a layout zone record does not have a valid device type reference, 
		// we try to populate the LayoutType field based on the relation with RetailTillLayoutSize table
		// that also contains the LayoutType.
        while select forupdate retailTillLayoutZoneReference
            join retailTillLayoutZone
                where   retailTillLayoutZone.RecId      == retailTillLayoutZoneReference.Zone
                    &&  retailTillLayoutZone.LayoutType == 0
            join LayoutType from retailTillLayoutSize
                where retailTillLayoutSize.LayoutSizeId == retailTillLayoutZoneReference.LayoutSizeId
        {
			// Check if there is an existing record with same ZoneId, ZoneType and LayoutType
			// In this case, we are working on a duplicated record whose reference must be updated and it must be deleted.
			// Otherwise, we just need to update the LayoutType value.
            select RecId from existingRetailTillLayoutZone
                where   existingRetailTillLayoutZone.ZoneId == retailTillLayoutZone.ZoneId
                    &&  existingRetailTillLayoutZone.ZoneType == retailTillLayoutZone.ZoneType
                    &&  existingRetailTillLayoutZone.LayoutType == retailTillLayoutSize.LayoutType;

            if (existingRetailTillLayoutZone)
            {
                retailTillLayoutZoneReference.Zone = existingRetailTillLayoutZone.RecId;
                retailTillLayoutZoneReference.update();
            }
            else
            {
                retailTillLayoutZone.selectForUpdate(true);
                retailTillLayoutZone.LayoutType = retailTillLayoutSize.LayoutType;
                retailTillLayoutZone.update();
            }
        }

        delete_from retailTillLayoutZone
            where retailTillLayoutZone.LayoutType == 0;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateDeviceTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the device types description, type and designer form that have changed.
    /// </summary>
    private static void UpdateDeviceTypes()
    {
        RetailDeviceTypes retailDeviceType;
        
        ttsbegin;

        // EPOS
        select firstonly forupdate retailDeviceType
            where retailDeviceType.DesignerForm == RetailDesignerFormEnum::RetailTillLayoutDesigner;

        if (retailDeviceType.RecId)
        {
            retailDeviceType.Type           = RetailDeviceTypeBase::EnterprisePOS;
            retailDeviceType.Description    = enum2Str(RetailDeviceTypeBase::EnterprisePOS);
            retailDeviceType.update();
        }

        // MPOS
        select firstonly forupdate retailDeviceType
            where retailDeviceType.DesignerForm == RetailDesignerFormEnum::RetailTillLayoutDesignerModern;

        if (retailDeviceType.RecId)
        {
            retailDeviceType.Type           = RetailDeviceTypeBase::ModernPOS;
            retailDeviceType.Description    = enum2Str(RetailDeviceTypeBase::ModernPOS);
            retailDeviceType.update();
        }

        // MPOS Windows Phone
        select firstonly forupdate retailDeviceType
            where   retailDeviceType.DesignerForm   == RetailDesignerFormEnum::None
                &&  retailDeviceType.Type           == LegacyModernPOSWindowsPhone;

        if (retailDeviceType.RecId)
        {
            retailDeviceType.Type           = RetailDeviceTypeBase::ModernPOSWindowsPhone;
            retailDeviceType.Description    = enum2Str(RetailDeviceTypeBase::ModernPOSWindowsPhone);
            retailDeviceType.DesignerForm   = RetailDesignerFormEnum::RetailTillLayoutDesignerModern;
            retailDeviceType.update();
        }
       
        // Non Windows (old device type that should not exist)
        delete_from retailDeviceType
            where retailDeviceType.DesignerForm == RetailDesignerFormEnum::None;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DetermineUpgradeLayoutType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the LayoutType.  For upgrade always default to MPOSFull unless the Device Type previously mapped to a RetailDesignerFormEnum::RetailTillLayoutDesigner (EPOS).
    /// </summary>
    /// <param name = "retailTillLayout">the retailTillLayout row.</param>
    /// <returns>The <c>RetailLayoutType</c> to be mapped for this entry.</returns>
    private static RetailLayoutType DetermineUpgradeLayoutType(RetailTillLayout retailTillLayout)
    {
        RetailLayoutType result = RetailLayoutType::MPOSFull; // Default to MPOSFull
        RetailDeviceTypes retailDeviceType;

        select firstonly retailDeviceType where retailTillLayout.DeviceType == retailDeviceType.RecId;

        // For upgrade always return MPOSFull unless the retailTillLayout maps to record where the "type" previously had a "DesignerForm" of "1"
        if (retailDeviceType.DesignerForm == RetailDesignerFormEnum::RetailTillLayoutDesigner)
        {
            result = RetailLayoutType::EPOS;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrdes RetailTillLayout records to fit the new schema. Each RetailTillLayout record gets a new SizeID
    /// specifiying the size the record corresponds to, and its configurations are migrated to a new
    /// retailTillLayoutConfiguration record, should one not exist.
    /// All records pointing to an existing RetailTillLayout will have sizeId added, so those references will continue
    /// uniquely identifying a given layout.
    /// </summary>
    private static void UpdateLayouts()
    {
        RetailTillLayout retailTillLayout;
        RetailTillLayoutConfiguration retailTillLayoutConfiguration;
        RetailLayoutType layoutType;

        ttsbegin;

        while select retailTillLayout
        {
            // Assuming 1 config per layout, as the pre-AppFall schema enforces this.
            select firstOnly retailTillLayoutConfiguration
                where retailTillLayoutConfiguration.LayoutId == retailTillLayout.layoutId;

            layoutType = RetailTillLayoutUpgrade::DetermineUpgradeLayoutType(retailTillLayout);

            if (retailTillLayoutConfiguration.RecId == 0)
            {
                // Create a sizeID for this layout, so uniquely identify the layout in the new schema
                // (the new schema uses a LayoutId, SizeId composite key).
                RetailLayoutSizeId sizeId = RetailTillLayoutUpgrade::SelectInsertSize(retailTillLayout.width, retailTillLayout.height, layoutType);

                RetailTillLayoutUpgrade::AddSizeIdToLegacyLayoutReferences(retailTillLayout.layoutId, sizeId);

                // Create a configuration record, and apply all the necessary values, as one doesn't exist for this layout yet
                retailTillLayoutConfiguration.LayoutId = retailTillLayout.layoutId;
                retailTillLayoutConfiguration.SizeId = sizeId;
                RetailTillLayoutUpgrade::CopyConfiguration(retailTillLayout, retailTillLayoutConfiguration);

                // Insert the now initialized configuration record
                retailTillLayoutConfiguration.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SelectInsertSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a width and size, create a unique identifier to specify this data.
    /// </summary>
    /// <param name = "width">The width component of the size to be identified.</param>
    /// <param name = "height">The height component of the size to be identified.</param>
    /// <param name = "layoutType">The layout type.</param>
    /// <returns>The <c>RetailSizeId</c>.</returns>
    private static RetailSizeId SelectInsertSize(RetailWidth width, RetailHeight height, RetailLayoutType layoutType)
    {
        RetailTillLayoutSize retailTillLayoutSize;

        select firstonly retailTillLayoutSize
            where retailTillLayoutSize.Width == width &&
            retailTillLayoutSize.Height == height &&
            retailTillLayoutSize.LayoutType == layoutType &&
            retailTillLayoutSize.LayoutSizeId != emptyLayout;

        ttsbegin;

        if (retailTillLayoutSize.RecId == 0)
        {
            retailTillLayoutSize.Width = width;
            retailTillLayoutSize.Height = height;
            retailTillLayoutSize.LayoutSizeId = migratedLayoutPrefix + int642Str(width) + migratedLayoutSeparator + int642Str(height) + migratedLayoutSeparator + int2Str(enum2int(layoutType));
            retailTillLayoutSize.LayoutType = layoutType;
            retailTillLayoutSize.insert();
        }

        ttscommit;

        return retailTillLayoutSize.LayoutSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddSizeIdToLegacyLayoutReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Layouts used to be uniquely identified by layout ID alone, but now a Size ID is necessary, as well.
    /// This utility function allows one to add a sizeId to any existing references to the specified layoutID, wherever
    /// a sizeId is not already be configured.
    /// </summary>
    /// <param name = "layoutId">A layout record, which will point to actual layout configuration values.</param>
    /// <param name = "sizeId">The SizeId of the screen size where this layout is to be applied.</param>
    private static void AddSizeIdToLegacyLayoutReferences(RetailLayoutId layoutId, RetailLayoutSizeId sizeId)
    {
        RetailTillLayoutZoneReference retailTillLayoutZoneReference;

        while select forupdate retailTillLayoutZoneReference
            where retailTillLayoutZoneReference.LayoutId == layoutId &&
                retailTillLayoutZoneReference.LayoutSizeId == emptyLayout
        {
            retailTillLayoutZoneReference.LayoutSizeId = sizeId;
            retailTillLayoutZoneReference.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Migrate a <c>RetailTillLayout</c> record to a <c>RetailTillLayoutConfiguration</c> record.
    /// </summary>
    /// <param name = "retailTillLayout">The existing configuration to migrate to the new schema.</param>
    /// <param name = "retailTillLayoutConfiguration">The target till layout configuration record to contain the legacy till layout data.</param>
    private static void CopyConfiguration(RetailTillLayout retailTillLayout, RetailTillLayoutConfiguration retailTillLayoutConfiguration)
    {
        retailTillLayoutConfiguration.LayoutLandscape = retailTillLayout.layoutXML;
        retailTillLayoutConfiguration.LayoutPortrait = retailTillLayout.layoutXMLPortrait;
        retailTillLayoutConfiguration.CashChangerLayout = retailTillLayout.CashChangerLayoutXML;
        retailTillLayoutConfiguration.customerLayoutId = retailTillLayout.customerLayoutId;
        retailTillLayoutConfiguration.CustomerLayout = retailTillLayout.CustomerLayoutXML;
        retailTillLayoutConfiguration.IMG_CashChangerLayout = retailTillLayout.IMG_CashChangerLayoutXML;
        retailTillLayoutConfiguration.receiptId = retailTillLayout.receiptId;
        retailTillLayoutConfiguration.ReceiptItemsLayout = retailTillLayout.ReceiptItemsLayoutXML;
        retailTillLayoutConfiguration.ReceiptPaymentLayout = retailTillLayout.ReceiptPaymentLayoutXML;
        retailTillLayoutConfiguration.totalId = retailTillLayout.totalId;
        retailTillLayoutConfiguration.TotalsLayout = retailTillLayout.TotalsLayoutXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpgradeStoreLayoutReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrades references made between stores and till layouts to work in the new schema.
    /// </summary>
    private static void UpgradeStoreLayoutReferences()
    {
        ttsbegin;

        System.Collections.SortedList storeLayoutGroups = RetailTillLayoutUpgrade::UpgradeSingleLayoutStoresAndReturnDiscoveredLayoutGroups();

        if (storeLayoutGroups.Count > 0)
        {
            int groupCounter = 0;
            System.Collections.SortedList layoutGroups = new System.Collections.SortedList();

            for (int i = 0; i < storeLayoutGroups.Count; i++)
            {
                RecId storeRecId = storeLayoutGroups.GetKey(i);
                System.Collections.ArrayList layouts = storeLayoutGroups.GetByIndex(i);

                // Construct group identifier layoutId1 + layoutId2 + ...layoutIdN
                str layoutsGroupKey = System.String::Join("", layouts.ToArray());
                System.Collections.SortedList uniqueBySizeLayouts = RetailTillLayoutUpgrade::GetUniqueLayouts(layouts);

                str groupLayoutId;

                if (layoutGroups.ContainsKey(layoutsGroupKey))
                {
                    groupLayoutId = layoutGroups.GetByIndex(layoutGroups.IndexOfKey(layoutsGroupKey));
                }
                else
                {
                    // if only 1 unique by size layout left then do not create groups.
                    if (uniqueBySizeLayouts.Count == 1)
                    {
                        groupLayoutId = uniqueBySizeLayouts.GetByIndex(0);
                        layoutGroups.Add(layoutsGroupKey, groupLayoutId);
                    }
                    else if (uniqueBySizeLayouts.Count > 1)
                    {
                        groupCounter = groupCounter + 1;
                        groupLayoutId = strFmt(storeGroupFormat, groupCounter);
                        layoutGroups.Add(layoutsGroupKey, groupLayoutId);

                        RetailTillLayoutUpgrade::CreateGroupLayout(uniqueBySizeLayouts, groupLayoutId);
                    }
                }

                RetailTillLayoutUpgrade::UpdateStore(storeRecId, groupLayoutId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpgradeSingleLayoutStoresAndReturnDiscoveredLayoutGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrades stores that have a single layout associated with them to the new schema. Those stores with
    /// more than a single layout will not be upgraded. A sorted list of those not upgraded stores and their
    /// associated layouts is returned.
    /// </summary>
    /// <returns>A sorted list of storeIds pointing to an array of layoutIds which were determined to be
    /// associated with a given store.</returns>
    private static System.Collections.SortedList UpgradeSingleLayoutStoresAndReturnDiscoveredLayoutGroups()
    {
        RetailTillLayoutStore retailTillLayoutStoreCount;

        System.Collections.SortedList storeLayoutGroups = new System.Collections.SortedList();

        ttsbegin;

        while select count(RecId) from retailTillLayoutStoreCount
            group by retailTillLayoutStoreCount.Store
        {
            if (retailTillLayoutStoreCount.RecId == 1)
            {
                // Single layout stores point directly to a <c>RetailTillLayoutStore</c> record.
                RetailTillLayoutStore retailTillLayoutStore;
                select retailTillLayoutStore where retailTillLayoutStore.Store == retailTillLayoutStoreCount.Store;
                if (retailTillLayoutStore.LayoutId != emptyLayout)
                {
                    RetailTillLayoutUpgrade::updateStore(retailTillLayoutStore.Store, retailTillLayoutStore.LayoutId);
                }
            }
            else
            {
                // Stores pointing to multiple layouts will need to point to a layout group to be later constructed.
                RetailTillLayoutStore retailTillLayoutStore;
                System.Collections.ArrayList layouts = new System.Collections.ArrayList();
                while select retailTillLayoutStore
                    where retailTillLayoutStore.Store == retailTillLayoutStoreCount.Store &&
                        retailTillLayoutStore.LayoutId != emptyLayout
                {
                    layouts.Add(retailTillLayoutStore.LayoutId);
                }

                layouts.Sort();
                if (layouts.Count > 0)
                {
                    storeLayoutGroups.Add(retailTillLayoutStoreCount.Store, layouts);
                }
            }
        }

        ttscommit;

        return storeLayoutGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Point the specified store to the specified store layout record or till layout record
    /// (this generically points ot all sizes of a given layout).
    /// </summary>
    /// <param name = "storeRecId">The RetailStoreTable recid pointing to the store to update.</param>
    /// <param name = "layoutId">A <c>RetailTillLayoutStore</c> or <c>RetailTillLayout</c> record to point to</param>
    private static void UpdateStore(RecId storeRecId, RetailLayoutId layoutId)
    {
        RetailStoreTable retailStoreTable;

        ttsbegin;

        select firstonly forupdate retailStoreTable
            where retailStoreTable.RecId == storeRecId;

        if (retailStoreTable.RecId > 0)
        {
            retailStoreTable.layoutId = layoutId;
            retailStoreTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpgradeStaffLayoutReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrades references made between staff records and till layouts to work in the new schema.
    /// </summary>
    private static void UpgradeStaffLayoutReferences()
    {
        ttsbegin;

        System.Collections.SortedList staffLayoutGroups = RetailTillLayoutUpgrade::UpgradeSingleLayoutStaffAndReturnDiscoveredLayoutGroups();
        if (staffLayoutGroups.Count > 0)
        {
            System.Collections.SortedList layoutGroups = new System.Collections.SortedList();
            int groupCounter = 0;

            for (int i = 0; i < staffLayoutGroups.Count; i++)
            {
                RecId staffRecId = staffLayoutGroups.GetKey(i);
                System.Collections.ArrayList layouts = staffLayoutGroups.GetByIndex(i);
                // Construct group identifier layoutId1 + layoutId2 + layoutIdN
                str layoutsGroupKey = System.String::Join("", layouts.ToArray());
                System.Collections.SortedList uniqueBySizeLayouts = RetailTillLayoutUpgrade::GetUniqueLayouts(layouts);

                str groupLayoutId;

                if (layoutGroups.ContainsKey(layoutsGroupKey))
                {
                    groupLayoutId = layoutGroups.GetByIndex(layoutGroups.IndexOfKey(layoutsGroupKey));
                }
                else
                {
                    // if only 1 unique by size layout left then do not create groups.
                    if (uniqueBySizeLayouts.Count == 1)
                    {
                        groupLayoutId = uniqueBySizeLayouts.GetByIndex(0);
                        layoutGroups.Add(layoutsGroupKey, groupLayoutId);
                    }
                    else if (uniqueBySizeLayouts.Count > 1)
                    {
                        groupCounter = groupCounter + 1;
                        groupLayoutId = strFmt(staffGroupFormat, groupCounter);
                        layoutGroups.Add(layoutsGroupKey, groupLayoutId);

                        RetailTillLayoutUpgrade::CreateGroupLayout(uniqueBySizeLayouts, groupLayoutId);
                    }
                }

                RetailTillLayoutUpgrade::UpdateStaff(staffRecId, groupLayoutId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpgradeSingleLayoutStaffAndReturnDiscoveredLayoutGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Upgrades employees that have a single layout associated with them to the new schema. Those employees with
    /// more than a single layout will not be upgraded. A sorted list of those not upgraded employees and their
    /// associated layouts is returned.
    /// </summary>
    /// <returns>A sorted list of staffIds pointing to an array of layoutIds which were determined to be
    /// associated with a given store.</returns>
    private static System.Collections.SortedList UpgradeSingleLayoutStaffAndReturnDiscoveredLayoutGroups()
    {
        RetailTillLayoutStaff retailTillLayoutStaffCount;
        System.Collections.SortedList staffLayoutGroups = new System.Collections.SortedList();

        while select count(RecId) from retailTillLayoutStaffCount
            group by retailTillLayoutStaffCount.Staff
        {
            // Handle single layout stores
            if (retailTillLayoutStaffCount.RecId == 1)
            {
                // Single layout stores point directly to a <c>RetailTillLayoutStore</c> record.
                RetailTillLayoutStaff retailTillLayoutStaff;
                select retailTillLayoutStaff where retailTillLayoutStaff.Staff == retailTillLayoutStaffCount.staff;
                if (retailTillLayoutStaff.LayoutId != emptyLayout)
                {
                    RetailTillLayoutUpgrade::UpdateStaff(retailTillLayoutStaff.Staff, retailTillLayoutStaff.LayoutId);
                }
            }
            else
            {
                // Contruct groups if more than 1 layout
                System.Collections.ArrayList layouts = new System.Collections.ArrayList();
                RetailTillLayoutStaff retailTillLayoutStaff;
                while select retailTillLayoutStaff
                    where retailTillLayoutStaff.Staff == retailTillLayoutStaffCount.Staff &&
                        retailTillLayoutStaff.LayoutId != emptyLayout
                {
                    layouts.Add(retailTillLayoutStaff.LayoutId);
                }

                layouts.Sort();
                if (layouts.Count > 0)
                {
                    staffLayoutGroups.Add(retailTillLayoutStaffCount.Staff, layouts);
                }
            }
        }

        return staffLayoutGroups;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateStaff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Point the specified <c>RetailStaffTable</c> record to the specified layout.
    /// </summary>
    /// <param name = "storeRecId">The <c>RetailStaffTable</c> RecId to update.</param>
    /// <param name = "layoutId">The <c>RetailTillLayoutStaff</c> or <c>RetailTillLayout</c> record the staff record should point to.</param>
    private static void UpdateStaff(RecId staffRecId, RetailLayoutId layoutId)
    {
        RetailStaffTable retailStaffTable;

        ttsbegin;

        select firstonly forupdate retailStaffTable
            where retailStaffTable.RecId == staffRecId;

        if (retailStaffTable.RecId > 0)
        {
            retailStaffTable.layoutId = layoutId;
            retailStaffTable.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetUniqueLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes an array of layoutIds and returns the provided values as a sorted list containing no duplicate sizes.
    /// Duplicates in this case are those layouts with a width and hieght value that matches any other record's.
    /// Also, layouts that transpose width and height are considered duplicate for out purposes, eg: 768 x 1024 == 1024 x 768.
    /// </summary>
    /// <param name = "layouts">The layouts to be sorted and parsed for duplicates.</param>
    /// <returns>A list of layouts, sorted by diagonal of screen size, containing no duplicates.</returns>
    private static System.Collections.SortedList GetUniqueLayouts(System.Collections.ArrayList layouts)
    {
        RetailTillLayout retailTillLayout;
        System.Collections.SortedList uniqueBySizeLayouts = new System.Collections.SortedList();

        var layoutsEnumerator = layouts.GetEnumerator();
        while (layoutsEnumerator.MoveNext())
        {
            select firstonly retailTillLayout
                where retailTillLayout.layoutId == layoutsEnumerator.Current;

            // A^2 + B^2 = C^2, so we can uniquely identify a given diagonal using height and width squared.
            // This is important, as we consider width and height interchangable when evaluating uniqueness of layout sizes.
            var diagonalSize = power(retailTillLayout.Height, 2) + power(retailTillLayout.Width, 2);

            // Constract <size, layoutId> dictionary.
            // Ignore same size layouts.
            if (!uniqueBySizeLayouts.ContainsKey(diagonalSize))
            {
                uniqueBySizeLayouts.Add(diagonalSize, layoutsEnumerator.Current);
            }
        }

        return uniqueBySizeLayouts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateGroupLayout</Name>
				<Source><![CDATA[
    private static void CreateGroupLayout(System.Collections.SortedList uniqueBySizeLayouts, RetailLayoutId groupLayoutId)
    {
        RetailTillLayout retailTillLayout;
        RetailDeviceTypes mposDeviceType;
        RetailLayoutType layoutType;

        select firstonly mposDeviceType
            where mposDeviceType.Type == RetailDeviceTypeBase::ModernPOS;

        select firstonly retailTillLayout
            where retailTillLayout.layoutId == groupLayoutId;

        if (retailTillLayout.RecId == 0)
        {
            retailTillLayout.layoutId = groupLayoutId;
            retailTillLayout.name = groupLayoutId;
            retailTillLayout.StartScreen = RetailStartScreen::Welcome;
            RetailTillLayout.DeviceType = mposDeviceType.RecId;
            retailTillLayout.insert();
        }

        System.Collections.IDictionaryEnumerator uniqueBySizeLayoutsEnumerator = uniqueBySizeLayouts.GetEnumerator();
        while (uniqueBySizeLayoutsEnumerator.MoveNext())
        {
            str layoutId = uniqueBySizeLayoutsEnumerator.Value;

            select firstonly retailTillLayout
                where retailTillLayout.layoutId == layoutId;

            if (retailTillLayout.RecId > 0)
            {
                layoutType = RetailTillLayoutUpgrade::DetermineUpgradeLayoutType(retailTillLayout);

                RetailLayoutSizeId sizeId = RetailTillLayoutUpgrade::SelectInsertSize(retailTillLayout.width, retailTillLayout.height, layoutType);

                RetailTillLayoutConfiguration retailTillLayoutConfiguration;

                select firstonly retailTillLayoutConfiguration
                    where retailTillLayoutConfiguration.LayoutId == groupLayoutId &&
                    retailTillLayoutConfiguration.SizeId == sizeId;

                if (retailTillLayoutConfiguration.RecId == 0)
                {
                    retailTillLayoutConfiguration.LayoutId = groupLayoutId;
                    retailTillLayoutConfiguration.SizeId = sizeId;
                    RetailTillLayoutUpgrade::CopyConfiguration(retailTillLayout, retailTillLayoutConfiguration);
                    retailTillLayoutConfiguration.insert();
                }

                RetailTillLayoutUpgrade::CopyZoneReferences(layoutId, sizeId, groupLayoutId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CopyZoneReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// If a record in the <c>RetailTillLayoutButtonGridZone</c> or <c>RetailTillLayoutImageZone</c> tables
    /// references the specified fromLayoutId, a record referencing toLayoutId is created, too.
    /// </summary>
    /// <param name = "fromLayoutId">The <c>RetailTillLayout</c> record who's references we'd like to copy.</param>
    /// <param name = "toSizeId">The <c>RetailTillLayoutSize</c> record to be referenced by the new zone copies.</param>
    /// <param name = "toLayoutId">The <c>RetailTillLayout</c> record to be referenced by the new zone copies.</param>
    private static void CopyZoneReferences(RetailLayoutId fromLayoutId, RetailLayoutSizeId toSizeId, RetailLayoutId toLayoutId)
    {
        RetailTillLayoutButtonGridZone fromButtonGrid;
        RetailTillLayoutButtonGridZone toButtonGrid;

        ttsbegin;

        while select fromButtonGrid
            where fromButtonGrid.LayoutId == fromLayoutId
        {
            RetailTillLayoutButtonGridZone buttonGridZoneExistsCheck;
            select firstonly buttonGridZoneExistsCheck
                where buttonGridZoneExistsCheck.LayoutId == toLayoutId
                && buttonGridZoneExistsCheck.LayoutSizeId == toSizeId
                && buttonGridZoneExistsCheck.Zone == fromButtonGrid.Zone;
            if (!buttonGridZoneExistsCheck)
            {
                toButtonGrid.clear();
                toButtonGrid.data(fromButtonGrid);
                toButtonGrid.LayoutId = toLayoutId;
                toButtonGrid.LayoutSizeId = toSizeId;
                toButtonGrid.insert();
            }
        }

        RetailTillLayoutImageZone fromImages;
        RetailTillLayoutImageZone toImages;

        while select fromImages
            where fromImages.LayoutId == fromLayoutId
        {
            RetailTillLayoutImageZone imageZoneExistsCheck;
            select firstonly imageZoneExistsCheck
                where imageZoneExistsCheck.LayoutId == toLayoutId
                && imageZoneExistsCheck.LayoutSizeId == toSizeId
                && imageZoneExistsCheck.Zone == fromImages.Zone;
            if (!imageZoneExistsCheck)
            {
                toImages.clear();
                toImages.data(fromImages);
                toImages.LayoutId = toLayoutId;
                toImages.LayoutSizeId = toSizeId;
                toImages.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>