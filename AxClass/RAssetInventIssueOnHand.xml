<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventIssueOnHand</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetInventIssueOnHand extends RunBaseBatch implements BatchRetryable
{
    QueryRun                        qrReport;

    DialogField                     dialogToDate;
    DialogField                     dialogRAssetStandardId;
    DialogField                     dialogRAssetSpecialClothsRigging;
    DialogField                     dialogHcmWorker;
    DialogField                     dialogDepartment;
    DialogField                     dialogTitle;
    DialogField                     dialogWorkTypeId;
    DialogField                     dialogItemGroupId;
    DialogField                     dialogQuotaTypesRecId;

    TransDate                       toDate;
    RAssetStandardId                rAssetStandardId;
    RAssetSpecialClothsRigging      rAssetSpecialClothsRigging;
    RAssetEmployee                  employeeId;
    HcmTitleRecId                   titleRecId;
    OMDepartmentRecId               departmentRecId;

    WorkTypeId_W                    workTypeId;
    ItemGroupId                     itemGroupId;
    RefRecId                        quotaTypesRecId;
    ItemId                          itemId;

    RAssetInventIssueTrans              parmRAssetInventIssueTrans;
    TmpRAssetInventIssueOnHand          tmpWrkClothesOnHand;
    TmpRAssetInventIssueOnHandByItem    tmpWrkClothesOnHandbyItem;

    #DEFINE.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        toDate,
        rAssetStandardId,
        rAssetSpecialClothsRigging,
        employeeId,
        departmentRecId,
        titleRecId,
        workTypeId,
        itemGroupId,
        quotaTypesRecId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTmpTable</Name>
				<Source><![CDATA[
    public void buildTmpTable()
    {
        #AviFiles

        RAssetTable                         rAssetTable;
        EmployeeTable_RU                    employeeTable;
        InventTable                         inventTable;
        RAssetInventIssueQuotas             rAssetInventIssueQuotas;
        RAssetScrap                         rAssetScrap;
        RAssetStandards                     rAssetStandards;
        OMDepartmentRecId                   departmentCur;
        HcmTitleRecId                       titleCur;

        this.modifyQuery();
        this.progressInit(this.caption(), SysQuery::countTotal(qrReport), #AviTransfer);

        while (qrReport.next())
        {
            rAssetTable      = qrReport.get(tableNum(RAssetTable));
            rAssetScrap      = qrReport.get(tableNum(RAssetScrap));
            inventTable      = qrReport.get(tableNum(InventTable));
            rAssetStandards  = qrReport.get(tableNum(RAssetStandards));

            if (! this.checkRassetTrans(rAssetStandards))
                continue;

            progress.setText(strFmt("@GLS104079", rAssetTable.AccountNum));

            employeeTable = EmployeeTable_RU::findByEmployeeId(rAssetTable.employee(toDate));

            rAssetInventIssueQuotas = RAssetInventIssueQuotas::findQuotas(employeeTable.EmployeeId,
                                                                          rAssetTable.QuotaTypesRecId,
                                                                          inventTable.itemGroupId(),
                                                                          rAssetScrap.ItemId);
            departmentCur = HcmWorkerHelper::getPrimaryDepartment(employeeTable.worker().RecId).RecId;

            titleCur      = HcmWorkerTitle::findByWorker(employeeTable.worker().RecId).Title;

            select firstonly tmpWrkClothesOnHand
                where tmpWrkClothesOnHand.Employee        == employeeTable.EmployeeId
                   && tmpWrkClothesOnHand.ItemGroupId     == inventTable.itemGroupId()
                   && tmpWrkClothesOnHand.omOperatingUnit == departmentCur
                   && tmpWrkClothesOnHand.HcmTitle        == titleCur
                   && tmpWrkClothesOnHand.QuotaTypesRecId == rAssetTable.QuotaTypesRecId
                   && tmpWrkClothesOnHand.ItemId          == rAssetScrap.ItemId;

            if (! tmpWrkClothesOnHand)
            {
                tmpWrkClothesOnHand.Employee           = employeeTable.EmployeeId;
                tmpWrkClothesOnHand.ItemGroupId        = inventTable.itemGroupId();
                tmpWrkClothesOnHand.omOperatingUnit    = departmentCur;
                tmpWrkClothesOnHand.HcmTitle           = titleCur;
                tmpWrkClothesOnHand.QuotaTypesRecId    = rAssetTable.QuotaTypesRecId;
                tmpWrkClothesOnHand.ItemId             = rAssetScrap.ItemId;
                tmpWrkClothesOnHand.insert();
            }

            tmpWrkClothesOnHand.QtyNorm     = rAssetInventIssueQuotas.Quota;
            tmpWrkClothesOnHand.QtyFact     += 1;
            tmpWrkClothesOnHand.QtyResult   = tmpWrkClothesOnHand.QtyNorm - tmpWrkClothesOnHand.QtyFact;
            tmpWrkClothesOnHand.update();

            tmpWrkClothesOnHandbyItem.clear();
            tmpWrkClothesOnHandbyItem.Employee           = tmpWrkClothesOnHand.Employee;
            tmpWrkClothesOnHandbyItem.ItemGroupId        = tmpWrkClothesOnHand.ItemGroupId;
            tmpWrkClothesOnHandbyItem.omOperatingUnit    = tmpWrkClothesOnHand.omOperatingUnit;
            tmpWrkClothesOnHandbyItem.QuotaTypesRecId    = tmpWrkClothesOnHand.QuotaTypesRecId;
            tmpWrkClothesOnHandbyItem.RefRecId           = tmpWrkClothesOnHand.RecId;
            tmpWrkClothesOnHandbyItem.rAssetId           = rAssetTable.AccountNum;
            tmpWrkClothesOnHandbyItem.UsagePeriod        = rAssetStandards.lifetime(toDate);
            tmpWrkClothesOnHandbyItem.ClothesDate        = rAssetScrap.TransDate;
            tmpWrkClothesOnHandbyItem.DisposalDate       = dateMthFwd(rAssetScrap.TransDate, rAssetInventIssueQuotas.UsagePeriod);
            tmpWrkClothesOnHandbyItem.ItemId             = rAssetScrap.ItemId;
            tmpWrkClothesOnHandbyItem.insert();

            progress.incCount(1);
        }

        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return parmRAssetInventIssueTrans ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@GLS113974";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRassetTrans</Name>
				<Source><![CDATA[
    private boolean checkRassetTrans(RAssetStandards   _rAssetStandards)
    {
        RAssetTrans         rAssetTransLend, rAssetTransLendRet;
        RAssetTransDate     acquisitionDate = RAssetTrans::transFirstDate(_rAssetStandards.AssetId, rAssetStandardId, false);
        EmployeeTable_RU    employee = EmployeeTable_RU::findByEmployeeId(RAssetTable::find(_rAssetStandards.AssetId).employee(toDate));
        boolean             ret = true;

        if (_rAssetStandards.DisposalDate && _rAssetStandards.DisposalDate <= toDate)
            return false;

        if (! acquisitionDate || acquisitionDate > toDate)
            return false;

        select count(RecId) from rAssetTransLend
            where rAssetTransLend.AssetTransType  == RAssetTransType::Lending &&
                  rAssetTransLend.AccountNum      == _rAssetStandards.AssetId &&
                  rAssetTransLend.TransDate       <= toDate                   &&
                  rAssetTransLend.AssetStandardId == rAssetStandardId         &&
                  ! rAssetTransLend.StornoRecId;

        select count(RecId) from rAssetTransLendRet
            where rAssetTransLendRet.AssetTransType  == RAssetTransType::Lending &&
                  rAssetTransLendRet.AccountNum      == _rAssetStandards.AssetId &&
                  rAssetTransLendRet.TransDate       <= toDate                   &&
                  rAssetTransLendRet.AssetStandardId == rAssetStandardId         &&
                  ! rAssetTransLendRet.StornoRecId;

        if (rAssetTransLend.RecId != rAssetTransLendRet.RecId)
            return false;

        if (parmRAssetInventIssueTrans)
        {
            if (employee.EmployeeId != parmRAssetInventIssueTrans.EmployeeTable_RU)
                return false;
        }
        else
        {
            if (employeeId && employee.EmployeeId != employeeId)
                return false;

            if (workTypeId && employee.WorkTypeId != workTypeId)
                return false;
        }

        if (titleRecId && HcmWorkerTitle::findByWorker(employee.worker().RecId).Title != titleRecId)
            return false;

        if (departmentRecId && HcmWorkerHelper::getPrimaryDepartment(employee.worker().RecId).RecId != departmentRecId)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog;
        ;

        dialog = super();

        dialog.addGroup("@SYS54716");
        dialogRAssetStandardId              = dialog.addFieldValue(extendedTypeStr(RAssetStandardId), rAssetStandardId);

        if (!parmRAssetInventIssueTrans)
        {
            dialogToDate                        = dialog.addFieldValue(extendedTypeStr(TransDate), toDate, "@SYS23896");
            dialogRAssetSpecialClothsRigging    = dialog.addFieldValue(enumStr(RAssetSpecialClothsRigging), rAssetSpecialClothsRigging);

            dialog.addGroup("@SYS79891");
            dialogHcmWorker                     = dialog.addFieldValue(extendedTypeStr(RAssetEmployee), employeeId);

            dialogDepartment                    = dialog.addFieldValue(extendedTypeStr(OMDepartmentRecId), departmentRecId);

            dialogTitle                         = dialog.addFieldValue(extendedTypeStr(HcmTitleRecId), titleRecId);
            dialogWorkTypeId                    = dialog.addFieldValue(extendedTypeStr(WorkTypeId_W), workTypeId);

            dialog.addGroup("@SYS14428");
            dialogItemGroupId                   = dialog.addFieldValue(extendedTypeStr(ItemGroupId), itemGroupId);
            dialogQuotaTypesRecId               = dialog.addFieldValue(extendedTypeStr(RAssetInventIssueQuotaTypesRecId), quotaTypesRecId);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    private void displayForm()
    {
        Args        args = new Args();
        FormRun     form;
        ;

        args.name(formStr(RAssetInventIssueOnHand));
        args.caller(this);

        form = classfactory.formRunClass(args);

        form.init();
        form.run();
        form.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean                     ret;
        RAssetInventIssueTable      rAssetInventIssueTable;

        ret = super();

        if (ret)
        {
            rAssetStandardId            = dialogRAssetStandardId.value();

            if (!parmRAssetInventIssueTrans)
            {
                toDate                      = dialogToDate.value();
                rAssetSpecialClothsRigging  = dialogRAssetSpecialClothsRigging.value();
                employeeId                  = dialogHcmWorker.value();

                departmentRecId             = dialogDepartment.value();

                titleRecId                  = dialogTitle.value();
                workTypeId                  = dialogWorkTypeId.value();
                itemGroupId                 = dialogItemGroupId.value();
                quotaTypesRecId             = dialogQuotaTypesRecId.value();
            }
            else
            {
                rAssetInventIssueTable      = parmRAssetInventIssueTrans.rAssetInventIssueTable();
                toDate                      = rAssetInventIssueTable.TransDate;
                itemId                      = parmRAssetInventIssueTrans.ItemId;
                quotaTypesRecId             = parmRAssetInventIssueTrans.QuotaTypesRecId;
                rAssetSpecialClothsRigging  = RAssetSpecialClothsRigging::All;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    protected void modifyQuery()
    {
        QueryBuildDataSource qbdsRAssetTable, qbdsRAssetStandards,
                             qbdsInventTable,
                             qbdsItemGroup, qbdsRAssetScrap;

        qbdsRAssetTable = this.queryRun().query().dataSourceTable(tableNum(RAssetTable));

        switch (rAssetSpecialClothsRigging)
        {
            case RAssetSpecialClothsRigging::Cloths :
                findOrCreateRange_W(qbdsRAssetTable, fieldNum(RAssetTable, AssetType), queryValue(RAssetType::Cloths));
                break;

            case RAssetSpecialClothsRigging::Rigging :
                findOrCreateRange_W(qbdsRAssetTable, fieldNum(RAssetTable, AssetType), queryValue(RAssetType::Rigging));
                break;

            case RAssetSpecialClothsRigging::All :
                findOrCreateRange_W(qbdsRAssetTable, fieldNum(RAssetTable, AssetType), queryRange(RAssetType::Cloths, RAssetType::Rigging));
                break;
        }

        if (quotaTypesRecId)
            qbdsRAssetTable.addRange(fieldNum(RAssetTable, QuotaTypesRecId)).value(queryValue(quotaTypesRecId));

        qbdsRAssetStandards = qbdsRAssetTable.addDataSource(tableNum(RAssetStandards));
        qbdsRAssetStandards.fetchMode(QueryFetchMode::One2One);
        qbdsRAssetStandards.relations(true);
        qbdsRAssetStandards.addRange(fieldNum(RAssetStandards, AssetStandardId)).value(queryValue(rAssetStandardId));

        qbdsRAssetScrap = qbdsRAssetTable.addDataSource(tableNum(RAssetScrap));
        qbdsRAssetScrap.joinMode(JoinMode::InnerJoin);
        qbdsRAssetScrap.fetchMode(QueryFetchMode::One2One);
        qbdsRAssetScrap.relations(true);
        qbdsRAssetScrap.addRange(fieldNum(RAssetScrap, Assembling)).value(queryValue(NoYes::Yes));

        qbdsInventTable = qbdsRAssetScrap.addDataSource(tableNum(InventTable));
        qbdsInventTable.joinMode(JoinMode::InnerJoin);
        qbdsInventTable.fetchMode(QueryFetchMode::One2One);
        qbdsInventTable.addLink(fieldNum(RAssetScrap, ItemId), fieldNum(InventTable, ItemId));

        if (itemGroupId)
        {
            qbdsItemGroup = qbdsInventTable.addDataSource(tableNum(InventItemGroupItem));
            qbdsItemGroup.joinMode(JoinMode::InnerJoin);
            qbdsItemGroup.fetchMode(QueryFetchMode::One2One);
            qbdsItemGroup.relations(true);

            qbdsItemGroup.addRange(fieldNum(InventItemGroupItem, ItemGroupId)).value(queryValue(itemGroupId));
        }

        if (itemId)
            qbdsInventTable.addRange(fieldNum(InventTable, ItemId)).value(queryValue(itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        qrReport = this.queryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container conQuery = this.queryRun().pack();
        return [#CurrentVersion, #CurrentList, conQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInputData</Name>
				<Source><![CDATA[
    public void parmInputData(container _con)
    {
        [toDate, rAssetStandardId, rAssetSpecialClothsRigging, employeeId, departmentRecId, titleRecId, workTypeId, itemGroupId, quotaTypesRecId] = _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetInventIssueTrans</Name>
				<Source><![CDATA[
    public RAssetInventIssueTrans parmRAssetInventIssueTrans(RAssetInventIssueTrans _rAssetInventIssueTrans = parmRAssetInventIssueTrans)
    {
        parmRAssetInventIssueTrans = _rAssetInventIssueTrans;
        return parmRAssetInventIssueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;

        query = new Query();
        qbds = query.addDataSource(tableNum(RAssetTable));
        qbds.addRange(fieldNum(RAssetTable, AssetGroup));
        qbr = qbds.addRange(fieldNum(RAssetTable, AssetType));
        qbr.status(RangeStatus::Locked);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (! qrReport)
        {
            qrReport = new SysQueryRun(this.query());
        }
        return qrReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        if (! this.validate())
            throw error("@SYS79625");

        try
        {
            this.buildTmpTable();
            this.displayForm();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return parmRAssetInventIssueTrans ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTable</Name>
				<Source><![CDATA[
    public TmpRAssetInventIssueOnHand tmpTable()
    {
        return tmpWrkClothesOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpWrkClothesOnHandbyItem</Name>
				<Source><![CDATA[
    public TmpRAssetInventIssueOnHandByItem tmpWrkClothesOnHandbyItem()
    {
        return tmpWrkClothesOnHandbyItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);
        container   packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    qrReport = new SysQueryRun(packedQuery);
                }
                break;

            default :
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (!toDate)
        {
            ret = checkFailed(strFmt("@SYS30652", fieldPName(RAssetInventIssueTable, TransDate)));
        }

        if (!rAssetStandardId)
        {
            ret = checkFailed(strFmt("@SYS30652", fieldPName(RAssetStandards, AssetStandardId)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RAssetInventIssueOnHand     workingClothesOnHand;

        workingClothesOnHand = new RAssetInventIssueOnHand();

        if (_args.dataset() == tableNum(RAssetInventIssueTrans))
            workingClothesOnHand.parmRAssetInventIssueTrans(_args.record());

        if (workingClothesOnHand.prompt())
        {
            workingClothesOnHand.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>