<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetAdjustmentPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetAdjustmentPost extends RunBaseBatch implements BatchRetryable
{
    QueryRun              queryRun;
    RAssetAdjustmentTable assetAdjustmentTable;
    Counter               progressCounter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable createJournalTable()
    {
        LedgerJournalTable ledgerJournalTable;

        ttsbegin;

        ledgerJournalTable.JournalName         = assetAdjustmentTable.JournalName;
        ledgerJournalTable.JournalType         = LedgerJournalType::Assets_RU;

        ledgerJournalTable.insert();

        assetAdjustmentTable.LedgerJournalNum = ledgerJournalTable.JournalNum;

        ttscommit;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    public void createJournalTrans(RAssetAdjustmentTrans _assetAdjustmentTrans,
                                   LedgerJournalTable    _ledgerJournalTable)
    {
        RAssetProposalAcquisitionAdj  rassetProposalAcq;
        RAssetProposalDepreciationAdj rassetProposalDep;
        RAssetTable               rAssetTable     = RAssetTable::find(_assetAdjustmentTrans.AccountNum);
        RAssetStandards           rAssetStandards = RAssetStandards::find(_assetAdjustmentTrans.AccountNum,
                                                                          _assetAdjustmentTrans.AssetStandardId);
        RAssetAmount              assetAmount;
        RAssetSumCalc             rassetSumCalcTrans;
        ;

        rassetProposalAcq = RAssetProposal::construct(RAssetTransType::AcquisitionAdj);
        rassetProposalAcq.initParameters(_ledgerJournalTable.JournalNum,
                                         assetAdjustmentTable.TransDate,
                                         rAssetStandards);

        rassetProposalDep = RAssetProposal::construct(RAssetTransType::DepreciationAdj);
        rassetProposalDep.initParameters(_ledgerJournalTable.JournalNum,
                                         assetAdjustmentTable.TransDate,
                                         rAssetStandards);

        rassetSumCalcTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                 _assetAdjustmentTrans.AssetStandardId,
                                                                 assetAdjustmentTable.PositionDate);

        assetAmount = rassetSumCalcTrans.acquisitionTotal();

        assetAmount = RAssetProposal::roundAmount(_assetAdjustmentTrans.AssetStandardId,
                                                  rAssetTable,
                                                  assetAdjustmentTable.TransDate,
                                                  assetAmount * _assetAdjustmentTrans.Factor - assetAmount,
                                                  rAssetStandards.CurrencyCode);

        if (assetAmount)
        {
            rassetProposalAcq.createJournalLines(_assetAdjustmentTrans.AssetStandardId, false, assetAmount);
        }

        rassetSumCalcTrans.parmDateTo(assetAdjustmentTable.TransDate);

        assetAmount = abs(rassetSumCalcTrans.depreciationTotal());

        assetAmount = RAssetProposal::roundAmount(_assetAdjustmentTrans.AssetStandardId,
                                                  rAssetTable,
                                                  assetAdjustmentTable.TransDate,
                                                  assetAmount * _assetAdjustmentTrans.Factor - assetAmount,
                                                  rAssetStandards.CurrencyCode);
        if (assetAmount)
        {
            rassetProposalDep.createJournalLines(_assetAdjustmentTrans.AssetStandardId, false, -assetAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@GLS116588");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RAssetId _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetAdjustmentTable _assetAdjustmentTable)
    {
        assetAdjustmentTable = _assetAdjustmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        if (! RAssetAdjustmentTrans::findRecRef(assetAdjustmentTable.RecId))
            return checkFailed("@SYS27671");

        if (LedgerJournalTable::find(assetAdjustmentTable.LedgerJournalNum))
            return checkFailed("@GLS116575");

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Query                   query           = new Query();
        QueryBuildDataSource    queryDataSource = query.addDataSource(tableNum(RAssetAdjustmentTrans));

        RAssetAdjustmentTrans   assetAdjustmentTrans;
        LedgerJournalTable      ledgerJournalTable;

        Counter                 progressTotal;
        #macrolib.AviFiles

        queryDataSource.addRange(fieldNum(RAssetAdjustmentTrans, AdjustmentTableRecId)).value(queryValue(assetAdjustmentTable.RecId));
        queryDataSource.addRange(fieldNum(RAssetAdjustmentTrans, Factor)).value(SysQuery::valueNot(1));

        queryRun = new QueryRun(query);
        progressTotal               = SysQuery::countTotal(queryRun);

        ttsbegin;
        assetAdjustmentTable.Posted = NoYes::Yes;

        if (! progressTotal)
        {
            assetAdjustmentTable.doUpdate();
            ttscommit;
            return;
        }

        ledgerJournalTable = this.createJournalTable();

        if (! ledgerJournalTable)
           throw Exception::Error;

        this.progressInit("@GLS116566", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        queryRun.query().dataSourceTable(tableNum(RAssetAdjustmentTrans)).update(true);

        while (queryRun.next())
        {
            assetAdjustmentTrans = queryRun.get(tableNum(RAssetAdjustmentTrans));
            this.displayProgress(assetAdjustmentTrans.AccountNum);
            this.createJournalTrans(assetAdjustmentTrans, ledgerJournalTable);
        }
        assetAdjustmentTable.doUpdate();
        ttscommit;
        if ((select firstonly RecId from ledgerJournalTrans
                 where ledgerJournalTrans.JournalNum == assetAdjustmentTable.LedgerJournalNum &&
                       ledgerJournalTrans.TransDate  == assetAdjustmentTable.TransDate).RecId)
            info("@GLS220510");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetAdjustmentPost assetAdjustmentPost = new RAssetAdjustmentPost();
        ;

        assetAdjustmentPost.initValue(_args.record());

        if (assetAdjustmentPost.prompt())
        {
            assetAdjustmentPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>