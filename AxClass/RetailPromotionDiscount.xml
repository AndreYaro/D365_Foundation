<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPromotionDiscount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RBOPromotionDiscount</c> class is used to implement the functionlity of adding items, deleting items and recalculating the items of a Discount offer.
/// </summary>
/// <remarks>
/// Gets best price for the item after applying store specific promotion and validates if the discount offer is setup for a particular store.
/// </remarks>
class RetailPromotionDiscount extends RunBaseBatch implements BatchRetryable
{
    RetailDiscountOffer            m_tDiscountOffer;
    RetailDiscountOfferTypeBase    m_eDiscountType;
    str                         m_sAction;

    DiscPct         m_rDiscPct;
    DialogField     m_oDlgFldDiscPct;

    QueryRun                    queryRun;
    DialogRunbase               dialogRunbase;

    #define.currentVersion(1)
    #LOCALMACRO.CurrentList
        m_rDiscPct
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds selected items to a discount offer.If no particular item is selected, all the Items are taken by default.
    /// </summary>
    /// <remarks>
    /// Based on the item selected on the prompt and the percentage of the discount specified, the lines are added to a discount offer.
    /// </remarks>
    void addItems()
    {
        RetailDiscountLineOffer tDiscountOfferLine;

        RetailInventTable       tRBOInventTable;
        InventTable             tInventTable;
        Counter                 iCount;
        LineNum                 iLineNum;
        RetailGroupMemberLine   retailGroupMemberLine;

        #Macrolib.AviFiles

        if (!this.prompt())
            return;

        QueryRun.reset();

        this.progressInit(strFmt("@RET4694",m_eDiscountType), sysquery::countTotal(QueryRun) , #AviFileCopy);

        select MaxOf(LineNum) from tDiscountOfferLine where tDiscountOfferLine.offerId == m_tDiscountOffer.offerId;
        iLineNum = tDiscountOfferLine.lineNum;

        ttsbegin;

        while (QueryRun.Next())
        {
            tRBOInventTable = QueryRun.get(tablenum(RetailInventTable));
            tInventTable    = InventTable::find(tRBOInventTable.itemid);

            progress.setText(strFmt("%1 - %2", tRBOInventTable.itemid, tInventTable.itemName() ));
            progress.incCount();

            // create a record in RetailGroupMemberLine.
            tDiscountOfferLine.initValue();
            retailGroupMemberLine       = tDiscountOfferLine.groupMemberLine(true);

            tDiscountOfferLine.offerId      = m_tDiscountOffer.offerId;
            retailGroupMemberLine.Product   = tInventTable.Product;
            tDiscountOfferLine.Description  = tInventTable.itemName();
            tDiscountOfferLine.status       = RetailDisabledEnabled::Enabled;
            tDiscountOfferLine.discPct      = m_rDiscPct;

            iLineNum++;
            tDiscountOfferLine.lineNum = any2int(iLineNum);

            if (tDiscountOfferLine.validateWrite())
            {
                tDiscountOfferLine.insert();
                retailGroupMemberLine.update(); // update RetailGroupMemberLine with the Product.
                iCount++;
            }
            progress.setCount(iCount);
        }
        ttscommit;

        this.progressKill();

        if (iCount <= 0)
            info(strfmt("@RET4695", m_eDiscountType, m_tDiscountOffer.offerId));
        else
            info(strfmt("@RET4693", iCount, m_eDiscountType ,m_tDiscountOffer.offerId));

        FormDataUtil::getFormDataSource(m_tDiscountOffer).research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteitems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all items from an discount offer.
    /// </summary>
    void deleteitems()
    {
        RetailDiscountLineOffer tDiscountOfferLine;

        if ( box::yesNo("@RET4697", DialogButton::Yes, "@RET4696") == DialogButton::Yes)
        {
            ttsbegin;
            delete_from tDiscountOfferLine
                where tDiscountOfferLine.offerId == m_tDiscountOffer.offerId;

            ttscommit;
        }

        FormDataUtil::getFormDataSource(m_tDiscountOffer).research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {   ;
        dialogRunbase = super();

        dialogRunbase.caption( strfmt("@RET4698", m_eDiscountType ));

        m_oDlgFldDiscPct = dialogRunbase.addField(extendedtypestr(DiscPct), "@RET4699");
        m_oDlgFldDiscPct.value(m_rDiscPct);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user input values from the dialog.
    /// </summary>
    /// <returns>
    /// A boolean value if the dialog is initialized and the value is returned.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
            m_rDiscPct   = m_oDlgFldDiscPct.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the caller record of discount offer table, discount type and action to perform based on the Args parameter.
    /// </summary>
    /// <param name="_args">
    /// Holds the details of the caller datasource.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The caller dataset is not <c>RBODiscountOfferTable</c> table.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The call to class is wrong.
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.dataset())
        {
            if (_args.dataset() == tablenum(RetailDiscountOffer))
            {
                m_tDiscountOffer        = _args.record();
                m_eDiscountType         = _args.parmEnum();
                m_sAction               = _args.parm();
            }
            else
                throw error ("@RET4700");
        }
        else
        {
            throw error ("@RET4701");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the new query with table <c>RetailInventTable</c>.
    /// </summary>
    protected void queryBuild()
    {
        ;
        QueryRun = new QueryRun(QueryStr(RetailInventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return QueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the discount percentage for all the lines of a discount offer.
    /// </summary>
    /// <remarks>
    /// If the discount percentage is changed the record is updated in the <c>RetailDiscountLineOffer</c> table.
    /// </remarks>
    void recalculate()
    {
        RetailDiscountLineOffer    tDiscountLineOffer;
        InventTable                inventTable;

        select count(recid) from tDiscountLineOffer
            where tDiscountLineOffer.offerId == m_tDiscountOffer.offerId;

        ttsbegin;

        this.progressInit("@RET4702", tDiscountLineOffer.RecId, #AviUpdate);

        while select forupdate * from tDiscountLineOffer
            where tDiscountLineOffer.offerId == m_tDiscountOffer.offerId
        {
            inventTable = inventTable::findByProduct(tDiscountLineOffer.groupMemberLine().Product);

            progress.setText(strFmt("%1 - %2", inventTable.ItemId, inventTable.itemName() ));
            progress.incCount();

            tDiscountLineOffer.discPct = m_rDiscPct;

            tDiscountLineOffer.Update();
        }

        this.progressKill();
        ttscommit;

        if (FormDataUtil::getFormDataSource(m_tDiscountOffer) != null)
        {
            FormDataUtil::getFormDataSource(m_tDiscountOffer).active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Based on the action parameter from the caller form, the methods are called to implement the functionlity.
    /// </summary>
    public void run()
    {
        switch (m_sAction)
        {
            Case methodstr(RetailPromotionDiscount, deleteItems):
                this.deleteitems();
                break;
            Case methodstr(RetailPromotionDiscount, addItems):
                this.addItems();
                break;
            Case methodstr(RetailPromotionDiscount, recalculate):
                this.recalculate();
                break;
            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = runbase::getVersion(_packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = _packedClass;
                queryRun = new QueryRun(packedQuery);
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPromotionPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the best price for the items for which discount is applicable by comparing original price with discounted price.
    /// </summary>
    /// <param name="_storeId">
    /// The Location to which the Item belongs to.
    /// </param>
    /// <param name="_itemId">
    /// The caller record Item ID.
    /// </param>
    /// <param name="_originalPrice">
    /// The Original price of the item.
    /// </param>
    /// <returns>
    /// The best price after applying store specific promotion on the original price.
    /// </returns>
    /// <remarks>
    /// Updates the final price if the promotion price is lesser.
    /// </remarks>
    public static Price GetPromotionPrice(RetailStoreId _storeId, ItemId _itemId, Price _originalPrice)
    {
        Price                           promotionPrice, finalPrice;
        RetailDiscountOffer                rboDiscountOffer;
        RetailDiscountLineOffer            rboDiscountOfferLine;
        RetailDiscountValidationPeriod     rboDiscountValidationPeriod;
        ;

        // If no better promotion price is found, always return the original price
        finalPrice = _originalPrice;

        // Iterate through all active promotions
        while select rboDiscountOffer
            where
                 rboDiscountOffer.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
            &&   rboDiscountOffer.status == RetailDisabledEnabled::Enabled
        {
            // Only use the promotion if the discount period is empty
            rboDiscountValidationPeriod = RetailDiscountValidationPeriod::find(rboDiscountOffer.ValidationPeriodId);

            if (!rboDiscountValidationPeriod)
            {
                // Iterative through each discount offer line
                while select rboDiscountOfferLine
                    where rboDiscountOfferLine.offerId == rboDiscountOffer.offerId
                {
                    // For each discount offer line, only apply the discount if it is applicable to the item
                    if (RetailPromotionDiscount::IsItemDiscountApplicable(_itemId, rboDiscountOfferLine))
                    {
                        // Apply the discount
                        promotionPrice = rboDiscountOfferLine.applyDiscount(_originalPrice);

                        // Only update the final price if the promotion price is lower
                        if (promotionPrice < finalPrice)
                        {
                            finalPrice = promotionPrice;
                        }
                    }
                }
            }
        }

        return finalPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetStoreSpecificPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the store specific item price, using the item base price.
    /// </summary>
    /// <param name="_storeId">
    /// The Location to which the Item belongs to.
    /// </param>
    /// <param name="_itemId">
    /// The caller record Item ID.
    /// </param>
    /// <returns>
    /// The final price after applying store specific promotion on the base price or the trade agreement price.
    /// </returns>
    public static Price GetStoreSpecificPrice(RetailStoreId _storeId, ItemId _itemId)
    {
        PriceDisc               priceDisc;
        price                   finalPrice;
        InventDim               inventDim;
        InventDimId             inventDimId;
        InventTableModule       inventTableModule;

        // Get the base sales price for the item in the inventTableModule
        inventTableModule = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales);

        finalPrice = inventTableModule.Price;

        // Use the default inventDimId for item pricing
        inventDimId = InventTable::getInventDimId(_itemId);

        // Use PriceDisc class to get applicable trade agreement pricing for the item
        priceDisc = RetailPromotionDiscount::createPriceDiscInstance(RetailPromotionDiscount::createAndInitPriceDiscParameters(_itemId));

        // Find the trade agreement pricing
        if (priceDisc.findPriceAgreement('', inventDimId))
        {
            // Use the trade agreement price if it is lower than base price
            finalPrice = priceDisc.price();
        }

        // Apply store specific promotion price to the base or trade agreement price
        finalPrice = RetailPromotionDiscount::GetPromotionPrice(_storeId, _itemId, finalPrice);

        // Finally, return the price
        return finalPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected static PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <param name = "_itemId">An <c>ItemId</c> value.</param>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected static PriceDiscParameters createAndInitPriceDiscParameters(ItemId _itemId)
    {
        PriceDiscParameters parameters = RetailPromotionDiscount::createPriceDiscParameters();

        // Get the base sales price for the item in the inventTableModule
        InventTableModule inventTableModule = InventTableModule::find(_itemId, ModuleInventPurchSales::Sales);

        parameters.parmModuleType(ModuleInventPurchSales::Sales);
        parameters.parmItemId(_itemId);
        parameters.parmUnitID(inventTableModule.UnitId);
        parameters.parmPriceDiscDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        parameters.parmQty(1);

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceDiscInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDisc</c> class.
    /// </summary>
    /// <param name = "_parameters">An instance of the <c>PriceDiscParameters</c> class.</param>
    /// <returns>An instance of the <c>PriceDisc</c> class.</returns>
    protected static PriceDisc createPriceDiscInstance(PriceDiscParameters _parameters)
    {
        return PriceDisc::newFromPriceDiscParameters(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemDiscountApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the discount is applicable for the ItemID based on the Item type and Item relation.
    /// </summary>
    /// <param name="_itemId">
    /// The Item in the caller record.
    /// </param>
    /// <param name="_rboDiscountLineOffer">
    /// The record of <c>RetailDiscountLineOffer</c> table in the caller.
    /// </param>
    /// <returns>
    /// true if the Item is applicable for the discount;otherwise, false.
    /// </returns>
    /// <remarks>
    /// Gets the list of Items available for the selected Item type.
    /// </remarks>
    public static boolean isItemDiscountApplicable(ItemId _itemId, RetailDiscountLineOffer _rboDiscountLineOffer)
    {
        boolean                         isValid = false;
        RetailGroupMemberLine           retailGroupMemberLine;
        RetailCategoryContainmentLookup retailCategoryContainmentLookup;
        EcoResProductCategory           ecoResProductCategory;

        retailGroupMemberLine = RetailGroupMemberLine::find(_rboDiscountLineOffer.RetailGroupMemberLine);

        if (retailGroupMemberLine.Product == InventTable::find(_itemId).Product)
        {
            isValid = true;
        }
        else if (!retailGroupMemberLine.Product && retailGroupMemberLine.Category)
        {
            select firstOnly RecId, ContainedCategory from retailCategoryContainmentLookup
                where retailCategoryContainmentLookup.Category == retailGroupMemberLine.Category
                exists join RecId from ecoResProductCategory
                    where ecoResProductCategory.Category == retailCategoryContainmentLookup.ContainedCategory
                     && ecoResProductCategory.Product == InventTable::find(_itemId).Product;
            if (retailCategoryContainmentLookup.RecId)
            {
                isValid = true;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args oArgs)
    {
        RetailPromotionDiscount            oRBOPromotionDiscount = new RetailPromotionDiscount();

        oRBOPromotionDiscount.initFromArgs(oArgs);

        oRBOPromotionDiscount.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>