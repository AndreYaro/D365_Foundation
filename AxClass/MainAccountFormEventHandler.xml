<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Methods supporting the MainAccount form extension.
/// </summary>
public static class MainAccountFormEventHandler
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>MainAccount_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the MainAccount_Post_init event.
    /// </summary>
    /// <param name="_args">The event arguments.</param>
    [PostHandlerFor(formStr(MainAccount), formMethodStr(MainAccount, init))]
    public static void MainAccount_Post_init(XppPrePostArgs _args)
    {
        FormRun form = _args.getThis();

        LedgerIChartOfAccountsReference ledgerChartOfAccountsReference = form as LedgerIChartOfAccountsReference;
        LedgerChartOfAccountsRecId chartOfAccountRecId = ledgerChartOfAccountsReference.getLedgerChartOfAccountsRecId();

        CompanyInfo companyInfo;
        Ledger ledger;
        LogisticsPostalAddress postalAddress;
        LogisticsAddressCountryRegion countryRegion;

        select firstonly RecId from companyInfo
            exists join postalAddress where
                postalAddress.Location == companyInfo.PrimaryAddressLocation
            exists join countryRegion where
                countryRegion.CountryRegionId == postalAddress.CountryRegionId
                && countryRegion.ISOcode == #isoFR
            exists join ledger where ledger.PrimaryForLegalEntity == companyInfo.RecId
                && ledger.ChartOfAccounts == chartOfAccountRecId;

        FormControl totalByPeriods = form.design().controlName(formControlStr(MainAccount, FinancialStatement));
        totalByPeriods.visible(companyInfo.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>MainAccountLegalEntity_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(MainAccount, MainAccountLegalEntity), FormDataSourceEventType::SelectionChanged)]
    public static void MainAccountLegalEntity_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormControl financialStatementButton;
        FormRun mainAccountForm = sender.formRun();
        financialStatementButton = mainAccountForm.design().controlName(formControlStr(MainAccount, FinancialStatement));

        if (financialStatementButton.isVisible())
        {
            FormDataSource mainAccountLegalEntity_ds;
            MainAccountLegalEntity mainAccountLegalEntity;

            mainAccountLegalEntity_ds = mainAccountForm.dataSource(formdatasourcestr(MainAccount, MainAccountLegalEntity)) as FormDataSource;

            // Check that just one record is selected.
            if (mainAccountLegalEntity_ds.recordsMarked().lastIndex() == 1)
            {
                // Get selected record.
                mainAccountLegalEntity = mainAccountLegalEntity_ds.cursor() as MainAccountLegalEntity;
            }
            else if (mainAccountLegalEntity_ds.recordsMarked().lastIndex() == 0)
            {
                // Get first record.
                mainAccountLegalEntity = mainAccountLegalEntity_ds.getFirst() as MainAccountLegalEntity;
            }

            if (mainAccountLegalEntity.RecId != 0)
            {
                CompanyInfo companyInfo;
                Ledger ledger;
                LogisticsPostalAddress postalAddress;
                LogisticsAddressCountryRegion countryRegion;

                select firstonly RecId from companyInfo
                where companyInfo.RecId == mainAccountLegalEntity.LegalEntity
                exists join postalAddress where
                    postalAddress.Location == companyInfo.PrimaryAddressLocation
                exists join countryRegion where
                    countryRegion.CountryRegionId == postalAddress.CountryRegionId
                    && countryRegion.ISOcode == #isoFR;

                financialStatementButton.enabled(companyInfo.RecId != 0);
            }
            else
            {
                financialStatementButton.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>