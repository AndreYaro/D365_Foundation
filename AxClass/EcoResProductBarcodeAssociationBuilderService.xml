<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductBarcodeAssociationBuilderService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductBarcodeAssociationBuilderService</c> class is responsible for updating records in table <c>EcoResProductBarcodeAssociation</c> table with references to existing <c>InventItemBarcode</c> records.
/// </summary>
internal class EcoResProductBarcodeAssociationBuilderService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runDataPopulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>EcoResProductBarcodeAssociation</c> table with missing associations.
    /// </summary>
    internal void runDataPopulation()
    {
        this.populateMissingBarcodeAssociationData(true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMissingBarcodeAssociationData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>EcoResProductBarcodeAssociation</c> table with missing associations.
    /// </summary>
    /// <param name = "_doUpdate">true if the data should be inserted in the database; otherwise, false.</param>
    /// <param name = "_showWarning">true if warnings should be displayed for missing associations; otherwise, false.</param>
    /// <returns>The number of inserted records.</returns>
    internal int populateMissingBarcodeAssociationData(boolean _doUpdate, boolean _showWarning)
    {
        int numberOfRecordsInserted;

        if (!_doUpdate 
            && !_showWarning)
        {
            return numberOfRecordsInserted;
        }

        this.autoCreateNumberSequence();

        InventItemBarcode itemBarcode;
        EcoResProductBarcodeAssociation productBarcodeAssociation;

        while select crosscompany RecId, DataAreaId from itemBarcode
            notexists join productBarcodeAssociation
                where productBarcodeAssociation.InventItemBarcode == itemBarcode.RecId
        {
            if (_showWarning)
            {
                warning(strFmt("@SCM:Warning_EcoResProductBarcodeAssociationBuilder_MissingAssociationRecord", itemBarcode.RecId));
            }

            if (_doUpdate)
            {
                changecompany(itemBarcode.DataAreaId)
                {
                    ttsbegin;
                    EcoResProductBarcodeAssociation::insertWithInventItemBarcode(itemBarcode.RecId);
                    ttscommit;
                }
                numberOfRecordsInserted++;
            }
        }

        return numberOfRecordsInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoCreateNumberSequence</Name>
				<Source><![CDATA[
    internal void autoCreateNumberSequence()
    {
        DataArea dataArea;
        while select crosscompany Id from dataArea
        {
            changecompany (dataArea.Id)
            {
                NumberSequenceTable::autoCreate(extendedTypeNum(EcoResProductBarcodeAssociationId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static EcoResProductBarcodeAssociationBuilderService construct()
    {
        return new EcoResProductBarcodeAssociationBuilderService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>