<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportDP_SG</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReportDP_SG</c> class is the report data provider class for the associated SSRS
///    <c>TaxReport_SG</c> reports.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxReportContract_SG))
]
class TaxReportDP_SG extends SrsReportDataProviderPreProcessTempDB
{
    TaxReportTmp_SG     taxReportTmp_SG;
    TaxTrans            localTaxTrans;
    TaxTable            taxTable;

    TaxRepVersion       taxRepVersion;
    TaxPeriod           taxPeriod;
    TransDate           fromDate;
    TransDate           toDate;
    TaxVersion          taxRepCounter;
    TransDate           transDate;
    Voucher             voucher;
    NoYes               taxReported;

    TaxBase             amountStd;
    TaxBase             amountZero;
    TaxBase             amountExmpt;
    TaxBase             amountTaxPurch;
    TaxBase             amountOpTaxDue;
    TaxBase             amountIpTaxRefund;
    TaxBase             amountNetGST;
    TaxBase             amountMES;

    Query               query;
    QueryRun            queryRun;
    Name                taxVersionParam;
    QueryBuildRange     qbr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxReportTmp_SG</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxReportTmp_SG</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>TaxReportTmp_SG</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('TaxReportDS_SG')]
    public TaxReportTmp_SG getTaxReportTmp_SG()
    {
        select * from taxReportTmp_SG;
        return taxReportTmp_SG;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS
    /// </remarks>
    public void processReport()
    {
        TaxReportContract_SG contract = this.parmDataContract() as TaxReportContract_SG;

        fromDate = contract.parmTaxFromDateContract();
        toDate = contract.parmTaxToDateContract();
        taxPeriod = contract.parmTaxPeriodContract();
        transDate = contract.parmTransDateContract();
        taxReported = contract.parmReported();
        taxRepCounter = contract.parmTaxRepCounterContract();
        taxRepVersion = contract.parmTaxRepVerisonContract();
        voucher = contract.parmVoucher();
        
        this.initFromTaxTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans</Name>
				<Source><![CDATA[
    public void initFromTaxTrans()
    {
        query = new Query(querystr(TaxReport_SG));

        if (taxPeriod && fromDate && toDate)
        {
            qbr = query.dataSourceTable(tablenum(TaxTrans)).findRange(fieldnum(TaxTrans, TaxPeriod));
            if (!qbr)
            {
                query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans, TaxPeriod));
            }
            qbr.value(taxPeriod);

            qbr = query.dataSourceTable(tablenum(TaxTrans)).findRange(fieldnum(TaxTrans, TransDate));
            if (!qbr)
            {
                query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans, TransDate));
            }
            qbr.value(queryRange(fromDate, toDate));

            if (voucher && transDate)
            {
                taxVersionParam =  strfmt('%1',taxRepCounter);
            }
            else
            {
                taxVersionParam = TaxReport::taxVersion(taxRepVersion, taxPeriod, fromDate, taxReported);
            }
            qbr = query.dataSourceTable(tablenum(TaxTrans)).findRange(fieldnum(TaxTrans, TaxRepCounter));
            if (!qbr)
            {
                query.dataSourceTable(tablenum(TaxTrans)).addRange(fieldnum(TaxTrans, TaxRepCounter));
            }
            qbr.value(taxVersionParam);
        }

        boolean isTaxSpecificExchangeRateEnabled = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            localTaxTrans = queryRun.get(tablenum(TaxTrans));

            taxTable = TaxTable::find(localTaxTrans.TaxCode);
            if (localTaxTrans.Source == TaxModuleType::Sales            ||
                localTaxTrans.Source == TaxModuleType::Project          ||
                localTaxTrans.Source == TaxModuleType::FreeTxtInvoice   ||
                (localTaxTrans.Source == TaxModuleType::Voucher && 
                (localTaxTrans.TaxDirection == TaxDirection::OutgoingTax || (isTaxSpecificExchangeRateEnabled && localTaxTrans.TaxDirection == TaxDirection::OutgoingTax_W))) ||
                (localTaxTrans.Source == TaxModuleType::Purch && localTaxTrans.ReverseCharge_W == NoYes::Yes && 
                (localTaxTrans.TaxDirection == TaxDirection::OutgoingTax || (isTaxSpecificExchangeRateEnabled && localTaxTrans.TaxDirection == TaxDirection::OutgoingTax_W))))
            {
                switch (taxTable.TaxType_SG)
                {
                    case TaxType_SG::Standard:
                        if (localTaxTrans.Source == TaxModuleType::Purch || (localTaxTrans.Source == TaxModuleType::Voucher && localTaxTrans.ReverseCharge_W == NoYes::Yes))
                        {
                            amountStd -= localTaxTrans.TaxBaseAmount;
                        }
                        else
                        {
                            amountStd += localTaxTrans.TaxBaseAmount;
                        }

                        amountOpTaxDue  += localTaxTrans.TaxAmount;
                        break;
                    case TaxType_SG::Zero:
                        amountZero      += localTaxTrans.TaxBaseAmount;
                        break;
                    case TaxType_SG::Exempt:
                        amountExmpt     += localTaxTrans.TaxBaseAmount;
                        break;
                }
            }
            else if ((localTaxTrans.Source == TaxModuleType::Purch && localTaxTrans.ReverseCharge_W == NoYes::No)
                    || localTaxTrans.Source == TaxModuleType::PurchInvoice
                    || (localTaxTrans.Source == TaxModuleType::Voucher 
                    && (localTaxTrans.TaxDirection == TaxDirection::IncomingTax || (isTaxSpecificExchangeRateEnabled && localTaxTrans.TaxDirection == TaxDirection::IncomingTax_W)))
                    || (localTaxTrans.Source == TaxModuleType::Purch && localTaxTrans.ReverseCharge_W == NoYes::Yes 
                    && (localTaxTrans.TaxDirection == TaxDirection::IncomingTax || (isTaxSpecificExchangeRateEnabled && localTaxTrans.TaxDirection == TaxDirection::IncomingTax_W))))
            {
                amountTaxPurch      += localTaxTrans.TaxBaseAmount;
                amountIpTaxRefund   += localTaxTrans.TaxAmount;
            }

            if (localTaxTrans.TaxDirection == TaxDirection::MajorExporterScheme_SG)
            {
                amountMES += localTaxTrans.TaxBaseAmount;
            }
        }

        amountNetGST = amountOpTaxDue + amountIpTaxRefund;

        taxReportTmp_SG.TaxAuthorityName = TaxAuthorityAddress::taxAuthorityName(TaxPeriodHead::find(taxPeriod).TaxAuthority);
        taxReportTmp_SG.TaxAuthorityAddress = TaxAuthorityAddress::address(TaxPeriodHead::find(taxPeriod).TaxAuthority);
        taxReportTmp_SG.TaxPeriodName = TaxPeriodHead::find(taxPeriod).Name;

        CompanyInfo companyInfo = CompanyInfo::find();
        taxReportTmp_SG.CompanyName = companyInfo.name();
        taxReportTmp_SG.CompanyAddress = companyInfo.postalAddress().Address;
        taxReportTmp_SG.vatNum = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, toDate);
        taxReportTmp_SG.FromDate = fromDate;
        taxReportTmp_SG.ToDate = toDate;

        // Display sign on report should be -ve if sales credit note amount is more than sales invoice amount and vice-versa.
        taxReportTmp_SG.Labels = "@SYS92896";
        taxReportTmp_SG.Amount = amountStd * -1;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92897";
        taxReportTmp_SG.Amount = amountZero * -1;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92898";
        taxReportTmp_SG.Amount = amountExmpt * -1;
        taxReportTmp_SG.Lines = NoYes::Yes;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92899";
        taxReportTmp_SG.Amount = (amountStd + amountZero + amountExmpt) * -1;
        taxReportTmp_SG.Lines = NoYes::Yes;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92900";
        taxReportTmp_SG.Amount = amountTaxPurch;
        taxReportTmp_SG.Lines = NoYes::Yes;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92901";
        taxReportTmp_SG.Amount = amountOpTaxDue * -1;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92902";
        taxReportTmp_SG.Amount = amountIpTaxRefund;
        taxReportTmp_SG.Lines = NoYes::Yes;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        if (amountNetGST <= 0)
            taxReportTmp_SG.Labels    = "@SYS92903";
        else
            taxReportTmp_SG.Labels    = "@SYS92904";
        taxReportTmp_SG.Amount    = abs(amountNetGST);
        taxReportTmp_SG.Lines = NoYes::Yes;
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();

        taxReportTmp_SG.Labels = "@SYS92905";
        taxReportTmp_SG.Amount = abs(amountMES);
        taxReportTmp_SG.insert();
        taxReportTmp_SG.clear();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>