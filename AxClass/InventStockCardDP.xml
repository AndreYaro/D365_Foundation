<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStockCardDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStockCardDP</c> class is the report data provider class for the <c>InventStockCard</c>
///    report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(InventStockCardContract))
]
public class InventStockCardDP extends SRSReportDataProviderBase
{
    InventStockCardTmpHeader	inventStockCardTmpHeader;
    InventStockCardTmpLine		inventStockCardTmpLine;
    InventStockCardContract		contract;
    TransDate                   latestTransDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOpenBalToInvtStockCardTmpLineSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds lines of opening balances as current balance to include in summary report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addOpenBalToInvtStockCardTmpLineSummary()
    {
        // Openning balance
        QueryRun queryRun = new QueryRun(this.buildDetailQueryForOpeningBalance());

        while (queryRun.next())
        {
            InventValueTransUnionAll inventValueTransUnionAll = queryRun.get(tableNum(inventValueTransUnionAll));
            InventTrans              inventTrans              = queryRun.get(tableNum(InventTrans));
            InventDim                inventDim                = queryRun.get(tableNum(InventDim));
            InventTable              inventTable              = queryRun.get(tableNum(InventTable));
            InventModelGroup         inventModelGroup         = queryRun.get(tableNum(InventModelGroup));
            InventTableModule        inventTableModule        = queryRun.get(tableNum(InventTableModule));

            inventStockCardTmpLine.clear();

            inventStockCardTmpLine.LineType         = InventValueReportLineType::CurrentBalance;
            inventStockCardTmpLine.BalanceAmount    = inventValueTransUnionAll.Amount;
            inventStockCardTmpLine.BalanceQty       = inventValueTransUnionAll.Qty;
            inventStockCardTmpLine.ItemName         = inventTable.itemName();
            inventStockCardTmpLine.ItemId           = inventValueTransUnionAll.ItemId;
            inventStockCardTmpLine.SiteId           = inventDim.InventSiteId;
            inventStockCardTmpLine.LocationId       = inventDim.InventLocationId;
            inventStockCardTmpLine.WmsLocationId    = inventDim.wmsLocationId;
            inventStockCardTmpLine.InventModel      = inventModelGroup.InventModel;
            inventStockCardTmpLine.UnitId           = inventTableModule.UnitId;
            if (contract.parmGroupByItemGroup())
            {
                inventStockCardTmpLine.ItemGroupId = InventTable::find(inventValueTransUnionAll.ItemId).itemGroupId();
            }
            inventStockCardTmpLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInventStockCardTmpLineSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds lines for summary report based on the query.
    /// </summary>
    /// <param name="_query">
    /// The query used to create part of summary report lines.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addToInventStockCardTmpLineSummary(Query _query)
    {
        InventItemGroupItem         inventItemGroupItem;

        if (_query)
        {
            QueryRun queryRun = new QueryRun(_query);
            while (queryRun.next())
            {
                inventValueTransUnionAll inventValueTransUnionAll = queryRun.get(tableNum(inventValueTransUnionAll));
                InventTrans              inventTrans              = queryRun.get(tableNum(InventTrans));
                InventDim                inventDim                = queryRun.get(tableNum(InventDim));
                InventTable              inventTable              = queryRun.get(tableNum(InventTable));
                InventModelGroup         inventModelGroup         = queryRun.get(tableNum(InventModelGroup));
                InventTableModule        inventTableModule        = queryRun.get(tableNum(InventTableModule));
                if (contract.parmGroupByItemGroup())
                {
                    inventItemGroupItem = queryRun.get(tableNum(InventItemGroupItem));
                }

                inventStockCardTmpLine.clear();

                select firstonly forupdate inventStockCardTmpLine
                    where inventStockCardTmpLine.LineType           == InventValueReportLineType::CurrentBalance
                        && inventStockCardTmpLine.ItemId            == inventValueTransUnionAll.ItemId
                        && inventStockCardTmpLine.SiteId            == inventDim.InventSiteId
                        && inventStockCardTmpLine.LocationId        == inventDim.InventLocationId
                        && inventStockCardTmpLine.WmsLocationId     == inventDim.wmsLocationId
                        && inventStockCardTmpLine.ItemGroupId       == inventItemGroupItem.ItemGroupId;

                inventStockCardTmpLine.LineType         = InventValueReportLineType::CurrentBalance;
                inventStockCardTmpLine.ItemId           = inventValueTransUnionAll.ItemId;
                inventStockCardTmpLine.SiteId           = inventDim.InventSiteId;
                inventStockCardTmpLine.LocationId       = inventDim.InventLocationId;
                inventStockCardTmpLine.WmsLocationId    = inventDim.wmsLocationId;
                inventStockCardTmpLine.ItemGroupId      = inventItemGroupItem.ItemGroupId;

                if (inventValueTransUnionAll.Qty >= 0)
                {
                    inventStockCardTmpLine.ReceivedAmount   += inventValueTransUnionAll.Amount;
                    inventStockCardTmpLine.ReceivedQty      += inventValueTransUnionAll.Qty;
                }
                else
                {
                    inventStockCardTmpLine.IssuedAmount     += inventValueTransUnionAll.Amount;
                    inventStockCardTmpLine.IssuedQty        += inventValueTransUnionAll.Qty;
                }

                inventStockCardTmpLine.BalanceAmount        += inventValueTransUnionAll.Amount;
                inventStockCardTmpLine.BalanceQty           += inventValueTransUnionAll.Qty;

                inventStockCardTmpLine.ItemName             = inventTable.itemName();
                inventStockCardTmpLine.InventModel          = inventModelGroup.InventModel;
                inventStockCardTmpLine.UnitId               = inventTableModule.UnitId;

                if (contract.parmReportType() == FinancialPhysical::Financial)
                {
                    latestTransDate = inventTrans.DateFinancial > latestTransDate ? inventTrans.DateFinancial : latestTransDate;
                }
                else
                {
                    latestTransDate = inventTrans.DatePhysical > latestTransDate ? inventTrans.DatePhysical : latestTransDate;
                }

                inventStockCardTmpLine.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventStockCardTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>InventStockCardTmpHeader</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createInventStockCardTmpHeader()
    {
        inventStockCardTmpHeader.AsOfDate = latestTransDate ? latestTransDate : contract.parmToDate();
        inventStockCardTmpHeader.TaxBranchName = TaxBranch::findByCode(contract.parmTaxBranchCode()).Name;
        if (contract.parmTaxBranchCode())
        {
            inventStockCardTmpHeader.TaxBranchName = TaxBranch::findByCode(contract.parmTaxBranchCode()).Name;
        }
        else
        {
            TaxBranch taxBranch = TaxBranch::getHeadOffice();
            if (taxBranch)
            {
                // %1 & All tax branches
                inventStockCardTmpHeader.TaxBranchName = strFmt("@SYS4083052", taxBranch.Name);
            }
        }

        inventStockCardTmpHeader.CompanyTaxRegNum   = CompanyInfo::find().CoRegNum;
        inventStockCardTmpHeader.CompanyAddress     = CompanyInfo::find().postalAddress().Address;
        inventStockCardTmpHeader.RealFromDate       = (contract.parmFromDate())
            ? contract.parmFromDate()
            : dateNull();
        inventStockCardTmpHeader.RealToDate         = (contract.parmToDate())
            ? contract.parmToDate()
            : dateMax();

        LanguageId languageId = infolog.language();
        
        if (contract.parmReportType()     == FinancialPhysical::Financial
            && contract.parmDetailLevel() == DetailSummary::Detail)
        {
            // Stock card report(Financial date)
            inventStockCardTmpHeader.ReportTitle = SysLabel::labelId2String(literalStr("@Inventory_Localization:InventStockCardReport_FinancialDateDetailTitle"), languageId);
        }
        else if (contract.parmReportType()    == FinancialPhysical::Financial
            && contract.parmDetailLevel()     == DetailSummary::Summary)
        {
            // Stock card summary report(Financial date)
            inventStockCardTmpHeader.ReportTitle = SysLabel::labelId2String(literalStr("@Inventory_Localization:InventStockCardReport_FinancialDateSummaryTitle"), languageId);
        }
        else if (contract.parmReportType()    == FinancialPhysical::Physical
            && contract.parmDetailLevel()     == DetailSummary::Detail)
        {
            // Stock card report(Physical date)
            inventStockCardTmpHeader.ReportTitle = SysLabel::labelId2String(literalStr("@Inventory_Localization:InventStockCardReport_PhysicalDateDetailTitle"), languageId);
        }
        else
        {
            // Stock card summary report(Physical date)
            inventStockCardTmpHeader.ReportTitle = SysLabel::labelId2String(literalStr("@Inventory_Localization:InventStockCardReport_PhysicalDateSummaryTitle"), languageId);
        }

        inventStockCardTmpHeader.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventStockCardTmpLineDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>InventStockCardTmpLine</c> table for detail report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createInventStockCardTmpLineDetail()
    {
        inventValueTransUnionAll    inventValueTransUnionAll;
        InventTable                 inventTable;
        InventDim                   inventDim;
        InventTrans                 inventTrans;
        InventModelGroup            inventModelGroup;
        InventTableModule           inventTableModule;

        InventStockCardTmpLine      inventStockCardTmpLineOld;

        // Openning balance
        QueryRun queryRun = new QueryRun(this.buildDetailQueryForOpeningBalance());

        while (queryRun.next())
        {
            inventValueTransUnionAll    = queryRun.get(tableNum(inventValueTransUnionAll));
            inventTrans                 = queryRun.get(tableNum(InventTrans));
            inventDim                   = queryRun.get(tableNum(InventDim));
            inventTable                 = queryRun.get(tableNum(InventTable));
            inventModelGroup            = queryRun.get(tableNum(InventModelGroup));
            inventTableModule           = queryRun.get(tableNum(InventTableModule));

            inventStockCardTmpLine.clear();

            inventStockCardTmpLine.LineType         = InventValueReportLineType::BeginningBalance;
            inventStockCardTmpLine.Amount           = inventValueTransUnionAll.Amount;
            inventStockCardTmpLine.Qty              = inventValueTransUnionAll.Qty;
            inventStockCardTmpLine.BalanceAmount    = inventValueTransUnionAll.Amount;
            inventStockCardTmpLine.BalanceQty       = inventValueTransUnionAll.Qty;
            inventStockCardTmpLine.BalancePrice     = (inventStockCardTmpLine.BalanceQty != 0)
                ? CurrencyExchangeHelper::price(inventStockCardTmpLine.BalanceAmount / inventStockCardTmpLine.BalanceQty)
                : 0;
            inventStockCardTmpLine.ItemName         = inventTable.itemName();
            inventStockCardTmpLine.ItemId           = inventValueTransUnionAll.ItemId;
            inventStockCardTmpLine.SiteId           = inventDim.InventSiteId;
            inventStockCardTmpLine.LocationId       = inventDim.InventLocationId;
            inventStockCardTmpLine.WmsLocationId    = inventDim.wmsLocationId;
            inventStockCardTmpLine.InventModel      = inventModelGroup.InventModel;
            inventStockCardTmpLine.UnitId           = inventTableModule.UnitId;

            inventStockCardTmpLine.insert();
        }

        // Detail lines
        queryRun = new QueryRun(this.buildDetailQueryForLines());
        while (queryRun.next())
        {
            inventValueTransUnionAll    = queryRun.get(tableNum(inventValueTransUnionAll));
            inventTrans                 = queryRun.get(tableNum(InventTrans));
            inventDim                   = queryRun.get(tableNum(InventDim));
            inventTable                 = queryRun.get(tableNum(InventTable));
            inventModelGroup            = queryRun.get(tableNum(InventModelGroup));
            inventTableModule           = queryRun.get(tableNum(InventTableModule));

            // If it is a new group, reset to calculation the balance start from beginning balance
            if (inventStockCardTmpLineOld.ItemId != inventValueTransUnionAll.ItemId
                || (contract.parmGroupBySite()        && inventStockCardTmpLine.SiteId         != inventDim.InventSiteId)
                || (contract.parmGroupByWarehouse()   && inventStockCardTmpLine.LocationId     != inventDim.InventLocationId)
                || (contract.parmGroupByLocation()    && inventStockCardTmpLine.WmsLocationId  != inventDim.wmsLocationId))
            {
                // Find out the related openning balance line
                select firstonly inventStockCardTmpLine
                    where inventStockCardTmpLine.LineType == InventValueReportLineType::BeginningBalance
                        && inventStockCardTmpLine.ItemId  == inventValueTransUnionAll.ItemId
                        && ((!contract.parmGroupBySite())         || (inventStockCardTmpLine.SiteId          == inventDim.InventSiteId))
                        && ((!contract.parmGroupByWarehouse())    || (inventStockCardTmpLine.LocationId      == inventDim.InventLocationId))
                        && ((!contract.parmGroupByLocation())     || (inventStockCardTmpLine.WmsLocationId   == inventDim.wmsLocationId));

                if (inventStockCardTmpLine.RecId == 0)
                {
                    // Not found, create a empty one.
                    inventStockCardTmpLine.LineType         = InventValueReportLineType::BeginningBalance;
                    inventStockCardTmpLine.ItemName         = inventTable.itemName();
                    inventStockCardTmpLine.ItemId           = inventValueTransUnionAll.ItemId;
                    inventStockCardTmpLine.SiteId           = inventDim.InventSiteId;
                    inventStockCardTmpLine.LocationId       = inventDim.InventLocationId;
                    inventStockCardTmpLine.WmsLocationId    = inventDim.wmsLocationId;
                    inventStockCardTmpLine.InventModel      = inventModelGroup.InventModel;
                    inventStockCardTmpLine.UnitId           = inventTableModule.UnitId;
                    inventStockCardTmpLine.insert();
                }
            }

            inventStockCardTmpLineOld.data(inventStockCardTmpLine);
            inventStockCardTmpLine.clear();

            inventStockCardTmpLine.LineType         = InventValueReportLineType::Transaction;

            if (inventValueTransUnionAll.Qty >= 0)
            {
                inventStockCardTmpLine.ReceivedAmount   = inventValueTransUnionAll.Amount;
                inventStockCardTmpLine.ReceivedQty      = inventValueTransUnionAll.Qty;
                inventStockCardTmpLine.ReceivedPrice    = (inventStockCardTmpLine.ReceivedQty != 0)
                    ? CurrencyExchangeHelper::price(inventStockCardTmpLine.ReceivedAmount / inventStockCardTmpLine.ReceivedQty)
                    : 0;
            }
            else
            {
                inventStockCardTmpLine.IssuedAmount     = -inventValueTransUnionAll.Amount;
                inventStockCardTmpLine.IssuedQty        = -inventValueTransUnionAll.Qty;
                inventStockCardTmpLine.IssuedPrice      = CurrencyExchangeHelper::price(inventStockCardTmpLine.IssuedAmount / inventStockCardTmpLine.IssuedQty);
            }

            inventStockCardTmpLine.BalanceAmount    = inventStockCardTmpLineOld.BalanceAmount + inventValueTransUnionAll.Amount;
            inventStockCardTmpLine.BalanceQty       = inventStockCardTmpLineOld.BalanceQty + inventValueTransUnionAll.Qty;
            inventStockCardTmpLine.BalancePrice     = (inventStockCardTmpLine.BalanceQty != 0)
                ? CurrencyExchangeHelper::price(inventStockCardTmpLine.BalanceAmount / inventStockCardTmpLine.BalanceQty)
                : 0;

            inventStockCardTmpLine.Amount           = inventValueTransUnionAll.Amount;
            inventStockCardTmpLine.Qty              = inventValueTransUnionAll.Qty;

            inventStockCardTmpLine.ItemName         = inventTable.itemName();
            inventStockCardTmpLine.ItemId           = inventValueTransUnionAll.ItemId;
            inventStockCardTmpLine.InventModel      = inventModelGroup.InventModel;
            inventStockCardTmpLine.UnitId           = inventTableModule.UnitId;

            inventStockCardTmpLine.ReferenceId      = inventValueTransUnionAll.Reference;
            inventStockCardTmpLine.Voucher          = inventValueTransUnionAll.Voucher;
            inventStockCardTmpLine.DateFinancial    = inventTrans.DateFinancial;
            inventStockCardTmpLine.DatePhysical     = inventTrans.DatePhysical;

            this.inventStockCardTmpLine_initFromInventDim(inventStockCardTmpLine, inventDim);

            if (contract.parmReportType() == FinancialPhysical::Financial)
            {
                inventStockCardTmpLine.InvoiceId = inventTrans.InvoiceId;
                latestTransDate = inventTrans.DateFinancial > latestTransDate ? inventTrans.DateFinancial : latestTransDate;
            }
            else
            {
                inventStockCardTmpLine.PackingSlipId = inventTrans.PackingSlipId;
                latestTransDate = inventTrans.DatePhysical > latestTransDate ? inventTrans.DatePhysical : latestTransDate;
            }

            inventStockCardTmpLine.insert();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>inventStockCardTmpLine_initFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>InventStockCardTmpLine</c> values from <c>InventDim</c>.
    /// </summary>
    /// <param name = "_inventStockCardTmpLine"><c>InventStockCardTmpLine</c> cursor to set values.</param>
    /// <param name = "_inventDim"><c>InventDim</c> cursor to get values from.</param>
    protected void inventStockCardTmpLine_initFromInventDim(InventStockCardTmpLine _inventStockCardTmpLine, InventDim _inventDim)
    {
        _inventStockCardTmpLine.BatchId = _inventDim.InventBatchId;
        _inventStockCardTmpLine.ConfigId = _inventDim.ConfigId;
        _inventStockCardTmpLine.SerialId = _inventDim.InventSerialId;
        _inventStockCardTmpLine.ColorId = _inventDim.InventColorId;
        _inventStockCardTmpLine.SizeId = _inventDim.InventSizeId;
        _inventStockCardTmpLine.VersionId = _inventDim.InventVersionId;
        _inventStockCardTmpLine.WmsLocationId = _inventDim.wmsLocationId;
        _inventStockCardTmpLine.SiteId = _inventDim.InventSiteId;
        _inventStockCardTmpLine.LocationId = _inventDim.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventStockCardTmpLineSummary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates data for <c>InventStockCardTmpLine</c> table for detail report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createInventStockCardTmpLineSummary()
    {
        this.addOpenBalToInvtStockCardTmpLineSummary();

        Query query = this.buildSummaryQuery();

        // Range for field Qty (not RecId) for complex conditions.
        QueryBuildRange qbr = SysQuery::findOrCreateRange(
            query.dataSourceTable(tableNum(InventValueTransUnionAll)),
            fieldNum(InventValueTransUnionAll, RecId));

        // Summary all received trans
        qbr.value(
            strFmt(
                '((%1 >= %2))',
                fieldStr(InventValueTransUnionAll, Qty),
                queryValue(0)));

        this.addToInventStockCardTmpLineSummary(query);

        // Summary all issued trans
        qbr.value(
            strFmt(
                '((%1 < %2))',
                fieldStr(InventValueTransUnionAll, Qty),
                queryValue(0)));

        this.addToInventStockCardTmpLineSummary(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStockCardTmpHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>InventStockCardTmpHeader</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventStockCardTmpHeader</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('InventStockCardTmpHeader'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventStockCardTmpHeader getInventStockCardTmpHeader()
    {
        return inventStockCardTmpHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStockCardTmpLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>InventStockCardTmpLine</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventStockCardTmpLine</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('InventStockCardTmpLine'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventStockCardTmpLine getInventStockCardTmpLine()
    {
        return inventStockCardTmpLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        contract = this.parmDataContract() as InventStockCardContract;

        // the Financial detail
        if (contract.parmDetailLevel() == DetailSummary::Detail)
        {
            this.createInventStockCardTmpLineDetail();
        }
        //summary report
        else
        {
           this.createInventStockCardTmpLineSummary();
        }

        this.createInventStockCardTmpHeader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransPostingTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>InventTransPostingType</c> range.
    /// </summary>
    /// <param name = "_qbds">A <c>QueryBuildDataSource</c> object to add the range to.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addInventTransPostingTypeRange(QueryBuildDataSource _qbds)
    {
        UnionAllBranchId        unionAllBranchIdForPhysicalReversed = 4;
       if (contract.parmReportType() == FinancialPhysical::Financial)
        {
            _qbds.addRange(fieldNum(InventValueTransUnionAll, InventTransPostingType)).value(queryValue(InventTransPostingType::Financial));
        }
        else
        {
            _qbds.addRange(fieldNum(InventValueTransUnionAll, InventTransPostingType)).value(queryValue(InventTransPostingType::Physical));
            _qbds.addRange(fieldNum(InventValueTransUnionAll, UnionAllBranchId)).value(SysQuery::valueNot(unionAllBranchIdForPhysicalReversed));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyBaseParmsToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applys the shared basic parameters of both detail and summary report to the basic query.
    /// </summary>
    /// <param name="_query">
    /// The basic query both detail and summary report.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void applyBaseParmsToQuery(Query  _query)
    {
        str                     inventValueTransUnionAll_DSName     = _query.dataSourceTable(tableNum(InventValueTransUnionAll)).name();

        // Report type
        QueryBuildDataSource qbds = _query.dataSourceTable(tableNum(InventValueTransUnionAll));

        this.addInventTransPostingTypeRange(qbds);

        // Tax branch code
        if (contract.parmTaxBranchCode())
        {
            qbds = _query.dataSourceTable(tableNum(InventTransOrigin)).addDataSource(tableNum(InventTransPosting));
            qbds.relations(false);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransPosting, InventTransOrigin));
            qbds.addLink(
                fieldNum(InventValueTransUnionAll, Voucher),
                fieldNum(InventTransPosting, Voucher),
                inventValueTransUnionAll_DSName);
            qbds.addLink(
                fieldNum(InventValueTransUnionAll, InventTransPostingType),
                fieldNum(InventTransPosting, InventTransPostingType),
                inventValueTransUnionAll_DSName);
            qbds.addLink(
                fieldNum(InventValueTransUnionAll, TransDate),
                fieldNum(InventTransPosting, TransDate),
                inventValueTransUnionAll_DSName);

            qbds = qbds.addDataSource(tableNum(DimensionAttributeValueSetTaxBranchView));
            qbds.relations(false);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(InventTransPosting, DefaultDimension), fieldNum(DimensionAttributeValueSetTaxBranchView, DimensionAttributeValueSet));
            qbds.addRange(fieldNum(DimensionAttributeValueSetTaxBranchView, DisplayValue)).value(queryValue(contract.parmTaxBranchCode()));
        }

        // Item number
        if (contract.parmInventItemId())
        {
            qbds = _query.dataSourceTable(tableNum(InventValueTransUnionAll));
            qbds.addRange(fieldNum(InventValueTransUnionAll, ItemId)).value(contract.parmInventItemId());
        }

        // Group by
        if (contract.parmGroupBySite())
        {
            qbds = _query.dataSourceTable(tableNum(InventDim));
            qbds.addGroupByField(fieldNum(InventDim, InventSiteId));
        }

        if (contract.parmGroupByWarehouse())
        {
            qbds = _query.dataSourceTable(tableNum(InventDim));
            qbds.addGroupByField(fieldNum(InventDim, InventLocationId));
        }

        if (contract.parmGroupByLocation())
        {
            qbds = _query.dataSourceTable(tableNum(InventDim));
            qbds.addGroupByField(fieldNum(InventDim, wmsLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetailQueryBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the basic query for detail report's line detais and opening balance.
    /// </summary>
    /// <returns>
    /// The basic query for detail report.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildDetailQueryBase()
    {
        QueryBuildDataSource    qbds;

        Query query = this.buildQueryBase();

        // Select
        if (contract.parmItemGroupId())
        {
            qbds = query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventItemGroupItem));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(InventItemGroupItem, ItemGroupId)).value(contract.parmItemGroupId());
        }

        if (contract.parmLotId())
        {
            qbds = query.dataSourceTable(tableNum(InventTransOrigin));
            qbds.addRange(fieldNum(InventTransOrigin, InventTransId)).value(contract.parmLotId());
        }

        if (contract.parmInventDimId())
        {
            qbds = query.dataSourceTable(tableNum(InventValueTransUnionAll));
            qbds.addRange(fieldNum(InventValueTransUnionAll, InventDimId)).value(contract.parmInventDimId());
        }

        if (contract.parmInventConfigId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, ConfigId)).value(contract.parmInventConfigId());
        }

        if (contract.parmInventBatchId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, InventBatchId)).value(contract.parmInventBatchId());
        }

        if (contract.parmInventSerialId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, InventSerialId)).value(contract.parmInventSerialId());
        }

        if (contract.parmInventColorId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, InventColorId)).value(contract.parmInventColorId());
        }

        if (contract.parmInventSizeId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, InventSizeId)).value(contract.parmInventSizeId());
        }

        if (contract.parmInventVersionId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, InventVersionId)).value(contract.parmInventVersionId());
        }

        if (contract.parmInventLocationId())
        {
            qbds = query.dataSourceTable(tableNum(InventDim));
            qbds.addRange(fieldNum(InventDim, wmsLocationId)).value(contract.parmInventLocationId());
        }

        if (contract.parmCostingMethod())
        {
            qbds = query.dataSourceTable(tableNum(InventModelGroupItem));
            qbds.joinMode(JoinMode::InnerJoin);

            qbds = query.dataSourceTable(tableNum(InventModelGroup));
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.addRange(fieldNum(InventModelGroup, InventModel)).value(contract.parmCostingMethod());
        }

        if (contract.parmVoucher())
        {
            qbds = query.dataSourceTable(tableNum(InventValueTransUnionAll));
            qbds.addRange(fieldNum(InventValueTransUnionAll, Voucher)).value(contract.parmVoucher());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetailQueryForLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for detail report's line details.
    /// </summary>
    /// <returns>
    /// The query for detail report's line details.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query buildDetailQueryForLines()
    {
        QueryBuildDataSource    qbds;

        Query query = this.buildDetailQueryBase();

        // Date range
        if (contract.parmFromDate() || contract.parmToDate())
        {
            qbds = query.dataSourceTable(tableNum(InventTrans));
            if (contract.parmReportType() == FinancialPhysical::Financial)
            {
                qbds.addRange(fieldNum(InventTrans, DateFinancial)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
            }
            else
            {
                qbds.addRange(fieldNum(InventTrans, DatePhysical)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
                qbds.addRange(fieldnum(InventTrans, InvoiceId)).value(SysQuery::valueEmptyString());
            }
        }

        // Sorting by
        query.dataSourceTable(tableNum(InventValueTransUnionAll)).addOrderByField(fieldNum(InventValueTransUnionAll, ItemId));

        // Sort by all group by fields
        if (contract.parmGroupBySite())
        {
            query.dataSourceTable(tableNum(InventDim)).addOrderByField(fieldNum(InventDim, InventSiteId));
        }
        if (contract.parmGroupByWarehouse())
        {
            query.dataSourceTable(tableNum(InventDim)).addOrderByField(fieldNum(InventDim, InventLocationId));
        }
        if (contract.parmGroupByLocation())
        {
            query.dataSourceTable(tableNum(InventDim)).addOrderByField(fieldNum(InventDim, wmsLocationId));
        }

        if (contract.parmReportType() == FinancialPhysical::Financial)
        {
            query.dataSourceTable(tableNum(InventTrans)).addOrderByField(fieldNum(InventTrans, DateFinancial), SortOrder::Ascending);
        }
        else
        {
            query.dataSourceTable(tableNum(InventTrans)).addOrderByField(fieldNum(InventTrans, DatePhysical), SortOrder::Ascending);
        }

        // Show received first then the issued
        query.dataSourceTable(tableNum(InventTrans)).addOrderByField(fieldNum(InventTrans,StatusReceipt), SortOrder::Descending);

        if (contract.parmReportType() == FinancialPhysical::Financial
            && contract.parmSortByPhysicalDateAsc())
        {
            query.dataSourceTable(tableNum(InventTrans)).addOrderByField(fieldNum(InventTrans, DatePhysical), SortOrder::Ascending);
        }
        else if (contract.parmReportType() == FinancialPhysical::Physical
            && contract.parmSortByFinancialDateAsc())
        {
            query.dataSourceTable(tableNum(InventTrans)).addOrderByField(fieldNum(InventTrans, DateFinancial), SortOrder::Ascending);
        }

        if (contract.parmSortByBatch())
        {
            query.dataSourceTable(tableNum(InventDim)).addOrderByField(fieldNum(InventDim, InventBatchId));
        }

        if (contract.parmSortBySerial())
        {
            query.dataSourceTable(tableNum(InventDim)).addOrderByField(fieldNum(InventDim, InventSerialId));
        }

        // Group by
        qbds = query.dataSourceTable(tableNum(InventValueTransUnionAll));
        qbds.addGroupByField(fieldNum(InventValueTransUnionAll, Voucher));
        qbds.addGroupByField(fieldNum(InventValueTransUnionAll, Reference));
        qbds.addGroupByField(fieldNum(InventValueTransUnionAll, TransDate));
        qbds.addGroupByField(fieldNum(InventValueTransUnionAll, ReferenceCategory));

        qbds = query.dataSourceTable(tableNum(InventTrans));
        qbds.addGroupByField(fieldNum(InventTrans, DateFinancial));
        qbds.addGroupByField(fieldNum(InventTrans, DatePhysical));
        qbds.addGroupByField(fieldNum(InventTrans, StatusReceipt));
        if (contract.parmReportType() == FinancialPhysical::Financial)
        {
            qbds.addGroupByField(fieldNum(InventTrans, InvoiceId));
        }
        else
        {
            qbds.addGroupByField(fieldNum(InventTrans, PackingSlipId));
        }

        qbds = query.dataSourceTable(tableNum(InventDim));
        qbds.addGroupByField(fieldNum(InventDim, ConfigId));
        qbds.addGroupByField(fieldNum(InventDim, InventBatchId));
        qbds.addGroupByField(fieldNum(InventDim, InventColorId));
        qbds.addGroupByField(fieldNum(InventDim, InventSerialId));
        qbds.addGroupByField(fieldNum(InventDim, InventSizeId));
        qbds.addGroupByField(fieldNum(InventDim, InventVersionId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDetailQueryForOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for detail report's opening balance details.
    /// </summary>
    /// <returns>
    /// The query for detail report's opening balance details.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query buildDetailQueryForOpeningBalance()
    {
        Query query = this.buildDetailQueryBase();

        // Date range
        ToDate toDateForOpeningBalance = contract.parmFromDate();
        if (toDateForOpeningBalance)
        {
            toDateForOpeningBalance -= 1;
        }

        QueryBuildDataSource qbds = query.dataSourceTable(tableNum(InventTrans));
        if (contract.parmReportType() == FinancialPhysical::Financial)
        {
            qbds.addRange(fieldNum(InventTrans, DateFinancial)).value(
                SysQuery::range(
                    dateNull(),
                    toDateForOpeningBalance,
                    true));
        }
        else
        {
            qbds.addRange(fieldNum(InventTrans, DatePhysical)).value(
                SysQuery::range(
                    dateNull(),
                    toDateForOpeningBalance,
                    true));
        }

        QueryBuildDataSource qbdsInventValueTransUnionAll = query.dataSourceTable(tableNum(InventValueTransUnionAll));
        QueryHavingFilter havingFilter = query.addHavingFilter(qbdsInventValueTransUnionAll, fieldStr(InventValueTransUnionAll, Qty), AggregateFunction::Sum);
        havingFilter.value(SysQuery::valueNot(0));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the basic query structure for both detail and summary report.
    /// </summary>
    /// <returns>
    /// The basic query for both detail and summary report.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildQueryBase()
    {
        Query                   query = new Query();

        // InventValueTransUnionAll
        QueryBuildDataSource qbdsInventValueTransUnionAll = query.addDataSource(tableNum(InventValueTransUnionAll));
        qbdsInventValueTransUnionAll.addRange(fieldNum(InventValueTransUnionAll, IsPosted)).value(queryValue(NoYes::Yes));

        qbdsInventValueTransUnionAll.addGroupByField(fieldNum(InventValueTransUnionAll, ItemId));

        qbdsInventValueTransUnionAll.addSelectionField(fieldNum(InventValueTransUnionAll, Qty), SelectionField::Sum);
        qbdsInventValueTransUnionAll.addSelectionField(fieldNum(InventValueTransUnionAll, Amount), SelectionField::Sum);

        // InventValueTransUnionAll <-- InventDim
        QueryBuildDataSource qbds = qbdsInventValueTransUnionAll.addDataSource(tableNum(InventDim));
        qbds.relations(false);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(InventValueTransUnionAll, InventDimId), fieldNum(InventDim, InventDimId));

        // InventValueTransUnionAll <-- InventTransOrigin
        qbds = qbdsInventValueTransUnionAll.addDataSource(tableNum(InventTransOrigin));
        qbds.relations(false);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(InventValueTransUnionAll, InventTransId), fieldNum(InventTransOrigin, InventTransId));

        // InventValueTransUnionAll <-- InventTrans
        qbds = qbdsInventValueTransUnionAll.addDataSource(tableNum(InventTrans));
        qbds.relations(false);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(InventValueTransUnionAll, InventTransRecId), fieldNum(InventTrans, RecId), qbdsInventValueTransUnionAll.name());

        // InventValueTransUnionAll <-- InventTable
        qbds = qbdsInventValueTransUnionAll.addDataSource(tableNum(InventTable));
        qbds.relations(false);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(InventValueTransUnionAll, ItemId), fieldNum(InventTable, ItemId));
        qbds.addGroupByField(fieldNum(InventTable, Product));

        // InventValueTransUnionAll <-- InventTable <-- InventModelGroupItem
        qbds = qbds.addDataSource(tableNum(InventModelGroupItem));
        qbds.relations(true);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        // InventValueTransUnionAll <-- InventTable <-- InventModelGroupItem <-- InventModelGroup
        qbds = qbds.addDataSource(tableNum(InventModelGroup));
        qbds.relations(true);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addGroupByField(fieldNum(InventModelGroup, InventModel));

        // InventValueTransUnionAll <-- InventTable <-- InventTableModule
        qbds = query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventTableModule));
        qbds.relations(true);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::OuterJoin);
        qbds.addRange(fieldNum(InventTableModule, ModuleType)).value(queryValue(ModuleInventPurchSales::Invent));
        qbds.addGroupByField(fieldNum(InventTableModule, UnitId));

        // Apply basic parameterss
        this.applyBaseParmsToQuery(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSummaryQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for summary report.
    /// </summary>
    /// <returns>
    /// The query for summary report.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query buildSummaryQuery()
    {
        QueryBuildDataSource    qbds;

        Query query = this.buildQueryBase();

        // Date range
        if (contract.parmFromDate() || contract.parmToDate())
        {
            qbds = query.dataSourceTable(tableNum(InventTrans));
            if (contract.parmReportType() == FinancialPhysical::Financial)
            {
                qbds.addRange(fieldNum(InventTrans, DateFinancial)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
            }
            else
            {
                qbds.addRange(fieldNum(InventTrans, DatePhysical)).value(queryRange(contract.parmFromDate(), contract.parmToDate()));
                qbds.addRange(fieldnum(InventTrans, InvoiceId)).value(SysQuery::valueEmptyString());
            }
        }

        // Grouping by 'Item group'
        if (contract.parmGroupByItemGroup())
        {
            qbds = query.dataSourceTable(tableNum(InventTable)).addDataSource(tableNum(InventItemGroupItem));
            qbds.relations(true);
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.joinMode(JoinMode::OuterJoin);
            qbds.addGroupByField(fieldNum(InventItemGroupItem, ItemGroupId));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
