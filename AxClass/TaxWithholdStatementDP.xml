<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdStatementReportDP</c> class is the base report data provider class for the
/// <c>TaxWithholdStatement</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(TaxWithholdStatementContract))
]
class TaxWithholdStatementDP extends SRSReportDataProviderPreProcessTempDB
{
    TaxWithholdStatementTmpParameter        statementTmpParameter;
    TaxWithholdStatementTmpParticularInfo   statementTmpParticularInfo;
    TaxWithholdStatementTmpConstantString   statementTmpConstantString;
    TaxWithholdStatementTmpTransSummary     statementTmpTransSummary;
    TaxWithholdStatementTmpTrans            statementTmpTrans;

    //Tmp table and contract class
    TaxWithholdStatementTmpParticularInfo   particularInfoTmpTable;
    TaxWithholdStatementContract            contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxWithholdStatementTmpConstantString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TaxWithholdStatementTmpConstantString</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdStatementTmpConstantString</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdStatementTmpConstantString))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpConstantString getTaxWithholdStatementTmpConstantString()
    {
        return statementTmpConstantString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdStatementTmpParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TaxWithholdStatementTmpParameter</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdStatementTmpParameter</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdStatementTmpParameter))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpParameter getTaxWithholdStatementTmpParameter()
    {
        return statementTmpParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdStatementTmpParticularInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TaxWithholdStatementTmpParticularInfo</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdStatementTmpParticularInfo</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdStatementTmpParticularInfo))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpParticularInfo getTaxWithholdStatementTmpParticularInfo()
    {
        return statementTmpParticularInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdStatementTmpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TaxWithholdStatementTmpTrans</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdStatementTmpTrans</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdStatementTmpTrans))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpTrans getTaxWithholdStatementTmpTrans()
    {
        return statementTmpTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdStatementTmpTransSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>TaxWithholdStatementTmpTransSummary</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdStatementTmpTransSummary</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdStatementTmpTransSummary))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdStatementTmpTransSummary getTaxWithholdStatementTmpTransSummary()
    {
        return statementTmpTransSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdStatementReportHelper    taxWithholdStatementReportHelper;
        TransDate                           fromDate;
        TransDate                           toDate;
        TaxWithholdPeriodEnd_IN             periodEnd;

        contract = this.parmDataContract();

        [periodEnd, fromDate, toDate] = TaxWithholdStatementReportHelper::getFromToDateAndPeriodEnd(contract.parmTaxWithholdDate());

        //Construct the helper class
        taxWithholdStatementReportHelper = TaxWithholdStatementReportHelper::construct(
            contract.parmStatementFiledearlier(),
            contract.parmProvisionalReceiptNumber(),
            contract.parmTaxAccountNumber(),
            contract.parmStatement(),
            contract.parmTaxType(),
            contract.parmTaxWithholdDate(),
            periodEnd,
            contract.parmResponsiblePerson(),
            contract.parmFullName(),
            contract.parmDesignation(),
            contract.parmPrintDate(),
            contract.parmUtilityName(),
            contract.parmEfiling(),
            contract.parmCorrectedEfiling(),
            contract.parmFileName(),
            contract.parmEfilingFiled(),
            fromdate,
            todate);
        statementTmpConstantString   = taxWithholdStatementReportHelper.parmConstantStringTmpTable(statementTmpConstantString);
        statementTmpParameter        = taxWithholdStatementReportHelper.parmParameterTmpTable(statementTmpParameter);
        statementTmpParticularInfo   = taxWithholdStatementReportHelper.parmParticularInfoTmpTable(statementTmpParticularInfo);
        statementTmpTransSummary     = taxWithholdStatementReportHelper.parmTaxtransSummaryTmpTable(statementTmpTransSummary);
        statementTmpTrans            = taxWithholdStatementReportHelper.parmTaxTransTmpTable(statementTmpTrans);

        taxWithholdStatementReportHelper.initTemporaryTables();

        select firstOnly RecId from statementTmpTransSummary;
        if (!statementTmpTransSummary.RecId)
        {
            statementTmpTransSummary.clear();
            statementTmpTransSummary.SerialNumber = 1;
            statementTmpTransSummary.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>