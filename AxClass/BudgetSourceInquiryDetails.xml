<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetSourceInquiryDetails</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetSourceInquiryDetails</c> class is used to inquire about the details tracked by the
///    budgetary control system for the budget source reference.
/// </summary>
/// <remarks>
///    Details are only retrieved from the database when the class is initialized.
/// </remarks>
public class BudgetSourceInquiryDetails implements SysPackable
{
    recId budgetSourceRecId;
    BudgetSourceTrackingStatus trackingStatus;
    boolean isSimulation;

    // Set used to track LegalEntityId+SourceLedgerDimension in tracking for BudgetSource
    Set legalEntitySourceDimensions;
    SetEnumerator legalEntitySourceDimensionsEnumerator;

    // Map used to track LedgerDimension (Source) by LegalEntityId+SourceLedgerDimension
    // Key: LegalEntityId+SourceLedgerDimension (String)
    // Value: LedgerDimension - Source (Int64)
    Map sourceDimensions;

    // Map used to track LegalEntity by LegalEntityId+SourceLedgerDimension
    // Key: LegalEntityId+SourceLedgerDimension (String)
    // Value: LegalEntityId (Int64)
    Map legalEntities;

    // Map used to track LedgerDimension (Control) by LegalEntityId+SourceLedgerDimension
    // Key: LegalEntityId+SourceLedgerDimension (String)
    // Value: LedgerDimension - Control (Int64)
    Map controlDimensions;

    // Map used to track accounting currency amount by LegalEntityId+SourceLedgerDimension
    // Key: LegalEntityId+SourceLedgerDimension (String)
    // Value: Amount tracked (Real)
    Map amountsTracked;

    // Map used to track relieved amount by LegalEntityId+SourceLedgerDimension
    // Key: LegalEntityId+SourceLedgerDimension (String)
    // Value: Amount relieved (Real)
    Map amountsRelieved;

    // Map used to track available budget by LegalEntityId+SourceLedgerDimension
    // Key: LegalEntityId+SourceLedgerDimension (String)
    // Value: Amount Available (Real)
    Map amountsAvailable;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        budgetSourceRecId,
        trackingStatus,
        isSimulation
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the count of ledger dimension references tracked for the budget source reference of the
    ///    instance of the class.
    /// </summary>
    /// <returns>
    ///    The count of ledger dimension references tracked.
    /// </returns>
    public int count()
    {
        return legalEntitySourceDimensions.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentAmountAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount available for the reference of the current ledger dimension.
    /// </summary>
    /// <returns>
    ///    The amount available for the reference of the current ledger dimension.
    /// </returns>
    /// <remarks>
    ///    The amount available is calculated as the amount tracked less the amount relieved.
    /// </remarks>
    public AmountMST currentAmountAvailable()
    {
        return this.getAmountAvailable(this.currentLegalEntityId(), this.currentSourceLedgerDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentAmountRelieved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount relieved for the reference of the current ledger dimension.
    /// </summary>
    /// <returns>
    ///    The amount relieved for the reference of the current ledger dimension.
    /// </returns>
    public AmountMST currentAmountRelieved()
    {
        return this.getAmountRelieved(this.currentLegalEntityId(), this.currentSourceLedgerDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentAmountTracked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount tracked for the current ledger dimension reference.
    /// </summary>
    /// <returns>
    ///    The amount tracked for the current ledger dimension reference.
    /// </returns>
    public AmountMST currentAmountTracked()
    {
        return this.getAmountTracked(this.currentLegalEntityId(), this.currentSourceLedgerDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentControlLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the control ledger dimension reference for the current ledger dimension reference.
    /// </summary>
    /// <returns>
    ///    The control ledger dimension reference for the current ledger dimension reference.
    /// </returns>
    /// <remarks>
    ///    The control ledger dimension reference is determined by what is stored by the budgetary control
    ///    system for the budget source reference.
    /// </remarks>
    public LedgerDimensionBudgetControl currentControlLedgerDimension()
    {
        return this.getControlLedgerDimension(this.currentLegalEntityId(), this.currentSourceLedgerDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLegalEntityId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the legal entity of the current ledger dimension reference.
    /// </summary>
    /// <returns>
    ///    The current legal entity reference.
    /// </returns>
    public recId currentLegalEntityId()
    {
        if (legalEntities.exists(legalEntitySourceDimensionsEnumerator.current()))
        {
            return legalEntities.lookup(legalEntitySourceDimensionsEnumerator.current());
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSourceLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current ledger dimension reference.
    /// </summary>
    /// <returns>
    ///    The current ledger dimension reference.
    /// </returns>
    public LedgerDimensionBase currentSourceLedgerDimension()
    {
        if (sourceDimensions.exists(legalEntitySourceDimensionsEnumerator.current()))
        {
            return sourceDimensions.lookup(legalEntitySourceDimensionsEnumerator.current());
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for existence of the ledger dimension reference for the budget source reference.
    /// </summary>
    /// <param name="_legalEntityId">
    /// The legal entity of the ledger dimension reference to check for existence.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The ledger dimension reference to check for existence.
    /// </param>
    /// <returns>
    /// true if the ledger dimension reference exists; otherwise, false.
    /// </returns>
    public boolean exists(recId _legalEntityId, LedgerDimensionBase _sourceLedgerDimension)
    {
        return legalEntitySourceDimensions.in(this.getKey(_legalEntityId, _sourceLedgerDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount available for the given ledger dimension reference.
    /// </summary>
    /// <param name="_legalEntityId">
    /// The legal entity of the ledger dimension reference for which to get the amount available.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The ledger dimension reference for which to get the amount available.
    /// </param>
    /// <returns>
    /// The amount available for the given ledger dimension reference.
    /// </returns>
    public AmountMST getAmountAvailable(recId _legalEntityId, LedgerDimensionBase _sourceLedgerDimension)
    {
        if (amountsAvailable.exists(this.getKey(_legalEntityId, _sourceLedgerDimension)))
        {
            return amountsAvailable.lookup(this.getKey(_legalEntityId, _sourceLedgerDimension));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountRelieved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount relieved for the given ledger dimension reference.
    /// </summary>
    /// <param name="_legalEntityId">
    /// The legal entity of the ledger dimension reference for which to get the amount relieved.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The ledger dimension reference for which to get the amount relieved.
    /// </param>
    /// <returns>
    /// The amount relieved for the given ledger dimension reference.
    /// </returns>
    public AmountMST getAmountRelieved(recId _legalEntityId, LedgerDimensionBase _sourceLedgerDimension)
    {
        if (amountsRelieved.exists(this.getKey(_legalEntityId, _sourceLedgerDimension)))
        {
            return amountsRelieved.lookup(this.getKey(_legalEntityId, _sourceLedgerDimension));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountTracked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount tracked for the given ledger dimension reference.
    /// </summary>
    /// <param name="_legalEntityId">
    /// The legal entity of the ledger dimension reference for which to get the amount tracked.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The ledger dimension reference for which to get the amount tracked.
    /// </param>
    /// <returns>
    /// The amount tracked for the given ledger dimension reference.
    /// </returns>
    public AmountMST getAmountTracked(recId _legalEntityId, LedgerDimensionBase _sourceLedgerDimension)
    {
        if (amountsTracked.exists(this.getKey(_legalEntityId, _sourceLedgerDimension)))
        {
            return amountsTracked.lookup(this.getKey(_legalEntityId, _sourceLedgerDimension));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the control ledger dimension reference for the given ledger dimension reference.
    /// </summary>
    /// <param name="_legalEntityId">
    /// The legal entity of the ledger dimension reference for which to get the control ledger dimension reference.
    /// </param>
    /// <param name="_sourceLedgerDimension">
    /// The ledger dimension reference for which to get the control ledger dimension reference.
    /// </param>
    /// <returns>
    /// The control ledger dimension reference for the given ledger dimension reference.
    /// </returns>
    /// <remarks>
    /// The control ledger dimension reference is determined by what is stored by the budgetary
    /// control system for the budget source reference.
    /// </remarks>
    public LedgerDimensionBudgetControl getControlLedgerDimension(recId _legalEntityId, LedgerDimensionBase _sourceLedgerDimension)
    {
        if (controlDimensions.exists(this.getKey(_legalEntityId, _sourceLedgerDimension)))
        {
            return controlDimensions.lookup(this.getKey(_legalEntityId, _sourceLedgerDimension));
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKey</Name>
				<Source><![CDATA[
    private str getKey(recId _legalEntityId, recId _ledgerDimension)
    {
        return strfmt('%1%2', _legalEntityId, _ledgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget source tracking status of the current budget source reference.
    /// </summary>
    /// <returns>
    ///    The budget source tracking status.
    /// </returns>
    public BudgetSourceTrackingStatus getStatus()
    {
        return trackingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>BudgetSourceInquiryDetails</c> class for the specified budget
    ///    source reference.
    /// </summary>
    /// <param name="_budgetSourceRecId">
    ///    The budget source reference for an instance of the <c>BudgetSourceInquiryDetails</c> class.
    /// </param>
    /// <param name="_includeCarryforwardDetails">
    ///    A Boolean that indicates whether to include carryforward amounts in the inquiry details.
    /// </param>
    protected void initialize(
        recId _budgetSourceRecId,
        boolean _includeCarryforwardDetails)
    {
        budgetSourceRecId = _budgetSourceRecId;

        // Populate data collections
        if (_includeCarryforwardDetails)
        {
            this.initializeWithCarryforwardDetails();
        }
        else
        {
            this.initializeNoCarryforwardDetails();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the enumerator for the specified object.
    /// </summary>
    protected void initializeEnumerator()
    {
        // Initialize the enumerator for the class
        legalEntitySourceDimensionsEnumerator = legalEntitySourceDimensions.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeNoCarryforwardDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the class for the budget source reference. Do not include carryforward amounts in the inquiry details.
    /// </summary>
    protected void initializeNoCarryforwardDetails()
    {
        BudgetSourceTracking currentTracking;
        BudgetSource source;
        BudgetSourceTracking tracking;
        BudgetSourceTrackingDetail detail;
        BudgetSourceTrackingRelievingDetail relieving;
        recId legalEntityId;
        Map legalEntitiesByPrimaryLedger = new Map(Types::Int64, Types::Int64);
        str sourceLedgerDimensionKey;
        AmountMST totalAmountsTracked;
        AmountMST totalAmountsRelieved;
        AmountMST totalAmountsAvailable;

        currentTracking = BudgetSourceTracking::findByBudgetSource(budgetSourceRecId);
        trackingStatus = currentTracking.Status;
        isSimulation = currentTracking.IsSimulation;

        if (isSimulation)
        {
            while select detail
                join RecId from tracking
                    where detail.BudgetSourceTracking == currentTracking.RecId &&
                        detail.IsCarryForward == NoYes::No &&
                        detail.IsDeletePending == NoYes::No &&
                        detail.IsSummarized == NoYes::Yes &&
                        tracking.IsDeletePending == NoYes::No
                join RecId from source
                    where tracking.BudgetSource == source.RecId &&
                        source.RecId == budgetSourceRecId &&
                        source.IsDeletePending == NoYes::No
                outer join sum(AccountingCurrencyAmount) from relieving
                    group by detail.BudgetSourceLedgerDimension,
                             detail.PrimaryLedger,
                             detail.BudgetControlLedgerDimension,
                             detail.AccountingCurrencyAmount,
                             detail.RecId,
                             relieving.RelievedBudgetSourceTrackingDetail
                    where relieving.RelievedBudgetSourceTrackingDetail == detail.RecId &&
                          relieving.IsDeletePending == NoYes::No &&
                          relieving.IsSummarized == NoYes::Yes
            {
                if (legalEntitiesByPrimaryLedger.exists(detail.PrimaryLedger))
                {
                    legalEntityId = legalEntitiesByPrimaryLedger.lookup(detail.PrimaryLedger);
                }
                else
                {
                    legalEntityId = Ledger::primaryForLegalEntity(detail.PrimaryLedger);
                    legalEntitiesByPrimaryLedger.insert(detail.PrimaryLedger, legalEntityId);
                }

                sourceLedgerDimensionKey = this.getKey(legalEntityId, detail.BudgetSourceLedgerDimension);

                legalEntitySourceDimensions.add(sourceLedgerDimensionKey);
                sourceDimensions.insert(sourceLedgerDimensionKey, detail.BudgetSourceLedgerDimension);
                legalEntities.insert(sourceLedgerDimensionKey, legalEntityId);
                controlDimensions.insert(sourceLedgerDimensionKey, detail.BudgetControlLedgerDimension);

                if (amountsTracked.exists(sourceLedgerDimensionKey))
                {
                    totalAmountsTracked = amountsTracked.lookup(sourceLedgerDimensionKey);
                    totalAmountsTracked += detail.AccountingCurrencyAmount;

                    totalAmountsRelieved = amountsRelieved.lookup(sourceLedgerDimensionKey);
                    totalAmountsRelieved += relieving.AccountingCurrencyAmount;
                }
                else
                {
                    totalAmountsTracked = detail.AccountingCurrencyAmount;
                    totalAmountsRelieved = relieving.AccountingCurrencyAmount;
                }

                totalAmountsAvailable = totalAmountsTracked + totalAmountsRelieved;

                amountsTracked.insert(sourceLedgerDimensionKey, totalAmountsTracked);
                amountsRelieved.insert(sourceLedgerDimensionKey, totalAmountsRelieved);
                amountsAvailable.insert(sourceLedgerDimensionKey, totalAmountsAvailable);
            }
        }
        else
        {
            while select detail
                join RecId from tracking
                    where tracking.RecId == detail.BudgetSourceTracking &&
                        tracking.IsSimulation == NoYes::No &&
                        tracking.IsDeletePending == NoYes::No &&
                        detail.IsCarryForward == NoYes::No &&
                        detail.IsDeletePending == NoYes::No &&
                        detail.IsSummarized == NoYes::Yes
                join RecId from source
                    where tracking.BudgetSource == source.RecId &&
                        source.RecId == budgetSourceRecId &&
                        source.IsDeletePending == NoYes::No
                outer join sum(AccountingCurrencyAmount) from relieving
                    group by detail.BudgetSourceLedgerDimension,
                             detail.PrimaryLedger,
                             detail.BudgetControlLedgerDimension,
                             detail.AccountingCurrencyAmount,
                             detail.RecId,
                             relieving.RelievedBudgetSourceTrackingDetail
                    where relieving.RelievedBudgetSourceTrackingDetail == detail.RecId &&
                          relieving.IsDeletePending == NoYes::No &&
                          relieving.IsSummarized == NoYes::Yes
            {
                if (legalEntitiesByPrimaryLedger.exists(detail.PrimaryLedger))
                {
                    legalEntityId = legalEntitiesByPrimaryLedger.lookup(detail.PrimaryLedger);
                }
                else
                {
                    legalEntityId = Ledger::primaryForLegalEntity(detail.PrimaryLedger);
                    legalEntitiesByPrimaryLedger.insert(detail.PrimaryLedger, legalEntityId);
                }

                sourceLedgerDimensionKey = this.getKey(legalEntityId, detail.BudgetSourceLedgerDimension);

                legalEntitySourceDimensions.add(sourceLedgerDimensionKey);
                sourceDimensions.insert(sourceLedgerDimensionKey, detail.BudgetSourceLedgerDimension);
                legalEntities.insert(sourceLedgerDimensionKey, legalEntityId);
                controlDimensions.insert(sourceLedgerDimensionKey, detail.BudgetControlLedgerDimension);

                if (amountsTracked.exists(sourceLedgerDimensionKey))
                {
                    totalAmountsTracked = amountsTracked.lookup(sourceLedgerDimensionKey);
                    totalAmountsTracked += detail.AccountingCurrencyAmount;

                    totalAmountsRelieved = amountsRelieved.lookup(sourceLedgerDimensionKey);
                    totalAmountsRelieved += relieving.AccountingCurrencyAmount;
                }
                else
                {
                    totalAmountsTracked = detail.AccountingCurrencyAmount;
                    totalAmountsRelieved = relieving.AccountingCurrencyAmount;
                }

                totalAmountsAvailable = totalAmountsTracked + totalAmountsRelieved;

                amountsTracked.insert(sourceLedgerDimensionKey, totalAmountsTracked);
                amountsRelieved.insert(sourceLedgerDimensionKey, totalAmountsRelieved);
                amountsAvailable.insert(sourceLedgerDimensionKey, totalAmountsAvailable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWithCarryforwardDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance of the class for the budget source reference. Include carryforward amounts in the inquiry details.
    /// </summary>
    protected void initializeWithCarryforwardDetails()
    {
        BudgetSourceTracking currentTracking;
        BudgetSource source;
        BudgetSourceTracking tracking;
        BudgetSourceTrackingDetail detail;
        BudgetSourceTrackingRelievingDetail relieving;
        recId legalEntityId;
        Map legalEntitiesByPrimaryLedger = new Map(Types::Int64, Types::Int64);
        str sourceLedgerDimensionKey;
        AmountMST totalAmountsTracked;
        AmountMST totalAmountsRelieved;
        AmountMST totalAmountsAvailable;

        currentTracking = BudgetSourceTracking::findByBudgetSource(budgetSourceRecId);
        trackingStatus = currentTracking.Status;
        isSimulation = currentTracking.IsSimulation;

        if (isSimulation)
        {
            while select detail
                join RecId from tracking
                    where detail.BudgetSourceTracking == currentTracking.RecId &&
                        detail.IsDeletePending == NoYes::No &&
                        detail.IsSummarized == NoYes::Yes &&
                        tracking.IsDeletePending == NoYes::No
                join RecId from source
                    where tracking.BudgetSource == source.RecId &&
                        source.RecId == budgetSourceRecId &&
                        source.IsDeletePending == NoYes::No
                outer join sum(AccountingCurrencyAmount) from relieving
                    group by detail.BudgetSourceLedgerDimension,
                             detail.PrimaryLedger,
                             detail.BudgetControlLedgerDimension,
                             detail.AccountingCurrencyAmount,
                             detail.RecId,
                             relieving.RelievedBudgetSourceTrackingDetail
                    where relieving.RelievedBudgetSourceTrackingDetail == detail.RecId &&
                          relieving.IsDeletePending == NoYes::No &&
                          relieving.IsSummarized == NoYes::Yes
            {
                if (legalEntitiesByPrimaryLedger.exists(detail.PrimaryLedger))
                {
                    legalEntityId = legalEntitiesByPrimaryLedger.lookup(detail.PrimaryLedger);
                }
                else
                {
                    legalEntityId = Ledger::primaryForLegalEntity(detail.PrimaryLedger);
                    legalEntitiesByPrimaryLedger.insert(detail.PrimaryLedger, legalEntityId);
                }

                sourceLedgerDimensionKey = this.getKey(legalEntityId, detail.BudgetSourceLedgerDimension);

                legalEntitySourceDimensions.add(sourceLedgerDimensionKey);
                sourceDimensions.insert(sourceLedgerDimensionKey, detail.BudgetSourceLedgerDimension);
                legalEntities.insert(sourceLedgerDimensionKey, legalEntityId);
                controlDimensions.insert(sourceLedgerDimensionKey, detail.BudgetControlLedgerDimension);

                if (amountsTracked.exists(sourceLedgerDimensionKey))
                {
                    totalAmountsTracked = amountsTracked.lookup(sourceLedgerDimensionKey);
                    totalAmountsTracked += detail.AccountingCurrencyAmount;

                    totalAmountsRelieved = amountsRelieved.lookup(sourceLedgerDimensionKey);
                    totalAmountsRelieved += relieving.AccountingCurrencyAmount;
                }
                else
                {
                    totalAmountsTracked = detail.AccountingCurrencyAmount;
                    totalAmountsRelieved = relieving.AccountingCurrencyAmount;
                }

                totalAmountsAvailable = totalAmountsTracked + totalAmountsRelieved;

                amountsTracked.insert(sourceLedgerDimensionKey, totalAmountsTracked);
                amountsRelieved.insert(sourceLedgerDimensionKey, totalAmountsRelieved);
                amountsAvailable.insert(sourceLedgerDimensionKey, totalAmountsAvailable);
            }
        }
        else
        {
            while select detail
                join RecId from tracking
                    where detail.BudgetSourceTracking == tracking.RecId &&
                        detail.IsDeletePending == NoYes::No &&
                        detail.IsSummarized == NoYes::Yes &&
                        tracking.IsSimulation == NoYes::No &&
                        tracking.IsDeletePending == NoYes::No
                join RecId from source
                    where tracking.BudgetSource == source.RecId &&
                        source.RecId == budgetSourceRecId &&
                        source.IsDeletePending == NoYes::No
                outer join sum(AccountingCurrencyAmount) from relieving
                    group by detail.BudgetSourceLedgerDimension,
                             detail.PrimaryLedger,
                             detail.BudgetControlLedgerDimension,
                             detail.AccountingCurrencyAmount,
                             detail.RecId,
                             relieving.RelievedBudgetSourceTrackingDetail
                    where relieving.RelievedBudgetSourceTrackingDetail == detail.RecId &&
                          relieving.IsDeletePending == NoYes::No &&
                          relieving.IsSummarized == NoYes::Yes
            {
                if (legalEntitiesByPrimaryLedger.exists(detail.PrimaryLedger))
                {
                    legalEntityId = legalEntitiesByPrimaryLedger.lookup(detail.PrimaryLedger);
                }
                else
                {
                    legalEntityId = Ledger::primaryForLegalEntity(detail.PrimaryLedger);
                    legalEntitiesByPrimaryLedger.insert(detail.PrimaryLedger, legalEntityId);
                }

                sourceLedgerDimensionKey = this.getKey(legalEntityId, detail.BudgetSourceLedgerDimension);

                legalEntitySourceDimensions.add(sourceLedgerDimensionKey);
                sourceDimensions.insert(sourceLedgerDimensionKey, detail.BudgetSourceLedgerDimension);
                legalEntities.insert(sourceLedgerDimensionKey, legalEntityId);
                controlDimensions.insert(sourceLedgerDimensionKey, detail.BudgetControlLedgerDimension);

                if (amountsTracked.exists(sourceLedgerDimensionKey))
                {
                    totalAmountsTracked = amountsTracked.lookup(sourceLedgerDimensionKey);
                    totalAmountsTracked += detail.AccountingCurrencyAmount;

                    totalAmountsRelieved = amountsRelieved.lookup(sourceLedgerDimensionKey);
                    totalAmountsRelieved += relieving.AccountingCurrencyAmount;
                }
                else
                {
                    totalAmountsTracked = detail.AccountingCurrencyAmount;
                    totalAmountsRelieved = relieving.AccountingCurrencyAmount;
                }

                totalAmountsAvailable = totalAmountsTracked + totalAmountsRelieved;

                amountsTracked.insert(sourceLedgerDimensionKey, totalAmountsTracked);
                amountsRelieved.insert(sourceLedgerDimensionKey, totalAmountsRelieved);
                amountsAvailable.insert(sourceLedgerDimensionKey, totalAmountsAvailable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSimulation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the simulation status of the current budget source reference.
    /// </summary>
    /// <returns>
    ///    true if the budget source is a simulation; otherwise, false.
    /// </returns>
    public boolean isSimulation()
    {
        return isSimulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        budgetSourceRecId = 0;

        legalEntitySourceDimensions = new Set(Types::String);
        sourceDimensions = new Map(Types::String, Types::Int64);
        legalEntities = new Map(Types::String, Types::Int64);
        controlDimensions = new Map(Types::String, Types::Int64);
        amountsTracked = new Map(Types::String, Types::Real);
        amountsRelieved = new Map(Types::String, Types::Real);
        amountsAvailable = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Advances the enumerator to the next ledger dimension reference in the collection.
    /// </summary>
    /// <returns>
    ///    true if the enumerator finds a ledger dimension reference; otherwise, false.
    /// </returns>
    public boolean next()
    {
        return legalEntitySourceDimensionsEnumerator.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, [#CurrentList, legalEntitySourceDimensions.pack(), sourceDimensions.pack(), legalEntities.pack(), controlDimensions.pack(), amountsTracked.pack(), amountsRelieved.pack(), amountsAvailable.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the enumerator to the start of the ledger dimension reference collection.
    /// </summary>
    public void resetCurrent()
    {
        legalEntitySourceDimensionsEnumerator.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedBudgetSourceInquiryDetails)
    {
        int version = conpeek(_packedBudgetSourceInquiryDetails, 1);
        container packedClassMembers;
        container packedlegalEntitySourceDims;
        container packedSourceDims;
        container packedLegalEntities;
        container packedControlDims;
        container packedAmountsTracked;
        container packedAmountsRelieved;
        container packedAmountsAvailable;

        switch (version)
        {
            case #CurrentVersion:
                // Extract packed values
                [version, packedClassMembers] = _packedBudgetSourceInquiryDetails;

                // Extract the #CurrentList & packed collections
                [#CurrentList, packedLegalEntitySourceDims, packedSourceDims, packedLegalEntities, packedControlDims, packedAmountsTracked, packedAmountsRelieved, packedAmountsAvailable] = packedClassMembers;

                break;

            default:
                return false;
        }

        // Unpack the packed details
        if (packedLegalEntitySourceDims != connull())
        {
            legalEntitySourceDimensions = Set::create(packedLegalEntitySourceDims);
        }

        if (packedSourceDims != connull())
        {
            sourceDimensions = Map::create(packedSourceDims);
        }

        if (packedLegalEntities != connull())
        {
            legalEntities = Map::create(packedLegalEntities);
        }

        if (packedControlDims != connull())
        {
            controlDimensions = Map::create(packedControlDims);
        }

        if (packedAmountsTracked != connull())
        {
            amountsTracked = Map::create(packedAmountsTracked);
        }

        if (packedAmountsRelieved != connull())
        {
            amountsRelieved = Map::create(packedAmountsRelieved);
        }

        if (packedAmountsAvailable != connull())
        {
            amountsAvailable = Map::create(packedAmountsAvailable);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetSourceInquiryDetails</c> class.
    /// </summary>
    /// <param name="_budgetSourceRecId">
    ///    The budget source reference for which to initialize the <c>BudgetSourceInquiryDetails</c> class.
    /// </param>
    /// <param name="_includeCarryforwardDetails">
    ///    A Boolean that indicates whether to include carryforward amounts in the inquiry details.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceInquiryDetails</c> class when the specified budget source
    ///    reference is valid; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    Details are only retrieved from the database when the class is initialized.
    /// </remarks>
    public static BudgetSourceInquiryDetails construct(
        recId _budgetSourceRecId,
        boolean _includeCarryforwardDetails = true)
    {
        BudgetSourceInquiryDetails inquiryDetails;
        BudgetSource source;

        if (_budgetSourceRecId != 0)
        {
            source = BudgetSource::find(_budgetSourceRecId);

            if (source)
            {
                inquiryDetails = new BudgetSourceInquiryDetails();
                inquiryDetails.initialize(_budgetSourceRecId, _includeCarryforwardDetails);

                // Initialize the enumerator for the class - must happen after initialize on tier of object
                inquiryDetails.initializeEnumerator();
            }
        }

        return inquiryDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetSourceInquiryDetails</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetSourceInquiryDetails">
    ///    The packed instance of the <c>BudgetSourceInquiryDetails</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetSourceInquiryDetails</c> class.
    /// </returns>
    public static BudgetSourceInquiryDetails create(container _packedBudgetSourceInquiryDetails)
    {
        BudgetSourceInquiryDetails inquiryDetails = new BudgetSourceInquiryDetails();

        inquiryDetails.unpack(_packedBudgetSourceInquiryDetails);

        // Initialize the enumerator for the class - must happen after unpacking on tier of object
        inquiryDetails.initializeEnumerator();

        return inquiryDetails;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>