<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaymTotals_CustInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>MCRCustPaymTotals_CustInvoice</c> is responsible for managing a list of payments associated with a
///     free-text invoice.
/// </summary>
class MCRCustPaymTotals_CustInvoice extends MCRCustPaymTotals
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateInvoiceID</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Allocates the invoice ID for the free-text invoice.
    /// </summary>
    /// <remarks>
    /// The invoice ID is the user-readable unique ID for a free-text invoice,
    ///     and is required for credit card authorization and settlement.
    ///     Two additional fields are generated at the same time as the invoice ID:
    ///     ledgerVoucher and numberSequenceCode.
    /// </remarks>
    public  void allocateInvoiceID()
    {
        CustInvoiceTable custInvoiceTable;

        CustPostInvoice custPostInvoice;

        NumberSeq numberSeq;

        InvoiceId invoiceId;
        Voucher voucher;

        setPrefix("@MCR11025");

        ttsBegin;

        custInvoiceTable = this.findCustInvoiceTable(true);

        // allocate the invoice ID and voucher, and update the free-text invoice
        if (!custInvoiceTable.InvoiceId)
        {
            custPostInvoice = CustPostInvoice::construct(custInvoiceTable, TypeOfCreditmaxCheck::None);

            numberSeq = custPostInvoice.allocateNumAndVoucher();

            [invoiceId, voucher] = numberSeq.numAndVoucher();

            if (!voucher)
            {
                throw error("@SYS71652");
            }

            custInvoiceTable.InvoiceId = invoiceId;
            custInvoiceTable.MCRLedgerVoucher = voucher;
            custInvoiceTable.MCRNumberSequenceCode = numberSeq.parmVoucherSequenceCode();

            custInvoiceTable.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if payments may be edited by the user.
    /// </summary>
    /// <returns>
    /// true if the payments may be edited by the user; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Overridden to only allow editing when the free-text invoice has not
    ///     been posted.
    /// </remarks>
    public boolean allowEdit()
    {
        return this.findCustInvoiceTable().Posted == NoYes::Yes ? false: true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoicePaymAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the invoice payment amount.
    /// </summary>
    /// <param name="custInvoiceJour">
    /// The customer invoice journal to validate against the customer invoice record.
    /// </param>
    /// <returns>
    /// The invoice payment amount.
    /// </returns>
    protected AmountCur calcInvoicePaymAmount(CustInvoiceJour custInvoiceJour)
    {
        if (custInvoiceJour.InvoiceId != this.findCustInvoiceTable().InvoiceId)
        {
            throw error(strFmt("@MCR10769", funcName()) + "@MCR10985");
        }

       // calculate the sum of payment amounts, excluding "On account"
        return this.getTotalPaymAmount() - this.getTotalPaymAmount_OnAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the free-text invoice associated with this list of payments.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The free-text invoice associated with this list of payments.
    /// </returns>
    private CustInvoiceTable findCustInvoiceTable(boolean _forUpdate = false)
    {
        return CustInvoiceTable::findRecId(refRecID, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the currency for all payments.
    /// </summary>
    /// <returns>
    /// The currency for all payments.
    /// </returns>
    public CurrencyCode getCurrency()
    {
        return CustInvoiceTable::findRecId(refRecID).CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the financial dimensions for all payments.
    /// </summary>
    /// <returns>
    /// The financial dimensions for all payments.
    /// </returns>
    public DimensionDefault getDimension()
    {
        return CustInvoiceTable::findRecId(refRecID).DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the invoice account for all payments.
    /// </summary>
    /// <returns>
    /// The invoice account for all payments.
    /// </returns>
    public CustAccount getInvoiceAccount()
    {
        return CustInvoiceTable::findRecId(refRecID).InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderID</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the order ID for all payments.
    /// </summary>
    /// <returns>
    /// The order ID for all payments.
    /// </returns>
    /// <remarks>
    /// The "order ID" is the invoice ID for the free-text invoice.
    /// </remarks>
    public Num getOrderID()
    {
        return CustInvoiceTable::findRecId(refRecID).InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the related posting profile.
    /// </summary>
    /// <param name="_recalc">
    /// Determines whether or not to just
    ///     pass back the related profile or to calculate it; optional.
    /// </param>
    /// <returns>
    /// the related posting profile.
    /// </returns>
    public PostingProfile getPostingProfile(boolean _recalc = false)
    {
        CustInvoiceTable custInvoiceTable = CustInvoiceTable::findRecId(refRecID);

        if (custInvoiceTable && custInvoiceTable.PostingProfile)
        {
            return custInvoiceTable.PostingProfile;
        }
        else
        {
            return CustParameters::find().PostingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalDiscount</Name>
				<Source><![CDATA[
        protected AmountCur getTotalDiscount()
    {
        return mcrSalesOrderTotals.getRemainingDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalInvoicedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns the total invoiced amount, in the payment currency.
    /// </summary>
    /// <returns>
    /// The total invoiced amount, in the payment currency.
    /// </returns>
    /// <remarks>
    /// The total invoiced amount is the sum of all amounts invoiced so far.
    /// </remarks>
    public AmountCur getTotalInvoicedAmount()
    {
        CustFreeInvoiceCalcTotals totals;
        totals =
            new CustFreeInvoiceCalcTotals(CustInvoiceTable::findRecId(refRecID));

        totals.calc();

        return totals.roundedOffTotalAmount(totals.custFreeInvoiceInvoiceAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates and returns the total sales amount, in the payment currency.
    /// </summary>
    /// <returns>
    /// The total sales amount, in the payment currency.
    /// </returns>
    /// <remarks>
    /// The total sales amount is the total amount that will have been invoiced
    ///     after invoicing has completed.  Thus, the returned value is the sum
    ///     of non-invoiced amounts and amounts that have already been invoiced.
    ///     The payment currency is the currency used for payment, which might differ
    ///     from the company default currency.
    /// </remarks>
    public AmountCur getTotalSalesAmount()
    {
        CustFreeInvoiceCalcTotals totals;

        totals =
            new CustFreeInvoiceCalcTotals(CustInvoiceTable::findRecId(refRecID));

        totals.calc();

        return totals.roundedOffTotalAmount(totals.custFreeInvoiceInvoiceAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of this class.
    /// </summary>
    /// <param name="_refRecID">
    /// The reference record ID of the record that is associated with the payment.
    /// </param>
    /// <remarks>
    /// All operations on this class will act on payments associated with the
    ///     <c>CustInvoiceTable</c> record specified by <c>_refRecID</c>.
    /// </remarks>
    public void new(RecId _refRecID)
    {
        super(tableNum(CustInvoiceTable), _refRecID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequiredValues</Name>
				<Source><![CDATA[
        protected void setRequiredValues()
    {
        this.allocateInvoiceID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleBillUpFrontContChildren</Name>
				<Source><![CDATA[
        public void settleBillUpFrontContChildren()
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInstallmentsOrder</Name>
				<Source><![CDATA[
        protected void settleInstallmentsOrder(boolean _instalAdjs = false)
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOnAccountPayments</Name>
				<Source><![CDATA[
        public void settleOnAccountPayments()
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePayments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Settles the payments.
    /// </summary>
    /// <param name="_paymAdjs">
    /// ndicates payment adjustments are occuring; optional.
    /// </param>
    /// <remarks>
    /// The settle payments for free text invoices needs to use the
    ///     invoice ID on the <c>CustInvoiceJour</c> to settle.
    /// </remarks>
    public void settlePayments(boolean _paymAdjs = false)
    {
        CustTable custTable;

        LedgerJournalTable ledgerJournalTableLocal;
        LedgerJournalTrans ledgerJournalTrans;

        CustTrans custTrans;
        CustTransOpen custTransOpen;

        CustInvoiceJour custInvoiceJour;

        SpecTransManager specTransManager;

        Num orderID = this.getOrderID();

        AmountCur sumTransAmountCur;     // sum of marked transactions
        AmountCur   sumInvAmountCur;

        // find the custTable record
        custTable = CustTable::find(this.getInvoiceAccount());

        // create a specification offset voucher for the current customer
        SpecTransExecutionContext specTransExecutionContext = SpecTransExecutionContext::newFromSource(custTable);
        specTransManager = SpecTransManager::newFromSpec(specTransExecutionContext.parmSpecContext(), false);

        // This shouldn't be neccesary, but is being kept for backwards compatability
        specTransManager.deleteAll();

        // add open payment transactions to the offset voucher
        while select RecID, AmountCur from custTransOpen
            join CurrencyCode from custTrans
            join Voucher from ledgerJournalTrans
            join JournalNum from ledgerJournalTableLocal
            where ledgerJournalTrans.MCRPaymOrderID == orderID
                  && ledgerJournalTrans.JournalNum == ledgerJournalTableLocal.JournalNum
                  && custTrans.AccountNum == custTable.AccountNum
                  && custTrans.Voucher == ledgerJournalTrans.Voucher
                  && custTransOpen.RefRecId == custTrans.RecId
        {
            sumTransAmountCur += custTransOpen.AmountCur;

            specTransManager.insert(custTransOpen.dataAreaId,
                                     custTransOpen.TableId,
                                     custTransOpen.RecId,
                                     custTransOpen.AmountCur,
                                     custTrans.CurrencyCode);
        }

        // Clear the table buffers.
        custTransOpen = null;
        custTrans = null;
        custInvoiceJour = null;

        // add open invoice transactions to the offset voucher
        while select RecID, AmountCur from custTransOpen
            join CurrencyCode from custTrans
            join LedgerVoucher, InvoiceId from custInvoiceJour
            where custInvoiceJour.InvoiceId == orderID
                && custTrans.AccountNum == custTable.AccountNum
                && custTrans.Voucher == custInvoiceJour.LedgerVoucher
                && custTransOpen.RefRecId == custTrans.RecId
        {
            sumInvAmountCur += custTransOpen.AmountCur;
            // Check to see if the record already exists in the specManager before
            // adding it again - this will help from having over settlement issues.
            if (!specTransManager.exist(custTransOpen.dataAreaId, custTransOpen.TableId, custTransOpen.RecId))
            {
                specTransManager.insert(custTransOpen.dataAreaId,
                                        custTransOpen.TableId,
                                        custTransOpen.RecId,
                                        custTransOpen.AmountCur,
                                        custTrans.CurrencyCode);
            }
        }
        // settle the transactions
        if (abs(sumTransAmountCur) != 0 && abs(sumInvAmountCur) != 0)
        {
            CustTrans::settleTransaction(specTransExecutionContext, CustTransSettleTransactionParameters::construct());
        }
        else
        {
            specTransManager.deleteAll();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransStatus</Name>
				<Source><![CDATA[
        public void setTransStatus()
    {
        // no code in super super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>