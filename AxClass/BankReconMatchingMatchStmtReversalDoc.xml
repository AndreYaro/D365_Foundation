<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconMatchingMatchStmtReversalDoc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankReconMatchingMatchStmtReversalDoc</c> class contains business logic
///     for matching reversing bank statements and canceld bank document.
/// </summary>
[BankReconciliationMatchingAttribute(BankReconciliationMatchingType::Statements2ReversalDocument)]
class BankReconMatchingMatchStmtReversalDoc extends BankReconciliationMatchingMatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateBalance</Name>
				<Source><![CDATA[
        protected boolean validateBalance()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;

        AmountCur                       reversalStatementBalance;
        AmountCur                       statementBalance;
        AmountCur                       documentBalance;
        boolean                         ret = true;

        enumerator = entryList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            switch (matchingEntry.parmEntryType())
            {
                case BankReconciliationMatchingEntryType::BankDocument:
                    documentBalance += matchingEntry.parmOpenAmountCur();
                    break;

                case BankReconciliationMatchingEntryType::BankStatement:
                    if (matchingEntry.parmIsReversal())
                    {
                        reversalStatementBalance += matchingEntry.parmOpenAmountCur();
                    }
                    else
                    {
                        statementBalance += matchingEntry.parmOpenAmountCur();
                    }
                    break;
            }
        }

        if (reversalStatementBalance + statementBalance != 0
            || statementBalance != documentBalance)
        {
            ret = this.validateError(strFmt("@GLS222714", reversalStatementBalance, statementBalance, documentBalance));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankDocumentReversalType</Name>
				<Source><![CDATA[
        protected boolean validateBankDocumentReversalType()
    {
        BankReconciliationMatchingEntry matchingEntry;
        ListEnumerator                  enumerator;
        boolean                         ret = true;

        enumerator = documentList.getEnumerator();
        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            if (!matchingEntry.parmIsReversal())
            {
                ret = this.validateError("@GLS221629");
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCounter</Name>
				<Source><![CDATA[
        protected boolean validateCounter()
    {
        boolean     ret;

        //this match is to match reversal statement line, original statement line and canceld bank document
        //so there must be one reversal statement line,  more than one original statement line and more than one bank document
        if (this.isEntryCounterMultiple(statementList.elements())
            && this.isEntryCounterSingle(reversalStatementList.elements())
            && this.isEntryCounterNotNone(documentList.elements()))
        {
            ret = true;
        }
        else
        {
            ret = this.validateError("@GLS221626");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>