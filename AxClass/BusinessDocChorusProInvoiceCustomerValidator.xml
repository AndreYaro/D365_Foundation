<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocChorusProInvoiceCustomerValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
			
/// <summary>
/// Validates customer invoices for Chorus Pro integration.
/// </summary>
internal final class BusinessDocChorusProInvoiceCustomerValidator extends BusinessDocChorusProInvoiceValidatorBase
{
    private CustVendInvoiceOrderAccountMap invoiceOrderAccount;
    private BusinessDocInvoiceAccountServiceCode_FR serviceCode;
    private BusinessDocumentElectronicInvoiceFrameworkTable invoicingFramework;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForSalesTable</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProInvoiceCustomerValidator constructForSalesTable(SalesTable _salesTable)
    {
        var ret = new BusinessDocChorusProInvoiceCustomerValidator();
        ret.invoiceOrderAccount = _salesTable;
        ret.serviceCode = (BusinessDocChorusProServiceCodeTable_FR::find(_salesTable.ServiceCodeRefRecId)).ServiceCode;
        ret.invoicingFramework = BusinessDocumentElectronicInvoiceFrameworkTable::find(_salesTable.ElectronicInvoiceFrameworkType_FR);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForCustInvoiceTable</Name>
				<Source><![CDATA[
    public static BusinessDocChorusProInvoiceCustomerValidator constructForCustInvoiceTable(CustInvoiceTable _custInvoiceTable)
    {
        var ret = new BusinessDocChorusProInvoiceCustomerValidator();
        ret.invoiceOrderAccount = _custInvoiceTable;
        ret.serviceCode = (BusinessDocChorusProServiceCodeTable_FR::find(_custInvoiceTable.ServiceCodeRefRecId)).ServiceCode;
        ret.invoicingFramework = BusinessDocumentElectronicInvoiceFrameworkTable::find(_custInvoiceTable.ElectronicInvoiceFrameworkType_FR);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicable</Name>
				<Source><![CDATA[
    protected boolean isApplicable()
    {
        boolean ret = super();
        
        if (ret)
        {
            CustTable invoiceAccountCustTable = CustTable::find(invoiceOrderAccount.InvoiceAccount);
            ret = invoiceAccountCustTable.RecId != 0 && invoiceAccountCustTable.EInvoice == NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runValidation</Name>
				<Source><![CDATA[
    protected boolean runValidation()
    {
        #ISOCountryRegionCodes
        var ret = this.validateCompany();
        var customerSiretProvider = BusinessDocChorusProInvoiceCustomerSiretProvider::constructFromTableRecord(invoiceOrderAccount);
        
        CustTable custTable = CustTable::find(invoiceOrderAccount.InvoiceAccount);
        LogisticsPostalAddress address = custTable.postalAddress();
        LogisticsAddressCountryRegionId franceRegionId = SysCountryRegionCode::getCountryRegionIdByIsoCode(#isoFR);

        if (address.CountryRegionId == franceRegionId)
        {
            ret = this.validateAccount(
                "@BusinessDocumentSubmissionService:ValidatingCustomerInvoiceAccount",
                customerSiretProvider,
                serviceCode,
                invoicingFramework.InvoiceAccountServiceCodeValidationEnabled,
                invoicingFramework.InvoiceAccountSiretValidationEnabled)
            && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>