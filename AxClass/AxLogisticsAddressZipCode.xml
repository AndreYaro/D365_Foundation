<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxLogisticsAddressZipCode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AxLogisticsAddressZipCode</c> class is the <c>AxBC</c> class for the
/// <c>LogisticsAddressZipCode</c> table.
/// </summary>
class AxLogisticsAddressZipCode extends AxApplicationBase
{
    LogisticsAddressZipCode logisticsAddressZipCode;
    str             localCounty;
    str             localState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>AxBC</c> instance of the <c>LogisticsAddressZipCode</c> table.
    /// </summary>
    /// <returns>
    /// The <c>AxBC</c>instance of the <c>LogisticsAddressZipCode</c> table.
    /// </returns>
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _logisticsAddressZipCode = logisticsAddressZipCode)
    {
        if (!prmisDefault(_logisticsAddressZipCode))
        {
            super(_logisticsAddressZipCode);
            logisticsAddressZipCode = _logisticsAddressZipCode;
        }
        else
        {
            super();
        }

        return logisticsAddressZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty <c>LogisticsAddressZipCode</c> record.
    /// </summary>
    /// <returns>
    /// An empty <c>LogisticsAddressZipCode</c> record.
    /// </returns>
    protected Common emptyRecord()
    {
        LogisticsAddressZipCode localLogisticsAddressZipCode;
        return localLogisticsAddressZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsAddressZipCode</Name>
				<Source><![CDATA[
    public LogisticsAddressZipCode logisticsAddressZipCode(LogisticsAddressZipCode _logisticsAddressZipCode = logisticsAddressZipCode)
    {
        if (!prmisDefault(_logisticsAddressZipCode))
        {
            this.setCurrentRecordFromExternal(_logisticsAddressZipCode);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    public LogisticsAddressCityName parmCity(LogisticsAddressCityName _city = '')
    {
        if (!prmisDefault(_city))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, City), _city);
        }

        return logisticsAddressZipCode.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCityAlias</Name>
				<Source><![CDATA[
    public LogisticsAddressCityAlias parmCityAlias(LogisticsAddressCityAlias _cityAlias = '')
    {
        if (!prmisDefault(_cityAlias))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, CityAlias), _cityAlias);
        }

        return logisticsAddressZipCode.CityAlias;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCityRecId</Name>
				<Source><![CDATA[
    public LogisticsAddressCityRecId parmCityRecId(LogisticsAddressCityRecId _cityRecId = 0)
    {
        if (!prmisDefault(_cityRecId))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, CityRecId), _cityRecId);
        }

        return logisticsAddressZipCode.CityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    public str parmCountryRegionId(str _countryRegionId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_countryRegionId))
        {
            dictField = new DictField(tableNum(LogisticsAddressZipCode),fieldNum(LogisticsAddressZipCode,CountryRegionId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_countryRegionId,dictField,this.mapPolicy().xMLMapCountryRegion());
                _countryRegionId = this.axLogisticsAddressCountryRegionId(_countryRegionId);
            }
            else
            {
                this.validateInboundString(_countryRegionId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressZipCode, CountryRegionId), _countryRegionId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountryRegionId(logisticsAddressZipCode.CountryRegionId);
        }
        else
        {
            return logisticsAddressZipCode.CountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCounty</Name>
				<Source><![CDATA[
    public str parmCounty(str _county = '')
    {
        DictField   dictField;
        if (!prmisDefault(_county))
        {
            dictField = new DictField(tableNum(LogisticsAddressZipCode),fieldNum(LogisticsAddressZipCode,County));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_county,dictField,this.mapPolicy().xMLMapCounty());
                localCounty = _county;
            }
            else
            {
                this.validateInboundString(_county,dictField);
            }
            this.setField(fieldNum(LogisticsAddressZipCode, County), _county);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountyId(logisticsAddressZipCode.County, logisticsAddressZipCode.CountryRegionId, logisticsAddressZipCode.State);
        }
        else
        {
            return logisticsAddressZipCode.County;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistrict</Name>
				<Source><![CDATA[
    public LogisticsAddressDistrictRecId parmDistrict(LogisticsAddressDistrictRecId _district = 0)
    {
        if (!prmisDefault(_district))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, District), _district);
        }

        return logisticsAddressZipCode.District;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistrictName</Name>
				<Source><![CDATA[
    public LogisticsAddressDistrictName parmDistrictName(LogisticsAddressDistrictName _districtName = '')
    {
        if (!prmisDefault(_districtName))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, DistrictName), _districtName);
        }

        return logisticsAddressZipCode.DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEvenOdd</Name>
				<Source><![CDATA[
    public AllEvenOdd parmEvenOdd(AllEvenOdd _evenOdd = AllEvenOdd::All)
    {
        if (!prmisDefault(_evenOdd))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, EvenOdd), _evenOdd);
        }

        return logisticsAddressZipCode.EvenOdd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromNum</Name>
				<Source><![CDATA[
    public StreetNum parmFromNum(StreetNum _fromNum = 0)
    {
        if (!prmisDefault(_fromNum))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, FromNum), _fromNum);
        }

        return logisticsAddressZipCode.FromNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    public str parmState(str _state = '')
    {
        DictField   dictField;
        if (!prmisDefault(_state))
        {
            dictField = new DictField(tableNum(LogisticsAddressZipCode),fieldNum(LogisticsAddressZipCode,State));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_state,dictField,this.mapPolicy().xMLMapState());
                localState = _state;
            }
            else
            {
                this.validateInboundString(_state,dictField);
            }
            this.setField(fieldNum(LogisticsAddressZipCode, State), _state);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressStateId(logisticsAddressZipCode.State, logisticsAddressZipCode.CountryRegionId);
        }
        else
        {
            return logisticsAddressZipCode.State;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreetName</Name>
				<Source><![CDATA[
    public StreetName parmStreetName(StreetName _streetName = '')
    {
        if (!prmisDefault(_streetName))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, StreetName), _streetName);
        }

        return logisticsAddressZipCode.StreetName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeZone</Name>
				<Source><![CDATA[
    public Timezone parmTimeZone(Timezone _timezone = Timezone::GMTMINUS1200INTERNATIONALDATELINEWEST)
    {
        if (!prmisDefault(_timezone))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, TimeZone), _timezone);
        }

        return logisticsAddressZipCode.TimeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToNum</Name>
				<Source><![CDATA[
    public StreetNum parmToNum(StreetNum _toNum = 0)
    {
        if (!prmisDefault(_toNum))
        {
            this.setField(fieldNum(LogisticsAddressZipCode, ToNum), _toNum);
        }

        return logisticsAddressZipCode.ToNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZipCode</Name>
				<Source><![CDATA[
    public str parmZipCode(str _zipCode = '')
    {
        DictField   dictField;
        if (!prmisDefault(_zipCode))
        {
            dictField = new DictField(tableNum(LogisticsAddressZipCode),fieldNum(LogisticsAddressZipCode,ZipCode));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_zipCode,dictField,this.mapPolicy().xMLMapZipCode());
                _zipCode = this.axLogisticsAddressZipCodeId(_zipCode);
            }
            else
            {
                this.validateInboundString(_zipCode,dictField);
            }
            this.setField(fieldNum(LogisticsAddressZipCode, ZipCode), _zipCode);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressZipCodeId(logisticsAddressZipCode.ZipCode);
        }
        else
        {
            return logisticsAddressZipCode.ZipCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInternalValues</Name>
				<Source><![CDATA[
    public void resetInternalValues()
    {
        super();

        localCounty = '';
        localState = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that all default methods are called before inserting or updating a record.
    /// </summary>
    /// <remarks>
    ///    In order to make sure that all defaulting methods are called before inserting or updating a record,
    ///    the <c>setTableFields</c> method on the <c>AxInternalBase</c> class must be overridden in the AxBC
    ///    class.The method should include a call to all defaulting methods (that is, setFieldName
    ///    methods).Code the defaulting business logic in the different setFieldName methods. Therefore, you
    ///    do not have to put the setFieldName methods in a specific order in this method.
    /// </remarks>
    protected void setTableFields()
    {
        this.currentRecord().defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMapDependingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs incoming value mapping of fields where the value mapping for a field depends on another
    /// field, such as the Item, state, and county fields.
    /// </summary>
    /// <remarks>
    /// This method is used in the save method. Therefore the incoming value mapping is performed before
    /// the fields are set to their default value.
    /// </remarks>
    protected void valueMapDependingFields()
    {
        super();

        if (this.valueMappingInbound())
        {
            if (localState && logisticsAddressZipCode.CountryRegionId)
            {
                this.parmState(this.axLogisticsAddressStateId(localState,logisticsAddressZipCode.CountryRegionId));

                if (localCounty)
                {
                    this.parmCounty(this.axLogisticsAddressCountyId(localCounty,
                                                                    logisticsAddressZipCode.CountryRegionId,
                                                                    logisticsAddressZipCode.State));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxLogisticsAddressZipCode construct()
    {
        return new AxLogisticsAddressZipCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLogisticsAddressZipCode</Name>
				<Source><![CDATA[
    public static AxLogisticsAddressZipCode newLogisticsAddressZipCode(LogisticsAddressZipCode _logisticsAddressZipCode)
    {
        AxLogisticsAddressZipCode axLogisticsAddressZipCode = AxLogisticsAddressZipCode::construct();
        axLogisticsAddressZipCode.logisticsAddressZipCode(_logisticsAddressZipCode);

        return axLogisticsAddressZipCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>