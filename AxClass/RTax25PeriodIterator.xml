<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25PeriodIterator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Class <c>RTax25PeriodIterator</c> is used to iterate through set of previously calculated set of date intervals.
/// </summary>
/// <remarks>
/// Set calculated by <c>RTax25PeriodFactory</c> class. There are two sets calculated - one for calculating balance, second for calculating turnover.
/// FromDate and ToDate used to store original period. If corrective only parameter set to true, only corrective periods(both previous and future) will be selected.
/// </remarks>
public class RTax25PeriodIterator
{
    Set             balanceSet;
    Set             turnoverSet;
    SetEnumerator   setEnumerator;

    FromDate        fromDateAccounting, fromDateReporting;
    ToDate          toDateAccounting, toDateReporting;

    FromDate        fromDate;
    ToDate          toDate;

    boolean         correctiveOnly;

    #define.currentVersion(1)
    #localMacro.currentList
    fromDate,
    toDate
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyExtendedRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Applies date range to <c>QueryBuildDataSource</c> object.
    /// </summary>
    /// <param name="_qbds">
    ///  <c>QueryBuildDataSource</c> object.
    /// </param>
    /// <param name="_balance">
    ///  If balance being calculated, then true; Otherwise false.
    /// </param>
    /// <remarks>
    ///  The record, object based upon, must contain ReportingDate and AccountingDate fields.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void applyExtendedRange(QueryBuildDataSource _qbds, boolean _balance = false)
    {
        str                     range, tmpRange;

        this.first(_balance);

        if (_balance && !correctiveOnly)
        {
            range = this.rangeBalance(_qbds);
        }
        else
        {
            range = this.rangeTransaction(_qbds);
        }

        while (this.next())
        {
            tmpRange = this.rangeTransaction(_qbds);

            if (range && tmpRange)
            {
                range = '(' + range + ' || ' + tmpRange + ')';
            }
            else if (tmpRange)
            {
                range = tmpRange;
            }
        }

        _qbds.addRange(fieldNum(Common, RecId)).value(range);
    }
]]></Source>
			</Method>
			<Method>
				<Name>clone</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates copy of current <c>RTax25PeriodIterator</c> object.
    /// </summary>
    /// <returns>
    ///  New <c>RTax25PeriodIterator</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25PeriodIterator clone()
    {
        return RTax25PeriodIterator::create(this.pack());
    }
]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Moves pointer to first period in set.
    /// </summary>
    /// <param name="_balance">
    ///  If balance being calculated, then true; Otherwise, false.
    /// </param>
    /// <returns>
    ///  True, if new period found; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean first(boolean _balance = false)
    {
        boolean ret;

        if (_balance)
        {
            setEnumerator = balanceSet.getEnumerator();
        }
        else
        {
            setEnumerator = turnoverSet.getEnumerator();
        }

        ret = this.next();

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fromDateAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Return start accounting date of period.
    /// </summary>
    /// <returns>
    ///  Start accounting date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate fromDateAccounting()
    {
        return fromDateAccounting;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fromDateReporting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Return start reporting date of period.
    /// </summary>
    /// <returns>
    ///  Start reporting date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate fromDateReporting()
    {
        return fromDateReporting;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isCorrective</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Return true, if current period is related to corrective transactions; Otherwise, false.
    /// </summary>
    /// <returns>
    ///  <c>Boolean</c> value.
    /// </returns>
    private boolean isCorrective()
    {
        return  this.fromDateAccounting() != this.fromDateReporting() || this.toDateAccounting() != this.toDateReporting();
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Moves iterator to next period.
    /// </summary>
    /// <returns>
    ///  True, if new period found; Otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean next()
    {
        boolean ret;

        do
        {
            ret = setEnumerator.moveNext();

            if (ret)
            {
                [fromDateAccounting, toDateAccounting, fromDateReporting, toDateReporting] = setEnumerator.current();
            }
        }
        while (correctiveOnly && !this.isCorrective() && ret);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container pack()
    {
        return [#currentVersion, #currentList, balanceSet.pack(), turnoverSet.pack()];
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmBalanceSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set parmBalanceSet(Set _balanceSet = balanceSet)
    {
        balanceSet = _balanceSet;
        return balanceSet;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectiveOnly</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmCorrectiveOnly(boolean _correctiveOnly = correctiveOnly)
    {
        correctiveOnly = _correctiveOnly;
        return correctiveOnly;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmTurnoverSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set parmTurnoverSet(Set _turnoverSet = turnoverSet)
    {
        turnoverSet = _turnoverSet;
        return turnoverSet;
    }
]]></Source>
			</Method>
			<Method>
				<Name>rangeBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates range for <c>QueryBuildDataSource</c> object when calculating balance.
    /// </summary>
    /// <param name="_qbds">
    ///  <c>QueryBuildDataSource</c> object.
    /// </param>
    /// <returns>
    ///  Extended range for calculation of balance.
    /// </returns>
    private str rangeBalance(QueryBuildDataSource _qbds)
    {
        str range;

        range =
            strFmt('((%1.%2 <= %3) && (%1.%4 <= %5))',
                _qbds.name(),
                fieldStr(GeneralJournalEntryReportingView_RU, AccountingDate),
                date2StrXpp(this.toDateAccounting()),
                fieldStr(GeneralJournalEntryReportingView_RU, ReportingDate),
                date2StrXpp(this.toDateAccounting()));

        return range;
    }
]]></Source>
			</Method>
			<Method>
				<Name>rangeTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates range for <c>QueryBuildDataSource</c> object when calculating turnover.
    /// </summary>
    /// <param name="_qbds">
    ///  <c>QueryBuildDataSource</c> object.
    /// </param>
    /// <returns>
    ///  Extended range for calculation of turnover.
    /// </returns>
    /// <remarks>
    ///  Also used when calculating balance for corrections from future periods.
    /// </remarks>
    private str rangeTransaction(QueryBuildDataSource _qbds)
    {
        str range;

        if (!correctiveOnly || this.isCorrective())
        {
            range =
                strFmt('((%1.%2 >= %3) && (%1.%2 <= %4) && (%1.%5 >= %6) && (%1.%5 <= %7))',
                    _qbds.name(),
                    fieldStr(GeneralJournalEntryReportingView_RU, AccountingDate),
                    date2StrXpp(this.fromDateAccounting()),
                    date2StrXpp(this.toDateAccounting()),
                    fieldStr(GeneralJournalEntryReportingView_RU, ReportingDate),
                    date2StrXpp(this.fromDateReporting()),
                    date2StrXpp(this.toDateReporting()));
        }
        return range;
    }
]]></Source>
			</Method>
			<Method>
				<Name>toDateAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Return end accounting date of period.
    /// </summary>
    /// <returns>
    ///  End accounting date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate toDateAccounting()
    {
        return toDateAccounting;
    }
]]></Source>
			</Method>
			<Method>
				<Name>toDateReporting</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Return end reporting date of period.
    /// </summary>
    /// <returns>
    ///  End reporting date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate toDateReporting()
    {
        return toDateReporting;
    }
]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates string representation of object.
    /// </summary>
    /// <returns>
    ///  String reflecting object value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str toString()
    {
        str           ret, balanceStr, turnoverStr;
        SetEnumerator seBalance  = balanceSet.getEnumerator();
        SetEnumerator seTurnover = turnoverSet.getEnumerator();

        while (seBalance.moveNext())
        {
            if (balanceStr)
            {
                balanceStr += ', ';
            }

            balanceStr += strFmt('[%1]', con2Str(seBalance.current()));
        }

        while (seTurnover.moveNext())
        {
            if (turnoverStr)
            {
                turnoverStr += ', ';
            }

            turnoverStr += strFmt('[%1]', con2Str(seTurnover.current()));
        }

        ret = strFmt('Balance: %1; Turnover: %2.', balanceStr, turnoverStr);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret = true;
        container packedBalanceSet, packedTurnoverSet;

        switch (version)
        {
            case #currentVersion:
                [version, #currentList, packedBalanceSet, packedTurnoverSet] = _packedClass;

                balanceSet = Set::create(packedBalanceSet);
                turnoverSet = Set::create(packedTurnoverSet);
                break;
            default:
                ret = false;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25PeriodIterator construct()
    {
        return new RTax25PeriodIterator();
    }
]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates new instance of <c>RTax25PeriodIterator</c> object from previously serialized object.
    /// </summary>
    /// <param name="_packed">
    ///  Serialized <c>RTax25PeriodIterator</c> object.
    /// </param>
    /// <returns>
    ///  <c>RTax25PeriodIterator</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25PeriodIterator create(container _packed)
    {
        RTax25PeriodIterator rTax25PeriodIterator = RTax25PeriodIterator::construct();

        rTax25PeriodIterator.unpack(_packed);

        return rTax25PeriodIterator;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>