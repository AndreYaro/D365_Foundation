<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableInterval_FiscalPeriods</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Interval details of fiscal periods.
/// </summary>
class AssetTableInterval_FiscalPeriods extends AssetTableInterval_Fiscal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of the day in the fiscal period for the specified asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of day in the fiscal period.
    /// </returns>
    public int dayOfPeriod(AssetTransDate _assetTransDate)
    {
        int returnValue;
        AssetTransDate firstDayOfPeriod;

        if (_assetTransDate && calendarRecId)
        {
            // Get the first day of the period.  In case the period is not defined,
            // do not determine the number of day.
            firstDayOfPeriod = LedgerFiscalCalendar::findFirstDayOfMonth(calendarRecId, _assetTransDate);
            if (firstDayOfPeriod)
            {
                returnValue = _assetTransDate - firstDayOfPeriod + 1;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Finds the end date of the fiscal calendar period for the specified date.
    /// </summary>
    /// <param name="_assetTransDate">
    ///  The date specified to determine the end date of the fiscal calendar period.
    /// </param>
    /// <returns>
    ///  The end date of the fiscal period.
    /// </returns>
    public TransDate endPeriod(AssetTransDate _assetTransDate)
    {
        TransDate               enddate ;

        if (_assetTransDate && calendarRecId)
        {
            enddate = LedgerFiscalCalendar::findPeriodEndDateByDateWithIndex(calendarRecId, _assetTransDate);
        }
        return  enddate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the months difference between depreciation start date and run date
    /// </summary>
    /// <param name="_depStart">
    /// The specified date
    /// </param>
    /// <param name="_runDate">
    /// The specified date
    /// </param>
    /// <returns>
    /// Number of months between depreciation start date and run date
    /// </returns>
    public AssetLifeTime interval( AssetTransDate   _depStart, AssetTransDate   _runDate)
    {
        int    numberOfPeriodsBetweenDates;

        if (_runDate < _depStart)
        {
            return 0;
        }

        numberOfPeriodsBetweenDates = LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calendarRecId, _depStart, _runDate) - 1;

        if (numberOfPeriodsBetweenDates >= 0)
        {
            return numberOfPeriodsBetweenDates div this.periodMultiplier() ;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AssetTableInterval_FiscalPeriods</c> class.
    /// </summary>
    /// <param name="_calendarRecId">
    /// The calendar record id.
    /// </param>
    protected void new(FiscalCalendarRecId _calendarRecId)
    {
        super(AssetAccrual::FiscalPeriod, _calendarRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsPerYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of periods in a year
    /// </summary>
    /// <returns>
    /// Number periods in a year
    /// </returns>
    public int numOfPeriodsPerYear()
    {
        return any2int(this.assetDepreciationTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodMultiplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// The multiplier used for multiplying with the values.
    /// </summary>
    /// <returns>
    /// The multiplier
    /// </returns>
    public int periodMultiplier()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the starting date of a fiscal period for a supplied date.
    /// </summary>
    /// <param name="_startDate">
    ///     The given date.
    /// </param>
    /// <returns>
    ///     The starting date of a fiscal period for a supplied date.
    /// </returns>
    public AssetTransDate startOfPeriod(AssetTransDate _startDate)
    {
        return LedgerFiscalCalendar::findFirstDayOfPeriod(calendarRecId, _startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a subclass of the <c>AssetTableInterval</c> class.
    /// </summary>
    /// <param name="_calendarRecId">
    /// The record ID of the calendar to use when creating the interval; optional.
    /// </param>
    /// <returns>
    /// The new instance of an <c>AssetTableInterval</c> subclass.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Calendar %1 does not exist.
    /// </exception>
    public static AssetTableInterval newFiscalCalendar(RecId _calendarRecId = 0)
    {
        if (_calendarRecId)
        {
            if (FiscalCalendar::exist(_calendarRecId))
            {
                return new AssetTableInterval_FiscalPeriods(_calendarRecId);
            }
            else
            {
                throw error(strFmt("@SYS25948", FiscalCalendar::find(_calendarRecId).CalendarId));
            }
        }
        else
        {
            return new AssetTableInterval_FiscalPeriods(Ledger::fiscalCalendar());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>