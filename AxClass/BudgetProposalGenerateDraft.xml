<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetProposalGenerateDraft</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetProposalGenerateDraft</c> class creates a draft budget register from the data returned from the AI
/// builder in the table <c>BudgetTimeSeriesDetailResult</c>.
/// </summary>
internal final class BudgetProposalGenerateDraft
{
    private RefRecId budgetTransactionHeaderRecId;
    private BudgetProposalConfiguration proposalConfig;
    private BudgetTimeSeriesDetailResult results;
    private SysInstrumentationProgressLogger progressLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetProposalGenerateDraft construct()
    {
        return new BudgetProposalGenerateDraft();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();

        progressLogger = SysInstrumentationProgressLogger::createLogger(BudgetProposalConstants::SourceNameBudgetProposalGenerateDraft, BudgetProposalConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetProposalConfiguration</Name>
				<Source><![CDATA[
    internal void parmBudgetProposalConfiguration(BudgetProposalConfiguration _proposalConfig)
    {
        this.proposalConfig = _proposalConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    internal void generate()
    {
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(BudgetProposalConstants::ActivityNameGenerateDraft))
        {
            this.createBudgetHeader();

            activityContext.addCustomProperty(BudgetProposalConstants::PropertyNameBudgetTransactionHeaderRecId, int642Str(this.budgetTransactionHeaderRecId));

            this.createBudgetLines();
            this.addPopupNotification();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetLines</Name>
				<Source><![CDATA[
    private void createBudgetLines()
    {
        SysDaInsertObject insertObject = this.buildBudgetTransactionLineInsertObject();
        SysDaQueryObject sourceQuery = this.createBudgetTimeSeriesResultQuery();
        insertObject.query(sourceQuery);
        SysDaInsertStatement insertStatement = new SysDaInsertStatement();
        ttsbegin;
        insertStatement.insert(insertObject);
        this.updateBudgetTransactionLineNumber();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetHeader</Name>
				<Source><![CDATA[
    private void createBudgetHeader()
    {
        BudgetTransactionHeader targetTransactionHeader;
        NumberSequenceReference numberSequenceRef = BudgetParameters::numRefBudgetTransactionId();

        if (BudgetTransactionManager::checkBudgetTransactionNumberSequence(numberSequenceRef))
        {
            // Initialize the date of the transaction header using the end date from the configuration
            targetTransactionHeader.Date = dateEndMth(proposalConfig.EndDate) + 1;

            ttsbegin;
            targetTransactionHeader.TransactionNumber = NumberSeq::newGetNum(numberSequenceRef).num();
            targetTransactionHeader.PrimaryLedger = proposalConfig.Ledger;
            targetTransactionHeader.BudgetModelDataAreaId = proposalConfig.BudgetModelDataAreaId;
            targetTransactionHeader.BudgetModelId = proposalConfig.BudgetModelId;
            targetTransactionHeader.BudgetSubModelId = proposalConfig.BudgetSubModelId;
            targetTransactionHeader.BudgetModelType = proposalConfig.BudgetModelType;
            targetTransactionHeader.setBudgetTransactionCode(proposalConfig.BudgetTransactionCode);

            if (targetTransactionHeader.validateWrite())
            {
                targetTransactionHeader.write();
            }
            ttscommit;
        }

        if (!targetTransactionHeader.RecId)
        {
            throw error("@Budget:GenerateBudgetRegisterEntryFailed");
        }

        this.budgetTransactionHeaderRecId = targetTransactionHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTimeSeriesResultQuery</Name>
				<Source><![CDATA[
    private SysDaQueryObject createBudgetTimeSeriesResultQuery()
    {
        SysDaQueryObject queryObj = new SysDaQueryObject(this.results);

        this.addFieldsToQueryObject(queryObj.projection());
        this.addLiteralsToQueryObject(queryObj.projection());

        queryObj.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(this.results, fieldStr(BudgetTimeSeriesDetailResult, TimeSeriesId)),
                             new SysDaValueExpression(proposalConfig.TimeSeriesId)));

        return queryObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToQueryObject</Name>
				<Source><![CDATA[
    private void addFieldsToQueryObject(SysDaSelection _projectionList)
    {
        _projectionList.add(fieldStr(BudgetTimeSeriesDetailResult, TimeSeriesValue))
                       .add(fieldStr(BudgetTimeSeriesDetailResult, BudgetType))
                       .add(fieldStr(BudgetTimeSeriesDetailResult, TimeSeriesDate))
                       .add(fieldStr(BudgetTimeSeriesDetailResult, TimeSeriesDimension))
                       .add(fieldStr(BudgetTimeSeriesDetailResult, TimeSeriesValue))
                       .add(fieldStr(BudgetTimeSeriesDetailResult, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralsToQueryObject</Name>
				<Source><![CDATA[
    private void addLiteralsToQueryObject(SysDaSelection _projectionList)
    {
        boolean includeInCashflow = this.getUseInCashflowFromBudgetModel();
        CurrencyCode accountingCurrency = Ledger::find(proposalConfig.Ledger).AccountingCurrency;
        
        _projectionList
            .addValue(this.budgetTransactionHeaderRecId)
            .addValue(includeInCashflow)
            .addValue(accountingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUseInCashflowFromBudgetModel</Name>
				<Source><![CDATA[
    private boolean getUseInCashflowFromBudgetModel()
    {
        changecompany(proposalConfig.BudgetModelDataAreaId)
        {
            BudgetModel model = BudgetModel::find(proposalConfig.BudgetModelType, proposalConfig.BudgetModelId, proposalConfig.BudgetSubmodelId);

            return model.Cov;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBudgetTransactionLineInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject buildBudgetTransactionLineInsertObject()
    {
        BudgetTransactionLine transactionLine;
        transactionLine.skipDataMethods(true);

        SysDaInsertObject insertObject = new SysDaInsertObject(transactionLine);
        this.addDetailFieldsToInsertObject(insertObject.fields());
        this.addLiteralFieldsToInsertObject(insertObject.fields());

        return insertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDetailFieldsToInsertObject</Name>
				<Source><![CDATA[
    private void addDetailFieldsToInsertObject(SysDaSelection _fieldsObject)
    {
        _fieldsObject.add(fieldStr(BudgetTransactionLine, AccountingCurrencyAmount))
            .add(fieldStr(BudgetTransactionLine, BudgetType))
            .add(fieldStr(BudgetTransactionLine, Date))
            .add(fieldStr(BudgetTransactionLine, LedgerDimension))
            .add(fieldStr(BudgetTransactionLine, TransactionCurrencyAmount))
            .add(fieldStr(BudgetTransactionLine, LineNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLiteralFieldsToInsertObject</Name>
				<Source><![CDATA[
    private void addLiteralFieldsToInsertObject(SysDaSelection _fieldsObject)
    {
        _fieldsObject.add(fieldStr(BudgetTransactionLine, BudgetTransactionHeader))
            .add(fieldStr(BudgetTransactionLine, IncludeInCashFlowForecast))
            .add(fieldStr(BudgetTransactionLine, TransactionCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetTransactionLineNumber</Name>
				<Source><![CDATA[
    private void updateBudgetTransactionLineNumber()
    {
        // When creating the draft budget register lines, we use the recid to populate the line number
        // field. After the insert, we re-initialize the LineNumbers on the newly created budget register
        // entry to start at 1 and increment sequentially
        BudgetTransactionLine transactionLine;
        LineNum minLineNum = this.getMinBudgetTransactionLineNumber() - 1.0;

        SysDaUpdateObject updateObject = new SysDaUpdateObject(transactionLine);
        updateObject.settingClause()
            .add(fieldStr(BudgetTransactionLine, LineNumber), new SysDaMinusExpression(new SysDaFieldExpression(transactionLine, fieldStr(BudgetTransactionLine, LineNumber)), new SysDaValueExpression(minLineNum)));

        updateObject.whereClause(new SysDaEqualsExpression(new SysDaFieldExpression(transactionLine, fieldStr(BudgetTransactionLine, BudgetTransactionHeader)), new SysDaValueExpression(this.budgetTransactionHeaderRecId)));

        SysDaUpdateStatement updateStatement = new SysDaUpdateStatement();
        updateStatement.update(updateObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinBudgetTransactionLineNumber</Name>
				<Source><![CDATA[
    private LineNum getMinBudgetTransactionLineNumber()
    {
        BudgetTransactionHeader transactionHeader = BudgetTransactionHeader::find(this.budgetTransactionHeaderRecId);
        return transactionHeader.minLineNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPopupNotification</Name>
				<Source><![CDATA[
    private void addPopupNotification()
    {
        SystemNotificationDataContract notificationDataContract = new SystemNotificationDataContract();
        Array actions = new Array(Types::Class);
        Array userList = new Array(Types::String);

        BudgetTransactionHeader transactionHeader = BudgetTransactionHeader::find(this.budgetTransactionHeaderRecId, false);

        // Create the message to be displayed in the message center
        userList.value(1, transactionHeader.CreatedBy);

        notificationDataContract.Message("@Budget:BudgetRegisterMessage");
        notificationDataContract.Title("@Budget:BudgetRegisterEntryCreated");
        notificationDataContract.Type(SystemNotificationType::Alert);
        notificationDataContract.State(SystemNotificationState::Active);
        notificationDataContract.Severity(SystemNotificationSeverity::Informational);
        notificationDataContract.Users(userList);

        // Create the hyperlink to the form
        SystemNotificationActionDataContract actionDataContract = new SystemNotificationActionDataContract();
        actionDataContract.Message(transactionHeader.TransactionNumber);

        actionDataContract.Type(SystemNotificationActionType::AxDisplayMenuFunction);

        SystemNotificationMenuFunctionDataContract notificationActionData = new SystemNotificationMenuFunctionDataContract();
        notificationActionData.MenuItemName(menuItemDisplayStr(BudgetTransactions));
        notificationActionData.Data(int642Str(transactionHeader.RecId));
        actionDataContract.Data(FormJsonSerializer::serializeClass(notificationActionData));
        actions.value(1, actionDataContract);
        notificationDataContract.Actions(actions);

        // Add to the Message center
        SystemNotificationsManager::AddNotification(notificationDataContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>