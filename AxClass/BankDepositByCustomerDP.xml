<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDepositByCustomerDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankDepositByCustomerDP</c> class extends the <c>SRSReportDataProviderBase</c> class.
/// </summary>
[ 
    SRSReportQueryAttribute(querystr(BankDepositByCustomer)),
    SRSReportParameterAttribute(classstr(BankDepositByCustomerContract))
]
public class BankDepositByCustomerDP extends SRSReportDataProviderBase
{
    BankDepositByCustomerTmp    bankDepositByCustomerTmp;
    BankAccountTrans            bankAccountTrans;
    BankDeposit                 bankDeposit;
    CustTrans                   custTrans;
    CustTable                   custTable;

    /// <summary>
    ///    Retrieves the <c>BankDepositByCustomerTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The <c>BankDepositByCustomerTmp</c> table.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankDepositByCustomerTmp</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute('BankDepositByCustomerTmp')]
    public BankDepositByCustomerTmp getBankDepositByCustomerTmp()
    {
        select bankDepositByCustomerTmp;
        return bankDepositByCustomerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts all the values into the temporary table.
    /// </summary>

    void insertIntoTmpTable()
    {
        bankDepositByCustomerTmp.CustAccount            = custTable.AccountNum;
        bankDepositByCustomerTmp.CustName               = custTable.name();
        bankDepositByCustomerTmp.CustTable_CurrencyCode = custTable.Currency;
        bankDepositByCustomerTmp.AmountCur              = -custTrans.AmountCur;
        bankDepositByCustomerTmp.AmountMST              = -custTrans.AmountMST;
        bankDepositByCustomerTmp.AmountMSTSecond        = -custTrans.ReportingCurrencyAmount;
        bankDepositByCustomerTmp.CustTrans_CurrencyCode = custTrans.CurrencyCode;
        bankDepositByCustomerTmp.TransDate              = custTrans.TransDate;

        if (bankDeposit)
        {
            bankDepositByCustomerTmp.BankAccountID      = bankDeposit.AccountId;
            bankDepositByCustomerTmp.PaymReference      = bankDeposit.PaymReference;
            bankDepositByCustomerTmp.DepositNum         = bankDeposit.DepositNum;
        }
        else if (bankAccountTrans)
        {
            bankDepositByCustomerTmp.BankAccountID      = bankAccountTrans.AccountId;
            bankDepositByCustomerTmp.PaymReference      = bankAccountTrans.PaymReference;
            bankDepositByCustomerTmp.DepositNum         = bankAccountTrans.DepositNum;
        }
        bankDepositByCustomerTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data for the report.
    /// </summary>
    public void processReport ()
    {
        CustAccount         bufCustAccount;
        Query               query = this.parmQuery();
        QueryRun            queryRun;

        queryRun            = new QueryRun(query);

        while (queryRun.next())
        {
            custTrans = queryRun.get(tablenum(CustTrans));

            if (custTrans)
            {
                select firstonly bankAccountTrans
                    where bankAccountTrans.Voucher   == custTrans.Voucher &&
                          bankAccountTrans.TransDate == custTrans.TransDate;

                select firstonly bankDeposit
                    where bankDeposit.Voucher   == custTrans.Voucher &&
                          bankDeposit.TransDate == custTrans.TransDate;

                if (bankAccountTrans || bankDeposit)
                {
                    if (bufCustAccount!=custTrans.AccountNum)
                    {
                        custTable = queryRun.get(tablenum(CustTable));
                        bufCustAccount = custTrans.AccountNum;
                    }
                    this.insertIntoTmpTable();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>