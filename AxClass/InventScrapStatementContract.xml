<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventScrapStatementContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventScrapStatementContract</c> class is an rdl contract class for the
/// <c>InventScrapStatement</c> report.
/// </summary>
[
    DataContract
]
class InventScrapStatementContract implements SysOperationValidatable
{
    FromDate        fromDate;
    ToDate          toDate;
    ShowZeroLines   showZeroLines;
    InventDimParm   inventDimParm;
    boolean         showDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmConfigId</Name>
				<Source><![CDATA[
    [
        DataMember('ConfigId')
    ]
    public EcoResConfigurationFlag parmConfigId(EcoResConfigurationFlag _configId = inventDimParm.ConfigIdFlag)
    {
        inventDimParm.ConfigIdFlag = _configId;
        return inventDimParm.ConfigIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMember('FromDate'),
        SysOperationDisplayOrder('1')
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchId</Name>
				<Source><![CDATA[
    [
        DataMember('InventBatchId')
    ]
    public InventBatchIdFlag parmInventBatchId(InventBatchIdFlag _inventBatchId = inventDimParm.InventBatchIdFlag)
    {
        inventDimParm.InventBatchIdFlag = _inventBatchId;
        return inventDimParm.InventBatchIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventColorId</Name>
				<Source><![CDATA[
    [
        DataMember('InventColorId')
    ]
    public EcoResColorFlag parmInventColorId(EcoResColorFlag _inventColorId = inventDimParm.InventColorIdFlag)
    {
        inventDimParm.InventColorIdFlag = _inventColorId;
        return inventDimParm.InventColorIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [
        DataMember('InventLocationId')
    ]
    public InventLocationIdFlag parmInventLocationId(InventLocationIdFlag _inventLocationId = inventDimParm.InventLocationIdFlag)
    {
        inventDimParm.InventLocationIdFlag = _inventLocationId;
        return inventDimParm.InventLocationIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSerialId</Name>
				<Source><![CDATA[
    [
        DataMember('InventSerialId')
    ]
    public InventSerialIdFlag parmInventSerialId(InventSerialIdFlag _inventSerialId = inventDimParm.InventSerialIdFlag)
    {
        inventDimParm.InventSerialIdFlag = _inventSerialId;
        return inventDimParm.InventSerialIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    [
        DataMember('InventSiteId')
    ]
    public InventSiteIdFlag parmInventSiteId(InventSiteIdFlag _inventSiteId = inventDimParm.InventSiteIdFlag)
    {
        inventDimParm.InventSiteIdFlag = _inventSiteId;
        return inventDimParm.InventSiteIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSizeId</Name>
				<Source><![CDATA[
    [
        DataMember('InventSizeId')
    ]
    public EcoResSizeFlag parmInventSizeId(EcoResSizeFlag _inventSizeId = inventDimParm.InventSizeIdFlag)
    {
        inventDimParm.InventSizeIdFlag = _inventSizeId;
        return inventDimParm.InventSizeIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStyleId</Name>
				<Source><![CDATA[
    [
        DataMember('InventStyleId')
    ]
    public EcoResStyleFlag parmInventStyleId(EcoResStyleFlag _inventStyleId = inventDimParm.InventStyleIdFlag)
    {
        inventDimParm.InventStyleIdFlag = _inventStyleId;
        return inventDimParm.InventStyleIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventVersionId</Name>
				<Source><![CDATA[
    [
        DataMember('InventVersionId')
    ]
    public EcoResVersionFlag parmInventVersionId(EcoResVersionFlag _inventVersionId = inventDimParm.InventVersionIdFlag)
    {
        inventDimParm.InventVersionIdFlag = _inventVersionId;
        return inventDimParm.InventVersionIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDimensions</Name>
				<Source><![CDATA[
    [
        DataMember('ShowDimensions'),
        SysOperationLabel(literalstr("@SYS138491")),
        SysOperationHelpText(literalstr("@GLS223896")),
        SysOperationDisplayOrder('4')
    ]
    public boolean parmShowDimensions(boolean _showDimensions = showDimensions)
    {
        showDimensions = _showDimensions;
        return showDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowZeroLines</Name>
				<Source><![CDATA[
    [
        DataMember('ShowZeroLines'),
        SysOperationDisplayOrder('3')
    ]
    public ShowZeroLines parmShowZeroLines(ShowZeroLines _showZeroLines = showZeroLines)
    {
        showZeroLines = _showZeroLines;
        return showZeroLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMember('ToDate'),
        SysOperationDisplayOrder('2')
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    [
        DataMember('WMSLocationId')
    ]
    public WMSLocationIdFlag parmWMSLocationId(WMSLocationIdFlag _wMSLocationId = inventDimParm.WMSLocationIdFlag)
    {
        inventDimParm.WMSLocationIdFlag = _wMSLocationId;
        return inventDimParm.WMSLocationIdFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    [
        DataMember('LicensePlate')
    ]
    public WHSLicensePlateFlag parmLicensePlateId(WHSLicensePlateFlag _licensePlate = inventDimParm.LicensePlateFlag)
    {
        inventDimParm.LicensePlateFlag = _licensePlate;
        return inventDimParm.LicensePlateFlag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventOwnerId_RU</Name>
				<Source><![CDATA[
    [
        DataMember('InventOwnerId')
    ]
    public InventOwnerIdFlag parmInventOwnerId_RU(InventOwnerIdFlag _InventOwnerId = inventDimParm.InventOwnerIdFlag_RU)
    {
        inventDimParm.InventOwnerIdFlag_RU = _InventOwnerId;
        return inventDimParm.InventOwnerIdFlag_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStatus</Name>
				<Source><![CDATA[
    [
        DataMember('InventStatus')
    ]
    public WHSInventStatusFlag parmInventStatus(WHSInventStatusFlag _InventStatus = inventDimParm.InventStatusFlag)
    {
        inventDimParm.InventStatusFlag = _InventStatus;
        return inventDimParm.InventStatusFlag;

    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the SSRS report parameters are valid.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean             isValid = true;

        if (!fromDate)
        {
            isValid = checkFailed("@SYS97591");
        }

        if (!toDate)
        {
            isValid = checkFailed("@SYS97592");
        }

        if (isValid && (fromDate > toDate))
        {
            isValid = checkFailed(strfmt("@SYS55013", date2StrUsr(fromDate, DateFlags::FormatAll), date2StrUsr(toDate, DateFlags::FormatAll)));
        }
        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>