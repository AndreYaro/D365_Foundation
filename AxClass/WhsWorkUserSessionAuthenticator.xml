<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkUserSessionAuthenticator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsWorkUserSessionAuthenticator
{
    #WHSRF

    private WHSMobileRequestInstrumentationTask instrumentationTask;
    private container con;
    private WHSWorkExecuteMode mode;
    private int step;
    private boolean isWebRequest;
    private WHSRFPassthrough pass;
    private WHSMobileDeviceData deviceData;
    private WHSUserId userId;
    private WHSWorkUserSessionId userSessionId;
    private WHSWorkUserSession workUserSession;
    private WHSWorkUserSessionStateFacade sessionState;
    private boolean isPreviousSession;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>authenticate</Name>
				<Source><![CDATA[
    private boolean authenticate()
    {
        if (!this.initializePass())
        {
            if (!this.isLoginRequest())
            {
                instrumentationTask.logAuthenticationIssue('No session authentication data.');
                return false;
            }

            return true;
        }
        
        if (!this.isAuthenticationInfoProvided())
        {
            if (!this.validateLoginInfo())
            {
                return false;
            }

            // Data doesn't contain any authentication
            // information but is a login request.
            this.prepareLoginResponse();
            return true;
        }

        // At this point we know we have some authentication data.
        if (!this.initializeUserSession())
        {
            instrumentationTask.logAuthenticationIssue('Non-existent session.');
            return false;
        }

        this.initializeWebRequest();
        this.prepareResponse();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(container _con, WHSMobileRequestInstrumentationTask _instrumentationTask)
    {
        con = _con;
        instrumentationTask = _instrumentationTask;

        container stateInfo = conPeek(_con, #StateInfo);
        mode = conPeek(stateInfo, #StateInfoMode);
        step = conPeek(stateInfo, #StateInfoStep);

        // Default mode indicates that the request comes
        // from web service and all the data should be retrieved
        // from the session database.
        if (mode == WHSWorkExecuteMode::WebRequestDefault)
        {
            isWebRequest = true;
            mode = WHSWorkExecuteMode::Login;
            step = 0;
            con = conPoke(con, #StateInfo, [mode, step]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePass</Name>
				<Source><![CDATA[
    private boolean initializePass()
    {
        if (conLen(conPeek(con, #PassthroughInfo)) == 0)
        {
            return false;
        }
        
        pass = WHSRFPassthrough::create(conPeek(con, #PassthroughInfo));

        userId = pass.parmUserId();
        userSessionId = pass.parmUserSessionId();
            
        deviceData = WHSMobileDeviceData::newFromValues(
            pass.parmDeviceId(),
            pass.parmAppVersion(),
            pass.parmDeviceBrand(),
            pass.parmDeviceModel(),
            pass.parmDevicePlatform(),
            pass.parmDevicePlatformVersion(),
            WHSMobileDeviceAlertFlight::instance().isEnabled() ? pass.parmDeviceAlert() : '');
      
        if (WHSMobileAppDeviceFriendlyNameAndHWIDFlight::instance().isEnabled())
        {
            deviceData.hardwareIdentification = pass.parmDeviceHardwareIdentification();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoginRequest</Name>
				<Source><![CDATA[
    private boolean isLoginRequest()
    {
        return mode == WHSWorkExecuteMode::Login;
    }

]]></Source>
			</Method>
			<Method>
				<Name>response</Name>
				<Source><![CDATA[
    private container response()
    {
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAuthenticationInfoProvided</Name>
				<Source><![CDATA[
    private boolean isAuthenticationInfoProvided()
    {
        return userId && userSessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoginInfo</Name>
				<Source><![CDATA[
    private boolean validateLoginInfo()
    {
        // Login has no userId and sessionId setup
        // so if any of them is set we should better
        // not pass it through (something is wrong)
        if (userId || userSessionId)
        {
            if (!userId)
            {
                instrumentationTask.logAuthenticationIssue('Login has no userId setup.');
            }
            if (!userSessionId)
            {
                instrumentationTask.logAuthenticationIssue('Login has no sessionId setup.');
            }
            return false;
        }

        // The only allowed request which can be passed
        // with additional data is login request.
        // if it's different, something is wrong
        // so we don't allow to login.
        if (!this.isLoginRequest())
        {
            instrumentationTask.logAuthenticationIssue('Login request is expected.');
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLoginResponse</Name>
				<Source><![CDATA[
    private void prepareLoginResponse()
    {
        if (isWebRequest)
        {
            // Web requests should not contain any
            // pass through information except for
            // authentication data and device information.
            pass = WhsrfPassthrough::newEmpty();
            pass.setDeviceData(deviceData);

            con = conPoke(con, #PassThroughInfo, pass.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSessionOnOtherDevice</Name>
				<Source><![CDATA[
    private void validateSessionOnOtherDevice()
    {
        if (!sessionState.parmPass())
        {
            return;
        }

        WhsrfPassthrough prevPass = WHSRFPassthrough::create(sessionState.parmPass());
        if (!prevPass)
        {
            return;
        }

        if (prevPass.parmDeviceId() && 
            prevPass.parmDeviceId() != pass.parmDeviceId())
        {
            instrumentationTask.logAuthenticationIssue(WHSMobileAppErrorCodes::UserLoginMultipleDevicesError);

            throw error(strFmt("@WAX:MobileDeviceErrorSessionOnOtherDevice", workUserSession.LastActionDateTime, prevPass.parmDeviceId())                                    
                                    + WHSMobileAppErrorCodes::UserLoginMultipleDevicesError);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSessionToken</Name>
				<Source><![CDATA[
    private void validateSessionToken()
    {
        if (isWebRequest)
        {
            if (!this.isExpectedSessionToken())
            {
                if (this.isPreviousSessionAndSameDevice())
                {
                    isPreviousSession = true;
                    instrumentationTask.logAuthenticationIssue('Previously processed XML received again.');
                    return;
                }

                this.validateSessionOnOtherDevice();

                instrumentationTask.logAuthenticationIssue(WHSMobileAppErrorCodes::RequestSessionTokenError);
                throw error("@WAX:WarehouseMobileDeviceRequestSessionTokenValidationError" + WHSMobileAppErrorCodes::RequestSessionTokenError);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExpectedSessionToken</Name>
				<Source><![CDATA[
    private boolean isExpectedSessionToken()
    {
        // If session tokens are available they must match.
        if (pass.parmSessionToken() == emptyGuid())
        {
            return true;
        }
    
        WHSRFPassthrough passLastProcessed = WHSRFPassthrough::create(sessionState.parmPass());
         
        if (passLastProcessed.parmSessionToken() == emptyGuid() ||
            passLastProcessed.parmSessionToken() == pass.parmSessionToken())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreviousSessionAndSameDevice</Name>
				<Source><![CDATA[
    private boolean isPreviousSessionAndSameDevice()
    {
        if (pass.parmSessionToken() != emptyGuid() &&
            pass.parmDeviceId() != emptyGuid())
        {
            WHSRFPassthrough passLastProcessed = WHSRFPassthrough::create(sessionState.parmPass());
         
            if (passLastProcessed.parmPreviousSessionToken() == pass.parmSessionToken() &&
                passLastProcessed.parmDeviceId() == pass.parmDeviceId())
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUserSession</Name>
				<Source><![CDATA[
    private boolean initializeUserSession()
    {
        // We always need to read from the DB if we are not in tts because for multi AOS scenarios, if the users previous request was on another AOS, the record cache may not have been synced yet.
        ttsbegin;
        workUserSession = WHSWorkUserSession::findEnsureRecordIsReadInsideTTS(userId);
        sessionState = workuserSession.sessionState();
        ttscommit;

        // Non-existent session
        if (!workUserSession ||
            workUserSession.UserSessionId != userSessionId)
        {
            return false;
        }

        // It is an expensive operation to set the language so we only change if there is a difference.
        if (workUserSession.LanguageId &&
            workUserSession.LanguageId != infolog.language())
        {
            infolog.language(workUserSession.LanguageId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDeviceData</Name>
				<Source><![CDATA[
    private void initializeDeviceData()
    {
        pass.setDeviceData(deviceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWebRequest</Name>
				<Source><![CDATA[
    private void initializeWebRequest()
    {
        if (isWebRequest)
        {
            this.validateSessionToken();

            if (!isPreviousSession)
            {
                // Assertion against tampering of request
                WHSWorkUserSessionRequestValidator::assertAgainstSessionState(sessionState.parmSessionStateCheck(), con);
            }

            mode = sessionState.parmMode();
            step = sessionState.parmStep();
            pass = WHSRFPassthrough::create(sessionState.parmPass());
            pass.insert(#UserId, userId);
            pass.insert(#UserSessionId, guid2str(userSessionId));

            this.initializeDeviceData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareResponse</Name>
				<Source><![CDATA[
    private void prepareResponse()
    {
        if (!workUserSession.InventLocationId)
        {
            WHSWorkUserSession::updateWarehouse(userId, WHSWorkUser::find(userId).UserDefaultWarehouse);
        }

        pass.insert(#InventLocationId, workUserSession.InventLocationId);
        pass.insert(#InventSiteId, InventLocation::find(workUserSession.InventLocationId).InventSiteId);

        if (WhsWorkUserSessionAuthenticatorOverwriteIsPreviousSessionFlight::instance().isEnabled())
        {
            // Prohibits using of cached isPreviousSession value from pass that belonged to previous request.
            // If cached value is true, system would always return last processed request forcing user to kill work user session to unblock operations.
            pass.parmIsPreviousSession(isPreviousSession);
        }
        else if (isPreviousSession)
        {
            pass.parmIsPreviousSession(true);
        }

        if (sessionState.parmPrevPass() != conNull())
        {
            mode = WHSWorkExecuteMode::CycleCounting;
        }

        con = conPoke(con, #StateInfo, [mode, step]);
        con = conPoke(con, #PassThroughInfo, pass.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>authenticateSession</Name>
				<Source><![CDATA[
    public static container authenticateSession(container _con)
    {
        if (!_con)
        {
            return _con;
        }

        using (var instrumentationTask = WHSMobileRequestInstrumentationTask::newFromAuthenticateSession(_con))
        {
            WhsWorkUserSessionAuthenticator authenticator = new WhsWorkUserSessionAuthenticator();
            authenticator.initialize(_con, instrumentationTask);

            if (authenticator.authenticate())
            {
                return authenticator.response();
            }
        }

        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>