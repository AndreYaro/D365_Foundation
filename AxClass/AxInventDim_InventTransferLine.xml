<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxInventDim_InventTransferLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AxInventDim_InventTransferLine</c> class accesses the <c>InventDim</c> table, applies the
///    correct update sequence, and provides default values wherever possible.
/// </summary>
/// <remarks>
///    This internal <c>AxBC</c> class is derived from the <see cref="T:AxInternalBase" />.
/// </remarks>
class AxInventDim_InventTransferLine extends AxInventDim
{
    AxInventTransferLine axInventTransferLine;
    int                  inventDimIdx;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an instance of the <c>AxInventDim</c> table
    /// </summary>
    /// <param name="_axInventDim">
    ///    An <c>AxInventDim</c> buffer; optional.
    /// </param>
    /// <returns>
    ///    The current record of the <c>AxInventDim</c> table.
    /// </returns>
    public AxInventDim axInventDim(AxInventDim _axInventDim = null)
    {
        AxInventDim   axInventDim = AxInventDim::construct();
        InventDim     inventDimtest;

        if (! inventDimIdx)
        {
            inventDimIdx = this.nextCacheIdx();
        }

        if (! prmisDefault(_axInventDim))
        {
            axInventDim = _axInventDim;
            this.classCacheInsert(inventDimIdx, axInventDim);
        }
        else
        {
            if (this.classCacheExist(inventDimIdx))
            {
                axInventDim = this.classCacheLookup(inventDimIdx);
                inventDimtest = axInventDim.currentRecord();
            }
            else
            {
                inventDimtest = InventDim::find(axInventTransferLine.transferLine_SalesCalcAvailableDlvDates().InventDimId);
                axInventDim   = AxInventDim::newInventDim(inventDimtest);
                this.classCacheInsert(inventDimIdx, axInventDim);
            }
        }

        return axInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>axInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an instance of the <c>AxInventTransferLine</c> table.
    /// </summary>
    /// <param name="_axInventTransferLine">
    ///    An <c>AxInventTransferLine</c> buffer; optional.
    /// </param>
    /// <returns>
    ///    The current record of the <c>AxInventTransferLine</c> table.
    /// </returns>
    public AxInventTransferLine axInventTransferLine(AxInventTransferLine _axInventTransferLine = axInventTransferLine)
    {
        axInventTransferLine = _axInventTransferLine;
        return axInventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether inactive inventory dimensions are specified within incoming XML data.
    /// </summary>
    /// <remarks>
    ///    This method also checks whether incoming values of the <c>inventdim</c> fields are in the master.
    ///    If the validation fails, the method throws an error.
    /// </remarks>
    private void checkInventDim()
    {
        boolean                                 ok = true;
        InventDimGroupFieldSetupEnumerator      enumerator = InventDimGroupSetup::newItemId(axInventTransferLine.parmItemId()).getFieldSetupEnumerator();
        InventDimGroupFieldSetup                inventDimGroupFieldSetup;
        fieldId                                 inventDimFieldId;

        while (enumerator.moveNext())
        {
            inventDimGroupFieldSetup = enumerator.current();
            inventDimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (!(inventDimGroupFieldSetup.isActive()))
            {
                if (inventDimFieldId == fieldnum(InventDim, InventLocationId) && axInventTransferLine.axInventDim().parmInventLocationId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, InventBatchId) && axInventTransferLine.axInventDim().parmInventBatchId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, wmsLocationId) && axInventTransferLine.axInventDim().parmWMSLocationId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, InventSerialId) && axInventTransferLine.axInventDim().parmInventSerialId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, InventColorId) && axInventTransferLine.axInventDim().parmInventColorId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, InventVersionId) && axInventTransferLine.axInventDim().parmInventVersionId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldNum(InventDim, InventStyleId) && axInventTransferLine.axInventDim().parmInventStyleId())
                {
                    ok = false;
                    error(strFmt("@SYS97673", fieldId2pname(tableNum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, InventSizeId) && axInventTransferLine.axInventDim().parmInventSizeId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                if (inventDimFieldId == fieldnum(InventDim, ConfigId) && axInventTransferLine.axInventDim().parmConfigId())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                // <GEERU>
                if (inventDimFieldId == fieldnum(InventDim, InventProfileId_RU) && axInventTransferLine.axInventDim().parmInventProfileId_RU())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }

                if (inventDimFieldId == fieldnum(InventDim, InventOwnerId_RU) && axInventTransferLine.axInventDim().parmInventOwnerId_RU())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }

                if (inventDimFieldId == fieldnum(InventDim, InventGtdId_RU) && axInventTransferLine.axInventDim().parmInventGTDId_RU())
                {
                    ok = false;
                    error(strfmt("@SYS97673", fieldid2pname(tablenum(InventDim), inventDimFieldId)));
                }
                // </GEERU>
            }
        }

        if (!ok)
        {
            throw error("@SYS97674");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inputStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the input status.
    /// </summary>
    /// <param name="_inputStatus">
    ///    The input status, which may be either Internal or External; optional.
    /// </param>
    /// <returns>
    ///    An integer that represents the input status.
    /// </returns>
    protected int inputStatus(InternalExternal _inputStatus = axInventTransferLine.callInputStatus())
    {
        if (axInventTransferLine)
        {
            return axInventTransferLine.callInputStatus(_inputStatus);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modify</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>InventTransferLine</c> record which is related to the current <c>inventDim</c>
    ///    record.
    /// </summary>
    /// <remarks>
    ///    When updating <c>axInventTransferLine</c> through an instance of
    ///    <c>axInventDim_InventTransferLine</c>, the <c>setTableFields</c> method of the <c>AxInventDim</c>
    ///    class is called through the <c>save</c> method.
    /// </remarks>
    public void modify()
    {
        axInventTransferLine.modify();
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>InventDimId</c> field through an instance of the <c>AxInventDim_
    ///    InventTransferLine</c> class.
    /// </summary>
    public void save()
    {
        this.checkInventDim();

        axInventTransferLine.updateFromInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>ConfigId</c> field for a particular item if it is not provided in
    ///    the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>ConfigId</c> field is active for the particular item and if no external value is passed,
    ///    this method sets the default value for the field.
    /// </remarks>
    public void setConfigId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, ConfigId)))
        {
            return;
        }

        super();

        axInventTransferLine.setInventTransferRecordFields();

        if (axInventTransferLine.isInventTransferRecordFieldsSet())
        {
            if (axInventTransferLine.inventTable())
            {
                this.parmConfigId(axInventTransferLine.inventTable().StandardConfigId);
            }

            if (this.axInventDim())
            {
                this.parmConfigId(this.axInventDim().parmConfigId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>InventBatchId</c> field of a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventBatchId</c> field is active for the particular item and no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventBatchId()
    {
        super();

        if (this.axInventDim())
        {
            this.parmInventBatchId(this.axInventDim().parmInventBatchId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>InventColorId</c> field of a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventColorId</c> field is active for the particular item and no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventColorId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, InventColorId)))
        {
            return;
        }

        super();

        axInventTransferLine.setInventTransferRecordFields();

        if (axInventTransferLine.isInventTransferRecordFieldsSet())
        {
            if (axInventTransferLine.inventTable())
            {
                this.parmInventColorId(axInventTransferLine.inventTable().StandardInventColorId);
            }

            if (this.axInventDim())
            {
                this.parmInventColorId(this.axInventDim().parmInventColorId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>InventVersionId</c> field of a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventVersionId</c> field is active for the particular item and no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventVersionId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, InventVersionId)))
        {
            return;
        }

        super();

        axInventTransferLine.setInventTransferRecordFields();

        if (axInventTransferLine.isInventTransferRecordFieldsSet())
        {
            if (axInventTransferLine.inventTable())
            {
                this.parmInventVersionId(axInventTransferLine.inventTable().StandardInventVersionId);
            }

            if (this.axInventDim())
            {
                this.parmInventVersionId(this.axInventDim().parmInventVersionId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>SerialId</c> field of a particular item if it is not provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventGTDId_RU</c> field is active for the particular item and no external value is passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventGTDId_RU()
    {
        super();

        if (this.axInventDim())
        {
            this.parmInventGTDId_RU(this.axInventDim().parmInventGTDId_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>InventLocationId</c> field for a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventLocationId</c> field is active for the particular item and if no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventLocationId()
    {
        InventDim   inventDimThis;

        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, InventLocationId)))
        {
            return;
        }

        super();

        axInventTransferLine.setInventTransferRecordFields();

        if (axInventTransferLine.isInventTransferRecordFieldsSet())
        {
            if (axInventTransferLine.inventTable())
            {
                inventDimThis = InventDim::findOrCreate(inventDim); // pass potential site when initializing
                this.parmInventLocationId(axInventTransferLine.inventTable().inventLocationId('', inventDimThis.InventDimId));
            }

            if (axInventTransferLine.inventTransferTableRecord().InventLocationIdFrom)
            {
                this.parmInventLocationId(axInventTransferLine.inventTransferTableRecord().InventLocationIdFrom);
            }

            if (this.axInventDim())
            {
                this.parmInventLocationId(this.axInventDim().parmInventLocationId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventOwnerId_RU</Name>
				<Source><![CDATA[
    public void setInventOwnerId_RU()
    {
        super();

        if (this.axInventDim())
        {
            this.parmInventOwnerId_RU(this.axInventDim().parmInventOwnerId_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    public void setInventProfileId_RU()
    {
        super();

        if (this.axInventDim())
        {
            this.parmInventProfileId_RU(this.axInventDim().parmInventProfileId_RU());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>SerialId</c> field of a particular item if it is not provided in
    ///    the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>SerialId</c> field is active for the particular item and no external value is passed,
    ///    this method sets the default value for the field.
    /// </remarks>
    public void setInventSerialId()
    {
        super();

        if (this.axInventDim())
        {
            this.parmInventSerialId(this.axInventDim().parmInventSerialId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>InventSizeId</c> field for a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventSizeId</c> field is active for the particular item and if no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventSizeId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, InventSizeId)))
        {
            return;
        }

        super();

        axInventTransferLine.setInventTransferRecordFields();

        if (axInventTransferLine.isInventTransferRecordFieldsSet())
        {
            if (axInventTransferLine.inventTable())
            {
                this.parmInventSizeId(axInventTransferLine.inventTable().StandardInventSizeId);
            }

            if (this.axInventDim())
            {
                this.parmInventSizeId(this.axInventDim().parmInventSizeId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>InventStyleId</c> field of a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>InventStyleId</c> field is active for the particular item and no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setInventStyleId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, InventStyleId)))
        {
            return;
        }

        super();

        axInventTransferLine.setInventTransferRecordFields();

        if (axInventTransferLine.isInventTransferRecordFieldsSet())
        {
            if (axInventTransferLine.inventTable())
            {
                this.parmInventStyleId(axInventTransferLine.inventTable().StandardInventStyleId);
            }

            if (!this.parmInventStyleId() && this.axInventDim())
            {
                this.parmInventStyleId(this.axInventDim().parmInventStyleId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWMSLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default value for the <c>WMSLocationId</c> field for a particular item if it is not
    ///    provided in the incoming XML.
    /// </summary>
    /// <remarks>
    ///    If the <c>WMSLocationId</c> field is active for the particular item and if no external value is
    ///    passed, this method sets the default value for the field.
    /// </remarks>
    public void setWMSLocationId()
    {
        InventDim               localInventDim;
        InventItemLocation      inventItemLocation;

        super();

        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, wmsLocationId)))
        {
            return;
        }

        localInventDim = this.currentRecord();
        localInventDim.InventLocationId = axInventTransferLine.inventTransferTableRecord().InventLocationIdFrom;
        localInventDim.InventSiteId = InventLocation::find(localInventDim.InventLocationId).InventSiteId;

        inventItemLocation  = InventItemLocation::findFixedWarehouse(axInventTransferLine.parmItemId(), InventDim::findOrCreate(localInventDim).InventDimId);

        if (inventItemLocation.inventLocationID() == localInventDim.InventLocationId)
        {
            this.parmWMSLocationId(inventItemLocation.wmsLocationIdDefaultReceipt);
        }
        else
        {
            this.parmWMSLocationId(InventLocation::find(localInventDim.InventLocationId).wmsLocationIdDefaultReceipt);
        }

        if (this.axInventDim())
        {
            this.parmWMSLocationId(this.axInventDim().parmWMSLocationId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAxInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>AxInventDim_InventTransferLine</c> class.
    /// </summary>
    /// <param name="_axInventTransferLine">
    ///    An instance of the <c>AxInventTransferLine</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>AxInventDim_InventTransferLine</c> class.
    /// </returns>
    public static AxInventDim_InventTransferLine newAxInventTransferLine(AxInventTransferLine _axInventTransferLine)
    {
        AxInventDim_InventTransferLine  axInventDim_InventTransferLine;

        axInventDim_InventTransferLine = new AxInventDim_InventTransferLine();
        axInventDim_InventTransferLine.axInventTransferLine(_axInventTransferLine);

        return axInventDim_InventTransferLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>