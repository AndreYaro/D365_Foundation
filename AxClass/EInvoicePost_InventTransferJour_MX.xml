<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoicePost_InventTransferJour_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the posting of the CFDI document for the packing slips.
/// </summary>
public class EInvoicePost_InventTransferJour_MX extends EInvoicePost_MX
{
    private const str DocumentCurrency = 'MXN';

    InventTransferJour inventTransferJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createElectronicInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the electronic invoice record that is based on the original invoice.
    /// </summary>
    public void createElectronicInvoiceJour()
    {
        InventTransferParmTable inventTransParmTable = parmTable;

        if (inventTransParmTable && (inventTransParmTable.UseCartaPorte_MX == NoYes::Yes
            || inventTransferJour.inventTransferTable().CFDICartaPorteEnabled_MX == NoYes::Yes))
        {
            eInvoiceJour.TransCardIncluded = NoYes::Yes;
            TransportationDocument transDocument = TransportationDocument::find(inventTransferJour.inventTransferTable().TransportationDocument);

            this.initEInvoiceJourFromTransDocument_MX(transDocument);

            eInvoiceJour.IdCCP_MX = this.getIdCCPForCartaPorteV3();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElectronicInvoiceTrans</Name>
				<Source><![CDATA[
    protected void createElectronicInvoiceTrans()
    {
        InventTransferJourLine localInventTransferJourLine;
        RecordInsertList recordInsertList = new recordInsertList(tableNum(EInvoiceTrans_MX));

        while select ItemId from localInventTransferJourLine
            where localInventTransferJourLine.VoucherId   == inventTransferJour.VoucherId
                && localInventTransferJourLine.TransferId == inventTransferJour.TransferId
        {
            eInvoiceTrans.RefTableId = localInventTransferJourLine.TableId;
            eInvoiceTrans.RefRecId = localInventTransferJourLine.RecId;
            eInvoiceTrans.RefEInvoiceJourRecId = eInvoiceJour.RecId;

            if (eInvoiceJour.TransCardIncluded == NoYes::Yes)
            {
                InventTable inventTable;

                select firstonly HMIMIndicator from inventTable
                    where inventTable.ItemId == localInventTransferJourLine.ItemId;

                if (inventTable.HMIMIndicator == NoYes::Yes)
                {
                    HMIMItemMaterial itemMaterial;

                    select firstonly RegCode, PackingGroupCode from itemMaterial
                        where itemMaterial.ItemId == localInventTransferJourLine.ItemId;

                    eInvoiceTrans.IsHazardous = NoYes::Yes;
                    eInvoiceTrans.HazardousMaterialType = itemMaterial.RegCode;
                    eInvoiceTrans.ContainerType = itemMaterial.PackingGroupCode;
                }
                else
                {
                    eInvoiceTrans.IsHazardous = NoYes::No;
                }
            }

            recordInsertList.add(eInvoiceTrans);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceJourMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the mapping that is based on a <c>InventTransferJour</c> record.
    /// </summary>
    /// <returns>
    /// An instance of the <c>EInvoiceJourBaseMap_MX</c> class.
    /// </returns>
    public EInvoiceJourBaseMap_MX createInvoiceJourMapping()
    {
        return EInvoiceJourBaseMap_MX::construct(inventTransferJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original invoice journal.
    /// </summary>
    /// <returns>Returns the original invoice journal.</returns>
    protected Common invoiceJour()
    {
        return inventTransferJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode getCurrencyCode()
    {
        return DocumentCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDate</Name>
				<Source><![CDATA[
    public Date getInvoiceDate()
    {
        return inventTransferJour.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transfer ID of the <c>InventTransferJour</c> record.
    /// </summary>
    /// <returns>
    /// The transfer ID of the <c>InventTransferJour</c> record.
    /// </returns>
    public InvoiceId getInvoiceId()
    {
        return inventTransferJour.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
    public RefRecId getInvoiceJourRecId()
    {
        return inventTransferJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourTableId</Name>
				<Source><![CDATA[
    public RefTableId getInvoiceJourTableId()
    {
        return inventTransferJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(InventTransferJour _inventTransferJour )
    {
        super();

        inventTransferJour = _inventTransferJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNumberSeq</Name>
				<Source><![CDATA[
    protected RefRecId getInvoiceNumberSeq()
    {
        NumberSequenceReference numberSequenceReference = InventParameters::numRefTransferId();
        RefRecId numberSeqId = numberSequenceReference.NumberSequenceId;

        return numberSeqId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateNumber</Name>
				<Source><![CDATA[
    protected CertificateNumber_MX getCertificateNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfirmNumber</Name>
				<Source><![CDATA[
    protected EInvoiceCFDIConfirmNumber_MX getConfirmNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTrade</Name>
				<Source><![CDATA[
    protected ForeignTrade_MX getForeignTrade()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTemporaryExport</Name>
				<Source><![CDATA[
    protected CFDITemporaryExport_MX getTemporaryExport()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncotermCode</Name>
				<Source><![CDATA[
    protected SATIncoterm_MX getIncotermCode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    protected ExchRate getExchRate()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumRegIdTrib</Name>
				<Source><![CDATA[
    protected NumRegIdTrib_MX getNumRegIdTrib()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMethod</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPaymMethod()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymMode</Name>
				<Source><![CDATA[
    public CustPaymMode getPaymMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    protected EInvoiceExtCodeId_MX getPurpose()
    {
        return EInvoiceCFDIParameters_MX::find().CFDIVersion >= EInvoiceCFDIVersion_MX::V4 ? 'S01' : 'P01';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCertificate</Name>
				<Source><![CDATA[
    protected SourceCertificate_MX getSourceCertificate()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    protected InvoiceAmountMST getTotalAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceJour</Name>
				<Source><![CDATA[
    protected void initFromInvoiceJour()
    {
        super();
        eInvoiceJour.CFDIDocType = CFDIDocType_MX::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        return !eInvoiceJour.TransCardIncluded || this.validateCartaPorte();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCartaPorte</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows if the document has a transportation note.
    /// </summary>
    /// <returns>
    /// true if the document has a transportation note; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean getCartaPorte()
    {
        return invoiceJourMapping.isCartaPorteUsed();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>