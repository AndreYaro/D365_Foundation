<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsReservationLevelStrategyAllNoBlnk</Name>
	<SourceCode>
		<Declaration><![CDATA[/// <summary>
/// The <c>WHSReservationLevelStrategyAllNoBlnk</c> class is for the reservation strategy where all dimensions except those allowed blank must be determined.
/// </summary>
[WHSReserveHierarchyLvlStratAttribute(WHSReservationHierarchyLevelStrategyType::AllNotAllowedBlank)]
/// <summary>
/// The <c>WHSReservationLevelStrategyAllNoBlnk</c> class is for the reservation strategy where all dimensions except those allowed blank must be determined.
/// </summary>
public class whsReservationLevelStrategyAllNoBlnk extends WHSReservationHierarchyLevelStrategy
{
    #WHSRESERVATIONHIERARCHY
    List reservationHierarchyListTopDown;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReservableHierarchyList</Name>
				<Source><![CDATA[
        private List getReservableHierarchyList(WHSReservationHierarchySortOrder _sortOrder)
    {
        return this.reservationHierarchyProvider().getDimListAllFromInventTable(inventTable, _sortOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservableHierarchyListTopDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of reservable dimensions in the reservation hierarchy based on the transaction type.
    /// </summary>
    /// <returns>
    /// A <c>List</c> containing the inventory dimensions that can be reserved for the transaction.
    /// </returns>
    public List getReservableHierarchyListTopDown()
    {
        if (!reservationHierarchyListTopDown)
        {
            reservationHierarchyListTopDown = this.getReservableHierarchyList(WHSReservationHierarchySortOrder::TopDown);
        }

        return reservationHierarchyListTopDown;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservationHierarchyLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines reservation hierarchy level that is needed to determine values for dimensions that are not allowed as blank issue or receipt.
    /// </summary>
    /// <returns>
    /// The reservation hierarchy level that is needed to determine values for dimensions that are not allowed as blank issue or receipt.
    /// </returns>
    public WHSReservationHierarchyLevel getReservationHierarchyLevel()
    {
        WHSReservationHierarchyLevel        reservationLevel;
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  whsReservationHierarchyElementData;
        FieldId                             dimFieldId;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;

        //reservation needs to take place at the bottom most level (the highest value) to support scenarios where a lower dimension was specified and a higher dimension was left blank
        le = this.getReservableHierarchyList(WHSReservationHierarchySortOrder::BottomUp).getEnumerator();
        reservationLevel = 0;

        while (le.moveNext() && reservationLevel == 0)
        {
            whsReservationHierarchyElementData = le.current();
            dimFieldId = whsReservationHierarchyElementData.parmDimensionFieldId();

            if (!inventDimReservationCriteria.(dimFieldId))
            {
                inventDimGroupFieldSetup = this.inventDimGroupSetup().getFieldSetup(whsReservationHierarchyElementData.parmDimensionFieldId());
                //determine if blank is allowed
                if (inventDimGroupFieldSetup.isActive()
                && (!inventDimGroupFieldSetup.isAllowBlankIssueEnabled()
                || !inventDimGroupFieldSetup.isAllowBlankReceiptEnabled()))
                {
                    reservationLevel = whsReservationHierarchyElementData.parmLevel();
                }
            }
            else
            {
                reservationLevel = whsReservationHierarchyElementData.parmLevel();
            }
        }

        return reservationLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDetermineMissingDimensions</Name>
				<Source><![CDATA[
        public boolean mustDetermineMissingDimensions()
    {
        boolean mustDetermineMissingDimensions = false;

        mustDetermineMissingDimensions = WHSReservationHierarchyInventDimUtil::inventDimHasNotAllowedBlankValues(inventDimReservationCriteria,this.getReservableHierarchyListTopDown(), this.inventDimGroupSetup());

        return mustDetermineMissingDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyReserveOrderedAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if only ordered available should be included for reservations.
    /// </summary>
    /// <returns>
    /// returns false.
    /// </returns>
    public boolean onlyReserveOrderedAvailable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyReservePhysicalAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if only physical available should be included for reservations.
    /// </summary>
    /// <returns>
    /// returns true.
    /// </returns>
    public boolean onlyReservePhysicalAvailable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>