<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBContribAssetTransCreate_Acquisition_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FBContribAssetTransCreate_Acquisition_BR extends FBContribAssetTransCreate_BR
{
    FiscalDocument_BR       fiscalDocument;
    FiscalDocumentLine_BR   fiscalDocumentLine;

    boolean                 acquiredByJournal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create()
    {
        FBContribAssetTrans_BR  contribAssetTrans;
        FBContribAssetTable_BR  contribAssetTable;
        BrazilParameters        brazilParameters = BrazilParameters::find();

        if (!assetTrans)
        {
            return;
        }

        select firstOnly contribAssetTrans
            where contribAssetTrans.AssetTrans == assetTrans.RecId;

        // Do not process acquisiton if the asset is acquired or closed
        if (FBContribAssetTable_BR::find(contribAssetTrans.FBContribAssetTable_BR).Status != FBCIAPAssetStatus_BR::NoAcquisition)
        {
            return;
        }

        this.findFiscalDocument();

        if (acquiredByJournal || fiscalDocument)
        {
            contribAssetTable = this.findOrCreateContribAssetTable(FBContribAssetTransCreate_Acquisition_BR::getContribAssetOrigin(fiscalDocumentLine.RecId != 0 ? fiscalDocumentLine.CFOP : ''));

            if (!contribAssetTrans)
            {
                FBContribAssetTransCreate_BR::decreaseRemainingInstallments(contribAssetTable);

                contribAssetTrans.FBContribAssetTable_BR    = contribAssetTable.RecId;
                contribAssetTrans.FBBookingPeriod_BR        = bookingPeriod.RecId;
                contribAssetTrans.TransType                 = FBContribAssetTransType_BR::Acquisition;
                contribAssetTrans.TransDate                 = assetTrans.TransDate;
                contribAssetTrans.AssetTrans                = assetTrans.RecId;
                contribAssetTrans.InstallmentNum            = 1;
                contribAssetTrans.PISTaxationCode           = contribAssetTable.PISTaxationCode;
                contribAssetTrans.COFINSTaxationCode        = contribAssetTable.COFINSTaxationCode;
                contribAssetTrans.PISTaxValue               = brazilParameters.BasicTaxValuePISNonCumulative;
                contribAssetTrans.COFINSTaxValue            = brazilParameters.BasicTaxValueCOFINSNonCumulative;
            }

            if (fiscalDocument)
            {
                FBContribAssetTransCreate_Acquisition_BR::updateContribAssetTableAmounts(contribAssetTable, fiscalDocumentLine.RecId);

                CurrencyCode currencyCode = Ledger::accountingCurrency();

                contribAssetTrans.PISInstallmentBaseAmount = CurrencyExchange::round(contribAssetTable.PISTaxBaseAmount / contribAssetTable.Installments, currencyCode);
                contribAssetTrans.COFINSInstallmentBaseAmount = CurrencyExchange::round(contribAssetTable.COFINSTaxBaseAmount / contribAssetTable.Installments, currencyCode);

                if (contribAssetTable.PISAmount || contribAssetTable.COFINSAmount)
                {
                    contribAssetTrans.PISInstallmentAmount = FBCIAPCreditCalc_BR::calcInstallment(contribAssetTable.PISAmount, contribAssetTable.Installments);
                    contribAssetTrans.COFINSInstallmentAmount = FBCIAPCreditCalc_BR::calcInstallment(contribAssetTable.COFINSAmount, contribAssetTable.Installments);
                }
            }

            contribAssetTrans.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFiscalDocument</Name>
				<Source><![CDATA[
    private void findFiscalDocument()
    {
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;

        if (!fiscalDocument)
        {
            select firstonly fiscalDocument
                where   fiscalDocument.Direction            == FiscalDocDirection_BR::Incoming
                    &&  (fiscalDocument.InventoryVoucher    == assetTrans.Voucher || fiscalDocument.Voucher == assetTrans.Voucher)
                    &&  fiscalDocument.AccountingDate       == assetTrans.TransDate
                join RecId, CFOP from fiscalDocumentLine
                    where   fiscalDocumentLine.FiscalDocument   == fiscalDocument.RecId
                        &&  fiscalDocumentLine.AssetId          == assetTrans.AssetId;

            if (!fiscalDocument)
            {
                acquiredByJournal = true;

                warning("@SYS4006725");
            }
            else
            {
                select RecId from bookingPeriodFiscalDocument
                    where   bookingPeriodFiscalDocument.fbBookingPeriod_BR  == bookingPeriod.RecId
                        &&  bookingPeriodFiscalDocument.FiscalDocument_BR   == fiscalDocument.RecId;

                if (!bookingPeriodFiscalDocument)
                {
                    fiscalDocument.clear();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContribAssetOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the asset origin.
    /// </summary>
    /// <param name="_cfopId">
    /// Cfop related to the asset acquisition.
    /// </param>
    /// <returns>
    /// The asset origin: internal or external market.
    /// </returns>
    public static FBContribAssetOrigin_BR getContribAssetOrigin(CFOPId_BR _cfopId)
    {
        CFOPTable_BR            cfop;
        FBContribAssetOrigin_BR assetOrigin;

        if (_cfopId)
        {
            cfop        = CFOPTable_BR::findByCFOPId(_cfopId);
            assetOrigin = (cfop && cfop.CustVendLocation == CustVendLocation_BR::OutsideCountry) ? FBContribAssetOrigin_BR::ExternalMarket : FBContribAssetOrigin_BR::InternalMarket;
        }
        else
        {
            assetOrigin = FBContribAssetOrigin_BR::InternalMarket;
        }

        return assetOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContribAssetTableAmounts</Name>
				<Source><![CDATA[
    public static void updateContribAssetTableAmounts(  FBContribAssetTable_BR      _contribAssetTable,
                                                        FiscalDocumentLineRecId_BR  _fiscalDocumentLineRecId)
    {
        FiscalDocumentTaxTrans_BR   fiscalDocumentTaxTrans;

        _contribAssetTable.selectForUpdate(true);

        select TaxAmount, TaxAmountOther, TaxBaseAmount, TaxBaseAmountOther, TaxValue, TaxNonRecoverablePct from fiscalDocumentTaxTrans
            where   fiscalDocumentTaxTrans.FiscalDocumentLine   == _fiscalDocumentLineRecId
                &&  fiscalDocumentTaxTrans.Type                 == TaxType_BR::PIS;

        _contribAssetTable.PISAmount        = fiscalDocumentTaxTrans.TaxAmount + fiscalDocumentTaxTrans.TaxAmountOther;
        _contribAssetTable.PISTaxBaseAmount = fiscalDocumentTaxTrans.TaxBaseAmount + fiscalDocumentTaxTrans.TaxBaseAmountOther;

        CurrencyCode currencyCode = Ledger::accountingCurrency();

        if (fiscalDocumentTaxTrans.TaxNonRecoverablePct != fiscalDocumentTaxTrans.TaxValue && fiscalDocumentTaxTrans.TaxValue != 0)
        {
            _contribAssetTable.PISAmount -= CurrencyExchange::round(_contribAssetTable.PISAmount * fiscalDocumentTaxTrans.TaxNonRecoverablePct / fiscalDocumentTaxTrans.TaxValue, currencyCode);
        }

        select TaxAmount, TaxAmountOther, TaxBaseAmount, TaxBaseAmountOther, TaxValue, TaxNonRecoverablePct from fiscalDocumentTaxTrans
            where   fiscalDocumentTaxTrans.FiscalDocumentLine   == _fiscalDocumentLineRecId
                &&  fiscalDocumentTaxTrans.Type                 == TaxType_BR::COFINS;

        _contribAssetTable.COFINSAmount         = fiscalDocumentTaxTrans.TaxAmount + fiscalDocumentTaxTrans.TaxAmountOther;
        _contribAssetTable.COFINSTaxBaseAmount  = fiscalDocumentTaxTrans.TaxBaseAmount + fiscalDocumentTaxTrans.TaxBaseAmountOther;

        if (fiscalDocumentTaxTrans.TaxNonRecoverablePct != fiscalDocumentTaxTrans.TaxValue && fiscalDocumentTaxTrans.TaxValue != 0)
        {
            _contribAssetTable.COFINSAmount -= CurrencyExchange::round(_contribAssetTable.COFINSAmount * fiscalDocumentTaxTrans.TaxNonRecoverablePct / fiscalDocumentTaxTrans.TaxValue, currencyCode);
        }

        _contribAssetTable.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>