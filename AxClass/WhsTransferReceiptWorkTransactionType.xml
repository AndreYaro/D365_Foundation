<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsTransferReceiptWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsTransferReceiptWorkTransactionType</c> class handles logic specific to the transfer receipt work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::TransferReceipt)]
class WhsTransferReceiptWorkTransactionType extends WhsTransferWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    public boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateSpecificReservationRequired</Name>
				<Source><![CDATA[
    internal boolean isLicensePlateSpecificReservationRequired()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        switch (_whsLocDirTable.LocateBy)
        {
            case WHSLocDirLocateBy::Cluster:
                return queryStr(WHSWork);
            case WHSLocDirLocateBy::ASN:
                if (WHSTransferReceiptASNFlight::instance().isEnabled())
                {
                    return queryStr(WHSLocDirASNTransfer);
                }
                break;
        }

        return queryStr(WHSLocDirTransferReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        boolean rangesAdded = false;
        
        if (WHSTransferReceiptASNFlight::instance().isEnabled())
        {
            rangesAdded = this.addRangeLicensePlate(_parameters);
        }

        if (!rangesAdded)
        {
            super(_parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeLicensePlate</Name>
				<Source><![CDATA[
    private boolean addRangeLicensePlate(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.locDirTable.isLocatingWholeLP())
        {
            switch (_parameters.locDirTable.locateBy)
            {
                case WHSLocDirLocateBy::ASN:
                    SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSUOMStructure)), fieldNum(WHSUOMStructure, LicensePlateId)).value(queryValue(_parameters.targetLicensePlateId));
                    SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSUOMStructure)), fieldNum(WHSUOMStructure, ShipmentId)).value(queryValue(_parameters.shipmentId));
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateTransferReceipt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return _hasTargetLicensePlate ? WHSWorkExecuteMode::PurchaseOrderLine : WHSWorkExecuteMode::ASNLicensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        if (WHSParameters::find().UnregisterAtWorkCancel)
        {
            this.updateUnitStructureWhenWorkIsCanceled(_workTable.WorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        if (_locDirTable.LocateBy == WHSLocDirLocateBy::Cluster)
        {
            QueryBuildDataSource qbdsWorkTable = _query.dataSourceTable(tableNum(WHSWorkTable));
            SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
            SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));
        }
        else
        {
            QueryBuildDataSource qbdsInventTransferTable = _query.dataSourceTable(tableNum(InventTransferTable));
            SysQuery::findOrCreateRange(qbdsInventTransferTable, fieldNum(InventTransferTable, InventLocationIdTo)).value(queryValue(_locDirTable.InventLocationId));
        }

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>