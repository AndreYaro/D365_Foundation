<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class   SalesFormLetter
extends FormLetterServiceController implements SysErrorMessageHelpScopeIBatchProvider, SysErrorMessageHelpScopeIBatchShowLink
{
    private KittingISalesFormLetterHandler kittingHandler;

    SalesFormLetterContract     salesFormLetterContract;
    FormRun                     salesEditLines;

    SalesQuantity               salesQuantity;

    boolean                     ledgerVoucherIsSet;
    LedgerVoucher               ledgerVoucher;

    SalesParmTable              salesParmTable;

    PdsCWInventQty              pdsCWUpdateNow;
    PdsMRCPostingError          mrcPostingErr;
    PdsMRCPrintMSDSOnPack       mrcPrintOnPack;
    PdsMRCParameters            pdsMRCParameters;
    TypeOfCreditmaxCheck        checkCreditMax;

    container                   printerSettingsBillOfExchange;
    container                   packedOutputContract;

    boolean                     useShippingStat;
    NoYes                       defaultGiroType;
    boolean                     giroAllSame;

    boolean                     lockSalesUpdate;
    boolean                     enableUpdateNow;

    Set                         postedTableRefIds;

    boolean                     skipRunShipCarrier;
    boolean                     editLinesChanged;

    // Options that determine how miscellaneous
    // charges should be printed on invoice.
    MCRMiscChargePrintOption     mcrMiscChargePrintOption;

    //  Performance improvement, save off if it there is a stale
    //  authorization to make sure it doesn't execute unnecessarily.
    map                         mcrStaleAuthMap;

    // The packing box name will be put on the
    // inventPickingListJour later in initJournal() (on the
    // SalesFormLetter_PickingList class).
    MCRPackingBoxName            MCRPackingBoxName;

    // <GEERU>
    boolean                     voucherEqualsNumber;
    boolean                     countryRegion_RU;
    Set                         postedJournalList;
    // </GEERU>

    // <GIN>
    CustomsExportOrderTable_IN  customsExportOrderTable;
    CustomsExportOrderLine_IN   customsExportOrderLine;
    CustomsExportOrderType_IN   customsExportOrderType;
    NoYesId                     taxesMarked;
    // </GIN>

    // <GCN>
    Map                   taxProfileMap;
    // </GCN>
    NoYes printCODCashReceipt_W;
    container readyCashReceipts;

    private TradeLineRefId synchedParmLineTableRefId;

    // <GEERU><GIN><GCN><GEEU>
    #ISOCountryRegionCodes
    // </GEEU></GCN></GIN></GEERU>
    //List of parameters common for SalesFormLetter_* classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    //All variables in the parmListCommonCS must also be added to the method resetParmListCommonCS.
    //After any changes, both versions must be increased.
    #define.ParentVersion(8)
    #define.CurrentVersion(9)
    #LOCALMACRO.ParmListCommonCS
        reArrangeNow,
        enableUpdateNow,
        lockSalesUpdate,
        editLinesChanged,
        validateAll,
        callerFormName,
        checkCreditMax,
        packedOutputContract
    #ENDMACRO
    #define.SumVersion16(16)
    #LOCALMACRO.ParmListCommonCS_16
        reArrangeNow,
        enableUpdateNow,
        lockSalesUpdate,
        editLinesChanged,
        validateAll,
        callerFormName,
        checkCreditMax
    #ENDMACRO

    #define.PdsCurrentVersion(6)
    #localMacro.PdsCurrentList
        mrcPostingErr,
        mrcPrintOnPack
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterOperationBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the main logic after an operation before cleanup.
    /// </summary>
    protected void afterOperationBody()
    {
        super();

        if (!skipRunShipCarrier)
        {
            this.runShipCarrier();
        }

        if (mrcPrintOnPack)
        {
            this.printPSDSDocuRef();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAgreement_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the <c>AgreementHeaderExt_RU</c> field for processed sales orders.
    /// </summary>
    /// <returns>
    ///     true if the <c>AgreementHeaderExt_RU</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean checkAgreement_RU()
    {
        boolean              ok              = true;
        SalesParmUpdate      salesParmUpdate = this.salesParmUpdate();

        if (salesParmUpdate.SumBy != AccountOrder::None)
        {
            Query query = new Query();

            QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesTable));

            QueryBuildDataSource dsRU = SalesTable_RU::addToQuery(qbds);
            dsRU.addGroupByField(fieldNum(SalesTable_RU, AgreementHeaderExt_RU));

            qbds = qbds.addDataSource(tableNum(SalesParmSubTable));
            qbds.addRange(fieldNum(SalesParmSubTable, ParmId)).value(salesParmUpdate.ParmId);
            qbds.addLink(fieldNum(SalesTable, SalesId), fieldNum(SalesParmSubTable, OrigSalesId));
            qbds.joinMode(JoinMode::ExistsJoin);

            QueryRun qr = new QueryRun(query);
            if (qr.next() && qr.next())
            {
                ok = checkFailed("@GLS220540");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutput</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether destinations that are selected for printing from the <c>SalesFormLetter</c> class
    /// hierarchy are printers.
    /// </summary>
    /// <param name="_showError">
    /// A Boolean value that indicates whether error messages should be reported; optional.
    /// </param>
    /// <returns>
    /// true if the selected destination is a printer; otherwise, false.
    /// </returns>
    protected boolean checkClientOutput(boolean _showError = true)
    {
        boolean ok = super(_showError);

        if (this.printCODLabel())
        {
            if (FormLetter::isClientOutput(this.printerSettingsCODLabel()))
            {
                ok = _showError ? checkFailed("@SYS118769") : false;
            }
        }

        if (this.printShippingLabel())
        {
            if (FormLetter::isClientOutput(this.printerSettingsShippingLabel()))
            {
                ok = _showError ? checkFailed("@SYS118771") : false;
            }
        }

        if (this.printEntryCertificate_W())
        {
            if (FormLetter::isClientOutput(this.printerSettingsEntryCertificate_W()))
            {
                ok = _showError ? checkFailed("@SYS4004146") : false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkClientOutputPrintManagement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether selected destinations in print management are printers for printing
    ///    original and copy reports.
    /// </summary>
    /// <param name="_showError">
    ///    A boolean value that determines whether error messages should be reported; optional.
    /// </param>
    /// <returns>
    ///    true if the selected destination is a printer; otherwise, false.
    /// </returns>
    protected boolean checkClientOutputPrintManagement(boolean _showError = true)
    {
        boolean ok = super(_showError);

        if (this.printCODLabel())
        {
            if (FormLetter::isClientOutput(this.printerSettingsCODLabel()))
            {
                ok = _showError ? checkFailed("@SYS118769") : false;
                printerSetupError = true;
            }
        }

        if (this.printShippingLabel())
        {
            if (FormLetter::isClientOutput(this.printerSettingsShippingLabel()))
            {
                ok = _showError ? checkFailed("@SYS118771") : false;
                printerSetupError = true;
            }
        }

        if (this.printEntryCertificate_W())
        {
            if (FormLetter::isClientOutput(this.printerSettingsEntryCertificate_W()))
            {
                ok = _showError ? checkFailed("@SYS4004146") : false;
                printerSetupError = true;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocumentData_PL</Name>
				<Source><![CDATA[
    protected boolean checkDocumentData_PL()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateNum_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether invoice number has been previously used.
    /// </summary>
    /// <param name="_num">
    ///      The invoice number of the unposted transaction.
    /// </param>
    /// <param name="_salesId">
    ///      The sales ID of the unposted transaction.
    /// </param>
    /// <param name="_transDate">
    ///     The transaction date.
    /// </param>
    /// <returns>
    ///     false if the invoice number is used previously; otherwise, true.
    /// </returns>
    public boolean checkDuplicateNum_W(Num _num, SalesIdBase _salesId, TransDate _transDate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFormLetterId_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for <c>FormLetter</c>
    /// </summary>
    /// <returns>
    /// Returns true.
    /// </returns>

    public boolean  checkFormLetterId_IN()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkifWMSorder</Name>
				<Source><![CDATA[
    protected boolean  checkifWMSorder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInterCompany</Name>
				<Source><![CDATA[
    protected boolean  checkInterCompany()
    {
        SalesParmTable  salesParmTableLocal;
        SalesTable      salesTableLocal;

        Counter         recordCount         = 0;
        boolean         interCompanyFound   = false;
        boolean         ok                  = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        if (salesParmUpdate.SumBy == AccountOrder::Order)
        {
            while select RecId from salesParmTableLocal
                where salesParmTableLocal.ParmId == salesParmUpdate.ParmId
                    join  InterCompanyOrder from salesTableLocal
                    where salesTableLocal.SalesId == salesParmTableLocal.SalesId
            {
                recordCount++;

                if (salesTableLocal.InterCompanyOrder)
                {
                    interCompanyFound = true;
                }

                if (interCompanyFound  &&  recordCount > 1)
                {
                    ok = checkFailed(strFmt("@SYS75337", "@SYS57755"));
                    break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLateSelection</Name>
				<Source><![CDATA[
    protected boolean  checkLateSelection()
    {
        boolean  ok = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        if (salesParmUpdate.LateSelection  &&  !salesParmUpdate.LateSelectionQuery)
        {
            ok = checkFailed("@SYS72782");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintout_RU</Name>
				<Source><![CDATA[
    protected boolean checkPrintout_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineChanged</Name>
				<Source><![CDATA[
    protected boolean  checkSalesLineChanged(SalesParmLine _salesParmLine, SalesLine _salesLine)
    {
        boolean         ok = true;
        SalesQty        remainBefore;
        InventQty       remainBeforeInvent;
        Qty             dummy;
        // <GEERU>
        InventDimParm   inventDimParm;
        InventDim       inventDimCriteria;
        if (countryRegion_RU)
        {
            if (SalesFormLetter::useInventOwnerIdRange_RU(this.splitInventOwnerId_RU(),
                                                          this.documentStatus(),
                                                          _salesLine))
            {
                inventDimCriteria.InventOwnerId_RU = _salesParmLine.InventOwnerId_RU;
                inventDimParm.InventOwnerIdFlag_RU = NoYes::Yes;
            }
            salesQuantity.parmInventDimCriteria_RU(inventDimCriteria);
            salesQuantity.parmInventDimParm_RU(inventDimParm);
        }
        // </GEERU>

        [dummy, remainBefore      , dummy] = this.qtySales (_salesLine, naReal());
        [dummy, remainBeforeInvent, dummy] = this.qtyInvent(_salesLine, naReal());

        if (remainBefore       != _salesParmLine.RemainBefore ||
            remainBeforeInvent != _salesParmLine.RemainBeforeInvent)
        {
            // Do not perform this check for ship alone items when running a pro-forma
            if ( !(_salesLine.inventTable().mcrInventTable().ShipAlone && this.salesParmUpdate().Proforma))
            {
                ok = checkFailed(strfmt("@SYS78952", _salesParmLine.OrigSalesId));
            }
        }

        // <GEEU>
        if (IntrastatParameters::isLegalEntityInEEU() && this.mustCheckIntrastat())
        {
            ok = _salesLine.checkIntrastat() && ok;
        }
        // </GEEU>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLinesChanged</Name>
				<Source><![CDATA[
    protected boolean  checkSalesLinesChanged()
    {
        SalesParmLine   salesParmLineLocal;
        SalesLine       salesLineLocal;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        boolean         ok = true;

        while select forceplaceholders salesParmLineLocal
            where salesParmLineLocal.ParmId        == salesParmUpdate.ParmId
            outer join salesLineLocal
                where salesLineLocal.InventTransId == salesParmLineLocal.InventTransId
        {
            salesParmLineLocal.revertPreviousVersionChanges(salesLineLocal);
            if (!this.checkSalesLineChanged(salesParmLineLocal, salesLineLocal))
                ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkServiceTariffNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the service tariff number.
    /// </summary>
    /// <returns>
    /// true if the service tariff number is valid; otherwise, false.
    /// </returns>
    protected boolean checkServiceTariffNumber()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSumBy</Name>
				<Source><![CDATA[
    protected boolean checkSumBy()
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        SalesSummary  checkSalesSummary = SalesSummary::construct(salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, this.documentStatus());

        return checkSalesSummary.checkUpdateAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSumNum</Name>
				<Source><![CDATA[
    protected boolean  checkSumNum()
    {
        boolean  ok = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        if (salesParmUpdate.SumBy == AccountOrder::Order)
        {
            if (!SalesParmLine::existSales(this.parmId(), salesParmUpdate.SumSalesId))
                ok = checkFailed(strFmt("@SYS15067", salesParmUpdate.SumSalesId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    public void  chooseLines(
        boolean _append = false,
        boolean _directDeliveryUpdate = false)
    {
        this.parmDirectDeliveryUpdate(_directDeliveryUpdate);

        FormletterParmDataChooseLinesContract formLetterParmDataChooseLinesContract = FormletterParmDataChooseLinesContract::construct();
        formLetterParmDataChooseLinesContract.parmFormletterContractPacked(this.packDataContract(salesFormLetterContract));
        formLetterParmDataChooseLinesContract.parmAppend(_append);
        formLetterParmDataChooseLinesContract.parmReuseParmUpdate(this.parmId() ? true : false);

        container outputContainer = SalesFormletterParmData::chooseLinesFromContract(formLetterParmDataChooseLinesContract.pack());

        FormLetterParmDataOutputContract outputContract = this.unpackFormletterParmDataOutputContract(outputContainer);

        this.getValuesFormletterParmData(outputContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>SalesParmTable</c> table records based on the chooseLines query.
    /// </summary>
    /// <param name="_customsExportOrderType">
    /// A CustomsExportOrderType_IN enum value which determines which type of orders to be queried by the chooseLines query.
    /// </param>
    /// <param name="_append">
    /// A Boolean value which determines whether existing records should be removed.
    /// </param>
    /// <param name="_directDeliveryUpdate">
    /// A Boolean value which determines whether order is directDeliveryUpdate.
    /// </param>
    public void  chooseLines_IN(
        CustomsExportOrderType_IN _customsExportOrderType = CustomsExportOrderType_IN::SalesOrder,
        boolean                   _append                 = false,
        boolean                   _directDeliveryUpdate   = false)
    {
        this.parmDirectDeliveryUpdate(_directDeliveryUpdate);
        container outputContainer = SalesFormletterParmData::chooseLinesServer_IN(this.packDataContract(salesFormLetterContract),
                                                                                 _append,
                                                                                 _customsExportOrderType,
                                                                                 this.parmId() ? true : false);
        FormLetterParmDataOutputContract outputContract = this.unpackFormletterParmDataOutputContract(outputContainer);

        this.getValuesFormletterParmData(outputContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up after a dialog box has been canceled.
    /// </summary>
    protected void  cleanupDialog()
    {
        if (!currentBatch)
        {
            SalesParmUpdate::deleteWithoutUpdate(this.salesParmUpdate().ParmId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmUpdateFromParmUpdateRecord</Name>
				<Source><![CDATA[
    public void createParmUpdateFromParmUpdateRecord(SalesParmUpdate _salesParmUpdate)
    {
        SalesParmUpdate salesParmUpdate;
        salesParmUpdate.data(_salesParmUpdate);
        if (this.parmId())
        {
            salesParmUpdate.ParmId = this.parmId();
        }
        else
        {
            this.parmId(salesParmUpdate.ParmId);
        }

        if (! SalesParmUpdate::exist(salesParmUpdate.ParmId))
        {
            salesParmUpdate.insert();
        }
        this.salesParmUpdate(salesParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditRemaining</Name>
				<Source><![CDATA[
    public boolean  creditRemaining(boolean  _creditRemaining = salesFormLetterContract.parmCreditRemaining())
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.CreditRemaining = _creditRemaining;
        this.salesParmUpdate(salesParmUpdate);
        salesFormLetterContract.parmCreditRemaining(_creditRemaining);
        return salesParmUpdate.CreditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultGiroType</Name>
				<Source><![CDATA[
    public NoYes  defaultGiroType(NoYes  _defaultGiroType = salesFormLetterContract.parmDefaultGiroType())
    {
        return salesFormLetterContract.parmDefaultGiroType(_defaultGiroType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteGiroAndInitQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>deleteGiro</c> and <c>initLinesQuery</c> methods on the server side to reduce the
    /// interaction between tiers.
    /// </summary>
    /// <remarks>
    /// The <c>SalesEditLines</c> form executes the <c>deleteGiro</c> and <c>initLinesQuery</c> methods
    /// when the <c>SalesParmUpdate.GiroType</c> field changes. To minimize calls between tiers, this
    /// action is moved to the server side by way of this proxy method.This method requests for the
    /// <c>deleteGiroAndInitQueryOnServer</c> static function to execute given methods by using a server
    /// instance of the <c>SalesFormLetter</c> class.
    /// </remarks>
    public void deleteGiroAndInitQuery()
    {
        container outputContainer = SalesFormletterParmData::deleteGiroServer(this.packDataContract(salesFormLetterContract));
        this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(outputContainer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Object</c> class.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public IDialogable dialog()
    {
        if (this.parmCurrentBatch() && !SalesParmUpdate::exist(salesFormLetterContract.parmParmId()))
        {
            this.prePromptInit();
        }

        if (showDialog)
        {
            if (!salesEditLines)
            {
                salesEditLines = classfactory.formRunClass(FormLetterServiceController::newClientArgs(formStr(SalesEditLines), this));
                salesEditLines.init();
            }

            return salesEditLines as IDialogable;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRun</Name>
				<Source><![CDATA[
    protected SysOperationStartResult dialogRun()
    {
        if (!this.parmCallerFormName()
            && !this.isInBatch()
            && !this.parmId()
            && SalesFormLetterCreateFromBatchFlight::instance().isEnabled())
        {
            this.parmLoadFromSysLastValue(false);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    protected void  displayProgress()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLinesChanged</Name>
				<Source><![CDATA[
    public boolean  editLinesChanged(boolean  _editLinesChanged = editLinesChanged)
    {
        editLinesChanged = _editLinesChanged;
        return editLinesChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateNowField</Name>
				<Source><![CDATA[
    public boolean enableUpdateNowField(boolean _enableUpdateNow = enableUpdateNow)
    {
        enableUpdateNow = _enableUpdateNow;

        return enableUpdateNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocType_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of <c>PlFiscalDocType</c> on the contract.
    /// </summary>
    /// <param name="_fiscalDocType">
    /// New value for <c>PlFiscalDocType</c>.
    /// </param>
    /// <returns>
    /// The value of <c>PlFiscalDocType</c>
    /// </returns>
    public PlFiscalDocType fiscalDocType_PL(PlFiscalDocType _fiscalDocType = salesFormLetterContract.parmFiscalDocType_PL())
    {
        return salesFormLetterContract.parmFiscalDocType_PL(_fiscalDocType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesFormLetterContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the current <c>SalesFormLetterContract</c> object.
    /// </summary>
    /// <returns>
    /// Return the current <c>SalesFormLetterContract</c> object.
    /// </returns>
    public SalesFormLetterContract getSalesFormLetterContract()
    {
        return salesFormLetterContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesDocumentTimezonePreference</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to retrieve the time zone preference for the sales document.
    /// </summary>
    /// <returns>
    /// Returns a <c>SalesDocumentTimezonePreference</c> value.
    /// </returns>
    protected SalesDocumentTimezonePreference getSalesDocumentTimezonePreference()
    {
        return SalesParameters::find().DocumentTimezonePreference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesFormletterParmData</Name>
				<Source><![CDATA[
    protected void getValuesFormletterParmData(FormLetterParmDataOutputContract _outputContract)
    {
        QueryRun queryRun;
        if (_outputContract.parmChooseLinesQueryPacked())
        {
            queryRun = new QueryRun(SysOperationHelper::base64Decode(_outputContract.parmChooseLinesQueryPacked()));
        }

        this.parmId(_outputContract.parmParmId());
        this.parmDataSourceRecordsPacked(conNull());
        if (queryRun)
        {
            this.parmQueryUsed(queryRun.query());
        }

        this.salesParmUpdate(_outputContract.parmParmUpdate() as SalesParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBasedOnMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object that is based on the action command by which it was opened.
    /// </summary>
    /// <param name="_callerMenuItem">
    /// The command by which the object was opened.
    /// </param>
    public void initBasedOnMenuItem(menuItemNameAction _callerMenuItem)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    public void  initLinesQuery()
    {
        this.chooseLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize chooseLines query and add range to filter ExportOrder/SalesOrders.
    /// </summary>
    /// <param name="_customsExportOrderType">
    ///  A CustomsExportOrderType_IN enum value which determines which type of orders to be queried by the chooseLines query.
    /// </param>
    public void initLinesQuery_IN(CustomsExportOrderType_IN _customsExportOrderType)
    {
        this.chooseLines_IN(_customsExportOrderType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOfficials_RU</Name>
				<Source><![CDATA[
    public void initOfficials_RU(SalesParmTable _parmTable = null)
    {
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newReSelect(this.packDataContract(salesFormLetterContract));
        salesFormletterParmData.initOfficials_RU(_parmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void  initParameters(
        SalesParmUpdate    _salesParmUpdate    = this.salesParmUpdate(),
        Printout           _printout           = this.printout(),
        NoYes              _printFormLetter    = this.printFormLetter(),
        NoYes              _printCODLabel      = this.printCODLabel(),
        NoYes              _printShippingLabel = this.printShippingLabel(),
        NoYes              _usePrintManagement = this.usePrintManagement(),
        boolean            _parmCopyOnly       = false,
        NoYes              _mrcPostingErr      = mrcPostingErr,
        NoYes              _mrcPrintOnPack     = mrcPrintOnPack,
        PlFiscalDocType    _fiscalDocType      = this.fiscalDocType_PL()
        ,NoYes  _printExciseInvoice_IN = this.printExciseFormLetter_IN()
        )
    {
        mrcPostingErr       = _mrcPostingErr;
        mrcPrintOnPack      = _mrcPrintOnPack;
        this.salesParmUpdate(_salesParmUpdate);

        this.printout(_printout);
        this.printFormLetter(_printFormLetter);
        this.printCODLabel(_printCODLabel);
        this.printShippingLabel(_printShippingLabel);
        this.usePrintManagement(_usePrintManagement);
        this.mrcPostingErr(mrcPostingErr);
        this.mrcPrintOnPack(mrcPrintOnPack);
        // <GIN>
        if (TaxParameters::isExciseEnable_IN())
        {
            this.printExciseFormLetter_IN(_printExciseInvoice_IN);
        }
        // </GIN>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.fiscalDocType_PL(_fiscalDocType);
        }
        // </GEEPL>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV])
             && isConfigurationkeyEnabled(configurationkeynum(Retail))
             && this.salesTable().InvoiceAutoNumbering_LT)
        {
            this.setInvoiceNumbering_LT();
        }

        if (!_parmCopyOnly)
        {
            if (_printFormLetter)
            {
                this.initPrinterSettingsFormletter();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmCustomsExportOrderTable_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the parameter of the customs export order table.
    /// </summary>
    /// <param name="_customsExportOrderTable">
    /// The instance of the <c>CustomsExportOrderTable_IN</c> class.
    /// </param>
    protected void  initParmCustomsExportOrderTable_IN(CustomsExportOrderTable_IN  _customsExportOrderTable)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSalesTable</Name>
				<Source><![CDATA[
    public void  initParmSalesTable(SalesTable  _salesTable)
    {
        this.salesTable(_salesTable);

        if (! _salesTable)
        {
            this.multiForm(NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmUpdate</Name>
				<Source><![CDATA[
    protected void  initParmUpdate(boolean  _createNew = false)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        if (_createNew)
        {
            salesParmUpdate.clear();

            salesParmUpdate.ParmId          = this.parmId();
            salesParmUpdate.DocumentStatus  = this.documentStatus();
        }
        else
        {
            salesParmUpdate = SalesParmUpdate::find(this.parmId());
        }
        this.salesParmUpdate(salesParmUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes printer settings for posting a sales order with default values
    /// </summary>
    public void initPrinterSettingsFormletter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShippingStat</Name>
				<Source><![CDATA[
    protected void  initShippingStat(Common  _common)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySelectFromJournal</Name>
				<Source><![CDATA[
    public boolean interCompanySelectFromJournal()
    {
        boolean ret = super();

        if (this.salesParmUpdate().SpecQty == SalesUpdate::PackingSlip)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelection</Name>
				<Source><![CDATA[
    public boolean lateSelection()
    {
        return this.salesParmUpdate().LateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateSelectionRemoveLines</Name>
				<Source><![CDATA[
    public boolean  lateSelectionRemoveLines()
    {
        boolean  ok = true;
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        if (salesParmUpdate.LateSelection  &&  salesParmUpdate.numberOfTables() > 0)
        {
            if (Box::yesNo("@SYS72909", DialogButton::Yes))
            {
                SalesParmTable::deleteWithoutUpdate(salesParmUpdate.ParmId);
            }
            else
            {
                salesParmUpdate.LateSelection = false;
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockSalesUpdateField</Name>
				<Source><![CDATA[
    public boolean lockSalesUpdateField(boolean _lockSalesUpdate = lockSalesUpdate)
    {
        lockSalesUpdate = _lockSalesUpdate;
        return lockSalesUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrMiscChargePrintOption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and returns the <c>MCRMiscChargePrintOption</c> enumeration.
    /// </summary>
    /// <param name="_miscChargePrintOption">
    /// The <c>MCRMiscChargePrintOption</c> enumeration to be set and returned; optional.
    /// </param>
    /// <returns>
    /// The <c>MCRMiscChargePrintOption</c> enumeration.
    /// </returns>
    public mcrMiscChargePrintOption mcrMiscChargePrintOption(
        mcrMiscChargePrintOption _miscChargePrintOption = mcrMiscChargePrintOption)
    {
        // Accessor/mutator for enum variable mcrMiscChargePrintOption
        mcrMiscChargePrintOption = _miscChargePrintOption;
        return mcrMiscChargePrintOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainBeforeQtyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating the delivery remainder for the specified sales line.
    /// </summary>
    /// <param name = "_module"><c>ModuleInventPurchSales</c> determines which unit and field should be used.</param>
    /// <param name = "_salesParmLine">Sales posting line.</param>
    /// <param name = "_salesLineOrig">Original sales line.</param>
    /// <param name = "_salesFormLetter">The current sales posting engine instance.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> subscribers should use to return the calculated quantity.</param>
    delegate void getRemainBeforeQtyDelegate(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig, SalesFormLetter _salesFormLetter, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainBeforeQty</Name>
				<Source><![CDATA[
    private Qty getRemainBeforeQty(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        SalesParmLine localSalesParmLine;

        switch (_module)
        {
            case ModuleInventPurchSales::Invent:
                return conpeek(this.qtyInvent(_salesLineOrig), SalesQuantity::mcrPositionRemainBefore());

            case ModuleInventPurchSales::Sales:
                return conpeek(this.qtySales(_salesLineOrig), SalesQuantity::mcrPositionRemainBefore());

            default:
                EventHandlerResult result = new EventHandlerResult();
                this.getRemainBeforeQtyDelegate(_module, _salesParmLine, _salesLineOrig, this, result);

                if (!result.hasResult())
                {
                    throw error(strfmt("@SYS19306", funcname()));
                }

                return result.result();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateNowQtyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating the posting quantity for the specified sales line.
    /// </summary>
    /// <param name = "_module"><c>ModuleInventPurchSales</c> determines which unit and field should be used.</param>
    /// <param name = "_salesParmLine">Sales posting line.</param>
    /// <param name = "_salesLineOrig">Original sales line.</param>
    /// <param name = "_salesFormLetter">The current sales posting engine instance.</param>
    /// <param name = "_result">An instance of <c>EventHandlerResult</c> subscribers should use to return the calculated quantity.</param>
    delegate void getUpdateNowQtyDelegate(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig, SalesFormLetter _salesFormLetter, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUpdateNowQty</Name>
				<Source><![CDATA[
    private Qty getUpdateNowQty(ModuleInventPurchSales _module, SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        SalesParmLine localSalesParmLine;
        Qty qty;

        if (_module == ModuleInventPurchSales::Invent)
        {
            qty = conpeek(this.qtyInvent(_salesLineOrig),
                    SalesQuantity::mcrPositionUpdateNow());

            select sum(InventNow) from localSalesParmLine
                    where localSalesParmLine.ParmId == _salesParmLine.ParmId
                        && localSalesParmLine.SalesLineRecId == _salesLineOrig.RecId
                        // exclude current parm line
                        && localSalesParmLine.RecId != _salesParmLine.RecId;

            qty -= localSalesParmLine.InventNow;

            qty =   min(
                            min(qty,
                                this.getRemainBeforeQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig)),
                                _salesLineOrig.inventTable().inventItemInventSetup().
                                mcrQuantityEffectiveMultiple());
        }
        else if (_module == ModuleInventPurchSales::Sales)
        {
            qty = conpeek(this.qtySales(_salesLineOrig),
                    SalesQuantity::MCRPositionUpdateNow());

            select sum(DeliverNow) from localSalesParmLine
                    where localSalesParmLine.ParmId == _salesParmLine.ParmId
                        && localSalesParmLine.SalesLineRecId == _salesLineOrig.RecId
                        // exclude current parm line
                        && localSalesParmLine.RecId != _salesParmLine.RecId;

            qty -= localSalesParmLine.DeliverNow;

            qty =   min(
                            min(qty,
                                this.getRemainBeforeQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig)),
                                _salesLineOrig.inventTable().inventItemSalesSetup().
                                mcrQuantityEffectiveMultiple());
        }
        else
        {
            EventHandlerResult result = new EventHandlerResult();
            this.getUpdateNowQtyDelegate(_module, _salesParmLine, _salesLineOrig, this, result);

            if (!result.hasResult())
            {
                throw error(strfmt("@SYS19306", funcname()));
            }

            return result.result();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetShipAloneQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets <c>SalesParmline</c> quantities appropriately for ship alone items.
    /// </summary>
    /// <param name="_salesParmLine">
    ///     The <c>SalesParmline</c> record for which this method sets quantities.
    /// </param>
    /// <param name="_salesLineOrig">
    ///     The <c>SalesLine</c> record used to set quantities on the <c>SalesParmline</c>.
    /// </param>
    /// <remarks>
    ///     Do not do this for negative quantity lines.
    ///     Be sure this is called AFTER the salesParmLine has been initialized from
    ///     the sales line.
    /// </remarks>
    protected void mcrSetShipAloneQuantities(SalesParmLine _salesParmLine, SalesLine _salesLineOrig)
    {
        this.getUpdateNowQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig);

        this.getRemainBeforeQty(ModuleInventPurchSales::Sales, _salesParmLine, _salesLineOrig);

        this.getUpdateNowQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig);

        this.getRemainBeforeQty(ModuleInventPurchSales::Invent, _salesParmLine, _salesLineOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mrcPostingErr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to post error regarding <c>SalesFormLetterContract</c>.
    /// </summary>
    /// <param name="_mrcPostingErr">
    /// A boolean that determines whether to post errors; optional.
    /// </param>
    /// <returns>
    /// true if errors should be posted; otherwise, false.
    /// </returns>
    public boolean  mrcPostingErr(boolean  _mrcPostingErr = salesFormLetterContract.parmMrcPostingErr())
    {
        return salesFormLetterContract.parmMrcPostingErr(_mrcPostingErr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mrcPrintOnPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print during sales order packing.
    /// </summary>
    /// <param name="_mrcPrintOnPack">
    /// A boolean that determines whether to print during packing; optional.
    /// </param>
    /// <returns>
    /// true if printing should occur during packing; otherwise, false.
    /// </returns>
    public boolean  mrcPrintOnPack(boolean  _mrcPrintOnPack = salesFormLetterContract.parmMrcPrintOnPack())
    {
        return salesFormLetterContract.parmMrcPrintOnPack(_mrcPrintOnPack);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckIntrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether intrastate needs to be checked.
    /// </summary>
    /// <returns>
    /// true if intrastat related logic must be checked when sales line is changed; otherwise, false .
    /// </returns>
    protected boolean mustCheckIntrastat()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        identifierName _className='',
        identifierName _methodName='',
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ReliableAsynchronous)
    {
        super(_className,_methodName,_executionMode);
        salesFormLetterContract = contract;

        salesQuantity   = SalesQuantity::construct(this.documentStatus());

        useShippingStat = false;
        giroAllSame     = true;

        reArrangeNow    = true;

        postedTableRefIds = new Set(Types::String);

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingHandler = KittingClassDelegateHelper::createISalesFormLetterHandler(this);
        }

        // Initialize the stale auth mapping
        mcrStaleAuthMap = new map(Types::String, Types::String);
        mrcPostingErr   = false;
        mrcPrintOnPack  = false;
        // <GEERU>
        countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        if (countryRegion_RU)
        {
            postedJournalList = new Set(Types::Record);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        if (formletterOutputContract)
        {
            packedOutputContract = formletterOutputContract.pack();
        }
        return [#CurrentVersion + #parentVersion, #ParmListCommonCS] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceSettlement_W</Name>
				<Source><![CDATA[
    // <GEEU
    public AdvanceInvoiceSettlement_SalesOrder_W parmAdvanceInvoiceSettlement_W(
        AdvanceInvoiceSettlement_SalesOrder_W _advanceInvoiceSettlement = AdvanceInvoiceSettlement_W::newUnpack(tableNum(SalesTable), SysOperationHelper::base64Decode(salesFormLetterContract.parmAdvanceInvoiceSettlementPacked())))
    {
        if (_advanceInvoiceSettlement != null)
        {
            return AdvanceInvoiceSettlement_W::newUnpack(tableNum(SalesTable), SysOperationHelper::base64Decode(salesFormLetterContract.parmAdvanceInvoiceSettlementPacked(SysOperationHelper::base64Encode(_advanceInvoiceSettlement.pack()))));
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect_RU</Name>
				<Source><![CDATA[
    public Correct_RU parmCorrect_RU(Correct_RU _correct = salesFormLetterContract.parmCorrect_RU())
    {
        return salesFormLetterContract.parmCorrect_RU(_correct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceDate_RU</Name>
				<Source><![CDATA[
    public CorrectedInvoiceDate_RU parmCorrectedInvoiceDate_RU(CorrectedInvoiceDate_RU _corrInvoiceDate = salesFormLetterContract.parmCorrectedInvoiceDate_RU())
    {
        return salesFormLetterContract.parmCorrectedInvoiceDate_RU(_corrInvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    public CorrectedInvoiceId_RU parmCorrectedInvoiceId_RU(CorrectedInvoiceId_RU _corrInvoiceId = salesFormLetterContract.parmCorrectedInvoiceId_RU())
    {
        return salesFormLetterContract.parmCorrectedInvoiceId_RU(_corrInvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoicePrintoutType_RU</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    final public CustInvoicePrintoutType_RU parmCustInvoicePrintoutType_RU(CustInvoicePrintoutType_RU _printout = salesFormLetterContract.parmCustInvoicePrintoutType_RU())
    {
        return salesFormLetterContract.parmCustInvoicePrintoutType_RU(_printout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomsExportOrderType_IN</Name>
				<Source><![CDATA[
    public CustomsExportOrderType_IN parmCustomsExportOrderType_IN(CustomsExportOrderType_IN   _customsExportOrderType = customsExportOrderType)
    {
        customsExportOrderType = _customsExportOrderType;

        return customsExportOrderType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirectDeliveryUpdate</Name>
				<Source><![CDATA[
    public boolean parmDirectDeliveryUpdate(boolean _directDeliveryUpdate = salesFormLetterContract.parmDirectDeliveryUpdate())
    {
        return salesFormLetterContract.parmDirectDeliveryUpdate(_directDeliveryUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStornoId_RU</Name>
				<Source><![CDATA[
    public Num parmDocumentStornoId_RU(Num _documentStornoId = salesFormLetterContract.parmDocumentStornoId_RU())
    {
        return salesFormLetterContract.parmDocumentStornoId_RU(_documentStornoId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuSetCode</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuId parmDocuSetCode(TaxUnrealizedDocuId _docuSetCode = salesFormLetterContract.parmDocuSetCode())
    {
        return salesFormLetterContract.parmDocuSetCode(_docuSetCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtraPrintoutLineExists_RU</Name>
				<Source><![CDATA[
    public boolean parmExtraPrintoutLineExists_RU(boolean _extraPrintoutLineExists = false)
    {
        container dummy()
        {
            return [ _extraPrintoutLineExists ];
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsInRouteId_RU</Name>
				<Source><![CDATA[
    public GoodsInRouteId_RU parmGoodsInRouteId_RU(GoodsInRouteId_RU _goodsInRouteId = salesFormLetterContract.parmGoodsInRouteId_RU())
    {
        return salesFormLetterContract.parmGoodsInRouteId_RU(_goodsInRouteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId_PL</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId_PL(
        InventLocationId _inventLocationId = salesFormLetterContract.parmInventLocationId_PL())
    {
        return salesFormLetterContract.parmInventLocationId_PL(_inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintLocation parmLocation(TaxUnrealizedDocuPrintLocation _location = salesFormLetterContract.parmLocation())
    {
        return salesFormLetterContract.parmLocation(_location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarkupOfTypeCustVendExists_RU</Name>
				<Source><![CDATA[
    public boolean parmMarkupOfTypeCustVendExists_RU(boolean _markupOfTypeCustVendExists = false)
    {
        container dummy()
        {
            return [ _markupOfTypeCustVendExists ];
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRInventTransRecid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and returns the record ID for the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTransRecId">
    ///     The record ID of the <c>InventTrans</c> record for which this method
    ///     sets and returns; optional.
    /// </param>
    /// <returns>
    ///     The record ID of the <c>InventTrans</c> record passed.
    /// </returns>
    /// <remarks>
    ///     This is needed for the unship process. When the unship process runs,
    ///     the system needs to look for the specific trans recid and only
    ///     process the <c>InventTrans</c> record selected during the packing slip
    ///     return process.
    /// </remarks>
    public Recid parmMCRInventTransRecid(Recid _inventTransRecId =  salesFormLetterContract.parmMCRInventTransRecid())
    {
        return salesFormLetterContract.parmMCRInventTransRecid(_inventTransRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmMCRPaymMode(PaymMode _paymMode = salesFormLetterContract.parmMCRPaymMode())
    {
        return salesFormLetterContract.parmMCRPaymMode(_paymMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPickWaveReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the variable MCRPickWaveReference to the pickwave that is being processed.
    /// </summary>
    /// <param name="_mcrPickWaveReference">
    ///     The <c>MCRPickingWave</c> record that is being processed.
    /// </param>
    /// <returns>
    ///     The updated <c>MCRPickingWave</c> record.
    /// </returns>
    /// <remarks>
    ///     Only used when <c>SalesFormLetter</c> class is called by the picking workbench.
    ///     This field will be used to decide flow for orders that are picked using workbench,
    ///     such as progress bar being displayed during posting, selecting only lines needed
    ///     for the wave, and updating the correct quantity to pick.
    /// </remarks>
    public MCRPickingWave parmMCRPickWaveReference(MCRPickingWave _mcrPickWaveReference = SalesFormLetterContract.parmMCRPickWaveReference())
    {
        return salesFormLetterContract.parmMCRPickWaveReference(_mcrPickWaveReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscText</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuText parmMiscText(TaxUnrealizedDocuText _miscText = salesFormLetterContract.parmMiscText())
    {
        return salesFormLetterContract.parmMiscText(_miscText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeedTransIDTransit_RU</Name>
				<Source><![CDATA[
    public boolean parmNeedTransIDTransit_RU(boolean _needTransIDTransit = salesFormLetterContract.parmNeedTransIDTransit_RU())
    {
        return salesFormLetterContract.parmNeedTransIDTransit_RU(_needTransIDTransit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintHeader</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintHeader parmPrintHeader(TaxUnrealizedDocuPrintHeader _printHeader = salesFormLetterContract.parmPrintHeader())
    {
        return salesFormLetterContract.parmPrintHeader(_printHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdType</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuProdType parmProdType(TaxUnrealizedDocuProdType _prodType = salesFormLetterContract.parmProdType())
    {
        return salesFormLetterContract.parmProdType(_prodType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelatedJournal</Name>
				<Source><![CDATA[
    public Common parmRelatedJournal(Common _relatedJournal = salesFormLetterContract.parmRelatedJournal())
    {
        return salesFormLetterContract.parmRelatedJournal(_relatedJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    public WMSShipmentId parmShipmentId(WMSShipmentId _shipmentId = salesFormLetterContract.parmShipmentId())
    {
        return salesFormLetterContract.parmShipmentId(_shipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipRunShipCarrier</Name>
				<Source><![CDATA[
    public boolean parmSkipRunShipCarrier(boolean _skipRunShipCarrier = skipRunShipCarrier)
    {
        skipRunShipCarrier = _skipRunShipCarrier;
        return skipRunShipCarrier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    public Common parmSourceTable(Common _salesTable = contract.parmSourceTable() as SalesTable)
    {
        return contract.parmSourceTable(_salesTable as SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTableRefIdSynched</Name>
				<Source><![CDATA[
    public TradeLineRefId parmParmTableRefIdSynched(TradeLineRefId _parmTableRefIdSynched = salesFormLetterContract.parmParmTableRefIdSynched())
    {
        return salesFormLetterContract.parmParmTableRefIdSynched(_parmTableRefIdSynched);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxProfileMap</Name>
				<Source><![CDATA[
    public Map parmTaxProfileMap(Map _taxProfileMap = taxProfileMap)
    {
        taxProfileMap = _taxProfileMap;
        return taxProfileMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateLoadStatus</Name>
				<Source><![CDATA[
    public boolean parmValidateLoadStatus(boolean _validateLoadStatus = salesFormLetterContract.parmValidateLoadStatus())
    {
        return salesFormLetterContract.parmValidateLoadStatus(_validateLoadStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmWHSLoadId(WHSLoadId    _whsLoadId = salesFormLetterContract.parmWHSLoadId())
    {
        return salesFormLetterContract.parmWHSLoadId(_whsLoadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPostingTransportLoads</Name>
				<Source><![CDATA[
    public boolean parmIsPostingTransportLoads(boolean _isPostingTransportLoads = salesFormLetterContract.parmIsPostingTransportLoads())
    {
        return salesFormLetterContract.parmIsPostingTransportLoads(_isPostingTransportLoads);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight inventory quantity when it posts.
    /// </summary>
    /// <param name="_common">
    /// A transaction record.
    /// </param>
    /// <param name="_qty">
    /// A catch weight quantity; optional.
    /// </param>
    /// <returns>
    /// A container that contains the calculated quantities.
    /// </returns>
    public container pdsCWQtyInvent(Common _common, PdsCWInventQty _qty = naReal())
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        return salesQuantity.pdsCWQtyInvent(_common, salesParmUpdate.SpecQty, _qty, salesParmUpdate.CreditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMRCParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>PdsMRCParameters</c> record.
    /// </summary>
    /// <returns>
    /// The <c>PdsMRCParameters</c> record.
    /// </returns>
    protected PdsMRCParameters pdsMRCParameters()
    {
        if (!pdsMRCParameters.RecId)
        {
            pdsMRCParameters = PdsMRCParameters::find();
        }

        return pdsMRCParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the <c>SalesFormLetter</c> class.
    /// </summary>
    /// <returns>
    /// A container that contains the current instance of the <c>SalesFormLetter</c> class.
    /// </returns>
    protected container pdsPack()
    {
        return [#PdsCurrentVersion, #PdsCurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="_packedClass" /> instance of the <c>SalesFormLetter</c> class.
    /// </summary>
    /// <param name="_packedClass">
    /// A container from which to deserialize the instance.
    /// </param>
    /// <returns>
    /// true if the deserialization was successful; otherwise, false .
    /// </returns>
    protected boolean pdsUnpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass, 1);
        boolean         ret = true;

        switch (version)
        {
            case #PdsCurrentVersion:
                [version, #PdsCurrentList] = _packedClass;
                break;

            // Version 0 is special - the packed class was not previously set
            case 0:
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedJournalList_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns  <c>List</c> object with posted journals
    /// </summary>
    /// <returns>
    /// <c>List</c> object with posted journals
    /// </returns>
    public Set postedJournalList_RU()
    {
        return postedJournalList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    public void prePromptInit()
    {
        if (this.parmCallerTable() || this.salesTable() || this.createFromLines()
            // <GIN>
            || (TaxParameters::isCustomsEnable_IN()
                && customsExportOrderTable)
            // </GIN>
            )
        {
            this.showQueryForm(false);
            this.initLinesQuery();
        }
        else
        {
            this.showQueryForm(true);

            FormletterParmDataChooseLinesContract formLetterParmDataChooseLinesContract = FormletterParmDataChooseLinesContract::construct();
            formLetterParmDataChooseLinesContract.parmFormletterContractPacked(this.packDataContract(contract));
            formLetterParmDataChooseLinesContract.parmAppend(false);
            formLetterParmDataChooseLinesContract.parmReuseParmUpdate(false);
            formLetterParmDataChooseLinesContract.parmOnlyCreateParmUpdate(true);

            container outputContainer = SalesFormletterParmData::chooseLinesFromContract(formLetterParmDataChooseLinesContract.pack());
            FormLetterParmDataOutputContract outputContract = this.unpackFormletterParmDataOutputContract(outputContainer);
            this.getValuesFormletterParmData(outputContract);
        }

        this.initPrinterSettingsFormletter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBillOfLading_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if bill of lading should be printed when posting journal
    /// </summary>
    /// <param name="_printBillOfLading">
    /// Print bill of lading parameter
    /// </param>
    /// <returns>
    /// True if bill of lading should be printed; otherwise false
    /// </returns>
    public boolean printBillOfLading_RU(boolean _printBillOfLading = salesFormLetterContract.parmPrintBillOfLading_RU())
    {
        return salesFormLetterContract.parmPrintBillOfLading_RU(_printBillOfLading);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCODLabel</Name>
				<Source><![CDATA[
    public boolean  printCODLabel(boolean  _printCODLabel = salesFormLetterContract.parmPrintCODLabel())
    {
        return salesFormLetterContract.parmPrintCODLabel(_printCODLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if entry certificate should be printed when posting journal.
    /// </summary>
    /// <param name="_printEntryCertificate_W">
    /// Print entry certificate parameter.
    /// </param>
    /// <returns>
    /// true if entry certificate should be printed; otherwise false.
    /// </returns>
    public boolean printEntryCertificate_W(boolean  _printEntryCertificate_W = salesFormLetterContract.parmPrintEntryCertificate_W())
    {
        return salesFormLetterContract.parmPrintEntryCertificate_W(_printEntryCertificate_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsCODLabel</Name>
				<Source><![CDATA[
    public container printerSettingsCODLabel()
    {
        return SysOperationHelper::base64Decode(salesFormLetterContract.parmPrinterSettingsCODLabel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns printer settings which should be used for printing entry certificate.
    /// </summary>
    /// <returns>
    /// Printer settings which should be used for printing entry certificate.
    /// </returns>
    public container printerSettingsEntryCertificate_W()
    {
        return SysOperationHelper::base64Decode(salesFormLetterContract.parmPrinterSettingsEntryCertificate_W());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsShippingLabel</Name>
				<Source><![CDATA[
    public container printerSettingsShippingLabel()
    {
        return SysOperationHelper::base64Decode(salesFormLetterContract.parmPrinterSettingsShippingLabel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management node type.
    /// </summary>
    /// <returns>
    /// The print management node type.
    /// </returns>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        return PrintMgmtNodeType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    public Printout  printout(Printout _printout = salesFormLetterContract.parmPrintOut())
    {
        if (this.proforma())
        {
            salesFormLetterContract.parmPrintOut(Printout::Current);
        }
        else if (this.mustPrintInAfterOperation())
        {
            salesFormLetterContract.parmPrintOut(Printout::After);
        }
        else
        {
            salesFormLetterContract.parmPrintOut(_printout);
        }

        return salesFormLetterContract.parmPrintOut();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPSDSDocuRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Print the PSDS documents
    /// </summary>
    /// <remarks>
    /// During posting of packing slips and invoices a list of Product Safety Data Sheets is created.
    /// This method finds the documents in DocuRef and prints them.
    /// The DocuRef documents are not SSRS documents and can hence only be printed on the client, which is why
    /// this special method is needed.
    /// </remarks>
    private void printPSDSDocuRef()
    {
        // Non-SSRS documents like PSDS can only be printed in afterOperation so print them now.
        // If they should not be printed, like if the printing runs on server, then that is caught later
        if (isConfigurationkeyEnabled(configurationKeyNum(PdsMRC)) && formletterOutputContract.parmDocuRefRecIdsPerJournal())
        {
            // Run through all journals and print the associated product safety data sheets
            Map docuRefRecIdsPerJournalMap = Map::create(SysOperationHelper::base64Decode(formletterOutputContract.parmDocuRefRecIdsPerJournal()));
            MapEnumerator me = docuRefRecIdsPerJournalMap.getEnumerator();
            while ( me.moveNext() )
            {
                PdsMRCRegulated::printPSDS(me.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printShippingLabel</Name>
				<Source><![CDATA[
    public boolean  printShippingLabel(boolean  _printShippingLabel = salesFormLetterContract.parmPrintShippingLabel())
    {
        return salesFormLetterContract.parmPrintShippingLabel(_printShippingLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printTransportInvoice_RU</Name>
				<Source><![CDATA[
    public boolean printTransportInvoice_RU(boolean _printTransportInvoice = salesFormLetterContract.parmPrintTransportInvoice_RU())
    {
        return salesFormLetterContract.parmPrintTransportInvoice_RU(_printTransportInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    public boolean  proforma(boolean  _proforma = this.salesParmUpdate().Proforma)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.Proforma = _proforma;
        this.salesParmUpdate(salesParmUpdate);
        salesFormLetterContract.parmProforma(_proforma);
        return salesParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingSalesPackingSlip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the current form status allows for posting sales order packing slips.
    /// </summary>
    /// <returns>True if the form allows for posting sales orders packing slips, false otherwise.</returns>
    public boolean isPostingSalesPackingSlip()
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        return salesParmUpdate.Proforma == NoYes::No && salesParmUpdate.DocumentStatus == DocumentStatus::PackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAndRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes a prompt and run scenario.
    /// </summary>
    /// <remarks>
    /// This wrapper method has that will be used instead of manually calling the <c>prompt</c> and
    /// <c>run</c> methods.
    /// </remarks>
    public void promptAndRun()
    {
        this.prePromptInit();
        if (this.prompt())
        {
            this.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    public container  qtyInvent(Common         _common,
                                InventQty      _qty = naReal(),
                                boolean        _isLoadLine = false
                                )
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        InventQty       qty = _qty;

        qty = !_isLoadLine ? qty : 0;

        return salesQuantity.qtyInvent(_common, salesParmUpdate.SpecQty, qty, salesParmUpdate.CreditRemaining
                                                                            // <GEEU>
                                                                            , salesParmTable.PackingSlipIdForUpdate_W
                                                                            // </GEEU>
                                                                            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySales</Name>
				<Source><![CDATA[
    public container  qtySales(Common      _common,
                               SalesQty    _qty = naReal(),
                               boolean     _isLoadLine = false
                               )
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        InventQty       qty = _qty;

        qty = !_isLoadLine ? qty : 0;

        return salesQuantity.qtySales(_common, salesParmUpdate.SpecQty, qty, salesParmUpdate.CreditRemaining
                                                                            // <GEEU>
                                                                            ,salesParmTable.PackingSlipIdForUpdate_W
                                                                            // </GEEU>
                                                                            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rearranges the order lines in accordance to the specified summary update parameter.
    /// </summary>
    /// <param name="_validate">
    ///    A Boolean value that indicates whether to perform validation.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise false.
    /// </returns>
    public boolean  reArrange(boolean  _validate = true)
    {
        boolean ok = true;

        if (_validate  &&  !this.validate())
        {
            ok = false;
        }

        if (ok)
        {
            container packedParmDataOutputContract = SalesFormletterParmData::reArrangeServer(this.packDataContract(salesFormLetterContract), this.isInBatch());
            this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(packedParmDataOutputContract));
            this.reArrangeNow(false);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recommendedSpecQty</Name>
				<Source><![CDATA[
    public SalesUpdate recommendedSpecQty()
    {
        return SalesParameters::find().recommendedSpecQty(this.documentStatus());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the SalesFormLetter object for reselect.
    /// </summary>
    /// <param name = "_salesParmUpdate">
    /// A <c>SalesParmUpdate</c> record.
    /// </param>
    /// <param name = "_inventLocationId">
    /// Inventory location ID for Documents numbering by warehouse
    /// </param>
    protected void prepareReSelect(SalesParmUpdate _salesParmUpdate, InventLocationId _inventLocationId)
    {
        this.salesParmUpdate(_salesParmUpdate);
        this.creditRemaining(_salesParmUpdate.CreditRemaining);
        this.proforma(_salesParmUpdate.Proforma);
        // <GEEPL>
        this.parmInventLocationId_PL(_inventLocationId);
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSelect</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reselects the order lines by a quantity specification.
    /// </summary>
    /// <param name="_salesParmUpdate">
    ///    A <c>SalesParmUpdate</c> record.
    /// </param>
    /// <param name="_inventLocationId">
    /// Inventory location ID for Documents numbering by warehouse
    /// </param>
    public void reSelect(
        SalesParmUpdate   _salesParmUpdate,
        InventLocationId _inventLocationId = this.parmInventLocationId_PL()
        )
    {
        if (this.salesParmUpdate().isQuantityModified(_salesParmUpdate)
            // <GEEPL>
            || this.parmInventLocationId_PL()  != _inventLocationId
            // </GEEPL>
            )
        {
            this.prepareReSelect(_salesParmUpdate, _inventLocationId);

            container packedParmDataOutputContract = SalesFormletterParmData::reSelectServer(this.packDataContract(salesFormLetterContract));
            this.getValuesFormletterParmData(this.unpackFormletterParmDataOutputContract(packedParmDataOutputContract));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if cash receipt should be printed when posting journal.
    /// </summary>
    /// <param name="_printCODCashReceipt_W">
    /// Print cash receipt parameter.
    /// </param>
    /// <returns>
    /// true if cash receipt should be printed; otherwise false.
    /// </returns>
    public boolean printCODCashReceipt_W(boolean _printCODCashReceipt_W = printCODCashReceipt_W)
    {
        printCODCashReceipt_W = _printCODCashReceipt_W;
        return printCODCashReceipt_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReadyCODCashReceipts</Name>
				<Source><![CDATA[
    public container parmReadyCODCashReceipts(container _readyCashReceipts = readyCashReceipts)
    {
        readyCashReceipts = _readyCashReceipts;
        return readyCashReceipts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets all parameters of posting to default values.
    /// </summary>
    public void resetParmListCommonCS()
    {
        Set lineIdSet = new Set(Types::String);
        InterCompanyMapRecord interCompanyMapRecord = InterCompanyMapRecord::construct();

        super();

        mrcPostingErr       = NoYes::No;
        mrcPrintOnPack      = NoYes::No;

        this.parmId('');
        this.salesTable(null);
        this.editLinesChanged(false);
        this.reArrangeNow(true);
        this.initAllowEmptyTable(false);
        this.allowEmptyTable(false);
        this.enableUpdateNowField(false);
        this.lockSalesUpdateField(false);
        this.createFromLines(false);
        this.parmCreateFromHistory(false);
        this.showQueryForm(false);
        this.multiForm(false);
        this.transDate(dateNull());
        this.defaultGiroType(NoYes::No);
        this.parmIdSynched('');
        this.chooseLinesQuery(null);
        this.parmInterCompanyCompanyId('');
        this.parmDirectDeliveryUpdate(false);
        this.creditRemaining(false);
        this.parmDataSourceRecordsPacked(conNull());
        this.parmHistoryList(conNull());
        this.parmSpecQtyIsSet(false);
        this.interCompanyParmId('');
        this.interCompanyMap(interCompanyMapRecord.map());
        this.parmLineList(conNull());
        this.interCompanyPosted(false);
        this.parmLineIdSet(lineIdSet.pack());
        this.parmShipmentId('');
        this.parmRelatedJournal(null);
        this.validateAll(true);
        this.parmBatchJobId(0);
        this.parmBatchGroupId('');
        this.printCODCashReceipt_W(false);
        this.parmReadyCODCashReceipts(conNull());
        this.parmWHSLoadId('');

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            this.parmMCRPaymMode('');
            this.mcrMiscChargePrintOption(mcrOrderParameters::find().MCRMiscChargePrintOption);
        }
        this.parmMCRPickWaveReference('');
        this.parmMCRInventTransRecid(0);
        this.parmVersioningUpdateType(VersioningUpdateType::Initial);

        this.parmCheckCreditMax(TypeOfCreditmaxCheck::None);
        packedOutputContract = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetProformaUponPhysicalUpdatable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Turns off the sample packing slip.
    /// </summary>
    /// <remarks>
    /// Used by override methods to select between the sample and final packing slip.
    /// </remarks>
    public void resetProformaUponPhysicalUpdatable()
    {
        this.proforma(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExecution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the posting should continue execution.
    /// </summary>
    /// <returns>true if the execution can continue; otherwise, false.</returns>
    [Replaceable]
    protected boolean validateExecution()
    {
        if (!SalesFormLetter::mcrSplitParmData(this.packDataContract(salesFormLetterContract))
            || (reArrangeNow && !this.reArrange(false) && !this.salesTable().QuotationId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    /// <remarks>
    /// Do not call this method directly. Use the <c>startOperation</c> method instead. This will handle
    /// displaying the dialog and doing validation. The <c>parmShowDialog</c> method can be used before the
    /// <c>startOperation</c> method to disable the dialog it is required.
    /// </remarks>
    public void  run()
    {
        Counter numberOfOrdersPosted, numberOfOrderLinesPosted;

        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteSalesFormLetterRunStart(className, methodName, 0, 0, 0, this.isInBatch());

        TradeInstrumentationStopwatch timer = TradeInstrumentationStopwatch::newStopwatch();

        setprefix("@SYS25781");
       
        if (RetailPaymentAuthDeclinedOrderHoldFlight::instance().isEnabled() && this.isPaymentAuthorizationDeclined(this.salesTable()))
        {
            this.setOrderOnHold(this.salesTable());
            error("@Retail:PaymentAuthDeclinedOrderHold");
        }
        else
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServerAndController(this))
            {
                if (this.isInBatch())
                {
                    this.init();
            
                    if (this.lateSelection())
                    {
                        this.resetParmListCommonCS();
                        this.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            
                        ttsBegin;
                        SalesParmUpdate salesParmUpdate = salesFormLetterContract.parmParmUpdate() as salesParmUpdate;
                        salesParmUpdate.ParmId = formletterParmData::getNewParmId();

                        if (salesParmUpdate.DataAreaId != curExt() && SalesFormLetterIncorrectCompanyFlight::instance().isEnabled())
                        {
                            salesParmUpdate.overwriteSystemfields(true);
                            salesParmUpdate.(fieldNum(SalesParmUpdate, DataAreaId)) = curExt();
                        }

                        salesParmUpdate.doInsert();
                        salesFormLetterContract.parmParmUpdate(salesParmUpdate);
                        salesFormLetterContract.parmParmId(salesParmUpdate.ParmId);
                        Batch batch = Batch::findRecId(this.parmCurrentBatch().RecId, true);
                        batch.Parameters = this.pack();
                        batch.doUpdate();
                        ttsCommit;
                    }
                    else
                    {
                        this.transDate(salesParmTable.Transdate);
                    }
            
                    this.parmBatchJobId(this.parmCurrentBatch().BatchJobId);
                    this.parmBatchGroupId(this.parmCurrentBatch().GroupId);
                }
            
                if (!this.validateExecution())
                {
                    throw error("@SYS18447");
                }
            
                if (kittingHandler && !this.lateSelection())
                {
                    kittingHandler.prepareRun();
                }
            
                if (ledgerVoucher)
                {
                    FormletterService formletterService = FormletterService::newFromContract(this.packDataContract(salesFormLetterContract), FormletterType::Sales);
                    //LegerVoucher is not packable....
                    formletterService.parmLedgerVoucher(ledgerVoucher);
                    formletterService.run();
                    formletterOutputContract = formletterService.getOutputContract();
                    numberOfOrdersPosted = formletterOutputContract.parmNumberOfOrdersPosted();
                    container journalLinesPacked = formletterOutputContract.parmJournalLinesPacked();
                    if (journalLinesPacked)
                    {
                        numberOfOrderLinesPosted = List::create(journalLinesPacked).elements();
                    }
            
                    // <GEERU>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        postedJournalList = Set::union(postedJournalList, Set::create(formletterService.packedJournalList_RU()));
                    }
                    // </GEERU>
                }
                else
                {
                    salesFormLetterContract.parmIsPrintingInAfterOperation(this.mustPrintInAfterOperation());
            
                    if (kittingHandler)
                    {
                        kittingHandler.setParameters(salesFormLetterContract);
                    }
            
                    //Invoke as service
                    super();
                    numberOfOrdersPosted = this.getOutputContract().parmNumberOfOrdersPosted();
                    container journalLinesPacked = this.getOutputContract().parmJournalLinesPacked();
                    if (journalLinesPacked)
                    {
                        numberOfOrderLinesPosted = List::create(journalLinesPacked).elements();
                    }
                }
            }
         }
         // Record the number of orders that were updated, as well as the total number of lines
        Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteSalesFormLetterRunStop(className, methodName, numberOfOrdersPosted, numberOfOrderLinesPosted, timer.elapsedMilliseconds(), this.isInBatch());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runShipCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes any functionality that will require user interaction.
    /// </summary>
    /// <remarks>
    ///    This method is called after the <c>run</c> method.
    /// </remarks>
    public void runShipCarrier()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesParmUpdate</Name>
				<Source><![CDATA[
    public SalesParmUpdate  salesParmUpdate(SalesParmUpdate  _salesParmUpdate = salesFormLetterContract.parmParmUpdate() as SalesParmUpdate)
    {
        if (!prmisDefault(_salesParmUpdate))
        {
            salesFormLetterContract.parmLateSelection(_salesParmUpdate.LateSelection);
        }
        return salesFormLetterContract.parmParmUpdate(_salesParmUpdate) as  SalesParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    public SalesTable  salesTable(SalesTable  _salesTable = salesFormLetterContract.parmSalesTable())
    {
        this.parmSourceTable(_salesTable);
        return salesFormLetterContract.parmSalesTable(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerVoucher</Name>
				<Source><![CDATA[
    public void  setLedgerVoucher(LedgerVoucher  _ledgerVoucher)
    {
        ledgerVoucher       = _ledgerVoucher;
        ledgerVoucherIsSet  = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceNumbering_LT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets auto invoice numbering
    /// </summary>
    protected void setInvoiceNumbering_LT()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewContract</Name>
				<Source><![CDATA[
    protected void setNewContract(FormLetterContract _contract)
    {
        super(_contract);
        if (!contractIsFromPreviousVersion)
        {
            salesFormLetterContract = _contract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specQty</Name>
				<Source><![CDATA[
    public SalesUpdate  specQty(SalesUpdate  _specQty = this.salesParmUpdate().SpecQty)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.SpecQty = _specQty;
        this.salesParmUpdate(salesParmUpdate);
        salesFormLetterContract.parmSpecQtyIsSet(true);
        salesFormLetterContract.parmSpecQty(_specQty);
        return salesParmUpdate.SpecQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInventOwnerId_RU</Name>
				<Source><![CDATA[
    public NoYes splitInventOwnerId_RU(NoYes _splitInventOwnerId_RU = this.salesParmUpdate().SplitInventOwnerId_RU)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.SplitInventOwnerId_RU = _splitInventOwnerId_RU;
        this.salesParmUpdate(salesParmUpdate);
        return salesParmUpdate.SplitInventOwnerId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInventProfileType_RU</Name>
				<Source><![CDATA[
    public NoYes splitInventProfileType_RU(NoYes _splitInventProfileType = this.salesParmUpdate().SplitInventProfileType_RU)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.SplitInventProfileType_RU = _splitInventProfileType;
        this.salesParmUpdate(salesParmUpdate);
        return salesParmUpdate.SplitInventProfileType_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitPostingProfile_RU</Name>
				<Source><![CDATA[
    public NoYes splitPostingProfile_RU(NoYes _splitPostingProfile = this.salesParmUpdate().SplitPostingProfile_RU)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.SplitPostingProfile_RU = _splitPostingProfile;
        this.salesParmUpdate(salesParmUpdate);
        return salesParmUpdate.SplitPostingProfile_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitSite</Name>
				<Source><![CDATA[
    public TradeSplitSite splitSite(TradeSplitSite  _splitSite = this.salesParmUpdate().SplitSite)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.SplitSite = _splitSite;
        this.salesParmUpdate(salesParmUpdate);
        return salesParmUpdate.SplitSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumBy</Name>
				<Source><![CDATA[
    public AccountOrder  sumBy(AccountOrder  _sumBy = this.salesParmUpdate().SumBy)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();
        salesParmUpdate.SumBy = _sumBy;
        this.salesParmUpdate(salesParmUpdate);
        return salesParmUpdate.SumBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A <c>formName</c> value.
    /// </returns>
    protected formName templateForm()
    {
        //    return formStr(SalesEditLines);
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate(TransDate _transDate = contract.parmTransDate())
    {
        TransDate transDateLocal;

        if (!_transDate)
        {
            if (this.getSalesDocumentTimezonePreference() == SalesDocumentTimezonePreference::LegalEntity)
            {
                transDateLocal = DateTimeUtil::getSystemDate(DateTimeUtil::getCompanyTimeZone());
            }
        }
        else
        {
            transDateLocal = _transDate;
        }

        return super(transDateLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        container packedBase;

        switch (version)
        {
            case #CurrentVersion + #ParentVersion:
                [version, #ParmListCommonCS, packedBase] = _packedClass;
                if (packedOutputContract)
                {
                    formletterOutputContract.unpack(packedOutputContract);
                }
                return super(packedBase);

            case #SumVersion16:
                [version, #ParmListCommonCS_16, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void  update(Common         _source,
                 TransDate      _transDate          = this.transDate(),
                 SalesUpdate    _specQty            = SalesUpdate::All,
                 AccountOrder   _accountOrder       = AccountOrder::None,
                 NoYes          _proforma           = this.salesParmUpdate().Proforma,
                 NoYes          _printFormLetter    = this.printFormLetter(),
                 NoYes          _usePrintManagement = false,
                 NoYes          _creditRemaining    = this.creditRemaining(),
                 container      _packedTmpFrmVirtualList = conNull(),
                 boolean        _storno             = false,
                 boolean        _stornoPhysical     = false)
    {
        // <GEERU>
        boolean storno, stornoPhysical;
        // </GEERU>

        switch (_source.TableId)
        {
            case tableNum(SalesTable):
                this.salesTable(_source);
                this.initParmSalesTable(this.salesTable());
                break;

            case tableNum(WMSShipment):
                this.parmShipmentId(_source.(fieldNum(WMSShipment, ShipmentId)));
                break;
        }

        if (!_transDate)
        {
            _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        this.transDate      (_transDate);
        this.specQty        (_specQty);
        this.proforma       (_proforma);
        this.printFormLetter    (_printFormLetter);
        this.printCODLabel      (NoYes::No);
        this.printShippingLabel (NoYes::No);
        this.usePrintManagement (_usePrintManagement);
        this.creditRemaining    (_creditRemaining);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (prmisDefault(_storno))
            {
                storno = CustParameters::find().CreditError;
            }
            else
            {
                storno = _storno;
            }
            if (prmisDefault(_stornoPhysical))
            {
                stornoPhysical = InventParameters::find().StornoPhysicalPosting_RU;
            }
            else
            {
                stornoPhysical = _stornoPhysical;
            }
        }
        else
        {
            storno         = CustParameters::find().CreditError;
            stornoPhysical = false;
        }

        this.createParmUpdateFromParmUpdateRecord(SalesFormletterParmData::initSalesParmUpdateFormletter(this.documentStatus(),
                                                                                                         this.pack(),
                                                                                                         true,
                                                                                                         storno,
                                                                                                         stornoPhysical));
        // </GEERU>

        this.initParameters(this.salesParmUpdate(),
                            Printout::Current);  // Printout

        this.initLinesQuery();

        if (_packedTmpFrmVirtualList)
        {
            this.selectFromJournal(_packedTmpFrmVirtualList);
        }

        // Don't call runShipCarrier here because it invokes a dialog that has to be handled separately.
        skipRunShipCarrier = true;
        this.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEstimate</Name>
				<Source><![CDATA[
    public void updateEstimate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettingsCODLabel</Name>
				<Source><![CDATA[
    protected void  updatePrinterSettingsCODLabel(container  _printerSettings)
    {
        salesFormLetterContract.parmPrinterSettingsCODLabel(SysOperationHelper::base64Encode(_printerSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettingsEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates printer settings which should be used for printing entry certificate.
    /// </summary>
    /// <param name="_printerSettings">
    /// Printer settings which should be used for update.
    /// </param>
    protected void  updatePrinterSettingsEntryCertificate_W(container  _printerSettings)
    {
        salesFormLetterContract.parmPrinterSettingsEntryCertificate_W(SysOperationHelper::base64Encode(_printerSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinterSettingsShippingLabel</Name>
				<Source><![CDATA[
    protected void  updatePrinterSettingsShippingLabel(container  _printerSettings)
    {
        salesFormLetterContract.parmPrinterSettingsShippingLabel(SysOperationHelper::base64Encode(_printerSettings));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesShippingStat</Name>
				<Source><![CDATA[
    protected void  updateSalesShippingStat(SalesParmTable _salesParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesType</Name>
				<Source><![CDATA[
    protected void  updateSalesType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether it is all right to continue.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true if it is all right to continue; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The validate method is used for validating if it is all right to close the sales posting form when
    ///    you post sales orders.
    /// </remarks>
    public boolean  validate(Object _calledFrom = null)
    {
        SalesParmUpdate salesParmUpdate = this.salesParmUpdate();

        // Validate header
        if (! this.checkSumBy())
        {
            return false;
        }

        if (! this.checkSumNum())
        {
            return false;
        }

        if (! this.checkLateSelection())
        {
            return false;
        }

        if (! this.checkInterCompany())
        {
            return false;
        }

        if (!SalesFormLetter::checkSalesLinesChangedServer(this.documentStatus(), this.pack()))
        {
            return false;
        }
        // <GIN>
        //Shipping Bill NUM field validation
        if (TaxParameters::checkTaxParameters_IN())
        {
            if (! this.checkFormLetterId_IN())
                return false;
        }
        // </GIN>

        if (validateAll)
        {
            if (!this.interCompanyParmId())
            {
                // <GEERU>
                if (salesParmUpdate.Proforma  &&  !this.printFormLetter() && !this.printFacture_RU() && !this.printAcceptanceReport_RU() && !this.printInventBaileeReport_RU())
                // </GEERU>
                {
                    info("@SYS78888");
                    return checkFailed("@SYS21533");
                }
            }

            if (this.mustValidateWMSOrder())
            {
                if (!this.checkifWMSorder()
                 && !this.parmIsSimulatePosting()
                 && Box::okCancel("@SYS28077",DialogButton::Cancel) == DialogButton::Cancel)
                {
                    return checkFailed("@SYS21533");
                }
            }

            if (this.printFormLetter() && !salesParmUpdate.Proforma && !this.usePrintManagement() &&
                    new SRSPrintDestinationSettings(this.printerSettingsFormletter()).printMediumType() == SRSPrintMediumType::Screen)
            {
                if (Box::yesNo(strfmt("@SYS105044", strlwr(enum2str(this.documentStatus()))), DialogButton::No) == DialogButton::No)
                {
                    return checkFailed("@SYS21533");
                }
            }

            CompanyId companyId = curext();
            if (companyId != curext())
            {
                appl.setDefaultCompany(companyId, false);
            }
        }
        // <GEERU><GEEU>
        if (countryRegion_RU || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoHU, #isoPL, #isoMX]))
        {
            if (!SalesFormletterParmData::newReSelect(this.packDataContract(salesFormLetterContract)).checkAdvancePayments_W(true))
            {
                return checkFailed("@SYS21533");
            }
        }
        // </GEEU></GEERU>

        // Validate lines
        // <GEERU>
        if (! this.printFormLetter()
           && salesParmUpdate.Proforma
           && !salesParmUpdate.LateSelection
           && !this.printFacture_RU()
           && !this.printAcceptanceReport_RU()
           && !this.printInventBaileeReport_RU())
        // </GEERU>
        {
            info("@SYS78888");
            return checkFailed("@SYS21533");
        }
        // <GEERU>
        if (countryRegion_RU)
        {
            if (!this.checkPrintout_RU())
            {
                return checkFailed("@SYS21533");
            }

            if (salesParmUpdate.inventOwnerIdCheckFailed_RU())
            {
                return checkFailed(strFmt("@GLS115692", fieldId2pname(tableNum(InventDim), fieldNum(InventDim, InventOwnerId_RU)), "@GLS113769"));
            }
            if (!this.checkAgreement_RU())
            {
                return false;
            }
        }
        // </GEERU>

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && !this.checkServiceTariffNumber())
        {
            return false;
        }
        // </GEEPL>

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()) && kittingHandler && !kittingHandler.validate())
        {
            return false;
        }

        if (TaxIdValidationUtil::isValidationNeeded(TaxIntegrationBusinessProcess::Sales, tableNum(SalesTable), salesParmUpdate.DocumentStatus)
            && salesParmUpdate.parmId)
        {
            ListEnumerator salesTableListEnumerator = this.getAllSalesTables().getEnumerator();

            //Check if all the SO lines are with the same tax id.
            SalesTable salesTableLoc;
            while (salesTableListEnumerator.moveNext())
            {
                salesTableLoc = salesTableListEnumerator.current();
                Tax tax = SalesTotals::getTax(salesTableLoc);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLineName_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the length of the transaction line name is less than or equals to 256 characters.
    /// </summary>
    /// <param name="_salesParmLine">
    /// An <c>SalesParmLine</c> record.
    /// </param>
    /// <returns>
    /// true if the name is less than or equals to 256 characters for all lines; otherwise, false.
    /// </returns>
    protected boolean validateLineName_PL(SalesParmLine _salesParmLine)
    {
        boolean ret = true;

        if (_salesParmLine.ItemId 
            && strLen(_salesParmLine.name()) > TransactionLineNameLengthLimit)
        {
            return checkFailed(strFmt("@StandardAuditFile_SAFT_W:SAFInventoryDescriptionValidationLabel", _salesParmLine.ItemId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllSalesTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all sales table entries with the same parmId of sales parm update 
    /// </summary>
    /// <returns>A list of sales table endtry</returns>
    protected List getAllSalesTables()
    {
        List salesTableList = new List(Types::Record);
        SalesParmTable salesParmTableLoc;

        if (!this.salesParmUpdate().ParmId)
        {
            return salesTableList;
        }

        // Since there is scenario of multiple SOs merge into one single invoice, we need to check every SO.
        while select salesParmTableLoc
            where salesParmTableLoc.ParmId == this.salesParmUpdate().ParmId
        {
            SalesTable salesTableLoc;
            select firstonly salesTableLoc where salesTableLoc.SalesId == salesParmTableLoc.SalesId;
            salesTableList.addEnd(salesTableLoc);
        }
        return salesTableList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustValidateWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the validation on WMS Order must be done.
    /// </summary>
    /// <returns>true if the WMS Order must be validated; otherwise, false.</returns>
    [Replaceable]
    protected boolean mustValidateWMSOrder()
    {
        return (!this.salesParmUpdate().Proforma  &&  !this.printFormLetter() && this.parmShowDialog() && !this.printFacture_RU() && !this.printAcceptanceReport_RU() && !this.printInventBaileeReport_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsCODLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the printer settings for COD labels by using the standard printer settings dialog box.
    /// </summary>
    /// <param name="_salesFormLetter">
    /// The <c>SalesFormLetter</c> class where the printer settings for COD labels are being modified.
    /// </param>
    /// <returns>
    /// true if the settings were modified; otherwise, false.
    /// </returns>
    static boolean callPrinterSettingsCODLabel(SalesFormLetter _salesFormLetter)
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_salesFormLetter.printerSettingsCODLabel());
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings);

        _salesFormLetter.updatePrinterSettingsCODLabel(printSettings.pack());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsEntryCertificate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the printer settings for entry certificate by using the standard print job
    /// settings dialog box.
    /// </summary>
    /// <param name="_salesFormLetter">
    /// The <c>SalesFormLetter</c> class where the printer settings for entry certificate is being modified.
    /// </param>
    /// <returns>
    /// true if the settings were modified; otherwise, false.
    /// </returns>
    public static boolean callPrinterSettingsEntryCertificate_W(SalesFormLetter _salesFormLetter)
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_salesFormLetter.printerSettingsEntryCertificate_W());
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings);

        _salesFormLetter.updatePrinterSettingsEntryCertificate_W(printSettings.pack());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows the user to modify the printer settings using the standard print job settings dialog.
    /// </summary>
    /// <param name="_salesFormLetter">
    /// The <c>SalesFormLetter</c> class where the printer settings are modified.
    /// </param>
    /// <param name="_originalCopy">
    /// A <c>PrintSetupOriginalCopy</c> value that indicates whether the printer settings for original or
    /// copy that is being modified; optional.
    /// </param>
    /// <returns>
    /// true if the settings were modified; otherwise, false.
    /// </returns>
    static boolean callPrinterSettingsFormletter(SalesFormLetter _salesFormLetter, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        #PrintMgmtSetup
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_salesFormLetter.printerSettingsFormletter(_originalCopy));
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings, #SRSPrintDestinationTokenPrintMgmt, enum2Symbol(enumNum(PrintMgmtDocumentType), enum2int(_salesFormLetter.printMgmtDocumentType())));

        _salesFormLetter.updatePrinterSettingsFormLetter(printSettings.pack(), _originalCopy);

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPrinterSettingsShippingLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the printer settings for shipping labels by using the standard printer settings dialog box.
    /// </summary>
    /// <param name="_salesFormLetter">
    /// The <c>SalesFormLetter</c> class where the printer settings for shipping labels are being modified.
    /// </param>
    /// <returns>
    /// true if the settings were modified; otherwise, false.
    /// </returns>
    static boolean callPrinterSettingsShippingLabel(SalesFormLetter _salesFormLetter)
    {
        SRSPrintDestinationSettings printSettings = new SRSPrintDestinationSettings(_salesFormLetter.printerSettingsShippingLabel());
        boolean ok = SrsReportRunUtil::showSettingsDialog(printSettings);

        _salesFormLetter.updatePrinterSettingsShippingLabel(printSettings.pack());

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditNoteReason</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the reason for the credit note.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> buffer to check the credit note reason for.
    /// </param>
    static void checkCreditNoteReason(Common _common)
    {
        if (_common is SalesTable)
        {
            SalesTable salesTable = _common as SalesTable;

            salesTable.checkCreditNoteReason();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDualUseProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for Country of Origin dual use product certificate.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> buffer to check dual use product certificate for.
    /// </param>
    static void checkDualUseProduct(Common _common)
    {
        if (_common is SalesTable)
        {
            SalesTable salesTable = _common as SalesTable;

            salesTable.checkDualUseProduct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLinesChangedServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether sales lines has been updated since the posting was started.
    /// </summary>
    /// <param name="_documentStatus">
    ///   An element from the <c>DocumentStatus</c> enumeration.
    /// </param>
    /// <param name="_packedFormletter">
    ///   A packed version of the posting class.
    /// </param>
    /// <returns>
    ///  true if the validation passes; otherwise, false.
    /// </returns>
    static private boolean  checkSalesLinesChangedServer(
        DocumentStatus _documentStatus,
        container _packedFormletter)
    {
        SalesFormletter salesFormletter = SalesFormLetter::construct(_documentStatus);
        salesFormletter.unpack(_packedFormletter);
        return salesFormletter.checkSalesLinesChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromClassNameMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of <c>SalesFormLetter</c> class based on class and method names.
    /// </summary>
    /// <param name = "_documentStatus">Document status to be updated.</param>
    /// <param name = "_className">Class name</param>
    /// <param name = "_methodName">Method name</param>
    /// <param name = "_executionMode">Operation execution mode</param>
    /// <returns>A new <c>SalesFormLetter</c> class instance.</returns>
    public static SalesFormLetter constructFromClassNameMethodName(
        DocumentStatus _documentStatus,
        IdentifierName _className,
        IdentifierName _methodName,
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        DocumentStatusFactoryAttribute      attribute       = new DocumentStatusFactoryAttribute(_documentStatus);
        SysExtensionGenericInstantiation    instantiation   = new SysExtensionGenericInstantiation(_className, _methodName, _executionMode);
        SalesFormLetter                     salesFormLetter = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(SalesFormLetter), attribute, instantiation) as SalesFormLetter;

        if (classIdGet(salesFormLetter) == classNum(SalesFormLetter))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        salesFormLetter.init();
        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of <c>SalesFormLetter</c> class based on <c>DocumentStatus</c> enum value.
    /// </summary>
    /// <param name = "_documentStatus">Document status to be updated.</param>
    /// <param name = "_className">Class name</param>
    /// <param name = "_methodName">Method name</param>
    /// <param name = "_executionMode">Operation execution mode</param>
    /// <returns>A new <c>SalesFormLetter</c> class instance.</returns>
    public static SalesFormLetter construct(
        DocumentStatus _documentStatus,
        IdentifierName _className  = '',
        IdentifierName _methodName = '',
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        if (_className && _methodName)
        {
            return SalesFormLetter::constructFromClassNameMethodName(_documentStatus, _className, _methodName, _executionMode);
        }

        DocumentStatusFactoryAttribute  attribute       = new DocumentStatusFactoryAttribute(_documentStatus);
        SalesFormLetter                 salesFormLetter = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesFormLetter), attribute) as SalesFormLetter;

        if (classIdGet(salesFormLetter) == classNum(SalesFormLetter))
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        SalesFormLetterConstructContext context = SalesFormLetterConstructContext::current();

        if (context != null && context.parmLoadFromSysLastValue() != UnknownNoYes::Unknown)
        {
            salesFormLetter.parmLoadFromSysLastValue(context.parmLoadFromSysLastValue() == UnknownNoYes::Yes);
        }

        salesFormLetter.init();
        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettingsFormletter</Name>
				<Source><![CDATA[
    static container  getPrinterSettingsFormletter(DocumentStatus  document, PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        SalesFormLetter salesFormLetterPrint = SalesFormLetter::construct(document);

        return salesFormLetterPrint.printerSettingsFormletter(_originalCopy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>Args</c> object.
    /// </summary>
    /// <param name = "_args">
    /// An <c>Args</c> object.
    /// </param>
    /// <returns>
    /// true if the<c>Args</c> is valid; otherwise, false.
    /// </returns>
    static protected boolean validateArgs(Args _args)
    {
        return _args != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args  args)
    {
        IdentifierName      callerFormName;
        FormDataSource      recordDataSource;
        container           dataSourceRecordsPacked;
        Counter             numberOfRecords;

        IdentifierName      className, methodName;
        SysOperationExecutionMode mode;
        SalesFormLetter salesFormLetter;

        // <GIN>
        boolean                     countryRegion_IN    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        SysGlobalCache              cache;
        // </GIN>
        // <GEEU>
        boolean                     countryRegion_EU    = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLT, #isoEE, #isoLV, #isoCZ, #isoPL, #isoHU, #isoRU]);
        // </GEEU>

        if (!SalesFormLetter::validateArgs(args))
        {
            throw error("@SYS25407");
        }
        [className, methodName, mode] = FormLetterServiceController::parseServiceInfo(args);

        Common             record         = args.record();
        DocumentStatus     parmEnum       = args.parmEnum();
        Object             callerForm     = args.caller();
        MenuItemNameAction callerMenuItem = args.menuItemName();

        boolean parmSkipPrompt = false;
        switch (parmEnum)
        {
            case DocumentStatus::Confirmation:
                if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
                {
                    //Verify dual use product requirement before continue
                    SalesFormLetter::checkDualUseProduct(record);
                }
                break;

            // <GEEU>
            case DocumentStatus::Invoice:
                if (countryRegion_EU)
                {
                    //Verify that can continue for CreditNote
                    SalesFormLetter::checkCreditNoteReason(record);
                }
                break;
            // </GEEU>
 
            default :
                break;
        }

        if (callerForm)
        {
            callerFormName    = args.caller().name();
        }

        boolean isProforma = FormLetterServiceController::isMenuItemProforma(args.menuItemName());

        if (record)
        {
            recordDataSource = FormDataUtil::getFormDataSource(record);

            if (callerForm is SalesFormLetterISelectedOrderDataProvider)
            {
                var dataProvider = callerForm as SalesFormLetterISelectedOrderDataProvider;

                dataSourceRecordsPacked = dataProvider.getSelectedOrders();
            }
            else if (recordDataSource)
            {
                dataSourceRecordsPacked = FormLetter::getFormRecord(recordDataSource);
            }
        }

        if (record is WHSLoadTable && args.parmObject() is Map)
        {
            dataSourceRecordsPacked = args.parmObject().pack();
        }

        if (record is WMSShipment
            && args.parmObject() is Map)
        {
            dataSourceRecordsPacked = args.parmObject().pack();
        }

        SalesFormLetterCachedArguments cachedArgs = SalesFormLetterCachedArguments::construct();
        cachedArgs.parmEnum = enum2int(parmEnum);
        cachedArgs.callerFormName = callerFormName;
        cachedArgs.isProforma = isProforma;
        cachedArgs.parmSkipPrompt = parmSkipPrompt;
        cachedArgs.className = className;
        cachedArgs.methodName = methodName;
        cachedArgs.mode = mode;
        cachedArgs.callerMenuItem = callerMenuItem;

        // <GIN>
        if (TaxParameters::isCustomsEnable_IN())
        {
            cache = classfactory.globalCache();
            cache.set(classStr(FormDataSource), classIdGet(recordDataSource), recordDataSource);
        }
        // </GIN>

        salesFormLetter = SalesFormLetter::constructAndInitialize(cachedArgs, record, callerForm, dataSourceRecordsPacked);
        salesFormLetter.parmOpenedWithArgs(true);
        salesFormLetter.init();
        
        /*
        postingSlipCheckBeforeStartOperation method uses the value set in context to throw the error for a line item
        if its posting type is consumed, production type is reference and its status as not ended. If that is not the case, then
        the start operation goes normally.
        Once the value has been retrived which was set in the context, we need to dispose the current instance by calling dispose()
        */
   
        PackingSlipBeforePostingCheckForQuarantineContext context = PackingSlipBeforePostingCheckForQuarantineContext::current();
        if(context && context.parmInventRefId() && PreventPostingWhenProdOrderNotEndedFlight::instance().isEnabled())
        {
            InventRefId _currentRefId = context._currentInventRefId;
            context.dispose();
            throw error(strFmt("@Proj:CheckBeforePackingSlip", _currentRefId));
        }
        else
        {
            salesFormLetter.startOperation();
        }

        FormletterOutputContract outputContract = salesFormLetter.getOutputContract();
        numberOfRecords = outputContract.parmNumberOfOrdersPosted();
        
        if (numberOfRecords)
        {
            if (parmEnum == DocumentStatus::PackingSlip
                && !isProforma
                && salesFormLetter.parmWHSLoadId()
                && !salesFormLetter.isVersioningCorrectionOrCancel())
            {
                info("@WAX841");
            }

            if (callerForm is FormRun && formHasMethod(callerForm, identifierStr(interCompanyRefreshCache)))
            {
                callerForm.interCompanyRefreshCache();
            }

            if (recordDataSource)
            {
                boolean recordExists = SalesFormLetter::doesRecordExist(record, callerMenuItem, numberOfRecords);
                FormLetter::reFreshCallerDataSource(recordDataSource, recordExists, (numberOfRecords > 1));
            }

            if (salesFormLetter.printCODCashReceipt_W())
            {
                CashReceiptPrinting_W::generateAndPrintReceipts(salesFormLetter.parmReadyCODCashReceipts());
            }
        }
        else
        {
            if (callerFormName && recordDataSource)
            {
                FormLetter::reFreshCallerDataSource(recordDataSource, true, true);
            }
        }

        // <GIN>
        //Delete saved object reference from the global cache
        if (TaxParameters::isCustomsEnable_IN()
             && cache.isSet(classStr(FormDataSource), classIdGet(recordDataSource)))
        {
            cache.remove(classStr(FormDataSource), classIdGet(recordDataSource));
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesRecordExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves whether the record exists; typically called before refreshing the caller data source.
    /// </summary>
    /// <param name = "_record">A <c>Common</c> record.</param>
    /// <param name = "_callerMenuItem">The caller <c>MenuItemNameAction</c>.</param>
    /// <param name = "_numberOfRecords">The number of records.</param>
    /// <returns>true if the record exists; otherwise, false.</returns>
    protected static boolean doesRecordExist(Common _record, MenuItemNameAction _callerMenuItem, Counter _numberOfRecords)
    {
        switch (true)
        {
            case _record is SalesTable:
                var salesTable = _record as SalesTable;
                return SalesTable::exist(salesTable.SalesId);

            case _record is SalesLine:
                var salesLine = _record as SalesLine;
                return SalesLine::findRecId(salesLine.RecId).RecId != 0;

            case _record is WMSShipment:
                var wmsShipment = _record as WMSShipment;
                return WMSShipment::exist(wmsShipment.ShipmentId);

            // <GIN>
            case _record is CustomsExportOrderTable_IN:
                var customsExportOrderTableLoc = _record as CustomsExportOrderTable_IN;
                return CustomsExportOrderTable_IN::find(customsExportOrderTableLoc.RecId).RecId != 0;
            // </GIN>
            
            case _record is WHSLoadTable:
                var loadTable = _record as WHSLoadTable;
                return WHSLoadTable::exist(loadTable.LoadId);

            case _record is SalesParmTable:
                return false;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitializeFromWarehousePackingSlipParameters</Name>
				<Source><![CDATA[
    internal static SalesFormLetter constructAndInitializeFromWarehousePackingSlipParameters(
        SalesFormLetterCachedArguments  _cachedArgs,
        Common                          _record,
        Object                          _callerForm,
        container                       _dataSourceRecordsPacked,
        WHSPackingSlipPostingParameters _packingSlipPostingParameters)
    {
        SalesFormLetter salesFormLetter = SalesFormLetter::constructAndInitialize(_cachedArgs, _record, _callerForm, _dataSourceRecordsPacked);
    
        salesFormLetter.mrcPostingErr(_packingSlipPostingParameters.PdsMRCPostingError);
        salesFormLetter.mrcPrintOnPack(_packingSlipPostingParameters.PdsMRCPrintOnPack);

        salesFormLetter.printout(_packingSlipPostingParameters.Printout);
        salesFormLetter.printFormLetter(_packingSlipPostingParameters.PrintFormLetter);
        salesFormLetter.usePrintManagement(_packingSlipPostingParameters.UsePrintManagementDestination);

        salesFormLetter.parmCheckCreditMax(_packingSlipPostingParameters.CheckCreditLimit);
        salesFormLetter.sumBy(_packingSlipPostingParameters.SummaryUpdateFor);

        // Printer settings
        salesFormLetter.updatePrinterSettingsFormLetter(_packingSlipPostingParameters.PrinterSettingsFormLetter, PrintSetupOriginalCopy::Original);
        salesFormLetter.updatePrinterSettingsFormLetter(_packingSlipPostingParameters.PrinterSettingsFormLetterCopy, PrintSetupOriginalCopy::Copy);

        salesFormLetter.init();

        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndInitialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of a <c>SalesFormLetter</c> class from the provided parameters.
    /// </summary>
    /// <param name = "_cachedArgs">The cached arguments.</param>
    /// <param name = "_record">The caller record.</param>
    /// <param name = "_callerForm">The caller form.</param>
    /// <param name = "_dataSourceRecordsPacked">The packed data sources</param>
    /// <returns>A new instance.</returns>
    protected static SalesFormLetter constructAndInitialize(
        SalesFormLetterCachedArguments  _cachedArgs,
        Common                          _record,
        Object                          _callerForm,
        container                       _dataSourceRecordsPacked)
    {
        if (!_cachedArgs)
        {
            throw error("@SYS25407");
        }

        _cachedArgs.mode = SysOperationExecutionMode::Synchronous;
        SalesFormLetter salesFormLetter = SalesFormLetter::construct(any2Enum(_cachedArgs.parmEnum), _cachedArgs.className, _cachedArgs.methodName, _cachedArgs.mode);

        salesFormLetter.parmCallerFormName(_cachedArgs.callerFormName);
        salesFormLetter.getLastFromCallerFormName();
        salesFormLetter.parmCallerMenuItem(_cachedArgs.callerMenuItem);

        if (_record)
        {
            salesFormLetter.allowEmptyTable(salesFormLetter.initAllowEmptyTable(true));
            salesFormLetter.initializeFromCallerRecord(_cachedArgs, _record, _dataSourceRecordsPacked);
            salesFormLetter.multiForm(true);
        }

        boolean enableUpdateNowField = false;

        if (_callerForm)
        {
            if (!salesFormLetter.initializeFromCallerForm(_cachedArgs))
            {
                enableUpdateNowField = true;
            }
        }
        else
        {
            enableUpdateNowField = salesFormLetter.canEnableUpdateNowField();
        }

        if (enableUpdateNowField)
        {
            salesFormLetter.enableUpdateNowField(true);
            salesFormLetter.lockSalesUpdateField(false);
        }

        salesFormLetter.prePromptInit();
        salesFormLetter.forceSaveLast();

        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnableUpdateNowField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>UpdateNow</c> field can be enabled.
    /// </summary>
    /// <returns>true if the field can be enabled; otherwise, false.</returns>    
    [Replaceable]
    protected boolean canEnableUpdateNowField()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainOnServer</Name>
				<Source><![CDATA[
    [SysObsolete('Use constructAndInitialize() instead', false, 30\06\2018)]
    protected static container mainOnServer(
        SalesFormLetterCachedArguments  _cachedArgs,
        Common                          _record,
        Object                          _callerForm,
        container                       _dataSourceRecordsPacked)
    {
        SalesFormLetter salesFormLetter = SalesFormLetter::constructAndInitialize(_cachedArgs, _record, _callerForm, _dataSourceRecordsPacked);
        return salesFormLetter.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesFormLetter</c> instance using the caller record.
    /// </summary>
    /// <param name = "_cachedArgs">The cached arguments.</param>
    /// <param name = "_record">The caller record.</param>
    /// <param name = "_dataSourceRecordsPacked">The packed datasource record.</param>
    protected void initializeFromCallerRecord(
        SalesFormLetterCachedArguments  _cachedArgs,
        Common                          _record,
        container                       _dataSourceRecordsPacked)
    {
        switch (_record.TableId)
        {
            case tableNum(SalesTable):
                SalesTable salesTable = _record as SalesTable;
                this.initParmSalesTable(salesTable);
                this.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);

                if (_cachedArgs.callerMenuItem == menuItemActionStr(SalesFormLetter_Confirm))
                {
                    this.specQty(SalesUpdate::All);
                    this.proforma(false);
                    this.printCODLabel(false);
                    this.printShippingLabel(false);
                    this.parmCheckCreditMax(CustParameters::find().CreditMaxCheck);
                    this.sumBy(AccountOrder::None);
                    this.batchInfo().parmBatchExecute(NoYes::No);
                    this.reArrangeNow(false);
                }

                break;

            case tableNum(CustPackingSlipJour):
            case tableNum(CustInvoiceJour):
                this.parmCallerTable(_record);
                this.initBasedOnMenuItem(_cachedArgs.callerMenuItem);
                this.reArrangeNow(false);
                break;

            case tableNum(SalesLine):
                SalesLine salesLine = _record as SalesLine;
                this.initParmSalesTable(salesLine.salesTable());
                this.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                this.createFromLines(true);
                this.parmLineRecords(_dataSourceRecordsPacked);
                break;

            case tableNum(WMSShipment):
                WMSShipment wmsShipment = _record as WMSShipment;
                this.parmShipmentId(wmsShipment.ShipmentId);
                this.createFromLines(true);

                Set wmsShipmentIdSet = new Set(Types::String);
                MapEnumerator mapEnumerator = Map::create(_dataSourceRecordsPacked).getEnumerator();
                while (mapEnumerator.moveNext())
                {
                    wmsShipment = mapEnumerator.currentValue();
                    wmsShipmentIdSet.add(wmsShipment.ShipmentId);
                }
                this.parmLineIdSet(wmsShipmentIdSet.pack());
                this.parmLineRecords(_dataSourceRecordsPacked);
                this.lockSalesUpdateField(true);
                break;

            case tableNum(SalesParmTable):
                salesParmTable = _record as SalesParmTable;
                this.parmCreateFromHistory(true);
                this.parmHistoryRecords(_dataSourceRecordsPacked);

                if (_cachedArgs.callerFormName == formStr(SalesPostingHistory))
                {
                    this.parmHistoryReadOnly(salesParmTable.ParmJobStatus != ParmJobStatus::ContainErrors);
                }
                break;

            case tableNum(WMSJournalTable):
                this.createFromLines(true);
                this.parmLineRecords(_dataSourceRecordsPacked);
                this.lockSalesUpdateField(true);
                break;
                // <GIN>
            case tableNum(CustomsExportOrderTable_IN):
                if (TaxParameters::isCustomsEnable_IN())
                {
                    customsExportOrderTable = _record as CustomsExportOrderTable_IN;
                    this.initParmCustomsExportOrderTable_IN(customsExportOrderTable);
                    this.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                }
                break;

                // </GIN>
            case tableNum(WHSLoadTable):
                WHSLoadTable whsLoadTable = _record as WHSLoadTable;
                this.parmWHSLoadId(whsLoadTable.LoadId);
                this.parmCallerTable(_record);
                this.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);

                if (BrazilParameters::isEnabled() && (this.documentStatus() == DocumentStatus::DeliverySlip_BR ||
                                                          this.documentStatus() == DocumentStatus::Invoice))
                {
                    this.createFromLines(false);
                }
                else
                {
                    this.createFromLines(true);
                }

                if (_dataSourceRecordsPacked != conNull())
                {
                    var loadIdSet = new Set(Types::String);
                    mapEnumerator = Map::create(_dataSourceRecordsPacked).getEnumerator();
                    while (mapEnumerator.moveNext())
                    {
                        whsLoadTable = mapEnumerator.currentValue();
                        loadIdSet.add(whsLoadTable.LoadId);
                    }
                    this.parmLineIdSet(loadIdSet.pack());
                }
                this.lockSalesUpdateField(true);
                break;

            case tableNum(WHSTransportLoad):
                WHSTransportLoad transportLoad = _record as WHSTransportLoad;
                this.parmIsPostingTransportLoads(true);
                this.parmCallerTable(_record);
                this.parmDataSourceRecordsPacked(_dataSourceRecordsPacked);
                this.createFromLines(true);
                var transportLoadRecIdSet = new Set(Types::Int64);

                if (_dataSourceRecordsPacked != conNull())
                {
                    mapEnumerator = Map::create(_dataSourceRecordsPacked).getEnumerator();

                    while (mapEnumerator.moveNext())
                    {
                        transportLoad = mapEnumerator.currentValue();
                        transportLoadRecIdSet.add(transportLoad.RecId);
                    }
                }
                else
                {
                    transportLoadRecIdSet.add(transportLoad.RecId);
                }

                this.parmLineIdSet(transportLoadRecIdSet.pack());
                this.lockSalesUpdateField(true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesFormLetter</c> using the cached arguments.
    /// </summary>
    /// <param name = "_cachedArgs">The cached arguments.</param>
    /// <returns>true if the sales form letter is initialized; otherwise, false.</returns>
    protected boolean initializeFromCallerForm(SalesFormLetterCachedArguments _cachedArgs)
    {
        boolean promptUser = !_cachedArgs.parmSkipPrompt;

        switch (_cachedArgs.callerFormName)
        {
            case formStr(SalesTable) :
            case formStr(SalesTableListPage) :
                if (_cachedArgs.isProforma)
                {
                    this.proforma(true);
                    this.enableUpdateNowField(false);
                }
                else
                {
                    this.proforma(false);
                    this.enableUpdateNowField(true);
                }

                return true;

            case formStr(WMSShipment) :
                this.resetProformaUponPhysicalUpdatable();
                this.enableUpdateNowField(!this.proforma());

                if (!promptUser)
                {
                    this.printFormLetter(true);
                }

                this.parmShowDialog(promptUser);
                return true;

            case formStr(SalesReleaseOrderPicking) :
                // The updateNow field is not enabled and it is not proforma.
                this.proforma(false);
                this.lockSalesUpdateField(true);
                this.specQty(SalesUpdate::DeliverNow);
                return true;

            case formStr(ReturnTable) :
            case formStr(WMSJournalTable) :
                // The updateNow field is not enabled and it is not proforma.
                this.proforma(false);
                this.lockSalesUpdateField(!this.isVersioningCorrectionOrCancel());
                this.specQty(SalesUpdate::All);
                return true;

            case formStr(WHSOutboundLoadPlanningWorkbench) :
                if (!SalesFormLetterWHSOutboundLoadPlanningWorkbenchLockSalesUpdateFlight::instance().isEnabled())
                {
                    break;
                }
            case classStr(WhsShipConfirm) :
            case formStr(WHSLoadPlanningListPage) :
            case formStr(WHSLoadPlanningWorkbench) :
            case formStr(WHSLoadTable) :
            case formStr(WHSLoadTableInvoicePost_BR) :
                this.resetProformaUponPhysicalUpdatable();
                this.enableUpdateNowField(false);

                if (!promptUser)
                {
                    this.printFormLetter(false);
                }

                this.parmShowDialog(promptUser);
                this.parmValidateLoadStatus(true);
                return true;

            case formStr(WHSContainerTable) :
            case formStr(WHSTransportLoad)  :
                this.resetProformaUponPhysicalUpdatable();
                this.enableUpdateNowField(false);

                if (!promptUser)
                {
                    this.printFormLetter(false);
                }

                this.parmShowDialog(promptUser);
                this.parmValidateLoadStatus(false);
                return true;

            case formStr(CustPackingslipJournal) :
            case formStr(CustInvoiceJournal)  :
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSplitParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits out parm lines into multiple <c>alesParmTable</c> records
    ///     and <c>SalesParmLine</c> records where appropriate, such as for
    ///     ship alone items.
    /// </summary>
    /// <param name="_salesFormLetterContractPacked">
    ///     Container of the SalesFormLetter.
    /// </param>
    /// <returns>
    ///     true if there are no problems and updating should continue;
    ///     otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Always return true here in the super class, where by default, no splitting
    ///     will actually be done.
    ///
    ///     Note: this must be done after showing the user the SalesEditLines form.
    ///     This is not ideal because the user will not be able to see a preview of the
    ///     final splits WYSIWYG style.  However, it is being done here because it is
    ///     almost impossible to keep track of, if the user is allowed to manipulate the
    ///     records in the preview mode.
    /// </remarks>
    static boolean mcrSplitParmData(container _salesFormLetterContractPacked)
    {
        SalesFormletterParmData salesFormletterParmData = SalesFormletterParmData::newChooseLines(_salesFormLetterContractPacked, true);

        //Run the split data in the data classes
        salesFormletterParmData.mcrSplitData();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchFormLetter_Invoice</Name>
				<Source><![CDATA[
    static SalesFormLetter  newFromPurchFormLetter_Invoice(str              _journalLines,
                                                           DocumentStatus   _documentStatus)
    {
        List                list = new List(Types::Record);

        SalesFormLetter salesFormLetter = SalesFormLetter::construct(_documentStatus);
        salesFormLetter.getLast();
        salesFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesFormLetter.createFromLines(true);
        salesFormLetter.multiForm(true);
        salesFormLetter.specQty(SalesUpdate::DeliverNow);

        if (_journalLines)
        {
            List journalLinesList = List::create(SysOperationHelper::base64Decode(_journalLines));
            ListEnumerator journalLinesListEnumerator = journalLinesList.getEnumerator();
            while (journalLinesListEnumerator.moveNext())
            {
                VendInvoiceTrans vendInvoiceTrans = journalLinesListEnumerator.current();
                list.addEnd(vendInvoiceTrans);
            }
            salesFormLetter.parmLineList(list.pack());
        }

        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchFormLetter_PackingSlip</Name>
				<Source><![CDATA[
    static SalesFormLetter  newFromPurchFormLetter_PackingSlip(str              _journalLines,
                                                               DocumentStatus   _documentStatus)
    {
        List                    list = new List(Types::Record);

        SalesFormLetter salesFormLetter = SalesFormLetter::construct(_documentStatus);
        salesFormLetter.getLast();
        salesFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesFormLetter.createFromLines(true);
        salesFormLetter.multiForm(true);
        salesFormLetter.specQty(SalesUpdate::DeliverNow);

        if (_journalLines)
        {
            List journalLinesList = List::create(SysOperationHelper::base64Decode(_journalLines));
            ListEnumerator journalLinesListEnumerator = journalLinesList.getEnumerator();
            while (journalLinesListEnumerator.moveNext())
            {
                VendPackingSlipTrans vendPackingSlipTrans = journalLinesListEnumerator.current();
                list.addEnd(vendPackingSlipTrans);
            }
            salesFormLetter.parmLineList(list.pack());
        }

        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGoodsInRoute_RU</Name>
				<Source><![CDATA[
    static SalesFormLetter  newGoodsInRoute_RU(DocumentStatus   _documentStatus,
                                               TransDate        _transDate,
                                               NoYes            _creditRemaining,
                                               RecordSortedList _custInvoiceTransList)
    {
        List                list = new List(Types::Record);
        CustInvoiceTrans    custInvoiceTrans;
        boolean             nextRec;

        SalesFormLetter salesFormLetter = SalesFormLetter::construct(_documentStatus);
        ParmId parmId = salesFormLetter.parmId();

        salesFormLetter.getLast();
        salesFormLetter.parmId(parmId);
        salesFormLetter.transDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesFormLetter.createFromLines(true);
        salesFormLetter.multiForm(true);
        salesFormLetter.specQty(SalesUpdate::DeliverNow);
        salesFormLetter.creditRemaining(_creditRemaining);

        RecordSortedList rsl = _custInvoiceTransList;
        if (rsl)
        {
            for (nextRec = rsl.first(custInvoiceTrans); nextRec; nextRec = rsl.next(custInvoiceTrans))
            {
                list.addEnd(custInvoiceTrans);
            }
            salesFormLetter.parmLineList(list.pack());
        }

        return salesFormLetter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posFiscalDocType_PL</Name>
				<Source><![CDATA[
    public static int posFiscalDocType_PL()
    {
        return 17;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInventOwnerIdRange_RU</Name>
				<Source><![CDATA[
    static boolean useInventOwnerIdRange_RU(NoYes           _splitInventOwnerId,
                                            DocumentStatus  _documentStatus,
                                            SalesLine       _salesLine)
    {
        InventDim inventDim = _salesLine.inventDim();
        return _splitInventOwnerId && inventDim.InventProfileId_RU && inventDim.inventProfile_RU().splitDocumentByInventOwnerId(_documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckCreditMax</Name>
				<Source><![CDATA[
    public TypeOfCreditmaxCheck parmCheckCreditMax(TypeOfCreditmaxCheck _checkCreditMax = checkCreditMax)
    {
        checkCreditMax = _checkCreditMax;
        return checkCreditMax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferredJournalPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting is a deffered posting.
    /// </summary>
    /// <returns>
    /// true if the posting is deferred, otherwise; false.
    /// </returns>
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean isDeferredJournalPost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustResetVersioningUpdateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the versioning update type must be reset.
    /// </summary>
    /// <returns>
    /// true if the versioning update type must be reset, otherwise; false.
    /// </returns>
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean mustResetVersioningUpdateType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVersioningUpdateTypePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the version update type.
    /// </summary>
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected void setVersioningUpdateTypePost()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return classStr(SalesFormLetter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the fix issues link should be shown.
    /// </summary>
    /// <returns>true if the fix issues link should be shown, otherwise; false.</returns>
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        return SalesFormLetterErrorMessageHelpScopeFlight::instance().isEnabled()
            && salesFormLetterContract
            && salesFormLetterContract.parmCallerMenuItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status and order stopped flag of the passed <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record for which this methods updates status and stopped order flag.
    /// </param>
    internal void setOrderOnHold(SalesTable _salesTable)
    {
        if (_salesTable)
        {
            SalesTable salesTableLocal;

            ttsbegin;
            update_recordset salesTableLocal
                setting McrOrderStopped = NoYes::Yes
                where salesTableLocal.SalesId == _salesTable.SalesId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentAuthorizationDeclined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given sales order has at least one declined credit card transaction when secondary authorization features are enabled.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    internal boolean isPaymentAuthorizationDeclined(SalesTable _salesTable)
    {
        boolean arePrerequisitesNotMet = _salesTable.RecId == 0
            || _salesTable.McrOrderStopped
            || !FeatureStateProvider::isFeatureEnabled(RetailPaymentsAdvancedDeclinedAuthorizationsFeature::instance())
            || !FeatureStateProvider::isFeatureEnabled(RetailPaymentsAdvancedDeclinedAuthorizationsDuringPickAndPackFeature::instance());
        if (arePrerequisitesNotMet)
        {
            return false;
        }
        
        MCRCustPaymTable mcrCustPaymTable = MCRCustPaymTable::findAllByRefRecIDRefTableID(_salesTable.RecId, _salesTable.TableId);

        boolean atLeastOneDeclinedCreditCardAuthTransFound = false;
        while (mcrCustPaymTable)
        {
            // other payment methods, such as "On Account", "Cash" or "Check" do not have a corresponding record in CreditCardAuthTrans, and cannot fail
            if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard || mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard)
            {
                CreditCardAuthTrans latestCardAuthorization = CreditCardAuthTrans::findLatestAuthorization(mcrCustPaymTable.RecId);
                if (latestCardAuthorization)
                {
                    atLeastOneDeclinedCreditCardAuthTransFound = atLeastOneDeclinedCreditCardAuthTransFound
                        || latestCardAuthorization.ProcessorStatus == CreditCardProcessorStatus::Declined;
                }
            }
            next mcrCustPaymTable;
        }

        return atLeastOneDeclinedCreditCardAuthTransFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>