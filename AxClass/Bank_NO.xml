<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Bank_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class Bank_NO extends Bank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBankAccount</Name>
				<Source><![CDATA[
    public boolean checkBankAccount(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountNum</Name>
				<Source><![CDATA[
    public boolean checkBankAccountNum(BankAccount _bankAccount)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00013, funcName());

        boolean ret = true;

        if (!_bankAccount)
        {
            return true;
        }

        str testStr = strKeep(_bankAccount, '0123456789');

        switch (strLen(testStr))
        {
            case 11: //Bank and new postbank accounts
            {
                if (substr(testStr, 1, 1) == '0') //Postbank accounts
                {
                    if ((subStr(testStr, 1, 4) >= '0500' && subStr(testStr, 1, 4) <= '0519')       //0500 xx xxxxx - 0519 xx xxxxx
                        || (subStr(testStr, 1, 4) >= '0523' && subStr(testStr, 1, 4) <= '0524')    //0523 xx xxxxx - 0524 xx xxxxx
                        || (subStr(testStr, 1, 4) >= '0544' && subStr(testStr, 1, 4) <= '0599')    //0544 xx xxxxx - 0599 xx xxxxx
                        || (subStr(testStr, 1, 4) >= '0810' && subStr(testStr, 1, 4) <= '0812')    //0810 xx xxxxx - 0812 xx xxxxx
                        || (subStr(testStr, 1, 4) >= '0851' && subStr(testStr, 1, 4) <= '0899'))   //0851 xx xxxxx - 0899 xx xxxxx
                    {
                        //Not valid Postbank accounts for electronic payment
                        return checkFailed("@SYS58328");
                    }
                    else
                    {
                        ret = this.checkMod11(testStr);
                        break;
                    }
                }
                else
                {
                    ret = this.checkMod11(testStr);
                    break;
                }
            }
            case 7: //"Old" postbank accounts
            {
                ret = this.checkMod10(testStr);
                break;
            }
            default:
                return checkFailed("@SYS58328");
        }

        if (!ret)
        {
            ret = checkFailed("@SYS58328");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMod10</Name>
				<Source><![CDATA[
    protected boolean checkMod10(str _testStr)
    {
        boolean ret = true;

        if (_testStr)
        {
            str checkStr = subStr(_testStr, strLen(_testStr), 1);
            ret = (Bank_NO::mod10(subStr(_testStr, 1, strLen(_testStr) - 1)) == checkStr);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMod11</Name>
				<Source><![CDATA[
    protected boolean checkMod11(str _testStr)
    {
        boolean ret = true;

        if (_testStr)
        {
            str checkStr = substr(_testStr,strlen(_testStr),1);
            ret = (Bank_NO::mod11(subStr(_testStr, 1, strLen(_testStr) - 1)) == checkStr);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymId</Name>
				<Source><![CDATA[
    public boolean checkPaymId(PaymId _paymId)
    {
        boolean ret = true;

        if (_paymId && !VendParameters::find().DisablePaymentIDValidation_CH)
        {
            if (!this.checkMod10(_paymId))  //first checking with Mod10
            {
                if (!this.checkMod11(_paymId))  //next checking with Mod11
                {
                    ret = checkFailed("@SYS63350");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(BankAccountMap _bankAccountMap)
    {
        boolean ret = true;

        if (_bankAccountMap.AccountNum && _bankAccountMap.fieldAccessRight(fieldstr(BankAccountMap, AccountNum)) != AccessRight::NoAccess)
        {
            ret = this.checkBankAccountNum(_bankAccountMap.AccountNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentIdCustAccount</Name>
				<Source><![CDATA[
    public static CustAccount getPaymentIdCustAccount(PaymId _kid)
    {
        int invLen = strLen(int2Str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))); //larges length of invoice number rules the positioning of custnumber and invoice number
        int kidLen = 15; //15+1 = 16 total inclusive checknumber
        str 15 kid = subStr(_kid, 1, kidLen); //without checknumber
        CustAccount custAccount;

        if (BankCustPaymIdTable::findOnLength(_kid))
        {
            custAccount = BankCustPaymIdTable::getAccount(_kid);
        }
        else
        {
            custAccount = int2str(str2Int(subStr(kid, 1, kidLen - invLen)));
        }

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentIdInvoiceId</Name>
				<Source><![CDATA[
    public static InvoiceId getPaymentIdInvoiceId(PaymId _kid)
    {
        int invLen = strlen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))); //larges length of invoice number rules the positioning of custnumber and invoice number
        int kidLen = 15; //15+1 = 16 total inclusive checknumber
        str 15 kid = substr(_kid, 1, kidLen); //without checknumber
        InvoiceId invoiceId;

        if (BankCustPaymIdTable::findOnLength(_kid))
        {
            invoiceId = BankCustPaymIdTable::getInvoice(_kid);
        }
        else
        {
            invoiceId = int2str(str2Int(subStr(kid, kidLen - invLen + 1, kidLen)));
        }

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mod10</Name>
				<Source><![CDATA[
    protected static str mod10(str _testStr) //DAM.gpa + 000630 calculates and returns Modulus 10 checknumber
    {
        int strPos = 1;
        int numerals = 0;
        int ctrlsum = 0;

        str control;
        str testStr = _testStr;

        testStr = strKeep(testStr, '0123456789');

        testStr = strRep('0', 25 - strLen(testStr)) + testStr ;  //max 25 caracters in Norway and the multipliers (see under)
                                                                 //right moust caracter must be 2
        strPos = strLen(testStr);  //=25

        while (strPos > 0)
        {
            //check multiplier ....1,2,1,2,1,2,1,2,1,2  <-- the right caracter must be 2
            //calculating from right to left

            numerals = str2Int(subStr(testStr, strPos, 1)) * (strPos mod 2 + 1);
            ctrlSum += numerals div 10 + numerals mod 10;
            strPos--;
        }

        if (!control)
        {
            control = num2Str((10 - (ctrlSum mod 10)), 0, 0, 0, 0);
            if (str2Int(control) == 10)  //if control == 10
            {
                control = '0';
            }
        }
        return control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mod11</Name>
				<Source><![CDATA[
    protected static str mod11(str _testStr) //DAM.gpa + 000630 calculates and returns Modulus 11 checknumber
    {
        int strPos = 0;
        int vector = 2;
        int sum_ = 0;
        int numerals;

        str control;
        str testStr = _testStr;

        testStr = strKeep(testStr, '0123456789');

        testStr = strRep('0', 25 - strLen(testStr)) + testStr ;    //max 25 caracters in Norway and the multipliers (see under)
                                                                //right moust caracter must be 2

        strPos  = strLen(testStr);  //=25

        //Print testStr;

        while (strpos > 0)
        {
            //check multiplier vector = ....5,4,3,2,7,6,5,4,3,2  <-- the right caracter must be 2
            //calculating from right to left
            numerals = str2Int(subStr(testStr, strpos, 1)) * vector;
            sum_ += numerals;

            strPos--;
            vector++;

            if (vector > 7)
            {
                vector = 2;
            }
        }

        if (11 - sum_ mod 11 == 11)  //sum_ MOD 11 = 0
        {
            control = '0';
        }
        else
        {
            if (11 - sum_ mod 11 == 10)  //sum_ MOD 11 = 1
            {
                control = '-';
            }
            else
            {
                control = num2str(11 - sum_ mod 11,0,0,0,0);
            }
        }

        return control;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>