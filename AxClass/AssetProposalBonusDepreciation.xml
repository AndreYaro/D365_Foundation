<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalBonusDepreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the asset proposal for bonus depreciation.
/// </summary>
class AssetProposalBonusDepreciation extends AssetProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    protected AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::BonusDepreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query query = new Query(querystr(AssetProposal));

        super();

        query.name("@SYS95700");
        query.dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook, Depreciation)).value(queryValue(NoYes::Yes));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        AssetJournal            assetJournal;
        AssetBook               assetBook;
        AssetBonusMethod        assetBonusMethod;
        AssetBonusMethod        assetBonusMethodReportingCurrency;
        AmountCur               amountCur;
        TransDate               transDate;
        LedgerJournalTransTxt   ledgerJournalTransTxt;
        TransactionTxt          bonusTansactionTxt;

        this.createAndLockJournalForBatchProcessing();

        assetJournal = new AssetJournal(journalNum,this.assetTransType());

        queryRun.query().dataSourceTable(tablenum(AssetBook)).addRange(fieldnum(AssetBook, Status)).value(queryValue(AssetStatus::Open));

        boolean hasSameAccountingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
        boolean executeReportingCurrencyLogic;
        AssetAmountReportingCurrency amountReportingCurrency;
    
        if (!hasSameAccountingAndReportingCurrency)
        {
            executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
        }

		ttsbegin;        

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetBook)))
            {
                assetBook = queryRun.get(tablenum(AssetBook));

                AssetCacheManager::removeCacheAssetTrans(assetBook.AssetId, assetBook.BookId);

                assetBonusMethod = AssetBonusMethod::newAssetBook(assetBook);
                assetBonusMethod.run();

                if (executeReportingCurrencyLogic)
                {
                    assetBonusMethodReportingCurrency = AssetBonusMethod::newAssetBook(assetBook);
                    assetBonusMethodReportingCurrency.parmIsReportingCurrencyDepreciation(true);
                    assetBonusMethodReportingCurrency.run();
                }
                
                while (assetBonusMethod.next())
                {
                    amountCur = -assetBonusMethod.getNextBonusAmount();

                    if (executeReportingCurrencyLogic && assetBonusMethodReportingCurrency.next())
                    {
                        amountReportingCurrency = -assetBonusMethodReportingCurrency.getNextBonusAmount();
                    }
                    else if (hasSameAccountingAndReportingCurrency)
                    {
                        amountReportingCurrency = amountCur;
                    }

                    ledgerJournalTransTxt =  assetBonusMethod.getNextBonusName();
                    transDate = assetBonusMethod.parmBonusDate();                    

                    assetJournal.parmReportingCurrencyAmount(amountReportingCurrency);
                    assetJournal.createTrans(amountCur, assetBook, transDate,
                        '', 0, 0, false, 0, 0, dateNull(), false, false, AssetDocumentType_JP::None,
                        0, null, null, ledgerJournalTransTxt);
                }
            }
        }

        ttscommit;

        this.updateJournalTotals();
        this.unlockJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS95700";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>