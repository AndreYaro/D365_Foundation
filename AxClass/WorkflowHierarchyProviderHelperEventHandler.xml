<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowHierarchyProviderHelperEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WorkflowHierarchyProviderHelperEventHandler
{
    const str Workflow_Limit = 'Limit';
    const str Workflow_LimitApproval = 'LimitApproval';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAdditionalFieldsToDataSourceDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowHierarchyProviderHelper), delegatestr(WorkflowHierarchyProviderHelper, addAdditionalFieldsToDataSourceDelegate))]
    static void addAdditionalFieldsToDataSourceDelegate(ExpressionDataSource _datasource)
    {
        HRPLimitDocument limitDocument;

        while select limitDocument
        {
            _datasource.addField(ExpressionField::newFieldDefinition(Workflow_Limit + enum2Symbol(enumNum(SourceDocumentRelationType), limitDocument.SourceDocumentRelationType),
                                                                        extendedTypeStr(AmountCur),
                                                                        strFmt("@SYS121770", enum2str(HRPLimitType::Spending),
                                                                        enum2str(limitDocument.SourceDocumentRelationType))));

            _datasource.addField(ExpressionField::newFieldDefinition(Workflow_LimitApproval + enum2Symbol(enumNum(SourceDocumentRelationType), limitDocument.SourceDocumentRelationType),
                                                                        extendedTypeStr(AmountCur),
                                                                        strFmt("@SYS121770", enum2str(HRPLimitType::Approval),
                                                                        enum2str(limitDocument.SourceDocumentRelationType))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditonalSupportedDataTypesDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowHierarchyProviderHelper), delegatestr(WorkflowHierarchyProviderHelper, addAdditonalSupportedDataTypesDelegate))]
    static void addAdditonalSupportedDataTypesDelegate(Set _supportedDataTypes)
    {
        _supportedDataTypes.add(extendedTypeStr(TSResourceRecId));
        _supportedDataTypes.add(extendedTypeStr(PurchRequester));
        _supportedDataTypes.add(extendedTypeStr(PurchPlacer));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonnelNumberIdDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowHierarchyProviderHelper), delegatestr(WorkflowHierarchyProviderHelper, getPersonnelNumberIdDelegate))]
    static void getPersonnelNumberIdDelegate(WorkflowContext _workflowContext, WorkflowHierarchyLevel _level, EventHandlerResult eventHandlerResult)
    {
        // Ensures that expense report workflow using managerial hierarchy assigns a user beyond the first level in the hierarchy
        if (_workflowContext.parmTableId() == tableNum(TrvExpTable) && _level == 0)
        {
            TrvExpTable trvExpTable = TrvExpTable::findRecId(_workflowContext.parmRecId());
            eventHandlerResult.result(HcmWorker::find(trvExpTable.CreatingWorker).PersonnelNumber);
        }
        else if (_workflowContext.parmTableId() == tableNum(TrvRequisitionTable) && _level == 0)
        {
            TrvRequisitionTable requisitionTable = TrvRequisitionTable::find(_workflowContext.parmRecId());
            eventHandlerResult.result(HcmWorker::find(requisitionTable.CreatingWorker).PersonnelNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonnelNumberIdBySysDictTypeDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowHierarchyProviderHelper), delegatestr(WorkflowHierarchyProviderHelper, getPersonnelNumberIdBySysDictTypeDelegate))]
    static void getPersonnelNumberIdBySysDictTypeDelegate(SysDictType _dictType, anytype _value, EventHandlerResult eventHandlerResult)
    {
        switch (_dictType.id())
        {
            case extendedTypeNum(TSResourceRecId):
                eventHandlerResult.result(HcmWorker::find(ResourceFacade::getWorker(_value)).PersonnelNumber);
                break;

            case extendedTypeNum(PurchRequester):
                eventHandlerResult.result(HcmWorker::find(_value).PersonnelNumber);
                break;

            case extendedTypeNum(PurchPlacer):
                eventHandlerResult.result(HcmWorker::find(_value).PersonnelNumber);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourceFieldsDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowHierarchyProviderHelper), delegatestr(WorkflowHierarchyProviderHelper, addDataSourceFieldsDelegate))]
    static void addDataSourceFieldsDelegate(ExpressionDataSource _nodeDataSource, WorkflowContext _workflowContext, HcmWorker _hcmWorker, HcmPositionRecId _positionRecId)
    {
        WorkflowHierarchyProviderHelperEventHandlerParameters parameters = WorkflowHierarchyProviderHelperEventHandler::createParametersToAddDataSourceFieldsDelegate(_nodeDataSource, _workflowContext, _hcmWorker, _positionRecId);

        WorkflowHierarchyProviderHelperEventHandler::addDataSourceFieldsDelegateFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParametersToAddDataSourceFieldsDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the contract to add delegate to the datasource fields.
    /// </summary>
    /// <param name = "_nodeDataSource">
    ///     An instance of the <c>ExpressionDataSource</c> class.
    /// </param>
    /// <param name = "_workflowContext">
    ///     An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name = "_hcmWorker">
    ///     An instance of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name = "_positionRecId">
    ///     The position Id of the worker.
    /// </param>
    /// <returns>
    ///    A <c>WorkflowHierarchyProviderHelperEventHandlerParameters</c> instance.
    /// </returns>
    [Hookable(true)]
    protected static WorkflowHierarchyProviderHelperEventHandlerParameters createParametersToAddDataSourceFieldsDelegate(
        ExpressionDataSource _nodeDataSource,
        WorkflowContext _workflowContext,
        HcmWorker _hcmWorker,
        HcmPositionRecId _positionRecId)
    {
        WorkflowHierarchyProviderHelperEventHandlerParameters parameters = WorkflowHierarchyProviderHelperEventHandlerParameters::construct();
        parameters.NodeDataSource = _nodeDataSource;
        parameters.WorkflowContext = _workflowContext;
        parameters.HcmWorker = _hcmWorker;
        parameters.PositionRecId = _positionRecId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataSourceFieldsDelegateFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the parameters based on the instance of <c>WorkflowHierarchyProviderHelperEventHandlerParameters</c>.
    /// </summary>
    /// <param name="_parameters">
    ///     The <c>WorkflowHierarchyProviderHelperEventHandlerParameters</c> instance.
    /// </param>
    [Hookable(true)]
    protected static void addDataSourceFieldsDelegateFromParameters(WorkflowHierarchyProviderHelperEventHandlerParameters _parameters)
    {
        // lookups for workflow hierarchy evaluations

        // Check if feature is enabled to allow non-primary positions to be used
        boolean useHierarchyPosition = SysWorkflowParameters::useHierarchyPositionEnabled();
        
        HcmPosition positionTable;

        const str ParentPositionIdField = 'ParentPositionId';

        // Once past the first level we attach the parent position id to _datasource
        if (_parameters.NodeDataSource.parmFields().exists(ParentPositionIdField) && useHierarchyPosition)
        {
            HcmPositionId parentPos = _parameters.NodeDataSource.parmFields().lookup(ParentPositionIdField).parmValue();
                
            positionTable = HcmPosition::findByPosition(parentPos);
        }
        else
        {
            positionTable = HcmPosition::find(_parameters.PositionRecId);
        }

        switch (_parameters.WorkflowContext.parmTableId())
        {
            case tableNum(PurchReqTable) :
            case tableNum(PurchReqLine)  :
                WorkflowHierarchyProviderHelperEventHandler::loadLimitsWorkflowContextWithChangeCompany(_parameters.NodeDataSource, _parameters.WorkflowContext, _parameters.HcmWorker, positionTable.PositionId);
                break;

            case tableNum(TrvExpTable) :
            case tableNum(TrvExpTrans)  :
            case tableNum(TrvRequisitionTable) :
                changecompany(TrvWorkflowUtilities::workflowContextDataAreaId(_parameters.WorkflowContext.parmTableId(), _parameters.WorkflowContext.parmRecId()))
                {
                    WorkflowHierarchyProviderHelperEventHandler::loadLimitsWorkflowContext(_parameters.NodeDataSource, _parameters.WorkflowContext, _parameters.HcmWorker, positionTable.PositionId);
                }
                break;

            default:
                WorkflowHierarchyProviderHelperEventHandler::loadLimitsWorkflowContext(_parameters.NodeDataSource, _parameters.WorkflowContext, _parameters.HcmWorker, positionTable.PositionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLimitsWorkflowContext</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the limits for a worker as an expression into the <c>_nodeDataSource</c> parameter.
    /// </summary>
    /// <param name = "_nodeDataSource">
    ///     An instance of the <c>ExpressionDataSource</c> class.
    /// </param>
    /// <param name = "_workflowContext">
    ///     An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name = "_hcmWorker">
    ///     An instance of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name = "_positionId">
    ///     The position Id of the worker.
    /// </param>
    [Replaceable]
    public static void loadLimitsWorkflowContext(ExpressionDataSource _nodeDataSource, WorkflowContext _workflowContext, HcmWorker _hcmWorker, HcmPositionId _positionId)
    {
        WorkflowHierarchyProviderHelperEventHandler::loadLimits(_nodeDataSource, _hcmWorker, _positionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLimits</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the limits for a worker as an expression into the <c>_nodeDataSource</c> parameter.
    /// </summary>
    /// <param name = "_nodeDataSource">
    ///     An instance of the <c>ExpressionDataSource</c> class.
    /// </param>
    /// <param name = "_hcmWorker">
    ///     An instance of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name = "_positionId">
    ///     The postion ID of the worker.
    /// </param>
    public static void loadLimits(ExpressionDataSource _nodeDataSource, HcmWorker _hcmWorker, HcmPositionId _positionId)
    {
        WorkflowHierarchyProviderHelperEventHandlerParameters parameters = WorkflowHierarchyProviderHelperEventHandler::createLoadLimitsParameters(_nodeDataSource, _hcmWorker, _positionId);

        WorkflowHierarchyProviderHelperEventHandler::loadLimitsFromParameters(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLimitsParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the contract to add the limits for a worker as an expression into the <c>_nodeDataSource</c> parameter.
    /// </summary>
    /// <param name = "_nodeDataSource">
    ///     An instance of the <c>ExpressionDataSource</c> class. 
    /// </param>
    /// <param name = "_hcmWorker">
    ///     An instance of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name = "_positionId">
    ///     The postion ID of the worker.
    /// </param>
    /// <returns>
    ///    A <c>WorkflowHierarchyProviderHelperEventHandlerParameters</c> instance.
    /// </returns>
    [Hookable(true)]
    protected static WorkflowHierarchyProviderHelperEventHandlerParameters createLoadLimitsParameters(ExpressionDataSource _nodeDataSource, HcmWorker _hcmWorker, HcmPositionId _positionId)
    {
        WorkflowHierarchyProviderHelperEventHandlerParameters parameters = WorkflowHierarchyProviderHelperEventHandlerParameters::construct();
        parameters.NodeDataSource = _nodeDataSource;
        parameters.HcmWorker = _hcmWorker;
        parameters.PositionId = _positionId;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLimitsFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an expression field to the expression data source.
    /// </summary>
    /// <param name="_parameters">
    ///     The <c>WorkflowHierarchyProviderHelperEventHandlerParameters</c> instance.
    /// </param>
    [Hookable(true)]
    protected static void loadLimitsFromParameters(WorkflowHierarchyProviderHelperEventHandlerParameters _parameters)
    {
        HRPWorkerLimit                          workerLimit;
        HRPLimitDocument                        limitDocument;
        Amount                                  limitCurrencyValue;
        CurrencyCode                            limitCurrencyCode;
        DictEnum                                hrpLimitType;
        int                                     i;
        ExpressionDataSource                    nodeDataSource;

        nodeDataSource = _parameters.NodeDataSource;

        hrpLimitType = new DictEnum(enumNum(HRPLimitType));
        workerLimit  = new HRPWorkerLimit();

        while select limitDocument
        {
            for (i = 0; i < hrpLimitType.values(); i++ )
            {
                [limitCurrencyValue, limitCurrencyCode] = workerLimit.getWorkerSigningLimit(_parameters.HcmWorker.RecId, limitDocument.SourceDocumentRelationType, hrpLimitType.index2Value(i), _parameters.PositionId);

                WorkflowHierarchyProviderHelperEventHandler::addFieldToNodeDataSource(nodeDataSource, hrpLimitType, i, limitDocument, limitCurrencyValue, limitCurrencyCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldToNodeDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds an expression field to the expression data source.
    /// </summary>
    /// <param name="_nodeDataSource">
    ///     The <c>ExpressionDataSource</c> instance of <c>WorkflowHierarchyProviderHelperEventHandlerParameters</c> class.
    /// </param>
    /// <param name="_hrpLimitType">
    ///     The <c>DictEnum</c> instance.
    /// </param>
    /// <param name="_count">
    ///     The counter for <c>HRPLimitDocument</c>
    /// </param>
    /// <param name="_limitDocument">
    ///     The <c>HRPLimitDocument</c> instance.
    /// </param>
    /// <param name="_limitCurrencyValue">
    ///     The active signing limit amount of the specified worker.
    /// </param>
    /// <param name="_limitCurrencyCode">
    ///     The active signing limit currency code of the specified worker.
    /// </param>
    [Hookable(true)]
    protected static void addFieldToNodeDataSource(ExpressionDataSource _nodeDataSource,
        DictEnum _hrpLimitType,
        int _count,
        HRPLimitDocument _limitDocument,
        Amount _limitCurrencyValue,
        CurrencyCode _limitCurrencyCode)
    {
        if (_hrpLimitType.index2Value(_count) == HRPLimitType::Spending)
        {
            _nodeDataSource.addField(ExpressionField::newFieldValue(Workflow_Limit + enum2Symbol(enumNum(SourceDocumentRelationType), _limitDocument.SourceDocumentRelationType), extendedTypeStr(AmountCur), _limitCurrencyValue, _limitCurrencyCode));
        }
        else if (_hrpLimitType.index2Value(_count) == HRPLimitType::Approval)
        {
            _nodeDataSource.addField(ExpressionField::newFieldValue(Workflow_LimitApproval + enum2Symbol(enumNum(SourceDocumentRelationType), _limitDocument.SourceDocumentRelationType), extendedTypeStr(AmountCur), _limitCurrencyValue, _limitCurrencyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLimitsWorkflowContextWithChangeCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the limits for a worker as an expression into the <c>_nodeDataSource</c> parameter.
    ///     A change company is performed so that data that is saved per company uses the proper context.
    /// </summary>
    /// <param name = "_nodeDataSource">
    ///     An instance of the <c>ExpressionDataSource</c> class.
    /// </param>
    /// <param name = "_workflowContext">
    ///     An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name = "_hcmWorker">
    ///     An instance of the <c>HcmWorker</c> table.
    /// </param>
    /// <param name = "_positionId">
    ///     The postion ID of the worker.
    /// </param>
    [Replaceable]
    public static void loadLimitsWorkflowContextWithChangeCompany(ExpressionDataSource _nodeDataSource, WorkflowContext _workflowContext, HcmWorker _hcmWorker, HcmPositionId _positionId)
    {
        WorkflowHierarchyProviderHelperEventHandler::loadLimitsWithChangeCompany(_nodeDataSource, _hcmWorker, _positionId, _workflowContext.parmTableId(), _workflowContext.parmRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadLimitsWithChangeCompany</Name>
				<Source><![CDATA[
    public static void loadLimitsWithChangeCompany(ExpressionDataSource _nodeDataSource, HcmWorker _hcmWorker, HcmPositionId _positionId, TableId _tableId, RecId _recId)
    {
        changecompany(PurchReqTable::workflowContextDataAreaId(_tableId, _recId))
        {
            WorkflowHierarchyProviderHelperEventHandler::loadLimits(_nodeDataSource, _hcmWorker, _positionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigurableHierarchyDataAreaContextDelegate</Name>
				<Source><![CDATA[
    [SubscribesTo(classstr(WorkflowHierarchyProviderHelper), delegatestr(WorkflowHierarchyProviderHelper, getConfigurableHierarchyDataAreaContextDelegate))]
    public static void getConfigurableHierarchyDataAreaContextDelegate(
        WorkflowContext _workflowContext,
        EventHandlerResult _eventHandlerResult)
    {
        SelectableDataArea dataArea;

        switch (_workflowContext.parmTableId())
        {
            case tableNum(PurchAgreementHeader):
                PurchAgreementHeader agreementHeader = PurchAgreementHeader::find(_workflowContext.parmRecId());

                if (agreementHeader)
                {
                    dataArea = agreementHeader.getLegalEntity().DataArea;
                }
                break;
        }

        if (dataArea != '')
        {
            _eventHandlerResult.result(dataArea);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>