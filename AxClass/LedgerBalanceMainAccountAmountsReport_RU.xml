<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBalanceMainAccountAmountsReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerBalanceMainAccountAmountsReport_RU extends LedgerBalanceMainAccountAmounts
{
    RTax25PeriodIterator    rTax25PeriodIterator;

    ReportingDate_RU        startReportingDate,
                            endReportingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the balance for the main account.
    /// </summary>
    /// <param name="_mainAccount">
    ///    The main account.
    /// </param>
    /// <remarks>
    ///    The main account can have a direct or indirect balance. Use the <c>getAccountingCurrencyBalance
    ///    </c>method and the <c>getTmpData </c>method to access the results.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The main account is null.
    /// </exception>
    public void calculateBalance(MainAccount _mainAccount)
    {
        LedgerBalanceQueryGeneralJourCorrect_RU generalJournalBalanceQuery;
        boolean balance = includeOpeningPeriod;

        if (_mainAccount == null)
        {
            throw error(Error::missingParameter(this));
        }

        super(_mainAccount);

        //Adding reporting transactions
        rTax25PeriodIterator.parmCorrectiveOnly(true);

        //if there are any corrective periods
        if (rTax25PeriodIterator.first(balance))
        {
            generalJournalBalanceQuery = LedgerBalanceQueryGeneralJourCorrect_RU::construct();
            generalJournalBalanceQuery.setJournalizeJournal(journalizeJournal);
            generalJournalBalanceQuery.setBaseQuery(generalJournalBaseQuery);

            balanceQuery = generalJournalBalanceQuery;

            //if balance setting startDate null
            if (balance)
            {
                startAccountingDate = dateNull();
            }

            generalJournalBalanceQuery.setLedgerRecId(ledgerRecId);
            generalJournalBalanceQuery.setAccountingDateRange(startAccountingDate, endAccountingDate);
            generalJournalBalanceQuery.setExcludeValues(excludeDebits, excludeCredits, separateDebitsAndCredits);
            generalJournalBalanceQuery.setIncludeValues(true, false, false, false);
            generalJournalBalanceQuery.setPostingLayerList(postingLayerList);
            generalJournalBalanceQuery.setPostingLayer(postingLayer);
            generalJournalBalanceQuery.setPeriodIterator(rTax25PeriodIterator);

            generalJournalBalanceQuery.calculateReportingDateForMainAccount(_mainAccount);

            accountingCurrencyDebitBalance += generalJournalBalanceQuery.getAccountingCurrencyDebitBalance();
            accountingCurrencyCreditBalance += generalJournalBalanceQuery.getAccountingCurrencyCreditBalance();
            reportingCurrencyBalance += generalJournalBalanceQuery.getReportingCurrencyBalance();
            quantityBalance += generalJournalBalanceQuery.getQuantityBalance();
            tmpAccountSum = generalJournalBalanceQuery.getTmpData(tmpAccountSum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_mainAccount">
    ///    Main account to use in the query.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(MainAccount _mainAccount)
    {
        LedgerBalanceQueryGeneralJourCorrect_RU generalJournalBalanceQuery;

        if (_mainAccount == null)
        {
            throw error(Error::missingParameter(this));
        }

        generalJournalBalanceQuery = LedgerBalanceQueryGeneralJourCorrect_RU::construct();
        generalJournalBalanceQuery.setJournalizeJournal(journalizeJournal);
        generalJournalBalanceQuery.setBaseQuery(generalJournalBaseQuery);
        generalJournalBalanceQuery.setLedgerRecId(ledgerRecId);
        generalJournalBalanceQuery.setAccountingDateRange(startAccountingDate, endAccountingDate);
        generalJournalBalanceQuery.setReportingDateRange(startReportingDate, endReportingDate);
        generalJournalBalanceQuery.setExcludeValues(excludeDebits, excludeCredits, separateDebitsAndCredits);
        generalJournalBalanceQuery.setIncludeValues(true, false, false, false);
        generalJournalBalanceQuery.setPostingLayerList(postingLayerList);
        generalJournalBalanceQuery.setPostingLayer(postingLayer);

        return generalJournalBalanceQuery.correctedPeriodDate(_mainAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the reporting date range.
    /// </summary>
    /// <param name="_startReportingDate">
    /// The start accounting date.
    /// </param>
    /// <param name="_endReportingDate">
    /// The end accounting date.
    /// </param>
    /// <returns>
    /// The start accounting date and end accounting date in a container.
    /// </returns>
    public container parmReportingDateRange(date _startReportingDate = startReportingDate, date _endReportingDate = endReportingDate)
    {
        Debug::assert(_startReportingDate <= _endReportingDate);

        startReportingDate = _startReportingDate;

        if (_endReportingDate == dateNull())
        {
            endReportingDate = dateMax();
        }
        else
        {
            endReportingDate = _endReportingDate;
        }

        return [startReportingDate, endReportingDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRTax25PeriodIterator</Name>
				<Source><![CDATA[
    public RTax25PeriodIterator parmRTax25PeriodIterator(RTax25PeriodIterator _rTax25PeriodIterator = rTax25PeriodIterator)
    {
        rTax25PeriodIterator = _rTax25PeriodIterator;
        return rTax25PeriodIterator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerBalanceMainAccountAmountsReport_RU construct()
    {
        LedgerBalanceMainAccountAmountsReport_RU balance;

        balance = new LedgerBalanceMainAccountAmountsReport_RU();

        return balance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>