<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalTrans_TagController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventJournalTrans_TagController</c> class is the controller class for the
///    <c>InventJournalTrans_Tag</c> report.
/// </summary>
class InventJournalTrans_TagController extends SrsReportRunController implements BatchRetryable
{
    #define.ParameterShowLog('ShowLog')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report contract before the dialog box is shown to the user.
    /// </summary>
    /// <remarks>
    /// Use this method to change the report contract. This method is called only during interactive
    /// scenario before the UI is rendered.For batch scenario, this method is not called because there is
    /// no user interaction and contract values are already saved in batch.Do not instantiate any instance
    /// variables in this code if they are used during the lifetime of controller. These will fail in batch
    /// cases.
    /// </remarks>
    protected void prePromptModifyContract()
    {
        if (!isConfigurationkeyEnabled(configurationKeyNum(EcoResProductVersion)) && InventJournalTransAddInventVersionIdParamFlight::instance().isEnabled())
        {
            SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();

            if (rdlContract.parameterExists(fieldStr(InventDim, InventVersionId)))
            {
                SRSReportParameter parm = rdlContract.getParameter(fieldStr(InventDim, InventVersionId));

                if (parm)
                {
                    parm.setValueTyped(false);
                    parm.hidden(true);
                }
            }
        }

        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        boolean showLog = false;
        showLog = this.parmReportContract().parmRdlContract().getParameter(#ParameterShowLog).getValueTyped();
        this.processReportParameters(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()), showLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables or enables the <c>JournalError</c> table according to the print log parameter.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> parameter object of the report.
    /// </param>
    /// <param name="_showLog">
    ///    A Boolean value that specifies whether to show the error log on the report.
    /// </param>
    /// <remarks>
    ///    Disables or enables the <c>JournalError</c> table.
    /// </remarks>
    protected void processReportParameters(Query _query, boolean _showLog)
    {
        _query.dataSourceTable(tableNum(JournalError)).enabled(_showLog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on the caller.
    /// </summary>
    /// <param name="_query">
    ///    The <c>Query</c> object of the report.
    /// </param>
    /// <remarks>
    ///    Assigns values to the journal ID and journal type range.
    /// </remarks>
    protected  void setRanges(Query _query)
    {
        InventJournalTable   inventJournalTable;

        if (!this.parmArgs())
        {
            throw(error(strFmt("@SYS29104", funcName())));
        }

        if (this.parmArgs().caller())
        {
            if (! this.parmArgs().record().RecId)
            {
                throw error(strFmt("@SYS22338",funcName()));
            }

            if (this.parmArgs().dataset()  == tableNum(InventJournalTable) )
            {
                inventJournalTable  = this.parmArgs().record();

                if (inventJournalTable.JournalType != InventJournalType::TagCounting)
                {
                    throw error(strFmt("@SYS23396",funcName()));
                }
            }
            else
            {
                throw error(strFmt("@SYS23396",funcName()));
            }
        }

        if (inventJournalTable.JournalId)
        {
            QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(InventJournalTrans_Tag));
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventJournalTrans_Tag, JournalId)).value(inventJournalTable.JournalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        InventJournalTrans_TagController  controller = new InventJournalTrans_TagController();
        controller.parmReportName(ssrsReportStr(InventJournalTrans_Tag, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>