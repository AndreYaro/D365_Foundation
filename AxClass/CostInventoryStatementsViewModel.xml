<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostInventoryStatementsViewModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CostInventoryStatementsViewModel</c> is the view model for the <c>CostInventoryStatements</c> form.
/// </summary>
public class CostInventoryStatementsViewModel
{
    CostSelectPeriodState   currentPeriodState;

    CostStatementModel      costInventoryStatementModel;
    FormDataSource          inventoryStatementLines;

    CostStatementModel      costWipStatementModel;
    FormDataSource          wipStatementLines;

    CostReconciliationModel costInventoryReconciliationModel;
    FormDataSource          inventoryReconciliationLines;

    CostReconciliationModel costWipReconciliationModel;
    FormDataSource          wipReconciliationLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view model.
    /// </summary>
    /// <param name = "_inventoryStatementLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the inventory statement.
    /// </param>
    /// <param name = "_wipStatementLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the wip statement.
    /// </param>
    /// <param name = "_inventoryReconciliationLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the inventory reconciliation table.
    /// </param>
    /// <param name = "_wipReconciliationLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the wip reconciliation table.
    /// </param>
    private void initialize(
        FormDataSource  _inventoryStatementLines,
        FormDataSource  _wipStatementLines,
        FormDataSource  _inventoryReconciliationLines,
        FormDataSource  _wipReconciliationLines)
    {
        currentPeriodState = CostSelectPeriodState::construct();

        inventoryStatementLines = _inventoryStatementLines;
        wipStatementLines       = _wipStatementLines;

        costInventoryStatementModel = CostInventoryStatementModel::construct();
        costInventoryStatementModel.parmLines(inventoryStatementLines.cursor());

        costWipStatementModel = CostWIPStatementModel::construct();
        costWipStatementModel.parmLines(wipStatementLines.cursor());

        costInventoryReconciliationModel = CostReconciliationModel::construct(CostReconciliationType::Inventory);
        inventoryReconciliationLines = _inventoryReconciliationLines;

        costWipReconciliationModel = CostReconciliationModel::construct(CostReconciliationType::WIP);
        wipReconciliationLines = _wipReconciliationLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of the <c>CostInventoryStatementsViewModel</c> using provided parameters.
    /// </summary>
    /// <param name = "_inventoryStatementLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the inventory statement.
    /// </param>
    /// <param name = "_wipStatementLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the wip statement.
    /// </param>
    /// <param name = "_inventoryReconciliationLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the inventory reconciliation table.
    /// </param>
    /// <param name = "_wipReconciliationLines">
    /// The instance of the <c>FormDataSource</c> that implements the lines on the wip reconciliation table.
    /// </param>
    /// <returns>
    /// The <c>CostInventoryStatementsViewModel</c> class instance.
    /// </returns>
    public static CostInventoryStatementsViewModel newFromParameters(
        FormDataSource  _inventoryStatementLines,
        FormDataSource  _wipStatementLines,
        FormDataSource  _inventoryReconciliationLines,
        FormDataSource  _wipReconciliationLines)
    {
        var costInventoryStatementsViewModel = new CostInventoryStatementsViewModel();

        costInventoryStatementsViewModel.initialize(
            _inventoryStatementLines,
            _wipStatementLines,
            _inventoryReconciliationLines,
            _wipReconciliationLines);

        return costInventoryStatementsViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceReportIconClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the variance report.
    /// </summary>
    public void varianceReportIconClicked()
    {
        Args args = new Args();
        args.parmObject(currentPeriodState);

        new MenuFunction(menuItemOutputStr(InventCostVariances), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceGraphIconClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the variance chart.
    /// </summary>
    /// <param name = "_reconciliationType">
    /// The type of statement involved.
    /// </param>
    public void varianceGraphIconClicked(CostReconciliationType _reconciliationType)
    {
        Args args = new Args();
        args.parmObject(_reconciliationType == CostReconciliationType::Inventory? costInventoryStatementModel : costWipStatementModel);
        args.parmEnumType(enumNum(CostReconciliationType));
        args.parmEnum(_reconciliationType);

        new MenuFunction(menuItemDisplayStr(CostVarianceChart), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>conflictReportIconClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the conflict report.
    /// </summary>
    /// <param name = "_reconciliationType">
    /// The type of reconciliation involved.
    /// </param>
    public void conflictReportIconClicked(CostReconciliationType _reconciliationType)
    {
        Args args = new Args();
        args.parmObject(currentPeriodState);

        switch (_reconciliationType)
        {
            case CostReconciliationType::Inventory:
                new MenuFunction(menuItemOutputStr(InventLedgerConflict), MenuItemType::Output).run(args);
                break;

            case CostReconciliationType::WIP:
                new MenuFunction(menuItemOutputStr(ProdWIPLedgerConflict), MenuItemType::Output).run(args);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a date range for the statements and the reconciliation tables.
    /// </summary>
    /// <param name = "_fromDate">
    /// The from date.
    /// </param>
    /// <param name = "_toDate">
    /// The to date.
    /// </param>
    public void setDateRange(date _fromDate, date _toDate)
    {
        currentPeriodState.parmFromDate(_fromDate);
        currentPeriodState.parmToDate(_toDate);

        costInventoryStatementModel.setDateRange(_fromDate, _toDate);
        inventoryStatementLines.research();

        costWipStatementModel.setDateRange(_fromDate, _toDate);
        wipStatementLines.research();

        costInventoryReconciliationModel.setDateRange(_fromDate, _toDate);
        inventoryReconciliationLines.cursor().setTmpData(this.createReconciliationLines(costInventoryReconciliationModel));
        inventoryReconciliationLines.research();

        costWipReconciliationModel.setDateRange(_fromDate, _toDate);
        wipReconciliationLines.cursor().setTmpData(this.createReconciliationLines(costWipReconciliationModel));
        wipReconciliationLines.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReconciliationLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the reconciliation lines.
    /// </summary>
    /// <param name = "_costReconciliationModel">
    /// The reconciliation model involved.
    /// </param>
    /// <returns>
    /// A temporary table with the reconciliation lines.
    /// </returns>
    private CostReconciliationTmp createReconciliationLines(CostReconciliationModel _costReconciliationModel)
    {
        CostReconciliationTmp reconciliationTmp;

        var subLedgerBalance = _costReconciliationModel.parmSubLedgerBalance();
        var generalLedgerBalance = _costReconciliationModel.parmGeneralLedgerBalance();

        ttsbegin;
        reconciliationTmp.DataSeries = _costReconciliationModel.description();
        reconciliationTmp.Amount = subLedgerBalance;
        reconciliationTmp.insert();

        reconciliationTmp.DataSeries = "@SYS24097";
        reconciliationTmp.Amount = generalLedgerBalance;
        reconciliationTmp.insert();

        reconciliationTmp.DataSeries = "@SYS40887";
        reconciliationTmp.Amount = subLedgerBalance - generalLedgerBalance;
        reconciliationTmp.insert();

        reconciliationTmp.DataSeries = "@SCM:DifferenceInPercent";

        if ( subLedgerBalance == generalLedgerBalance)
        {
            reconciliationTmp.Amount = 0;
        }
        else  if (subLedgerBalance == 0)
        {
            reconciliationTmp.Amount = -100;
        }
        else
        {
            reconciliationTmp.Amount = (subLedgerBalance - generalLedgerBalance) / subLedgerBalance * 100;
        }
        reconciliationTmp.insert();
        ttscommit;

        return reconciliationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatementModelDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the description of the <c>CostStatementModel</c> to be used as name on the statement.
    /// </summary>
    /// <param name = "_reconciliationType">
    /// The type of statement involved.
    /// </param>
    /// <returns>
    /// Description of the <c>CostStatementModel</c>.
    /// </returns>
    public str getStatementModelDescription(CostReconciliationType _reconciliationType)
    {
        str description;

        switch (_reconciliationType)
        {
            case CostReconciliationType::Inventory:
                description = costInventoryStatementModel.description();
                break;

            case CostReconciliationType::WIP:
                description = costWipStatementModel.description();
                break;

            default:
                description = '';
        }

        return description;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>