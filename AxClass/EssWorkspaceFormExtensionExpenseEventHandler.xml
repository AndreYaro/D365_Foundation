<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EssWorkspaceFormExtensionExpenseEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Expense module form extension events for the EssWorkspace form.
/// </summary>
class EssWorkspaceFormExtensionExpenseEventHandler
{
    boolean initialized;
    FormRun element;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(EssWorkspaceFormExtensionExpenseEventHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance.
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EssWorkspace_Pre_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitializing event handler for EssWorkspace form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PreHandlerFor(formStr(EssWorkspace), formMethodStr(EssWorkspace, init))]
    public static void EssWorkspace_Pre_init(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        EssWorkspaceFormExtensionExpenseEventHandler extensionInstance = new EssWorkspaceFormExtensionExpenseEventHandler(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EssWorkspace_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for EssWorkspace form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PostHandlerFor(formStr(EssWorkspace), formMethodStr(EssWorkspace, init))]
    public static void EssWorkspace_Post_init(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        EssWorkspaceFormExtensionExpenseEventHandler extensionInstance = formRun.getExtensionInstance(classStr(EssWorkspaceFormExtensionExpenseEventHandler));
        extensionInstance.init();

        // Set the visibility for New report command button based on the TrvExpenseReportDetails menu item access.
        FormCommandButtonControl showCreateExpenseReport = formRun.design().controlName(formControlStr(EssWorkspace, CreateExpenseReport)) as FormCommandButtonControl;
        showCreateExpenseReport.visible(hasMenuItemAccess(menuItemDisplayStr(TrvExpenseReportDetails), MenuItemType::Display));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateExpenseReport_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssWorkspace CreateExpenseReport form control OnClicked event handler.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(EssWorkspace, CreateExpenseReport), FormControlEventType::Clicked)]
    public static void CreateExpenseReport_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        Args args = new Args();
        TrvNewExpenseReportParameter newExpenseReportParameter = new TrvNewExpenseReportParameter();

        args.caller(_sender.formRun());
        args.openMode(OpenMode::New);
        newExpenseReportParameter.parmTrvWorkerParameter(TrvWorkerParameter::newStandard(HcmWorkerLookup::currentWorker(), CompanyInfo::current()));
        args.parmObject(newExpenseReportParameter);

        // Call the form to create a new expense report.
        new MenuFunction(MenuItemDisplayStr(TrvExpenseReportDetails), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>