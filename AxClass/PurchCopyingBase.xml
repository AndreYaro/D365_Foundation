<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCopyingBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class PurchCopyingBase
{
    Common          callingTable;

    PurchParameters         purchParameters;
    VendInvoiceJour         vendInvoiceJour;

    TmpFrmVirtual           tmpFrmVirtualLines;
    TmpFrmVirtual           tmpFrmVirtualHeader;

    Qty                     qtyFactor;

    NoYes                   reverseSign;
    NoYes                   recalculateAmount;
    NoYes                   copyMarkup;
    NoYes                   copyPrecisely;
    NoYes                   deleteLines;
    NoYes                   searchPrice;
    NoYes                   copyQty;

    LineNum                 lineNum;
    boolean                 convertCurrency;
    CurrencyCode            headerCurrencyCode;
    TradeCurencyConversion  tradeCurencyConversion;
    boolean                 deleteSettlement;

    RetailPackagePurch rboPackagePurch;

    TmpFrmVirtual   tmpFrmVirtualRBOLines;

    container       rboLineNumCont, fshLineNumCont;
    int             rboOrigNum, rboNewNum, rboNum, rboMaxOfNewNum;
    PurchId         rboOrigId;
    Counter         rboCounter;

    boolean                 isCopyValid;
    // <GIN>
    NoYes                   taxAsPerOriginalInv;
    // </GIN>
    // <GEERU>
    NoYes                   copyExchRate;
    // </GEERU>

    boolean                 allowCopyingInTransaction;

    internal PurchInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkHeaderAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates the header record against the matching agreement.
    /// </summary>
    /// <param name="_header">
    ///   A header record.
    /// </param>
    /// <returns>
    ///   true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkHeaderAgreement(Common _header)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLineAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates the line record against the matching agreement.
    /// </summary>
    /// <param name="_line">
    ///   A line record.
    /// </param>
    /// <returns>
    ///   true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkLineAgreement(Common _line)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLinesAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates all line records against the matching agreement.
    /// </summary>
    /// <returns>
    ///   true if the validation passes; Otherwise, false.
    /// </returns>
    public boolean checkLinesAgreement()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes purchase copying framework.
    /// </summary>
    /// <remarks>
    /// This method cannot be called in transaction scope.
    /// </remarks>
    public void copy()
    {
        // Preventing execution of copying in transaction scope.
        if (!this.parmAllowCopyingInTransaction() && appl.ttsLevel() != 0)
        {
            throw error("@SYS4000554");
        }

        ttsbegin;
        this.copyInTransaction();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does nothing because it is only a method stub for inherited classes.
    /// </summary>
    protected void copyHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes purchase copying transaction.
    /// </summary>
    /// <remarks>
    /// This method will always be executed in transaction scope.
    /// </remarks>
    protected void copyInTransaction()
    {
        using (var activityContext = instrumentationLogger.purchCopyingActivities().copy())
        {
            boolean configEnabled = isConfigurationkeyEnabled(configurationKeyNum(Retail));

            ttsbegin;
            this.deleteSettlement();

            if (recalculateAmount)
            {
                searchPrice= NoYes::Yes;
            }
            else
            {
                searchPrice= NoYes::No;
            }

            copyQty = qtyFactor ? NoYes::Yes : NoYes::No;

            if (deleteLines)
            {
                if (configEnabled)
                {
                    this.deleteRBOPackagePurch();
                }

                this.deleteLines();

                if (configEnabled)
                {
                    this.deleteRBOSumLines();
                }
            }

            this.copyHeader();

            if (configEnabled)
            {
                this.initRBOContainers();
            }

            while select tmpFrmVirtualLines order by LineNum
            {
                this.copyLine(tmpFrmVirtualLines);

                if (!isCopyValid)
                {
                    break;
                }
            }

            if (configEnabled)
            {
                while select tmpFrmVirtualRBOLines order by LineNum
                {
                    this.copyRBOLines(copyQty,tmpFrmVirtualRBOLines.Qty);
                }
            }

            if (isCopyValid)
            {
                this.endCopy();

                ttscommit;
            }
            else
            {
                ttsabort;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLine</Name>
				<Source><![CDATA[
    abstract protected void copyLine(TmpFrmVirtual _tmpFrmVirtualLines)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRBOLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>RetailPackagePurch</c> record based on an existing one.
    /// </summary>
    /// <param name="_copyQty">
    ///     Specifies whether the original quantity should be copied; optional.
    /// </param>
    /// <param name="_qty">
    ///     Specifies an alternative quantity; optional.
    /// </param>
    protected void copyRBOLines(boolean _copyQty = true,
                                      Qty     _qty = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLines</Name>
				<Source><![CDATA[
    protected void deleteLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRBOPackagePurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes records in the <c>RetailPackagePurch</c> table related to the PurchTable class member.
    /// </summary>
    protected void deleteRBOPackagePurch()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRBOSumLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes records in the <c>RetailSumLines</c> table related to the PurchTable class member.
    /// </summary>
    protected void deleteRBOSumLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSettlement</Name>
				<Source><![CDATA[
    void deleteSettlement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCopy</Name>
				<Source><![CDATA[
    protected void endCopy()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes the class based on the given contract class.
    /// </summary>
    /// <param name="_contract">
    ///   An instance of the <c>PurchCopyingContract</c> class.
    /// </param>
    /// <remarks>
    ///   All parameters to this method are now passed in using the contract class.
    /// </remarks>
    public void initParameters(PurchCopyingContract _contract)
    {
        ListEnumerator le;
        callingTable            = _contract.parmCallingTable();
        qtyFactor               = _contract.parmQtyFactor();
        reverseSign             = _contract.parmReverseSign();
        recalculateAmount       = _contract.parmRecalculateAmount();
        copyMarkup              = _contract.parmCopyMarkup();
        copyPrecisely           = _contract.parmCopyPrecisely();
        deleteLines             = _contract.parmDeleteLines();
        convertCurrency         = _contract.parmConvertCurrency();
        headerCurrencyCode      = _contract.parmHeaderCurrencyCode();
        tradeCurencyConversion  = _contract.parmTradeCurencyConversion();
        deleteSettlement        = _contract.parmDeleteSettlement();

        this.parmTaxAsPerOrginalInvoice_IN(_contract.parmTaxAsPerOrginalInvoice_IN());
        tmpFrmVirtualHeader = null;
        tmpFrmVirtualLines = null;
        if (_contract.parmPackedTmpFrmVirtualHeader() != conNull())
        {
            le = List::create(_contract.parmPackedTmpFrmVirtualHeader()).getEnumerator();
            while (le.moveNext())
            {
                tmpFrmVirtualHeader.clear();
                tmpFrmVirtualHeader.data(le.current());
                tmpFrmVirtualHeader.insert();
            }
        }

        if (_contract.parmPackedTmpFrmVirtualLines() != conNull())
        {
            le = List::create(_contract.parmPackedTmpFrmVirtualLines()).getEnumerator();

            while (le.moveNext())
            {
                tmpFrmVirtualLines.clear();
                tmpFrmVirtualLines.data(le.current());
                tmpFrmVirtualLines.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRBOContainers</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initiates the rboLineNumCont and fshLineNumCont container type class members.
    /// </summary>
    protected void initRBOContainers()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNum</Name>
				<Source><![CDATA[
    protected LineNum lineNum()
    {
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumIndex</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Assigns unique line numbers to lines that are not related to the same header record.
    /// </summary>
    /// <param name="_cont">
    ///     A <c>container</c> type containing line numbers.
    /// </param>
    /// <param name="_id">
    ///     A <c>Num</c> extended data type.
    /// </param>
    /// <param name="_lineNum">
    ///     A <c>LineNum</c> extended data type.
    /// </param>
    /// <returns>
    ///     A container type containing holding two elements; a container of the mapped line numbers and an <c>int</c> type specifying the number of line numbers.
    /// </returns>
    public container lineNumIndex(container _cont, Num _id, LineNum _lineNum)
    {
        /*
        *  We create a container that maps orig ID and LINENUM to a new LINENUM.
        *  This assigns unique LINENUMS to LINES that are not from the same HEADER.
        *  (fshLineNum/rboPackageLineNum conflicts are handled).
        *  The first entry always contains the maxOf line num (next starting point)
        */
        rboNum      = -1;
        rboCounter  = 2;

        rboMaxOfNewNum = conPeek(_cont,1);

        if (conLen(_cont) == 0)
            this.initRBOContainers();

        do
        {
            [rboOrigId, rboOrigNum, rboNewNum] = conPeek(_cont,rboCounter);

            if (rboOrigNum == _lineNum && rboOrigId == _id)
                rboNum = rboNewNum;
            else
                rboMaxOfNewNum = rboMaxOfNewNum < rboNewNum ? rboNewNum : rboMaxOfNewNum;

            rboCounter++;
        }
        while (rboCounter <= conLen(_cont));

        if (rboNum > -1)
            return [_cont,rboNum];
        else
        {
            _cont          = conIns(_cont,2,[_id,_lineNum,rboMaxOfNewNum + 1]);
            rboMaxOfNewNum +=1;
            _cont          = conPoke(_cont,1,rboMaxOfNewNum);

            return [_cont,rboMaxOfNewNum];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        purchParameters = PurchParameters::find();
        lineNum         = 0;
        isCopyValid     = true;

        instrumentationLogger = PurchInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowCopyingInTransaction</Name>
				<Source><![CDATA[
    public boolean parmAllowCopyingInTransaction(boolean _allowCopyingInTransaction = allowCopyingInTransaction)
    {
        allowCopyingInTransaction = _allowCopyingInTransaction;
        return allowCopyingInTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConvertCurrency</Name>
				<Source><![CDATA[
    public boolean parmConvertCurrency(boolean _convertCurrency = convertCurrency)
    {
        convertCurrency = _convertCurrency;
        return convertCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyExchRate</Name>
				<Source><![CDATA[
    public NoYes parmCopyExchRate(NoYes _copyExchRate = copyExchRate)
    {
        copyExchRate = _copyExchRate;

        return copyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPrecisely</Name>
				<Source><![CDATA[
    public NoYes parmCopyPrecisely(NoYes _copyPrecisely = copyPrecisely)
    {
        copyPrecisely = _copyPrecisely;
        return copyPrecisely;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyQty</Name>
				<Source><![CDATA[
    public NoYes parmCopyQty (NoYes _copyQty = copyQty)
    {
        copyQty = _copyQty;
        return copyQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyFactor</Name>
				<Source><![CDATA[
    public Qty parmQtyFactor()
    {
        return qtyFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRBOLineNumCon</Name>
				<Source><![CDATA[
    public container parmRBOLineNumCon(container _rboLineNumCon = rboLineNumCont)
    {
        rboLineNumCont = _rboLineNumCon;

        return rboLineNumCont;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseSign</Name>
				<Source><![CDATA[
    public NoYes parmReverseSign()
    {
        return reverseSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyMarkup</Name>
				<Source><![CDATA[
    public NoYes parmCopyMarkup()
    {
        return copyMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteLines</Name>
				<Source><![CDATA[
    public NoYes parmDeleteLines()
    {
        return deleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeleteSettlement</Name>
				<Source><![CDATA[
    public boolean parmDeleteSettlement(boolean _deleteSettlement = deleteSettlement)
    {
        deleteSettlement = _deleteSettlement;
        return deleteSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmHeaderCurrencyCode(CurrencyCode _headerCurrencyCode = headerCurrencyCode)
    {
        headerCurrencyCode = _headerCurrencyCode;
        return headerCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchPrice</Name>
				<Source><![CDATA[
    public NoYes parmSearchPrice(NoYes _searchPrice = searchPrice)
    {
        searchPrice = _searchPrice;
        return searchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxAsPerOrginalInvoice_IN</Name>
				<Source><![CDATA[
    public NoYes parmTaxAsPerOrginalInvoice_IN(NoYes    _taxAsPerOriginalInv = taxAsPerOriginalInv)
    {
        taxAsPerOriginalInv = _taxAsPerOriginalInv;

        return taxAsPerOriginalInv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmtmpFrmVirtualRBOLines</Name>
				<Source><![CDATA[
    public TmpFrmVirtual parmtmpFrmVirtualRBOLines(TmpFrmVirtual _tmpFrmVirtualRBOLines = tmpFrmVirtualRBOLines)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeCurencyConversion</Name>
				<Source><![CDATA[
    public TradeCurencyConversion parmTradeCurencyConversion(TradeCurencyConversion _tradeCurencyConversion = tradeCurencyConversion)
    {
        tradeCurencyConversion = _tradeCurencyConversion;
        return tradeCurencyConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preCILUserInterAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes user interaction before copy process execution.
    /// </summary>
    /// <param name="_contract">
    /// A <c>PurchCopyingContract</c> class; optional.
    /// </param>
    public void preCILUserInterAction(PurchCopyingContract _contract = null)
    {
        // Does nothing because it is only a method stub for inherited classes.
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptConvertCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user if the currency code is being changed as a consequence of the copying.
    /// </summary>
    /// <remarks>
    /// Note - The actual recalculation does not take place in this method
    /// </remarks>
    protected void promptConvertCurrencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptRemoveSettlement</Name>
				<Source><![CDATA[
    void promptRemoveSettlement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchCopyingBase construct(SalesPurchCopy _salesPurchCopy, Common _callingTable)
    {
        SalesPurchCopyFactoryAttribute attr = new SalesPurchCopyFactoryAttribute(_salesPurchCopy, tableId2Name(_callingTable.TableId));
        PurchCopyingBase purchCopyingBase = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(PurchCopyingBase), attr) as PurchCopyingBase;

        if (!purchCopyingBase)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return purchCopyingBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContact</Name>
				<Source><![CDATA[
    protected PurchCopyingContract createContact()
    {
        return new PurchCopyingContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchCopyingContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a current instance of <c>PurchCopyingContract</c> contract.
    /// </summary>
    /// <returns>An instance of <c>PurchCopyingContract</c>.</returns>
    public PurchCopyingContract getPurchCopyingContract()
    {
        PurchCopyingContract contract = this.createContact();

        contract.parmCallingTable(callingTable);
        contract.parmQtyFactor(qtyFactor);
        contract.parmReverseSign(reverseSign);
        contract.parmRecalculateAmount(recalculateAmount);
        contract.parmCopyMarkup(copyMarkup);
        contract.parmCopyPrecisely(copyPrecisely);
        contract.parmDeleteLines(deleteLines);
        contract.parmConvertCurrency(convertCurrency);
        contract.parmHeaderCurrencyCode(headerCurrencyCode);
        contract.parmTradeCurencyConversion(tradeCurencyConversion);
        contract.parmDeleteSettlement(deleteSettlement);
        contract.parmTaxAsPerOrginalInvoice_IN(this.parmTaxAsPerOrginalInvoice_IN());

        List list = new List(Types::Record);

        while select tmpFrmVirtualHeader
        {
            list.addEnd(tmpFrmVirtualHeader);
        }
        contract.parmPackedTmpFrmVirtualHeader(list.pack());

        list = new List(Types::Record);

        while select tmpFrmVirtualLines
        {
            list.addEnd(tmpFrmVirtualLines);
        }
        contract.parmPackedTmpFrmVirtualLines(list.pack());

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class is for a credit note.
    /// </summary>
    ///  /// <returns>
    ///    true if the class is for a credit note; otherwise, false.
    /// </returns>
    [Hookable(false)]
    protected boolean isCreditNote()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>