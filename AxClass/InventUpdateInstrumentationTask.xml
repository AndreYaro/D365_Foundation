<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdateInstrumentationTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ApplicationEventSource = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;
using Stopwatch = System.Diagnostics.Stopwatch;

/// <summary>
/// Posts inventory update instrumentation events.
/// Create an instance in a using block that wraps the operation that you want to instrument.
/// </summary>
internal final class InventUpdateInstrumentationTask implements System.IDisposable
{
    private readonly Stopwatch sw;
    private readonly InventMovement movement;
    private readonly ClassName inventUpdateClassName;
    private readonly ClassName movementClassName;
    private readonly RecId companyRecId;
    private readonly RecId warehouseRecId;
    private readonly InventTable inventTable;
		
    private InventInstrumentationLogger         instrumentationLogger;
    private SysInstrumentationActivityContext   instrumentationActivityContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
	public void new(InventUpdate _inventUpdate)
    {
        movement = _inventUpdate.movement();
        inventUpdateClassName = classId2Name(_inventUpdate.handle());
        movementClassName = classId2Name(movement.handle());
        companyRecId = CompanyInfo::current();
        inventTable = movement.inventTable();
        warehouseRecId = movement.inventdim().inventLocation().RecId;

        InventTransOriginId inventTransOriginId = this.getStartInventTransOriginId(_inventUpdate); // Cannot be cached because it can change during update (e.g. estimating a new transaction)

        ApplicationEventSource::EventWriteInventoryUpdateStart(
            inventUpdateClassName,
            movementClassName,
            companyRecId,
            warehouseRecId,
            inventTable.RecId,
            inventTransOriginId, 
            0);

        instrumentationLogger = InventInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        instrumentationActivityContext = instrumentationLogger.updateActivities().update(
            inventUpdateClassName,
            movementClassName,
            companyRecId,
            warehouseRecId,
            inventTable.RecId,
            inventTransOriginId);

        sw = Stopwatch::StartNew();
	}

]]></Source>
			</Method>
			<Method>
				<Name>getStartInventTransOriginId</Name>
				<Source><![CDATA[
    private InventTransOriginId getStartInventTransOriginId(InventUpdate _inventUpdate)
    {
        if (_inventUpdate is InventUpd_Estimated)
        {
            return 0;
        }

        return movement.inventTransOriginId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
	public void Dispose()
    {
        sw.Stop();

        InventDimParm physicalDimensions;
        InventDimParm productDimensions;
        movement.inventDimGroupSetup().inventDimParmActivePhysicalInventory(physicalDimensions);
        movement.inventDimGroupSetup().inventDimParmActiveProductDimension(productDimensions);
		
		ApplicationEventSource::EventWriteInventoryItemSettings(
            companyRecId,
            inventTable.RecId,
            movement.isItemWHSEnabled(),
            movement.pdsCWItem(),
            inventTable.isStocked(),
            physicalDimensions.InventBatchIdFlag == NoYes::Yes,
            physicalDimensions.InventSerialIdFlag == NoYes::Yes,
            physicalDimensions.InventOwnerIdFlag_RU == NoYes::Yes,
			productDimensions.anyProductDimensionFlagSet());

        instrumentationLogger.logItemSettings(movement, companyRecId, warehouseRecId, inventTable);

        InventTransOriginId inventTransOriginId = movement.inventTransOriginId();

        ApplicationEventSource::EventWriteInventoryUpdateStop(
            inventUpdateClassName,
            movementClassName,
            companyRecId,
            warehouseRecId,
            inventTable.RecId,
            inventTransOriginId, // Cannot be cached because it can change during update (e.g. estimating a new transaction)
            sw.ElapsedMilliseconds);

        instrumentationActivityContext.addCustomProperty(instrumentationLogger.properties().InventTransOriginStop, int642Str(inventTransOriginId));

        instrumentationActivityContext.dispose();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>