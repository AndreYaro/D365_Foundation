<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCapacityReservationsSplitDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdCapacityReservationsDP</c> class is the report data provider class for a
/// <c>ProdCapacityReservations</c> report.
/// </summary>
[SRSReportParameterAttribute(classstr(ProdCapacityReservationsContract))]
public class ProdCapacityReservationsSplitDP extends SRSReportDataProviderBase
{
    ProdCapacityReservationsSplitTmp prodCapacityReservationsSplitTmp;

    ProdUnitId      prodUnitId;
    WrkCtrId        resourceGroupId;
    ReqPlanIdSched  reqPlanIdSched;
    date            fromDate;
    date            toDate;
    WrkCtrId        resourceId;

    // Container returned by reservedSplitDetail* methods.
    #define.ResContainer([resProduction, resPlannedOrder, resProject, resProjectActivity])

    #TimeConstants
    #SRSScmAllValue
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the capacity hours information about a work center for a specified single date and master
    /// plan.
    /// </summary>
    /// <param name="_capacitySum">
    /// The instance of the <c>WrkCtrCapacitySum</c> class that is used to calculate the capacity hours.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The number of capacity hours if available; otherwise, <c>0</c>.
    /// </returns>
    private CapacityHours capacity(WrkCtrCapacitySum _capacitySum, WrkCtrId _wrkCtrId, date _date)
    {
        CapacityHours result = 0;

        if (_capacitySum.find(_wrkCtrId,_date,false))
        {
            result = _capacitySum.rec_Capacity() / #SecondsPerHour;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParamValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a string value or an empty string if it is equal to the 'All' value.
    /// </summary>
    /// <param name="param">
    /// The string to check.
    /// </param>
    /// <returns>
    /// The string value.
    /// </returns>
    private str getParamValue(str param)
    {
        return (param == #SRSScmAll) ? "" : param;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdCapacityReservationsSplitTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from a <c>ProdCapacityReservationsTmp</c> temporary table
    /// </summary>
    /// <returns>
    /// The data from the <c>ProdCapacityReservationsTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProdCapacityReservationsSplitTmp))
    ]
    public ProdCapacityReservationsSplitTmp getProdCapacityReservationsSplitTmp()
    {
        select prodCapacityReservationsSplitTmp;
        return prodCapacityReservationsSplitTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceGroups</Name>
				<Source><![CDATA[
        private container getResourceGroups(Str60 _resourceGroupId, Str60 _prodUnitId)
    {
        WrkCtrResourceGroup     wrkCtrResourceGroup;
        container               result = conNull();

        if (_resourceGroupId != "")
        {
            // if it's not the All value we use the passed ID
                result += _resourceGroupId;
        }
        else
        {
            // if the value for the resource group is All (empty), then we
            // just get all the resource groups for this production unit
            while select WrkCtrId
                from wrkCtrResourceGroup
                where wrkCtrResourceGroup.ProdUnitId == _prodUnitId
            {
                result += wrkCtrResourceGroup.WrkCtrId;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters to process a report.
    /// </summary>
    private void initializeParameters()
    {
        ProdCapacityReservationsContract contract = this.parmDataContract() as ProdCapacityReservationsContract;

        prodUnitId      = this.getParamValue(contract.parmProdUnitId());
        resourceGroupId = this.getParamValue(contract.parmResourceGroupId());
        resourceId      = this.getParamValue(contract.parmResourceId());
        reqPlanIdSched  = contract.parmReqPlanIdSched();
        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a line of data into a temporary table.
    /// </summary>
    /// <param name="_date">
    /// The date field.
    /// </param>
    /// <param name="_capacity">
    /// A capacity in hours.
    /// </param>
    /// <param name="_production">
    /// A production reservation in hours.
    /// </param>
    /// <param name="_plannedOrder">
    /// A planned order reservation in hours.
    /// </param>
    /// <param name="_project">
    /// A project reservation in hours.
    /// </param>
    /// <param name="_projectActivity">
    /// A project activity reservation in hours.
    /// </param>
    private void insertData(date  _date,
                            Hours _capacity,
                            Hours _production,
                            Hours _plannedOrder,
                            Hours _project,
                            Hours _projectActivity
                            )
    {
        prodCapacityReservationsSplitTmp.Date               = _date;
        prodCapacityReservationsSplitTmp.Capacity           = _capacity;
        prodCapacityReservationsSplitTmp.Production         = _production;
        prodCapacityReservationsSplitTmp.PlannedOrder       = _plannedOrder;
        prodCapacityReservationsSplitTmp.Project            = _project;
        prodCapacityReservationsSplitTmp.ProjectActivity    = _projectActivity;

        prodCapacityReservationsSplitTmp.insert();
        prodCapacityReservationsSplitTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. Customization of this class
    /// may cause problems with future upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        WrkCtrCapacitySum       capacitySum = new WrkCtrCapacitySum(true,true);

        // storage for all resource groups being processed
        container           resourceGroups = connull();
        container           result = conNull();

        // per-resource statistics
        Hours               resProduction       = 0;
        Hours               resPlannedOrder     = 0;
        Hours               resProject          = 0;
        Hours               resProjectActivity  = 0;

        // aggregated statistics
        Hours               capacity            = 0;
        Hours               production          = 0;
        Hours               plannedOrder        = 0;
        Hours               project             = 0;
        Hours               projectActivity     = 0;

        date                tmpDate;
        int                 i;

        this.initializeParameters();

        // take care of wrong dates
        if (toDate < fromDate)
        {
            tmpDate = fromDate;
            fromDate = toDate;
            toDate = tmpDate;
        }

        // Searching by ALL production units and ALL resource groups and All resources
        // is not supported due to performance concerns
        if (resourceId == ""
            && resourceGroupId == ""
            && prodUnitId == "")
        {
            throw error("@SYS91571");
        }

        // If resource id is not empty then collect only statistics for this resource.
        if (resourceId != "")
        {
            for (tmpDate = fromDate; tmpDate <= toDate; ++tmpDate)
            {
                capacity = this.capacity(capacitysum, resourceId, tmpDate);
                #ResContainer = this.reservedSplitDetailIndividual(reqPlanIdSched, resourceId, tmpDate);

                this.insertData(tmpDate, capacity, resProduction, resPlannedOrder, resProduction, resProjectActivity);
            }
        }
        // If not, we need to get statistics based on resource group
        else
        {
            resourceGroups = this.getResourceGroups(resourceGroupId, prodUnitId);

            for (tmpDate = fromDate; tmpDate <= toDate; ++tmpDate)
            {
                capacity            = 0;
                production          = 0;
                plannedOrder        = 0;
                project             = 0;
                projectActivity     = 0;

                // Process all resource groups
                for (i = 1; i <= conLen(resourceGroups); ++i)
                {
                    WrkCtrId tmpWrkCtrId = conPeek(resourceGroups, i);
                    #ResContainer = this.reservedSplitDetailGroup(reqPlanIdSched, tmpWrkCtrId, tmpDate);

                    capacity        += this.capacity(capacitySum, tmpWrkCtrId, tmpDate);
                    production      += resProduction;
                    plannedOrder    += resPlannedOrder;
                    project         += resProject;
                    projectActivity += resProjectActivity;
                }

                this.InsertData(tmpDate, capacity, production, plannedOrder, project, projectActivity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedSplitDetailGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the reserved hours information about the group work center on a specified date and master
    /// plan.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The master plan ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The reserved hours.
    /// </returns>
    /// <remarks>
    /// This method is only applicable to work centers that have a value of one that is returned by the
    /// <c>WrkCtrTable.IsIndividualResource</c> method. The reserved hours are split into production,
    /// planned order, project, and project activity types.
    /// </remarks>
    private container reservedSplitDetailGroup(ReqPlanId _reqPlanId, WrkCtrId _wrkCtrId, date _date)
    {
        WrkCtrCapRes                wrkCtrCapRes;
        RefRecId                    reqPlanRecId        =
                                                          ReqPlan::findReqPlanId(_reqPlanId).findActiveVersion().RecId;
        Hours                       resProduction       = 0;
        Hours                       resPlannedOrder     = 0;
        Hours                       resProject          = 0;
        Hours                       resProjectActivity  = 0;

        //Select reservations made for each resource in the group
        #ResContainer = this.reservedSplitDetailIndividualForGroup(_reqPlanId, _wrkCtrId, _date);

        //Select reservations made directly on the resource group
        while select sum(WrkCtrSec), RefType from wrkCtrCapRes
            group by RefType
            where   wrkCtrCapRes.WrkCtrId          == _wrkCtrId
                    && wrkCtrCapRes.TransDate      == _date
                    && wrkCtrCapRes.StartTime      <= wrkCtrCapRes.EndTime
                    && (
                        (wrkCtrCapRes.RefType      == WrkCtrCapRefType::Production && wrkCtrCapRes.PlanVersion == 0)
                        || (wrkCtrCapRes.RefType   == WrkCtrCapRefType::PlannedOrder && wrkCtrCapRes.PlanVersion == reqPlanRecId)
                        || (wrkCtrCapRes.RefType   == WrkCtrCapRefType::Project && wrkCtrCapRes.PlanVersion == 0)
                        || (wrkCtrCapRes.RefType   == WrkCtrCapRefType::ProjectActivity && wrkCtrCapRes.PlanVersion == 0)
                    )
        {
            switch (wrkCtrCapRes.RefType)
            {
                case WrkCtrCapRefType::Production:
                    resProduction += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::PlannedOrder:
                    resPlannedOrder += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::Project:
                    resProject += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::ProjectActivity:
                    resProjectActivity += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
            }
        }

        return #ResContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedSplitDetailIndividual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the reserved hours information about an individual work center for a specified date and
    /// master plan.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The master plan ID from which to obtain the capacity load data.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The work center ID from which to obtain the capacity load data.
    /// </param>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// The reserved hours.
    /// </returns>
    /// <remarks>
    /// This method is only applicable to work centers that have a value of one that is returned by the
    /// <c>WrkCtrTable.IsIndividualResource</c> method. The reserved hours are split into production,
    /// planned order, project, and project activity types.
    /// </remarks>
    private container reservedSplitDetailIndividual(ReqPlanId _reqPlanId, WrkCtrId _wrkCtrId, date _date)
    {
        WrkCtrCapRes        wrkCtrCapRes;
        RefRecId            reqPlanRecId        =
                                                  ReqPlan::findReqPlanId(_reqPlanId).findActiveVersion().RecId;
        Hours               resProduction       = 0;
        Hours               resPlannedOrder     = 0;
        Hours               resProject          = 0;
        Hours               resProjectActivity  = 0;

        while select sum(WrkCtrSec), RefType from wrkCtrCapRes
            group by RefType
            where   wrkCtrCapRes.WrkCtrId       == _wrkCtrId
                    && wrkCtrCapRes.TransDate   == _date
                    && wrkCtrCapRes.StartTime   <= wrkCtrCapRes.EndTime
                    && (
                        (wrkCtrCapRes.RefType   == WrkCtrCapRefType::Production && wrkCtrCapRes.PlanVersion == 0)
                        || (wrkCtrCapRes.RefType   == WrkCtrCapRefType::PlannedOrder && wrkCtrCapRes.PlanVersion == reqPlanRecId)
                        || (wrkCtrCapRes.RefType   == WrkCtrCapRefType::Project && wrkCtrCapRes.PlanVersion == 0)
                        || (wrkCtrCapRes.RefType   == WrkCtrCapRefType::ProjectActivity && wrkCtrCapRes.PlanVersion == 0)
                    )
        {
            switch (wrkCtrCapRes.RefType)
            {
                case WrkCtrCapRefType::Production:
                    resProduction += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::PlannedOrder:
                    resPlannedOrder += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::Project:
                    resProject += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::ProjectActivity:
                    resProjectActivity += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
            }
        }

        return #ResContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedSplitDetailIndividualForGroup</Name>
				<Source><![CDATA[
        private container reservedSplitDetailIndividualForGroup(ReqPlanId _reqPlanId, WrkCtrId _wrkCtrId, date _date)
    {
        WrkCtrResourceGroupResource wrkCtrResourceGroupResource;
        WrkCtrResourceGroup         wrkCtrResourceGroup;
        WrkCtrCapRes                wrkCtrCapRes;
        RefRecId                    reqPlanRecId        =
                                                          ReqPlan::findReqPlanId(_reqPlanId).findActiveVersion().RecId;
        Hours                       resProduction       = 0;
        Hours                       resPlannedOrder     = 0;
        Hours                       resProject          = 0;
        Hours                       resProjectActivity  = 0;

        while select validTimeState(_date) sum(WrkCtrSec), RefType from wrkCtrCapRes
            group by RefType
            exists join wrkCtrResourceGroupResource
            exists join wrkCtrResourceGroup
            where   wrkCtrResourceGroupResource.WrkCtrId    == wrkCtrCapRes.WrkCtrId
                    && wrkCtrResourceGroup.RecId            == wrkCtrResourceGroupResource.ResourceGroup
                    && wrkCtrResourceGroup.WrkCtrId         == _wrkCtrId
                    && wrkCtrCapRes.TransDate               == _date
                    && wrkCtrCapRes.StartTime               <= wrkCtrCapRes.EndTime
                    && (
                        (wrkCtrCapRes.RefType       == WrkCtrCapRefType::Production && wrkCtrCapRes.PlanVersion == 0)
                        || (wrkCtrCapRes.RefType    == WrkCtrCapRefType::PlannedOrder && wrkCtrCapRes.PlanVersion == reqPlanRecId)
                        || (wrkCtrCapRes.RefType    == WrkCtrCapRefType::Project && wrkCtrCapRes.PlanVersion == 0)
                        || (wrkCtrCapRes.RefType    == WrkCtrCapRefType::ProjectActivity && wrkCtrCapRes.PlanVersion == 0)
                    )
        {
            switch (wrkCtrCapRes.RefType)
            {
                case WrkCtrCapRefType::Production:
                    resProduction += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::PlannedOrder:
                    resPlannedOrder += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::Project:
                    resProject += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
                case WrkCtrCapRefType::ProjectActivity:
                    resProjectActivity += wrkCtrCapRes.WrkCtrSec / #SecondsPerHour;
                    break;
            }
        }

        return #ResContainer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
