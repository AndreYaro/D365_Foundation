<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAdvanceInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustVendAdvanceInvoiceController</c> class is the controller base class for the
///    <c>VendAdvanceInvoice</c> and <c>CustAdvanceInvoice</c> reports
/// </summary>
abstract public class CustVendAdvanceInvoiceController extends SrsPrintMgmtFormLetterController
{
    CustVendAdvanceInvoiceContract  contract;
    CzAdvanceInvoiceTable           advanceInvoiceTable;

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDefaultRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the ability to modify the report query before dialog is shown to user.
    /// </summary>
    /// <param name="_query">
    /// The report query.
    /// </param>
    protected void addDefaultRanges(Query _query)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field ID for the record ID of the specific advance invoice header table.
    /// </summary>
    /// <returns>
    /// The field ID for the record ID of the specific advance invoice header table.
    /// </returns>
    abstract protected FieldId getAdvanceInvoiceRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty table buffer for a specific advance invoice header table.
    /// </summary>
    /// <returns>
    /// The table buffer for a specific advance invoice header table.
    /// </returns>
    abstract protected CzAdvanceInvoiceTable getAdvanceInvoiceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtDocumentType</c> value of the current report.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtDocumentType</c> value of the current report.
    /// </returns>
    abstract protected PrintMgmtDocumentType getPrintMgmtDocType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of form letter object.
    /// </summary>
    /// <remarks>
    /// The implementation class should override this method to create the correct instance and call the
    /// <c>super</c> method to start the base class implementation. This is a framework class. Customizing
    /// this class may cause problems with future upgrades to the software.
    /// </remarks>
    public void initFormLetterReport()
    {
        formLetterReport = FormLetterReport::construct(this.getPrintMgmtDocType());

        // By default, print using print management settings
        formLetterReport.parmPrintType(PrintCopyOriginal::OriginalPrint);

        // We don't let the user override print management settings on the report dialog
        formLetterReport.parmUsePrintMgmtDestinations(true);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report query based on the records the user selected.
    /// </summary>
    protected void initQuery()
    {
        Common              record = this.parmArgs().record();
        Common              common;
        FormDataSource      formDataSource;
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange     range;

        advanceInvoiceTable = this.getAdvanceInvoiceTable();

        if (query)
        {
            if (FormDataUtil::isFormDataSource(record))
            {
                formDataSource = FormDataUtil::getFormDataSource(record);
            }
            else
            {
                formDataSource = null;
            }

            queryBuildDataSource = query.dataSourceTable(advanceInvoiceTable.TableId);
            queryBuildDataSource.clearRanges();

            this.addDefaultRanges(query);

            if (!formDataSource && record.RecId)
            {
                range = queryBuildDataSource.addRange(this.getAdvanceInvoiceRecId());
                range.value(queryValue(record.RecId));
                range.label("@SYS15217");
                return;
            }

            for (common = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor(); common; common = formDataSource.getNext())
            {
                range = queryBuildDataSource.addRange(this.getAdvanceInvoiceRecId());
                range.value(queryValue(common.RecId));
                range.label("@SYS15217");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected CustVendAdvanceInvoiceContract parmContract()
    {
        if (!contract)
        {
            contract = this.parmReportContract().parmRdpContract() as CustVendAdvanceInvoiceContract;
        }

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        SRSPrintDestinationSettings printSettings;

        super();

        // Initialize the query based on the record(s) the user selected
        this.initQuery();

        // Set the default print settings' print medium type to something other than screen
        // Otherwise the controller's dialog won't allow printing to batch
        // The print settings will ultimately come from print management anyway.
        printSettings = this.getReportContract().parmPrintSettings();
        printSettings.printMediumType(SRSPrintMediumType::Custom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the opportunity to modify the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        this.parmContract();

        contract.parmAdvanceInvoiceRecId(advanceInvoiceTable.RecId);
        SrsReportRdlDataContract rdlCotract = this.parmReportContract().parmRdlContract();

        rdlCotract.parmLanguageId(advanceInvoiceTable.LanguageId);
        rdlCotract.parmLabelLanguageId(advanceInvoiceTable.LanguageId);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements print management functionality.
    /// </summary>
    /// <remarks>
    /// Override this method to provide print management-related logic. This method loads the print
    /// settings for the business object. It then invokes any necessary business logic and then calls the
    /// <c>outputReports</c> method.
    /// </remarks>
    protected void runPrintMgmt()
    {
        QueryRun            queryRun;

        advanceInvoiceTable = this.getAdvanceInvoiceTable();

        if (query)
        {
            queryRun = new QueryRun(query);

            if (!queryRun.next())
            {
                // When there are no advance invoices to print, load default print settings for blank report to print
                advanceInvoiceTable.RecId = 1;
                formLetterReport.loadPrintSettings(advanceInvoiceTable, advanceInvoiceTable, infolog.language());
                this.outputReports();
                return;
            }

            do
            {
                if (queryRun.changed(advanceInvoiceTable.TableId))
                {
                    advanceInvoiceTable = queryRun.get(advanceInvoiceTable.TableId);

                    formLetterReport.loadPrintSettings(advanceInvoiceTable, advanceInvoiceTable, advanceInvoiceTable.LanguageId);

                    this.outputReports();
                }
            } while (queryRun.next() && !this.parmCancelRun());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether print settings should be added to the dialog.
    /// </summary>
    /// <returns>
    /// true if the print settings are to be shown; otherwise, false.
    /// </returns>
    public boolean showPrintSettings()
    {
        // Since our report uses print management, do not show the print settings to the user on the report dialog
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>