<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetLedgerBudgetUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rAssetLedgerBudgetUpdate extends RunBase
{
    NoYes                    updateLedger;
    NoYes                    isBudgetTransStatusCompleted;
    BudgetTransactionCode    budgetTransactionCode;
    BudgetTransactionType    budgetTransactionTypeAsset;
    NumberSequenceReference  budgetTransNumberSequenceRef;
    NumberSeq                transferBudgetTransNumberSeq;
    Map                      budgetTransactionHeaders;
    Map                      budgetModelCovStatuses;
    BudgetTransactionManager budgetTransactionManager;
    BudgetTransactionPost    budgetTransactionPost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        // Default budget transaction code for Fixed Asset transaction type
        if (BudgetTransactionCode::existDefaultByTransactionType(budgetTransactionTypeAsset) == false)
        {
            return checkFailed(strFmt("@SYS132978", budgetTransactionTypeAsset));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the ledger dimension of the budget transaction line.
    /// </summary>
    /// <param name="_budgetLedgerDimension">
    /// The budget ledger dimension to check.
    /// </param>
    /// <param name="_assetBudgetLedgerDimension">
    /// The asset budget ledger account resulting in the budget ledger dimension.
    /// </param>
    /// <remarks>
    /// Checks for dimension attribute values specified by the asset budget ledger account not included in the
    /// budget structure.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// No budget ledger dimension resulted from the specified asset budget ledger account.
    /// </exception>
    private void checkBudgetLedgerDimension(
        LedgerDimensionBudget _budgetLedgerDimension,
        LedgerDimensionAccount _assetBudgetLedgerDimension)
    {
        if (_budgetLedgerDimension == 0)
        {
            // No dimension attributes are in use by the active budget structure.
            throw error(strFmt("@SYS300282", BudgetTransactionType::FixedAsset_RU));
        }
        else
        {
            // Check for & cache any dimension attributes not included in the active budget structure
            if (budgetTransactionManager == null)
            {
                budgetTransactionManager = BudgetTransactionManager::construct();
            }
            budgetTransactionManager.cacheDimAttributesNotBudgetEnabled(_assetBudgetLedgerDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates budget transactions details based on the <c>RAssetBudgetTrans</c> record.
    /// </summary>
    /// <param name="_assetBudgetTrans">
    /// The <c>RAssetBudgetTrans</c> record for which to create budget transaction details.
    /// </param>
    /// <remarks>
    /// Creates a <c>BudgetTransactionHeader</c> record if one does not exist for the process for the budget model
    /// specified by the <c>RAssetBudgetTrans</c> record. Creates two <c>BudgetTransactionLine</c> records, one for the ledger dimension
    /// and one for the offset ledger dimension specified by the <c>RAssetBudgetTrans</c> record.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The number sequence specified for budget transactions is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The <c>BudgetTransactionHeader</c> record created is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The <c>BudgetTransactionLine</c> record created for the ledger dimension is invalid.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The <c>BudgetTransactionLine</c> record created for the offset ledger dimension is invalid.
    /// </exception>
    protected void createBudgetTransaction(RAssetBudgetTrans _assetBudgetTrans)
    {
        BudgetTransactionHeader  budgetTransactionHeader;
        BudgetTransactionLine    budgetTransactionLine;
        BudgetTransactionLine    budgetTransactionLineOffset;

        // Get existing header from map if exists - otherwise create new header & add to map
        if (budgetTransactionHeaders.exists(_assetBudgetTrans.BudgetModel))
        {
            budgetTransactionHeader = budgetTransactionHeaders.lookup(_assetBudgetTrans.BudgetModel);
        }
        else
        {
            // Create new header for budget model
            budgetTransactionHeader.clear();
            budgetTransactionHeader.initValue();

            if (transferBudgetTransNumberSeq == null)
            {
                if (BudgetTransactionManager::checkBudgetTransactionNumberSequence() == false)
                {
                    throw error("@SYS131643");
                }
            }

            // Get the budget transaction number sequence
            transferBudgetTransNumberSeq = NumberSeq::newGetNum(budgetTransNumberSequenceRef);

            budgetTransactionHeader.TransactionNumber = transferBudgetTransNumberSeq.num();
            budgetTransactionHeader.setBudgetTransactionCode(budgetTransactionCode.RecId);
            budgetTransactionHeader.editBudgetModel(true, _assetBudgetTrans.BudgetModel);

            if (budgetTransactionHeader.validateWrite() == true)
            {
                budgetTransactionHeader.write();

                // Add header to cache
                budgetTransactionHeaders.insert(_assetBudgetTrans.BudgetModel, budgetTransactionHeader);
            }
            else
            {
                // Process cannot complete if transfer budget transaction cannot be created
                throw error("@SYS131643");
            }
        }

        // Create budget transaction line record
        budgetTransactionLine.clear();

        // Set fields from header
        budgetTransactionLine.BudgetTransactionHeader = budgetTransactionHeader.RecId;

        budgetTransactionLine.LineNumber = budgetTransactionHeader.numOfLines() + 1;

        // Set fields from AssetBudget
        budgetTransactionLine.AssetBudget_RU            = _assetBudgetTrans.RecId;
        budgetTransactionLine.Date                      = _assetBudgetTrans.TransDate;
        budgetTransactionLine.TransactionCurrency       = _assetBudgetTrans.CurrencyCode;
        budgetTransactionLine.Comment                   = _assetBudgetTrans.Txt;
        budgetTransactionLine.TransactionCurrencyAmount = _assetBudgetTrans.AmountCur;

        if (_assetBudgetTrans.AssetTransType == RAssetTransType::DisposalSale)
        {
            budgetTransactionLine.BudgetType = BudgetType::Revenue;
        }

        budgetTransactionLine.LedgerDimension = BudgetTransactionManager::saveBudgetLedgerDimension(_assetBudgetTrans.LedgerDimension);

        this.checkBudgetLedgerDimension(
                budgetTransactionLine.LedgerDimension,
                _assetBudgetTrans.LedgerDimension);

        // Set fields from BudgetModel
        budgetTransactionLine.IncludeInCashFlowForecast = this.getBudgetModelCovStatus(_assetBudgetTrans.BudgetModel);

        // Set derived fields

        budgetTransactionLine.AccountingCurrencyAmount = BudgetTransactionManager::calculateTransAmountToAccountingAmount(budgetTransactionLine.TransactionCurrencyAmount, budgetTransactionLine.TransactionCurrency, budgetTransactionLine.Date);

        // Create offset budget transaction line record
        if (_assetBudgetTrans.OffsetLedgerDimension)
        {
            budgetTransactionLineOffset.clear();
            budgetTransactionLineOffset.data(budgetTransactionLine.data());

            // Increment line number
            budgetTransactionLineOffset.LineNumber++;

            // Set derived fields
            budgetTransactionLineOffset.TransactionCurrencyAmount = budgetTransactionLine.TransactionCurrencyAmount * -1;
            budgetTransactionLineOffset.AccountingCurrencyAmount  = budgetTransactionLine.AccountingCurrencyAmount * -1;

            // Set fields from AssetBudget for offset
            budgetTransactionLineOffset.LedgerDimension = BudgetTransactionManager::saveBudgetLedgerDimension(_assetBudgetTrans.OffsetLedgerDimension);

            this.checkBudgetLedgerDimension(
                    budgetTransactionLine.LedgerDimension,
                    _assetBudgetTrans.OffsetLedgerDimension);
        }

        // Write the budget transaction line
        if (budgetTransactionLine.validateWrite() == true &&
            BudgetTransactionManager::validateLedgerDimension(budgetTransactionLine.LedgerDimension, budgetTransactionLine.Date) == true)
        {
            budgetTransactionLine.write();
        }
        else
        {
            // Process cannot complete if transfer budget transaction line cannot be created
            throw error("@SYS131643");
        }

        // Write the offset budget transaction line

        if (budgetTransactionLineOffset.validateWrite() == true &&
            BudgetTransactionManager::validateLedgerDimension(budgetTransactionLineOffset.LedgerDimension, budgetTransactionLineOffset.Date) == true)
        {
            budgetTransactionLineOffset.write();
        }
        else
        {
            // Process cannot complete if offset for transfer budget transaction line cannot be created
            throw error("@SYS131643");
        }

        if (isBudgetTransStatusCompleted == NoYes::Yes)
        {
            // Option to create transferred budget as completed transactions is marked
            budgetTransactionPost = BudgetTransactionPost::construct(budgetTransactionHeader.TransactionNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@SYS71112");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetModelCovStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cash flow status for the specified budget model.
    /// </summary>
    /// <param name="_budgetModelId">
    /// The budget model id for which to get the cash flow status.
    /// </param>
    /// <returns>
    /// The value of the <c>Cov</c> field of the <c>BudgetModel</c> record.
    /// </returns>
    protected NoYes getBudgetModelCovStatus(BudgetModelId _budgetModelId)
    {
        NoYes budgetModelCov;

        if (budgetModelCovStatuses.exists(_budgetModelId))
        {
            budgetModelCov = budgetModelCovStatuses.lookup(_budgetModelId);
        }
        else
        {
            budgetModelCov = BudgetModel::find(HeadingSub::Heading, _budgetModelId).Cov;

            budgetModelCovStatuses.insert(_budgetModelId, budgetModelCov);
        }

        return budgetModelCov;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForBudgetTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes variables used for budget transactions during the asset budget transfer process.
    /// </summary>
    /// <remarks>
    /// Gets the default budget transaction code for fixed assets, the number sequence reference for budget transactions.
    /// Initializes maps used for caching budget transaction headers and budget model cash flow status.
    /// </remarks>
    protected void initForBudgetTransaction()
    {
        // Get the default budget transaction code for Asset
        budgetTransactionCode = BudgetTransactionCode::findDefaultByTransactionType(budgetTransactionTypeAsset);

        // Get the number sequence reference for budget transaction number
        budgetTransNumberSequenceRef = BudgetParameters::numRefBudgetTransactionId();

        // Initialize maps for caching details
        budgetTransactionHeaders = new Map(Types::String, Types::Record);
        budgetModelCovStatuses   = new Map(Types::String, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a buffer of sourcse transaction record.
    /// </summary>
    /// <param name="_common">
    /// A buffer of sourcse transaction record: <c>LedgerJournalTrans</c> or <c>RAssetBudgetTrans</c>.
    /// </param>
    abstract protected void initInstance(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        budgetTransactionTypeAsset   = BudgetTransactionType::FixedAsset_RU;
        isBudgetTransStatusCompleted = BudgetParameters::find().IsAssetBudgetTransCreateAsCompleted_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateLedger</Name>
				<Source><![CDATA[
    boolean parmUpdateLedger(boolean _updateLedger = updateLedger)
    {
        updateLedger = _updateLedger;

        return updateLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// constructs the new instance of the RAssetLedgerBudgetUpdate class
    /// </summary>
    /// <param name="_common">
    /// a record of LedgerJournalTrans or RAssetBudgetTrans tables
    /// </param>
    /// <returns>
    /// the new instance of the RAssetLedgerBudgetUpdate class
    /// </returns>
    /// <exception cref="Exception::Error">
    /// calls the exception if the method parameter is not a record of LedgerJournalTrans or RAssetBudgetTrans tables
    /// </exception>
    static RAssetLedgerBudgetUpdate construct(Common _common)
    {
        RAssetLedgerBudgetUpdate   budgetUpdate;

        switch(_common.TableId)
        {
            case tableNum(LedgerJournalTrans):
                budgetUpdate = new RAssetLedgerBudgetUpdate_Journal();
                break;

            case tableNum(RAssetBudgetTrans):
                budgetUpdate = new RAssetLedgerBudgetUpdate_Trans();
                break;

            default:
                throw error("@SYS67821");
        }

        budgetUpdate.initInstance(_common);

        return budgetUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetLedgerBudgetUpdate budgetUpdate = RAssetLedgerBudgetUpdate::construct(_args.record());

        budgetUpdate.parmUpdateLedger(_args.parmEnum());

        if (budgetUpdate.prompt())
        {
            budgetUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>