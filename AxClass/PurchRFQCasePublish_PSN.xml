<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCasePublish_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class publishes the request for quotations to the <c>PurchRFQPublishTable_PSN</c>
/// and <c>PurchRFQPublishLine_PSN</c> tables.
/// </summary>
class PurchRFQCasePublish_PSN extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyRFQCaseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the request for quotation lines to the <c>PurchRFQPublishLine_PSN</c> table.
    /// </summary>
    /// <param name="_purchRFQCaseRecId">
    /// The record ID of the request for quotation that needs to be copied.
    /// </param>
    /// <param name="_purchRFQCaseId">
    /// The case ID of the request for quotation that needs to be copied.
    /// </param>
    private void copyRFQCaseLines(PurchRFQCaseRecId _purchRFQCaseRecId, PurchRFQCaseId _purchRFQCaseId)
    {
        PurchRFQPublishTable_PSN purchRFQPublishTable;
        PurchRFQCaseLine         purchRFQCaseLine;
        PurchRFQPublishLine_PSN  purchRFQPublishLine;

        ttsbegin;

        insert_recordset purchRFQPublishLine (PurchRFQPublishTable_PSN,
                                              LineItemType,
                                              ItemId,
                                              ExternalItemId,
                                              LineNumber,
                                              ItemName,
                                              LineNum,
                                              CategoryId,
                                              DeliveryDate,
                                              PurchQty,
                                              PurchUnit,
                                              CurrencyCode)
            select RecId from purchRFQPublishTable
                where purchRFQPublishTable.PurchRFQCaseTable == _purchRFQCaseRecId
                join LineItemType,
                     ItemId,
                     ExternalItemId,
                     LineNumber,
                     ItemName,
                     LineNum,
                     CategoryId,
                     DeliveryDate,
                     PurchQty,
                     PurchUnit,
                     CurrencyCode
                    from purchRFQCaseLine
                    where purchRFQCaseLine.rfqCaseId == _purchRFQCaseId;

        DocuRef docuRef, docuRefLocal;
        
        // Insert DocuRef records for the <c>PurchRFQPublishLine_PSN</c> table from <c>PurchRFQCaseLine</c> table.
        insert_recordset Docuref (ValueRecId,
                                  Name,
                                  TypeId,
                                  ActualCompanyId,
                                  Author,
                                  Restriction,
                                  RefTableId,
                                  RefRecId,
                                  RefCompanyId)
             select ValueRecId,
                    Name,
                    TypeId,
                    ActualCompanyId,
                    Author,
                    Restriction
                from docuRefLocal
                join TableId,
                     RecId,
                     dataAreaId
                from purchRFQPublishLine
                    exists join purchRFQPublishTable
                        where purchRFQPublishTable.RecId == purchRFQPublishLine.PurchRFQPublishTable_PSN
                            && purchRFQPublishTable.PurchRFQCaseTable == _purchRFQCaseRecId
                        exists join purchRFQCaseLine
                            where purchRFQCaseLine.RecId == docuRefLocal.RefRecId
                                && purchRFQCaseLine.TableId == docuRefLocal.RefTableId
                                && purchRFQCaseLine.dataAreaId == docuRefLocal.RefCompanyId
                                && purchRFQCaseLine.RFQCaseId == _purchRFQCaseId
                                && purchRFQCaseLine.LineNumber == purchRFQPublishLine.LineNumber
                                && docuRefLocal.Restriction == DocuRestriction::External;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRFQCaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the request for quotation header to the <c>PurchRFQPublishTable_PSN</c> table.
    /// </summary>
    /// <param name="_purchRFQCaseRecId">
    /// The record ID of the request for quotation that needs to be copied.
    /// </param>
    protected void copyRFQCaseTable(PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        ttsbegin;

        DocuRef docuRef;
        PurchRFQPublishTable_PSN purchRFQPublishTable = PurchRFQPublishTable_PSN::findByCaseRecId(_purchRFQCaseRecId);

        if (purchRFQPublishTable)
        {
            // Delete DocuRef records for <c>PurchRFQPublishTable_PSN</c> table
            delete_from docuRef
                where docuRef.RefTableId == tableNum(PurchRFQPublishTable_PSN)
                    && docuRef.RefRecId == purchRFQPublishTable.RecId
                    && docuRef.RefCompanyId == purchRFQPublishTable.DataAreaId;
        
            PurchRFQPublishLine_PSN purchRFQPublishLine;

            // Delete DocuRef records for <c>PurchRFQPublishLine_PSN</c> table
            delete_from docuRef
                exists join purchRFQPublishLine
                where docuRef.RefTableId == tableNum(PurchRFQPublishLine_PSN)
                    && docuRef.RefRecId == purchRFQPublishLine.RecId
                    && docuRef.RefCompanyId == purchRFQPublishLine.DataAreaId
                    && purchRFQPublishLine.PurchRFQPublishTable_PSN == purchRFQPublishTable.RecId;

            delete_from purchRFQPublishTable where purchRFQPublishTable.PurchRFQCaseTable == _purchRFQCaseRecId;
        }

        PurchRFQCaseTable purchRFQCaseTable;

        insert_recordset purchRFQPublishTable (CurrencyCode,
                                               DeliveryDate,
                                               DeliveryName,
                                               DeliveryPostalAddress,
                                               ExpiryDateTime,
                                               Requester,
                                               PurchRFQCaseTable,
                                               RequestingDepartment)
            select CurrencyCode,
                   DeliveryDate,
                   DeliveryName,
                   DeliveryPostalAddress,
                   ExpiryDateTime,
                   Requester,
                   RecId,
                   RequestingDepartment
                from purchRFQCaseTable
                where purchRFQCaseTable.RecId == _purchRFQCaseRecId;

        DocuRef docuRefLocal;

        // Insert DocuRef records for the <c>PurchRFQPublishTable_PSN</c> table from <c>PurchRFQCaseTable</c> table.
        insert_recordset Docuref (ValueRecId,
                                  Name,
                                  TypeId,
                                  ActualCompanyId,
                                  Author,
                                  Restriction,
                                  RefTableId,
                                  RefRecId,
                                  RefCompanyId)
             select ValueRecId,
                    Name,
                    TypeId,
                    ActualCompanyId,
                    Author,
                    Restriction
                from docuRefLocal
                join TableId,
                     RecId,
                     dataAreaId
                from purchRFQPublishTable
                    exists join purchRFQCaseTable
                    where purchRFQCaseTable.RecId == docuRefLocal.RefRecId
                        && purchRFQCaseTable.TableId == docuRefLocal.RefTableId
                        && purchRFQCaseTable.dataAreaId == docuRefLocal.RefCompanyId
                        && purchRFQCaseTable.RecId == purchRFQPublishTable.PurchRFQCaseTable
                        && purchRFQCaseTable.RecId == _purchRFQCaseRecId
                        && docuRefLocal.Restriction == DocuRestriction::External;
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRFQPublishAmendment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the RFQ amendment record to the <c>PurchRFQPublishAmendment</c> and <c>Docuref</c> table.
    /// </summary>
    /// <param name="_purchRFQCaseRecId">
    /// The record ID of the <c>PurchRFQCaseTable</c> table that has the amendment to be copied.
    /// </param>
    public void createRFQPublishAmendment(PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        DocuRef                   docuRef;
        DocuRef                   docuRefLocal;
        PurchRFQAmendment         purchRFQAmendment;
        PurchRFQPublishAmendment  purchRFQPublishAmendment;

        ttsBegin;        
       
        // Delete DocuRef records for <c>PurchRFQPublishAmendment</c> table
        delete_from docuRef        
            exists join purchRFQPublishAmendment                    
                where docuRef.RefTableId == tableNum(PurchRFQPublishAmendment)
                    && docuRef.RefRecId == purchRFQPublishAmendment.RecId
                    && docuRef.RefCompanyId == purchRFQPublishAmendment.DataAreaId
                    && purchRFQPublishAmendment.PurchRFQCaseTable == _purchRFQCaseRecId;

        delete_from purchRFQPublishAmendment
            where purchRFQPublishAmendment.PurchRFQCaseTable ==  _purchRFQCaseRecId;

        insert_recordset purchRFQPublishAmendment (PurchRFQAmendment,
                                                   Name,
                                                   Description,
                                                   PurchRFQCaseTable)
            select  RecId,
                    Name,
                    Description,
                    _purchRFQCaseRecId
                from purchRFQAmendment
                    where purchRFQAmendment.PurchRFQCaseTable == _purchRFQCaseRecId;

        insert_recordset Docuref (ValueRecId,
                                  Name,
                                  TypeId,
                                  ActualCompanyId,
                                  Author,
                                  Restriction,
                                  RefTableId,
                                  RefRecId,
                                  RefCompanyId)
             select ValueRecId,
                    Name,
                    TypeId,
                    ActualCompanyId,
                    Author,
                    Restriction
                from docuRefLocal
                join TableId,
                     RecId,
                     dataAreaId
                from purchRFQPublishAmendment
                    where purchRFQPublishAmendment.PurchRFQCaseTable   == _purchRFQCaseRecId
                    exists join purchRFQAmendment
                        where purchRFQAmendment.RecId       == docuRefLocal.RefRecId
                            && purchRFQAmendment.TableId    == docuRefLocal.RefTableId
                            && purchRFQAmendment.dataAreaId == docuRefLocal.RefCompanyId
                            && purchRFQAmendment.RecId      == purchRFQPublishAmendment.PurchRFQAmendment
                            && docuRefLocal.Restriction == DocuRestriction::External;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishRFQAmendment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the RFQ amendment for the given record ID to the vendor portal.
    /// </summary>
    /// <param name="_purchRFQCaseRecId">
    /// The record ID of the <c>PurchRFQCaseTable</c> table that needs to be copied.
    /// </param>
    public void publishRFQAmendment(PurchRFQCaseRecId _purchRFQCaseRecId)
    {
        this.createRFQPublishAmendment(_purchRFQCaseRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishRFQCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publishes the request for quotation for the given case ID to the vendor portal.
    /// </summary>
    /// <param name="_publishContract">
    /// The data contract to be used by this instance.
    /// </param>    
    public void publishRFQCase(PurchRFQCasePublishContract_PSN _publishContract)
    {
        PurchRFQCaseRecId purchRFQCaseRecId = _publishContract.parmPurchRFQCaseRecId();
        PurchRFQCaseId purchRFQCaseId = PurchRFQCaseTable::findRecId(purchRFQCaseRecId).RFQCaseId;

        if (this.isValidRFQCase(purchRFQCaseId))
        {
            ttsbegin;
            this.copyRFQCaseTable(purchRFQCaseRecId);
            this.copyRFQCaseLines(purchRFQCaseRecId, purchRFQCaseId);
            this.publishRFQAmendment(purchRFQCaseRecId);

            info(strFmt("@PublicSector:PublishRFQSuccess", purchRFQCaseId));
			ttscommit;
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>PurchRFQCasePublish_PSN</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of <c>PurchRFQCasePublish_PSN</c> class.
    /// </returns>
    public static PurchRFQCasePublish_PSN construct()
    {
        PurchRFQCasePublish_PSN publishController;

        publishController = new PurchRFQCasePublish_PSN(
            classStr(PurchRFQCasePublish_PSN),
            methodStr(PurchRFQCasePublish_PSN, publishRFQCase),
            SysOperationExecutionMode::Synchronous);

        publishController.parmShowDialog(false);

        return publishController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Class description for publish process.
    /// </summary>
    /// <returns>The text for class description</returns>
    public static ClassDescription description()
    {
        return "@PublicSector:RequestForQuotationPublish";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caption which is displayed in the progress bar when publish runs.
    /// </summary>
    /// <returns>The text for class description</returns>
    public ClassDescription caption()
    {
        return PurchRFQCasePublish_PSN::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidRFQCase</Name>
				<Source><![CDATA[
    private boolean isValidRFQCase(PurchRFQCaseId _purchRFQCaseId)
    {         
        boolean isValidCase = !PurchRFQCaseLine::hasNoLineOrZeroQuantityLineByRFQCaseID(_purchRFQCaseId);
        
		if (!isValidCase)
        {
            throw error("@PublicSector:PublishRFQNoLineOrZeroQuantityError");
		}

        return isValidCase;
	}

]]></Source>
			</Method>
			<Method>
				<Name>startPublish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the arguments for the publish menu item to start the process and runs the menu item.
    /// </summary>
    /// <param name = "_purchRFQCaseTable">The RFQ case table record</param>
    /// <param name = "_element">The caller form</param>
    public static void startPublish(PurchRFQCaseTable _purchRFQCaseTable, Object _element)
    {
        if (!_purchRFQCaseTable)
        {
            throw error(Error::missingRecord(tableStr(PurchRFQCaseTable)));
        }
        else
        {
            Args args = new Args();
            args.record(_purchRFQCaseTable);
            args.caller(_element);
            new MenuFunction(menuItemActionStr(PurchRFQCasePublishProcess_PSN), MenuItemType::Action).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (args
            && args.record()
            && args.record().TableId == tableNum(PurchRFQCaseTable))
        {
            PurchRFQCaseTable purchRFQCaseTable = args.record() as PurchRFQCaseTable;
            PurchRFQCasePublish_PSN purchRFQCasePublish = PurchRFQCasePublish_PSN::construct();
            
            PurchRFQCasePublishContract_PSN publishContract = purchRFQCasePublish.getBaseDataContract() as PurchRFQCasePublishContract_PSN;            
            publishContract.parmPurchRFQCaseRecId(purchRFQCaseTable.RecId);

            purchRFQCasePublish.startOperation();

            //Refreshing the caller form
            if (purchRFQCaseTable)
            {
                FormDataSource callingFormDataSource = FormDataUtil::getFormDataSource(purchRFQCaseTable);

                if (callingFormDataSource)
                {
                    callingFormDataSource.reread();
                    callingFormDataSource.rereadReferenceDataSources();
                    callingFormDataSource.research(true);
                }
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the operation supports running in a different, non interactive
    /// session than the one from which it was launched from the client.
    /// </summary>
    /// <returns>If true operation will be run synchrnously in an non GUI asynchronous session</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>