<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGroupMemberLineQueryProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailGroupMemberLineQueryProvider</c> builds queries to find products with and without variants.
/// </summary>
class RetailGroupMemberLineQueryProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availableVariantsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query to which returns all variants, or all for a given master product
    /// </summary>
    /// <param name="_category">
    /// RecId of a containing category for variant. 0 for no filter.
    /// </param>
    /// <param name="_product">
    /// RecId of the Product master. 0 for no filter.
    /// </param>
    /// <param name="_dataAreaId">
    /// Optional data area Id of the Legal entity to filter by
    /// </param>
    /// <returns>
    /// Query to find all variants of the given master product, or all variants if no master given
    /// </returns>
    public  static Query availableVariantsQuery(EcoResCategoryId _category, EcoResProductRecId _product, DataAreaId _dataAreaId = '')
    {
        return RetailGroupMemberLineQueryProvider::availableVariantsQueryByCatalog(_category, _product, _dataAreaId, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableVariantsQueryByCatalog</Name>
				<Source><![CDATA[
    internal static final Query availableVariantsQueryByCatalog(EcoResCategoryId _category, EcoResProductRecId _product, DataAreaId _dataAreaId, CatalogRefRecId _catalogRecId)
    {
        Query query = new Query();

        // if product is specified, it takes precedence for filtering
        if (_product)
        {
            query.addDataSource(tableNum(EcoResDistinctProductVariant))
                .addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster))
                .value(queryValue(_product));
        }
        // otherwise filter by category if it exists
        else if (_category)
        {
            RetailCategoryContainmentLookup::synchronizeCategoriesLookup();

            query.addDataSource(tableNum(EcoResDistinctProductVariant))
                .addDataSource(tableNum(RetailAllProductCategories))
                .addLink(fieldNum(EcoResDistinctProductVariant, ProductMaster),
                          fieldNum(RetailAllProductCategories, Product));

            query.dataSourceTable(tableNum(RetailAllProductCategories))
                .fetchMode(QueryFetchMode::One2One);

            query.dataSourceTable(tableNum(RetailAllProductCategories))
                .addRange(fieldNum(RetailAllProductCategories, Category))
                .value(queryValue(_category));
        }
        // otherwise list all variants
        else
        {
            query.addDataSource(tableNum(EcoResDistinctProductVariant));
        }

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId).RecId)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            query.dataSourceTable(tableNum(EcoResDistinctProductVariant))
                .addDataSource(tableNum(InventDimCombination))
                .joinMode(JoinMode::ExistsJoin);

            query.dataSourceTable(tableNum(InventDimCombination))
                .fetchMode(QueryFetchMode::One2One);

            query.dataSourceTable(tablenum(InventDimCombination))
                    .addLink(fieldNum(EcoResDistinctProductVariant, RecId),
                    fieldNum(InventDimCombination, DistinctProductVariant));
        }

        if (_catalogRecId)
        {
            QueryBuildDataSource qbds = query
                .dataSourceTable(tableNum(EcoResDistinctProductVariant))
                .addDataSource(tableNum(CatalogProduct));
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(CatalogProduct, Product));
            qbds.addRange(fieldNum(CatalogProduct, Catalog)).value(queryValue(_catalogRecId));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containedProductsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns query to find all products contained in a given Retail category.
    ///   This category can be standard retail product category or retail special category.
    /// </summary>
    /// <param name="_categoryId">
    /// Retail category RecId to find products of
    /// </param>
    /// <param name="_includeSubcategories">
    /// If the query should include products in subcategories; Default is true.
    /// </param>
    /// <param name="_dataAreaId">
    /// Optional data area Id of the Legal entity to filter by
    /// </param>
    /// <returns>
    /// Query to find products belonging to the given Retail category
    /// </returns>
    /// <remarks>
    /// Automatically forces synchronization of RetailCategoryContainmentLookup, which can be expensive if not recently synchronized
    /// </remarks>
    public static Query containedProductsQuery(EcoResCategoryId _categoryId, boolean _includeSubcategories = true, DataAreaId _dataAreaId = '')
    {
        EcoResCategory category = EcoResCategory::find(_categoryId);

        if (EcoResCategoryHierarchyRole::existRoleHierarchyPair(
                    EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, category.CategoryHierarchy))
        {
            RetailCategoryContainmentLookup::synchronizeCategoriesLookup();
            return RetailGroupMemberLineQueryProvider::specialProductCategoryQuery(_categoryId, _dataAreaId);
        }
        else
        {
            return RetailGroupMemberLineQueryProvider::standardProductCategoryQuery(_categoryId, _includeSubcategories, _dataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>containedProductsCategoryHierarchyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns query to find all products contained in a given Retail category hierarchy.
    /// </summary>
    /// <param name="_categoryHierarchyId">
    /// Retail category hierarchy RecId to find the products.
    /// </param>
    /// <param name="_dataAreaId">
    /// Optional data area Id of the Legal entity to filter the products.
    /// </param>
    /// <returns>
    /// Query to find products belonging to the given Retail category hierarchy.
    /// </returns>
    internal static Query containedProductsCategoryHierarchyQuery(EcoResCategoryHierarchyId _categoryHierarchyId, DataAreaId _dataAreaId = '')
    {
        if (EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, _categoryHierarchyId))
        {
            return RetailGroupMemberLineQueryProvider::specialProductCategoryHierarchyQuery(_categoryHierarchyId, _dataAreaId);
        }
        else
        {
            return RetailGroupMemberLineQueryProvider::standardProductCategoryHierarchyQuery(_categoryHierarchyId, _dataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>distinctAndMasterProductQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a query which finds all products which are not variants
    /// </summary>
    /// <param name="_dataAreaId">
    /// Optional data area Id of the legal entity to filter by
    /// </param>
    /// <returns>
    /// Query to find all products which are distinct or masters
    /// </returns>
    public static Query distinctAndMasterProductQuery(DataAreaId _dataAreaId = '')
    {
        Query query = new Query();

        QueryBuildDataSource product_ds = query.addDataSource(tableNum(EcoResProduct));

        product_ds.addSelectionField(fieldnum(EcoResProduct, DisplayProductNumber));
        product_ds.addSelectionField(fieldnum(EcoResProduct, SearchName));
        product_ds.addSelectionField(fieldnum(EcoResProduct, ProductType));

        product_ds.addSelectionField(fieldnum(EcoResProduct, DataAreaId));
        product_ds.addSelectionField(fieldnum(EcoResProduct, Partition));
        product_ds.addSelectionField(fieldnum(EcoResProduct, RecId));

        product_ds.addRange(fieldNum(EcoResProduct, InstanceRelationType)).value(queryNotValueCon_W([tableNum(EcoResDistinctProductVariant)]));

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId).RecId)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            product_ds.addDataSource(tableNum(InventTable))
                .addLink(fieldNum(EcoResProduct, RecId),
                          fieldNum(InventTable, Product));

            query.dataSourceTable(tableNum(InventTable))
                .fetchMode(QueryFetchMode::One2One);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specialProductCategoryQuery</Name>
				<Source><![CDATA[
    private static Query specialProductCategoryQuery(EcoResCategoryId _categoryId, DataAreaId _dataAreaId = '')
    {
        Query query = new Query();
        EcoResCategory category = EcoResCategory::find(_categoryId);

        QueryBuildDataSource product_ds =
            query.addDataSource(tableNum(EcoResProduct));
        product_ds
            .addRange(fieldNum(EcoResProduct, InstanceRelationType))
            .value(SysQuery::valueNot(tableNum(EcoResDistinctProductVariant)));

        QueryBuildDataSource retailProductCategory_ds =
            product_ds.addDataSource(tableNum(RetailAllProductCategories));

        retailProductCategory_ds.fetchMode(QueryFetchMode::One2One);
        retailProductCategory_ds
            .addLink(fieldNum(EcoResProduct, RecId),
                     fieldNum(RetailAllProductCategories, Product));

        retailProductCategory_ds
            .addRange(fieldNum(RetailAllProductCategories, Category))
            .value(queryValue(_categoryId));

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId))
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            query.dataSourceTable(tableNum(EcoResProduct))
                .addDataSource(tableNum(InventTable))
                .addLink(fieldNum(EcoResProduct, RecId),
                          fieldNum(InventTable, Product));

            query.dataSourceTable(tableNum(InventTable))
                .fetchMode(QueryFetchMode::One2One);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardProductCategoryQuery</Name>
				<Source><![CDATA[
    private static Query standardProductCategoryQuery(EcoResCategoryId _categoryId, boolean _includeSubcategories, DataAreaId _dataAreaId = '')
    {
        Query query = new Query();
        EcoResCategory category = EcoResCategory::find(_categoryId);

        QueryBuildDataSource product_ds =
            query.addDataSource(tableNum(EcoResProduct));
        QueryBuildDataSource categoryProduct_ds =
            product_ds.addDataSource(tableNum(EcoResProductCategory));
        QueryBuildDataSource category_ds =
            categoryProduct_ds.addDataSource(tableNum(EcoResCategory));

        categoryProduct_ds.fetchMode(QueryFetchMode::One2One);
        categoryProduct_ds
            .addLink(fieldNum(EcoResProduct, RecId),
                     fieldNum(EcoResProductCategory, Product));

        category_ds.fetchMode(QueryFetchMode::One2One);
        category_ds
            .addLink(fieldNum(EcoResProductCategory, Category),
                     fieldNum(EcoResCategory, RecId));
        category_ds
            .addRange(fieldNum(EcoResCategory, CategoryHierarchy))
            .value(queryValue(category.CategoryHierarchy));

        if (_includeSubcategories)
        {
            category_ds
                .addRange(fieldNum(EcoResCategory, NestedSetLeft))
                .value(queryRange(category.NestedSetLeft, 0));
            category_ds
                .addRange(fieldNum(EcoResCategory, NestedSetRight))
                .value(queryRange(0, category.NestedSetRight));
        }
        else
        {
            category_ds.addRange(fieldNum(EcoResCategory, RecId)).value(queryValue(_categoryId));
        }

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId))
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            query.dataSourceTable(tableNum(EcoResProduct))
                .addDataSource(tableNum(InventTable))
                .addLink(fieldNum(EcoResProduct, RecId),
                          fieldNum(InventTable, Product));

            query.dataSourceTable(tableNum(InventTable))
                .fetchMode(QueryFetchMode::One2One);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specialProductCategoryHierarchyQuery</Name>
				<Source><![CDATA[
    private static Query specialProductCategoryHierarchyQuery(EcoResCategoryHierarchyId _categoryHierarchyId, DataAreaId _dataAreaId = '')
    {
        // Initialize query.
        Query query = new Query();
        EcoResCategory category = EcoResCategory::getRoot(_categoryHierarchyId);

        // Add the EcoResProduct datasource to query.
        QueryBuildDataSource product_ds =
            query.addDataSource(tableNum(EcoResProduct));

        // Add the EcoResDistinctProductVariant datasource to query.
        product_ds
            .addRange(fieldNum(EcoResProduct, InstanceRelationType))
            .value(SysQuery::valueNot(tableNum(EcoResDistinctProductVariant)));

        // Add the RetailAllProductCategories datasource to query.
        QueryBuildDataSource retailProductCategory_ds =
            product_ds.addDataSource(tableNum(RetailAllProductCategories));
        retailProductCategory_ds.fetchMode(QueryFetchMode::One2One);
        retailProductCategory_ds
            .addLink(fieldNum(EcoResProduct, RecId), fieldNum(RetailAllProductCategories, Product));

        // Add Range to restrict the query with given category.
        retailProductCategory_ds
            .addRange(fieldNum(RetailAllProductCategories, Category))
            .value(queryValue(category.RecId));

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId))
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            query.dataSourceTable(tableNum(EcoResProduct))
                .addDataSource(tableNum(InventTable))
                .addLink(fieldNum(EcoResProduct, RecId), fieldNum(InventTable, Product));

            query.dataSourceTable(tableNum(InventTable))
                .fetchMode(QueryFetchMode::One2One);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardProductCategoryHierarchyQuery</Name>
				<Source><![CDATA[
    private static Query standardProductCategoryHierarchyQuery(EcoResCategoryHierarchyId _categoryHierarchyId, DataAreaId _dataAreaId = '')
    {
        // Initialize query.
        Query query = new Query();

        EcoResCategory category = EcoResCategory::getRoot(_categoryHierarchyId);

        // Add the EcoResProduct datasource to query.
        QueryBuildDataSource product_ds =
            query.addDataSource(tableNum(EcoResProduct));

        // Add the EcoResProductCategory datasource to query.
        QueryBuildDataSource categoryProduct_ds =
            product_ds.addDataSource(tableNum(EcoResProductCategory));

        // Add the EcoResCategory datasource to query.
        QueryBuildDataSource category_ds =
            categoryProduct_ds.addDataSource(tableNum(EcoResCategory));

        categoryProduct_ds.fetchMode(QueryFetchMode::One2One);
        categoryProduct_ds
            .addLink(fieldNum(EcoResProduct, RecId), fieldNum(EcoResProductCategory, Product));
        category_ds.fetchMode(QueryFetchMode::One2One);
        category_ds
            .addLink(fieldNum(EcoResProductCategory, Category), fieldNum(EcoResCategory, RecId));

        // Add Range to restrict the query with given category hierarchy.
        category_ds
            .addRange(fieldNum(EcoResCategory, CategoryHierarchy))
            .value(queryValue(_categoryHierarchyId));

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId))
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            query.dataSourceTable(tableNum(EcoResProduct))
                .addDataSource(tableNum(InventTable))
                .addLink(fieldNum(EcoResProduct, RecId), fieldNum(InventTable, Product));

            query.dataSourceTable(tableNum(InventTable))
                .fetchMode(QueryFetchMode::One2One);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableAssortmentVariantsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query to returns all variants, or all for a given hierarchy, category and  master product.
    /// </summary>
    /// <param name="_groupMember">
    /// The record of the <c>RetailGroupMemberLine</c> record.
    /// </param>
    /// <param name="_dataAreaId">
    /// Optional data area Id of the Legal entity to filter the products.
    /// </param>
    /// <returns>
    /// Query to find all variants of the given hierarchy, category and  master product or all variants if not given.
    /// </returns>
    public  static Query availableAssortmentVariantsQuery(RetailGroupMemberLine _groupMember, DataAreaId _dataAreaId = '')
    {
        Query query = new Query();

        EcoResCategory category;
        if (_groupMember.Category)
        {
            category = EcoResCategory::find(_groupMember.Category);
        }
        else if (_groupMember.CategoryHierarchy)
        {
            category = EcoResCategory::getRoot(_groupMember.CategoryHierarchy);
        }

        if (EcoResCategoryHierarchyRole::existRoleHierarchyPair(EcoResCategoryNamedHierarchyRole::RetailSpecialGroup, category.CategoryHierarchy))
        {
            QueryBuildDataSource productVariant_ds = query.addDataSource(tableNum(EcoResDistinctProductVariant));

            if (_groupMember.Product)
            {
                productVariant_ds.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster))
                    .value(queryValue(_groupMember.Product));
            }

            QueryBuildDataSource retailAllProductCategories_ds = productVariant_ds.addDataSource(tableNum(RetailAllProductCategories));
            retailAllProductCategories_ds
                .addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(RetailAllProductCategories, Product));
            retailAllProductCategories_ds.fetchMode(QueryFetchMode::One2One);

            retailAllProductCategories_ds.addRange(fieldNum(RetailAllProductCategories, Category))
                .value(queryValue(category.RecId));

			return query;
        }

        // if product is specified, it takes precedence for filtering
        if (_groupMember.Product)
        {
            query.addDataSource(tableNum(EcoResDistinctProductVariant))
                .addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster))
                .value(queryValue(_groupMember.Product));
        }
        // otherwise filter by category & category hierarchy if it exists
        else if (_groupMember.Category || _groupMember.CategoryHierarchy)
        {
            RetailCategoryContainmentLookup::synchronizeCategoriesLookup();

            query.addDataSource(tableNum(EcoResDistinctProductVariant))
                    .addDataSource(tableNum(RetailAllProductCategories))
                    .addLink(fieldNum(EcoResDistinctProductVariant, ProductMaster), fieldNum(RetailAllProductCategories, Product));

            query.dataSourceTable(tableNum(RetailAllProductCategories))
                    .fetchMode(QueryFetchMode::One2One);

            query.dataSourceTable(tableNum(RetailAllProductCategories))
                    .addRange(fieldNum(RetailAllProductCategories, Category))
                    .value(queryValue(category.RecId));
        }
        // otherwise list all variants
        else
        {
            query.addDataSource(tableNum(EcoResDistinctProductVariant));
        }

        if (_dataAreaId && CompanyInfo::findDataArea(_dataAreaId).RecId)
        {
            query.allowCrossCompany(true);
            query.addCompanyRange(_dataAreaId);

            query.dataSourceTable(tableNum(EcoResDistinctProductVariant))
                    .addDataSource(tableNum(InventDimCombination))
                    .joinMode(JoinMode::ExistsJoin);

            query.dataSourceTable(tableNum(InventDimCombination))
                    .fetchMode(QueryFetchMode::One2One);

            query.dataSourceTable(tablenum(InventDimCombination))
                    .addLink(fieldNum(EcoResDistinctProductVariant, RecId), fieldNum(InventDimCombination, DistinctProductVariant));
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>