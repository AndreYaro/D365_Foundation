<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationProcessAssignment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAutomationProcessAssignment</c> assigns customers to customer process automations.
/// </summary>
internal final class CustAutomationProcessAssignment
{
    private CustAutomationStrategyName strategyName;
    private AccountNum accountNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processCustomerAssignments</Name>
				<Source><![CDATA[
    internal CustAutomationAssignmentTmp processCustomerAssignments()
    {
        CustAutomationAssignmentTmp custAssignment;
        custAssignment = this.assignCustomersByHierarchy();
        
        if (strategyName)
        {
            this.assignManuallyAdjustedCustomers(custAssignment);
        }
        
        return custAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignManuallyAdjustedCustomers</Name>
				<Source><![CDATA[
    private void assignManuallyAdjustedCustomers(CustAutomationAssignmentTmp _assignment)
    {
        CustAutomationManualAssignment manualAssignment;

        insert_recordset _assignment (AccountNum, Name, StrategyName)
            select AccountNum, Name, StrategyName from manualAssignment
                where manualAssignment.StrategyName == strategyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCustomersByHierarchy</Name>
				<Source><![CDATA[
    private CustAutomationAssignmentTmp assignCustomersByHierarchy()
    {
        CustAutomationStrategy strategy;
        CustAutomationAssignmentTmp custAssignment;

        while select PoolId, StrategyName, CustExclude, CustExcludeAmount from strategy
            order by strategy.Hierarchy
        {
            custAssignment = this.assignCustomersByPool(custAssignment, strategy.PoolId);
            this.updateCustomerStrategy(custAssignment, strategy.StrategyName, strategy.PoolId);

            // Exit if we inserted the strategy being searched for.
            if (strategyName && strategy.StrategyName == strategyName)
            {
                CustAutomationAssignmentTmp::keepStrategyDeleteOthers(custAssignment, strategyName);

                // Exclude customers by aging balance.
                if (strategy.CustExclude == CustAutomationExcludeBy::Balance)
                {
                    this.excludeCustomersByBalance(custAssignment, strategy.StrategyName, strategy.PoolId, strategy.CustExcludeAmount);
                }

                return custAssignment;
            }

            // Exit if we found the customer being searched for.
            if (accountNum)
            {
                CustAutomationAssignmentTmp localAssignment = this.findSingleCustomerAssignment(custAssignment);
                if (localAssignment.AccountNum)
                {
                    return localAssignment;
                }
            }
        }

        return custAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSingleCustomerAssignment</Name>
				<Source><![CDATA[
    private CustAutomationAssignmentTmp findSingleCustomerAssignment(CustAutomationAssignmentTmp _custAssignment)
    {
        CustAutomationAssignmentTmp localAssignment;
        localAssignment = CustAutomationAssignmentTmp::findByAccountNum(_custAssignment, accountNum);
        return localAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCustomersByPool</Name>
				<Source><![CDATA[
    private CustAutomationAssignmentTmp assignCustomersByPool(CustAutomationAssignmentTmp _mainCustomerAssignment, CustCollectionsPoolId _poolId)
    {
        CustCollectionsPool custCollectionsPool = CustCollectionsPool::findByPoolId(_poolId);

        Query q = custCollectionsPool.convertToQueryObjectForInsertRecordset();
        QueryBuildDataSource qbdsCustTable = q.dataSourceTable(tableNum(CustTable));
        qbdsCustTable.addGroupByAndSelectionField(fieldNum(CustTable, AccountNum));

        this.ignoreManualAssignmentCustomers(q);
        this.ignoreExistingCustomers(q, _mainCustomerAssignment);

        Map fieldMap = new Map(Types::String, Types::Container);
        fieldMap.insert(fieldStr(CustAutomationAssignmentTmp, AccountNum), [qbdsCustTable.uniqueId(), fieldStr(CustTable, AccountNum)]);

        CustAutomationAssignmentTmp newCustAssignment;
        Query::insert_recordset(newCustAssignment, fieldMap, q);

        this.copyNewCustomersToCustAutomationAssignment(_mainCustomerAssignment, newCustAssignment);
        return _mainCustomerAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyNewCustomersToCustAutomationAssignment</Name>
				<Source><![CDATA[
    private void copyNewCustomersToCustAutomationAssignment(CustAutomationAssignmentTmp _mainCustomerAssignment, CustAutomationAssignmentTmp _newCustomerAssignment)
    {
        insert_recordset _mainCustomerAssignment (AccountNum, Name, StrategyName, PoolId)
            select AccountNum, Name, StrategyName, PoolId from _newCustomerAssignment
                where _newCustomerAssignment.AccountNum != _mainCustomerAssignment.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerStrategy</Name>
				<Source><![CDATA[
    private void updateCustomerStrategy(CustAutomationAssignmentTmp _assignment, CustAutomationStrategyName _strategyName, CustCollectionsPoolId _poolId)
    {
        DirPartyTable dirPartyTable;
        CustTable custTable;

        update_recordset _assignment
            setting 
                StrategyName = _strategyName,
                PoolId = _poolId,
                Name = dirPartyTable.Name
            where _assignment.StrategyName == ''
            join Party from custTable
                where custTable.AccountNum == _assignment.AccountNum
            join Name from dirPartyTable
                where custTable.Party == dirPartyTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreManualAssignmentCustomers</Name>
				<Source><![CDATA[
    private void ignoreManualAssignmentCustomers(Query _q)
    {
        QueryBuildDataSource qbds = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(CustAutomationManualAssignment));
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustAutomationManualAssignment, AccountNum));
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.fields().dynamic(NoYes::No);
        qbds.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreExistingCustomers</Name>
				<Source><![CDATA[
    private void ignoreExistingCustomers(Query _q, CustAutomationAssignmentTmp _assignment)
    {
        QueryBuildDataSource qbds = _q.dataSourceTable(tableNum(CustTable)).addDataSource(tableNum(CustAutomationAssignmentTmp));
        qbds.addLink(fieldNum(CustTable, AccountNum), fieldNum(CustAutomationAssignmentTmp, AccountNum));
        qbds.cursor(_assignment);
        qbds.joinMode(JoinMode::NoExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.fields().dynamic(NoYes::No);
        qbds.fields().clearFieldList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignCustomersToProcesses</Name>
				<Source><![CDATA[
    internal static CustAutomationAssignmentTmp assignCustomersToProcesses()
    {
        CustAutomationProcessAssignment processAssignment = new CustAutomationProcessAssignment();
        return processAssignment.processCustomerAssignments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForStrategy</Name>
				<Source><![CDATA[
    internal static CustAutomationAssignmentTmp newForStrategy(CustAutomationStrategyName _strategyName)
    {
        if (!CustAutomationStrategy::findByName(_strategyName))
        {
            error(strFmt("@CustAutomation:ProcessNotFound", _strategyName));
        }

        CustAutomationProcessAssignment processAssignment = new CustAutomationProcessAssignment();
        processAssignment.parmCustAutomationStrategyName(_strategyName);
        return processAssignment.processCustomerAssignments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForCustomer</Name>
				<Source><![CDATA[
    internal static CustAutomationAssignmentTmp newForCustomer(AccountNum _accountNum)
    {
        if (!CustTable::find(_accountNum))
        {
            error(strFmt("@CustAutomation:CustNotFound", _accountNum));
        }

        CustAutomationProcessAssignment processAssignment = new CustAutomationProcessAssignment();

        CustAutomationManualAssignment manualAssignment = CustAutomationManualAssignment::findByAccountNum(_accountNum);
        if (manualAssignment)
        {
            return processAssignment.assignToTmpFromManualAssignment(manualAssignment);
        }

        processAssignment.parmAccountNum(_accountNum);
        return processAssignment.processCustomerAssignments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignToTmpFromManualAssignment</Name>
				<Source><![CDATA[
    private CustAutomationAssignmentTmp assignToTmpFromManualAssignment(CustAutomationManualAssignment _manualAssignment)
    {
        CustAutomationAssignmentTmp custAssignment;
        custAssignment.AccountNum = _manualAssignment.AccountNum;
        custAssignment.StrategyName = _manualAssignment.StrategyName;
        custAssignment.Name = _manualAssignment.Name;
        custAssignment.insert();

        return custAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeCustomersByBalance</Name>
				<Source><![CDATA[
    private void excludeCustomersByBalance(CustAutomationAssignmentTmp _assignment, CustAutomationStrategyName _strategyName, CustCollectionsPoolId _poolId, AmountMST _custExcludeAmount)
    {
        CustAging custAging;
        CustAgingLegalEntity custAgingLegalEntity;
        CompanyInfo companyInfo;

        var statRepInterval = CustParameters::find().CollectionsStatRepInterval;
 
        delete_from _assignment
             where _assignment.StrategyName == _strategyName
                 && _assignment.PoolId == _poolid
             exists join custaging
                 where custAging.StatRepInterval == statRepInterval
                     && custAging.CustTable == _assignment.AccountNum
             exists join custAgingLegalEntity
                 where custAgingLegalEntity.CustAging == custAging.RecId
                    && custAgingLegalEntity.AmountDueMst < _custExcludeAmount
             exists join companyInfo
                 where companyInfo.RecId == custAgingLegalEntity.SourceLegalEntity
                     && companyInfo.DataArea == curExt();
      
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAutomationStrategyName</Name>
				<Source><![CDATA[
    internal CustAutomationStrategyName parmCustAutomationStrategyName(CustAutomationStrategyName _strategyName = strategyName)
    {
        strategyName = _strategyName;
        return strategyName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountNum</Name>
				<Source><![CDATA[
    internal AccountNum parmAccountNum(AccountNum _accountNum = accountNum)
    {
        accountNum = _accountNum;
        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>