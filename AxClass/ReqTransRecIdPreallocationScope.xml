<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransRecIdPreallocationScope</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Defines the scope within which the application code is preallocating and assigning RecId values to records.
/// </summary>
public final class ReqTransRecIdPreallocationScope implements System.IDisposable
{
    private const int64 DefaultPreallocatedRecIdsBlockSize = 5000;

    private static ReqTransRecIdPreallocationScope rootInstance;

    private boolean isTopLevelScope;
    private RefRecId nextRecId;
    private RefRecId recIdAllocationLimit;
    private SystemSequence systemSequence;
    private int64 preallocatedRecIdsBlockSize;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a new scope for preallocating RecId's.
    /// </summary>
    [Hookable(false)]
    public static ReqTransRecIdPreallocationScope construct()
    {
        ReqTransRecIdPreallocationScope result = new ReqTransRecIdPreallocationScope();

        result.enablePreallocation();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enablePreallocation</Name>
				<Source><![CDATA[
    private void enablePreallocation()
    {
        if (rootInstance == null)
        {
            ReqParameters parameters = ReqParameters::find();

            if (!parameters.SkipPreallocatingRecIds)
            {
                preallocatedRecIdsBlockSize = parameters.PreallocatedRecIdBlockSize;
                if (!preallocatedRecIdsBlockSize)
                {
                    preallocatedRecIdsBlockSize = DefaultPreallocatedRecIdsBlockSize;
                }

                isTopLevelScope = true;
                rootInstance = this;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignRecIdInternal</Name>
				<Source><![CDATA[
    private void assignRecIdInternal(ReqTrans _reqTrans)
    {
        if (nextRecId >= recIdAllocationLimit)
        {
            Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Info, 'ReqTransRecIdPreallocationScope reserving');

            if (!systemSequence)
            {
                systemSequence = new SystemSequence();
            }
            
            systemSequence.suspendRecIds(tablenum(ReqTrans));
            nextRecId = systemSequence.reserveValues(preallocatedRecIdsBlockSize, tablenum(ReqTrans));

            recIdAllocationLimit = nextRecId + preallocatedRecIdsBlockSize;
        }

        _reqTrans.RecId = nextRecId;

        nextRecId++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a preallocated RecId to a record.
    /// </summary>
    /// <param name = "_reqTrans">The record that should have the field initialized.</param>
    [Hookable(false)]
    public static void assignRecId(ReqTrans _reqTrans)
    {
        if (rootInstance)
        {
            rootInstance.assignRecIdInternal(_reqTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the scope for preallocating RecId's.
    /// </summary>
    [Hookable(false)]
    public void Dispose()
    {
        if (isTopLevelScope)
        {
            if (systemSequence)
            {
                systemSequence.removeRecIdSuspension(tablenum(ReqTrans));
            }
            Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Info, strFmt('ReqTransRecIdPreallocationScope wasted range %1', recIdAllocationLimit - nextRecId));
            rootInstance = null;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>