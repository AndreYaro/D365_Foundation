<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXJobUploadSourceLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the logger class for upload source sync operations of a job.
/// </summary>
internal class RetailCDXJobUploadSourceLogger extends RetailCDXLogger
{
    RetailCDXJobUploadSourceContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCDXJobUploadSourceLogger</c> class.
    /// </summary>
    /// <param name = "context">The upload target context object.</param>
    internal void new(RetailCDXJobUploadSourceContext _jobContext)
    {
        this.context = _jobContext;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXUploadSourceProcessingStart</Name>
				<Source><![CDATA[
    internal void logCDXUploadSourceProcessingStart()
    {
        this.logStartEvent('CDXJobUploadSourceProcessing', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXUploadSourceProcessingFailure</Name>
				<Source><![CDATA[
    internal void logCDXUploadSourceProcessingFailure(System.Exception exception)
    {
        this.logEvent('CDXJobUploadSourceProcessingFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXJobUploadSourceProcessingSkipped</Name>
				<Source><![CDATA[
    internal void logCDXJobUploadSourceProcessingSkipped()
    {
        this.logEvent('CDXJobUploadSourceProcessingSkipped', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXDataStoreDataSyncPausedByUser</Name>
				<Source><![CDATA[
    internal void logCDXDataStoreDataSyncPausedByUser()
    {
        this.logEvent('CDXDataStoreDataSyncPausedByUser', [context.paramDataStoreName(), context.paramCorrelationId()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXUploadSourceProcessingStop</Name>
				<Source><![CDATA[
    internal void logCDXUploadSourceProcessingStop(System.Exception exception)
    {
        this.logStopEvent('CDXJobUploadSourceProcessing', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromContext</Name>
				<Source><![CDATA[
    private container getEventDataFromContext(System.Exception exception = null)
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException([exception]);

        if (context)
        {
            return  [context.paramSession(),
                context.paramScheduleRecID(),
                context.paramJobID(),
                context.paramDataStoreName(),
                context.paramRowsAffected(),
                context.paramFileSize(),
                context.paramRerunSessionId(),
                context.paramLocalSessionId(),
                context.paramPackageId(),
                context.paramCorrelationId(),
                this.duration('CDXJobUploadSourceProcessing'),
                context.paramIsProcessingSkipped(),
                success,
                errorMessage,
                this.previousErrorEvent
            ];
        }
        else
        {
            return [0,
                0,
                '',
                '',
                0,
                0,
                0,
                0,
                nullValueFromType(Types::Guid),
                nullValueFromType(Types::Guid),
                0,
                false,
                false,
                errorMessage,
                this.previousErrorEvent
                ];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>