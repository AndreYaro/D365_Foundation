<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TransTaxInformationUIController_IN_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI controller class for controlling new tax information UI and transaction update.
/// </summary>
[ExtensionOf(classstr(TransTaxInformationUIController))]
final class TransTaxInformationUIController_IN_Extension
{
    internal TransTaxInformationCustomsCtrl_IN           transTaxInformationCustomsCtrl;
    internal TransTaxInformationSalesTaxCtrl_IN          transTaxInformationSalesTaxCtrl;
    internal TransTaxInformationExciseCtrl_IN            transTaxInformationExciseCtrl;
    internal TransTaxInformationServiceTaxCtrl_IN        transTaxInformationServiceTaxCtrl;
    internal TransTaxInformationTaxWithholdingCtrl_IN    transTaxInformationTaxWithholdingCtrl;
    internal TransTaxInformationGSTCtrl_IN               transTaxInformationGSTCtrl;
    internal TransTaxInformationVATCtrl_IN               transTaxInformationVATCtrl;

    #ISOCountryRegionCodes
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCtrlClassFromList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get IN control class for Tax information.
    /// </summary>
    protected void getCtrlClassFromList()
    {
        next getCtrlClassFromList();

        if (ctrlList && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ListEnumerator ctrlListEnum = ctrlList.getEnumerator();

            while (ctrlListEnum.moveNext())
            {
                switch (classIdGet(ctrlListEnum.current()))
                {
                    case classNum(TransTaxInformationCustomsCtrl_IN) :
                        transTaxInformationCustomsCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationExciseCtrl_IN) :
                        transTaxInformationExciseCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationSalesTaxCtrl_IN) :
                        transTaxInformationSalesTaxCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationServiceTaxCtrl_IN) :
                        transTaxInformationServiceTaxCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationTaxWithholdingCtrl_IN) :
                        transTaxInformationTaxWithholdingCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationVATCtrl_IN) :
                        transTaxInformationVATCtrl = ctrlListEnum.current();
                        break;
                    case classNum(TransTaxInformationGSTCtrl_IN) :
                        transTaxInformationGSTCtrl = ctrlListEnum.current();
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAllCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes UI controls for Tax information form.
    /// </summary>
    protected void initAllCtrls()
    {
        next initAllCtrls();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.initExciseRecordType();
            // Service
            transTaxInformationServiceTaxCtrl.parmServiceCodeTable().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceServiceCode), this);

            // Excise
            transTaxInformationExciseCtrl.parmExciseRecordType().registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(TransTaxInformationUIController, modifiedOfExcise), this);
            transTaxInformationDS.object(fieldNum(TransTaxInformation, ExciseType)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedOfExciseType), this);

            // Custom
            transTaxInformationDS.object(fieldNum(TransTaxInformation, CustomsTariffDirection)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedCustomsTariffDirection), this);
            transTaxInformationCustomsCtrl.parmCustomTariffCode().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceCustomsTariffCode), this);
            transTaxInformationCustomsCtrl.parmCustomTariffCode().registerOverrideMethod(methodStr(FormReferenceControl, resolveReference), methodStr(TransTaxInformationUIController, resolveReferenceCustomsTariffCode), this);

            // Sales
            transTaxInformationSalesTaxCtrl.parmSalesTaxFromTypeRefGroup().registerOverrideMethod(methodStr(FormReferenceGroupControl, lookup), methodStr(TransTaxInformationUIController, lookupReferenceSalesTaxFormType), this);

            // Withholding
            transTaxInformationDS.object(fieldNum(TransTaxInformation, TaxWithholdSoftwareDeclReceived)).registerOverrideMethod(methodStr(FormDataObject, modified), methodStr(TransTaxInformationUIController, modifiedTaxWithholdSoftwareDeclReceived), this);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes excise record type controls for Tax information form.
    /// </summary>
    /// <param name="_isChangedToExciseType">
    /// The boolean value for changed to excise type.
    /// </param>
    /// <param name="_isChangedToExciseRecordType">
    /// The boolean value for changed to excise record type.
    /// </param>
    protected void initExciseRecordType(
        boolean _isChangedToExciseType = false,
        boolean _isChangedToExciseRecordType = false)
    {
        FormComboBoxControl exciseRecordTypeCtrl = transTaxInformationExciseCtrl.parmExciseRecordType();

        switch (transTaxInformation.ExciseType)
        {
            case ExciseType_IN::Manufacturer :
                exciseRecordTypeCtrl.enumType(enumNum(ExciseManufacture_IN));
                break;
            case ExciseType_IN::None :
                exciseRecordTypeCtrl.enumType(enumNum(ExciseNone_IN));
                break;
            case ExciseType_IN::Trader :
                exciseRecordTypeCtrl.enumType(enumNum(ExciseTraders_IN));
                break;
        }

        if (!_isChangedToExciseRecordType)
        {
            if (_isChangedToExciseType)
            {
                if (transTaxInformation.ExciseType == ExciseType_IN::Manufacturer)
                {
                    TransTaxInformationHelper::initFromInventItem(transTaxInformation, this.parmTaxModelTaxable().getItemId(), this.parmTaxModelTaxable().getPartyTable());
                    exciseRecordTypeCtrl.selectText(enum2Str(transTaxInformation.ExciseRecordType));
                }
                else
                {
                    exciseRecordTypeCtrl.selection(ExciseRecordType_IN::None);
                }
            }
            else
            {
                exciseRecordTypeCtrl.selectText(enum2Str(transTaxInformation.ExciseRecordType));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToTransTaxInformationFormCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all controls on Tax information form.
    /// </summary>
    protected void setVisibleToTransTaxInformationFormCtrls()
    {
        next setVisibleToTransTaxInformationFormCtrls();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationTaxIdCtrl.parmTaxId().visible(false);
            this.setVisibleToExciseCtrls();
            this.setVisibleToVATCtrls();
            this.setVisibleToCustomsCtrls();
            this.setVisibleToServiceTaxCtrls();
            this.setVisibleToWithholdTaxCtrls();
            this.setVisibleToSalesTaxCtrls();
            this.setVisibleToGSTTCtrls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToDeliveryInfoCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visible or invisible to all delivery information controls on Tax information form.
    /// </summary>
    protected void setVisibleToDeliveryInfoCtrls()
    {
        next setVisibleToDeliveryInfoCtrls();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationDeliveryInfoCtrl.parmTaxInformation().visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToTransTaxInformationFormCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all controls on Tax information form.
    /// </summary>
    protected void setEnabledToTransTaxInformationFormCtrls()
    {
        next setEnabledToTransTaxInformationFormCtrls();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.setEnabledToCustomsCtrls();
            this.setEnabledToExciseCtrls();
            this.setEnabledToTaxWithholdingCtrls();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToGSTTCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all GST tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToGSTTCtrls()
    {
        next setVisibleToGSTTCtrls();
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            transTaxInformationGSTCtrl.parmNonBusinessUsagePercent().visible(false);
            transTaxInformationGSTCtrl.parmServiceCategory().visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Excise tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToExciseCtrls()
    {
        next setVisibleToExciseCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToServiceTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Service tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToServiceTaxCtrls()
    {
        next setVisibleToServiceTaxCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToVATCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all VAT tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToVATCtrls()
    {
        next setVisibleToVATCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Customs tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToCustomsCtrls()
    {
        next setVisibleToCustomsCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToWithholdTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Withholding tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToWithholdTaxCtrls()
    {
        next setVisibleToWithholdTaxCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVisibleToSalesTaxCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set visable or invisible to all Sales tax controls on Tax information form.
    /// </summary>
    protected void setVisibleToSalesTaxCtrls()
    {
        next setVisibleToSalesTaxCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToExciseCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Excise controls on Tax information form.
    /// </summary>
    protected void setEnabledToExciseCtrls()
    {
        next setEnabledToExciseCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToTaxWithholdingCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Withholding controls on Tax information form.
    /// </summary>
    protected void setEnabledToTaxWithholdingCtrls()
    {
        next setEnabledToTaxWithholdingCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabledToCustomsCtrls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set enabled or disabled to all Customs controls on Tax information form.
    /// </summary>
    protected void setEnabledToCustomsCtrls()
    {
        next setEnabledToCustomsCtrls();
        transTaxInformationCustomsCtrl.parmCustomsTariffDirection().allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedTaxWithholdSoftwareDeclReceived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to withholding tax software declaration received control.
    /// </summary>
    /// <param name="_taxWithholdSoftwareDeclReceivedField">
    /// The form data source field TaxWithholdSoftwareDeclReceived.
    /// </param>
    protected void modifiedTaxWithholdSoftwareDeclReceived(FormDataObject _taxWithholdSoftwareDeclReceivedField)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedExciseField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform relevant logics after modify excise field.
    /// </summary>
    protected void modifiedExciseField()
    {
        next modifiedExciseField();
        this.setEnabledToExciseCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceSalesTaxFormType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to Sales tax form type.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceSalesTaxFormType(FormReferenceGroupControl _formReferenceGroupControl)
    {
        SysReferenceTableLookup sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(SalesTaxFormTypes_IN), _formReferenceGroupControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        query.allowCrossCompany(true);
        query.addCompanyRange(curext());
        queryBuildDataSource = query.addDataSource(tableNum(SalesTaxFormTypes_IN));
        queryBuildRange      = queryBuildDataSource.addRange(fieldNum(SalesTaxFormTypes_IN, TaxType));
        queryBuildRange.value(enum2Str(TaxType_IN::SalesTax));
        sysTableLookup.addLookupfield(fieldNum(SalesTaxFormTypes_IN, FormType));
        sysTableLookup.addLookupfield(fieldNum(SalesTaxFormTypes_IN, TaxType));
        sysTableLookup.addLookupfield(fieldNum(SalesTaxFormTypes_IN, Description));
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOfExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to excise.
    /// </summary>
    /// <param name="_formComboBoxControl">
    /// The form comboBox control.
    /// </param>
    /// <returns>
    /// Returns true if the control is modified, otherwise false
    /// </returns>
    protected boolean modifiedOfExcise(FormComboBoxControl _formComboBoxControl)
    {
        next modifiedOfExcise(_formComboBoxControl);

        boolean ret;

        ret = _formComboBoxControl.modified();

        if (ret)
        {
            this.initExciseRecordType(false, true);
            TransTaxInformationHelper::updateExciseRecordType(transTaxInformation, transTaxInformationExciseCtrl.parmExciseRecordType().valueStr());
            this.modifiedExciseField();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedOfExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the modified method to excise type.
    /// </summary>
    /// <param name="_exciseType">
    /// The form excise type object.
    /// </param>
    protected void modifiedOfExciseType(FormDataObject _exciseType)
    {
        this.initExciseRecordType(true);
        TransTaxInformationHelper::updateExciseRecordType(transTaxInformation, transTaxInformationExciseCtrl.parmExciseRecordType().valueStr());
        TransTaxInformationHelper::initFromExciseType(transTaxInformation);

        this.modifiedExciseField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedCustomsTariffDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to customs tariff code.
    /// </summary>
    /// <param name="_customsTariffDirection">
    /// The form data source customs tariff direction.
    /// </param>
    protected void modifiedCustomsTariffDirection(FormDataObject _customsTariffDirection)
    {
        transTaxInformation.CustomsTariffCode = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceCustomsTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look reference method to customs tariff code.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table for customs tariff code.
    /// </returns>
    protected Common lookupReferenceCustomsTariffCode(FormReferenceGroupControl _formReferenceGroupControl)
    {
        return CustomsTariffCodeTable_IN::lookupDirectionImportExport(_formReferenceGroupControl, enum2str(transTaxInformation.CustomsTariffDirection), this.parmTaxModelTaxable().getTransactionCompany());
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReferenceCustomsTariffCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the resolve reference method to customs tariff code.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table for customs tariff code.
    /// </returns>
    protected Common resolveReferenceCustomsTariffCode(FormReferenceGroupControl _formReferenceGroupControl)
    {
        return CustomsTariffCodeTable_IN::resolveCustomsTariffCode(_formReferenceGroupControl, transTaxInformation.CustomsTariffDirection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReferenceServiceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the look method to Tax service code.
    /// </summary>
    /// <param name="_formReferenceGroupControl">
    /// The form reference group control.
    /// </param>
    /// <returns>
    /// The query table.
    /// </returns>
    protected Common lookupReferenceServiceCode(FormReferenceGroupControl _formReferenceGroupControl)
    {
        return ServiceCodeTable_IN::lookupServiceCode(_formReferenceGroupControl, this.parmTaxModelTaxable().getTransactionCompany());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>