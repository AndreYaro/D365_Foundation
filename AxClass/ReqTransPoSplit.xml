<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqTransPoSplit extends RunBaseBatch implements BatchRetryable
{
    ReqPlanId               reqPlanId;
    RefRecId                reqPlanVersionRefRecId;
    ReqRefType              refType;
    InventTransRefId        refId;

    Dialog                  dialog;
    DialogField             dialogSplitQty;
    DialogField             dialogSplitReqDateDlv;

    InventQty               splitQty;
    ReqDateDlv              splitReqDateDlv;

    ReqTrans                reqTransNew;

    ReqPO               callerDataSourceRecord;
    PdsCWInventQty      cwSplitQty;
    DialogField         cwDialogSplitQty;
    ReqPO               reqPO;
    boolean             formulaValidated;

    protected boolean mpsMustRunPlanning;

    #define.PdsCurrentVersion(1)
    #localMacro.PdsCurrentList
        cwSplitQty
    #endMacro

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        reqPlanId,
        refType,
        refId,
        splitQty,
        splitReqDateDlv,
        mpsMustRunPlanning
    #ENDMACRO

    #define.Version1(1)
    #LOCALMACRO.CurrentListV1
        reqPlanId,
        refType,
        refId,
        splitQty,
        splitReqDateDlv
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(this.pdsReqPO().ItemId);

        dialog = super();

        dialog.addGroup("@SYS70006");

        if (isCWItem)
        {
            cwDialogSplitQty = dialog.addField(extendedtypestr(PdsCWInventQty),
                "@PDS561", "@PDS561");
            cwDialogSplitQty.value(cwSplitQty);
        }
        else
        {
            dialogSplitQty = dialog.addField(extendedtypestr(InventQty), "@SYS19602", "@SYS70014");
            dialogSplitQty.value(splitQty);
        }

        dialogSplitReqDateDlv = dialog.addField(extendedtypestr(ReqDateDlv));
        dialogSplitReqDateDlv.value(splitReqDateDlv);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (PdsGlobal::pdsIsCWItem(this.pdsReqPO().ItemId))
        {
            cwSplitQty = cwDialogSplitQty.value();
            splitQty   = PdsCatchWeight::inventQty(this.pdsReqPO().ItemId, cwSplitQty);
        }
        else
        {
            cwSplitQty  = 0;
            splitQty    = dialogSplitQty.value();
        }

        if (!this.pmfValidateFormula())
        {
            return false;
        }

        splitReqDateDlv = dialogSplitReqDateDlv.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustRunPlanning</Name>
				<Source><![CDATA[
    public boolean parmMustRunPlanning(boolean _mustRunPlanning = mpsMustRunPlanning)
    {
        mpsMustRunPlanning = _mustRunPlanning;

        return mpsMustRunPlanning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,connull(),#CurrentList
            , this.pdsPack()
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
    public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;
        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefId</Name>
				<Source><![CDATA[
    public InventTransRefId parmReqRefId(InventTransRefId _refId = refId)
    {
        refId = _refId;
        return refId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefType</Name>
				<Source><![CDATA[
    public ReqRefType parmReqRefType(ReqRefType _refType = refType)
    {
        refType = _refType;
        return refType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitQty</Name>
				<Source><![CDATA[
    public InventQty parmSplitQty(InventQty _splitQty = splitQty)
    {
        splitQty = _splitQty;
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitReqDateDlv</Name>
				<Source><![CDATA[
    public ReqDate parmSplitReqDateDlv(ReqDateDlv _splitReqDateDlv = splitReqDateDlv)
    {
        splitReqDateDlv = _splitReqDateDlv;
        return splitReqDateDlv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serialize process custom fields
    /// </summary>
    /// <returns>Fields to serialize from the process enhancement to maintain the state of this class.</returns>
    /// <remarks>
    /// This method should be called from the standard pack() serialization method or
    /// from a sub-class instance with the same name.
    /// </remarks>
    protected container pdsPack()
    {
        return [#PdsCurrentVersion, #PdsCurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the current ReqPO record.
    /// </summary>
    /// <returns>Current ReqPO record.</returns>
    /// <remarks>
    /// Returns the ReqPO record that is to be split. This record will not change
    /// throughout the single use of the split dialog so the record is cached in the
    /// object. Subsequent calls will get the cached record value so this call is
    /// more optimal than directly reading the table.
    /// </remarks>
    protected ReqPO pdsReqPO()
    {
        if (!reqPO)
        {
            reqPO = ReqPO::find(this.reqPlanVersionRefRecId(), refId);
        }

        return reqPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsUnpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes process custom fields
    /// </summary>
    /// <param name="_packedClass">Container with packed contents of this class</param>
    /// <returns>True if deserialization was successful; false otherwise.</returns>
    /// <remarks>
    /// This method should be called from the standard unpack() deserialization method or
    /// from a sub-class instance with the same name.
    /// </remarks>
    protected boolean pdsUnpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass, 1);
        boolean     ret = true;

        switch (version)
        {
            case #PdsCurrentVersion:
                [version, #PdsCurrentList] = _packedClass;
                break;

            case 0:
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCompareWithSimulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares a planned production or batch order with a simulated
    /// planned production or batch order with the same characteristics as the actual
    /// planned production or batch order.
    /// If the quantity, formula version, or route version from the simulation is
    /// different than the actual's quantity, formula version, or route version,
    /// then a warning is displayed provided the production parameter "Alert user
    /// on non-standard version usage" is set; otherwise, no warning is given.
    /// </summary>
    /// <param name="_actualReqPO">
    /// The actual planned production or batch order to simulate.
    /// </param>
    protected void pmfCompareWithSimulation(ReqPO _actualReqPO)
    {
        if (refType == ReqRefType::PmfPlannedProdBatch
            && ProdParameters::find().PmfAlertNonStdVersionUsage
            && !PmfReqPOSimulator::isEqual(_actualReqPO, ReqPOType::Production))
        {
            warning(strfmt("@PRO2837", _actualReqPO.RefId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfValidateFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the split values against the original formula and routes.
    /// </summary>
    /// <returns>
    /// True if the formula and routes are still valid; otherwise false.
    /// </returns>
    private boolean pmfValidateFormula()
    {
        boolean         ret = true;

        reqPO = this.pdsReqPO();

        if (InventTable::find(reqPO.ItemId).isFormulaAllowed())
        {
            ret = ReqTransPoSplit::pmfFormulaMultipleAndBOMValid(
                reqPO.ItemId, reqPO.inventDim(), reqPO.ItemBomId,
                reqPO.ItemRouteId, reqPO.ReqDate, reqPO.ReqDateDlv, reqPO.Qty,
                splitQty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanVersionRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the master plan version ID.
    /// </summary>
    /// <returns>
    ///     The ID of the active master plan version.
    /// </returns>
    public RefRecId reqPlanVersionRefRecId()
    {
        if (!reqPlanVersionRefRecId)
        {
            reqPlanVersionRefRecId = ReqPlan::findReqPlanId(reqPlanId).findActiveVersion().RecId;
        }
        return reqPlanVersionRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransNew</Name>
				<Source><![CDATA[
    public ReqTrans reqTransNew()
    {
        return reqTransNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        setprefix(ReqTransPoSplit::description());

        super();

        try
        {
            if (! this.validate())
            {
                throw error("@SYS18447");
            }
            this.updateSplit();

            this.postProcess();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend this class must override the <c>runsImpersonated</c> method and return
    ///    false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCallerDataSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the active record of the caller form.
    /// </summary>
    /// <param name="_record">
    /// The active record of the caller.
    /// </param>
    public void setCallerDataSourceRecord(Common _record)
    {
        callerDataSourceRecord = _record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conpeek(_packedClass,1);
        container       base;

        container       pdsPackedClass;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList
                    ,pdsPackedClass
                    ]
                        = _packedClass;
                break;
            case #Version1:
                [version, base, #CurrentListV1, pdsPackedClass] = _packedClass;
                break;
            default:
                return false;
        }

        this.pdsUnpack(pdsPackedClass);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSplit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits a selected <c>ReqPO</c> record into two records.
    /// </summary>
    protected void updateSplit()
    {
        ReqTrans                reqTransSplit;
        ReqPO                   reqPoSplit;

        ReqPO                   reqPoNew;

        WrkCtrScheduler_Req     scheduleReq;
        WrkCtrParmSchedule      parmSchedule;

        ReqCalcExplode          reqCalcExplode;

        ttsBegin;

        reqPoSplit      = ReqPO::find(this.reqPlanVersionRefRecId(),refId,true);
        reqTransSplit   = reqPoSplit.reqTrans(true);
        if (! reqPoSplit.RecId || ! reqTransSplit.RecId)
        {
            throw error(strfmt("@SYS24774",refId));
        }

        setprefix(#prefixField(reqPoSplit,refId));

        reqPoSplit = this.initializePlannedOrder(reqPoSplit);

        reqPoNew.data(reqPoSplit);

        reqPoNew = this.initializePlannedOrder(reqPoNew);

        reqPoSplit.Qty         -= splitQty;

        reqPoSplit.PdsCWReqQty -= cwSplitQty;

        reqPoSplit.initPurchQty();
        reqPoSplit.doUpdate();

        reqTransSplit.initFromReqPo(reqPoSplit);
        reqTransSplit.OriginalQuantity = reqTransSplit.Qty;
        reqTransSplit.doUpdate();

        switch (reqPoSplit.supplyPrinciple())
        {
            case ReqSupplyPrinciple::Conversion :
                reqTransSplit.updateBOMQty(reqPoSplit);

                if (ReqTrans::refTypeCanReserveWorkCenter(reqPoSplit.RefType) && reqPoSplit.canRunExplosion())
                {
                    scheduleReq = WrkCtrScheduler_Req::newCheckLockingTTSLevel(false);
                    parmSchedule = WrkCtrParmSchedule::newReqTransCoverage(
                            reqTransSplit,
                            reqPoSplit,
                            ReqPlanData::newReqPlanVersion(reqPoSplit.PlanVersion),
                            true,
                            false,
                            dateNull(),
                            reqPoSplit.reqSetupDim());

                    scheduleReq.addWrkCtrParmSchedule(parmSchedule);
                    scheduleReq.run();

                    scheduleReq.dispose();
                }
                break;

            case ReqSupplyPrinciple::Transfer :
                reqTransSplit.updateTransferDemandQty();
                break;
        }

        reqPoNew.RefId              = '';
        reqPoNew.Qty                = splitQty;

        reqPoNew.PdsCWReqQty        = cwSplitQty;

        reqPoNew.initPurchQty();
        reqPoNew.ReqDateDlv         = splitReqDateDlv;
        reqPoNew.initFromReqDateDlv(reqPoNew.reqSetupDim());
        reqPoNew.RouteJobsUpdated   = NoYes::No;

        if (#PmfEnabled)
        {
            reqPoNew.PmfYieldPct        = reqPoSplit.PmfYieldPct;
        }

        reqPoNew.insert();

        reqTransNew.ReqDateDlvOrig  = reqPoSplit.reqTrans().ReqDateDlvOrig;
        reqTransNew.Level           = reqTransSplit.Level;
        ReqTransPOCreate::construct().insertFromReqPo(reqTransNew, reqPoNew,false);
        reqTransNew.setFromInventLocationId(reqPoSplit.reqTransTransferDemand().inventDim().InventLocationId);
        
        reqTransSplit.updateReduceCopyCovQty(reqTransNew);

        if (reqPoNew.canRunExplosion())
        {
            // During explosion, we want to prevent current planned order against deletion.
            using (ReqPoPreventDeletionContext contextReqPoSplit = ReqPoPreventDeletionContext::construct(refId, refType))
            {
                using (ReqPoPreventDeletionContext contextReqPoNew = ReqPoPreventDeletionContext::construct(reqPoNew.RefId, refType))
                {
                    reqCalcExplode = ReqCalcExplode::newReqTrans(reqTransNew, null);
                    reqCalcExplode.runOperation();
                    reqCalcExplode.refreshUpdatedReqTrans(reqTransNew);
                }
            }
        }

        ttsCommit;

        this.pmfCompareWithSimulation(reqPoSplit);
        this.pmfCompareWithSimulation(reqPoNew);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean    ret;
        ReqTrans   reqTransSplit;

        ret = super();

        select firstonly reqTransSplit
        index hint RefIdx
        where reqTransSplit.PlanVersion == this.reqPlanVersionRefRecId()
           && reqTransSplit.RefType     == refType
           && reqTransSplit.RefId       == refId;

        if (!reqTransSplit.RecId)
        {
            return checkFailed(strFmt("@SYS24774",refId));
        }

        if (!reqTransSplit.isPlannedOrder())
        {
            return checkFailed("@SYS70012");
        }

        if (splitQty >= reqTransSplit.Qty)
        {
            return checkFailed(strFmt("@SYS70013",reqTransSplit.Qty));
        }

        if (splitQty != decRound(splitQty,UnitOfMeasure::unitOfMeasureDecimalPrecision(
                UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(reqTransSplit.ItemId,ModuleInventPurchSales::Invent).UnitId))))
        {
            return checkFailed(strFmt("@SYS19589",InventTableModule::find(reqTransSplit.ItemId,ModuleInventPurchSales::Invent).UnitId));
        }

        if (splitQty < 0)
        {
            return checkFailed("@SYS67892");
        }

        if (!splitReqDateDlv)
        {
            return checkFailed("@SYS24455");
        }

        if (reqTransSplit.IsDerivedDirectly)
        {
            return checkFailed("@SYS345112");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqTransPoSplit construct()
    {
        var reqTransPoSplit = new ReqTransPoSplit();
        reqTransPoSplit.parmMustRunPlanning(true);

        return reqTransPoSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS10133";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ReqTransPoSplit     reqTransPoSplit;

        reqTransPoSplit = ReqTransPoSplit::newForm(args);

        if (!reqTransPoSplit.prompt())
        {
            return;
        }

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
        {
            reqTransPoSplit.runOperation();
        }

        ReqTransPoMark::refreshCallerMainDataSource(args.record());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static ReqTransPoSplit newForm(Args _args)
    {
        ReqTransPoSplit     reqTransPoSplit = ReqTransPoSplit::construct();
        ReqPO               reqPO           = _args.record();
        ReqPlanId           reqPlanId       = ReqPlanVersion::find(reqPO.PlanVersion).ReqPlanId;

        reqTransPoSplit.getLast();

        reqTransPoSplit.setCallerDataSourceRecord(reqPO);
        reqTransPoSplit.parmReqPlanId(reqPlanId);
        reqTransPoSplit.parmReqRefType(reqPO.RefType);
        reqTransPoSplit.parmReqRefId(reqPO.RefId);
        reqTransPoSplit.parmSplitQty(0);
        reqTransPoSplit.parmSplitReqDateDlv(reqPO.ReqDateDlv);

        reqTransPoSplit.init();

        return reqTransPoSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfFormulaMultipleAndBOMValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check formula multiple rules when splitting a batch order.
    /// </summary>
    /// <param name="_itemId">Item to check</param>
    /// <param name="_inventDim">InventDim for this test, used in lookups</param>
    /// <param name="_bomId">BOM id to check</param>
    /// <param name="_routeId">Original route id used; warning given if this would change after the split</param>
    /// <param name="_reqDate">Date of the original request or order</param>
    /// <param name="_dlvDate">Date for the new/split order</param>
    /// <param name="_qty">Original quantity before the split</param>
    /// <param name="_qtySplit">Quantity to be split</param>
    /// <returns>true if everything is valid or the user responded 'yes' to override the warnings; no to not do the
    /// split.
    /// </returns>
    public static boolean pmfFormulaMultipleAndBOMValid(
        ItemId          _itemId,
        InventDim       _inventDim,
        BOMId           _bomId,
        RouteId         _routeId,
        date            _reqDate,
        date            _dlvDate,
        InventQty       _qty,
        InventQty       _qtySplit = 0)
    {
        BOMVersion      bomVersion;
        BOMVersion      bomVerTemp;
        RouteVersion    routeVersion;
        RouteVersion    routeVerTemp;

        bomVersion = BOMVersion::find(_itemId, _bomId, true, _reqDate, _reqDate,
            _qty);
        if (bomVersion.RecId)
        {
            if (!bomVersion.pmfIsMultipleQty(_qty - _qtySplit)
                && Box::yesNo("@PDS1181", DialogButton::No, "@PDS1183")
                    == DialogButton::No)
            {
                return false;
            }

            if (!bomVersion.pmfIsMultipleQty(_qtySplit)
                && Box::yesNo("@PDS1182", DialogButton::No, "@PDS1183")
                    == DialogButton::No)
            {
                return false;
            }
        }

        bomVerTemp = BOMVersion::findActive(_itemId, _reqDate, _qty - _qtySplit,
            _inventDim);
        if (!bomVerTemp || bomVerTemp.bomId != _bomId)
        {
            warning("@PDS1184");
        }

        bomVerTemp = BOMVersion::findActive(_itemId, _dlvDate, _qtySplit,
            _inventDim);
        if (!bomVerTemp || bomVerTemp.bomId != _bomId)
        {
            warning("@PDS1185");
        }

        if (_routeId)
        {
            routeVersion = RouteVersion::findRouteVersion(_routeId, _itemId,
                _inventDim.InventDimId);
        }

        if (routeVersion.RecId)
        {
            routeVerTemp = RouteVersion::findActive(_itemId, _reqDate,
                _qty - _qtySplit, _inventDim);
            if (!routeVerTemp || routeVerTemp.RouteId != _routeId)
            {
                warning("@PDS1186");
            }

            routeVerTemp = RouteVersion::findActive(_itemId, _dlvDate, _qtySplit,
                _inventDim);
            if (!routeVerTemp || routeVerTemp.RouteId != _routeId)
            {
                warning("@PDS1187");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExplodeAfterSplit</Name>
				<Source><![CDATA[
    [Replaceable]
    protected boolean mustExplodeAfterSplit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePlannedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a planned order.
    /// </summary>
    /// <param name = "_reqPo">A planned order.</param>
    /// <returns>An initialized planned order.</returns>
    /// <remarks>
    /// This is an extension point.
    /// </remarks>
    protected ReqPO initializePlannedOrder(ReqPO _reqPo)
    {
        return _reqPo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs post processing.
    /// </summary>
    /// <remarks>
    /// This is an extension point.
    /// </remarks>
    protected void postProcess()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>