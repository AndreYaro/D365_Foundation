<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BarcodeITF</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BarcodeTypeFactory(BarcodeType::Interleaved2of5)]
public class BarcodeITF extends Barcode
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidAssetLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for fixed asset labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidAssetLabelBarcodeType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidLocationLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for location labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidLocationLabelBarcodeType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeType</Name>
				<Source><![CDATA[
    public BarcodeType barcodeType()
    {
        return BarcodeType::Interleaved2of5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFont</Name>
				<Source><![CDATA[
    public FontName defaultFont()
    {
        return 'BC I25 HD Wide';
    }

]]></Source>
			</Method>
			<Method>
				<Name>encode</Name>
				<Source><![CDATA[
    public void encode()
    {
        if (strLen(string) > MaxStringLength)
        {
            throw(error("@SYS90717"));
        }

        barcodeStr = this.encodeString(string);
        barcodeStrHR = string;
        encoded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeString</Name>
				<Source><![CDATA[
    BarCodeString encodeString(BarCodeString _stringIn)
    {
        int             stringLength    = strLen(_stringIn);
        BarCodeString   tempStr;
        BarCodeString   resultStr       = num2char(97); // start character
        Counter         i;
        int             c1, c2;

        if (stringLength < 1)
        {
            return '';
        }

        // if length is odd add a zero to the beginning of the message string
        if (stringLength mod 2 == 1)
        {
            tempStr = '0' + _stringIn;
            stringLength++;
        }
        else
        {
            tempStr = _stringIn;
        }

        // step through the text in string and perform character mapping
        for (i = 1; i <= stringLength; i += 2)
        {
            c1 = str2int(subStr(tempStr, i, 1));
            c2 = str2int(subStr(tempStr, i+1, 1));
            switch (c1)
            {
                case 0:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(34) + num2char(93); break;
                        case 1  : resultStr += num2char(42) + num2char(74); break;
                        case 2  : resultStr += num2char(36) + num2char(74); break;
                        case 3  : resultStr += num2char(44) + num2char(73); break;
                        case 4  : resultStr += num2char(34) + num2char(90); break;
                        case 5  : resultStr += num2char(42) + num2char(89); break;
                        case 6  : resultStr += num2char(36) + num2char(89); break;
                        case 7  : resultStr += num2char(34) + num2char(78); break;
                        case 8  : resultStr += num2char(42) + num2char(77); break;
                        case 9  : resultStr += num2char(36) + num2char(77); break;
                    }
                    break;
                case 1:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(49) + num2char(87); break;
                        case 1  : resultStr += num2char(57) + num2char(68); break;
                        case 2  : resultStr += num2char(51) + num2char(68); break;
                        case 3  : resultStr += num2char(59) + num2char(67); break;
                        case 4  : resultStr += num2char(49) + num2char(84); break;
                        case 5  : resultStr += num2char(57) + num2char(83); break;
                        case 6  : resultStr += num2char(51) + num2char(83); break;
                        case 7  : resultStr += num2char(49) + num2char(72); break;
                        case 8  : resultStr += num2char(57) + num2char(71); break;
                        case 9  : resultStr += num2char(51) + num2char(71); break;
                    }
                    break;
                case 2:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(37) + num2char(87); break;
                        case 1  : resultStr += num2char(45) + num2char(68); break;
                        case 2  : resultStr += num2char(39) + num2char(68); break;
                        case 3  : resultStr += num2char(47) + num2char(67); break;
                        case 4  : resultStr += num2char(37) + num2char(84); break;
                        case 5  : resultStr += num2char(45) + num2char(83); break;
                        case 6  : resultStr += num2char(39) + num2char(83); break;
                        case 7  : resultStr += num2char(37) + num2char(72); break;
                        case 8  : resultStr += num2char(45) + num2char(71); break;
                        case 9  : resultStr += num2char(39) + num2char(71); break;
                    }
                    break;
                case 3:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(53) + num2char(85); break;
                        case 1  : resultStr += num2char(61) + num2char(66); break;
                        case 2  : resultStr += num2char(55) + num2char(66); break;
                        case 3  : resultStr += num2char(63) + num2char(65); break;
                        case 4  : resultStr += num2char(53) + num2char(82); break;
                        case 5  : resultStr += num2char(61) + num2char(81); break;
                        case 6  : resultStr += num2char(55) + num2char(81); break;
                        case 7  : resultStr += num2char(53) + num2char(70); break;
                        case 8  : resultStr += num2char(61) + num2char(69); break;
                        case 9  : resultStr += num2char(55) + num2char(69); break;
                    }
                    break;
                case 4:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(34) + num2char(87); break;
                        case 1  : resultStr += num2char(42) + num2char(68); break;
                        case 2  : resultStr += num2char(36) + num2char(68); break;
                        case 3  : resultStr += num2char(44) + num2char(67); break;
                        case 4  : resultStr += num2char(34) + num2char(84); break;
                        case 5  : resultStr += num2char(42) + num2char(83); break;
                        case 6  : resultStr += num2char(36) + num2char(83); break;
                        case 7  : resultStr += num2char(34) + num2char(72); break;
                        case 8  : resultStr += num2char(42) + num2char(71); break;
                        case 9  : resultStr += num2char(36) + num2char(71); break;
                    }
                    break;
                case 5:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(50) + num2char(85); break;
                        case 1  : resultStr += num2char(58) + num2char(66); break;
                        case 2  : resultStr += num2char(52) + num2char(66); break;
                        case 3  : resultStr += num2char(60) + num2char(65); break;
                        case 4  : resultStr += num2char(50) + num2char(82); break;
                        case 5  : resultStr += num2char(58) + num2char(81); break;
                        case 6  : resultStr += num2char(52) + num2char(81); break;
                        case 7  : resultStr += num2char(50) + num2char(70); break;
                        case 8  : resultStr += num2char(58) + num2char(69); break;
                        case 9  : resultStr += num2char(52) + num2char(69); break;
                    }
                    break;
                case 6:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(38) + num2char(85); break;
                        case 1  : resultStr += num2char(46) + num2char(66); break;
                        case 2  : resultStr += num2char(40) + num2char(66); break;
                        case 3  : resultStr += num2char(48) + num2char(65); break;
                        case 4  : resultStr += num2char(38) + num2char(82); break;
                        case 5  : resultStr += num2char(46) + num2char(81); break;
                        case 6  : resultStr += num2char(40) + num2char(81); break;
                        case 7  : resultStr += num2char(38) + num2char(70); break;
                        case 8  : resultStr += num2char(46) + num2char(69); break;
                        case 9  : resultStr += num2char(40) + num2char(69); break;
                    }
                    break;
                case 7:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(33) + num2char(95); break;
                        case 1  : resultStr += num2char(41) + num2char(76); break;
                        case 2  : resultStr += num2char(35) + num2char(76); break;
                        case 3  : resultStr += num2char(43) + num2char(75); break;
                        case 4  : resultStr += num2char(33) + num2char(92); break;
                        case 5  : resultStr += num2char(41) + num2char(91); break;
                        case 6  : resultStr += num2char(35) + num2char(91); break;
                        case 7  : resultStr += num2char(33) + num2char(80); break;
                        case 8  : resultStr += num2char(41) + num2char(79); break;
                        case 9  : resultStr += num2char(35) + num2char(79); break;
                    }
                    break;
                case 8:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(49) + num2char(93); break;
                        case 1  : resultStr += num2char(57) + num2char(74); break;
                        case 2  : resultStr += num2char(51) + num2char(74); break;
                        case 3  : resultStr += num2char(59) + num2char(73); break;
                        case 4  : resultStr += num2char(49) + num2char(90); break;
                        case 5  : resultStr += num2char(57) + num2char(89); break;
                        case 6  : resultStr += num2char(51) + num2char(89); break;
                        case 7  : resultStr += num2char(49) + num2char(78); break;
                        case 8  : resultStr += num2char(57) + num2char(77); break;
                        case 9  : resultStr += num2char(51) + num2char(77); break;
                    }
                    break;
                case 9:
                    switch (c2)
                    {
                        case 0  : resultStr += num2char(37) + num2char(93); break;
                        case 1  : resultStr += num2char(45) + num2char(74); break;
                        case 2  : resultStr += num2char(39) + num2char(74); break;
                        case 3  : resultStr += num2char(47) + num2char(73); break;
                        case 4  : resultStr += num2char(37) + num2char(90); break;
                        case 5  : resultStr += num2char(45) + num2char(89); break;
                        case 6  : resultStr += num2char(39) + num2char(89); break;
                        case 7  : resultStr += num2char(37) + num2char(78); break;
                        case 8  : resultStr += num2char(45) + num2char(77); break;
                        case 9  : resultStr += num2char(39) + num2char(77); break;
                    }
                    break;
            }
        }
        // add stop code and return
        resultStr += num2char(98);
        return resultStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>string</Name>
				<Source><![CDATA[
    public str string(boolean set = false, str _string = '', BarcodeContentType _barcodeContentType = BarcodeContentType::Undefined)
    {
        if (set)
        {
            string = _string;

            if (strLen(string) mod 2 == 1)
            {
                string = '0' + string;
            }

            barcodeContentType  = _barcodeContentType;
            encoded = false;
        }

        return string;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCharacters</Name>
				<Source><![CDATA[
    protected boolean validateCharacters(BarCodeString barCodeString)
    {
        boolean ret =  true;

        setPrefix(strFmt("@SYS76950", this.barcodeType()));
        setPrefix(strFmt("@SYS76954", barCodeString));

        if (!isInteger(barCodeString))
        {
            ret = checkFailed("@SYS76955");
        }
        else if (strLen(barCodeString) mod 2 == 1)
        {
            ret = checkFailed("@SYS76956");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFontInfo</Name>
				<Source><![CDATA[
    protected container validFontInfo()
    {
        container   res;

        res += [['BC I25 Narrow'     ,  33, '']];
        res += [['BC I25 Medium'     ,  65, '']];
        res += [['BC I25 Wide'       , 100, '']];
        res += [['BC I25 HD Narrow'  ,   8, '']];
        res += [['BC I25 HD Medium'  ,  15, '']];
        res += [['BC I25 HD Wide'    ,  25, '']];

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BarcodeITF construct()
    {
        return new BarcodeITF();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>