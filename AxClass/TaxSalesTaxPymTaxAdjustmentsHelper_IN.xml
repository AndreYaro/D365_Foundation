<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxPymTaxAdjustmentsHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to update the tax adjustment record.
/// </summary>
class TaxSalesTaxPymTaxAdjustmentsHelper_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the tax adjustment record if any detail trans record that is associated with the history node
    /// has been unselected or updated with amounts
    /// </summary>
    /// <param name="_record">
    /// The history node that is selected
    /// </param>
    public static void updateTaxAdjustments(Common _record)
    {
        TaxSalesTaxPaymentHistory_IN                paymentHistory;
        TaxSalesTaxPaymentHistoryDetails_IN         historyDetails;
        TaxSalesTaxPaymentHistoryDetailsTrans_IN    detailTrans;
        TaxSalesTaxPaymentTaxAdjustments_IN         taxAdjustments;
        TaxSalesTaxPaymentSetOffHistory_IN          setOffHistory;
        TaxReportHierarchyNode_IN                   selectedNode, historyDetailsNode;

        selectedNode = _record;

        if (selectedNode)
        {
            select firstOnly Recid from paymentHistory where paymentHistory.TaxReportVoucher == 0
                &&  paymentHistory.TaxReportHierarchyVersion_IN == selectedNode.TaxReportHierarchyVersion_IN;

            delete_from setOffHistory
                exists join detailTrans
                    where detailTrans.RecId == setOffHistory.DetailTransToSettle ||
                          detailTrans.RecId == setOffHistory.DetailTransToBeSettled
                join historyDetails
                    where historyDetails.RecId == detailTrans.TaxSalesTaxPaymentHistoryDetails_IN &&
                          historyDetails.TaxSalesTaxPaymentHistory_IN == paymentHistory.RecId;

            delete_from taxAdjustments
                exists join detailTrans
                    where TaxAdjustments.TaxSalesTaxPaymentHistoryDetailsTrans_IN == detailTrans.RecId
                join historyDetails
                    where historyDetails.RecId == detailTrans.TaxSalesTaxPaymentHistoryDetails_IN
                       && historyDetails.TaxSalesTaxPaymentHistory_IN == paymentHistory.RecId
                join historyDetailsNode
                    where historyDetailsNode.RecId == historyDetails.TaxReportHierarchyNode_IN
                      &&  historyDetailsNode.TaxReportHierarchyVersion_IN == selectedNode.TaxReportHierarchyVersion_IN
                      &&  historyDetailsNode.LeftId >= selectedNode.LeftId
                      &&  historyDetailsNode.RightId <= selectedNode.RightId
                      &&  historyDetailsNode.CanSettle == NoYes::Yes;

            while select RecId, RecoverableAmountToSettle, PayableAmountToSettle, RecoverableAmountMST, PayableAmountMST,
                         UtilizedRecoverableAmountMST, UtilizedPayableAmountMST, TaxSalesTaxPaymentHistoryDetails_IN, TaxTrans_IN
                from detailTrans
                    where detailTrans.RecoverableAmountMST != detailTrans.RecoverableAmountToSettle + detailTrans.UtilizedRecoverableAmountMST
                       || detailTrans.PayableAmountMST != detailTrans.PayableAmountToSettle + detailTrans.UtilizedPayableAmountMST
                exists join RecId, TaxSalesTaxPaymentHistory_IN, TaxReportHierarchyNode_IN from historyDetails
                    where historyDetails.RecId == detailTrans.TaxSalesTaxPaymentHistoryDetails_IN
                       && historyDetails.TaxSalesTaxPaymentHistory_IN == paymentHistory.RecId
                exists join RecId, TaxReportHierarchyVersion_IN, LeftId, RightId, CanSettle from historyDetailsNode
                    where historyDetailsNode.RecId == historyDetails.TaxReportHierarchyNode_IN
                      &&  historyDetailsNode.TaxReportHierarchyVersion_IN == selectedNode.TaxReportHierarchyVersion_IN
                      &&  historyDetailsNode.LeftId >= selectedNode.LeftId
                      &&  historyDetailsNode.RightId <= selectedNode.RightId
                      &&  historyDetailsNode.CanSettle == NoYes::Yes
            {
                if (detailTrans.RecId)
                {
                    ttsBegin;

                    select forUpdate taxAdjustments
                            where taxAdjustments.TaxSalesTaxPaymentHistoryDetailsTrans_IN == detailTrans.RecId;

                    if (taxAdjustments)
                    {
                        taxAdjustments.UtilizedRecoverableAmountMST = detailTrans.RecoverableAmountToSettle;
                        taxAdjustments.UtilizedPayableAmountMST = detailTrans.PayableAmountToSettle;
                        taxAdjustments.update();
                    }
                    else
                    {
                        taxAdjustments.initValue();
                        taxAdjustments.TaxTrans_IN = detailTrans.TaxTrans_IN;
                        taxAdjustments.TaxSalesTaxPaymentHistoryDetailsTrans_IN = detailTrans.RecId;
                        taxAdjustments.UtilizedRecoverableAmountMST = detailTrans.RecoverableAmountToSettle;
                        taxAdjustments.UtilizedPayableAmountMST = detailTrans.PayableAmountToSettle;
                        taxAdjustments.insert();
                    }

                    ttsCommit;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>