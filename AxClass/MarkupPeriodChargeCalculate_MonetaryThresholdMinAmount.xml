<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeCalculate_MonetaryThresholdMinAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     <c>MarkupPeriodChargeCalculate_MonetaryThresholdMinAmount</c> is to perform monetary calculation part of quantity threshold minimum amount.
/// </summary>
internal class MarkupPeriodChargeCalculate_MonetaryThresholdMinAmount extends MarkupPeriodChargeCalculate_MonetaryThreshold
{
    private MarkupPeriodChargeCalculateMinAmountTmp periodChargeCalculateMinAmountTmp;
    private RecordInsertList periodChargeCalculateMinAmountTmpRecordInsertList;

    private Map invoiceMinAmountMap;
    private Map invoiceLineBaseMinAmountMap;
    private SalesId previousSalesId;
    
    private MarkupPeriodChargeInvoiceLineBaseToDate invoiceLineDateTo;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPeriodChargeCalculateMinAmountTmp</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupPeriodChargeCalculateMinAmountTmp parmPeriodChargeCalculateMinAmountTmp(MarkupPeriodChargeCalculateMinAmountTmp _periodChargeCalculateMinAmountTmp = periodChargeCalculateMinAmountTmp)
    {
        periodChargeCalculateMinAmountTmp = _periodChargeCalculateMinAmountTmp;
        return periodChargeCalculateMinAmountTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceLineBaseMinAmountMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map parmInvoiceLineBaseMinAmountMap(Map _invoiceLineBaseMinAmountMap = invoiceLineBaseMinAmountMap)
    {
        invoiceLineBaseMinAmountMap = _invoiceLineBaseMinAmountMap;
        return invoiceLineBaseMinAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceMinAmountMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map parmInvoiceMinAmountMap(Map _invoiceMinAmountMap = invoiceMinAmountMap)
    {
        invoiceMinAmountMap = _invoiceMinAmountMap;
        return invoiceMinAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceGroupingQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Query buildInvoiceGroupingQuery(Query _query)
    {
        Query buildInvoiceGroupingQuery = super(_query);

        QueryBuildDataSource qbdsCustInvoiceTrans = buildInvoiceGroupingQuery.dataSourceTable(tableNum(CustInvoiceTrans));
        qbdsCustInvoiceTrans.addGroupByAndSelectionField(fieldNum(CustInvoiceTrans, OrigSalesId));
        qbdsCustInvoiceTrans.addSortField(fieldNum(CustInvoiceTrans, OrigSalesId));

        return buildInvoiceGroupingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void generateInvoiceLineBase(QueryRun _queryRun)
    {
        CustInvoiceJour custInvoiceJour = _queryRun.get(tableNum(CustInvoiceJour));
        CustInvoiceTrans custInvoiceTrans = _queryRun.get(tableNum(CustInvoiceTrans));

        if (previousRecId != custInvoiceJour.RecId
            || previousSalesId != custInvoiceTrans.OrigSalesId)
        {
            if (previousRecId)
            {
                if (previousRecId != custInvoiceJour.RecId && this.matchSalesTableInventoryDimension())
                {
                    // Add invoice line base for invoice to ensure that this invoice will not be processed for the second time with zero amount
                    this.addInvoiceLineBaseRelationshipToSet(tableNum(CustInvoiceJour), previousRecId, true);
                }

                this.populateInvoiceLineBase();
            }

            previousRecId = custInvoiceJour.RecId;
            previousSalesId = custInvoiceTrans.OrigSalesId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initDefault()
    {
        super();

        invoiceLineBaseMinAmountMap = new Map(Types::String, Types::Class);
        invoiceMinAmountMap = new Map(Types::String, Types::Class);

        periodChargeCalculateMinAmountTmpRecordInsertList = new RecordInsertList(tableNum(MarkupPeriodChargeCalculateMinAmountTmp), 
                                                                                false, 
                                                                                false, 
                                                                                false, 
                                                                                false, 
                                                                                false, 
                                                                                periodChargeCalculateMinAmountTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceData()
    {
        super();

        this.populateMinAmountTMPTable();
        this.addInvoiceLineBaseHeaderToMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceLineBaseHeaderToMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceLineBaseHeaderToMap()
    {
        SetEnumerator invoiceLineBaseSetEnumerator = invoiceLineBaseSet.getEnumerator();
        while (invoiceLineBaseSetEnumerator.moveNext())
        {
            MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = invoiceLineBaseSetEnumerator.current();
            invoiceLineBaseMinAmountMap.add(invoiceLineBaseCreationParameters.generateInvoiceLineBaseId(), invoiceLineBaseCreationParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodChargeRuleLineRelationshipType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeRuleLineRelationshipType getPeriodChargeRuleLineRelationshipType()
    {
        return MarkupPeriodChargeRuleLineRelationshipType::MonetaryThresholdMinAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MarkupPeriodChargeFreeTextInvoiceCreateParameters populateInvoiceCreationParameters()
    {
        // Populate only the fields that are needed for Key generation and should be transferred to final free text invoice header/line
        MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceCreationParameters = new MarkupPeriodChargeFreeTextInvoiceCreateParameters();
        invoiceCreationParameters.parmInvoiceAccount(previousCustomer);
        invoiceCreationParameters.parmCurrency(periodChargeRuleLine.CurrencyCode);
        invoiceCreationParameters.parmPeriodChargeRuleLineRecId(periodChargeRuleLine.RecId);
        invoiceCreationParameters.parmInvoiceLineFromDate(invoiceLineDateFrom);
        invoiceCreationParameters.parmInvoiceLineAmount(this.calculateInvoiceLineAmount());
        return invoiceCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceCreationParametersToMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addInvoiceCreationParametersToMap(MarkupPeriodChargeFreeTextInvoiceCreateParameters _invoiceCreationParameters)
    {
        invoiceMinAmountMap.add(_invoiceCreationParameters.generateInvoiceMapKey(true), _invoiceCreationParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBaseCreationParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal MarkupPeriodChargeInvoiceLineBaseCreateParameters populateInvoiceLineBaseCreationParameters()
    {
        MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = super();
        
        invoiceLineBaseCreationParameters.parmSalesId(previousSalesId);

        return invoiceLineBaseCreationParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMinAmountTMPTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void populateMinAmountTMPTable()
    {
        periodChargeCalculateMinAmountTmp.clear();
        periodChargeCalculateMinAmountTmp.InvoiceAccount = previousCustomer;
        
        // Set sales invoice date intervals based on free text invoice line interval
        periodChargeCalculateMinAmountTmp.SalesInvoiceDateFrom = invoiceLineDateFrom;
        periodChargeCalculateMinAmountTmp.SalesInvoiceDateTo = invoiceLineDateTo;
        periodChargeCalculateMinAmountTmpRecordInsertList.add(periodChargeCalculateMinAmountTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDatabase</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void insertDatabase()
    {
        super();

        if (periodChargeCalculateMinAmountTmpRecordInsertList)
        {
            periodChargeCalculateMinAmountTmpRecordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePeriodChargeRule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initializePeriodChargeRule()
    {
        super();
        invoiceLineDateTo = invoiceLineDateFrom + daysPerInvoice - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLineBaseId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str generateInvoiceLineBaseId()
    {
        return strFmt('%1 %2 %3 %4', int642Str(periodChargeRuleLine.RecId), int642Str(previousRecId), previousSalesId, periodChargeRuleLine.ChargeCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>