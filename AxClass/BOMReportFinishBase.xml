<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomReportFinishBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class BomReportFinishBase extends UpdateBase
{
    BOMParmReportFinish     bomParmReportFinish;

    Level                   level;
    LineNum                 lineNum;

    InventJournalTrans      inventJourTrans;
    InventJournalId         journalId;
    Voucher                 voucher;
    InventQty               returnFactor;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    InventQty calcQty(
        BOMSearch       search,
        BOMCalcData     parentBOMCalcData,
        InventTable     inventTable
        )
    {
        BOMCalcConsumption      bomCalcConsump;
        Qty                     qty;

        bomCalcConsump  = BOMCalcConsumption::construct(search.bom().Formula,parentBOMCalcData);
        qty             = -bomCalcConsump.calcConsumption(search.bom());
        qty             = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(search.bom().ItemId,
                                                                                                search.bom().InventDimId,
                                                                                                qty,
                                                                                                search.bom().UnitId,
                                                                                                inventTable.inventUnitId(),
                                                                                                NoYes::Yes);

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandQty</Name>
				<Source><![CDATA[
    protected InventQty expandQty(
        BOMSearch       search,
        InventQty       qty,
        InventQty       covPhysical,
        InventTable     inventTable
        )
    {
        InventQty   expandQty;
        BOM         localBOM;

        expandQty       = 0;

        if (inventTable.isProducedByDefault())
        {
            // Is exploded if either BOMExplode is Always or BOM line is phantom or BOMExplode is
            // Shortage and there is some to explode
            localBOM = search.bom();
            if (bomParmReportFinish.Explode   == BOMExplode::Always ||
                localBOM.type().canBePhantomExpanded())
                expandQty   = -qty;
            else
            if (bomParmReportFinish.Explode   == BOMExplode::Shortage &&
                -qty > 0                                              &&
                max(covPhysical,0) < -qty)
                expandQty   = -qty - max(covPhysical,0);
        }

        return expandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalIdAndVoucherFromReturnLotId</Name>
				<Source><![CDATA[
    protected container getJournalIdAndVoucherFromReturnLotId(InventTransId _returnLotId)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;

        select ReferenceId from inventTransOrigin
            where inventTransOrigin.InventTransId == _returnLotId
            join Voucher from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId;

        return [inventTransOrigin.ReferenceId, inventTrans.Voucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMCalcData</Name>
				<Source><![CDATA[
    BOMCalcData  initBOMCalcData()
    {
        return new BOMCalcData(
            bomParmReportFinish.Qty,
            bomParmReportFinish.Height,
            bomParmReportFinish.Width,
            bomParmReportFinish.Depth,
            bomParmReportFinish.Density);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventJournalTrans</Name>
				<Source><![CDATA[
    protected InventJournalTrans  inventJournalTrans(InventJournalTrans _inventJournalTrans = inventJourTrans)
    {
        inventJourTrans = _inventJournalTrans;
        return inventJourTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalId</Name>
				<Source><![CDATA[
    protected InventJournalId journalId()
    {
        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer parmParmBuffer(ParmBuffer  _bomParmReportFinish = bomParmReportFinish)
    {
        bomParmReportFinish = _bomParmReportFinish;

        return bomParmReportFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the consumption is catch weight and inventory quantities.
    /// </summary>
    /// <param name="_search">
    /// BOMSearch class object used to retreive the bom record.
    /// </param>
    /// <param name="_parentBOMCalcData">
    /// BOMCalcData class object used in bom consumption calculation.
    /// </param>
    /// <param name="_inventTable">
    /// item record used to calculate rounding.
    /// </param>
    /// <returns>
    /// The calculate quantity fields.  Inventory quantity and catch weight quantity respectively.
    /// </returns>
    public container pdsCWCalcQty(
        BOMSearch       _search,
        BOMCalcData     _parentBOMCalcData,
        InventTable     _inventTable
        )
    {
        BOMCalcConsumption      bomCalcConsump;
        Qty                     qty;
        PdsCWInventQty          cwQty;

        bomCalcConsump  = BOMCalcConsumption::construct(_search.bom().Formula, _parentBOMCalcData);

        [qty, cwQty] = bomCalcConsump.pdsCWCalcConsumption(_search.bom());

        qty = -qty;
        cwQty = -cwQty;

        qty             = UnitOfMeasureConverter::convert(
                            qty,
                            UnitOfMeasure::unitOfMeasureIdBySymbol(_search.bom().UnitId),
                            UnitOfMeasure::unitOfMeasureIdBySymbol(_inventTable.inventUnitId()),
                            NoYes::Yes,
                            InventTable::itemProduct(_search.bom().ItemId));

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundQty</Name>
				<Source><![CDATA[
    Qty roundQty(
        Qty     qty,
        Qty     expandQty,
        ItemId  itemId
        )
    {
        return decround(qty + expandQty,InventTable::inventDecimals(itemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchBOM</Name>
				<Source><![CDATA[
    void searchBOM(
        BOMId         _bomId,
        ItemId        _itemId,
        InventDim     _inventDim,
        BOMCalcData   _parentBOMCalcData
        )
    {
        BOMSearch               search;
        InventTable             childInventTable;

        InventQty               expandQty;
        BOMCalcData             childBOMCalcData;

        InventTable             parentInventTable;
        RouteId                 routeId;
        InventDim               inventDimBOMFinal;

        parentInventTable   = InventTable::find(_itemId);

        routeId             = parentInventTable.routeId(bomParmReportFinish.TransDate, bomParmReportFinish.Qty, _inventDim);

        level++;
        if (level > BOMParameters::find().bomMaxLevel())
            throw error("@SYS26729");

        search = BOMSearch::newBOMReportFinish(_bomId,bomParmReportFinish.TransDate,_itemId,_inventDim.ConfigId);

        boolean isBOMReportFinishPhantomFlightEnabled = BOMReportFinishPhantomFlight::instance().isEnabled();

        while (search.next())
        {
            setprefix(#PrefixField(search.BOM(),ItemId));
            lineNum++;

            childInventTable = InventTable::find(search.bom().ItemId);
            if (! childInventTable.checkValid(search.bom().ItemId))
                throw error("@SYS18447");

            expandQty = this.updateBOMConsumption(search,_parentBOMCalcData,childInventTable,routeId,_inventDim);

            if (expandQty)
            {
                inventDimBOMFinal = search.bom().BOMMap::inventDimFinal(_itemId,_inventDim,routeId);
                childBOMCalcData = BOMCalcData::newInventTable(expandQty,childInventTable);
                
                if (isBOMReportFinishPhantomFlightEnabled)
                {
                    this.searchBOM(
                        search.bom().BOMMap::itemBOMId(bomParmReportFinish.TransDate, expandQty, inventDimBOMFinal),
                        search.bom().ItemId,
                        _inventDim,
                        childBOMCalcData);
                }
                else
                {
                    this.searchBOM(
                        search.bom().BOMMap::itemBOMId(bomParmReportFinish.TransDate, expandQty, inventDimBOMFinal),
                        search.bom().ItemId,
                        inventDimBOMFinal,
                        childBOMCalcData);
                }
            }
        }

        level--;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchInventJournalTrans</Name>
				<Source><![CDATA[
    void searchInventJournalTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchInventTrans</Name>
				<Source><![CDATA[
    void searchInventTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchReturnLotId</Name>
				<Source><![CDATA[
    void searchReturnLotId()
    {
        if (this.inventJournalTrans())
            this.searchInventJournalTrans();
        else
            this.searchInventTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMConsumption</Name>
				<Source><![CDATA[
    abstract InventQty updateBOMConsumption(
        BOMSearch       search,
        BOMCalcData     parentBOMCalcData,
        InventTable     inventTable,
        RouteId         routeId,
        InventDim       _parentInventDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        return bomParmReportFinish.validateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTransIdReturnBOMForm</Name>
				<Source><![CDATA[
    static void lookupTransIdReturnBOMForm(FormStringControl ctrl,  FormDataSource _formDataSource)
    {
        Args        args;
        Object      formRun;

        args = new Args();
        args.name(formstr(InventTransOriginReturnLookup));

        args.caller(ctrl);
        args.record(_formDataSource.cursor());

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.selectTarget(ctrl);

        ctrl.performFormLookup(formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>