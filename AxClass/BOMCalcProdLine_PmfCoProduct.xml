<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProdLine_PmfCoProduct</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// BOMCalcProdLine_PmfCoProduct runs the Production line cost calculation
/// for production lines with a co/by.
/// </summary>
class BomCalcProdLine_PmfCoProduct extends BOMCalcProdLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost consumption for the active co/by product.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// protected void calcConsumption()
    /// </syntax>
    /// </remarks>
    protected void calcConsumption()
    {
        BOMCalcProd_PmfCoProduct    bomCalcProd_PmfCoProduct = this.parmParentBOMCalc();
        // co product
        consumptionInventQty = prodBOM.QtyInventCalc
            * bomCalcProd_PmfCoProduct.coProduct().CostAllocationPct / 100;

        consumptionInventQty = this.calculateReducedRecycledBpConsumption(consumptionInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the global ProdCalcTrans record
    /// </summary>
    protected void initProdCalcTrans()
    {
        BOMCalcProd_PmfCoProduct    bomCalcProd_PmfCoProduct = this.parmParentBOMCalc();

        prodCalcTrans.clear();

        prodCalcTrans = PmfCoByProdCalcTrans::findIdRefCalcType(prodBOM.TableId, prodBOM.RecId,
            bomCalcProd_PmfCoProduct.coProduct().RecId, calculationType, true);

        if (prodCalcTrans.RecId)
        {
            this.resetCalcValues();

            itemId          = prodCalcTrans.Resource    ? prodCalcTrans.Resource    : itemId;
            inventUnitId    = prodCalcTrans.UnitId      ? prodCalcTrans.UnitId      : inventUnitId;
            inventDimId     = prodCalcTrans.InventDimId ? prodCalcTrans.InventDimId : inventDimId;
        }
        prodCalcTrans.PmfIdRefCoByRecId = bomCalcProd_PmfCoProduct.coProduct().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProdCalcTransBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts extra records representing the cost breakdown on a
    /// production calculation line.
    /// </summary>
    protected void insertProdCalcTransBreakdown()
    {
        PmfCoByProdCalcTrans   prodCalcTransCostBreakdown;
        LineNum         lineNumBreakdown;
        MapEnumerator   stdCostBreakdownEnumerator;
        InventPriceMap  inventPriceMap;

        if (!this.mustCalcCostBreakdown())
            return;

        if (! bomCalcCost.stdCostBreakdown())
        {
            inventPriceMap = InventTable::find(itemId).inventCostPriceMap(inventDimId, null, null, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),  siteId);
            bomCalcCost.stdCostBreakDownCalcRollupExt(inventPriceMap.RecId);
            stdCostBreakdownEnumerator = bomCalcCost.stdCostBreakdownAmount(consumptionInventQty).getEnumerator();
        }
        else
        {
            stdCostBreakdownEnumerator = bomCalcCost.stdCostBreakdownAmount().getEnumerator();
        }

        lineNumBreakdown = prodCalcTrans.LineNum;

        delete_from prodCalcTransCostBreakdown
            where prodCalcTransCostBreakdown.PmfIdRefCoByRecId  == prodCalcTrans.PmfIdRefCoByRecId
               && prodCalcTransCostBreakdown.Resource           == prodCalcTrans.Resource
               && prodCalcTransCostBreakdown.IdRefTableId       == prodCalcTrans.IdRefTableId
               && prodCalcTransCostBreakdown.IdRefRecId         == prodCalcTrans.IdRefRecId
               && prodCalcTransCostBreakdown.CollectRefProdId   == prodCalcTrans.CollectRefProdId
               && prodCalcTransCostBreakdown.CollectRefLevel    == prodCalcTrans.CollectRefLevel + 1
               && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
               && prodCalcTransCostBreakdown.LineNum            >  prodCalcTrans.LineNum
               && prodCalcTransCostBreakdown.LineNum            <  prodCalcTrans.LineNum + 1;

        while (stdCostBreakdownEnumerator.moveNext())
        {
            lineNumBreakdown += 0.00001;

            prodCalcTransCostBreakdown.initCostBreakdown(prodCalcTrans);
            prodCalcTransCostBreakdown.LineNum          = lineNumBreakdown;
            prodCalcTransCostBreakdown.CostGroupId      = stdCostBreakdownEnumerator.currentKey();
            [prodCalcTransCostBreakdown.CostAmount]     = stdCostBreakdownEnumerator.currentValue();
            prodCalcTransCostBreakdown.ConsumpVariable  = prodCalcTrans.ConsumpVariable;
            prodCalcTransCostBreakdown.ConsumpConstant  = prodCalcTrans.ConsumpConstant;
            prodCalcTransCostBreakdown.insert();
        }

        if (prodCalcTrans.LineNum != lineNumBreakdown)
        {
            prodCalcTrans.bom = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of the BOMCalcProdLine_PmfCoProduct class.
    /// </summary>
    /// <returns>
    /// New instance of the BOMCalcProdLine_PmfCoProduct class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static BOMCalcProdLine_PmfCoProduct construct()
    /// </syntax>
    /// </remarks>
    public static BOMCalcProdLine_PmfCoProduct construct()
    {
        return new BOMCalcProdLine_PmfCoProduct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalcCoProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates new instance of BOMCalcProdLine_PmfCoProduct
    /// class based on input parameters.
    /// </summary>
    /// <param name="_prodBOM">
    /// ProdBOM record used to initialize new BomCalcProdLine_PmfCoProduct class.
    /// </param>
    /// <param name="_parentBOMCalcProd">
    /// Parent BOMCalcProd record.
    /// </param>
    /// <param name="_lineNum">
    /// LineNum used to initialize BomCalcProdLine_PmfCoProduct class.
    /// </param>
    /// <param name="_siteId">
    /// InventSiteId used to initialize BOMCalcProdLine_PmfCoProduct class.
    /// </param>
    /// <returns>
    /// New instance of the BOMCalcProdLine_PmfCoProduct  class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static BOMCalcProdLine_PmfCoProduct newBOMCalcCoProd(
    ///    ProdBOM                     _prodBOM,
    ///    BOMCalcProd_PmfCoProduct    _parentBOMCalcProd,
    ///    LineNum                     _lineNum,
    ///    InventSiteId                _siteId)
    /// </syntax>
    /// </remarks>
    public static BOMCalcProdLine_PmfCoProduct newBOMCalcCoProd(
        ProdBOM                     _prodBOM,
        BOMCalcProd_PmfCoProduct    _parentBOMCalcProd,
        LineNum                     _lineNum,
        InventSiteId                _siteId)
    {
        BOMCalcProdLine_PmfCoProduct bomCalcProdLine
            = BOMCalcProdLine_PmfCoProduct::construct();

        bomCalcProdLine.parmItemId(_prodBOM.ItemId);
        bomCalcProdLine.parmInventDimId(_prodBOM.InventDimId);
        bomCalcProdLine.parmProdBOM(_prodBOM.data());
        bomCalcProdLine.parmLineNum(_lineNum);
        bomCalcProdLine.parmSiteId(_siteId);

        bomCalcProdLine.parmParentBOMCalc(_parentBOMCalcProd);

        return bomCalcProdLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParent</Name>
				<Source><![CDATA[
    protected void updateParent()
    {
        PmfCoByProdCalcTrans prodCalcTransCostBreakdown;
        boolean              breakdownExists;
        BOMCalcProd          localParentBOMCalcProd = this.parmParentBOMCalc() as BOMCalcProd;
        PmfCoByProdCalcTrans breakdownProdCalcTrans;

        // If a breakdown has been inserted, add this for the calculation of the indirect cost
        if (prodCalcTrans.DerivedReference != InventRefType::Production && prodCalcTrans.CalcType == ItemCalcType::BOM)
        {
            while select * from prodCalcTransCostBreakdown
                where prodCalcTransCostBreakdown.TransRefId         == prodCalcTrans.TransRefId
                   && prodCalcTransCostBreakdown.TransRefType       == prodCalcTrans.TransRefType
                   && prodCalcTransCostBreakdown.Resource           == prodCalcTrans.Resource
                   && prodCalcTransCostBreakdown.IdRefTableId       == prodCalcTrans.IdRefTableId
                   && prodCalcTransCostBreakdown.IdRefRecId         == prodCalcTrans.IdRefRecId
                   && prodCalcTransCostBreakdown.CollectRefProdId   == prodCalcTrans.CollectRefProdId
                   && prodCalcTransCostBreakdown.CollectRefLevel    == prodCalcTrans.CollectRefLevel + 1
                   && prodCalcTransCostBreakdown.CalcType           == ItemCalcType::CostGroup
                   && prodCalcTransCostBreakdown.LineNum            >  prodCalcTrans.LineNum
                   && prodCalcTransCostBreakdown.LineNum            <  prodCalcTrans.LineNum + 1
                   && prodCalcTransCostBreakdown.PmfIdRefCoByRecId  == prodCalcTrans.PmfIdRefCoByRecId
            {
                localParentBOMCalcProd.updateCostCalcTransData(prodCalcTransCostBreakdown);
                breakdownExists = true;
            }
        }

        if (prodCalcTrans.CalcType != ItemCalcType::BOM ||
            (prodCalcTrans.DerivedReference == InventRefType::None && !breakdownExists)) // Exclude sub-BOMs with type equal Production
        {
            localParentBOMCalcProd.updateCostCalcTransData(prodCalcTrans);
        }
        else if (prodCalcTrans.DerivedReference == InventRefType::None && breakdownExists)
        {
            breakdownProdCalcTrans.data(prodCalcTrans);
            breakdownProdCalcTrans.CostAmount = 0;
            breakdownProdCalcTrans.CostMarkup = 0;
            breakdownProdCalcTrans.RealCostAdjustment = 0;
            breakdownProdCalcTrans.RealCostAmount = 0;
            breakdownProdCalcTrans.CalcType = ItemCalcType::Item;
            localParentBOMCalcProd.updateCostCalcTransData(breakdownProdCalcTrans);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>