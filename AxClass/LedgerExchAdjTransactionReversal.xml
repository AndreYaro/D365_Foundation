<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExchAdjTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plugin for reversing general Ledger foreign currency revaluation transactions.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.TransactionReversalBase))]
internal final class LedgerExchAdjTransactionReversal extends TransactionReversalBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    internal boolean reverse(TransactionReversalExecutionDetail _reversalExecutionDetail, TransactionReversalContract _contract)
    {
        #isoCountryRegionCodes

        TransactionReversal_Ledger ledgerReversal;
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            ledgerReversal = TransactionReversal_Ledger_RU::construct();
        }
        else
        {
            ledgerReversal = TransactionReversal_Ledger::construct();
        }

        ledgerReversal.parmReversalDate(_contract.parmReversalDate());
        ledgerReversal.parmContract(_contract);
        
        LedgerExchAdjHist ledgerExchAdjHist;
        select ledgerExchAdjHist
            where ledgerExchAdjHist.RecId == _reversalExecutionDetail.ReferenceRecId;

        boolean isReversed;
        if (ledgerExchAdjHist.RecId != 0)
        {
            changecompany(ledgerExchAdjHist.LegalEntity)
            {
                isReversed = ledgerReversal.reverseTransaction(ledgerExchAdjHist);
            }
        }

        return isReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isValidJournalCategory(TransactionReversalExecutionDetail _detail)
    {
        return (_detail.JournalCategory == LedgerTransType::ExchAdjustment) && (_detail.ReferenceTableId == tableNum(LedgerExchAdjHist));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecurableType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected SecurableType getSecurableType()
    {
        return SecurableType::MenuItemDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MenuItemName getMenuItemName()
    {
        return menuItemDisplayStr(LedgerExchAdjTransactionReversal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEligibleForReverse</Name>
				<Source><![CDATA[
    internal static boolean validateEligibleForReverse(
        GeneralJournalEntry _generalJournalEntry,
        Common _originatingRecord)
    {
        boolean isValid = true;

        // If reversal validation is currently successful, and the Journal is a foreign currency revaluation, perform reversal validation.
        if (_generalJournalEntry.JournalCategory == LedgerTransType::ExchAdjustment)
        {
            // A General ledger foreign currency revaluation will have an audit/history trail record in the LedgerExchAdjHist table.
            LedgerExchAdjHist ledgerExchAdjHist = LedgerExchAdjHist::findByGeneralJournalEntry(_generalJournalEntry);

            if (ledgerExchAdjHist)
            {
              // General ledger foreign currency revaluations must have an associated LedgerExchAdjHist record to reverse.
              if (_originatingRecord.TableId != tableNum(LedgerExchAdjHist))
              {
                  isValid = checkFailed(strFmt("@GeneralLedger:ForeignCurrencyRevaluationReversalSourceInvokeCheck", "@SYS55328"));
              }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFutureForeignCurrencyRevaluationTransactionsExist</Name>
				<Source><![CDATA[
    internal static boolean validateFutureForeignCurrencyRevaluationTransactionsExist(
        GeneralJournalEntry _generalJournalEntry,
        boolean _suppressPrompt)
    {
        boolean isValid = true;

        // If the operation is run non-interactive, do not prompt for any user input confirmations
        if (_suppressPrompt == false
            && LedgerExchAdj::futureForeignCurrencyRevaluationTransactionsExist(_generalJournalEntry.AccountingDate, _generalJournalEntry.Ledger))
        {
            DialogButton dialogOkCancel = LedgerExchAdjTransactionReversal::promptfutureForeignCurrencyRevaluationTransactionsExist();

            if (dialogOkCancel == DialogButton::Cancel)
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptfutureForeignCurrencyRevaluationTransactionsExist</Name>
				<Source><![CDATA[
    private static DialogButton promptfutureForeignCurrencyRevaluationTransactionsExist()
    {
        return Box::okCancel("@GeneralLedger:ForeignCurrencyRevaluationReversalFutureTransactionsExist", DialogButton::Ok);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>