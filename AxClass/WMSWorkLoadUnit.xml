<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsWorkLoadUnit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WMSWorkLoadUnit</c> class defines a warehouse workload unit.
/// </summary>
public class wmsWorkLoadUnit
{
    InventSiteId                    inventSiteId;
    InventLocationId                inventLocationId;
    WMSReqTransMovementStatus       movementStatus;
    InventDirection                 direction;
    TransDate                       trackingDate;
    boolean                         hasBackLog;
    WMSWorkLoadForecast             workLoadForecast;
    RefRecId                        reportSetup;
    WMSWorkloadCapacityWarehouse    workloadCapacityWarehouse;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds for update the internal <c>WMSWorkLoadForecast</c> load forecast for the current work load
    /// unit.
    /// </summary>
    public void find()
    {
        select forupdate workLoadForecast
            where workLoadForecast.wmsReportSetup == reportSetup
                && workLoadForecast.InventSiteId == inventSiteId
                && workLoadForecast.InventLocationID == inventLocationId
                && workLoadForecast.MovementStatus == movementStatus
                && workLoadForecast.Direction == direction
                && workLoadForecast.TrackingDate == trackingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets all inbound transactions types, based on the current setup.
    /// </summary>
    /// <returns>
    ///     A instance of the <c>Set</c>, which contains all inbound transactions types, based on the current setup.
    /// </returns>
    public Set getInboundTransTypes()
    {
        Set inboundTypes;

        if (workloadCapacityWarehouse.RecId)
        {
            inboundTypes = workloadCapacityWarehouse.getInboundTransTypes();
        }

        return inboundTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundTransTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all outbound transactions types, based on the current setup.
    /// </summary>
    /// <returns>
    /// An instance of the set that contains all outbound transactions types, based on the current setup.
    /// </returns>
    public Set getOutboundTransTypes()
    {
        Set outboundTypes = new Set(Types::Enum);

        if (workloadCapacityWarehouse.RecId)
        {
            outboundTypes = workloadCapacityWarehouse.getOutboundTransTypes();
        }

        return outboundTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirection</Name>
				<Source><![CDATA[
        public InventDirection parmDirection(InventDirection _direction = direction)
    {
        direction = _direction;

        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasBackLog</Name>
				<Source><![CDATA[
        public boolean parmHasBackLog(boolean _hasBackLog = hasBackLog)
    {
        hasBackLog = _hasBackLog;

        return hasBackLog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
        public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
        public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovementStatus</Name>
				<Source><![CDATA[
        public WMSReqTransMovementStatus parmMovementStatus(WMSReqTransMovementStatus _movementStatus = movementStatus)
    {
        movementStatus = _movementStatus;

        return movementStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportSetup</Name>
				<Source><![CDATA[
        public RefRecId parmReportSetup(RefRecId _reportSetup = reportSetup)
    {
        reportSetup = _reportSetup;

        return reportSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingDate</Name>
				<Source><![CDATA[
        public TransDate parmTrackingDate(TransDate _trackingDate = trackingDate)
    {
        trackingDate = _trackingDate;

        return trackingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkloadCapacityWarehouse</Name>
				<Source><![CDATA[
        public WMSWorkloadCapacityWarehouse parmWorkloadCapacityWarehouse(WMSWorkloadCapacityWarehouse _workloadCapacityWarehouse = workloadCapacityWarehouse)
    {
        workloadCapacityWarehouse = _workloadCapacityWarehouse;

        return workloadCapacityWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves all changes for the current work load unit.
    /// </summary>
    public void saveChanges()
    {
        if (!workLoadForecast.RecId)
        {
            workLoadForecast.TrackingDate = trackingDate;
            workLoadForecast.Direction = direction;
            workLoadForecast.MovementStatus = movementStatus;
            workLoadForecast.wmsReportSetup = reportSetup;
            workLoadForecast.HasBacklog = hasBackLog;
            workLoadForecast.InventSiteId = inventSiteId;
            workLoadForecast.InventLocationID = inventLocationId;

            workLoadForecast.insert();
        }
        else
        {
            workLoadForecast.HasBacklog = workLoadForecast.HasBacklog || hasBackLog;
            workLoadForecast.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHasBackLogFromPeriodDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the backlog field based on the period description.
    /// </summary>
    /// <param name="_description">
    /// The period description.
    /// </param>
    public void setHasBackLogFromPeriodDescription(str _description)
    {
        this.parmHasBackLog(_description == "@SYS90879");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTrackingDateFromPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the tracking date based on the period data.
    /// </summary>
    /// <param name="_endDate">
    ///     The end date of the period.
    /// </param>
    /// <param name="_description">
    ///     The period description.
    /// </param>
    public void setTrackingDateFromPeriod(TransDate _endDate, str _description)
    {
        if (_description == "@SYS90879")
        {
            this.parmTrackingDate(WMSSpaceUtilDatePeriods::findNextPeriodStartDate(_endDate));
        }
        else
        {
            this.parmTrackingDate(_endDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSWorkLoadUnit construct()
    {
        return new WMSWorkLoadUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventDimAndReportSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a class instance based on the inventory dimensions and work load report setup.
    /// </summary>
    /// <param name="_inventDim">
    /// A specified <c>InventDim</c> buffer.
    /// </param>
    /// <param name="_reportSetup">
    /// A work load report setup ID value.
    /// </param>
    /// <returns>
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </returns>
    public static WMSWorkLoadUnit newFromInventDimAndReportSetup(InventDim _inventDim, RefRecId _reportSetup)
    {
        WMSWorkLoadUnit                 workLoadUnit = WMSWorkLoadUnit::construct();
        WMSWorkloadCapacityWarehouse    workloadCapacityWarehouse;

        workLoadUnit.parmInventSiteId(_inventDim.InventSiteId);
        workLoadUnit.parmInventLocationId(_inventDim.InventLocationId);
        workLoadUnit.parmReportSetup(_reportSetup);

        select workloadCapacityWarehouse
            where workloadCapacityWarehouse.wmsReportSetup == _reportSetup
                && workloadCapacityWarehouse.InventLocation == _inventDim.InventLocationId;

        workLoadUnit.parmWorkloadCapacityWarehouse(workloadCapacityWarehouse);

        return workLoadUnit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>