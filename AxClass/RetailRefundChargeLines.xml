<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRefundChargeLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailRefundChargeLines</c> handles creating the refund charge lines to be added to a return order based on the original order.
/// </summary>
class RetailRefundChargeLines
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreateRefundChargeLinesForReturnOrder</Name>
				<Source><![CDATA[
    internal static void CreateRefundChargeLinesForReturnOrder(SalesTable returnOrder, SalesTable originalOrder)
    {
        CustInvoiceJour custInvoiceJour;

        ttsbegin;
        
        while select * from custInvoiceJour
            where custInvoiceJour.SalesId == originalOrder.SalesId
            {
                RetailRefundChargeLines::CreateRefundChargeLinesPerCustInvoiceJour(custInvoiceJour, returnOrder);
            }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateRefundChargeLinesForReturnLine</Name>
				<Source><![CDATA[
    internal static void CreateRefundChargeLinesForReturnLine(SalesLine returnLine, SalesLine originalLine)
    {
        CustInvoiceTrans custInvoiceTrans;

        ttsbegin;

        
        while select * from custInvoiceTrans
            where custInvoiceTrans.SalesId == originalLine.SalesId
            && custInvoiceTrans.LineNum == originalLine.LineNum
        {
            RetailRefundChargeLines::CreateRefundChargeLinesPerCustInvoiceTrans(custInvoiceTrans, returnLine);
        }
        

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefundChargeLinesPerCustInvoiceJour</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    public static void createRefundChargeLinesPerCustInvoiceJour(CustInvoiceJour custInvoiceJour, SalesTable returnOrder)
    {
        MarkupTable markupTable;
        MarkupTrans originalCharges, alreadyReturnedCharges, refundCharge;
        SalesLine salesLineReturn;
        InventTransOrigin inventTransOrigin;
        RetailParameters retailParameters = RetailParameters::find();
        CustInvoiceJour previousInvoice;

        if (!RetailRefundChargeLines::shouldRefundCharges())
        {
            return;
        }

        while select TransRecId, TransTableId, sum(Value), MarkupCode, 
            ModuleType, TaxGroup, TaxItemGroup, CurrencyCode from originalCharges
            group by originalCharges.MarkupCode, originalCharges.ModuleType, originalCharges.TaxGroup, originalCharges.TaxItemGroup, originalCharges.CurrencyCode
            where originalCharges.TransRecId == custInvoiceJour.RecId
            && originalCharges.TransTableId == tableNum(CustInvoiceJour)
        {
            if (!RetailRefundChargeLines::shouldRefundThisCharge(originalCharges))
            {
                continue;
            }

            select sum(calculatedAmount) from alreadyReturnedCharges
                where alreadyReturnedCharges.MarkupCode == originalCharges.MarkupCode
                && alreadyReturnedCharges.ModuleType == originalCharges.ModuleType
                && alreadyReturnedCharges.TaxGroup == originalCharges.TaxGroup
                && alreadyReturnedCharges.TaxItemGroup == originalCharges.TaxItemGroup
            exists join previousInvoice
                where alreadyReturnedCharges.TransRecId == previousInvoice.RecId
                && alreadyReturnedCharges.TransTableId == tableNum(CustInvoiceJour)
            exists join salesLineReturn
                where previousInvoice.SalesId == salesLineReturn.SalesId
            exists join inventTransOrigin
                where salesLineReturn.InventTransIdReturn == inventTransOrigin.InventTransId
                && inventTransOrigin.ReferenceCategory == InventTransType::Sales
                && inventTransOrigin.ReferenceId == custInvoiceJour.SalesId;

            refundCharge.clear();
            refundCharge.initFromSalesTable(returnOrder);
            refundCharge = RetailRefundChargeLines::createRefundMarkupTransFromOriginalMarkupTrans(originalCharges, alreadyReturnedCharges.CalculatedAmount);
            RetailRefundChargeLines::insertRefundCharge(refundCharge, returnOrder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefundChargeLinesPerCustInvoiceTrans</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    public static void createRefundChargeLinesPerCustInvoiceTrans(CustInvoiceTrans custInvoiceTrans, SalesLine returnLine)
    {
        MarkupTable markupTable;
        MarkupTrans originalCharges, alreadyReturnedCharges, refundCharge;
        SalesLine salesLineReturn;
        InventTransOrigin inventTransOrigin;
        RetailParameters retailParameters = RetailParameters::find();
        CustInvoiceTrans previousInvoiceTrans;

        if (!RetailRefundChargeLines::shouldRefundCharges())
        {
            return;
        }

        while select TransRecId, TransTableId, sum(Value), MarkupCode, 
            ModuleType, TaxGroup, TaxItemGroup, CurrencyCode, ModuleCategory, MarkupCategory, Keep from originalCharges
            group by originalCharges.MarkupCode, originalCharges.ModuleType, originalCharges.TaxGroup, originalCharges.TaxItemGroup,
            originalCharges.CurrencyCode, originalCharges.ModuleCategory, originalCharges.MarkupCategory, originalCharges.Keep
            where originalCharges.TransRecId == custInvoiceTrans.RecId
                && originalCharges.TransTableId == tableNum(CustInvoiceTrans)
                
        {
            if (!RetailRefundChargeLines::shouldRefundThisCharge(originalCharges))
            {
                continue;
            }

            select sum(calculatedAmount) from alreadyReturnedCharges
                    where alreadyReturnedCharges.MarkupCode == originalCharges.MarkupCode
                    && alreadyReturnedCharges.ModuleType == originalCharges.ModuleType
                    && alreadyReturnedCharges.TaxGroup == originalCharges.TaxGroup
                    && alreadyReturnedCharges.TaxItemGroup == originalCharges.TaxItemGroup
                exists join previousInvoiceTrans
                    where alreadyReturnedCharges.TransRecId == previousInvoiceTrans.RecId
                    && alreadyReturnedCharges.TransTableId == tableNum(CustInvoiceTrans)
                exists join salesLineReturn
                    where previousInvoiceTrans.SalesId == salesLineReturn.Salesid
                exists join inventTransOrigin
                    where salesLineReturn.InventTransIdReturn == inventTransOrigin.InventTransId
                    && inventTransOrigin.ReferenceCategory == InventTransType::Sales
                    && inventTransOrigin.ReferenceId == custInvoiceTrans.SalesId
                    && inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId;

            refundCharge.clear();
            refundCharge.initFromSalesLine(returnLine);
            refundCharge = RetailRefundChargeLines::createRefundMarkupTransFromOriginalMarkupTrans(originalCharges, alreadyReturnedCharges.CalculatedAmount);
            RetailRefundChargeLines::insertRefundCharge(refundCharge, returnLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSearchMarkupForSalesLineCopy</Name>
				<Source><![CDATA[
    internal static boolean shouldSearchMarkupForSalesLineCopy(SalesTable _salesTable)
    {
        return !RetailDoNotApplyLineChargeToReturnOrderToggle::instance().isEnabled()
            || !RetailCharges::isRetailOrderWithAdvancedAutoCharges(_salesTable)
            || !_salesTable.returnItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRefundMarkupTransFromOriginalMarkupTrans</Name>
				<Source><![CDATA[
    private static MarkupTrans createRefundMarkupTransFromOriginalMarkupTrans(MarkupTrans originalCharge, real alreadyReturnedAmount)
    {
        MarkupTrans refundCharge;

        refundCharge.initFromMarkupTrans(originalCharge);

        refundCharge.IsAutoCharge = NoYes::No;

        refundCharge.Value = originalCharge.Value;
        
        // The already returned amount should not be subtracted from pcs charges, because the pcs charge depends on the quantity.
        if (originalCharge.MarkupCategory != MarkupCategory::Pcs)
        {
            refundCharge.Value -= abs(alreadyReturnedAmount);
        }

        if (refundCharge.Value < 0)
        {
            refundCharge.Value = 0;
        }
        else if (originalCharge.MarkupCategory != MarkupCategory::Pcs)
        {
            refundCharge.Value = refundCharge.Value * -1;
        }

        refundCharge.Txt = "@RetailAutoCharge:DescriptionForRefundChargeLines";

        return refundCharge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRefundCharge</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected static void insertRefundCharge(MarkupTrans refundCharge, Common common)
    {
        refundCharge.TransTableId = common.TableId;
        refundCharge.TransRecId = common.RecId;
        refundCharge.LineNum = MarkupTrans::lastLineNum(common.TableId, common.RecId) + 1;

        refundCharge.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRefundCharges</Name>
				<Source><![CDATA[
    private static boolean shouldRefundCharges()
    {
        if (RetailParameters::isRetailAutoChargesEnabledAndInUse())
        {
            return true;
        }
        else
        {
            return RetailParameters::find().RefundShippingCharges;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRefundThisCharge</Name>
				<Source><![CDATA[
    private static boolean shouldRefundThisCharge(MarkupTrans markupTrans)
    {
        MarkupTable markupTable;
        RetailParameters retailParameters;

        if (markupTrans.Value <= 0)
        {
            return false;
        }

        retailParameters = RetailParameters::find();

        if (RetailParameters::isRetailAutoChargesEnabledAndInUse())
        {
            select firstonly * from markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.ModuleType == markupTrans.ModuleType;

            return markupTable.Refundable;
        }
        else 
        {
            return retailParameters.ShippingChargeCode == markupTrans.MarkupCode;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>