<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JapaneseDateTimeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper provides methods to work with dates in Japanese culture.
/// </summary>
public static class JapaneseDateTimeHelper
{
    private const str DatePattern = '%1%2年%3月%4日';
    private const str DefaultDateFormat = 'ggy\'年\'M\'月\'d\'日\'';
    private const str FormatYear = 'y\'年\'';
    private const str FormatMonth = 'MM';
    private const str FormatDay = 'dd';
    private const str FormatEra = 'gg';
    private const str YearSymbol = '年';
    private const str MonthSymbol = '月';
    private const str DaySymbol = '日';
    private const str CultureName = 'ja-JP';

    private static System.Globalization.CultureInfo cultureInfo;
    private static System.Globalization.JapaneseCalendar japaneseCalendar;



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor.
    /// </summary>
    static void TypeNew()
    {
        cultureInfo = new System.Globalization.CultureInfo(CultureName, false);
        japaneseCalendar = new System.Globalization.JapaneseCalendar();
        System.Globalization.DateTimeFormatInfo dateTimeFormatInfo = cultureInfo.DateTimeFormat;
        dateTimeFormatInfo.Calendar = japaneseCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>date2str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a date to the Japanese formated date.
    /// </summary>
    /// <param name="_date">The Gregorian date.</param>
    /// <param name="_strfmt">The Japanese date format.</param>
    /// <returns>The Japanese formated date.</returns>
    public static str date2str(date _date, str _dateFormat = DefaultDateFormat)
    {
        System.DateTime dateTime = new System.DateTime(year(_date), mthOfYr(_date), dayOfMth(_date));
        str result = dateTime.ToString(_dateFormat, cultureInfo);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2dateForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a string represented date without era name to the Gregorian date based on provided period.
    /// </summary>
    /// <param name = "_stringDate">The string represented date without era name.</param>
    /// <param name = "_date">The date period to identify the era.</param>
    /// <returns>The Gregorian date.</returns>
    public static date str2dateForPeriod(str _stringDate, date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        const int dateMaxLength = 6;
        int year, month, day;
        date result;
        
        str numbers = System.Text.RegularExpressions.Regex::Replace(_stringDate, @'[^\d]', '');

        if (strLen(numbers) == dateMaxLength)
        {
            year = str2int(subStr(numbers, 1, 2));
            month = str2int(subStr(numbers, 3, 2));
            day = str2int(subStr(numbers, 5, 2));
        }

        if (!year || !month || !day)
        {
            warning("@GLS63107");
        }
        else
        {
            str currentEraName = JapaneseDateTimeHelper::date2str(_date, 'gg');            
            result = JapaneseDateTimeHelper::str2date(strFmt(DatePattern, currentEraName, year, month, day));
        }
        
            
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2date</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a string represented date to the Gregorian date.
    /// </summary>
    /// <param name = "_date">The string represented date.</param>
    /// <returns>The Gregorian date.</returns>
    public static date str2date(str _date)
    {
        System.DateTime dateTime;
        date result;
        
        try
        {
            if (System.DateTime::TryParse(_date, cultureInfo, System.Globalization.DateTimeStyles::None, byref dateTime))
            {
                result = dateTime;
            }
        }
        catch
        {
            result = dateNull();
        }
            
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEraNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an era number.
    /// </summary>
    /// <param name = "_date">The Gregorian date.</param>
    /// <returns>The era number.</returns>
    public static int getEraNumber(date _date)
    {
        int result = japaneseCalendar.GetEra(_date);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the year number or the Gannen (元) symbol for the first year.
    /// </summary>
    /// <param name = "_date">The Gregorian date.</param>
    /// <returns>The year number or the Gannen symbol.</returns>
    public static str getYearStr(date _date)
    {
        str result = strReplace(JapaneseDateTimeHelper::date2str(_date, FormatYear), YearSymbol, "");
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the month number.
    /// </summary>
    /// <param name = "_date">The Gregorian date.</param>
    /// <returns>The month number.</returns>
    public static str getMonthStr(date _date)
    {
        str result = strReplace(JapaneseDateTimeHelper::date2str(_date, FormatMonth), MonthSymbol, "");
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDayStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the day number.
    /// </summary>
    /// <param name = "_date">The Gregorian date.</param>
    /// <returns>The day number.</returns>
    public static str getDayStr(date _date)
    {
        str result = strReplace(JapaneseDateTimeHelper::date2str(_date, FormatDay), DaySymbol, "");
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEraName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the era name.
    /// </summary>
    /// <param name = "_date">The Gregorian date.</param>
    /// <returns>The era name.</returns>
    public static str getEraName(date _date)
    {
        str result = JapaneseDateTimeHelper::date2str(_date, FormatEra);
        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>