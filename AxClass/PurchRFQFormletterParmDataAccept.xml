<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormletterParmDataAccept</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormletterParmDataAccept extends PurchRFQFormletterParmData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    public boolean mayJournalBePosted(Common _purchRFQTable)
    {
        PurchRFQTable   tmpPurchRFQTable = _purchRFQTable as PurchRFQTable;
        boolean         ret             = super(_purchRFQTable);

        if (!this.parmMultiSelectRequired() &&
            (tmpPurchRFQTable.StatusLow == PurchRFQStatus::Accepted ||
            tmpPurchRFQTable.StatusLow == PurchRFQStatus::Rejected))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PurchRFQFormletterParmDataAccept construct()
    {
        return new PurchRFQFormletterParmDataAccept();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRecordLists</Name>
				<Source><![CDATA[
    protected void insertRecordLists()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        //<GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.transferTaxDocument();
        }
        //</GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        TransitDocumentManager_IN   transitDocManager;
        SetEnumerator               setEnum;
        FormletterParmTable         purchRFQParmTableMap;
        PurchRFQReplyLine           purchRFQReplyLineTransit;
        PurchRFQReplyTable          purchRFQReplyTableTransit;
        PurchRFQParmLine            purchRFQParmLineTransit;
        PurchRFQParmTable           purchRFQParmTableTransit;
        
        transitDocManager = TransitDocumentManager_IN::newManager();
        if (transitDocManager.existsAnyTransitDocType()
                && transitDocManager.existTransitRuleForTransType(tableNum(PurchRFQParmTable)))
        {
            setEnum = parmTableMap.valueSet().getEnumerator();
            while (setEnum.moveNext())
            {
                purchRFQParmTableMap = setEnum.current();
                purchRFQParmTableTransit = PurchRFQParmTable::find(purchRFQParmTableMap.ParmId, purchRFQParmTableMap.TableRefId);
                purchRFQReplyTableTransit = PurchRFQReplyTable::find(purchRFQParmTableTransit.RFQId);

                transitDocManager.transit(purchRFQReplyTableTransit, purchRFQParmTableTransit);

                while select purchRFQParmLineTransit
                    join purchRFQReplyLineTransit
                    where purchRFQParmLineTransit.ParmId        == purchRFQParmTableTransit.ParmId
                        && purchRFQParmLineTransit.RFQId        == purchRFQParmTableTransit.RFQId
                        && purchRFQParmLineTransit.TableRefId   == purchRFQParmTableTransit.TableRefId
                        && purchRFQParmLineTransit.RFQLineRecId == purchRFQReplyLineTransit.RFQLineRecId
                {
                    transitDocManager.transit(purchRFQReplyLineTransit, purchRFQParmLineTransit);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer tax document
    /// </summary>
    private void transferTaxDocument()
    {
        SetEnumerator               setEnum;
        FormletterParmTable         purchRFQParmTableMap;
        PurchRFQParmTable           purchRFQParmTableTransit;
        PurchRFQReplyTable          purchRFQReplyTableTransit;
        
        setEnum = parmTableMap.valueSet().getEnumerator();

        while (setEnum.moveNext())
        {
            purchRFQParmTableMap = setEnum.current();
            purchRFQParmTableTransit = PurchRFQParmTable::find(purchRFQParmTableMap.ParmId, purchRFQParmTableMap.TableRefId);
            purchRFQReplyTableTransit = PurchRFQReplyTable::find(purchRFQParmTableTransit.RFQId);

            TaxBusinessService::transferTaxDocument(purchRFQReplyTableTransit, purchRFQParmTableTransit);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>