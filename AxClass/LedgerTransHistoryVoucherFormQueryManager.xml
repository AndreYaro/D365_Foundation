<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransHistoryVoucherFormQueryManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class LedgerTransHistoryVoucherFormQueryManager
{
    private LedgerTransHistoryVoucherIListPage ledgerTransHistoryVoucherListPage;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForLedgerTransHistoryVoucherListPage</Name>
				<Source><![CDATA[
    internal static LedgerTransHistoryVoucherFormQueryManager newForLedgerTransHistoryVoucherListPage(LedgerTransHistoryVoucherIListPage _listPage)
    {
        LedgerTransHistoryVoucherFormQueryManager manager = new LedgerTransHistoryVoucherFormQueryManager();
        manager.ledgerTransHistoryVoucherListPage = _listPage;
        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterForGivenArchiveTrans</Name>
				<Source><![CDATA[
    internal void filterForGivenArchiveTrans(LedgerTransHistoryVoucherIListPage _listPage, LedgerArchiveTrans _ledgerArchiveTrans)
    {
        Query generalJournalEntryQuery = _listPage.getGJEHistoryDataSource().query();
        QueryBuildDataSource entryQbds = generalJournalEntryQuery.dataSourceTable(tableNum(GeneralJournalEntryHistory));

        this.fixMainAccountDataSourceLink(generalJournalEntryQuery);

        // Filter on the ledger for the given LedgerArchiveTrans
        var ledgerRange = entryQbds.addRange(fieldNum(GeneralJournalEntryHistory, Ledger));
        ledgerRange.value(int642Str(_ledgerArchiveTrans.Ledger));

        // Filter on the fiscal year for the given LedgerArchiveTrans
        var fiscalYearRange = entryQbds.addRange(fieldNum(GeneralJournalEntryHistory, FiscalCalendarYear));
        fiscalYearRange.value(int642Str(_ledgerArchiveTrans.FiscalCalendarYear));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSysQueryRun</Name>
				<Source><![CDATA[
    internal SysQueryRun buildSysQueryRun()
    {
        var query = this.buildQueryForLedgerTransHistoryVoucherListPage();
        var queryRun = new SysQueryRun(query);

        queryRun.promptShowSorting(false);
        queryRun.promptAllowAddDataSource(false);
        queryRun.promptAllowAddRange(QueryAllowAdd::NoFields);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForLedgerTransHistoryVoucherListPage</Name>
				<Source><![CDATA[
    private Query buildQueryForLedgerTransHistoryVoucherListPage()
    {
        var query = ledgerTransHistoryVoucherListPage.getGJEHistoryDataSource().query();
        
        // chinese voucher
        if (ledgerTransHistoryVoucherListPage.getFormContext().getLedgerChineseVoucherEnabled_CN())
        {
            QueryBuildDataSource dsVoucherType;
            dsVoucherType = query.dataSourceTable(tableNum(LedgerVoucherType_CN));
            query.addQueryFilter(dsVoucherType, fieldStr(LedgerVoucherType_CN, Id));

            var gjehDs = query.dataSourceTable(tableNum(GeneralJournalEntryHistory_W));
            gjehDs.addRange(fieldNum(GeneralJournalEntryHistory_W, Voucher_CN));
        }

        this.fixMainAccountDataSourceLink(query);

        // sort by accounting date because it is the preferred user sort
        // additionally sort by journal and voucher to provide a consistent order within duplicate dates
        var gjeDs = query.dataSourceTable(tableNum(GeneralJournalEntryHistory));
        gjeDs.addSortField(fieldNum(GeneralJournalEntryHistory, AccountingDate));
        gjeDs.addSortField(fieldNum(GeneralJournalEntryHistory, JournalNumber));
        gjeDs.addSortField(fieldNum(GeneralJournalEntryHistory, SubledgerVoucher));

        // Range
        gjeDs.addRange(fieldNum(GeneralJournalEntryHistory, JournalNumber));
        gjeDs.addRange(fieldNum(GeneralJournalEntryHistory, SubledgerVoucher));
        gjeDs.addRange(fieldNum(GeneralJournalEntryHistory, AccountingDate));

        if (ledgerTransHistoryVoucherListPage.getFormContext().getLedgerIgnoreAccountsEnabled_CN())
        {
            var mainAccountDs = SysQuery::findOrCreateDataSource(query, tableNum(MainAccount));

            QueryBuildRange mainAccountQbr = mainAccountDs.addRange(fieldNum(MainAccount, LedgerChartOfAccounts));
            mainAccountQbr.value(queryValue(LedgerChartOfAccounts::current()));
            mainAccountQbr.status(RangeStatus::Hidden);

            SysQuery::findOrCreateRange(mainAccountDs, fieldNum(MainAccount, MainAccountId)).status(RangeStatus::Hidden);
            SysQuery::findOrCreateRange(SysQuery::findOrCreateDataSource(query, tableNum(TransactionLog)), fieldNum(TransactionLog, RecId)).status(RangeStatus::Hidden);
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixMainAccountDataSourceLink</Name>
				<Source><![CDATA[
    private void fixMainAccountDataSourceLink(Query _generalJournalEntryHistoryQuery)
    {
        var mainAccountDs = _generalJournalEntryHistoryQuery.dataSourceTable(tableNum(MainAccount));

        if (mainAccountDs)
        {
            // set the DimensionAttributeValueCombination--> MainAccount relation because the wrong one is the default
            mainAccountDs.clearLinks();
            mainAccountDs.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));

            // manually add the natural key query field
            mainAccountDs.addRange(fieldNum(MainAccount, MainAccountId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>