<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaCopyLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmaCopyLines
{
    SMAAgreementTable           destinationAgreementTable;
    SMAServiceOrderTable        destinationServiceOrderTable;
    QueryRun                    queryRun;
    NoYes                       includeTasks;
    NoYes                       includeObjects;

    Map                         serviceObjectRelationMapping;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowItemRequirement</Name>
				<Source><![CDATA[
    protected boolean allowItemRequirement(SMAAgreementTable _agreementTable)
    {
        ProjTable   projTable;

        projTable = ProjTable::find(_agreementTable.ProjId);

        if (this.validateItemRequirement(projTable))
        {
            // Item requirement cannot be created for service agreement %1.
            throw error(strfmt("@SYS96438", _agreementTable.AgreementId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether item requirement can be created.
    /// </summary>
    /// <param name = "_projTable">
    ///     An instance of <c>ProjTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if item requirement can be created; otherwise, false.
    /// </returns>
    protected boolean validateItemRequirement(ProjTable _projTable)
    {
        return (!_projTable || ( _projTable.Type != ProjType::TimeMaterial && _projTable.Type != ProjType::FixedPrice));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyServiceAgreementLines</Name>
				<Source><![CDATA[
    public void copyServiceAgreementLines()
    {
        SMAAgreementTable   sourceAgreementTable;
        SMAAgreementLine    sourceAgreementLine;

        // Traverse the selected agreements
        while (queryRun.next())
        {
            sourceAgreementTable  = queryRun.get(tablenum(SMAAgreementTable));
            sourceAgreementLine   = queryRun.get(tablenum(SMAAgreementLine));

            if (sourceAgreementTable && sourceAgreementLine)
            {
                // Make sure that source and destination are different to avoid cyclic behavior
                if (destinationAgreementTable && (sourceAgreementTable.AgreementId != destinationAgreementTable.AgreementId))
                {
                    try
                    {
                        // Check if Item requirement has to be created
                        if (sourceAgreementLine.ItemSetupType == SMAItemSetupType::ItemRequirement)
                        {
                            this.allowItemRequirement(destinationAgreementTable);
                        }

                        // Create new service agreement line
                        this.createAgreementLine(sourceAgreementLine);
                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                }
                else
                // Should lines be created on a service order
                if (destinationServiceOrderTable)
                {
                    try
                    {
                        // Check if Item requirement has to be created
                        if (sourceAgreementLine.ItemSetupType == SMAItemSetupType::ItemRequirement)
                        {
                            this.createItemRequirement(destinationServiceOrderTable, sourceAgreementLine);
                        }
                        else
                        {
                            // Create new service order line
                            this.createServiceOrderLine(sourceAgreementLine);
                        }
                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyServiceOrderLines</Name>
				<Source><![CDATA[
    public void copyServiceOrderLines()
    {
        SMAServiceOrderTable    serviceOrderTable;
        SMAServiceOrderLine     serviceOrderLine;

        // Traverse the selected agreements
        while (queryRun.next())
        {
            serviceOrderTable = queryRun.get(tablenum(SMAServiceOrderTable));
            serviceOrderLine  = queryRun.get(tablenum(SMAServiceOrderLine));

            if (serviceOrderTable && serviceOrderLine)
            {
                // Cannot copy lines into itself
                if (destinationServiceOrderTable && destinationServiceOrderTable.ServiceOrderId != serviceOrderTable.ServiceOrderId )
                {
                    // Create new service order line
                    this.createCopyServiceOrderLine(serviceOrderLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTemplateLines</Name>
				<Source><![CDATA[
    public void copyTemplateLines(container _templateLineList)
    {
        SMAAgreementLine    sourceAgreementLine;
        int                 positionInList;

        // Traverse the container with the selected agreement template lines references
        for (positionInList = 1; positionInList <= conlen(_templateLineList); positionInList++)
        {
            // Find the agreement line using the reference
            sourceAgreementLine = SMAAgreementLine::findRecId(conpeek(_templateLineList, positionInList));

            // Was the agreement line found
            if (sourceAgreementLine)
            {
                // Should lines be created on an agreement
                if (destinationAgreementTable)
                {
                    try
                    {
                        // Check if Item requirement has to be created
                        if (sourceAgreementLine.ItemSetupType == SMAItemSetupType::ItemRequirement)
                        {
                            this.allowItemRequirement(destinationAgreementTable);
                        }
                        // Create new service agreement line
                        this.createAgreementLine(sourceAgreementLine);
                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                }
                else
                // Should lines be created on a service order
                if (destinationServiceOrderTable)
                {
                    try
                    {
                        // Check if Item requirement has to be created
                        if (sourceAgreementLine.ItemSetupType == SMAItemSetupType::ItemRequirement)
                        {
                            this.createItemRequirement(destinationServiceOrderTable, sourceAgreementLine);
                        }
                        else
                        {
                            // Create new service order line
                            this.createServiceOrderLine(sourceAgreementLine);
                        }
                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAgreementLine</Name>
				<Source><![CDATA[
    private void createAgreementLine(SMAAgreementLine _agreementLine)
    {
        SMAAgreementLine            newAgreementLine;
        boolean                     includeProject;
        SMAServiceObjectRelationId  serviceObjectRelationId;

        ttsbegin;

        newAgreementLine.clear();

        // Attach line to the agreement that was passed to the class
        newAgreementLine.AgreementId = destinationAgreementTable.AgreementId;

        // Find a new agreement line number
        newAgreementLine.newAgreementLineNum();

        // Use project from the agreement header
        newAgreementLine.ProjId = destinationAgreementTable.ProjId;

        includeProject = (newAgreementLine.ProjId) && newAgreementLine.ProjId == _agreementLine.ProjId;

        // Copy values from the selected agreement line
        newAgreementLine.initFromAgreementLine(_agreementLine, includeTasks, includeProject);

        // Should the attached service object be copied to the new agreement line
        if (includeObjects && _agreementLine.ServiceObjectRelationId)
        {
            if (serviceObjectRelationMapping.exists(_agreementLine.ServiceObjectRelationId))
            {
                serviceObjectRelationId = serviceObjectRelationMapping.lookup(_agreementLine.ServiceObjectRelationId);
            }
            else
            {
                serviceObjectRelationId = SMAServiceObjectRelation::createObjectRelation(_agreementLine.ServiceObjectId, newAgreementLine.AgreementId, tablenum(SMAAgreementTable), _agreementLine.ServiceObjectRelationId);
                if (serviceObjectRelationId)
                {
                    serviceObjectRelationMapping.insert(_agreementLine.ServiceObjectRelationId, serviceObjectRelationId);
                }
            }

            if (serviceObjectRelationId)
            {
                newAgreementLine.ServiceObjectRelationId    = serviceObjectRelationId;
                newAgreementLine.ServiceObjectId            = _agreementLine.ServiceObjectId;
            }
        }

        // Copy values from the project associated with the agreement
        newAgreementLine.SMAServiceLineMap::initFromProjTable(ProjTable::find(newAgreementLine.ProjId));

        if (newAgreementLine.validateWrite())
        {
            newAgreementLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCopyServiceOrderLine</Name>
				<Source><![CDATA[
    private void createCopyServiceOrderLine(SMAServiceOrderLine _serviceOrderLine)
    {
        SMAServiceOrderLine     newServiceOrderLine;
        boolean                 includeProject;

        SMAServiceObjectRelationId serviceObjectRelationId;

        ttsbegin;

        newServiceOrderLine.clear();

        // Attach line to the service order that was passed to the class
        newServiceOrderLine.ServiceOrderId = destinationServiceOrderTable.ServiceOrderId;

        // Copy values from the associated service order
        newServiceOrderLine.initFromServiceOrder(destinationServiceOrderTable.ServiceOrderId);

        // Origin is set to user (manual creation)
        newServiceOrderLine.Origin = SMAServiceOrderOrigin::User;

        // Date ranges are set to the general service date taken from the service order
        newServiceOrderLine.DateRangeFrom   = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(destinationServiceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));
        newServiceOrderLine.DateRangeTo     = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(destinationServiceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));

        includeProject = (destinationServiceOrderTable.ProjId) && destinationServiceOrderTable.ProjId == _serviceOrderLine.ProjId;

        // Copy values from the selected agreement line
        newServiceOrderLine.initFromServiceOrderLine(_serviceOrderLine, includeProject , includeTasks);

        // Should the attached service object be copied to the new agreement line
        if (includeObjects && _serviceOrderLine.ServiceObjectRelationId)
        {
            if (serviceObjectRelationMapping.exists(_serviceOrderLine.ServiceObjectRelationId))
            {
                serviceObjectRelationId = serviceObjectRelationMapping.lookup(_serviceOrderLine.ServiceObjectRelationId);
            }
            else
            {
                serviceObjectRelationId = SMAServiceObjectRelation::createObjectRelation(_serviceOrderLine.ServiceObjectId, newServiceOrderLine.ServiceOrderId, tablenum(SMAServiceOrderTable), _serviceOrderLine.ServiceObjectRelationId);
                if (serviceObjectRelationId)
                {
                    serviceObjectRelationMapping.insert(_serviceOrderLine.ServiceObjectRelationId, serviceObjectRelationId);
                }
            }

            if (serviceObjectRelationId)
            {
                newServiceOrderLine.ServiceObjectRelationId    = serviceObjectRelationId;
                newServiceOrderLine.ServiceObjectId            = _serviceOrderLine.ServiceObjectId;
            }
        }

         // Is the service order line of the Item type
        if (newServiceOrderLine.TransactionType == SMATransactionType::Item)
        {
            // Use the invent id from the source agreement line
            newServiceOrderLine.setInventDimId(_serviceOrderLine.InventDimId);
        }
        else
        // The service order line are Hour, Expense or Fee type
        {
            // Create a default invent id
            newServiceOrderLine.setInventDimId(InventDim::inventDimIdBlank());
        }

        if (newServiceOrderLine.TransactionType == SMATransactionType::Expense)
        {
            newServiceOrderLine.CurrencyIdCost = CompanyInfoHelper::standardCurrency();
            newServiceOrderLine.setDefaultOffsetAccount();
        }

        if (newServiceOrderLine.validateWrite())
        {
            newServiceOrderLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemRequirement</Name>
				<Source><![CDATA[
    protected void createItemRequirement(SMAServiceOrderTable _serviceOrderTable, SMAAgreementLine _agreementLine)
    {
        SalesTableForm_ProjectSalesItem salesTableForm;
        SalesLine                       salesLine;
        ProjTable                       projTable;

        projTable = ProjTable::find(_serviceOrderTable.ProjId);

        if (this.validateItemRequirement(projTable))
        {
            // Item requirement cannot be created for service order %1.
            throw error(strfmt("@SYS96293", _serviceOrderTable.ServiceOrderId));
        }

        ttsbegin;

        salesTableForm = SalesTableForm::construct(SalesTableFormId::ProjectSalesItem,projTable);

        salesLine.clear();
        salesLine.SalesType = SalesType::ItemReq;

        salesTableForm.salesLine_initValue(salesLine);

        salesLine.initFromProjTable(projTable);

        salesTableForm.salesLine_Create(salesLine);

        salesTableForm.resetSalesLine(salesLine);

        salesLine.ServiceOrderId        = _serviceOrderTable.ServiceOrderId;
        salesLine.CustAccount           = _serviceOrderTable.CustAccount;

        salesLine.ItemId                = _agreementLine.ItemId;
        salesLine.setInventDimId(_agreementLine.InventDimId);

        salesLine.itemIdChanged();

        salesLine.SalesUnit             = _agreementLine.Unit;
        salesLine.QtyOrdered            = _agreementLine.Qty;
        salesLine.SalesQty              = _agreementLine.Qty;

        salesLine.ReceiptDateRequested  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_serviceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));

        AxSalesLine::newSalesLine(salesLine);

        salesLine.LineNum = SalesLine::lastLineNum(salesLine.SalesId) + 1.0;

        salesTableForm.salesLine_Write(salesLine);

        salesLine.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceOrderLine</Name>
				<Source><![CDATA[
    private void createServiceOrderLine(SMAAgreementLine _agreementLine)
    {
        SMAServiceOrderLine     newServiceOrderLine;
        boolean                 includeProject;

        SMAServiceObjectRelationId serviceObjectRelationId;

        ttsbegin;

        newServiceOrderLine.clear();

        // Attach line to the service order that was passed to the class
        newServiceOrderLine.ServiceOrderId = destinationServiceOrderTable.ServiceOrderId;

        // Copy values from the associated service order
        newServiceOrderLine.initFromServiceOrder(destinationServiceOrderTable.ServiceOrderId);

        // Origin is set to user (manual creation)
        newServiceOrderLine.Origin = SMAServiceOrderOrigin::User;

        // Date ranges are set to the general service date taken from the service order
        newServiceOrderLine.DateRangeFrom = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(destinationServiceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));
        newServiceOrderLine.DateRangeTo = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(destinationServiceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone()));

        newServiceOrderLine.ServiceTimeStartAfter   = _agreementLine.ServiceTimeStartAfter;
        newServiceOrderLine.ServiceTimeEndBefore    = _agreementLine.ServiceTimeEndBefore;

        includeProject = (destinationServiceOrderTable.ProjId) && destinationServiceOrderTable.ProjId == _agreementLine.ProjId;

        // Copy values from the selected agreement line
        newServiceOrderLine.initFromAgreementLine(_agreementLine, includeProject , includeTasks, false);

        // Should the attached service object be copied to the new agreement line
        if (includeObjects && _agreementLine.ServiceObjectRelationId)
        {
            if (serviceObjectRelationMapping.exists(_agreementLine.ServiceObjectRelationId))
            {
                serviceObjectRelationId = serviceObjectRelationMapping.lookup(_agreementLine.ServiceObjectRelationId);
            }
            else
            {
                if (SMAServiceObjectRelation::existServiceOrderObjectRelation(_agreementLine.ServiceObjectId, newServiceOrderLine.ServiceOrderId, _agreementLine.ServiceObjectRelationId))
                {
                    serviceObjectRelationId = _agreementLine.ServiceObjectRelationId;
				}
				else
                {
                    serviceObjectRelationId = SMAServiceObjectRelation::createObjectRelation(
                                                _agreementLine.ServiceObjectId,
                                                newServiceOrderLine.ServiceOrderId,
                                                tablenum(SMAServiceOrderTable),
                                                _agreementLine.ServiceObjectRelationId);
				}
                
                if (serviceObjectRelationId)
                {
                    serviceObjectRelationMapping.insert(_agreementLine.ServiceObjectRelationId, serviceObjectRelationId);
                }
            }
        }

        if (serviceObjectRelationId)
        {
            newServiceOrderLine.ServiceObjectRelationId    = serviceObjectRelationId;
            newServiceOrderLine.ServiceObjectId            = _agreementLine.ServiceObjectId;
        }

         // Is the service order line of the Item type
        if (newServiceOrderLine.TransactionType == SMATransactionType::Item)
        {
            // Use the invent id from the source agreement line
            newServiceOrderLine.setInventDimId(_agreementLine.InventDimId);
        }
        else
        // The service order line are Hour, Expense or Fee type
        {
            // Create a default invent id
            newServiceOrderLine.setInventDimId(InventDim::inventDimIdBlank());
        }

        if (newServiceOrderLine.TransactionType == SMATransactionType::Expense)
        {
            newServiceOrderLine.CurrencyIdCost = CompanyInfoHelper::standardCurrency();
            newServiceOrderLine.setDefaultOffsetAccount();
        }

        if (newServiceOrderLine.validateWrite())
        {
            newServiceOrderLine.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        includeObjects  = NoYes::Yes;
        includeTasks    = NoYes::Yes;

        serviceObjectRelationMapping = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeObjects</Name>
				<Source><![CDATA[
    public NoYes parmIncludeObjects(NoYes _includeObjects = includeObjects)
    {
        includeObjects = _includeObjects;

        return includeObjects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeTasks</Name>
				<Source><![CDATA[
    public NoYes parmIncludeTasks(NoYes _includeTasks = includeTasks)
    {
        includeTasks = _includeTasks;

        return includeTasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueryRun</Name>
				<Source><![CDATA[
    public QueryRun parmQueryRun(QueryRun _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDestinationAgreement</Name>
				<Source><![CDATA[
    public void setDestinationAgreement(SMAAgreementTable _agreementTable)
    {
        // Set id of the destination agreement
        destinationAgreementTable = _agreementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDestinationServiceOrder</Name>
				<Source><![CDATA[
    public void setDestinationServiceOrder(SMAServiceOrderTable _serviceOrderTable)
    {
        // Set id of the destination service order
        destinationServiceOrderTable = _serviceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMACopyLines construct()
    {
        SMACopyLines    copyLines;

        copyLines = new SMACopyLines();

        return copyLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Copy lines
        return "@SYS24020";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>