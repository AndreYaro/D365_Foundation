<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsAisleRackCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSAisleRackCopy</c> class copies locations and aisles.
/// </summary>
public class WmsAisleRackCopy extends RunBaseBatch implements BatchRetryable
{
    InventLocationId    inventLocationIdFrom;
    InventLocationId    inventLocationIdTo;
    WMSAisleId          wmsAisleIdFrom, wmsAisleIdTo;
    Integer             rackFrom, rackTo;
    WMSCopyLocations    wmsCopyLocations;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        inventLocationIdFrom,
        inventLocationIdTo,
        wmsAisleIdFrom,
        wmsAisleIdTo,
        rackFrom,
        rackTo,
        wmsCopyLocations
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the aisle to copy from exists.
    /// </summary>
    /// <returns>
    ///    true if the from-aisle exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method will put a message in the info log if the from-aisle exists.
    /// </remarks>
    private boolean checkFrom()
    {
        boolean         ok = true;

        switch (wmsCopyLocations)
        {
            case WMSCopyLocations::Rack:
            case WMSCopyLocations::Aisle:
                if (!WMSAisle::exist(wmsAisleIdFrom, inventLocationIdFrom))
                {
                    ok = checkFailed(strFmt("@SYS53734", wmsAisleIdFrom, inventLocationIdFrom));
                }
                break;
            case WMSCopyLocations::InventLocation:
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the aisle to copy to actually exists.
    /// </summary>
    /// <returns>
    ///    true if the to-aisle exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method also puts a message in the info log if the to-aisle does not exist.
    /// </remarks>
    private boolean checkTo()
    {
        boolean         ok = true;

        switch (wmsCopyLocations)
        {
            case WMSCopyLocations::Rack:
            case WMSCopyLocations::Aisle:
                if (!WMSAisle::exist(wmsAisleIdTo, inventLocationIdTo))
                {
                    ok = checkFailed(strFmt("@SYS53734", wmsAisleIdTo, inventLocationIdTo));
                }
                break;
            case WMSCopyLocations::InventLocation:
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAisle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies locations from one aisle to another based on the parameters specified by the user.
    /// </summary>
    private void copyAisle()
    {
        WMSAisle    wmsAisleFrom    = WMSAisle::find(wmsAisleIdFrom, inventLocationIdFrom);
        WMSAisle    wmsAisleTo      = WMSAisle::find(wmsAisleIdTo, inventLocationIdTo);

        if (!wmsAisleFrom)
        {
            throw(error(strFmt("@SYS50805", wmsAisleIdFrom)));
        }

        if (!wmsAisleTo)
        {
            throw(error(strFmt("@SYS50805", wmsAisleIdTo)));
        }

        wmsAisleTo.copyFrom(wmsAisleFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Standard runbase dialog box method. This class uses the regular form <c>WMSAisleRackCopy</c> as its
    ///    dialog box.
    /// </summary>
    /// <returns>
    ///    A <c>FormRun</c> object.
    /// </returns>
    public Object dialog()
    {
        FormRun dialogForm;
        Args    args = new Args(formStr(WMSAisleRackCopy));

        args.caller(this);

        dialogForm = classfactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class based on the parameters passed in through the <paramref name="_args" />
    ///    argument.
    /// </summary>
    /// <param name="_args">
    ///    The standard args parameter as specified on the command and initialized by forms.
    /// </param>
    public void initFromArgs(Args _args)
    {
        InventLocation      inventLocation;
        WMSAisle            wmsAisle;
        WMSLocation         wmsLocation;

        this.getLast();

        this.parmWMSCopyLocations(WMSCopyLocations::InventLocation);
        if (_args && _args.parmEnumType())
        {
            this.parmWMSCopyLocations(_args.parmEnum());
        }

        if (_args && _args.dataset())
        {
            switch (_args.dataset())
            {
                case tableNum(InventLocation):
                    inventLocation = _args.record();
                    this.parmInventLocationIdFrom(inventLocation.InventLocationId);
                    this.parmWMSCopyLocations(WMSCopyLocations::InventLocation);
                    break;
                case tableNum(WMSAisle):
                    wmsAisle = _args.record();
                    this.parmInventLocationIdFrom(wmsAisle.InventLocationId);
                    this.parmAisleIdFrom(wmsAisle.AisleId);
                    this.parmWMSCopyLocations(WMSCopyLocations::Aisle);
                    break;
                case tableNum(WMSLocation):
                    wmsLocation = _args.record();
                    this.parmInventLocationIdFrom(wmsLocation.InventLocationId);
                    this.parmAisleIdFrom(wmsLocation.AisleId);
                    this.parmRackFrom(wmsLocation.Rack);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Is made protected to prevent calling new directly
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs class variables into a container.
    /// </summary>
    /// <returns>
    ///    A container that has the values necessary to re-instantiate the class in the same state.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAisleIdFrom</Name>
				<Source><![CDATA[
    public WMSAisleId parmAisleIdFrom(WMSAisleId _wmsAisleId = wmsAisleIdFrom)
    {
        wmsAisleIdFrom = _wmsAisleId;
        return wmsAisleIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAisleIdTo</Name>
				<Source><![CDATA[
    public WMSAisleId parmAisleIdTo(WMSAisleId _wmsAisleId = wmsAisleIdTo)
    {
        wmsAisleIdTo = _wmsAisleId;
        return wmsAisleIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdFrom</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationIdFrom(InventLocationId _inventLocationIdFrom = inventLocationIdFrom)
    {
        inventLocationIdFrom = _inventLocationIdFrom;
        return inventLocationIdFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationIdTo</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationIdTo(InventLocationId _inventLocationIdTo = inventLocationIdTo)
    {
        inventLocationIdTo = _inventLocationIdTo;
        return inventLocationIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRackFrom</Name>
				<Source><![CDATA[
    public WMSRackId parmRackFrom(WMSRackId _rack = rackFrom)
    {
        rackFrom = _rack;
        return rackFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRackTo</Name>
				<Source><![CDATA[
    public WMSRackId parmRackTo(WMSRackId _rack = rackTo)
    {
        rackTo = _rack;
        return rackTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSCopyLocations</Name>
				<Source><![CDATA[
    public WMSCopyLocations parmWMSCopyLocations(WMSCopyLocations _wmsCopyLocations = wmsCopyLocations)
    {
        wmsCopyLocations = _wmsCopyLocations;
        return wmsCopyLocations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies locations based on the parameters specified by the caller and by the user.
    /// </summary>
    public void run()
    {
        switch (wmsCopyLocations)
        {
            case WMSCopyLocations::Rack:
                WMSAisleRackCopy::copyRack(inventLocationIdFrom, inventLocationIdTo,wmsAisleIdFrom, wmsAisleIdTo,rackFrom, rackTo);
                break;
            case WMSCopyLocations::Aisle:
                this.copyAisle();
                break;
            case WMSCopyLocations::InventLocation:
                WMSAisleRackCopy::copyInventLocation(inventLocationIdFrom, inventLocationIdTo);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    true as this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the class variables of a packed class.
    /// </summary>
    /// <param name="packedClass">
    ///    The container that holds the values returned from a pack method.
    /// </param>
    /// <returns>
    ///    true if <c>unpack</c> succeeded; otherwise, false.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);
        boolean     dummy;

        switch (version)
        {
            case 1:
                [version, inventLocationIdFrom, inventLocationIdTo, wmsAisleIdFrom, wmsAisleIdTo, rackFrom, rackTo, dummy] = packedClass;
                break;
            case #CurrentVersion    :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the input parameters that are specified in the dialog by the user.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true if the values are OK; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ok;

        ok = super();
        ok = this.checkTo()         && ok;
        ok = this.checkFrom()       && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSAisleRackCopy construct()
    {
        return new WMSAisleRackCopy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies all warehouse locations from one warehouse to another.
    /// </summary>
    /// <param name="inventLocationIdFrom">
    ///    The warehouse to copy locations from.
    /// </param>
    /// <param name="inventLocationIdTo">
    ///    The warehouse to copy locations to.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    Standard update conflict resolution.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    Standard update conflict resolution.
    /// </exception>
    private static void copyInventLocation(
        InventLocationId    inventLocationIdFrom,
        InventLocationId    inventLocationIdTo)
    {
        #OCCRetryCount
        WMSLocation         wmsLocationTo, wmsLocationFrom;
        WMSLocationId       wmsLocationId;
        WMSAisle            wmsAisle;
        Integer             copied = 0;
        WMSUpdateSortCodes  wmsUpdateSortCodes;

        if (inventLocationIdTo == inventLocationIdFrom)
        {
            return;
        }

        if (!inventLocationIdTo)
        {
            throw(error(strFmt("@SYS5001", inventLocationIdTo)));
        }

        if (!InventLocation::exist(inventLocationIdTo))
        {
            throw(error(strFmt("@SYS5001", inventLocationIdTo)));
        }

        try
        {
            ttsbegin;

            while select wmsLocationFrom
                where   wmsLocationFrom.InventLocationId    == inventLocationIdFrom
            {
                wmsLocationId   = wmsLocationFrom.wmsLocationId;

                wmsLocationTo = WMSLocation::find(wmsLocationId, inventLocationIdTo);
                if (!wmsLocationTo)
                {
                    wmsLocationTo.data(wmsLocationFrom);
                    wmsLocationTo.InventLocationId    = inventLocationIdTo;
                    if (!WMSAisle::exist(wmsLocationFrom.AisleId, inventLocationIdTo))
                    {
                        wmsAisle = WMSAisle::find(wmsLocationFrom.AisleId, inventLocationIdFrom);
                        if (!wmsAisle)
                        {
                            throw(error(strFmt("@SYS53734", wmsLocationFrom.AisleId, inventLocationIdFrom)));
                        }
                        wmsAisle.InventLocationId = inventLocationIdTo;
                        wmsAisle.insert();
                        info(strFmt("@SYS57482", wmsAisle.AisleId, wmsAisle.InventLocationId));
                    }
                    wmsLocationTo.insert();
                    copied++;
                }
            }
            wmsUpdateSortCodes = WMSUpdateSortCodes::newInventLocation(inventLocationIdTo);
            wmsUpdateSortCodes.runOperation();
            ttscommit;
            info(strFmt("@SYS50806", copied));
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies all locations from one rack to another.
    /// </summary>
    /// <param name="inventLocationIdFrom">
    ///    The ID of the warehouse part of the rack to copy from.
    /// </param>
    /// <param name="inventLocationIdTo">
    ///    The ID of the warehouse part of the rack to copy to.
    /// </param>
    /// <param name="wmsAisleIdFrom">
    ///    The ID of the aisle part of the rack to copy from
    /// </param>
    /// <param name="wmsAisleIdTo">
    ///    The ID of the aisle part of the rack to copy to
    /// </param>
    /// <param name="rackFrom">
    ///    The ID of the rack ID part of the rack to copy from
    /// </param>
    /// <param name="rackTo">
    ///    The ID of the rack ID part of the rack to copy to.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    Standard update conflict resolution.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    Standard update conflict resolution.
    /// </exception>
    private static void copyRack(
        InventLocationId    inventLocationIdFrom,
        InventLocationId    inventLocationIdTo,
        WMSAisleId          wmsAisleIdFrom,
        WMSAisleId          wmsAisleIdTo,
        Integer             rackFrom,
        Integer             rackTo)
    {
        #OCCRetryCount
        WMSAisle            wmsAisleTo = WMSAisle::find(wmsAisleIdTo, inventLocationIdTo);
        WMSLocation         wmsLocationTo, wmsLocationFrom;
        WMSLocationId       wmsLocationId;
        Integer             copied = 0;
        boolean             updateName = true;

        if (!wmsAisleTo)
        {
            throw(error(strFmt("@SYS53734", wmsAisleIdTo, inventLocationIdTo)));
        }

        if (inventLocationIdFrom != inventLocationIdTo && wmsAisleIdFrom == wmsAisleIdTo && rackFrom == rackTo)
        {
            updateName = false;
        }

        try
        {
            ttsbegin;

            while select wmsLocationFrom
                where   wmsLocationFrom.InventLocationId    == inventLocationIdFrom &&
                        wmsLocationFrom.AisleId             == wmsAisleIdFrom       &&
                        wmsLocationFrom.Rack                == rackFrom
            {
                if (updateName && !wmsLocationFrom.ManualName)
                {
                    wmsLocationTo.InventLocationId  = inventLocationIdTo;
                    wmsLocationTo.AisleId           = wmsAisleTo.AisleId;
                    wmsLocationTo.Rack              = rackTo;
                    wmsLocationTo.Level             = wmsLocationFrom.Level;
                    wmsLocationTo.Position          = wmsLocationFrom.Position;
                    wmsLocationId                   = wmsLocationTo.makeName();
                }
                else
                {
                    wmsLocationId                   = wmsLocationFrom.wmsLocationId;
                }

                wmsLocationTo = WMSLocation::find(wmsLocationId, inventLocationIdTo);
                if (!wmsLocationTo)
                {
                    wmsLocationTo.data(wmsLocationFrom);
                    wmsLocationTo.InventLocationId    = inventLocationIdTo;
                    wmsLocationTo.AisleId             = wmsAisleTo.AisleId;
                    wmsLocationTo.Rack                = rackTo;
                    wmsLocationTo.ManualName          = NoYes::No;
                    if (updateName)
                        wmsLocationTo.wmsLocationId   = wmsLocationTo.makeName();
                    wmsLocationTo.changeCheckText(wmsAisleTo.AisleNo);
                    wmsLocationTo.InputLocation       = wmsLocationTo.wmsLocationId;
                    wmsLocationTo.insert();
                    copied++;
                }
            }
            wmsAisleTo.updateSortCodes();
            ttscommit;
            info(strFmt("@SYS50806", copied));
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS50804";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes based on the caller. Shows a dialog box, and if the user presses OK, and then performs
    ///    the action.
    /// </summary>
    /// <param name="args">
    ///    The standard <c>args</c> class passed in from the menu items and calling form.
    /// </param>
    public static void main(Args args)
    {
        WMSAisleRackCopy    wmsAisleRackCopy;

        wmsAisleRackCopy = WMSAisleRackCopy::newStandard(args);

        if (!wmsAisleRackCopy.prompt())
        {
            return;
        }

        wmsAisleRackCopy.runOperation();

        if (args && args.record() && args.dataset() == tableNum(WMSLocation))
        {
            WMSAisleRackCopy::refreshCaller(args.record());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes the new instance of the <c>WMSAisleRackCopy</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The values that are used to initiate default values.
    /// </param>
    /// <returns>
    ///    The new server bound instance of the <c>WMSAisleRackCopy</c> class.
    /// </returns>
    public static WMSAisleRackCopy newStandard(Args _args)
    {
        WMSAisleRackCopy wmsAisleRackCopy;

        wmsAisleRackCopy = WMSAisleRackCopy::construct();
        wmsAisleRackCopy.initFromArgs(_args);

        return wmsAisleRackCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the calling form so new records are shown.
    /// </summary>
    /// <param name="_caller">
    ///    The calling record (args.record()).
    /// </param>
    protected static void refreshCaller(Common _caller)
    {
        FormDataSource formDataSource;

        if (FormDataUtil::isFormDataSource(_caller))
        {
            formDataSource = FormDataUtil::getFormDataSource(_caller);
            formDataSource.research();
            formDataSource.reread();
            formDataSource.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>