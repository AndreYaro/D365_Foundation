<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableCaseAssociationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plug in for case associations.
/// </summary>
[ExportMetadataAttribute('CaseIAssociation', 'SalesTable'), ExportAttribute('Dynamics.AX.Application.CaseIAssociation')]
class SalesTableCaseAssociationProvider implements CaseIAssociation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertCaseAssociation</Name>
				<Source><![CDATA[
    public void insertCaseAssociation(CaseAssociation _caseAssociation)
    {
        SalesTable salesTable;
        select crosscompany CustAccount from salesTable where salesTable.RecId == _caseAssociation.RefRecId;

        CustTable custTable;
        select firstonly RecId from custTable where custTable.AccountNum == salesTable.CustAccount;
        if (custTable)
        {
            _caseAssociation.insertCaseAssociation(CaseEntityType::Customer, custTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkedCompany</Name>
				<Source><![CDATA[
    public SelectableDataArea getLinkedCompany(RefRecId _parentRecId)
    {
        SalesTable salesTable;
        select crosscompany DataAreaId from salesTable where salesTable.RecId == _parentRecId;

        return salesTable.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkedId</Name>
				<Source><![CDATA[
    public CaseAssociationLinkId getLinkedId(RefRecId _parentRecId)
    {
        SalesTable salesTable;
        select crosscompany SalesId from salesTable where salesTable.RecId == _parentRecId;

        return salesTable.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecIdWithNaturalKey</Name>
				<Source><![CDATA[
    public RefRecId getRecIdWithNaturalKey(CaseAssociationLinkId _naturalKey)
    {
        SalesTable salesTable;
        select RecId from salesTable where salesTable.SalesId == _naturalKey;

        return salesTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkedName</Name>
				<Source><![CDATA[
    public CaseLinkedName getLinkedName(RefRecId _parentRecId)
    {
        SalesTable salesTable;
        select crosscompany SalesName from salesTable where salesTable.RecId == _parentRecId;

        return salesTable.SalesName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJumpRefMenuItem</Name>
				<Source><![CDATA[
    public str getJumpRefMenuItem(args _args, CaseAssociation _association)
    {
        SalesTable salesTable;
        
        //We need this code in order not to lose the localization data in the opened form.
        SalesTable salesTableCrossCompany;

        select firstonly crosscompany DataAreaId, RecId from salesTableCrossCompany
            where salesTableCrossCompany.RecId == _association.RefRecId;

        if (salesTableCrossCompany.Recid)
        {
            changecompany (salesTableCrossCompany.DataAreaId)
            {
                select firstonly salesTable where salesTable.RecId == _association.RefRecId;
            }
        }

        _args.record(salesTable);
        return menuitemdisplaystr(SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performLookup</Name>
				<Source><![CDATA[
    public void performLookup(FormStringControl callerControl, CaseAssociation _caseAssociation)
    {
        SysTableLookup oSysTableLookup = SysTableLookup::newParameters(tablenum(SalesTable), callerControl);

        Query oQuery = new Query();
        QueryBuildDataSource oqbds = oQuery.addDataSource(tablenum(SalesTable));

        oSysTableLookup.addLookupfield(fieldnum(SalesTable, SalesId));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, SalesName));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, CustAccount));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, ProjId));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, InvoiceAccount));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, SalesStatus));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, SalesType));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, ReturnItemNum));
        oSysTableLookup.addLookupfield(fieldnum(SalesTable, BankDocumentType));

        oSysTableLookup.parmQuery(oQuery);
        oSysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCaseEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>CaseAssociation.getCaseEntityType()</c> event.
    /// </summary>
    /// <param name="_refTableId">
    /// The table ID of the table associated with the case.
    /// </param>
    /// <param name = "_eventArgs">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(tableStr(CaseAssociation), delegatestr(CaseAssociation, getCaseEntityType))]
    public static void getCaseEntityType(TableId _refTableId, CaseAssociationGetEntityTypeEventArgs _eventArgs)
    {
        if (_refTableId == tablenum(SalesTable))
        {
            RefRecId refRecId = _eventArgs.parmRefRecId();
            if (refRecId)
            {
                // If refRecId is provided check the sales type:
                // If different than ReturnItem define the case entity type as SalesTable.
                // Otherwise, do nothing and let SalesTableReturnCaseAssociationProvider::getCaseEntityType() set the case entity type accordingly.
                var salesTable = SalesTable::findRecId(refRecId);
                if (salesTable.SalesType != SalesType::ReturnItem)
                {
                    _eventArgs.parmEntityType(CaseEntityType::SalesTable);
                }
            }
            else
            {
                _eventArgs.parmEntityType(CaseEntityType::SalesTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>