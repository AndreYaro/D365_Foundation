<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrSchedulerRouteTraverser</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class traverses a route for the scheduler.
/// </summary>
class WrkCtrSchedulerRouteTraverser
{
    WrkCtrSchedulerEngineInterface  scheduleEngine;

    Set                 jobsToProcess;
    SchedDirection      direction;
    RouteLevel          jobBindPriority;
    RouteLevel          constraintLevel;

    RouteLevel          lowestBindPriority;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addConstraints</Name>
				<Source><![CDATA[
    private void addConstraints(RecId _jobRecId)
    {
        WrkCtrSchedulerGoal goal;

        if (direction == SchedDirection::Backward)
        {
            goal = WrkCtrSchedulerGoal::LatestStartTime;
        }
        else
        {
            goal = WrkCtrSchedulerGoal::EarliestEndTime;
        }

        scheduleEngine.addJobGoal(_jobRecId, constraintLevel, goal);
        scheduleEngine.addJobBindPriority(_jobRecId, constraintLevel, jobBindPriority);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceForLowerLevel</Name>
				<Source><![CDATA[
    private WrkCtrSchedulerRouteTraverser createInstanceForLowerLevel(Common _jobs)
    {
        SchedDirection newDirection;

        if (direction == SchedDirection::Backward)
        {
            newDirection = SchedDirection::Forward;
        }
        else
        {
            newDirection = SchedDirection::Backward;
        }

        return this.newInstance(
            scheduleEngine,
            constraintLevel,
            newDirection,
            jobBindPriority - 1,
            WrkCtrSchedulerRouteTraverser::common2RecIdSet(_jobs));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dequeueRecId</Name>
				<Source><![CDATA[
    private RecId dequeueRecId(Set _set)
    {
        RecId element;
        SetEnumerator se;

        se = _set.getEnumerator();
        se.moveNext();
        element = se.current();

        se = null;
        _set.remove(element);

        return element;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dequeueTraverser</Name>
				<Source><![CDATA[
    private WrkCtrSchedulerRouteTraverser dequeueTraverser(List _traverseQueue)
    {
        WrkCtrSchedulerRouteTraverser traverser = null;
        ListIterator li;

        li = new ListIterator(_traverseQueue);
        traverser = li.value();
        li.delete();
        li = null;

        return traverser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enqueueRecIds</Name>
				<Source><![CDATA[
    private void enqueueRecIds(Common _job, Set _set)
    {
        while (_job)
        {
            _set.add(_job.RecId);
            next _job;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enqueueTraverser</Name>
				<Source><![CDATA[
    private void enqueueTraverser(WrkCtrSchedulerRouteTraverser _traverser, List _traverseQueue)
    {
        _traverseQueue.addEnd(_traverser);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives <c>ProdRouteJobInfo</c> object for a specified <c>ProdRouteJob</c> table record.
    /// </summary>
    /// <param name="_jobRecId">
    /// The <c>RecId</c> value of the <c>ProdRouteJob</c> table record to be used.
    /// </param>
    /// <returns>
    /// The <c>ProdRouteJobInfo</c> object for the specified <c>ProdRouteJob</c> table record.
    /// </returns>
    protected ProdRouteJobInfo jobInfo(RecId _jobRecId)
    {
        return ProdRouteJobInfo::newFromProdRouteJob(ProdRouteJob::findRecId(_jobRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestJobBindPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the lowest job priority assigned to the jobs that were processed.
    /// </summary>
    /// <returns>
    /// The lowest job priority assigned to the jobs that were processed.
    /// </returns>
    public RouteLevel lowestJobBindPriority()
    {
        return lowestBindPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WrkCtrSchedulerRouteTraverser</c> class.
    /// </summary>
    /// <param name="_scheduleEngine">
    /// A scheduler engine object to be used; optional.
    /// </param>
    /// <param name="_constraintLevel">
    /// A level of constraint; optional.
    /// </param>
    /// <param name="_direction">
    /// A scheduling direction; optional.
    /// </param>
    /// <param name="_jobBindPriority">
    /// A job binding priority; optional.
    /// </param>
    /// <param name="_jobsToProcess">
    /// A set of jobs to be processed; optional.
    /// </param>
    protected void new(
        WrkCtrSchedulerEngineInterface  _scheduleEngine     = null,
        RouteLevel                      _constraintLevel    = -1,
        SchedDirection                  _direction          = SchedDirection::None,
        RouteLevel                      _jobBindPriority    = 0,
        Set                             _jobsToProcess      = new Set(Types::Int64))
    {
        scheduleEngine  = _scheduleEngine;
        constraintLevel = _constraintLevel;
        direction       = _direction;
        jobBindPriority = _jobBindPriority;
        jobsToProcess   = _jobsToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WrkCtrSchedulerRouteTraverser</c> class.
    /// </summary>
    /// <param name="_scheduleEngine">
    /// A scheduler engine object to be used.
    /// </param>
    /// <param name="_constraintLevel">
    /// A level of constraint.
    /// </param>
    /// <param name="_direction">
    /// A scheduling direction.
    /// </param>
    /// <param name="_jobBindPriority">
    /// A job binding priority.
    /// </param>
    /// <param name="_jobsToProcess">
    /// A set of jobs to be processed.
    /// </param>
    /// <returns>
    /// The newly created instance of the <c>WrkCtrSchedulerRouteTraverser</c> class.
    /// </returns>
    protected WrkCtrSchedulerRouteTraverser newInstance(
        WrkCtrSchedulerEngineInterface  _scheduleEngine,
        RouteLevel                      _constraintLevel,
        SchedDirection                  _direction,
        RouteLevel                      _jobBindPriority,
        Set                             _jobsToProcess)
    {
        return new WrkCtrSchedulerRouteTraverser(
            _scheduleEngine,
            _constraintLevel,
            _direction,
            _jobBindPriority,
            _jobsToProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextJobs</Name>
				<Source><![CDATA[
    private Common nextJobs(RecId _jobRecId)
    {
        Common common;

        if (direction == SchedDirection::Backward)
        {
            common = this.predecessorJobs(_jobRecId);
        }
        else
        {
            common = this.successorJobs(_jobRecId);
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConstraintLevel</Name>
				<Source><![CDATA[
    public RouteLevel parmConstraintLevel(RouteLevel _constraintLevel = constraintLevel)
    {
        constraintLevel = _constraintLevel;
        return constraintLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirection</Name>
				<Source><![CDATA[
    public SchedDirection parmDirection(SchedDirection _direction = direction)
    {
        direction = _direction;
        return direction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobBindPriority</Name>
				<Source><![CDATA[
    public RouteLevel parmJobBindPriority(RouteLevel _jobBindPriority = jobBindPriority)
    {
        jobBindPriority = _jobBindPriority;
        return jobBindPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJobsToProcess</Name>
				<Source><![CDATA[
    public Set parmJobsToProcess(Set _jobsToProcess = jobsToProcess)
    {
        jobsToProcess = _jobsToProcess;
        return jobsToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduleEngine</Name>
				<Source><![CDATA[
    public WrkCtrSchedulerEngineInterface parmScheduleEngine(WrkCtrSchedulerEngineInterface _scheduleEngine = scheduleEngine)
    {
        scheduleEngine = _scheduleEngine;
        return scheduleEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>predecessorJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the predecessors of a specified <c>ProdRouteJob</c> table record.
    /// </summary>
    /// <param name="_jobRecId">
    /// The <c>RecId</c> value of the <c>ProdRouteJob</c> table record to be used.
    /// </param>
    /// <returns>
    /// The predecessors of the specified job; empty table buffer if this is the first job of the route.
    /// </returns>
    protected Common predecessorJobs(RecId _jobRecId)
    {
        return this.jobInfo(_jobRecId).prevJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevJobs</Name>
				<Source><![CDATA[
    private Common prevJobs(RecId _jobRecId)
    {
        Common common;

        if (direction == SchedDirection::Backward)
        {
            common = this.successorJobs(_jobRecId);
        }
        else
        {
            common = this.predecessorJobs(_jobRecId);
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private void process(RecId _startingJobRecId, Set _seenJobs, List _traverseQueue)
    {
        RecId               currentJobRecId;

        while (!jobsToProcess.empty())
        {
            currentJobRecId = this.dequeueRecId(jobsToProcess);
            if (!_seenJobs.in(currentJobRecId))
            {
                _seenJobs.add(currentJobRecId);

                if (currentJobRecId != _startingJobRecId)
                {
                    this.addConstraints(currentJobRecId);
                }

                this.enqueueRecIds(this.nextJobs(currentJobRecId), jobsToProcess);

                this.enqueueTraverser(
                    this.createInstanceForLowerLevel(this.prevJobs(currentJobRecId)),
                    _traverseQueue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTraverseQueue</Name>
				<Source><![CDATA[
    private void processTraverseQueue(RecId _startingJobRecId, Set _seenJobs, List _traverseQueue)
    {
        WrkCtrSchedulerRouteTraverser traverser;

        while (!_traverseQueue.empty())
        {
            traverser = this.dequeueTraverser(_traverseQueue);

            if (traverser.lowestJobBindPriority() < lowestBindPriority)
            {
                lowestBindPriority = traverser.lowestJobBindPriority();
            }

            traverser.process(_startingJobRecId, _seenJobs, _traverseQueue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>successorJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the successors of a specified <c>ProdRouteJob</c> table record.
    /// </summary>
    /// <param name="_jobRecId">
    /// The <c>RecId</c> value of the <c>ProdRouteJob</c> table record to be used.
    /// </param>
    /// <returns>
    /// The successors of the specified job; empty table buffer if this is the last job of the route.
    /// </returns>
    protected Common successorJobs(RecId _jobRecId)
    {
        return this.jobInfo(_jobRecId).nextJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseAndAddConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses a route starting from a certain job, adding the <c>JobPriority</c> and <c>JobGoal</c>
    /// scheduling constraints to the jobs.
    /// </summary>
    /// <param name="_startingJob">
    /// The starting job.
    /// </param>
    /// <param name="_direction">
    /// The direction to start traversing.
    /// </param>
    /// <param name="_jobBindPriority">
    /// The job bind priority to assign on the first level.
    /// </param>
    /// <returns>
    /// The lowest bind priority assigned to the processed jobs.
    /// </returns>
    public RouteLevel traverseAndAddConstraints(
        ProdRouteJobInfo                _startingJob,
        SchedDirection                  _direction          = this.parmDirection(),
        RouteLevel                      _jobBindPriority    = this.parmJobBindPriority())
    {
        List    traverseQueue       = new List(Types::Class);
        Set     seenJobs            = new Set(Types::Int64);
        RecId   startingJobRecId    = _startingJob.parmJob().RecId;

        this.parmJobsToProcess(new Set(Types::Int64)).add(startingJobRecId);
        this.parmDirection(_direction);
        this.parmJobBindPriority(_jobBindPriority);

        WrkCtrSchedulerRouteTraverser::common2RecIdSet(_startingJob.parallelJobs(), seenJobs);

        this.enqueueTraverser(this, traverseQueue);

        lowestBindPriority = _jobBindPriority;
        this.processTraverseQueue(startingJobRecId, seenJobs, traverseQueue);

        return lowestBindPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>common2RecIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through the records in a selected table buffer and stores the record IDs in a set.
    /// </summary>
    /// <param name="_common">
    /// The table buffer to iterate through.
    /// </param>
    /// <param name="_set">
    /// A set to fill in; optional.
    /// </param>
    /// <returns>
    /// A set with the record IDs of all the records in the given table buffer.
    /// </returns>
    public static Set common2RecIdSet(Common _common, Set _set = new set(Types::Int64))
    {
        while (_common)
        {
            _set.add(_common.RecId);
            next _common;
        }

        return _set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WrkCtrSchedulerRouteTraverser</c> class.
    /// </summary>
    /// <param name="_scheduleEngine">
    /// A scheduler engine object to be used; optional.
    /// </param>
    /// <param name="_constraintLevel">
    /// A level of constraint; optional.
    /// </param>
    /// <param name="_direction">
    /// A scheduling direction; optional.
    /// </param>
    /// <param name="_jobBindPriority">
    /// A job binding priority; optional.
    /// </param>
    /// <param name="_jobsToProcess">
    /// A set of jobs to be processed; optional.
    /// </param>
    /// <returns>
    /// The newly created instance of the <c>WrkCtrSchedulerRouteTraverser</c> class.
    /// </returns>
    public static WrkCtrSchedulerRouteTraverser newProd(
        WrkCtrSchedulerEngineInterface  _scheduleEngine     = null,
        RouteLevel                      _constraintLevel    = -1,
        SchedDirection                  _direction          = SchedDirection::None,
        RouteLevel                      _jobBindPriority    = 0,
        Set                             _jobsToProcess      = new Set(Types::Int64))
    {
        return new WrkCtrSchedulerRouteTraverser(
            _scheduleEngine,
            _constraintLevel,
            _direction,
            _jobBindPriority,
            _jobsToProcess);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>