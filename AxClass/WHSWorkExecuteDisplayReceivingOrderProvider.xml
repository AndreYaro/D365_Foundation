<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayReceivingOrderProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteDisplayReceivingOrderProvider</c> class is responsible
/// for analyzing receiving parameters and determining the type of orders to receive.
/// </summary>
internal abstract class WHSWorkExecuteDisplayReceivingOrderProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransTypeFromPass</Name>
				<Source><![CDATA[
    [Wrappable(true), Replaceable(true)]
    internal static container getInventTransTypeFromPass(WHSRFPassthrough _pass)
    {
        InventTransType inventTransType;
        boolean found;

        if (_pass.parmPONum())
        {
            inventTransType = InventTransType::Purch;
            found = true;
        }
        else if (_pass.parmLoadId())
        {
            inventTransType = WHSWorkExecuteDisplayReceivingOrderProvider::getInventTransTypeFromLoadAndItem(_pass.parmLoadId(), _pass.parmItemId());
            found = true;
        }
        else if (_pass.parmModule())
        {
            [found, inventTransType] = WHSWorkExecuteDisplayReceivingOrderProvider::getInventTransTypeFromModule(_pass.parmModule());
        }
        else
        {
            [found, inventTransType] = WHSWorkExecuteDisplayReceivingOrderProvider::getInventTransTypeFromWorkCreationProcess(
                                           WHSRFMenuItemTable::find(_pass.parmMenuItem()).WorkCreationProcess);
        }

        return [found, inventTransType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransTypeFromLoadAndItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventTransType getInventTransTypeFromLoadAndItem(WHSLoadId _loadId, ItemId _itemId)
    {
        if (!WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
        {
            return InventTransType::Purch;
        }

        WHSLoadLine loadLine;

        select firstonly InventTransType from loadLine
            where loadLine.LoadId == _loadId
               && (loadLine.ItemId == _itemId || !_itemId);

        if (!loadLine && _itemId)
        {
            select firstonly InventTransType from loadLine
                where loadLine.LoadId == _loadId;
        }

        if (!loadLine)
        {
            // The load is specified, but does not contain any lines. Either provider will be able to show the right error.
            return InventTransType::Purch;
        }

        return loadLine.InventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransTypeFromModule</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static container getInventTransTypeFromModule(WHSModule _module)
    {
        InventTransType inventTransType;
        boolean found;

        if (_module == WHSModule::Purch)
        {
            inventTransType = InventTransType::Purch;
            found = true;
        }
        else
        {
            found = false;
        }

        return [found, inventTransType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransTypeFromWorkCreationProcess</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static container getInventTransTypeFromWorkCreationProcess(WHSWorkCreationProcess _workCreationProcess)
    {
        InventTransType inventTransType;
        boolean found;

        if (_workCreationProcess == WHSWorkCreationProcess::PurchaseOrderItemReceiving ||
            _workCreationProcess == WHSWorkCreationProcess::PurchaseOrderItemReceivingAndLocate ||
            _workCreationProcess == WHSWorkCreationProcess::PurchaseOrderLineReceiving ||
            _workCreationProcess == WHSWorkCreationProcess::PurchaseOrderLineReceivingAndLocate)
        {
            inventTransType = InventTransType::Purch;
            found = true;
        }
        else
        {
            found = false;
        }

        return [found, inventTransType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderKey</Name>
				<Source><![CDATA[
    internal abstract str orderKey()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderFieldLabel</Name>
				<Source><![CDATA[
    internal abstract str orderFieldLabel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeOrderFieldLabel</Name>
				<Source><![CDATA[
    internal abstract str changeOrderFieldLabel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderTypeId</Name>
				<Source><![CDATA[
    internal abstract ExtendedTypeId orderTypeId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineKey</Name>
				<Source><![CDATA[
    internal abstract str lineKey()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineFieldLabel</Name>
				<Source><![CDATA[
    internal abstract str lineFieldLabel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQtyFieldLabel</Name>
				<Source><![CDATA[
    internal abstract str lineQtyFieldLabel()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType</Name>
				<Source><![CDATA[
    internal abstract InventTransType inventTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTransType</Name>
				<Source><![CDATA[
    internal abstract WHSWorkTransType workTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    internal abstract WHSModule module()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine</Name>
				<Source><![CDATA[
    internal abstract WHSReceiptOrderLine orderLine(WHSRFPassthrough _pass, TradeLineNumber _lineNum = _pass.lookupInt64(this.lineKey()))
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    internal abstract VendAccount vendAccount(WHSRFPassthrough _pass)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    internal abstract WHSReceiptOrderLine findInventTransId(InventTransIdBase _inventTransId, boolean _update = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Num orderNum(WHSRFPassthrough _pass)
    {
        return _pass.lookupStr(this.orderKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal TradeLineNumber lineNum(WHSRFPassthrough _pass)
    {
        return _pass.lookupInt64(this.lineKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNumStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal str lineNumStr(WHSRFPassthrough _pass)
    {
        return _pass.lookupStr(this.lineKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setOrderNum(WHSRFPassthrough _pass, Num _orderNum)
    {
        _pass.insert(this.orderKey(), _orderNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setLineNum(WHSRFPassthrough _pass, TradeLineNumber _lineNum)
    {
        _pass.insert(this.lineKey(), _lineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrderNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean hasOrderNum(WHSRFPassthrough _pass)
    {
        return _pass.hasValue(this.orderKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean hasLineNum(WHSRFPassthrough _pass)
    {
        return _pass.hasValue(this.lineKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeOrderNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void removeOrderNum(WHSRFPassthrough _pass)
    {
        _pass.remove(this.orderKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void removeLineNum(WHSRFPassthrough _pass)
    {
        _pass.remove(this.lineKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTransType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkExecuteDisplayReceivingOrderProvider newFromInventTransType(InventTransType _inventTransType)
    {
        var attribute = new InventTransTypeFactoryAttribute(_inventTransType);
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkExecuteDisplayReceivingOrderProvider), attribute);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPass</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkExecuteDisplayReceivingOrderProvider newFromPass(WHSRFPassthrough _pass, boolean _throwOnNonReceiving = true)
    {
        InventTransType inventTransType;
        boolean         inventTransTypeFound;
        [inventTransTypeFound, inventTransType] = WHSWorkExecuteDisplayReceivingOrderProvider::getInventTransTypeFromPass(_pass);

        if (!inventTransTypeFound)
        {
            if (_throwOnNonReceiving)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            return null;
        }

        var orderProvider = WHSWorkExecuteDisplayReceivingOrderProvider::newFromInventTransType(inventTransType);

        if (!orderProvider)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return orderProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>