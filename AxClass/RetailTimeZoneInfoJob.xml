<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTimeZoneInfoJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailTimeZoneInfoJob</c> is a dialog class used to populate time zone tables.
/// </summary>
public class RetailTimeZoneInfoJob extends RunBaseBatch implements BatchRetryable
{
    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.updateTimeZoneInfoTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimezoneInfoTable</Name>
				<Source><![CDATA[
    private void updateTimezoneInfoTable()
    {
        TimezoneInfo        timezoneInfo;
        DictEnum            timezoneEnumerator;
        TimeBias            standardBias;
        TimeBias            dayLightBias;
        container           infoContainer;
        utcdatetime         dayLightStartDate;
        utcdatetime         dayLightEndDate;
        int                 startYear;
        int                 endYear;
        str                 datePlaceHolder;
        str                 startDate;
        str                 endDate;
        int                 timezoneId;
        int                 ruleId;
        int                 timezoneCnt;
        int                 numberOfTimezones;
        int                 yearCnt;
        RecordInsertList    timezoneInfoRecordInsertList;

        ttsbegin;

        // Purge the TimeZoneInfo table
        delete_from timezoneInfo;

        // Insert all timezone for each year.
        datePlaceHolder     =   '-01-01T00:00:00';
        startYear           =   1990;
        endYear             =   max(2054, DateTimeUtil::year(DateTimeUtil::getSystemDateTime())+10);
        timezoneEnumerator  =   new DictEnum(enumNum(Timezone));
        numberOfTimezones   =   timezoneEnumerator.values();
        timezoneInfoRecordInsertList = new RecordInsertList(tableNum(TimezoneInfo));
        timezoneInfo.clear();

        for ( yearCnt = startYear; yearCnt <= endYear; ++yearCnt )
        {
            startDate       = int2str(yearCnt) + datePlaceHolder;
            endDate         = int2str(yearCnt + 1) + datePlaceHolder;

            for ( timezoneCnt = 0; timezoneCnt < numberOfTimezones; ++timezoneCnt )
            {
                timezoneId                      =   timezoneEnumerator.index2Value(timezoneCnt);
                infoContainer                   =   DateTimeUtil::populateTimeZoneInfo(yearCnt, timezoneId);
                dayLightStartDate               =   conPeek(infoContainer, 1);
                dayLightEndDate                 =   conPeek(infoContainer, 2);
                standardBias                    =   conPeek(infoContainer, 3);
                dayLightBias                    =   conPeek(infoContainer, 4);
                ruleId                          =   conPeek(infoContainer, 5);

                if ( dayLightStartDate != dayLightEndDate )
                {
                    timezoneInfo.TimezoneId         =   timezoneId;
                    timezoneInfo.StartDate          =   DateTimeUtil::anyToDateTime(startDate);
                    timezoneInfo.EndDate            =   dayLightStartDate;
                    timezoneInfo.TimeBias           =   standardBias;
                    timezoneInfo.RuleId             =   ruleId;
                    timezoneInfoRecordInsertList.add(timezoneInfo);

                    timezoneInfo.TimezoneId         =   timezoneId;
                    timezoneInfo.StartDate          =   dayLightStartDate;
                    timezoneInfo.EndDate            =   dayLightEndDate;
                    timezoneInfo.TimeBias           =   dayLightBias;
                    timezoneInfo.RuleId             =   ruleId;
                    timezoneInfoRecordInsertList.add(timezoneInfo);
                }

                timezoneInfo.TimezoneId         =   timezoneId;
                timezoneInfo.StartDate          =   dayLightEndDate;
                timezoneInfo.EndDate            =   DateTimeUtil::anyToDateTime(endDate);
                timezoneInfo.TimeBias           =   standardBias;
                timezoneInfo.RuleId             =   ruleId;
                timezoneInfoRecordInsertList.add(timezoneInfo);

            }
        }

        timezoneInfoRecordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYP4861365";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailTimeZoneInfoJob scheduler = new RetailTimeZoneInfoJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailTimeZoneInfoJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailTimeZoneInfoJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>