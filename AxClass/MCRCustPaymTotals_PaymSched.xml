<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaymTotals_PaymSched</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRCustPaymTotals_PaymSched</c> class is used for payments attached to a payment schedule line.
/// </summary>
class MCRCustPaymTotals_PaymSched extends MCRCustPaymTotals
{
    CustPaymSchedLine  custPaymSchedLine;
    CustPaymSched      custPaymSched;
    SalesTable         salesTable;
    MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    public boolean allowEdit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoicePaymAmount</Name>
				<Source><![CDATA[
    protected AmountCur calcInvoicePaymAmount(CustInvoiceJour custInvoiceJour)
    {
        return this.getTotalPaymAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getCurrency()
    {
        return salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimension</Name>
				<Source><![CDATA[
    public DimensionDefault getDimension()
    {
        return salesTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAccount</Name>
				<Source><![CDATA[
    public CustAccount getInvoiceAccount()
    {
        return salesTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderID</Name>
				<Source><![CDATA[
    public Num getOrderID()
    {
        return salesTable.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile getPostingProfile(boolean _recalc = false)
    {
        if (salesTable && salesTable.PostingProfile)
        {
            return salesTable.PostingProfile;
        }
        else
        {
            return CustParameters::find().PostingProfile;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalDiscount</Name>
				<Source><![CDATA[
    protected AmountCur getTotalDiscount()
    {
        return mcrSalesOrderTotals.getRemainingDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalInvoicedAmount</Name>
				<Source><![CDATA[
    public AmountCur getTotalInvoicedAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the payment amount so that the payment will be posted.
    /// </summary>
    /// <returns>
    /// The total payment amount.
    /// </returns>
    public AmountCur getTotalSalesAmount()
    {
        // check if this is installment billing, if it is then
        // return the order total from the orders object.
        if (salesTable != null
            && MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId).PaymSchedId)
        {
            if (!mcrSalesOrderTotals)
            {
                mcrSalesOrderTotals = new MCRSalesOrderTotals(salesTable);
            }
            return mcrSalesOrderTotals.getTotalOrder();
        }
        else
        {
            return custPaymSchedLine.DueAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Loads the records associated with the payment tied to the
    ///     payment schedule line.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the customer payment schedule line.
    /// </param>
    public void new(RecId _recId)
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;
        // Retreive the record from the Payment Schedule Line table
        custPaymSchedLine = CustPaymSchedLine::MCRFindByRecID(_recId);
        custPaymSched = CustPaymSched::MCRFindRecID(custPaymSchedLine.ParentRecID);

        // Payment schedule can be tied to the SalesTable or the Continuity Header
        if (custPaymSched.ExtTableId == tableNum(SalesTable))
        {
            salesTable = SalesTable::findRecId(custPaymSched.ExtRecId, false);
            mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
            mcrInstallmentPlanSalesTable_RecID = mcrInstallmentPlanSalesTable.RecId;
        }
        else
        {
            mcrContinuityCustHeader = MCRContinuityCustHeader::findRecId(custPaymSched.ExtRecId, false);
            salesTable = SalesTable::find(mcrContinuityCustHeader.SalesId, false);
        }

        // Format the ref record id and table id.
        super(tableNum(CustPaymSchedLine), custPaymSchedLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayments</Name>
				<Source><![CDATA[
    public boolean processPayments(MCRProcessPaymAction _paymAction,
                            boolean _allowUserInput = false,
                            boolean _paymentsCalcAndValid = true,
                            RecId _custPaymRecID = 0)
    {
        boolean ret = true;
        MCRCustPaymTable custPaymTable;
        CustPaymSchedLine custPaymSchedLine_First;
        RecId custPaymRecID = _custPaymRecID;

        if (MCROrderParameters::find().InstallmentAuth == MCRInstallmentAuth::OrderDate)
        {
            custPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(mcrInstallmentPlanSalesTable.RecId,
                                                                       mcrInstallmentPlanSalesTable.TableId);
            // Check to see if there is anything to copy
            if (custPaymTable)
            {
                custPaymSchedLine_First = CustPaymSchedLine::MCRFindFirstIntallmentSchedLine(mcrInstallmentPlanSalesTable.SalesId,
                                                                                        mcrInstallmentPlanSalesTable.PaymSchedId,
                                                                                        true);

                // Check the custpaymtable to see if a record already exists.
                // if it does do not recreate.
                custPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(custPaymSchedLine_First.RecId, custPaymSchedLine_First.TableId, true);
                if (!custPaymTable)
                {
                    if (custPaymSchedLine_First
                        && custPaymSchedLine_First.DueAmount - custPaymSchedLine_First.MCRRetAmount != 0)
                    {
                        custPaymTable = MCRCustPaymTable::copyCustPayment(mcrInstallmentPlanSalesTable.TableId,
                                                                        mcrInstallmentPlanSalesTable.RecId,
                                                                        custPaymSchedLine_First.TableId,
                                                                        custPaymSchedLine_First.RecId,
                                                                        salesTable.SalesId,
                                                                        custPaymSchedLine_First.DueAmount - custPaymSchedLine_First.MCRRetAmount,
                                                                        true);
                    }
                }
            }
        }

        if (_custPaymRecID == 0)
        {
            custPaymRecID = custPaymTable.RecId;
        }
        // If no payment is passed or found, do not call super.
        if (custPaymRecID)
        {
            ret = super(_paymAction, false, false, custPaymRecID);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleBillUpFrontContChildren</Name>
				<Source><![CDATA[
    public void settleBillUpFrontContChildren()
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleInstallmentsOrder</Name>
				<Source><![CDATA[
    protected void settleInstallmentsOrder(boolean _instalAdjs = false)
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleOnAccountPayments</Name>
				<Source><![CDATA[
    public void settleOnAccountPayments()
    {
        throw error(strFmt("@MCR35608", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePaymentInstallmentOnly</Name>
				<Source><![CDATA[
    private void settlePaymentInstallmentOnly()
    {
        CustTable custTable;
        LedgerJournalTable ledgerJournalTableLocal;
        LedgerJournalTrans ledgerJournalTrans;

        CustTrans custTrans;
        CustTransOpen custTransOpen;

        CustInvoiceJour custInvoiceJour;

        SpecTransManager specTransManager;

        Num orderID = this.getOrderID();

        AmountCur sumTransAmountCur;     // sum of marked transactions

        // find the custTable record
        custTable = CustTable::find(this.getInvoiceAccount());

        // create a specification offset voucher for the current customer
        SpecTransExecutionContext specTransExecutionContext = SpecTransExecutionContext::newFromSource(custTable);
        specTransManager = SpecTransManager::newFromSpec(specTransExecutionContext.parmSpecContext(), false);

        // This shouldn't be neccessary, but leaving it in for backwards compatability.
        specTransManager.deleteAll();

        // add open payment transactions to the offset voucher
        while select RecID, TableId, AmountCur, DueDate from custTransOpen order by DueDate asc
            join CurrencyCode, MCRPaymOrderID, Closed, LastSettleVoucher from custTrans
            join Voucher from ledgerJournalTrans
            join JournalNum from ledgerJournalTableLocal
            where ledgerJournalTrans.MCRPaymOrderID == orderID
                && ledgerJournalTrans.JournalNum == ledgerJournalTableLocal.JournalNum
                && custTrans.Voucher == ledgerJournalTrans.Voucher
                && custTransopen.DueDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                && custTransOpen.RefRecId == custTrans.RecId
                && custTransOpen.AccountNum == custTable.AccountNum
        {
            sumTransAmountCur += custTransOpen.AmountCur;
            specTransManager.insert(custTransOpen.dataAreaId,
                                custTransOpen.TableId,
                                 custTransOpen.RecId,
                                 custTransOpen.AmountCur,
                                 custTrans.CurrencyCode);
        }

        // add open invoice transactions to the offset voucher (Original code)
        while select forupdate custTransOpen order by DueDate asc
            join CurrencyCode, MCRPaymOrderID from custTrans
            join LedgerVoucher from custInvoiceJour
            where (custInvoiceJour.SalesId == orderID
                  || custInvoiceJour.InvoiceId == orderID)
                  && custInvoiceJour.InvoiceAccount == custTable.AccountNum
                  && custTrans.Voucher == custInvoiceJour.LedgerVoucher
                  && custTransOpen.RefRecId == custTrans.RecId
                  && custTransOpen.AccountNum == custTable.AccountNum
                  && custTransOpen.DueDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
        {
            sumTransAmountCur += custTransOpen.AmountCur;

            specTransManager.insert(custTransOpen.dataAreaId,
                                    custTransOpen.TableId,
                                     custTransOpen.RecId,
                                     custTransOpen.AmountCur,
                                     custTrans.CurrencyCode);
        }

        CustTrans::settleTransaction(specTransExecutionContext, CustTransSettleTransactionParameters::construct());

        specTransManager.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePayments</Name>
				<Source><![CDATA[
    public void settlePayments(boolean _paymAdjs = false)
    {
        switch (salesTable.mcrEvalSalesOrderType())
        {
            case MCRSalesOrderType::InstallmentOnly:
            case MCRSalesOrderType::OrderAndInstallment:
                this.settlePaymentInstallmentOnly();
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransStatus</Name>
				<Source><![CDATA[
    public void setTransStatus()
    {
        // no code in super super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>