<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostSheetModeStrategyStaging</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CostSheetModeStrategyStaging</c> class represents the costing sheet properties when importing costing sheet nodes using data management framework.
/// </summary>
/// <remarks>
///    Staging mode is used when the costing sheet structure is imported using data management framework.
/// </remarks>
class CostSheetModeStrategyStaging extends CostSheetModeStrategyEdit
{
    DMFDefinitionGroupName      definitionGroup;
    DMFExecutionId              executionId;
    CostSheetNodeTable          costSheetNodeTable;
    CostSheetCalculationFactor  costSheetCalculationFactor;
    CostSheetCalculationBasis   costSheetCalculationBasis;
    boolean                     useNodeStagingData;
    boolean                     useFactorStagingData;
    boolean                     useBasisStagingData;
    CostSheetId                 costSheetId;
    Map                         stagingRecords;
    Map                         stagingAbsorptionBasisRecords;
    Map                         stagingChildRecords;
    Map                         name2NodeId;
    Map                         dimensionCombinationDisplayValue2RecordId;
    Map                         dimensionSetDisplayValue2RecordId;
    Set                         namesCreated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cursor for querying costing sheet node records.
    /// </summary>
    /// <returns>A <c>CostSheetNodeTable</c> record buffer used for querying costing sheet node records.</returns>
    public CostSheetNodeTable getNodeCursor()
    {
        if (useNodeStagingData)
        {
            // Ensure that new cursor is created for returned records
            CostSheetNodeTable costSheetNodeTableTemp;
            costSheetNodeTableTemp.setTmp();
            costSheetNodeTableTemp.setTmpData(costSheetNodeTable);

            return costSheetNodeTableTemp;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculationFactorCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cursor for querying costing sheet calculation factor records.
    /// </summary>
    /// <returns>A <c>CostSheetCalculationFactor</c> record buffer used for querying costing sheet absorption basis records.</returns>
    public CostSheetCalculationFactor getCalculationFactorCursor()
    {
        if (useFactorStagingData)
        {
            // Ensure that new cursor is created for returned records
            CostSheetCalculationFactor costSheetCalculationFactorTemp;
            costSheetCalculationFactorTemp.setTmp();
            costSheetCalculationFactorTemp.setTmpData(costSheetCalculationFactor);

            return costSheetCalculationFactorTemp;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAbsorptionBasisCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a cursor for querying costing sheet absorption basis records.
    /// </summary>
    /// <returns>A <c>CostSheetCalculationBasis</c> record buffer used for querying costing sheet absorption basis records.</returns>
    public CostSheetCalculationBasis getAbsorptionBasisCursor()
    {
        if (useBasisStagingData)
        {
            // Ensure that new cursor is created for returned records
            CostSheetCalculationBasis costSheetCalculationBasisTemp;
            costSheetCalculationBasisTemp.setTmp();
            costSheetCalculationBasisTemp.setTmpData(costSheetCalculationBasis);

            return costSheetCalculationBasisTemp;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the current costing sheet mode type.
    /// </summary>
    /// <returns>
    ///    The costing sheet mode type.
    /// </returns>
    public CostSheetMode getType()
    {
        return CostSheetMode::Staging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // Serialization not supported because the staging strategy works with records in temporary tables
        throw error("@SCM:SerializationNotSupported");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        // Serialization not supported because the staging strategy works with records in temporary tables
        throw error("@SCM:SerializationNotSupported");
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChildRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a collection of parent and child nodes.
    /// </summary>
    /// <param name = "_parentNodeName">The parent node name.</param>
    /// <param name = "_childNodeName">The child node name that will be added to the parents child collection.</param>
    private void insertChildRecord(
        CostSheetNodeCode _parentNodeName,
        CostSheetNodeCode _childNodeName)
    {
        if (_parentNodeName == _childNodeName)
        {
            throw error(strFmt("@CostManagement:MessageValidation_CostSheetNodeCircularityNotSupported", _childNodeName));
        }

        List childRecords;

        if (stagingChildRecords.exists(_parentNodeName))
        {
            childRecords = stagingChildRecords.lookup(_parentNodeName);
        }
        else
        {
            childRecords = new List(Types::String);
        }

        childRecords.addEnd(_childNodeName);

        stagingChildRecords.insert(_parentNodeName, childRecords);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAbsorptionBasisRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a collection of absorption basis associated to cost sheet node staging record.
    /// </summary>
    /// <param name = "_stagingRecord">The staging record containing absorption basis information.</param>
    private void insertAbsorptionBasisRecord(
        CostSheetNodeStaging _stagingRecord)
    {
        List stagingAbsorptionBasisRecordList;

        if (stagingAbsorptionBasisRecords.exists(_stagingRecord.NodeName))
        {
            stagingAbsorptionBasisRecordList = stagingAbsorptionBasisRecords.lookup(_stagingRecord.NodeName);
        }
        else
        {
            stagingAbsorptionBasisRecordList = new List(Types::Record);
        }

        stagingAbsorptionBasisRecordList.addEnd(_stagingRecord);

        stagingAbsorptionBasisRecords.insert(_stagingRecord.NodeName, stagingAbsorptionBasisRecordList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCostSheetNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>CostSheetNodeTable</c> table based on a <c>CostSheetNodeStaging</c> record.
    /// </summary>
    /// <param name = "_staging">A <c>CostSheetNodeStaging</c> record used when setting fields in the <c>CostSheetNodeTable</c> record.</param>
    /// <param name = "_nodeId">The node ID of the <c>CostSheetNodeTable</c> record.</param>
    /// <param name = "_parentNodeId">The parent node ID of the <c>CostSheetNodeTable</c> record.</param>
    /// <param name = "_level">The level of the <c>CostSheetNodeTable</c> record.</param>
    private void insertCostSheetNode(
        CostSheetNodeStaging    _staging,
        CostSheetNodeId         _nodeId,
        CostSheetNodeId         _parentNodeId,
        Level                   _level)
    {
        if (!namesCreated.in(_staging.NodeName))
        {
            CostSheetNodeEntity nodeEntity;
            nodeEntity.DefaultLedgerDimensionDisplayValue = _staging.DefaultLedgerDimensionDisplayValue;
            nodeEntity.EstimatedIndirectAbsorptionMainAccountIdDisplayValue = _staging.EstimatedIndirectAbsorptionMainAccountIdDisplayValue;
            nodeEntity.EstimatedIndirectAbsorptionOffsetMainAccountIdDisplayValue = _staging.EstimatedIndirectAbsorptionOffsetMainAccountIdDisplayValue;
            nodeEntity.IndirectAbsorptionMainAccountIdDisplayValue = _staging.IndirectAbsorptionMainAccountIdDisplayValue;
            nodeEntity.IndirectAbsorptionOffsetMainAccountIdDisplayValue = _staging.IndirectAbsorptionOffsetMainAccountIdDisplayValue;

            DimensionDataEntitySFKProvider::construct().resolve(nodeEntity);

            costSheetNodeTable.clear();
            costSheetNodeTable.NodeId = _nodeId;
            costSheetNodeTable.ParentNodeId = _parentNodeId;
            costSheetNodeTable.Level = _level;
            costSheetNodeTable.LineNum = _nodeId;
            costSheetNodeTable.SheetId = costSheetId;

            costSheetNodeTable.CalculationFactorPerItem = _staging.IsCalculationFactorSpecifiedPerItem;
            costSheetNodeTable.CalculationRateSubtype = _staging.RateNodeSubtype;
            costSheetNodeTable.CalculationSurchargeSubtype = _staging.SurchargeNodeSubtype;
            costSheetNodeTable.CalculationUnitBasedSubtype = _staging.UnitBasedNodeSubtype;
            costSheetNodeTable.Code = _staging.NodeName;
            costSheetNodeTable.CostGroupId = _staging.CostGroupId;
            costSheetNodeTable.Description = _staging.NodeDescription;
            costSheetNodeTable.Header = _staging.IsNodeShownAsHeader;
            costSheetNodeTable.PriceType = _staging.PriceNodeSubtype;
            costSheetNodeTable.Total = _staging.IsNodeShownAsTotalLine;
            costSheetNodeTable.Type = _staging.NodeType;
            costSheetNodeTable.DefaultDimension = nodeEntity.DefaultLedgerDimension;
            costSheetNodeTable.EstimatedIndirectAbsorpLedgerDimension = nodeEntity.EstimatedIndirectAbsorptionMainAccountId;
            costSheetNodeTable.EstimIndirectAbsorpOffsetLedgerDimension = nodeEntity.EstimatedIndirectAbsorptionOffsetMainAccountId;
            costSheetNodeTable.IndirectAbsorptionLedgerDimension = nodeEntity.IndirectAbsorptionMainAccountId;
            costSheetNodeTable.IndirectAbsorptionOffsetLedgerDimension = nodeEntity.IndirectAbsorptionOffsetMainAccountId;
            costSheetNodeTable.insert();

            name2NodeId.insert(_staging.NodeName, _nodeId);
            namesCreated.add(_staging.NodeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCostSheetNodeCalculationFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>CostSheetCalculationFactor</c> table based on a <c>CostSheetNodeCalculationFactorStaging</c> record.
    /// </summary>
    /// <param name = "_staging">A <c>CostSheetNodeCalculationFactorStaging</c> record used when setting fields in the <c>CostSheetCalculationFactor</c> record.</param>
    /// <param name = "_costSheetNodeId">The node ID for which to associate the <c>CostSheetCalculationFactor</c> record.</param>
    private void insertCostSheetNodeCalculationFactor(
        CostSheetNodeCalculationFactorStaging   _staging,
        CostSheetNodeId                         _costSheetNodeId)
    {
        costSheetCalculationFactor.clear();
        costSheetCalculationFactor.NodeId = _costSheetNodeId;
        costSheetCalculationFactor.SheetId = costSheetId;

        costSheetCalculationFactor.Amount = _staging.AccountingCurrencyRateAmount ? _staging.AccountingCurrencyRateAmount : _staging.AccountingCurrencyUnitBasedAmount;
        costSheetCalculationFactor.CostingVersionStatus = CostingVersionStatus::Pending;
        costSheetCalculationFactor.FromDate = _staging.FromDate;
        costSheetCalculationFactor.InventSiteId = _staging.PriceSiteId;

        if (_staging.ItemNumber)
        {
            costSheetCalculationFactor.ItemCode = TableGroupAll::Table;
            costSheetCalculationFactor.ItemRelation = _staging.ItemNumber;
        }
        else if (_staging.ProductGroupId)
        {
            costSheetCalculationFactor.ItemCode = TableGroupAll::GroupId;
            costSheetCalculationFactor.ItemRelation = _staging.ProductGroupId;
        }
        else
        {
            costSheetCalculationFactor.ItemCode = TableGroupAll::All;
        }

        costSheetCalculationFactor.LineId = 0;
        costSheetCalculationFactor.Percentage = _staging.SurchargePercentage;
        costSheetCalculationFactor.VersionId = _staging.CostingVersionId;
        costSheetCalculationFactor.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCostSheetNodeAbsorptionBasis</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>CostSheetCalculationBasis</c> table based on a <c>CostSheetNodeAbsorptionBasisStaging</c> record.
    /// </summary>
    /// <param name = "_staging">A <c>CostSheetNodeAbsorptionBasisStaging</c> record used when setting fields in the <c>CostSheetCalculationBasis</c> record.</param>
    /// <param name = "_costSheetNodeId">The node ID for which to associate the <c>CostSheetCalculationBasis</c> record.</param>
    private void insertCostSheetNodeAbsorptionBasis(
        CostSheetNodeStaging    _staging,
        CostSheetNodeId         _costSheetNodeId)
    {
        costSheetCalculationBasis.clear();
        costSheetCalculationBasis.NodeId = _costSheetNodeId;
        costSheetCalculationBasis.SheetId = costSheetId;

        costSheetCalculationBasis.BasisCode = _staging.AbsorptionBasisNodeName;
        costSheetCalculationBasis.BasisNodeId = name2NodeId.lookup(_staging.AbsorptionBasisNodeName);
        costSheetCalculationBasis.RateSubtype = _staging.RateNodeAbsorptionBasisSubtype;
        costSheetCalculationBasis.SurchargeSubtype = _staging.SurchargeNodeAbsorptionBasisSubtype;
        costSheetCalculationBasis.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCostSheetNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates cost sheet nodes a given parent node.
    /// </summary>
    /// <param name = "_parentNodeName">The parent node for which to create child cost sheet nodes.</param>
    /// <param name = "_parentPriceType">The price type of the parent node for which to create child cost sheet nodes.</param>
    /// <param name = "_nodeId">The node ID to use when creating child cost sheet nodes.</param>
    /// <param name = "_level">The level to use when creating child cost sheet nodes.</param>
    /// <returns>The node ID that should be used for the next cost sheet node.</returns>
    private CostSheetNodeId createCostSheetNodes(
        CostSheetNodeCode   _parentNodeName,
        CostPriceType       _parentPriceType,
        CostSheetNodeId     _nodeId,
        Level               _level)
    {
        if (!this.isCircularitySupportedForCostSheetNode(_nodeId))
        {
            throw error(strFmt("@CostManagement:MessageValidation_CostSheetNodeCircularityNotSupported", _parentNodeName));
        }
        if (stagingChildRecords.exists(_parentNodeName))
        {
            List childRecords = stagingChildRecords.lookup(_parentNodeName);
            ListEnumerator   childRecordEnumerator = childRecords.getEnumerator();
            
            while (childRecordEnumerator.moveNext())
            {
                CostSheetNodeCode name = childRecordEnumerator.current();
                CostSheetNodeStaging staging = stagingRecords.lookup(name);

                if (staging.NodeType == CostSheetNodeType::Price)
                {
                    _parentPriceType = staging.PriceNodeSubtype;
                }
                else if (staging.NodeType != CostSheetNodeType::Price
                    && staging.PriceNodeSubtype != _parentPriceType)
                {
                    throw error(strFmt("@CostManagement:MessageError_CostSheetNodePriceTypeNotMatchingParent", staging.NodeName));
                }

                this.insertCostSheetNode(staging, _nodeId, name2NodeId.lookup(_parentNodeName), _level);

                _nodeId++;

                if (stagingChildRecords.exists(name))
                {
                    _nodeId = this.createCostSheetNodes(name, _parentPriceType, _nodeId, _level + 1);
                }
            }
        }

        return _nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCircularitySupportedForCostSheetNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether circularity is supported for cost sheet node.
    /// </summary>
    /// <param name = "_nodeId">The node ID to use when creating child cost sheet nodes.</param>
    /// <returns>true if circularity is supported for cost sheet node; otherwise, false.</returns>
    protected boolean isCircularitySupportedForCostSheetNode(CostSheetNodeId _nodeId)
    {
        return _nodeId <= stagingRecords.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAbsorptionBasisNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates absorption basis for a given parent node.
    /// </summary>
    /// <param name = "_parentNodeName">The parent node for which to create child nodes.</param>
    private void createAbsorptionBasisNodes(CostSheetNodeCode   _parentNodeName)
    {
        if (stagingChildRecords.exists(_parentNodeName))
        {
            List childRecords = stagingChildRecords.lookup(_parentNodeName);
            ListEnumerator   childRecordEnumerator = childRecords.getEnumerator();
            
            while (childRecordEnumerator.moveNext())
            {
                CostSheetNodeCode name = childRecordEnumerator.current();

                if (stagingAbsorptionBasisRecords.exists(name))
                {
                    CostSheetNodeStaging staging = stagingRecords.lookup(name);
                    str nodeCompareString = this.concatenateCompareString(staging);
                    List absorptionBasis = stagingAbsorptionBasisRecords.lookup(name);
                    ListEnumerator absorptionBasisEnumerator = absorptionBasis.getEnumerator();
                    CostSheetNodeId nodeId = name2NodeId.lookup(name);

                    while (absorptionBasisEnumerator.moveNext())
                    {
                        CostSheetNodeStaging absorptionBasisStagingRecord = absorptionBasisEnumerator.current();

                        if (nodeCompareString == this.concatenateCompareString(absorptionBasisStagingRecord))
                        {
                            this.insertCostSheetNodeAbsorptionBasis(absorptionBasisEnumerator.current(), nodeId);
                        }
                        else
                        {
                            throw error(strFmt("@CostManagement:MessageError_CostSheetNodeNotMatchingParent",
                                            staging.NodeName,
                                            staging.AbsorptionBasisNodeName,
                                            absorptionBasisStagingRecord.AbsorptionBasisNodeName));
                        }
                    }
                }

                this.createAbsorptionBasisNodes(name);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>concatenateCompareString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Concatenates a string containing fields from a <c>CostSheetNodeStaging</c> record.
    /// </summary>
    /// <param name = "_staging">A <c>CostSheetNodeStaging</c> record used when concatenating the compare string.</param>
    /// <returns></returns>
    private str concatenateCompareString(CostSheetNodeStaging _staging)
    {
        return strFmt('%1#%2#%3#%4#%5#%6#%7#%8#%9#%10#%11#%12#%13#%14#%15#%16#%17',
                _staging.NodeName,
                _staging.ParentNodeName,
                _staging.IsCalculationFactorSpecifiedPerItem,
                _staging.RateNodeSubtype,
                _staging.SurchargeNodeSubtype,
                _staging.UnitBasedNodeSubtype,
                _staging.CostGroupId,
                _staging.NodeDescription,
                _staging.IsNodeShownAsHeader,
                _staging.PriceNodeSubtype,
                _staging.IsNodeShownAsTotalLine,
                _staging.NodeType,
                _staging.DefaultLedgerDimensionDisplayValue,
                _staging.EstimatedIndirectAbsorptionMainAccountIdDisplayValue,
                _staging.EstimatedIndirectAbsorptionOffsetMainAccountIdDisplayValue,
                _staging.IndirectAbsorptionMainAccountIdDisplayValue,
                _staging.IndirectAbsorptionOffsetMainAccountIdDisplayValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUseStagingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the staging data should be used or not.
    /// </summary>
    /// <remarks>
    /// In case staging data should not be used the existing cost sheet nodes will be used
    /// and the <c>name2NodeId</c> map will be populated with name and node IDs of the <c>CostSheetNodeTable</c> records.
    /// </remarks>
    private void setUseStagingData()
    {
        useNodeStagingData = stagingRecords.elements();
        useFactorStagingData = true;
        useBasisStagingData = true;

        if (!useNodeStagingData)
        {
            CostSheetNodeTable nodeTable;

            while select NodeId, Code from nodeTable
                where nodeTable.SheetId == costSheetId
            {
                name2NodeId.insert(nodeTable.Code, nodeTable.NodeId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostSheetStagingTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the staging table for cost sheet nodes, calculation factors and absorption basis.
    /// </summary>
    private void processCostSheetStagingTables()
    {
        CostSheetNodeStaging staging;
        CostSheetNodeCode rootName;

        while select staging
            where staging.DefinitionGroup == definitionGroup
                && staging.ExecutionId == executionId
        {
            if (!stagingRecords.exists(staging.NodeName))
            {
                stagingRecords.insert(staging.NodeName, staging);

                this.insertChildRecord(staging.ParentNodeName, staging.NodeName);
            }

            if (staging.AbsorptionBasisNodeName)
            {
                this.insertAbsorptionBasisRecord(staging);
            }

            if (staging.NodeType == CostSheetNodeType::Root)
            {
                rootName = staging.NodeName;
            }
        }

        this.setUseStagingData();

        if (stagingRecords.exists(rootName))
        {
            this.insertCostSheetNode(stagingRecords.lookup(rootName), 1, 0, 0);

            if (stagingRecords.elements() > 1)
            {
                this.createCostSheetNodes(rootName, CostPriceType::Undefined, 2, 1);
                this.createAbsorptionBasisNodes(rootName);
            }
        }

        this.processCostSheetNodeCalculationFactorTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCostSheetNodeCalculationFactorTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the staging table for calculation factors.
    /// </summary>
    private void processCostSheetNodeCalculationFactorTable()
    {
        CostSheetNodeCalculationFactorStaging staging;

        while select staging
            where staging.DefinitionGroup == definitionGroup
                && staging.ExecutionId == executionId
        {
            if (name2NodeId.exists(staging.CostSheetNodeName))
            {
                this.insertCostSheetNodeCalculationFactor(staging, name2NodeId.lookup(staging.CostSheetNodeName));
            }
            else
            {
                throw error(strFmt("@CostManagement:MessageValidation_CostSheetNodeDoNotExist", staging.CostSheetNodeName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostSheetModeStrategyStaging</c> class.
    /// </summary>
    /// <param name = "_definitionGroup">The definition group for which to find staging records.</param>
    /// <param name = "_executionId">The execution ID for which to find staging records.</param>
    protected void initialize(
        DMFDefinitionGroupName  _definitionGroup,
        DMFExecutionId          _executionId)
    {
        definitionGroup = _definitionGroup;
        executionId = _executionId;

        stagingRecords = new Map(Types::String, Types::Record);
        stagingAbsorptionBasisRecords = new Map(Types::String, Types::Class);
        stagingChildRecords = new Map(Types::String, Types::Class);
        name2NodeId = new Map(Types::String, Types::Integer);
        namesCreated = new Set(Types::String);
        dimensionCombinationDisplayValue2RecordId = new Map(Types::String, Types::Int64);
        dimensionSetDisplayValue2RecordId = new Map(Types::String, Types::Int64);

        dimensionCombinationDisplayValue2RecordId.insert('', 0);
        dimensionSetDisplayValue2RecordId.insert('', 0);

        costSheetNodeTable.setTmp();
        costSheetCalculationFactor.setTmp();
        costSheetCalculationBasis.setTmp();

        costSheetId = CostSheetTable::newSheetId();

        this.processCostSheetStagingTables();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stagingRecordsExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if staging records exists.
    /// </summary>
    /// <param name = "_definitionGroup">The definition group for which to check staging records.</param>
    /// <param name = "_executionId">The execution ID for which to check staging records.</param>
    private boolean stagingRecordsExists(
        DMFDefinitionGroupName  _definitionGroup,
        DMFExecutionId          _executionId)
    {
        CostSheetNodeStaging costSheetNodeStaging;
        CostSheetNodeCalculationFactorStaging costSheetNodeCalculationFactorStaging;

        select count(RecId) from costSheetNodeStaging
            where costSheetNodeStaging.DefinitionGroup == _definitionGroup
                && costSheetNodeStaging.ExecutionId == _executionId;

        if (!costSheetNodeStaging.RecId)
        {
            select count(RecId) from costSheetNodeCalculationFactorStaging
            where costSheetNodeCalculationFactorStaging.DefinitionGroup == _definitionGroup
                && costSheetNodeCalculationFactorStaging.ExecutionId == _executionId;

            if (!costSheetNodeCalculationFactorStaging.RecId)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CostSheetModeStrategyStaging construct()
    {
        return new CostSheetModeStrategyStaging();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CostSheetModeStrategyStaging</c> class.
    /// </summary>
    /// <param name = "_definitionGroup">The definition group for which to find staging records.</param>
    /// <param name = "_executionId">The execution ID for which to find staging records.</param>
    /// <returns>An instance of the <c>CostSheetModeStrategyStaging</c> class.</returns>
    public static CostSheetModeStrategyStaging newParameter(
        DMFDefinitionGroupName  _definitionGroup,
        DMFExecutionId          _executionId)
    {
        if (!_definitionGroup || !_executionId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CostSheetModeStrategyStaging modeStrategy = CostSheetModeStrategyStaging::construct();

        if (!modeStrategy.stagingRecordsExists(_definitionGroup, _executionId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        modeStrategy.initialize(_definitionGroup, _executionId);

        return modeStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>