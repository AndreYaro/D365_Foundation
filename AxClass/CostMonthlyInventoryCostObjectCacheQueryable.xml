<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostMonthlyInventoryCostObjectCacheQueryable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostMonthlyInventoryCostObjectCacheQueryable</c> class updates the monthly inventory cost object cache.
/// </summary>
class CostMonthlyInventoryCostObjectCacheQueryable implements SysIQueryableObjectExecutable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    public void execute(SysIDataCacheContext _context)
    {
        SysDataCacheContextId contextId = _context.parmId();
        SysDataContextValueFilter dataContextValueFilter = _context.parmDataContextValue(SysDataContextValueTypeEnum::Filter) as SysDataContextValueFilter;

        if (dataContextValueFilter)
        {
            SysIFilter  filter = dataContextValueFilter.parmSourceFilter();
            TransDate   transDate = SysFilterValueHelper::getFirstValueRecordFromFilterForType(filter, SysFilterValueTypeEnum::Date, extendedTypeNum(TransDate));
            List        datesToBeUpdated = this.getDatesToBeUpdated(transDate);

            // Iterates through the list to update the cache for these dates
            ListEnumerator listEnumerator = datesToBeUpdated.getEnumerator();
            while (listEnumerator.moveNext())
            {
                date dateToBeUpdated = listEnumerator.current();

                // Get the data cache context Id for the date at which to update the cache
                contextId = dateToBeUpdated == transDate ? contextId : CostMonthlyInventoryCostObjectConsumer::getDataCacheContextId(dateToBeUpdated);

                CostMonthlyInventoryCostObjectCache::updateCache(contextId, dateToBeUpdated);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDatesToBeUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the list of dates for which to update the cache using the specified update date.
    /// </summary>
    /// <param name = "_updateDate">The original update date from which to check the validity</param>
    /// <returns>A <c>List</c> class instance of dates where the cache is invalid.</returns>
    /// <remarks>
    /// The list of dates for which the cache should be updated is composed of the end dates of earlier months for which the cache is invalid
    /// (to ensure that the data is valid at the update date) as well as the later months (as the changes have to be propagated forward).
    /// </remarks>
    private List getDatesToBeUpdated(TransDate _updateDate)
    {
        List      datesToBeUpdated = new List(Types::Date);
        TransDate endOfMonthUpdateDate = dateEndMth(_updateDate);
        TransDate dateOfFirstCacheEntry = CostObjectStatementCache::getDateOfFirstCacheEntry(CostStatementType::Inventory);

        if (dateOfFirstCacheEntry)
        {
            this.addInvalidPreviousMonthsToListOfDatesToBeUpdated(datesToBeUpdated, endOfMonthUpdateDate, dateOfFirstCacheEntry);

            this.addNextMonthsToListOfDatesToBeUpdated(datesToBeUpdated, endOfMonthUpdateDate);
        }

        return datesToBeUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvalidPreviousMonthsToListOfDatesToBeUpdated</Name>
				<Source><![CDATA[
    private void addInvalidPreviousMonthsToListOfDatesToBeUpdated(
        List      _datesToBeUpdated,
        TransDate _endOfMonthUpdateDate,
        TransDate _dateOfFirstCacheEntry)
    {
        TransDate transDate = _endOfMonthUpdateDate;
        while (!CostMonthlyInventoryCostObjectConsumer::isValid(transDate)
                && transDate >= _dateOfFirstCacheEntry)
        {
            _datesToBeUpdated.addStart(transDate);
            transDate = dateStartMth(transDate) - 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNextMonthsToListOfDatesToBeUpdated</Name>
				<Source><![CDATA[
    private void addNextMonthsToListOfDatesToBeUpdated(List _datesToBeUpdated, TransDate _endOfMonthUpdateDate)
    {
        TransDate transDate = dateEndMth(_endOfMonthUpdateDate + 1);
        while (transDate <= CostMonthlyInventoryCostObjectConsumer::lastDateToCache())
        {
            _datesToBeUpdated.addEnd(transDate);
            transDate = dateEndMth(transDate + 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIdentifier</Name>
				<Source><![CDATA[
    public SysQueryableIdentifier parmIdentifier()
    {
        return classStr(CostMonthlyInventoryCostObjectCacheQueryable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public str parmDescription()
    {
        return "@CostManagement:CostMonthlyInventoryCostObjectCacheQueryable_Class_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDependencySet</Name>
				<Source><![CDATA[
    public SysIDataChangeDetectionDependencySet parmDependencySet()
    {
        SysIDataChangeDetectionDependencySet dependencySet = SysDataChangeDetectionDependencySetFactory::newFromType(SysDataChangeDetectionDependencyTypeEnum::None);

        return dependencySet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethod</Name>
				<Source><![CDATA[
    public SysDataChangeDetectionMethodEnum parmMethod()
    {
        return SysDataChangeDetectionMethodEnum::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public SysQueryablePacked pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(SysQueryablePacked _packed)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostMonthlyInventoryCostObjectCacheQueryable construct()
    {
        return new CostMonthlyInventoryCostObjectCacheQueryable();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>