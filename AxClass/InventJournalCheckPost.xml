<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalCheckPost</c> class is a factory class for creating classes for posting
/// inventory journals.
/// </summary>
class InventJournalCheckPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JournalCheckPost construct(InventJournalTable _inventJournalTable)
    {
        var inventJournalTypeAttribute = new InventJournalTypeFactoryAttribute(_inventJournalTable.JournalType);
        JournalCheckPost inventJournalCheckPost = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(JournalCheckPost), inventJournalTypeAttribute);

        if (inventJournalCheckPost)
        {
            inventJournalCheckPost.initFromJournalTable(_inventJournalTable);
        }

        return inventJournalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        JournalForm         journalForm = JournalForm::fromArgs(_args);
        JournalCheckPost    journalCheckPost = InventJournalCheckPost::newFromForm(_args, journalForm);

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            journalForm.runbaseMainStart();

            if (!journalCheckPost.prompt())
            {
                if (! journalCheckPost.batchInfo().parmBatchExecute())
                {
                    journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
                }
                return;
            }

            try
            {
                journalCheckPost.runOperation();
                journalForm.runbaseMainEnd(journalCheckPost,false);
            }
            catch (Exception::Error)
            {
                journalForm.runbaseMainEnd(journalCheckPost,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    protected static JournalCheckPost newFromForm(
        Args            _args,
        JournalForm     _journalForm)
    {
        JournalTransData    journalTransData = _journalForm.journalTransData();
        InventJournalTable  journalTable = _journalForm.journalTableData().journalTable();

        JournalCheckPost    journalCheckPost = InventJournalCheckPost::construct(journalTable);
        if (journalCheckPost)
        {
            journalCheckPost.initializeJournalCheckPost(false, true, _args.parmEnum(), journalTable.TableId, journalTable.JournalId, journalTransData);
        }

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    public static JournalCheckPost newJournalCheckPost(
        JournalCheckPostType    _journalCheckPostType,
        InventJournalTable      _inventJournalTable)
    {
        JournalCheckPost    journalCheckPost = InventJournalCheckPost::construct(_inventJournalTable);
        if (journalCheckPost)
        {
            journalCheckPost.initializeJournalCheckPost(false, true, _journalCheckPostType, _inventJournalTable.TableId, _inventJournalTable.JournalId);
        }

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPostJournal</Name>
				<Source><![CDATA[
    public static JournalCheckPost newPostJournal(InventJournalTable _inventJournalTable)
    {
        JournalCheckPost  journalCheckPost = InventJournalCheckPost::construct(_inventJournalTable);
        if (journalCheckPost)
        {
            journalCheckPost.initializeJournalCheckPost(true, true, JournalCheckPostType::Post, _inventJournalTable.TableId, _inventJournalTable.JournalId);
            journalCheckPost.parmThrowCheckFailed(true);
        }

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountingReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method validates the counting reason code.
    /// </summary>
    /// <param name = "_journalTransList">
    /// Journal transactions list.
    /// </param>
    /// <param name = "_journalTableData">
    /// Journal table data.
    /// </param>
    /// <returns>
    /// true, if the counting reason code is filled when its mandatory; otherwise false
    /// </returns>
    public static boolean validateCountingReasonCode(JournalTransList _journalTransList, JournalTableData _journalTableData)
    {
        InventJournalTable inventJournalTableLoc = InventJournalTable::find(_journalTableData.journalTable().JournalId);
        JournalTransMap journalTrans             = _journalTransList.journalTransData().journalTrans();
        boolean ok                               = true;

        if (inventJournalTableLoc
            && journalTrans.TableId == tableNum(InventJournalTrans)
            && inventJournalTableLoc.JournalType == InventJournalType::Count)
        {
            InventJournalTrans inventJournalTransLoc = _journalTransList.journalTransData().journalTrans();

            if (inventJournalTransLoc.isCountingReasonCodeMandatory() && !inventJournalTransLoc.CountingReasonCode)
            {
                ok = checkFailed(strFmt("@SYS84378", fieldPName(InventCountingReasonCode, ReasonCode)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to validates for Empty tax registration numbers
    /// </summary>
    /// <param name="_journalTransList">
    /// JournalTransList
    /// </param>
    /// <param name="_journalTableData">
    /// journalTableData
    /// </param>
    /// <returns>
    /// boolean value.
    /// </returns>
    [Replaceable]
    public static boolean validate_IN(JournalTransList  _journalTransList,
                                    JournalTableData    _journalTableData)
    {
        JournalTransData                    journalTransData = _journalTransList.journalTransData();
        counter                             taxTypesCount;
        boolean                             canContinue = true;

        InventJournalTrans inventJournalTransLoc = _journalTransList.journalTransData().journalTrans();

        InventJournalTransTaxExtensionIN inventJournalTransTaxExtensionIN = InventJournalTransTaxExtensionIN::findByinventJournalTrans(inventJournalTransLoc.RecId);
        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(inventJournalTransLoc);

        if (inventJournalTransLoc.ProjTaxGroupId && inventJournalTransLoc.ProjTaxItemGroupId)
        {
            TaxItemGroupHeading taxItemGroup = TaxItemGroupHeading::find(inventJournalTransLoc.ProjTaxItemGroupId);
            container taxTypes = FormulaDesigner_IN::getTaxTypes_IN(inventJournalTransLoc.ProjTaxGroupId, inventJournalTransLoc.ProjTaxItemGroupId);

            for (taxTypesCount = 1; taxTypesCount <= conlen(taxTypes); taxTypesCount++)
            {
                switch (conpeek(taxTypes, taxTypesCount))
                {
                    case TaxType_IN::Excise:
                        if ((transTaxInformation.ExciseType == ExciseType_IN::None
                            && !transTaxInformation.ExciseECCRegistrationNumber)
                            || (transTaxInformation.ExciseType == ExciseType_IN::Manufacturer
                            && !transTaxInformation.ExciseECCRegistrationNumber)
                            || (transTaxInformation.ExciseType == ExciseType_IN::Trader
                            && !transTaxInformation.ExciseECCRegistrationNumber))
                        {
                            canContinue = checkfailed(strfmt("@SYS26332", "@GLS5102"));
                        }

                        if (canContinue && transTaxInformation.ExciseRecordType == ExciseRecordType_IN::None)
                        {
                            canContinue = checkFailed(strfmt("@GLS5637", "@GLS5005", transTaxInformation.ExciseRecordType, "@GLS5005"));
                        }
                        break;

                    case TaxType_IN::Customs:
                        if (!transTaxInformation.CustomsIECRegistrationNumber)
                        {
                            canContinue= checkfailed(strfmt("@SYS26332", "@GLS5100"));
                        }
                        break;

                    case TaxType_IN::ServiceTax:
                        if (!transTaxInformation.ServiceTaxRegistrationNumber)
                        {
                            canContinue = checkfailed(strfmt("@SYS26332", "@GLS5098"));
                        }

                        if (canContinue && taxItemGroup.ReverseChargePercentage_IN)
                        {
                            canContinue = checkFailed("@SYS4002408");
                        }
                        break;

                    case TaxType_IN::VAT:
                        if (!transTaxInformation.VATTIN)
                        {
                            canContinue= checkfailed(strfmt("@SYS26332", "@GLS5096"));
                        }

                    case TaxType_IN::SalesTax:
                        if (!transTaxInformation.SalesTaxRegistrationNumber)
                        {
                            canContinue= checkfailed(strfmt("@SYS26332", "@SYS59571"));
                        }
                        break;
                }
            }
        }
        else if (inventJournalTransLoc.JournalType == InventJournalType::Movement)
        {
            if ((transTaxInformation.ExciseType == ExciseType_IN::Manufacturer
                 && !transTaxInformation.ExciseECCRegistrationNumber)
                || (transTaxInformation.ExciseType == ExciseType_IN::Trader
                    && !transTaxInformation.ExciseECCRegistrationNumber))
            {
                canContinue = checkfailed(strfmt("@SYS26332", "@GLS5102"));
            }
        }

        return canContinue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>