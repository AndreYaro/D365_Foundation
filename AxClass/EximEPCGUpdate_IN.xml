<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEPCGUpdate_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim EPCG update class.
/// </summary>
abstract class EximEPCGUpdate_IN extends EximIncentiveSchemes_IN
{
    TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriod;
    EximEPCGSchemeApprove_IN             tmpEximEPCGSchemeApproval;
    EximEPCGExportableItems_IN           tmpEximEPCGExportableItems;
    EximEPCGBankGuaranteeDetails_IN      tmpEximEPCGBankGuaranteeDetails;
    EximEPCGVendorDetails_IN             tmpEximEPCGVendDetails;
    EximEPCGSchemeMergeReference_IN      tmpEPCGSchemeMergeReference;
    FormDataSource                       formDataSource;
    AmountMST                            totalObligationResultAmount;
    EximEPCGExportObligationBasis_IN     basis;
    TransDateTime                        issueDateTime;
    EximLicenseNum_IN                    licenseNum;
    EximLicenseNum_IN                    mergedLicenseNum;
    QueryRun                             queryRun;
    EximEPCGSchemeTableRecId_IN          schemeTableRecId;
    RefRecId                             mergedSchemeTableRecId;
    int                                  parmEnum;
    menuItemName                         menuItemName;
    container                            selectedEpcgIds;
    Version                              schemeLineVersionNum;
    boolean                              postingStatus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object  dialog()
    {
        Args                    args = new Args();
        FormRun                 eximBasisRelatedForm;
        EximEPCGSchemeTable_IN  eximEPCGSchemeTable;

        select firstonly eximEPCGSchemeTable
            where eximEPCGSchemeTable.RecId == schemeTableRecId;

        args.record(eximEPCGSchemeTable);
        args.caller(this);

        switch (classidget(this))
        {
            case classnum(EximEPCGUpd_Approve_IN) :
                if (hasMenuItemAccess(menuitemdisplaystr(EximEPCGSchemeApprove_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximEPCGSchemeApprove_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximEPCGSchemeApprove_IN)));
                }
                break;
            case classnum(EximEPCGUpd_TechUpgrade_IN):
                if (hasMenuItemAccess(menuitemdisplaystr(EximEPCGTechUpgrade_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximEPCGTechUpgrade_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximEPCGTechUpgrade_IN)));
                }
                break;
            case classnum(EximEPCGUpd_Extension_IN):
                if (hasMenuItemAccess(menuitemdisplaystr(EximEPCGBlockExtension_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximEPCGBlockExtension_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximEPCGBlockExtension_IN)));
                }
                break;
            case classnum(EximEPCGUpd_Merge_IN):
                if (hasMenuItemAccess(menuitemdisplaystr(EximEPCGSchemeMerge_IN),  MenuItemType::Display))
                {
                    args.name(formstr(EximEPCGSchemeMerge_IN));
                }
                else
                {
                    throw error(strfmt("@SYS104222", menuitemdisplaystr(EximEPCGSchemeMerge_IN)));
                }
                break;
        }
        eximBasisRelatedForm = classFactory.formRunClass(args);
        eximBasisRelatedForm.init();

        return eximBasisRelatedForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMaxToDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds max end date time.
    /// </summary>
    /// <returns>
    /// The end date time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDateTime findMaxToDateTime()
    {
        select maxof(ToDateTime)
            from tmpEximEPCGExportObligationPeriod;

        return tmpEximEPCGExportObligationPeriod.ToDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastBlockNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last block number.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The export obligation period of the exim EPCG scheme.
    /// </param>
    /// <returns>
    /// The last block number.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Block lastBlockNum(TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        select maxof(Block)
            from tmpEximEPCGExportObligationPeriodLoc;

        return tmpEximEPCGExportObligationPeriodLoc.Block + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApproveBasis</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGExportObligationBasis_IN parmApproveBasis(EximEPCGExportObligationBasis_IN _basis = basis)
    {
        basis = _basis;
        return basis;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmEnum(int _parmEnum = parmEnum)
    {
        parmEnum = _parmEnum;
        return parmEnum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormDataSource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormDataSource parmFormDataSource(FormDataSource _formDataSource = formDataSource)
    {
        formDataSource = _formDataSource;
        return formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIssueDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmIssueDateTime(TransDateTime _issueDateTime = issueDateTime)
    {
        issueDateTime = _issueDateTime;
        return issueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicenseNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximLicenseNum_IN parmLicenseNum(EximLicenseNum_IN _licenseNum = licenseNum)
    {
        ;

        licenseNum = _licenseNum;
        return licenseNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        ;

        menuItemName = _menuItemName;
        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmPostingStatus(boolean _postingStatus = postingStatus)
    {
        postingStatus = _postingStatus;

        return postingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeLineVersionNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Version parmSchemeLineVersionNum(Version _schemeLineVersionNum = schemeLineVersionNum)
    {
        ;
        schemeLineVersionNum = _schemeLineVersionNum;
        return schemeLineVersionNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSchemeTableRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGSchemeTableRecId_IN parmSchemeTableRecId(EximEPCGSchemeTableRecId_IN _schemeTableRecId = schemeTableRecId)
    {
        ;
        schemeTableRecId = _schemeTableRecId;

        return schemeTableRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximEPCGSchemeApproval</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGSchemeApprove_IN parmTmpEximEPCGSchemeApproval(EximEPCGSchemeApprove_IN _tmpEximEPCGSchemeApproval = tmpEximEPCGSchemeApproval)
    {
        ;

        tmpEximEPCGSchemeApproval = _tmpEximEPCGSchemeApproval;
        return tmpEximEPCGSchemeApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpEximEPCGSchemeMergeReference</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGSchemeMergeReference_IN parmTmpEximEPCGSchemeMergeReference(EximEPCGSchemeMergeReference_IN _tmpEPCGSchemeMergeReference = tmpEPCGSchemeMergeReference)
    {
        ;

        tmpEPCGSchemeMergeReference = _tmpEPCGSchemeMergeReference;
        return tmpEPCGSchemeMergeReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpExpObligation</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximEPCGExportObligationPeriod_IN parmTmpExpObligation(TmpEximEPCGExportObligationPeriod_IN _tmpExpObligation = tmpEximEPCGExportObligationPeriod)
    {
        ;

        tmpEximEPCGExportObligationPeriod = _tmpExpObligation;
        return tmpEximEPCGExportObligationPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpExportableItems</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximEPCGExportableItems_IN parmTmpExportableItems(EximEPCGExportableItems_IN _tmpEximEPCGExportableItems = tmpEximEPCGExportableItems)
    {
        ;

        tmpEximEPCGExportableItems = _tmpEximEPCGExportableItems;
        return tmpEximEPCGExportableItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reArrangeBlockId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rearrange the id of the block.
    /// </summary>
    /// <param name="_block">
    /// The block.
    /// </param>
    /// <param name="_licenseIssueDateTime">
    /// The date time of the license issue.
    /// </param>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The exprot obligation period of the EPCG scheme.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reArrangeBlockId(
        NumberOf                             _block,
        TransDateTime                        _licenseIssueDateTime,
        TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPrdLoc;
        TransDateTime                        toDateTime;
        ;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);
        tmpEximEPCGExportObligationPrdLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        ttsbegin;

        select firstonly ToDateTime from tmpEximEPCGExportObligationPrdLoc
            where tmpEximEPCGExportObligationPrdLoc.Block == _block - 1;

        toDateTime = tmpEximEPCGExportObligationPrdLoc ? DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExportObligationPrdLoc.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()) : _licenseIssueDateTime;

        while select forupdate tmpEximEPCGExportObligationPeriodLoc
            order by Block asc
            where tmpEximEPCGExportObligationPeriodLoc.Block > _block
        {
            tmpEximEPCGExportObligationPeriodLoc.Block        = tmpEximEPCGExportObligationPeriodLoc.Block - 1;
            tmpEximEPCGExportObligationPeriodLoc.FromDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(toDateTime, 1), DateTimeUtil::getUserPreferredTimeZone());
            tmpEximEPCGExportObligationPeriodLoc.Percentage   = tmpEximEPCGExportObligationPeriodLoc.Percentage;
            toDateTime = DateTimeUtil::newDateTime(endmth(DateTimeUtil::date(DateTimeUtil::addSeconds(EximEPCGUpdate_IN::extendDateTime(DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExportObligationPeriodLoc.FromDateTime,
                                                                                                  DateTimeUtil::getUserPreferredTimeZone()),
                                                       tmpEximEPCGExportObligationPeriodLoc.Units,
                                                       PaymentPer_IN::Years), -1))), 0);

            toDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::addSeconds(DateTimeUtil::addDays(toDateTime, 1), -1), DateTimeUtil::getUserPreferredTimeZone());

            tmpEximEPCGExportObligationPeriodLoc.ToDateTime   = toDateTime;

            tmpEximEPCGExportObligationPeriodLoc.update();
            toDateTime = DateTimeUtil::applyTimeZoneOffset(tmpEximEPCGExportObligationPeriodLoc.ToDateTime, DateTimeUtil::getUserPreferredTimeZone());
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainingPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the remaining  percentage of the export obligation period.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The export obligation period of the exim EPCG scheme.
    /// </param>
    /// <returns>
    /// The instance of the <c>Percent</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Percent remainingPct(TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod = tmpEximEPCGExportObligationPeriod)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;
        ;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        select sum(Percentage)
            from tmpEximEPCGExportObligationPeriodLoc;

        return tmpEximEPCGExportObligationPeriodLoc.Percentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedSchemes</Name>
				<Source><![CDATA[
    /// <summary>
    /// The selected scheme.
    /// </summary>
    /// <param name="_formDataSource">
    /// The form data source.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void selectedSchemes(FormDataSource _formDataSource)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalExpObligationAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total export obligation amount.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The export obligation period of the exim EPCG scheme.
    /// </param>
    /// <returns>
    /// The total export obligation amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur totalExpObligationAmt(TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;
        ;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        select sum(ExportObligationAmount)
            from tmpEximEPCGExportObligationPeriodLoc;

        return tmpEximEPCGExportObligationPeriodLoc.ExportObligationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total units of the exim EPCG export obligation period.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The export obligation period of the exim EPCG scheme.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximBlockUnit_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EximBlockUnit_IN totalUnits(TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;
        ;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        select sum(Units)
            from tmpEximEPCGExportObligationPeriodLoc;

        return tmpEximEPCGExportObligationPeriodLoc.Units;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>EximEPCGUpdate_IN</c> class.
    /// </summary>
    /// <param name="_menuItemName">
    /// The menu item name.
    /// </param>
    /// <returns>
    /// The instance of the <c>EximEPCGUpdate_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static EximEPCGUpdate_IN construct(menuItemName _menuItemName)
    {
        ;

        switch (_menuItemName)
        {
            case  menuitemactionstr(EximEPCGUpd_Approve_IN)         : return new EximEPCGUpd_Approve_IN();
            case  menuitemactionstr(EximEPCGUpd_TechUpgrade_IN)     : return new EximEPCGUpd_TechUpgrade_IN();
            case  menuitemactionstr(EximEPCGUpd_Extension_IN)       : return new EximEPCGUpd_Extension_IN();
            case  menuitemactionstr(EximEPCGUpd_Merge_IN)           : return new EximEPCGUpd_Merge_IN();
        }
        throw error(strfmt("@SYS19306", funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends date time of the transaction.
    /// </summary>
    /// <param name="_transDateTime">
    /// The date time of the transaction.
    /// </param>
    /// <param name="_value">
    /// The instance of the <c>Integer</c> value.
    /// </param>
    /// <param name="_periodInterval">
    /// The period interval.
    /// </param>
    /// <returns>
    /// The date time of the transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TransDateTime extendDateTime(
        TransDateTime _transDateTime,
        Integer       _value,
        PaymentPer_IN _periodInterval)
    {
        TransDateTime  extendDateTime;
        ;

        switch (_periodInterval)
        {
            case PaymentPer_IN::Months:
                extendDateTime = DateTimeUtil::addMonths(_transDateTime, _value);
                break;

            case PaymentPer_IN::Days:
                extendDateTime = DateTimeUtil::addDays(_transDateTime, _value);
                break;

            case PaymentPer_IN::Years:
                extendDateTime = DateTimeUtil::addYears(_transDateTime, _value);
                break;
        }

        return extendDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args  args)
    {
        EximEPCGSchemeTable_IN  epcgSchemeTable;
        EximEPCGSchemeLine_IN   epcgSchemeLine;
        Counter                 parmEnum;
        FormDataSource          formDataSource;
        menuItemName            menuItemName;
        EximEPCGUpdate_IN       eximEPCGUpdate;
        ;

        if (!args
            || !args.record()
            || !args.caller()
            || (args.dataset() != tablenum(EximEPCGSchemeTable_IN)
            && args.dataset() != tablenum(EximEPCGSchemeLine_IN)))
        {
            throw error("@SYS25407");
        }

        parmEnum        = args.parmEnum();
        menuItemName    = args.menuItemName();

        formDataSource  = FormDataUtil::getFormDataSource(args.record());

        eximEPCGUpdate = EximEPCGUpdate_IN::construct(menuItemName);

        if (args.dataset() == tablenum(EximEPCGSchemeLine_IN))
        {
            epcgSchemeLine = args.record();
            epcgSchemeTable = EximEPCGSchemeTable_IN::findRecId(epcgSchemeLine.SchemeTableRecId);
            eximEPCGUpdate.parmSchemeLineVersionNum(epcgSchemeLine.VersionNum);
        }
        else
        {
            epcgSchemeTable = args.record();
        }

        eximEPCGUpdate.parmSchemeTableRecId(epcgSchemeTable.RecId);
        eximEPCGUpdate.parmFormDataSource(formDataSource);
        eximEPCGUpdate.parmEnum(parmEnum);

        if (menuItemName == menuitemactionstr(EximEPCGUpd_Merge_IN))
        {
            eximEPCGUpdate.selectedSchemes(formDataSource);
        }

        if (eximEPCGUpdate.prompt() && eximEPCGUpdate.parmPostingStatus())
        {
            eximEPCGUpdate.runOperation();
            EximEPCGUpdate_IN::updateCallerDataSource(formDataSource,
                                                true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum values of the exim EPCG export obligation period.
    /// </summary>
    /// <param name="_tmpEximEPCGExportObligationPeriod">
    /// The export obligation period of the exim EPCG scheme.
    /// </param>
    /// <returns>
    /// The collection of the sum values.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container sumValues(TmpEximEPCGExportObligationPeriod_IN _tmpEximEPCGExportObligationPeriod)
    {
        TmpEximEPCGExportObligationPeriod_IN tmpEximEPCGExportObligationPeriodLoc;
        ;

        tmpEximEPCGExportObligationPeriodLoc.setTmpData(_tmpEximEPCGExportObligationPeriod);

        select sum(ExportObligationAmount),
               sum(Percentage),
               sum(Units)
            from tmpEximEPCGExportObligationPeriodLoc;

        return [tmpEximEPCGExportObligationPeriodLoc.ExportObligationAmount,
               tmpEximEPCGExportObligationPeriodLoc.Percentage,
               tmpEximEPCGExportObligationPeriodLoc.Units];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the caller data source.
    /// </summary>
    /// <param name="_formDataSource">
    /// The form data source.
    /// </param>
    /// <param name="_recordExists">
    /// True if the record exists.
    /// </param>
    // Method set to client static to be run on the client to minimize the interaction between tiers.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void updateCallerDataSource(Object  _formDataSource = null,
                                                        boolean _recordExists = false)
    {
        ;

        if (_recordExists)
        {
            _formDataSource.executeQuery();
        }
        else
        {
            _formDataSource.reSearch();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>