<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_StdDeferrals</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25RegCalc_StdDeferrals extends RTax25RegCalc_Std implements BatchRetryable
{
    DialogField dialogFromDate;
    DialogField dialogToDate;
    DialogField dialogOverWrite;
    DialogField dialogPreview;
    DialogField dialogUseDocuments;
    SysQueryRun queryRun;
    NoYes       calculateAll;
    boolean     overWrite;
    boolean     preview;
    boolean     useDocuments;

    private const Version currentVersion_rTax25RegCalc_StdDeferrals = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDeferrals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addDeferrals(RDeferralsTable  _rDeferralsTable,
                                RDeferralsBook   _rDeferralsBook,
                                RTax25StdChannel _channelPreview)
    {
        RTax25StdChannel_Deferral           channel;
        RTax25StdChannel_DeferralPreview    deferralsPreview;
        RecordSortedList                    rDeferralsGroup;
        RecordSortedList                    transList;
        RDeferralsTrans                     deferralsTrans;
        RDeferralsBookId                    deferralsBookId = _rDeferralsBook.DeferralsBookId;

        progress.setText(strFmt("@GLS107170",_rDeferralsTable.DeferralsId,_rDeferralsTable.Name));
        progress.incCount();
        setPrefix(strFmt("@GLS107170",_rDeferralsTable.DeferralsId,_rDeferralsTable.Name));
        rDeferralsGroup = new RecordSortedList(tableNum(RDeferralsGroup));
        rDeferralsGroup.sortOrder(fieldNum(RDeferralsGroup,DeferralsGroupId));
        while select DeferralsGroupId
            from _rDeferralsBook
            where _rDeferralsBook.DeferralsId == _rDeferralsTable.DeferralsId
        {
            rDeferralsGroup.ins(RDeferralsGroup::find(_rDeferralsBook.DeferralsGroupId));
        }
        channel = RTax25StdChannel_Deferral::newParameters(this, false);
        channel.rDeferralsGroup(rDeferralsGroup);
        channel.setSignature(_rDeferralsTable.RefTableId,_rDeferralsTable.RefRecId,_rDeferralsTable.rTax25ProfitTable);

        if (classidget(_channelPreview) == classnum(RTax25StdChannel_DeferralPreview))
        {
            deferralsPreview = _channelPreview;
            transList = deferralsPreview.deferralsTransList();
            deferralsTrans.clear();
            deferralsTrans.DeferralsId      = _rDeferralsTable.DeferralsId;
            deferralsTrans.DeferralsBookId  = deferralsBookId;
            transList.find(deferralsTrans);
            channel.setTrans(deferralsTrans.Voucher, deferralsTrans.TransDate);
        }

        if (channel.exist())
        {
            if (overWrite)
            {
                if (channel.clear())
                {
                    this.send(_rDeferralsTable,_rDeferralsBook,channel);
                }
                else
                {
                   info(strFmt("@GLS107195",_rDeferralsTable.DeferralsId));
                }
            }
        }
        else
        {
            this.send(_rDeferralsTable,_rDeferralsBook,channel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>channel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RTax25StdChannel channel()
    {
        return RTax25StdChannel_Deferral::newParameters(this, preview && ! inBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExpression</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkExpression(RTax25StdExpressionTable _expressionTable)
    {
        RTax25StdOperandType    operandType;
        RTax25StdExpressionLine expressionLine;
        if (! useDocuments)
        {
            return true;
        }
        while select LineType
            from expressionLine
            where expressionLine.SeqNum            == _expressionTable.SeqNum
               && expressionLine.rTax25ProfitTable == _expressionTable.rTax25ProfitTable
        {
            operandType = RTax25StdOperandType::newParameters(expressionLine.LineType);
            if (operandType.documentBased())
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;
        dialog.caption(this.caption());
        dialog.addGroup("@GLS105772");
        dialogFromDate  = dialog.addFieldValue(extendedTypeStr(StartDate), dateFrom);
        dialogToDate    = dialog.addFieldValue(extendedTypeStr(RDeferralsEndDatePeriod), dateTo);
        dialog.addGroup("@SYS22622");
        dialogOverWrite    = dialog.addFieldValue(enumStr(NoYes), overWrite, "@SYS3074", "@SYS54006");
        dialogPreview      = dialog.addFieldValue(enumStr(NoYes), preview, "@SYS65316", "@GLS107189");
        dialogUseDocuments = dialog.addFieldValue(enumStr(NoYes), useDocuments, "@GLS111030", "@GLS111031");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        dateFrom   = dialogFromDate.value();
        dateTo     = dialogToDate.value();
        overWrite  = dialogOverWrite.value();
        preview    = dialogPreview.value();
        useDocuments = dialogUseDocuments.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion_rTax25RegCalc_StdDeferrals, dateFrom, dateTo, overWrite, preview, useDocuments, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateAll</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NoYes parmCalculateAll(NoYes _calculateAll = calculateAll)
    {
        calculateAll = _calculateAll;
        return calculateAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate parmDateFrom(FromDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;
        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDate parmDateTo(ToDate _dateTo = dateTo)
    {
        dateTo = _dateTo;
        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverWrite</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmOverWrite(boolean _overWrite = overWrite)
    {
        overWrite = _overWrite;

        return overWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDocuments</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmUseDocuments(boolean _useDocuments = useDocuments)
    {
        useDocuments = _useDocuments;

        return useDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preview</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void preview(RTax25StdChannel _channelPreview)
    {
        Args            formArgs = new Args();
        FormRun         formRun;
        FormDataSource  rDeferralsTable_DS;
        RDeferralsTable rDeferralsTable;
        RDeferralsBook  rDeferralsBook;
        int             transCount;

        formArgs.caller(_channelPreview);
        formArgs.name(formStr(RDeferralsTablePreview));

        formRun = classfactory.formRunClass(formArgs);

        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOk())
        {
            rDeferralsTable_DS = formRun.dataSource(tableStr(RDeferralsTable));
            rDeferralsBook    = formRun.dataSource(tableStr(RDeferralsBook)).cursor();
            progress = null;
            if (rDeferralsTable_DS.anyMarked())
            {
                for (rDeferralsTable = rDeferralsTable_DS.getFirst(true);rDeferralsTable;rDeferralsTable = rDeferralsTable_DS.getNext())
                {
                    transCount ++;
                }
                this.progressInit("",transCount);
                for (rDeferralsTable = rDeferralsTable_DS.getFirst(true);rDeferralsTable;rDeferralsTable = rDeferralsTable_DS.getNext())
                {
                    this.addDeferrals(rDeferralsTable, rDeferralsBook, _channelPreview);
                }
            }
            else
            {
                rDeferralsTable = rDeferralsTable_DS.cursor();
                select count(RecId) from rDeferralsTable;
                this.progressInit("",rDeferralsTable.RecId);
                while select rDeferralsTable
                {
                    this.addDeferrals(rDeferralsTable, rDeferralsBook, _channelPreview);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Query query()
    {
        Query                query =  new Query();
        QueryBuildDataSource qBd;
        QueryBuildRange      qBr;
        ;
        qBd = query.addDataSource(tableNum(RTax25StdSeq));
        qBr = qBd.addRange(fieldNum(RTax25StdSeq,ChannelType));
        qBr.value(queryValue(seqTable.ChannelType));
        qBr.status(RangeStatus::Locked);
        qBr = qBd.addRange(fieldNum(RTax25StdSeq,ModuleType));
        qBr.value(queryValue(seqTable.ModuleType));
        qBr.status(RangeStatus::Locked);
        qBr = qBd.addRange(fieldNum(RTax25StdSeq,SeqNum));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        QueryBuildRange      qbr;
        RTax25StdSeq         rTax25StdSeq;
        FormDataSource       seqTable_ds = FormDataUtil::getFormDataSource(seqTable);
        Range                seqNumRange;

        if (! queryRun)
        {
            queryRun = new SysQueryRun(this.query());
        }
        if (seqTable_ds)
        {
            if (! calculateAll)
            {
                for (rTax25StdSeq = seqTable_ds.getFirst(true) ? seqTable_ds.getFirst(true) : seqTable_ds.cursor() ;
                     rTax25StdSeq ; rTax25StdSeq = seqTable_ds.getNext())
                {
                    seqNumRange = queryRangeConcat(seqNumRange,rTax25StdSeq.SeqNum);
                }
            }
            qbr = findOrCreateRange_W(queryRun.query().dataSourceNo(1),fieldNum(RTax25StdSeq,SeqNum));
            qbr.value(seqNumRange);
        }
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runSequences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSequences</Name>
				<Source><![CDATA[
    #define.ProgressNum(2)
    protected void runSequences()
    {
        RTax25StdExpressionTable    expressionTable;
        RTax25StdExpression         expression;
        RTax25StdChannel            channel = this.channel();
        int                         i = 1;

        ttsbegin;
        this.progressInit("",SysQuery::countTotal(queryRun),#AviUpdate);
        queryRun.init();
        setPrefix("@GLS107173");
        while (queryRun.next())
        {
            seqTable = queryRun.get(tableNum(RTax25StdSeq));
            progress.setText(int2str(seqTable.SeqNum) + "@GLS105455", 1);
            progress.setTotal((select count(RecId) from rTax25StdExpressionTable
                                   where rTax25StdExpressionTable.SeqNum == seqTable.SeqNum).RecId, #ProgressNum);
            channel.open();

            while select expressionTable
                where expressionTable.SeqNum == seqTable.SeqNum
            {
                progress.setText(strFmt("@SYS76498", "@GLS103733", RTax25ProfitTable::find(expressionTable.rTax25ProfitTable).ProfitId), #ProgressNum);
                if (this.checkExpression(expressionTable))
                {
                    expression = RTax25StdExpression::newParameters(expressionTable,
                                                                    channel,
                                                                    dateFrom,
                                                                    dateTo);
                    expression.parmOverWrite(overWrite);
                    expression.parmThrowError(false);
                    expression.calc();
                }
                progress.incCount(1, #ProgressNum);
            }

            channel.close();
            progress.incCount(1, 1);
            i++;
        }
        ttscommit;
        if (preview && ! inBatch)
        {
            this.preview(channel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    private void send(RDeferralsTable           _rDeferralsTable,
                      RDeferralsBook            _rDeferralsBook,
                      RTax25StdChannel_Deferral _channel
                     )
    {
        RDeferralsTable deferralsTable;
        RDeferralsBook  deferralsBook;
        ttsbegin;
        deferralsTable = RDeferralsTable::findFromSource(_rDeferralsTable.RefTableId,
                                                         _rDeferralsTable.RefRecId,
                                                         _rDeferralsTable.rTax25ProfitTable,
                                                         true);
        if (deferralsTable.RecId)
        {
            deferralsTable.Name  = _rDeferralsTable.Name;
            deferralsTable.Notes = _rDeferralsTable.Notes;
            deferralsTable.update();
        }
        else
        {
            deferralsTable.data(_rDeferralsTable);
            deferralsTable.DeferralsId = _channel.rDeferralsId();
            deferralsTable.insert();
        }
        while select _rDeferralsBook
            where _rDeferralsBook.DeferralsId == _rDeferralsTable.DeferralsId
        {
            deferralsBook.data(_rDeferralsBook);
            deferralsBook.DeferralsId = deferralsTable.DeferralsId;
            _channel.insertBook(deferralsBook);
            _channel.createTrans(deferralsBook, deferralsTable);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);
        container   packedQuery = conPeek(packedClass, conLen(packedClass));
        ;
        switch (version)
        {
            case currentVersion_rTax25RegCalc_StdDeferrals:
                [version, dateFrom, dateTo, overWrite, preview, useDocuments] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery) ;
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc_StdDeferrals construct(RTax25StdChannelType _rTax25StdChannelType,
                                                       Common               _common)
    {
        RTax25RegCalc_StdDeferrals       rTax25RegCalc_StdDeferrals;
        RTax25RegCalc_StdDeferralsFactor calcFactor;

        switch (_rTax25StdChannelType)
        {
            case RTax25StdChannelType::DeferralsFactor:
                rTax25RegCalc_StdDeferrals = new RTax25RegCalc_StdDeferralsFactor();
                calcFactor = rTax25RegCalc_StdDeferrals;
                calcFactor.parmFactorCalculation(_common);
                break;
            default:
                rTax25RegCalc_StdDeferrals = new RTax25RegCalc_StdDeferrals();
        }
        return rTax25RegCalc_StdDeferrals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS107173";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RTax25RegCalc_StdDeferrals  rTax25RegCalc_StdDeferrals;
        Object                      formRun;
        RTax25StdSeq                rTax25StdSeq;
        RTax25StdSeqNum             seqNum;
        RDeferralsFactorCalculation deferralsFactorCalculation;
        Args                        args;


        if (! _args || ! _args.record() ||  _args.dataset() != tableNum(RTax25StdSeq) || ! _args.record().RecId)
            throw error(strFmt("@SYS25516", funcName()));

        if (!(_args.caller() is FormRun) && _args.caller().name() != formStr(RTax25StdSeqCalc))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00091, funcName());

        rTax25StdSeq                = _args.record();
        seqNum                      = rTax25StdSeq.SeqNum;
        formRun                     = _args.caller();
        args                        = formRun.args();
        deferralsFactorCalculation  = args.record();
        rTax25RegCalc_StdDeferrals  = RTax25RegCalc_StdDeferrals::construct(rTax25StdSeq.ChannelType,
                                                                            deferralsFactorCalculation);
        if (rTax25StdSeq.ChannelType == RTax25StdChannelType::DeferralsFactor)
        {
            rTax25RegCalc_StdDeferrals.init();
        }
        rTax25RegCalc_StdDeferrals.seqTable(rTax25StdSeq);
        rTax25RegCalc_StdDeferrals.parmCalculateAll(_args.parmEnum());
        rTax25RegCalc_StdDeferrals.initQueryRun();

        if (rTax25RegCalc_StdDeferrals.prompt())
        {
            rTax25RegCalc_StdDeferrals.runOperation();
            formRun.setPeriodDates();
            FormDataUtil::getFormDataSource(rTax25StdSeq).research();
            FormDataUtil::getFormDataSource(rTax25StdSeq).findRecord(RTax25StdSeq::find(seqNum));

            if (deferralsFactorCalculation.RecId)
            {
                FormDataUtil::getFormDataSource(deferralsFactorCalculation).research();
                FormDataUtil::getFormDataSource(deferralsFactorCalculation).findRecord(
                    RDeferralsFactorCalculation::findPeriod(rTax25RegCalc_StdDeferrals.dateFrom()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private void initQueryRun()
    {
        if (!queryRun)
        {
            queryRun = new SysQueryRun(this.query());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>