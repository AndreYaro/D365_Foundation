<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCancelProductReceiptService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSCancelProductReceiptService
{
    private WHSLoadId loadId;
    private DataAreaId loadDataAreaId;

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSCancelProductReceiptService));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelProductReceiptForLoad</Name>
				<Source><![CDATA[
    internal static void cancelProductReceiptForLoad(WHSLoadId _loadId, DataAreaId _loadDataAreaId)
    {
        WHSCancelProductReceiptService cancelProductReceiptService = new WHSCancelProductReceiptService();
        cancelProductReceiptService.loadId = _loadId;
        cancelProductReceiptService.loadDataAreaId = _loadDataAreaId;
        cancelProductReceiptService.cancelProductReceipt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelProductReceipt</Name>
				<Source><![CDATA[
    private void cancelProductReceipt()
    {
        using (var activityContext = this.logger().loadProductReceipt().cancelProductReceipt())
        {
            ttsbegin;

            this.cancelWork();

            this.cancelPackingSlip();

            this.updateStatuses();

            this.reverseReceiptConfirmation();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    private void cancelWork()
    {
        WHSWorkTable workTable;

        while select forupdate workTable
            where workTable.LoadId      == loadId
            &&    (workTable.WorkStatus == WHSWorkStatus::Open
            ||     workTable.WorkStatus == WHSWorkStatus::Closed)
        {
            if (workTable.WorkStatus == WHSWorkStatus::Open)
            {
                WHSWorkTable::cancelWork(workTable.WorkId, true, false, UnknownNoYes::Unknown, true);
            }
            else if (workTable.WorkStatus == WHSWorkStatus::Closed)
            {
                workTable.decreaseLoadLineWorkCreatedQtyForPurchaseWork();

                // To avoid looking at the same work if product receipt is cancelled multiple times.
                workTable.WorkStatus = WHSWorkStatus::Cancelled;
                workTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelPackingSlip</Name>
				<Source><![CDATA[
    private void cancelPackingSlip()
    {
        WHSLoadTableVendPackingSlipJour loadVendJour;
        VendPackingSlipJour             vendJour;
        VendPackingSlipTrans            vendTrans;
        WHSLoadLine                     loadLine;

        while select vendJour
            exists join loadVendJour
                where loadVendJour.LoadId              == loadId
                &&    loadVendJour.LoadDataAreaId      == loadDataAreaId
                &&    loadVendJour.VendPackingSlipJour == vendJour.RecId
            exists join vendTrans
                where vendTrans.vendPackingslipJour == vendJour.RecId
                &&    vendTrans.Qty                 != 0
            exists join loadLine
                where loadLine.InventTransId == vendTrans.InventTransId
                &&    loadLine.LoadId        == loadId
        {
            Args args = new Args();
            args.record(vendJour);
            args.parmEnum(enum2int(DocumentStatus::PackingSlip));

            new MenuFunction(menuItemActionStr(PurchFormLetter_PackingSlipCancel), MenuItemType::Action).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatuses</Name>
				<Source><![CDATA[
    private void updateStatuses()
    {
        WHSLoadStatusUpdater::newFromLoadId(loadId).updateWhenVendPackingSlipPosted();
        WHSShipmentStatusUpdater::updateInboundShipmentsByLoad(loadId);

        if (WHSReverseRecvCompletedWhenCancelPackingSlipFlight::instance().isEnabled())
        {
            WHSLoadTable loadTable = WHSLoadTable::find(loadId, true);
            loadTable.ProductReceiptProcessingStatus = WHSProductReceiptProcessingStatus::NotReady;
            loadTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReceiptConfirmation</Name>
				<Source><![CDATA[
    private void reverseReceiptConfirmation()
    {
        if (WHSReverseRecvCompletedWhenCancelPackingSlipFlight::instance().isEnabled())
        {
            WHSInboundReverseReceivingCompletedService::reverseReceiptConfirmSingleLoad(loadId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>