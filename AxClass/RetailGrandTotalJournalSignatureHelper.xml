<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalSignatureHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Prepares data from record of <c>RetailGrandTotalJournalTable</c> to signing.
/// </summary>
public class RetailGrandTotalJournalSignatureHelper
{
    private RetailGrandTotalJournalTable journalTable;

    private const str FieldsSplitter = ',';
    private const int DecimalPrecision = 2;
    private const int AmountMultFactor = 100;
    private const str TheFirstSigned = 'Y';
    private const str NotTheFirstSigned = 'N';
    private const str PeriodSplitter = '|';

    internal const str DataToSignFormatVersion = '2.1_4.0';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildStringToSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the string to sign based on journal data.
    /// </summary>
    /// <returns>
    /// String to sign.
    /// </returns>
    public str buildStringToSign()
    {
        str ret;
        RetailDigitalSignature prevJournalSignature;

        // position 1 TTC
        ret = this.getTTCString() + FieldsSplitter;

        // position 2 TVA
        ret += this.getTVAString() + FieldsSplitter;

        // position 3 PCGT (perpetual cumulative grand total)
        ret += this.getPCGTString() + FieldsSplitter;

        // position 4 DTG
        ret += this.getDTGString() + FieldsSplitter;

        // position 5 period
        ret += RetailGrandTotalJournalSignatureHelper::formatPeriodValue(journalTable.FromDate, journalTable.ToDate);

        //position 6 sequential number
        ret += int2str(journalTable.SequentialNumber) + FieldsSplitter;

        //position 7&8
        prevJournalSignature = journalTable.findPreviousClosedJournal().Signature;
        if (prevJournalSignature == '')
        {
            ret += TheFirstSigned;
        }
        else
        {
            ret += NotTheFirstSigned + FieldsSplitter;
            ret += prevJournalSignature;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDTGString</Name>
				<Source><![CDATA[
    private str getDTGString()
    {
        str ret;
        utcDateTime signDateTime;

        signDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getCompanyTimeZone());

        ret = RetailGrandTotalJournalSignatureHelper::formatDateValue(DateTimeUtil::date(signDateTime));
        ret += RetailGrandTotalJournalSignatureHelper::formatTimeValue(DateTimeUtil::hour(signDateTime));
        ret += RetailGrandTotalJournalSignatureHelper::formatTimeValue(DateTimeUtil::minute(signDateTime));
        ret += RetailGrandTotalJournalSignatureHelper::formatTimeValue(DateTimeUtil::second(signDateTime));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTTCString</Name>
				<Source><![CDATA[
    private str getTTCString()
    {
        RetailGrandTotalJournalTrans journalTrans;
        str ret;

        const str TaxTransSplitter = '|';
        const str TaxRateAmountSplitter = ':';
        const str ZeroTaxes = '0:0';

        while select sum(NetAmount), sum(TaxAmount) from journalTrans
            group by TaxRate
            where journalTrans.JournalTable == journalTable.RecId
        {
            ret = ret ? ret + TaxTransSplitter : ret;
            ret += RetailGrandTotalJournalSignatureHelper::formatAmountValue(journalTrans.TaxRate);
            ret += TaxRateAmountSplitter + RetailGrandTotalJournalSignatureHelper::formatAmountValue(journalTrans.totalAmount());
        }

        if (!ret)
        {
            ret = ZeroTaxes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTVAString</Name>
				<Source><![CDATA[
    private str getTVAString()
    {
        return RetailGrandTotalJournalSignatureHelper::formatAmountValue(journalTable.GrandTotalSales - journalTable.GrandTotalReturns);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPCGTString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get perpetual cumulative grand total for signed.
    /// </summary>
    /// <returns>Perpetual cumulative grand total.</returns>
    private str getPCGTString()
    {
        return RetailGrandTotalJournalSignatureHelper::formatAmountValue(journalTable.CumulativePerpetualGrandTotal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RetailGrandTotalJournalTable _journalTable)
    {
        journalTable = _journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAmountValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats amount for signing.
    /// </summary>
    /// <param name="_amountValue">
    /// Amount to be formatted.
    /// </param>
    /// <returns>
    /// Formatted amount.
    /// </returns>
    private static str formatAmountValue(real _amountValue)
    {
        return int2str(any2Int(decRound(_amountValue, DecimalPrecision) * AmountMultFactor));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats date for signing.
    /// </summary>
    /// <param name="_transDate">
    /// Date to be formatted.
    /// </param>
    /// <returns>
    /// Formatted date.
    /// </returns>
    private static str formatDateValue(TransDate _transDate)
    {
        return date2str(_transDate, 321, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPeriodValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats period dates for signing.
    /// </summary>
    /// <param name="_fromDate">
    /// Period start date.
    /// </param>
    /// <param name="_toDate">
    /// Period end date.
    /// </param>
    /// <returns>
    /// Formatted date.
    /// </returns>
    private static str formatPeriodValue(FromDate _fromDate, ToDate _toDate)
    {
        return  RetailGrandTotalJournalSignatureHelper::formatDateValue(_fromDate)
            + PeriodSplitter
            + RetailGrandTotalJournalSignatureHelper::formatDateValue(_toDate)
            + FieldsSplitter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTimeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats time for signing.
    /// </summary>
    /// <param name="_timeValue">
    /// Time to be formatted.
    /// </param>
    /// <returns>
    /// Formatted time.
    /// </returns>
    private static str formatTimeValue(int _timeValue)
    {
        return _timeValue < 10 ? '0' + int2str(_timeValue) : int2str(_timeValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHashAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates hash algorithm.
    /// </summary>
    /// <param name = "_hashAlgorithm">The hash algorithm to validate.</param>
    public void validateHashAlgorithm(RetailHashAlgorithm _hashAlgorithm)
    {
        if (!RetailDigitalSignatureManager::isHashAlgorithmSupported(_hashAlgorithm))
        {
            str message = con2Str(RetailDigitalSignatureManager::getSupportedHashAlgorithms(), ', ');

            throw error(strFmt('@RetailGrandTotalJournal:NotSupportedHashAlgorithmsInCommerceParameters', _hashAlgorithm, message));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>