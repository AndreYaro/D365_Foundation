<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SrsReportRunDefaultController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SrsReportRunDefaultController_CN</c> class is default controller for those SRS reports which need to apply
/// the validations, which is implemented by the <c>SrsReportRunExtendedController_CN</c> class.
/// </summary>
/// <remarks>
/// Apply the default controller to the SRS reports:
/// 1. For those SRS reports don't have controller class, make the report menu item associate with this controller
///    class directly, and modify the setReportName and setValidation method to add switch case for the report;
///
/// 2. Makes the report RDP contract class implement the <c>SrsReportRowCountable_CN</c> interface;
/// </remarks>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SrsReportRunDefaultController_CN extends SrsReportRunExtendedController_CN implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSrsReportRowCountable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets srs report row countable information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SrsReportRowCountable_CN</c> class.
    /// </returns>
    protected SrsReportRowCountable_CN getSrsReportRowCountable()
    {
        //the final query is based on the rdp contract parameters
        return this.parmReportContract().parmRdpContract() as SrsReportRowCountable_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report name by menu item
    /// </summary>
    /// <returns>
    /// Report name
    /// </returns>
    /// <remarks>
    /// Add the switch case here for applying this controller to your SRS report.
    /// </remarks>
    public str setReportName()
    {
        str reportNameLocal;

        switch (this.parmArgs().menuItemName())
        {
            case menuitemOutputStr(InventVoucherDetails_CN):
                reportNameLocal = ssrsReportStr(InventVoucherDetails_CN, Design);
                break;

            case menuitemOutputStr(InventSalesShipmentDetails_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00134, funcName());
                reportNameLocal = ssrsReportStr(InventSalesShipmentDetails_CN, Design);
                break;

            case menuitemOutputStr(CustReceivableTransaction_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00112, funcName());
                reportNameLocal = ssrsReportStr(CustReceivableTransaction_CN, Report);
                break;

            case menuitemOutputStr(VendPayableTransaction_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00126, funcName());
                reportNameLocal = ssrsReportStr(VendPayableTransaction_CN, Report);
                break;

            case menuitemOutputStr(CustLedgerTransactions_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00114, funcName());
                reportNameLocal = ssrsReportStr(CustLedgerTransactions_CN, Report);
                break;

            case menuitemOutputStr(VendLedgerTransactions_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00124, funcName());
                reportNameLocal = ssrsReportStr(VendLedgerTransactions_CN, Report);
                break;

            case menuitemOutputStr(LedgerMatrixReportWithDim_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00101, funcName());
                reportNameLocal = ssrsReportStr(LedgerMatrixReportWithDim_CN, Design);
                break;

            case menuitemOutputStr(LedgerMatrixAccount_CN):
                reportNameLocal = ssrsReportStr(LedgerMatrixAccount_CN, Design);
                break;

            case menuitemOutputStr(LedgerMatrixDimension_CN):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00102, funcName());
                reportNameLocal = ssrsReportStr(LedgerMatrixDimension_CN, Design);
                break;
        }

        return reportNameLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the flags which indicates whether should perform the validation.
    /// </summary>
    /// <remarks>
    /// Add the switch case here for applying this controller to your SRS report, if want to disable some validations.
    /// </remarks>
    public void setValidation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        SrsReportRunDefaultController_CN controller = new SrsReportRunDefaultController_CN();

        controller.parmArgs(_args);
        controller.parmReportName(controller.setReportName());
        controller.setValidation();

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>