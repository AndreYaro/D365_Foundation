<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxPaymentPosting_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the data object for LedgerVoucher and processes the ledger voucher of the sales tax payment.
/// </summary>
public class TaxSalesTaxPaymentPosting_IN
{
    TaxSalesTaxPaymentHistory_IN            history;
    TaxSalesTaxPaymentProfile_IN            profile;
    TaxSalesTaxPaymentDoc_IN                taxPaymentDoc;
    TaxReportPostingHandler_IN              postingHandler;
    TaxReportPostingVendPaymentHandler_IN   paymentPostingHandler;
    boolean                                 hasLedgerVoucherTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateTaxAdjustmentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate tax adjustment trans which is used to record the setOff history of tax trans that are selected
    /// from the registration number in the registration group
    /// </summary>
    protected void generateTaxAdjustmentTrans()
    {
        TaxSalesTaxPaymentHistoryDetails_IN         historyDetails;
        TaxSalesTaxPaymentHistoryDetailsTrans_IN    detailTrans;
        TaxSalesTaxPaymentTaxAdjustments_IN         taxAdjustment;
        TaxsalestaxpaymentsetOffHistory_IN          setOffHistory;

        //Different Reg Number, create taxAdjustments for settled amounts
        while select TaxRegistrationNumbers_IN, TaxSalesTaxPaymentHistory_IN, RecId from historyDetails
                where historyDetails.TaxRegistrationNumbers_IN != profile.parmTaxRegistrationNumber().RecId &&
                      historyDetails.TaxSalesTaxPaymentHistory_IN == history.RecId
            join RecId, TaxTrans_IN from detailTrans
                where detailTrans.TaxSalesTaxPaymentHistoryDetails_IN == historyDetails.RecId
            join DetailTransToSettle, DetailTransToBeSettled, RecoverableAmountMST from setOffHistory
                where detailTrans.RecId == setOffHistory.DetailTransToSettle ||
                      detailTrans.RecId == setOffHistory.DetailTransToBeSettled
        {
            //Recoverable is utilized to set off other node
            if (detailTrans.RecId == setOffHistory.DetailTransToSettle)
            {
                taxAdjustment.initValue();
                taxAdjustment.TaxTrans_IN = detailTrans.TaxTrans_IN;
                taxAdjustment.TaxSalesTaxPaymentHistoryDetailsTrans_IN = detailTrans.RecId;
                taxAdjustment.SettledRecoverableAmountMST = setOffHistory.RecoverableAmountMST;
                taxPaymentDoc.addTaxAdjustments(taxAdjustment);
                taxAdjustment.clear();
            }
            else if (detailTrans.RecId == setOffHistory.DetailTransToBeSettled)
            {
                //Using recoverable amount to set off payable amount
                taxAdjustment.initValue();
                taxAdjustment.TaxTrans_IN = detailTrans.TaxTrans_IN;
                taxAdjustment.TaxSalesTaxPaymentHistoryDetailsTrans_IN = detailTrans.RecId;
                taxAdjustment.SettledPayableAmountMST = setOffHistory.RecoverableAmountMST * -1;
                taxPaymentDoc.addTaxAdjustments(taxAdjustment);
                taxAdjustment.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTaxSalesTaxPaymentDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the sales tax payment document which is used for later posting for sales tax payment
    /// </summary>
    public void generateTaxSalesTaxPaymentDoc()
    {
        if (history && profile)
        {
            taxPaymentDoc = new TaxSalesTaxPaymentDoc_IN();

            this.initTaxPaymentLedgerVoucher();

            //generate document for set off transactions
            this.processSetOffTransactions();

            //generate document ledger voucher
            this.processLedgerVoucher();

            //generate taxReportVoucher
            this.processTaxReportVoucher();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPaymentLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the data object for LedgerVoucher and set the voucher in the sales tax payment document object
    /// </summary>
    private void initTaxPaymentLedgerVoucher()
    {
        TransactionTxt     transactionTxt;
        NumberSeq          numberSeq;
        Voucher            voucher;
        LedgerVoucher      ledgerVoucher;

        //Init parameters
        numberSeq = NumberSeq::newGetVoucher(TaxParameters::numRefTaxReportingVoucher(), true);
        voucher = numberSeq.voucher();

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::TaxReporting);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setKey1(profile.parmTaxPeriod());

        //Construct ledgerVoucher
        ledgerVoucher = ledgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                SysModule::Tax,
                                                numberSeq.parmVoucherSequenceCode());
        ledgerVoucher.addVoucher(
        LedgerVoucherObject::newVoucher(voucher,
                                    profile.parmTransactionDate(),
                                    SysModule::Tax,
                                    LedgerTransType::Tax));
        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt());

        taxPaymentDoc.parmLedgerVoucher(ledgerVoucher);
        taxPaymentDoc.parmTaxSalesTaxPaymentHistory(history);
        taxPaymentDoc.parmTaxSalesTaxPaymentProfile(profile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c> TaxSalesTaxPaymentPosting_IN </c>.
    /// </summary>
    /// <param name="_history">
    /// An instance of <c> TaxSalesTaxPaymentHistory_IN </c>.
    /// </param>
    /// <param name="_profile">
    /// An instance of <c> TaxSalesTaxPaymentProfile_IN </c>.
    /// </param>
    protected void new(TaxSalesTaxPaymentHistory_IN _history,
                       TaxSalesTaxPaymentProfile_IN _profile)
    {
        history = _history;
        profile = _profile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasLedgerVoucherTrans</Name>
				<Source><![CDATA[
    public boolean parmHasLedgerVoucherTrans(boolean _hasLedgerVoucherTrans = hasLedgerVoucherTrans)
    {
        if (hasLedgerVoucherTrans == false && _hasLedgerVoucherTrans == true)
        {
            hasLedgerVoucherTrans = _hasLedgerVoucherTrans;
        }
        return hasLedgerVoucherTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSalesTaxPaymentDoc</Name>
				<Source><![CDATA[
    public TaxSalesTaxPaymentDoc_IN parmTaxSalesTaxPaymentDoc()
    {
        return taxPaymentDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExcessRecAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use handler to process the scenario of Excess recoverable amount
    /// </summary>
    /// <param name="_historyDetails">
    /// The TaxSalesTaxPaymentHistoryDetails_IN record that needs to be processed
    /// </param>
    protected void processExcessRecAmount(TaxSalesTaxPaymentHistoryDetails_IN _historyDetails)
    {
        this.processTaxAmount(_historyDetails);

        //Positive balance should be posted to the Tax Recoverable account
        postingHandler = new TaxReportPostingAmtRecExceedHandler_IN();
        postingHandler.parmBalance(_historyDetails.Balance);
        postingHandler.process(taxPaymentDoc, _historyDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the ledger voucher of the sales tax payment
    /// </summary>
    protected void processLedgerVoucher()
    {
        TaxSalesTaxPaymentHistoryDetails_IN     canPostHistoryDetail, historyDetail;
        TaxReportHierarchyNode_IN               canPostTableNode, tableNode;
        TaxAmount                               totalTaxAmount;

        //Post the total tax amount to Vendor/PLA based on the CanPost field
        while select TaxReportHierarchyNode_IN from canPostHistoryDetail
            order by canPostTableNode.Level asc
                where canPostHistoryDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                   && canPostHistoryDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
            join  canPostTableNode
                where canPostHistoryDetail.TaxReportHierarchyNode_IN == canPostTableNode.RecId
                &&    canPostTableNode.CanPost == NoYes::Yes
        {
             totalTaxAmount = 0;

            //Post each node for this settlement process that has balance
            while select historyDetail
                order by tableNode.Level desc
                    where historyDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                    &&    historyDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
                    &&    (historyDetail.RecoverableAmountToSettle != 0 ||
                           historyDetail.PayableAmountToSettle != 0 ||
                           historyDetail.PreSettledRecAmountMST != 0 ||
                           historyDetail.PreSettledPayAmountMST != 0)
                join  tableNode
                    where historyDetail.TaxReportHierarchyNode_IN == tableNode.RecId
                    &&    tableNode.LeftId >= canPostTableNode.LeftId
                    &&    tableNode.RightId <= canPostTableNode.RightId
                    &&    tableNode.TaxReportHierarchyVersion_IN == canPostTableNode.TaxReportHierarchyVersion_IN
            {
                this.parmHasLedgerVoucherTrans(true);

                if (tableNode.RecId == canPostTableNode.RecId || tableNode.CanPost == NoYes::No)
                {
                    //Post balance
                    if (historyDetail.Balance <= 0)
                    {
                        this.processTaxAmount(historyDetail);
                        totalTaxAmount += historyDetail.Balance;
                    }
                    else
                    {
                        this.processExcessRecAmount(historyDetail);
                    }
                }
            }

            //generate vendTrans
            paymentPostingHandler = new TaxReportPostingVendPaymentHandler_IN();
            paymentPostingHandler.parmBalance(totalTaxAmount);
            if (canPostTableNode.RefClassId == classNum(TaxReportHrchyTaxComponentNode_IN))
            {
                paymentPostingHandler.parmTaxComponentRecId(canPostTableNode.RefTableRecId);
            }
            paymentPostingHandler.process(taxPaymentDoc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSetOffTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// User the handler to process the set off rule result
    /// </summary>
    private void processSetOffTransactions()
    {
        TaxSalesTaxPaymentHistoryDetails_IN     historyDetail, canPostHistoryDetail;
        TaxReportHierarchyNode_IN               tableNode, canPostTableNode;
        TaxAmount                               totalTaxAmount;

        //Post the total settled amount based on the CanPost field
        while select canPostHistoryDetail
            order by canPostTableNode.Level asc
                where canPostHistoryDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                   && canPostHistoryDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
            join  canPostTableNode
                where canPostHistoryDetail.TaxReportHierarchyNode_IN == canPostTableNode.RecId
                &&    canPostTableNode.CanPost == NoYes::Yes
        {
            select sum(SettledPayableAmountMST), sum(SettledRecoverableAmountMST), sum(PreSettledPayAmountMST), sum(PreSettledRecAmountMST)
                from historyDetail
                where historyDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                  &&  historyDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
                  && (historyDetail.SettledPayableAmountMST != 0 || historyDetail.SettledRecoverableAmountMST != 0
                  ||  historyDetail.PreSettledPayAmountMST != 0 || historyDetail.PreSettledRecAmountMST != 0)
                join  tableNode
                where historyDetail.TaxReportHierarchyNode_IN == tableNode.RecId
                &&    tableNode.LeftId >= canPostTableNode.LeftId
                &&    tableNode.RightId <= canPostTableNode.RightId
                &&    tableNode.TaxReportHierarchyVersion_IN == canPostTableNode.TaxReportHierarchyVersion_IN;

            totalTaxAmount = historyDetail.SettledPayableAmountMST + historyDetail.SettledRecoverableAmountMST
                            + historyDetail.PreSettledPayAmountMST + historyDetail.PreSettledRecAmountMST;

            if (totalTaxAmount != 0)
            {
                //Process Utilized amount
                postingHandler = new TaxReportPostingTaxAdjHandler_IN();
                postingHandler.parmBalance(totalTaxAmount);
                postingHandler.process(taxPaymentDoc, canPostHistoryDetail);
            }
        }

        this.generateTaxAdjustmentTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use handler to process tax payable and tax recoverable amount
    /// </summary>
    /// <param name="_historyDetails">
    /// The TaxSalesTaxPaymentHistoryDetails_IN record that needs to be processed
    /// </param>
    protected void processTaxAmount(TaxSalesTaxPaymentHistoryDetails_IN _historyDetails)
    {
        if (_historyDetails.RecoverableAmountToSettle != 0 || _historyDetails.PreSettledRecAmountMST != 0)
        {
            postingHandler = new TaxReportPostingTaxTransHandler_IN();
            if (_historyDetails.RecoverableAmountToSettle + _historyDetails.PreSettledRecAmountMST < 0)
            {
                postingHandler.parmReverseBalance(true);
                postingHandler.parmBalance((_historyDetails.RecoverableAmountToSettle + _historyDetails.PreSettledRecAmountMST) * -1);
            }
            else
            {
                postingHandler.parmBalance(_historyDetails.RecoverableAmountToSettle + _historyDetails.PreSettledRecAmountMST);
            }
            postingHandler.process(taxPaymentDoc, _historyDetails);
        }

        if (_historyDetails.PayableAmountToSettle != 0 || _historyDetails.PreSettledPayAmountMST != 0)
        {
            postingHandler = new TaxReportPostingTaxTransHandler_IN();
            if (_historyDetails.PayableAmountToSettle + _historyDetails.PreSettledPayAmountMST > 0)
            {
                postingHandler.parmReverseBalance(true);
                postingHandler.parmBalance((_historyDetails.PayableAmountToSettle + _historyDetails.PreSettledPayAmountMST) * -1);
            }
            else
            {
                postingHandler.parmBalance(_historyDetails.PayableAmountToSettle + _historyDetails.PreSettledPayAmountMST);
            }
            postingHandler.process(taxPaymentDoc, _historyDetails);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxReportVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the data object for TaxReportVoucher and set the object in the sales tax payment document object
    /// </summary>
    private void processTaxReportVoucher()
    {
        TaxReportVoucher    taxReportVoucher;

        taxReportVoucher.initValue();
        taxReportVoucher.Voucher        = taxPaymentDoc.parmLedgerVoucher().lastVoucher();
        taxReportVoucher.TransDate      = profile.parmTransactionDate();
        taxReportVoucher.TaxPeriod      = profile.parmTaxPeriod();
        taxReportVoucher.FromDate       = profile.taxPeriodFromDate();
        taxReportVoucher.ToDate         = profile.taxPeriodToDate();
        taxReportVoucher.TaxRepVersion  = profile.parmTaxRepVersion();
        taxReportVoucher.TaxRepCounter  = TaxReportPeriod_IN::version(profile.parmTaxPeriod(), profile.parmTaxRegistrationNumber().RecId, profile.taxPeriodFromDate());
        taxReportVoucher.TaxRegistrationNumberTable_IN = profile.parmTaxRegistrationNumber().RecId;
        taxReportVoucher.TaxType_IN     = TaxRegistrationNumbers_IN::find(profile.parmTaxRegistrationNumber().RecId).TaxType;
        taxReportVoucher.Corrections    = profile.parmIsCorrections();

        taxPaymentDoc.parmTaxReportVoucher(taxReportVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct TaxSalesTaxPaymentPosting_IN object
    /// </summary>
    /// <param name="_history">
    /// The TaxSalesTaxPaymentHistory_IN that is used to process the sales tax payment
    /// </param>
    /// <param name="_profile">
    /// The TaxSalesTaxPaymentProfile_IN that contains the form setup
    /// </param>
    /// <returns>
    /// The TaxSalesTaxPaymentPosting_IN
    /// </returns>
    public static TaxSalesTaxPaymentPosting_IN construct(TaxSalesTaxPaymentHistory_IN _history,
                                                         TaxSalesTaxPaymentProfile_IN _profile)
    {
        TaxSalesTaxPaymentPosting_IN paymentPosting = new TaxSalesTaxPaymentPosting_IN(_history, _profile);

        return paymentPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>