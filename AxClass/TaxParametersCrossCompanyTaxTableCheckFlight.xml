<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxParametersCrossCompanyTaxTableCheckFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// When <c>TaxParametersCrossCompanyTaxTableCheckFlight</c> is enabled,
/// cross company data sharing is executed for validate methods, if data sharing policy is enabled for <c>TaxParameters</c>.
/// </summary>
/// <remarks>
/// Available from 10.0.24.
///
/// ***********************************************************************************************
/// * The lifecycle of this flight must be aligned with feature Master company data sharing which *
/// * class is <c>EnableSysSharing</c>, check the feature's stage before remove this flight.      *
/// ***********************************************************************************************
///
/// The flight is controlled by entering the following in the flighting service (Carbon or similar):
/// "TaxParametersCrossCompanyTaxTableCheckFlight" to enable. This is only necessary when isEnabledByDefault() returns false.
/// "TaxParametersCrossCompanyTaxTableCheckFlight_KillSwitch" to disable. This overrules any enablement.
/// </remarks>
[TaxFlighting(TaxFlightingGroup::DataSharing)]
internal final class TaxParametersCrossCompanyTaxTableCheckFlight extends Flight
{
    static private TaxParametersCrossCompanyTaxTableCheckFlight singleton = new TaxParametersCrossCompanyTaxTableCheckFlight();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static TaxParametersCrossCompanyTaxTableCheckFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>