<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaAccrueGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaAccrueGenerator extends SMAGenerator
{
    ProjInvoiceId           projInvoiceId;
    ProjInvoiceRevenue      projInvoiceRevenue;
    ProjTransPosting        projTransPosting;
    ProjRevenueTrans        projRevenueTrans;
    SMAAccruePeriodLine     smaAccruePeriodLine;
    SMASubscriptionTable    smaSubscriptionTable;
    recId                   firstRecid;
    recId                   lastRecid;
    AmountMST               accruedSum;
    TransDate               fromdate;
    TransDate               toDate;
    Integer                 regularInvoicePeriodfactor;
    Integer                 regularAccruePeriodfactor;
    Days                    invoiceDaysRegular;
    Days                    invoiceDays;
    AmountMST               regularAmount;
    AmountMST               regularAmountPrDay;
    private InvoiceDate     projInvoiceDate;
    private Integer         nonRegularAccruePeriodfactor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    public void action()
    {
        this.doRevenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAmountMST</Name>
				<Source><![CDATA[
    private AmountMST calcAmountMST(TransDate _dateFrom, TransDate _dateTo)
    {
        AmountMST               amount;
        Days                    accrueDays  = _dateTo - _dateFrom + 1;
        boolean                 isRegular, isRegularAccrue;

        isRegular = SMASubscriptionTable::getPeriodType(projRevenueTrans.smaStartDate,
                                                        projRevenueTrans.smaEnddate,
                                                        smaSubscriptionTable.invoicePeriodCode())== SMASubscriptionPeriodType::Regular;

        isRegularAccrue = SMASubscriptionTable::getPeriodType(
                                                        _dateFrom,
                                                        _dateTo,
                                                        smaSubscriptionTable.accruedPeriodCode())== SMASubscriptionPeriodType::Regular;

        if (SMAParametersSubscription::find().SubCalcPerDayAccrued == NoYes::No)
        {
            amount = isRegular && isRegularAccrue ? regularAmount : accrueDays * regularAmountPrDay;
        }
        else
        {
            amount = invoiceDays ? accrueDays * projInvoiceRevenue.amountMST() / invoiceDays : 0;
        }

        return CurrencyExchangeHelper::amount(amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceDays</Name>
				<Source><![CDATA[
    private Days calcInvoiceDays()
    {
        return  (this.toDate() - this.fromDate()) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInvoiceDaysRegular</Name>
				<Source><![CDATA[
    private Days calcInvoiceDaysRegular()
    {
        return  (smaSubscriptionTable.invoiceperiodEnd(this.toDate()) - smaSubscriptionTable.invoiceperiodStart(this.fromDate())) + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcPreReq</Name>
				<Source><![CDATA[
    private void calcPreReq()
    {
        accruedSum                  = 0;
        firstRecid                  = 0;
        lastRecid                   = 0;
        regularAccruePeriodfactor   = this.calcRegularAccruePeriodFactor();
        invoiceDaysRegular          = this.calcInvoiceDaysRegular();
        invoiceDays                 = this.calcInvoiceDays();
        regularAmountPrDay          = invoiceDays ? projInvoiceRevenue.amountMST() / invoiceDays : 0;

        if (this.checkIfNonRegularSmaStartEndDate())
        {
            nonRegularAccruePeriodfactor = this.calcNonRegularAccruePeriodFactor();
            regularAmount = nonRegularAccruePeriodfactor ? regularAmountPrDay * invoiceDaysRegular / nonRegularAccruePeriodfactor : 0;
        }
        else
        {        
            regularInvoicePeriodfactor  = this.calcRegularInvoicePeriodFactor();
            regularAmount = regularInvoicePeriodfactor ? regularAmountPrDay * invoiceDaysRegular / regularInvoicePeriodfactor : 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNonRegularAccruePeriodFactor</Name>
				<Source><![CDATA[
    private Integer calcNonRegularAccruePeriodFactor()
    {
        date startDate = dateStartMth(this.fromDate());
        date endDate   = dateEndMth(this.toDate());

        return any2Int((select count(RecId) from projPeriodLine
            where projPeriodLine.PeriodId   == smaSubscriptionTable.accruedPeriodCode()
            &&    projPeriodLine.PeriodFrom >= startDate
            &&    ProjPeriodLine.PeriodTo   <= endDate).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRegularAccruePeriodFactor</Name>
				<Source><![CDATA[
    private Integer calcRegularAccruePeriodFactor()
    {
        return any2int((select count(RecId) from projPeriodLine
            where   projPeriodLine.PeriodId   == smaSubscriptionTable.accruedPeriodCode()
            &&      projPeriodLine.PeriodFrom >= this.fromDate()
            &&      projPeriodLine.PeriodTo   <= this.toDate()).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRegularInvoicePeriodFactor</Name>
				<Source><![CDATA[
    private Integer calcRegularInvoicePeriodFactor()
    {
        return any2int((select count(RecId) from projPeriodLine
            where   projPeriodLine.PeriodId   == smaSubscriptionTable.accruedPeriodCode()
            &&      projPeriodLine.PeriodFrom >= smaSubscriptionTable.invoiceperiodStart(this.fromDate())
            &&      projPeriodLine.PeriodTo   <= smaSubscriptionTable.invoiceperiodEnd(this.toDate())).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfNonRegularSmaStartEndDate</Name>
				<Source><![CDATA[
    private boolean checkIfNonRegularSmaStartEndDate()
    {
        boolean nonRegSmaStartDate, nonRegSmaEndDate = false;
        
        ProjPeriodLine projPeriodLine;
       
        select PeriodTo, PeriodFrom from projPeriodLine 
            where projPeriodLine.PeriodId   == smaSubscriptionTable.accruedPeriodCode() &&      
                  projPeriodLine.PeriodFrom >= smaSubscriptionTable.accrueperiodStart(this.fromDate()) &&
                  projPeriodLine.PeriodTo   <= smaSubscriptionTable.accruePeriodEnd(this.toDate());
        
        if (this.fromDate() > projPeriodLine.PeriodFrom)
        {
            nonRegSmaStartDate = true;
        }

        if (this.toDate() < projPeriodLine.PeriodTo)
        {
            nonRegSmaEndDate = true;
        }

        return nonRegSmaStartDate || nonRegSmaEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistPeriod</Name>
				<Source><![CDATA[
    private boolean checkExistPeriod()
    {
        ProjPeriodLine  projPeriodLine;
        boolean         hasFromDate;
        boolean         hasToDate;

        hasFromDate = (select RecId from projPeriodLine
                           where   projPeriodLine.PeriodId      == smaSubscriptionTable.accruedPeriodCode() &&
                                   projPeriodLine.PeriodFrom    >= this.fromDate()).RecId != 0;

        hasToDate   = (select RecId from projPeriodLine
                           where   projPeriodLine.PeriodId     == smaSubscriptionTable.accruedPeriodCode()  &&
                                   projPeriodLine.PeriodTo     <= this.toDate()).RecId != 0;

        if (hasFromDate && hasToDate)
        {
            return true;
        }
        else
        {
            // No accrue periods exist for the period %1 from %2 to %3
            throw error(strfmt("@SYS84316", smaSubscriptionTable.accruedPeriodCode(), date2StrUsr(this.fromDate(), DateFlags::FormatAll), date2StrUsr(this.toDate(), DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjInvoiceId</Name>
				<Source><![CDATA[
    private boolean checkProjInvoiceId()
    {               
        if (!projInvoiceId || ! ProjInvoiceJour::revenueExists(projInvoiceId))
        {
            return false;
        }
        else if (projInvoiceId)
        {
            ProjInvoiceJour projInvoiceJour = ProjInvoiceJour::find(projInvoiceId, this.parmInvoiceDate());            

            if (projInvoiceJour.IsProforma)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans()
    {
        ProjPeriodLine  projPeriodLine;
        TransDate       tmpFromDate;
        TransDate       tmpToDate;

        this.calcPreReq();

        while select PeriodFrom, PeriodTo from projPeriodLine
            where   projPeriodLine.PeriodId   == smaSubscriptionTable.accruedPeriodCode()                   &&
                    projPeriodLine.PeriodFrom >= smaSubscriptionTable.accrueperiodStart(this.fromDate())    &&
                    projPeriodLine.PeriodTo   <= smaSubscriptionTable.accruePeriodEnd(this.toDate())
            {
                [tmpFromDate, tmpToDate] = this.getActualDates(projPeriodLine.PeriodFrom,  projPeriodLine.PeriodTo);

                smaAccruePeriodLine.clear();

                smaAccruePeriodLine.FromDate            = tmpFromDate;
                smaAccruePeriodLine.Todate              = tmpToDate;
                smaAccruePeriodLine.ProjRevenueTransId  = projRevenueTrans.TransId;
                smaAccruePeriodLine.AmountMST           = this.calcAmountMST(tmpFromDate, tmpToDate);

                smaAccruePeriodLine.insert();

                accruedSum += smaAccruePeriodLine.AmountMST;

                if (!firstRecid)
                {
                    firstRecid = smaAccruePeriodLine.RecId;
                }

                lastRecid   = smaAccruePeriodLine.RecId;
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private Name description()
    {
        // Accrue revenue
        return "@SYS74629";
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    private void doRevenue()
    {
        ProjRevenueTransSale        projRevenueTransSale;
        ProjInvoiceRevenueDetail    projInvoiceRevenueDetail;

        ttsbegin;

        while select projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId == this.projInvoiceId()
                join projRevenueTrans
                    order by smaStartDate
                    where   projRevenueTrans.TransId == projInvoiceRevenue.TransId &&
                            projRevenueTrans.TransactionOrigin  == ProjOrigin::Subscription
                join projInvoiceRevenueDetail
                    where   projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                join forupdate projRevenueTransSale
                    where   projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
        {
            smaSubscriptionTable = SMASubscriptionTable::find(projRevenueTrans.smaSubscriptionId);

            // if line amount <= 0 stop creating accrue transactions except for Reduction Days or negative price changes.
            if (smaSubscriptionTable.canBeAccrued() &&
                   (projInvoiceRevenue.LineAmount > 0 ||
                    projRevenueTrans.smaSubscriptionPeriodType == SMASubscriptionPeriodType::PriceChange ||
                    projRevenueTrans.smaSubscriptionPeriodType == SMASubscriptionPeriodType::ReductionDays))

            {
                this.checkExistPeriod();
                this.createTrans();
                this.setResidual();

                projRevenueTransSale.LedgerSalesPosted = projRevenueTransSale.TransStatus == ProjTransStatus::Posted ? false : true;
                projRevenueTransSale.LedgerSalesAmount = projRevenueTransSale.LedgerSalesPosted ? -projInvoiceRevenueDetail.amountMST() : 0;
                projRevenueTransSale.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    public TransDate fromDate()
    {
        return projRevenueTrans.smaStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjInvoiceId _projInvoiceId = projInvoiceId)
    {
        projInvoiceId = _projInvoiceId;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceId</Name>
				<Source><![CDATA[
    public ProjInvoiceId projInvoiceId(ProjInvoiceId _projInvoiceId = projInvoiceId)
    { 
        projInvoiceId = _projInvoiceId;
        return projInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Get the invoice date from <c>ProjInvoiceJour</c>.
    /// </summary>
    /// <param name = "_projInvoiceDate">The invoice date.</param>
    /// <returns>The invoice date.</returns>
	public InvoiceDate parmInvoiceDate(InvoiceDate _projInvoiceDate = projInvoiceDate)
    {
        projInvoiceDate = _projInvoiceDate;
        return projInvoiceDate;
	}

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.checkProjInvoiceId())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setResidual</Name>
				<Source><![CDATA[
    private void setResidual()
    {
        AmountMST residual = projInvoiceRevenue.amountMST() - accruedSum;
        switch (SMAParametersSubscription::find().SubRoundOffAccrued)
        {
            case SMAAccrueRoundOff::First:
                smaAccruePeriodLine = SMAAccruePeriodLine::findRecid(firstRecid, true);
                break;

            case SMAAccrueRoundOff::Last:
                smaAccruePeriodLine = SMAAccruePeriodLine::findRecid(lastRecid, true);
                break;
        }
        smaAccruePeriodLine.AmountMST += residual;

        smaAccruePeriodLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    public TransDate toDate()
    {
        return projRevenueTrans.smaEnddate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>