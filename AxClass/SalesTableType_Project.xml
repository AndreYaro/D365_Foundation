<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableType_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTableType_Project extends SalesTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountCustLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount accountCustLedgerDimension(CustPostingProfile _postingProfile_RU = '')
    {
        ProjInvoiceTable projInvoiceTable = this.projInvoiceTable(false);

        return CustLedgerAccounts::summaryLedgerDimension(ProjFundingSource::findCustAccount(projInvoiceTable.ProjInvoiceProjId).CustAccount,
                                                          projInvoiceTable.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean  canInvoiceBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the corresponding <c>PurchaseType</c> value.
    /// </summary>
    /// <returns>Purchase order type value 'Purchase'.</returns>
    public PurchaseType purchaseType()
    {
        return PurchaseType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearingLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount clearingLedgerDimension(CustPostingProfile _postingProfile_RU = '')
    {
        ProjInvoiceTable projInvoiceTable = this.projInvoiceTable(false);

        return CustLedgerAccounts::clearingLedgerDimension(ProjFundingSource::findCustAccount(projInvoiceTable.ProjInvoiceProjId).CustAccount, projInvoiceTable.PostingProfile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the currency code for the project contract can be edited.
    /// </summary>
    /// <returns>
    ///    false if currency code cannot be edited; otherwise, true.
    /// </returns>
    public boolean editCurrencyCode()
    {
        if (this.projInvoiceTable().ProjLockSalesCurrency)
        {
            return false;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCustAccount</Name>
				<Source><![CDATA[
    boolean  editCustAccount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editInvoiceAccount</Name>
				<Source><![CDATA[
    boolean  editInvoiceAccount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void  initValue()
    {
        super();

        salesTable.initFromProjTable(ProjTable::find(salesTable.ProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayInvoiceBeUpdated</Name>
				<Source><![CDATA[
    boolean mayInvoiceBeUpdated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAllowPaymentAccess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the sales order user is allowed to access payments.
    /// </summary>
    /// <returns>
    ///     false.
    /// </returns>
    /// <remarks>
    ///     Do not allow access to payment buttons when the sales order form is using projects.
    /// </remarks>

    public boolean mcrAllowPaymentAccess()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    ProjInvoiceTable projInvoiceTable(boolean  _forUpdate = false)
    {
        ProjInvoiceTable projInvoiceTable = ProjInvoiceTable::find(ProjTable::find(salesTable.ProjId).ProjInvoiceProjId, _forUpdate);

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxGroup</Name>
				<Source><![CDATA[
    void setTaxGroup(TaxGroup _taxGroup)
    {
        TaxGroup taxGroupLoc;
        ProjParameters projParamaters = ProjParameters::find();
        
        if (projParamaters.AllowSalesOrdersForMultipleFundingSources == NoYes::Yes
            && projParamaters.DefaultSalesOrderCustomerAccount == ProjDefaultSalesOrderCustomerAccount::FundingSource
            && projParamaters.TaxGroupMethod == ProjTaxGroupMethod::AccountReceivable)
        {
            taxGroupLoc = _taxGroup;
        }
        else
        {
            taxGroupLoc = ProjParameters::taxGroupInvoice(salesTable.ProjId);
        }

        super(taxGroupLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean  validateField(FieldId  fieldId
        , TableId _tableId = tableNum(salesTable)
        )
    {
        boolean  ok = super(fieldId
            // <GEERU>
            , _tableId
            // </GEERU>
            );

        if (ok)
        {
            // <GEERU>
            if (_tableId == tableNum(salesTable))
            {
            // </GEERU>
                switch (fieldId)
                {
                    case(fieldNum(SalesTable, ProjId)):
                        if (salesTable.ProjId)
                        {
                            ok = ProjTable::find(salesTable.ProjId).status().validateWriteSalesTable();
                        }
                        break;
                    case(fieldNum(SalesTable, SalesType)):
                        if (salesTable.SalesType == SalesType::ReturnItem || salesTable.SalesType == SalesType::ItemReq)
                        {
                            ok = this.blockManualTypeChange();
                        }
                        break;
                }
            // <GEERU>
            }
            // </GEERU>
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite()
    {
        boolean  ok = true;

        ok = super();

        if (!salesTable.ProjId)
        {
            ok = checkFailed("@SYS50091");
        }

        if (salesTable.InclTax)
        {
            ok = checkFailed(strFmt("@SYS15286",
                            new DictField(tableNum(SalesTable), fieldNum(SalesTable, InclTax)).label(),
                            salesTable.InclTax,
                            salesTable.ProjId));
        }

        if (salesTable.SalesType != SalesType::ItemReq)
        {
            ok  = (ok && ProjTable::find(salesTable.ProjId).status().validateWriteSalesTable());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        super();

        RetailSalesAffiliation retailSalesAffiliation;
        RetailCustAffiliation retailCustAffiliation;
        SalesIdBase salesId = salesTable.SalesId;

        if (RetailParameters::isRetailEnabledAndInUse() && salesId && salesTable.ProjId)
        {
            insert_recordset retailSalesAffiliation (SalesId, Affiliation)
                select salesId, RetailAffiliationId from retailCustAffiliation
                where retailCustAffiliation.CustAccountNum == salesTable.CustAccount
                notExists join retailSalesAffiliation
                    where retailSalesAffiliation.SalesId == salesId
                    && retailSalesAffiliation.Affiliation == retailCustAffiliation.RetailAffiliationId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>