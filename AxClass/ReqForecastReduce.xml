<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqForecastReduce</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqForecastReduce</c> class handles reduction of demand or supply forecast.
/// </summary>
/// <remarks>
/// The class is abstract and contains common logic for the different reduction principles.
/// </remarks>
abstract class ReqForecastReduce
{
    Map         mapPeriod;              //  (fromDate;CustGroupId;CustAccount, reduceValue)
    Map         mapPeriodEnd;           //  (fromDate, toDate)
    Map         mapReduceKeyId;         //  (ReduceKeyId, mapPeriod)

    Set         setReqTransTransfer;    // set of reqTrans.recId (internal transfers both issues and receipts)

    TransDate   dateToday;

    TransDate   reducePeriodStart;
    TransDate   reducePeriodEnd;

    ReqReduceType   reductionType;

    public const int mapPeriodKeyDateSequence = 321;
    public const int mapPeriodKeySeparatorAsciiCode = 31;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcForecastQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a new forecast quantity for a requirement forecast line.
    /// </summary>
    /// <param name="_forecastType">
    ///    An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is
    ///    regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    ///    An object of type <c>ReqTransCache</c> that contains cached master planning transactions.
    /// </param>
    /// <param name="_reqTransForecast">
    ///    A <c>ReqTrans</c> record of type forecast.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    /// <returns>
    ///    A new eventual reduced forecast quantity which should be applied for the specified forecast line.
    /// </returns>
    /// <remarks>
    ///    This method must be called for each forecast line in a descending date order for a specific item
    ///    and coverage dimensions. First time the method is called the reduction values are calculated and a
    ///    balance might be stored.The balance will eventual be reduced each time a forecast line is reduced.
    ///    The balance is cleared when the Reset method is called.
    /// </remarks>
    public ReqQty calcForecastQty(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqTrans            _reqTransForecast,
        ReqSetupDim         _setupDim)
    {
        real    reduceValue;
        ReqQty  newReqQty;
        str         mapKey;
        CustGroupId mapKeyCustGrpId;
        CustAccount mapKeyCustId;

        if (!_reqTransCache || !_setupDim || !_reqTransForecast)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // if forecast is before today then the forecast must be reduced completely
        if (_reqTransForecast.ReqDate < dateToday)
        {
            return 0;
        }

        // create the mapPeriod only first time
        if (! mapPeriod)
        {
            this.mapPeriodCreate(_forecastType,_reqTransCache,_setupDim);
        }

        if ( ! mapPeriod.elements()
            || _reqTransForecast.ReqDate > reducePeriodEnd)
        {
            return _reqTransForecast.Qty;
        }

        // find reduce value and period date
        if (_forecastType == ForecastTableType::Demand && (reductionType == ReqReduceType::OpenOrdersPeriod || reductionType == ReqReduceType::OpenOrdersReductionKey))
        {
            mapKeyCustGrpId = _reqTransForecast.CustGroupId;
            mapKeyCustId    = _reqTransForecast.CustAccountId;

            [mapKey,reduceValue]   = this.mapPeriodLookup(_reqTransForecast.ReqDate, mapKeyCustGrpId, mapKeyCustId);
        }
        else
        {
            [mapKey,reduceValue]    = this.mapPeriodLookup(_reqTransForecast.ReqDate);
        }

        newReqQty               = this.calcNewReqQty(_reqTransForecast,_setupDim,reduceValue);

        // deduct the mapPeriod with the difference
        this.mapPeriodUpdateBalance(this.getReqDateFromMapPeriodKey(mapKey), newReqQty - _reqTransForecast.OriginalQuantity, mapKeyCustGrpId, mapKeyCustId);

        return newReqQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNewReqQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a new forecast quantity.
    /// </summary>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> record of type forecast.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    /// <param name="_reduceValue">
    /// A real value that contains a reduce value.
    /// </param>
    /// <returns>
    /// A real value that contains the reduced forecast quantity.
    /// </returns>
    protected abstract ReqQty calcNewReqQty(
        ReqTrans    _reqTrans,
        ReqSetupDim _setupDim,
        real        _reduceValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNewReqQtyFromQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a new forecast quantity by deduct the original forecast quantity with the specified quantity.
    /// </summary>
    /// <param name="_reqTrans">
    /// A <c>ReqTrans</c> record of type forecast.
    /// </param>
    /// <param name="_reduceQty">
    /// A real value that contains the quantity the forecast should be deducted.
    /// </param>
    /// <returns>
    /// A real value that contains the new reduced forecast quantity.
    /// </returns>
    protected ReqQty calcNewReqQtyFromQty(
        ReqTrans    _reqTrans,
        real        _reduceQty)
    {
        ReqQty      reqQtyNew;

        if (sign(_reduceQty) == sign(_reqTrans.OriginalQuantity))
        {
            if (abs(_reqTrans.OriginalQuantity) >= abs(_reduceQty))
            {
                reqQtyNew = _reqTrans.OriginalQuantity - _reduceQty;
            }
            else
            {
                reqQtyNew = 0;
            }
        }
        else
        {
            reqQtyNew = _reqTrans.OriginalQuantity;
        }

        return reqQtyNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReducePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total time period in which forecast should be reduced.
    /// </summary>
    protected void findReducePeriod()
    {
        MapEnumerator       me;
        ReqDate             mapKeyDate;

        if (mapPeriod)
        {
            me = mapPeriod.getEnumerator();

            while (me.moveNext())
            {
                mapKeyDate = this.getReqDateFromMapPeriodKey(me.currentKey());
                if (reducePeriodStart)
                {
                    reducePeriodStart = min(reducePeriodStart, mapKeyDate);
                }
                else
                {
                    reducePeriodStart = mapKeyDate;
                }
                reducePeriodEnd   = max(reducePeriodEnd, mapKeyDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapPeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns mapPeriod key.
    /// </summary>
    /// <param name="_keyDate">
    /// A date that contains the start date of the reduction period.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification.
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification.
    /// </param>
    /// <returns>
    /// A string key used for mapPeriod that contains the reduction period start date and the customer group id and customer account id.
    /// </returns>
    protected str getMapPeriodKey(date _keyDate, CustGroupId _customerGroupId, CustAccount _customerAccountId)
    {
        str dateStr;

        dateStr = date2Str(
            _keyDate,
            mapPeriodKeyDateSequence,
            DateDay::Digits2,

            DateSeparator::Hyphen,
            DateMonth::Digits2,
            DateSeparator::Hyphen,

            DateYear::Digits4,

            DateFlags::None);

        return strFmt('%1%4%2%4%3', dateStr, _customerGroupId, _customerAccountId, num2char(mapPeriodKeySeparatorAsciiCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqDateFromMapPeriodKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>ReqDate</c> extracted from map key.
    /// </summary>
    /// <param name="_mapPeriodKey">
    /// A string that contains map key.
    /// </param>
    /// <returns>
    /// A <c>ReqDate</c> extracted from map key.
    /// </returns>
    protected ReqDate getReqDateFromMapPeriodKey(str _mapPeriodKey)
    {
        ReqDate result;
        int firstDelimiterPos;
        str dateStr;

        firstDelimiterPos = strFind(_mapPeriodKey, num2char(mapPeriodKeySeparatorAsciiCode), 1, strLen(_mapPeriodKey));
        dateStr = subStr(_mapPeriodKey, 1, firstDelimiterPos - 1);

        result = str2Date(dateStr, mapPeriodKeyDateSequence);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object.
    /// </summary>
    protected void init()
    {
        mapReduceKeyId = new Map(Types::String,Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a map that contains the reduction periods and reduction values.
    /// </summary>
    /// <param name="_forecastType">
    ///    An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is
    ///    regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    ///    A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    ///    A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory
    ///    dimensions.
    /// </param>
    protected void mapPeriodCreate(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        mapPeriod   = new Map(Types::String,Types::Real);
        mapPeriodEnd = new Map(Types::Date, Types::Date);

        this.mapPeriodCreateSetKey(_forecastType,_reqTransCache,_setupDim);
        this.mapPeriodCreateSetValue(_forecastType,_reqTransCache,_setupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the key element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    /// An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    protected abstract void mapPeriodCreateSetKey(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetKeyFromReduceKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the key element in the map that contains the reduction periods from the reduction key.
    /// </summary>
    /// <param name="_reduceKeyId">
    /// A string that contains the reduction key ID.
    /// </param>
    /// <param name="_setValue">
    /// A Boolean that determines if the percentage values should be used as the value in the map.
    /// </param>
    /// <param name="_forecastType">
    /// An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    protected void mapPeriodCreateSetKeyFromReduceKey(
        ReqReduceKeyId      _reduceKeyId,
        boolean             _setValue = true,
        ForecastTableType   _forecastType = ForecastTableType::Demand,
        ReqTransCache       _reqTransCache = null,
        ReqSetupDim         _setupDim = null)
    {
        TransDate               fromDate;
        TransDate               toDate;
        TransDate               breakEvenDate;

        ReqReduceLine           reqReduceLine;
        ReqReduceLine           prvReduceLine;

        if (reductionType != ReqReduceType::OpenOrdersReductionKey && mapReduceKeyId && mapReduceKeyId.exists(_reduceKeyId))
        {
            mapPeriod = mapReduceKeyId.lookup(_reduceKeyId);
            this.findReducePeriod();
            return;
        }

        breakEvenDate = ReqReduceKey::find(_reduceKeyId).breakEvenDate(dateToday);

        while select reqReduceLine
            order by Sort1980
            where reqReduceLine.ReduceKeyId == _reduceKeyId
        {
            fromDate = reqReduceLine.fromDate(breakEvenDate,prvReduceLine);
            toDate   = reqReduceLine.toDate(breakEvenDate);

            prvReduceLine = reqReduceLine.data();

            if (toDate >= dateToday)
            {
                if (_forecastType == ForecastTableType::Demand && reductionType == ReqReduceType::OpenOrdersReductionKey)
                {
                    this.mapPeriodInsertPerCustomer(fromDate, toDate, _setValue ? reqReduceLine.ReducePct : 0, _forecastType, _reqTransCache, _setupDim);
                }
                this.mapPeriodInsert(fromDate,_setValue ? reqReduceLine.ReducePct : 0);
                mapPeriodEnd.insert(fromDate, toDate);
            }
        }

        // add period with no reduction
        fromDate = toDate+1;
        this.mapPeriodInsert(fromDate,0);

        if (reductionType != ReqReduceType::OpenOrdersReductionKey)
        {
            mapReduceKeyId.insert(_reduceKeyId,mapPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value element in the map that contains the reduction periods.
    /// </summary>
    /// <param name="_forecastType">
    /// An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    protected abstract void mapPeriodCreateSetValue(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodCreateSetValueExpectedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the key element in the map that contains the reduction periods with expected quantities.
    /// </summary>
    /// <param name="_forecastType">
    /// An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    protected void mapPeriodCreateSetValueExpectedQty(
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        ReqTrans            reqTrans;
        boolean             reduceForecast;
        InventTransOrigin   inventTransOrigin;
        Query               query = ReqForecastReduceQueryFactory::newStandard(_reqTransCache, _forecastType).getReduceTransactionsQuery(_setupDim);
        QueryRun            queryRun;
        boolean             reqTransPeriodUpdated;

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            reqTrans = queryRun.get(tableNum(ReqTrans));

            reduceForecast = true;
            reqTransPeriodUpdated = false;

            // Skip the reqTrans which has counter part transaction
            if (reqTrans.hasCounterPartForJournalTrans())
            {
                continue;
            }

            if (!_setupDim.reqReduceForecastWithIntercompanyOrders())
            {
                inventTransOrigin = reqTrans.InventTransOrigin();
                if (inventTransOrigin &&
                    inventTransOrigin.interCompanyOrder())
                {
                    reduceForecast = false;
                }
            }

            if (reduceForecast)
            {
                if (_forecastType == ForecastTableType::Demand && reqTrans.CustAccountId != '' && reqTrans.CustGroupId != '')
                {
                    //Look for forecast per customer
                    if (this.mapPeriodLookupAndUpdate(reqTrans.ReqDate, reqTrans.Qty, reqTrans.CustGroupId, reqTrans.CustAccountId))
                    {
                        reqTransPeriodUpdated = true;
                    }

                    //Look for forecast per customer group
                    if ((_setupDim.reqGroupCache().CustForecastIncludedInOverallForecast == true || reqTransPeriodUpdated == false)
                        &&  this.mapPeriodLookupAndUpdate(reqTrans.ReqDate, reqTrans.Qty, reqTrans.CustGroupId, ''))
                    {
                        reqTransPeriodUpdated = true;
                    }

                    //Update overall forecast
                    if (_setupDim.reqGroupCache().CustForecastIncludedInOverallForecast == true || reqTransPeriodUpdated == false)
                    {
                        this.mapPeriodLookupAndUpdate(reqTrans.ReqDate, reqTrans.Qty);
                    }
                }
                else
                {
                    this.mapPeriodLookupAndUpdate(reqTrans.ReqDate, reqTrans.Qty);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodUpdatePerCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates quantity of reduction key period per customer group and customer account.
    /// </summary>
    /// <param name = "_date">
    /// The date of the reduction period.
    /// </param>
    /// <param name = "_quantity">
    /// The quantity to be reduced.
    /// </param>
    /// <param name = "_customerGroupId">
    /// The Customer Group Identification
    /// </param>
    /// <param name = "_customerAccountId">
    ///  The Customer Account Identification
    /// </param>
    /// <param name = "_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    protected void mapPeriodUpdatePerCustomer(
        TransDate           _date,
        InventQty           _quantity,
        CustGroupId         _customerGroupId,
        CustAccount         _customerAccountId,
        ReqSetupDim         _setupDim)
    {
        boolean reqTransPeriodUpdated;

        if (_customerAccountId == '' || _customerGroupId == '')
        {
            return;
        }

        //Look for forecast per customer
        if (this.mapPeriodLookupAndUpdate(_date, _quantity, _customerGroupId, _customerAccountId))
        {
            reqTransPeriodUpdated = true;
        }

        //Look for forecast per customer group
        if ((_setupDim.reqGroupCache().CustForecastIncludedInOverallForecast == true || reqTransPeriodUpdated == false)
                    &&  this.mapPeriodLookupAndUpdate(_date, _quantity, _customerGroupId, ''))
        {
            reqTransPeriodUpdated = true;
        }

        //Update overall forecast
        if (_setupDim.reqGroupCache().CustForecastIncludedInOverallForecast == true || reqTransPeriodUpdated == false)
        {
            this.mapPeriodLookupAndUpdate(_date, _quantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts reduction periods in the map that contains reduction periods.
    /// </summary>
    /// <param name="_date">
    /// A date that contains the begining date of a reduction period.
    /// </param>
    /// <param name="_value">
    /// A real value that contains the reduction value (can be a quantity or percentage depending on the reductio principle).
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    protected void mapPeriodInsert(
        TransDate   _date,
        real        _value,
        CustGroupId _customerGroupId      = '',
        CustAccount _customerAccountId    = '')
    {
        if (mapPeriod)
        {
            mapPeriod.insert(this.getMapPeriodKey(_date,_customerGroupId, _customerAccountId),_value);
        }

        reducePeriodStart = min(reducePeriodStart ? reducePeriodStart : _date ,_date);
        reducePeriodEnd   = max(reducePeriodEnd,_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodInsertPerCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts reduction periods in the map that contains reduction periods for every customer and customer group based on the forecasts in the reduction period.
    /// </summary>
    /// <param name="_fromDate">
    /// Start date of the reduction perion
    /// </param>
    /// <param name="_toDate">
    /// End date of the reduction perion
    /// </param>
    /// <param name="_value">
    /// A real value that contains the reduction value (can be a quantity or percentage depending on the reductio principle).
    /// </param>
    /// <param name="_forecastType">
    /// An enumeration value of type <c>ForecastTableType</c> that determines if the forecast reduction is regarding a demand forecast or a supply forecast.
    /// </param>
    /// <param name="_reqTransCache">
    /// A <c>ReqTransCache</c> object that contains cached master planning transactions.
    /// </param>
    /// <param name="_setupDim">
    /// A <c>ReqSetupDim</c> object that contains coverage settings for a specific item ID and inventory dimensions.
    /// </param>
    protected void mapPeriodInsertPerCustomer(
        TransDate _fromDate,
        TransDate _toDate,
        real _value,
        ForecastTableType   _forecastType,
        ReqTransCache       _reqTransCache,
        ReqSetupDim         _setupDim)
    {
        ReqTrans                        reqTrans;
        ReqForecastReduceQueryFactory   forecastReduceQueryFactory = ReqForecastReduceQueryFactory::newStandard(_reqTransCache, _forecastType);
        Query                           query;
        QueryRun                        queryRun;

        query = forecastReduceQueryFactory.getForecastTransactionsQuery(_setupDim);
        query = forecastReduceQueryFactory.addTransDateRanges(query, _fromDate, _toDate);

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            reqTrans = queryRun.get(tableNum(ReqTrans));
            this.mapPeriodInsert(_fromDate, _value, reqTrans.CustGroupId, reqTrans.CustAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the reduction value for a specified date.
    /// </summary>
    /// <param name="_reqDate">
    /// A date in order to find a related reduction value.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    /// <returns>
    /// A container that contains the reduction period start date, customer group id and customer account id and the reduction value.
    /// </returns>
    protected container mapPeriodLookup(
        TransDate   _reqDate,
        CustGroupId _customerGroupId = '',
        CustAccount _customerAccountId = '')
    {
        TransDate       tmpDate;
        str             mapKey;

        if (   mapPeriod.elements()
            && reducePeriodStart)
        {
            for (tmpDate = _reqDate; tmpDate>=reducePeriodStart ; tmpDate--)
            {
                mapKey = this.getMapPeriodKey(tmpDate, _customerGroupId, _customerAccountId);
                if (mapPeriod.exists(mapKey))
                {
                    if (!mapPeriodEnd.exists(tmpDate) || _reqDate <= mapPeriodEnd.lookup(tmpDate))
                    {
                        return [mapKey,mapPeriod.lookup(mapKey)];
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }
        return ['',0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodLookupAndUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the reduction value for a specified date.
    /// </summary>
    /// <param name="_reqDate">
    /// A date in order to find a related reduction value.
    /// </param>
    /// <param name="_reqQty">
    /// A <c>ReqTrans</c> quantity
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    /// <returns>
    /// A boolean variable saying if mapPeriod was updated
    /// </returns>
    protected boolean mapPeriodLookupAndUpdate(
        TransDate   _reqDate,
        ReqQty      _reqQty,
        CustGroupId _customerGroupId = '',
        CustAccount _customerAccountId = ''
        )
    {
        str     mapKey;
        real    mapValue;

        [mapKey, mapValue] = this.mapPeriodLookup(_reqDate, _customerGroupId, _customerAccountId);

        if (mapKey)
        {
            this.mapPeriodUpdateValue(this.getReqDateFromMapPeriodKey(mapKey), _reqQty, _customerGroupId, _customerAccountId);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodUpdateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the map that contains the reduction periods.
    /// </summary>
    /// <param name="_reqDate">
    ///  A date that contains the start date of the reduction period.
    /// </param>
    /// <param name="_addValue">
    /// A real value that contains a value which is added to the reduction balance.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    protected abstract void mapPeriodUpdateBalance(
        TransDate   _reqDate,
        real        _addValue,
        CustGroupId _customerGroupId = '',
        CustAccount _customerAccountId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapPeriodUpdateValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the map that contains the reduction periods.
    /// </summary>
    /// <param name="_reqDate">
    ///  A date that contains the start date of the reduction period.
    /// </param>
    /// <param name="_addValue">
    /// A real value that contains a value which is added to the reduction value.
    /// </param>
    /// <param name="_customerGroupId">
    /// A Customer Group Identification
    /// </param>
    /// <param name="_customerAccountId">
    /// A Customer Account Identification
    /// </param>
    protected void mapPeriodUpdateValue(
        TransDate   _reqDate,
        real        _addValue,
        CustGroupId _customerGroupId = '',
        CustAccount _customerAccountId = '')
    {
        str mapKey;

        if (_addValue == 0)
        {
            return;
        }

        mapKey = this.getMapPeriodKey(_reqDate, _customerGroupId, _customerAccountId);

        if (mapPeriod.exists(mapKey))
        {
            mapPeriod.insert(mapKey, mapPeriod.lookup(mapKey) + _addValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateToday</Name>
				<Source><![CDATA[
    public TransDate parmDateToday(TransDate _dateToday = dateToday)
    {
        dateToday = _dateToday;
        return dateToday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the internal variables.
    /// </summary>
    /// <param name="_reduceKeyId">
    /// A string that contains the reduction key ID.
    /// </param>
    /// <remarks>
    /// Must be called each time the item ID or the coverage dimensions are changed.
    /// </remarks>
    public void reset(ReqReduceKeyId  _reduceKeyId = '')
    {
        if (mapReduceKeyId && mapReduceKeyId.exists(_reduceKeyId))
        {
            mapReduceKeyId.remove(_reduceKeyId);
        }

        mapPeriod           = null;
        mapPeriodEnd        = null;

        setReqTransTransfer = null;

        reducePeriodStart   = dateNull();
        reducePeriodEnd     = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ReqForecastReduce</c> class.
    /// </summary>
    /// <param name="_reqReduceType">
    ///    A <c>ReqReduceType</c> enumeration value that determines the subtype of the
    ///    <c>ReqForecastReduce</c> class.
    /// </param>
    /// <returns>
    ///    An <c>ReqForecastReduce</c> object.
    /// </returns>
    private static ReqForecastReduce contruct(ReqReduceType  _reqReduceType)
    {
        switch (_reqReduceType)
        {
            case ReqReduceType::Percent:                    return ReqForecastReduce_Percent::contruct();
            case ReqReduceType::OpenOrdersReductionKey:     return ReqForecastReduce_TransFixed::contruct();
            case ReqReduceType::OpenOrdersPeriod:           return ReqForecastReduce_TransDynamic::construct();
        }

        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>ReqForecastReduce</c> class and initializes the object.
    /// </summary>
    /// <param name="_reqReduceType">
    ///    A <c>ReqReduceType</c> enumeration value that determines the subtype of the
    ///    <c>ReqForecastReduce</c> class.
    /// </param>
    /// <param name="_dateToday">
    ///    A date that contains a todays date.
    /// </param>
    /// <returns>
    ///    An <c>ReqForecastReduce</c> object.
    /// </returns>
    public static ReqForecastReduce newStandard(
        ReqReduceType   _reqReduceType,
        TransDate       _dateToday)
    {
        ReqForecastReduce   reqForecastReduce;

        reqForecastReduce = ReqForecastReduce::contruct(_reqReduceType);
        reqForecastReduce.parmDateToday(_dateToday);

        reqForecastReduce.init();

        return reqForecastReduce;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>