<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetTransWFUpdateBalanceEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetTransWFUpdateBalanceEventHandler</c> class is the event handler class, which manages
///    the workflow automated task execution event and the workflow automated task canceled event.
/// </summary>
public class BudgetTransWFUpdateBalanceEventHandler implements WorkflowElementExecutionEventHandler,
                                                                WorkflowElementCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the canceled event for the workflow automated task.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        BudgetTransactionHeader::setWorkflowStatus(
            _workflowElementEventArgs.parmWorkflowContext().parmRecId(),
            BudgetTransactionWorkflowStatus::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the execute event for the workflow automated task.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void execute(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;
        BudgetTransactionHeader budgetTransactionHeader;
        BudgetTransactionPost budgetTransactionPost;

        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        if (workflowContext.parmTableId() == tablenum(BudgetTransactionHeader))
        {
            ttsBegin;

            // The workflow configuration is assumed to have been setup with this task as the final task.
            // Set the status to approved to indicate the workflow tasks have all completed to allow for the update of the budget balances.
            BudgetTransactionHeader::setWorkflowStatus(
                workflowContext.parmRecId(),
                BudgetTransactionWorkflowStatus::Approved);

            budgetTransactionHeader = BudgetTransactionHeader::find(workflowContext.parmRecId());

            budgetTransactionPost = BudgetTransactionPost::construct(budgetTransactionHeader.TransactionNumber, budgetTransactionHeader.PrimaryLedger);
            budgetTransactionPost.parmDoValidateInUse(false);
            budgetTransactionPost.runOperation();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>