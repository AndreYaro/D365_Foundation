<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchReport_Invoice_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchReport_Invoice_RU extends SalesPurchReport_RU
{
    boolean isBOL;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>consigneeAccount</Name>
				<Source><![CDATA[
    // overloaded in SalesPurchReport_Invent_Ru
    protected CustVendAC consigneeAccount()
    {
        return invoiceJour.CustVendInvoiceJour::getConsigneeAccount_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>consignorAccount</Name>
				<Source><![CDATA[
    // overloaded in SalesPurchReport_Invent_Ru
    protected CustVendAC consignorAccount()
    {
        return invoiceJour.CustVendInvoiceJour::getConsignorAccount_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        DocumentStatus docStatus = DocumentStatus::Invoice;

        if (SourceDocumentHeader::find(invoiceJour.SourceDocumentHeader_RU).SourceRelationType == tableNum(CustInvoiceTable))
        {
            docStatus = DocumentStatus::FreeTextInvoice;
        }

        return docStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrintTORG12Excel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes given report
    /// </summary>
    /// <param name="_reportPrint">
    /// Report to be executed
    /// </param>
    protected void doPrintTORG12Excel(XMLExcelReport_TORG12_RU _reportPrint)
    {
        _reportPrint.parmData(header, dynamicData);
        _reportPrint.parmSalesPurchReport(this);

        SRSPrintDestinationSettings printSettings = this.parmPrintDestinationSettings();

        if (_reportPrint.isPdfConversionEnabled(printSettings))
        {
            _reportPrint.parmPrintDestinationSettings(printSettings);
        }

        _reportPrint.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBOL</Name>
				<Source><![CDATA[
    public boolean parmIsBOL(boolean _isBOL = isBOL)
    {
        isBOL = _isBOL;
        return isBOL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        super();

        SalesPurchReportCounteragentData_RU counteragentData = this.initContragentData(consignor,
                                                                                       consignorBankAccount,
                                                                                       this.consignorAccount());
        header.ConsignorBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.ConsignorOKPO        = counteragentData.parmOKPO();
        header.ConsignorOKDP        = counteragentData.parmOKDP();
        header.ConsignorStructDept  = counteragentData.parmStructDept();

        counteragentData = this.initContragentData(consignee,
                                                   consigneeBankAccount,
                                                   this.consigneeAccount(),
                                                   invoiceJour.deliveryAddress_RU());
        header.ConsigneeBankAddress = counteragentData.fullInvoiceInfo(true, true);
        header.ConsigneeOKPO        = counteragentData.parmOKPO();
        header.ConsigneeOKDP        = counteragentData.parmOKDP();
        header.ConsigneeStructDept  = counteragentData.parmStructDept();

        OffSessionId_RU offSessionId = invoiceJour.CustVendInvoiceJour::getOffSessionId_RU();

        [ header.AcceptorName,
          header.AcceptorTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Acceptor);
        [ header.TakerName,
          header.TakerTitle ]      = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Taker);
        [ header.SupplierName,
          header.SupplierTitle ]   = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Supplier);

        if (invoiceJour.creditNote() && this.reverseCreditNote())
        {
            header.ConsignorStructDept = header.ConsigneeStructDept;

            container swap = [ header.VendBankAddress, header.VendOKPO, header.ConsignorBankAddress, header.ConsignorOKPO ];

            [ header.VendBankAddress, header.VendOKPO, header.ConsignorBankAddress, header.ConsignorOKPO ] =
            [ header.CustBankAddress, header.CustOKPO, header.ConsigneeBankAddress, header.ConsigneeOKPO ];

            [ header.CustBankAddress, header.CustOKPO, header.ConsigneeBankAddress, header.ConsigneeOKPO ] = swap;
        }
        if (mappingExists(tableNum(CustVendInvoiceJour),
                          invoiceJour.TableId,
                          fieldNum(CustVendInvoiceJour, DefaultDimension)))
        {
            header.AgreementId = AgreementHeaderExt_RU::findByDefaultDimension(invoiceJour.DefaultDimension).AgreementId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData_Sec</Name>
				<Source><![CDATA[
    protected FreeTxt prepareTxtData_Sec()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNote</Name>
				<Source><![CDATA[
    protected boolean reverseCreditNote()
    {
        return CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::ReverseVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intantiates report object, initializes and executes it
    /// </summary>
    public void run()
    {
        this.preRun();

        if (this.doRun())
        {
            XMLExcelReport_TORG12_RU reportPrint = XMLExcelReport_TORG12_RU::construct();
            this.doPrintTORG12Excel(reportPrint);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    #define.Sales ("Sales")
    #define.Cust  ("Cust")
    #define.Purch ("Purch")
    #define.Vend  ("Vend")
    public static SalesPurchReport_Invoice_RU constructFromArgs(Args _args)
    {
        SalesPurchReport_Invoice_RU report;
        boolean                     sales, purch;

        void initFromRecord(Common _record)
        {
            if (! _record)
                return;

            switch (_record.TableId)
            {
                case tableNum(CustInvoiceJour) :
                    report = new SalesReport_Invoice_RU();
                    break;
                case tableNum(VendInvoiceJour) :
                    report = new PurchReport_Invoice_RU();
                    break;
            }
        }

        if (! _args)
            throw error(Error::missingRecord(funcName()));

        initFromRecord(_args.record());

        if (! report)
        {
            sales = strScan(_args.menuItemName(), #Sales, 1, strLen(_args.menuItemName())) ||
                    strScan(_args.menuItemName(), #Cust,  1, strLen(_args.menuItemName()));

            purch = strScan(_args.menuItemName(), #Purch, 1, strLen(_args.menuItemName())) ||
                    strScan(_args.menuItemName(), #Vend,  1, strLen(_args.menuItemName()));

            if (sales && ! purch)
            {
                report = new SalesReport_Invoice_RU();
            }

            if (purch && ! sales)
            {
                report = new PurchReport_Invoice_RU();
            }
        }

        if (! report)
            throw error(Error::missingRecord(funcName()));

        report.setParameters(_args.parmEnum(), _args.record(), _args.object());
        report.setCaller(_args.caller());

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesPurchReport_Invoice_RU   report = SalesPurchReport_Invoice_RU::constructFromArgs(_args);

        report.runOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>