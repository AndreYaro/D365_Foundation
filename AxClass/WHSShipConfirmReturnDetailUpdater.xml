<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConfirmReturnDetailUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConfirmReturnDetailUpdater</c> class is responsible for updating the <c>WHSReturnDetail</c> data
/// when the related shipment (load) is ship confirmed.
/// </summary>
internal final class WHSShipConfirmReturnDetailUpdater
{
    private WHSReturnDetailShipUTCDateTime shipDateTime;
    private Map returnItemPolicies = new Map(Types::String, Types::UtcDateTime);
    private WHSInstrumentationLogger instrumentationLogger;
    private WHSShipmentTable shipmentTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromShipment</Name>
				<Source><![CDATA[
    internal static WHSShipConfirmReturnDetailUpdater newFromShipment(WHSShipmentTable _shipment)
    {
        WHSShipConfirmReturnDetailUpdater updater = new WHSShipConfirmReturnDetailUpdater();
        updater.shipmentTable =_shipment;
        updater.shipDateTime = DateTimeUtil::getSystemDateTime();

        return updater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classStr(WHSShipConfirmReturnDetailUpdater));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnDetails</Name>
				<Source><![CDATA[
    internal void updateReturnDetails()
    {
        if (WHSUseReturnDetailConfigurationProviderFlight::instance().isEnabled())
        {
            if (WHSReturnDetailConfigurationProvider::isShipmentReturnDetailsCreationEnabled(this.shipmentTable))
            {
                this.updateReturnDetail();
                this.updateReturnLineDetails();
            }
        }
        else
        {
            if (WHSParameters::isReturnDetailsCreationEnabled())
            {
                this.updateReturnDetail();
                this.updateReturnLineDetails();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnDetail</Name>
				<Source><![CDATA[
    private void updateReturnDetail()
    {
        using (var activityContext = this.instrumentationLogger().shipConfirmReturnDetailUpdaterActivities().updateReturnDetail())
        {
            WHSReturnDetail returnDetail;
            WHSLoadLine loadLine;

            update_recordset returnDetail
                setting
                    ShipUTCDateTime = shipDateTime
                exists join loadLine
                    where loadLine.ShipmentId == returnDetail.ShipmentId
                        && loadLine.LoadId == shipmentTable.LoadId;

            this.instrumentationLogger().shipConfirmReturnDetailUpdaterActivities().updatedReturnDetails(activityContext, shipmentTable.RecId, returnDetail.RowCount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnLineDetails</Name>
				<Source><![CDATA[
    private void updateReturnLineDetails()
    {
        using (var activityContext = this.instrumentationLogger().shipConfirmReturnDetailUpdaterActivities().updateReturnLineDetails())
        {
            NumberOfRecords returnLineDetailCount;

            WHSReturnLineDetail returnLineDetail;
            WHSReturnDetail returnDetail;
            WHSLoadLine loadLine;

            while select forupdate returnLineDetail
                exists join returnDetail
                    where returnDetail.ReturnID == returnLineDetail.ReturnID
                exists join loadLine
                    where loadLine.ShipmentId == returnDetail.ShipmentId
                        && loadLine.LoadId == shipmentTable.LoadId
            {
                returnLineDetail.ReturnUntilUTCDateTime = this.calculateAllowedDaysForReturn(returnLineDetail.ItemId);
                returnLineDetail.update();

                returnLineDetailCount++;
            }

            this.instrumentationLogger().shipConfirmReturnDetailUpdaterActivities().updatedReturnLineDetails(activityContext, shipmentTable.RecId, returnLineDetailCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAllowedDaysForReturn</Name>
				<Source><![CDATA[
    private WHSReturnUntilUTCDateTime calculateAllowedDaysForReturn(ItemId _itemId)
    {
        if (!returnItemPolicies.exists(_itemId))
        {
            WHSReturnLineDetailReturnUntilDateCalculator returnUntilDateCalculator = WHSReturnLineDetailReturnUntilDateCalculator::newFromItemIdAndShipDate(_itemId, shipDateTime);
            WHSReturnUntilUTCDateTime returnUntilDateTime = returnUntilDateCalculator.calculateReturnUntilDate();

            returnItemPolicies.insert(_itemId, returnUntilDateTime);
        }

        return returnItemPolicies.lookup(_itemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>