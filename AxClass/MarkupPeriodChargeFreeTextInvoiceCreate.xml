<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupPeriodChargeFreeTextInvoiceCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class MarkupPeriodChargeFreeTextInvoiceCreate
{
    private const Qty InvoiceLineQuantity = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFreeTextInvoice</Name>
				<Source><![CDATA[
    public static CustInvoiceTable createFreeTextInvoice(List _custInvoiceLinesList)
    {
        CustInvoiceTable custInvoiceTable;
        CustInvoiceLine custInvoiceLine;
        ListEnumerator custInvoiceLinesListEnumerator = _custInvoiceLinesList.getEnumerator();
            
        ttsbegin;

        while (custInvoiceLinesListEnumerator.moveNext())
        {
            MarkupPeriodChargeFreeTextInvoiceCreateParameters invoiceCreationParameters = custInvoiceLinesListEnumerator.current();
                    
            if (!custInvoiceTable)
            {
                custInvoiceTable = MarkupPeriodChargeFreeTextInvoiceCreate::createFreeTextInvoiceHeader(invoiceCreationParameters);
            }

            custInvoiceLine = MarkupPeriodChargeFreeTextInvoiceCreate::createFreeTextInvoiceLine(custInvoiceTable, invoiceCreationParameters);
            MarkupPeriodChargeFreeTextInvoiceCreate::createInvoiceLineBase(custInvoiceLine.RecId, invoiceCreationParameters.parmInvoiceLineBaseSet());
        }

        ttscommit;

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFreeTextInvoiceHeader</Name>
				<Source><![CDATA[
    private static CustInvoiceTable createFreeTextInvoiceHeader(MarkupPeriodChargeFreeTextInvoiceCreateParameters _invoiceCreationParameters)
    {
        CustInvoiceTable custInvoiceTable;

        CustTable custTable = CustTable::find(_invoiceCreationParameters.parmInvoiceAccount());

        custInvoiceTable.initValue();
        custInvoiceTable.initFromCustTable(custTable);
        custInvoiceTable.CurrencyCode = _invoiceCreationParameters.parmCurrency();
        if (!custInvoiceTable.validateWrite())
        {
            throw Exception::Error;
        }
        custInvoiceTable.insert();
        
        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFreeTextInvoiceLine</Name>
				<Source><![CDATA[
    private static CustInvoiceLine createFreeTextInvoiceLine(CustInvoiceTable _custInvoiceTable, MarkupPeriodChargeFreeTextInvoiceCreateParameters _invoiceCreationParameters)
    {
        CustInvoiceLine custInvoiceLine;

        custInvoiceLine.clear();
        custInvoiceLine.initValue();
        custInvoiceLine.initFromCustInvoiceTable(_custInvoiceTable);
        custInvoiceLine.ParentRecId = _custInvoiceTable.RecId;
        custInvoiceLine.Description = _invoiceCreationParameters.parmLineDescription();
        custInvoiceLine.InvoiceTxt = _invoiceCreationParameters.parmLineDescription();
        custInvoiceLine.Quantity = InvoiceLineQuantity;
        custInvoiceLine.UnitPrice =  _invoiceCreationParameters.parmInvoiceLineAmount();
        custInvoiceLine.modifiedField(fieldNum(CustInvoiceLine, UnitPrice));

        custInvoiceLine.LedgerDimension = _invoiceCreationParameters.parmDefaultRevenueAccount();
        custInvoiceLine.modifiedField(fieldNum(CustInvoiceLine, LedgerDimension));

        custInvoiceLine.PeriodChargeInvoiceLineBaseFromDate = _invoiceCreationParameters.parmInvoiceLineBaseFromDate();
        custInvoiceLine.PeriodChargeInvoiceLineBaseToDate = _invoiceCreationParameters.parmInvoiceLineBaseToDate();
        custInvoiceLine.insert();
        
        return custInvoiceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceLineBase</Name>
				<Source><![CDATA[
    private static void createInvoiceLineBase(MarkupPeriodChargeFreeTextInvoiceLineRecId _freeTextInvoiceLineRecId, Set _invoiceLineBaseSet)
    {
        SetEnumerator invoiceLineBaseSetEnumerator = _invoiceLineBaseSet.getEnumerator();

        while (invoiceLineBaseSetEnumerator.moveNext())
        {
            MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = invoiceLineBaseSetEnumerator.current();
            
            MarkupPeriodChargeFreeTextInvoiceCreate::populateInvoiceLineBase(_freeTextInvoiceLineRecId, invoiceLineBaseCreationParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInvoiceLineBaseRelationship</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void deleteInvoiceLineBaseRelationship(Set _invoiceLineBaseSet, SysGuid _executionId)
    {
        SysDaQueryObject sysDaQuery = MarkupPeriodChargeFreeTextInvoiceCreate::buildInvoiceLineBaseRelationshipDeleteQuery(_invoiceLineBaseSet, _executionId);

        ttsbegin;
        new SysDaDeleteStatement().executeQuery(new SysDaDeleteObject(sysDaQuery));
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceLineBaseRelationshipDeleteQuery</Name>
				<Source><![CDATA[
    private static SysDaQueryObject buildInvoiceLineBaseRelationshipDeleteQuery(Set _invoiceLineBaseSet, SysGuid _executionId)
    {
        MarkupPeriodChargeInvoiceLineBaseRelationship invoiceLineBaseRelationship;
        SysDaQueryExpression invoiceLineWhereClause;
        
        SetEnumerator invoiceLineBaseSetEnumerator = _invoiceLineBaseSet.getEnumerator();
        while (invoiceLineBaseSetEnumerator.moveNext())
        {
            MarkupPeriodChargeInvoiceLineBaseCreateParameters invoiceLineBaseCreationParameters = invoiceLineBaseSetEnumerator.current();
            
            SysDaQueryExpression invoiceBaseLineExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(invoiceLineBaseRelationship, fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, InvoiceLineBaseId)),
                new SysDaValueExpression(invoiceLineBaseCreationParameters.parmInvoiceLineBaseId()));

            if (invoiceLineWhereClause)
            {
                invoiceLineWhereClause = invoiceLineWhereClause.or(invoiceBaseLineExpression);
            }
            else
            {
                invoiceLineWhereClause = invoiceBaseLineExpression;
            }
        }

        SysDaQueryExpression executionIdWhereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(invoiceLineBaseRelationship, fieldStr(MarkupPeriodChargeInvoiceLineBaseRelationship, ExecutionId)),
                new SysDaValueExpression(_executionId));

        SysDaQueryObject sysDaQuery = new SysDaQueryObject(invoiceLineBaseRelationship);
        sysDaQuery.whereClause(executionIdWhereClause.and(invoiceLineWhereClause));

        return sysDaQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoiceLineBase</Name>
				<Source><![CDATA[
    private static MarkupPeriodChargeInvoiceLineBase populateInvoiceLineBase(MarkupPeriodChargeFreeTextInvoiceLineRecId _freeTextInvoiceLineRecId, MarkupPeriodChargeInvoiceLineBaseCreateParameters _invoiceLineBaseCreationParameters)
    {
        MarkupPeriodChargeInvoiceLineBase invoiceLineBase;

        invoiceLineBase = MarkupPeriodChargeInvoiceLineBase::createNewFromParameters(_invoiceLineBaseCreationParameters);
        invoiceLineBase.FreeTextInvoiceLineRecId = _freeTextInvoiceLineRecId;
        invoiceLineBase.insert();
        
        return invoiceLineBase;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>