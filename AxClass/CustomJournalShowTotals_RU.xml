<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalShowTotals_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic for showing Customs journal totals.
/// </summary>
class CustomJournalShowTotals_RU extends RunBase
{
    CustomJournalTable_RU       customJournalTable;
    TmpCustomJournalTotals_RU   tmpCustomJournalTotals;
    SysQueryRun                 sysQueryRun;

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals and initializes internal structures.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcTotals()
    {
        CustomJournalTotalAmounts_RU        totalAmounts;
        TmpCustomJournalTotalsFilters_RU    totalsFilters;
        FormDataSource                      fds = FormDataUtil::getFormDataSource(customJournalTable) as FormDataSource;
        QueryBuildDataSource                qbds = fds.queryBuildDataSource();

        CustomTotalFilterType_RU filterType(fieldId _fieldId)
        {
            CustomTotalFilterType_RU ret;

            switch (_fieldId)
            {
                case fieldnum(CustomJournalTrans_RU, ItemId)  :
                    ret = CustomTotalFilterType_RU::Item;
                    break;
                case fieldnum(CustomJournalTrans_RU, feaccId) :
                    ret = CustomTotalFilterType_RU::FEACC;
                    break;
                case fieldnum(CustomJournalTrans_RU, CustomPartition) :
                    ret = CustomTotalFilterType_RU::CustomPartition;
                    break;
                case fieldnum(CustomJournalTrans_RU, CountryRegionId) :
                    ret = CustomTotalFilterType_RU::CountryRegionId;
            }

            return ret;
        }

        void setFilter(fieldId _fieldId)
        {
            QueryBuildRange qbr = qbds.findRange(_fieldId);

            if (qbr)
            {
                totalsFilters.initRange(customJournalTable.CustomJournalId, filterType(_fieldId), qbr.value());
            }
        }
        ;

        setFilter(fieldnum(CustomJournalTrans_RU, ItemId));
        setFilter(fieldnum(CustomJournalTrans_RU, feaccId));
        setFilter(fieldnum(CustomJournalTrans_RU, CustomPartition));
        setFilter(fieldnum(CustomJournalTrans_RU, CountryRegionId));

        totalAmounts = CustomJournalTotalAmounts_RU::createFromJournal(customJournalTable, totalsFilters);
        tmpCustomJournalTotals.initFromCustomJournalTable(customJournalTable, totalAmounts, !totalAmounts.useFilter());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    private void initQuery()
    {
        Query                query;
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;

        query = new Query();
        qbds  = query.addDataSource(tablenum(CustomJournalTrans_RU));
        qbr   = qbds.addRange(fieldnum(CustomJournalTrans_RU, CustomJournalId));

        qbr.value(customJournalTable.CustomJournalId);
        qbr.status(RangeStatus::Locked);

        qbds.addRange(fieldnum(CustomJournalTrans_RU, ItemId));
        qbds.addRange(fieldnum(CustomJournalTrans_RU, feaccId));
        qbds.addRange(fieldnum(CustomJournalTrans_RU, CustomPartition));
        qbds.addRange(fieldnum(CustomJournalTrans_RU, CountryRegionId));

        sysQueryRun  = new SysQueryRun(query);
        sysQueryRun.promptLoadLastUsedQuery(false);
        sysQueryRun.promptAllowSave(false);
        sysQueryRun.promptShowSorting(false);
        sysQueryRun.promptSaveQueryPrUser(false);
        sysQueryRun.promptAllowAddDataSource(false);
        sysQueryRun.promptAllowAddRange(QueryAllowAdd::NoFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, sysQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;
        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(boolean _autoRun = false)
    {
        FormRun formRun;
        Args    args;

        args = new Args(formstr(SysQueryForm));
        args.caller(sysQueryRun);

        formRun = ClassFactory::formRunClassOnClient(args);
        formRun.init();
        formRun.run();
        if (!_autoRun)
        {
            formRun.wait();
        }

        if (_autoRun || formRun.closedOk())
        {
            this.calcTotals();

            args = new Args(formstr(CustomJournalTotals_RU));
            args.record(tmpCustomJournalTotals);
            args.caller(sysQueryRun);

            formRun = ClassFactory::formRunClassOnClient(args);
            formRun.init();
            formRun.run();
            if (!_autoRun)
            {
                formRun.detach();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to show a dialog form.
    /// </summary>
    /// <returns>
    /// false, which means that no dialog will be prompted to the user.
    /// </returns>
    /// <remarks>
    /// A standard overrideable method for RunBase class descendants.
    /// </remarks>
    public boolean showDialog()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    sysQueryRun = new sysQueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>CustomJournalShowTotals_RU</c> class.
    /// </summary>
    /// <param name="_customJournalTable">
    /// <c>CustomJournalTable_RU</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>CustomJournalShowTotals_RU</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalShowTotals_RU construct(CustomJournalTable_RU _customJournalTable)
    {
        CustomJournalShowTotals_RU  showTotals = new CustomJournalShowTotals_RU();

        showTotals.parmCustomJournalTable(_customJournalTable);

        return showTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustomJournalTable_RU       customJournalTable;
        CustomJournalShowTotals_RU  showTotals;

        if (!_args || !_args.record() || _args.dataset() != tableNum(CustomJournalTable_RU) || !FormDataUtil::isFormDataSource(_args.record()))
        {
            throw error(Error::missingFormActiveBuffer(formName2Pname(formStr(CustomJournalTotals_RU)), tablePName(CustomJournalTable_RU)));
        }

        customJournalTable = _args.record() as CustomJournalTable_RU;

        showTotals = CustomJournalShowTotals_RU::construct(customJournalTable);

        if (showTotals.prompt())
        {
            showTotals.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>