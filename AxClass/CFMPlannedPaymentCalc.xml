<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPlannedPaymentCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates planned payment based on source table record and distribution percentage.
/// </summary>
public abstract class CFMPlannedPaymentCalc
{
    Common source;
    CFMLedgerDimensionConverterCache cfmDimensionConverter;
    CFMDistributionPercentTmp distributionPercentTmpTable;
    CFMDistributionDocument plannedPaymentDocument;

    CustVendPaymentSched paymSched;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMPlannedPaymentCalc construct(Common _source)
    {
        CFMPlannedPaymentCalc calc;

        if (_source)
        {
            CFMPlannedPaymentSourceAttribute extensionAttribute = new CFMPlannedPaymentSourceAttribute(tableId2name(_source.TableId));

            calc = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPlannedPaymentCalc), extensionAttribute);

            if (!calc)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            calc.initialize(_source);
        }

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate planned payments.
    /// </summary>
    public void calc()
    {
        ttsbegin;

        this.processCalculation();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapsePlannedPaymentAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Leaves the planned payment lines with the dominate sign, the lines of the opposite sign are redistributed proportionally.
    /// </summary>
    protected void collapsePlannedPaymentAmounts()
    {
        plannedPaymentDocument.collapseAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a standard payment schedule for the source.
    /// </summary>
    /// <returns>
    /// Payment schedule header.
    /// </returns>
    protected abstract CustVendPaymentSched createPaymSched()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlannedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates planned payment records.
    /// </summary>
    protected void createPlannedPayment()
    {
        if (paymSched)
        {
            this.createPlannedPaymentByPaymSched();
        }
        else
        {
            this.createPlannedPaymentBySource();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlannedPaymentByPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates planned payments based on standard payment schedule.
    /// </summary>
    protected void createPlannedPaymentByPaymSched()
    {
        CustVendPaymentSchedLine custVendPaymentSchedLine = this.paymSchedLineInstance();
        CustVendPaymentSchedLine custVendPaymentSchedLineTotal = this.paymSchedLineInstance();

        select count(RecId), sum(DueAmount), sum(DiscAmount) from custVendPaymentSchedLineTotal
            where custVendPaymentSchedLineTotal.ParentRecID == paymSched.RecId;

        while select custVendPaymentSchedLine
            where custVendPaymentSchedLine.ParentRecID == paymSched.RecId
        {
            this.createPlannedPaymentFromSchedLine(custVendPaymentSchedLine, custVendPaymentSchedLineTotal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlannedPaymentBySource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates planned payment based on source itself.
    /// </summary>
    protected void createPlannedPaymentBySource()
    {
        CFMPlannedPaymentTable plannedPaymentTable;
        CFMPlannedPaymentLine  plannedPaymentLine;
        AmountCur sourceAmountDue = this.sign() * this.sourceDueAmount();
        AmountCur sourceAmountDisc = this.sign() * this.sourceDiscAmount();
        AmountCur plannedAmountDue;
        AmountCur plannedAmountDisc;

        if (!sourceAmountDue)
        {
            // No need to create planned payment without amount
            return;
        }

        this.initPlannedPaymentTable(
            plannedPaymentTable,
            this.sourceDueDate(),
            this.sourceDiscDate(),
            NoYes::No);

        plannedPaymentTable.insert();

        while select distributionPercentTmpTable
        {
            plannedPaymentLine.clear();

            plannedPaymentLine.PlannedPaymentTable = plannedPaymentTable.RecId;

            plannedPaymentLine.TaxGroup = distributionPercentTmpTable.TaxGroup;
            plannedPaymentLine.TaxItemGroup = distributionPercentTmpTable.TaxItemGroup;
            plannedPaymentLine.LedgerDimension = distributionPercentTmpTable.LedgerDimension;

            plannedPaymentLine.DueAmount = CurrencyExchangeHelper::amount(sourceAmountDue * distributionPercentTmpTable.Percent / 100, this.sourceCurrencyCode());
            plannedPaymentLine.DiscAmount = CurrencyExchangeHelper::amount(sourceAmountDisc * distributionPercentTmpTable.Percent / 100, this.sourceCurrencyCode());

            plannedPaymentLine.insert();

            plannedAmountDue += plannedPaymentLine.DueAmount;
            plannedAmountDisc += plannedPaymentLine.DiscAmount;
        }

        if (sourceAmountDue != plannedAmountDue ||
            sourceAmountDisc != plannedAmountDisc)
        {
            plannedPaymentLine.DueAmount += sourceAmountDue - plannedAmountDue;
            plannedPaymentLine.DiscAmount += sourceAmountDisc - plannedAmountDisc;

            plannedPaymentLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlannedPaymentFromSchedLine</Name>
				<Source><![CDATA[
    private void createPlannedPaymentFromSchedLine(CustVendPaymentSchedLine _paymSchedLine, CustVendPaymentSchedLine _paymSchedLineTotal)
    {
        CFMPlannedPaymentTable plannedPaymentTable;
        CFMPlannedPaymentLine  plannedPaymentLine;

        AmountCur sourceAmountDue;
        AmountCur sourceAmountDisc;
        AmountCur amountDue;
        AmountCur amountDisc;

        Factor factorSchedAmount;
        Factor    factorDiscAmount;

        if (!_paymSchedLine.DueAmount)
        {
            // No need to create planned payment without amount
            return;
        }

        this.initPlannedPaymentTable(
            plannedPaymentTable,
            _paymSchedLine.DueDate,
            _paymSchedLine.DiscDate,
            _paymSchedLine.CFMPrepayment);

        plannedPaymentTable.insert();

        if (_paymSchedLineTotal.DueAmount)
        {
            factorSchedAmount = _paymSchedLine.DueAmount / _paymSchedLineTotal.DueAmount;
        }

        if (_paymSchedLineTotal.DiscAmount)
        {
            factorDiscAmount = _paymSchedLine.DiscAmount / _paymSchedLineTotal.DiscAmount;
        }

        sourceAmountDue = this.sign() * factorSchedAmount * this.sourceDueAmount();
        sourceAmountDisc = this.sign() * factorDiscAmount * this.sourceDiscAmount();

        while select distributionPercentTmpTable
        {
            plannedPaymentLine.clear();

            plannedPaymentLine.PlannedPaymentTable = PlannedPaymentTable.RecId;

            plannedPaymentLine.TaxGroup = distributionPercentTmpTable.TaxGroup;
            plannedPaymentLine.TaxItemGroup = distributionPercentTmpTable.TaxItemGroup;
            plannedPaymentLine.LedgerDimension = distributionPercentTmpTable.LedgerDimension;

            plannedPaymentLine.DueAmount = CurrencyExchangeHelper::amount(sourceAmountDue * distributionPercentTmpTable.Percent / 100, this.sourceCurrencyCode());
            plannedPaymentLine.DiscAmount = CurrencyExchangeHelper::amount(sourceAmountDisc * distributionPercentTmpTable.Percent / 100, this.sourceCurrencyCode());

            plannedPaymentLine.insert();

            amountDue += plannedPaymentLine.DueAmount;
            amountDisc += plannedPaymentLine.DiscAmount;
        }

        if (amountDue != sourceAmountDue ||
            amountDisc != sourceAmountDisc)
        {
            plannedPaymentLine.DueAmount += sourceAmountDue - amountDue;
            plannedPaymentLine.DiscAmount += sourceAmountDisc - amountDisc;

            plannedPaymentLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePlannedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes cash flow management planned payment lines.
    /// </summary>
    protected void deletePlannedPayment()
    {
        CFMPlannedPaymentTable plannedPaymentTable;

        delete_from plannedPaymentTable
            where plannedPaymentTable.SourceType == this.sourceType() &&
                  plannedPaymentTable.SourceRecId == source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the related standard payment schedule if exists.
    /// </summary>
    /// <returns>
    /// Payment schedule header.
    /// </returns>
    protected abstract CustVendPaymentSched findPaymSched()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from source on construct.
    /// </summary>
    /// <param name="_source">
    /// Source record
    /// </param>
    protected void initialize(Common _source)
    {
        source = _source;

        cfmDimensionConverter = CFMLedgerDimensionConverterCache::construct();

        CFMDistributionPercentCalc percentCalc = CFMDistributionPercentCalc::construct(_source, CFMDistributionType::Detailed);

        if (percentCalc)
        {
            distributionPercentTmpTable = percentCalc.calc();
        }

        plannedPaymentDocument = CFMDistributionDocument::newForPlannedPayment(
            source.RecId,
            this.sourceDataAreaId(),
            this.sourceType(),
            this.sourceCurrencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePaymShed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ininitializes payment schedule record.
    /// </summary>
    protected void initializePaymShed()
    {
        paymSched = this.findPaymSched();

        if (!paymSched)
        {
            paymSched = this.createPaymSched();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlannedPaymentTable</Name>
				<Source><![CDATA[
    private void initPlannedPaymentTable(CFMPlannedPaymentTable _plannedPaymentTable,
        DueDate _dueDate,
        DiscDate _discDate,
        CFMPrepayment _prepayment)
    {
        CustVendPaymModeTable custVendPaymMode;
        CFMPaymentAccountNum paymentAccountNum;

        _plannedPaymentTable.SourceDataAreaId   = this.sourceDataAreaId();
        _plannedPaymentTable.SourceType         = this.sourceType();
        _plannedPaymentTable.SourceRecId        = source.RecId;

        _plannedPaymentTable.AccountType        = this.sourceAccountType();
        _plannedPaymentTable.AccountNum         = this.sourceAccountNum();
        _plannedPaymentTable.InvoiceAccountNum  = this.sourceInvoiceAccountNum();

        _plannedPaymentTable.CurrencyCode       = this.sourceCurrencyCode();

        _plannedPaymentTable.PaymentMode        = this.sourcePaymMode();
        _plannedPaymentTable.PaymentDataAreaId  = CFMParameters::getCentralizedPaymentCompanyInfo(_plannedPaymentTable.SourceDataAreaId).DataArea;
        _plannedPaymentTable.PaymentPriority    = CFMPlannedPaymentTable::definePaymentPriority(_plannedPaymentTable.SourceDataAreaId,
            this.sourcePaymTerm(),
            _plannedPaymentTable.AccountType,
            _plannedPaymentTable.AccountNum,
            _prepayment);
        _plannedPaymentTable.Prepayment         = _prepayment;
        _plannedPaymentTable.DueDate            = _dueDate;
        _plannedPaymentTable.DiscDate           = _discDate;

        changecompany(_plannedPaymentTable.PaymentDataAreaId)
        {
            if (this.sourcePaymModeType() == CustVendACType::Cust)
            {
                custVendPaymMode = CustPaymModeTable::find(_plannedPaymentTable.PaymentMode);
            }
            else
            {
                custVendPaymMode = VendPaymModeTable::find(_plannedPaymentTable.PaymentMode);
            }

            if (custVendPaymMode.PaymentLedgerDimension)
            {
                paymentAccountNum = DimensionAttributeValueCombination::find(custVendPaymMode.PaymentLedgerDimension).DisplayValue;
            }
        }

        if (paymentAccountNum)
        {
            switch (custVendPaymMode.AccountType)
            {
                case LedgerJournalACType::Bank:
                    _plannedPaymentTable.PaymentAccountType = CFMPaymentAccountType::Bank;
                    _plannedPaymentTable.PaymentAccountNum = paymentAccountNum;
                    break;

                case LedgerJournalACType::RCash:
                    _plannedPaymentTable.PaymentAccountType = CFMPaymentAccountType::Cash_RU;
                    _plannedPaymentTable.PaymentAccountNum = paymentAccountNum;
                    break;

                default:
                    _plannedPaymentTable.PaymentAccountType = CFMPaymentAccountType::Bank;
                    _plannedPaymentTable.PaymentAccountNum = "";
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymSchedLineInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns instance of payment schedule header table.
    /// </summary>
    /// <returns>
    /// Instance of payment schedule header table.
    /// </returns>
    /// <remarks>
    /// Define the payment schedule variable and return in the child class.
    /// </remarks>
    protected abstract CustVendPaymentSchedLine paymSchedLineInstance()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>plannedPaymentRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether planned payments should be created.
    /// </summary>
    /// <returns>
    /// true if planned payments should be created; otherwise, false.
    /// </returns>
    protected abstract boolean plannedPaymentRequired()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains steps for planned payment processing.
    /// </summary>
    protected void processCalculation()
    {

        this.deletePlannedPayment();

        if (!this.validateDistribution())
        {
            return;
        }

        if (this.usePaymentSchedule())
        {
            this.initializePaymShed();
        }


        if (this.plannedPaymentRequired())
        {
            this.createPlannedPayment();
        }

        this.collapsePlannedPaymentAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns sign of source amounts.
    /// </summary>
    /// <returns>
    /// Sign of source amounts
    /// </returns>
    /// <remarks>
    /// All source amounts should be multiplied to this sign in base class
    /// </remarks>
    protected abstract Sign sign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns account num from source.
    /// </summary>
    /// <returns>
    /// Account num from source
    /// </returns>
    protected abstract CFMAccountNum sourceAccountNum()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns account type from the source.
    /// </summary>
    /// <returns>
    /// Account type from the source
    /// </returns>
    protected abstract CFMAccountType sourceAccountType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code from the source.
    /// </summary>
    /// <returns>
    /// Currency code from the source.
    /// </returns>
    protected abstract CurrencyCode sourceCurrencyCode()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns source data area.
    /// </summary>
    /// <returns>
    /// Source data area.
    /// </returns>
    protected abstract DataAreaId sourceDataAreaId()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns discount amount from the source.
    /// </summary>
    /// <returns>
    /// Discount amount from the source.
    /// </returns>
    protected abstract DiscAmount sourceDiscAmount()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns discount date from source.
    /// </summary>
    /// <returns>
    /// Discount date from source
    /// </returns>
    protected abstract DiscDate sourceDiscDate()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Due Amount from source.
    /// </summary>
    /// <returns>
    /// Due Amount from source
    /// </returns>
    protected abstract AmountCur sourceDueAmount()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Due Date from source.
    /// </summary>
    /// <returns>
    /// Due Date from source.
    /// </returns>
    protected abstract DueDate sourceDueDate()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceInvoiceAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns invoice account number from source.
    /// </summary>
    /// <returns>
    /// Invoice account number from source.
    /// </returns>
    protected abstract CFMAccountNum sourceInvoiceAccountNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcePaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns method of payment from source.
    /// </summary>
    /// <returns>
    /// Method of payment from source.
    /// </returns>
    protected abstract PaymMode sourcePaymMode()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcePaymModeType</Name>
				<Source><![CDATA[
    protected abstract CustVendACType sourcePaymModeType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourcePaymTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns payment terms from source.
    /// </summary>
    /// <returns>
    /// Terms of payment from source.
    /// </returns>
    protected abstract PaymTermId sourcePaymTerm()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Source type.
    /// </summary>
    /// <returns>
    /// Source type.
    /// </returns>
    protected abstract CFMPlannedPaymentSourceType sourceType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether it is possible to use standard payment schedule or not.
    /// </summary>
    /// <returns>
    /// Boolean value, whether it is possible to use standard payment schedule or not.
    /// </returns>
    protected abstract boolean usePaymentSchedule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// If there are no distribution no need to create planned payment.
    /// </summary>
    /// <returns>
    /// Result of validation.
    /// </returns>
    private boolean validateDistribution()
    {
        select count(RecId) from distributionPercentTmpTable;

        return distributionPercentTmpTable.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>