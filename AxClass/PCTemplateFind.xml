<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcTemplateFind</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCTemplateFind</c> class is an auxiliary class for finding template records.
/// </summary>
class PcTemplateFind
{
    PCTemplateComponent templateComponent;
    PCComponentInstance componentInstance;
    PCAdaptorComponent  adaptorComponent;
    TableId             findTableId;
    FieldId             findFieldId;
    Map                 loadedTemplates;

    private boolean isPCTemplateAttributeFindOrCreateImportFlightEnabled = PCTemplateAttributeFindOrCreateImportFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and index for lookup into the context..
    /// </summary>
    /// <param name="_tableId">
    /// A table ID.
    /// </param>
    /// <param name="_fieldId">
    /// A field ID.
    /// </param>
    /// <returns>
    /// An index.
    /// </returns>
    protected container createIndex(TableId _tableId, FieldId _fieldId)
    {
        return [_tableId, _fieldId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBindingByTemplateComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the attribute binding for the record parameter of the table.
    /// </summary>
    /// <param name="_templateComponent">
    /// The template for which to find the template attribute.
    /// </param>
    /// <param name="_tableId">
    /// The table that the template attribute binding is associated with.
    /// </param>
    /// <param name="_fieldId">
    /// The field of the table with the parameter that the template attribute binding is associated with.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record should be selected for update; optional.
    /// </param>
    /// <returns>
    /// The found template attribute binding.
    /// </returns>
    public PCTemplateAttributeBinding  findBindingByTemplateComponent(
        PCTemplateComponent _templateComponent, tableId _tableId, fieldId _fieldId, boolean _forupdate = false)
    {
        PCTemplateAttributeBinding  attributeBinding;
        PCTemplateAttribute         fieldReference;

        fieldReference = this.findTemplateAttributeByTableIdAndFieldId(_tableId, _fieldId);

        attributeBinding.selectForUpdate(_forupdate);

        select  firstonly attributeBinding
        where   attributeBinding.TemplateAttribute == fieldReference.RecId
        &&      attributeBinding.TemplateComponent == _templateComponent.RecId;

        return attributeBinding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTemplateAttributeByTableIdAndFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCTemplateAttribute</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that relates to the record.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that relates to the record.
    /// </param>
    /// <returns>
    /// A record in the <c>PCTemplateAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public PCTemplateAttribute findTemplateAttributeByTableIdAndFieldId(
        tableId _tableId,
        fieldId _fieldId
    )
    {
        PCTemplate                  template;
        PCTemplateAttribute         templateAttribute;

        select firstonly templateAttribute
        join RecId from template
        where   template.RecId                      == templateAttribute.Template
        &&      template.ReferencedTableId          == _tableId
        &&      templateAttribute.ReferencedFieldId == _fieldId;

        return templateAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTemplateAttributeByTableIdAndFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the specified record in the <c>PCTemplateAttribute</c> table.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that relates to the record.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that relates to the record.
    /// </param>
    /// <returns>
    /// A record in the <c>PCTemplateAttribute</c> table; otherwise, an empty record.
    /// </returns>
    public PCTemplateAttribute findOrCreateTemplateAttributeByTableIdAndFieldId(TableId _tableId, FieldId _fieldId)
    {
        PCTemplateAttribute templateAttribute = this.findTemplateAttributeByTableIdAndFieldId(_tableId, _fieldId);

        if (!templateAttribute)
        {
            ttsbegin;

            PCTemplateInitialize pcTemplateInitialize = PCTemplateInitialize::construct();
            pcTemplateInitialize.syncFieldTemplate(_tableId, _fieldId);

            ttscommit;

            if (isPCTemplateAttributeFindOrCreateImportFlightEnabled)
            {
                templateAttribute = this.findTemplateAttributeByTableIdAndFieldId(_tableId, _fieldId);
            }
        }

        return templateAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBindingValueAsRealWithDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the binding value as a real.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID for which to get the value.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID for which to get the value.
    /// </param>
    /// <param name="_default">
    /// A default value if no binding value is found.
    /// </param>
    /// <returns>
    /// A real value that contains the binding value.
    /// </returns>
    public real getBindingValueAsRealWithDefault(
        tableId _tableId,
        fieldId _fieldId,
        real    _default)
    {
        PCTemplateAttributeBinding  attributeBinding;

        attributeBinding = this.findBindingByTemplateComponent(this.parmTemplateComponent(), _tableId, _fieldId);
        if (attributeBinding)
        {
            return str2num(attributeBinding.getConfigurationAllocatedValue(this.parmComponentInstance().RecId, this.parmAdaptorComponent()));
        }
        else
        {
            return _default;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBindingValueAsString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the binding value as a string.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID for which to get the value.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID for which to get the value.
    /// </param>
    /// <returns>
    /// A string value that contains the binding value.
    /// </returns>
    public str getBindingValueAsString(
        tableId _tableId,
        fieldId _fieldId)
    {
        PCTemplateAttributeBinding  attributeBinding;

        if (loadedTemplates != null)
        {
            if (loadedTemplates.exists(this.createIndex(_tableId, _fieldId)))
            {
                return loadedTemplates.lookup(this.createIndex(_tableId, _fieldId));
            }
            return '';
        }

        attributeBinding = this.findBindingByTemplateComponent(this.parmTemplateComponent(), _tableId, _fieldId);
        return attributeBinding.getConfigurationAllocatedValue(this.parmComponentInstance().RecId, this.parmAdaptorComponent());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBindingValueAsStringWithDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the binding value as a string.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID for which to get the value.
    /// </param>
    /// <param name="_fieldId">
    /// The field ID for which to get the value.
    /// </param>
    /// <param name="_default">
    /// A default value if no binding value is found.
    /// </param>
    /// <returns>
    /// A string value that contains the binding value.
    /// </returns>
    public str getBindingValueAsStringWithDefault(
        tableId _tableId,
        fieldId _fieldId,
        str     _default)
    {
        PCTemplateAttributeBinding  attributeBinding;

        attributeBinding = this.findBindingByTemplateComponent(this.parmTemplateComponent(), _tableId, _fieldId);
        if (attributeBinding)
        {
            return attributeBinding.getConfigurationAllocatedValue(this.parmComponentInstance().RecId, this.parmAdaptorComponent());
        }
        else
        {
            return _default;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the attribute values into the context.
    /// </summary>
    protected void loadAttributeValues()
    {
        PCTemplateAttribute         templateAttribute;  // field reference
        PCTemplate                  template;           // table reference

        PCTemplateCategoryAttribute attributeBinding;
        EcoResCategoryAttribute     categoryAttribute;
        EcoResAttribute             attribute;
        EcoResAttributeValue        attributeValue;
        EcoResValue                 value;
        PCComponentInstanceValue    instanceValue;
        PCSolverVariable            solverVariable;

        if (adaptorComponent)
        {
            while select Name from solverVariable
                join    TableId from categoryAttribute
                    where   categoryAttribute.Attribute == solverVariable.Attribute
                    join    TableId from attributeBinding
                        where   attributeBinding.TemplateComponent == templateComponent.RecId
                            &&  attributeBinding.CategoryAttribute == categoryAttribute.RecId
                        join    ReferencedFieldId from templateAttribute
                            where   templateAttribute.RecId == attributeBinding.TemplateAttribute
                                &&  (!findTableId || !findFieldId || (findFieldId == templateAttribute.ReferencedFieldId))
                            join    ReferencedTableId from template
                                where   template.RecId == templateAttribute.Template
                                    &&  (!findTableId || !findFieldId || (findTableId == template.ReferencedTableId))

            {
                loadedTemplates.insert([template.ReferencedTableId, templateAttribute.ReferencedFieldId],
                    adaptorComponent.getAttribute(solverVariable.Name).parmParsedValue());
            }
        }
        else
        {
            while select value
            join TableId from attributeValue
                where   attributeValue.Value == value.RecId
                join    TableId from instanceValue
                    where   instanceValue.ComponentInstance == componentInstance.RecId
                    &&      instanceValue.RecId             == attributeValue.InstanceValue
                    join    TableId from attribute
                        where   attribute.RecId == attributeValue.Attribute
                        join    TableId from categoryAttribute
                            where   categoryAttribute.Attribute == attribute.RecId
                            join    TableId from attributeBinding
                                where   attributeBinding.TemplateComponent == templateComponent.RecId
                                &&      attributeBinding.CategoryAttribute == categoryAttribute.RecId
                                join    ReferencedFieldId from templateAttribute
                                    where   templateAttribute.RecId == attributeBinding.TemplateAttribute
                                        &&  (!findTableId || !findFieldId || (findFieldId == templateAttribute.ReferencedFieldId))
                                    join    ReferencedTableId from template
                                        where   template.RecId == templateAttribute.Template
                                            &&  (!findTableId || !findFieldId || (findTableId == template.ReferencedTableId))

            {
                loadedTemplates.insert([template.ReferencedTableId, templateAttribute.ReferencedFieldId], value.pcGetStringValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadConstants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the constant values into the context.
    /// </summary>
    protected void loadConstants()
    {
        EcoResValue                 value;
        PCTemplateConstant          constantBinding;
        PCTemplateAttribute         templateAttribute;  // field reference
        PCTemplate                  template;           // table reference

        while select value
            join TableId from constantBinding
            where   constantBinding.ConstantValue == value.RecId
                &&  constantBinding.TemplateComponent == templateComponent.RecId
                join    ReferencedFieldId from templateAttribute
                where   templateAttribute.RecId == constantBinding.TemplateAttribute
                    &&  (!findTableId || !findFieldId || (findFieldId == templateAttribute.ReferencedFieldId))
                    join    ReferencedTableId from template
                        where   template.RecId == templateAttribute.Template
                            &&  (!findTableId || !findFieldId || (findTableId == template.ReferencedTableId))
        {
            loadedTemplates.insert([template.ReferencedTableId, templateAttribute.ReferencedFieldId], value.pcGetStringValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the context values.
    /// </summary>
    public void loadContext()
    {
        loadedTemplates = new Map(Types::Container, Types::String);

        PCContractNotNull::assertRecord(templateComponent, funcName());

        this.loadConstants();
        this.loadAttributeValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComponentInstance</Name>
				<Source><![CDATA[
    public PCComponentInstance parmComponentInstance(PCComponentInstance _componentInstance = componentInstance)
    {
        componentInstance = _componentInstance;

        return componentInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateComponent</Name>
				<Source><![CDATA[
    public PCTemplateComponent parmTemplateComponent(PCTemplateComponent _templateComponent = templateComponent)
    {
        templateComponent = _templateComponent;

        return templateComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCTemplateFind construct()
    {
        PCTemplateFind templateFind = new PCTemplateFind();

        return templateFind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForTargetedUsage</Name>
				<Source><![CDATA[
    public static PCTemplateFind constructForTargetedUsage(PCAdaptorComponent _pcAdaptorComponent, PCAdaptorBOMLine _adaptorBOMLine)
    {
        PCTemplateFind templateFind = PCTemplateFind::construct();
        templateFind.parmAdaptorComponent(_pcAdaptorComponent);
        templateFind.parmTemplateComponent(_adaptorBOMLine.getTemplateComponent());
        templateFind.parmComponentInstance(_adaptorBOMLine.getComponentInstance());
        templateFind.parmFindTableId(tableNum(BOM));
        templateFind.parmFindFieldId(fieldNum(BOM, ItemId));
        templateFind.loadContext();
        return templateFind;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdaptorComponent</Name>
				<Source><![CDATA[
    public PCAdaptorComponent parmAdaptorComponent(PCAdaptorComponent _adaptorComponent = adaptorComponent)
    {
        adaptorComponent = _adaptorComponent;

        return adaptorComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFindFieldId</Name>
				<Source><![CDATA[
    public FieldId parmFindFieldId(TableId _findFieldId = findFieldId)
    {
        findFieldId = _findFieldId;

        return findFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFindTableId</Name>
				<Source><![CDATA[
    public TableId parmFindTableId(TableId _findTableId = findTableId)
    {
        findTableId = _findTableId;

        return findTableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>