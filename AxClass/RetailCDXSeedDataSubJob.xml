<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXSeedDataSubJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create sub jobs for retail scheduler.
/// </summary>
class RetailCDXSeedDataSubJob
{
    container jobIDs;
    RetailConnSubJobId subjobID;
    str subjobName;

    str channelTableSchemaName;
    RetailConnTableName channelTableName;
    RetailConnTableName fullChannelTableName;
    container channelFieldNames;

    container fullChannelExtensionTableNames;

    TableName axTableName;
    container axFieldNames;

    RefRecId channelSchema;
    boolean replicateDataAreaID;

    boolean isUpload;
    TableName tempDBTableName;
    FieldName replicationCounterFieldName;
    boolean forReferenceOnly;
    private RetailDateFilterField dateFilterField;
    private boolean updateSubjobsOnly = false;
    private boolean allowSkipDataSync;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends field mapping to a sub job.
    /// </summary>
    public void appendFieldMapping()
    {
        RetailConnSchedulerSubjobFieldList fieldList;
        int i;
        FieldName axFieldName;
        FieldName fieldName;
        DictField df;
        TableId tid;
        FieldName fromFieldName;
        FieldName toFieldName;

        RetailConnSchedulerSubjobTable subjob;
        ;

        select firstonly axTableName from subjob where subjob.SubJobId == subjobID;

        if (!subjobID || !subjob)
        {
            // Subjob ID not set.
            throw Global::error("@RET4040130");
        }

        ttsbegin;

        tid = tableName2id(subjob.axTableName);

        for (i = 1; i <= conLen(channelFieldNames); ++i)
        {
            fieldName = conPeek(channelFieldNames, i);
            axFieldName = conPeek(axFieldNames, i);

            df = new DictField(tid, fieldName2id(tid, axFieldName));

            if (!df)
            {
                throw Global::error(strFmt("@SYS75684", axFieldName, axTableName));
            }

            if (isUpload)
            {
                fromFieldName = fieldName;
                toFieldName = df.name();
            }
            else
            {
                fromFieldName = df.name();
                toFieldName = fieldName;
            }

            select forupdate fieldList
                where fieldList.SubjobId == subjobID
                   && fieldList.FromFieldName == fromFieldName
                   && fieldList.ToFieldName == toFieldName;

            if (!fieldList)
            {
                fieldList.initValue();
                fieldList.FromFieldName = fromFieldName;
                fieldList.ToFieldName = toFieldName;
                fieldList.SubjobId = subjobID;
                fieldList.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFullChannelTableName</Name>
				<Source><![CDATA[
        private void buildFullChannelTableName()
    {
        if (channelTableSchemaName)
        {
            fullChannelTableName = channelTableSchemaName + '.' + channelTableName;
        }
        else
        {
            fullChannelTableName = channelTableName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new scheduler job line in the table <C>RetailConnSchedulerJobLine</C>.
    /// </summary>
    protected void createJobLine()
    {
        RetailConnSchedulerJobLine jobLine;
        LineNum lineNum;
        int i;
        RetailConnJobId jobID;
        ;

        for (i = 1; i <= conLen(jobIDs); ++i)
        {
            jobID = conPeek(jobIDs, i);
            jobID = this.suffixJobID(jobID);

            select firstonly jobLine where jobLine.JobId == jobID && jobLine.SubJobId == subjobID;

            if (!jobLine)
            {
                select maxof(LineNum) from jobLine where jobLine.JobId == jobID;
                lineNum = jobLine.LineNum + 1;

                jobLine.initValue();
                jobLine.JobId = jobID;
                jobLine.SubJobId = subjobID;
                jobLine.Enabled = NoYes::Yes;
                jobLine.LineNum = lineNum;
                jobLine.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSchemaInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates schema information in <c>RetailConnLocationDesignTable</c> and <c>RetailConnLocationDesignTableField</c>.
    /// </summary>
    protected void createSchemaInfo()
    {
        RetailConnLocationDesignTable designTable;

        select forupdate designTable
            where designTable.RetailConnChannelSchema == channelSchema
               && designTable.LocationTableName == fullChannelTableName;

        if (!designTable)
        {
            designTable.initValue();
            designTable.RetailConnChannelSchema = channelSchema;
            designTable.LocationTableName = fullChannelTableName;
            designTable.insert();
        }

        RecordInsertList designFieldList = new RecordInsertList(tableNum(RetailConnLocationDesignTableField));

        TableId tableId = tableName2Id(axTableName);

        for (int i = 1; i <= conLen(channelFieldNames); ++i)
        {
            FieldName fieldName = conPeek(channelFieldNames, i);

            FieldName axFieldName = conPeek(axFieldNames, i);
            FieldId axFieldId = fieldName2Id(tableId, axFieldName);
            DictField axTblField = new DictField(tableId, axFieldId);

            if (!axTblField)
            {
                // Field %1 does not exist in table %2
                throw Global::error(strFmt("@SYS75684", axFieldName, axTableName));
            }

            // skip the field if the configuration key is disabled on this field. (Sql name info not available if field's config key is disabled)
            if (!axTblField.name(DbBackend::Sql))
            {
                continue;
            }

            RetailConnLocationDesignTableField designField;

            select forupdate designField
                where designField.RetailConnChannelSchema == channelSchema
                   && designField.LocationTableName == fullChannelTableName
                   && designField.FieldName == fieldName;

            if (!designField)
            {
                designField.initValue();
                designField.RetailConnChannelSchema = channelSchema;
                designField.LocationTableName = fullChannelTableName;
                designField.FieldName = fieldName;
                designField.fieldType = this.axFieldToRetailFieldType(axTblField);
                designField.fieldLength = axTblField.stringLen();

                designFieldList.add(designField);
            }
        }

        designFieldList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>axFieldToRetailFieldType</Name>
				<Source><![CDATA[
    private RetailConnFieldType axFieldToRetailFieldType(DictField axTblField)
    {
        Types axType = axTblField.baseType();

        RetailConnFieldType retailFieldType;

        switch (axType)
        {
            case Types::Int64:
                retailFieldType = RetailConnFieldTypeEnum::Int64;
                break;
            case Types::String:
            case Types::VarString:
                retailFieldType = RetailConnFieldTypeEnum::Text;
                break;
            case Types::Enum:
            case Types::Integer:
                 retailFieldType = RetailConnFieldTypeEnum::Integer;
                 break;
            case Types::UtcDateTime:
                 retailFieldType = RetailConnFieldTypeEnum::DateTime;
                 break;
            case Types::Date:
                 retailFieldType = RetailConnFieldTypeEnum::DateType;
                 break;
            case Types::Time:
                 retailFieldType = RetailConnFieldTypeEnum::TimeType;
                 break;
            case Types::Real:
                 retailFieldType = RetailConnFieldTypeEnum::Decimal;
                 break;
            case Types::Guid:
                 retailFieldType = RetailConnFieldTypeEnum::Guid;
                 break;
            case Types::Container:
                retailFieldType = RetailConnFieldTypeEnum::Binary;
                 break;
            default:
                throw error(strFmt("@Retail:InvalidColumnType", axTblField.name(), tableId2Name(axTblField.tableid())));
        }

        return retailFieldType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new sub job.
    /// </summary>
    protected void createSubJob()
    {
        RetailConnSchedulerSubjobTable subjob;
        ;

        // Creates non-pull subjobs.
        select forupdate subjob
            where subjob.SubJobId == subjobID;

        if (subjob)
        {
            subjob.Name = subjobName;
            subjob.axTableName = axTableName;

            subjob.ChannelTableName = fullChannelTableName;
            subjob.RetailConnChannelSchema = channelSchema;
            subjob.ReplicateDataAreaId = replicateDataAreaID;
            subjob.ForReferenceOnly = forReferenceOnly ? NoYes::Yes : NoYes::No;

            // Only updates UI fields if the record was not manually changed
            if (!subjob.ManuallyChanged)
            {
                subjob.AllowSkipDataSync = allowSkipDataSync;
            }

            if (isUpload)
            {
                subjob.TempDBTableName = tempDBTableName;
                subjob.ReplicationCounterFieldName = replicationCounterFieldName;
                subjob.DataReplicationByPull = NoYes::Yes;
            }

            subjob.update();
        }
        else
        {
            subjob.initValue();
            subjob.SubJobId = subjobID;
            subjob.Name = subjobName;
            subjob.axTableName = axTableName;
            subjob.ChannelTableName = fullChannelTableName;
            subjob.RetailConnChannelSchema = channelSchema;
            subjob.ReplicateDataAreaId = replicateDataAreaID;
            subjob.ForReferenceOnly = forReferenceOnly ? NoYes::Yes : NoYes::No;
            subjob.AllowSkipDataSync = allowSkipDataSync;

            if (isUpload)
            {
                subjob.TempDBTableName = tempDBTableName;
                subjob.ReplicationCounterFieldName = replicationCounterFieldName;
                subjob.DataReplicationByPull = NoYes::Yes;
            }

            subjob.Enabled = NoYes::Yes;
            subjob.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubJobFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates sub job fields list.
    /// </summary>
    protected void createSubJobFieldList()
    {
        RetailConnSchedulerSubjobFieldList fieldList;
        int i;
        FieldName axFieldName;
        FieldName fieldName;
        DictField df;
        TableId tid;
        FieldName fromFieldName;
        FieldName toFieldName;
        TableName tableName;

        tid = tableName2id(axTableName);
        tableName = axTableName;

        for (i = 1; i <= conLen(channelFieldNames); ++i)
        {
            fieldName = conPeek(channelFieldNames, i);
            axFieldName = conPeek(axFieldNames, i);

            df = new DictField(tid, fieldName2id(tid, axFieldName));

            if (!df)
            {
                throw Global::error(strFmt("@Retail:RetailFieldNotFoundInTable", axFieldName, tableName, subjobID));
            }

            if (!df.name(DbBackend::Sql))
            {
                // configuration key is disabled on this column. Show warning message and skip.
                Global::warning(strFmt("@Retail:RetailCDXFieldDisabledErrorMessage", tableName, axFieldName));
                continue;
            }

            if (isUpload)
            {
                fromFieldName = fieldName;
                toFieldName = df.name();
            }
            else
            {
                fromFieldName = df.name();
                toFieldName = fieldName;
            }

            // Check if the field already exists (using unique key).
            select forupdate fieldList
                where fieldList.SubjobId == subjobID
                   && fieldList.ToFieldName == toFieldName;

            if (!fieldList)
            {
                fieldList.initValue();
                fieldList.FromFieldName = fromFieldName;
                fieldList.ToFieldName = toFieldName;
                fieldList.SubjobId = subjobID;
                fieldList.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDateFilterField</Name>
				<Source><![CDATA[
    internal void createDateFilterField()
    {
        RetailCDXDateFilterField retailCDXDateFilterField = RetailCDXDateFilterField::find(channelSchema, axTableName, true);

        retailCDXDateFilterField.RetailConnChannelSchema = channelSchema;
        retailCDXDateFilterField.AXTableName = axTableName;
        retailCDXDateFilterField.DateFilterField = dateFilterField;

        if (retailCDXDateFilterField.validateWrite())
        {
            retailCDXDateFilterField.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createChannelExtensionTableDesign</Name>
				<Source><![CDATA[
    private void createChannelExtensionTableDesign()
    {
        if (conLen(fullChannelExtensionTableNames) > 0)
        {
            RetailConnLocationDesignTable designTable;
            str parentTableName = RetailConnSchedulerSubjobTable::find(this.subjobID).ChannelTableName;
            
            select designTable 
                where designTable.locationTableName == parentTableName &&
                designTable.RetailConnChannelSchema == this.channelSchema;
            
            RefRecId parentTableLocationDesignRecId = designTable.RecId;

            for (int i = 1; i <= conLen(fullChannelExtensionTableNames); i++)
            {
                select designTable
                    where designTable.locationTableName == conPeek(fullChannelExtensionTableNames, i) &&
                        designTable.RetailConnChannelSchema == this.channelSchema;

                if (!designTable.RecId)
                {
                    designTable.locationTableName = conPeek(fullChannelExtensionTableNames, i);
                    designTable.RetailConnChannelSchema = this.channelSchema;
                    designTable.ParentTable = parentTableLocationDesignRecId;
                    designTable.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramAXFieldNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field names.
    /// </summary>
    /// <param name="_axFieldNames">
    /// Container which have the fields value of scheduler job line.
    /// </param>
    /// <returns>
    /// Container which have the fields value of scheduler sub job line.
    /// </returns>
    public container paramAXFieldNames(container _axFieldNames)
    {
        axFieldNames = _axFieldNames;
        return axFieldNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramAXTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the table name.
    /// </summary>
    /// <param name="_axTableName">
    /// The table name.
    /// </param>
    /// <returns>
    /// The table name.
    /// </returns>
    public TableName paramAXTableName(TableName _axTableName)
    {
        axTableName = _axTableName;
        return axTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramChannelFieldNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for field names in the scheduler sub job line.
    /// </summary>
    /// <param name="_fieldNames">
    /// Contains all fieldNames.
    /// </param>
    /// <returns>
    /// List of all field names.
    /// </returns>
    public container paramChannelFieldNames(container _fieldNames)
    {
        channelFieldNames = _fieldNames;
        return channelFieldNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramFullChannelExtensionTableNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for full channel extension table names in the scheduler sub job.
    /// </summary>
    /// <param name="_fullTableNames">
    /// Contains all extension table names.
    /// </param>
    /// <returns>
    /// List of all extension table names.
    /// </returns>
    public container paramFullChannelExtensionTableNames(container _fullTableNames)
    {
        fullChannelExtensionTableNames = _fullTableNames;
        return fullChannelExtensionTableNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramChannelSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for channel schema.
    /// </summary>
    /// <param name="_channelSchema">
    /// The given value for channel schema.
    /// </param>
    /// <returns>
    /// The value of channel schema.
    /// </returns>
    public RefRecId paramChannelSchema(RefRecId _channelSchema)
    {
        channelSchema = _channelSchema;
        return channelSchema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramChannelTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for table name.
    /// </summary>
    /// <param name="_tableName">
    /// The value to be set to table name.
    /// </param>
    /// <returns>
    /// The table name.
    /// </returns>
    public RetailConnTableName paramChannelTableName(RetailConnTableName _tableName)
    {
        channelTableName = _tableName;
        return channelTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramChannelTableSchemaName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of channel table schema name.
    /// </summary>
    /// <param name="_channelTableSchemaName">
    /// Channel table schema name.
    /// </param>
    /// <returns>
    /// Channel table schema name.
    /// </returns>
    public str paramChannelTableSchemaName(str _channelTableSchemaName)
    {
        channelTableSchemaName = _channelTableSchemaName;
        return channelTableSchemaName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramForReferenceOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of channel table schema name.
    /// </summary>
    /// <param name="_forReferenceOnly">
    /// Subjob is for change tracking reference and is not sent down
    /// </param>
    /// <returns>
    /// ForReferenceOnly value
    /// </returns>
    public boolean paramForReferenceOnly(boolean _forReferenceOnly = forReferenceOnly)
    {
        forReferenceOnly = _forReferenceOnly;
        return forReferenceOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramIsUpload</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value if the subjob is an upload job.
    /// </summary>
    /// <param name="_isUpload">
    /// Is upload.
    /// </param>
    /// <returns>
    /// Is upload.
    /// </returns>
    public boolean paramIsUpload(boolean _isUpload)
    {
        isUpload = _isUpload;
        return isUpload;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramAllowSkipDataSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value if the subjob should be disabled in offline mode.
    /// </summary>
    /// <param name="_allowSkipDataSync">
    /// Is upload.
    /// </param>
    /// <returns>
    /// Allow skip data sync value.
    /// </returns>
    public boolean paramAllowSkipDataSync(boolean _allowSkipDataSync)
    {
        allowSkipDataSync = _allowSkipDataSync;
        return allowSkipDataSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramJobIDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for job ID.
    /// </summary>
    /// <param name="_jobIDs">
    /// Contains all job Id's of scheduler sub job line.
    /// </param>
    /// <returns>
    /// Container which have the job ids of scheduler sub job line.
    /// </returns>
    public container paramJobIDs(container _jobIDs)
    {
        jobIDs = _jobIDs;
        return jobIDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramReplicateDataAreaID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for <c>ReplicateDataAreaID</c> field.
    /// </summary>
    /// <param name="_replicateDataAreaID">
    /// The value to be set to <c>ReplicateDataAreaID</c> field.
    /// </param>
    /// <returns>
    /// The value of <c>ReplicateDataAreaID</c>.
    /// </returns>
    public boolean paramReplicateDataAreaID(boolean _replicateDataAreaID)
    {
        replicateDataAreaID = _replicateDataAreaID;
        return replicateDataAreaID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramReplicationCounterFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialises the field name.
    /// </summary>
    /// <param name="_replicationCounterFieldName">
    /// The name of the field.
    /// </param>
    /// <returns>
    /// Field name.
    /// </returns>
    public FieldName paramReplicationCounterFieldName(TableName _replicationCounterFieldName)
    {
        replicationCounterFieldName = _replicationCounterFieldName;
        return replicationCounterFieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubJobID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for sub job ID.
    /// </summary>
    /// <param name="_subjobID">
    /// The value of sub job ID.
    /// </param>
    /// <returns>
    /// The value of sub job ID of scheduler sub job line.
    /// </returns>
    public RetailConnSubJobId paramSubJobID(RetailConnSubJobId _subjobID)
    {
        subjobID = _subjobID;
        return subjobID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramSubJobName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for sub job name.
    /// </summary>
    /// <param name="_subjobName">
    /// The value to be set to sub job name.
    /// </param>
    /// <returns>
    /// The value of sub job name.
    /// </returns>
    public str paramSubJobName(str _subjobName)
    {
        subjobName = _subjobName;
        return subjobName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramTempDBTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialses the table name.
    /// </summary>
    /// <param name="_tempDBTableName">
    /// The name of the table.
    /// </param>
    /// <returns>
    /// Table name.
    /// </returns>
    public TableName paramTempDBTableName(TableName _tempDBTableName)
    {
        tempDBTableName = _tempDBTableName;
        return tempDBTableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDateFilterField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the date filter field.
    /// </summary>
    /// <param name="_dateFilterField">
    /// The date filter field for the table.
    /// </param>
    /// <returns>
    /// The date filter field for the table.
    /// </returns>
    internal RetailDateFilterField paramDateFilterField(RetailDateFilterField _dateFilterField)
    {
        dateFilterField = _dateFilterField;
        return dateFilterField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramUpdateSubjobsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of updateSubjobsOnly
    /// </summary>
    /// <param name = "_updateSubjobsOnly"/>
    /// <returns>The value of updateSubjobsOnly</returns>
    internal boolean paramUpdateSubjobsOnly(boolean _updateSubjobsOnly = updateSubjobsOnly)
    {
        updateSubjobsOnly = _updateSubjobsOnly;
        return _updateSubjobsOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates sub job and sub job field list to create scheduler job line in the table <C>RetailConnSchedulerJobLine</C>.
    /// </summary>
    public void run()
    {

        // Validations that will throw an exception
        this.validate();

        // skip creating the current sub job if the source table is not configured for use.
        if(this.isSourceTableReadyForUse())
        {

            this.buildFullChannelTableName();

            ttsbegin;

            this.createSchemaInfo();
            this.createSubJob();
            this.createSubJobFieldList();

            // UpdateSubjobsOnly is called during KB updates, so we don't add subjobs to jobs which could be a breaking change if the customer has customized the jobs through UI.
            if (!this.paramUpdateSubjobsOnly())
            {
                this.createJobLine();
            }

            this.createChannelExtensionTableDesign();

            if (!isUpload)
            {
                this.createDateFilterField();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>suffixJobID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <C>RetailConnJobId</C> based on schema type in the table <C>retailConnChannelSchema</C>.
    /// </summary>
    /// <param name="jobID">
    /// Value of job ID.
    /// </param>
    /// <returns>
    /// Return the value of <C>RetailConnJobId</C> based on schema type in the table <C>retailConnChannelSchema</C>.
    /// </returns>
    protected RetailConnJobId suffixJobID(str jobID)
    {
        RetailConnChannelSchema retailConnChannelSchema;
        RetailConnJobId fullJobID;
        ;

        select firstonly SchemaType from retailConnChannelSchema where retailConnChannelSchema.RecId == channelSchema;

        switch (retailConnChannelSchema.SchemaType)
        {
            case RetailConnChannelSchemaTypeEnum::AX5POS:
                fullJobID = jobID + '_AX5';
                break;

            case RetailConnChannelSchemaTypeEnum::AX61POS:
                fullJobID = jobID + '_AX61';
                break;

            case RetailConnChannelSchemaTypeEnum::AX62POS:
                fullJobID = jobID + '_AX62';
                break;

            default:
                fullJobID = jobID;
                break;
        }

        if (isUpload)
        {
            fullJobID = 'P-' + fullJobID;
        }

        return fullJobID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the table name and field name to create new scheduler subjob in <C>RetailConnSchedulerJobLine</C>.
    /// </summary>
    protected void validate()
    {
        if (!channelTableName)
        {
            // Channel table name not set.
            throw Global::error("@RET4040125");
        }

        if (!axTableName)
        {
            // AX table name not set.
            throw Global::error("@RET4040126");
        }

        if (!channelFieldNames || conLen(channelFieldNames) == 0)
        {
            // Channel field list not set.
            throw Global::error("@RET4040127");
        }

        if (!axFieldNames || conLen(axFieldNames) == 0)
        {
            // AX field list not set.
            throw Global::error("@RET4040128");
        }

        if (conLen(channelFieldNames) != conLen(axFieldNames))
        {
            // Field list length does not match.
            throw Global::error("@RET4040129");
        }

        if (!subjobID)
        {
            // Subjob ID not set.
            throw Global::error("@RET4040130");
        }

        if (!subjobName)
        {
            // Subjob name not set.
            throw Global::error("@RET4040131");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSourceTableReadyForUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the table name and field name and skip if not present.
    /// </summary>
    private boolean isSourceTableReadyForUse()
    {
        TableId tid = tableName2id(this.axTableName);

        if (tid <= 0)
        {
            // table does not exist
            Global::warning(strFmt("@Retail:CdxTableIsNotReadyForUseWarningMessage", this.axTableName));
            return false;
        }

        // if table is disabled by configuration key, show warning message and skip.
        DictTable dt;
        dt = new DictTable(tid);

        if (!dt.enabled())
        {
            Global::warning(strFmt("@Retail:RetailCDXTableDisabledErrorMessage", this.axTableName));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUploadSubjob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating an upload subjob.
    /// </summary>
    /// <param name="_jobIDs">
    /// Container holding the jobIDs.
    /// </param>
    /// <param name="_subjobID">
    /// String value for a subjobID.
    /// </param>
    /// <param name="_subjobName">
    /// String value subjob name.
    /// </param>
    /// <param name="_tableName">
    /// The name of the table.
    /// </param>
    /// <param name="_axTableName">
    /// The name of the ax table name.
    /// </param>
    /// <param name="_fieldNames">
    /// Container holding the field names.
    /// </param>
    /// <param name="_axFieldNames">
    /// Container holding the ax field names.
    /// </param>
    /// <param name="_tempDBTableName">
    /// The name of the temp DB table.
    /// </param>
    /// <param name="_replicationCounterFieldName">
    /// The name of the field.
    /// </param>
    /// <param name="_channelSchema">
    /// Reference RecID for the record.
    /// </param>
    public static void createUploadSubjob(container _jobIDs, str _subjobID, str _subjobName,
        TableName _tableName, TableName _axTableName, container _fieldNames, container _axFieldNames,
        TableName _tempDBTableName, FieldName _replicationCounterFieldName,
        RefRecId _channelSchema)
    {
        RetailCDXSeedDataSubJob subjobCreation = new RetailCDXSeedDataSubJob();

        subjobCreation.paramJobIDs(_jobIDs);
        subjobCreation.paramSubJobID(_subjobID);
        subjobCreation.paramSubJobName(_subjobName);
        subjobCreation.paramChannelTableName(_tableName);
        subjobCreation.paramAXTableName(_axTableName);
        subjobCreation.paramChannelFieldNames(_fieldNames);
        subjobCreation.paramAXFieldNames(_axFieldNames);
        subjobCreation.paramChannelSchema(_channelSchema);
        subjobCreation.paramTempDBTableName(_tempDBTableName);
        subjobCreation.paramReplicationCounterFieldName(_replicationCounterFieldName);
        subjobCreation.paramIsUpload(true);
        subjobCreation.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main method which initiates the call for the other methods.
    /// </summary>
    /// <param name="_jobIDs">
    /// List of all job ids.
    /// </param>
    /// <param name="_subjobID">
    /// The sub job id.
    /// </param>
    /// <param name="_subjobName">
    /// The sub job name.
    /// </param>
    /// <param name="_tableName">
    /// The table name.
    /// </param>
    /// <param name="_axTableName">
    /// The table name.
    /// </param>
    /// <param name="_fieldNames">
    /// Container which have the fieldNames scheduler job line.
    /// </param>
    /// <param name="_axFieldNames">
    /// Container which have the fieldNames scheduler job line.
    /// </param>
    /// <param name="_channelSchema">
    /// The channel schema.
    /// </param>
    /// <param name="_replicateDataAreaID">
    /// A boolean value which indicates whether replication of <c>DataAreaID</c> is required.
    /// </param>
    public static void main(container _jobIDs, str _subjobID, str _subjobName, TableName _tableName, TableName _axTableName,
        container _fieldNames, container _axFieldNames,
        RefRecId _channelSchema, boolean _replicateDataAreaID = false)
    {
        RetailCDXSeedDataSubJob subjobCreation = new RetailCDXSeedDataSubJob();

        subjobCreation.paramJobIDs(_jobIDs);
        subjobCreation.paramSubJobID(_subjobID);
        subjobCreation.paramSubJobName(_subjobName);
        subjobCreation.paramChannelTableName(_tableName);
        subjobCreation.paramAXTableName(_axTableName);
        subjobCreation.paramChannelFieldNames(_fieldNames);
        subjobCreation.paramAXFieldNames(_axFieldNames);
        subjobCreation.paramChannelSchema(_channelSchema);
        subjobCreation.paramReplicateDataAreaID(_replicateDataAreaID);
        subjobCreation.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>