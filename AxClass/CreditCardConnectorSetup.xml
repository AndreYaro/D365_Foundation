<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardConnectorSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The CreditCardConnectorSetup class provides a X++ only interface to the Payment Services SDK Manager for connector setup.
/// </summary>
/// <remarks>
/// The following apply to methods of this class:
/// - All indices are 1 based.
/// - A connector is known by its name. Methods: getName(), getCount(), getIndex().
/// - A connector has properties (metadata). A method that deals with metadata has
///   "Property" or "Properties" in its name.
///   Methods: getPropertiesByName(), getPropertiesAsXmlString(),
/// - A method that deals with a collections of property values in the UI has
///   "Group" in its name. Call setParentControl() before using any of these methods.
///    Methods: displayGroupByName()
/// - A connector property has a property value. A method that deals with property
///   values has "PropertyValue" or PropertyValues in its name. Their use depends
///   on calling setParentControl() first.
///   Methods: displayPropertyValuesFromXmlString(), getPropertyValuesAsXmlString(), validatePropertyValues().
/// - Names (connector names) are the primary mechanism to refer to a connector
///   or groups of property values or properties.
/// - There is a one-to-one correspondence between a connector and groups of property values or properties,
///   and the same name is used in all cases.
/// </remarks>
using Retail=Microsoft.Dynamics.Retail;

class CreditCardConnectorSetup
{
    // NOTE: children of parent and the elements in the following arrays are parallel.
    FormGroupControl parent; // Control under which each connectors properties are displayed
    str connectorName[]; // Name of each connector
    System.Object[] connectorProperties; // Metadata properties for each connector
    const str binFolderName = '\\bin\\';
    const str controlName = 'connectorProperty';
    const str paymentConnectorModelPattern = 'RetailPaymentConnectors*';
    int lastControlNumber = 0;

#CreditCard
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPropertiesToGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to a group for the specified properties.
    /// </summary>
    /// <param name="_groupControl">
    /// A group control.
    /// </param>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    /// <param name="_methodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    protected void addPropertiesToGroup(FormGroupControl _groupControl, Retail.PaymentSDK.Portable.PaymentProperty[] _properties, MethodName _methodName)
    {
        _groupControl.widthMode(1);

        var n = _properties ? _properties.get_Count() : 0;

        for (var i = 1; i <= n; i++)
        {
            this.addPropertyToGroup(_groupControl, _properties.get_Item(i - 1), _methodName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the prefix used for naming the autogenerated UI controls that are used to render the connector properties on the UI.
    /// </summary>
    /// <returns>The control name prefix.</returns>
    protected str getControlName()
    {
        return controlName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyToGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a control to a group for the specified property.
    /// </summary>
    /// <param name="_group">
    /// A group control.
    /// </param>
    /// <param name="_property">
    /// A property.
    /// </param>
    /// <param name="_methodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    protected void addPropertyToGroup(FormGroupControl _group, Retail.PaymentSDK.Portable.PaymentProperty _property, MethodName _methodName)
    {
        var isHidden = _property.get_IsHidden();
        var displayName = _property.get_DisplayName() ? _property.get_DisplayName() : _property.get_Name(); // if there is no localized display name use the name of the property.
        var propLabel = isHidden ? 'Hidden' : displayName;

        lastControlNumber++;
        var propName = strfmt('%1%2', this.getControlName(), lastControlNumber);

        switch (_property.get_ValueType())
        {
        case Retail.PaymentSDK.Portable.DataType::DateTime:
            FormDateTimeControl fieldDateTimeControl = _group.addControl(FormControlType::DateTime, propName);
            if (_methodName)
            {
                fieldDateTimeControl.registerOverrideMethod('modified', _methodName);
            }

            fieldDateTimeControl.widthMode(2);
            fieldDateTimeControl.label(propLabel);
            fieldDateTimeControl.visible(!isHidden);

            break;
        case Retail.PaymentSDK.Portable.DataType::Decimal:
            FormRealControl fieldRealControl = _group.addControl(FormControlType::Real, propName);
            if (_methodName)
            {
                fieldRealControl.registerOverrideMethod('modified', _methodName);
            }
            fieldRealControl.displayLength(255);
            fieldRealControl.widthMode(FormWidth::SizeToAvailable);
            fieldRealControl.label(propLabel);
            fieldRealControl.visible(!isHidden);
            break;
        case Retail.PaymentSDK.Portable.DataType::String:
            FormStringControl fieldStringControl = _group.addControl(FormControlType::String, propName);
            if (_methodName)
            {
                fieldStringControl.registerOverrideMethod('modified', _methodName);
            }
            fieldStringControl.displayLength(255);
            fieldStringControl.widthMode(FormWidth::SizeToAvailable);

            var displayHeight = _property.get_DisplayHeight();

            if (displayHeight > 1)
            {
                fieldStringControl.multiLine(true);
                fieldStringControl.displayHeight(displayHeight);
            }
            fieldStringControl.label(propLabel);
            if (_property.get_IsEncrypted())
            {
                fieldStringControl.passwordStyle(true);
            }
            fieldStringControl.visible(!isHidden);
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the properties of a connector to a newly created <c>FormGroupControl</c> control.
    /// </summary>
    /// <param name="_methodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    protected void addToGroup(MethodName _methodName)
    {
        var n = connectorProperties.get_Count();

        for (var i = 1; i <= n; i++)
        {
            FormGroupControl connectorGroup = parent.addControl(FormControlType::Group, connectorName[i]);
            this.addPropertiesToGroup(connectorGroup, connectorProperties.get_Item(i - 1), _methodName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayGroupByIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes only the specified group visible.
    /// </summary>
    /// <param name="_i">
    /// The index of a <c>FormGroupControl</c> control.
    /// </param>
    protected void displayGroupByIndex(int _i)
    {
        var n = connectorProperties.get_Count();

        parent.formRun().lockWindowUpdate(true);
        for (var i = 1; i <= n; i++)
        {
            FormGroupControl groupControl = parent.controlNum(i);
            groupControl.visible(_i == i);
        }
        parent.formRun().lockWindowUpdate(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayGroupByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes only the specified group visible.
    /// </summary>
    /// <param name="_name">The connector name.</param>
    public void displayGroupByName(CreditCardConnectorName _name)
    {
        this.displayGroupByIndex(this.getIndex(_name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of a control for a given property.
    /// </summary>
    /// <param name="_value">
    /// The property from which the value will be taken.
    /// </param>
    /// <param name="_metadata">
    /// The property from which the characteristics of the value will be taken.
    /// </param>
    /// <param name="_control">
    /// The control where the value will be set.
    /// </param>
    protected void displayPropertyValue(Retail.PaymentSDK.Portable.PaymentProperty _value, Retail.PaymentSDK.Portable.PaymentProperty _metadata, FormControl _control)
    {
        if (CLRInterop::isNull(_value) || CLRInterop::isNull(_metadata))
        {
            return;
        }

        _control.allowEdit(!_value.get_IsReadOnly());
        switch (_metadata.get_ValueType())
        {
        case Retail.PaymentSDK.Portable.DataType::DateTime:
            FormDateTimeControl fieldDateTimeControl = _control;
            fieldDateTimeControl.dateTimeValue(_value ? clrSystemDateTime2UtcDateTime(_value.get_DateValue()) : DateTimeUtil::minValue());
            break;
        case Retail.PaymentSDK.Portable.DataType::Decimal:
            FormRealControl fieldRealControl = _control;
            fieldRealControl.realValue(_value ? _value.get_DecimalValue() : 0);
            break;
        case Retail.PaymentSDK.Portable.DataType::String:
            FormStringControl fieldStringControl = _control;
            fieldStringControl.text(_value ? _value.get_StringValue() : '');
            fieldStringControl.passwordStyle(_value.get_IsPassword());
            if (fieldStringControl.text() == '')
            {
                fieldStringControl.passwordStyle(false);
            }
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPropertyValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the payment property values on their respective UI controls.
    /// </summary>
    /// <param name="_propertyValues">The array of payment properties to be displayed</param>
    /// <param name="_name">The connector name.</param>
    protected void displayPropertyValues(Retail.PaymentSDK.Portable.PaymentProperty[] _propertyValues, CreditCardConnectorName _name)
    {
        var iConnector = this.getIndex(_name);
        Retail.PaymentSDK.Portable.PaymentProperty[] propertyMetadata = connectorProperties.get_Item(iConnector - 1);
        FormGroupControl groupControl = parent.controlNum(iConnector);
        var n = groupControl.controlCount();

        for (var i = 1; i <= n; i++)
        {
            // for each control, lookup the value by namespace.name using the corresponding (by index) metadata
            var metadata = propertyMetadata.get_Item(i - 1);
            var value = CreditCardConnectorSetup::findPropertyByName(_propertyValues, metadata.get_Namespace(), metadata.get_Name());
            this.displayPropertyValue(value, metadata, groupControl.controlNum(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPropertyValuesFromXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the payment property values on their respective UI controls.
    /// </summary>
    /// <param name="_name">The connector name</param>
    /// <param name="_propertyValuesAsXmlString">The XML string containing the array of payment properties to be displayed.</param>
    public void displayPropertyValuesFromXmlString(CreditCardConnectorName _name, str _propertyValuesAsXmlString)
    {
        // Display the right set of fields
        this.displayGroupByIndex(this.getIndex(_name));
        // Display the values in the fields
        this.displayPropertyValues(Retail.PaymentSDK.Portable.PaymentProperty::ConvertXMLToPropertyArray(_propertyValuesAsXmlString), _name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemine the number of connectors.
    /// </summary>
    /// <returns>
    /// A non-negative integer.
    /// </returns>
    public int getCount()
    {
        return connectorProperties.get_Count();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the index of a connector.
    /// </summary>
    /// <param name="_name">
    /// The name of a connector.
    /// </param>
    /// <returns>
    /// A positive integer or zero if the connector could not be found.
    /// </returns>
    public int getIndex(CreditCardConnectorName _name)
    {
        var n = connectorProperties.get_Count();

        for (var i = 1; i <= n; i++)
        {
            if (connectorName[i] == _name)
            {
                return i;
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of a connector.
    /// </summary>
    /// <param name="_i">A integer from 1 to the value of the <c>getCount</c> method.</param>
    /// <returns>The connector name.</returns>
    public CreditCardConnectorName getName(int _i)
    {
        return connectorName[_i];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the properties associated with a given connector.
    /// </summary>
    /// <param name="_name">The connector name.</param>
    /// <returns>An array of payment properties.</returns>
    protected Retail.PaymentSDK.Portable.PaymentProperty[] getProperties(CreditCardConnectorName _name)
    {
        var request = new Retail.PaymentSDK.Portable.Request();

        request.set_Locale(currentUserLanguage());
        request.set_Properties(null);

        var processor = new CreditCardPaymentProcessorFactory().getProcessor(_name);
        var response = processor.GetMerchantAccountPropertyMetadata(request);

        return response.get_Properties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertiesAsXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the properties associated with a given connector.
    /// Gets properties directly from the dll. Should be used when creating a new
    /// <c>CreditCardAccountSetup</c>.
    /// </summary>
    /// <param name="_name">
    /// The name of a connector.
    /// </param>
    /// <returns>
    /// An array of properties represented in XML which contains the values.
    /// </returns>
    public str getPropertiesAsXmlString(CreditCardConnectorName _name)
    {
        str result = '';

        try
        {
            this.init();
            result = CreditCardPaymentProperties::convertPropertyArrayToXML(this.getPropertiesByName(_name));
        }
        catch
        {
            warning(strFmt('@Retail:PaymentConnectorNotFoundWarningLabel', connectorName));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertiesByIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the properties associated with a given connector.
    /// </summary>
    /// <param name="_i">
    /// The index of a connector.
    /// </param>
    /// <returns>
    /// An array of properties.
    /// </returns>
    protected Retail.PaymentSDK.Portable.PaymentProperty[] getPropertiesByIndex(int _i)
    {
        return connectorProperties.get_Item(_i - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertiesByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the properties associated with a given connector.
    /// </summary>
    /// <param name="_name">
    /// The name of a connector.
    /// </param>
    /// <returns>
    /// An array of properties.
    /// </returns>
    protected Retail.PaymentSDK.Portable.PaymentProperty[] getPropertiesByName(CreditCardConnectorName _name)
    {
        return this.getPropertiesByIndex(this.getIndex(_name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a property with the value from the specified control.
    /// </summary>
    /// <param name="_property">
    /// A property.
    /// </param>
    /// <param name="_control">
    /// A control.
    /// </param>
    protected void getPropertyValue(Retail.PaymentSDK.Portable.PaymentProperty _property, FormControl _control)
    {
        switch (_property.get_ValueType())
        {
        case Retail.PaymentSDK.Portable.DataType::DateTime:
            FormDateTimeControl fieldDateTimeControl = _control;
            _property.set_DateValue(fieldDateTimeControl.dateTimeValue());
            break;
        case Retail.PaymentSDK.Portable.DataType::Decimal:
            FormRealControl fieldRealControl = _control;
            _property.set_DecimalValue(str2num(fieldRealControl.valueStr()));
            break;
        case Retail.PaymentSDK.Portable.DataType::String:
            FormStringControl fieldStringControl = _control;
            _property.set_StringValue(fieldStringControl.valueStr());
            break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPropertyValuesAsXmlString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns XML for the property values in the controls of the named connector.
    /// Get the properties from the form, this is because when we save we want to use
    /// the values that the user entered.
    /// </summary>
    /// <param name="_name">
    /// The name of a connector.
    /// </param>
    /// <returns>
    /// An array of properties represented in XML which contains the values.
    /// </returns>
    public str getPropertyValuesAsXmlString(CreditCardConnectorName _name)
    {
        var properties = this.groupToPropertyArray(parent.controlNum(this.getIndex(_name)));
        return CreditCardPaymentProperties::convertPropertyArrayToXML(properties);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupToPropertyArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an array of properties with values from the controls of the specified group.
    /// </summary>
    /// <param name="_propertyGroup">
    /// A group.
    /// </param>
    /// <returns>
    /// An array of properties.
    /// </returns>
    protected Retail.PaymentSDK.Portable.PaymentProperty[] groupToPropertyArray(FormGroupControl _propertyGroup)
    {
        var properties = this.getProperties(_propertyGroup.name());
        var n = properties ? properties.get_Count() : 0;

        for (var i = 1; i <= n; i++)
        {
            this.getPropertyValue(properties.get_Item(i - 1), _propertyGroup.controlNum(i));
        }
        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the object.
    /// </summary>
    protected void init()
    {
        System.String[] connectorNames = this.GetSupportedConnectors();
        var n = connectorNames ? connectorNames.get_Count() : 0;

        connectorProperties = new System.Object[n]();

        for (var i = 1; i <= n; i++)
        {
            this.initConnector(i, connectorNames.get_Item(i - 1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSupportedConnectors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of supported connector names available in the system.
    /// </summary>
    /// <returns>The list of connector names.</returns>
    protected System.String[] GetSupportedConnectors()
    {
        str callerName = 'CreditCardConnectorSetup';
        return RetailPaymentConnectorLookupTempTable::getArrayOfSupportedConnectors(callerName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initConnector</Name>
				<Source><![CDATA[
    /// <summary>
    /// Establishes the internal state of a connector.
    /// </summary>
    /// <param name="_i">The connector's index.</param>
    /// <param name="_name">The connector name</param>
    public void initConnector(int _i, CreditCardConnectorName _name)
    {
        connectorProperties.set_Item(_i - 1, this.getProperties(_name));
        connectorName[_i] = _name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.loadConnectorDLLs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadConnectorDLLs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the connector dlls deployed in the system.
    /// </summary>
    protected void loadConnectorDLLs()
    {
        Retail.SDKManager.Portable.PaymentProcessorManager::LoadAllAssemblies(CreditCardConnectorSetup::getConnectorsDirectories());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectorsDirectory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the name of the directory where the out-of-box connector dlls are stored at.
    /// </summary>
    /// <returns>The connector install directory name.</returns>
    public static str getConnectorsDirectory()
    {
        var environment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();

        str binPath = environment.get_Common().get_BinDir();

        return binPath + binFolderName + #CreditCardConnectorsFolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConnectorsDirectories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of directories where out-of-box and partners connector dlls are stored.
    /// </summary>
    /// <returns>The arrays of folders with payment connectors</returns>
    public static System.String[] getConnectorsDirectories()
    {
        var environment = Microsoft.Dynamics.ApplicationPlatform.Environment.EnvironmentFactory::GetApplicationEnvironment();
        str binPath = environment.get_Common().get_BinDir();

        // Get list of folders with partner's payment connectors.
        System.String[] folders = System.IO.Directory::GetDirectories(binPath, paymentConnectorModelPattern, System.IO.SearchOption::TopDirectoryOnly);

        // Create another array with extra item to include location of out-of-box connectors.
        System.String[] result = new System.String[folders.Length + 1]();

        // Set location of out-of-box connectors as last array item so other folders have higher priority.
        str path = binPath + binFolderName + #CreditCardConnectorsFolder;
        result.SetValue(path, folders.Length);

        // Copy rest of folders into result array.
        for (int ix = 0; ix < folders.Length; ix++)
        {
            path = folders.GetValue(ix).ToString() + binFolderName;
            result.SetValue(path, ix);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parent control for all connector groups.
    /// </summary>
    /// <param name="_parent">
    /// A group control.
    /// </param>
    /// <param name="_modifiedMethodName">
    /// The name of a method that will be the handler for the <c>modified</c> event.
    /// </param>
    public void setParentControl(FormGroupControl _parent, MethodName _modifiedMethodName = '')
    {
        parent = _parent;
        this.addToGroup(_modifiedMethodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePropertyValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the properties of a connector for correct values.
    /// </summary>
    /// <param name="_name">The connector name.</param>
    /// <returns>A collection of errors, if any. </returns>
    public CreditCardPaymentErrors validatePropertyValues(CreditCardConnectorName _name)
    {
        var request = new Retail.PaymentSDK.Portable.Request();

        request.SetProperties(this.groupToPropertyArray(parent.controlNum(this.getIndex(_name))));
        request.set_Locale(currentUserLanguage());

        var processor = new CreditCardPaymentProcessorFactory().getProcessor(_name);
        var response = processor.ValidateMerchantAccount(request);

        return CreditCardPaymentErrors::fromPaymentErrors(response.get_Errors());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>CreditCardConnectorSetup</c> class.
    /// </summary>
    /// <returns>The <c>CreditCardConnectorSetup</c> object.</returns>
    public static CreditCardConnectorSetup construct()
    {
        var setup = new CreditCardConnectorSetup();

        setup.init();

        return setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPropertyByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Locate a property by its namespace and name.
    /// </summary>
    /// <param name="_properties">
    /// An array of properties.
    /// </param>
    /// <param name="_namespace">
    /// A property namespace.
    /// </param>
    /// <param name="_name">
    /// A property name.
    /// </param>
    /// <returns>
    /// A property if one was found; otherwise, null.
    /// </returns>
    public static Retail.PaymentSDK.Portable.PaymentProperty findPropertyByName(Retail.PaymentSDK.Portable.PaymentProperty[] _properties, str _namespace, str _name)
    {
        if (_properties != null)
        {
            var n = _properties.get_Count();

            for (var i = 1; i <= n; i++)
            {
                var property = _properties.get_Item(i - 1);
                var namespaceCompare = System.String::CompareOrdinal(property.get_Namespace(), _namespace);
                var nameCompare = System.String::CompareOrdinal(property.get_Name(), _name);
                if (namespaceCompare == 0 && nameCompare == 0)
                {
                    return property;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>