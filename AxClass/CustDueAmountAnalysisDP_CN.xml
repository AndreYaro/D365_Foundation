<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDueAmountAnalysisDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Report Data Provider <c>CustDueAmountAnalysisDP_CN</c>
/// class is the data provider class for the <c>CustDueAmountAnalysis_CN</c> Report.
/// </summary>
public class CustDueAmountAnalysisDP_CN
{
    AgingAndDueAmountTmp_CN         custDueAmountAnalysisTmp_CN;
    TransDate                       toPeriod;
    CustAccount                     lastCustAccount;
    AmountMSTDebCred                dueAmount;
    AmountMSTDebCred                unDueAmount;
    AmountMSTDebCred                prepaymentAmount;
    String255                       custRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get customer range of current execution.
    /// </summary>
    /// <returns></returns>
    public String255 parmCustRange()
    {
        return custRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the recID of invoice transaction.
    /// </summary>
    /// <param name="_accountNum">The customer account number</param>
    /// <returns>
    /// Returns the recID of invoice transaction according to customer account number.
    /// </returns>
    private recId findInvoiceTrans(CustAccount _accountNum)
    {
        recId                       recid;
        custTrans                   custTransLocal;

        select firstOnly recId, TransType
            from custTransLocal
            where custTransLocal.AccountNum == _accountNum;

        if (custTransLocal.TransType == LedgerTransType::Sales || custTransLocal.TransType == LedgerTransType::Cust)
        {
            recid = custTransLocal.RecId;
        }

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertcustDueAmountAnalysisTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all the values into <c>AgingAndDueAmountTmp_CN</c> temp table.
    /// </summary>
    /// <param name = "_custAccount">Cutomer account</param>
    private void insertcustDueAmountAnalysisTmp_CN(CustAccount _custAccount)
    {
        AmountMSTDebCred    creditBalance;
        CustTable           custTable = CustTable::find(_custAccount);
        AmountMST           receivable;

        receivable = dueAmount + unDueAmount;

        custDueAmountAnalysisTmp_CN.AccountNum = lastCustAccount;
        custDueAmountAnalysisTmp_CN.AccountName = custTable.name();
        custDueAmountAnalysisTmp_CN.DueAmount = dueAmount;
        custDueAmountAnalysisTmp_CN.UndueAmount = unDueAmount;
        custDueAmountAnalysisTmp_CN.PrepaymentAmount = prepaymentAmount;
        custDueAmountAnalysisTmp_CN.CreditLimit = custTable.CreditMax;
        creditBalance = custTable.CreditMax - receivable + custDueAmountAnalysisTmp_CN.PrepaymentAmount;
        custDueAmountAnalysisTmp_CN.CreditBalance = (creditBalance > 0) ? creditBalance : 0;

        custDueAmountAnalysisTmp_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    /// <param name = "_contract">
    /// Instance of <c>AgingAndDueAmountTmp_CN</c>.
    /// </param>
    /// <returns>
    /// The <c>CustDueAmountAnalysisTmp_CN</c> contains the generated data.
    /// </returns>
    public AgingAndDueAmountTmp_CN prepareData(CustDueAmountAnalysisContract_CN _contract)
    {
        Query                query;
        QueryRun             queryRun;
        QueryBuildDataSource qbdsCustTrans;
        QueryBuildDataSource qbdsCustSettlement;
        QueryBuildRange      qbr;
        CustTrans            custTrans;
        CustTable            custTable;
        CustSettlement       custSettlement;
        CustTransRefRecId    offsetId;
        AmountMSTDebCred     currentAmountMST;

        toPeriod = _contract.parmAsOn();

        if (!toPeriod)
        {
            toPeriod = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        query = new Query(SysOperationHelper::base64Decode(_contract.parmQuery()));

        qbdsCustTrans = query.dataSourceTable(tableNum(CustTrans));
        SysQuery::findOrCreateRange(
            qbdsCustTrans,
            fieldnum(CustTrans, TransDate)).value(SysQuery::range(dateNull(), toPeriod));

        qbdsCustSettlement = query.dataSourceTable(tableNum(CustSettlement));
        SysQuery::findOrCreateRange(
            qbdsCustSettlement,
            fieldNum(CustSettlement, TransDate)).value(SysQuery::range(dateNull(), toPeriod));

        qbr       = qbdsCustTrans.range(1);
        custRange = qbr.value();

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            custTrans       = queryRun.get(tableNum(CustTrans));
            custTable       = queryRun.get(tableNum(CustTable));
            custSettlement  = queryRun.get(tableNum(CustSettlement));

            offsetId            = custTrans.OffsetRecid;
            currentAmountMST    = 0;

            if (custTrans.TransType == LedgerTransType::None && offsetId != this.findInvoiceTrans(custTrans.AccountNum))
            {
                continue;
            }

            if (lastCustAccount != custTrans.AccountNum)
            {
                if (this.hasDueOrUndueAmount())
                {
                    this.insertCustDueAmountAnalysisTmp_CN(lastCustAccount);
                }

                dueAmount           = 0;
                unDueAmount         = 0;
                prepaymentAmount    = 0;
            }

            if (custTrans.AmountMST)
            {
                if (custTrans.Prepayment == NoYes::No
                    && (custTrans.TransType == LedgerTransType::Sales
                        || custTrans.TransType == LedgerTransType::Cust
                        || custTrans.TransType == LedgerTransType::Payment
                        || custTrans.TransType == LedgerTransType::GeneralJournal))
                {
                    currentAmountMST = custTrans.AmountMST - custSettlement.SettleAmountMST;

                    if (toPeriod <= custTrans.DueDate)
                    {
                        unDueAmount += currentAmountMST;
                    }
                    else
                    {
                        dueAmount += currentAmountMST;
                    }
                }
                else if (custTrans.Prepayment == NoYes::Yes
                    && (custTrans.TransType == LedgerTransType::Payment
                        || custTrans.TransType == LedgerTransType::GeneralJournal))
                {
                    currentAmountMST = custTrans.AmountMST - custSettlement.SettleAmountMST;
                    currentAmountMST = -currentAmountMST;

                    prepaymentAmount += currentAmountMST;
                }
            }

            lastCustAccount = custTrans.AccountNum;
        }

        if (this.hasDueOrUndueAmount())
        {
            this.insertCustDueAmountAnalysisTmp_CN(lastCustAccount);
        }

        return custDueAmountAnalysisTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDueOrUndueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether value of dueAmount or unDueAmount is not zero.
    /// </summary>
    /// <returns>
    /// True if value of dueAmount or unDueAmount is not zero; otherwise, false.
    /// </returns>
    public boolean hasDueOrUndueAmount()
    {
        return dueAmount != 0 || unDueAmount != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>