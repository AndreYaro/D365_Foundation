<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetWorkflowHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>BudgetWorkflowHelper</c> class contains workflow-related
///   helper methods for budgeting.
/// </summary>
public static class BudgetWorkflowHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssignedUsersForPendingWorkItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the set of users assigned to work items with a pending
    ///   status associated with the specified table and ID.
    /// </summary>
    /// <param name="_tableId">
    ///   The table id of the budget record subject to workflow.
    /// </param>
    /// <param name="_recId">
    ///   The record id of the budget record subject to workflow.
    /// </param>
    /// <returns>
    ///   A set of users assigned to the workflow.
    ///   If no users are assigned, returns an empty set.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///   An error exception is thrown when the required parameters are null.
    /// </exception>
    public static Set getAssignedUsersForPendingWorkItems(TableId _tableId, RecId _recId)
    {
        if (!_tableId || !_recID)
        {
            throw error(
                strFmt(
                    "@Budget:MissingParameterValue",
                    staticmethodstr(BudgetWorkflowHelper, getAssignedUsersForPendingWorkItems),
                    tableId2PName(_tableId)));
        }

        SysWorkflowTable        sysWorkflowTable;
        WorkflowWorkItemTable   workflowWorkItemTable;
        Set                     userIDSet = new Set(Types::String);

        while select UserId from workflowWorkItemTable
            group by workflowWorkItemTable.UserId
            where workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending
            exists join sysWorkflowTable
                where sysWorkflowTable.ContextTableId == _tableId
                    && sysWorkflowTable.ContextRecId == _recId
                    && sysWorkflowTable.RootCorrelationId == workflowWorkItemTable.RootCorrelationId
        {
            userIDSet.add(workflowWorkItemTable.UserId);
        }

        return userIDSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedUsersTextToDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the text to display for the assigned workflow user.
    /// </summary>
    /// <param name="_tableId">
    ///   The table id of the budget record subject to workflow.
    /// </param>
    /// <param name="_recId">
    ///   The record id of the budget record subject to workflow.
    /// </param>
    /// <returns>
    ///     Returns the name of the assigned user.
    ///     The label "Multiple users" if multiple users are assigned or
    ///     empty string if no users are assigned.
    /// </returns>
    public static DirPartyName getAssignedUsersTextToDisplay(TableId _tableId, RecId _recId)
    {
        Set  userIDSet = BudgetWorkflowHelper::getAssignedUsersForPendingWorkItems(_tableId, _recId);
        DirPartyName assignedUsersText;

        if (userIDSet.elements() == 1)
        {
            SetEnumerator setEnumerator = userIDSet.getEnumerator();
            setEnumerator.moveNext();
            assignedUsersText = DirPersonUser::userId2Name(setEnumerator.current());
        }
        else if (userIDSet.elements() > 1)
        {
            assignedUsersText = "@Budget:BudgetWorkflowMultipleUsers";
        }

        return assignedUsersText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetHeaderRecordFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>BudgetTransactionHeader</c> record called from a drill back url args.
    /// </summary>
    internal static BudgetTransactionHeader getBudgetHeaderRecordFromQuery(str _query)
    {
        return RequestContextHelper::findRecordFromRequestContextQuery(_query, tableNum(BudgetTransactionHeader));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>