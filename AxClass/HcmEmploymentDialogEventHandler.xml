<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmEmploymentDialogEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite module form extension events for the HcmEmploymentDialog form.
/// </summary>
class HcmEmploymentDialogEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EmployeeId_RU_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  EmployeeId_RU form control OnModified event handler for the HcmEmploymentDialog form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEmploymentDialog, EmployeeId_RU), FormControlEventType::Modified)]
    public static void EmployeeId_RU_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun employmentDialogForm = _sender.formRun();
        employmentDialogForm.validateDates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmployeeId_RU_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// EmployeeId_RU form control OnValidated event handler for the HcmEmploymentDialog form extension.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEmploymentDialog, EmployeeId_RU), FormControlEventType::Validated)]
    public static void EmployeeId_RU_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun();
        FormStringControl employeeId_RU = formRun.design().controlName(formControlStr(HcmEmploymentDialog, EmployeeId_RU)) as FormStringControl;
        FormControlCancelEventArgs args = _e as FormControlCancelEventArgs;

        boolean validateResult = args.cancelled();

        if (validateResult && EmployeeTable_RU::findByEmployeeId(employeeId_RU.text()).RecId != 0)
        {
            validateResult = validateResult && warning("@Workforce:ThisWorkerIdIsAlreadyInUseEnterANewWorkerId");
        }

        args.cancel(validateResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntitySelection_Control_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  LegalEntitySelection_Control form control OnModified event handler for the HcmEmploymentDialog form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEmploymentDialog, LegalEntitySelection_Control), FormControlEventType::Modified)]
    public static void LegalEntitySelection_Control_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun();
        HcmEmploymentDialogEventHandler::enableEmployeeId_RU(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntityDropdown_Control_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  LegalEntityDropdown_Control form control OnModified event handler for the HcmEmploymentDialog form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmEmploymentDialog, LegalEntityDropdown_Control), FormControlEventType::Modified)]
    public static void LegalEntityDropdown_Control_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun formRun = _sender.formRun();
        HcmEmploymentDialogEventHandler::enableEmployeeId_RU(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentDialog_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for HcmEmploymentDialog form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PostHandlerFor(formStr(HcmEmploymentDialog), formMethodStr(HcmEmploymentDialog, init))]
    public static void HcmEmploymentDialog_Post_init(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        HcmEmploymentDialogEventHandler::enableEmployeeId_RU(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentDialog_creatingEmployment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes on the employeeId_RU value to the calling form in the evenhandler result.
    /// </summary>
    /// <param name = "_formElement">The employment dialog form instance that raised the event.</param>
    /// <param name="_result">EventHandler result</param>
    [SubscribesTo(formStr(HcmEmploymentDialog), delegateStr(HcmEmploymentDialog, creatingEmployment))]
    public static void HcmEmploymentDialog_creatingEmployment(FormRun _formElement, EventHandlerResult _result)
    {
        FormStringControl employeeId_RU = _formElement.design().controlName(formControlStr(HcmEmploymentDialog, EmployeeId_RU)) as FormStringControl;
        _result.result(employeeId_RU.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableEmployeeId_RU</Name>
				<Source><![CDATA[
    private static void enableEmployeeId_RU(FormRun _element)
    {
        boolean             isEEur,
                            addAction = _element.args().parmEnum() == HcmEmploymentAction::Add;

        CompanyInfoRecId    refRecId;
        SelectableDataArea  dataAreaId;

        FormStringControl legalEntitySelection_Control = _element.design().controlName(formControlStr(HcmEmploymentDialog, legalEntitySelection_Control)) as FormStringControl;
        FormStringControl employeeId_RU = _element.design().controlName(formControlStr(HcmEmploymentDialog, EmployeeId_RU)) as FormStringControl;

        HcmEmployment hcmEmployment = _element.getHcmEmployment();

        if (legalEntitySelection_Control.enabled())
        {
            refRecId = CompanyInfo::findDataArea(legalEntitySelection_Control.text()).RecId;
        }
        else
        {
            refRecId = hcmEmployment.LegalEntity;
        }

        dataAreaId = CompanyInfo::findRecId(refRecId).DataArea;
        isEEur = EmplParameters_RU::enableAdvanceHolders(dataAreaId);

        employeeId_RU.visible(isEEur);
        employeeId_RU.enabled(false);

        if (! isEEur)
        {
            employeeId_RU.text('');
        }
        else if (!addAction)
        {
            employeeId_RU.text(EmployeeTable_RU::findByEmployment(hcmEmployment.RecId, '', dataAreaId).EmployeeId);
        }
        else
        {
            hcmEmployment = HcmEmployment::findByWorkerLegalEntity(
                _element.args().record().RecId,
                CompanyInfo::current());

            EmployeeTable_RU employeeTable_RU;

            if (hcmEmployment)
            {
                employeeTable_RU = EmployeeTable_RU::findByEmployment(hcmEmployment.RecId);
            }

            if (!hcmEmployment || !employeeTable_RU)
            {
                utcdatetime minDateTime = DateTimeUtil::minValue();
                utcdatetime maxDateTime = DateTimeUtil::maxValue();

                select firstonly ValidTimeState(minDateTime, maxDateTime) TableId from hcmEmployment
                    where hcmEmployment.Worker == _element.args().record().RecId
                        && hcmEmployment.LegalEntity == CompanyInfo::current()
                join EmployeeId from employeeTable_RU
                    where employeeTable_RU.HcmEmployment == hcmEmployment.RecId;
            }

            employeeId_RU.text(employeeTable_RU.EmployeeId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>