<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBrokerARInvoicesUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRBrokerARInvoicesUIBuilder</c> is the UI Builder class for <c>MCRBrokerARInvoices</c> SSRS Report.
/// </summary>
public class MCRBrokerARInvoicesUIBuilder extends SrsReportDataContractUIBuilder
{
    MCRBrokerARInvoicesContract  contract;

    DialogField                 brokerField;
    DialogField                 salesIdField;
    DialogField                 fromDateField;
    DialogField                 toDateField;
    str                         brokerStr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>brokerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up applicable brokers.
    /// </summary>
    public void brokerLookup()
    {
        Query                   query;
        container               selectedFields;
        int                     mutiSelectTableNum = tablenum(DirPartyTable);

        query = new query(queryStr(MCRBrokerARInvoicesBroker));

        selectedFields = [mutiSelectTableNum, fieldname2id(mutiSelectTableNum, fieldstr(DirPartyTable, Name))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), brokerField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query to find applicaled brokerages.
    /// </summary>
    public void build()
    {
        contract = this.dataContractObject() as MCRBrokerARInvoicesContract;

        brokerField = this.addDialogField(methodStr(MCRBrokerARInvoicesContract, parmBroker), contract);
        brokerField.lookupButton(2);

        salesIdField = this.addDialogField(methodStr(MCRBrokerARInvoicesContract, parmSalesId), contract);
        salesIdField.lookupButton(2);

        fromDateField = this.addDialogField(methodStr(MCRBrokerARInvoicesContract, parmFromDate), contract);
        toDateField = this.addDialogField(methodStr(MCRBrokerARInvoicesContract, parmToDate), contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public void getFromDialog()
    {
        VendTable           vendTable;
        DirPartyTable       dirPartyTable;

        List                brokerValueSelected = new List(Types::String);
        ListEnumerator      brokerValuesEnum;
        List                AcctNumList = new List(Types::String);

        List                salesIdSelected = new List(Types::String);
        ListEnumerator      salesIdEnum;
        List                SalesIdList = new List(Types::String);

        super();

        brokerValueSelected = SrsReportHelper::ConvertStrToList(brokerField.value());
        brokerValuesEnum    = brokerValueSelected.getEnumerator();

        while (brokerValuesEnum.moveNext())
        {
            select firstOnly Name From dirPartyTable
                join AccountNum from vendTable
                where dirPartyTable.Name == brokerValuesEnum.Current() && vendTable.Party == dirPartyTable.RecId;

            AcctNumList.addEnd(vendTable.AccountNum);
        }

        contract.parmBroker(AcctNumList);

        salesIdSelected = SrsReportHelper::ConvertStrToList(salesIdField.value());
        salesIdEnum = salesIdSelected.getEnumerator();
        while (salesIdEnum.moveNext())
        {
            SalesIdList.addEnd(salesIdEnum.current());
        }
        contract.parmSalesId(SalesIdList);
        contract.parmFromDate(fromDateField.value());
        contract.parmToDate(toDateField.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
        public void postRun()
    {
        dialog.dialogForm().formRun().controlMethodOverload(false);

        this.brokerLookup();
        this.salesIdLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the sales ID for brokerages.
    /// </summary>
    public void salesIdLookup()
    {
        Query       query;
        container   selectedFields;
        int         mutiSelectTableNum = tablenum(SalesTable);

        query = new query(queryStr(MCRBrokerARInvoicesSalesId));

        selectedFields = [mutiSelectTableNum, fieldname2id(mutiSelectTableNum, fieldstr(SalesTable, SalesId))];

        SysLookupMultiSelectCtrl::constructWithQuery(this.dialog().dialogForm().formRun(), salesIdField.control(), query, false, selectedFields);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>