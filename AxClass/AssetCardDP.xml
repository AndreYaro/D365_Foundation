<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCardDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCardDP</c> class Provides the contextual data for rendering and running the
/// <c>AssetCard</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetCard)),
    SRSReportParameterAttribute(classstr(AssetCardContract))
]
public class AssetCardDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetCardTmp        assetCardTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetCardTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a <c>AssetCardTmp</c> buffer for rendering and running the <c>AssetCard</c> report.
    /// </summary>
    /// <returns>
    /// The <c>AssetCardTmp</c> buffer holding all relevant records.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(AssetCardTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetCardTmp getAssetCardTmp()
    {
        select assetCardTmp;
        return assetCardTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAssetBookDetail</Name>
				<Source><![CDATA[
    private void processAssetBookDetail(
        AssetBook                   _assetBook)
    {
        AssetSumCalc_Trans          assetSumCalc_DepPerYear;
        TransDate                   iterationStartDate;
        FiscalCalendarRecId         calendarRecID;

        if (_assetBook.Status == AssetStatus::NoAcquisition)
        {
            return;
        }

        iterationStartDate = AssetTransTmp::getFirstTransactionDateByType(_assetBook.AssetId, _assetBook.BookId, AssetTransType::Acquisition);

        // Find out the calendar to use once
        calendarRecID = CompanyInfoHelper::fiscalCalendarRecId();

        while (iterationStartDate != dateNull())
        {
            assetSumCalc_DepPerYear =
                AssetSumCalc_Trans::newAssetYear(
                    _assetBook.AssetId,
                    _assetBook.BookId,
                    iterationStartDate,
                    AssetYear::ThisYear);

            assetCardTmp.DetailYear = '   ' + FiscalCalendarYear::findYearByCalendarDate(calendarRecID, iterationStartDate).Name;
            assetCardTmp.initFromAssetTransDetails(assetSumCalc_DepPerYear);
            assetCardTmp.insert();

            TransDate lastDayOfYear = LedgerFiscalCalendar::findLastDayOfYear(calendarRecID, iterationStartDate);

            iterationStartDate = this.getTransDate(_assetBook.AssetId, _assetBook.BookId, lastDayOfYear + 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    private AssetTransDate getTransDate(AssetId _assetId, AssetBookId _bookId, TransDate _dateFrom)
    {
        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
        select firstOnly TransDate from assetTransTmp
            order by TransDate
            where assetTransTmp.AssetId == _assetId
                && assetTransTmp.BookId == _bookId
                && assetTransTmp.TransDate >= _dateFrom;
        return assetTransTmp.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles rendering and running of the <c>AssetCard</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                queryRun;
        AssetTable              assetTable;
        AssetBook               assetBook;
        AssetCardContract       contract;
        TmpDateSum              tmpDateSum;
        boolean                 printDetails;
        boolean                 printDepreciationPlan;
        boolean                 queryReturn;
        QueryBuildDataSource    qbds;
        Query                   query;
        str                     assetId;

        contract = this.parmDataContract() as AssetCardContract;
        printDetails = contract.parmPrintDetails();
        printDepreciationPlan = contract.parmPrintDepreciationPlan();

        queryRun = new QueryRun(this.parmQuery());

        queryReturn = false;

        while (queryRun.next())
        {
            queryReturn = true;
            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;

            if (printDepreciationPlan)
            {
                assetBook = AssetBook::find(assetBook.AssetId, assetBook.BookId);

                // TmpDateSum contains the details of the depreciation profile
                AssetInitDepreciationProfile profile = AssetInitDepreciationProfile::newFromBookDate(assetBook);
                profile.parmCalculateOnlyDepreciation(true);
                tmpDateSum.setTmpData(profile.calcDepreciationProfile());

                while select Total, TransDate, TmpNumerals01, TmpNumerals02, TmpNumerals03, TmpNumerals04 from tmpDateSum
                {
                    assetCardTmp.initFromTmpDateSum(tmpDateSum);
                    assetCardTmp.initFromAssetTable(assetTable);
                    assetCardTmp.initFromAssetBook(assetBook);

                    if (printDetails)
                    {
                        this.processAssetBookDetail(assetBook);
                    }

                    assetCardTmp.insert();
                }
            }
            else
            {
                assetBook = AssetBook::find(assetBook.AssetId, assetBook.BookId);

                assetCardTmp.initFromAssetTable(assetTable);
                assetCardTmp.initFromAssetBook(assetBook);

                if (printDetails)
                {
                    this.processAssetBookDetail(assetBook);
                }
                assetCardTmp.insert();
            }
        }

        if (!queryReturn)
        {
            // In the case the asset has no value models or depreciation books, show just the asset information
            query = this.parmQuery();
            qbds = query.dataSourceTable(tableNum(AssetTable));

            assetId = SysQuery::findOrCreateRange(qbds, fieldNum(AssetTable, AssetId)).value();
            assetCardTmp.initFromAssetTable(assetTable::find(assetId));
            assetCardTmp.insert();
        }

        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>