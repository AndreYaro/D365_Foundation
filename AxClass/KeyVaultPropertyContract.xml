<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeyVaultPropertyContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract for the <c>KeyVaultClient</c> class.
/// </summary>
public class KeyVaultPropertyContract
{
    private str keyVaultUrl;
    private boolean keyVaultReadOnly;
    private boolean saveCertificatesInNativeFormat;
    private str keyVaultRegistryKey;
    private str keyVaultCertificate;
    private str keyVaultClientSecretKey;
    private str keyVaultClientId;
    private str keyVaultInteractiveClientId;
    private boolean enableCache;
    private str cacheName;
    private int64 cacheExpirationInMilliseconds;
    private str arraySeperator;
    private boolean throwIfSecretNotFound;
    private boolean noCertificateInstall;
    private boolean ignorePrivateKeyCertificateAccessUseInteractive;
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmKeyVaultUrl</Name>
				<Source><![CDATA[
    [DataMember('KeyVaultUrl')]
    public str parmKeyVaultUrl(str _keyVaultUrl = keyVaultUrl)
    {
        keyVaultUrl = _keyVaultUrl;
        return keyVaultUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultReadOnly</Name>
				<Source><![CDATA[
    [DataMember('KeyVaultReadOnly')]
    public boolean parmKeyVaultReadOnly(boolean _keyVaultReadOnly = keyVaultReadOnly)
    {
        keyVaultReadOnly = _keyVaultReadOnly;
        return keyVaultReadOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultRegistryKey</Name>
				<Source><![CDATA[
    [DataMember('RegistryKey')]
    public str parmKeyVaultRegistryKey(str _keyVaultRegistryKey = keyVaultRegistryKey)
    {
        keyVaultRegistryKey = _keyVaultRegistryKey;
        return keyVaultRegistryKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultCertificate</Name>
				<Source><![CDATA[
    [DataMember('CertThumbprint')]
    public str parmKeyVaultCertificate(str _keyVaultCertificate = keyVaultCertificate)
    {
        keyVaultCertificate = _keyVaultCertificate;
        return keyVaultCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultClientId</Name>
				<Source><![CDATA[
    [DataMember('ClientId')]
    public str parmKeyVaultClientId(str _keyVaultClientId = keyVaultClientId)
    {
        keyVaultClientId = _keyVaultClientId;
        return keyVaultClientId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultInteractiveClientId</Name>
				<Source><![CDATA[
    [DataMember('InteractiveClientId')]
    public str parmKeyVaultInteractiveClientId(str _keyVaultInteractiveClientId = keyVaultInteractiveClientId)
    {
        keyVaultInteractiveClientId = _keyVaultInteractiveClientId;
        return keyVaultInteractiveClientId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKeyVaultClientSecretKey</Name>
				<Source><![CDATA[
    [DataMember('KeyVaultClientSecretKey')]
    public str parmKeyVaultClientSecretKey(str _keyVaultClientSecretKey = keyVaultClientSecretKey)
    {
        keyVaultClientSecretKey = _keyVaultClientSecretKey;
        return keyVaultClientSecretKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableCache</Name>
				<Source><![CDATA[
    [DataMember('EnableCache')]
    public boolean parmEnableCache(boolean _enableCache = enableCache)
    {
        enableCache = _enableCache;
        return enableCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheName</Name>
				<Source><![CDATA[
    [DataMember('CacheName')]
    public str parmCacheName(str _cacheName = cacheName)
    {
        cacheName = _cacheName;
        return cacheName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheExpirationInMilliseconds</Name>
				<Source><![CDATA[
    [DataMember('CacheExpirationInMilliseconds')]
    public int64 parmCacheExpirationInMilliseconds(int64 _cacheExpirationInMilliseconds = cacheExpirationInMilliseconds)
    {
        cacheExpirationInMilliseconds = _cacheExpirationInMilliseconds;
		return cacheExpirationInMilliseconds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArraySeperator</Name>
				<Source><![CDATA[
    [DataMember('ArraySeperator')]
    public str parmArraySeperator(str _arraySeperator = arraySeperator)
    {
        arraySeperator = _arraySeperator;
        return arraySeperator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowIfSecretNotFound</Name>
				<Source><![CDATA[
    [DataMember('ThrowIfSecretNotFound')]
    public boolean parmThrowIfSecretNotFound(boolean _throwIfSecretNotFound = throwIfSecretNotFound)
    {
        throwIfSecretNotFound = _throwIfSecretNotFound;
        return throwIfSecretNotFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNoCertificateInstall</Name>
				<Source><![CDATA[
    [DataMember('NoCertificateInstall')]
    public boolean parmNoCertificateInstall(boolean _noCertificateInstall = noCertificateInstall)
    {
        noCertificateInstall = _noCertificateInstall;
        return noCertificateInstall;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnorePrivateKeyCertificateAccessUseInteractive</Name>
				<Source><![CDATA[
    [DataMember('IgnorePrivateKeyCertificateAccessUseInteractive')]
    public boolean parmIgnorePrivateKeyCertificateAccessUseInteractive(boolean _ignorePrivateKeyCertificateAccessUseInteractive = ignorePrivateKeyCertificateAccessUseInteractive)
    {
        ignorePrivateKeyCertificateAccessUseInteractive = _ignorePrivateKeyCertificateAccessUseInteractive;
        return ignorePrivateKeyCertificateAccessUseInteractive;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>