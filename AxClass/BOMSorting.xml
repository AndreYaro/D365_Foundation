<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomSorting</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomSorting extends RunBase
{
    BOMId               bomNum;
    BOMSort             selection;

    DialogRunbase       dlg;
    DialogField         fieldChoice;

    #DEFINE.CurrentVersion(2)
    #LocalMacro.CurrentListSysLastValue
        Selection
    #ENDMACRO

    #LocalMacro.CurrentListNewSession
        #CurrentLIstSysLastValue,
        bomNum
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        BOMTable        bomTable;

        bomTable = BOMTable::find(bomNum);

        if (#PmfEnabled
            && bomTable.PmfBOMFormula == PmfBOMFormula::Formula)
        {
            dlg = new DialogRunbase("@PRO129",this);
        }
        else if (!#PmfEnabled
            || bomTable.PmfBOMFormula == PmfBOMFormula::BOM)
        {
        dlg         = new DialogRunbase("@SYS13525",this);
        }

        fieldChoice = dlg.addField(enumstr(BOMSort),"@SYS5777");

        fieldChoice.value(selection);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4138";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        selection = fieldChoice.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMSorting construct()
    {
        return new BOMSorting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMId</Name>
				<Source><![CDATA[
    BOMId parmBOMId(BOMId _bomId = bomNum)
    {
        bomNum = _bomId;

        return bomNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        if (this.inGetSaveLast())
        {
            return [#CurrentVersion, #CurrentListSysLastValue];
        }

        return [#CurrentVersion, #CurrentListNewSession];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        setprefix("@SYS3761");

        try
        {
            BOM::sorting(bomNum,selection);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version = conpeek(_packedClass,1);
        boolean     ret = false;

        switch (version)
        {
            case #CurrentVersion:
                if (this.inGetSaveLast())
                {
                    [version, #CurrentListSysLastValue] = _packedClass;
                }
                else
                {
                    [version, #CurrentListNewSession] = _packedClass;
                }
                ret = true;

                break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        fieldId             id = fieldname2id(_args.dataset(),fieldstr(BOMTable,bomId));
        if (!id)
        {
            throw error(strfmt("@SYS22338",funcname()));
        }

        BOMId       bomNum = _args.record().(id);
        BOMSorting  sorting = BOMSorting::construct();
        sorting.getLast();
        sorting.parmBOMId(bomNum);

        if (sorting.prompt())
        {
            sorting.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>