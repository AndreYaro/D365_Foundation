<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandSoftReserveEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandSoftReserveEvent
{
    private str id;

    private str organizationId;
    private str productId;
    private InventOnHandChangeEventDimensionSet dimensions;

    private str dimensionDataSource;
    private str quantityDataSource;
    private str modifier;
    private real quantity;
    private boolean ifCheckAvailForReserv;

    
    private str inventDimId;
    private RecId inventTransOrigin;
    private RecId recId;
    private InventInventoryDataServiceSoftReserveResponseStatus status;
    private str responseMessage;
    private int retryCount;
    private str reservationId;
    private boolean isRevert;
    private boolean isSoftReservHistoryUpdated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        retryCount = 0;
        isSoftReservHistoryUpdated = false;
        status = InventInventoryDataServiceSoftReserveResponseStatus::None;
        dimensions = new InventOnHandChangeEventDimensionSet();
        
        dimensionDataSource = this.getDimensionDataSource();
        quantityDataSource = this.getQuantityDataSource();
        modifier = this.getModifier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrganizationId</Name>
				<Source><![CDATA[
    [DataMember('organizationId')]
    public str parmOrganizationId(str _organizationId = organizationId)
    {
        organizationId = _organizationId;
        return organizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductId</Name>
				<Source><![CDATA[
    [DataMember('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionDataSource</Name>
				<Source><![CDATA[
    [DataMember('dimensionDataSource')]
    public str parmDimensionDataSource(str _dimensionDataSource = dimensionDataSource)
    {
        dimensionDataSource = _dimensionDataSource;
        return dimensionDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionSet</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public InventOnHandChangeEventDimensionSet parmDimensionSet(InventOnHandChangeEventDimensionSet _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    [DataMember('quantity')]
    public real parmQuantity(real _quantity = quantity)
    {
        quantity = _quantity;
        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDataSource</Name>
				<Source><![CDATA[
    [DataMember('quantityDataSource')]
    public str parmQuantityDataSource(str _quantityDataSource = quantityDataSource)
    {
        quantityDataSource = _quantityDataSource;
        return quantityDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModifier</Name>
				<Source><![CDATA[
    [DataMember('modifier')]
    public str parmModifier(str _modifier = modifier)
    {
        modifier = _modifier;
        return modifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIfCheckAvailForReserv</Name>
				<Source><![CDATA[
    [DataMember('ifCheckAvailForReserv')]
    public boolean parmIfCheckAvailForReserv(boolean _ifCheckAvailForReserv = ifCheckAvailForReserv)
    {
        ifCheckAvailForReserv = _ifCheckAvailForReserv;
        return ifCheckAvailForReserv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public str parmInventDimId(str _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOrigin</Name>
				<Source><![CDATA[
    public RecId parmInventTransOrigin(RecId _inventTransOrigin = inventTransOrigin)
    {
        inventTransOrigin = _inventTransOrigin;
        return inventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    public InventInventoryDataServiceSoftReserveResponseStatus parmStatus(InventInventoryDataServiceSoftReserveResponseStatus _status = status)
    {
        status = _status;
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponseMessage</Name>
				<Source><![CDATA[
    public str parmResponseMessage(str _responseMessage = responseMessage)
    {
        responseMessage = _responseMessage;
        return responseMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RecId parmRecId(RecId _recId = recId)
    {
        recId = _recId;
        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetryCount</Name>
				<Source><![CDATA[
    public int parmRetryCount(int _retryCount = retryCount)
    {
        retryCount = _retryCount;
        return retryCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationId</Name>
				<Source><![CDATA[
    public str parmReservationId(str _reservationId = reservationId)
    {
        reservationId = _reservationId;
        return reservationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRevert</Name>
				<Source><![CDATA[
    public boolean parmIsRevert(boolean _isRevert = isRevert)
    {
        isRevert = _isRevert;
        return isRevert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSoftReservHistoryUpdated</Name>
				<Source><![CDATA[
    public boolean parmIsSoftReservHistoryUpdated(boolean _isSoftReservHistoryUpdated = isSoftReservHistoryUpdated)
    {
        isSoftReservHistoryUpdated = _isSoftReservHistoryUpdated;
        return isSoftReservHistoryUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionSet</Name>
				<Source><![CDATA[
    public void setDimensionSet(InventDim _inventDim, boolean _shouldSyncDim9, boolean _shouldSyncDim10)
    {
        dimensions.parmConfigId(_inventDim.ConfigId);
        dimensions.parmInventSizeId(_inventDim.InventSizeId);
        dimensions.parmInventColorId(_inventDim.InventColorId);
        dimensions.parmInventStyleId(_inventDim.InventStyleId);
        dimensions.parmInventSiteId(_inventDim.InventSiteId);
        dimensions.parmInventLocationId(_inventDim.InventLocationId);
        dimensions.parmInventBatchId(_inventDim.InventBatchId);
        dimensions.parmWMSLocationId(_inventDim.wmsLocationId);
        dimensions.parmInventSerialId(_inventDim.InventSerialId);
        dimensions.parmLicensePlateId(_inventDim.LicensePlateId);
        dimensions.parmInventStatusId(_inventDim.InventStatusId);
        dimensions.parmInventDimension1(_inventDim.InventDimension1);
        dimensions.parmInventDimension2(_inventDim.InventDimension2);
        dimensions.parmInventDimension3(_inventDim.InventDimension3);
        dimensions.parmInventDimension4(_inventDim.InventDimension4);
        dimensions.parmInventDimension5(_inventDim.InventDimension5);
        dimensions.parmInventDimension6(_inventDim.InventDimension6);
        dimensions.parmInventDimension7(_inventDim.InventDimension7);
        dimensions.parmInventDimension8(_inventDim.InventDimension8);
        if (_shouldSyncDim9)
        {
            dimensions.parmInventDimension9(any2Str(_inventDim.InventDimension9));
        }
        if (_shouldSyncDim10)
        {
            dimensions.parmInventDimension10(any2Str(_inventDim.InventDimension10));
        }
        dimensions.parmInventVersionId(_inventDim.InventVersionId);
        dimensions.parmInventDimension11(_inventDim.InventDimension11);
        dimensions.parmInventDimension12(_inventDim.InventDimension12);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionDataSource</Name>
				<Source><![CDATA[
    public str getDimensionDataSource()
    {        
        return InventInventoryDataServiceSoftReservationHelper::dimensionDatasource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantityDataSource</Name>
				<Source><![CDATA[
    public str getQuantityDataSource()
    {
        return InventInventoryDataServiceSoftReservationHelper::quantityDatasource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModifier</Name>
				<Source><![CDATA[
    public str getModifier()
    {
        return InventInventoryDataServiceSoftReservationHelper::modifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToSoftReserveQueue</Name>
				<Source><![CDATA[
    public void insertToSoftReserveQueue(boolean _isProcessingQueueBackup)
    {
        if (!this.isSoftReservHistoryUpdated)
        {
            ttsbegin;
            InventInventoryDataServiceSoftReserveHistory softReserveHistory = this.getRelatedSoftReserveHistory();
            if (softReserveHistory.RecId && quantity != 0)
            {
                softReserveHistory.ProcessingQty -= quantity;
                softReserveHistory.PendingQty += quantity;
                softReserveHistory.update();
                softReserveHistory.insertQueue(id, quantity, _isProcessingQueueBackup, isRevert);
                this.parmIsSoftReservHistoryUpdated(true);
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSoftReserveHistory</Name>
				<Source><![CDATA[
    public void updateSoftReserveHistory(boolean _isBatch)
    {
        if (!this.isSoftReservHistoryUpdated)
        {
            InventInventoryDataServiceSoftReserveHistory softReserveHistory = this.getRelatedSoftReserveHistory();
            if (softReserveHistory.RecId)
            {
                softReserveHistory.updateWithReservResult(this, quantity, _isBatch);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformSoftReserveHistory</Name>
				<Source><![CDATA[
    internal static InventOnHandSoftReserveEvent transformSoftReserveHistory(InventInventoryDataServiceSoftReserveHistory _history, InventDim _inventDim, real _qty, boolean _isRevert = false)
    {
        str eventId = "ohre~" + guid2Str(newGuid());
        boolean isCheckAfr = _qty > 0;
        
        boolean shouldSyncDim9 = InventInventoryDataServiceFeature::shouldSyncInventDimension(fieldnum(InventDim, InventDimension9));
        boolean shouldSyncDim10 = InventInventoryDataServiceFeature::shouldSyncInventDimension(fieldnum(InventDim, InventDimension10));

        InventOnHandSoftReserveEvent reservEvent = new InventOnHandSoftReserveEvent();
        reservEvent.setDimensionSet(_inventDim, shouldSyncDim9, shouldSyncDim10);

        reservEvent.parmId(eventId);
        reservEvent.parmOrganizationId(_history.DataAreaId);

        reservEvent.parmQuantity(_qty);
        reservEvent.parmIfCheckAvailForReserv(isCheckAfr);
        reservEvent.parmIsRevert(_isRevert);
        
        reservEvent.parmProductId(_history.ItemId);
        reservEvent.parmRecId(_history.RecId);
        reservEvent.parmInventDimId(_history.InventDimId);
        reservEvent.parmInventTransOrigin(_history.InventTransOrigin);

        return reservEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformSoftReserveQueueTemp</Name>
				<Source><![CDATA[
    internal static InventOnHandSoftReserveEvent transformSoftReserveQueueTemp(InventDim _inventDim, InventInventoryDataServiceSoftReserveQueueTemp _softReserveQueueTemp, boolean _shouldSyncDim9, boolean _shouldSyncDim10)
    {
        InventOnHandSoftReserveEvent reservEvent = new InventOnHandSoftReserveEvent();
        reservEvent.setDimensionSet(_inventDim, _shouldSyncDim9, _shouldSyncDim10);

        reservEvent.parmId(_softReserveQueueTemp.EventId);
        reservEvent.parmOrganizationId(_softReserveQueueTemp.DataAreaId);
        
        reservEvent.parmQuantity(_softReserveQueueTemp.ReservQty);
        reservEvent.parmIfCheckAvailForReserv(_softReserveQueueTemp.ReservQty > 0);
        
        reservEvent.parmProductId(_softReserveQueueTemp.ItemId);
        reservEvent.parmRecId(_softReserveQueueTemp.RecId);
        reservEvent.parmInventDimId(_softReserveQueueTemp.InventDimId);
        reservEvent.parmInventTransOrigin(_softReserveQueueTemp.InventTransOrigin);
        reservEvent.parmRetryCount(_softReserveQueueTemp.RetryCount);
        reservEvent.parmIsRevert(_softReserveQueueTemp.IsRevert);

        return reservEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedSoftReserveHistory</Name>
				<Source><![CDATA[
    private InventInventoryDataServiceSoftReserveHistory getRelatedSoftReserveHistory()
    {
        InventInventoryDataServiceSoftReserveHistory softReserveHistory;
        select forupdate softReserveHistory
            where softReserveHistory.ItemId == productId &&
            softReserveHistory.InventDimId == inventDimId &&
            softReserveHistory.inventTransOrigin == inventTransOrigin;

        return softReserveHistory;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>