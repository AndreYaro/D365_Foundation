<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaCopyServiceOrderLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmaCopyServiceOrderLines extends RunBase
{
//    SMAAgreementId              destinationAgreement;
    SMAAgreementTable           destinationAgreementTable;
    SMAServiceOrderTable        destinationServiceOrderTable;

    SMACopyLines                copyLines;

    // Dialog
    DialogRunbase               dialog;

    QueryRun                    queryRun;

    DialogField                 dialogIncludeTasks;
    DialogField                 dialogIncludeObjects;

    NoYes                       includeTasks;
    NoYes                       includeObjects;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        includeTasks,
        includeObjects
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        dialog = super();

        this.initDialogCopyLines();
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        includeTasks    = dialogIncludeTasks.value();
        includeObjects  = dialogIncludeObjects.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogCopyLines</Name>
				<Source><![CDATA[
    private void initDialogCopyLines()
    {
        // Copy service order lines
        dialog.caption("@SYS90711");

        // Include
        dialog.addGroup("@SYS28109");

        // Objects
        includeObjects          = NoYes::Yes;
        dialogIncludeObjects    = dialog.addFieldValue(enumStr(NoYes), includeObjects, "@SYS88962");
        // Tasks
        includeTasks            = NoYes::Yes;
        dialogIncludeTasks      = dialog.addFieldValue(enumStr(NoYes), includeTasks, "@SYS87778");
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        copyLines = SMACopyLines::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationAgreement</Name>
				<Source><![CDATA[
    public SMAAgreementTable parmDestinationAgreement(SMAAgreementTable _agreementTable = destinationAgreementTable)
    {
        // Set the destination agreement
        destinationAgreementTable = _agreementTable;

        return destinationAgreementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationServiceOrder</Name>
				<Source><![CDATA[
    public SMAServiceOrderTable parmDestinationServiceOrder(SMAServiceOrderTable _serviceOrderTable = destinationServiceOrderTable)
    {
        // Set id of the destination service order
        destinationServiceOrderTable = _serviceOrderTable;
        return destinationServiceOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public QueryRun queryBuild()
    {
        QueryBuildDataSource    qbdsSMAServiceOrderTable;
        QueryBuildDataSource    qbdsSMAServiceOrderLine;
        QueryBuildRange         dbrProjId;
        Query                   q;
        q = new Query();
        qbdsSMAServiceOrderTable = q.addDataSource(tablenum(SMAServiceOrderTable));
        qbdsSMAServiceOrderLine = qbdsSMAServiceOrderTable.addDataSource(tablenum(SMAServiceOrderLine));
        qbdsSMAServiceOrderLine.relations(true);

        // Ranges on SMAServiceOrderTable
        qbdsSMAServiceOrderTable.addRange(fieldnum(SMAServiceOrderTable, AgreementId));
        dbrProjId = qbdsSMAServiceOrderTable.addRange(fieldnum(SMAServiceOrderTable, ProjId));

        if (destinationServiceOrderTable.ProjId)
        {
            dbrProjId.value(destinationServiceOrderTable.ProjId);
        }
        qbdsSMAServiceOrderTable.addRange(fieldnum(SMAServiceOrderTable, ServiceOrderId));

        // Ranges on SMAServiceOrderLine
        qbdsSMAServiceOrderLine.addRange(fieldnum(SMAServiceOrderLine, TransactionType));
        qbdsSMAServiceOrderLine.addRange(fieldnum(SMAServiceOrderLine, ServiceOrderLineNum));

        queryRun = new QueryRun(q);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        copyLines.parmQueryRun(queryRun);
        copyLines.setDestinationAgreement(destinationAgreementTable);
        copyLines.setDestinationServiceOrder(destinationServiceOrderTable);
        copyLines.parmIncludeObjects(includeObjects);
        copyLines.parmIncludeTasks(includeTasks);

        copyLines.copyServiceOrderLines();
        this.updateServiceOrderProgress(destinationServiceOrderTable.ServiceOrderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int             version     = RunBase::getVersion(packedClass);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateServiceOrderProgress</Name>
				<Source><![CDATA[
    public void updateServiceOrderProgress(SMAServiceOrderId _serviceOrderId)
    {
        SMAServiceOrderTable    serviceOrder;

        ttsbegin;

        select forupdate serviceOrder where serviceOrder.ServiceOrderId == _serviceOrderId;

        serviceOrder.updateProgress();

        serviceOrder.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMACopyServiceOrderLines construct(Args _args = null)
    {
        SMACopyServiceOrderLines    copyServiceOrderLines;

        copyServiceOrderLines = new SMACopyServiceOrderLines();

        if (_args)
        {
            if (_args.dataset() == tablenum(SMAAgreementTable))
            {
                copyServiceOrderLines.parmDestinationAgreement(_args.record());
            }
            else
            if (_args.dataset() == tablenum(SMAServiceOrderTable))
            {
                copyServiceOrderLines.getLast();
                copyServiceOrderLines.parmDestinationServiceOrder(_args.record());
            }
            copyServiceOrderLines.queryBuild();
        }
        return copyServiceOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Copy lines
        return "@SYS24020";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SMACopyServiceOrderLines copyServiceOrderLines;

        if (_args)
        {
            copyServiceOrderLines = SMACopyServiceOrderLines::construct(_args);

            if (copyServiceOrderLines)
            {
                if (copyServiceOrderLines.prompt())
                {
                    copyServiceOrderLines.runOperation();
                }
            }
            if (_args.caller() && formHasMethod(_args.caller(), identifierstr(executeQueryLines)))
            {
                _args.caller().executeQueryLines();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>