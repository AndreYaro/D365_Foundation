<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ThirdPartyFeatureModelChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains logic for detecting if third party solution is installed, enabled and prepared for migration.
/// </summary>
public class ThirdPartyFeatureModelChecker
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EXILFeatureEnabled</Name>
				<Source><![CDATA[
    public static boolean EXILFeatureEnabled(EXILFeature _featureCodeName)
    {
        ExtendedItalianLocalizationIMigrationSupportProvider provider = ExtendedItalianLocalizationMigrationSupportProviderFactory::getProvider(_featureCodeName);
        return provider && provider.isOriginalFeatureEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EXILDataUpgradePerformed</Name>
				<Source><![CDATA[
    public static boolean EXILDataUpgradePerformed(EXILFeature _featureCodeName)
    {
        boolean ret;
        ExtendedItalianLocalizationIMigrationSupportProvider provider = ExtendedItalianLocalizationMigrationSupportProviderFactory::getProvider(_featureCodeName);

        if (!provider)
        {
            ret = true;
        }
        else
        {
            ret = provider.dataUpgradePerformed();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EXILCheckPrerequisites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks prerequisites for feature enabling and prevents enabling if conditions are not met.
    /// </summary>
    /// <param name = "_sender">The target state of feature being enabled.</param>
    /// <param name = "_featureName">The name of feature to check prerequisites for.</param>
    /// <param name = "_originalFeature">The original feature identifier.</param>
    public static void EXILCheckPrerequisites(Common _sender, str _featureName, EXILFeature _originalFeature)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == _featureName
            && featureManagementState.IsEnabled == NoYes::Yes
            && featureManagementState.orig().IsEnabled == NoYes::No)
        {
            if (ThirdPartyFeatureModelChecker::EXILFeatureEnabled(_originalFeature))
            {
                featureManagementState.IsEnabled = NoYes::No;
                warning("@ExtendedItallianLocalization:OriginalFeatureNotDisabled");
            }

            if (!ThirdPartyFeatureModelChecker::EXILDataUpgradePerformed(_originalFeature))
            {
                warning("@ExtendedItallianLocalization:SettingsTransferNotPerformed");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    private static boolean isFeatureEnabled(ThirdPartyMigrationFeature _feature)
    {
        ThirdPartyIMigrationSupportProvider provider = ThirdPartyMigrationSupportProviderFactory::getProvider(_feature);
        return provider && provider.isFeatureEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDataUpgradeBeenPerformed</Name>
				<Source><![CDATA[
    private static boolean hasDataUpgradeBeenPerformed(ThirdPartyMigrationFeature _feature)
    {
        boolean ret;
        ThirdPartyIMigrationSupportProvider provider = ThirdPartyMigrationSupportProviderFactory::getProvider(_feature);

        if (!provider)
        {
            ret = true;
        }
        else
        {
            ret = provider.hasDataUpgradeBeenPerformed();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyFeatureName</Name>
				<Source><![CDATA[
    private static str thirdPartyFeatureName(ThirdPartyMigrationFeature _feature)
    {
        ThirdPartyIMigrationSupportProvider provider = ThirdPartyMigrationSupportProviderFactory::getProvider(_feature);
        return provider.thirdPartyFeatureName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrerequisites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks prerequisites for feature enabling and prevents enabling if conditions are not met.
    /// </summary>
    /// <param name = "_sender">The target state of feature being enabled.</param>
    /// <param name = "_featureName">The name of feature to check prerequisites for.</param>
    /// <param name = "_originalFeature">The original feature identifier.</param>
    public static void checkPrerequisites(Common _sender, str _featureName, ThirdPartyMigrationFeature _originalFeature)
    {
        FeatureManagementState featureManagementState = _sender;

        if (featureManagementState.Name == _featureName
            && featureManagementState.IsEnabled == NoYes::Yes
            && featureManagementState.orig().IsEnabled == NoYes::No)
        {
            if (ThirdPartyFeatureModelChecker::isFeatureEnabled(_originalFeature))
            {
                featureManagementState.IsEnabled = NoYes::No;
                warning(strFmt("@ApplicationFeatureManagement:DeactivateBeforeActivate", ThirdPartyFeatureModelChecker::thirdPartyFeatureName(_originalFeature), "@FeatureManagement:FeatureManagementFeatureName"));
            }

            if (!ThirdPartyFeatureModelChecker::hasDataUpgradeBeenPerformed(_originalFeature))
            {
                featureManagementState.IsEnabled = NoYes::No;
                warning(strFmt("@ApplicationFeatureManagement:DataNotMigrated", ThirdPartyFeatureModelChecker::thirdPartyFeatureName(_originalFeature)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContextApplicability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks current context to determine feature applicability.
    /// </summary>
    /// <param name = "_feature">The original feature to check applicability for.</param>
    /// <returns>true if the feature is applicable, otherwise false.</returns>
    /// <remarks>This method is exposed in order to allow feature applicability customization. All features in scope are available only for Italian context by default.</remarks>
    public static boolean checkContextApplicability(EXILFeature _feature)
    {
        #isoCountryRegionCodes
        boolean ret;

        switch (_feature)
        {
            case EXILFeature::Exil1755:
                ret = MultipleTaxIdReportingHelper::isLegalEntityOrAddressInCountryRegion([#isoIT], MultipleTaxIdScope::Intrastat);
                break;
            case EXILFeature::Exil1997:
                ret = true;
                break;

            default:
                ret = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEXILFeatureApplicability</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks current context, the original EXILFeature state in third party solution and if the data upgrade has been performed to determine feature applicability.
    /// </summary>
    /// <param name = "_feature">The original feature to check applicability for.</param>
    /// <returns>true if the feature is applicable, otherwise false.</returns>
    internal static boolean checkEXILFeatureApplicability(EXILFeature _feature)
    {
        return ThirdPartyFeatureModelChecker::checkContextApplicability(_feature)
            && !ThirdPartyFeatureModelChecker::EXILFeatureEnabled(_feature)
            && ThirdPartyFeatureModelChecker::EXILDataUpgradePerformed(_feature);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCannotEnableMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to be displayed when the feature cannot be enabled.
    /// </summary>
    /// <param name = "_feature">The original feature to create message for</param>
    /// <returns>The message text.</returns>
    /// <remarks>This method is exposed in order to allow message customization.</remarks>
    public static LabelString getCannotEnableMessage(EXILFeature _feature)
    {
        LabelString ret;

        if (!ThirdPartyFeatureModelChecker::EXILDataUpgradePerformed(_feature))
        {
            ret += "@ExtendedItallianLocalization:DataUpgradeNotPerformed";
        }

        if (ThirdPartyFeatureModelChecker::EXILFeatureEnabled(_feature))
        {
            ret = strFmt('%1 %2', ret, "@ExtendedItallianLocalization:OriginalFeatureMustBeDisabled");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>