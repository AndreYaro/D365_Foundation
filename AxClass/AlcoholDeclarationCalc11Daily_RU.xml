<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDeclarationCalc11Daily_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>AlcoholDeclarationCalc11_RU</c> class performs calculation of the 11th form of the alcohol declaration.
/// </summary>
class AlcoholDeclarationCalc11Daily_RU extends AlcoholDeclarationCalc11_RU
{
    AlcoholDailyJournalTable_RU     dailyJournalTable;
    UnitOfMeasure                   toUnitOfMeasure;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createKeyMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates key for the <c>KeySum</c> object where the data are stored before saving to the tables. Relates to the movement calculation.
    /// </summary>
    /// <param name="_transDate">
    ///    The date to which the data should relate.
    /// </param>
    /// <param name="_inventTable">
    ///    The inventory table record which contains necessary data to construct the key.
    /// </param>
    /// <returns>
    ///    The container which is used as a key in the <c>KeySum</c> object.
    /// </returns>
    protected container createKeyMovement(TransDate     _transDate,
                                          InventTable   _inventTable)
    {
        return [_inventTable.AlcoholProductionTypeId_RU];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createKeyReceiptIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>KeySum</c> object when calculating receips/issues.
    /// </summary>
    /// <param name="_alcoholDeclarationTransType">
    ///    The line type (receipt or issue).
    /// </param>
    /// <param name="_inventTable">
    ///    <c>InventTable</c> record which contains data necessary for the update.
    /// </param>
    /// <param name="_inventDim">
    ///    <c>InventDim</c> record which contains data necessary for the update.
    /// </param>
    /// <param name="_licenseSeriesNum">
    ///    Alcohol license series and num.
    /// </param>
    /// <param name="_custVendInvoiceJour">
    ///    <c>CustInvoiceJour</c> or <c>VendInvoiceJour</c> record.
    /// </param>
    /// <param name="_documentDate">
    ///    Date to which the data from the <c>InventTrans</c> should relate.
    /// </param>
    /// <param name="_inventTrans">
    ///    <c>InventTrans</c> record which contains data necessary for the update.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    <c>InventTransOrigin</c> record which contains data necessary for the update.
    /// </param>
    /// <param name="_isReturn">
    ///    Boolean parameter showing if a return sign should be set.
    /// </param>
    /// <returns>
    ///    The container which is used as a key in the <c>KeySum</c> object.
    /// </returns>
    protected container createKeyReceiptIssue(
        AlcoholDeclarationTransType_RU    _alcoholDeclarationTransType,
        InventTable                       _inventTable,
        InventDim                         _inventDim,
        AlcoholLicenseSeriesNum_RU        _licenseSeriesNum,
        CustVendInvoiceJour               _custVendInvoiceJour,
        TransDate                         _transDate,
        InventTrans                       _inventTrans,
        InventTransOrigin                 _inventTransOrigin,
        NoYes                             _isReturn)
    {
        Qty containerCapacity = EcoResProductUnitConverter::convertForReleasedProduct(_inventTable.ItemId,
                                    _inventDim.inventDimId,
                                    1,
                                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTransReference::newFromInventTrans(_inventTrans).unitId()),
                                    UnitOfMeasure::unitOfMeasureIdBySymbol(toUnitOfMeasureSymbol),
                                    NoYes::Yes);

        return [_alcoholDeclarationTransType,
                _inventTable.AlcoholProductionTypeId_RU,
                containerCapacity];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the previously created calculation results.
    /// </summary>
    protected void deleteRecords()
    {
        this.deleteRecordsMovement();
        this.deleteRecordsReceiptIssue(AlcoholDeclarationTransType_RU::Issue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordsMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the previously created movement results.
    /// </summary>
    /// <param name="_declarationType">
    ///    The alcohol declaration type for which the data should be deleted.
    /// </param>
    protected void deleteRecordsMovement(AlcoholDeclarationType_RU  _declarationType = this.declarationType())
    {
        AlcoholDailyTransMovement_RU      dailyTransMov;

        delete_from dailyTransMov
            where dailyTransMov.AlcoholDeclarationType == _declarationType
               && dailyTransMov.BranchId               == dailyJournalTable.BranchId
               && dailyTransMov.TransDate              == dailyJournalTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordsReceiptIssue</Name>
				<Source><![CDATA[
    protected void deleteRecordsReceiptIssue(AlcoholDeclarationTransType_RU _declarationTransType,
                                             AlcoholDeclarationType_RU      _declarationType = this.declarationType())
    {
        AlcoholDailyTransIssue_RU      dailyTransIssue;

        delete_from dailyTransIssue
            where dailyTransIssue.AlcoholDeclarationType == _declarationType
               && dailyTransIssue.BranchId               == dailyJournalTable.BranchId
               && dailyTransIssue.TransDate              == dailyJournalTable.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates a quarter number to which the date passed belongs.
    /// </summary>
    /// <param name="_transDate">
    ///    The date for the period number should be defined.
    /// </param>
    /// <returns>
    ///    Quarter number in the year.
    /// </returns>

    protected AlcoholDeclarationPeriodNum_RU getPeriodNum(TransDate  _transDate)
    {
        return dayOfYr(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodStartQtyDaily</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the period start quantity of the item for the period being calculated.
    /// </summary>
    /// <param name="_dailyTrans">
    ///    <c>AlcoholDailyTransMovement_RU</c> record for which the period start quantity is being calculated.
    /// </param>
    /// <returns>
    ///    Quantity at the start of period.
    /// </returns>
    protected Amount getPeriodStartQtyDaily(AlcoholDailyTransMovement_RU        _dailyTrans)
    {
        TransDate                       prevDate = _dailyTrans.TransDate - 1;
        AlcoholDailyTransMovement_RU    prevDailyTrans;
        Amount                          ret = 0;
        InventLocation                  inventLocation;
        InventProfile_RU                inventProfile;
        InventDim                       inventDimCriteria;
        InventDimParm                   inventDimParm;
        InventTable                     inventTable;
        InventSum                       inventSum;
        InventSumDateDim                inventSumDateDim;

        select firstOnly prevDailyTrans
            order by TransDate desc
            where prevDailyTrans.TransDate                  < _dailyTrans.TransDate
               && prevDailyTrans.BranchId                   == _dailyTrans.BranchId
               && prevDailyTrans.AlcoholDeclarationType     == _dailyTrans.AlcoholDeclarationType
               && prevDailyTrans.AlcoholProductionTypeId    == _dailyTrans.AlcoholProductionTypeId;

        if (prevDailyTrans)
        {
            ret = prevDailyTrans.PeriodEndQty;
        }
        else
        {
            // calculate inventory remains
            while select InventLocationId from inventLocation
                where inventLocation.VendAccount == branch.VendAccount
            {
                while select InventProfileId from inventProfile
                    where inventProfile.AlcoholActivityType == this.activityType()
                {
                    inventDimCriteria.clear();
                    inventDimCriteria.InventLocationId   = inventLocation.InventLocationId;
                    inventDimCriteria.InventProfileId_RU = inventProfile.InventProfileId;
                    inventDimParm.initFromInventDim(inventDimCriteria);

                    while select inventTable
                        where inventTable.AlcoholProductionTypeId_RU == _dailyTrans.AlcoholProductionTypeId
                    {
                        inventSumDateDim = InventSumDateDim::newParameters(prevDate, inventTable.ItemId, inventDimCriteria, inventDimParm);
                        ret += this.calculateVolume(inventSumDateDim.postedQty(), inventTable, '');
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVolumeIssue</Name>
				<Source><![CDATA[
    protected Qty getVolumeIssue(InventTrans _inventTrans, InventTable _inventTable)
    {
        return _inventTrans.qtyUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables which will be often used during calculation.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    public boolean init()
    {
        dailyJournalTable = common;

        calcMovement = true;
        calcReceipt  = false;
        calcIssue    = true;

        fromDate            = dailyJournalTable.TransDate;
        toDate              = dailyJournalTable.TransDate;
        currentPeriodNum    = dayOfyr(fromDate);
        currentFiscalYear   = year(fromDate);

        branch                  = Branches_RU::find(dailyJournalTable.BranchId);
        companyInfo             = CompanyInfo::find();
        inventParameters        = InventParameters::find();
        toUnitOfMeasureSymbol   = inventParameters.AlcoholUnitIdDaily_RU;   // expected to be liter
        toUnitOfMeasure         = UnitOfMeasure::findBySymbol(toUnitOfMeasureSymbol);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDaily</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the current child of <c>AlcoholDeclarationCalc_RU</c> class relates to the daily journal.
    /// </summary>
    /// <returns>
    ///    Always true.
    /// </returns>
    protected boolean isDaily()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCalculatedDataMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs saving movement data which are stored in the <c>KeySum</c> objects to the persistent tables.
    /// </summary>
    protected void saveCalculatedDataMovement()
    {
        AlcoholDailyTransMovement_RU            dailyTrans;
        int                                     idx;
        container                               conKey, conData;
        InventTable                             inventTable;
        InventSum                               inventSum;
        AlcoholProductionType_RU                alcoholProductionType;

        // create trans lines
        for (idx = 1; idx <= keySumMovement.numOfTrans(); idx++)
        {
            conKey  = keySumMovement.index2Key(idx);
            conData = keySumMovement.index2Data(idx);

            dailyTrans.clear();
            dailyTrans.initValue();

            dailyTrans.initFromDailyJournalTable(dailyJournalTable);
            dailyTrans.AlcoholProductionTypeId    = conpeek(conKey,1);

            dailyTrans.PeriodStartQty             = this.getPeriodStartQtyDaily(dailyTrans);

            dailyTrans.ManufacturerPurchQty       = abs(conpeek(conData, manufacturerPurchQtyPos));
            dailyTrans.WholesalePurchQty          = abs(conpeek(conData, wholesalePurchQtyPos));
            dailyTrans.ImportPurchQty             = abs(conpeek(conData, importPurchQtyPos));
            dailyTrans.PurchReturnQty             = abs(conpeek(conData, purchReturnQtyPos));
            dailyTrans.OtherRecieptQty            = abs(conpeek(conData, otherRecieptQtyPos));
            dailyTrans.InternalTransferReceiptQty = abs(conpeek(conData, internalTransferReceiptQtyPos));

            dailyTrans.TotalPurchQty              =   dailyTrans.ManufacturerPurchQty
                                                    + dailyTrans.WholesalePurchQty
                                                    + dailyTrans.ImportPurchQty;

            dailyTrans.TotalReceiptQty            =   dailyTrans.TotalPurchQty
                                                    + dailyTrans.PurchReturnQty
                                                    + dailyTrans.OtherRecieptQty
                                                    + dailyTrans.InternalTransferReceiptQty;

            dailyTrans.WholesaleSalesQty          = abs(conpeek(conData, wholesaleSalesQtyPos));
            dailyTrans.RetailSalesQty             = abs(conpeek(conData, retailSalesQtyPos));
            dailyTrans.ExportSalesQty             = abs(conpeek(conData, exportSalesQtyPos));
            dailyTrans.OtherIssueQty              = abs(conpeek(conData, otherIssueQtyPos));
            dailyTrans.SalesReturnQty             = abs(conpeek(conData, salesReturnQtyPos));
            dailyTrans.InternalTransferIssueQty   = abs(conpeek(conData, internalTransferIssueQtyPos));

            dailyTrans.TotalSalesQty              =   dailyTrans.WholesaleSalesQty
                                                    + dailyTrans.RetailSalesQty
                                                    + dailyTrans.ExportSalesQty;

            dailyTrans.TotalIssueQty              =   dailyTrans.TotalSalesQty
                                                    + dailyTrans.OtherIssueQty
                                                    + dailyTrans.SalesReturnQty
                                                    + dailyTrans.InternalTransferIssueQty;

            dailyTrans.PeriodEndQty               = dailyTrans.PeriodStartQty + dailyTrans.TotalReceiptQty - dailyTrans.TotalIssueQty;

            dailyTrans.insert();
        }

        // adding to the current journal lines, related to the production types, which don't have movement, but have remains (start or end)
        while select AlcoholProductionTypeId_RU, AlcoholManufacturerId_RU from inventTable
            group by AlcoholProductionTypeId_RU, AlcoholManufacturerId_RU
            where inventTable.AlcoholProductionTypeId_RU
               && inventTable.AlcoholManufacturerId_RU
        exists join alcoholProductionType
            where alcoholProductionType.TypeId == inventTable.AlcoholProductionTypeId_RU
               && alcoholProductionType.IsBeer == this.isBeer()
        exists join inventSum
            where inventSum.ItemId == inventTable.itemId
        {

            if (! AlcoholDailyTransMovement_RU::exist(dailyJournalTable.TransDate,
                                                      dailyJournalTable.BranchId,
                                                      dailyJournalTable.AlcoholDeclarationType,
                                                      inventTable.AlcoholProductionTypeId_RU))
            {
                dailyTrans.clear();
                dailyTrans.initValue();
                dailyTrans.initFromDailyJournalTable(dailyJournalTable);
                dailyTrans.AlcoholProductionTypeId = inventTable.AlcoholProductionTypeId_RU;
                dailyTrans.PeriodStartQty = this.getPeriodStartQtyDaily(dailyTrans);

                if (dailyTrans.PeriodStartQty)
                {
                    dailyTrans.PeriodEndQty = dailyTrans.PeriodStartQty;
                    dailyTrans.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCalculatedDataReceiptIssue</Name>
				<Source><![CDATA[
    protected void saveCalculatedDataReceiptIssue()
    {
        AlcoholDailyTransIssue_RU       dailyTrans;
        int                             idx;
        RecordInsertList                recordInsertList = new RecordInsertList(tableNum(AlcoholDailyTransIssue_RU));
        
        for (idx = 1; idx <= keySumReceiptIssue.numOfTrans(); idx++)
        {
            container conKey = keySumReceiptIssue.index2Key(idx);

            dailyTrans.clear();
            dailyTrans.initValue();
            dailyTrans.initFromDailyJournalTable(dailyJournalTable);
            dailyTrans.AlcoholProductionTypeId  = conpeek(conKey, 2);
            dailyTrans.ContainerCapacity        = conpeek(conKey, 3);
            dailyTrans.ContainerCapacityUnitId  = toUnitOfMeasureSymbol;
            dailyTrans.ContainerQty             = abs(keySumReceiptIssue.index2Data(idx));
            dailyTrans.insert();
            recordInsertList.add(dailyTrans);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status of the journal.
    /// </summary>
    protected void updateStatus()
    {
        dailyJournalTable.Status = AlcoholDeclarationStatus_RU::Calculated;
        dailyJournalTable.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>