<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOutPaymWord_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendOutPaymWord_RU implements ERIReportPostProcessingSupported
{
    private Filename fileName;

    CustVendOutPaymReport_RU    custVendOutPaymReport;
    Counter                     numOfRecord;
    BankPaymentOrderJour_RU     paymentOrderJour;

    protected const container mandatoryFields = [
        "PaymentOrderNum",
        "PaymentTransDate",
        "AmountCur"];

    protected const container mandatoryDisplayFields = [
        "NumeralsToLetter",
        "BankAccountPayer",
        "NameRecipient",
        "BankAccountRecipient",
        "BankNameRecipient",
        "AddressBankRecipient"];

    protected const container ordinaryFields = [
        "CurrencyCode",
        "PurposeOfPayment",
        "FreeFormat",
        "BankAccountCurrency",
        "YourCharges",
        "YourCorrCharges",
        "CommBankAccountPayer",
        "TransTypeCur",
        "UIN"];

    protected const container ordinaryDisplayFields = [
        "NamePayer",
        "AddressPayer",
        "BankNamePayer",
        "AddressRecipient",
        "CurrencyName",
        "RespEmplName",
        "RespPhone",
        "CountryOKSMCode",
        "PurposeCode",
        "PaymPurchase"];

    protected const container checkFields = [
        "BankAccountCurrency",
        "YourCharges",
        "YourCorrCharges"];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmountCurFormatted</Name>
				<Source><![CDATA[
    protected FreeText getAmountCurFormatted()
    {
        FreeText strNum = num2str(abs(paymentOrderJour.AmountCur), 1, 2, 1, 0);

        return strPoke(strNum, '-', strFind(strNum, '.', 1, strLen(strNum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(Object _caller)
    {
        if (_caller)
        {
            custVendOutPaymReport = _caller;
        }
        else
        {
            throw error("@SYS53926");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTemplateStream</Name>
				<Source><![CDATA[
    private System.IO.Stream getDocumentTemplateStream(BankPaymentOrderJour_RU _paymentOrderJour)
    {
        DocuRef ref = DocuRef::findRecId(_paymentOrderJour.templateRefRecId());

        if (! ref)
        {
            throw error(strfmt("@GLS101762", ''));
        }

        System.IO.Stream attachmentStream = DocumentManagement::getAttachmentStream(ref);

        return attachmentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report with data.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record to get data from.</param>
    /// <exception cref="Exception::Error">
    /// Throws error if <c>paymentOrderJour</c> is not initialized.
    /// </exception>
    protected void printData(LedgerJournalTrans _ledgerJournalTrans = null)
    {
        const str yes = 'Yes';
        const str no = 'No';
        const str x = 'X';

        Dictionary  dict        = new Dictionary();
        DictTable   dictTable   = dict.tableObject(paymentOrderJour.TableId);

        container   fieldNames, checkNames;
        fieldName   fieldName;
        int         i;
        boolean     yesNo;

        if (! paymentOrderJour)
        {
            throw error(strfmt("@GLS102329", _ledgerJournalTrans.Voucher));
        }

        if (paymentOrderJour.PaymOrderType != PaymOrderType_RU::Cur)
        {
            throw error("@GLS102279");
        }

        using (var templateStream= this.getDocumentTemplateStream(paymentOrderJour))
        {
            using (WordDocument_RU wordDocument = new WordDocument_RU(templateStream))
            {
                paymentOrderJour.AmountCur = abs(paymentOrderJour.AmountCur);

                wordDocument.insertValue('PaymentOrderNum', paymentOrderJour.PaymentOrderNum);
                wordDocument.insertValue('PaymentTransDate', date2str(paymentOrderJour.PaymentTransDate, 123, 2, 2, 2, 2, 4, DateFlags::None));
                wordDocument.insertValue('AmountCur', this.getAmountCurFormatted());

                fieldNames = mandatoryDisplayFields;

                for (i = 1; i <= conlen(fieldNames); i++)
                {
                    fieldName = conpeek(fieldNames, i);

                    wordDocument.insertValue(fieldName, dictTable.callObject(fieldName, paymentOrderJour));
                }

                fieldNames = ordinaryFields;
                checkNames = checkFields;

                for (i = 1; i <= conlen(fieldNames); i++)
                {
                    fieldName = conpeek(fieldNames, i);
                    if (! confind(checkNames, fieldName))
                    {
                        wordDocument.insertValue(fieldName,
                                             paymentOrderJour.(fieldname2id(tablenum(BankPaymentOrderJour_RU),
                                             fieldName)));
                    }
                    else
                    {
                        yesNo = paymentOrderJour.(fieldname2id(tablenum(BankPaymentOrderJour_RU), fieldName));
                        fieldName += yesNo ? yes : no;

                        wordDocument.insertValue(fieldName, x);
                    }
                }

                fieldNames = ordinaryDisplayFields;

                for (i = 1; i <= conlen(fieldNames); i++)
                {
                    fieldName = conpeek(fieldNames, i);
                    wordDocument.insertValue(fieldName, dictTable.callObject(fieldName, paymentOrderJour));
                }

                fileName = strfmt("@GLS102331", paymentOrderJour.PaymentOrderNum);

                if (AccountingDocumentsERPostProcessingToggle::isEnabled())
                {
                    ERBinaryContentService binaryContentService = new ERBinaryContentService();
                    binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
                    binaryContentService.initBinaryDataFromStream(wordDocument.saveToStream());
                    binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
                }
                else
                {
                    wordDocument.sendFileToBrowser(fileName);
                }
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        ListEnumerator          enumOutPaymRecords;
        CustVendOutPaymRecord   outPaymRecord;

        if (custVendOutPaymReport.parmCustVendOutPaym())
        {
            enumOutPaymRecords = custVendOutPaymReport.parmCustVendOutPaym().getOutPaymRecords().getEnumerator();
            while (enumOutPaymRecords.moveNext())
            {
                outPaymRecord      = enumOutPaymRecords.current();
                ledgerJournalTrans = outPaymRecord.parmCustVendPaym().ledgerJournalTrans();
                ledgerJournalTrans.reread();
                paymentOrderJour   = ledgerJournalTrans.bankPaymentOrderJour_RU();
                this.printData(ledgerJournalTrans);
            }
        }
        else
        {
            paymentOrderJour = custVendOutPaymReport.parmPaymentOrderJour();
            this.printData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        new CustVendOutPaymWord_RU(_args.caller()).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return custVendOutPaymReport.reportName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>