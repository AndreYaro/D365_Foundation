<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJourFinalRelieveEntryProvider_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Class servers as provider of entries, which must be relieved in case when final relieving performed for Russian functionality.
/// </summary>
[SourceDocumentEnumExtension(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice, SourceDocumentExtensionCountryRegion::RU),
    SourceDocumentEnumExtension(enumStr(SourceDocument_ProductReceipt), SourceDocument_ProductReceipt::ProductReceipt, SourceDocumentExtensionCountryRegion::RU)]
class SubledgerJourFinalRelieveEntryProvider_RU extends SubledgerJourFinalRelieveEntryProvider
{
    SubledgerJournalAccountEntryRelievingTmpExt_RU relievingExtToRelieve,
                                            relievingExtAlreadyRelieved;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addUnmatchedRelievingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Performs processing of entries which was not matched with entries, which must be relieved.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntriesToRelieve">
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table instance, containing entries which must be relieved.
    /// </param>
    /// <param name="_subledgerJournalAccountEntriesAlreadyRelieved">
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table instance, containing entries which were relieved during previous partial relievings.
    /// </param>
    /// <param name="_entriesForFinalRelieving">
    ///  <c>SubledgerJournalAccountEntryRelievingTmp</c> table instance, containing entries which must be relieved at final relieving.
    /// </param>
    /// <returns>
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table instance, which contains enties which must be relieved.
    /// </returns>
    protected SubledgerJournalAccountEntryRelievingTmp addUnmatchedRelievingEntries(
        SubledgerJournalAccountEntryRelievingTmp _subledgerJournalAccountEntriesToRelieve,
        SubledgerJournalAccountEntryRelievingTmp _subledgerJournalAccountEntriesAlreadyRelieved,
        SubledgerJournalAccountEntryRelievingTmp _entriesForFinalRelieving)
    {
        insert_recordset _entriesForFinalRelieving(SubledgerJournalAccountEntry,
            ExchangeRate1,
            ExchangeRate2,
            ExchangeRateDate,
            HistoricalExchangeRateDate,
            ReportingExchangeRate1,
            ReportingExchangeRate2,
            PostingType,
            IsTransferredInDetail,
            LedgerDimension,
            IsCorrection,
            Side,
            OriginalTransferPolicy,
            TransactionCurrency,
            IndependentSourceDocumentHeader,
            TransactionCurrencyAmount,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            AccountingCurrency,
            ReportingCurrency,
            LegalEntity,
            AccountingDate,
            AccountingEvent,
            LedgerName)
            select SubledgerJournalAccountEntry, ExchangeRate1, ExchangeRate2, ExchangeRateDate, HistoricalExchangeRateDate, ReportingExchangeRate1, ReportingExchangeRate2,
                // Relieving entries transfer policy should follow the original transfer policy of the relieved entries. The relieving entries transfer policy must use the original transfer policy of the entries to be relieved.
                PostingType, OriginalTransferPolicy, LedgerDimension, IsCorrection, Side, OriginalTransferPolicy, TransactionCurrency, IndependentSourceDocumentHeader, TransactionCurrencyAmount,
                AccountingCurrencyAmount, ReportingCurrencyAmount, AccountingCurrency, ReportingCurrency, LegalEntity, AccountingDate, AccountingEvent, LedgerName
                from _subledgerJournalAccountEntriesAlreadyRelieved
                join relievingExtAlreadyRelieved
                    where relievingExtAlreadyRelieved.SubledgerJournalAccountEntryRelievingTmp == _subledgerJournalAccountEntriesAlreadyRelieved.RecId
                    notExists join _subledgerJournalAccountEntriesToRelieve
                        where _subledgerJournalAccountEntriesToRelieve.PostingType == _subledgerJournalAccountEntriesAlreadyRelieved.PostingType
                            && _subledgerJournalAccountEntriesToRelieve.LedgerDimension == _subledgerJournalAccountEntriesAlreadyRelieved.LedgerDimension
                            && _subledgerJournalAccountEntriesToRelieve.TransactionCurrency == _subledgerJournalAccountEntriesAlreadyRelieved.TransactionCurrency
                            && _subledgerJournalAccountEntriesToRelieve.AccountingCurrency == _subledgerJournalAccountEntriesAlreadyRelieved.AccountingCurrency
                            && _subledgerJournalAccountEntriesToRelieve.ReportingCurrency == _subledgerJournalAccountEntriesAlreadyRelieved.ReportingCurrency
                            && (_subledgerJournalAccountEntriesToRelieve.Side != _subledgerJournalAccountEntriesAlreadyRelieved.Side
                            ||  _subledgerJournalAccountEntriesToRelieve.IsCorrection != _subledgerJournalAccountEntriesAlreadyRelieved.IsCorrection)
                    join relievingExtToRelieve
                        where relievingExtToRelieve.SubledgerJournalAccountEntryRelievingTmp == _subledgerJournalAccountEntriesToRelieve.RecId
                            && relievingExtToRelieve.OffsetLedgerDimension == relievingExtAlreadyRelieved.OffsetLedgerDimension;


        return _entriesForFinalRelieving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNetAmountsFinalRelievingEntries</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates entries which must be relieved.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntriesToRelieve">
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table containing entries which must be relieved.
    /// </param>
    /// <param name="_subledgerJournalAccountEntriesAlreadyRelieved">
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table containing entries were relieved at previous partial relievings.
    /// </param>
    /// <returns>
    ///   <c>SubledgerJournalAccountEntryRelievingTmp</c> table containing entries to relieve with calculated amounts.
    /// </returns>
    protected SubledgerJournalAccountEntryRelievingTmp getNetAmountsFinalRelievingEntries(
        SubledgerJournalAccountEntryRelievingTmp _subledgerJournalAccountEntriesToRelieve,
        SubledgerJournalAccountEntryRelievingTmp _subledgerJournalAccountEntriesAlreadyRelieved)
    {
        SubledgerJournalAccountEntryRelievingTmp    entriesForFinalRelieving;
        SubledgerJourFinalNetAmountEntryProvider_RU    subledgerJourFinalNetAmtEntryProvider;

        this.loadOffsetLedgerDimension(_subledgerJournalAccountEntriesToRelieve, relievingExtToRelieve);
        this.loadOffsetLedgerDimension(_subledgerJournalAccountEntriesAlreadyRelieved, relievingExtAlreadyRelieved);

        subledgerJourFinalNetAmtEntryProvider = SubledgerJourFinalNetAmountEntryProvider_RU::construct();
        entriesForFinalRelieving = subledgerJourFinalNetAmtEntryProvider.getFinalRelievingEntriesWithNetAmounts(
        subledgerJournalAccountEntriesToRelieve,
        subledgerJournalAccountEntriesAlreadyRelieved,
        relievingExtToRelieve,
        relievingExtAlreadyRelieved);

        return entriesForFinalRelieving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadOffsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Loads <c>SubledgerJournalAccountEntryRelievingTmpExt_RU</c> with data containing offset ledger dimension.
    /// </summary>
    /// <param name="_relievingTmp">
    ///   Source <c>SubledgerJournalAccountEntryRelievingTmp</c> table.
    /// </param>
    /// <param name="_relievingExt">
    ///   <c>SubledgerJournalAccountEntryRelievingTmpExt_RU</c> table to load offset accounts to.
    /// </param>
    /// <remarks>
    ///   The field <c>OffsetLedgerDimension_RU</c> contains offset account for transaction and required for Russia, because original transaction can be split because of offset accounts.
    /// As result of that, the same amount can be counted twice when original and relieved transaction are subtracted.
    /// </remarks>
    private void loadOffsetLedgerDimension(SubledgerJournalAccountEntryRelievingTmp _relievingTmp, SubledgerJournalAccountEntryRelievingTmpExt_RU _relievingExt)
    {
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry, subledgerJournalAccountEntryOffset;
        SubledgerJournalAccountEntryBond    subledgerJournalAccountEntryBond, subledgerJournalAccountEntryBondOffset;

        insert_recordset _relievingExt(SubledgerJournalAccountEntryRelievingTmp, OffsetLedgerDimension)
            select RecId from _relievingTmp
                join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == _relievingTmp.SubledgerJournalAccountEntry
                join subledgerJournalAccountEntryBond
                    where subledgerJournalAccountEntryBond.SubledgerJournalAccountEntry == _relievingTmp.SubledgerJournalAccountEntry
                join subledgerJournalAccountEntryBondOffset
                    where subledgerJournalAccountEntryBondOffset.BondBatchTrans == subledgerJournalAccountEntryBond.BondBatchTrans
                join LedgerDimension from subledgerJournalAccountEntryOffset
                    where subledgerJournalAccountEntryOffset.RecId == subledgerJournalAccountEntryBondOffset.SubledgerJournalAccountEntry &&
                          subledgerJournalAccountEntryOffset.SubledgerJournalEntry == subledgerJournalAccountEntry.SubledgerJournalEntry  &&
                          subledgerJournalAccountEntryOffset.Side                  != subledgerJournalAccountEntry.Side;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>