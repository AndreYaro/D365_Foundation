<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookCompareGERDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Captures all data required for AssetBookCompare GER report
/// </summary>
public class AssetBookCompareGERDP
{
    private AssetBookCompareGERContract contract;

    #ISOCountryRegionCodes
    private AssetSumCalc assetSumCalc;
    private AssetSumCalc assetSumCalcYTD;
    private AssetTable assetTable;
    private AssetBookId book1;
    private AssetBookId book2;
    private AssetBook assetBook;
    private date fromDate;
    private date fromAcquisitionDate;
    private date fromPlacedInService;
    private date toDate;
    private date toAcquisitionDate;
    private date toPlacedInService;

    private AssetSumCalc_Trans_IN           assetSumCalc_Trans;
    private boolean                         groupnetVisibilityFlag;
    private boolean                         isDepreciationIncomeTaxActEnable;
    private AssetGroupId                    assetGroupId;
    private AssetBookId                     bookId;

    protected AssetBookCompareTmp assetBookCompareTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static AssetBookCompareGERDP construct()
    {
        AssetBookCompareGERDP dataProvider;
        dataProvider = new AssetBookCompareGERDP();
        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciationMethod</Name>
				<Source><![CDATA[
    private AssetDepreciationMethod depreciationMethod()
    {
        return assetBook.depreciationMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetBookCompareTmp</Name>
				<Source><![CDATA[
    [
        SrsReportDataSetAttribute(tablestr(AssetBookCompareTmp))
    ]
    internal AssetBookCompareTmp getAssetBookCompareTmp(AssetBookCompareGERContract _contract, Query _query)
    {
        this.processReport(_contract, _query);
        select assetBookCompareTmp;
        return assetBookCompareTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetGroupNetBookValue_IN</Name>
				<Source><![CDATA[
    private AssetNetBookValue getAssetGroupNetBookValue_IN(
        AssetBookId     _bookId,
        AssetGroupId    _assetGroupId)
    {
        AssetSumCalc    assetGroupSumCalc;

        assetGroupSumCalc = assetSumCalc_Trans;
        assetGroupSumCalc.parmAllAssetsSold_IN(AssetBook::checkAllAssetsSold_IN(_assetGroupId, _bookId));

        assetGroupSumCalc.parmGroup_IN(NoYes::Yes);
        return assetGroupSumCalc.netBookValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBookCompareTmp</Name>
				<Source><![CDATA[
    private void insertAssetBookCompareTmp()
    {
        this.defaultAssetBookCompareTmp();

        assetBookCompareTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultAssetBookCompareTmp</Name>
				<Source><![CDATA[
    protected void defaultAssetBookCompareTmp()
    {
        AssetNetBookValue   assetGroupNetBookValue;
        assetBookCompareTmp.clear();

        assetBookCompareTmp.AssetGroup = assetBook.AssetGroup;
        assetBookCompareTmp.AssetId = assetBook.AssetId;
        assetBookCompareTmp.BookId = assetBook.BookId;
        assetBookCompareTmp.CostBasis = assetSumCalc.acquisitionValueAll() + assetSumCalc.writeUpDownAdjValue() + assetSumCalc.revaluationValue();
        assetBookCompareTmp.AccDepreciation = assetSumCalc.depreciationValueAll() + assetSumCalc.extraDepreciationValue() + assetSumCalc.bonusDepreciationValue();
        assetBookCompareTmp.NetBook = assetSumCalc.netBookValue();
        assetBookCompareTmp.Name = assetTable.Name;
        assetBookCompareTmp.Status = enum2str(assetBook.Status);
        assetBookCompareTmp.LastDepreciationDate = assetBook.LastDepreciationDate;
        assetBookCompareTmp.DepMethod = enum2str(this.depreciationMethod());
        assetBookCompareTmp.DepreciationConvention = enum2str(assetBook.DepreciationConvention);

        // Spin up the correct instance of AssetSumCalc.
        // This time it will just be for the current year.
        // Use a standard calendar.

        if (isDepreciationIncomeTaxActEnable && AssetBook::find(assetBook.AssetId, assetBook.BookId).AssetGroupDepreciation_IN)
        {
            assetSumCalcYTD = AssetSumCalc_Trans_IN::newAssetPeriod(assetBook.AssetGroup,assetBook.BookId,fromDate,toDate);
        }
        else
        {
            if (contract.parmCurrencySelection() == LedgerCurrencySelection::Accounting)
            {
                assetSumCalcYTD = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId,assetBook.BookId,fromDate,toDate);
            }
            else if (contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
            {
                assetSumCalcYTD = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId, assetBook.BookId, fromDate, toDate, AssetSumCalcType::Reporting);
            }
        }

        assetBookCompareTmp.ytdDepreciation  = assetSumCalcYTD.depreciationValueAll() + assetSumCalcYTD.extraDepreciationValue() + assetSumCalcYTD.bonusDepreciationValue();

        if (assetBook.BookId == book1)
        {
            assetBookCompareTmp.DiffCostBasis = assetSumCalc.acquisitionValueAll() + assetSumCalc.writeUpDownAdjValue() + assetSumCalc.revaluationValue();
            assetBookCompareTmp.DiffAccDepreciation = assetSumCalc.depreciationValueAll() + assetSumCalc.extraDepreciationValue() + assetSumCalc.bonusDepreciationValue();
            assetBookCompareTmp.DiffNetBookValue = assetSumCalc.netBookValue();
            assetBookCompareTmp.DiffYTDDepreciation = assetSumCalcYTD.depreciationValueAll() + assetSumCalcYTD.extraDepreciationValue() + assetSumCalcYTD.bonusDepreciationValue();
            assetBookCompareTmp.BookNumber = 1;
        }
        else
        {
            assetBookCompareTmp.DiffCostBasis = -(assetSumCalc.acquisitionValueAll() + assetSumCalc.writeUpDownAdjValue() + assetSumCalc.revaluationValue());
            assetBookCompareTmp.DiffAccDepreciation = -(assetSumCalc.depreciationValueAll() + assetSumCalc.extraDepreciationValue() + assetSumCalc.bonusDepreciationValue());
            assetBookCompareTmp.DiffNetBookValue = -(assetSumCalc.netBookValue());
            assetBookCompareTmp.DiffYTDDepreciation = -(assetSumCalcYTD.depreciationValueAll() + assetSumCalcYTD.extraDepreciationValue() + assetSumCalcYTD.bonusDepreciationValue());
            assetBookCompareTmp.BookNumber = 2;
        }

        assetBookCompareTmp.SumCostBasis = assetSumCalc.acquisitionValueAll() + assetSumCalc.writeUpDownAdjValue() + assetSumCalc.revaluationValue();
        assetBookCompareTmp.SumYTDDepreciation = assetSumCalcYTD.depreciationValueAll() + assetSumCalcYTD.extraDepreciationValue() + assetSumCalcYTD.bonusDepreciationValue();
        assetBookCompareTmp.SumAccDepreciation = assetSumCalc.depreciationValueAll() + assetSumCalc.extraDepreciationValue() + assetSumCalc.bonusDepreciationValue();
        assetBookCompareTmp.SumNetBook = assetSumCalc.netBookValue();

        if (isDepreciationIncomeTaxActEnable)
        {
            assetGroupNetBookValue = this.getAssetGroupNetBookValue_IN(
                assetBook.BookId,
                assetBook.AssetGroup);

            assetBookCompareTmp.GroupNetBookValueFlag_IN        = groupnetVisibilityFlag;
            assetBookCompareTmp.AssetGroupNetBookValue_IN       = assetGroupNetBookValue;
            assetBookCompareTmp.DiffAssetGroupNetBookValue_IN   = assetBook.BookId == book1
                    ? assetGroupNetBookValue
                    : -assetGroupNetBookValue;

            if (assetGroupId != assetTable.AssetGroup || bookId != assetBook.BookId)
            {
                assetGroupId = assetTable.AssetGroup;
                bookId       = assetBook.BookId;

                assetBookCompareTmp.SumAssetGroupNetBookValue_IN     = assetGroupNetBookValue;
                assetBookCompareTmp.SumDiffAssetGroupNetBookValue_IN = assetBook.BookId == book1
                    ? assetGroupNetBookValue
                    : -assetGroupNetBookValue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    private void processReport(AssetBookCompareGERContract _contract, Query _query)
    {
        Query query = _query;
        contract = _contract;
        str preferredLocal = new Session().preferredLocale();

        fromDate = DateTimeUtil::getStartOfYearDate(preferredLocal, contract.parmStartdate());
        toDate = DateTimeUtil::getEndOfYearDate(preferredLocal, contract.parmStartdate());

        book1 = contract.parmFirstAssetBookId();
        book2 = contract.parmSecondAssetBookId();

        isDepreciationIncomeTaxActEnable = AssetParameters::isDepreciationIncomeTaxActEnable_IN();
        if (isDepreciationIncomeTaxActEnable)
        {
            groupnetVisibilityFlag = NoYes::yes;
            query.clearOrderBy();
            query.dataSourceTable(tableNum(AssetTable)).addOrderByField(fieldNum(AssetTable, AssetGroup));
            query.dataSourceTable(tableNum(AssetBook)).addOrderByField(fieldNum(AssetBook, BookId));
            query.dataSourceTable(tableNum(AssetTable)).addOrderByField(fieldNum(AssetTable, AssetId));
        }
        else
        {
            groupnetVisibilityFlag = NoYes::no;
        }

        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            assetBook = queryRun.get(tablenum(AssetBook));
            assetTable = queryRun.get(tablenum(AssetTable));

            if ((assetBook.BookId == book1 && AssetBook::exist(assetBook.AssetId, book2))
                || (assetBook.BookId == book2 && AssetBook::exist(assetBook.AssetId, book1)))
            {
                if (contract.parmCurrencySelection() == LedgerCurrencySelection::Accounting)
                {
                    assetSumCalc = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId);
                }
                else if (contract.parmCurrencySelection() == LedgerCurrencySelection::Reporting)
                {
                    assetSumCalc = AssetSumCalc_Trans::newAssetYearByCurrency(assetBook.AssetId, assetBook.BookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All, AssetSumCalcType::Reporting);
                }
                if (isDepreciationIncomeTaxActEnable)
                {
                    assetSumCalc_Trans = AssetSumCalc_Trans_IN::newAssetYear(
                        assetBook.AssetGroup,
                        assetBook.bookId);
                }

                // Grab the amounts for the book and save in temp table.
                this.insertAssetBookCompareTmp();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>