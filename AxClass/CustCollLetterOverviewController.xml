<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollLetterOverviewController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustCollLetterOverviewController</c> class is the controller for the
/// <c>CustCollectionLetterOverview</c> report.
/// </summary>
public class CustCollLetterOverviewController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        var contract = this.parmReportContract().parmRdlContract() as CustCollLetterOverviewRdlContract;
        var query = this.getFirstQuery();

        SrsReportHelper::addFromAndToDateRangeToQuery(query,
                                                      contract.parmFromDate(),
                                                      contract.parmToDate(),
                                                      tableNum(CustCollectionLetterJour),
                                                      fieldNum(CustCollectionLetterJour, CollectionLetterDate));

        var billingClassifications = contract.parmBillingClassifications();
        var inclTransWithNoBillingClassification = contract.parmInclTransWithNoBillingClassification();

        if (CustBillingClassificationReportManager::isPublicSectorScenario(billingClassifications) &&
            CustParameters::isBillingClassificationEnabled() &&
            (billingClassifications || inclTransWithNoBillingClassification))
        {
            CustBillingClassificationReportManager::setBillingClassificationRanges(query.dataSourceTable(tableNum(CustCollectionLetterJour)),
                                                                                   billingClassifications,
                                                                                   inclTransWithNoBillingClassification,
                                                                                   fieldNum(CustCollectionLetterJour, CustBillingClassification));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustCollLetterOverviewController controller = new CustCollLetterOverviewController();
        controller.parmReportName(ssrsReportStr(CustCollectionLetterOverview, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>