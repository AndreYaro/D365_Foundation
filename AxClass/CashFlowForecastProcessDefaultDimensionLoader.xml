<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastProcessDefaultDimensionLoader</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowForecastProcessDefaultDimensionLoader
{
    private DimensionEnumeration dimensionAttributeSet;
    private DimensionHierarchy cashFlowDimensionHierarchy;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CashFlowForecastProcessDefaultDimensionLoader construct()
    {
        CashFlowForecastProcessDefaultDimensionLoader dimensionLoader = new CashFlowForecastProcessDefaultDimensionLoader();

        dimensionLoader.cashFlowDimensionHierarchy = CashFlowForecastDimensionHierarchy::findDimensionHierarchyForCashFlowForecast();
        dimensionLoader.dimensionAttributeSet = CashFlowForecastDimensionHierarchy::findDimensionAttributeSetForCashFlowForecastHierarchy();

        return dimensionLoader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDimensionReferences</Name>
				<Source><![CDATA[
    internal void loadDimensionReferences()
    {
        RecordInsertList newDefaultDimensionReferences = new RecordInsertList(tableNum(CashFlowForecastDefaultDimensionReference));

        Query query = new Query();
        QueryBuildDataSource qbdsLedgerCov = query.addDataSource(tableNum(LedgerCov));
        qbdsLedgerCov.addGroupByAndSelectionField(fieldNum(LedgerCov, MainAccount));
        qbdsLedgerCov.addGroupByAndSelectionField(fieldNum(LedgerCov, DefaultDimension));

        // A notExists join to the CashFlowForecastDefaultDimensionReference table is included because
        // the primary purpose of this loop is to create ledger dimensions for the missing
        // CashFlowForecastDefaultDimensionReference records
        QueryBuildDataSource ledgerDimensionReference = qbdsLedgerCov.addDataSource(tableNum(CashFlowForecastDefaultDimensionReference));
        ledgerDimensionReference.relations(false);
        ledgerDimensionReference.addLink(fieldNum(LedgerCov, MainAccount), fieldNum(CashFlowForecastDefaultDimensionReference, MainAccount));
        ledgerDimensionReference.addLink(fieldNum(LedgerCov, DefaultDimension), fieldNum(CashFlowForecastDefaultDimensionReference, OriginalDefaultDimension));
        ledgerDimensionReference.joinMode(JoinMode::NoExistsJoin);
        ledgerDimensionReference.fetchMode(QueryFetchMode::One2One);

        // Only Liquidity accounts, as defined in Cash flow Forecasting, should be balanced.
        QueryBuildDataSource liquidityAccounts = qbdsLedgerCov.addDataSource(tableNum(LedgerLiquidity));
        liquidityAccounts.relations(false);
        liquidityAccounts.addLink(fieldNum(LedgerCov, MainAccount), fieldNum(LedgerLiquidity, MainAccount));
        liquidityAccounts.joinMode(JoinMode::ExistsJoin);
        liquidityAccounts.fetchMode(QueryFetchMode::One2One);

        QueryRun qr = new QueryRun(query);

        while (qr.next())
        {
            LedgerCov ledgerCov = qr.get(tableNum(LedgerCov));

            this.processLedgerCovDefaultDimension(
                newDefaultDimensionReferences,
                ledgerCov.MainAccount,
                ledgerCov.DefaultDimension);
        }

        newDefaultDimensionReferences.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerCovDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes an account entry ledger dimension into dimension sets.
    /// </summary>
    /// <param name="_newDefaultDimensionReferences">
    ///    The collection of new dimension set default dimension reference records.
    /// </param>
    /// <param name="_mainAccountRecId">
    ///    The main account.
    /// </param>
    /// <param name="_originalDimensionDefault">
    ///    The original default dimension.
    /// </param>
    private void processLedgerCovDefaultDimension(
        RecordInsertList _newDefaultDimensionReferences,
        MainAccountRecId _mainAccountRecId,
        DimensionDefault _originalDimensionDefault)
    {
        DimensionHierarchyLevel dimHierarchyLevel;
        DimensionAttributeValueSetItem dimAttrValueSetItem;
        DimensionAttributeValue dimAttrValue;
        DimensionAttributeValueSetStorage dimSetStorage = new DimensionAttributeValueSetStorage();

        while select DimensionAttribute, Level from dimHierarchyLevel
            order by dimHierarchyLevel.Level
                where dimHierarchyLevel.DimensionHierarchy == cashFlowDimensionHierarchy.RecId
            join firstonly DimensionAttributeValue, DimensionAttributeValueSet from dimAttrValueSetItem
                where dimAttrValueSetItem.DimensionAttributeValueSet == _originalDimensionDefault
            join dimAttrValue
                where dimAttrValue.RecId == dimAttrValueSetItem.DimensionAttributeValue
                    && dimAttrValue.DimensionAttribute == dimHierarchyLevel.DimensionAttribute
        {
            if (dimAttrValueSetItem)
            {
                dimSetStorage.addItem(DimensionAttributeValue::find(dimAttrValueSetItem.DimensionAttributeValue));
            }
        }

        RecId dimAttrValueSetRecId;
        if (dimSetStorage.elements() > 0)
        {
            dimAttrValueSetRecId = dimSetStorage.save();
        }
        else
        {
            dimAttrValueSetRecId = 0;
        }

        CashFlowForecastDefaultDimensionReference dimensionReference;
        select firstonly RecId from dimensionReference
            where dimensionReference.OriginalDefaultDimension == _originalDimensionDefault
                && dimensionReference.BalanceDefaultDimension == dimAttrValueSetRecId
                && dimensionReference.MainAccount == _mainAccountRecId;

        if (!dimensionReference)
        {
            dimensionReference.OriginalDefaultDimension = _originalDimensionDefault;
            dimensionReference.BalanceDefaultDimension = dimAttrValueSetRecId;
            dimensionReference.MainAccount = _mainAccountRecId;
            dimensionReference.DimensionAttributeSet = dimensionAttributeSet;
            _newDefaultDimensionReferences.add(dimensionReference);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReferences</Name>
				<Source><![CDATA[
    internal void clearReferences()
    {
        CashFlowForecastDefaultDimensionReference references;
        delete_from references
            where references.DimensionAttributeSet != dimensionAttributeSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>