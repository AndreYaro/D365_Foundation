<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimePriceModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maps price model nodes to runtime elements.
/// </summary>
/// <remarks>
/// This class decorates the runtime model with pricing information via mapping.
/// </remarks>
class PCRuntimePriceModel
{
    Map     nodeToPriceModelNode;
    Map     xpathToPriceModelNode;
    int     maxLevel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a runtime component to the price model.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// A runtime component.
    /// </param>
    public void addComponent(PCRuntimeComponent _runtimeComponent)
    {
        PCRuntimePriceModelNode runtimePriceModelNode = PCRuntimePriceModelNode::construct();

        nodeToPriceModelNode.insert(_runtimeComponent, runtimePriceModelNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPriceElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a runtime price element to the model.
    /// </summary>
    /// <param name="_runtimePriceElement">
    /// A runtime price element.
    /// </param>
    /// <param name="_xPath">
    /// The XPath which identifies the price element.
    /// </param>
    public void addPriceElement(PCRuntimePriceElement _runtimePriceElement, str _xPath)
    {
        PCRuntimePriceModelNode runtimePriceModelNode = PCRuntimePriceModelNode::construct();

        nodeToPriceModelNode.insert(_runtimePriceElement, runtimePriceModelNode);
        xpathToPriceModelNode.insert(_xPath, runtimePriceModelNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the existing price calculation results.
    /// </summary>
    public void clearResults()
    {
        PCRuntimePriceModelNode runtimePriceModelNode;
        MapEnumerator           me;

        me = nodeToPriceModelNode.getEnumerator();

        while (me.moveNext())
        {
            runtimePriceModelNode = me.currentValue();

            runtimePriceModelNode.parmIsCalculated(NoYes::No);
            runtimePriceModelNode.parmValue(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceModelNodeFromRuntime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a price model node from a runtime element.
    /// </summary>
    /// <param name="_runtimeElement">
    /// A runtime element.
    /// </param>
    /// <returns>
    /// A price model node.
    /// </returns>
    public PCRuntimePriceModelNode getPriceModelNodeFromRuntime(PCRuntimeInterface _runtimeElement)
    {
        return nodeToPriceModelNode.lookup(_runtimeElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the price total.
    /// </summary>
    /// <param name="_currencyCode">
    /// The currency code to display the total price in.
    /// </param>
    /// <returns>
    /// The price total.
    /// </returns>
    public real getTotal(CurrencyCode _currencyCode)
    {
        PCRuntimePriceModelNode runtimePriceModelNode;
        MapEnumerator           me;
        real                    priceTotal;
        Currency                currency = Currency::find(_currencyCode);

        me = nodeToPriceModelNode.getEnumerator();

        while (me.moveNext())
        {
            runtimePriceModelNode = me.currentValue();

            if (runtimePriceModelNode.parmIsCalculated())
            {
                priceTotal += runtimePriceModelNode.parmValue();
            }
        }

        return priceTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        nodeToPriceModelNode    = new Map(Types::Class, Types::Class);
        xpathToPriceModelNode   = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMaxLevel</Name>
				<Source><![CDATA[
    public int parmMaxLevel(int _maxLevel = maxLevel)
    {
        maxLevel = _maxLevel;

        return maxLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a node in the price model.
    /// </summary>
    /// <param name="_xPath">
    /// The XPath to the node which is target for an update.
    /// </param>
    /// <param name="_isCalculated">
    /// A boolean value indicating if the node was evaluated.
    /// </param>
    /// <param name="_value">
    /// The new value of the node.
    /// </param>
    /// <param name="_runtimePriceModelInstance">
    /// A runtime price model instance.
    /// </param>
    public void updateNode(str _xPath, NoYes _isCalculated, real _value, PCruntimePriceModelInstance _runtimePriceModelInstance)
    {
        PCRuntimePriceModelNode runtimePriceModelNode;
        real                    priceValue;
        real                    priceValueInModelCurrency;

        runtimePriceModelNode = xpathToPriceModelNode.lookup(_xPath);

        runtimePriceModelNode.parmIsCalculated(_isCalculated);

        if (_isCalculated && _value)
        {
            priceValueInModelCurrency = CurrencyExchangeHelper::price(_value, _runtimePriceModelInstance.parmPriceModelCurrency());

            if (_runtimePriceModelInstance.parmCurrency() == _runtimePriceModelInstance.parmPriceModelCurrency())
            {
                priceValue = priceValueInModelCurrency;
            }
            else
            {
                // convert from model currency to order line currency
                priceValue = ExchangeRateHelper::curPrice2CurPrice(priceValueInModelCurrency, _runtimePriceModelInstance.parmPriceModelCurrency(), _runtimePriceModelInstance.parmCurrency());
            }
        }

        runtimePriceModelNode.parmValue(priceValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimePriceModel construct()
    {
        return new PCRuntimePriceModel();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
