<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SCTTracingActivityBuilder_ProdPickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SCTTracingActivityBuilder_ProdPickingList extends SCTTracingActivityBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SCTTracingActivityBuilder_ProdPickingList construct(
        SCTTracingActivityCode _activityCode,
        Common _orderSource,
        Common _activitySource,
        Set _productTransactionSource,
        Set _consumptionTransactionSource,
        Set _dataCollection,
        SCTTracingOperationType _tracingOperationType)
    {
        return new SCTTracingActivityBuilder_ProdPickingList(
            _activityCode,
            _orderSource,
            _activitySource,
            _productTransactionSource,
            _consumptionTransactionSource,
            _dataCollection,
            _tracingOperationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(
        SCTTracingActivityCode _activityCode,
        Common _orderSource,
        Common _activitySource,
        Set _productTransactionSource,
        Set _consumptionTransactionSource,
        Set _dataCollection,
        SCTTracingOperationType _tracingOperationType)
    {
        this.activityCode = _activityCode;
        this.orderSource = _orderSource;
        this.activitySource = _activitySource;
        this.productTransactionSource = _productTransactionSource;
        this.consumptionTransactionSource = _consumptionTransactionSource;
        this.dataCollection = _dataCollection;
        this.tracingOperationType = _tracingOperationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTracingActivity</Name>
				<Source><![CDATA[
    internal static void createTracingActivity(ProdJournalTable _pickingListJournal)
    {
        Map                                   productComponentLotMatchMap = new Map(Types::String, Types::Class);    // KV = {product LOT association matchID => Set {component LOT associtions}}
        ProdJournalBOM                        pickingListJournalLine;
        ProdAsBuiltBOMComponentLotAssociation componentLotAssociation;

        while select RecId
            from pickingListJournalLine
            where pickingListJournalLine.ProdId    == _pickingListJournal.ProdId
               && pickingListJournalLine.JournalId == _pickingListJournal.JournalId
            join componentLotAssociation
                where componentLotAssociation.ReferenceId           == pickingListJournalLine.ProdId
                   && componentLotAssociation.PickingListJournalId  == pickingListJournalLine.JournalId
                   && componentLotAssociation.InventTransId         == pickingListJournalLine.InventTransId
                   && componentLotAssociation.InventTransChildRefId == pickingListJournalLine.InventTransChildRefId
                   && componentLotAssociation.InventTransChildType  == pickingListJournalLine.InventTransChildType
        {
            if (!productComponentLotMatchMap.exists(componentLotAssociation.MatchId))
            {
                Set componentsSet = new Set(Types::Record);
                componentsSet.add(componentLotAssociation);
                productComponentLotMatchMap.insert(componentLotAssociation.MatchId, componentsSet);
            }
            else
            {
                Set componentsSet = productComponentLotMatchMap.lookup(componentLotAssociation.MatchId);
                componentsSet.add(componentLotAssociation);
            }
        }

        if (!productComponentLotMatchMap.elements())
        {
            return;
        }

        ProdAsBuiltBOMProductLotAssociation productLotAssociation;
        ProdTable                           productionOrder = ProdTable::find(_pickingListJournal.ProdId);
        MapEnumerator                       enumeratorProductLotAssociations = productComponentLotMatchMap.getEnumerator();

        while (enumeratorProductLotAssociations.moveNext())
        {
            // products
            select firstonly productLotAssociation
                where productLotAssociation.ReferenceId == _pickingListJournal.ProdId
                   && productLotAssociation.MatchId     == enumeratorProductLotAssociations.currentKey();

            if (productLotAssociation.RecId)
            {
                Set productTransactionSource = new Set(Types::Record);
                Set consumptionTransactionSource = new Set(Types::Record);

                productTransactionSource.add(productLotAssociation);

                // components
                SetEnumerator enumeratorComponentLotAssociations = enumeratorProductLotAssociations.currentValue().getEnumerator();
                while (enumeratorComponentLotAssociations.moveNext())
                {
                    consumptionTransactionSource.add(enumeratorComponentLotAssociations.current());
                }

                SCTTracingActivityHelper::createAndInsertTracingActivity(SCTTracingActivityType::Production,
                                                                 SCTTracingActivityCode::ProductionPickingList,
                                                                 productionOrder,
                                                                 _pickingListJournal,
                                                                 productTransactionSource,
                                                                 consumptionTransactionSource,
                                                                 null);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildActivity</Name>
				<Source><![CDATA[
    protected SCTTracingActivity buildActivity()
    {
        switch (this.activityCode)
        {
            case SCTTracingActivityCode::ProductionPickingList:
                return this.buildProductionPickingListActivity();

            default:
                throw error(strFmt("@SCM:SCTActivityCodeValidation_builder", this.activityCode, classId2Name(classIdGet(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTracingTransactionContractFromRecord</Name>
				<Source><![CDATA[
    protected SCTTracingTransactionContract buildTracingTransactionContractFromRecord(Common _record)
    {
        switch (_record.TableId)
        {
            case tableNum(ProdAsBuiltBOMComponentLotAssociation):
                ProdAsBuiltBOMComponentLotAssociation componentLotAssociation = _record as ProdAsBuiltBOMComponentLotAssociation;
                if (SCTCacheManager::checkTracingEnabledForItem(componentLotAssociation.ItemId))
                {
                    return SCTTracingTransactionContract_ProdPickingList::newFromComponentLotAssociation(componentLotAssociation);
                }
                else
                {
                    return null;
                }
            case tableNum(ProdAsBuiltBOMProductLotAssociation):
                ProdAsBuiltBOMProductLotAssociation productLotAssociation = _record as ProdAsBuiltBOMProductLotAssociation;
                if (SCTCacheManager::checkTracingEnabledForItem(productLotAssociation.ItemId))
                {
                    return SCTTracingTransactionContract_ProdReportFinished::newFromProductLotAssociation(productLotAssociation);
                }
                else
                {
                    return null;
                }

            default:
                throw error(strFmt("@SCM:SCTTransactionSourceValidation", _record.TableId, classId2Name(classIdGet(this))));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderSourceValid</Name>
				<Source><![CDATA[
    protected boolean isOrderSourceValid()
    {
        return this.orderSource.TableId == tableNum(ProdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProductionPickingListActivity</Name>
				<Source><![CDATA[
    private SCTTracingActivity buildProductionPickingListActivity()
    {
        if (this.activitySource.TableId != tableNum(ProdJournalTable))
        {
            throw error(strFmt("@SCM:SCTActivitySourceValidation", tableId2Name(activitySource.TableId), this.activityCode));
        }
        
        SCTTracingActivity tracingActivity;
        ProdTable productionOrder = this.orderSource as ProdTable;
        ProdJournalTable pickingListJournal = this.activitySource as ProdJournalTable;
        
        tracingActivity.ConsumptionTransactions = this.buildSerializedTransactionsFromRecords(this.consumptionTransactionSource);
        if (tracingActivity.ConsumptionTransactions == '[]')
        {
            // If all transactions are filtered out => return null.
            this.shouldSkip = true;
            return null;
        }

        tracingActivity.ProductTransactions = this.buildSerializedTransactionsFromRecords(this.productTransactionSource);
        if (tracingActivity.ProductTransactions == '[]')
        {
            // If all transactions are filtered out => return null.
            this.shouldSkip = true;
            return null;
        }

        tracingActivity.ReferenceId      = productionOrder.ProdId;
        tracingActivity.ActivityType     = enum2Symbol(enumNum(SCTTracingActivityType), SCTTracingActivityType::Production);
        tracingActivity.ActivityCode     = enum2Symbol(enumNum(SCTTracingActivityCode), SCTTracingActivityCode::ProductionPickingList);
        tracingActivity.ActivityDateTime = DateTimeUtil::utcNow();
        tracingActivity.ActivityId       = pickingListJournal.JournalId;
        tracingActivity.DataCollection   = FormJsonSerializer::serializeClass(
            SCTTracingActivityDataCollection::construct(tracingActivity.ActivityId, tracingActivity.ReferenceId));
        
        tracingActivity.TracingOperationType = this.tracingOperationType;

        return tracingActivity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>