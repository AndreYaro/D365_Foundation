<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymRecord_NACHA_PPD</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendOutPaymRecord_NACHA_PPD extends VendOutPaymRecord_NACHA
{
    //***** NACHA PPD Record Layout *****
    //
    //      Field                           Offset  Value
    //--    ------------------------------- ------- -----------
    //01    recordTypeCode                  01 - 01 6
    //02    transactionCode                 02 - 03
    //03    receivingDFI_Identification     04 - 11
    //04    checkDigit                      12 - 12
    //05    DFI_AccountNumber               13 - 29
    //06    amount                          30 - 39
    //07    identificationNumber            40 - 54
    //08    individualName                  55 - 76
    //09    discretionaryData               77 - 78
    //10    addendaRecordIndicator          79 - 79 0 (ZERO)
    //11    traceNumber                     80 - 94

    #define.interfaceName('Standard NACHA - PPD')
    #define.formatType('PPD')

    //Offsets:
    #define.individualNameOffset(55)
    #define.traceNumberOffset(80)

    //Field Lengths:
    #define.individualNameLength(22)

    container nacha_ppd_Record;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPPDFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a debug field information to the output file.
    /// </summary>
    protected void addPPDFieldPositions()
    {
        #define.pPDRecordLayout         ('ABBCCCCCCCCDEEEEEEEEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHIIJKKKKKKKKKKKKKKK - PPD PAYABLES RECORD')
        #define.pPDTraceNumber          ('                                                                               KKKKKKKKKKKKKKK - Trace Number [Journal ID + Line Number]')
        #define.pPDAddendaIndicator     ('                                                                              J - Addenda Record Indicator = "0"')
        #define.pPDDiscretionayData     ('                                                                            II - Discretionary Data <BLANK>')
        #define.pPDIndividualName       ('                                                      HHHHHHHHHHHHHHHHHHHHHH - Individual Name')
        #define.pPDIdentificationNumber ('                                       GGGGGGGGGGGGGGG - Identification Number')
        #define.pPDAmount               ('                             FFFFFFFFFF - Amount [$$$$$$$$cc]')
        #define.pPDDFIAccountNumber     ('            EEEEEEEEEEEEEEEEE - DFI Account Number')
        #define.pPDCheckDigit           ('           D - Check Digit')
        #define.pPDReceivingDFI_ID      ('   CCCCCCCC - Receiving DFI Identification')
        #define.pPDTransactionCode      (' BB - Transaction Code = "22" for AP Checking, "32" for AP Savings')
        #define.pPDRecordTypeCode       ('A - Record Type Code = "6"')

        file.write(#pPDRecordLayout);
        file.write(#pPDTraceNumber);
        file.write(#pPDAddendaIndicator);
        file.write(#pPDDiscretionayData);
        file.write(#pPDIndividualName);
        file.write(#pPDIdentificationNumber);
        file.write(#pPDAmount);
        file.write(#pPDDFIAccountNumber);
        file.write(#pPDCheckDigit);
        file.write(#pPDReceivingDFI_ID);
        file.write(#pPDTransactionCode);
        file.write(#pPDRecordTypeCode);
        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null,
        RunbaseProgress _progress = null)
    {
        boolean ok = true;

        ok = super(_ledgerJournalTrans, _progress);

        changecompany(custVendPaym.ledgerJournalTrans().Company)
        {
            if (!this.parmIsPrenote())
            {
                if (VendPaymMethodVal::exist(_ledgerJournalTrans.PaymMode, VendPaymentValidate::PaymReference)
                    && !_ledgerJournalTrans.PaymReference)
                {
                    ok = checkFailed("@SYS24523");
                }
            }
            if (ok)
            {
                // Only transactions with Debit Amounts can be used from Accounts Payable
                if (custVendPaym.paymAmountInSendersCurrency() <= 0)
                {
                    // Payment  must be a debit amount greater than zero.
                    if (!this.parmIsPrenote())
                        ok = checkFailed(strfmt("@SYS98765", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                vendBankAccount = this.getVendBankAccount();
                if (!vendBankAccount)
                {
                    // A bank account has not been setup for the vendor '%1'.
                    ok = checkFailed(strfmt("@SYS98116", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                else
                {
                    if (!vendBankAccount.AccountNum)
                    {
                        // Bank account number on account '%1' for vendor '%2' is missing.
                        ok = checkFailed(strfmt("@SYS82529", vendBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                    }
                }

                if (vendBankAccount.bankAccountStatus(DateTimeUtil::utcNow()) == BankAccountStatus::Inactive)
                {
                    if (BankParameters::find().AllowInactiveBankPrenote == NoYes::Yes)
                    {
                        warning(strfmt("@SYS128746",vendBankAccount.AccountID,vendBankAccount.VendAccount));
                    }
                    else
                    {
                        ok = checkFailed(strfmt("@SYS127527",VendTable::find(vendBankAccount.VendAccount).Name(),vendBankAccount.AccountID));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Receiving Company Name/ID field in the NACHA PPD detail record. Will contain the
    ///    receiver's company name.
    /// </summary>
    // Receiving Company Name/Id
    protected void fillField08()
    {
        this.strInsert(substr(custVendPaym.recieversCompanyName(), 1, #individualNameLength), #individualNameOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField11</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Trace Number field in the NACHA PPD detail record.
    /// </summary>
    // Trace Number
    //
    // This is a number that we can use to attempt to uniquely identify the transaction.
    // Ideally, this would consist of an EFT Number, which would function like a Check Number.
    //
    // But because of time constraints, the Trace Number will be generated by concatinating
    // the Journal Numer & Line Number with the following limitations to create a number that
    // will be unique for most users:
    //
    //  The Line Number portion of the Trace Number will be at least four characters,
    //  allowing for a minimum of 10000 unique lines per journal.  If the Journal Number
    //  is shorter than 11 characters, the number of characters the line number uses will
    //  grow to fill the 15 characters allowed for the Trace Number.
    //  If the Journal Number is longer than 11 characters, this method will use the
    //  right-most 11 characters from the Journal Number when generating the Trace Number.
    //  If the Line Number is greater than 9999, the right-most three characters of the
    //  Line Number will be used.
    //  So in the situation where there are only three characters for the line number, the
    //  numbers will wrap-around to 0000 each 10000 lines and icrement from there, which will
    //  make this trace number non-unique and not suitable for electronic reconcile, but it
    //  should be unique enough for most manual needs.
    //
    //  EXAMPLES:
    //      Journal Number: 000097_003
    //      Line Number:    1
    //      Trace Number: "000097_00300001"
    //
    //      Journal Number: 1234567890_003
    //      Line Number:    11036
    //      Trace Number: "4567890_0031036"
    //

    protected void fillField11()
    {
        this.strInsert(this.generateTraceNumber(), #traceNumberOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls each fillFieldXX method to populate the entire PPD payment record.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08();
        this.fillField09();
        this.fillField10();
        this.fillField11();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the PPD payment output record.
    /// </summary>
    protected void initRecord()
    {
        #define.blankRoutingNumber('0')
        #define.blank(' ')

        nacha_ppd_Record = connull();
        transactionAmount = 0;
        bankRoutingNumber = strrep(#blankRoutingNumber, 8);
        outputRecord = strrep(#blank, 94);

        changecompany(custVendPaym.ledgerJournalTrans().Company)
        {
            vendBankAccount = VendBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), VendTable::findByCompany(custVendPaym.ledgerJournalTrans().Company, custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the specification to be displayed in the user interface (UI).
    /// </summary>
    /// <returns>
    ///    The name of the specification to be displayed in the UI.
    /// </returns>
    public PaymInterfaceName interfaceName()
    {
        return #interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the payment detail to the Electronic Funds Transfer (EFT) output file and increments the
    /// totals for the transaction.
    /// </summary>
    public void output()
    {
        // Only transactions with Debit Amounts can be used from Accounts Payable
        this.initRecord();
        this.fillRecord();
        custVendOutPaym.addDetailRecord(#formatType, bankRoutingNumber, 0, transactionAmount);

        nacha_ppd_Record = conins(nacha_ppd_Record, 1, outputRecord);

        file.writeExp(nacha_ppd_Record);

        if (custVendOutPaym.isDebug())
        {
            this.addPPDFieldPositions();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>