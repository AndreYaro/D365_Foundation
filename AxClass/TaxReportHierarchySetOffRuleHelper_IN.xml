<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchySetOffRuleHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a helper class to handle action for <c>TaxReportHierarchySetOffRuleDetails_IN</c> table.
/// </summary>
public class TaxReportHierarchySetOffRuleHelper_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteSetOffRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in <c>TaxReportHierarchySetOffRule_IN</c> and <c>TaxReportHrchyNodeCollection_IN</c> tables.
    /// </summary>
    /// <param name="_setOffRuleRecId">
    /// The recid is used to find record.
    /// </param>
    public static void deleteSetOffRule(RecId _setOffRuleRecId)
    {
        TaxReportHierarchySetOffRule_IN     ruleLoc;
        TaxReportHrchyNodeCollection_IN     collLoc;

        ttsBegin;

        // Delete the setoff rule & details
        ruleLoc = TaxReportHierarchySetOffRule_IN::find(_setOffRuleRecId, true);
        ruleLoc.delete();

        // Delete the node collections & details
        select forUpdate collLoc
            where collLoc.Name == strFmt("%1_%2", ruleLoc.Name, enum2int(TaxDirection::IncomingTax));
        collLoc.delete();

        select forUpdate collLoc
            where collLoc.Name == strFmt("%1_%2", ruleLoc.Name, enum2int(TaxDirection::OutgoingTax));
        collLoc.delete();

        TaxReportHierarchySetOffRuleHelper_IN::updatePriority(ruleLoc.TaxReportHierarchyVersion_IN, ruleLoc.Priority);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreviousRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds the TaxReportHierarchySetOffRule_IN based on the rule priority.
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// The recid parameter.
    /// </param>
    /// <param name="_currentRulePriority">
    /// The parameter priority.
    /// </param>
    /// <returns>
    /// Returns the TaxReportHierarchySetOffRule_IN selected record.
    /// </returns>
    public static TaxReportHierarchySetOffRule_IN findPreviousRule(RefRecId _hierarchyVersionRecId, Priority _currentRulePriority)
    {
        TaxReportHierarchySetOffRule_IN previousRule;

        select firstonly previousRule
            order by Priority desc
            where previousRule.TaxReportHierarchyVersion_IN == _hierarchyVersionRecId
               && previousRule.Priority <= _currentRulePriority;

        return previousRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOffRuleInitPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// The static method gets the TaxReportHierarchySetOffRule_IN based on max of priority.
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// The recid parameter.
    /// </param>
    /// <returns>
    /// Returns the value of TaxReportHierarchySetOffRule_IN priority.
    /// </returns>
    public static Priority getSetOffRuleInitPriority(RefRecId _hierarchyVersionRecId)
    {
        TaxReportHierarchySetOffRule_IN  taxSetOffRule;

        select maxOf(Priority) from taxSetOffRule
            where taxSetOffRule.TaxReportHierarchyVersion_IN == _hierarchyVersionRecId;

        return taxSetOffRule.Priority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitRuleCollectionDetailPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes and inserts the TaxReportHierarchySetOffRuleDetails_IN table.
    /// </summary>
    /// <param name="_ruleDirectionRecId">
    /// The Recid parameter.
    /// </param>
    public static void InitRuleCollectionDetailPriority(RefRecId _ruleDirectionRecId)
    {
        TaxReportHierarchySetOffRuleDirection_IN         ruleDirection;
        TaxReportHierarchySetOffRuleDetails_IN           ruleDetails;
        TaxReportHrchyNodeCollectionDetails_IN           collectionDetail;
        Priority                                         priorityLoc = 1;

        ruleDirection = TaxReportHierarchySetOffRuleDirection_IN::find(_ruleDirectionRecId);
        if (ruleDirection)
        {
            select firstOnly ruleDetails
                where ruleDetails.TaxReportHierarchySetOffRuleDirection_IN == ruleDirection.RecId;

            select firstonly collectionDetail
                where collectionDetail.RecId == ruleDetails.TaxReportHrchyNodeCollectionDetails_IN;

            if (!ruleDetails || collectionDetail.TaxReportHrchyNodeCollection_IN != ruleDirection.TaxReportHrchyNodeCollection_IN)
            {
                ttsBegin;

                delete_from ruleDetails
                    where ruleDetails.TaxReportHierarchySetOffRuleDirection_IN == ruleDirection.RecId;

                while select TaxReportHrchyNodeCollection_IN, RecId from collectionDetail
                    where collectionDetail.TaxReportHrchyNodeCollection_IN == ruleDirection.TaxReportHrchyNodeCollection_IN
                {
                    ruleDetails.clear();
                    ruleDetails.Priority = priorityLoc;
                    ruleDetails.TaxReportHrchyNodeCollectionDetails_IN   = collectionDetail.RecId;
                    ruleDetails.TaxReportHierarchySetOffRuleDirection_IN = ruleDirection.RecId;
                    ruleDetails.insert();

                    priorityLoc ++;
                }

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDownSetOffRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method moves down the record in TaxReportHierarchySetOffRule_IN based on the priority.
    /// </summary>
    /// <param name="_setOffRule">
    /// The TaxReportHierarchySetOffRule_IN buffer
    /// </param>
    /// <returns>
    /// Returns the updated TaxReportHierarchySetOffRule_IN buffer.
    /// </returns>
    public static TaxReportHierarchySetOffRule_IN moveDownSetOffRule(TaxReportHierarchySetOffRule_IN _setOffRule)
    {
        TaxReportHierarchySetOffRule_IN    nextRule;
        TaxReportHierarchySetOffRule_IN    currentRule;
        Priority                           priorityBuffer;

        ttsbegin;

        select firstonly forupdate nextRule
            order by Priority asc
            where   nextRule.TaxReportHierarchyVersion_IN  == _setOffRule.TaxReportHierarchyVersion_IN
               &&   nextRule.Priority     >  _setOffRule.Priority;

        currentRule = TaxReportHierarchySetOffRule_IN::find(_setOffRule.RecId, true);

        if (nextRule && currentRule)
        {
            priorityBuffer = nextRule.Priority;
            nextRule.Priority = _setOffRule.Priority;

            currentRule.Priority = -1;
            currentRule.update();
            nextRule.update();

            currentRule.Priority = priorityBuffer;
            currentRule.update();
        }

        ttscommit;

        return currentRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDownSetOffRuleDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method moves down the record in TaxReportHierarchySetOffRuleDetails_IN based on the priority.
    /// </summary>
    /// <param name="_setOffRuleDetail">
    /// The TaxReportHierarchySetOffRuleDetails_IN buffer
    /// </param>
    /// <returns>
    /// Returns the updated TaxReportHierarchySetOffRuleDetails_IN buffer.
    /// </returns>
    public static TaxReportHierarchySetOffRuleDetails_IN moveDownSetOffRuleDetail(TaxReportHierarchySetOffRuleDetails_IN _setOffRuleDetail)
    {
        TaxReportHierarchySetOffRuleDetails_IN    nextRuleDetail;
        TaxReportHierarchySetOffRuleDetails_IN    currentRuleDetail;
        Priority                                  priorityBuffer;

        ttsbegin;

        select firstonly forupdate nextRuleDetail
            order by Priority asc
            where   nextRuleDetail.TaxReportHierarchySetOffRuleDirection_IN  == _setOffRuleDetail.TaxReportHierarchySetOffRuleDirection_IN
               &&   nextRuleDetail.Priority     >  _setOffRuleDetail.Priority;

        currentRuleDetail = TaxReportHierarchySetOffRuleDetails_IN::find(_setOffRuleDetail.RecId, true);

        if (nextRuleDetail && currentRuleDetail)
        {
            priorityBuffer = nextRuleDetail.Priority;
            nextRuleDetail.Priority = _setOffRuleDetail.Priority;

            currentRuleDetail.Priority = -1;
            currentRuleDetail.update();
            nextRuleDetail.update();

            currentRuleDetail.Priority = priorityBuffer;
            currentRuleDetail.update();
        }

        ttscommit;

        return currentRuleDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUpSetOffRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method moves up the record in TaxReportHierarchySetOffRule_IN based on the priority.
    /// </summary>
    /// <param name="_setOffRule">
    /// The TaxReportHierarchySetOffRule_IN buffer
    /// </param>
    /// <returns>
    /// Returns the updated TaxReportHierarchySetOffRule_IN buffer.
    /// </returns>
    public static TaxReportHierarchySetOffRule_IN moveUpSetOffRule(TaxReportHierarchySetOffRule_IN _setOffRule)
    {
        Priority                         priorityBuffer;
        TaxReportHierarchySetOffRule_IN  previousRule;
        TaxReportHierarchySetOffRule_IN  currentRule;

        ttsBegin;

        select firstOnly forUpdate previousRule
            order by Priority desc
            where previousRule.TaxReportHierarchyVersion_IN == _setOffRule.TaxReportHierarchyVersion_IN
            &&    previousRule.Priority < _setOffRule.Priority;

        currentRule = TaxReportHierarchySetOffRule_IN::find(_setOffRule.RecId, true);

        if (previousRule && currentRule)
        {
            priorityBuffer = previousRule.Priority;
            previousRule.Priority = _setOffRule.Priority;

            currentRule.Priority = -1;
            currentRule.update();
            previousRule.update();

            currentRule.Priority = priorityBuffer;
            currentRule.update();
        }

        ttsCommit;

        return currentRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUpSetOffRuleDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method moves up the record in TaxReportHierarchySetOffRuleDetails_IN based on the priority.
    /// </summary>
    /// <param name="_setOffRuleDetail">
    /// The TaxReportHierarchySetOffRuleDetails_IN buffer
    /// </param>
    /// <returns>
    /// Returns the updated TaxReportHierarchySetOffRuleDetails_IN buffer.
    /// </returns>
    public static TaxReportHierarchySetOffRuleDetails_IN moveUpSetOffRuleDetail(TaxReportHierarchySetOffRuleDetails_IN _setOffRuleDetail)
    {
        TaxReportHierarchySetOffRuleDetails_IN    previousRuleDetail;
        TaxReportHierarchySetOffRuleDetails_IN    currentRuleDetail;
        Priority                                  priorityBuffer;

        ttsbegin;

        select firstonly forupdate previousRuleDetail
            order by Priority desc
            where   previousRuleDetail.TaxReportHierarchySetOffRuleDirection_IN  == _setOffRuleDetail.TaxReportHierarchySetOffRuleDirection_IN
               &&   previousRuleDetail.Priority     <  _setOffRuleDetail.Priority;

        currentRuleDetail = TaxReportHierarchySetOffRuleDetails_IN::find(_setOffRuleDetail.RecId, true);

        if (previousRuleDetail && currentRuleDetail)
        {
            priorityBuffer = previousRuleDetail.Priority;
            previousRuleDetail.Priority = _setOffRuleDetail.Priority;

            currentRuleDetail.Priority = -1;
            currentRuleDetail.update();
            previousRuleDetail.update();

            currentRuleDetail.Priority = priorityBuffer;
            currentRuleDetail.update();
        }

        ttscommit;

        return currentRuleDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDetailsPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// This static method updates the TaxReportHierarchySetOffRuleDetails_IN table.
    /// </summary>
    /// <param name="_ruleDirRecId">
    /// The RefRecid parameter.
    /// </param>
    /// <param name="_deletedRuleDetailPriority">
    /// The Priority paramter.
    /// </param>
    public static void updateDetailsPriority(RefRecId _ruleDirRecId, Priority _deletedRuleDetailPriority)
    {
        TaxReportHierarchySetOffRuleDetails_IN  affectedRuleDetail;

        update_recordSet affectedRuleDetail
            setting Priority = affectedRuleDetail.Priority - 1
            where affectedRuleDetail.TaxReportHierarchySetOffRuleDirection_IN == _ruleDirRecId
               && affectedRuleDetail.Priority > _deletedRuleDetailPriority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// This static method updates the TaxReportHierarchySetOffRule_IN table.
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// The RefRecid parameter.
    /// </param>
    /// <param name="_deletedRulePriority">
    /// The Priority paramter.
    /// </param>
    public static void updatePriority(RefRecId _hierarchyVersionRecId, Priority _deletedRulePriority)
    {
        TaxReportHierarchySetOffRule_IN affectedRule;

        update_recordSet affectedRule
            setting Priority = affectedRule.Priority - 1
            where affectedRule.TaxReportHierarchyVersion_IN == _hierarchyVersionRecId
            &&  affectedRule.Priority > _deletedRulePriority;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>