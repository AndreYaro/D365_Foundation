<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTaskEstimatesSynchronizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjTaskEstimatesSynchronizer</c> class is used to synchronize data in the estimate lines of a task
/// in a work breakdown structure with estimate summary data maintained in the task.
/// </summary>
class ProjTaskEstimatesSynchronizer
{
    ProjWBSType             wbsType;
    ProjTable               projTable;
    SalesQuotationTable     salesQuotationTable;
    HierarchyIdBase         hierarchyId;
    smmActivityNumber       rootActivityNumber;
    CalendarId              calendarId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalEstimateLineHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total number of hours for a given estimate line.
    /// </summary>
    /// <param name = "_activityNumber">The activity number related to the estimate.</param>
    /// <returns>Number of hours</returns>
    protected NonNegativeQuantity calcTotalEstimateLineHours(smmActivityNumber _activityNumber)
    {
        PSAActivityEstimates    psaActivityEstimatesQtySum;

        select sum(Quantity)
            from psaActivityEstimatesQtySum
            where psaActivityEstimatesQtySum.ActivityNumber == _activityNumber
               && psaActivityEstimatesQtySum.ProjTransType == QuotationProjTransType::Hour;

        return psaActivityEstimatesQtySum.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSummaryTaskCategories</Name>
				<Source><![CDATA[
    private void clearSummaryTaskCategories()
    {
        PSAActivitySetup        taskInfo;
        ProjActivity            projActivity;
        smmActivities           activity;
        HierarchyTreeTable      treeElement, childTreeElement;

        ttsbegin;
        update_recordset taskInfo
        setting CategoryDefault = ''
        join RecId from activity
        where taskInfo.ActivityNumber == activity.ActivityNumber
            join RecId from treeElement
            where treeElement.RefRecId == activity.RecId
                  && treeElement.HierarchyId == hierarchyId
                exists join RecId from childTreeElement
                where childTreeElement.ParentElementNumber  == treeElement.ElementNumber
                      && childTreeElement.HierarchyId       == treeElement.HierarchyId;

        update_recordset taskInfo
        setting CategoryDefault = ''
        where taskInfo.ActivityNumber == rootActivityNumber;

        update_recordset projActivity
        setting CategoryDefault = ''
        join RecId from activity
        where projActivity.ActivityNumber == activity.ActivityNumber
            join RecId from treeElement
            where treeElement.RefRecId          == activity.RecId
                  && treeElement.HierarchyId    == hierarchyId
                exists join RecId from childTreeElement
                where childTreeElement.ParentElementNumber  == treeElement.ElementNumber
                      && childTreeElement.HierarchyId       == treeElement.HierarchyId;

        update_recordset projActivity
        setting CategoryDefault = ''
        where projActivity.ActivityNumber == rootActivityNumber;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumberOfHourEstimateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of hour-based lines on a given task estimate.
    /// </summary>
    /// <param name = "_taskActivityNumber">The activity number of the task estimate</param>
    /// <returns>Count of hour-based lines.</returns>
    protected int64 countNumberOfHourEstimateLines(smmActivityNumber _taskActivityNumber)
    {
        PSAActivityEstimates taskPSAActivityEstimates;

        select count(RecId) from taskPSAActivityEstimates
            where taskPSAActivityEstimates.ActivityNumber    == _taskActivityNumber
                  && taskPSAActivityEstimates.ProjTransType  == QuotationProjTransType::Hour;

        return taskPSAActivityEstimates.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countNumberOfTreeElements</Name>
				<Source><![CDATA[
    private int64 countNumberOfTreeElements()
    {
        HierarchyTreeTable hierarchyTreeTable;

        select count(RecId) from hierarchyTreeTable
        where hierarchyTreeTable.HierarchyId == hierarchyId;

        return hierarchyTreeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEstimateLineFromTask</Name>
				<Source><![CDATA[
private void createEstimateLineFromTask(PSAActivitySetup _task, CategoryId _taskCategoryId)
    {
        PSAActivityEstimates    taskPSAActivityEstimates;
        ProjId                  projId;

        ttsbegin;
        projId = this.getProjectId();

        if (projId && projTable.ValidateProjCategory)
        {
            ProjValElementServer::AddCategoryToProjIfAbsent(projId, _taskCategoryId);
        }

        taskPSAActivityEstimates.initValue();
        taskPSAActivityEstimates.ActivityNumber = _task.ActivityNumber;
        taskPSAActivityEstimates.ProjTransType  = QuotationProjTransType::Hour;
        taskPSAActivityEstimates.modifiedField(fieldNum(PSAActivityEstimates, ProjTransType), _task.PSASchedStart);
        taskPSAActivityEstimates.ProjCategoryId = _taskCategoryId;
        taskPSAActivityEstimates.Quantity       = _task.Effort;
        taskPSAActivityEstimates.setCostSalesPrice(projId, salesQuotationTable.CustAccount, _task.PSASchedStart);
        taskPSAActivityEstimates.setTotalCostSalesPrice();
        taskPSAActivityEstimates.setDescriptionFromProjCategory();

        taskPSAActivityEstimates.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(projId, _taskCategoryId);
        taskPSAActivityEstimates.modifiedField(fieldNum(PSAActivityEstimates, LinePropertyId), _task.PSASchedStart);
        this.syncTaskCostEACWithModifiedEstimate(_task, taskPSAActivityEstimates);
        this.syncTaskEffortEACWithModifiedEstimate(_task, taskPSAActivityEstimates);
        taskPSAActivityEstimates.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHourEstimates</Name>
				<Source><![CDATA[
    private void deleteHourEstimates(PSAActivitySetup _taskToSyncWith)
    {
        PSAActivityEstimates    taskPSAActivityEstimates;
        Total                   totalEstimatedCostPrice;
        Qty                     totalNumberOfHours;

        select sum(TotalCostPrice), sum(Quantity) from taskPSAActivityEstimates
        where taskPSAActivityEstimates.ActivityNumber   == _taskToSyncWith.ActivityNumber
              && taskPSAActivityEstimates.ProjTransType == QuotationProjTransType::Hour;
        totalEstimatedCostPrice = taskPSAActivityEstimates.TotalCostPrice;
        totalNumberOfHours      = taskPSAActivityEstimates.Quantity;

        ttsbegin;
        delete_from taskPSAActivityEstimates
        where taskPSAActivityEstimates.ActivityNumber   == _taskToSyncWith.ActivityNumber
              && taskPSAActivityEstimates.ProjTransType == QuotationProjTransType::Hour;

        this.syncTaskEACWithDeletedEstimates(_taskToSyncWith, totalEstimatedCostPrice, _taskToSyncWith.orig().Effort);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSummaryTaskEstimates</Name>
				<Source><![CDATA[
    private void deleteSummaryTaskEstimates()
    {
        PSAActivityEstimates    summaryEstimates;
        smmActivities           activity;
        HierarchyTreeTable      treeElement, childTreeElement;

        delete_from summaryEstimates
        exists join RecId from activity
        where summaryEstimates.ActivityNumber == activity.ActivityNumber
            join RecId from treeElement
            where treeElement.RefRecId == activity.RecId
                  && treeElement.HierarchyId == hierarchyId
                join RecId from childTreeElement
                where childTreeElement.ParentElementNumber  == treeElement.ElementNumber
                      && childTreeElement.HierarchyId       == treeElement.HierarchyId;

        delete_from summaryEstimates
        where summaryEstimates.ActivityNumber == rootActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaskEstimates</Name>
				<Source><![CDATA[
    private void deleteTaskEstimates(PSAActivitySetup _taskInfo)
    {
        PSAActivityEstimates    estimates;

        delete_from estimates where estimates.ActivityNumber == _taskInfo.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTaskCategory</Name>
				<Source><![CDATA[
    private CategoryId getDefaultTaskCategory(PSAActivitySetup _taskInfo,
                                              ProjActivity     _projectActivity)
    {
        ProjCategoryId defaultTaskCategory;

        switch (wbsType)
        {
            case ProjWBSType::Project:
            case ProjWBSType::Template:
                defaultTaskCategory = _projectActivity.CategoryDefault;
                break;
            case ProjWBSType::ProjectQuotation:
                defaultTaskCategory = _taskInfo.CategoryDefault;
                break;
        }

        return defaultTaskCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    private ProjId getProjectId()
    {
        ProjId projId;

        switch (wbsType)
        {
            case ProjWBSType::Project:
                projId = projTable.ProjId;
                break;
            default:
                projId = "";
                break;
        }

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOutOfSyncHourEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether there are hour estimates out of sync with their task.
    /// </summary>
    /// <returns>
    ///     true if there's any out of sync hour estimate; otherwise false.
    /// </returns>
    public boolean hasOutOfSyncHourEstimates()
    {
        return (this.hasSummaryTaskEstimates()
                || (this.totalHourEstimatesQuantity() != this.totalTaskEffort()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSummaryTaskEstimates</Name>
				<Source><![CDATA[
    private boolean hasSummaryTaskEstimates()
    {
        PSAActivityEstimates summaryEstimate;
        HierarchyTreeTable   treeElement, childTreeElement;
        smmActivities        activity;

        select firstonly RecId from summaryEstimate
        join RecId from activity
        where summaryEstimate.ActivityNumber == activity.ActivityNumber
            join RecId from treeElement
            where treeElement.RefRecId == activity.RecId
                  && treeElement.HierarchyId == hierarchyId
                exists join childTreeElement
                where childTreeElement.HierarchyId == treeElement.HierarchyId
                    && childTreeElement.ParentElementNumber == treeElement.ElementNumber;

        if (summaryEstimate)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjTaskEstimatesSynchronizer</c> class.
    /// </summary>
    /// <param name="_wbsOwnerTableBuffer">
    /// A table buffer of the owner of the work breakdown structure specified
    /// by the <paramref name="_hierarchyId"/> parameter. The table buffer may be a
    /// <c>ProjTable</c>, <c>SalesQuotation</c>, or null for a template.
    /// </param>
    /// <param name="_hierarchyId">
    /// The hierarchy ID of a work breakdown structure.
    /// </param>
    protected void new(Common _wbsOwnerTableBuffer, HierarchyIdBase _hierarchyId)
    {
        switch (_wbsOwnerTableBuffer.TableId)
        {
            case tableNum(ProjTable):
                projTable = _wbsOwnerTableBuffer;
                wbsType = ProjWBSType::Project;
                calendarId = projTable.psaSchedCalendarId;
                break;
            case tableNum(SalesQuotationTable):
                salesQuotationTable = _wbsOwnerTableBuffer;
                wbsType = ProjWBSType::ProjectQuotation;
                calendarId = salesQuotationTable.psaSchedCalendarId;
                break;
            default:
                wbsType = ProjWBSType::Template;
                calendarId = PSAParameters::find().SchedDefaultCalendar;
                break;
        }

        hierarchyId = _hierarchyId;

        this.setRootIdentifiers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcSchedAttributesForEffort</Name>
				<Source><![CDATA[
    private void recalcSchedAttributesForEffort(PSAActivitySetup _psaActivitySetup)
    {
        ProjAutoScheduler       projAutoScheduler;

        if (calendarId)
        {
            projAutoScheduler = new ProjAutoScheduler(calendarId);
            projAutoScheduler.calcFieldsRelatedToEffort(_psaActivitySetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resummarizeFromTaskUpToRoot</Name>
				<Source><![CDATA[
    private void resummarizeFromTaskUpToRoot(smmActivityNumber _activityNumber)
    {
        HierarchyTreeTable      hierarchyTreeTable;
        ProjWBSUpdateController projWBSUpdateController;
        smmActivities           smmActivities;

        select ElementNumber from hierarchyTreeTable
        join RecId from smmActivities
        where smmActivities.RecId               == hierarchyTreeTable.RefRecId
                && smmActivities.ActivityNumber   == _activityNumber
                && hierarchyTreeTable.HierarchyId == hierarchyId;

        if (hierarchyTreeTable)
        {
            projWBSUpdateController = ProjWBSUpdateController::construct(hierarchyId, calendarId);
            projWBSUpdateController.recomputeSummariesFromTaskUpToTheRoot(hierarchyTreeTable.ElementNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRootIdentifiers</Name>
				<Source><![CDATA[
    private void setRootIdentifiers()
    {
        smmActivities       smmActivities;
        HierarchyTreeTable  hierarchyTreeTable;

        if (hierarchyId)
        {
            select ActivityNumber from smmActivities
            join RecId from hierarchyTreeTable
            where hierarchyTreeTable.RefRecId               == smmActivities.RecId
                  && hierarchyTreeTable.HierarchyId         == hierarchyId
                  && hierarchyTreeTable.ParentElementNumber == '';

            rootActivityNumber = smmActivities.ActivityNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncExistingHourEstimatesWithTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize existing hour-based estimates to the related task.
    /// </summary>
    /// <param name = "_taskToSyncWith"><c>PSAActivitySetup</c> buffer</param>
    /// <param name = "_numberOfEstimateLines">Total number of estimate lines</param>
    protected void syncExistingHourEstimatesWithTask(PSAActivitySetup _taskToSyncWith, int64 _numberOfEstimateLines)
    {
        PSAActivityEstimates    taskPSAActivityEstimates;
        Total                   totalEstimatedHours;

        ttsbegin;

        select sum(Quantity) from taskPSAActivityEstimates
            where taskPSAActivityEstimates.ActivityNumber   == _taskToSyncWith.ActivityNumber
                  && taskPSAActivityEstimates.ProjTransType == QuotationProjTransType::Hour;
                     totalEstimatedHours = taskPSAActivityEstimates.Quantity;

        if (totalEstimatedHours != _taskToSyncWith.Effort)
        {
            while select forupdate taskPSAActivityEstimates
                where taskPSAActivityEstimates.ProjTransType       == QuotationProjTransType::Hour
                        && taskPSAActivityEstimates.ActivityNumber == _taskToSyncWith.ActivityNumber
            {
                if (totalEstimatedHours)
                {
                    taskPSAActivityEstimates.Quantity = (taskPSAActivityEstimates.Quantity / totalEstimatedHours) * _taskToSyncWith.Effort;
                }
                else
                {
                    if (_numberOfEstimateLines)
                    {
                        taskPSAActivityEstimates.Quantity = _taskToSyncWith.Effort / _numberOfEstimateLines;
                    }
                    else
                    {
                        taskPSAActivityEstimates.Quantity = 0;
                    }
                }
                taskPSAActivityEstimates.modifiedField(fieldNum(PSAActivityEstimates, Quantity), _taskToSyncWith.PSASchedStart);
                this.syncTaskCostEACWithModifiedEstimate(_taskToSyncWith, taskPSAActivityEstimates);
                this.syncTaskEffortEACWithModifiedEstimate(_taskToSyncWith, taskPSAActivityEstimates);
                taskPSAActivityEstimates.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncHourEstimatesWithTaskEffort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize existing hour-based estimates by the total effort of a given estimate and related category.
    /// </summary>
    /// <param name = "_taskToSyncWith"><c>PSAActivitySetup</c> buffer</param>
    /// <param name = "_taskCategoryId">Category Id of the estimates to synchronize</param>
    /// <param name = "_hasSubTasks">true if the task has children, otherwise false</param>
    protected void syncHourEstimatesWithTaskEffort(PSAActivitySetup _taskToSyncWith,
                                                 CategoryId       _taskCategoryId,
                                                 boolean          _hasSubTasks)
    {
        int64 numberOfHourEstimateLines;

        if (!_taskToSyncWith.isNewRecord()
            && (_hasSubTasks || _taskToSyncWith.ActivityNumber == rootActivityNumber))
        {
            this.deleteTaskEstimates(_taskToSyncWith);
            return;
        }

        numberOfHourEstimateLines = this.countNumberOfHourEstimateLines(_taskToSyncWith.ActivityNumber);

        if (_taskToSyncWith.Effort == 0)
        {
            if (numberOfHourEstimateLines > 0)
            {
                this.deleteHourEstimates(_taskToSyncWith);
            }
        }
        else
        {
            if (numberOfHourEstimateLines == 0 && _taskCategoryId)
            {
                this.createEstimateLineFromTask(_taskToSyncWith, _taskCategoryId);
            }
            else if (numberOfHourEstimateLines > 0)
            {
                this.syncExistingHourEstimatesWithTask(_taskToSyncWith, numberOfHourEstimateLines);
            }

            this.syncToTaskCategory(_taskToSyncWith, _taskCategoryId, numberOfHourEstimateLines);
            this.syncUnitCostSalesPriceToTaskStartDate(_taskToSyncWith);
        }

        if (_taskToSyncWith.isNewRecord())
        {
            _taskToSyncWith.insert();
        }
        else
        {
            ttsbegin;
            _taskToSyncWith.selectForUpdate(true);
            _taskToSyncWith.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaskCategoryToEstimateCategory</Name>
				<Source><![CDATA[
    private void syncTaskCategoryToEstimateCategory(PSAActivityEstimates _psaActivityEstimates, PSAActivitySetup _psaActivitySetup, ProjActivity _projActivity)
    {
        int64 numberOfHourEstimateLines = this.countNumberOfHourEstimateLines(_psaActivityEstimates.ActivityNumber);

        if (_psaActivityEstimates.ProjTransType == QuotationProjTransType::Hour && numberOfHourEstimateLines == 1)
        {
            _psaActivitySetup.CategoryDefault    = _psaActivityEstimates.ProjCategoryId;
            _projActivity.CategoryDefault        = _psaActivityEstimates.ProjCategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaskCostEACWithModifiedEstimate</Name>
				<Source><![CDATA[
    // EAC: EstimateAtComplete field
    private void syncTaskCostEACWithModifiedEstimate(PSAActivitySetup _task, PSAActivityEstimates _modifiedEstimate)
    {
        Total   oldTotalCostPrice;
        Total   newTotalCostPrice;

        if (!_modifiedEstimate.isNewRecord())
        {
            oldTotalCostPrice = _modifiedEstimate.orig().TotalCostPrice;
        }
        else
        {
            oldTotalCostPrice = 0;
        }

        newTotalCostPrice       = _modifiedEstimate.TotalCostPrice;
        _task.CostAtComplete    += newTotalCostPrice - oldTotalCostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaskEACWithDeletedEstimates</Name>
				<Source><![CDATA[
    private void syncTaskEACWithDeletedEstimates(PSAActivitySetup _task, Total _deletedCostAmount, Qty _deletedQty = 0)
    {
        _task.CostAtComplete -= _deletedCostAmount;
        _task.EffortAtComplete -= _deletedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaskEffortEACWithModifiedEstimate</Name>
				<Source><![CDATA[
    // EAC: EstimateAtComplete field
    private void syncTaskEffortEACWithModifiedEstimate(PSAActivitySetup _task, PSAActivityEstimates _modifiedEstimate)
    {
        Total   oldTotalQuantity;
        Total   newTotalQuantity;

        if (!_modifiedEstimate.isNewRecord())
        {
            oldTotalQuantity = _modifiedEstimate.orig().Quantity;
        }
        else
        {
            oldTotalQuantity = 0;
        }

        newTotalQuantity        =  _modifiedEstimate.Quantity;
        _task.EffortAtComplete  += newTotalQuantity - oldTotalQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaskEffortEACWithModifiedTask</Name>
				<Source><![CDATA[
    private void syncTaskEffortEACWithModifiedTask(PSAActivitySetup _modifiedTask)
    {
        Hours oldEffort, newEffort;

        if (!_modifiedTask.isNewRecord())
        {
            oldEffort = _modifiedTask.orig().Effort;
        }
        else
        {
            oldEffort = 0;
        }

        newEffort                      = _modifiedTask.Effort;
        _modifiedTask.EffortAtComplete += newEffort - oldEffort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncTaskPlannedAndProjectedToEstimate</Name>
				<Source><![CDATA[
    private void syncTaskPlannedAndProjectedToEstimate(PSAActivityEstimates _psaActivityEstimates, PSAActivitySetup _psaActivitySetup)
    {
        NonNegativeQuantity totalEstimateLineHours = this.calcTotalEstimateLineHours(_psaActivityEstimates.ActivityNumber);

        if (totalEstimateLineHours != _psaActivitySetup.Effort)
        {
            _psaActivitySetup.Effort             = totalEstimateLineHours;
            _psaActivitySetup.EffortAtComplete   += _psaActivitySetup.Effort - _psaActivitySetup.orig().Effort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncToEstimates</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Syncs tasks to a modified estimate line.
    /// </summary>
    /// <param name="_psaActivityEstimates">
    ///     <c>PSAActivityEstimates</c> table buffer for the estimate line.
    /// </param>
    /// <param name="_skipResummarization">
    ///     If true skips updating ancestor summary tasks of the given task.
    /// </param>
    public void syncToEstimates(PSAActivityEstimates _psaActivityEstimates, boolean _skipResummarization = false)
    {
        PSAActivitySetup    psaActivitySetup;
        ProjActivity        projActivity;

        ttsbegin;
        select  forupdate psaActivitySetup
        join    forupdate projActivity
        where projActivity.ActivityNumber           == psaActivitySetup.ActivityNumber
              && psaActivitySetup.ActivityNumber    == _psaActivityEstimates.ActivityNumber;

        this.syncTaskPlannedAndProjectedToEstimate(_psaActivityEstimates, psaActivitySetup);
        this.syncTaskCategoryToEstimateCategory(_psaActivityEstimates, psaActivitySetup, projActivity);
        this.recalcSchedAttributesForEffort(psaActivitySetup);

        if (wbsType == ProjWBSType::Project && projTable.ValidateProjCategory)
        {
            ProjValElementServer::AddCategoryToProjIfAbsent(projTable.ProjId, _psaActivityEstimates.ProjCategoryId);
        }

        if (psaActivitySetup)
        {
            psaActivitySetup.update();
        }

        if (projActivity)
        {
            projActivity.update();
        }

        if (!_skipResummarization)
        {
            this.resummarizeFromTaskUpToRoot(_psaActivityEstimates.ActivityNumber);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncToTask</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Syncs cost/price estimate lines to an existing or new task.
    /// </summary>
    /// <param name="_taskInfo">
    ///     Task's <c>PSAActivitySetup</c> table buffer.
    /// </param>
    /// <param name="_projectActivity">
    ///     Task's <c>ProjActivity</c> table buffer.
    /// </param>
    /// <param name="_hasSubTasks">
    ///     If true indicates given task has sub-tasks.
    /// </param>
    /// <param name="_skipEACResummarization">
    ///     If true skips updating the EAC of ancestor tasks of the given task.
    /// </param>
    /// <remarks>
    ///     Call after setting values to <c>PSAActivitySetup</c>, but before actually
    ///     updating the task, if it was modified, or inserting the task, if it's new.
    /// </remarks>
    public void syncToTask(PSAActivitySetup _taskInfo,
                           ProjActivity     _projectActivity,
                           boolean          _hasSubTasks,
                           boolean          _skipEACResummarization = false)
    {
        this.syncHourEstimatesWithTaskEffort(_taskInfo,
                                             this.getDefaultTaskCategory(_taskInfo, _projectActivity),
                                             _hasSubTasks);

        if (!_skipEACResummarization)
        {
            this.updateAncestorsEACTaskUpdate(_taskInfo.ActivityNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncToTaskCategory</Name>
				<Source><![CDATA[
private void syncToTaskCategory(PSAActivitySetup _taskInfo, CategoryId _taskCategoryId, int64 _numberOfHourEstimateLines)
    {
        PSAActivityEstimates    taskPSAActivityEstimates;
        ProjId                  projId;

        ttsbegin;
        if (_numberOfHourEstimateLines == 1)
        {
            projId = this.getProjectId();

            select firstonly forupdate taskPSAActivityEstimates
            where taskPSAActivityEstimates.ActivityNumber       == _taskInfo.ActivityNumber
                  && taskPSAActivityEstimates.ProjTransType     == QuotationProjTransType::Hour
                  && taskPSAActivityEstimates.ProjCategoryId    != _taskCategoryId;

            if (taskPSAActivityEstimates)
            {
                taskPSAActivityEstimates.ProjCategoryId = _taskCategoryId;
                taskPSAActivityEstimates.modifiedField(fieldNum(PSAActivityEstimates, ProjCategoryId), _taskInfo.PSASchedStart);
                taskPSAActivityEstimates.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(projId, _taskCategoryId);
                taskPSAActivityEstimates.modifiedField(fieldNum(PSAActivityEstimates, LinePropertyId), _taskInfo.PSASchedStart);
                this.syncTaskCostEACWithModifiedEstimate(_taskInfo, taskPSAActivityEstimates);
                this.syncTaskEffortEACWithModifiedEstimate(_taskInfo, taskPSAActivityEstimates);
                taskPSAActivityEstimates.update();

                if (projId && projTable.ValidateProjCategory)
                {
                    ProjValElementServer::AddCategoryToProjIfAbsent(projId, _taskCategoryId);
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncToTaskDeletion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Syncs cost/price estimate lines to a task that will be deleted.
    /// </summary>
    /// <param name="_taskInfoToBeDeleted">
    ///     Task's <c>PSAActivitySetup</c> table buffer.
    /// </param>
    /// <param name="_skipEACResummarization">
    ///     If true skips updating the EAC of ancestor tasks of the given task.
    /// </param>
    /// <remarks>
    ///     Call before actually deleting the task.
    /// </remarks>
    public void syncToTaskDeletion(PSAActivitySetup _taskInfoToBeDeleted, boolean _skipEACResummarization = false)
    {
        if (!_skipEACResummarization)
        {
            this.updateAncestorsEAC(_taskInfoToBeDeleted.ActivityNumber,
                                    -_taskInfoToBeDeleted.orig().CostAtComplete,
                                    -_taskInfoToBeDeleted.orig().EffortAtComplete);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncToTaskHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Synchronizes all hour estimates with their corresponding tasks for the given project tasks hierarchy.
    /// </summary>
    /// <param name="_skipEACResummarization">
    ///     If true skips updating the EAC of ancestor tasks of the given task.
    /// </param>
    /// <param name="_shouldFailOnBlankCategory">
    ///     If true throws an exception when a leaf task (i.e. that has no sub-tasks), doesn't have a category and
    ///     a default category is not available as well.
    /// </param>
    public void syncToTaskHierarchy(boolean _skipEACResummarization     = false,
                                    boolean _shouldFailOnBlankCategory  = true)
    {
        HierarchyTreeTable              treeElement, childTreeElement;
        smmActivities                   activity;
        PSAActivitySetup                activityInfo;
        ProjActivity                    projectActivity;
        ProjParameters                  projParameters;
        ProjCategoryEmplId              defaultHourCategoryId;

        ttsbegin;
        this.deleteSummaryTaskEstimates();
        this.clearSummaryTaskCategories();
        ttscommit;

        if (this.countNumberOfTreeElements() == 1)
        {
            return;
        }

        projParameters = ProjParameters::find();
        defaultHourCategoryId = projParameters.EmplCategory;
        if (!ProjCategory::exist(defaultHourCategoryId))
        {
            defaultHourCategoryId = "";
        }

        ttsbegin;
        while select forupdate activityInfo
        join forupdate projectActivity
        where projectActivity.ActivityNumber == activityInfo.ActivityNumber
            join Purpose from activity
            where activity.ActivityNumber == projectActivity.ActivityNumber
                join RecId from treeElement
                where treeElement.RefRecId == activity.RecId
                      && treeElement.HierarchyId == hierarchyId
                    notexists join childTreeElement
                    where childTreeElement.ParentElementNumber == treeElement.ElementNumber
                          && childTreeElement.HierarchyId      == treeElement.HierarchyId
        {
            if (defaultHourCategoryId)
            {
                if (!activityInfo.CategoryDefault || !ProjCategory::exist(activityInfo.CategoryDefault))
                {
                    activityInfo.CategoryDefault = defaultHourCategoryId;
                }

                if (!projectActivity.CategoryDefault || !ProjCategory::exist(projectActivity.CategoryDefault))
                {
                    projectActivity.CategoryDefault = defaultHourCategoryId;
                    projectActivity.update();
                }
            }
            else
            {
                if (_shouldFailOnBlankCategory
                    &&
                    (
                    (wbsType == ProjWBSType::Project && (!projectActivity.CategoryDefault || !ProjCategory::exist(projectActivity.CategoryDefault)))
                        ||
                    (wbsType == ProjWBSType::ProjectQuotation && (!activityInfo.CategoryDefault || !ProjCategory::exist(activityInfo.CategoryDefault)) )
                    ))
                {
                    throw error(strFmt("@SYS4006643", strUpr(curext()), activity.Purpose));
                }
            }
            this.syncToTask(activityInfo, projectActivity, false, _skipEACResummarization);
            activityInfo.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncUnitCostSalesPriceToTaskStartDate</Name>
				<Source><![CDATA[
    private void syncUnitCostSalesPriceToTaskStartDate(PSAActivitySetup _taskInfo)
    {
        PSAActivitySetup        psaActivitySetup;
        PSAActivityEstimates    taskPSAActivityEstimates;
        NonNegativeCostPrice    previousUnitCostPrice;
        NonNegativeSalesPrice   previousUnitSalesPrice;

        ttsbegin;

        // this only update cost\sales prices when user update the start date of the task
        while select forupdate taskPSAActivityEstimates
        exists join firstOnly ActivityNumber from psaActivitySetup
        where psaActivitySetup.ActivityNumber   == _taskInfo.ActivityNumber
        && psaActivitySetup.PSASchedStart != _taskInfo.PSASchedStart
        && taskPSAActivityEstimates.ActivityNumber       == _taskInfo.ActivityNumber
        {
            previousUnitCostPrice   = taskPSAActivityEstimates.UnitCostPrice;
            previousUnitSalesPrice  = taskPSAActivityEstimates.UnitSalesPrice;
            taskPSAActivityEstimates.setCostSalesPrice("", "",_taskInfo.PSASchedStart);

            // if the new cost price or sales price is 0, use the previous cost price or sales price
            if (taskPSAActivityEstimates.UnitCostPrice == 0)
            {
                taskPSAActivityEstimates.UnitCostPrice = previousUnitCostPrice;
            }
            if (taskPSAActivityEstimates.UnitSalesPrice == 0)
            {
                taskPSAActivityEstimates.UnitSalesPrice = previousUnitSalesPrice;
            }

            taskPSAActivityEstimates.setTotalCostSalesPrice();
            this.syncTaskCostEACWithModifiedEstimate(_taskInfo, taskPSAActivityEstimates);
            this.syncTaskEffortEACWithModifiedEstimate(_taskInfo, taskPSAActivityEstimates);
            taskPSAActivityEstimates.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHourEstimatesQuantity</Name>
				<Source><![CDATA[
    private Qty totalHourEstimatesQuantity()
    {
        PSAActivityEstimates hourEstimate;
        HierarchyTreeTable   treeElement, childTreeElement;
        smmActivities        activity;

        // Sum leaf task hour estimates.
        select sum(Quantity) from hourEstimate
        join RecId from activity
        where hourEstimate.ActivityNumber == activity.ActivityNumber
                && hourEstimate.ProjTransType == QuotationProjTransType::Hour
            join RecId from treeElement
            where treeElement.RefRecId == activity.RecId
                    && treeElement.HierarchyId == hierarchyId
                notexists join childTreeElement
                    where childTreeElement.HierarchyId == treeElement.HierarchyId
                        && childTreeElement.ParentElementNumber == treeElement.ElementNumber;

        return hourEstimate.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaskEffort</Name>
				<Source><![CDATA[
    private Hours totalTaskEffort()
    {
        HierarchyTreeTable   treeElement, childTreeElement;
        smmActivities        activity;
        PSAActivitySetup     activityInfo;

        // Sum leaf task effort amounts.
        select sum(Effort) from activityInfo
        join RecId from activity
        where activityInfo.ActivityNumber == activity.ActivityNumber
            join RecId from treeElement
            where treeElement.RefRecId == activity.RecId
                    && treeElement.HierarchyId == hierarchyId
                notexists join childTreeElement
                    where childTreeElement.HierarchyId == treeElement.HierarchyId
                        && childTreeElement.ParentElementNumber == treeElement.ElementNumber;

        return activityInfo.Effort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAncestorsEAC</Name>
				<Source><![CDATA[
    private void updateAncestorsEAC(smmActivityNumber   _activityNumber,
                                    Total               _plannedCostDeltaCorrection = 0,
                                    Hours               _plannedEffortDeltaCorrection = 0)
    {
        HierarchyTreeTable      treeElement;
        HierarchyTreeTable      parentTreeElement;
        PSAActivitySetup        parentTaskInfo;
        smmActivities           modifiedActivity;
        smmActivities           parentActivity;
        ElementNumber           parentElementNumber;

        select HierarchyId, ParentElementNumber from treeElement
        join RecId from modifiedActivity
        where treeElement.RefRecId == modifiedActivity.RecId
              && modifiedActivity.ActivityNumber == _activityNumber;

        parentElementNumber = treeElement.ParentElementNumber;

        ttsbegin;
        while (parentElementNumber)
        {
            select ElementNumber, HierarchyId, ParentElementNumber from parentTreeElement
            where parentTreeElement.ElementNumber == parentElementNumber
                  && parentTreeElement.HierarchyId == treeElement.HierarchyId
                join RecId from parentActivity
                where parentActivity.RecId == parentTreeElement.RefRecId
                    join parentTaskInfo
                    where parentTaskInfo.ActivityNumber == parentActivity.ActivityNumber;

            if (parentTaskInfo)
            {
                parentTaskInfo.EffortAtComplete += _plannedEffortDeltaCorrection;
                parentTaskInfo.CostAtComplete   += _plannedCostDeltaCorrection;
                parentTaskInfo.selectForUpdate(true);
                parentTaskInfo.update();
            }
            else
            {
                break;
            }

            parentElementNumber = parentTreeElement.ParentElementNumber;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAncestorsEACTaskUpdate</Name>
				<Source><![CDATA[
    private void updateAncestorsEACTaskUpdate(  smmActivityNumber   _activityNumber)
    {
        HierarchyTreeTable      treeElement;
        HierarchyTreeTable      parentTreeElement, childTreeElement;
        PSAActivitySetup        parentTaskInfo, childTaskInfo;
        smmActivities           modifiedActivity;
        smmActivities           parentActivity, childActivity;
        ElementNumber           parentElementNumber;

        select HierarchyId, ParentElementNumber from treeElement
        join RecId from modifiedActivity
        where treeElement.RefRecId == modifiedActivity.RecId
              && modifiedActivity.ActivityNumber == _activityNumber;

        parentElementNumber = treeElement.ParentElementNumber;

        ttsbegin;
        while (parentElementNumber)
        {
            select ElementNumber, HierarchyId, ParentElementNumber from parentTreeElement
            where parentTreeElement.ElementNumber == parentElementNumber
                  && parentTreeElement.HierarchyId == treeElement.HierarchyId
                join RecId from parentActivity
                where parentActivity.RecId == parentTreeElement.RefRecId
                    join parentTaskInfo
                    where parentTaskInfo.ActivityNumber == parentActivity.ActivityNumber;

            select sum(CostAtComplete), sum(EffortAtComplete) from childTaskInfo
            join RecId from childActivity
            where childActivity.ActivityNumber == childTaskInfo.ActivityNumber
                join RecId from childTreeElement
                where childTreeElement.RefRecId                 == childActivity.RecId
                      && childTreeElement.ParentElementNumber   == parentTreeElement.ElementNumber
                      && childTreeElement.HierarchyId           == parentTreeElement.HierarchyId;

            parentTaskInfo.EffortAtComplete = childTaskInfo.EffortAtComplete;
            parentTaskInfo.CostAtComplete   = childTaskInfo.CostAtComplete;
            parentTaskInfo.selectForUpdate(true);
            parentTaskInfo.update();

            parentElementNumber = parentTreeElement.ParentElementNumber;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a Task estimates synchronizer object.
    /// </summary>
    /// <param name="_wbsOwnerTableBuffer">
    ///     Table buffer of the WBS owner (i.e. ProjTable, SalesQuotation or null for templates)
    /// </param>
    /// <param name="_hierarchyId">
    ///     Hierarchy id of the WBS.
    /// </param>
    /// <returns>
    ///     A Task estimates synchronizer object.
    /// </returns>
    public static ProjTaskEstimatesSynchronizer construct(Common _wbsOwnerTableBuffer, HierarchyIdBase _hierarchyId)
    {
        return new ProjTaskEstimatesSynchronizer(_wbsOwnerTableBuffer, _hierarchyId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>