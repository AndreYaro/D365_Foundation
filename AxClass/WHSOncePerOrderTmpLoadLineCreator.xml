<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOncePerOrderTmpLoadLineCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class acts as a proxy to <c>WHSITmpLoadLineCreator</c> that makes sure lines creator methods 
/// are called only once per order.
/// </summary>
public class WHSOncePerOrderTmpLoadLineCreator implements WHSITmpLoadLineCreator
{
    private WHSITmpLoadLineCreator originalTmpLoadLineCreator;
    internal Set createdOrders;
    internal int numberOfProcessedOrders;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new() 
    {
        createdOrders = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalTmpLoadLineCreator</Name>
				<Source><![CDATA[
    internal void setOriginalTmpLoadLineCreator(WHSITmpLoadLineCreator _originalTmpLoadLineCreator)
    {
        originalTmpLoadLineCreator = _originalTmpLoadLineCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesSalesLines</Name>
				<Source><![CDATA[
    public void createTmpLoadLinesSalesLines(WHSInventTransSumDim _inventTransSumDimSales, int _counter)
    {
        SalesId salesId = SalesLine::findInventTransId(_inventTransSumDimSales.InventTransId).SalesId;

        if (!createdOrders.in(salesId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesSalesLines(_inventTransSumDimSales, numberOfProcessedOrders);
            createdOrders.add(salesId);

            numberOfProcessedOrders++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesPurchLines</Name>
				<Source><![CDATA[
    public void createTmpLoadLinesPurchLines(WHSInventTransSumDim _inventTransSumDimPurch, int _counter)
    {
        PurchId purchaseId = PurchLine::findInventTransId(_inventTransSumDimPurch.InventTransId).PurchId;
        
        if (!createdOrders.in(purchaseId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesPurchLines(_inventTransSumDimPurch, numberOfProcessedOrders);
            createdOrders.add(purchaseId);

            numberOfProcessedOrders++;
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesTransferLines</Name>
				<Source><![CDATA[
    public void createTmpLoadLinesTransferLines(WHSInventTransSumDim _inventTransSumDimTransfer, int _counter)
    {
        InventTransferId transferId = InventTransferLine::findTransIdShip(_inventTransSumDimTransfer.InventTransId).TransferId;
        
        if (!createdOrders.in(transferId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesTransferLines(_inventTransSumDimTransfer, numberOfProcessedOrders);
            createdOrders.add(transferId);

            numberOfProcessedOrders++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesTransportRequestLines</Name>
				<Source><![CDATA[
    public void createTmpLoadLinesTransportRequestLines(TMSTransportRequestLine _transportRequestLine)
    { 
        TMSTransportRequestId transportRequestId = _transportRequestLine.TransportRequestId;
        
        if (!createdOrders.in(transportRequestId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesTransportRequestLines(_transportRequestLine);
            createdOrders.add(transportRequestId);

            numberOfProcessedOrders++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSOncePerOrderTmpLoadLineCreator construct()
    {
        return new WHSOncePerOrderTmpLoadLineCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTmpLoadLineCreator</Name>
				<Source><![CDATA[
    public static WHSOncePerOrderTmpLoadLineCreator newFromTmpLoadLineCreator(WHSITmpLoadLineCreator _originalTmpLoadLineCreator)
    {
        WHSOncePerOrderTmpLoadLineCreator instance = WHSOncePerOrderTmpLoadLineCreator::construct();
        instance.setOriginalTmpLoadLineCreator(_originalTmpLoadLineCreator);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesFromSalesLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTmpLoadLinesFromSalesLine(SalesLine _salesLine, int _counter)
    {
        if (!createdOrders.in(_salesLine.SalesId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesFromSalesLine(_salesLine, numberOfProcessedOrders);
            createdOrders.add(_salesLine.SalesId);

            numberOfProcessedOrders++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesFromInventTransferLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTmpLoadLinesFromInventTransferLine(InventTransferLine _inventTransferLine, int _counter)
    {
        if (!createdOrders.in(_inventTransferLine.TransferId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesFromInventTransferLine(_inventTransferLine, numberOfProcessedOrders);
            createdOrders.add(_inventTransferLine.TransferId);
            
            numberOfProcessedOrders++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLinesFromPurchaseLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createTmpLoadLinesFromPurchaseLine(PurchLine _purchLine, int _counter)
    {
        if (!createdOrders.in(_purchLine.PurchId))
        {
            originalTmpLoadLineCreator.createTmpLoadLinesFromPurchaseLine(_purchLine, numberOfProcessedOrders);
            createdOrders.add(_purchLine.PurchId);
            
            numberOfProcessedOrders++;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>