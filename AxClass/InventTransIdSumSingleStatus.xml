<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransIdSumSingleStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransIdSumSingleStatus extends InventTransIdSum
{
    StatusReceipt   statusReceipt;
    StatusIssue     statusIssue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSumImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the results that are shown in internal variables.
    /// </summary>
    [Replaceable]
    protected void calcSumImplementation()
    {
        InventTrans     inventTrans;
        InventDim       inventDimTest;

        if (filterDimensions)
        {
            select sum(Qty), sum(PdsCWQty)
            from inventTrans
            group by StatusIssue, StatusReceipt
            where   inventTrans.InventTransOrigin     == transOriginId
                && (inventTrans.TransChildType        == childType    || !perChildType)
                && (inventTrans.TransChildRefId       == childRefId   || !perChildType || !childRefId)
                &&  inventTrans.StatusReceipt         == statusReceipt
                &&  inventTrans.StatusIssue           == statusIssue
            #InventDimExistsJoin(inventTrans.inventDimId, inventDimTest, inventDimCriteria, inventDimParmCriteria);
        }
        else
        {
            select sum(Qty), sum(PdsCWQty)
            from inventTrans
            group by StatusIssue, StatusReceipt
            where   inventTrans.InventTransOrigin     == transOriginId
                && (inventTrans.TransChildType        == childType    || !perChildType)
                && (inventTrans.TransChildRefId       == childRefId   || !perChildType || !childRefId)
                &&  inventTrans.StatusReceipt         == statusReceipt
                &&  inventTrans.StatusIssue           == statusIssue;
        }

        this.addInventTransToTotals(inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(InventTransOriginId  _transOriginId)
    {
        super(_transOriginId);

        statusReceipt   = StatusReceipt::None;
        statusIssue     = StatusIssue::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusIssue</Name>
				<Source><![CDATA[
        protected StatusIssue parmStatusIssue(StatusIssue _statusIssue = statusIssue)
    {
        statusIssue = _statusIssue;

        return statusIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatusReceipt</Name>
				<Source><![CDATA[
        protected StatusReceipt parmStatusReceipt(StatusReceipt _statusReceipt = statusReceipt)
    {
        statusReceipt = _statusReceipt;

        return statusReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransIdSumSingleStatus</c> class based on the specified
    ///    <c>InventTransId</c> value.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransIdSingleStatus</c> class.
    /// </returns>
    public static InventTransIdSumSingleStatus newTransOriginId(InventTransOriginId _transOriginId)
    {
        return new InventTransIdSumSingleStatus(_transOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginIdStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransIdSingleStatus</c> class based on the specified values.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_statusReceipt">
    ///    The <c>StatusReceipt</c> value for which the class should calculate values.
    /// </param>
    /// <param name="_statusIssue">
    ///    The <c>StatusIssue</c> value for which the class should calculate values.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransIdSingleStatus</c> class.
    /// </returns>
    public static InventTransIdSumSingleStatus newTransOriginIdStatus(
        InventTransOriginId _transOriginId,
        StatusReceipt       _statusReceipt,
        StatusIssue         _statusIssue)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginId(_transOriginId);
        inventTransIdSumSingleStatus.parmStatusReceipt(_statusReceipt);
        inventTransIdSumSingleStatus.parmStatusIssue(_statusIssue);

        return inventTransIdSumSingleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginIdStatusChildType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransIdSingleStatus</c> class based on the specified values.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_statusReceipt">
    ///    The <c>StatusReceipt</c> value for which the class should calculate values.
    /// </param>
    /// <param name="_statusIssue">
    ///    The <c>StatusIssue</c> value for which the class should calculate values.
    /// </param>
    /// <param name="_childType">
    ///    The <c>InventTransChildType</c> value to use as a range.
    /// </param>
    /// <param name="_childRefId">
    ///    The <c>InventTransChildRefId</c> value to use as a range.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransIdSingleStatus</c> class.
    /// </returns>
    public static InventTransIdSumSingleStatus newTransOriginIdStatusChildType(
        InventTransOriginId   _transOriginId,
        StatusReceipt         _statusReceipt,
        StatusIssue           _statusIssue,
        InventTransChildType  _childType,
        InventTransChildRefId _childRefId)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, _statusReceipt, _statusIssue);
        inventTransIdSumSingleStatus.parmPerChildType(true);
        inventTransIdSumSingleStatus.parmChildType(_childType);
        inventTransIdSumSingleStatus.parmChildRefId(_childRefId);

        return inventTransIdSumSingleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginIdStatusChildTypeNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransIdSingleStatus</c> class based on the specified values.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_statusReceipt">
    /// The <c>StatusReceipt</c> value for which the class should calculate values.
    /// </param>
    /// <param name="_statusIssue">
    /// The <c>StatusIssue</c> value for which the class should calculate values.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTransIdSingleStatus</c> class.
    /// </returns>
    /// <remarks>
    /// Applies a range on the <see cref="T:InventTrans" /> table so only records without a child type are
    /// included.
    /// </remarks>
    public static InventTransIdSumSingleStatus newTransOriginIdStatusChildTypeNone(
        InventTransOriginId _transOriginId,
        StatusReceipt       _statusReceipt,
        StatusIssue         _statusIssue)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, _statusReceipt, _statusIssue);
        inventTransIdSumSingleStatus.parmPerChildType(true);
        inventTransIdSumSingleStatus.parmChildType(InventTransChildType::None);
        inventTransIdSumSingleStatus.parmChildRefId('');

        return inventTransIdSumSingleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginIdStatusDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTransIdSingleStatus</c> class based on the specified values.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_statusReceipt">
    ///    The <c>StatusReceipt</c> value for which the class should calculate values.
    /// </param>
    /// <param name="_statusIssue">
    ///    The <c>StatusIssue</c> value for which the class should calculate values.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    An <c>InventDim</c> buffer that contains the inventory dimension values to use as ranges.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    ///    An <c>InventDimParm</c> buffer that contains which inventory dimensions to use as ranges.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransIdSingleStatus</c> class.
    /// </returns>
    public static InventTransIdSumSingleStatus newTransOriginIdStatusDimension(
        InventTransOriginId _transOriginId,
        StatusReceipt       _statusReceipt,
        StatusIssue         _statusIssue,
        InventDim           _inventDimCriteria,
        InventDimParm       _inventDimParmCriteria)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, _statusReceipt, _statusIssue);
        inventTransIdSumSingleStatus.parmInventDimCriteria(_inventDimCriteria);
        inventTransIdSumSingleStatus.parmInventDimParmCriteria(_inventDimParmCriteria);

        return inventTransIdSumSingleStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyArrived</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has arrived for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch wieght quantity arrived.
    /// </returns>
    static PdsCWInventQty pdsCWQtyArrived(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::Arrived, StatusIssue::None).pdsCWArrived();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that is on order for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch weight on order quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyOnOrder(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::OnOrder).pdsCWOnOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWqtyOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been ordered for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch weght quantity ordered.
    /// </returns>
    static PdsCWInventQty pdsCWqtyOrdered(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::Ordered, StatusIssue::None).pdsCWOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch wieght quantity that has been picked for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch weight picked quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyPicked(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::Picked).pdsCWPicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been registered for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch weight registered quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyRegistered(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::Registered, StatusIssue::None).pdsCWRegistered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReserveOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch wieght quantity that has been reserved on expected receipts for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch weight reserved quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReserveOrdered(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::ReservOrdered).pdsCWReserveOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The reserved catch weight quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReservPhysical(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::ReservPhysical).pdsCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservPhysicalAnyWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is related to an output order.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The reserved catch weight quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReservPhysicalAnyWMSOrder(InventTransOriginId   _transOriginId)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusChildType(_transOriginId,
                    StatusReceipt::None, StatusIssue::ReservPhysical, InventTransChildType::WMSOrder, '');

        return inventTransIdSumSingleStatus.pdsCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservPhysicalChildTypeNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is not related to any inventory reference.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch weight reserved quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReservPhysicalChildTypeNone(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatusChildTypeNone(_transOriginId, StatusReceipt::None, StatusIssue::ReservPhysical).pdsCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservPhysicalDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for a given inventory movement
    /// and for given inventory dimensions.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer containing the inventory dimension values to use as ranges.
    /// </param>
    /// <param name="_inventDimParm">
    /// An <c>InventDimParm</c> buffer containing which inventory dimensions to use as ranges.
    /// </param>
    /// <returns>
    /// The catch weight reserved quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReservPhysicalDimension(InventTransOriginId _transOriginId, InventDim _inventDim, InventDimParm _inventDimParm)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusDimension(_transOriginId,
                                                             StatusReceipt::None, StatusIssue::ReservPhysical, _inventDim, _inventDimParm);

        return inventTransIdSumSingleStatus.pdsCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservPhysicalDimensionChildType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is related to given inventory dimensions and references.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer containing the inventory dimension values to use as ranges.
    /// </param>
    /// <param name="_inventDimParm">
    /// An <c>InventDimParm</c> buffer containing which inventory dimensions to use as ranges.
    /// </param>
    /// <param name="_childType">
    /// The type of the inventory reference.
    /// </param>
    /// <param name="_childRefId">
    /// The ID of the inventory reference.
    /// </param>
    /// <returns>
    /// The reserved catch weight quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReservPhysicalDimensionChildType(
            InventTransOriginId     _transOriginId,
            InventDim               _inventDim,
            InventDimParm           _inventDimParm,
            InventTransChildType    _childType,
            InventTransChildRefId   _childRefId)

    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusDimension(_transOriginId,
                                                             StatusReceipt::None, StatusIssue::ReservPhysical, _inventDim, _inventDimParm);

        inventTransIdSumSingleStatus.parmPerChildType(true);
        inventTransIdSumSingleStatus.parmChildType(_childType);
        inventTransIdSumSingleStatus.parmChildRefId(_childRefId);

        return inventTransIdSumSingleStatus.pdsCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyPickedPhysicalDimension</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static PdsCWInventQty pdsCWQtyPickedPhysicalDimension(InventTransOriginId _transOriginId, InventDim _inventDim, InventDimParm _inventDimParm)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusDimension(_transOriginId,
                                                            StatusReceipt::None, StatusIssue::Picked, _inventDim, _inventDimParm);

        return inventTransIdSumSingleStatus.pdsCWPicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyReservPhysicalWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is related to the specified output order.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_wmsOrderId">
    /// The ID of the output order for which results are calculated.
    /// </param>
    /// <returns>
    /// The reserved catch weight quantity.
    /// </returns>
    static PdsCWInventQty pdsCWQtyReservPhysicalWMSOrder(InventTransOriginId   _transOriginId, WMSOrderId _wmsOrderId)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusChildType(_transOriginId,
                    StatusReceipt::None, StatusIssue::ReservPhysical, InventTransChildType::WMSOrder, _wmsOrderId);

        return inventTransIdSumSingleStatus.pdsCWReservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pscCWQtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantity that has been picked for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The catch wieght quantity picked.
    /// </returns>
    static PdsCWInventQty pscCWQtyPicked(InventTransOriginId   _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::Picked).pdsCWPicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyArrived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that has arrived for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    ///    The quantity that has arrived.
    /// </returns>
    public static InventQty qtyArrived(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::Arrived, StatusIssue::None).arrived();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that is on order for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The on order quantity.
    /// </returns>
    public static InventQty qtyOnOrder(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::OnOrder).onOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that has been ordered for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    ///    The quantity that has been ordered.
    /// </returns>
    public static InventQty qtyOrdered(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::Ordered, StatusIssue::None).ordered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been picked for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The quantity picked.
    /// </returns>
    public static InventQty qtyPicked(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::Picked).picked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been registered for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The registered quantity.
    /// </returns>
    public static InventQty qtyRegistered(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::Registered, StatusIssue::None).registered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReserveOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on expected receipts for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The reserved quantity
    /// </returns>
    public static InventQty qtyReserveOrdered(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::ReservOrdered).reserveOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on current on hand for a given inventory movement.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The reserved quantity.
    /// </returns>
    public static InventQty qtyReservPhysical(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatus(_transOriginId, StatusReceipt::None, StatusIssue::ReservPhysical).reservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservPhysicalAnyWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is related to an output order.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The reserved quantity.
    /// </returns>
    public static InventQty qtyReservPhysicalAnyWMSOrder(InventTransOriginId _transOriginId)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusChildType(_transOriginId,
                    StatusReceipt::None, StatusIssue::ReservPhysical, InventTransChildType::WMSOrder, '');

        return inventTransIdSumSingleStatus.reservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservPhysicalChildTypeNone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is not related to any inventory reference.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <returns>
    /// The reserved quantity.
    /// </returns>
    public static InventQty qtyReservPhysicalChildTypeNone(InventTransOriginId _transOriginId)
    {
        return InventTransIdSumSingleStatus::newTransOriginIdStatusChildTypeNone(_transOriginId, StatusReceipt::None, StatusIssue::ReservPhysical).reservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservPhysicalDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on current on hand for a given inventory movement
    /// and for given inventory dimensions.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer containing the inventory dimension values to use as ranges.
    /// </param>
    /// <param name="_inventDimParm">
    /// An <c>InventDimParm</c> buffer containing which inventory dimensions to use as ranges.
    /// </param>
    /// <returns>
    /// The reserved quantity.
    /// </returns>
    public static InventQty qtyReservPhysicalDimension(
        InventTransOriginId _transOriginId,
        InventDim           _inventDim,
        InventDimParm       _inventDimParm)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusDimension(_transOriginId,
                                                             StatusReceipt::None, StatusIssue::ReservPhysical, _inventDim, _inventDimParm);

        return inventTransIdSumSingleStatus.reservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservPhysicalDimensionChildType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is related to given inventory dimensions and references.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> buffer containing the inventory dimension values to use as ranges.
    /// </param>
    /// <param name="_inventDimParm">
    /// An <c>InventDimParm</c> buffer containing which inventory dimensions to use as ranges.
    /// </param>
    /// <param name="_childType">
    /// The type of the inventory reference.
    /// </param>
    /// <param name="_childRefId">
    /// The ID of the inventory reference.
    /// </param>
    /// <returns>
    /// The reserved quantity.
    /// </returns>
    public static InventQty qtyReservPhysicalDimensionChildType(
        InventTransOriginId   _transOriginId,
        InventDim             _inventDim,
        InventDimParm         _inventDimParm,
        InventTransChildType  _childType,
        InventTransChildRefId _childRefId)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusDimension(_transOriginId,
                                                             StatusReceipt::None, StatusIssue::ReservPhysical, _inventDim, _inventDimParm);

        inventTransIdSumSingleStatus.parmPerChildType(true);
        inventTransIdSumSingleStatus.parmChildType(_childType);
        inventTransIdSumSingleStatus.parmChildRefId(_childRefId);

        return inventTransIdSumSingleStatus.reservPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPickedPhysicalDimension</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventQty qtyPickedPhysicalDimension(
        InventTransOriginId _transOriginId,
        InventDim           _inventDim,
        InventDimParm       _inventDimParm)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusDimension(_transOriginId,
                                                              StatusReceipt::None, StatusIssue::Picked, _inventDim, _inventDimParm);

        return inventTransIdSumSingleStatus.picked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReservPhysicalWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been reserved on current on hand for a given inventory movement
    /// and where the reservation is related to the specified output order.
    /// </summary>
    /// <param name="_transOriginId">
    /// The reference to the inventory movement for which the results are calculated.
    /// </param>
    /// <param name="_wmsOrderId">
    /// The ID of the output order for which results are calculated.
    /// </param>
    /// <returns>
    /// The reserved quantity.
    /// </returns>
    public static InventQty qtyReservPhysicalWMSOrder(
        InventTransOriginId _transOriginId,
        WMSOrderId          _wmsOrderId)
    {
        InventTransIdSumSingleStatus inventTransIdSumSingleStatus = InventTransIdSumSingleStatus::newTransOriginIdStatusChildType(_transOriginId,
                    StatusReceipt::None, StatusIssue::ReservPhysical, InventTransChildType::WMSOrder, _wmsOrderId);

        return inventTransIdSumSingleStatus.reservPhysical();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>