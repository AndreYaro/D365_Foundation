<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentReductionEntryTransDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDocumentReductionEntryTransDP_JP</c> class is the data provider class for the <c>AssetDocumentReductionEntryTrans_JP</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetDocReductionEntryTransContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetDocumentReductionEntryTransSum_JP))
]
class AssetDocumentReductionEntryTransDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetDocumentReductionEntryTransTmp_JP      assetDocumentReductionEntryTransTmp;
    AssetDocumentEntry_JP                       assetDocumentEntry;
    AssetDocumentTable_JP                       assetDocumentTable;
    AssetDocumentReductionEntryTrans_JP         assetDocumentReductionEntryTrans;

    FiscalYearName                  fiscalYearName;
    TransDate                       startDate;
    TransDate                       endDate;
    AssetReductionEntryMethod_JP    assetReductionEntryMethod;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDocumentReductionEntryTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetDocumentReductionEntryTransTmp_JP</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetDocumentReductionEntryTransTmp_JP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetDocumentReductionEntryTransTmp_JP))
    ]
    public AssetDocumentReductionEntryTransTmp_JP getAssetDocumentReductionEntryTransTmp()
    {
        select  assetDocumentReductionEntryTransTmp;
        return  assetDocumentReductionEntryTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    protected void getReportParameters()
    {
        FiscalCalendarYear      fiscalCalendarYear;
        AssetDocReductionEntryTransContract_JP contract = this.parmDataContract();

        if (contract)
        {
            fiscalYearName            = contract.parmFiscalYearName();
            fiscalCalendarYear        = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);
            startDate                 = fiscalCalendarYear.StartDate;
            endDate                   = fiscalCalendarYear.EndDate;
            assetReductionEntryMethod = contract.parmAssetReductionEntryMethod();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetDocumentEntryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetDocumentReductionEntryTransTmp_JP</c> table.
    /// </summary>
    public void initAssetDocumentEntryTmp()
    {
        assetDocumentReductionEntryTransTmp.PreAdjustment   = assetDocumentReductionEntryTrans.PreAmountMST;
        assetDocumentReductionEntryTransTmp.PostAdijustment = assetDocumentReductionEntryTrans.PostAmountMST;
        assetDocumentReductionEntryTransTmp.AssetId         = assetDocumentEntry.AssetId;
        assetDocumentReductionEntryTransTmp.DocumentId      = assetDocumentTable.DocumentId;
        assetDocumentReductionEntryTransTmp.BookId          = assetDocumentEntry.BookId;
        assetDocumentReductionEntryTransTmp.DocumentDate    = AssetDocumentReductionEntryTable_JP::findByDocumentEntry(
                                                                  AssetDocumentEntry_JP::findByDocumentAssetIdBookId(
                                                                      AssetDocumentTable_JP::findByDocumentId(
                                                                        AssetDocumentMainType_JP::ReductionEntry, assetDocumentReductionEntryTransTmp.DocumentId).RecId,
                                                                      assetDocumentReductionEntryTransTmp.AssetId,
                                                                      assetDocumentReductionEntryTransTmp.BookId).RecId).DocumentDate;
        assetDocumentReductionEntryTransTmp.AssetGroup      = AssetTable::find(assetDocumentEntry.AssetId).AssetGroup;
        assetDocumentReductionEntryTransTmp.ServiceLife     = AssetBook::find(assetDocumentEntry.AssetId, assetDocumentEntry.BookId).ServiceLife;
        assetDocumentReductionEntryTransTmp.Method          = AssetReductionEntryProfile_JP::find(assetDocumentReductionEntryTransTmp.DocumentId).Method;

        this.insertDateByValueModel();

        assetDocumentReductionEntryTransTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDateByValueModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data when the book type is value model.
    /// </summary>
    public void insertDateByValueModel()
    {
        AssetBook               assetBook;
        FiscalCalendarYear      fiscalCalendarYearDepreciation;
        FiscalCalendarYear      fiscalCalendarYearAllocation;

        assetBook = AssetBook::find(assetDocumentReductionEntryTransTmp.AssetId, assetDocumentReductionEntryTransTmp.BookId);
        if (assetReductionEntryMethod == AssetReductionEntryMethod_JP::DirectOff)
        {
            fiscalCalendarYearAllocation = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), assetDocumentReductionEntryTransTmp.DocumentDate);
        }
        else
        {
            fiscalCalendarYearAllocation = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), assetBook.AllocationStartDate_JP);
        }
        fiscalCalendarYearDepreciation = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(), assetBook.DepreciationStartDate);
        if (fiscalCalendarYearAllocation.Name == fiscalCalendarYearDepreciation.Name)
        {
            assetDocumentReductionEntryTransTmp.AdvancedAcquisition = false;
        }
        else
        {
            assetDocumentReductionEntryTransTmp.AdvancedAcquisition = true;
        }

        assetDocumentReductionEntryTransTmp.YTDallocationOfReserveForReduction = assetTrans::amountMSTPerDateTransTypes(
                                                                                   assetDocumentEntry.AssetId,
                                                                                   assetDocumentEntry.BookId,
                                                                                   [AssetTransType::ReductionEntryReserveAllocation_JP],
                                                                                   startDate,
                                                                                   endDate
                                                                                   );
        assetDocumentReductionEntryTransTmp.BeginningBalanceOfReductionEntry = -(assetTrans::amountMSTPerDateTransTypes(
                                                                               assetDocumentEntry.AssetId,
                                                                               assetDocumentEntry.BookId,
                                                                               [AssetTransType::ReductionEntryReserve_JP],
                                                                               dateNull(),
                                                                               endDate
                                                                               )) +
                                                                               (assetTrans::amountMSTPerDateTransTypes(
                                                                               assetDocumentEntry.AssetId,
                                                                               assetDocumentEntry.BookId,
                                                                               [AssetTransType::ReductionEntryReserveAllocation_JP],
                                                                               dateNull(),
                                                                               startDate
                                                                               ));
        assetDocumentReductionEntryTransTmp.YTDbalanceOfReduction = assetDocumentReductionEntryTransTmp.BeginningBalanceOfReductionEntry -
                                                                    assetDocumentReductionEntryTransTmp.YTDallocationOfReserveForReduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbds;
        QueryBuildRange         range;

        this.getReportParameters();
        query = this.parmQuery();

        qbds = query.dataSourceTable(tableNum(AssetDocumentTrans_JP)).addDataSource(tableNum(AssetTrans));
        qbds.fetchMode(0);
        qbds.addLink(fieldNum(AssetDocumentTrans_JP, RefRecId), fieldNum(AssetTrans, RecId));
        qbds.addLink(fieldNum(AssetDocumentTrans_JP, RefTableId), fieldNum(AssetTrans, TableId));
        range = qbds.addRange(fieldNum(AssetTrans, TransDate));
        range.value(queryRange(startDate, endDate));

        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetReductionEntryProfile_JP)), fieldNum(AssetReductionEntryProfile_JP, Method)).value(queryValue(assetReductionEntryMethod));

        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            assetDocumentReductionEntryTrans = queryRun.get(tableNum(AssetDocumentReductionEntryTrans_JP));
            assetDocumentTable  = queryRun.get(tableNum(AssetDocumentTable_JP));
            assetDocumentEntry  = queryRun.get(tableNum(AssetDocumentEntry_JP));
            this.initAssetDocumentEntryTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>