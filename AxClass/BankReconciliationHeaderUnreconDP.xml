<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationHeaderUnreconDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class of unreconciled header data for Bank reconciliation ER report.
/// </summary>
public final class BankReconciliationHeaderUnreconDP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyEndingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the amount of company posted transactions and company unposted transactions.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The sum of the amount of company posted transactions and company unposted transactions.</returns>
    [Hookable(false)]
    public static AmountCur getCompanyEndingBalance(RecId _reconciliationHeaderRecId)
    {
        AmountCur companyPostedBalance;
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankAccountTable bankAccountTable = BankAccountTable::find(reconciliationHeader.AccountId);

        if (bankAccountTable.RecId)
        {
            companyPostedBalance = bankAccountTable.getBalanceByDate(reconciliationHeader.CutOffDate);
        }

        AmountCur companyUnpostedBalance = BankAutomationWorksheetHeaderInformationUtil::getCompanyUnpostedAmount(reconciliationHeader.AccountId, reconciliationHeader.CutOffDate);

        return companyPostedBalance + companyUnpostedBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankEndingBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ending balance of bank statement lines.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The ending balance of bank statement lines.</returns>
    [Hookable(false)]
    public static AmountCur getBankEndingBalance(RecId _reconciliationHeaderRecId)
    {
        return BankReconciliationHeader::find(_reconciliationHeaderRecId).getStatementEndingBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankMatchedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount for matched bank statement lines.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The total amount for matched bank statement lines.</returns>
    [Hookable(false)]
    public static AmountCur getBankMatchedTotal(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);

        BankStmtISOReportEntry bankStmtISOReportEntryDebit;
        BankStmtISOReportEntry bankStmtISOReportEntryCredit;
        BankStmtISOAccountStatement bankStmtISOAccountStatement;

        TransDateTime cutOffDateTime = reconciliationHeader.getCutOffDateTime();
        select sum(Amount) from bankStmtISOReportEntryDebit
            where bankStmtISOReportEntryDebit.Reconciled == NoYes::No
                && bankStmtISOReportEntryDebit.BookingDateTime <= cutOffDateTime
                && bankStmtISOReportEntryDebit.AmountCreditDebitIndicator == DebitCredit::Debit
            join RecId from bankStmtISOAccountStatement
                where bankStmtISOReportEntryDebit.BankStmtISOAccountStatement == bankStmtISOAccountStatement.RecId
                    && bankStmtISOAccountStatement.BankAccountTable == reconciliationHeader.AccountId
            join bankReconciliationMatchingItemView
                where bankReconciliationMatchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId
                    && bankReconciliationMatchingItemView.BankStmtISOReportEntry == bankStmtISOReportEntryDebit.RecId;

        select sum(Amount) from bankStmtISOReportEntryCredit
            where bankStmtISOReportEntryCredit.Reconciled == NoYes::No
                && bankStmtISOReportEntryCredit.BookingDateTime <= cutOffDateTime
                && bankStmtISOReportEntryCredit.AmountCreditDebitIndicator == DebitCredit::Credit
            join RecId from bankStmtISOAccountStatement
                where bankStmtISOReportEntryCredit.BankStmtISOAccountStatement == bankStmtISOAccountStatement.RecId
                    && bankStmtISOAccountStatement.BankAccountTable == reconciliationHeader.AccountId
            join bankReconciliationMatchingItemView
                where bankReconciliationMatchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId
                    && bankReconciliationMatchingItemView.BankStmtISOReportEntry == bankStmtISOReportEntryCredit.RecId;

        return bankStmtISOReportEntryDebit.Amount - bankStmtISOReportEntryCredit.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyMatchedTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount for matched company transaction lines.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The total amount for matched company transaction lines.</returns>
    [Hookable(false)]
    public static AmountCur getCompanyMatchedTotal(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;

        // Company data unreconciled and matched
        select sum(BankCurrencyAmount) from bankDocumentTableViewResult
            where bankDocumentTableViewResult.IsReconciled == NoYes::No
                && bankDocumentTableViewResult.AccountId == reconciliationHeader.AccountId
                && bankDocumentTableViewResult.DocumentDate <= reconciliationHeader.CutOffDate
            join bankReconciliationMatchingItemView
                where bankReconciliationMatchingItemView.BankReconciliationHeader == reconciliationHeader.RecId
                    && bankReconciliationMatchingItemView.BankDocumentTable == bankDocumentTableViewResult.BankDocumentTableRecId;

        // Generate voucher document lines
        BankDocumentStatementLineView bankDocumentStatementLineView;
        BankStmtISOReportEntry bankStmtISOReportEntry;
        select sum(BankCurrencyAmount) from bankDocumentStatementLineView
            where bankDocumentStatementLineView.IsReconciled == NoYes::Yes
                && bankDocumentStatementLineView.DocumentType == BankDocumentBookType::BankStatement
                && bankDocumentStatementLineView.AccountId == reconciliationHeader.AccountId
                && bankDocumentStatementLineView.SourceRelationType == tableNum(BankStmtISOReportEntry)
            join RecId from bankStmtISOReportEntry
                where bankStmtISOReportEntry.RecId == bankDocumentStatementLineView.SourceRecId
                    && bankStmtISOReportEntry.Reconciled == NoYes::No
                    && bankStmtISOReportEntry.AccountingDate <= reconciliationHeader.CutoffDate;

        return bankDocumentTableViewResult.BankCurrencyAmount + bankDocumentStatementLineView.BankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyMatchedCorrectionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total correction amount for matched company transaction lines.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The total correction amount for matched company transaction lines.</returns>
    [Hookable(false)]
    public static AmountCur getCompanyMatchedCorrectionTotal(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;

        select sum(CorrectionBankCurrencyAmount) from bankDocumentTableViewResult
            where bankDocumentTableViewResult.IsReconciled == NoYes::No
                && bankDocumentTableViewResult.AccountId == reconciliationHeader.AccountId
                && bankDocumentTableViewResult.DocumentDate <= reconciliationHeader.CutOffDate            
            join bankReconciliationMatchingItemView
                where bankReconciliationMatchingItemView.BankReconciliationHeader == reconciliationHeader.RecId
                    && bankReconciliationMatchingItemView.BankDocumentTable == bankDocumentTableViewResult.BankDocumentTableRecId;

        return bankDocumentTableViewResult.CorrectionBankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyMatchedPostedCorrectionTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company total posted (BankAccountTrans generated) correction amount.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The company total posted correction amount.</returns>
    [Hookable(false)]
    public static AmountCur getCompanyMatchedPostedCorrectionTotal(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;

        select sum(CorrectionBankCurrencyAmount) from bankDocumentTableViewResult
            where bankDocumentTableViewResult.IsReconciled == NoYes::No
                && bankDocumentTableViewResult.AccountId == reconciliationHeader.AccountId
                && bankDocumentTableViewResult.DocumentDate <= reconciliationHeader.CutOffDate
                && bankDocumentTableViewResult.Posted == NoYes::Yes
                && bankDocumentTableViewResult.DocumentType != BankDocumentBookType::BankClearing;

        AmountCur matchedCompanyPostedCorrectionTotal = bankDocumentTableViewResult.CorrectionBankCurrencyAmount;

        BankBridgingTrans bankBridgingTrans;
        LedgerJournalTrans ledgerJournalTransBridged;
        BankDocumentTable bankDocumentTable;
        select sum(CorrectionBankCurrencyAmount) from bankDocumentTableViewResult
            where bankDocumentTableViewResult.IsReconciled == NoYes::No
                && bankDocumentTableViewResult.AccountId == reconciliationHeader.AccountId
                && bankDocumentTableViewResult.DocumentDate <= reconciliationHeader.CutOffDate
                && bankDocumentTableViewResult.DocumentType == BankDocumentBookType::BankClearing
            join RecId from bankDocumentTable
                where bankDocumentTable.RecId == bankDocumentTableViewResult.BankDocumentTableRecId
                    && bankDocumentTable.SourceRelationType == tableNum(LedgerJournalTrans)
            join RecId from ledgerJournalTransBridged
                where ledgerJournalTransBridged.RecId == bankDocumentTable.SourceRecId
            join RecId from bankBridgingTrans
                where bankBridgingTrans.BridgedLedgerJournalTransRecId == ledgerJournalTransBridged.RecId
                    && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Cleared;

        matchedCompanyPostedCorrectionTotal += bankDocumentTableViewResult.CorrectionBankCurrencyAmount;

        return matchedCompanyPostedCorrectionTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyMatchedCancelledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount for matched and cancelled company transaction lines that are of type <c>BankChequeTable</c> and <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId"></param>
    /// <returns>The total amount for matched and cancelled company transaction lines that are of type <c>BankChequeTable</c> and <c>LedgerJournalTrans</c>.</returns>
    [Hookable(false)]
    public static AmountCur getCompanyMatchedCancelledAmount(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;

        // Exclude cancelled bank document from bank currency amount calculation
        select sum(BankCurrencyAmount) from bankDocumentTableViewResult
            where bankDocumentTableViewResult.IsReconciled == NoYes::No
                && bankDocumentTableViewResult.AccountId == reconciliationHeader.AccountId
                && bankDocumentTableViewResult.DocumentDate <= reconciliationHeader.CutOffDate
                && bankDocumentTableViewResult.Cancelled == NoYes::Yes
                && (bankDocumentTableViewResult.SourceRelationType == tableNum(BankChequeTable)
                    || bankDocumentTableViewResult.SourceRelationType == tableNum(LedgerJournalTrans))
            join bankReconciliationMatchingItemView
                where bankReconciliationMatchingItemView.BankReconciliationHeader == reconciliationHeader.RecId
                    && bankReconciliationMatchingItemView.BankDocumentTable == bankDocumentTableViewResult.BankDocumentTableRecId;

        return bankDocumentTableViewResult.BankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyUnmatchedCancelledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount for unmatched company transaction lines that are of type <c>BankChequeTable</c> and <c>LedgerJournalTrans</c> and cancelled.
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId"></param>
    /// <returns>The total amount for unmatched and cancelled company transaction lines that are of type <c>BankChequeTable</c> and <c>LedgerJournalTrans</c>.</returns>
    [Hookable(false)]
    public static AmountCur getCompanyUnmatchedCancelledAmount(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;

        // Exclude cancelled bank document from bank currency amount calculation        
        select sum(BankCurrencyAmount) from bankDocumentTableViewResult
            where bankDocumentTableViewResult.IsReconciled == NoYes::No
                && bankDocumentTableViewResult.AccountId == reconciliationHeader.AccountId
                && bankDocumentTableViewResult.DocumentDate <= reconciliationHeader.CutOffDate
                && bankDocumentTableViewResult.Cancelled == NoYes::Yes
                && (bankDocumentTableViewResult.SourceRelationType == tableNum(BankChequeTable)
                    || bankDocumentTableViewResult.SourceRelationType == tableNum(LedgerJournalTrans))
            notexists join bankReconciliationMatchingItemView
                where bankReconciliationMatchingItemView.BankReconciliationHeader == reconciliationHeader.RecId
                    && bankReconciliationMatchingItemView.BankDocumentTable == bankDocumentTableViewResult.BankDocumentTableRecId;

        return bankDocumentTableViewResult.BankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUsername</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current user name. The method is called in ER model mapping to fill the created by entry in report header.
    /// </summary>
    /// <returns>The current user name.</returns>
    [Hookable(false)]
    public static UserName getCurrentUsername()
    {
        return DirPersonuser::userId2Name(curUserId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>