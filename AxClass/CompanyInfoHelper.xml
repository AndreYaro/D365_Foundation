<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CompanyInfoHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a set of helpers for the <c>CompanyInfo</c> table.
/// </summary>
class CompanyInfoHelper
{
    public const AccountOfficeRefNum AccountOfficeRefNumber = '###P&&&&&&&&&';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the ID of the current legal entity
    /// </summary>
    /// <returns>
    ///     The ID of the current legal entity.
    /// </returns>
    [QueryRangeFunction]
    public static RefRecId currentLegalEntity()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>euroIsCompanyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if the company currency is Euro.
    /// </summary>
    /// <returns>
    /// True if the currency is Euro; Otherwise, false.
    /// </returns>
    public static boolean euroIsCompanyCurrency()
    {
        return Currency::findEuroCurrencyCode() == Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>onvalidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate CompanyInfo write.
    /// </summary>
    /// <param name = "companyInfo">
    /// Company info record.
    /// </param>
    /// <param name = "eventHandlerResult">
    /// Event handler.
    /// </param>
    [SubscribesTo(tablestr(CompanyInfo), delegatestr(CompanyInfo, validateWriteDelegate))]
    public static void onvalidateWrite(CompanyInfo companyInfo,EventHandlerResult eventHandlerResult)
    {
        #isoCountryRegionCodes
        boolean ok = eventHandlerResult.result();
        TaxRegistrationValidator_MX taxRegistrationValidator;
        TaxRegistration_CA taxRegistrationCA;

        if (ok && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCA]))
        {
            CompanyInfo currentCompanyInfo = CompanyInfo::find();
            if (!companyInfo.BusinessNumber_CA && !currentCompanyInfo.BusinessNumber_CA)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldStr(CompanyInfo, BusinessNumber_CA)));
            }
            else
            {
                if (companyInfo.orig().BusinessNumber_CA != companyInfo.BusinessNumber_CA && companyInfo.TaxGSTHSTAccountId_CA)
                {
                    warning("@SYS313832");
                }
            }

            if (ok && !companyInfo.SoftwareIdentificationCode_CA && !currentCompanyInfo.SoftwareIdentificationCode_CA)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldStr(CompanyInfo, SoftwareIdentificationCode_CA)));
            }
        }

        if (ok && SysCountryRegionCode::isPartyInCountryRegion(companyInfo.RecId, [#isoUS]))
        {
            if (companyInfo.Validate1099OnEntry)
            {
                ok = CompanyInfoHelper::validateIRSData(false, companyInfo)
                    && LogisticsLocationEntity::isPhoneNumberValid(companyInfo.RecId, LogisticsElectronicAddressMethodType::Phone);
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            taxRegistrationValidator = TaxRegistrationValidator_MX::construct(companyInfo);
            ok = taxRegistrationValidator.validateCompanyTaxRegistration() && ok;
        }

        if (ok && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDE]))
        {
            if (companyInfo.PrintCorrInvoiceLabel_DE && ! companyInfo.PrintCorrInvoiceLabelEffDate_DE)
            {
                ok = checkFailed(strFmt("@SYS26332", fieldPName(CompanyInfo, PrintCorrInvoiceLabelEffDate_DE)));
            }
        }

        eventHandlerResult.result(ok);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onvalidateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate CompanyInfo field.
    /// </summary>
    /// <param name = "companyInfo">
    /// CompanyInfo record.
    /// </param>
    /// <param name = "fieldId">
    /// CompanyInfo field.
    /// </param>
    /// <param name = "eventHandlerResult">
    /// Event handler.
    /// </param>
    [SubscribesTo(tablestr(CompanyInfo), delegatestr(CompanyInfo, validateFieldDelegate))]
    public static void onvalidateField(CompanyInfo companyInfo,fieldId fieldId, EventHandlerResult eventHandlerResult)
    {
        #isoCountryRegionCodes
        boolean ret = eventHandlerResult.result();

        TaxRegistrationValidator_MX taxRegistrationValidator;
        LogisticsAddressCountryRegionId countryRegionId;
        LogisticsAddressCountryRegion logisticsAddressCountryRegion;
        VATNum vatNumInRegNum;

        #define.VatNumInRegNumLength(15)

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
        {
            taxRegistrationValidator = TaxRegistrationValidator_MX::construct(companyInfo);
        }

        if (ret)
        {
            switch (fieldId)
            {
                case (fieldNum(CompanyInfo, Giro)):
                    ret = Bank::construct(SysCountryRegionCode::countryInfo()).checkGiroNum(companyInfo.Giro);
                    break;

                case (fieldNum(CompanyInfo, vatNum)):
                    ret = TaxVATNumTable::checkVATNum(companyInfo.vatNum, companyInfo, fieldId);
                    break;

                case (fieldNum(CompanyInfo, ImportVATNum)):
                    ret = TaxVATNumTable::checkVATNum(companyInfo.ImportVATNum, companyInfo, fieldId);
                    break;

                case fieldNum(CompanyInfo, RegNum):
                    countryRegionId = companyInfo.postalAddress().CountryRegionId;
                    vatNumInRegNum = subStr(companyInfo.RegNum, 1, #VatNumInRegNumLength);
                    if (LogisticsAddressCountryRegion::find(countryRegionId).ISOcode == #isoCH)
                    {
                        ret = TaxVATNumValidate::checkVATNum(vatNumInRegNum, countryRegionId);
                    }
                    break;

                case (fieldNum(CompanyInfo, CoRegNum)):
                    countryRegionId = companyInfo.postalAddress().CountryRegionId;
                    logisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(countryRegionId);

                    if (CompanyInfoHelper::validateISOCodeofCountryRegion(logisticsAddressCountryRegion))
                    {
                        // Do not validate this field as a Vat number for DE because for DE, the number in CoRegNum
                        // is not necessarily the VAT number
                        ret = TaxVATNumValidate::checkVATNum(companyInfo.CoRegNum, countryRegionId);
                    }
                    ret = ret && TaxEnterpriseBranchNumber_BE::checkEnterPriseNumber(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID), companyInfo.CoRegNum, true);
                    break;

                case (fieldNum(CompanyInfo, fiCreditorID_DK)):
                    ret = CompanyInfoHelper::checkFICreditorID(companyInfo.fiCreditorID_DK);
                    if (!ret)
                    {
                        ret = checkFailed("@SYS314492");
                    }
                    break;

                case (fieldNum(CompanyInfo, Rfc_MX)):
                    ret = taxRegistrationValidator.validateRFC(companyInfo.Rfc_MX, companyInfo.CompanyType_MX);
                    break;

                case (fieldNum(CompanyInfo, Curp_MX)):
                    ret = taxRegistrationValidator.validateCurp(companyInfo.Curp_MX, companyInfo.CompanyType_MX);
                    break;

                case (fieldNum(CompanyInfo, StateInscription_MX)):
                    ret = taxRegistrationValidator.validateStateInscription(companyInfo.StateInscription_MX);
                    break;

                case (fieldNum(CompanyInfo, LegalRepresentativeName_MX)):
                    ret = taxRegistrationValidator.validateLegalRepresentativeName(companyInfo.LegalRepresentativeName_MX);
                    break;

                case (fieldNum(CompanyInfo, LegalRepresentativeRfc_MX)):
                case (fieldNum(CompanyInfo, LegalRepresentativeCurp_MX)):
                    ret = taxRegistrationValidator.validateRepresentativeInformation();
                    break;

                case (fieldNum(CompanyInfo, IsConsolidationCompany)):
                    ret = CompanyInfoHelper::validateConsolidationChange(companyInfo);
                    break;

                case (fieldNum(CompanyInfo, IsEliminationCompany)):
                    ret = CompanyInfoHelper::validateEliminationChange(companyInfo);
                    break;

                case (fieldNum(CompanyInfo, Tax1099RegNum)):
                    if (companyInfo.Tax1099RegNum && !Tax1099ElectronicCheck::isValidTINIRS(companyInfo.Tax1099RegNum))
                    {
                        ret = checkFailed("@SYS327906");
                    }
                    break;

                case (fieldNum(CompanyInfo, BusinessNumber_CA)):
                    if (companyInfo.BusinessNumber_CA
                        && !TaxRegistration_CA::isValidBusinessNumber(companyInfo.BusinessNumber_CA))
                    {
                        ret = checkFailed("@SYS313830");
                    }
                    break;

                case (fieldNum(CompanyInfo, SoftwareIdentificationCode_CA)):
                    if ((strLen(companyInfo.SoftwareIdentificationCode_CA)!= 8)
                        || !str2IntOk(subStr(companyInfo.SoftwareIdentificationCode_CA, 3, 8))
                        || !match(':a:a', subStr(companyInfo.SoftwareIdentificationCode_CA, 1, 2)))
                    {
                        ret = checkFailed("@SYS313831");
                    }
                    break;

                case (fieldNum(CompanyInfo, AccountOfficeRefNum)):
                    if (companyInfo.AccountOfficeRefNum != ''
                        && !CompanyInfo::isValidAccountOfficeRefNum(companyInfo.AccountOfficeRefNum))
                    {
                        ret = checkFailed(strFmt("@SYS4000254", extendedTypeId2pname(extendedTypeNum(AccountOfficeRefNum)), AccountOfficeRefNumber));
                    }
                    break;

                // <GBR>

                case fieldnum(CompanyInfo, cnae_br):
                    if (companyInfo.cnae_br)
                    {
                        ret = CompanyInfoHelper::validateCNAE_BR(companyInfo);
                    }
                    break;
                // </GBR>

                // <GEERU>
                case fieldnum(CompanyInfo, TaxAuthority_RU):
                    if (companyInfo.TaxAuthority_RU)
                    {
                        changeCompany (companyInfo.DataArea)
                        {
                            if (! TaxAuthorityAddress::exist(companyInfo.TaxAuthority_RU))
                            {
                                ret = checkFailed(strfmt("@SYS112224", companyInfo.TaxAuthority_RU, fieldPName(CompanyInfo, TaxAuthority_RU), tablePName(TaxAuthorityAddress)));
                            }
                        }
                    }
                    break;
                // </GEERU>
            }
        }

        eventHandlerResult.result(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateISOCodeofCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the ISOCode of <c>LogisticsAddressCountryRegion</c> record.
    /// </summary>
    /// <param name = "_logisticsAddressCountryRegion">
    /// The <c>LogisticsAddressCountryRegion</c> record.
    /// </param>
    /// <returns>
    /// Returns true if the ISOCode is valid; otherwise, false.
    /// </returns>
    protected static boolean validateISOCodeofCountryRegion(LogisticsAddressCountryRegion _logisticsAddressCountryRegion)
    {
        #isoCountryRegionCodes

        boolean checkISOCode = conFind([#isoAU, #isoBE, #isoCH, #isoDK, #isoES, #isoFI, #isoGB, #isoIE, #isoIT, #isoLU, #isoNL, #isoPT, #isoSE],
                                    _logisticsAddressCountryRegion.ISOCode);

        return checkISOCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modified CompanyInfo field.
    /// </summary>
    /// <param name = "target">
    /// CompanyInfo record.
    /// </param>
    /// <param name = "fieldId">
    /// CompanyInfo field that was modified.
    /// </param>
    [SubscribesTo(tablestr(CompanyInfo), delegatestr(CompanyInfo, fieldModified))]
    public static void onFieldModified(CompanyInfo target, FieldId fieldId)
    {
        switch (fieldId)
        {
            case fieldNum(CompanyInfo, BankCentralBankPurposeCode) :
                target.BankCentralBankPurposeText = BankCentralBankPurpose::find(target.BankCentralBankPurposeCode).Text;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIRSData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate IRS Data.
    /// </summary>
    /// <param name = "writeToFile">
    /// True to write to file. False to not write to file.
    /// </param>
    /// <param name = "companyInfo">
    /// CompanyInfo record.
    /// </param>
    /// <returns>
    /// True if valid; Otherwise, false.
    /// </returns>
    public static boolean validateIRSData(boolean writeToFile, CompanyInfo companyInfo)
    {
        boolean                 ret;
        boolean                 nameOK;
        boolean                 streetOK;
        boolean                 cityOK;
        boolean                 stateOK;
        boolean                 zipCodeOK;
        boolean                 tax1099RegNumOK;
        LogisticsPostalAddress  postalAddress = companyInfo.postalAddress();
        ;
        ret = true;

        setPrefix(strFmt("@SYS84735", "@SYS84767"));

        nameOK = Tax1099ElectronicCheck::validateForIRS(companyInfo.Name, tablePName(CompanyInfo),
                                               fieldPName(DirPartyTable, Name), writeToFile);

        streetOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.Street, tablePName(CompanyInfo),
                                               fieldPName(LogisticsPostalAddress, Street), writeToFile);

        cityOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.City, tablePName(CompanyInfo),
                                               fieldPName(LogisticsPostalAddress, City), writeToFile);

        stateOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.State, tablePName(CompanyInfo),
                                               fieldPName(LogisticsPostalAddress, State), writeToFile);

        zipCodeOK = Tax1099ElectronicCheck::validateForIRS(postalAddress.ZipCode, tablePName(CompanyInfo),
                                               fieldPName(LogisticsPostalAddress, ZipCode), writeToFile);

        tax1099RegNumOK = Tax1099ElectronicCheck::validateTINIRS(companyInfo.Tax1099RegNum, tablePName(CompanyInfo),
                                               fieldPName(CompanyInfo, Tax1099RegNum), writeToFile);

        ret = nameOK && streetOK && cityOK && stateOK && zipCodeOK && tax1099RegNumOK;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConsolidationChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the consolidation company option can be changed.
    /// </summary>
    /// <returns>
    /// true if the change is valid; otherwise, false.
    /// </returns>
    private static boolean validateConsolidationChange(CompanyInfo companyInfo)
    {
        NoYes origIsConsolidationCompany = companyInfo.orig().IsConsolidationCompany;
        NoYes origIsEliminationCompany = companyInfo.orig().IsEliminationCompany;
        boolean isChangeValid = true;
        boolean recordExist;
        RefRecId ledger;

        if (companyInfo != null)
        {
            ledger = Ledger::primaryLedger(companyInfo.RecId);

            recordExist = GeneralJournalEntry::existForLedger(ledger) || SubledgerJournalEntry::existForLedger(ledger) ||
                BudgetTransactionHeader::existForLedger(ledger) || AccountingDistribution::existLegalEntity(companyInfo.RecId);

            if (recordExist && (origIsEliminationCompany == NoYes::No ||
                    (origIsConsolidationCompany == NoYes::Yes && origIsEliminationCompany == NoYes::Yes)))
            {
                warning("@SYS313975");
                companyInfo.IsConsolidationCompany = origIsConsolidationCompany;
                isChangeValid = false;
            }
        }

        return isChangeValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEliminationChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether the elimination company option can be changed.
    /// </summary>
    /// <returns>
    /// true if the change is valid; otherwise, false.
    /// </returns>
    private static boolean validateEliminationChange(CompanyInfo companyInfo)
    {
        boolean isChangeValid = true;
        boolean recordExist;
        RefRecId ledger;

        if (companyInfo != null)
        {
            ledger = Ledger::primaryLedger(companyInfo.RecId);

            recordExist = GeneralJournalEntry::existForLedger(ledger) || SubledgerJournalEntry::existForLedger(ledger) ||
                BudgetTransactionHeader::existForLedger(ledger) || AccountingDistribution::existLegalEntity(companyInfo.RecId);

            if (recordExist && companyInfo.orig().IsConsolidationCompany == NoYes::No)
            {
                warning("@SYS313976");
                companyInfo.IsEliminationCompany = companyInfo.orig().IsEliminationCompany;
                isChangeValid = false;
            }
        }

        return isChangeValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCNAE_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// validate if CNAE inforamtion is correctly informed
    /// </summary>
    /// <returns>
    /// returns true if the information is correct.
    /// </returns>
    public static boolean validateCNAE_BR(CompanyInfo companyInfo)
    {
        boolean         ret = true;

        ret = FiscalInformationUtil_BR::isCNAEValid(companyInfo.cnae_br);
        if (ret)
        {
            companyInfo.cnae_br = FiscalInformationUtil_BR::formatCNAE(companyInfo.cnae_br);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFICreditorID</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function validate a input string as a FI-Creditor Id.
    /// </summary>
    /// <param name="_fiCreditorId">
    /// Takes a string as FI-Creditor Id
    /// </param>
    /// <returns>
    /// Return true if the supplied string is a valid FI-Creditor string means,
    /// empty string or string of 8 digits. false other wise.
    /// </returns>
    /// <remarks>
    /// None.
    /// </remarks>
    public static boolean checkFICreditorID(FICreditorID_DK _fiCreditorId)
    {
        #define.Numbers('0123456789')
        return (_fiCreditorId == '' || strLen(strKeep(_fiCreditorId, #Numbers)) == 8);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFICreditorIDEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// This function checks wheather a FI-Creditor is empty or not. If it is an empty
    /// string then it will post an infolog error message.
    /// </summary>
    /// <param name="_fiCreditorId">
    /// Supplied string which will be checked for FI-Creditor Id
    /// </param>
    /// <returns>
    /// It return true for empty FI-Creditor Id, and false other wise.
    /// </returns>
    /// <remarks>
    /// None.
    /// </remarks>
    public static boolean checkFICreditorIDEmpty(FICreditorID_DK _fiCreditorId)
    {
        boolean ret = false;
        if (_fiCreditorId == '')
        {
            checkFailed("@SYS314493");
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCompanyForFC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record with the specified <c>FiscalCalendar</c> value exists in the
    /// <c>CompanyInfo</c> table.
    /// </summary>
    /// <param name="_calendarRecId">
    /// The <c>FiscalCalendar</c> value the <c>CompanyInfo</c> table that is used for checking.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existCompanyForFC(RecId _calendarRecId)
    {
        return (_calendarRecId && Ledger::fiscalCalendar(CompanyInfo::current()) ==_calendarRecId ) ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>secondaryCurrency_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reporting currency code for the current ledger.
    /// </summary>
    /// <returns>The reporting currency code.</returns>
    static public CurrencyCode secondaryCurrency_RU()
    {
        return Ledger::reportingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the accounting currency code for the current ledger.
    /// </summary>
    /// <returns>The reporting currency code.</returns>
    public static CurrencyCode standardCurrency()
    {
        CurrencyCode currencyCode = Ledger::accountingCurrency(CompanyInfo::current());
        if (!currencyCode && CompanyInfoHelper::mustStandardCurrencyBeDefined())
        {
            checkFailed("@SYS26296");
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustStandardCurrencyBeDefined</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static boolean mustStandardCurrencyBeDefined()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyINN_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to the current vallue of party attributes.
    /// </summary>
    /// <returns>
    /// Value of INN property for the current party and date.
    /// </returns>
    public static OKATO_RU partyINN_RU(CompanyInfo target)
    {
        return target.partyINNasOfDate_RU(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyINNasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Accessor method to the party attributes.
    /// </summary>
    /// <param name="_date">
    /// The date for which to obtain the information.
    /// </param>
    /// <returns>
    /// Value of INN property for the current party.
    /// </returns>
    public static INN_RU partyINNasOfDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(target.RecId, TaxRegistrationTypesList::INN, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyKPP_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to the current vallue of party attributes.
    /// </summary>
    /// <returns>
    /// Value of KPP property for the current party and date.
    /// </returns>
    public static OKATO_RU partyKPP_RU(CompanyInfo target)
    {
        return target.partyKPPasOfDate_RU(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyKPPasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fetched.
    /// </param>
    /// <returns>
    /// Value of KPP property for the current party.
    /// </returns>
    public static KPPU_RU partyKPPasOfDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(target.RecId, TaxRegistrationTypesList::KPP, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOGRNasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fethed.
    /// </param>
    /// <returns>
    /// Value of OGRN property for the current party and date.
    /// </returns>
    public static OGRN_RU partyOGRNasOfDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(target.RecId, TaxRegistrationTypesList::OGRN, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOGRNDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to ValidFrom date of party attributes.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fethed.
    /// </param>
    /// <returns>
    /// Value of ValidFrom for OGRN value specified on the date.
    /// </returns>
    public static RCompanyEntryDate partyOGRNDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::currentTaxRegistrationFromDate(target.RecId, TaxRegistrationTypesList::OGRN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKATO_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to the current vallue of party attributes.
    /// </summary>
    /// <returns>
    /// Value of KPP property for the current party and date.
    /// </returns>
    public static OKATO_RU partyOKATO_RU(CompanyInfo target)
    {
        return CompanyInfoHelper::partyOKATOasOfDate_RU(target, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKATOasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fethed.
    /// </param>
    /// <returns>
    /// Value of OKATO property for the current party and date.
    /// </returns>
    public static OKATO_RU partyOKATOasOfDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(target.RecId, TaxRegistrationTypesList::OKATO, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKDPasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fethed.
    /// </param>
    /// <returns>
    /// Value of OKDP property for the current party and date.
    /// </returns>
    public static OKDP_RU partyOKDPasOfDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(target.RecId, TaxRegistrationTypesList::OKDP, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyOKPOasOfDate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accessor method to party attributes with respect to date effectivity.
    /// </summary>
    /// <param name="_date">
    /// Date as of which the attribute is fethed.
    /// </param>
    /// <returns>
    /// Value of OKPO property for the current party and date.
    /// </returns>
    public static OKPO_RU partyOKPOasOfDate_RU(CompanyInfo target, TransDate _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return TaxRegistration::legislationRegistrationValue(target.RecId, TaxRegistrationTypesList::OKPO, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInn_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the INN code.
    /// </summary>
    /// <param name = "_inn">The INN code to check.</param>
    /// <returns>true if valid; otherwise, false.</returns>
    public static boolean checkInn_RU(str _inn)
    {
        const int CorrectLength1 = 10;
        const int CorrectLength2 = 11;
        const int CorrectLength3 = 12;

        const int Num1 = 7;
        const int Num2 = 3;

        container   con;
        str         tmp_str;
        int         totalSum;

        boolean checkStr()
        {
            int i;

            for (i = 1; i <= strlen(tmp_str); i ++)
            {
                if (int2str(str2int(substr(tmp_str, i, 1))) != substr(tmp_str, i, 1))
                {
                    return false;
                }
            }
            return true;
        }

        int getSum()
        {
            int total, i;

            for (i = 1; i <= conlen(con); i ++)
            {
                total += str2int(substr(tmp_str, i, 1)) * conpeek(con, i);
            }

            return total;
        }
        ;

        con = [2, 4, 10, 3, 5, 9, 4, 6, 8];

        if (! _inn)
        {
            return true;
        }

        if ((strlen(_inn) == CorrectLength2 && substr(_inn, 1, 1) == 'F') ||
            (strlen(_inn) == CorrectLength1 || strlen(_inn) == CorrectLength3))
        {
            if (str2int64(_inn) == 0)
            {
                return checkFailed("@GLS106916");
            }

            tmp_str = strlen(_inn) == CorrectLength2 ? substr(_inn, 2, strlen(_inn)) : _inn;

            if (! checkStr())
            {
                return checkFailed("@GLS106916");
            }

            // organization INn
            if (strlen(tmp_str) == CorrectLength1)
            {
                totalSum = getSum();
                if ((totalSum mod CorrectLength2) mod CorrectLength1 != str2int(substr(tmp_str, strlen(tmp_str), -1)))
                {
                    return checkFailed("@GLS106916");
                }
            }

            // employee INn
            if (strlen(tmp_str) == CorrectLength3)
            {
                con = conIns(con, 1, Num1);
                totalSum = getSum();

                if ((totalSum mod CorrectLength2) mod CorrectLength1 == str2int(subStr(_inn, strLen(_inn) - 1, -1)))
                {
                    con = conIns(con, 1, Num2);
                    totalSum = getSum();

                    if ((totalSum mod CorrectLength2) mod CorrectLength1 != str2int(subStr(_inn, strLen(_inn), -1)))
                    {
                        return checkFailed("@GlobalAddressBook:IncorrectINN");
                    }
                }
                else
                {
                    return checkFailed("@GlobalAddressBook:IncorrectINN");
                }
            }
        }
        else
        {
            return checkFailed("@GLS106916");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInformationLegalEntity_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax information legal entity by the legal entity rec id.
    /// </summary>
    /// <param name="_forUpdate">
    /// True if the record will be update.
    /// </param>
    /// <returns>
    /// The tax information legal entity.
    /// </returns>
    public static TaxInformationLegalEntity_IN getTaxInformationLegalEntity_IN(CompanyInfo target, boolean  _forUpdate = false)
    {
        TaxInformationLegalEntity_IN   taxInformationLegalEntity_IN;

        taxInformationLegalEntity_IN.selectForUpdate(_forUpdate);

        select firstonly taxInformationLegalEntity_IN
            where taxInformationLegalEntity_IN.LegalEntity == target.RecId;

        return taxInformationLegalEntity_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalCalendarRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>FiscalCalendar</c> field is associated with the <c>CompanyInfo</c> table.
    /// </summary>
    /// <returns>
    /// Retrieves the record ID.
    /// </returns>
    public static RecId fiscalCalendarRecId()
    {
        RecId fiscalCalendarRecId;
        ;

        fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::current());

        if (! fiscalCalendarRecId && CompanyInfoHelper::mustFiscalCalendarBeDefined())
        {
            checkFailed("@SYS128634");
        }

        return fiscalCalendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFiscalCalendarBeDefined</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static boolean mustFiscalCalendarBeDefined()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrimaryFiscalEstablishment_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the primary fiscal establishment of the company.
    /// </summary>
    /// <returns>
    /// The primary fiscal establishment of the company if exists.
    /// </returns>
    public static FiscalEstablishment_BR findPrimaryFiscalEstablishment_BR(CompanyInfo target)
    {
        DirPartyLocation        dirPartyLocation;
        FiscalEstablishment_BR  fiscalEstablishment;

        dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(target.RecId);

        fiscalEstablishment = FiscalEstablishment_BR::findByDirPartyLocation(dirPartyLocation.RecId);

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxablePerson_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the global address book buffer for selected taxable person name.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyTable</c> cursor.
    /// </returns>
    public static DirPartyTable getTaxablePerson_AE()
    {
        return DirPartyTable::findRec(CompanyInfo::find().TaxablePersonName_AE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableAgent_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the global address book buffer for selected taxable agent name.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyTable</c> cursor.
    /// </returns>
    public static DirPartyTable getTaxableAgent_AE()
    {
        return DirPartyTable::findRec(CompanyInfo::find().TaxableAgentName_AE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeclarant_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the global address book buffer for selected declarant name.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyTable</c> cursor.
    /// </returns>
    public static DirPartyTable getDeclarant_AE()
    {
        return DirPartyTable::findRec(CompanyInfo::find().DeclarantName_AE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableAgency_AE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the global address book buffer for selected taxable agency name.
    /// </summary>
    /// <returns>
    /// The <c>DirPartyTable</c> cursor.
    /// </returns>
    public static DirPartyTable getTaxableAgency_AE()
    {
        return DirPartyTable::findRec(CompanyInfo::find().TaxableAgencyName_AE);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>