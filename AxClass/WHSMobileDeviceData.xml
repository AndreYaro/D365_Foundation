<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceData</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSMobileDeviceData
{
    public WHSMobileAppDeviceId deviceId = emptyGuid();
    public WHSMobileAppVersion appVersion;
    public WHSMobileAppDeviceBrandId deviceBrand;
    public WHSMobileAppDeviceModelId deviceModel;
    public WHSMobileAppPlatformId platform;
    public WHSMobileAppVersion platformVersion;
    public WHSMobileAppDeviceAlert alert;
    public WHSMobileAppDeviceHardwareIdentification hardwareIdentification;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSMobileDeviceData newFromValues(
        WHSMobileAppDeviceId _deviceId,
        WHSMobileAppVersion _appVersion,
        WHSMobileAppDeviceBrandId _deviceBrand,
        WHSMobileAppDeviceModelId _deviceModel,
        WHSMobileAppPlatformId _platform,
        WHSMobileAppVersion _platformVersion, 
        WHSMobileAppDeviceAlert _alert)
    {
        WHSMobileDeviceData data = new WHSMobileDeviceData();

        data.deviceId = _deviceId;
        data.appVersion = _appVersion != null ? _appVersion : '';
        data.deviceBrand = _deviceBrand != null ? _deviceBrand : '';
        data.deviceModel = _deviceModel != null ? _deviceModel : '';
        data.platform = _platform != null ? _platform : '';
        data.platformVersion = _platformVersion != null ? _platformVersion : '';
        data.alert = _alert != null ? _alert : '';

        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPass</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSMobileDeviceData newFromPass(WhsrfPassthrough _pass)
    {
        if (_pass == null)
        {
            return new WHSMobileDeviceData();
        }

        var mobileDeviceData = WHSMobileDeviceData::newFromValues(
            _pass.parmDeviceId(),
            _pass.parmAppVersion(),
            _pass.parmDeviceBrand(),
            _pass.parmDeviceModel(),
            _pass.parmDevicePlatform(),
            _pass.parmDevicePlatformVersion(),
            _pass.parmDeviceAlert());

        if (WHSMobileAppDeviceFriendlyNameAndHWIDFlight::instance().isEnabled())
        {
            mobileDeviceData.hardwareIdentification = _pass.parmDeviceHardwareIdentification();
        }
        
        return mobileDeviceData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileDeviceData construct()
    {
        return new WHSMobileDeviceData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>