<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSlicedPriceReportScheduleService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSlicedPriceReportScheduleService</c> class is the service class for scheduling of the sliced price report.
/// </summary>
internal class RetailSlicedPriceReportScheduleService extends SysOperationServiceBase
{
    private const str slicedReportFileNameForamt = '%1 - %2';

    RetailSlicedPriceReportScheduleContract scheduleContract;
    private Query itemPriceQuery;
    BatchHeader batchHeader;
    Batch parentBatchTask;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    internal void process(RetailSlicedPriceReportScheduleContract _contract)
    {
        scheduleContract = _contract;
        batchHeader = this.getCurrentBatchHeader();
        parentBatchTask = this.getCurrentBatchTask();

        this.initPriceReportQuery();
        this.queryAndCreateWorkers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceReportQuery</Name>
				<Source><![CDATA[
    protected void initPriceReportQuery()
    {
        if (scheduleContract.parmCalculateVariantPrice())
        {
            itemPriceQuery = new Query(queryStr(RetailStoreItemPriceListWithVariants));
        }
        else
        {
            itemPriceQuery = new Query(queryStr(RetailStoreItemPriceListWithoutVariants));
        }

        // Initialize query.
        RetailStoreTable store = RetailStoreTable::find(scheduleContract.parmStoreNumber());
        OMOperatingUnit ou = RetailStoreTable::findOperatingUnit(store.RecId);
        OMOperatingUnitRefRecId operatingUnitRecId = ou.RecId;

        itemPriceQuery.dataSourceTable(tableNum(RetailAssortmentLookupChannelGroup))
            .addRange(fieldNum(RetailAssortmentLookupChannelGroup, OMOperatingUnitId))
            .value(queryValue(operatingUnitRecId));

        if (scheduleContract.parmCheckInventoryAvailability())
        {
            // Join invent sum table to check availability.
            QueryBuildDataSource qbds = itemPriceQuery.dataSourceTable(tableNum(InventTable)).addDataSource(tablenum(InventSum));
            qbds.addRange(fieldnum(InventSum, AvailPhysical)).value(strFmt('(%1.%2 > 0)', qbds.name(), fieldStr(InventSum, AvailPhysical)));
            qbds.relations(false);
            qbds.joinMode(joinMode::ExistsJoin);
            qbds.addLink(fieldNum(InventTable, ItemId), fieldNum(InventSum, ItemId));
        }

        // Use default language id.
        LanguageId languageId = LanguageTable::defaultLanguage();
        itemPriceQuery.dataSourceTable(tableNum(EcoResProductTranslation))
            .addRange(fieldNum(EcoResProductTranslation, LanguageId))
            .value(SysQuery::value(languageId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorker</Name>
				<Source><![CDATA[
    private void createWorker(
        List _inventDimIdList,
        List _retailVariantIdList,
        List _itemIdList,
        List _referenceRecIdList,
        List _salesUnitList,
        List _productNameList,
        OMOperatingUnitRefRecId _operatingUnitRecId,
        InterCompanyInventLocationId _inventLocation,
        str _fileName,
        int _reportNumber,
        str _storeName)
    {
        SrsReportRunController controller = new SrsReportRunController();
        // Define report and report design to use. Must set prior to getting report contract.
        controller.parmReportName(ssrsReportStr(RetailSlicedPriceReport, Report));
        // Use execution mode appropriate to your situation
        controller.parmExecutionMode(SysOperationExecutionMode::ScheduledBatch);
        // Suppress report dialog
        controller.parmShowDialog(false);

        RetailSlicedPriceReportRDPContract rdpContract = controller.parmReportContract().parmRdpContract();
        SRSPrintDestinationSettings settings;

        // Explicitly provide all required parameters.
        rdpContract.parmOMOperatingUnitRecId(_operatingUnitRecId);
        rdpContract.parmCalculateVariantPrice(scheduleContract.parmCalculateVariantPrice());
        rdpContract.parmDisplayPriceChangesOnly(scheduleContract.parmDisplayPriceChangesOnly());
        rdpContract.parmCalculationStartDate(scheduleContract.parmPriceCalculationStartDate());
        rdpContract.parmCalculationEndDate(scheduleContract.parmPriceCalculationEndDate());
        rdpContract.parmInventLocation(_inventLocation);
        rdpContract.parmStoreName(_storeName);

        rdpContract.parmInventDimIdListList(_inventDimIdList);
        rdpContract.parmRetailVariantIdList(_retailVariantIdList);
        rdpContract.parmItemIdList(_itemIdList);
        rdpContract.parmReferenceRecIdList(_referenceRecIdList);
        rdpContract.parmSalesUnitList(_salesUnitList);
        rdpContract.parmProductNameList(_productNameList);

        // Change print settings as needed
        settings = controller.parmReportContract().parmPrintSettings();
        settings.printMediumType(SRSPrintMediumType::File);
        settings.fileFormat(scheduleContract.parmFileFormat());
        settings.fileName(strFmt(
            slicedReportFileNameForamt,
            _fileName,
            int2str(_reportNumber)));

        batchHeader.addRuntimeTask(controller, parentBatchTask.RecId);

        if (batchHeader)
        {
            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAndCreateWorkers</Name>
				<Source><![CDATA[
    protected void queryAndCreateWorkers()
    {
        RetailStoreTable store = RetailStoreTable::find(scheduleContract.parmStoreNumber());
        if (!store)
        {
            return;
        }

        OMOperatingUnit ou = RetailStoreTable::findOperatingUnit(store.RecId);
        OMOperatingUnitRefRecId operatingUnitRecId = ou.RecId;

        // Update in case user changes store in the dialog.
        str storeName = ou.Name == '' ? ou.NameAlias : ou.Name;

        List inventDimIdList = new List(Types::String);
        List retailVariantIdList = new List(Types::String);
        List itemIdList = new List(Types::String);
        List referenceRecIdList = new List(Types::Int64);
        List salesUnitList = new List(Types::String);
        List productNameList = new List(Types::String);

        boolean calculatePrice = true;
        int currentRowCount = 0;
        int reportNumber = 1;
        QueryRun queryRun = new QueryRun(this.itemPriceQuery);

        while (queryRun.next())
        {
            calculatePrice = true;

            RetailAssortmentLookup localAssortmentLookup = queryRun.get(tableNum(RetailAssortmentLookup));
            InventTable localInventTable = queryRun.get(tableNum(InventTable));
            InventDimCombination localInventDimCombination = queryRun.get(tableNum(InventDimCombination));
            InventDim localInventDim = queryRun.get(tableNum(InventDim));
            EcoResProductTranslation productTranslation = queryRun.get(tableNum(EcoResProductTranslation));

            if (!localInventDim.RecId && localInventDimCombination.RetailVariantId)
            {
                localInventDimCombination = InventDimCombination::findVariantId(localInventDimCombination.RetailVariantId);
                localInventDim = InventDim::find(localInventDimCombination.InventDimId);
            }

            // If check availability is required and product has no physical availability, the calculation should skip this product.
            if (scheduleContract.parmCheckInventoryAvailability()
                && !RetailPriceListParameters::checkInventoryAvailabilityForProduct(store, localInventTable, localInventDim))
            {
                calculatePrice = false;
            }

            if (calculatePrice)
            {
                SalesUnit salesUnit = InventTableModule::find(localInventTable.ItemId, ModuleInventPurchSales::Sales).UnitId;
                if (salesUnit == '')
                {
                    throw error(strfmt("@RetailPricing:PriceReportMissingSalesUnitError", localInventTable.ItemId));
                }

                //// Differs from RetailPriceReportBatchJobCalculator.
                //// The InventDimId falls back to InventDimId found through RetailVariantId in InventDimCombination,
                //// if search using InventDimCombination.InventDimId finds nothing.
                inventDimIdList.addEnd(localInventDim.InventDimId);
                retailVariantIdList.addEnd(localInventDimCombination.RetailVariantId);
                itemIdList.addEnd(localInventTable.ItemId);
                referenceRecIdList.addEnd(localAssortmentLookup.RecId);
                salesUnitList.addEnd(salesUnit);
                productNameList.addEnd(productTranslation.Name);

                currentRowCount++;

                if (scheduleContract.parmMaxRowsPerReport() > 0
                    && currentRowCount >= scheduleContract.parmMaxRowsPerReport())
                {
                    this.createWorker(
                        inventDimIdList,
                        retailVariantIdList,
                        itemIdList,
                        referenceRecIdList,
                        salesUnitList,
                        productNameList,
                        operatingUnitRecId,
                        store.inventLocation,
                        scheduleContract.parmFileName(),
                        reportNumber,
                        storeName);

                    reportNumber++;

                    inventDimIdList = new List(Types::String);
                    retailVariantIdList = new List(Types::String);
                    itemIdList = new List(Types::String);
                    referenceRecIdList = new List(Types::Int64);
                    salesUnitList = new List(Types::String);
                    productNameList = new List(Types::String);
                    currentRowCount = 0;
                }
            }
        }

        // Process remaining records.
        if (currentRowCount > 0)
        {
            this.createWorker(
                inventDimIdList,
                retailVariantIdList,
                itemIdList,
                referenceRecIdList,
                salesUnitList,
                productNameList,
                operatingUnitRecId,
                store.inventLocation,
                scheduleContract.parmFileName(),
                reportNumber,
                storeName);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>