<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsAdvancedPricing</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     <c>PDSAdvancedPricing</c> computes prices using potency pricing calculation expressions defined in the database.
/// </summary>
public abstract class PdsAdvancedPricing
{
    AmountCur                   totalAmount;
    Qty                         totalQuantity;
    PDSCalculationTable         pdsCalculationTable;
    InventQualityOrderTable     inventQualityOrderTable;
    InventTrans                 inventTrans;
    InventTable                 inventTable;
    Map                         calculationElementValues;

    boolean                     calcError;
    boolean                     throwException;
    boolean                     hideMessage;

    #localmacro.OP('(')
    #endmacro

    #localmacro.CP(')')
    #endmacro

    #localmacro.legalChar('()+-/*')
    #endmacro


    #define.Operator('+-/*')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyElementMapToFormula</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies the element value maps to the equation.
    /// </summary>
    /// <param name="_equationText">
    ///     The equation that holds the variables to replace.
    /// </param>
    /// <returns>
    ///     The end-processed mathematical equation to execute.
    /// </returns>
    protected str applyElementMapToFormula(str _equationText)
    {
        //maximum decimals supported by X++
        #define.maxNumOfDecimals(16)
        MapEnumerator   mapEnumerator;
        str             currentVariable;
        real            currentValue;
        str             endEquation = strRem(_equationText, ' ');

        mapEnumerator = calculationElementValues.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            currentVariable = mapEnumerator.currentKey();
            currentValue    = mapEnumerator.currentValue();

            //
            //All variables in the equation are unique
            //and cannot be contained within other variables
            //
            endEquation = strReplace(
                endEquation,
                currentVariable,
                //culture invariant, float-level precision
                num2Str0(currentValue,1,#maxNumOfDecimals,1,0));
        }
        return endEquation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>averageAdjustedUnitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Progressively gets the adjusted unit price as a weighted average.
    /// </summary>
    /// <param name="_pricingPrecision">
    ///     The precision to use when returning the adjusted unit price.
    /// </param>
    /// <param name="_qty">
    ///     The batch quantity to be applied to the adjusted unit price (result of the equation with the current values). Optional.
    /// </param>
    /// <returns>
    ///     The adjusted unit price as a weighted average.
    /// </returns>
    /// <remarks>
    ///     Each call of this method will keep track of the specified quantities and the resulting adjusted unit prices allowing it to recompute the weighted average progressively. Passing
    ///     0 for <paramref name="_qty">_qty</paramref> will simply return the current weighted average. The method reset will essentially reset the weighted average back to zero.
    /// </remarks>
    public Price averageAdjustedUnitPrice(PDSPricingPrecision _pricingPrecision, Qty _qty = 0)
    {
        Price price;

        if (_qty)
        {
            totalQuantity   += _qty;
            totalAmount     += this.calEquation() * _qty;
        }

        if (totalQuantity)
        {
            price = decRound(totalAmount / totalQuantity, _pricingPrecision);
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the adjusted unit price.
    /// </summary>
    /// <returns>
    ///     The calculated adjusted unit price.
    /// </returns>
    public Price calc()
    {
        InventTrans             lclInventTrans;
        InventTransOrigin       invTransOrg;
        Price                   totalAmt;
        InventQty               totalQty;
        Price                   calculatedUnitPrice;
        boolean                 error;
        StatusReceipt           maxReceipt;

        if (!pdsCalculationTable)
        {
            this.parmPDSCalculationTable(PDSCalculationTable::find(this.calculationId()));
        }
        this.validateEquation();

        invTransOrg = InventTransOrigin::findByInventTransId(this.inventTransId());
        maxReceipt = this.maxReceiptStatus();

        while select lclInventTrans
            where lclInventTrans.InventTransOrigin == invTransOrg.RecId
                && lclInventTrans.StatusReceipt    >= maxReceipt
                && lclInventTrans.StatusReceipt    <= StatusReceipt::Arrived
                && lclInventTrans.StatusIssue      == StatusIssue::None
        {
            this.parmInventTrans(lclInventTrans);
            totalAmt += this.calEquation() * lclInventTrans.Qty;

            if (this.isError())
            {
                error = true;
            }

            totalQty += lclInventTrans.Qty;
        }

        calcError = error;

        if (error || totalQty == 0)
        {
            calculatedUnitPrice = 0;
        }
        else
        {
            calculatedUnitPrice = decRound(totalAmt / totalQty, this.inventTableModule().pdsPricingPrecision);
        }

        return calculatedUnitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the calulation ID used by the master record.
    /// </summary>
    /// <returns>
    ///     The calculation ID to use.
    /// </returns>
    protected abstract PDSCalculationId calculationId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calEquation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Computes the adjusted unit price using the stored calculation equation.
    /// </summary>
    /// <returns>
    ///     The calculated adjusted unit price.
    /// </returns>
    public Price calEquation()
    {
        ProdMathEvaluator   mathEvaluator;
        Price               price;
        str                 numericFormula;

        setPrefix(strFmt("@PSC758", this.itemId()));
        calcError = false;

        this.populateElementValueMap();
        numericFormula  = this.applyElementMapToFormula(pdsCalculationTable.CalculationText);
        if (!calcError)
        {
            mathEvaluator = ProdMathEvaluator::construct();
            mathEvaluator.parmCalculationExpression(numericFormula);
            mathEvaluator.parmHandleException(!hideMessage);
            mathEvaluator.parmThrowOnError(throwException);
            price = mathEvaluator.evaluateExpression();
        }
        else
        {
            price = 0;
        }

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the value for an advanced pricing equation element.
    /// </summary>
    /// <param name="_equationVariable">
    ///     The equation variable to get the value for.
    /// </param>
    /// <returns>
    ///     The value for the equation element.
    /// </returns>
    protected real elementValue(PDSCalculationLine _equationVariable)
    {
        PdsBatchAttribByItem            batchAttribItem;
        Price                           tempCalc;

        switch (_equationVariable.ElementType)
        {
            case PDSCalcElementTypeBase::PurchPrice:
                return this.unitPrice();

            case PDSCalcElementTypeBase::PurchReceiptQty:
                return this.qty();

            case PDSCalcElementTypeBase::Constant:
                return _equationVariable.Constant;

            case PDSCalcElementTypeBase::BatchAttribTarget:
                batchAttribItem = PdsBatchAttribByItem::findItemId(this.itemId(), _equationVariable.PdsBatchAttribId,TableGroupAll::Table);
                tempCalc = str2num(batchAttribItem.pdsBaseValue);
                if (tempCalc == 0)
                {
                    this.evalError("@PSC646");
                }
                return tempCalc;

            case PDSCalcElementTypeBase::BatchAttribActual:
                tempCalc = str2num(PdsBatchAttributes::find(inventTrans.ItemId, inventTrans.inventBatchId(), _equationVariable.PdsBatchAttribId).PdsBatchAttribValue);
                if (tempCalc == 0)
                {
                    this.evalError(strFmt("@PSC647", _equationVariable.PdsBatchAttribId, inventTrans.inventBatchId()));
                }
                return tempCalc;

            case PDSCalcElementTypeBase::None:
                this.evalError(strFmt("@PSC756", enum2str(_equationVariable.ElementType)));
                return 0;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evalError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Logs or throws an evaluation error message.
    /// </summary>
    /// <param name="msg">
    ///     The message to log or throw.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Thrown if <see cref="parmThrowException method"/> is true.
    /// </exception>
    protected void evalError(str msg)
    {
        if (!calcError)
        {
            if (throwException)
            {
                throw error(msg);
            }

            if (!hideMessage)
            {
                error(msg);
            }

            calcError = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementDefinitions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of element definitions or metadata of the current equation.
    /// </summary>
    /// <returns>
    ///     A list of element definitions stored as containers within each list item.
    /// </returns>
    /// <remarks>
    ///     Allows the consumer to use the element definitions to obtain the relevant values. Each list item will contain a container of at least two tokens: the equation element and its
    ///     type. If the element pertains to a batch attribute (target or actual), then a third token, the batch attribute ID, is added to the list item. Elements that are type Constant are
    ///     not added to the list as there is no need for the consumer to look up its value.
    /// </remarks>
    public List getElementDefinitions()
    {
        List                elementList = new List(Types::Container);
        PDSCalculationLine  calculationLine;

        while select ElementType, Element, Constant, PdsBatchAttribId
                from calculationLine
                where calculationLine.CalculationId == pdsCalculationTable.CalculationId
        {
            if (calculationLine.ElementType == PDSCalcElementTypeBase::Constant)
            {
                this.setElementValue(calculationLine.Element, calculationLine.Constant);
            }
            else
            {
                if (calculationLine.ElementType != PDSCalcElementTypeBase::BatchAttribActual
                    && calculationLine.ElementType != PDSCalcElementTypeBase::BatchAttribTarget)
                {
                    elementList.addEnd([calculationLine.Element, calculationLine.ElementType]);
                }
                else
                {
                    elementList.addEnd([calculationLine.Element, calculationLine.ElementType, calculationLine.PdsBatchAttribId]);
                }
            }
        }

        return elementList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>InventTable</c> record for the line.
    /// </summary>
    /// <returns>
    ///     The <c>InventTable</c> record for the line.
    /// </returns>
    protected InventTable inventTable()
    {
        if (inventTable.ItemId != this.itemId())
        {
            inventTable = InventTable::find(this.itemId());
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>InventTableModule</c> record appropriate for the current item and module.
    /// </summary>
    /// <returns>
    ///     The <c>InventTableModule</c> record with the rounding information.
    /// </returns>
    protected abstract InventTableModule inventTableModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the inventory transaction ID for the main table record.
    /// </summary>
    /// <returns>
    ///     The inventory transaction ID for the main record that this will be computing a advanced price for.
    /// </returns>
    protected abstract InventTransId inventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isError</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value indicating if the calculation had an error.
    /// </summary>
    /// <returns>
    ///     true if there was an error during the calculation; otherwise, false.
    /// </returns>
    public boolean isError()
    {
        return calcError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the item ID on the line.
    /// </summary>
    /// <returns>
    ///     The item ID on the line.
    /// </returns>
    protected abstract ItemId itemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxReceiptStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the maximum processed receipt status for inventory transactions to use for computing the adjusted unit price.
    /// </summary>
    /// <returns>
    ///     The maximum process receipt status to use for adjusted unit pricing calculation.
    /// </returns>
    /// <remarks>
    ///     The base implementation returns <c>StatusReceipt::Purchased</c>.
    /// </remarks>
    protected StatusReceipt maxReceiptStatus()
    {
        return StatusReceipt::Purchased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        calculationElementValues = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHideMessage</Name>
				<Source><![CDATA[
        public boolean parmHideMessage(boolean _hideMessage = hideMessage)
    {
        hideMessage = _hideMessage;

        return hideMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityOrderTable</Name>
				<Source><![CDATA[
        public InventQualityOrderTable parmInventQualityOrderTable(InventQualityOrderTable _inventQualityOrderTable = inventQualityOrderTable)
    {
        inventQualityOrderTable = _inventQualityOrderTable;

        return inventQualityOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
        public InventTrans parmInventTrans(InventTrans _trans = inventTrans)
    {
        if (!prmisDefault(_trans))
        {
            inventTrans = _trans;
        }

        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPDSCalculationTable</Name>
				<Source><![CDATA[
        public PDSCalculationTable parmPDSCalculationTable(PDSCalculationTable _pdsCalculationTable = pdsCalculationTable)
    {
        pdsCalculationTable = _pdsCalculationTable;

        return pdsCalculationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowException</Name>
				<Source><![CDATA[
        public boolean parmThrowException(boolean _throwException = throwException)
    {
        throwException = _throwException;

        return throwException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateElementValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the value map used for variables in the advanced pricing calculation.
    /// </summary>
    /// <remarks>
    ///     If any error is shown during the retrieval of the values, the equation is not executed.
    /// </remarks>
    protected void populateElementValueMap()
    {
        PDSCalculationLine  pdsCalculationLine;
        real                actualValue;

        if (calcError)
        {
            // if the calculation has already failed parsing, do not loop
            return;
        }

        while select pdsCalculationLine
            where pdsCalculationLine.CalculationId == pdsCalculationTable.CalculationId
        {
            actualValue = this.elementValue(pdsCalculationLine);
            if (calcError)
            {
                // if the calculation failed for an element, return.
                return;
            }
            else
            {
                calculationElementValues.insert(enum2str(pdsCalculationLine.Element), actualValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity to use for the equation processing.
    /// </summary>
    /// <returns>
    ///     The quantity to use for advancing calculation equation processing.
    /// </returns>
    protected abstract Qty qty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the internal counters for the total quantity and total amount.
    /// </summary>
    /// <remarks>
    ///     These internal counters are updated when the method result is called.
    /// </remarks>
    public void reset()
    {
        totalQuantity   = 0;
        totalAmount     = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setElementValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets an element in the current equation to a specified value.
    /// </summary>
    /// <param name="_element">
    ///     The equation element.
    /// </param>
    /// <param name="_value">
    ///     The value to be assigned to the equation element.
    /// </param>
    public void setElementValue(PDSCalcElementBase _element, real _value)
    {
        calculationElementValues.insert(enum2str(_element), _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the unit price on the line.
    /// </summary>
    /// <returns>
    ///     The unit price on the line.
    /// </returns>
    protected abstract PriceCur unitPrice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEquation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value indicating if the equation is valid.
    /// </summary>
    /// <returns>
    ///     true if the equation is valid, false otherwise.
    /// </returns>
    public boolean validateEquation()
    {
        int                 i;
        Str60               elementList;
        PDSCalculationText  inEquation;
        PDSCalculationLine  fsCalculationLine;

        if (pdsCalculationTable.Valid)
        {
            return true;
        }

        setPrefix(strFmt("@SYS104946", pdsCalculationTable.CalculationId));

        inEquation = strRem(pdsCalculationTable.CalculationText, ' ');

        if (inEquation == "")
        {
            return checkFailed("@PSC163");
        }

        while select Element
            from fsCalculationLine
            where fsCalculationLine.CalculationId == pdsCalculationTable.CalculationId
        {
            elementList = elementList + enum2str(fsCalculationLine.Element);
        }

        if (strLen(strRem(inEquation, strFmt('%1%2', elementList, #legalChar))) > 0)
        {
            return checkFailed(strFmt("@PSC164", strRem(inEquation, elementList + #legalChar)));
        }

        if (strLen(strRem(inEquation,#OP)) != strLen(strRem(inEquation, #CP)))
        {
            return checkFailed(strFmt("@PSC165", #OP, #CP));
        }

        for (i = 1; i <= strLen(inEquation); i++)
        {
            // Left of ( must be + - * / (
            if (subStr(inEquation, i, 1) == #OP &&  i != 1)
            {
                if (strLen(strRem(subStr(inEquation, i - 1, 1), #legalChar)) != 0 || i == strLen(inEquation))
                {
                    return checkFailed(strFmt("@PSC159", #OP));
                }
            }

            // Right of ( must be an element
            if (subStr(inEquation, i, 1) == #OP)
            {
                if (i == strLen(inEquation) || strLen(strRem(subStr(inEquation, i + 1, 1), elementList + #OP)) != 0)
                {
                    return checkFailed(strFmt("@PSC159", #OP));
                }
            }

            // Right of ) must be + - * / )
            if (subStr(inEquation, i, 1) == #CP && i != strLen(inEquation))
            {
                if (strLen(strRem(subStr(inEquation, i + 1,1), #legalChar)) != 0 || i == 1)
                {
                    return checkFailed(strFmt("@PSC159", #CP));
                }
            }

            // Left of ) must be an element
            if (subStr(inEquation, i, 1) == #CP)
            {
                if (i == 1 || strLen(strRem(subStr(inEquation, i - 1 , 1), elementList + #CP)) != 0)
                {
                    return checkFailed(strFmt("@PSC159", #CP));
                }
            }

            // Left of element cannot be element except first char is element
            if (strLen(strRem(subStr(inEquation, i, 1), elementList)) == 0)
            {
                if (i != 1 && strLen(strRem(subStr(inEquation, i - 1, 1), elementList)) == 0)
                {
                    return checkFailed(strFmt("@PSC160", subStr(inEquation, i, 1)));
                }
            }

            // Right of element cannot be element except last char is element
            if (strLen(strRem(subStr(inEquation, i, 1), elementList)) == 0)
            {
                if (i != strLen(inEquation) && strLen(strRem(subStr(inEquation, i + 1, 1), elementList)) == 0)
                {
                    return checkFailed(strFmt("@PSC160", subStr(inEquation, i, 1)));
                }
            }

            // Left of operator cannot be operator and first char cannot be operator
            if (strLen(strRem(subStr(inEquation, i, 1), #operator)) == 0)
            {
                if (i == 1 || strLen(strRem(subStr(inEquation, i - 1, 1), #operator)) == 0)
                {
                    return checkFailed(strFmt("@PSC161", subStr(inEquation, i, 1)));
                }
            }

            // Right of operator cannot be operator and last char cannot be operator
            if (strLen(strRem(subStr(inEquation, i, 1), #operator)) == 0)
            {
                if (i == strLen(inEquation) || strLen(strRem(subStr(inEquation, i + 1, 1), #operator)) == 0)
                {
                    return checkFailed(strFmt("@PSC161", subStr(inEquation, i, 1)));
                }
            }
        }

        ttsbegin;
        pdsCalculationTable = PDSCalculationTable::find(this.parmPDSCalculationTable().CalculationId, true);
        pdsCalculationTable.Valid = true;
        pdsCalculationTable.update(true);
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Construct an <c>PDSAdvancedPricing</c> derived object based on the advanced pricing type.
    /// </summary>
    /// <param name="_calculationTableRecId">
    ///     The <c>PDSCalculationTable</c> record ID that the advanced pricing calculator is to work on.
    /// </param>
    /// <param name="_type">
    ///     The advanced pricing type.
    /// </param>
    /// <param name="_factory">
    ///     An advanced pricing factory object to perform the actual construction of the derived object. Optional.
    /// </param>
    /// <returns>
    ///     The <c>PDSAdvancedPricing</c> derived object.
    /// </returns>
    public static PDSAdvancedPricing construct(PDSCalculationTableRecId _calculationTableRecId, PDSAdvancedPricingType _type, PDSAdvancedPricingFactory _factory = new PDSAdvancedPricingFactory())
    {
        // Ensure that there is always a valid factory object.
        if (!prmisDefault(_factory) && !_factory)
        {
            _factory = new PDSAdvancedPricingFactory();
        }

        return _factory.constructAdvancedPricing(PDSCalculationTable::findRecId(_calculationTableRecId), _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new <c>PDSAdvancedPricing</c> appropriate for a given record.
    /// </summary>
    /// <param name="_buffer">
    ///     The record to create an <c>PDSAdvancedPricing</c> concrete class for.
    /// </param>
    /// <returns>
    ///     An <c>PDSAdvancedPricing</c> object to validate or calculate price for <paramref name="_buffer"/>.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Thrown if <paramref name="_buffer"/> is an unsupported record type.
    /// </exception>
    public static PDSAdvancedPricing newRecord(Common _buffer)
    {
        PDSAdvancedPricing      advPricing;

        switch (_buffer.TableId)
        {
            case tableNum(PDSCalculationTable):
                advPricing = PDSAdvancedPricing_Validator::newCalculationTable(_buffer);
                break;

            case tableNum(PurchParmLine):
                advPricing = PDSAdvancedPricing_PurchLine::newPurchParmLine(_buffer);
                break;

            case tableNum(PurchLine):
                advPricing = PDSAdvancedPricing_PurchLine::newPurchLine(_buffer);
                break;

            case tableNum(VendInvoiceInfoLine):
                advPricing = PDSAdvancedPricing_VendInvoiceLine::newVendInvoiceInfoLine(_buffer);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return advPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefCalculationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence reference for the <c>CalculationId</c> field.
    /// </summary>
    /// <returns>
    /// The number sequence reference for the <c>CalculationId</c> field.
    /// </returns>
    static NumberSequenceReference numRefCalculationId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(PDSCalculationId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>