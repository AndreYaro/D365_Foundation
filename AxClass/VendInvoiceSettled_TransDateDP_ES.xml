<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceSettled_TransDateDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>VendInvoiceSettled_TransDateDP_ES</c> class is the report data provider class for the
///     <c>VendInvoiceSettled_TransDate_ES</c> report.
/// </summary>
[SRSReportQuery(queryStr(VendInvoiceSettled_TransDate_ES))]
public class VendInvoiceSettled_TransDateDP_ES extends SRSReportDataProviderBase
{
    private const str FeatureReference = 'ES-00020';
    const str EmptyInvoice = '';

    VendInvoiceSettled_TransDateTmp_ES vendInvoiceSettled_TransDateTmp_ES;
    VendSettlement vendSettlement;
    VendTrans vendTrans;
    str invoiceNo;
    int delayDays;
    CurrencyCode accountingCurrency;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceSettled_TransDateTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the data from the <c>VendInvoiceSettled_TransDateTmp_ES</c> temporary table.
    /// </summary>
    /// <returns>
    ///     Data from the <c>VendInvoiceSettled_TransDateTmp_ES</c> temporary table.
    /// </returns>
    [SRSReportDataSet(tablestr(VendInvoiceSettled_TransDateTmp_ES))]
    public VendInvoiceSettled_TransDateTmp_ES getVendInvoiceSettled_TransDateTmp_ES()
    {
        select vendInvoiceSettled_TransDateTmp_ES;
        return vendInvoiceSettled_TransDateTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a range to the query depending on the UI parameter selection.
    /// </summary>
    /// <param name="_newQuery">
    ///     The main data source of the report.
    /// </param>
    /// <returns>
    ///     A <c>Query</c> object that has ranges.
    /// </returns>
    public Query initQuery(Query _newQuery)
    {
        _newQuery.dataSourceTable(tableNum(VendTrans)).addRange(fieldNum(VendTrans, Closed)).value(SysQuery::valueNot(dateNull()));

        return _newQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendInvoiceSettled_TransDateTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts data into the <c>VendInvoiceSettled_TransDateTmp_ES</c> temporary table.
    /// </summary>
    protected void insertVendInvoiceSettled_TransDateTmp_ES()
    {
        vendInvoiceSettled_TransDateTmp_ES.AccountNum = vendTrans.AccountNum;
        vendInvoiceSettled_TransDateTmp_ES.Voucher = vendTrans.Voucher;
        vendInvoiceSettled_TransDateTmp_ES.Txt = vendTrans.Txt;
        vendInvoiceSettled_TransDateTmp_ES.TransDate = vendTrans.TransDate;
        vendInvoiceSettled_TransDateTmp_ES.DueDate = vendSettlement.DueDate;
        vendInvoiceSettled_TransDateTmp_ES.AmountMST = -vendTrans.AmountMST;
        vendInvoiceSettled_TransDateTmp_ES.PaymMode = vendTrans.PaymMode;
        vendInvoiceSettled_TransDateTmp_ES.PromissoryNoteId = vendTrans.PromissoryNoteId;
        vendInvoiceSettled_TransDateTmp_ES.PostingProfile = vendTrans.PostingProfile;
        vendInvoiceSettled_TransDateTmp_ES.DelayDays = delayDays;
        vendInvoiceSettled_TransDateTmp_ES.Invoices = invoiceNo;
        vendInvoiceSettled_TransDateTmp_ES.CurrencyCode = accountingCurrency;
        vendInvoiceSettled_TransDateTmp_ES.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        accountingCurrency = Ledger::accountingCurrency();
        VendReport_InvoiceSettledTransDate_ES vendReport_InvoiceSettledTransDate_ES = new VendReport_InvoiceSettledTransDate_ES();

        Query query = this.initQuery(new Query(this.parmQuery()));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            vendTrans = queryRun.get(tablenum(VendTrans));
            invoiceNo = EmptyInvoice;

            if ((!vendTrans.Invoice && vendTrans.PromissoryNoteID) || (vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::InvoiceRemitted))
            {
                VendTrans vendTransFromInvoice = vendReport_InvoiceSettledTransDate_ES.findVendTransVoucher(vendTrans);

                if (vendTransFromInvoice.Invoice)
                {
                    invoiceNo = vendReport_InvoiceSettledTransDate_ES.invoicesTxt(vendTrans);
                    vendSettlement = vendReport_InvoiceSettledTransDate_ES.vendSettlement(vendTrans);

                    if (vendSettlement.DueDate)
                    {
                        int difYear = year(vendSettlement.DueDate) - year(vendTrans.TransDate);
                        delaydays = dayofyr(vendSettlement.DueDate) + (difYear * 365) - dayofyr(vendTrans.TransDate);
                    }

                    this.insertVendInvoiceSettled_TransDateTmp_ES();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>