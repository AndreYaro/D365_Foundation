<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureTransCreateAmountDiff_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureTransCreateAmountDiff_RU extends FactureTransCreate_RU
{
    TaxTrans                            taxTrans;
    TaxTransGeneralJournalAccountEntry  tmpTaxTransGeneralJournalAccountEntry;
    GeneralJournalAccountEntry          tmpGeneralJournalAccountEntry;
    LedgerVoucherObject                 ledgerVoucherObject;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmounts</Name>
				<Source><![CDATA[
    protected boolean calcAmounts(Qty _qty)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns default dimension for facture line
    /// </summary>
    /// <returns>
    ///   Default dimension for facture line
    /// </returns>
    protected DimensionDefault getTaxTransDefaultDimension()
    {
        LedgerDimensionAccount  taxLedgerDimension;
        DimensionDefault        taxDefaultDimesion;

        if (taxTrans.isTmp())
        {
            select firstonly tmpTaxTransGeneralJournalAccountEntry
                where tmpTaxTransGeneralJournalAccountEntry.TaxTrans             == taxTrans.RecId                &&
                      tmpTaxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax
            join LedgerDimension from tmpGeneralJournalAccountEntry
                where tmpGeneralJournalAccountEntry.RecId == tmpTaxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry;

            taxDefaultDimesion = tmpGeneralJournalAccountEntry.LedgerDimension; // Yes, there is DefaultDimension stored in
        }
        else
        {
            taxLedgerDimension = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId);

            if (! taxLedgerDimension && ledgerVoucherObject)
            {
                taxLedgerDimension = ledgerVoucherObject.getLedgerDimensionForTaxTrans_RU(taxTrans.RecId, TaxTransRelationshipType::Tax);
            }

            taxDefaultDimesion = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(taxLedgerDimension);
        }

        return taxDefaultDimesion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTrans</Name>
				<Source><![CDATA[
    protected void initTrans()
    {
        TaxTable                taxTable = TaxTable::find(taxTrans.TaxCode),
                                inCostTaxTable;
        TaxTrans                inCostTaxTrans;
        int                     sign;
        Amount                  excise;
        TaxTrans_RU             inCostTaxTrans_RU;

        super();

        switch (facture.module())
        {
            case FactureModule_RU::Cust :
                sign = -1;
                break;
            case FactureModule_RU::Vend :
                sign = 1;
                break;
            default                     :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (this.reverseSign())
        {
            sign = - sign;
        }

        select sum(SourceTaxAmountCur), sum(SourceRegulateAmountCur)
             from  inCostTaxTrans
             group by TaxAutogenerated
             where inCostTaxTrans.Voucher        == taxTrans.Voucher       &&
                   inCostTaxTrans.TransDate      == taxTrans.TransDate     &&
                   inCostTaxTrans.InventTransId  == taxTrans.InventTransId &&
                   inCostTaxTrans.TaxOrigin      == TaxOrigin::Tax         &&
                   inCostTaxTrans.TaxGroup       == taxTrans.TaxGroup      &&
                   inCostTaxTrans.TaxItemGroup   == taxTrans.TaxItemGroup
             join RecId from inCostTaxTrans_RU
                 where inCostTaxTrans_RU.TaxTrans == inCostTaxTrans.RecId &&
                   inCostTaxTrans_RU.CustVendTransPostingLog_RU  == taxTrans.taxTrans_RU().CustVendTransPostingLog_RU
             join TaxType_W from inCostTaxTable
                 group by TaxType_W
                 where inCostTaxTable.TaxCode    == inCostTaxTrans.TaxCode  &&
                       inCostTaxTable.TaxType_W  == TaxType_W::Excise;

        excise   = inCostTaxTrans.TaxAutogenerated ?
                   inCostTaxTrans.SourceTaxAmountCur :
                   inCostTaxTrans.SourceRegulateAmountCur;

        factureTrans.InvoiceId          = "";
        factureTrans.InvoiceDate        = dateNull();
        factureTrans.InternalInvoiceId  = "";
        factureTrans.Qty                = 0;
        factureTrans.LineAmount         = taxTrans.TaxBaseAmount * sign;
        factureTrans.Unit               = "";
        factureTrans.TaxAmount          = (taxTrans.TaxAmount + excise) * sign;
        factureTrans.Excise             = excise;
        factureTrans.InventTransId      = "";
        factureTrans.DefaultDimension   = this.getTaxTransDefaultDimension();
        factureTrans.InventGTDId        = "";
        factureTrans.CountryRegionName  = "";
        factureTrans.FactureLineType    = FactureLineType_RU::AmountDifference;
        factureTrans.InvoiceLineNum     = 0;
        factureTrans.ExchRate           = 0;
        factureTrans.vatValue           = TaxData::percent(taxTable.TaxCode, factureJour.FactureDate_External, taxTable.TaxBase);
        factureTrans.Price              = 0;
        factureTrans.ItemName           = "@GLS101335";
        factureTrans.TaxGroup           = taxTrans.TaxGroup;
        factureTrans.TaxItemGroup       = taxTrans.TaxItemGroup;
        factureTrans.vat                = taxTrans.TaxAmount * sign;

        factureTrans.LineAmountMST      = factureTrans.LineAmount;
        factureTrans.TaxAmountMST       = factureTrans.TaxAmount;
        factureTrans.ExciseAmountMST    = factureTrans.Excise;
        factureTrans.vatAmountMST       = factureTrans.vat;

        switch (taxTable.TaxType_W)
        {
            case TaxType_W::VAT        :
                factureTrans.vatType    = VATType_RU::Full;
                break;
            case TaxType_W::VATReduced :
                factureTrans.vatType    = VATType_RU::Reduced;
                break;
            case TaxType_W::VATZero    :
                factureTrans.vatType    = VATType_RU::Zero;
                break;
            default                     :
                factureTrans.vatType    = VATType_RU::NonLiable;
                factureTrans.vat        = 0;
        }

        factureTrans.TaxCode            = factureTrans.vatType == VATType_RU::NonLiable ? "" : taxTrans.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FactureJourCreate_RU _facture,
                    recId                _recId,
                    Qty                  _qty,
                    NoYes                _recalcTaxes)
    {
        super(_facture, _recId, _qty, _recalcTaxes);

        if (_facture.parmBuffer())
        {
            taxTrans                              = _facture.parmBuffer();
            tmpTaxTransGeneralJournalAccountEntry = _facture.parmTaxTransGeneralJournalAccountEntry();
            tmpGeneralJournalAccountEntry         = _facture.parmGeneralJournalAccountEntry();
        }

        ledgerVoucherObject = _facture.parmLedgerVoucherObject();

        select firstonly taxTrans
            where taxTrans.RecId == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseSign</Name>
				<Source><![CDATA[
    protected boolean reverseSign()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(RecId _recId, Qty _qty, NoYes _recalcTaxes)
    {
        super(_recId, _qty, _recalcTaxes);
        if (facture.parmBuffer())
        {
            taxTrans                              = facture.parmBuffer();
            tmpTaxTransGeneralJournalAccountEntry = facture.parmTaxTransGeneralJournalAccountEntry();
            tmpGeneralJournalAccountEntry         = facture.parmGeneralJournalAccountEntry();
        }

        ledgerVoucherObject = facture.parmLedgerVoucherObject();

        select firstonly taxTrans
            where taxTrans.RecId == _recId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>