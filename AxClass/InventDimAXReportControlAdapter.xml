<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimAXReportControlAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventDimAXReportControlAdapter</c> class is the report control adapter for the
///    <c>InventDim</c> framework.
/// </summary>
/// <remarks>
///    This class adapts a report control to be manipulated by the <c>InventDim</c> framework.
/// </remarks>
public class InventDimAXReportControlAdapter implements InventDimReportControlInterface
{
    ReportControl reportControl;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>controlObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the underlying control object.
    /// </summary>
    /// <returns>
    ///    <c>An </c><see cref="T:Object" /> instance.
    /// </returns>
    /// <remarks>
    ///    Callers should avoid calling methods on the returned handle and use interface methods instead.
    /// </remarks>
    Object controlObject()
    {
        return reportControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the type of the control.
    /// </summary>
    /// <returns>
    ///    The type of the control as a <see cref="T:ReportFieldType" />.
    /// </returns>
    ReportFieldType controlType()
    {
        return reportControl.controlType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the corresponding data field.
    /// </summary>
    /// <returns>
    ///    The ID of the data field.
    /// </returns>
    public FieldId dataField()
    {
        Object controlObject = reportControl;

        return controlObject.dataField();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInGrid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the control is part of a grid.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether the control is part of a grid.
    /// </returns>
    /// <remarks>
    ///    The Report field is never part of any grid
    /// </remarks>
    boolean isInGrid()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportControl</Name>
				<Source><![CDATA[
        ReportControl parmReportControl(ReportControl _reportControl = reportControl)
    {
        reportControl = _reportControl;
        return reportControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a Boolean value indicating whether the label of the control label is visible.
    /// </summary>
    /// <param name="_value">
    ///    true if the label of the control label should be visible; otherwise, false. This parameter is
    ///    optional.
    /// </param>
    /// <returns>
    ///    true if the label of the control label should be visible; otherwise, false.
    /// </returns>
    boolean showLabel(boolean _value = false)
    {
        Object controlObject = reportControl;

        if (!prmisDefault(_value))
        {
            return controlObject.showLabel(_value);
        }
        else
        {
            return controlObject.showLabel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>table</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table corresponding to this control.
    /// </summary>
    /// <returns>
    ///    The table identifier.
    /// </returns>
    TableId table()
    {
        Object controlObject = reportControl;

        return controlObject.table();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visible</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets a Boolean value indicating whether the control is visible.
    /// </summary>
    /// <param name="_value">
    ///    true if the control should be visible; otherwise, false. This parameter is optional.
    /// </param>
    /// <returns>
    ///    true if the control should be visible; otherwise, false.
    /// </returns>
    boolean visible(boolean _value = false)
    {
        Object controlObject = reportControl;

        if (!prmisDefault(_value))
        {
            return controlObject.visible(_value);
        }
        else
        {
            return controlObject.visible();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>width</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the width of the control.
    /// </summary>
    /// <param name="_value">
    ///    The required width.
    /// </param>
    /// <param name="_unit">
    ///    The unit of measure.
    /// </param>
    void width(real _value, Units _unit)
    {
        Object controlObject = reportControl;
        controlObject.width(_value, _unit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventDimAXReportControlAdapter construct()
    {
        return new InventDimAXReportControlAdapter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <see cref="T:InventDimAXReportControlAdapter" />.
    /// </summary>
    /// <param name="_reportControl">
    ///    The underlying <c>ReportControl</c> object.
    /// </param>
    /// <returns>
    ///    New instance of the <see cref="T:InventDimAXReportControlAdapter" />.
    /// </returns>
    public static InventDimAXReportControlAdapter newReportControl(ReportControl _reportControl)
    {
        InventDimAXReportControlAdapter adapter = InventDimAXReportControlAdapter::construct();

        adapter.parmReportControl(_reportControl);
        return adapter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>