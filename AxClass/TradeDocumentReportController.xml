<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeDocumentReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TradeDocumentReportContract</c> class is the base class for trade document report
/// controllers.
/// </summary>
abstract class TradeDocumentReportController extends SrsPrintMgmtFormLetterController
{
    private const int MaxRetryCount = 3;

    TradeDocumentReportContract contract;
    PrintCopyOriginal           printCopyOriginal;

    RecordSortedList            journalList;
    RecordSortedList            dataReadyJournalList;
    boolean                     dataReady;

    private int                 reportsFailedToPrint;
    private boolean             reportCLRException;
    private TradeDocumentReportInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title for the document.
    /// </summary>
    /// <returns>
    /// The document title text.
    /// </returns>
    abstract protected str  documentTitle()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDataReadyJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first record from the <c>dataReadyJournalList</c>.
    /// </summary>
    /// <returns>
    /// true if the record exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean getFirstDataReadyJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first record from the <c>journalList</c>.
    /// </summary>
    /// <returns>
    /// true if the record exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean getFirstJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextDataReadyJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next record from the <c>dataReadyJournalList</c>.
    /// </summary>
    /// <returns>
    /// true if the record exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean getNextDataReadyJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next record from the <c>journalList</c>.
    /// </summary>
    /// <returns>
    /// true if the record exists; otherwise false.
    /// </returns>
    /// <remarks>
    /// Always returns false in the base class.
    /// </remarks>
    protected boolean getNextJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the journal record to pass to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    abstract protected RecId getRecordId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the arguments and sets the report name.
    /// </summary>
    /// <param name="_args">
    /// The arguments from the caller.
    /// </param>
    /// <param name="_reportName">
    /// The name of the report to generate.
    /// </param>
    protected void initArgs(Args _args, SRSCatalogItemName _reportName)
    {
        this.parmArgs(_args);
        this.parmReportName(_reportName);
        this.parmShowDialog(false);

        if (this.parmArgs().parmEnumType() == enumNum(PrintCopyOriginal))
        {
            printCopyOriginal = this.parmArgs().parmEnum();
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::OriginalPrint;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a report data contract.
    /// </summary>
    /// <param name="_args">
    /// The arguments from the caller.
    /// </param>
    /// <param name="_reportName">
    /// The name of the report to generate.
    /// </param>
    protected void initDataContract(Args _args, SRSCatalogItemName _reportName)
    {
        this.initArgs(_args, _reportName);

        this.setDataContractRecord(_args.record());

        this.preRunModifyContract();

        if (contract is TradeDocumentReportContract)
        {
            if (SysLabel::isLabelId(this.documentTitle()))
            {
                contract.parmDocumentTitle(SysLabel::labelId2String(this.documentTitle()));
            }
            else
            {
                contract.parmDocumentTitle(this.documentTitle());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract.
    /// </summary>
    protected void modifyContract()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs the reports.
    /// </summary>
    protected void output()
    {
        this.outputReports();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected void outputReport()
    {
        switch (formLetterReport.getCurrentPrintSetting().parmType())
        {
            case PrintMgmtDocInstanceType::Copy : printCopyOriginal = PrintCopyOriginal::Copy;
            break;

            case PrintMgmtDocInstanceType::Original : printCopyOriginal = PrintCopyOriginal::OriginalPrint;
            break;
        }

        str documentTitle = this.documentTitle();
        documentTitle = SysLabel::labelId2String2(documentTitle, this.parmReportContract().parmRdlContract().parmLanguageId());
        if (contract is TradeDocumentReportContract)
        {
            contract.parmDocumentTitle(documentTitle);
        }

        str documentIdentifier = this.documentIdentifier();

        if (documentIdentifier)
        {
            setPrefix(strFmt("@SCM:TradeDocumentReportInfologProgress", documentTitle, documentIdentifier));

            super();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the contract before the report runs.
    /// </summary>
    protected void preRunModifyContract()
    {
        if (!contract)
        {
            if (this.parmReportContract().parmRdpContract() is TradeDocumentReportContract)
            {
                contract = this.parmReportContract().parmRdpContract();
            }
        }

        if (contract is TradeDocumentReportContract)
        {
            contract.parmRecordId(this.getRecordId());
            contract.parmTableId(this.getTableId());
        }

        this.modifyContract();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        setPrefix("@SCM:TradeDocumentReportInfologPrefix");

        if (!journalList && !dataReadyJournalList)
        {
            throw error("@SYS26348");
        }

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().runPrintMgmt())
        {
            if (journalList)
            {
                if (this.getFirstJournal())
                {
                    do
                    {
                        this.outputWithExceptionHandling();
                    }
                    while (this.getNextJournal());
                }
                else
                {
                    throw error("@SYS26348");
                }
            }

            if (dataReadyJournalList)
            {
                dataReady = true;

                if (this.getFirstDataReadyJournal())
                {
                    do
                    {
                        this.outputWithExceptionHandling();
                    }
                    while (this.getNextDataReadyJournal() && !this.parmCancelRun());
                }
                else
                {
                    throw error("@SYS26348");
                }
            }

            if (reportsFailedToPrint)
            {
                activityContext
                    .addCustomProperty(TradeDocumentReportInstrumentationActivities::ReportsWithExceptionProperty, int2Str(reportsFailedToPrint));

                throw error(strFmt("@SCM:TradeDocumentReportExceptionOccurred", reportsFailedToPrint));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputWithExceptionHandling</Name>
				<Source><![CDATA[
    private void outputWithExceptionHandling()
    {
        if (this.handleReportExceptions())
        {
            boolean useRetry = TradeDocumentReportControllerExceptionRetryFlight::instance().isEnabled();
            int retryCounter;
            boolean runOutput = true;

            while (runOutput)
            {
                using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().outputExceptionHandling(retryCounter))
                {
                    reportCLRException = false;
   
                    try
                    {
                        this.output();

                        runOutput = false;

                        activityContext.addCustomProperty(TradeDocumentReportInstrumentationActivities::ExceptionProperty, int2Str(false));
                    }
                    catch (Exception::Error)
                    {
                        SRSPrintDestinationSettings destinationSettingDetail = this.retryCurrentPrintDestinationSettings();

                        if (useRetry
                            && retryCounter < MaxRetryCount
                            && this.mustRetryOutput(activityContext, destinationSettingDetail))
                        {
                            retryCounter++;
                        }
                        else
                        {
                            runOutput = false;

                            activityContext
                                .addCustomProperty(TradeDocumentReportInstrumentationActivities::ExceptionProperty, int2Str(true))
                                .addCustomProperty(TradeDocumentReportInstrumentationActivities::ClrExceptionProperty, int2Str(reportCLRException));

                            if (destinationSettingDetail
                                && destinationSettingDetail.printMediumType() == SRSPrintMediumType::Email)
                            {
                                warning(strFmt("@SCM:TradeDocumentReportExceptionEmail", this.documentIdentifier()));
                            }

                            Error(strFmt("@SCM:TradeDocumentReportException", this.documentIdentifier()));

                            reportsFailedToPrint++;
                        }
                    }

                    if (this.reportExceptionContextRecordId())
                    {
                        activityContext.addCustomProperty(tableId2Name(this.reportExceptionContextTableId()), int642Str(this.reportExceptionContextRecordId()));
                    }
                }
            }
        }
        else
        {
            this.output();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayReportRunException</Name>
				<Source><![CDATA[
    protected void displayReportRunException(System.Exception ex, boolean displayGenericMsg = false)
    {
        reportCLRException = true;

        super(ex, displayGenericMsg);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRetryOutput</Name>
				<Source><![CDATA[
    private boolean mustRetryOutput(SysInstrumentationActivityContext _activityContext, SRSPrintDestinationSettings _destinationSettingDetail)
    {
        boolean                     useRetry;
        int                         retryPrintSettingsCount = this.retryPrintSettingsCount();

        SrsReportDataContract reportDataContract = this.getReportContract();
        if (reportDataContract 
            && retryPrintSettingsCount == 1)
        {
            SRSReportExecutionInfo reportExecutionInfo = reportDataContract.parmReportExecutionInfo();
            if (reportExecutionInfo
                && reportExecutionInfo.parmIsSuccessful() == false
                && reportExecutionInfo.parmErrorMessage())
            {
                if (_destinationSettingDetail)
                {
                    switch (_destinationSettingDetail.printMediumType())
                    {
                        case SRSPrintMediumType::Email:
                            useRetry = TradeDocumentReportControllerExceptionRetryEmailFlight::instance().isEnabled();
                            break;

                        case SRSPrintMediumType::Printer:
                            useRetry = TradeDocumentReportControllerExceptionRetryPrinterFlight::instance().isEnabled();
                            break;

                        case SRSPrintMediumType::File:
                            useRetry = TradeDocumentReportControllerExceptionRetryFileFlight::instance().isEnabled();
                            break;

                        default:
                            useRetry = false;
                    }
                }
            }
        }

        this.logRetryProperties(_activityContext, useRetry, retryPrintSettingsCount, _destinationSettingDetail);

        return useRetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRetryProperties</Name>
				<Source><![CDATA[
    private void logRetryProperties(
        SysInstrumentationActivityContext  _activityContext,
        boolean                     _useRetry,
        int                         _retryPrintSettingsCount,
        SRSPrintDestinationSettings _destinationSettingDetail)
    {
        _activityContext
            .addCustomProperty(TradeDocumentReportInstrumentationActivities::PrintSettingsCountProperty, int2Str(_retryPrintSettingsCount))
            .addCustomProperty(TradeDocumentReportInstrumentationActivities::UseRetryProperty, int2Str(_useRetry));

        if (_destinationSettingDetail)
        {
            _activityContext.addCustomProperty(enumStr(SRSPrintMediumType), enum2Symbol(enumNum(SRSPrintMediumType), _destinationSettingDetail.printMediumType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retryPrintSettingsCount</Name>
				<Source><![CDATA[
    private int retryPrintSettingsCount()
    {
        if (formLetterReport.parmReportRun())
        {
            return formLetterReport.parmReportRun().getPrintSettingsCount();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retryCurrentPrintDestinationSettings</Name>
				<Source><![CDATA[
    private SRSPrintDestinationSettings retryCurrentPrintDestinationSettings()
    {
        if (formLetterReport.parmReportRun())
        {
            PrintMgmtPrintSettingDetail settingDetail = formLetterReport.parmReportRun().settingDetail();

            if (settingDetail)
            {
                return settingDetail.parmPrintJobSettings();
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the record buffer for the document.
    /// </summary>
    /// <param name="_common">
    /// A <c>common</c> record buffer to use in the document.
    /// </param>
    abstract protected void setDataContractRecord(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record table ID of the journal record that is to be passed to the contract.
    /// </summary>
    /// <returns>
    /// The table ID of the journal record.
    /// </returns>
    protected TableId getTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal TradeDocumentReportInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = TradeDocumentReportInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>