<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionPercentCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates an amount distribution percent for different sources.
/// </summary>
public abstract class CFMDistributionPercentCalc
{
    CFMDistributionPercentTmp distributionPercentTmpTable;
    CFMLedgerDimensionConverterInterface cfmDimensionConverter;
    boolean paymentRequestsEnabled;
    Common source;
    CFMDistributionType distributionType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionPercentCalc</c> based on source record and distribution type needed.
    /// </summary>
    /// <param name="_source">
    /// Source record.
    /// </param>
    /// <param name="_distributionType">
    /// The <c>CFMDistributionType</c> enum value.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionPercentCalc</c>.
    /// </returns>
    public static CFMDistributionPercentCalc construct(Common _source, CFMDistributionType _distributionType = CFMDistributionType::Summary)
    {
        CFMDistributionPercentCalc distributionPercentCalc;

        if (_source)
        {
            CFMDistributionPercentSourceAttribute extensionAttribute = new CFMDistributionPercentSourceAttribute(CFMDistributionPercentCalc::isAccountingDistributionExists(_source), tableId2name(_source.TableId));

            distributionPercentCalc = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMDistributionPercentCalc), extensionAttribute);

            if (!distributionPercentCalc)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            distributionPercentCalc.initialize(_source, _distributionType);
        }

        return distributionPercentCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingDistributionExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the source record have linked accounting distribution records.
    /// </summary>
    /// <param name="_source">
    /// Source record.
    /// </param>
    /// <returns>
    /// true if there are <c>AccountingDistribution</c> records linked with source record; otherwise, false.
    /// </returns>
    public static boolean isAccountingDistributionExists(Common _source)
    {
        boolean accountingDistributionExists;

        if (SysDictTable::isTableMapped(tableNum(SourceDocumentHeaderImplementation), _source.TableId))
        {
            SourceDocumentHeaderImplementation sourceDocumentHeaderImplementation = _source;
            SourceDocumentHeader sourceDocumentHeader = SourceDocumentHeader::find(sourceDocumentHeaderImplementation.SourceDocumentHeader);

            // Create distributions if needed.
            if (sourceDocumentHeader.AccountingStatus == SourceDocumentAccountingStatus::InProcess)
            {
                SourceDocumentProcessor::submitSourceDocumentLinesForHeader(sourceDocumentHeader.RecId);
            }

            accountingDistributionExists = (select count(RecId) from accountingDistribution
                                                where accountingDistribution.SourceDocumentHeader == sourceDocumentHeaderImplementation.SourceDocumentHeader).RecId != 0;
        }

        return accountingDistributionExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add amount to distribution temporary table.
    /// </summary>
    /// <param name="_cfmLedgerDimension">
    /// Ledger dimension from source
    /// </param>
    /// <param name="_taxGroup">
    /// Tax group from source
    /// </param>
    /// <param name="_taxItemGroup">
    /// Tax item group from source
    /// </param>
    /// <param name="_amount">
    /// Amount from source
    /// </param>
    protected void addAmount(CFMLedgerDimension _cfmLedgerDimension, TaxGroup _taxGroup, TaxItemGroup _taxItemGroup, AmountCur _amount)
    {
        if (_amount == 0)
        {
            return;
        }

        select forupdate firstonly distributionPercentTmpTable
            where distributionPercentTmpTable.LedgerDimension == _cfmLedgerDimension &&
                  distributionPercentTmpTable.TaxGroup == _taxGroup &&
                  distributionPercentTmpTable.TaxItemGroup == _taxItemGroup;

        if (distributionPercentTmpTable.RecId != 0)
        {
            distributionPercentTmpTable.Amount += _amount;
            distributionPercentTmpTable.update();
        }
        else
        {
            distributionPercentTmpTable.LedgerDimension = _cfmLedgerDimension;
            distributionPercentTmpTable.TaxGroup = _taxGroup;
            distributionPercentTmpTable.TaxItemGroup = _taxItemGroup;
            distributionPercentTmpTable.Amount = _amount;
            distributionPercentTmpTable.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupLines</Name>
				<Source><![CDATA[
    protected void addMarkupLines(TableId _transTableId, RecId _transRecId, CFMLedgerDimension _cfmLedgerDimension)
    {
        MarkupTrans markupTrans;

        while select TaxGroup, TaxItemGroup, TaxAmount, Posted from markupTrans
            where markupTrans.TransRecId == _transRecId
               && markupTrans.TransTableId == _transTableId
        {
            this.addAmount(_cfmLedgerDimension,
                markupTrans.TaxGroup,
                markupTrans.TaxItemGroup,
                markupTrans.Posted + this.paymentSign() * markupTrans.TaxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates dictribution percentage for the source specified.
    /// </summary>
    /// <returns>
    /// Cursor on temporary table which contains distribution percentage.
    /// </returns>
    public CFMDistributionPercentTmp calc()
    {
        this.calcDistribution();

        return distributionPercentTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates dictribution percentage for the source specified.
    /// </summary>
    protected void calcDistribution()
    {
        ttsbegin;

        this.fillDistribution();

        if (distributionType == CFMDistributionType::Summary)
        {
            this.distributeOppositeAmount();
        }

        this.deleteZeroLines();

        this.updatePercentage();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroLines</Name>
				<Source><![CDATA[
    private void deleteZeroLines()
    {
        delete_from distributionPercentTmpTable
            where distributionPercentTmpTable.Amount == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>distributeOppositeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Distributes amounts of the opposite sign along amounts of the main sign.
    /// </summary>
    private void distributeOppositeAmount()
    {
        select sum(Amount) from distributionPercentTmpTable
            where distributionPercentTmpTable.Amount < 0;

        AmountCur amountNegativeAll = distributionPercentTmpTable.Amount;

        select sum(Amount) from distributionPercentTmpTable
            where distributionPercentTmpTable.Amount > 0;

        AmountCur amountPositiveAll = distributionPercentTmpTable.Amount;

        AmountCur amountTotal;
        AmountCur amountOppositeTotal;
        Sign distributionLineSign;

        if (amountNegativeAll != 0 && amountPositiveAll != 0)
        {
            if (amountPositiveAll >= abs(amountNegativeAll))
            {
                distributionLineSign = 1;
                amountTotal = amountPositiveAll;
                amountOppositeTotal = amountNegativeAll;
            }
            else
            {
                distributionLineSign = -1;
                amountTotal = amountNegativeAll;
                amountOppositeTotal = amountPositiveAll;
            }

            AmountCur amountCumulative;
            AmountCur amountOppositeCumulative;
            Percent percentCumulative;
        
            while select forupdate distributionPercentTmpTable
                where distributionPercentTmpTable.Amount * distributionLineSign > 0
            {
                AmountCur amountInitial = distributionPercentTmpTable.Amount;
                Percent percentInitial = (amountCumulative + amountInitial) * 100 / amountTotal - percentCumulative;

                AmountCur amountOppositeToAdd = CurrencyExchangeHelper::amount((percentCumulative + percentInitial) * amountOppositeTotal / 100 - amountOppositeCumulative, this.sourceCurrencyCode());

                distributionPercentTmpTable.Amount += amountOppositeToAdd;
                distributionPercentTmpTable.update();

                percentCumulative += percentInitial;
                amountCumulative += amountInitial;
                amountOppositeCumulative += amountOppositeToAdd;
            }

            delete_from distributionPercentTmpTable
                where distributionPercentTmpTable.Amount * distributionLineSign < 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills tmp table with data.
    /// </summary>
    /// <remarks>
    /// Use tmpTableAddAmount method to add amount for needed Taxes and Dimensions.
    /// </remarks>
    protected abstract void fillDistribution()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from source.
    /// </summary>
    /// <param name="_source">
    /// Source record
    /// </param>
    /// <param name="_distributionType">
    /// Type of distribution
    /// </param>
    protected void initialize(Common _source, CFMDistributionType _distributionType)
    {
        source = _source;
        distributionType = _distributionType;

        paymentRequestsEnabled = CFMParameters::isPaymentRequestsEnabled();
        cfmDimensionConverter = CFMLedgerDimensionConverterCache::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the corrective sign to represent the source record amount in the payment perspective.
    /// </summary>
    /// <returns>
    /// Corrective sign for source record.
    /// </returns>
    protected abstract Sign paymentSign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code from the source.
    /// </summary>
    /// <returns>
    /// Currency code from the source.
    /// </returns>
    protected abstract CurrencyCode sourceCurrencyCode()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates percentage on created tmp table.
    /// </summary>
    private void updatePercentage()
    {
        select sum(Amount) from distributionPercentTmpTable;

        AmountCur amountTotal = distributionPercentTmpTable.Amount;

        if (amountTotal)
        {
            Percent percentSum;
            AmountCur amountSum;

            while select forupdate distributionPercentTmpTable
            {
                // Difference between cumulative percent and previos percent sum
                Percent percent = (amountSum + distributionPercentTmpTable.Amount) * 100 / amountTotal - percentSum;

                distributionPercentTmpTable.Percent = percent;

                distributionPercentTmpTable.update();

                percentSum += percent;
                amountSum += distributionPercentTmpTable.Amount;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>