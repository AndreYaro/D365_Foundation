<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller <c>RDeferralsController</c> class for <c>RDeferralsBalances</c>, <c>RDeferralsListing</c>, <c>RDeferralsTransactionListing</c> reports.
/// </summary>
class rDeferralsController  extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the report controller query.
    /// </summary>
    /// <returns>
    /// The report controller query.
    /// </returns>
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides ability to modify the report contract before dialog is shown to the user for the <c>RDeferralsBalances</c>, <c>RDeferralsListing</c>, <c>RDeferralsTransactionListing</c> reports.
    /// </summary>
    public void prePromptModifyContract()
    {
        Query                   query;
        QueryBuildDataSource    qbdsTable, qbdsTrans;
        RDeferralsContract      contract;

        contract = this.parmReportContract().parmRdpContract() as RDeferralsContract;
        contract.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (args.menuItemName() == menuitemOutputStr(RDeferralsTransactionListing))
        {
            query = this.getQuery();
            qbdsTable = query.dataSourceTable(tableNum(RDeferralsTable));
            qbdsTrans = query.dataSourceTable(tableNum(RDeferralsTrans));
            if (!qbdsTrans)
            {
                qbdsTrans = qbdsTable.addDataSource(tableNum(RDeferralsTrans));
            }
            qbdsTrans.relations(true);
            qbdsTrans.addRange(fieldNum(RDeferralsTrans, DeferralsBookId));
            qbdsTrans.addRange(fieldNum(RDeferralsTrans, TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method change report contract before run the report.
    /// </summary>
    public void preRunModifyContract()
    {
        RDeferralsContract      contract;

        super();

        contract = this.parmReportContract().parmRdpContract() as RDeferralsContract;
        contract.parmMenuItemName(args.menuItemName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides an entry point for the <c>RDeferralsController</c> class when it is called from a menu item.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>RDeferralsController</c> class.
    /// </param>
    public static void main(Args _args)
    {
        RDeferralsController    controller;
        str                     reportName;

        switch (_args.menuItemName())
        {
            case menuitemOutputStr(RDeferralsBalances)              : reportName = ssrsReportStr(RDeferralsBalances, Report); break;
            case menuitemOutputStr(RDeferralsListing)               : reportName = ssrsReportStr(RDeferralsListing, Report); break;
            case menuitemOutputStr(RDeferralsTransactionListing)    : reportName = ssrsReportStr(RDeferralsTransactionListing, Report); break;
            default: throw error(Error::wrongUseOfFunction(funcName()));
        }
        controller = new RDeferralsController();
        controller.parmReportName(reportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>