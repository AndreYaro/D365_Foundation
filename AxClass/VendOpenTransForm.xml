<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOpenTransForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendOpenTransForm</c> class is a helper class for the <c>VendOpenTrans</c> form.
/// It helps with the enabled state of controls and UI related activites and logics.
/// </summary>
class VendOpenTransForm
{
    boolean         diffVendBankExist;

    VendTransOpen   vendTransOpen;
    VendBank        vendBankAccount;
    Common          originator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existTransWithDiffVendBankOnMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the marked records contain different vendor bank accounts.
    /// </summary>
    /// <returns>
    /// true if marked record contains different vendor bank accounts; otherwise, false.
    /// </returns>
    public boolean existTransWithDiffVendBankOnMark()
    {
        int vendBankRecordCount;
        SpecTrans specTrans;
        VendTransOpen vendTransOpenLocal;

        while select vendTransOpenLocal
            group by ThirdPartyBankAccountId
            join SpecRecId, RefCompany, RefTableId, RefRecId from specTrans
                where vendTransOpenLocal.DataAreaId == specTrans.RefCompany
                   && vendTransOpenLocal.TableId == specTrans.RefTableId
                   && vendTransOpenLocal.RecId == specTrans.RefRecId
                   && specTrans.SpecRecId == originator.RecId
        {
              vendBankRecordCount++;
        }

        diffVendBankExist = (vendBankRecordCount > 1);

        return diffVendBankExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTransWithDiffVendBankOnUnMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the marked records contain different vendor bank accounts on un marking the records.
    /// </summary>
    /// <returns>
    /// true if marked records contain different vendor bank accounts; otherwise, false.
    /// </returns>
    public boolean existTransWithDiffVendBankOnUnMark()
    {
        diffVendBankExist = this.existTransWithDiffVendBankOnMark();

        return diffVendBankExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor bank account, if same vendor bank accounts exist for marked transactions.
    /// </summary>
    /// <returns>
    /// The vendor bank account if vendor bank accounts are same in the marked transactions.
    /// </returns>
    public BankThirdPartyAccountId getVendBankAccount()
    {
        BankThirdPartyAccountId vendBank;
        SpecTrans               specTrans;

        if (!diffVendBankExist)
        {
            select firstOnly RecId, RefTableId, RefCompany, RefRecId from specTrans
                where specTrans.SpecRecId == originator.RecId;

            vendBank = specTrans.vendTransOpen().ThirdPartyBankAccountId;
        }

        return vendBank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>VEndOpenTransForm</c> class.
    /// </summary>
    /// <param name="_originator">
    /// The place from where this class is called.
    /// </param>
    public void new(Common _originator)
    {
        originator = _originator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptToMarkRecordsWithDiffBank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the marked record vendor bank account is different from the previously marked vendor bank account;
    /// if yes, a message is displayed.
    /// </summary>
    /// <param name="_vendTransOpen">
    /// The VendTransOpen datasource from where the invoice posting form is called.
    /// </param>
    /// <returns>
    /// true if yes is clicked on the dialog box or the transaction is unmarked on the form; otherwise, false.
    /// </returns>
    public boolean promptToMarkRecordsWithDiffBank(VendTransOpen _vendTransOpen)
    {
        SpecTrans specTrans;
        VendTransOpen vendTransOpenLocal;

        if (!diffVendBankExist)
        {
            select firstOnly vendTransOpenLocal
            join SpecRecId, RefRecId, RefCompany, RefTableId from specTrans
                where vendTransOpenLocal.DataAreaId              == specTrans.RefCompany
                   && vendTransOpenLocal.TableId                 == specTrans.RefTableId
                   && vendTransOpenLocal.RecId                   == specTrans.RefRecId
                   && specTrans.SpecRecId                        == originator.RecId
                   && vendTransOpenLocal.RecId                   != _vendTransOpen.RecId
                   && vendTransOpenLocal.ThirdPartyBankAccountId != _vendTransOpen.ThirdPartyBankAccountId;

            if (vendTransOpenLocal && this.showMessage())
            {
                diffVendBankExist = true;
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a yes/no dialog box.
    /// </summary>
    /// <returns>
    /// true if yes button is clicked on the dialog, otherwise; false.
    /// </returns>
    protected boolean showMessage()
    {
        DialogButton dialogButton;
        boolean ret;

        dialogButton = Box::yesNo("@SPS267", DialogButton::Yes);

        if (dialogButton == DialogButton::Yes)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>