<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryArchiveDateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventoryArchiveDateHelper
{
    private FormControlName fromDateControlName;
    private FormControlName toDateControlName;

    private const int DaysOfYear = 365;
    private const int MonthsInterval = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromDateControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventoryArchiveDateHelper constructFromDateControl(FormControlName _fromDateControlName, FormControlName _toDateControlName)
    {
        InventoryArchiveDateHelper periodDateHelper = new InventoryArchiveDateHelper();
        periodDateHelper.fromDateControlName = _fromDateControlName;
        periodDateHelper.toDateControlName = _toDateControlName;

        return periodDateHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClosedPeriodDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void lookupClosedPeriodDate(FormDateControl _control)
    {
        FiscalCalendar fiscalCalendar = FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current()));

        if (fiscalCalendar.RecId)
        {
            SysTableLookup sysTableLookup = SysTablelookup::newParameters(tableNum(FiscalCalendarPeriod), _control, true);
            Query query = new Query();

            // Add ranges to only show fiscal calendar periods for the specified date
            QueryBuildDataSource queryBuildFiscalCalendarPeriod = query.addDataSource(tableNum(FiscalCalendarPeriod));
            queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendar)).value(SysQuery::value(fiscalCalendar.RecId));

            TransDate transDate = _control.dateValue();
           
            if (transDate)
            {
                FiscalCalendarPeriod fiscalCalendarPeriod = FiscalCalendarPeriod::findPeriodByCalendarDate(fiscalCalendar.RecId, transDate);

                if (_control.name() == fromDateControlName)
                {
                    // Get the closing period after from date
                    queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, StartDate)).value(
                        SysQuery::range(fiscalCalendarPeriod.StartDate ? fiscalCalendarPeriod.StartDate : transDate,
                            dateMax()));
                }

                if (_control.name() == toDateControlName)
                {
                    // Get the closing period before to date
                    queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, EndDate)).value(
                        SysQuery::range(dateNull(),
                            fiscalCalendarPeriod.EndDate ? fiscalCalendarPeriod.EndDate : transDate));
                }
            }

            queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));

            // Add range to only return closing periods
            QueryBuildDataSource queryBuildLedgerFiscalCalendarPeriod = queryBuildFiscalCalendarPeriod.addDataSource(tableNum(LedgerFiscalCalendarPeriod));
            queryBuildLedgerFiscalCalendarPeriod.joinMode(JoinMode::ExistsJoin);
            queryBuildLedgerFiscalCalendarPeriod.relations(true);

            queryBuildLedgerFiscalCalendarPeriod.addRange(fieldNum(LedgerFiscalCalendarPeriod, Status)).value(SysQuery::value(FiscalPeriodStatus::Closed));
            queryBuildLedgerFiscalCalendarPeriod.addRange(fieldNum(LedgerFiscalCalendarPeriod, Status)).value(SysQuery::value(FiscalPeriodStatus::OnHold));

            queryBuildLedgerFiscalCalendarPeriod.addRange(fieldNum(LedgerFiscalCalendarPeriod, Ledger)).value(SysQuery::value(Ledger::current()));

            // Sort by StartDate
            queryBuildFiscalCalendarPeriod.addSortField(fieldNum(FiscalCalendarPeriod, StartDate));
           
            // Specify fields to show on the lookup
            if (_control.name() == fromDateControlName)
            {
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate));
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));
            }
            else
            {
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate));
            }
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Name));
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Type));

            sysTableLookup.parmQuery(query);

            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromToDateValueBasedOnLedgerFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void adjustFromToDateValueBasedOnLedgerFiscalCalendarPeriod(FormDateControl _control)
    {
        if (_control.dateValue() != dateNull())
        {
            FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(CompanyInfoHelper::fiscalCalendarRecId(), _control.dateValue(), FiscalPeriodType::Operating);
            
            if (_control.name() == fromDateControlName)
            {
                _control.dateValue(fiscalCalendarPeriod.StartDate);
            }

            if (_control.name() == toDateControlName)
            {
                _control.dateValue(fiscalCalendarPeriod.EndDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public static container validate(FromDate _fromDate, ToDate _toDate)
    {
        boolean ret = true;

        if (!_fromDate)
        {
            ret = checkFailed("@SYS91557");
        }
        else if (!_toDate)
        {
            ret = checkFailed("@SYS90868");
        }
        else if (_toDate < _fromDate)
        {
            ret = checkFailed("@SYS312567");
        }

        if (InventTransArchiveFeatureHelper::isFeatureEnabled()
          && FeatureStateProvider::IsFeatureEnabled(ArchiveServiceFeature::instance())
          && intvNo(_toDate, _fromDate, IntvScale::Month) > MonthsInterval)
        {
            if (Box::YesNo("@SCM:ArchivingPeriodOverOneMonth", DialogButton::No) == DialogButton::No)
            {
                ret = false;
            }
        }

        // Verify the ledger period on from date and to date are not open status
        RefRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        boolean isFiscalCalendarPeriodClosed;
        FiscalCalendarPeriod fiscalCalendarPeriodFromDate;
        [isFiscalCalendarPeriodClosed, fiscalCalendarPeriodFromDate] = InventoryArchiveDateHelper::findAndValidateFiscalCalendarPeriod(fiscalCalendarRecId, _fromDate, true);
        FromDate closedPeriodFromDate = fiscalCalendarPeriodFromDate.StartDate;
        ret = ret && isFiscalCalendarPeriodClosed;

        FiscalCalendarPeriod fiscalCalendarPeriodToDate;
        [isFiscalCalendarPeriodClosed, fiscalCalendarPeriodToDate] = InventoryArchiveDateHelper::findAndValidateFiscalCalendarPeriod(fiscalCalendarRecId, _toDate, false);
        ToDate closedPeriodToDate = fiscalCalendarPeriodToDate.EndDate;
        ret = ret && isFiscalCalendarPeriodClosed;

        TransDate dateOfToday = DateTimeUtil::date(DateTimeUtil::utcNow());
        if (dateOfToday - closedPeriodToDate < DaysOfYear)
        {
            if (dateOfToday - closedPeriodToDate < InventoryArchiveDateHelper::minDaysForArchivePeriod())
            {
                ret = checkFailed(strFmt("@SCM:PeriodArchivingShouldBeEarlierThanSpecifiedDaysV2", InventoryArchiveDateHelper::minDaysForArchivePeriod()));
            }
            else
            {
                if (Box::yesNo(strFmtLB("@SCM:ArchivingPeriodLessThanOneYearV2"), DialogButton::Yes) != DialogButton::Yes)
                {
                    return [false, closedPeriodFromDate, closedPeriodToDate];
                }
            }
        }

        // Verify that all the fiscal calendar period between from date and to date are all not in open status
        FiscalCalendarPeriod       fiscalCalendarPeriod;
        LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;

        select firstonly RecId from fiscalCalendarPeriod
            where fiscalCalendarPeriod.StartDate >= fiscalCalendarPeriodFromDate.EndDate
               && fiscalCalendarPeriod.EndDate   <= fiscalCalendarPeriodToDate.EndDate
               && fiscalCalendarPeriod.Type      == FiscalPeriodType::Operating
            exists join ledgerFiscalCalendarPeriod
                where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                   && ledgerFiscalCalendarPeriod.Ledger == Ledger::current()
                   && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open;

        if (fiscalCalendarPeriod.RecId)
        {
            ret = checkFailed("@SCM:AllPeriodsShouldBeClosedOrOnHoldBetweenFromAndToDate");
        }

        return [ret, closedPeriodFromDate, closedPeriodToDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotCompletedConversionExists</Name>
				<Source><![CDATA[
    internal static boolean checkNotCompletedConversionExists()
    {
        boolean ret = true;

        InventStdCostConv inventStdCostConv;

        if (inventStdCostConv.notCompletedConversionExists())
        {
            ret = checkFailed("@SCM:StdCostConversionNotCompleted");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventoryClosing</Name>
				<Source><![CDATA[
    internal static boolean checkInventoryClosing(ToDate closedPeriodToDate)
    {
        boolean ret = true;

        // Verify that the inventory closing is executed
        InventClosing inventclosing;
        select firstonly RecId from inventClosing
            where inventClosing.Active                 == NoYes::Yes                    &&
                  inventClosing.AdjustmentType         == InventAdjustmentType::Closing &&
                  inventClosing.Cancellation           == NoYes::No                     &&
                  inventClosing.InventCostStatus       == InventCostStatus::Ended       &&
                  inventClosing.TransDate              >= closedPeriodToDate;
            
        if (!inventclosing.RecId)
        {
            ret = checkFailed(strfmt("@SCM:InventoryClosingNotExecutedForClosedEndDatePeriod", closedPeriodToDate));
        }

        select firstonly RecId from inventClosing
            where inventClosing.Active           == NoYes::Yes &&
                  inventClosing.InventCostStatus != InventCostStatus::Ended;
        if (inventclosing.RecId)
        {
            ret = checkFailed("@SCM:PreventInventTransArchiveWhenExistingInventoryClosingNotFinishedV2");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndValidateFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    private static container findAndValidateFiscalCalendarPeriod(FiscalCalendarRecId _calendarRecId, TransDate _archivePeriodDate, boolean _isFromDate)
    {
        boolean ret = true;
        FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(_calendarRecId, _archivePeriodDate, FiscalPeriodType::Operating);
        FiscalPeriodStatus periodStatus = fiscalCalendarPeriod.currentLedgerPeriodStatus();
        if (periodStatus != FiscalPeriodStatus::Closed && periodStatus != FiscalPeriodStatus::OnHold)
        {
            if (_isFromDate)
            {
                ret = checkFailed("@SCM:FiscalCalendarForFromDateNotClosedOrOnHold");
            }
            else
            {
                ret = checkFailed("@SCM:FiscalCalendarForToDateNotClosedOrOnHold");
            }
        }

        return [ret, fiscalCalendarPeriod];
    }

]]></Source>
			</Method>
			<Method>
				<Name>minDaysForArchivePeriod</Name>
				<Source><![CDATA[
    protected static int minDaysForArchivePeriod()
    {
        return DaysOfYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckForInventTransArchive</Name>
				<Source><![CDATA[
    public static boolean validateCheckForInventTransArchive(FromDate _fromDate, ToDate _toDate)
    {
        boolean ret = true;

        if (InventTransArchiveService::existsNotFinishedInventTransArchiving())
        {
            ret = checkFailed("@SCM:AnotherTransArchivingNotFinishedV2");
        }

        boolean isSeparateJobFlightEnabled = InventDimLPCleanupSeparateUpdateRefTableFlight::instance().isEnabled();
        if (InventDimWithLicensePlateIdCleanupFeature::isEnabled()
         && ((InventDimLPCleanupJob::existsNotFinishedInventDimLPCleanupJob() && !isSeparateJobFlightEnabled)
          || (InventDimLPCleanupJob::existsInventTransNotUpdatedCleanupJob() && isSeparateJobFlightEnabled)))
        {
            ret = checkFailed("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }

        ret = ret && InventTransArchiveProcessHistoryTable::validate(_fromDate, _toDate);
        ret = ret && InventoryArchiveDateHelper::checkNotCompletedConversionExists();

        boolean checkInventoryClosing = InventoryArchiveDateHelper::checkInventoryClosing(_toDate);
        ret = ret && checkInventoryClosing;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckForInventJournalArchive</Name>
				<Source><![CDATA[
    public static boolean validateCheckForInventJournalArchive(FromDate _fromDate, ToDate _toDate)
    {
        return InventJournalArchiveTrans::validate(_fromDate, _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningInventJournalArchivingJob</Name>
				<Source><![CDATA[
    internal static boolean warningInventJournalArchivingJob()
    {
        if (Box::YesNo("@SCM:WarningInventJournalsArchivingJob", DialogButton::No) == DialogButton::No)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>