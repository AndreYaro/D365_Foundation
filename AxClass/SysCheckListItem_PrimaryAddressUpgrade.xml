<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysCheckListItem_PrimaryAddressUpgrade</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class SysCheckListItem_PrimaryAddressUpgrade extends SysCheckListItem implements SysCheckListInterfaceUpgrade
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCheckListGroup</Name>
				<Source><![CDATA[
    public str getCheckListGroup()
    {
        return "@SYS115500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the help topic of the checklist item.
    /// </summary>
    /// <returns>
    /// The link to the help topic that corresponds to the checklist item.
    /// </returns>
    /// <remarks>
    /// When user clicks on the Help link of the checklist, the help system will open this topic.
    /// </remarks>
    public str getHelpLink()
    {
        #define.TopicId('Dynamics://DynamicsHelp/Topic?Id=807c1b85-092a-40b5-957e-bb5a91dea058')

        return #TopicId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    public menuItemName getMenuItemName()
    {
        return menuitemdisplaystr(SysUpgradePartyPrimaryAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemType</Name>
				<Source><![CDATA[
    public MenuItemType getMenuItemType()
    {
        return MenuItemType::Display;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.addDependency(classnum(SysCheckListItem_ApplicationUpgrade));
        this.placeAfter(classnum(SysCheckListItem_SelectEPHomePage));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrimaryAddresses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all party postal addresses that do not have a primary address.
    /// </summary>
    /// <remarks>
    /// The first address is marked as the primary in each record.
    /// </remarks>
    public static void updatePrimaryAddresses()
    {
        DirPartyTable party;
        DirPartyLocation partyLocation, partyLocation2, partyLocationUpdate;

        ttsbegin;

        partyLocationUpdate.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);

        while select RecId from party
            exists join partyLocation
            where party.RecId == partyLocation.Party
                && partyLocation.IsPostalAddress == true
                && partyLocation.IsPrimary == false
            notexists join partyLocation2
            where partyLocation.RecId != partyLocation2.RecId
                && partyLocation.Party == partyLocation2.Party
                && partyLocation2.IsPostalAddress == true
                && partyLocation2.IsPrimary == true
        {
            select firstonly forupdate partyLocationUpdate
            order by RecId
            where partyLocationUpdate.Party == party.RecId
                && partyLocationUpdate.IsPostalAddress == true
                && partyLocationUpdate.IsPrimary == false;

            partyLocationUpdate.IsPrimary = true;
            partyLocationUpdate.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>