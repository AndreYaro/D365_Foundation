<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTaskProcessingThresholdLabelPrinting</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveTaskProcessingThresholdLabelPrinting</c> class is responsible for
/// determining whether the given label printing wave step exceeds the threshold for
/// running the wave in task based processing.
/// </summary>
[WHSWaveTaskProcessingThresholdAttribute(methodStr(WhsPostEngineBase, waveLabelPrinting))]
internal class WHSWaveTaskProcessingThresholdLabelPrinting implements WHSWaveTaskProcessingIThreshold
{
    private WHSPostEngine  postEngine;
    private WHSWaveId      waveId;
    private WHSWorkBuildId workBuildId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;

        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = workBuildId)
    {
        workBuildId = _workBuildId;

        return workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WHSPostEngine</c> parameter.
    /// </summary>
    /// <param name = "_postEngine">The value to set.</param>
    [Hookable(false)]
    public void initFromPostEngine(WHSPostEngine _postEngine)
    {
        postEngine = _postEngine;
        this.parmWaveId(postEngine.parmWaveTable().WaveId);
        this.parmWorkBuildId(postEngine.parmWaveTable().WorkBuildId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdExceeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is responsible for determining whether
    /// the threshold for task based processing has been exceeded.
    /// </summary>
    /// <returns>
    /// true if threshold is exceeded; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean thresholdExceeded()
    {
        WHSInstrumentationLogger instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = instrumentationLogger.waveTaskProcessingThresholdInstrumentationActivities().labelPrintingThresholdCalculation())
        {
            this.validateParameters();

            WHSWaveTaskProcessingThresholdParameters thresholdParams = WHSWaveTaskProcessingThresholdParameters::findOrCreateDefault();
            
            boolean thresholdExceeded = this.isThresholdExceeded(thresholdParams);
            
            instrumentationLogger.logInformation(strFmt("@WAX3192", instrumentationLogger.properties().ThresholdExceeded, thresholdExceeded));
            
            return thresholdExceeded;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThresholdExceeded</Name>
				<Source><![CDATA[
    private boolean isThresholdExceeded(WHSWaveTaskProcessingThresholdParameters _thresholdParams)
    {
        int thresholdValue = this.calculateLabelPrintingStepThresholdValue();

        return thresholdValue >= _thresholdParams.MinimumWorkThresholdForLabelPrinting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLabelPrintingStepThresholdValue</Name>
				<Source><![CDATA[
    private int calculateLabelPrintingStepThresholdValue()
    {
        WHSWorkTable workTable;

        select count(RecId) from workTable
            where workTable.WorkBuildId == workBuildId
               && workTable.WaveId      == waveId;

        return workTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    private void validateParameters()
    {
        if (!waveId || !workBuildId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>