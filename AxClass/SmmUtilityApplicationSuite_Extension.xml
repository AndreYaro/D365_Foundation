<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmUtilityApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SmmUtilityApplicationSuite_Extension</c> contains the ApplicationSuite extending logic for the <c>SmmUtility</c> class.
/// </summary>
[ExtensionOf(classStr(SmmUtility))]
public final class SmmUtilityApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contact for the company for the specified party.
    /// </summary>
    /// <param name="party">
    /// The party record.
    /// </param>
    /// <param name="contactId">
    /// The contact ID.
    /// </param>
    /// <returns>
    /// An <c>smmCompanyContact</c> buffer.
    /// </returns>
    public static smmCompanyContact getCompanyContact(DirPartyRecId party, ContactPersonId contactId)
    {
        #define.seperator(', ')
        ContactPerson           contactPerson;
        smmCompanyContact       displayed;
        Phone                   phone;
        LogisticsElectronicAddress electronicAddress;

        contactPerson   = ContactPerson::find(contactId);
        displayed       = DirPartyTable::findRec(party).Name;

        if (contactPerson)
        {
            displayed = displayed + #seperator + contactPerson.personName();
        }

        if (contactPerson && contactPerson.phone())
        {
            displayed = displayed + #seperator + contactPerson.phone();
        }
        else
        {
            electronicAddress = DirParty::primaryElectronicAddress(party, LogisticsElectronicAddressMethodType::Phone);

            phone = electronicAddress ? electronicAddress.Locator : '';
            if (phone)
            {
                displayed = displayed + #seperator + phone;
            }
        }

        return displayed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAccountNumVendGroupConsideredDialog</Name>
				<Source><![CDATA[
    public static str openAccountNumVendGroupConsideredDialog(smmAccountNumToCreate _toCreate, VendGroupId _vendGroupId)
    {
        Args      args = new Args();
        FormRun   formRun;
        args.parmEnumeration(_toCreate);
        args.parm(_vendGroupId);
        args.name(formStr(SmmSetNumSeqIfManual));
        formRun = classfactory.formRunClass(args);
        if (formRun)
        {
            formRun.init();
            formRun.run();
            formRun.wait();
            return formRun.newAccountNum();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentContactHcmWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current HCM worker record.
    /// </summary>
    /// <returns>
    /// The HCM worker record.
    /// </returns>
    public static HcmWorker getCurrentContactHcmWorker()
    {
        return HcmWorker::find(HcmWorkerLookup::currentWorker());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentContactWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the record in the <c>HcmEmployment</c> table.
    /// </summary>
    /// <returns>
    /// The record ID of the record in the <c>HcmEmployment</c> table if record found, otherwise 0.
    /// </returns>
    public static CrmWorkerRecId getCurrentContactWorker()
    {
        return HcmEmployment::findByWorkerLegalEntity(HcmWorkerLookup::currentWorker(),CompanyInfo::current()).Worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentSalesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current primary sales unit ID.
    /// </summary>
    /// <returns>
    /// The sales unit ID.
    /// </returns>
    public static smmSalesUnitId getCurrentSalesUnit()
    {
        return smmSalesUnitMembers::findMemberPrimaryUnit(smmUtility::getCurrentContactWorker(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocIcon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the icon for the document node.
    /// </summary>
    /// <param name="_companyId">
    /// The current company ID.
    /// </param>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    /// <param name="_recId">
    /// The reference record ID of the docuRef.
    /// </param>
    /// <returns>
    /// Icon
    /// </returns>
    public static Integer getDocIcon(SelectableDataArea _companyId, TableId _tableId, RecId _recId)
    {
        #macrolib.resource

        if ((select docuRef
               where docuRef.RefCompanyId == _companyId &&
                     docuRef.RefTableId   == _tableId &&
                     docuRef.RefRecId     == _recId).RecId)
        {
            return #RES_NODE_DOC;
        }

        return #RES_AM_NEW;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameOfVirtualCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// The name of the virtual company.
    /// </summary>
    /// <param name="_dataAreaId">
    /// The data area ID.
    /// </param>
    /// <returns>
    /// The company data area ID.
    /// </returns>
    public static DataAreaId getNameOfVirtualCompany(DataAreaId _dataAreaId)
    {
        VirtualDataAreaList virtualDataAreaList;

        // The same company is allowed to be included in two different virtual companies,
        // but when this is done, it corrupts the data. Thus in real-life a company is part of
        // only one virtual company

        return (select virtualDataAreaList where virtualDataAreaList.Id == _dataAreaId).VirtualDataArea;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidWorkerInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record ID of the worker belongs to the current Legal entity.
    /// </summary>
    /// <param name="_workerRecId">
    /// The record ID of the Worker.
    /// </param>
    /// <returns>
    /// true if belongs to current Legal Entity otherwise false.
    /// </returns>
    public static boolean isValidWorkerInCurrentCompany(HcmWorkerRecId _workerRecId)
    {
        if (!HcmEmployment::findByWorkerLegalEntity(_workerRecId, CompanyInfo::current()) && !isVirtualCompany())
        {
            return checkFailed("@SYS341311");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidEmployeeResponsibleInCurrentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the record ID of the worker belongs to the current Legal entity.
    /// </summary>
    /// <param name="_workerRecId">
    /// The record ID of the Worker.
    /// </param>
    /// <returns>
    /// true if belongs to current Legal Entity otherwise false.
    /// </returns>
    public static boolean isValidEmployeeResponsibleInCurrentCompany(HcmWorkerRecId _workerRecId)
    {
        // This method is checking the same thing as isValidWorkerInCurrentCompany, but it will return a different error message. 
		// This is use for customer form (CustTable) validation, as customer feedback, the error message need to indicate the actuanl control label on form.
        if (!HcmEmployment::findByWorkerLegalEntity(_workerRecId, CompanyInfo::current()) && !isVirtualCompany())
        {
            return checkFailed("@AccountsReceivable:InvalidEmployeeResponsible");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapIt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens Bing maps with the address.
    /// </summary>
    /// <param name="_address">
    /// The address to map.
    /// </param>
    public static void mapIt(LogisticsPostalAddress _address)
    {
        #DEFINE.comma(',')
        #DEFINE.newLine('\n')

        str     address;
        if (_address)
        {
            address = _address.Street + #comma +
                      _address.City + #comma +
                      _address.State + #comma +
                      _address.ZipCode + #comma +
                      _address.CountryRegionId;

            // Replace the newline with comma
            address = strReplace(address, #newline, #comma);
            // URL encode
            address = System.Web.HttpUtility::UrlEncode(address);
            // Add the address to the URL
            new Browser().Navigate(strFmt('http://maps.bing.com/default.aspx?where1=\%1', address));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAccountNumDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the dialogue to enter the account number.
    /// </summary>
    /// <param name="_toCreate">
    /// The enumeration value to use to specify the account number to create.
    /// </param>
    /// <returns>
    /// An empty string.
    /// </returns>
    public static str openAccountNumDialog(smmAccountNumToCreate _toCreate)
    {
        Args      args = new Args();
        FormRun   formRun;

        args.parmEnumeration(_toCreate);
        args.name(formStr(SmmSetNumSeqIfManual));

        formRun = classfactory.formRunClass(args);
        if (formRun)
        {
            formRun.init();
            formRun.run();
            formRun.wait();
            return formRun.newAccountNum();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAndRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the form and refreshes it.
    /// </summary>
    /// <param name="_menuItemStr">
    /// The menu item name string.
    /// </param>
    /// <param name="_common">
    /// The common buffer.
    /// </param>
    /// <param name="_caller">
    /// The calling object.
    /// </param>
    /// <param name="_create">
    /// A Boolean value that specifies whether to create.
    /// </param>
    /// <param name="_formDataSource">
    /// The form data source of the record.
    /// </param>
    static void openAndRefresh(str _menuItemStr, Common _common, Object _caller, boolean _create, FormDataSource _formDataSource)
    {
        RecId recId = _formDataSource.cursor().RecId;

        //
        // Open the form
        //
        smmUtility::openMenuItemForm(_menuItemStr, _common, _caller, _create);

        //
        // Execute query and focus on previously selected record
        //
        _formDataSource.executeQuery();
        _formDataSource.positionToRecordByValue(fieldNum(Common,RecId), int642str(recId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSmmDocHandling</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the documents handling form.
    /// </summary>
    /// <param name="_common">
    /// A buffer.
    /// </param>
    /// <param name="_element">
    /// The calling object.
    /// </param>
    public static void openSmmDocHandling(Common _common, Object _element)
    {
        // Open the document handling form
        smmUtility::openMenuItemForm(menuitemDisplayStr(smmDocuments),_common,_element,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSmmDocumentsForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the documents handling form.
    /// </summary>
    /// <param name="_record">
    /// A record buffer.
    /// </param>
    /// <param name="_caller">
    /// The calling object.
    /// </param>
    /// <param name="_create">
    /// A Boolean value that specifies whether to create.
    /// </param>
    static void openSmmDocumentsForm(Common _record, Object _caller, boolean _create = false)
    {
        smmUtility::openMenuItemForm(menuitemDisplayStr(smmDocuments), _record, _caller, _create);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openTMSetCallProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the form to set the TM call properties.
    /// </summary>
    /// <param name="_common">
    /// The common record, sent as arguments.
    /// </param>
    /// <param name="_tmActivityVariables">
    /// Any activity variables.
    /// </param>
    /// <returns>
    /// A form object.
    /// </returns>
    public static formRun openTMSetCallProperties(Common _common, smmTMActivityVariables _tmActivityVariables)
    {
        FormRun                 formRun;
        Args                    args = new Args();

        args.parmObject(_tmActivityVariables);
        args.record(_common);
        formRun = new MenuFunction(menuitemDisplayStr(smmTMSetCallProperties), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>peformJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// To perform jumpref on basis of table id and record id record
    /// </summary>
    /// <param name="_refTableId">
    /// Reference table id
    /// </param>
    /// <param name="_refRecId">
    /// Reference record id
    /// </param>
    /// <param name="_callerFormName">
    /// Reference form id
    /// </param>
    static void peformJumpRef(RefTableId _refTableId, RefRecId _refRecId, str _callerFormName = '')
    {
        str             menuItemName;
        MenuFunction    menuFunction;
        Args            args;
        Common          common;
        SysDictTable    dictTable;
        smmCampaignParams   campaignParamsLocal;
        args = new Args();

        // Get the menuitem name depending on table id
        switch (_refTableId)
        {
            case tableNum(smmActivities) :
                menuItemName = menuitemDisplayStr(smmActivities);
                break;

            case tableNum(smmBusRelTable) :
                menuItemName = menuitemDisplayStr(smmBusRelTable);
                break;

            case tableNum(smmTMCallListGroup) :
                menuItemName = menuitemDisplayStr(smmTMCallListGroup);
                break;

            case tableNum(smmCampaignTable) :
                menuItemName = menuitemDisplayStr(smmCampaignTable);
                // Set parmObject so that emplSelection filter is cleared and showAll is set to true in smmCampaignTable.init()
                campaignParamsLocal = new smmCampaignParams();
                args.parmObject(campaignParamsLocal);
                break;

            case tableNum(ContactPerson) :
                menuItemName = menuitemDisplayStr(contactPerson);
                break;

            case tableNum(ProjTable) :
                menuItemName = menuitemDisplayStr(ProjTable);
                break;

            case tableNum(PurchTable) :
                menuItemName = menuitemDisplayStr(PurchTable);
                break;

            case tableNum(SalesQuotationTable) :
                menuItemName = menuitemDisplayStr(SalesQuotationJumpRef);
                args.lookupValue(SalesQuotationTable::findRec(_refRecId).QuotationId);
                break;

            case tableNum(SalesTable) :
                menuItemName = menuitemDisplayStr(SalesTable);
                break;

            case tableNum(CustTable) :
                menuItemName = menuitemDisplayStr(CustTable);
                break;

            case tableNum(HcmWorker) :
                menuItemName = menuitemDisplayStr(HcmWorker);
                break;

            case tableNum(SMAServiceOrderTable) :
                menuItemName = menuitemDisplayStr(smaServiceOrderTable);
                break;

            case tableNum(smmQuotationCompetitorGroup) :
                menuItemName = menuitemDisplayStr(smmQuotationCompetitorGroup);
                break;

            case tableNum(smmQuotationReasonGroup) :
                menuItemName = menuitemDisplayStr(smmQuotationReasonGroup);
                break;

            case tableNum(smmLeadTable) :
                menuItemName = menuitemDisplayStr(smmLeadTable);
                break;

            case tableNum(smmOpportunityTable) :
                menuItemName = menuitemDisplayStr(smmOpportunityTable);
                break;

            case tableNum(smmSourceTypeTable) :
                menuItemName = menuitemDisplayStr(smmSourceType);
                break;

            case tableNum(CaseCategoryHierarchyDetail) :
                menuItemName = menuitemDisplayStr(CaseCategorySetup);
                break;

            case tableNum(CaseDetail) :
            case tableNum(CaseDependency) :
                menuItemName = menuitemDisplayStr(CaseDetail);
                break;

            case tableNum(VendTable) :
                menuItemName = menuitemDisplayStr(VendTable);
                break;

            default :
                menuItemName = '';
                break;
        }

        if (menuItemName)
        {
            dictTable = new SysDictTable(_refTableId);
            if (dictTable)
            {
                common = dictTable.makeRecord();

                // Find the link record
                select firstonly common where common.RecId == _refRecId;

                menuFunction = new MenuFunction(menuItemName, MenuItemType::Display);

                // Check access rights
                if (!menuFunction || !menuFunction.checkAccessRights())
                {
                    // Access rights are not sufficient to use this function.
                    throw error("@SYS81158");
                }

                if (_callerFormName)
                {
                    args.parm(_callerFormName);
                }

                if (_refRecId)
                {
                    args.record(common);
                }
                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveCopyOfSentEmails</Name>
				<Source><![CDATA[
    // Check if the copy of sent mail must be saved in document management
    static boolean saveCopyOfSentEmails()
    {
        if (smmLicense::outlookEMail() && OutlookUserSetup::findByWorker(smmUtility::getCurrentContactHcmWorker().RecId).eMailSaveCopy)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerPersonnelNumberQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the query to be used to compute the value of Worker field for entities.
    /// </summary>
    /// <param name="_viewName">
    ///    The name of the view that contains the field which value is used as a return value.
    /// </param>
    /// <param name="_dataSourceName">
    ///    The name of the data source on the view that contains the field which value is used as a return
    ///    value.
    /// </param>
    /// <param name="_fieldName">
    ///    The name of the field on the view.
    /// </param>
    /// <returns>A query to be used to compute the value of Worker field for entities.</returns>
    public static str workerPersonnelNumberQuery(TableName _viewName, str _dataSourceName, FieldName _fieldName)
    {
        SysDictTable dictTableWorker = new SysDictTable(tableNum(HcmWorker));

        // SELECT PersonnelNumber FROM HcmWorker WHERE HcmWorker.RecId = <some value>
        return strFmt('SELECT %2 FROM %1 WHERE %1.%3 = %4',
            dictTableWorker.name(DbBackend::Sql),
            dictTableWorker.fieldName(fieldNum(HcmWorker, PersonnelNumber), DbBackend::Sql),
            dictTableWorker.fieldName(fieldNum(HcmWorker, RecId), DbBackend::Sql),
            SysComputedColumn::returnField(_viewName, _dataSourceName, _fieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityWorkerRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>HcmWorkerRecId</c> for the specified <c>HcmPersonnelNumberId</c>.
    /// </summary>
    /// <param name = "_personnelNumber"><c>HcmPersonnelNumberId</c> of the worker to look up.</param>
    /// <returns><c>HcmWorkerRecId</c> of the worker.</returns>
    public static HcmWorkerRecId getEntityWorkerRecId(HcmPersonnelNumberId _personnelNumber)
    {
        HcmWorkerRecId workerId = 0;

        // Get the worker RecId based on the provided employee personnel number.
        if (_personnelNumber != "")
        {
            workerId = HcmWorker::findByPersonnelNumber(_personnelNumber).RecId;
            if (!workerId)
            {
                // The personnel number was not found.
                throw error("@SYS327448");
            }
        }

        return workerId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>