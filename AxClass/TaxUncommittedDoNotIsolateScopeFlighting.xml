<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxUncommittedDoNotIsolateScopeFlighting</Name>
	<SourceCode>
		<Declaration><![CDATA[
using IFeatureLifecycle = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureLifecycle;
using FeatureLifecycleStage = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.FeatureLifecycleStage;

/// <summary>
/// The <c>TaxUncommittedDoNotIsolateScopeFlighting</c> class determines whether the feature 'TaxUncommittedDoIsolateScope' is enabled.
/// Feature: Create/Update/Delete Taxuncommitted records in a UserConnection, that will make sure the tts is isolated. But there is risk for deadlock.
/// Feature is disabled when flighting is enabled; if problem occurs, enable flighting to mitigate customer issue immediately.
/// </summary>
/// <remarks>
/// This flighting is available from 10.0.19, disabled by default, and will be removed when the parameter _doIsolateTransactionScope is correct 100%.
/// This flighting will be enabled when any customer deadlock by TaxUncommitted.
/// </remarks>
[TaxFlighting(TaxFlightingGroup::IndirectTax)]
internal class TaxUncommittedDoNotIsolateScopeFlighting implements IFeatureLifecycle
{
    private static TaxUncommittedDoNotIsolateScopeFlighting instance = new TaxUncommittedDoNotIsolateScopeFlighting();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static TaxUncommittedDoNotIsolateScopeFlighting instance()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>