<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingCacheForDataManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Caching manager for RetailPricingDataManager and its descendants (not including V3 which are using lookup tables).
/// </summary>
internal static class RetailPricingCacheForDataManager
{
    private static readonly str InventDimAllBlank = InventDim::inventDimIdBlank();

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    // Key: [[DataAreaId], [DiscountLineMatchType]].
    // Value: True if should query; false if should not.
    private const str ShouldQueryPriceAdjustmentsCacheScope = "RetailPricingCache_shouldQueryPriceAdjustments";

    // Key: [[DataAreaId], [DiscountLineMatchType]].
    // Value: True if should query; false if should not.
    private const str ShouldQueryRetailDiscountsCacheScope = "RetailPricingCache_shouldQueryRetailDiscounts";

    private const str DiscountLineMatchTypeCategory = 'MatchCategory';
    private const str DiscountLineMatchTypeProduct = 'MatchProduct';
    private const str DiscountLineMatchTypeVariant = 'MatchVariant';
    private const str DiscountLineMatchTypeProductNoDim = 'MatchProductWithNoDimension';
    private const str DiscountLineMatchTypeProductWithDim = 'MatchProductWithDimension';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDiscountTypesFromCacheScope</Name>
				<Source><![CDATA[
    private static container getDiscountTypesFromCacheScope(str _cacheScope)
    {
        if (_cacheScope == ShouldQueryPriceAdjustmentsCacheScope)
        {
            return [RetailDiscountOfferTypeBase::Promotion];
        }
        else if (_cacheScope == ShouldQueryRetailDiscountsCacheScope)
        {
            return [
                RetailDiscountOfferTypeBase::DiscountOffer,
                RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit,
                RetailDiscountOfferTypeBase::Multibuy,
                RetailDiscountOfferTypeBase::MixAndMatch,
                RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer,
                RetailDiscountOfferTypeBase::Threshold];
        }

        throw new System.ArgumentException(
            strfmt('Cannot find discount types for cache scope %1 in class %2', _cacheScope, classStr(RetailPricingCacheForDataManager)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryPricingData</Name>
				<Source><![CDATA[
    private static boolean shouldQueryPricingData(str _cacheScope, str _discountLineMatchType, DataAreaId _dataAreaId)
    {
        SysGlobalObjectCache sgoc = classFactory.globalObjectCache();
        container result = sgoc.find(_cacheScope, [_dataAreaId, _discountLineMatchType]);

        RetailPricingCacheLookupInstrumentation cacheLookupEvent = new RetailPricingCacheLookupInstrumentation(
            classStr(RetailPricingCacheForDataManager), staticMethodStr(RetailPricingCacheForDataManager, shouldQueryPricingData));
        cacheLookupEvent.addExtendedData('_cacheScope', _cacheScope);
        cacheLookupEvent.addExtendedData('_discountLineMatchType', _discountLineMatchType);
        cacheLookupEvent.addExtendedData('_dataAreaId', _dataAreaId);

        if (result == conNull())
        {
            cacheLookupEvent.logCacheMissEvent();

            container discountTypes = RetailPricingCacheForDataManager::getDiscountTypesFromCacheScope(_cacheScope);

            RetailGroupMemberLine groupMemberLine;
            RetailPeriodicDiscountLine discountLine;
            RetailPeriodicDiscount discount;

            changecompany (_dataAreaId)
            {
                if (_discountLineMatchType == DiscountLineMatchTypeCategory)
                {
                    select firstonly RecId from groupMemberLine
                    exists join discountLine
                        where groupMemberLine.Variant == 0
                            && groupMemberLine.Product == 0
                            && groupMemberLine.Category != 0
                            && groupMemberLine.RecId == discountLine.RetailGroupMemberLine
                    exists join discount
                        where discount.OfferId == discountLine.OfferId
                            && discount.PeriodicDiscountType in discountTypes
                            && discount.Status == RetailDisabledEnabled::Enabled;
                }
                else if (_discountLineMatchType == DiscountLineMatchTypeProduct)
                {
                    select firstonly RecId from groupMemberLine
                    exists join discountLine
                        where groupMemberLine.Variant == 0
                            && groupMemberLine.Product != 0
                            && groupMemberLine.RecId == discountLine.RetailGroupMemberLine
                    exists join discount
                        where discount.OfferId == discountLine.OfferId
                            && discount.PeriodicDiscountType in discountTypes
                            && discount.Status == RetailDisabledEnabled::Enabled;
                }
                else if (_discountLineMatchType == DiscountLineMatchTypeVariant)
                {
                    select firstonly RecId from groupMemberLine
                    exists join discountLine
                        where groupMemberLine.Variant != 0
                            && groupMemberLine.RecId == discountLine.RetailGroupMemberLine
                    exists join discount
                        where discount.OfferId == discountLine.OfferId
                            && discount.PeriodicDiscountType in discountTypes
                            && discount.Status == RetailDisabledEnabled::Enabled;
                }
                else if (_discountLineMatchType == DiscountLineMatchTypeProductNoDim)
                {
                    select firstonly RecId from groupMemberLine
                    exists join discountLine
                        where groupMemberLine.Variant == 0
                            && groupMemberLine.Product != 0
                            && (groupMemberLine.InventDimId == '' || groupMemberLine.InventDimId == InventDimAllBlank)
                            && groupMemberLine.RecId == discountLine.RetailGroupMemberLine
                    exists join discount
                        where discount.OfferId == discountLine.OfferId
                            && discount.PeriodicDiscountType in discountTypes
                            && discount.Status == RetailDisabledEnabled::Enabled;
                }
                else if (_discountLineMatchType == DiscountLineMatchTypeProductWithDim)
                {
                    select firstonly RecId from groupMemberLine
                    exists join discountLine
                        where groupMemberLine.Variant == 0
                            && groupMemberLine.Product != 0
                            && groupMemberLine.InventDimId != ''
                            && groupMemberLine.InventDimId != InventDimAllBlank
                            && groupMemberLine.RecId == discountLine.RetailGroupMemberLine
                    exists join discount
                        where discount.OfferId == discountLine.OfferId
                            && discount.PeriodicDiscountType in discountTypes
                            && discount.Status == RetailDisabledEnabled::Enabled;
                }
                else
                {
                    throw new System.ArgumentException(
                        strfmt('Cannot find discount types for discount line type %1 in class %2', _discountLineMatchType, classstr(RetailPricingCacheForDataManager)));
                }
            }

            result = [groupMemberLine.RecId > 0];
            sgoc.insert(_cacheScope, [_dataAreaId, _discountLineMatchType], result);
        }
        else
        {
            cacheLookupEvent.parmRowCount(1);
            cacheLookupEvent.logCacheHitEvent();
        }

        return conPeek(result, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    internal static void clearCache()
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // When flatten discount feature is enabled and kill switch is not there, swallow this call.
            return ;
        }

        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        objectCache.clear(ShouldQueryPriceAdjustmentsCacheScope);
        objectCache.clear(ShouldQueryRetailDiscountsCacheScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryPriceAdjustmentsCategory</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryPriceAdjustmentsCategory(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryPriceAdjustmentsCacheScope, DiscountLineMatchTypeCategory, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryPriceAdjustmentsProduct</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryPriceAdjustmentsProduct(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryPriceAdjustmentsCacheScope, DiscountLineMatchTypeProduct, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryPriceAdjustmentsVariant</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryPriceAdjustmentsVariant(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryPriceAdjustmentsCacheScope, DiscountLineMatchTypeVariant, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryRetailDiscountsCategory</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryRetailDiscountsCategory(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryRetailDiscountsCacheScope, DiscountLineMatchTypeCategory, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryRetailDiscountsProductWithDim</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryRetailDiscountsProductWithDim(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryRetailDiscountsCacheScope, DiscountLineMatchTypeProductWithDim, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryRetailDiscountsProductNoDim</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryRetailDiscountsProductNoDim(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryRetailDiscountsCacheScope, DiscountLineMatchTypeProductNoDim, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQueryRetailDiscountsVariant</Name>
				<Source><![CDATA[
    internal static boolean shouldQueryRetailDiscountsVariant(DataAreaId _dataAreaId = curExt())
    {
        if (RetailPricingCacheManager::shouldDisableCache())
        {
            // This should not be called for flatten discount users. Given we no longer write to the cache, everything read from this will be wrong.
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return RetailPricingCacheForDataManager::shouldQueryPricingData(
            ShouldQueryRetailDiscountsCacheScope, DiscountLineMatchTypeVariant, _dataAreaId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>