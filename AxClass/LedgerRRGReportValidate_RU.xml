<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGReportValidate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGReportValidate_RU extends RunBase
{
    DataAreaId                  dataAreaId;
    LedgerRRGRepCode_RU         repCode;
    LedgerRRGReportTable_RU     reportTable;
    boolean                     showResults;
    LedgerRRGValidateSeverity   curSeverity;
    LedgerRRGValidateSeverity   stopSeverity;
    DialogField                 dlgRepCode;
    TmpLedgerRRGReportCopy_RU   msgList;
    ImageListAppl_Infolog       imageListAppl_Infolog;
    boolean                     outToInfoLog;
    LedgerRRGCellCode_RU        cellCode;
    LineNum                     lineNum;

    private const int           CurrentVersion	    = 1;
    private const int           Version1	        = 1;
    private const int           ImageWarning	    = 928;
    private const int           ImageError	        = 929;
    private const int           ImageInfo	        = 927;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addErrorMsg</Name>
				<Source><![CDATA[
    private void addErrorMsg(LedgerRRGMsgText_RU _msgText)
    {
        this.addMsg(LedgerRRGValidateSeverity::Error, _msgText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInfoMsg</Name>
				<Source><![CDATA[
    private void addInfoMsg(LedgerRRGMsgText_RU _msgText)
    {
        this.addMsg(LedgerRRGValidateSeverity::Info, _msgText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMsg</Name>
				<Source><![CDATA[
    private void addMsg(LedgerRRGValidateSeverity _severity, LedgerRRGMsgText_RU _msgText)
    {
   
        lineNum++;
        msgList.ImageRes = this.getMsgImage(_severity);
        msgList.CellCode = cellCode;
        msgList.MsgText  = _msgText;
        msgList.LineNum  = lineNum;
        msgList.insert();

        if (curSeverity < _severity)
        {
            curSeverity = _severity;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWarningMsg</Name>
				<Source><![CDATA[
    private void addWarningMsg(LedgerRRGMsgText_RU _msgText)
    {
        this.addMsg(LedgerRRGValidateSeverity::Warning, _msgText);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cellCode</Name>
				<Source><![CDATA[
    private LedgerRRGCellCode_RU cellCode(LedgerRRGCellCode_RU _cellCode = cellCode)
    {
        cellCode = _cellCode;
        return cellCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudgetModel</Name>
				<Source><![CDATA[
    private void checkBudgetModel(LedgerRRGDataType_RU _dataType, BudgetModelId _modelId)
    {
        BudgetModel budgetModel;

        if (_modelId)
        {
            select firstonly budgetModel where
                budgetModel.ModelId == _modelId;

            if (!budgetModel)
            {
                this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_BudgetModelNotExist", _modelId));
            }

            if (_dataType != LedgerRRGDataType_RU::Budget)
            {
                this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_IncorrectBudgetModel", _modelId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCell</Name>
				<Source><![CDATA[
    private void checkCell()
    {
        LedgerRRGCellTable_RU           cellTable;
        LedgerRRGESectionProperties_W   sectionProperties;

        changecompany(dataAreaId)
        {
            reportTable = LedgerRRGReportTable_RU::findByRepCode(repCode);

            select cellTable where
                cellTable.ReportRecId       == reportTable.RecId    &&
                cellTable.CellCode          == cellCode;

            sectionProperties = cellTable.property();
        }

        this.checkLedgerPeriodCode(cellTable.LedgerPeriodCode);
        this.checkBudgetModel(cellTable.DataType, cellTable.ModelNum);
        this.checkDefaultDimensionInterval(cellTable);
        this.checkTaxRegister(cellTable.rTax25RegisterId, cellTable.rTax25FieldId);
        this.checkOperations(cellTable);

        if (cellTable.PropertyRefRecId)
        {
            this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_CellLinkedToTemplate", cellTable.CellCode, sectionProperties.PropertyId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCells</Name>
				<Source><![CDATA[
    private void checkCells()
    {
        LedgerRRGCellTable_RU   cellTable;
        LedgerRRGESectionProperties_W   sectionProperties;

        changecompany(dataAreaId)
        {
            select cellTable where
                cellTable.ReportRecId == reportTable.RecId;
        }

        while (cellTable)
        {
            if (outToInfoLog)
            {
                setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", cellTable.CellCode));
            }


            this.cellCode(cellTable.CellCode);

            this.checkLedgerPeriodCode(cellTable.LedgerPeriodCode);
            this.checkBudgetModel(cellTable.DataType, cellTable.ModelNum);
            this.checkDefaultDimensionInterval(cellTable);
            this.checkTaxRegister(cellTable.rTax25RegisterId, cellTable.rTax25FieldId);
            this.checkOperations(cellTable);

            if (cellTable.PropertyRefRecId)
            {
                changecompany(dataAreaId)
                {
                    sectionProperties = cellTable.property();
                }

                this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_CellLinkedToTemplate", cellTable.CellCode, sectionProperties.PropertyId));
            }

            next cellTable;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataAreaId</Name>
				<Source><![CDATA[
    private boolean checkDataAreaId()
    {
        DataArea    dataArea;

        select dataArea where dataArea.Id == dataAreaId;
        if (!dataArea)
        {
            this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_CompanyDoesNotExist", dataAreaId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefaultDimensionInterval</Name>
				<Source><![CDATA[
    private void checkDefaultDimensionInterval(Common _record)
    {
        LedgerRRGDimensionInterval_RU dimensionInterval;

        void checkDefaultDimension(RecId _dimAttrId, str _value)
        {
            DimensionAttribute dimAttr = DimensionAttribute::find(_dimAttrId);

            if (!DimensionAttributeValue::findByDimensionAttributeAndValue(dimAttr, _value))
            {
                this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_DimensionAttributeNotExist", dimAttr.Name, _value));
            }
        }

        changecompany(dataAreaId)
        {
            while select dimensionInterval where
                dimensionInterval.DimRecID      == _record.RecId &&
                dimensionInterval.DimTableID    == _record.TableId
            {
                checkDefaultDimension(dimensionInterval.DimensionAttribute, dimensionInterval.DimensionFromValue);
                checkDefaultDimension(dimensionInterval.DimensionAttribute, dimensionInterval.DimensionToValue);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixedRequisite</Name>
				<Source><![CDATA[
    private void checkFixedRequisite(LedgerRRGEPropertyRecId_W _propertyRecId)
    {
        if (_propertyRecId)
        {
            if (!LedgerRRGEProperties_W::find(_propertyRecId))
            {
                this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_RequisiteNotExist", _propertyRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerPeriodCode</Name>
				<Source><![CDATA[
    private void checkLedgerPeriodCode(DateCode _ledgerPeriodCode)
    {
        if (_ledgerPeriodCode && !LedgerPeriodCode::exist(_ledgerPeriodCode))
        {
            this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_PeriodNotExist", _ledgerPeriodCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMainAccount</Name>
				<Source><![CDATA[
    private void checkMainAccount(RecId _mainAccount)
    {
        if (_mainAccount && !MainAccount::exist(_mainAccount))
        {
            // Does mainAccount have a mask?
            changecompany(dataAreaId)
            {
                if (MainAccount::find(_mainAccount))
                {
                    this.addErrorMsg(strFmt("@SYS138912", MainAccount::find(_mainAccount).MainAccountId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMainAccountInterval</Name>
				<Source><![CDATA[
    private void checkMainAccountInterval(LedgerRRGOperationTable_RU _operationTable)
    {
        LedgerRRGAccountInterval_RU accountInterval;

        if (_operationTable.AccountIntervalType == LedgerRRGIntervalType_RU::Account)
        {
            this.checkMainAccountNum(_operationTable.AccountNumMask);
        }
        else
        {
            if (_operationTable.AccountNumMask)
            {
                this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_AccountIntervalType", _operationTable.AccountIntervalType));
            }
        }

        if (_operationTable.AccountIntervalType == LedgerRRGIntervalType_RU::Interval)
        {
            changecompany(dataAreaId)
            {
                select accountInterval where accountInterval.OperationRecID == _operationTable.RecId;
            }

            if (!accountInterval)
            {
                this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_AccountIntervalTypeNot", _operationTable.AccountIntervalType));
            }

            while (accountInterval)
            {
                this.checkMainAccount(DimensionAttributeValueCombination::find(accountInterval.FromLedgerDimensionAccountId).MainAccount);
                this.checkMainAccount(DimensionAttributeValueCombination::find(accountInterval.ToLedgerDimensionAccountId).MainAccount);
                next accountInterval;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMainAccountNum</Name>
				<Source><![CDATA[
    private void checkMainAccountNum(MainAccountNum _mainAccountNum)
    {
        if (_mainAccountNum && !MainAccount::findByMainAccountId(_mainAccountNum))
        {
            // Does mainAccount have a mask?
            changecompany(dataAreaId)
            {
                if (MainAccount::findByMainAccountId(_mainAccountNum))
                {
                    this.addErrorMsg(strFmt("@SYS138912", _mainAccountNum));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOffsetMainAccountInterval</Name>
				<Source><![CDATA[
    private void checkOffsetMainAccountInterval(LedgerRRGOperationTable_RU _operationTable)
    {
        LedgerRRGOffsetAccountInterval_RU accountInterval;

        if (_operationTable.OffsetAccountIntervalType == LedgerRRGIntervalType_RU::Account)
        {
            this.checkMainAccountNum(_operationTable.OffsetAccountNumMask);
        }
        else
        {
            if (_operationTable.OffsetAccountNumMask)
            {
                this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_OffsetMainDefined", _operationTable.OffsetAccountIntervalType));
            }
        }


        if (_operationTable.OffsetAccountIntervalType == LedgerRRGIntervalType_RU::Interval)
        {
            changecompany(dataAreaId)
            {
                select accountInterval where
                    accountInterval.OperationRecID   == _operationTable.RecId;
            }

            if (!accountInterval)
            {
                this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_OffsetMainNotDefined", _operationTable.AccountIntervalType));
            }

            while (accountInterval)
            {
                this.checkMainAccount(DimensionAttributeValueCombination::find(accountInterval.FromLedgerDimension).MainAccount);
                this.checkMainAccount(DimensionAttributeValueCombination::find(accountInterval.ToLedgerDimension).MainAccount);
                next accountInterval;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOperations</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkOperations(LedgerRRGCellTable_RU _cellTable)
    {
        LedgerRRGOperationTable_RU  operationTable;

        changecompany(dataAreaId)
        {
            select operationTable where
                operationTable.CellRecId   == _cellTable.RecId &&
                operationTable.CellTableId == _cellTable.TableId;
        }

        while (operationTable)
        {
            this.checkBudgetModel(operationTable.DataType, operationTable.ModelNum);
            this.checkLedgerPeriodCode(operationTable.LedgerPeriodCode);
            this.checkDefaultDimensionInterval(operationTable);
            this.checkTaxRegister(operationTable.rTax25RegisterId, operationTable.rTax25FieldId);
            this.checkMainAccountInterval(operationTable);
            this.checkOffsetMainAccountInterval(operationTable);
            this.checkFixedRequisite(operationTable.LedgerRRGEProperties_W);

            next operationTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRepCode</Name>
				<Source><![CDATA[
    private boolean checkRepCode()
    {
        if (!this.reportTable())
        {
            this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_ReportNotExist", repCode, dataAreaId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void checkReport()
    {
        if (!this.checkDataAreaId() || !this.checkRepCode())
        {
            return;
        }

        if (reportTable.Scale <= 0)
        {
            this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_FacorParameter", reportTable.Scale));
        }

        if (reportTable.PointSignNum <= 0)
        {
            this.addWarningMsg(strFmt("@LedgerRRG:LedgerRRG_FractionalPart", reportTable.PointSignNum));
        }

        this.checkLedgerPeriodCode(reportTable.LedgerPeriodCode);
        this.checkBudgetModel(reportTable.DataType, reportTable.ModelNum);
        this.checkDefaultDimensionInterval(reportTable);
        this.checkTemplate(reportTable.LedgerRRGETemplates_W);

        this.checkCells();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxRegister</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkTaxRegister(RTax25RegisterId _registerId, RTax25FieldId _fieldId)
    {
        container        fieldLabels;
   
        if (_registerId)
        {
            if (!RTax25RegisterTable::existRegisterId(_registerId))
            {
                this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_RegisterNotExist", _registerId));
            }
            else
            {
                fieldLabels = RTax25RegType::construct(RTax25RegisterTable::registerId2Type(_registerId)).fieldLabel();

                if (_fieldId > conLen(fieldLabels))
                {
                    this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_InvalidField", _fieldId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTemplate</Name>
				<Source><![CDATA[
    private void checkTemplate(LedgerRRGETemplateRecId_W _templateRecId)
    {
        if (_templateRecId)
        {
            if (!LedgerRRGETemplates_W::exist(_templateRecId))
            {
                this.addErrorMsg(strFmt("@LedgerRRG:LedgerRRG_TemplateNotExist", _templateRecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>curSeverity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGValidateSeverity curSeverity()
    {
        return curSeverity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog = super();
   
        dlgRepCode = dialog.addFieldValue(extendedTypeStr(LedgerRRGRepCode_RU), repCode);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCellsCount</Name>
				<Source><![CDATA[
    private int64 getCellsCount()
    {
        LedgerRRGCellTable_RU cellTable;

        reportTable = this.reportTable();

        changecompany(reportTable.company())
        {
            select count(RecId) from cellTable where
                cellTable.ReportRecId == reportTable.RecId;
        }

        return cellTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        repCode         = dlgRepCode.value();
        outToInfoLog    = true;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMsgImage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ImageRes getMsgImage(LedgerRRGValidateSeverity _severity)
    {
        ImageRes                imageRes;

        switch (_severity)
        {
            case LedgerRRGValidateSeverity::Error:
                imageRes = imageListAppl_Infolog.image(ImageError);
                break;

            case LedgerRRGValidateSeverity::Warning:
                imageRes = imageListAppl_Infolog.image(ImageWarning);
                break;

            default:
                imageRes = imageListAppl_Infolog.image(ImageInfo);
                break;
        }

        return imageRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>msgList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpLedgerRRGReportCopy_RU msgList()
    {
        return msgList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        imageListAppl_Infolog   = new ImageListAppl_Infolog();
        stopSeverity            = LedgerRRGValidateSeverity::Info;
        dataAreaId              = curext();
        showResults             = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, repCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCellCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGCellCode_RU parmCellCode(LedgerRRGCellCode_RU _cellCode = cellCode)
    {
        cellCode = _cellCode;

        return cellCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataAreaId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DataAreaId parmDataAreaId(DataAreaId _dataAreaId = dataAreaId)
    {
        dataAreaId = _dataAreaId;

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRepCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGRepCode_RU parmRepCode(LedgerRRGRepCode_RU _repCode = repCode)
    {
        repCode = _repCode;

        return repCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowResults</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmShowResults(boolean _showResults = showResults)
    {
        showResults = _showResults;

        return showResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStopSeverity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGValidateSeverity parmStopSeverity(LedgerRRGValidateSeverity _stopSeverity = stopSeverity)
    {
        stopSeverity = _stopSeverity;

        return stopSeverity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportTable</Name>
				<Source><![CDATA[
    private LedgerRRGReportTable_RU reportTable(boolean _forUpdate = false)
    {
        boolean                 doFind;

        if (!reportTable                           ||
             reportTable.company()  != dataAreaId  ||
             reportTable.RepCode    != repCode)
        {
            doFind = true;
        }

        if (!doFind && _forUpdate && !reportTable.selectForUpdate())
        {
            doFind = true;
        }

        if (doFind)
        {
            changecompany(dataAreaId)
            {
                reportTable = LedgerRRGReportTable_RU::findByRepCode(repCode, _forUpdate);
            }
        }

        return reportTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setPrefix(strFmt("@LedgerRRG:LedgerRRG_CheckingReport", repCode));

        if (cellCode)
        {
            this.checkCell();
        }
        else
        {
            this.checkReport();
        }

        if (showResults && this.showErrorList())
        {
            curSeverity = LedgerRRGValidateSeverity::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showErrorList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean showErrorList()
    {
        Args                        args;
        FormRun                     formRun;
        TmpLedgerRRGReportCopy_RU   tmpMsgList;
        boolean                     res = true;

        if(!this.validateResult())
        {
            if (outToInfoLog)
            {
                tmpMsgList.setTmpData(msgList);

                while select tmpMsgList order by CellCode
                {
                    if (tmpMsgList.CellCode)
                    {
                        setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", tmpMsgList.CellCode));
                    }
                    else
                    {
                        setPrefix("@SYS24567");
                    }

                    switch (tmpMsgList.ImageRes)
                    {
                        case imageListAppl_Infolog.image(ImageError):
                            error(tmpMsgList.MsgText);
                            break;

                        case imageListAppl_Infolog.image(ImageWarning):
                            warning(tmpMsgList.MsgText);
                            break;

                        default:
                            info(tmpMsgList.MsgText);
                            break;
                    }

                    res = false;
                }

            }
            else
            {
                args = new Args();
                args.name(formStr(LedgerRRGReportValidate_RU));
                args.caller(this);


                formRun = classfactory.formRunClass(args);

                formRun.init();
                formRun.run();
                formRun.wait();
                res = formRun.closedOk();
            }
        }
        else
        {
            if (outToInfoLog)
            {
                info(strFmt("@LedgerRRG:LedgerRRG_ReportChecked", repCode));
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
   
        switch (version)
        {
            case CurrentVersion:
                [version, repCode] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (!repCode)
        {
            ret = checkFailed("@LedgerRRG:LedgerRRG_SelectReport");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateResult</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateResult()
    {
        return curSeverity < stopSeverity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGReportValidate_RU construct()
    {
        return new LedgerRRGReportValidate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@LedgerRRG:LedgerRRG_FRV";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerRRGReportValidate_RU validateReport;
   
        validateReport = LedgerRRGReportValidate_RU::construct();

        if (validateReport.prompt())
        {
            validateReport.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCell</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server boolean validateCell(LedgerRRGCellCode_RU       _cellCode,
                                              LedgerRRGRepCode_RU        _repCode,
                                              DataAreaId                 _dataAreaId     = curext(),
                                              LedgerRRGValidateSeverity  _stopSeverity   = LedgerRRGValidateSeverity::Info,
                                              boolean                    _showResults    = true)
    {
        LedgerRRGReportValidate_RU validateReport;
   
        validateReport = LedgerRRGReportValidate_RU::construct();
        validateReport.parmCellCode(_cellCode);
        validateReport.parmRepCode(_repCode);
        validateReport.parmDataAreaId(_dataAreaId);
        validateReport.parmShowResults(_showResults);
        validateReport.runOperation();

        return validateReport.validateResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static server boolean validateReport(LedgerRRGRepCode_RU        _repCode,
                                                DataAreaId                 _dataAreaId     = curext(),
                                                LedgerRRGValidateSeverity  _stopSeverity   = LedgerRRGValidateSeverity::Info,
                                                boolean                    _showResults    = true)
    {
        LedgerRRGReportValidate_RU validateReport;
   
        validateReport = LedgerRRGReportValidate_RU::construct();
        validateReport.parmRepCode(_repCode);
        validateReport.parmDataAreaId(_dataAreaId);
        validateReport.parmShowResults(_showResults);
        validateReport.runOperation();

        return validateReport.validateResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>