<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransRef_Purch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransRef_Purch extends InventTransReference
{
    VendInvoiceJour     vendInvoiceJour;
    VendInvoiceTrans    vendInvoiceTrans;

    PurchLine           purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
        public CurrencyCode currencyCode()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceTrans.CurrencyCode;
        }

        return purchLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendAC</Name>
				<Source><![CDATA[
        public CustVendAC custVendAC()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceJour.OrderAccount;
        }

        return purchLine.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discAmount</Name>
				<Source><![CDATA[
        public Amount discAmount()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceTrans.DiscAmount;
        }

        return purchLine.discAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
        public Percent discPercent()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceTrans.DiscPercent;
        }

        return purchLine.discPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventVendCust</Name>
				<Source><![CDATA[
        public InventVendCust inventVendCust()
    {
        return InventVendCust::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
        public Amount lineAmount()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceTrans.LineAmount * factor;
        }

        return purchLine.lineAmountExclTax() * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
        public Price pcsPrice()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            if (!vendInvoiceTrans.RecId)
            {
                return 0;
            }

            return (vendInvoiceTrans.Qty * vendInvoiceTrans.PurchPrice /
                   (vendInvoiceTrans.PriceUnit ? vendInvoiceTrans.PriceUnit : 1) +
                    vendInvoiceTrans.PurchMarkup) /
                   (vendInvoiceTrans.Qty ? vendInvoiceTrans.Qty : 1);
        }
        else
        {
            if (!purchLine.RecId)
            {
                return 0;
            }

            return (purchLine.PurchQty * purchLine.PurchPrice /
                   (purchLine.PriceUnit ? purchLine.PriceUnit : 1) +
                    purchLine.PurchMarkup) /
                   (purchLine.PurchQty ? purchLine.PurchQty : 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
        public Qty qtyUnit()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceTrans.Qty * factor;
        }

        return purchLine.PurchQty * factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTrans</Name>
				<Source><![CDATA[
        protected void setRefTrans()
    {
        super();

        vendInvoiceTrans.clear();
        vendInvoiceJour.clear();

        if (inventTrans.isUpdatedFinancial())
        {
            select firstonly vendInvoiceTrans
                where vendInvoiceTrans.InventTransId    == inventTransOrigin.InventTransId
                   && vendInvoiceTrans.InvoiceDate      == inventTrans.DateFinancial
                   && vendInvoiceTrans.InvoiceId        == inventTrans.InvoiceId
                outer join vendInvoiceJour
                    where vendInvoiceJour.InvoiceId           == vendInvoiceTrans.InvoiceId
                       && vendInvoiceJour.InvoiceDate         == vendInvoiceTrans.InvoiceDate
                       && vendInvoiceJour.PurchId             == vendInvoiceTrans.PurchID
                       && vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.NumberSequenceGroup
                       && vendInvoiceJour.InternalInvoiceId   == vendInvoiceTrans.InternalInvoiceId;
        }
        else
        {
            purchLine = InventTransOriginPurchLine::purchLine(inventTransOrigin.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitId</Name>
				<Source><![CDATA[
        public UnitOfMeasureSymbol unitId()
    {
        if (inventTrans.isUpdatedFinancial())
        {
            return vendInvoiceTrans.PurchUnit;
        }

        return purchLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransRef_Purch construct()
    {
        return new InventTransRef_Purch();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>