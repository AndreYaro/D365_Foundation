<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchOrderExpenditureReviewersValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class PurchOrderExpenditureReviewersValidator
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWorkflowVersionParticipantProviderSetup</Name>
				<Source><![CDATA[
    internal static boolean checkWorkflowVersionParticipantProviderSetup(WorkflowVersionTable _workflowVersionTable, WorkflowParticipantProviderName _participantProviderName, WorkflowParticipantExpenDocumentType _workflowParticipantExpenDocumentType)
    {
        boolean ret = true;
        WorkflowAssignmentTable workflowAssignmentTable;
        WorkflowVersionNotificationTable workflowVersionNotificationTable;
        WorkflowStepTable workflowStepTable;
        WorkflowElementTable workflowElementTable;
        WorkflowElementNotificationTable workflowElementNotificationTable;

        while select ParticipantTokenName from workflowAssignmentTable
            group by ParticipantTokenName
            where workflowAssignmentTable.ParticipantProviderName == _participantProviderName
                 && workflowAssignmentTable.ParticipantTokenName
        exists join workflowVersionNotificationTable
            where workflowVersionNotificationTable.RecId == workflowAssignmentTable.WorkflowVersionNotificationTable
            && workflowVersionNotificationTable.WorkflowVersionTable == _workflowVersionTable.RecId
        {
            ret = PurchOrderExpenditureReviewersValidator::checkParticipantProviderTokenSetup(workflowAssignmentTable, _workflowParticipantExpenDocumentType) && ret;
        }

        if (ret)
        {
            while select ParticipantTokenName from workflowAssignmentTable
                group by ParticipantTokenName
                where workflowAssignmentTable.ParticipantProviderName == _participantProviderName
                    && workflowAssignmentTable.ParticipantTokenName
            exists join workflowStepTable
                where workflowStepTable.RecId == workflowAssignmentTable.WorkflowStepTable
            exists join workflowElementTable
                where  workflowElementTable.ElementId == workflowStepTable.ElementId
                && workflowElementTable.ConfigurationId == _workflowVersionTable.ConfigurationId
            {
                ret = PurchOrderExpenditureReviewersValidator::checkParticipantProviderTokenSetup(workflowAssignmentTable, _workflowParticipantExpenDocumentType) && ret;
            }
        }

        if (ret)
        {
            while select ParticipantTokenName from workflowAssignmentTable
                group by ParticipantTokenName
                where workflowAssignmentTable.ParticipantProviderName == _participantProviderName
                    && workflowAssignmentTable.ParticipantTokenName
            exists join workflowElementNotificationTable
                where workflowElementNotificationTable.RecId == workflowAssignmentTable.WorkflowElementNotificationTable
            exists join workflowElementTable
                where  workflowElementTable.RecId == workflowElementNotificationTable.WorkflowElementTable
                && workflowElementTable.ConfigurationId == _workflowVersionTable.ConfigurationId
            {
                ret = PurchOrderExpenditureReviewersValidator::checkParticipantProviderTokenSetup(workflowAssignmentTable, _workflowParticipantExpenDocumentType) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParticipantProviderTokenSetup</Name>
				<Source><![CDATA[
    private static boolean checkParticipantProviderTokenSetup(WorkflowAssignmentTable _workflowAssignmentTable , WorkflowParticipantExpenDocumentType _workflowParticipantExpenDocumentType)
    {
        boolean ret = true;
        WorkflowParticipantExpenToken  workflowParticipantExpenToken = WorkflowParticipantExpenToken::findName(_workflowParticipantExpenDocumentType, _workflowAssignmentTable.ParticipantTokenName);
        WorkflowParticipantExpenTokenLine workflowParticipantExpenTokenLine = WorkflowParticipantExpenTokenLine::findTokenLine(workflowParticipantExpenToken.RecId, CompanyInfo::find().RecId);

        if (!workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet)
        {
            ret = checkFailed(strFmt("@SCM:ProjectDistributionShouldBeFilledIn", _workflowAssignmentTable.ParticipantTokenName));
        }
        else
        {
            if (!PurchOrderExpenditureReviewersValidator::validateDimensionOwnerIsSet(workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet))
            {
                ret = checkFailed(strFmt("@SCM:OwnerIsNotSetForFinancialDimensions", _workflowAssignmentTable.ParticipantTokenName));
            }
        }
              
        if (!workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet)
        {
            ret = checkFailed(strFmt("@SCM:OrganizationDistributionShouldBeFilledIn", _workflowAssignmentTable.ParticipantTokenName));
        }
        else
        {
            if (!PurchOrderExpenditureReviewersValidator::validateDimensionOwnerIsSet(workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet) && ret)
            {
                ret = checkFailed(strFmt("@SCM:OwnerIsNotSetForFinancialDimensions", _workflowAssignmentTable.ParticipantTokenName));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionOwnerIsSet</Name>
				<Source><![CDATA[
    private static boolean validateDimensionOwnerIsSet(RecId _dimensionAttributeSetRecId)
    {
        boolean ret = false;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttributeSetItem dimensionAttributeSetItem;
        DimensionAttributeValueGroup dimensionAttributeValueGroup;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        DimensionAttributeLevelValue dimensionAttributeLevelValue;

        select firstonly RecId from dimensionAttributeValue
            where dimensionAttributeValue.Owner != 0
        exists join dimensionAttributeSetItem 
            where dimensionAttributeSetItem.DimensionAttribute    == dimensionAttributeValue.DimensionAttribute
                && dimensionAttributeSetItem.DimensionAttributeSet == _dimensionAttributeSetRecId
                && dimensionAttributeSetItem.EnumerationValue      == NoYes::Yes
        exists join dimensionAttributeLevelValue 
            where dimensionAttributeLevelValue.DimensionAttributeValue == dimensionAttributeValue.RecId
        exists join dimensionAttributeValueGroup 
            where dimensionAttributeValueGroup.RecId  == dimensionAttributeLevelValue.DimensionAttributeValueGroup
        exists join dimensionAttributeValueGroupCombination 
            where dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup == dimensionAttributeValueGroup.RecId
        exists join dimensionAttributeValueCombination 
            where dimensionAttributeValueCombination.RecId == dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination;

        if (dimensionAttributeValue.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>