<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemInventUpd_Physical</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemInventUpd_Physical extends  ProjPost
{
    InventUpd_Physical  physical;
    LedgerVoucher       physicalLedgerVoucher;
    ProdJournalBOM      prodJournalBOM;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkReverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean checkReverseCommittedCost()
    {
        ProjTransInventUpd_Physical   projTransInventUpd_Physical;
        if (!projTrans)
        {
            return false;
        }

        if (SysDictClass::isEqualOrSuperclass(classIdGet(projTrans),classNum(ProjTransInventUpd_Physical)))
        {
            projTransInventUpd_Physical=projTrans;
        }

        if ( this.parmCommittedCostReverse()
            && projTrans.mustHandleCommittedCost()
            && CostControlTransCommittedCost::findOpenedByInventTransID(projTransInventUpd_Physical.inventTransId()))
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(boolean _throwerror = false)
    {
        boolean ok  = true;
        ;

        ok  = super();

        if (ok)
        {
            if (ProjCategory::find(projTrans.categoryId()).CategoryType    != ProjCategoryType::Item)
            {
                ok = checkFailed(strFmt("@SYS54897",projTrans.categoryId()));
            }

            if (!projTrans.salesUnit())
            {
                ok = checkFailed("@SYS73707");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>committedCostReverse</Name>
				<Source><![CDATA[
    public void committedCostReverse()
    {
        CostControlPostingItem      costControlPostingItem;
        InventMovement              movement;

        movement=InventMovement::construct(projTrans.buffer());
        costControlPostingItem = CostControlPosting::newCostControlPostingItem(movement);
        costControlPostingItem.parmLedgerVoucher(this.parmLedgerVoucher());

        costControlPostingItem.parmLedgerDimensionDefaultAccount(projTrans.costAccountLedgerDimension(projTrans.fundingSource()));

        costControlPostingItem.run(ProjCommittedCostUpdateAction::Post);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return projTrans.offsetAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return projTrans.statusAccountItemLedgerDimension(_fundingSourceId);

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        projTrans = ProjTrans::newInventUpd_Physical(physical, physicalLedgerVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalBOM</Name>
				<Source><![CDATA[
    protected void initProdJournalBOM()
    {
        projTrans   = ProjTrans::newProjItemProdJournalBOM(prodJournalBOM);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventUpd_Physical</Name>
				<Source><![CDATA[
    public InventUpd_Physical parmInventUpd_Physical(InventUpd_Physical _physical = physical)
    {
        physical = _physical;

        return physical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhysicalLedgerVoucher</Name>
				<Source><![CDATA[
    public LedgerVoucher parmPhysicalLedgerVoucher(LedgerVoucher _physicalLedgerVoucher = physicalLedgerVoucher)
    {
        physicalLedgerVoucher = _physicalLedgerVoucher;

        return physicalLedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdJournalBOM</Name>
				<Source><![CDATA[
    public ProdJournalBOM parmProdJournalBOM(ProdJournalBOM _prodJournalBOM = prodJournalBOM)
    {
        prodJournalBOM = _prodJournalBOM;

        return prodJournalBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type that is associated with the posting project costs based on the
    /// current project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                return LedgerPostingType::ProjStatusAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    /// <remarks>
    /// This method must be implemented in the class that extends from it.
    /// </remarks>
    public LedgerPostingType postingTypeOffsetCost()
    {
        switch (this.parmLedgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                return LedgerPostingType::ProjOffsetAccountItem;

            default:
                throw error(strFmt("@SYS50933","@SYS50276"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjItemTrans       projItemTrans;
        ProjItemTransSale   projItemTransSale;
        MapEnumerator       enumerateMap;
        ProjFundingSource   projFundingSource;

        projItemTrans.clear();

        projItemTrans  = ProjItemTrans::initTransFromInventUpd_Physical(physical, physicalLedgerVoucher);
        projItemTrans.VoucherPackingSlip    = physicalLedgerVoucher.lastVoucher();

        if (! projItemTrans.validateWrite())
        {
            throw error("@SYS21628");
        }

        projItemTrans.ProjAdjustRefId = this.parmAdjustRefId();
        projItemTrans.InventTransId   = this.parmInventTransId();
        projTrans.parmProjAdjustRefId(this.parmAdjustRefId());

        projItemTrans.insert();

        if (projTrans.qty() != 0)
        {
            this.createCostSalesDistributions(projTrans.transCost(), projTrans.transTurnover());
            if (allocationError == NoYes::No)
            {
                enumerateMap = new MapEnumerator(saleDistributions);
                while (enumerateMap.moveNext())
                {
                    projItemTransSale.clear();
                    projItemTransSale.FundingSource     = enumerateMap.currentKey();
                    projItemTransSale.LineAmount        = enumerateMap.currentValue();
                    projItemTransSale.SalesPrice        = CurrencyExchangeHelper::price(projItemTransSale.LineAmount / projTrans.qty(), this.currencyIdSales());
                    projItemTransSale.ProjTransId       = projItemTrans.ProjTransId;

                    projFundingSource = ProjFundingSource::find(projItemTransSale.FundingSource);
                    projItemTransSale.DefaultDimension  = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projItemTrans.DefaultDimension, projFundingSource.DefaultDimension);

                    projItemTransSale.LedgerTransdate   = physicalLedgerVoucher.lastTransDate();

                    if (this.checkEnterSalesAccrued() && ProjFundingSource::isExternalFunding(projItemTransSale.FundingSource))
                    {
                        projItemTransSale.LedgerSalesPosted = true;
                        if (projTrans.transTurnoverMST() != 0.0)
                        {
                            projItemTransSale.LedgerSalesAmount = CurrencyExchangeHelper::mstAmount(CurrencyExchangeHelper::amount(projTrans.qty() * projItemTransSale.SalesPrice, this.currencyIdSales()), this.currencyIdSales(), projTrans.transDate(), Currency::noYes2UnknownNoYes(projTrans.triangulationSales()), this.exchRateSales(), this.exchRateSecondarySales());
                        }
                    }
                    projItemTransSale.TransStatus = ProjTransStatus::Posted;
                    projItemTransSale.insert();
                }
            }
            ProjPost::postItemReverseTransaction(this);
        }

        if (physical.movement() && physical.movement().buffer())
        {
            Docu::copy( physical.movement().buffer(), projItemTrans);
        }

        this.parmTransIdCost(projItemTrans.ProjTransId);
        this.parmTransIdSales(projItemTrans.ProjTransId);

        if (ProjPost::checkCreateProjCost(projItemTrans.ItemId,projItemTrans.ProjId))
        {
            this.updateProjItemTransCost(projItemTrans, physicalLedgerVoucher.lastVoucher());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPostItemInventUpd_Physical</Name>
				<Source><![CDATA[
    public static ProjPostItemInventUpd_Physical newProjPostItemInventUpd_Physical(InventUpd_Physical _physical, LedgerVoucher _physicalLedgerVoucher)
    {
        ProjPostItemInventUpd_Physical projPost;

        projPost = new ProjPostItemInventUpd_Physical(_physical.movement().buffer());
        projPost.parmInventUpd_Physical(_physical);
        projPost.parmPhysicalLedgerVoucher(_physicalLedgerVoucher);
        projPost.init();

        return projPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPostItemProdJournalBOM</Name>
				<Source><![CDATA[
    public static ProjPostItemInventUpd_Physical newProjPostItemProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        ProjPostItemInventUpd_Physical projPost;

        projPost = new ProjPostItemInventUpd_Physical(_prodJournalBOM);
        projPost.parmProdJournalBOM(_prodJournalBOM);
        projPost.initProdJournalBOM();

        return projPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjItemTrans::splitNeverLedger(this.parmInventTransId(), this.parmAdjustRefId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
