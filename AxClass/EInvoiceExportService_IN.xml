<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceExportService_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceExportService_IN</c> is service class to export E-Invoices.
/// </summary>
public class EInvoiceExportService_IN extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports E-Invoices.
    /// </summary>
    /// <param name = "_contract">The data contract instance of the <c>EInvoiceExportDataContract_IN</c> class.</param>
    public void processOperation(EInvoiceExportDataContract_IN _contract)
    {
        QueryRun queryRun = new QueryRun(_contract.parmQuery());
        str result;
        UserConnection uc = new UserConnection();
        CreatedTransactionId createdTransactionId;
        EInvoiceExportTmp_IN eInvoiceExportTmp;
        EInvoice_IN eInvoice;

        try
        {
            while (queryRun.next())
            {
                eInvoice = queryRun.get(tableNum(EInvoice_IN));
                createdTransactionId = OnlineInvoicingHelper_IN::createReportData(uc, eInvoice.RefTableId, eInvoice.RefRecId);

                GSTInvoiceHeaderFooterTmp_IN reportHeader;
                select firstonly reportHeader
                    where reportHeader.CreatedTransactionId == createdTransactionId;

                eInvoiceExportTmp.clear();
                eInvoiceExportTmp.TransactionRefId = createdTransactionId;
                eInvoiceExportTmp.EInvoice = eInvoice.RecId;
                eInvoiceExportTmp.InternalInvoiceId = strFmt('%1/%2', reportHeader.SerialNumOfInvoice, eInvoice.RecId);
                eInvoiceExportTmp.insert();
            }

            update_recordset eInvoice
                setting Id = eInvoiceExportTmp.InternalInvoiceId
                join eInvoiceExportTmp
                    where eInvoiceExportTmp.EInvoice == eInvoice.RecId;

            ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();
            context.addTemporaryTable(eInvoiceExportTmp);

            boolean isInBatch = Global::isRunningOnBatch();

            result = ERObjectsFactory::createFormatMappingRunWithBatchSupportByFormatMappingId(
                EInvoiceParameters_IT::find().ERExportFormatMapping, _contract.parmFileName(), false, false, false, isInBatch)
                .withParameter(context)
                .withFileDestination(isInBatch ? null : ERObjectsFactory::createFileDestinationBrowser())
                .run();
        }
        finally
        {
            if (createdTransactionId)
            {
                this.cleanUpReportData(eInvoiceExportTmp);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpReportData</Name>
				<Source><![CDATA[
    private void cleanUpReportData(EInvoiceExportTmp_IN _eInvoiceExportTmp)
    {
        GSTInvoiceHeaderFooterTmp_IN reportHeader;
        GSTInvoiceTmp_IN reportLines;

        delete_from reportLines
            exists join _eInvoiceExportTmp
            where reportLines.CreatedTransactionId == _eInvoiceExportTmp.TransactionRefId;

        delete_from reportHeader
            exists join _eInvoiceExportTmp
            where reportHeader.CreatedTransactionId == _eInvoiceExportTmp.TransactionRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>