<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTblSpecTimeTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
#RpayTblConstants
abstract class rPayTblSpecTimeTrans
{
    RHRMEmplTable        emplTable;
    RpayTblSpecTimeTable rpayTblSpecTimeTable;
    TransDate            dateStart,dateEnd;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        abstract protected boolean check(TransDate _startDate,
                                     TransDate _endDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyDayHoursLine</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected  void deleteEmptyDayHoursLine(RPayTblDayHourTrans _rPayTblDayHourTrans)
    {
        int      i;
        FieldId  fieldId;

        for (i = 1; i <= #MaxDaysPerMonth ; i++)
        {
            fieldId = fieldName2id(tableNum(RPayTblDayHourTrans),#DayHourTransFieldPrefix + int2str(i));
            if (_rPayTblDayHourTrans.(fieldId))
            {
                return;
            }
        }
        _rPayTblDayHourTrans.Visible = NoYes::No;
        _rPayTblDayHourTrans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodIntervals</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        abstract public container getPeriodIntervals(boolean _isCreateReverseLine = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultJournal</Name>
				<Source><![CDATA[
        #define.Value4(4)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isDefaultJournal(RPayTblTrans _rPayTblTrans)
    {
        RPayTblJournal          rPayTblJournal = _rPayTblTrans.rpayTblJournal();
        container               historyCon, historyConItem;
        RpayHRMOrganizationId   organizationId;
        HcmTitleRecId           title;
        int                     i;

        if (! RPayTblTimeTable::find(rPayTblJournal.PayFormType, rpayTblSpecTimeTable.RpayCalendarTimeCode))
        {
            return false;
        }
        if (! rpayTblSpecTimeTable.OnlyDefaultTblLine)
        {
            return true;
        }

        historyCon = RPayHistory::getOrganizationByDateInterval(emplTable.EmployeeId,
                                                                dateStart,
                                                                dateEnd,
                                                                rPayTblJournal.HrmOrganizationId);

        for (i = 1; i <= conLen(historyCon); i ++)
        {
            historyConItem = conPeek(historyCon, i);
            organizationId = conPeek(historyConItem, 1);
            title          = RPayHistory::findByRecId(conPeek(historyConItem, #Value4)).HcmTitle;

            if (_rPayTblTrans.PayCalendarId      == emplTable.PayCalendarId    &&
                _rPayTblTrans.SourceDate         == endmth(dateStart)          &&
                _rPayTblTrans.HcmTitle           == title                      &&
                rPayTblJournal.PayFormType       == emplTable.PayFormType      &&
                rPayTblJournal.HrmOrganizationId == organizationId)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new(RHRMEmplTable    _emplTable,
                       TransDate        _dateStart,
                       TransDate        _dateEnd)
    {
        emplTable = _emplTable;
        dateStart = _dateStart;
        dateEnd   = _dateEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSpecTime</Name>
				<Source><![CDATA[
        #define.Value2(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateSpecTime(container     _intervals,
                                  RPayTblTrans  _rPayTblTrans,
                                  boolean       _add,
                                  boolean       _isCreateReverseLine = false)
    {
        RPayTblDayHourTrans  rPayTblDayHourTrans;
        RPayTblJournal       rPayTblJournal;
        RPayTblTimeTable     rPayTblTimeTable;
        RPayCalendarDateLine rPayCalendarDateLine;
        FieldId              fieldId;
        int                  i,j;
        RPayDayHour          rPayDayHour;
        container            conItem;
        TransDate            startDate;
        TransDate            endDate;

        ttsbegin;

        rPayTblJournal = _rPayTblTrans.rpayTblJournal();

        rPayTblDayHourTrans = RPayTblDayHourTrans::find(_rPayTblTrans.RecId,
                                                        rpayTblSpecTimeTable.RpayCalendarTimeCode,
                                                        true);

        for (i = 1 ; i <= conLen(_intervals) ; i++)
        {
            conItem   = conPeek(_intervals,i);
            startDate = conPeek(conItem,1);
            endDate   = conPeek(conItem,#Value2);

            if (rPayTblJournal.PayTblType == RPayTblType::EveryDay)
            {
                if (! rPayTblDayHourTrans.RecId)
                {
                    rPayTblDayHourTrans.clear();
                    rPayTblDayHourTrans.PayTblTimeCode = rpayTblSpecTimeTable.RpayCalendarTimeCode;
                    rPayTblDayHourTrans.TblTransRecId  = _rPayTblTrans.RecId;
                    rPayTblDayHourTrans.insert();
                }
                for (j = dayOfMth(startDate); j <= dayOfMth(endDate); j++)
                {
                   rPayDayHour = 0;
                    while select rPayCalendarDateLine
                              where rPayCalendarDateLine.CalendarId == _rPayTblTrans.PayCalendarId &&
                                    rPayCalendarDateLine.TransDate  == mkDate(j,mthOfYr(startDate),year(startDate))
                          exists join rPayTblTimeTable
                              where rPayTblTimeTable.PayTblTimeCode == rPayCalendarDateLine.PayCalendarTimeCode &&
                                    rPayTblTimeTable.PayFormType    == rPayTblJournal.PayFormType

                    {
                        rPayDayHour += rPayCalendarDateLine.capacity();
                    }

                    if (rPayDayHour)
                    {
                        fieldId = fieldName2id(tableNum(RPayTblDayHourTrans),#DayHourTransFieldPrefix + int2str(j));

                        if (_add)
                        {
                            rPayTblDayHourTrans.(fieldId) = rPayDayHour/#SecPerHour * (_isCreateReverseLine ? (-1) : 1);
                        }
                        else
                        {
                            rPayTblDayHourTrans.(fieldId) = max(0,rPayTblDayHourTrans.(fieldId) - rPayDayHour/#SecPerHour);
                        }
                    }
                }
            }
            else
            {
                _rPayTblTrans.initFromCalendarTable(startDate,
                                                    endDate,
                                                    _add,
                                                    rpayTblSpecTimeTable.RpayCalendarTimeCode);
            }
        }
        if (rPayTblJournal.PayTblType == RPayTblType::EveryDay)
        {
            rPayTblDayHourTrans.validateField(fieldNum(RPayTblDayHourTrans,Day1));
            rPayTblDayHourTrans.update();
            this.deleteEmptyDayHoursLine(rPayTblDayHourTrans);
        }
        else
        {
            _rPayTblTrans.validateField(fieldNum(RPayTblTrans,Stavka));
            _rPayTblTrans.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTblTrans</Name>
				<Source><![CDATA[
        #define.Value2(2)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateTblTrans(container    _intervals,
                                  RPayTblTrans _rPayTblTrans,
                                  boolean      _add)
    {
        container           conItem;
        RPayTblDayHourTrans rPayTblDayHourTrans;
        RPayTblJournal      rPayTblJournal = _rPayTblTrans.rpayTblJournal(true);
        TransDate           startDate;
        TransDate           endDate;
        int                 i;

        ttsbegin;

        for (i = 1 ; i <= conLen(_intervals) ; i++)
        {
            conItem   = conPeek(_intervals,i);
            startDate = conPeek(conItem,1);
            endDate   = conPeek(conItem,#Value2);
            if (rPayTblJournal.PayTblType == RPayTblType::EveryDay)
            {
                while select forupdate rPayTblDayHourTrans
                    where rPayTblDayHourTrans.TblTransRecId == _rPayTblTrans.RecId
                {
                    rPayTblDayHourTrans.initFromCalendarTable(startDate,endDate,_add);
                    rPayTblDayHourTrans.validateField(fieldNum(RPayTblDayHourTrans,Day1));
                    rPayTblDayHourTrans.update();
                    this.deleteEmptyDayHoursLine(rPayTblDayHourTrans);
                }
            }
            else
            {
                _rPayTblTrans.initFromCalendarTable(startDate,endDate,_add);
                _rPayTblTrans.validateField(fieldNum(RPayTblTrans,Stavka));
                _rPayTblTrans.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEndDate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkEndDate(RpayTblSpecTimeType  _rpayTblSpecTimeType,
                                              RHRMEmplId          _emplId,
                                              TransDate            _startDate,
                                              TransDate            _endDate)
    {
        RpayTblSpecTimeTable rpayTblSpecTimeTable;
        RpayTblSpecTimeTrans rpayTblSpecTimeTrans;
        RHRMEmplTable        emplTable = RHRMEmplTable::find(_emplId);

        while select RpayTblSpecTimeType from rpayTblSpecTimeTable order by RpayTblSpecTimeType
            where rpayTblSpecTimeTable.RpayTblSpecTimeType != _rpayTblSpecTimeType
        {
            rpayTblSpecTimeTrans = RpayTblSpecTimeTrans::construct(rpayTblSpecTimeTable.RpayTblSpecTimeType,
                                                                   emplTable);

            if ( ! rpayTblSpecTimeTrans.check(_startDate,_endDate))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RpayTblSpecTimeTrans construct(RpayTblSpecTimeType  _rpayTblSpecTimeType,
                                                        RHRMEmplTable        _emplTable,
                                                        TransDate            _dateStart = dateStartMth(RPayParameters::payPeriod()),
                                                        TransDate            _dateEnd   = RPayParameters::payPeriod(),
                                                        RPayCalendarTimeCode _timeCode = '')
    {
        RpayTblSpecTimeTrans rpayTblSpecTimeTrans;

        switch (_rpayTblSpecTimeType)
        {
            case RpayTblSpecTimeType::Vacation:
                rpayTblSpecTimeTrans = new RpayTblSpecTimeTrans_Vacation(_emplTable, _dateStart, _dateEnd, _timeCode);
                break;
            case RpayTblSpecTimeType::SickList:
                rpayTblSpecTimeTrans =  new RpayTblSpecTimeTrans_SickList(_emplTable, _dateStart, _dateEnd, _timeCode);
                break;
            case RpayTblSpecTimeType::Mission:
                rpayTblSpecTimeTrans =  new RpayTblSpecTimeTrans_Mission(_emplTable, _dateStart, _dateEnd, _timeCode);
                break;
        }
        return rpayTblSpecTimeTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTblTrans</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static void newTblTrans(RPayTblTrans _rPayTblTrans,
                                          TransDate    _startDate,
                                          TransDate    _endDate,
                                          boolean      _isCreateReverseLine,
                                          boolean      _reversed)
    {
        RpayTblSpecTimeTable rpayTblSpecTimeTable;
        RpayTblSpecTimeTrans rpayTblSpecTimeTrans;
        container            intervals;

        while select RpayTblSpecTimeType, RpayCalendarTimeCode from rpayTblSpecTimeTable
        {
            rpayTblSpecTimeTrans = RpayTblSpecTimeTrans::construct(rpayTblSpecTimeTable.RpayTblSpecTimeType,
                                                                   RHRMEmplTable::find(_rPayTblTrans.EmplId),
                                                                   _startDate,
                                                                   _endDate,
                                                                   rpayTblSpecTimeTable.RpayCalendarTimeCode);

            if (rpayTblSpecTimeTrans.isDefaultJournal(_rPayTblTrans))
            {
                intervals = rpayTblSpecTimeTrans.getPeriodIntervals(_isCreateReverseLine);
                if (conLen(intervals))
                {
                    if (!_isCreateReverseLine)
                    {
                        rpayTblSpecTimeTrans.updateTblTrans(intervals,_rPayTblTrans,false);
                    }
                    rpayTblSpecTimeTrans.updateSpecTime(intervals, _rPayTblTrans, true, _isCreateReverseLine && _reversed);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCreateTbl</Name>
				<Source><![CDATA[
        #RpayModuleName
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void reCreateTbl(RHRMEmplId                _emplId,
                                          TransDate                _startDate,
                                          TransDate                _endDate        = dateNull(),
                                          RpayHRMOrganizationId    _organizationId = "",
                                          boolean                  _isCreateReverseLine = false,
                                          boolean                  _isDeleteReverseLine = false)
    {
        RPayTblJournal           rPayTblJournal;
        RPayTblTrans             rPayTblTrans;
        RHRMEmplTable            emplTable;
        RPayTblTransFormCreate   rPayTblTransFormCreate;
        QueryRun                 queryRun;
        QueryBuildRange          queryBuildRange;
        container                historyCon;
        Set                      organizationSet;
        RpayHRMOrganizationId    organizationId;
        int                      i;
        RPayCalculate_Tbl        payCalculate;

        organizationSet = new Set(Types::String);
        emplTable       = RHRMEmplTable::find(_emplId);
        historyCon      = RPayHistory::getOrganizationByDateInterval(_emplId,
                                                                     _startDate,
                                                                     _endDate ? _endDate : endmth(_startDate));

        for (i = 1; i <= conLen(historyCon); i ++)
        {
            organizationId = conPeek(conPeek(historyCon, i), 1);
            if (! organizationSet.in(organizationId))
            {
                organizationSet.add(organizationId);

                while select rPayTblJournal index hint DateOrgFormTypeId
                    where rPayTblJournal.PayFormType       == emplTable.PayFormType       &&
                          rPayTblJournal.HrmOrganizationId == organizationId              &&
                          rPayTblJournal.TblDate           >= RPayParameters::payPeriod() &&
                          ((_isCreateReverseLine || _isDeleteReverseLine)                 ||
                          (rPayTblJournal.TblDate           >= dateStartMth(_startDate)   &&
                          (rPayTblJournal.TblDate          <= endmth(_endDate)            ||
                          (_endDate ? false : true))))
                {
                    if (_isCreateReverseLine)
                    {
                        delete_from rPayTblTrans
                            where rPayTblTrans.EmplId     == _emplId                  &&
                                  rPayTblTrans.PayTblNum  == rPayTblJournal.TblNum    &&
                                  rPayTblTrans.SourceDate >= dateStartMth(_startDate) &&
                                  rPayTblTrans.SourceDate <= min(endmth(_endDate), endmth(prevMth(RPayParameters::payPeriod())));
                    }
                    else
                    {
                        delete_from rPayTblTrans
                            where rPayTblTrans.EmplId     == _emplId                  &&
                                  rPayTblTrans.PayTblNum  == rPayTblJournal.TblNum    &&
                                  rPayTblTrans.SourceDate >= dateStartMth(_startDate) &&
                                 (! _endDate ||
                                  rPayTblTrans.SourceDate <= endmth(_endDate));
                    }

                    rPayTblTransFormCreate = new RPayTblTransFormCreate(rPayTblJournal);

                    queryRun               = rPayTblTransFormCreate.queryRun();
                    queryBuildRange        = queryRun.query().dataSourceNo(1).addRange(fieldNum(RHRMEmplTable, EmployeeId));
                    queryBuildRange.value(_emplId);
                    rPayTblTransFormCreate.queryRun(queryRun);

                    rPayTblTransFormCreate.createJournalTrans(0);

                    RPayTblEmplSum::calculateEmpl(_emplId, rPayTblJournal.TblDate, RPayEmplTblSum::payCalendarId(_emplId, rPayTblJournal.TblDate));

                    if (rPayTblJournal.Interactive && rPayTblJournal.TblDate == RPayParameters::payPeriod(_emplId))
                    {
                        payCalculate = new RPayCalculate_Tbl(RPayModuleTable::find(#ModuleNameTbl));
                        payCalculate.payPeriod(rPayTblJournal.TblDate);
                        payCalculate.calcEmpl(_emplId);
                    }
                }
            }
        }

        if (_organizationId && ! organizationSet.in(_organizationId))
        {
            while select TblNum from rPayTblJournal index hint DateOrgFormTypeId
                where rPayTblJournal.PayFormType       == emplTable.PayFormType       &&
                      rPayTblJournal.HrmOrganizationId == _organizationId             &&
                      rPayTblJournal.TblDate           >= RPayParameters::payPeriod() &&
                      rPayTblJournal.TblDate           >= dateStartMth(_startDate)    &&
                      (rPayTblJournal.TblDate          <= endmth(_endDate)            ||
                      (_endDate ? false : true))
            {
                delete_from rPayTblTrans
                    where rPayTblTrans.EmplId    == _emplId &&
                          rPayTblTrans.PayTblNum == rPayTblJournal.TblNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTbl</Name>
				<Source><![CDATA[
        private static void updateTbl(RpayTblSpecTimeType  _rpayTblSpecTimeType,
                                 RHRMEmplId           _emplId,
                                 TransDate            _startDate,
                                 TransDate            _endDate,
                                 boolean              _add,
                                 RPayCalendarTimeCode _timeCode,
                                 boolean              _isCreateReverseLine = false)
    {
        RPayTblTrans         rPayTblTrans;
        RPayTblJournal       rPayTblJournal;
        RpayTblSpecTimeTrans rpayTblSpecTimeTrans;
        RHRMEmplTable        emplTable = RHRMEmplTable::find(_emplId);
        RpayTblSpecTimeTable rpayTblSpecTimeTable = RpayTblSpecTimeTable::find(_rpayTblSpecTimeType, _timeCode);
        TransDate            dateStart,
                             dateEnd;

        if (! rpayTblSpecTimeTable.RecId ||  ! isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            return;
        }
        ttsbegin;

        while select forupdate rPayTblTrans
            where rPayTblTrans.EmplId     == _emplId                     &&
                  rPayTblTrans.SourceDate >= RPayParameters::payPeriod() &&
                  rPayTblTrans.SourceDate >= dateStartMth(_startDate)    &&
                  rPayTblTrans.SourceDate <= endmth(_endDate)
            join rPayTblJournal
                where rPayTblJournal.TblNum   == rPayTblTrans.PayTblNum  &&
                      rPayTblJournal.TblDate  == rPayTblTrans.SourceDate
        {
            dateStart = max(_startDate,dateStartMth(rPayTblTrans.SourceDate));
            dateEnd   = min(_endDate,endmth(rPayTblTrans.SourceDate));
            rpayTblSpecTimeTrans = RpayTblSpecTimeTrans::construct(_rpayTblSpecTimeType,
                                                                   emplTable,
                                                                   dateStart,
                                                                   dateEnd,
                                                                   _timeCode);
            if (rpayTblSpecTimeTrans.isDefaultJournal(rPayTblTrans))
            {
                 rpayTblSpecTimeTrans.updateTblTrans([[dateStart,dateEnd]],rPayTblTrans,(_isCreateReverseLine ? true : ! _add ));
                 rpayTblSpecTimeTrans.updateSpecTime([[dateStart,dateEnd]],rPayTblTrans,(_isCreateReverseLine ? false : _add), _isCreateReverseLine);
            }
            RPayTblEmplSum::calculateEmpl(_emplId, rPayTblJournal.TblDate, RPayEmplTblSum::payCalendarId(_emplId, rPayTblJournal.TblDate));
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>