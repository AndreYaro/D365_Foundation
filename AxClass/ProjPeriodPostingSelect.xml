<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodPostingSelect</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class ProjPeriodPostingSelect extends RunBase
{
    TmpProjPeriodic         tmpProjPeriodic;
    TmpProjPeriodicCost     tmpProjPeriodicCost;
    TmpProjPeriodicSale     tmpProjPeriodicSale;
    TmpProjPeriodicLedger   tmpProjPeriodicLedger;
    boolean                 setDateRange;

    QueryRun                queryRun;

    DialogField             dialogFromDate;
    DialogField             dialogToDate;
    TransDate               fromDate;
    TransDate               toDate;

    ProjId                  projId;
    ProjInvoiceId           projInvoiceId;
    container               projTransIdList;

    QueryBuildDataSource    projTableDataSource, projGroupDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>account</Name>
				<Source><![CDATA[
    abstract LedgerDimensionDefaultAccount account(ProjPost _projPost , ProjFundingSourceRefId _fundingSourceId )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOffset</Name>
				<Source><![CDATA[
    abstract LedgerDimensionDefaultAccount accountOffset(ProjPost _projPost,ProjFundingSourceRefId _fundingSourceId )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    abstract AmountMST amountMST(ProjTrans _projTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPostTrans</Name>
				<Source><![CDATA[
    public boolean checkPostTrans(
    ProjTrans           _projTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costSales</Name>
				<Source><![CDATA[
    protected ProjCostSales costSales()
    {
        return ProjCostSales::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    abstract void createTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrInsertTmpPeriodic</Name>
				<Source><![CDATA[
    void findOrInsertTmpPeriodic(ProjTrans _projTrans)
    {
        select tmpProjPeriodic
        where tmpProjPeriodic.TransId == _projTrans.transId();

        if (!tmpProjPeriodic)
        {
            this.insertTmpPeriodic(_projTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record was found when you called the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPeriodic</Name>
				<Source><![CDATA[
    protected void insertTmpPeriodic(ProjTrans              _projTrans)
    {
        this.tmpProjPeriodicInit();

        this.tmpProjPeriodicFields(_projTrans);

        this.tmpProjPeriodicInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPeriodicCost</Name>
				<Source><![CDATA[
    protected void insertTmpPeriodicCost(ProjTrans _projTrans)
    {
        this.tmpProjPeriodicCostInit();

        this.tmpProjPeriodicCostFields(_projTrans);

        this.tmpProjPeriodicCostInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPeriodicLedger</Name>
				<Source><![CDATA[
    protected void insertTmpPeriodicLedger(ProjPost       _projPost,
                                       ProjTrans      _projTrans)
    {
        tmpProjPeriodicLedger.clear();

        tmpProjPeriodicLedger.PostingType       = this.postingType(_projPost);
        tmpProjPeriodicLedger.OffsetPostingType = this.postingTypeOffset(_projPost);
        tmpProjPeriodicLedger.LedgerDimension           = this.account(_projPost,_projTrans.fundingSource() );
        tmpProjPeriodicLedger.OffsetLedgerDimension     = this.accountOffset(_projPost,_projTrans.fundingSource());

        tmpProjPeriodicLedger.AmountMST         = this.amountMST(_projTrans);

        tmpProjPeriodicLedger.TransId           = _projTrans.transId();
        tmpProjPeriodicLedger.TransType         = _projTrans.transType();
        tmpProjPeriodicLedger.ProjFundingSource = _projTrans.fundingSource();

        tmpProjPeriodicLedger.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpPeriodicSale</Name>
				<Source><![CDATA[
    protected void insertTmpPeriodicSale(ProjTrans _projTrans)
    {
        this.tmpProjPeriodicSaleInit();

        this.tmpProjPeriodicSaleFields(_projTrans);

        this.tmpProjPeriodicSaleInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate   _fromDate  = fromDate)
    {
        fromDate   = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId   _projId  = projId)
    {
        projId   = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceId</Name>
				<Source><![CDATA[
    public ProjInvoiceId parmProjInvoiceId(ProjInvoiceId   _projInvoiceId  = projInvoiceId)
    {
        projInvoiceId   = _projInvoiceId;

        return projInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseTurnover</Name>
				<Source><![CDATA[
    abstract boolean parmReverseTurnover(boolean _reverseTurnover = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate   _toDate  = toDate)
    {
        toDate   = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransActionDate</Name>
				<Source><![CDATA[
    abstract TransDate parmTransActionDate(TransDate _transActionDate = dateNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransIdList</Name>
				<Source><![CDATA[
    container parmTransIdList(container _transIdList  = projTransIdList)
    {
        projTransIdList = _transIdList;

        return projTransIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    abstract LedgerPostingType postingType(ProjPost _projPost)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffset</Name>
				<Source><![CDATA[
    abstract LedgerPostingType postingTypeOffset(ProjPost _projPost)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>projLedgerStatus</Name>
				<Source><![CDATA[
    abstract ProjLedgerStatus projLedgerStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    abstract QueryRun queryBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromDate</Name>
				<Source><![CDATA[
    protected str queryFromDate()
    {
        return queryValue(fromDate ? fromDate : dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// An instance of the <c>QueryRun</c> class.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the <c>QueryRun</c> object whenever the method is called. This should be done
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method. Or it should be used in the
    /// <c>init</c> method or in this method only when it is not created.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryToDate</Name>
				<Source><![CDATA[
    protected str queryToDate()
    {
        return queryValue(toDate ? toDate : dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeTransId</Name>
				<Source><![CDATA[
    void rangeTransId(
    QueryBuildDataSource        dataSource)
    {
        ProjTrans               projTrans;
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransCost       projEmplTransCost;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTrans           projCostTrans;
        ProjCostTransCost       projCostTransCost;
        ProjCostTransSale       projCostTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransCost       projItemTransCost;
        ProjItemTransSale       projItemTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        List                    list;
        ListIterator            li;
        QueryBuildRange         queryRangeTransId;
        boolean                 checkPostTrans;

        if (this.parmTransIdList())
        {
            list = List::create(this.parmTransIdList());
        }

        li = new ListIterator(list);

        #localMacro.clearRange
    queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));

    while (queryRangeTransId)
    {
        dataSource.clearRange(fieldnum(%1,TransId));
        queryRangeTransId    = dataSource.findRange(fieldnum(%1,TransId));
    }
#endMacro

        #localMacro.clearRangeItem
    queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));

    while (queryRangeTransId)
    {
        dataSource.clearRange(fieldnum(%1,projTransId));
        queryRangeTransId    = dataSource.findRange(fieldnum(%1,projTransId));
    }
#endMacro

        switch (dataSource.table())
        {
            case (tableNum(ProjCostTrans)):
                #clearRange(ProjCostTrans)

                li.begin();
                while (li.more())
                {
                    projCostTrans = li.value();
                    checkPostTrans = true;
                    switch (this.costSales())
                    {
                        case ProjCostSales::Cost:
                        while select projCostTransCost
                            where projCostTransCost.TransId == projCostTrans.TransId
                            {
                                projTrans = ProjTrans::newProjCostTransCost(projCostTrans, projCostTransCost);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                        case ProjCostSales::Sales:
                        while select projCostTransSale
                            where projCostTransSale.TransId == projCostTrans.TransId
                            {
                                projTrans = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                    }
                    li.next();
                    if (checkPostTrans)
                    {
                        dataSource.addRange(fieldNum(ProjCostTrans,TransId)).value(projCostTrans.TransId);
                    }
                }

                queryRangeTransId    = dataSource.findRange(fieldNum(ProjCostTrans,TransId));
                if (! queryRangeTransId)
                {
                    dataSource.addRange(fieldNum(ProjCostTrans,TransId)).value(SysQuery::valueEmptyString());
                }
                break;

            case (tableNum(ProjEmplTrans)):
                #clearRange(ProjEmplTrans)

                li.begin();
                while (li.more())
                {
                    projEmplTrans = li.value();
                    checkPostTrans = true;
                    switch (this.costSales())
                    {
                        case ProjCostSales::Cost:
                        while select projEmplTransCost
                            where projEmplTransCost.TransId == projEmplTrans.TransId
                            {
                                projTrans = ProjTrans::newProjEmplTransCost(projEmplTrans, projEmplTransCost);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                        case ProjCostSales::Sales:
                        while select projEmplTransSale
                            where projEmplTransSale.TransId == projEmplTrans.TransId
                            {
                                projTrans = ProjTrans::newProjEmplTransSale(projEmplTrans, projEmplTransSale);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                    }
                    li.next();
                    if (checkPostTrans)
                    {
                        dataSource.addRange(fieldNum(ProjEmplTrans,TransId)).value(projEmplTrans.TransId);
                    }
                }

                queryRangeTransId    = dataSource.findRange(fieldNum(ProjEmplTrans,TransId));
                if (! queryRangeTransId)
                {
                    dataSource.addRange(fieldNum(ProjEmplTrans,TransId)).value(SysQuery::valueEmptyString());
                }
                break;

            case (tableNum(ProjItemTrans)):
                #clearRangeItem(ProjItemTrans)

                li.begin();
                while (li.more())
                {
                    projItemTrans = li.value();
                    checkPostTrans = true;
                    switch (this.costSales())
                    {
                        case ProjCostSales::Cost:
                        while select projItemTransCost
                            where projItemTransCost.InventTransId == projItemTrans.InventTransId &&
                                projItemTransCost.ProjAdjustRefId == projItemTrans.ProjAdjustRefId
                            {
                                projTrans = ProjTrans::newProjItemTransCost(projItemTransCost);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                        case ProjCostSales::Sales:
                        while select projItemTransSale
                            where projItemTransSale.ProjTransId == projItemTrans.ProjTransId
                            {
                                projTrans = ProjTrans::newProjItemTransSale(projItemTrans, projItemTransSale);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                    }
                    li.next();
                    if (checkPostTrans)
                    {
                        dataSource.addRange(fieldNum(ProjItemTrans,ProjTransId)).value(projItemTrans.ProjTransId);
                    }
                }

                queryRangeTransId    = dataSource.findRange(fieldNum(ProjItemTrans,ProjTransId));
                if (! queryRangeTransId)
                {
                    dataSource.addRange(fieldNum(ProjItemTrans,ProjTransId)).value(SysQuery::valueEmptyString());
                }
                break;

            case (tableNum(ProjRevenueTrans)):
                #clearRange(ProjRevenueTrans)

                li.begin();
                while (li.more())
                {
                    projRevenueTrans = li.value();
                    checkPostTrans = true;
                    switch (this.costSales())
                    {
                        case ProjCostSales::Sales:
                        while select projRevenueTransSale
                            where projRevenueTransSale.TransId == projRevenueTrans.TransId
                            {
                                projTrans = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
                                if (!this.checkPostTrans(projTrans))
                                {
                                    checkPostTrans = false;
                                    break;
                                }
                            }
                            break;
                    }
                    li.next();
                    if (checkPostTrans)
                    {
                        dataSource.addRange(fieldNum(ProjRevenueTrans,TransId)).value(projRevenueTrans.TransId);
                    }
                }

                queryRangeTransId    = dataSource.findRange(fieldNum(ProjRevenueTrans,TransId));
                if (! queryRangeTransId)
                {
                    dataSource.addRange(fieldNum(ProjRevenueTrans,TransId)).value(SysQuery::valueEmptyString());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogRanges</Name>
				<Source><![CDATA[
    void setDialogRanges()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRange</Name>
				<Source><![CDATA[
    void setQueryRange()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    /// false by default.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid instance of the <c>QueryRun</c> class. If you change the return value to true, the
    /// button will be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodic</Name>
				<Source><![CDATA[
    public TmpProjPeriodic tmpProjPeriodic()
    {
        return tmpProjPeriodic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicCost</Name>
				<Source><![CDATA[
    public TmpProjPeriodicCost tmpProjPeriodicCost()
    {
        return tmpProjPeriodicCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicCostFields</Name>
				<Source><![CDATA[
    void tmpProjPeriodicCostFields(ProjTrans _projTrans)
    {
        tmpProjPeriodicCost.TransId             = _projTrans.transId();
        tmpProjPeriodicCost.CostRefRecId        = _projTrans.recId();
        tmpProjPeriodicCost.CurrencyId          = _projTrans.currencyIdCost();
        tmpProjPeriodicCost.ProjAdjustRefId     = _projTrans.projAdjustRefId();
        tmpProjPeriodicCost.ItemlineNum         = _projTrans.itemLineNum();
        tmpProjPeriodicCost.CostPrice           = _projTrans.costPrice();
        tmpProjPeriodicCost.TransStatus         = _projTrans.transStatus();
        tmpProjPeriodicCost.LedgerStatusCost    = _projTrans.ledgerStatusCost();
        tmpProjPeriodicCost.CostAmount          = _projTrans.transCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicCostInit</Name>
				<Source><![CDATA[
    void tmpProjPeriodicCostInit()
    {
        tmpProjPeriodicCost.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicCostInsert</Name>
				<Source><![CDATA[
    void tmpProjPeriodicCostInsert()
    {
        tmpProjPeriodicCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicFields</Name>
				<Source><![CDATA[
    void tmpProjPeriodicFields(ProjTrans              _projTrans)
    {
        tmpProjPeriodic.CategoryId          = _projTrans.categoryId();
        tmpProjPeriodic.DefaultDimension    = _projTrans.defaultDimension();
        tmpProjPeriodic.ProjId              = _projTrans.projId();
        tmpProjPeriodic.Qty                 = _projTrans.qty();
        tmpProjPeriodic.TransDate           = _projTrans.transDate();
        tmpProjPeriodic.TransId             = _projTrans.transId();
        // tmpProjPeriodic.EmplId              = _projTrans.projEmplItemId();
        tmpProjPeriodic.Resource            = _projTrans.resource();
        tmpProjPeriodic.ResourceCategory    = _projTrans.resourceCategory();
        tmpProjPeriodic.ActivityNumber      = _projTrans.activityNumber();
        tmpProjPeriodic.InventTransId       = _projTrans.inventTransId();
        tmpProjPeriodic.Txt                 = _projTrans.txt();
        tmpProjPeriodic.Voucher             = _projTrans.voucherOriginal();
        tmpProjPeriodic.ProjLinePropertyId  = _projTrans.linePropertyId();
        tmpProjPeriodic.TaxGroup            = _projTrans.taxGroup();
        tmpProjPeriodic.TaxItemGroup        = _projTrans.taxItemGroup();
        tmpProjPeriodic.TransType           = _projTrans.transType();
        tmpProjPeriodic.Origin              = _projTrans.origin();
        tmpProjPeriodic.ProjIdentId         = _projTrans.projIdentId();
        tmpProjPeriodic.ProjIdentResource   = _projTrans.projIdentResource();
        tmpProjPeriodic.PackingSlipId       = _projTrans.packingSlipId();
        tmpProjPeriodic.LedgerDimension     = _projTrans.itemLedgerAccountLedgerDimension();
        tmpProjPeriodic.AcknowledgementDate = _projTrans.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicInit</Name>
				<Source><![CDATA[
    void tmpProjPeriodicInit()
    {
        tmpProjPeriodic.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicInsert</Name>
				<Source><![CDATA[
    RefRecId tmpProjPeriodicInsert()
    {
        tmpProjPeriodic.insert();

        return tmpProjPeriodic.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicLedger</Name>
				<Source><![CDATA[
    public  TmpProjPeriodicLedger tmpProjPeriodicLedger()
    {
        return tmpProjPeriodicLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicSale</Name>
				<Source><![CDATA[
    public TmpProjPeriodicSale tmpProjPeriodicSale()
    {
        return tmpProjPeriodicSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicSaleFields</Name>
				<Source><![CDATA[
    void tmpProjPeriodicSaleFields(ProjTrans _projTrans)
    {
        tmpProjPeriodicSale.TransId             = _projTrans.transId();
        tmpProjPeriodicSale.SaleRefRecId        = _projTrans.recId();
        tmpProjPeriodicSale.CurrencyId          = _projTrans.currencyIdSales();
        tmpProjPeriodicSale.LedgerSalesPosted   = _projTrans.ledgerSalesPosted();
        tmpProjPeriodicSale.SalesPrice          = _projTrans.salesPrice();
        tmpProjPeriodicSale.TransStatus         = _projTrans.transStatus();
        tmpProjPeriodicSale.LedgerSalesAmount   = this.parmReverseTurnover() ? _projTrans.ledgerSalesAmountMST() : _projTrans.transTurnoverMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicSaleInit</Name>
				<Source><![CDATA[
    void tmpProjPeriodicSaleInit()
    {
        tmpProjPeriodicSale.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjPeriodicSaleInsert</Name>
				<Source><![CDATA[
    void tmpProjPeriodicSaleInsert()
    {
        tmpProjPeriodicSale.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjPeriodPostingSelect construct(Args _args)
    {
        ProjCostSales               projCostSales;
        ProjPeriodPostingSelect     ret;

        if ( _args.parmEnumType()  && _args.parmEnumType() == enumNum(ProjCostSales) )
        {
            projCostSales   = _args.parmEnum();

            switch (projCostSales)
            {
                case  ProjCostSales::Cost   :
                    ret = new ProjPeriodPostingSelectCost_Menu();
                    break;

                case  ProjCostSales::Sales  :
                    ret = new ProjPeriodPostingSelectSales_Menu();
                    break;

                default                     :
                    throw error(strFmt("@SYS22828","@SYS16522"));
            }
        }
        else
        {
            throw error(strFmt("@SYS22828","@SYS16522"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransIdList</Name>
				<Source><![CDATA[
    static List createTransIdList(Args     args)
    {
        List                transIdList;
        FormDataSource      formDataSource;
        ProjCostTrans       projCostTrans;
        ProjEmplTrans       projEmplTrans;
        ProjItemTrans       projItemTrans;
        ProjRevenueTrans    projRevenueTrans;

        transIdList     = new List(Types::Record);
        formDataSource  = FormDataUtil::getFormDataSource(args.record());

        switch (args.dataset())
        {
            case tableNum(ProjCostTrans):
                projCostTrans   = args.record();
                if (formDataSource)
                {
                    for (projCostTrans = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                    projCostTrans; projCostTrans = formDataSource.getNext())
                    {
                        transIdList.addEnd(projCostTrans);
                    }
                }
                else
                {
                    transIdList.addEnd(projCostTrans);
                }
                break;

            case tableNum(ProjEmplTrans):
                projEmplTrans   = args.record();
                if (formDataSource)
                {
                    for (projEmplTrans = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                    projEmplTrans; projEmplTrans = formDataSource.getNext())
                    {
                        transIdList.addEnd(projEmplTrans);
                    }
                }
                else
                {
                    transIdList.addEnd(projEmplTrans);
                }
                break;

            case tableNum(ProjItemTrans):
                projItemTrans   = args.record();
                if (formDataSource)
                {
                    for (projItemTrans = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                    projItemTrans; projItemTrans = formDataSource.getNext())
                    {
                        transIdList.addEnd(projItemTrans);
                    }
                }
                else
                {
                    transIdList.addEnd(projItemTrans);
                }
                break;

            case tableNum(ProjRevenueTrans):
                projRevenueTrans   = args.record();
                if (formDataSource)
                {
                    for (projRevenueTrans = formDataSource.getFirst(true) ?
                     formDataSource.getFirst(true) : formDataSource.cursor();
                    projRevenueTrans; projRevenueTrans = formDataSource.getNext())
                    {
                        transIdList.addEnd(projRevenueTrans);
                    }
                }
                else
                {
                    transIdList.addEnd(projRevenueTrans);
                }
                break;
        }

        return transIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        // This value will be defined by subclasses
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        ProjPeriodPostingSelect     projPeriodPostingSelect;

        projPeriodPostingSelect = ProjPeriodPostingSelect::construct(_args);

        if (projPeriodPostingSelect.prompt())
        {
            projPeriodPostingSelect.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProj</Name>
				<Source><![CDATA[
    static ProjPeriodPostingSelect newProj(
    Args                _args,
    ProjId              _projId
)
    {
        ProjCostSales           projCostSales   = _args.parmEnum();
        ProjPeriodPostingSelect periodPostingSelect;

        switch (projCostSales)
        {
            case  ProjCostSales::Cost   :
                periodPostingSelect = new ProjPeriodPostingSelectCost_Proj();
                break;
            case  ProjCostSales::Sales  :
                periodPostingSelect = new ProjPeriodPostingSelectSales_Proj();
                break;
            default                     :
                throw error(strFmt("@SYS22828","@SYS16522"));
        }

        periodPostingSelect.getLast();
        periodPostingSelect.parmProjId(_projId);
        periodPostingSelect.setQueryRange();

        return periodPostingSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjInvoiceId</Name>
				<Source><![CDATA[
    static ProjPeriodPostingSelect newProjInvoiceId(
    Args                _args,
    ProjInvoiceId       _projInvoiceId
)
    {
        ProjCostSales           projCostSales   = _args.parmEnum();
        ProjPeriodPostingSelect periodPostingSelect;

        switch (projCostSales)
        {
            case  ProjCostSales::Cost   :
                periodPostingSelect = new ProjPeriodPostingSelectCost_Proj();
                break;

            case  ProjCostSales::Sales  :
                periodPostingSelect = new ProjPeriodPostingSelectSales_Proj();
                break;

            default                     :
                throw error(strFmt("@SYS22828","@SYS16522"));
        }

        periodPostingSelect.getLast();

        periodPostingSelect.parmProjInvoiceId(_projInvoiceId);
        periodPostingSelect.setQueryRange();

        return periodPostingSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjTransId</Name>
				<Source><![CDATA[
    static ProjPeriodPostingSelect newProjTransId(
Args            _args
)
    {
        ProjCostSales           projCostSales   = _args.parmEnum();
        ProjPeriodPostingSelect periodPostingSelect;

        List                    transIdList;
        Args                    argsTrans   = new Args();

        if (_args.caller() && _args.caller().callerDataRecord())
        {
            argsTrans.record(_args.caller().callerDataRecord());
            transIdList     = ProjPeriodPostingSelect::createTransIdList(argsTrans);
        }

        switch (projCostSales)
        {
            case  ProjCostSales::Cost   :
                periodPostingSelect = new ProjPeriodPostingSelectCost_Trans();
                break;

            case  ProjCostSales::Sales  :
                periodPostingSelect = new ProjPeriodPostingSelectSales_Trans();
                break;

            default                     :
                throw error(strFmt("@SYS22828","@SYS16522"));
        }

        periodPostingSelect.getLast();

        if (transIdList)
        {
            periodPostingSelect.parmTransIdList(transIdList.pack());
        }

        periodPostingSelect.setQueryRange();

        return periodPostingSelect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>