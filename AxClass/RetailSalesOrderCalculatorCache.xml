<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesOrderCalculatorCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSalesOrderCalculatorCache</c> class controls cache of price and discount calculated sales line
/// </summary>
[Wrappable(false)]
public final class RetailSalesOrderCalculatorCache
{
    private static str priceScope = 'RetailPricingCalculator_PriceCalculatedLine';
    private static str discountScope = 'RetailPricingCalculator_DiscountCalculatedLine';

    SalesLine currentSalesLine;
    RetailSalesLine currentRetailSalesline;
    SalesLine cachedSalesLine;
    RetailSalesLine cachedRetailSalesLine;

    boolean isSalesLineFromCache;

    str scope = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new (SalesLine _salesLine, boolean _isPrice)
    {
        currentSalesLine = _salesLine;
        currentRetailSalesLine = currentSalesLine.retailSalesLine();

        if (_isPrice)
        {
            scope = priceScope;
        }
        else
        {
            scope = discountScope;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculatePriceDiscountForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the price should be calculated
    /// </summary>
    /// <returns>True if the current sales line must be calculated, otherwise false</returns>
    [Hookable(false)]
    public boolean shouldCalculatePriceDiscountForLine()
    {
        boolean calculatePriceForCurrentLine = false;
        this.readCalculatedLineFromCache();

        if (isSalesLineFromCache == false)
        {
            calculatePriceForCurrentLine = true;
        }
        else
        {
            if (this.pricingParametersChanged())
            {
                calculatePriceForCurrentLine = true;

                // invalidate cache as parameters changed
                RetailSalesOrderCalculatorCache::removeCalculatedLine(currentSalesLine, scope);
            }
        }

        return calculatePriceForCurrentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pricingParametersChanged</Name>
				<Source><![CDATA[
    protected boolean pricingParametersChanged()
    {
        boolean ret = false;

        if (this.salesLinePricingParametersChanged() || this.retailSalesLinePricingParametersChanged())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLinePricingParametersChanged</Name>
				<Source><![CDATA[
    private boolean salesLinePricingParametersChanged()
    {
        boolean ret = false;

        if (cachedSalesLine.QtyOrdered != currentSalesLine.QtyOrdered
            || cachedSalesLine.InventDimId != currentSalesLine.InventDimId
            || cachedSalesLine.SalesPrice != currentSalesLine.SalesPrice
            || cachedSalesLine.SalesUnit != currentSalesLine.SalesUnit
            || cachedSalesLine.InventTransId != currentSalesLine.InventTransId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailSalesLinePricingParametersChanged</Name>
				<Source><![CDATA[
    private boolean retailSalesLinePricingParametersChanged()
    {
        boolean ret = false;

        if (cachedRetailSalesLine.LineManualDiscountPercentage != currentRetailSalesLine.LineManualDiscountPercentage
            || cachedRetailSalesLine.LineManualDiscountAmount != currentRetailSalesLine.LineManualDiscountAmount
            || cachedRetailSalesLine.LineDscAmount != currentRetailSalesline.LineDscAmount
            || cachedRetailSalesLine.LinePercentageDiscount != currentRetailSalesline.LinePercentageDiscount
            || cachedRetailSalesLine.Catalog != currentRetailSalesline.Catalog)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCachedSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the cached <c>SalesLine</c>
    /// </summary>
    /// <returns>The cached sales line when cache exists, otherwise null</returns>
    [Hookable(false)]
    public SalesLine getCachedSalesLine()
    {
        if (isSalesLineFromCache == false)
        {
            this.readCalculatedLineFromCache();
        }

        return cachedSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readCalculatedLineFromCache</Name>
				<Source><![CDATA[
    private void readCalculatedLineFromCache()
    {
        if (!currentSalesLine.InventTransId)
        {
            // if it is a buffer which is not yet saved.
            isSalesLineFromCache = false;
        }
        else
        {
            str key = strfmt('%1-%2-%3', currentSalesLine.SalesId, currentSalesLine.LineNum, currentSalesLine.ItemId);
            SysGlobalObjectCache sysGlobalObjectCache = new SysGlobalObjectCache();
            container cache = sysGlobalObjectCache.find(scope, [key]);

            if (cache != conNull())
            {
                isSalesLineFromCache = true;

                cachedSalesLine = conpeek(cache, 1);

                cachedRetailSalesLine = cachedSalesLine.retailSalesLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedPriceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the given <c>SalesLine</c> to the calculated price cache
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record</param>
    [Hookable(false)]
    public static void addCalculatedPriceLine(SalesLine _salesLine)
    {
        str scope = priceScope;
        str key = strfmt('%1-%2-%3', _salesLine.SalesId, _salesLine.LineNum, _salesLine.ItemId);

        SysGlobalObjectCache sysGlobalObjectCache = new SysGlobalObjectCache();

        sysGlobalObjectCache.insert(scope, [key], [_salesLine]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCalculatedDiscountLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the given <c>SalesLine</c> to the calculated discount cache
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record</param>
    [Hookable(false)]
    public static void addCalculatedDiscountLine(SalesLine _salesLine)
    {
        str scope = discountScope;
        str key = strfmt('%1-%2-%3', _salesLine.SalesId, _salesLine.LineNum, _salesLine.ItemId);

        SysGlobalObjectCache sysGlobalObjectCache = new SysGlobalObjectCache();

        sysGlobalObjectCache.insert(scope, [key], [_salesLine]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCacheForDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instatiates a new instance of the <c>RetailSalesOrderCalculatorCache</c> class for calculate discount cache
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record</param>
    /// <returns>A <c>RetailSalesOrderCalculatorCache</c> object</returns>
    [Hookable(false)]
    public static RetailSalesOrderCalculatorCache newCacheForDiscount(SalesLine _salesLine)
    {
        RetailSalesOrderCalculatorCache cache = new RetailSalesOrderCalculatorCache(_salesLine, false);

        return cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCacheForPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instatiates a new instance of the <c>RetailSalesOrderCalculatorCache</c> class for calculate discount cache
    /// </summary>
    /// <param name = "_salesLine">The <c>SalesLine</c> record</param>
    /// <returns>A <c>RetailSalesOrderCalculatorCache</c> object</returns>
    [Hookable(false)]
    public static RetailSalesOrderCalculatorCache newCacheForPrice(SalesLine _salesLine)
    {
        RetailSalesOrderCalculatorCache cache = new RetailSalesOrderCalculatorCache(_salesLine, true);

        return cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCalculatedLine</Name>
				<Source><![CDATA[
    private static void removeCalculatedLine(SalesLine _salesLine, str _scope)
    {
        str key = strfmt('%1-%2-%3', _salesLine.SalesId, _salesLine.LineNum, _salesLine.ItemId);

        SysGlobalObjectCache sysGlobalObjectCache = new SysGlobalObjectCache();

        sysGlobalObjectCache.remove(_scope, [key]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCachedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remmoves the given line from the cache
    /// </summary>
    /// <param name = "_salesLine">The sales line</param>
    public static void removeCachedLine(SalesLine _salesLine)
    {
        RetailSalesOrderCalculatorCache::removeCalculatedLine(_salesLine, priceScope);
        RetailSalesOrderCalculatorCache::removeCalculatedLine(_salesLine, discountScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCachedSalesLineForSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remmoves all the cached lines from the cache for a sales order.
    /// </summary>
    /// <param name = "_salesTable">The sales table</param>
    public static void removeCachedSalesLineForSalesOrder(SalesTable _salesTable)
    {
        SalesLine salesLineLocal;
        while select salesLineLocal
                where salesLineLocal.SalesId == _salesTable.SalesId
        {
            RetailSalesOrderCalculatorCache::removeCachedLine(salesLineLocal);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>