<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCacheManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCacheManager</c> class manages the Fixed Assets cache.
/// </summary>
internal class AssetCacheManager
{
    private const str PrefixForAssetId = 'Asset:';
    private const str PrefixForBookId = 'Book:';
    private const str PrefixForDataAreaId = 'Company:'; // needs not to cross the same assets in different companies
    private const str Delimiter = ';';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheAssetTrans</Name>
				<Source><![CDATA[
    internal static AssetTransTmp getCacheAssetTrans(AssetId _assetId, AssetBookId _bookId)
    {
        if (isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            return new AssetCacheScopeAssetTrans().getCacheByAssetBookWithDisabledCacheFlight(_assetId, _bookId);
        }
        else if (AssetTransTmpStaticCache::hasCurrent(_assetId, _bookId))
        {
            return AssetTransTmpStaticCache::getCacheAssetTrans(_assetId, _bookId);
        }
        else
        {
            return new AssetCacheScopeAssetTrans().getCacheByAssetBook(_assetId, _bookId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllCacheScopes</Name>
				<Source><![CDATA[
    internal static void clearAllCacheScopes()
    {
        AssetCache::clearAllScopes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValueFromAllCacheScopes</Name>
				<Source><![CDATA[
    internal static void removeValueFromAllCacheScopes(AssetId _assetId, AssetBookId _bookId)
    {
        str key = AssetCacheManager::getKeyByAssetBook(_assetId, _bookId);
        DictEnum dictEnum = new DictEnum(enumnum(AssetCacheScope));

        for (int i = dictEnum.values() - 1; i >= 0; i--)
        {
            AssetCacheScopeBase::newByScope(dictEnum.index2Value(i)).removeValue(key);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCacheAssetTrans</Name>
				<Source><![CDATA[
    internal static void removeCacheAssetTrans(AssetId _assetId, AssetBookId _bookId)
    {
        if (!isFlightEnabled(FixedAssetsConstants::DisableAssetTransTmpCacheFlight))
        {
            new AssetCacheScopeAssetTrans().removeValue(AssetCacheManager::getKeyByAssetBook(_assetId, _bookId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeCacheSplitting</Name>
				<Source><![CDATA[
    internal static void removeCacheSplitting(AssetId _assetId, AssetBookId _bookId)
    {
        new AssetCacheScopeSplitting().removeValue(AssetCacheManager::getKeyByAssetBook(_assetId, _bookId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyByAssetBook</Name>
				<Source><![CDATA[
    internal static str getKeyByAssetBook(AssetId _assetId, AssetBookId _bookId)
    {
        return PrefixForAssetId + _assetId + Delimiter + PrefixForBookId + _bookId + Delimiter + PrefixForDataAreaId + curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataAreaPostfixToKey</Name>
				<Source><![CDATA[
    internal static str addDataAreaPostfixToKey(str _key)
    {
        return _key + Delimiter + PrefixForDataAreaId + curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheSplitting</Name>
				<Source><![CDATA[
    internal static boolean getCacheSplitting(AssetId _assetId, AssetBookId _bookId)
    {
        return new AssetCacheScopeSplitting().getCacheByAssetBook(_assetId, _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheLimit</Name>
				<Source><![CDATA[
    internal static int getCacheLimit()
    {
        return new AssetCacheScopeLimit().getCacheByAssetBook('', '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>