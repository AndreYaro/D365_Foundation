<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport4SIF_2014</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayReport4SIF_2014 extends RPayReport4SIF
{
    Set             hamfulWorkCondClassSet, dangerousWorkCondClassSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcStaffPositions</Name>
				<Source><![CDATA[
    protected void calcStaffPositions()
    {
        RHRMStaffList           rhrmStaffList;
        RHRMStaffListHistory    rhrmStaffListHistory,
                                rhrmStaffListHistoryExists;
        TransDate               transDate;
        RHRMStaffListFactor     totalFactor,
                                totalFactorCertified,
                                totalFactorCertifiedHarmful,
                                totalFactorCertifiedDangerous;
        int                     totalEmplNotAccetable,
                                totalEmplNotAccetableWithMedical;
        container               staffListEmploy;
        boolean                 isHarmful, isDangerous;

        ;
        transDate = dateStartYr(payYear) - 1;
        while select RecId from rhrmStaffList
        exists join rhrmStaffListHistoryExists
            where rhrmStaffListHistoryExists.StaffListRefRecId == rhrmStaffList.RecId &&
                  rhrmStaffListHistoryExists.StartDate <= transDate
        {
            rhrmStaffListHistory = RHRMStaffListHistory::findLast(rhrmStaffList.RecId, transDate);

            totalFactor += rhrmStaffListHistory.StaffListFactor;

            if ((RHRMParameters::find().WorkCondClassRate &&
                 rhrmStaffListHistory.WorkCondClass != RHRMParameters::workCondClassDefValue())||
                rhrmStaffListHistory.Class          != RHRMClassOfWorkConditions::None)
            {
                totalFactorCertified += rhrmStaffListHistory.StaffListFactor;

                if (RHRMParameters::find().WorkCondClassRate &&
                    rhrmStaffListHistory.WorkCondClass != RHRMParameters::workCondClassDefValue())
                {
                    isHarmful = hamfulWorkCondClassSet.in(rhrmStaffListHistory.WorkCondClass);
                    isDangerous = dangerousWorkCondClassSet.in(rhrmStaffListHistory.WorkCondClass);
                }
                else
                {
                    isHarmful = rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Harmful;
                    isDangerous = rhrmStaffListHistory.Class == RHRMClassOfWorkConditions::Dangerous;
                }

                if (isHarmful || isDangerous)
                {
                    staffListEmploy = this.getStaffListEmploy(rhrmStaffList.RecId, transDate);

                    totalEmplNotAccetable            += conpeek(staffListEmploy, 1);
                    totalEmplNotAccetableWithMedical += conpeek(staffListEmploy, 2);

                    if (isHarmful)
                    {
                        totalFactorCertifiedHarmful += rhrmStaffListHistory.StaffListFactor;
                    }
                    else
                    {
                        totalFactorCertifiedDangerous += rhrmStaffListHistory.StaffListFactor;
                    }
                }
            }
        }

        staffPositionsData = [totalFactor,
                totalFactorCertified,
                totalFactorCertifiedHarmful,
                totalFactorCertifiedDangerous,
                totalEmplNotAccetable,
                totalEmplNotAccetableWithMedical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    protected void checkAndPrepareParameters()
    {
        str hamfulWorkCondClass, dangerousWorkCondClass;

        super();

        hamfulWorkCondClass     = RPayReportTuningTable::templateReportParameter(this.getReportName(), 29, "@RUP2170", "@SYP4881296");
        dangerousWorkCondClass  = RPayReportTuningTable::templateReportParameter(this.getReportName(), 30, "@RUP2170", "@SYP4881297");

        hamfulWorkCondClassSet = this.getSetOfWorkCondClass(hamfulWorkCondClass);
        dangerousWorkCondClassSet = this.getSetOfWorkCondClass(dangerousWorkCondClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewWorkCondClassSet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Set getNewWorkCondClassSet()
    {
        return new Set(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    protected RPayReportName getReportName()
    {
        return RPayReportName::RPayReport4SIF_2014;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOfWorkCondClass</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Set getSetOfWorkCondClass(Range _elementsRange)
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryRun                queryRun;
        RPayRateEnumValue       rPayRateEnumValue;
        Set                     set = this.getNewWorkCondClassSet();

        qbds = query.addDataSource(tablenum(RPayRateEnumValue));
        qbds.addRange(fieldnum(RPayRateEnumValue, RefRateCode)).value(queryvalue(RHRMParameters::workCondClassRateRefRecId()));
        qbds.addRange(fieldnum(RPayRateEnumValue, Element)).value(_elementsRange);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            rPayRateEnumValue = queryRun.get(tablenum(RPayRateEnumValue));

            set.add(rPayRateEnumValue.Element);
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        hamfulWorkCondClassSet = this.getNewWorkCondClassSet();
        dangerousWorkCondClassSet = this.getNewWorkCondClassSet();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceName</Name>
				<Source><![CDATA[
    protected str resourceName()
    {
        return resourceStr(RPayReport4SIF_2014);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    #define.reportName('F4-FSS_2014.xlt')
    public str templateName()
    {
        return #reportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYP4881294";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayReport4SIF_2014 report = new RPayReport4SIF_2014();
        ;
        report.init();

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>