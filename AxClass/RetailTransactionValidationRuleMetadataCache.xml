<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationRuleMetadataCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionValidationRuleMetadataCache</c> class caches to avoid calling reflection APIs frequently.
/// </summary>
/// <remarks>
/// This API will filter out disabled rules.
/// </remarks>
internal final class RetailTransactionValidationRuleMetadataCache
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    internal const GlobalObjectCacheScope ValidationRuleCacheScope = classStr(RetailTransactionValidationRuleMetadataCache);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLineLevelRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of metadata objects for all line validation rules.
    /// </summary>
    /// <returns>A list of metadata objects for all line validation rules.</returns>
    public static List getLineLevelRules()
    {
        return RetailTransactionValidationRuleMetadataCache::getRulesCached(RetailTransactionValidationRuleType::LineLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionLevelRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of metadata objects for all transaction-level validation rules.
    /// </summary>
    /// <returns>A list of metadata objects for all transaction-level validation rules.</returns>
    public static List getTransactionLevelRules()
    {
        return RetailTransactionValidationRuleMetadataCache::getRulesCached(RetailTransactionValidationRuleType::TransactionLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Force the cache to be flushed.
    /// </summary>
    public static void flushCache()
    {
        SysGlobalObjectCache validationCache = new SysGlobalObjectCache();
        validationCache.clear(ValidationRuleCacheScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of metadata objects for all line validation rules.
    /// </summary>
    /// <returns>A list of metadata objects for all line validation rules.</returns>
    /// <remarks>
    /// This method skips caching and filters out disabled rules.
    /// </remarks>
    public static List getRulesNoCache(RetailTransactionValidationRuleType _ruleType)
    {
        List filteredListOfRules = new List(Types::Class);

        List allRules = RetailTransactionValidationRuleMetadataLoader::getRulesMetadata();
        ListEnumerator allRulesEnumerator = allRules.getEnumerator();

        while (allRulesEnumerator.moveNext())
        {
            RetailTransactionValidationRuleMetadata metadata = allRulesEnumerator.current();

            if (metadata.getRuleType() == _ruleType)
            {
                if (metadata.isEnabled())
                {
                    filteredListOfRules.addEnd(metadata);
                }
                else
                {
                    // If the rule was manually disabled, skip it, but log to telemetry that we're doing so.
                    eventSource.EventWriteTransactionValidationRuleManuallyDisabled(classId2Name(metadata.getClassId()), metadata.getMethodName());
                }
            }
        }

        return filteredListOfRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    internal static str getCacheKey(DataAreaId _dataAreaId, RetailTransactionValidationRuleType _ruleType)
    {
        return strFmt('%1|%2', _dataAreaId, enum2Symbol(enumNum(RetailTransactionValidationRuleType), _ruleType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRulesCached</Name>
				<Source><![CDATA[
    private static List getRulesCached(RetailTransactionValidationRuleType _ruleType)
    {
        SysGlobalObjectCache globalObjectCache = classFactory.globalObjectCache();

        str cacheKey = RetailTransactionValidationRuleMetadataCache::getCacheKey(curExt(), _ruleType);

        container validationContainer = globalObjectCache.find(ValidationRuleCacheScope, [cacheKey]);

        if (validationContainer != conNull())
        {
            return List::create(validationContainer);
        }
        else
        {
            List listOfRules = RetailTransactionValidationRuleMetadataCache::getRulesNoCache(_ruleType);

            globalObjectCache.insert(ValidationRuleCacheScope, [cacheKey], listOfRules.pack());

            return listOfRules;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>