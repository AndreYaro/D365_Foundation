<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrCapabilityResourceContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class was introduced when refactoring applicable capability resources calculation
/// to use a temporary table instead of separate exists joins for each capability resource,
/// which was causing errors for cases with many capabilities.
/// 
/// Specific reason for having such kind of a context is that
/// existing code would not allow to pass the map and the buffer as arguments
/// to existing methods without breaking customers.
/// 
/// The context is instantiated in a using block, allowing the calling code to access it through the static instance() method.
/// If the instance is not null, then the temp table is used instead of old logic.
/// 
/// Additionally, for incapsulation purposes this class also holds methods to fill the map and insert records into the temp table from the map.
/// </summary>
internal final class WrkCtrCapabilityResourceContext implements System.IDisposable
{
    private static boolean isCapabilityResourceTempTableV2FlightEnabled = WrkCtrApplicableResourcesCapabilityResourceTempTableV2Flight::instance().isEnabled();
   
    private Map resourceByCapabilityId = null;
    private WrkCtrResourceTmp wrkCtrResourceTmp = null;
    
    private static WrkCtrCapabilityResourceContext instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    internal static WrkCtrCapabilityResourceContext newStandard(WrkCtrResourceTmp _wrkCtrResourceTmp)
    {
        if (instance == null)
        {
            instance = new WrkCtrCapabilityResourceContext();
            instance.wrkCtrResourceTmp = _wrkCtrResourceTmp;
            instance.resourceByCapabilityId = new Map(Types::Int64, Types::Class);
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static WrkCtrCapabilityResourceContext instance()
    {
        return isCapabilityResourceTempTableV2FlightEnabled ? instance : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCapabilityRequirement</Name>
				<Source><![CDATA[
    internal void addCapabilityRequirement(
        WrkCtrActivityCapabilityRequirement _capabilityRequirement,
        TransDate _searchFromDate,
        TransDate _searchToDate)
    {
        WrkCtrCapabilityResource capabilityResource;
        while select validTimeState(_searchFromDate, _searchToDate) capabilityResource
            where capabilityResource.Capability == _capabilityRequirement.Capability
                && capabilityResource.Level >= _capabilityRequirement.MinimumLevelNeeded
        {
            if (!resourceByCapabilityId.exists(capabilityResource.Capability))
            {
                resourceByCapabilityId.add(capabilityResource.Capability, new Set(Types::Container));
            }

            Set resources = resourceByCapabilityId.lookup(capabilityResource.Capability);
            resources.add([capabilityResource.WrkCtrId, capabilityResource.ResourceDataAreaId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillApplicableCapabilityResourcesTempTable</Name>
				<Source><![CDATA[
    internal void fillApplicableCapabilityResourcesTempTable()
    {
        if (resourceByCapabilityId.elements())
        {
            SetEnumerator applicableCapabilityResources = this.applicableCapabilityResources();
            RecordInsertList capabilityResourceTmpInsertList = new RecordInsertList(tableNum(WrkCtrResourceTmp), true, true, true, false, false, wrkCtrResourceTmp);
                    
            while (applicableCapabilityResources.moveNext())
            {
                Container capabilityResource = applicableCapabilityResources.current();
                wrkCtrResourceTmp.WrkCtrId = conPeek(capabilityResource, 1);
                wrkCtrResourceTmp.ResourceDataAreaId = conPeek(capabilityResource, 2);
                capabilityResourceTmpInsertList.add(wrkCtrResourceTmp);
            }

            capabilityResourceTmpInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableCapabilityResources</Name>
				<Source><![CDATA[
    private SetEnumerator applicableCapabilityResources()
    {
        MapEnumerator resourceByCapabilityIdEnumerator = resourceByCapabilityId.getEnumerator();
        resourceByCapabilityIdEnumerator.moveNext();

        Set applicableCapabilityResources = resourceByCapabilityIdEnumerator.currentValue();
        while (resourceByCapabilityIdEnumerator.moveNext())
        {
            Set capabilityResources = resourceByCapabilityIdEnumerator.currentValue();
            applicableCapabilityResources = Set::intersection(applicableCapabilityResources, capabilityResources);
        }

        return applicableCapabilityResources.getEnumerator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>