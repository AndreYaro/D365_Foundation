<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustCategoryTreeDatasource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRCustCategoryTreeDatasource</c> class extends <c>CCFormTreeDatasource</c> for use with customer categories.
/// </summary>
class MCRCustCategoryTreeDatasource extends CCFormTreeDatasource
{
    MCRCustCategoryHierarchy        currentSelectedCategoryHierarchy;
    ImageListAppl_EcoResCategory    ecoresImageList;
    Boolean                         showCustomers;

    QueryBuildRange                 formDataSourceRange;
    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the subtree nodes in the tree control.
    /// </summary>
    /// <param name="_parentIdx">
    ///    The index of the item in the tree for which to build the subtree.
    /// </param>
    /// <param name="_parentVaue">
    ///    The category ID of the selected node.
    /// </param>
    /// <param name="_rebuild">
    ///    A boolean value that indicates whether to rebuild the tree from nothing.
    /// </param>
    /// <returns>
    ///    The index of the currently selected item in the tree.
    /// </returns>
    int buildSubTree(int _parentIdx, anytype _parentVaue, boolean _rebuild = false)
    {
        FormTreeItem    formTreeItem;
        int             children;
        int             idx, idxCurrentRecord;
        int             hdl;
        boolean         stateExpandedOnce, expandBranch;
        MCRCustCategory mcrCustCategory, mcrCustParentCategory;
        int64           filterRecordsCount = 0;
        int             idxRoot            = tree.getRoot();
        boolean         isAMatch           = false;

        tree.lockWindowUpdate(true);

        if (!_rebuild)
        {
            formTreeItem = tree.getItem(_parentIdx);
            if (formTreeItem)
            {
                stateExpandedOnce = formTreeItem.stateExpandedOnce();
            }
        }

        if (_rebuild || !stateExpandedOnce)
        {
            if (_rebuild) // delete existing subtree
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    ttsBegin;

                    tree.delete(hdl);
                    ttsCommit;

                    hdl = tree.getChild(_parentIdx);
                }
            }
            [SelectedData] = selectionStack.pop();

            children = 0;

            mcrCustParentCategory    = MCRCustCategory::find(_parentVaue);

            // refresh this node
            formTreeItem = tree.getItem(_parentIdx);
            if (formTreeItem)
            {
                formTreeItem.text(this.itemTextEx(mcrCustParentCategory.RecId, this.itemDescription(mcrCustParentCategory), ''));
                tree.setItem(formTreeItem);
            }

            mcrCustCategory          = mcrCustParentCategory.getChildren(false,
                                                                        true,
                                                                        showCustomers);

            while (mcrCustCategory)
            {
                isAMatch     = false;
                expandBranch = false;
                formTreeItem = new FormTreeItem(this.itemTextEx(mcrCustCategory.RecId, this.itemDescription(mcrCustCategory), ''),
                                                this.image(),
                                                (mcrCustCategory.getChildCount(true) != 0),
                                                mcrCustCategory.RecId);

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                formTreeItem = tree.getItem(idx);
                formTreeItem.overlayImage(this.overlayImage(mcrCustCategory));
                tree.setItem( formTreeItem );

                if (basicRecId == mcrCustCategory.RecId)
                {
                    idxCurrentRecord = idx;
                }

                children++;

                if (selectionStack.qty())
                {
                    if (mcrCustCategory.RecId == SelectedData)
                    {
                        tree.expand(idx, FormTreeExpand::Expand);
                    }
                }
                else
                {
                    if (mcrCustCategory.RecId == SelectedData)
                    {
                        selectIdx = idx;
                    }
                }

                if (expandBranch)
                {
                    tree.expand(idx, FormTreeExpand::Expand);
                }

                next mcrCustCategory;
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            formTreeItem.stateExpandedOnce(true);
            tree.setItem(formTreeItem);
        }
        tree.lockWindowUpdate(false);

        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a node in the current customer category tree.
    /// </summary>
    /// <param name="_custRecID">
    ///     The ID of the customer this relates to the catagory. optional.
    /// </param>
    /// <param name="_origName">
    ///     The name to be given to the node. optional.
    /// </param>
    public void create(RecId _custRecID = 0, EcoResCategoryName _origName = '')
    {
        int                     idx = tree.getSelection();
        int                     idxCurrentRecord;
        int                     children;
        MCRCustCategory         mcrCustCategory;
        MCRCustCategory         mcrCustParentCategory;
        FormTreeItem            formTreeItem;
        Common                  childRecord;

        if (!formDataSource.leaveRecord())
        {
            return;
        }

        tree.expand(idx, FormTreeExpand::Expand);

        mcrCustParentCategory = MCRCustCategory::find(tree.getItem(idx).data());
        mcrCustCategory.initValue();
        mcrCustCategory.initFromParent(mcrCustParentCategory);

        mcrCustCategory.Customer = _custRecID;
        mcrCustCategory.Name = _origName;
        if (!mcrCustCategory.Name)
        {
            mcrCustCategory.Name  = MCRCustCategory::findNonExistNameInHierarchy(currentSelectedCategoryHierarchy.RecId);
        }

        if (mcrCustCategory.addToHierarchy() && mcrCustCategory.RecId)
        {
            formDataSource.research();
            basicRecId = mcrCustCategory.RecId;
            childRecord = mcrCustCategory;
            tree.setFocus();

            formTreeItem = tree.getItem(idx);
            children = formTreeItem.children();
            formTreeItem.children(children+1);
            formTreeItem.stateExpandedOnce(true);
            formTreeItem.data(mcrCustParentCategory.RecId);
            tree.setItem(formTreeItem);
            formTreeItem = new FormTreeItem(this.itemTextEx(childRecord.(id), this.itemDescription(childRecord), ''),
                                            this.image(),
                                            0,
                                            basicRecId);

            idxCurrentRecord = tree.addItem(idx, 0, formTreeItem);
            formTreeItem = tree.getItem(idxCurrentRecord);
            formTreeItem.overlayImage(this.overlayImage(childRecord));
            tree.setItem(formTreeItem );

            tree.select(formTreeItem.idx());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the currently selected category node.
    /// </summary>
    /// <param name="_noConfirmationDialog">
    ///    A Boolean value that indicates whether to display a confirmation dialog box. optional.
    /// </param>
    void delete(boolean _noConfirmationDialog = false)
    {
        int             idx;
        int             idxParent;
        FormTreeItem    formTreeItem;
        boolean         hasChildren;
        MCRCustCategory mcrCustCategory = null;
        container       c;
        int             counter = 1;

        if (_noConfirmationDialog || Box::yesNo("@MCR39528", DialogButton::No) == DialogButton::Yes)
        {
            // Deletion will remove the nodes from the selected list
            //  so need to store them before trying to delete and loop over the container
            idx            = tree.getFirstSelected();
            while (idx)
            {
                c += idx;
                idx = tree.getNextSelected(idx);
            }
            idx = conPeek(c, counter);

            while (counter <= conLen(c))
            {
                idxParent      = tree.getParent(idx);
                formTreeItem   = tree.getItem(idx);
                // There's a chance the last deletion deleted the next node to be removed
                //      so need to check to be sure it still exists.
                if (formTreeItem)
                {
                    hasChildren   = formTreeItem.children();

                    mcrCustCategory = MCRCustCategory::find(formTreeItem.data(), true);

                    formDataSource.reread();

                    mcrCustCategory.deleteSubTree();
                    tree.select(idxParent);

                    formDataSource.reread();
                    formDataSource.refresh();

                    if (idxParent == 0)
                    {
                        tree.deleteAll();
                        return;
                    }

                    tree.setFocus();

                    ttsBegin;
                    tree.delete(idx);
                    ttsCommit;

                    tree.select(idxParent);
                    formTreeItem    = tree.getItem(idxParent);
                    formTreeItem.children(tree.getChild((formTreeItem.idx())));
                    tree.setItem(formTreeItem);
                }
                counter++;
                idx = conPeek(c, counter);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the MCRCustCategory record that is currently
    ///     selected in the form control.
    /// </summary>
    /// <returns>
    ///     Returns the MCRCustCategory record that is currently
    ///     selected in the form control.
    /// </returns>
    MCRCustCategory getSelectedCategory()
    {
        MCRCustCategory mcrCustCategory;

        mcrCustCategory = MCRCustCategory::find(tree.getItem(tree.getSelection()).data());
        return mcrCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the image needed depending on the type of category element represented by the current.
    /// record.
    /// </summary>
    /// <param name="_childRecord">
    ///     The current child node record.
    /// </param>
    /// <returns>
    ///     The ID of the image.
    /// </returns>
    public int image(Common _childRecord = null)
    {
        MCRCustCategory mcrCustCategory;

        if (_childRecord.TableId == tableNum(MCRCustCategory))
        {
            mcrCustCategory = _childRecord as MCRCustCategory;
            if (mcrCustCategory.Customer)
            {
                // Both root & ancestor categories share the same icon
                ecoresImageList.add(#ImageCustomer);
                return ecoresImageList.image(#ImageCustomer);
            }
            else
            {
                // Both root & ancestor categories share the same icon
                ecoresImageList.add(#ImageSetupValidationAssignCategories);
                return ecoresImageList.image(#ImageSetupValidationAssignCategories);
            }
        }
        else
        {
            // Both root & ancestor categories share the same icon
            ecoresImageList.add(#ImageSetupValidationAssignCategories);
            return ecoresImageList.image(#ImageSetupValidationAssignCategories);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of images referenced by the ID retrieved by the
    ///    <c>MCRCustCategoryTreeDatasource.image</c> method.
    /// </summary>
    /// <returns>
    ///    The image list.
    /// </returns>
    public Imagelist imageList()
    {
        return ecoresImageList.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTextEx</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the tree node item text to be displayed.
    /// </summary>
    /// <param name="_idTxt">
    ///    The category ID text.
    /// </param>
    /// <param name="_descriptionTxt">
    ///    The current category name text.
    /// </param>
    /// <param name="_friendlyName">
    ///    The current category friendlyName text.
    /// </param>
    /// <returns>
    ///    The concatenated tree node item text for display purposes.
    /// </returns>
    /// <remarks>
    ///    This method is used to control whether the commodity code will be displayed together with the
    ///    category name in the tree view control.
    /// </remarks>
    str itemTextEx(anytype _idTxt, anytype _descriptionTxt, str _friendlyName)
    {
        str ret;
        ret = this.itemText(_idTxt, _descriptionTxt);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads position in tree control.
    /// </summary>
    public void loadPosition()
    {
        Integer         version;

        if (useLastValue)
        {
            if (xSysLastValue::getLast(this))
                [version, #CurrentList] = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                                                 this.lastValueUserId(),
                                                                 this.lastValueType(),
                                                                 this.lastValueElementName());
        }

        // This is the reason to overload CCFormTreeDatasource.loadPosition(),
        // since the inherited code causes
        // AnyType RecId data to change type to String.
        if (version != #CurrentVersion)
        {
            SelectedData = MCRCustCategory::getRoot(currentSelectedCategoryHierarchy.RecId).RecId;
        }

        this.getRelations(SelectedData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class <c>MCRCustCategoryTreeDatasource</c> and also <c>ImageListAppl_EcoResCategory</c> class.
    /// </summary>
    /// <param name="_formDataSource">
    /// An instance of formdataSource.
    /// </param>
    /// <param name="_formTreeControl">
    /// An instance of tree control.
    /// </param>
    /// <param name="_id">
    /// The ID of the node.
    /// </param>
    /// <param name="_parentId">
    /// The parent ID of the node.
    /// </param>
    /// <param name="_txtField">
    /// Text field.
    /// </param>
    /// <param name="_showIdInDescription">
    /// Boolean value to show ID in the description of nodes.
    /// </param>
    /// <param name="_useLastValue">
    /// Boolean value to use last saved values.
    /// </param>
    /// <param name="_id2">
    /// The ID of the node.
    /// </param>
    /// <param name="_mcrCustCategoryHierarchy">
    /// An instance of <c>MCRCustCategoryHierarchy</c>.
    /// </param>
    /// <param name="_sortField">
    /// The field to use for sorting.
    /// </param>
    /// <param name="_showCustomers">
    /// Boolean value to show customers; optional.
    /// </param>
    public void new(FormDataSource _formDataSource,
                    FormTreeControl _formTreeControl,
                    FieldId _id,
                    FieldId _parentId,
                    anytype _txtField,
                    boolean _showIdInDescription,
                    boolean _useLastValue,
                    FieldId _id2,
                    MCRCustCategoryHierarchy         _mcrCustCategoryHierarchy,
                    FieldId _sortField = fieldNum(EcoResCategory, NestedSetLeft),
                    boolean _showCustomers = true)
    {
        MCRCustCategory  mcrCustCategory;
        Query           query = _formDataSource.query();
        #DEFINE.RECID('RecId')

        currentSelectedCategoryHierarchy = _mcrCustCategoryHierarchy;
        ecoresImageList                  = new ImageListAppl_EcoResCategory();

        query.dataSourceTable(mcrCustCategory.TableId).clearRanges();
        formDataSourceRange = query.dataSourceTable(mcrCustCategory.TableId).findRange(fieldName2id(mcrCustCategory.TableId, #RECID));
        if (!formDataSourceRange)
        {
            formDataSourceRange = query.dataSourceTable(mcrCustCategory.TableId).addRange(fieldName2id(mcrCustCategory.TableId, #RECID));
        }

        this.parmShowCustomers(_showCustomers);

        super( _formDataSource, _formTreeControl, _id, _parentId, _txtField, _showIdInDescription, _useLastValue, _id2, _sortField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the overlay image needed depending on whether the category is active.
    /// </summary>
    /// <param name="_childRecord">
    ///     The current childe node record.
    /// </param>
    /// <returns>
    ///     The ID of the overlay image.
    /// </returns>
    int overlayImage(Common _childRecord)
    {
        int            ret            = 0;
        MCRCustCategory mcrCustCategory = _childRecord;
        #resAppl

        if (!mcrCustCategory.IsActive)
        {
            ret = ecoresImageList.image(#Image_NotOK);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowCustomers</Name>
				<Source><![CDATA[
    protected boolean parmShowCustomers(boolean _showCustomers = showCustomers)
    {
        showCustomers = _showCustomers;

        return showCustomers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the form data source query whenever the current selection in the tree changes.
    /// </summary>
    /// <param name="_oldItem">
    ///    The previously selected item. This parameter has been declared for this method on a base class but
    ///    is not used here.
    /// </param>
    /// <param name="_newItem">
    ///    The item now selected.
    /// </param>
    public void selectionChanged(FormTreeItem _oldItem, FormTreeItem _newItem)
    {
        selectedData = _newItem.data();
        if (selectedData)
        {
            formDataSourceRange.value(strFmt('%1', selectedData));
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanging</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes the form data source query whenever the current selection in the tree is changing.
    /// </summary>
    /// <param name="_oldItem">
    ///    The current selected item.
    /// </param>
    /// <param name="_newItem">
    ///    The item now being selected.
    /// </param>
    /// <param name="_how">
    ///    How the new item is being selected.
    /// </param>
    /// <returns>
    ///    true if the selection change should be vetoed; otherwise, false.
    /// </returns>
    public boolean selectionChanging(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
    {
        boolean ret  = !formDataSource.leaveRecord();
        SelectedData = _oldItem.data();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasourceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets datasource status.
    /// </summary>
    /// <param name="idx">
    /// The index.
    /// </param>
    public void setDatasourceStatus(int idx)
    {
        super(idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the tree nodes in the tree control.
    /// </summary>
    /// <param name="_idx">
    ///     The item indicating the subtree to be updated. By default the entire tree is updated.
    /// </param>
    /// <param name="_updateAncestors">
    ///     A Boolean value that indicates whether to update its ancestors; optional.
    /// </param>
    void updateTree(int _idx = 0, boolean _updateAncestors = false)
    {
        int             idx = _idx;
        int             selectedIdx;
        FormTreeItem    formTreeItem = tree.getItem(_idx);
        MCRCustCategory  specifiedRecord, currentRecord;

        tree.lockWindowUpdate(true);

        if (!_idx || !formTreeItem || !formTreeItem.data())
        {
            idx = tree.getRoot();
            formTreeItem = tree.getItem(idx);
        }

        selectedIdx     = idx;
        specifiedRecord = MCRCustCategory::find(tree.getItem(idx).data());
        currentRecord   = specifiedRecord;

        while (idx &&
                (currentRecord.NestedSetLeft >= specifiedRecord.NestedSetLeft
                    && currentRecord.NestedSetLeft <= specifiedRecord.NestedSetRight) )
        {
            formTreeItem = tree.getItem(idx);
            formTreeItem.overlayImage(this.overlayImage(currentRecord));
            tree.setItem( formTreeItem );

            idx = tree.getNextVisible(idx);
            if (idx)
            {
                currentRecord = MCRCustCategory::find(tree.getItem(idx).data());
            }
        }

        idx = tree.getParent(selectedIdx);
        while (_updateAncestors && idx)
        {
            formTreeItem  = tree.getItem(idx);
            currentRecord = MCRCustCategory::find(tree.getItem(idx).data());

            formTreeItem.overlayImage(this.overlayImage(currentRecord));
            tree.setItem( formTreeItem );
            idx = tree.getParent(idx);
        }

        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>