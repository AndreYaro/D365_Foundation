<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsReservation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsReservation</c> class is used to reserve/unreserve inventory items.
/// </summary>
public class WhsReservation
{
    WHSReservationRemoveHistory reserveHistory;
    boolean                     workExists;
    boolean                     isStatusChange;
    boolean                     onlyReserveOnWHSEnabledWarehouses;    
    
    private InventTransId       primaryInventTransId;
    private WHSReservationRemovalStrategyType reservationRemovalStrategyType;

    private boolean inventTransTypeSalesRefactoringFlightIsEnabled = WHSInventTransTypeSalesRefactoringFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmReservationRemovalStrategyType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final WHSReservationRemovalStrategyType parmReservationRemovalStrategyType(WHSReservationRemovalStrategyType _reservationRemovalStrategyType = reservationRemovalStrategyType)
    {
        reservationRemovalStrategyType = _reservationRemovalStrategyType;

        return reservationRemovalStrategyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final InventTransRefId parmPrimaryInventTransId(InventTransId _primaryInventTransId = primaryInventTransId)
    {
        primaryInventTransId = _primaryInventTransId;

        return primaryInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTransForAnyTransIdDifferentThanInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventHandlingQty findAndReduceReservedPhysicalTransForAnyTransIdDifferentThanInventTransId(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnReserve,
        InventTransId       _inventTransId)
    {
        InventHandlingQty qty = _qtyToUnReserve;

        if (qty <= 0)
        {
            return qty;
        }

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        while select inventTrans
            order by inventTrans.DateExpected desc
            where inventTrans.ItemId        == _itemId
                && inventTrans.StatusIssue  == StatusIssue::ReservPhysical
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSWork
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSContainer
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSQuarantine
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSOrderCommittedReservation // Order-committed reservation will be adjusted if necessary when an originator reservation is decreased. What's more Reducing Order-committed reservation will not increase physical availability on an above location level, we should reduce sales order line (for example) reservation.
                    && InventTransOrigin.InventTransId      != _inventTransId
                #WHSInventDimExistsJoin(inventTrans.inventdimId, inventDim, _inventDim)
        {
            qty = this.removeReservedPhysical(inventTrans, qty, _inventDim);

            if (qty == 0)
            {
                break;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReservedOrderedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds reserved ordered transactions, given an item and inventory dimensions.
    /// </summary>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimension identifier.
    /// </param>    
    /// <param name="_qtyToUnreserve">
    ///     The quantity to attempt to unreserve.
    /// </param>
    /// <returns>
    ///     Returns the remaining quantity to unreserve.
    /// </returns>
    private InventHandlingQty findReservedOrderedTrans(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnreserve)
    {
        InventHandlingQty   qty;
        InventTrans         inventTrans;
        InventTransOrigin   sourceTransOrigin;
        InventDim           inventDim;

        qty = _qtyToUnreserve;

        sourceTransOrigin = InventTransOrigin::findByInventTransId(reserveHistory.SourceTransId);

        while select inventTrans
            order by inventTrans.DateExpected desc
            where inventTrans.ItemId                        == _itemId
                && inventTrans.ValueOpen                    == InventTransOpen::Yes
                && inventTrans.StatusReceipt                == StatusReceipt::None
                && inventTrans.StatusIssue                  == StatusIssue::ReservOrdered
                && inventTrans.InventTransOrigin            != sourceTransOrigin.RecId
                && inventTrans.MarkingRefInventTransOrigin  == 0
            #WHSInventDimExistsJoin(inventTrans.inventdimId, inventDim, _inventDim)
        {
            qty = this.removeReservedOrdered(inventTrans, qty);

            if (qty == 0)
            {
                break;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds reserved physical transactions, given an item and inventory dimensions and reduces it by specified quantity.
    ///     The method will prioritize unreserval from a primary inventory transaction id if it is set (as class field).
    /// </summary>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimension identifier.
    /// </param>
    /// <param name="_qtyToUnreserve">
    ///     The quantity to attempt to unreserve.
    /// </param>
    /// <returns>
    ///     Returns the remaining quantity to unreserve.
    /// </returns>
    private InventHandlingQty findAndReduceReservedPhysicalTrans(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnreserve)
    {        
        InventHandlingQty qty = _qtyToUnreserve;

        
        if (primaryInventTransId)
        {
            WHSReservationRemovalStrategy strategy =
                WHSReservationRemovalStrategyFactory::newFromReservationRemovalStrategy(reservationRemovalStrategyType, this, _itemId, _inventDim, qty);
                                
            qty = strategy.removeReservation();
        }
        else
        {
                
            qty = this.findAndReduceReservedPhysicalTransForInventDim(_itemId, _inventDim, qty);
                

            qty = this.findAndReduceReservedPhysicalTransForAnyTransId(
            _itemId,
            _inventDim,
            qty);
        }            
        

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTransForAnyTransIdInternal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventHandlingQty findAndReduceReservedPhysicalTransForAnyTransIdInternal(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnReserve)
    {
        return this.findAndReduceReservedPhysicalTransForAnyTransId(_itemId, _inventDim, _qtyToUnReserve);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTransForAnyTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds reserved physical transactions, given an item and inventory dimensions and reduces it by specified quantity.
    /// </summary>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimension identifier.
    /// </param>
    /// <param name="_qtyToUnReserve">
    ///     The quantity to attempt to unreserve.
    /// </param>
    /// <returns>
    ///     Returns the remaining quantity to unreserve.
    /// </returns>
    protected InventHandlingQty findAndReduceReservedPhysicalTransForAnyTransId(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnReserve) 
    {        
        InventHandlingQty qty = _qtyToUnReserve;

        if (qty <= 0)
        {
            return qty;
        }

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        while select inventTrans
            order by inventTrans.DateExpected desc
            where inventTrans.ItemId        == _itemId
                && inventTrans.StatusIssue  == StatusIssue::ReservPhysical
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSWork
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSContainer
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSQuarantine
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSOrderCommittedReservation // Order-committed reservation will be adjusted if necessary when an originator reservation is decreased. What's more Reducing Order-committed reservation will not increase physical availability on an above location level, we should reduce sales order line (for example) reservation.
                #WHSInventDimExistsJoin(inventTrans.inventdimId, inventDim, _inventDim)
        {
            qty = this.removeReservedPhysical(inventTrans, qty, _inventDim);

            if (qty == 0)
            {
                break;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTransForTransIdInternal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventHandlingQty findAndReduceReservedPhysicalTransForTransIdInternal(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnReserve,
        InventTransId       _inventTransId)
    {
        return this.findAndReduceReservedPhysicalTransForTransId(_itemId, _inventDim, _qtyToUnReserve, _inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTransForTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds reserved physical transactions, given an item, inventory dimensions for specified 
    ///     inventory transaction id and reduces it by specified quantity.
    /// </summary>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimension identifier.
    /// </param>
    /// <param name="_qtyToUnReserve">
    ///     The quantity to attempt to unreserve.
    /// </param>
    /// <param name="_inventTransId">
    ///     The invent transaction id for which the reservation will be reduced.
    /// </param>
    /// <returns>
    ///     Returns the remaining quantity to unreserve.
    /// </returns>
    protected InventHandlingQty findAndReduceReservedPhysicalTransForTransId(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnReserve,
        InventTransId       _inventTransId)
    {
        InventHandlingQty qty = _qtyToUnReserve;

        if (qty <= 0)
        {
            return qty;
        }

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        while select inventTrans
            order by inventTrans.DateExpected desc
            where inventTrans.ItemId       == _itemId
                && inventTrans.StatusIssue == StatusIssue::ReservPhysical
                && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSWork
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSContainer
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSQuarantine
                    && inventTransOrigin.ReferenceCategory  != InventTransType::WHSOrderCommittedReservation // Order-committed reservation will be adjusted if necessary when an originator reservation is decreased. What's more Reducing Order-committed reservation will not increase physical availability on an above location level, we should reduce sales order line (for example) reservation.
                    && InventTransOrigin.InventTransId      == _inventTransId
                #WHSInventDimExistsJoin(inventTrans.inventdimId, inventDim, _inventDim)
        {
            qty = this.removeReservedPhysical(inventTrans, qty, _inventDim);

            if (qty == 0)
            {
                break;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndReduceReservedPhysicalTransForInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds reserved physical transactions for specified inventory dimensions id
    /// and reduces it by specified quantity in the case of inventory transactions.
    /// </summary>
    private InventHandlingQty findAndReduceReservedPhysicalTransForInventDim(
        ItemId              _itemId,
        InventDim           _inventDim,
        InventHandlingQty   _qtyToUnReserve)
    {
        InventHandlingQty qty = _qtyToUnReserve;

        if (qty <= 0)
        {
            return qty;
        }

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        while select inventTrans
            order by inventTrans.DateExpected desc
            where inventTrans.ItemId         == _itemId
                && inventTrans.StatusIssue   == StatusIssue::ReservPhysical
                && inventTrans.StatusReceipt == StatusReceipt::None
                && inventTrans.inventDimId     == _inventDim.inventDimId
            exists join inventTransOrigin
                where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                    && inventTransOrigin.ReferenceCategory  == InventTransType::ProdLine
        {
            qty = this.removeReservedPhysical(inventTrans, qty, _inventDim);

            if (qty == 0)
            {
                break;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyOnWorkForReservedInventTransDeprecated</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the handling quantity tied to work.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    ///     Returns the total handling quantity tied to work.
    /// </returns>
    private InventHandlingQty getQtyOnWorkForReservedInventTransDeprecated(InventTrans _inventTrans)
    {
        WHSLoadLine         loadLine;
        SalesLine           salesLine;
        InventHandlingQty   ret;
        InventTransOrigin   inventTransOrigin;

        inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin);

        if (inventTransOrigin.ReferenceCategory == InventTransType::Sales)
        {
            salesLine = SalesLine::findInventTransId(inventTransOrigin.InventTransId);

            select sum(WorkCreatedQty) from loadLine
                where loadLine.InventTransId == inventTransOrigin.InventTransId
                   && loadLine.InventDimId == _inventTrans.inventDimId;

            ret = loadLine.WorkCreatedQty - this.fulfilledSalesQtyDeprecated(salesLine, _inventTrans.inventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfilledSalesQtyDeprecated</Name>
				<Source><![CDATA[
    private InventHandlingQty fulfilledSalesQtyDeprecated(SalesLine _salesLine, InventDimId _inventDimId = '')
    {
        InventDim inventDim = InventDim::find(_inventDimId);

        if (PdsGlobal::pdsIsCWItem(_salesLine.ItemId))
        {
            return _salesLine.pdsCWPickedInTotalPerDim(inventDim) + _salesLine.pdsCWDeliveredInTotalPerDim(inventDim);
        }

        return _salesLine.pickedInTotalInventUnitPerDim(inventDim) + _salesLine.deliveredInventInTotalPerDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyOnWorkForReservedInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the handling quantity tied to work.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The <c>InventTrans</c> record.
    /// </param>
    /// <returns>
    ///     Returns the total handling quantity tied to work.
    /// </returns>
    private InventHandlingQty calculateQtyOnWorkForReservedInventTrans(InventTrans _inventTrans)
    {
        InventHandlingQty ret;

        InventTransOrigin inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin);

        if (!this.canCalculateQtyOnWorkForReservedInventTrans(inventTransOrigin.ReferenceCategory))
        {
            return ret;
        }
        
        WHSLoadLine loadLine;
        select sum(WorkCreatedQty) from loadLine
        where loadLine.InventTransId == inventTransOrigin.InventTransId
            && loadLine.InventDimId == _inventTrans.inventDimId;

        ret = loadLine.WorkCreatedQty - this.fulfilledQty(inventTransOrigin, _inventTrans.inventDimId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateQtyOnWorkForReservedInventTrans</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal protected boolean canCalculateQtyOnWorkForReservedInventTrans(InventTransType _inventTransType)
    {
        return _inventTransType == InventTransType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfilledQty</Name>
				<Source><![CDATA[
    private InventHandlingQty fulfilledQty(InventTransOrigin _inventTransOrigin, InventDimId _inventDimId = '')
    {
        if (_inventTransOrigin.ReferenceCategory == InventTransType::Sales)
        {
            return this.fulfilledSalesQty(_inventTransOrigin, _inventDimId);
        }

        return this.fulfilledQtyDefault(_inventTransOrigin, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfilledSalesQty</Name>
				<Source><![CDATA[
    private InventHandlingQty fulfilledSalesQty(InventTransOrigin _inventTransOrigin, InventDimId _inventDimId = '')
    {
        SalesLine salesLine = SalesLine::findInventTransId(_inventTransOrigin.InventTransId);
        InventDim inventDim = InventDim::find(_inventDimId);

        if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
        {
            return salesLine.pdsCWPickedInTotalPerDim(inventDim) + salesLine.pdsCWDeliveredInTotalPerDim(inventDim);
        }

        return salesLine.pickedInTotalInventUnitPerDim(inventDim) + salesLine.deliveredInventInTotalPerDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fulfilledQtyDefault</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal protected InventHandlingQty fulfilledQtyDefault(InventTransOrigin _inventTransOrigin, InventDimId _inventDimId = '')
    {
        InventHandlingQty ret;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsStatusChange</Name>
				<Source><![CDATA[
    public boolean parmIsStatusChange(boolean _isStatusChange = isStatusChange)
    {
        isStatusChange = _isStatusChange;
        return isStatusChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyReserveOnWHSEnabledWarehouses</Name>
				<Source><![CDATA[
    public boolean parmOnlyReserveOnWHSEnabledWarehouses(boolean _onlyReserveOnWHSEnabledWarehouses = onlyReserveOnWHSEnabledWarehouses)
    {
        onlyReserveOnWHSEnabledWarehouses = _onlyReserveOnWHSEnabledWarehouses;
        return onlyReserveOnWHSEnabledWarehouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllReservedOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes all ordered reservations for a given inventory transaction.
    /// </summary>
    /// <param name="_inventTransId">
    ///     The inventory transaction identifier.
    /// </param>
    /// <returns>
    ///     Returns the total quantity unreserved.
    /// </returns>
    private InventHandlingQty removeAllReservedOrdered(InventTransId _inventTransId)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventHandlingQty   ret;

        while select inventTrans
            join  RecId, InventTransId from inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                && inventTransOrigin.InventTransId  == _inventTransId
                && inventTrans.StatusIssue          == StatusIssue::ReservOrdered
                && inventTrans.StatusReceipt        == StatusReceipt::None
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTrans.ItemId);

            this.reserveInventoryHandlingQty(inventTrans, isCWItem ? -inventTrans.PdsCWQty : -inventTrans.Qty);
            ret -= (isCWItem ? inventTrans.PdsCWQty : inventTrans.Qty);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the necessary quantity to unreserve and calls the logic to execute the unreservation process.
    /// </summary>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <param name="_inventDim">
    ///     The inventory dimension identifier.
    /// </param>
    /// <param name="_qty">
    ///     The quantity associated with the source transaction.
    /// </param>
    /// <param name="_sourceType">
    ///     The source inventory transaction type.
    /// </param>
    /// <param name="_sourceRefId">
    ///     The source reference identifier.
    /// </param>
    /// <param name="_sourceTransId">
    ///     The source transaction identifier
    /// </param>
    /// <param name="_removeReservedPhysical">
    ///     A Boolean value that indicates whether physical reservations must be removed.
    /// </param>
    /// <returns>
    ///     Returns true if either no reservations need to be removed or they were successfully removed; otherwise, false.
    /// </returns>
    public boolean removeReservation(
        ItemId              _itemId,
        InventDim           _inventDim,   // Must have Dim Id
        InventQty           _qty,         // Must be positive
        WHSSourceType       _sourceType,
        WHSSourceRefId      _sourceRefId,
        WHSSourceTransId    _sourceTransId,
        boolean             _removeReservedPhysical)
    {
        InventQty   totalAvailQty;
        InventQty   physicalAvailQty;
        InventQty   orderedAvailQty;
        InventQty   qtyToCheck;
        InventQty   qtyLeft;
        InventTable inventTable;

        ttsbegin;

        inventTable = InventTable::find(_itemId);

        // There is no need to unreserve if negative inventory is allowed.
        if (!InventModelGroup::find(inventTable.modelGroupId()).NegativePhysical)
        {
            totalAvailQty = WHSInventOnHand::getOrderedAvailHandlingQty(_itemId, 
																		_inventDim, 
																		true, 
																		false);

            physicalAvailQty = WHSInventOnHand::getPhysicalAvailHandlingQty(_itemId, _inventDim, true, false);
            orderedAvailQty = totalAvailQty - physicalAvailQty;

            // Check to see if reservation removal is necessary
            qtyToCheck = _removeReservedPhysical ? physicalAvailQty : orderedAvailQty;

            if (qtyToCheck < _qty)
            {
                qtyLeft = _qty - qtyToCheck;

                reserveHistory.ItemId = _itemId;
                reserveHistory.SourceType               = _sourceType;
                reserveHistory.SourceRefId              = _sourceRefId;
                reserveHistory.SourceTransId            = _sourceTransId;
                reserveHistory.SourceInventDimId        = _inventDim.InventDimId;
                reserveHistory.SourceQty                = _qty;
                reserveHistory.ReserveQtyToRemove       = qtyLeft;
                reserveHistory.InventQtyAvailPhysical   = physicalAvailQty;
                reserveHistory.InventQtyAvailOrdered    = totalAvailQty;

                if (_removeReservedPhysical)
                {
                    qtyLeft = this.findAndReduceReservedPhysicalTrans(_itemId, _inventDim, qtyLeft);
                }
                else
                {
                    qtyLeft = this.findReservedOrderedTrans(_itemId, _inventDim, qtyLeft);
                }

                // Throw error if work prevented reservation removal
                if (qtyLeft && workExists)
                {
                    throw error("@WAX2570");
                }
            }
        }

        ttscommit;

        return qtyLeft != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReservedOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes ordered reservations, given an inventory transaction and a total quantity to unreserve.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The <c>InventTrans</c> record from which to remove the reservation.
    /// </param>    
    /// <param name="_qtyToUnreserve">
    ///     The quantity to attempt to unreserve.
    /// </param>
    /// <returns>
    ///     Returns the remaining quantity to unreserve.
    /// </returns>
    private InventHandlingQty removeReservedOrdered(
        InventTrans         _inventTrans,
        InventHandlingQty   _qtyToUnreserve)
    {
        InventHandlingQty   qty;
        InventTransOrigin   inventTransOrigin;

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_inventTrans.ItemId);
        
        // Remove whichever is less: the transaction quantity or the theft quantity
        qty = min(_qtyToUnreserve, (isCWItem ? - _inventTrans.PdsCWQty : -_inventTrans.Qty));

        // If no qty left, skip.
        if (qty > 0)
        {
            inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin);

            ttsbegin;

            // Take away ordered reserved inventory.
            this.reserveInventoryHandlingQty(_inventTrans, qty);

            // Write history record.
            reserveHistory.InventTransId        = inventTransOrigin.InventTransId;
            reserveHistory.TransType            = inventTransOrigin.ReferenceCategory;
            reserveHistory.TransRefId           = inventTransOrigin.ReferenceId;
            reserveHistory.InventDimId          = _inventTrans.InventDimId;
            reserveHistory.RemoveOrderReserved  = qty;
            reserveHistory.insert();

            ttscommit;
        }        

        return (_qtyToUnreserve - qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeReservedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes physical reservations, given an inventory transaction and a total quantity to unreserve.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The <c>InventTrans</c> record from which to remove the reservation.
    /// </param>
    /// <param name="_qtyToUnreserve">
    ///     The quantity to attempt to unreserve.
    /// </param>
    /// <param name="_fullInventDim">
    ///     The inventory dimensions used to find inventory transaction.
    ///     Is more specific than what inventory transaction has.
    /// </param>
    /// <returns>
    ///     Returns the remaining quantity to unreserve.
    /// </returns>
    protected final InventHandlingQty removeReservedPhysical(
        InventTrans         _inventTrans,
        InventHandlingQty   _qtyToUnreserve,
        InventDim           _fullInventDim)
    {
        InventHandlingQty   qty;
        InventTransOrigin   inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin);

        // Skip if source transaction = target transaction
        if (inventTransOrigin.InventTransId != reserveHistory.SourceTransId)
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(_inventTrans.ItemId);

            // Remove whichever is less: the transaction quantity or the theft quantity
            qty = min(_qtyToUnreserve, isCWItem? -_inventTrans.PdsCWQty : -_inventTrans.Qty);

            // Check for quantity on work.  If exists, subtract from qty to be removed
            InventHandlingQty workQty = inventTransTypeSalesRefactoringFlightIsEnabled
                ? this.calculateQtyOnWorkForReservedInventTrans(_inventTrans)
                : this.getQtyOnWorkForReservedInventTransDeprecated(_inventTrans);

            if (workQty)
            {
                workExists = true;
                qty = min(qty, ((isCWItem ? -_inventTrans.PdsCWQty : -_inventTrans.Qty) - workQty));
            }

            // If no qty left, skip
            if (qty > 0)
            {
                // Specific inventory dimensions should be used when order-committed reservations are decreased.
                // So, we are putting the _fullInventDim.inventDimId value into the context which will be used by the reservation engine.
                using (WHSOrderCommittedReservationRemoveInventDimContext orderCommittedReservationRemoveInventDimContext = WHSOrderCommittedReservationRemoveInventDimContext::constructFromInventDimId(_fullInventDim.inventDimId))
                {
                    ttsbegin;

					if (isStatusChange)
					{
						reserveHistory.RemoveOrderReserved = 0;
					}
					else
					{
						// Now check for order reserved inventory.  That must be taken off as well.
						// No way to just remove physical inventory.
						reserveHistory.RemoveOrderReserved = this.removeAllReservedOrdered(inventTransOrigin.InventTransId);
					}

                    // Now take away physical inventory
                    this.reserveInventoryHandlingQty(_inventTrans, qty);  // Note a positive number removes reservations

                    // write history record
                    reserveHistory.InventTransId    = inventTransOrigin.InventTransId;
                    reserveHistory.TransType        = inventTransOrigin.ReferenceCategory;
                    reserveHistory.TransRefId       = inventTransOrigin.ReferenceId;
                    reserveHistory.InventDimId      = _inventTrans.InventDimId;
                    reserveHistory.RemoveReserveQty = qty;
                    reserveHistory.insert();

                    ttscommit;
                }
            }
            else
            {
                qty = 0;
            }
        }

        if (   qty > 0
            && WHSOrderCommittedReservationAdjustReservationContext::instance())
        {
            WHSOrderCommittedReservationAdjustReservationEntry adjustReservationEntry = new WHSOrderCommittedReservationAdjustReservationEntry(
                inventTransOrigin.InventTransId,
                _fullInventDim.inventDimId,
                qty);

            WHSOrderCommittedReservationAdjustReservationContext::instance().addAdjustReservationEntry(adjustReservationEntry);
        }

        return (_qtyToUnreserve - qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveInventory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reserves or unreserves a given quantity.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The inventory transaction record.
    /// </param>
    /// <param name="_qty">
    ///     The quantity to reserve.
    /// </param>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reserveInventoryQuantities method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public void reserveInventory(InventTrans _inventTrans, InventQty _qty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _inventTrans.ItemId);

        this.reserveInventoryQuantities(_inventTrans, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveInventoryHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reserves or unreserves a given handling quantity.
    /// </summary>
    /// <param name="_inventTrans">
    ///     The inventory transaction record.
    /// </param>
    /// <param name="_handlingQty">
    ///     The handling quantity to reserve.
    /// </param>
    [Hookable(false)]
    final public void reserveInventoryHandlingQty(InventTrans _inventTrans, InventHandlingQty _handlingQty)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), _inventTrans.ItemId))
        {
            this.reserveInventoryQuantities(_inventTrans, _handlingQty);
        }
        else
        {
            this.reserveInventory(_inventTrans, _handlingQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveInventoryQuantities</Name>
				<Source><![CDATA[
    private void reserveInventoryQuantities(InventTrans _inventTrans, InventHandlingQty _handlingQty)
    {
        InventDim               inventDim;
        InventDimParm           inventDimParm;
        InventDimParm           inventDimParmFixed;
        InventMovement          movement;
        InventUpd_Reservation   reservation;
        InventBlocking          blocking;
        boolean                 removeReservation = _handlingQty > 0;
        boolean                 isCWItem = PdsGlobal::pdsIsCWItem(_inventTrans.ItemId);

        movement = _inventTrans.inventMovement();
        inventDim = _inventTrans.inventDim();

        removeReservation = _handlingQty > 0;

        if (removeReservation
            && isStatusChange
            && movement.transType() == InventTransType::Blocking
            && inventDim.inventLocation().RemoveInventBlockingOnStatusChange)
        {
            blocking = InventBlocking::findByTransIdIssue(_inventTrans.inventTransOrigin().InventTransId, true);
            blocking.PdsCWQty   -= isCWItem ? min(blocking.PdsCWQty, _handlingQty) : 0;
            blocking.Qty        -= min(blocking.Qty, (isCWItem ?  WhsInvent::defaultCatchWeightReserveQuantity(movement.itemId(), _handlingQty) : _handlingQty));
            blocking.update();
        }
        else if (movement.transType() != InventTransType::Blocking)
        {
            inventDimParm.initFromInventDim(inventDim);
            inventDimParmFixed.initFromInventDim(inventDim);

            // Adds the location parameter to avoid reservation removing for an incorrect transaction based on criteria without location.
            if (!inventDimParm.WMSLocationIdFlag && WHSInventStatusChangeExplicitLocationFilterContext::currentExplicitLocationFilterParameter())
            {
                inventDimParm.WMSLocationIdFlag = true;
            }

            reservation = InventUpd_Reservation::newParameters(movement,
                                                               inventDim,
                                                               inventDimParm,
                                                               InventDimFixedClass::inventDimParm2InventDimFixed(inventDimParmFixed),
                                                               isCWItem ? WhsInvent::defaultCatchWeightReserveQuantity(movement.itemId(), _handlingQty) : _handlingQty,
                                                               false,
                                                               false,
                                                               isCWItem ? _handlingQty : 0,
                                                               false,
                                                               this.parmOnlyReserveOnWHSEnabledWarehouses());

            if (isStatusChange
                && removeReservation)
            {
                if (_inventTrans.StatusIssue == StatusIssue::ReservPhysical)
                {
                    reservation.parmOnlyUnReservePhysicalReserved(true);
                }

                if (movement.canBeReserved()
                    && inventDim.inventLocation().AllowMarkingReservationRemoval == WHSAllowMarkingReservationRemoval::MarkingReservation)
                {
                    // If a transaction is split, this will remove marking from the second pair-transaction with StatusIssue=OnOrder
                    reservation.parmUpdateMarkingWithAnyStatus(true);
                }
            }
            
            reservation.updateNow();            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>staticRemoveReservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the necessary logic to unreserve inventory transactions.
    /// </summary>
    /// <param name="_itemId">
    ///     The item identifier.
    /// </param>
    /// <param name="_inventDimId">
    ///     The inventory dimension identifier.
    /// </param>
    /// <param name="_qty">
    ///     The quantity associated with the source transaction.
    /// </param>
    /// <param name="_sourceType">
    ///     The source inventory transaction type.
    /// </param>
    /// <param name="_sourceRefId">
    ///     The source reference identifier.
    /// </param>
    /// <param name="_sourceTransId">
    ///     The source transaction identifier
    /// </param>
    /// <param name="_isStatusChange">
    ///     A Boolean value that indicates whether the reservation removal is directly tied to a change in inventory status.
    /// </param>
    /// <param name="_removeReservedPhysical">
    ///     A Boolean value that indicates whether physical reservations must be removed.
    /// </param>
    /// <param name="_skipStatusValidation">
    ///     A Boolean value that indicates that the status validation has already been performed and does not need to happen again.
    /// </param>
    [SysObsolete("This method is obsolete. Use staticRemoveReservationForParams instead.", false, 30\06\2018)]
    public static void staticRemoveReservation(
        ItemId              _itemId,
        InventDimId         _inventDimId, // Must exist
        InventQty           _qty,         // Must be positive
        WHSSourceType       _sourceType,
        WHSSourceRefId      _sourceRefId,
        WHSSourceTransId    _sourceTransId,
        boolean             _isStatusChange = false,
        boolean             _removeReservedPhysical = true,
        boolean             _skipStatusValidation = false)
    {
        WHSRemoveReservationParameters params = WHSRemoveReservationParameters::construct();

        params.parmItemId(_itemId);
        params.parmInventDimId(_inventDimId);
        params.parmQty(_qty);
        params.parmSourceType(_sourceType);
        params.parmSourceRefId(_sourceRefId);
        params.parmSourceTransId(_sourceTransId);
        params.parmIsStatusChange(_isStatusChange);
        params.parmRemoveReservedPhysical(_removeReservedPhysical);
        params.parmSkipStatusValidation(_skipStatusValidation);

        WhsReservation::staticRemoveReservationForParams(params);
    }

]]></Source>
			</Method>
			<Method>
				<Name>staticRemoveReservationForParams</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the necessary logic to unreserve inventory transactions.
    /// </summary>
    /// <param name = "_params">The object containing the parameters for the method.</param>
    [Hookable(false)]
    public static void staticRemoveReservationForParams(
        WHSRemoveReservationParameters _params)
    {
        WHSReservation      reservation;
        InventDim           inventDim;

        inventDim = InventDim::find(_params.parmInventDimId());

        // If a status change and status is not blank, skip (no reservation removal needed)
        // Also if a status change, check warehouse parameter
        if (!_params.parmIsStatusChange()
            || _params.parmSkipStatusValidation()
            || (!WHSInventStatus::isBlockingStatus(inventDim.InventStatusId)
                && InventLocation::find(inventDim.InventLocationId).AllowMarkingReservationRemoval >= WHSAllowMarkingReservationRemoval::Reservation))
        {
            reservation = WHSReservation::construct();
            reservation.parmIsStatusChange(_params.parmIsStatusChange());
            reservation.parmPrimaryInventTransId(_params.parmInventTransId());
            reservation.parmReservationRemovalStrategyType(_params.parmReservationRemovalStrategyType());
            reservation.removeReservation(
                _params.parmItemId(), 
                inventDim, 
                _params.parmQty(), 
                _params.parmSourceType(), 
                _params.parmSourceRefId(), 
                _params.parmSourceTransId(), 
                _params.parmRemoveReservedPhysical());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>WhsReservation</c>.
    /// </summary>
    /// <returns>A new instance of <c>WhsReservation</c>.</returns>
    public static WhsReservation construct()
    {
        return new WhsReservation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>