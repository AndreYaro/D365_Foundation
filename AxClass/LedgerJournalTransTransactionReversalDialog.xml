<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransTransactionReversalDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Journal Header provider for the transaction reversal dialog.
/// </summary>
[ExportMetadataAttribute(enumStr(TransactionReversalSourceType), TransactionReversalSourceType::LedgerJournalTrans)]
[ExportAttribute('Dynamics.AX.Application.TransactionReversalBaseDialog')]
public final class LedgerJournalTransTransactionReversalDialog extends TransactionReversalBaseDialog
{
    private LedgerJournalTable callingJournalHeader;
    private LedgerTransType callingJournalTransactionType;
    private FormRun callerForm;
    private boolean isReversingRelatedChildJournals;
    private container childrenExecutionIds;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        super();
        
        if (this.parmFormRun().args() && this.parmFormRun().args().record())
        {
            callerForm = this.parmFormRun();
            Common selectedRecord = this.parmFormRun().args().record();

            if (selectedRecord is LedgerJournalTrans)
            {
                LedgerJournalTrans callingJournalLine = selectedRecord as LedgerJournalTrans;

                callingJournalHeader = callingJournalLine.ledgerJournalTable();
                callingJournalTransactionType = callingJournalLine.TransactionType;

                if (callerForm is TransactionReversalIDialog)
                {
                    TransactionReversalIDialog reversalDialog;
                    reversalDialog = callerForm as TransactionReversalIDialog;
                    this.supportsReversingRelatedChildJournals(reversalDialog);
                }
            }
            else
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReversalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateReversalTable()
    {
        this.populateReversalTableForASingleJournal(callingJournalHeader.RecId, callingJournalHeader.JournalNum, this.getExecutionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReversalAndPopulateReversalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateReversalAndPopulateReversalTable()
    {
        if (callerForm is TransactionReversalIDialog && isReversingRelatedChildJournals)
        {
            // check to see if form is set to reverse all related journals
            TransactionReversalIDialog reversalDialog;
            reversalDialog = callerForm as TransactionReversalIDialog;

            boolean isValidReversalForSplitJournals = this.isReversalAllowedInSplitJournalScenario();

            if (isValidReversalForSplitJournals)
            {
                // do work for multiple child journals reversal
                this.populateReversalIncludingRelatedChildJournals();
                this.setDataForCallerFormWhenReversingAllRelatedJournals(reversalDialog);
            }
            return isValidReversalForSplitJournals;
        }
        
        // just do single reversal by calling super
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReversalAllowedInSplitJournalScenario</Name>
				<Source><![CDATA[
    private boolean isReversalAllowedInSplitJournalScenario()
    {
        LedgerJournalTable ledgerJournalTable;
        TransactionReversalExecutionDetail transactionReversalExecutionDetail;

        // if current selected journal is part of mass split reversal and any of the related journals is executing
        // then do not allow reversal for current selected journal
        select firstonly RecId from transactionReversalExecutionDetail
        join ledgerJournalTable
            where ledgerJournalTable.ParentJournalNum == callingJournalHeader.ParentJournalNum
               && ledgerJournalTable.Posted == NoYes::Yes
               && transactionReversalExecutionDetail.ReferenceRecId == ledgerJournalTable.RecId
               && transactionReversalExecutionDetail.ReferenceTableId == callingJournalHeader.TableId
               && transactionReversalExecutionDetail.ProcessingDate != DateTimeUtil::minValue()
               && (transactionReversalExecutionDetail.Status == TransactionReversalStatus::Processing
                || transactionReversalExecutionDetail.Status == TransactionReversalStatus::ProcessingInBatch);               

        return transactionReversalExecutionDetail.RecId == 0 ? true : checkFailed("@GeneralLedger:TransactionReversalTransactionsInReversalWarning");
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCountByExecutionId</Name>
				<Source><![CDATA[
    private int64 lineCountByExecutionId(guid _executionId)
    {
        LedgerJournalTrans ledgerJournalTrans;
        TransactionReversalExecutionDetail reversalExecutionDetail;

        select count(RecId) from ledgerJournalTrans
            exists join reversalExecutionDetail
            where ledgerJournalTrans.JournalNum == reversalExecutionDetail.JournalBatchNumber
               && ledgerJournalTrans.Voucher == reversalExecutionDetail.SubledgerVoucher
               && reversalExecutionDetail.ExecutionId == _executionId;

        return ledgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsReversingRelatedChildJournals</Name>
				<Source><![CDATA[
    private void supportsReversingRelatedChildJournals(TransactionReversalIDialog _reversalDialog)
    {
        if (!LedgerJournalReverseAllChildrenFlight::instance().isEnabled())
            return;

        Counter postedSiblingsToBeReversed = callingJournalHeader.getPostedSiblingsCount();
        _reversalDialog.setRelatedSplitJournalsToBeReversedCount(postedSiblingsToBeReversed);
        isReversingRelatedChildJournals = postedSiblingsToBeReversed > 0 ? true : false;
        _reversalDialog.isReversingSplitJournals(isReversingRelatedChildJournals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataForCallerFormWhenReversingAllRelatedJournals</Name>
				<Source><![CDATA[
    private void setDataForCallerFormWhenReversingAllRelatedJournals(TransactionReversalIDialog _callerForm)
    {
        _callerForm.setRelatedSplitJournalsToBeReversedVoucherCount(this.getTransactionCountForAllRelatedSplitJournals());
        _callerForm.setExecutionIdsMapWithJournalLineCount(this.getMapForAllRelatedJournalsExecutionIdsAndLineCount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapForAllRelatedJournalsExecutionIdsAndLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map for each execution id and their line count.
    /// </summary>
    /// <returns>A map of execution ids and the related line count.</returns>
    private Map getMapForAllRelatedJournalsExecutionIdsAndLineCount()
    {
        Map lineCountsAllRelated = new Map(Types::Guid, Types::Int64);
        for (int i = 1; i <= conLen(childrenExecutionIds); i++)
        {
            guid currentExecutionId = conPeek(childrenExecutionIds, i);
            lineCountsAllRelated.insert(currentExecutionId, this.lineCountByExecutionId(currentExecutionId));
        }
        return lineCountsAllRelated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCountForAllRelatedSplitJournals</Name>
				<Source><![CDATA[
    private Counter getTransactionCountForAllRelatedSplitJournals()
    {
        Counter transCountAllRelated = 0;
        for (int i = 1; i <= conLen(childrenExecutionIds); i++)
        {
            transCountAllRelated += this.getTransactionCountByExecutionId(conPeek(childrenExecutionIds, i));
        }
        return transCountAllRelated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCountByExecutionId</Name>
				<Source><![CDATA[
    private int getTransactionCountByExecutionId(guid _executionId)
    {
        TransactionReversalExecutionDetail reversalExecutionDetail;

        select count(RecId) from reversalExecutionDetail
            where reversalExecutionDetail.ExecutionId == _executionId;

        return reversalExecutionDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReversalIncludingRelatedChildJournals</Name>
				<Source><![CDATA[
    private void populateReversalIncludingRelatedChildJournals()
    {
        childrenExecutionIds = conNull();
        LedgerJournalTable ledgerJournalTable;
        while select RecId, JournalNum from ledgerJournalTable
            where ledgerJournalTable.ParentJournalNum == callingJournalHeader.ParentJournalNum
            && ledgerJournalTable.Posted == NoYes::Yes
            && ledgerJournalTable.JournalNum != callingJournalHeader.JournalNum
        {
            guid newExecutionId = newGuid();
            childrenExecutionIds += newExecutionId;
            this.populateReversalTableForASingleJournal(ledgerJournalTable.RecId, ledgerJournalTable.JournalNum, newExecutionId);
        }
        // include currently selected journal too
        this.populateReversalTableForASingleJournal(callingJournalHeader.RecId, callingJournalHeader.JournalNum, this.getExecutionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReversalTableForASingleJournal</Name>
				<Source><![CDATA[
    private void populateReversalTableForASingleJournal(RefRecId _journalRecId, LedgerJournalId _journalNum, guid _executionId)
    {
        TransactionReversalExecutionDetail reversalExecutionDetail;
        TransactionReversalTrans transactionReversalTrans;
        LedgerJournalTrans ledgerJournalTrans;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;

        // Stage known data for use in set-based insert statement
        int processing = enum2int(TransactionReversalStatus::Waiting);
        RefRecId refRecId = _journalRecId;
        int journalHeaderTableId = tableNum(LedgerJournalTable);
        LedgerJournalId journalNum = _journalNum;
        guid localExecutionId = _executionId;

        ttsbegin;

        insert_recordset reversalExecutionDetail(
            Status,
            ReferenceTableId,
            ReferenceRecId,
            JournalBatchNumber,
            ExecutionId,
            SubledgerVoucher,
            TransactionDate,
            JournalCategory)
        select
            processing,
            journalHeaderTableId,
            refRecId,
            journalNum,
            localExecutionId,
            Voucher,
            TransDate,
            callingJournalTransactionType
        from ledgerJournalTrans
            group by ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate
                where ledgerJournalTrans.JournalNum == journalNum
            join generalJournalEntry
                group by generalJournalEntry.SubledgerVoucherDataAreaId, generalJournalEntry.SubledgerVoucher, generalJournalEntry.AccountingDate
                where generalJournalEntry.SubledgerVoucher == ledgerJournalTrans.Voucher
                   && generalJournalEntry.AccountingDate == ledgerJournalTrans.TransDate
                   && generalJournalEntry.SubledgerVoucherDataAreaId == ledgerJournalTrans.DataAreaId
            exists join generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                   && generalJournalAccountEntry.IsCredit == NoYes::No
            notexists join transactionReversalTrans
                where transactionReversalTrans.RefRecId == generalJournalAccountEntry.RecId
                   && transactionReversalTrans.RefTableId == generalJournalAccountEntry.TableId;

        // We can't populate the amount above because LedgerJournalTrans can have N lines for each voucher
        // which can result in the amount being doubled, tripled, etc...  The TransationReversalExecutionDetail
        // table will only have one record for each voucher and since X++ doesn't support group by's in update_recordset
        // we use a tmp table to sum the amounts.  Then move the totals back into the reversal table.
        LedgerJournalTransTransactionReversalAmountTmp amountTmp;
        insert_recordset amountTmp(
            ExecutionDetailRecId,
            Amount)
            select
                RecId
            from reversalExecutionDetail
                group by reversalExecutionDetail.RecId
                where reversalExecutionDetail.ExecutionId == localExecutionId
            join generalJournalEntry
                group by generalJournalEntry.SubledgerVoucherDataAreaId, generalJournalEntry.SubledgerVoucher, generalJournalEntry.AccountingDate
                where generalJournalEntry.SubledgerVoucher == reversalExecutionDetail.SubledgerVoucher
                   && generalJournalEntry.AccountingDate == reversalExecutionDetail.TransactionDate
                   && generalJournalEntry.SubledgerVoucherDataAreaId == reversalExecutionDetail.DataAreaId
            join sum(AccountingCurrencyAmount) from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                   && generalJournalAccountEntry.IsCredit == NoYes::No;

        update_recordset reversalExecutionDetail
            setting TransactionAmount = amountTmp.Amount
            join amountTmp
            where reversalExecutionDetail.RecId == amountTmp.ExecutionDetailRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int64 lineCount()
    {
        return this.lineCountByExecutionId(this.getExecutionId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldShowReversalStatusButton</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean shouldShowReversalStatusButton()
    {
        return doesReversalCollideWithActiveReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversalStatusMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public MenuItemName getReversalStatusMenuItemName()
    {
        return menuItemDisplayStr(LedgerJournalTransactionReversalStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentlyProcessingReversalContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransactionReversalContract getCurrentlyProcessingReversalContract()
    {
        guid activeReversalExecutionId = TransactionReversalExecutionDetail::getReversalExecutionIdForRecord(callingJournalHeader);

        return TransactionReversalContract::newFromExecutionId(activeReversalExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProcessingStartTimeForActiveReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides default behavior of getProcessingStartTimeForActiveReversal from <c>TransactionReversalBaseDialog</c> class.
    /// </summary>
    /// <returns>Date time for any active reversal</returns>
    protected TransDateTime getProcessingStartTimeForActiveReversal()
    {
        TransactionReversalExecutionDetail transactionReversalExecutionDetail;

        select firstonly ProcessingDate from transactionReversalExecutionDetail
            where transactionReversalExecutionDetail.ReferenceRecId == callingJournalHeader.RecId
               && transactionReversalExecutionDetail.ReferenceTableId == callingJournalHeader.TableId
               && transactionReversalExecutionDetail.Status == TransactionReversalStatus::Processing;

        return transactionReversalExecutionDetail.ProcessingDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>