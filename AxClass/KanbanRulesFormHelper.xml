<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRulesFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanRulesFormHelper</c> class provides functionality that is specific to the KanbanRules
///    form.
/// </summary>
public class KanbanRulesFormHelper extends KanbanRulesUIHelper
{
    boolean isNewReplacedRuleSelected;

    Map     mapCachedResults;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the activation of the <c>KanbanRule</c> object data source.
    /// </summary>
    public void activate()
    {
        isNewReplacedRuleSelected = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheExecuteRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes a method or returns a result from previous execution.
    /// </summary>
    /// <param name="_methodName">
    ///    The method to be executed.
    /// </param>
    /// <returns>
    ///    Either a value from the cache, if the method was executed before, or the result of the method
    ///    invocation.
    /// </returns>
    private boolean cacheExecuteRule(str _methodName)
    {
        boolean     result = mapCachedResults.exists(_methodName);

        if (!result)
        {
            // assert an execute permission
            new ExecutePermission().assert();

            result = SysDictClass::invokeObjectMethod(this, _methodName, true);
            mapCachedResults.insert(_methodName, any2int(result));

            CodeAccessPermission::revertAssert();
        }
        else
        {
            result = mapCachedResults.lookup(_methodName) != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the advanced caching.
    /// </summary>
    /// <remarks>
    ///    This method must be implemented by the rule helper classes that use the <c>FormButtonManager</c>
    ///    class. This method is needed when the rule implementer class must perform advanced caching.
    /// </remarks>
    public void clearCache()
    {
        super();

        // clean up the per-rule cache during a call to the form button manager's ClearCache()
        this.flushLocalCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushLocalCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the local per kanban rule cache.
    /// </summary>
    private void flushLocalCache()
    {
        mapCachedResults = new Map(Types::String, Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flushMethodCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the cache for a particular method.
    /// </summary>
    /// <param name="_methodName">
    ///    The method for which to clear the cache.
    /// </param>
    private void flushMethodCache(str _methodName)
    {
        if (mapCachedResults.exists(_methodName))
        {
            mapCachedResults.remove(_methodName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePrintKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles printing the selected kanban for a <c>KanbanRule</c> object.
    /// </summary>
    /// <param name="_kanbans_ds">
    ///    The kanban data source that has the rows marked for printing.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void handlePrintKanbans(FormDataSource _kanbans_ds)
    {
        List          kanbans = new List(Types::String);
        KanbanPrinter kanbanPrinter = KanbanPrinter::construct();

        // get the first selected kanban
        Kanban kanban = _kanbans_ds.getFirst(1) ?
                 _kanbans_ds.getFirst(1) :
                 _kanbans_ds.cursor();

        while (kanban)
        {
            kanbans.addEnd(kanban.KanbanId);

            // move to next one
            kanban = _kanbans_ds.getNext();
        }

        // print the kanbans
        kanbanPrinter.printKanbans(kanbans, '', true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLeanRuleData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal instance of the <c>KanbanFlowWrapper</c> class by using the specified
    ///    <c>LeanRuleData</c> object.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The <c>LeanRuleData</c> object to use for initialization.
    /// </param>
    public void initFromLeanRuleData(LeanRuleData _leanRuleData)
    {
        super(_leanRuleData);

        this.flushLocalCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onNewReplacedRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the change of the replaced rule selection field in the <c>KanbanRules</c> form.
    /// </summary>
    /// <param name="_leanReplenishmentRuleId">
    ///    The ID of the newly selected replenishment rule ID.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void onNewReplacedRuleId(LeanReplenishmentRuleId _leanReplenishmentRuleId)
    {
        boolean     oldIsNewReplacedRuleSelected = isNewReplacedRuleSelected;
        KanbanRule  replacedRule = leanRuleData.parmKanbanRule().replacedRule();

        isNewReplacedRuleSelected = replacedRule.RuleId != _leanReplenishmentRuleId;

        if (oldIsNewReplacedRuleSelected != isNewReplacedRuleSelected)
        {
            this.flushMethodCache(methodStr(KanbanRulesFormHelper, ruleCheckIsNotReplacingImp));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckAllowDeviatingQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule allows a deviating quantity.
    /// </summary>
    /// <returns>
    ///    true if a deviating quantity is allowed; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckAllowDeviatingQty()
    {
        return leanRuleData && (leanRuleData.parmKanbanRule().AllowDeviatingQuantity == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckAutoPlanning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the rule type can execute auto-planning.
    /// </summary>
    /// <returns>
    ///    true if the rule can execute auto-planning; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckAutoPlanning()
    {
        boolean     result = leanRuleData && leanRuleData.type().requiresAutoPlanning();
        Kanban      kanban;
        KanbanJob   kanbanJob;

        if (result)
        {
            select firstonly RecId from kanban
                where kanban.KanbanRule == leanRuleData.parmKanbanRule().RecId
            exists join kanbanJob
                where kanbanJob.Kanban  == kanban.RecId
                   && kanbanJob.Type    == LeanKanbanJobType::Process
                   && kanbanJob.Status  == LeanKanbanJobStatus::NotPlanned;

            result = kanban.RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCanReplace</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule can be replaced.
    /// </summary>
    /// <returns>
    ///    true if the rule is not part of a chain; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckCanReplace()
    {
        // a rule can be replaced if it is either not part of a replacement chain, or
        // if it is but is the last element (the one that can be replaced)
        return leanRuleData
            && !LeanCoverageKanbanRule::isRulePartOfReplacementChain(leanRuleData.parmKanbanRule().RecId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckCanUseCards</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule can use circulating cards.
    /// </summary>
    /// <returns>
    ///    true if the rule can use circulating cards; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckCanUseCards()
    {
        return leanRuleData && (leanRuleData.parmKanbanRule().PrintInstructionsOnCard == KanbanPrintInstructions::WorkInstructions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckHasActiveKanbansImp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule does not have active kanbans.
    /// </summary>
    /// <returns>
    ///    true if the rule does not have active kanbans; otherwise, false.
    /// </returns>
    private boolean ruleCheckHasActiveKanbansImp()
    {
        return LeanRuleStatusBase::newLeanRuleData(leanRuleData).hasActiveKanbans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckHasCardsNumSeq</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule has a number sequence for the cards.
    /// </summary>
    /// <returns>
    ///    true if the rule has a number sequence for the cards; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckHasCardsNumSeq()
    {
        return leanRuleData && (leanRuleData.parmKanbanRule().CardsNumberSequence != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckHasKanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule has a valid <c>KanbanFlow</c> object assigned.
    /// </summary>
    /// <returns>
    ///    true if the rule has a valid <c>KanbanFlow</c> object assigned; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckHasKanbanFlow()
    {
        // we're more relaxed here, taking the assumption that if the kanban flow already exists,
        // it is already valid and therefore - omit the validity checks
        return leanRuleData
                && (kanbanFlowWrapper.parmKanbanFlow().RecId != 0
                    || kanbanFlowWrapper.isFlowDefined());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckHasNoKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule does not have active kanbans.
    /// </summary>
    /// <returns>
    ///    true if the rule does not have active kanbans; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckHasNoKanbans()
    {
        return !leanRuleData
                || !this.cacheExecuteRule(methodStr(KanbanRulesFormHelper, ruleCheckHasActiveKanbansImp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckHasNoKanbansOrNotFixedReplenish</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class rule method that determines whether the rule does not contain an
    ///    active kanban.
    /// </summary>
    /// <returns>
    ///    true if the class does not contain an active kanban; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckHasNoKanbansOrNotFixedReplenish()
    {
        return     !leanRuleData
                || leanRuleData.replenishmentStrategy() != LeanReplenishmentStrategy::Fixed
                || !this.cacheExecuteRule(methodStr(KanbanRulesFormHelper,ruleCheckHasActiveKanbansImp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the rule is active.
    /// </summary>
    /// <returns>
    /// true if the rule is active; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsActive()
    {
        return leanRuleData && !leanRuleData.status().isOutdated();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsMakeToOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is of the make-to-order type.
    /// </summary>
    /// <returns>
    ///    true if the rule is of the make-to-order rule; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsMakeToOrder()
    {
        return leanRuleData
                && leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsMakeToStock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is of the make-to-stock type.
    /// </summary>
    /// <returns>
    ///    true if it is a make-to-stock rule; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsMakeToStock()
    {
        return    this.ruleCheckReplenishFixedLevel()
               || this.ruleCheckReplenishScheduled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsNew</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is new.
    /// </summary>
    /// <returns>
    ///    true if it is not saved; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsNew()
    {
        return leanRuleData && (leanRuleData.parmKanbanRule().RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsNotInChain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is not part of a replacement chain.
    /// </summary>
    /// <returns>
    ///    true if it is not in a chain; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsNotInChain()
    {
        return this.ruleCheckIsNotReplaced() && this.ruleCheckIsNotReplacing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsNotNew</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is already saved.
    /// </summary>
    /// <returns>
    ///    true if it has been saved; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsNotNew()
    {
        return !this.ruleCheckIsNew();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsNotReplaced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is not replaced by another one.
    /// </summary>
    /// <returns>
    ///    true if it is not replaced; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsNotReplaced()
    {
        return  leanRuleData && (leanRuleData.parmKanbanRule().ReplacingKanbanRule == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsNotReplacing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is not replacing another one.
    /// </summary>
    /// <returns>
    ///    true if it does not replace another rule; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckIsNotReplacing()
    {
        return  this.cacheExecuteRule(methodStr(KanbanRulesFormHelper, ruleCheckIsNotReplacingImp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckIsNotReplacingImp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule is not replacing another rule.
    /// </summary>
    /// <returns>
    ///    true if it does not replace another rule; otherwise, false.
    /// </returns>
    private boolean ruleCheckIsNotReplacingImp()
    {
        return  !isNewReplacedRuleSelected
                 && leanRuleData
                 && !leanRuleData.parmKanbanRule().isReplacing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the WMS location that is associated with the rule is a kanban supermarket.
    /// </summary>
    /// <returns>
    ///    true if the WMS location associated to the rule is a kanban supermarket; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckKanbanSupermarket()
    {
        return this.cacheExecuteRule(methodStr(KanbanRulesFormHelper, ruleCheckKanbanSupermarketImp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckKanbanSupermarketImp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the WMS location that is associated to the rule is a kanban supermarket.
    /// </summary>
    /// <returns>
    ///    true if the WMS location associated to the rule is a kanban supermarket; otherwise false.
    /// </returns>
    private boolean ruleCheckKanbanSupermarketImp()
    {
        boolean         wmsLocKanbanSupermarket = false;

        if (leanRuleData)
        {
            KanbanFlow kanbanFlow = leanRuleData.kanbanFlow();
            wmsLocKanbanSupermarket = kanbanFlow.isLastLocationKanbanSupermarket();
        }

        return wmsLocKanbanSupermarket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckLastActivityUpdatesInventory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the last activity of the rule updates inventory.
    /// </summary>
    /// <returns>
    ///    true if the last activity of the rule updates inventory; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckLastActivityUpdatesInventory()
    {
        boolean         lastActivityUpdatesInventory = false;

        if (leanRuleData)
        {
            KanbanFlow kanbanFlow = leanRuleData.kanbanFlow();
            lastActivityUpdatesInventory = kanbanFlow.lastActivityUpdatesInventory();
        }

        return lastActivityUpdatesInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckManufacturingSalesEventIsNotCTP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban type is manufacturing and the sales line event differs from CTP.
    /// </summary>
    /// <returns>
    ///    true if the kanban type is manufacturing and the sales line event differs from CTP; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckManufacturingSalesEventIsNotCTP()
    {
        return    this.ruleCheckKanbanTypeManufacturing()
               && this.ruleCheckSalesLineEventIsNotCTP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckManufacturingScheduledOrEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the rule is for manufacturing kanbans and has a replenishment strategy of a
    ///    scheduled or event rule.
    /// </summary>
    /// <returns>
    ///    true if the rule is for manufacturing kanbans and has a replenishment strategy of a scheduled or
    ///    event rule; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckManufacturingScheduledOrEvent()
    {
        return    this.ruleCheckKanbanTypeManufacturing()
               && this.ruleCheckReplenishScheduledOrEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckNotKanbanSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class method that determines whether the WMS location associated to the
    ///    rule is not a kanban supermarket.
    /// </summary>
    /// <returns>
    ///    true if the WMS location associated to the rule is not a kanban supermarket; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckNotKanbanSupermarket()
    {
        return !this.ruleCheckKanbanSupermarket();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckReplenishEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class method that determines whether the rule has replenishment strategy
    ///    of the event.
    /// </summary>
    /// <returns>
    ///    true if it is an event rule; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckReplenishEvent()
    {
        return leanRuleData && (leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Event);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckReplenishFixedLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule has a fixed replenishment strategy.
    /// </summary>
    /// <returns>
    ///    true if the rule is a fixed rule; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckReplenishFixedLevel()
    {
        return leanRuleData && (leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Fixed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckReplenishScheduled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule has a scheduled replenishment strategy.
    /// </summary>
    /// <returns>
    ///    true if it is a scheduled rule; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckReplenishScheduled()
    {
        return leanRuleData && (leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Scheduled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckReplenishScheduledOrEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class method that determines whether the rule has replenishment strategy
    ///    of scheduled or vent.
    /// </summary>
    /// <returns>
    ///    true if it is a scheduled or event rule; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckReplenishScheduledOrEvent()
    {
        return leanRuleData && (leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Scheduled
                             || leanRuleData.replenishmentStrategy() == LeanReplenishmentStrategy::Event);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckReservationMethods</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class method for determining if the rule allows for setting reservation
    ///    methods.
    /// </summary>
    /// <returns>
    ///    true if it allows for setting reservation methods; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckReservationMethods()
    {
        return    leanRuleData
               && leanRuleData.parmKanbanRuleEvent().InventoryReservationPolicy == LeanInventoryReservationPolicy::Always
               && this.ruleCheckSalesOrBOMLineEventActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckSalesLineEventIsNotCTP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class method that determines whether the sales line event differs from
    ///    CTP.
    /// </summary>
    /// <returns>
    ///    true if the sales line event differs from CTP; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckSalesLineEventIsNotCTP()
    {
        if (this.ruleCheckReplenishEvent())
        {
            return leanRuleData
                    && leanRuleData.parmKanbanRuleEvent().SalesLineEvent != KanbanSalesLineEventType::AutomaticWithCTP;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckSalesOrBOMLineEventActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class method that determines whether the rule has the Sales or the BOM
    ///    line event types active.
    /// </summary>
    /// <returns>
    ///    true if the rule has the Sales or the BOM line events active; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckSalesOrBOMLineEventActive()
    {
        boolean             anyEventActive = false;

        if (this.ruleCheckReplenishEvent())
        {
            KanbanRuleEvent kanbanRuleEvent = leanRuleData.parmKanbanRuleEvent();
            anyEventActive =   (kanbanRuleEvent.ProdBOMLineEvent        != KanbanProdBOMLineEventType::NotActive
                             || kanbanRuleEvent.SalesLineEvent          != KanbanSalesLineEventType::NotActive);
        }

        return anyEventActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckSalesOrBOMOrKanbanEventActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A <c>FormButtonManager</c> class rule method that determines whether the rule has the Sales, the
    ///    BOM line or the Kanban line event types active.
    /// </summary>
    /// <returns>
    ///    true if the rule has the Sales, the BOM line or the Kanban line events are active; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckSalesOrBOMOrKanbanEventActive()
    {
        boolean             anyEventActive = false;

        if (this.ruleCheckReplenishEvent())
        {
            KanbanRuleEvent kanbanRuleEvent = leanRuleData.parmKanbanRuleEvent();
            anyEventActive =    (kanbanRuleEvent.KanbanLineEvent         != KanbanLineEventType::NotActive
                              || kanbanRuleEvent.ProdBOMLineEvent        != KanbanProdBOMLineEventType::NotActive
                              || kanbanRuleEvent.SalesLineEvent          != KanbanSalesLineEventType::NotActive);
        }

        return anyEventActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ruleCheckUseCards</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the rule uses circulating cards.
    /// </summary>
    /// <returns>
    ///    true if the rule uses circulating cards; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean ruleCheckUseCards()
    {
        return leanRuleData && (leanRuleData.parmKanbanRule().UsesCirculatingCards == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static KanbanRulesFormHelper construct()
    {
        return new KanbanRulesFormHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>KanbanRulesFormHelper</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>KanbanRulesFormHelper</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanRulesFormHelper newStandard()
    {
        KanbanRulesFormHelper result = KanbanRulesFormHelper::construct();
        result.flushLocalCache();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
