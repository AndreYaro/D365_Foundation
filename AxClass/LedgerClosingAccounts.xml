<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerClosingAccounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerClosingAccounts</c> class loads ledger account information for a closing sheet.
/// </summary>
public final class LedgerClosingAccounts extends RunBaseBatch implements BatchRetryable
{
    ClosingSheet        closingSheet;
    NoYes               deleteExistingAccounts;
    TransDate           fromDate;
    TransDate           toDate;
    Counter             progressCounter;

    CurrentOperationsTax postingLayer;

    Voucher             voucher;

    QueryRun            query;

    DialogField         dialogDeleteExistingAccounts;

    static const int currentVersion = 3;

    #LOCALMACRO.CurrentList
        ClosingSheet,
        FromDate,
        ToDate,
        deleteExistingAccounts,
        postingLayer
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    ///    method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase    dialog = super();

        dialogDeleteExistingAccounts = dialog.addFieldValue(enumstr(NoYes), deleteExistingAccounts, "@SYS12912");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the progress for the specified Main account.
    /// </summary>
    /// <param name = "_mainAccountId">The ID of a Main account.</param>
    public void displayProgress(MainAccountNum _mainAccountId)
    {
        this.progressUpdate(strfmt("@SYS24991", _mainAccountId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        deleteExistingAccounts = dialogDeleteExistingAccounts.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        query = new QueryRun(querystr(LedgerClosingAccounts));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, #CurrentList, query.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingSheet</Name>
				<Source><![CDATA[
    public ClosingSheet parmClosingSheet(ClosingSheet _closingSheet = closingSheet)
    {
        closingSheet = _closingSheet;
        return closingSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the posting layer value.
    /// </summary>
    /// <param name = "_currentOperationsTax">A <c>CurrentOperationsTax</c> enumeration value.</param>
    /// <returns>A <c>CurrentOperationsTax</c> enumeration value.</returns>
    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _currentOperationsTax = CurrentOperationsTax::Current)
    {
        postingLayer = _currentOperationsTax;

        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the progress for this operation.
    /// </summary>
    /// <param name = "text">The progress text.</param>
    public void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        MainAccount                     mainAccount;
        LedgerClosingTable              ledgerClosingTable;
        QueryRun                        mainAccountQuery;
        LedgerClosingSheet              ledgerClosingSheet;
        QueryRun                        queryProgress;
        Query                           queryCopy;
        LedgerBalanceMainAccountAmounts ledgerBalance;
        boolean                         isPostingAccount;

        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        try
        {
            ttsbegin;
            queryCopy = query.query();
            queryProgress = new QueryRun(queryCopy);

            //Restrict the query to only fetch MainAccount records for the current Chart of Accounts.
            SysQuery::findOrCreateRange(queryProgress.query().dataSourceTable(tablenum(MainAccount)), fieldnum(MainAccount, LedgerChartOfAccounts)).value(queryValue(LedgerChartOfAccounts::current()));

            this.progressInit("@SYS25781", SysQuery::countTotal(queryProgress), #AviFormLetter);
            progress.setText("@SYS26577");

            ledgerClosingSheet = LedgerClosingSheet::find(closingSheet);

            if (deleteExistingAccounts)
            {
                if (ledgerClosingSheet.validateDelete())
                {
                    progress.setText("@SYS4196");

                    // Delete all detail records from the sheet
                    ledgerClosingSheet.clearChildTables();
                }
                else
                {
                    throw error("@SYS25904");
                }
            }

            ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
            ledgerBalance.parmAccountingDateRange(fromDate, toDate);
            ledgerBalance.parmIncludeRegularPeriod(true);
            ledgerBalance.parmIncludeOpeningPeriod(true);
            ledgerBalance.parmIncludeClosingPeriod(true);
            ledgerBalance.parmPostingLayerList(con2List([postingLayer]));

            mainAccountQuery = query;

            //Restrict the query to only fetch MainAccount records for the current Chart of Accounts.
            LedgerChartOfAccounts::addSecureRangeForChartOfAccounts(mainAccountQuery.query().dataSourceTable(tablenum(MainAccount)), fieldnum(MainAccount, LedgerChartOfAccounts));

            mainAccountQuery.setRecord(mainAccount);
            while (mainAccountQuery.next())
            {
                isPostingAccount = !mainAccount.isNonPostingAccount();
                this.displayProgress(mainAccount.MainAccountId);

                select firstonly forupdate ledgerClosingTable
                    where ledgerClosingTable.Sheet      == closingSheet &&
                          ledgerClosingTable.MainAccount == mainAccount.RecId;

                ledgerClosingTable.Sheet         = closingSheet;
                ledgerClosingTable.MainAccount   = mainAccount.RecId;
                ledgerClosingTable.AccountType   = mainAccount.Type;
                ledgerClosingTable.Reconciled    = !isPostingAccount;

                ledgerClosingTable.TrialBalanceSheet = 0;
                if (isPostingAccount)
                {
                    ledgerBalance.calculateBalance(mainAccount);
                    ledgerClosingTable.TrialBalanceSheet = ledgerBalance.getAccountingCurrencyBalance();
                    ledgerClosingTable.Result = 0;
                    ledgerClosingTable.autoEnd();
                }
                if (! ledgerClosingTable)
                {
                    ledgerClosingTable.insert(false, false);
                }
                else
                {
                    ledgerClosingTable.update(false, false);
                }
            }

            select firstonly forupdate ledgerClosingSheet
                where ledgerClosingSheet.Sheet == closingSheet;

            ledgerClosingSheet.updateBalances();
            ledgerClosingSheet.update();

            ttscommit;
            progress = null;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer          version         =  conpeek(packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case currentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery)
                {
                    query = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (voucher)
        {
            return checkFailed("@SYS10273");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS9546";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerClosingAccounts ledgerClosingAccounts;

        switch (args.dataset())
        {
            case tablenum(LedgerClosingSheet):
                ledgerClosingAccounts  = LedgerClosingAccounts::newFromLedgerClosingSheet(args.record() as LedgerClosingSheet);
                break;

            default:
                throw error("@SYS18626");
        }

        if (ledgerClosingAccounts.validate())
        {
            if (ledgerClosingAccounts.prompt())
            {
                ledgerClosingAccounts.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLedgerClosingSheet</Name>
				<Source><![CDATA[
    public static LedgerClosingAccounts newFromLedgerClosingSheet(LedgerClosingSheet _ledgerClosingSheet)
    {
        LedgerClosingAccounts ledgerClosingAccounts;

        ledgerClosingAccounts = LedgerClosingAccounts::construct();

        ledgerClosingAccounts.getLast();

        ledgerClosingAccounts.parmClosingSheet(_ledgerClosingSheet.Sheet);
        ledgerClosingAccounts.parmFromDate(_ledgerClosingSheet.FromDate);
        ledgerClosingAccounts.parmToDate(_ledgerClosingSheet.ToDate);
        ledgerClosingAccounts.parmPostingLayer(_ledgerClosingSheet.CurrentOperationsTax);
        ledgerClosingAccounts.parmVoucher(_ledgerClosingSheet.Voucher);

        return ledgerClosingAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerClosingAccounts</c> object.
    /// </summary>
    /// <returns>A new instance of the <c>LedgerClosingAccounts</c> object.</returns>
    public static LedgerClosingAccounts construct()
    {
        return new LedgerClosingAccounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>