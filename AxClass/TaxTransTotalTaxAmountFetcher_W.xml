<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransTotalTaxAmountFetcher_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Country customization extension of the base class.
/// </summary>
class TaxTransTotalTaxAmountFetcher_W extends TaxTransTotalTaxAmountFetcher
{
    #ISOCountryRegionCodes
    // <GIN>
    boolean isServiceTax;
    boolean isGTAVendor;
    boolean checkGTAVendor;
    // </GIN>
    boolean isCZES;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransTotalTaxAmountFetcher_W construct()
    {
        TaxTransTotalTaxAmountFetcher_W fetcher = new TaxTransTotalTaxAmountFetcher_W();
        fetcher.initialize();

        return fetcher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        // <GIN>
        isServiceTax = TaxParameters::isServiceTaxEnable_IN();
        // </GIN>
        // <GEECZ>
        isCZES = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]) || SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]);
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryConditions</Name>
				<Source><![CDATA[
    protected void addQueryConditions(QueryBuildDataSource _qB)
    {
        super(_qB);

        // <GIN>
        if (isServiceTax)
        {
            _qB.addSortField(fieldNum(TaxTrans, Voucher));
            _qB.addSortField(fieldNum(TaxTrans, TransDate));
            _qB.addSortField(fieldNum(TaxTrans, TaxCode));
            _qB.addSortField(fieldNum(TaxTrans, TaxItemGroup));
            _qB.addSortField(fieldNum(taxTrans, RecId));
        }
        // </GIN>

        // <GEECZ>
        if (isCZES)
        {
            _qB.addGroupByField(fieldNum(TaxTrans, TaxCode));
            _qB.addGroupByField(fieldNum(TaxTrans, TaxGroup));
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalActualTaxAmount</Name>
				<Source><![CDATA[
    public TaxAmountCur getTotalActualTaxAmount(
        Query _query,
        boolean _changeDisplaySign = false,
        RefRecId _generalJournalEntryId = 0)
    {
        boolean isSourceTableExist;
        // From 'Posted sales tax' button on Japan consolidated invoice form.
        QueryBuildDataSource qbdsCust = _query.dataSourceTable(tableNum(CustTrans_W));
        QueryBuildRange qbrCust = qbdsCust ? qbdsCust.rangeField(fieldNum(CustTrans_W, CustConsInvoice_JP)) : null;
        QueryBuildDataSource qbdsVend = _query.dataSourceTable(tableNum(VendTrans_W));
        QueryBuildRange qbrVend = qbdsVend ? qbdsVend.rangeField(fieldNum(VendTrans_W, VendConsInvoice_JP)) : null;
        if ((qbrCust && qbrCust.value()) || (qbrVend && qbrVend.value()))
        {
            isSourceTableExist = true;
        }
        else if (TaxJapanConsInvoiceTotalSalesTaxAmountFlight::instance().isEnabled())
        {
            // From 'Sales tax on invoice' button on Japan consolidated invoice form.
            qbdsCust = _query.dataSourceTable(tableNum(CustInvoiceJour_W));
            qbrCust = qbdsCust ? qbdsCust.rangeField(fieldNum(CustInvoiceJour_W, CustConsInvoice_JP)) : null;
            qbdsVend = _query.dataSourceTable(tableNum(VendInvoiceJour));
            qbrVend = qbdsVend ? qbdsVend.rangeField(fieldNum(VendInvoiceJour, VendConsInvoice_JP)) : null;
            if ((qbrCust && qbrCust.value()) || (qbrVend && qbrVend.value()))
            {
                isSourceTableExist = true;
            }
            else
            {
                // From 'Sales tax' button on Japan consolidated invoice form.
                qbdsCust = _query.dataSourceTable(tableNum(CustConsInvoiceHistory_JP));
                qbrCust = qbdsCust ? qbdsCust.rangeField(fieldNum(CustConsInvoiceHistory_JP, ConsInvoiceRecId)) : null;
                qbdsVend = _query.dataSourceTable(tableNum(VendConsInvoiceHistory_JP));
                qbrVend = qbdsVend ? qbdsVend.rangeField(fieldNum(VendConsInvoiceHistory_JP, ConsInvoiceRecId)) : null;
                if ((qbrCust && qbrCust.value()) || (qbrVend && qbrVend.value()))
                {
                    isSourceTableExist = true;
                }
            }
        }
        if (isSourceTableExist)
        {
            Query taxQuery = new Query(_query);
            QueryBuildDataSource qB = taxQuery.dataSourceTable(tableNum(TaxTrans));

            this.addQueryConditions(qB);

            this.addFilterByGeneralJournalEntryId(_generalJournalEntryId, taxQuery);

            AmountCur taxAmountCur;
            taxAmountCur += this.getTaxAmountForAutoGenerated(qB, taxQuery, _changeDisplaySign);

            taxAmountCur += this.getTaxAmountForNotAutoGenerated(qB, taxQuery, _changeDisplaySign);

            return taxAmountCur;
        }
        else
        {
            return super(_query, _changeDisplaySign, _generalJournalEntryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSign</Name>
				<Source><![CDATA[
    protected int determineSign(boolean _changeDisplaySign, TaxTrans _taxTrans)
    {
        int sign;

        // <GEECZ>
        if (isCZES && TaxGroupData::find(_taxTrans.TaxGroup, _taxTrans.TaxCode).IntracomVAT)
        {
            sign = 1;
        }
        else
        {
            // </GEECZ>
            sign = super(_changeDisplaySign, _taxTrans);
            // <GEECZ>
        }
        // </GEECZ>

        // <GIN>
        [checkGTAVendor, isGTAVendor, sign] = TaxTrans::getServiceTaxSign_IN(isServiceTax, _taxTrans, checkGTAVendor, isGTAVendor, sign);
        // </GIN>

        return sign;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>