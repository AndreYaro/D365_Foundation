<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalDepreciation_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class AssetProposalDepreciation_PL extends AssetProposalDepreciation implements BatchRetryable
{
    NoYes               oneDate;
    DialogField         dialogOneDate;

    #define.CurrentVersion(100)
    #localmacro.CurrentList
        assetDateFrom,
        runDate,
        sumDepreciation,
        oneDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase dialog = super();
        dialogOneDate = dialog.addField(enumStr(NoYes), "@GLS110180", "@GLS220794");
        dialogOneDate.value(oneDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            oneDate = dialogOneDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container package = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            package = AssetProposalDepreciation_PL::pack_PL(#CurrentList, package);
        }

        return package;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack_PL</Name>
				<Source><![CDATA[
    internal static container pack_PL(
        AssetTransDate _assetDateFrom,
        AssetTransDate _runDate,
        NoYes _sumDepreciation,
        NoYes _oneDate,
        container _packedParentClass)
    {
        return [#CurrentVersion, _assetDateFrom, _runDate, _sumDepreciation, _oneDate, _packedParentClass];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferencePL00037, funcName());

        AssetTableMethod        assetTableMethodPrimary;
        AssetTableMethod        assetTableMethodPrimaryReportingCurrency;
        AssetTableMethod        assetTableMethodSecondaryReportingCurrency;
        AmountCur               amountCurPrimary;

        AssetTableMethod        assetTableMethodSecondary;
        AmountCur               amountCurSecondary;

        AmountCur               amountCurCostPrimary;
        AmountCur               amountCurCostSecondary;

        AssetJournal            assetJournal;
        AssetBook               assetBook;
        AssetTransDate          transDate;

        TransDate               depDate;
        real                    depPeriod;
        AssetRevaluationAmount  revaluationAmount;
        AmountCur               amountCur;

        AmountCur               amountNotCost;
        AmountCur               amountToDepreciate;

        Counter                 transactionCount = 0;
        boolean                 commitNeeded = false;
        boolean                 beginNeeded = true;

        // Running as periodic batch process.
        if (this.parmBatchEnabled())
        {
            this.buildTasks();
        }
        else
        {
            boolean hasSameAccoutingAndReportingCurrency = Ledger::reportingCurrency() == Ledger::accountingCurrency();
            boolean executeReportingCurrencyLogic;

            if (!hasSameAccoutingAndReportingCurrency)
            {
                executeReportingCurrencyLogic = Ledger::reportingCurrency() != '';
            }

            this.createAndLockJournalForBatchProcessing();

            assetJournal = new AssetJournal(journalNum,this.assetTransType());

            queryRun.query().dataSourceTable(tableNum(AssetBook)).addRange(fieldNum(AssetBook,Status)).value(queryValue(AssetStatus::Open));

            try
            {
                while (queryRun.next())
                {
                    // start a transaction
                    if (beginNeeded)
                    {
                        ttsbegin;
                        commitNeeded = true;
                        beginNeeded = false;
                    }

                    if (queryRun.changed(tableNum(AssetBook)))
                    {
                        assetBook = queryRun.get(tableNum(AssetBook));
                        amountCur = 0;

                        AssetBookTable assetBookTable = AssetBookTable::find(assetBook.BookId);
                        AssetDepreciationProfile depreciationProfile = assetBook.depreciationProfile();
                        AssetAmount depreciationAcc;
                        AssetAmountReportingCurrency amountReportingCurrency;
                        AssetAmountReportingCurrency amountPrimaryReportingCurrency;
                        AssetAmountReportingCurrency amountNotCostReportingCurrency;
                        AssetAmountReportingCurrency depreciationAccReportingCurrency;

                        if (!assetBook.depreciationAltProfile())
                        {
                            if (assetBook.depreciationProfile().Method != AssetDepreciationMethod::Consumption)
                            {
                                int summarizedPeriodsCount = 0;
                                assetTableMethodPrimary = AssetTableMethod::construct(assetBook, runDate, assetBudgetModelId);
                                amountCurPrimary = 0;
                                amountNotCost    = 0;
                                depreciationAcc = -assetTableMethodPrimary.getAccumulatedDepreciation();

                                if (executeReportingCurrencyLogic)
                                {
                                    assetTableMethodPrimaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId);
                                    depreciationAccReportingCurrency = -assetTableMethodPrimaryReportingCurrency.getAccumulatedDepreciation();
                                    amountPrimaryReportingCurrency = 0;
                                    amountNotCostReportingCurrency = 0;
                                }

                                while (assetTableMethodPrimary.next())
                                {
                                    amountCurPrimary += -(assetTableMethodPrimary.calc() - assetTableMethodPrimary.periodAmountNotCost_PL());
                                    amountNotCost    += -assetTableMethodPrimary.periodAmountNotCost_PL();
                                    revaluationAmount = assetTableMethodPrimary.revaluationAmount();

                                    if (amountCurPrimary)
                                    {
                                        amountCurPrimary = this.getDepreciationAmountBasedOnNetBookValue(
                                            depreciationProfile,
                                            assetTableMethodPrimary,
                                            assetBookTable.NetBookValueRest,
                                            depreciationAcc,
                                            amountCurPrimary);

                                        depreciationAcc += amountCurPrimary;
                                    }

                                    if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next())
                                    {
                                        amountPrimaryReportingCurrency += -(assetTableMethodPrimaryReportingCurrency.calc() - assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL());
                                        amountNotCostReportingCurrency += -assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();

                                        if ((depreciationAcc + amountCurPrimary == assetTableMethodPrimary.parmAmountToDepreciate() - assetBookTable.NetBookValueRest ||
                                            assetTableMethodPrimary.parmIsEndOfAccountingDepreciation()) &&
                                            !leaveNetBookValueReachedReportingCurrency)
                                        {
                                            while (assetTableMethodPrimaryReportingCurrency.next())
                                            {
                                                amountPrimaryReportingCurrency += assetTableMethodPrimaryReportingCurrency.calc();
                                                amountNotCostReportingCurrency += -assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();
                                            }
                                        }

                                        if (amountPrimaryReportingCurrency)
                                        {
                                            // Make sure that the depreciation amount is not more than amount to leave at the book or more than amount to allow to depreciate.
                                            amountPrimaryReportingCurrency = this.getDepreciationAmountBasedOnNetBookValue(
                                                depreciationProfile,
                                                assetTableMethodPrimaryReportingCurrency,
                                                assetBookTable.NetBookValueRestReportingCurrency,
                                                depreciationAccReportingCurrency,
                                                amountPrimaryReportingCurrency,
                                                true);

                                            depreciationAccReportingCurrency += amountPrimaryReportingCurrency;
                                        }
                                    }

                                    if (amountCurPrimary || amountNotCost)
                                    {
                                        if (oneDate && !this.budgetJournal())
                                        {
                                            transDate = this.initFirstDate(runDate,assetBook.AssetId);
                                        }
                                        else
                                        {
                                            transDate = this.initFirstDate(assetTableMethodPrimary.depDate(),assetBook.AssetId);
                                        }

                                        if (sumDepreciation)
                                        {
                                            amountCur += amountCurPrimary;
                                            summarizedPeriodsCount += assetTableMethodPrimary.depPeriod();

                                            if (executeReportingCurrencyLogic)
                                            {
                                                amountReportingCurrency += amountPrimaryReportingCurrency;
                                            }
                                        }
                                        else
                                        {
                                            if (! this.budgetJournal() || (this.budgetJournal() && transDate >= assetDateFrom))
                                            {
                                                if (amountCurPrimary)
                                                {
                                                    if (hasSameAccoutingAndReportingCurrency)
                                                    {
                                                        amountPrimaryReportingCurrency = amountCurPrimary;
                                                    }

                                                    assetJournal.parmLedgerJournalOffsetLedgerDimension(0);
                                                    assetJournal.parmReportingCurrencyAmount(amountPrimaryReportingCurrency);
                                                    assetJournal.createTrans(amountCurPrimary,assetBook,transDate,assetBudgetModelId,assetTableMethodPrimary.depPeriod(),0,false,revaluationAmount);
                                                    transactionCount++;
                                                }

                                                if (amountNotCost)
                                                {
                                                    if (hasSameAccoutingAndReportingCurrency)
                                                    {
                                                        amountNotCostReportingCurrency = amountNotCost;
                                                    }

                                                    assetJournal.parmAssetTransType(AssetTransTypeJournal::NotCostAllocatedPart_PL);
                                                    assetJournal.parmLedgerJournalOffsetLedgerDimension(0);
                                                    assetJournal.parmReportingCurrencyAmount(amountNotCostReportingCurrency);
                                                    assetJournal.createTrans(amountNotCost,assetBook,transDate,assetBudgetModelId,assetTableMethodPrimary.depPeriod(),0,false,revaluationAmount);
                                                    assetJournal.parmAssetTransType(this.assetTransType());
                                                    transactionCount++;
                                                }
                                                amountNotCost    = 0;
                                                amountNotCostReportingCurrency = 0;
                                            }
                                        }
                                        amountCurPrimary = 0;
                                        amountPrimaryReportingCurrency = 0;
                                    }
                                }
                                if (sumDepreciation && (amountCur || amountNotCost))
                                {
                                    if (amountCur)
                                    {
                                        if (hasSameAccoutingAndReportingCurrency)
                                        {
                                            amountReportingCurrency = amountCur;
                                        }

                                        assetJournal.parmReportingCurrencyAmount(amountReportingCurrency);
                                        assetJournal.createTrans(amountCur, assetBook, transDate, assetBudgetModelId, summarizedPeriodsCount, 0, false, revaluationAmount);
                                        transactionCount++;
                                    }

                                    if (amountNotCost)
                                    {
                                        if (hasSameAccoutingAndReportingCurrency)
                                        {
                                            amountNotCostReportingCurrency = amountNotCost;
                                        }

                                        assetJournal.parmReportingCurrencyAmount(amountNotCostReportingCurrency);
                                        assetJournal.parmAssetTransType(AssetTransTypeJournal::NotCostAllocatedPart_PL);
                                        assetJournal.createTrans(amountNotCost, assetBook, transDate, assetBudgetModelId, summarizedPeriodsCount, 0, false, revaluationAmount);
                                        assetJournal.parmAssetTransType(this.assetTransType());
                                        transactionCount++;
                                    }

                                    amountNotCost = 0;
                                    amountNotCostReportingCurrency = 0;
                                }
                            }
                        }
                        else
                        {
                            AssetAmountReportingCurrency amountSecondaryReportingCurrency;
                            AssetAmountReportingCurrency amountToDepreciateReportingCurrency;
                            AssetAmountReportingCurrency revaluationAmountReportingCurrency;
                            AssetAmountReportingCurrency amountCostPrimaryReportingCurrency;
                            AssetAmountReportingCurrency amountCostSecondaryReportingCurrency;
                            AssetAmountReportingCurrency amountNotCostPrimaryReportingCurrency;
                            AssetAmountReportingCurrency amountNotCostSecondaryReportingCurrency;

                            if (assetBook.depreciationProfile().Method != AssetDepreciationMethod::Consumption)
                            {
                                assetTableMethodPrimary   = AssetTableMethod::construct(assetBook,runDate,assetBudgetModelId,true);
                                assetTableMethodSecondary = AssetTableMethod::construct(assetBook,runDate,assetBudgetModelId,true,true);
                                assetTableMethodSecondary.parmUseFactor_PL(true);

                                amountCurPrimary   = 0;
                                amountCurSecondary = 0;
                                amountCur          = 0;
                                amountToDepreciate = assetTableMethodPrimary.amountToDepreciate_PL();
                                depreciationAcc = -(assetTableMethodPrimary.parmPrevDepAmount() > assetTableMethodSecondary.parmPrevDepAmount() ?
                                            assetTableMethodPrimary.parmPrevDepAmount() : assetTableMethodSecondary.parmPrevDepAmount());

                                if (executeReportingCurrencyLogic)
                                {
                                    assetTableMethodPrimaryReportingCurrency   = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId, true);
                                    assetTableMethodSecondaryReportingCurrency = AssetTableMethod::constructForReportingCurrency(assetBook, runDate, assetBudgetModelId, true, true);
                                    assetTableMethodSecondaryReportingCurrency.parmUseFactor_PL(true);

                                    amountPrimaryReportingCurrency   = 0;
                                    amountSecondaryReportingCurrency = 0;
                                    amountReportingCurrency          = 0;
                                    amountToDepreciateReportingCurrency = assetTableMethodPrimaryReportingCurrency.amountToDepreciate_PL();
                                    depreciationAccReportingCurrency = -(assetTableMethodPrimaryReportingCurrency.parmPrevDepAmount() > assetTableMethodSecondaryReportingCurrency.parmPrevDepAmount() ?
                                                assetTableMethodPrimaryReportingCurrency.parmPrevDepAmount() : assetTableMethodSecondaryReportingCurrency.parmPrevDepAmount());

                                }

                                while (assetTableMethodPrimary.next() && assetTableMethodSecondary.next() && amountToDepreciate > 0)
                                {
                                    amountCurPrimary       = -(assetTableMethodPrimary.calc());
                                    amountCurSecondary     = -assetTableMethodSecondary.calc();
                                    amountCurCostPrimary   = assetTableMethodPrimary.periodAmountCost_PL();
                                    amountCurCostSecondary = assetTableMethodSecondary.periodAmountCost_PL();

                                    if (abs(amountCurPrimary) > abs(amountCurSecondary))
                                    {
                                        revaluationAmount = assetTableMethodPrimary.revaluationAmount();

                                        assetTableMethodSecondary.addPrevDepAmountExternal(-(amountCurPrimary - amountCurSecondary));
                                        assetTableMethodSecondary.addPrevDepAmountCost_PL(amountCurCostPrimary - amountCurCostSecondary);
                                        depDate     = assetTableMethodPrimary.depDate();
                                        depPeriod   = assetTableMethodPrimary.depPeriod();
                                        amountCur   += amountCurPrimary;
                                        amountNotCost -= assetTableMethodPrimary.periodAmountNotCost_PL();
                                    }
                                    else
                                    {
                                        revaluationAmount = assetTableMethodSecondary.revaluationAmount();

                                        assetTableMethodPrimary.addPrevDepAmountExternal(-(amountCurSecondary - amountCurPrimary));
                                        assetTableMethodPrimary.addPrevDepAmountCost_PL(amountCurCostSecondary - amountCurCostPrimary);
                                        depDate     = assetTableMethodSecondary.depDate();
                                        depPeriod   = assetTableMethodSecondary.depPeriod();
                                        amountCur   += amountCurSecondary;
                                        amountNotCost -= assetTableMethodSecondary.periodAmountNotCost_PL();
                                    }

                                    depreciationAcc += amountCur;


                                    if (executeReportingCurrencyLogic && assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                                    {
                                        amountPrimaryReportingCurrency   = -assetTableMethodPrimaryReportingCurrency.calc();
                                        amountSecondaryReportingCurrency = -assetTableMethodSecondaryReportingCurrency.calc();
                                        amountCostPrimaryReportingCurrency = assetTableMethodPrimaryReportingCurrency.periodAmountCost_PL();
                                        amountCostSecondaryReportingCurrency = assetTableMethodSecondaryReportingCurrency.periodAmountCost_PL();
                                        amountNotCostPrimaryReportingCurrency -= assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();
                                        amountNotCostSecondaryReportingCurrency -= assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();

                                        if ((depreciationAcc + amountCur == assetTableMethodPrimary.parmAmountToDepreciate() - assetBookTable.NetBookValueRest ||
                                            assetTableMethodPrimary.parmIsEndOfAccountingDepreciation()) &&
                                            !leaveNetBookValueReachedReportingCurrency)
                                        {
                                            while (assetTableMethodPrimaryReportingCurrency.next() && assetTableMethodSecondaryReportingCurrency.next())
                                            {
                                                amountPrimaryReportingCurrency   += -assetTableMethodPrimaryReportingCurrency.calc();
                                                amountSecondaryReportingCurrency += -assetTableMethodSecondaryReportingCurrency.calc();
                                                amountCostPrimaryReportingCurrency += assetTableMethodPrimaryReportingCurrency.periodAmountCost_PL();
                                                amountCostSecondaryReportingCurrency += assetTableMethodSecondaryReportingCurrency.periodAmountCost_PL();
                                                amountNotCostPrimaryReportingCurrency -= assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();
                                                amountNotCostSecondaryReportingCurrency -= assetTableMethodPrimaryReportingCurrency.periodAmountNotCost_PL();
                                            }
                                        }

                                        if (abs(amountPrimaryReportingCurrency) > abs(amountSecondaryReportingCurrency))
                                        {
                                            revaluationAmountReportingCurrency = assetTableMethodPrimaryReportingCurrency.revaluationAmount();

                                            assetTableMethodSecondaryReportingCurrency.addPrevDepAmountExternal(-(amountPrimaryReportingCurrency - amountSecondaryReportingCurrency));
                                            assetTableMethodSecondaryReportingCurrency.addPrevDepAmountCost_PL(amountCostPrimaryReportingCurrency - amountCostSecondaryReportingCurrency);
                                            amountReportingCurrency += amountPrimaryReportingCurrency;
                                            amountNotCostReportingCurrency = amountNotCostPrimaryReportingCurrency;
                                        }
                                        else
                                        {
                                            revaluationAmountReportingCurrency = assetTableMethodSecondaryReportingCurrency.revaluationAmount();

                                            assetTableMethodPrimaryReportingCurrency.addPrevDepAmountExternal(-(amountSecondaryReportingCurrency - amountPrimaryReportingCurrency));
                                            assetTableMethodPrimaryReportingCurrency.addPrevDepAmountCost_PL(amountCostSecondaryReportingCurrency - amountCostPrimaryReportingCurrency);
                                            amountReportingCurrency += amountSecondaryReportingCurrency;
                                            amountNotCostReportingCurrency = amountNotCostSecondaryReportingCurrency;
                                        }

                                        depreciationAccReportingCurrency += amountReportingCurrency;
                                    }

                                    amountToDepreciate += amountCur;

                                    if (amountToDepreciate < 0)
                                    {
                                        amountCur -= amountToDepreciate;
                                    }

                                    if (executeReportingCurrencyLogic)
                                    {
                                        amountToDepreciateReportingCurrency += amountReportingCurrency;
                                        
                                        if (amountToDepreciateReportingCurrency < 0)
                                        {
                                            amountReportingCurrency -= amountToDepreciateReportingCurrency;
                                        }
                                    }

                                    if (amountCur)
                                    {
                                        if (oneDate && !this.budgetJournal())
                                        {
                                            transDate = this.initFirstDate(runDate,assetBook.AssetId);
                                        }
                                        else
                                        {
                                            transDate = this.initFirstDate(depDate,assetBook.AssetId);
                                        }

                                        if (! sumDepreciation)
                                        {
                                            if (! this.budgetJournal() || (this.budgetJournal() && transDate >= assetDateFrom))
                                            {
                                                amountCur -= amountNotCost;
                                                if (hasSameAccoutingAndReportingCurrency)
                                                {
                                                    amountReportingCurrency = amountCur;
                                                }
                                                else
                                                {
                                                    amountReportingCurrency -= amountNotCostReportingCurrency;
                                                }

                                                assetJournal.parmReportingCurrencyAmount(amountReportingCurrency);
                                                assetJournal.createTrans(amountCur, assetBook, transDate, assetBudgetModelId, depPeriod);
                                                transactionCount++;
                                            }

                                            amountCur = 0;
                                            amountReportingCurrency = 0;

                                            if (amountNotCost)
                                            {
                                                if (hasSameAccoutingAndReportingCurrency)
                                                {
                                                    amountNotCostReportingCurrency = amountNotCost;
                                                }

                                                assetJournal.parmReportingCurrencyAmount(amountNotCostReportingCurrency);
                                                assetJournal.parmAssetTransType(AssetTransTypeJournal::NotCostAllocatedPart_PL);
                                                assetJournal.createTrans(amountNotCost,assetBook,transDate,assetBudgetModelId,depPeriod);
                                                assetJournal.parmAssetTransType(this.assetTransType());
                                                transactionCount++;
                                            }

                                            amountNotCost    = 0;
                                            amountNotCostReportingCurrency = 0;
                                            amountNotCostPrimaryReportingCurrency = 0;
                                            amountNotCostSecondaryReportingCurrency = 0;
                                        }
                                    }
                                }

                                if (sumDepreciation && amountCur)
                                {
                                    if (! this.budgetJournal() || (this.budgetJournal() && transDate >= assetDateFrom))
                                    {
                                        if (hasSameAccoutingAndReportingCurrency)
                                        {
                                            amountReportingCurrency = amountCur;
                                        }

                                        assetJournal.parmReportingCurrencyAmount(amountReportingCurrency);
                                        assetJournal.createTrans(amountCur, assetBook, transDate, assetBudgetModelId, depPeriod);
                                        transactionCount++;
                                    }

                                    amountCur = 0;
                                    amountReportingCurrency = 0;

                                    if (amountNotCost)
                                    {
                                        if (hasSameAccoutingAndReportingCurrency)
                                        {
                                            amountNotCostReportingCurrency = amountNotCost;
                                        }

                                        assetJournal.parmReportingCurrencyAmount(amountNotCostReportingCurrency);
                                        assetJournal.parmAssetTransType(AssetTransTypeJournal::NotCostAllocatedPart_PL);
                                        assetJournal.createTrans(amountNotCost,assetBook,transDate,assetBudgetModelId,depPeriod);
                                        assetJournal.parmAssetTransType(this.assetTransType());
                                        transactionCount++;
                                    }

                                    amountNotCost = 0;
                                }
                            }
                        }
                    }
                    //
                    // Commit transaction when asset dep book is changed and the
                    // number of transactions created is over the limit.
                    //
                    if (transactionCount >= this.getMaxJournalLinesInTransactionBoundry())
                    {
                        ttscommit;
                        transactionCount = 0;
                        commitNeeded = false;
                        beginNeeded = true;
                    }
                }
                // Commit any remaining transactions
                if (commitNeeded)
                {
                    ttscommit;
                }
            }
            // catch exceptions
            catch
            {
                exceptionTextFallThrough();
            }

            this.updateJournalTotals();
            this.unlockJournal();

            if (postJournals && journalNum)
            {
                LedgerJournalTable journalTable = LedgerJournalTable::find(journalNum);

                if (journalTable
                        && journalTable.checkNotSystemBlocked()
                        && journalTable.numOfLines())
                {
                    LedgerJournalPost::postJournal(journalTable, NoYes::No, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret = false;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            Integer version = RunBase::getVersion(packedClass);
            container con;

            switch (version)
            {
                case #CurrentVersion:
                    [version, #CurrentList, con] = packedClass;
                    ret = super(con);
                    break;

                default:
                    ret = false;
            }
        }
        else
        {
            ret = super(packedClass);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>