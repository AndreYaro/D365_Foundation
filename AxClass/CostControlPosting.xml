<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPosting</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostControlPosting
{
    Qty                 forecastReduceQty;
    Amount              forecastReduceAmount;

    LedgerVoucher       ledgerVoucher;
    LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;

    Common              buffer;
    Common              childBuffer;

    Qty                 financial; //The qty currently be posted
    ProjCommittedCostUpdateAction   actionType;

    private boolean trackingBudgetStatus = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterPost</Name>
				<Source><![CDATA[
    void afterPost()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates or reduces the project budget.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID associated with the transaction.
    /// </param>
    /// <param name="_projBudgetTransaction">
    ///    An instance of the <c>ProjBudgetTransaction</c> class that contains the transaction line details.
    /// </param>
    /// <param name="_projBudgetAdjustmentType">
    ///    A <c>ProjBudgetAdjustmentType</c> enumeration value that specifies whether to increase the project
    ///    budget.
    /// </param>
    /// <param name="_allowOverBudget">
    ///    A Boolean value that indicates whether to allow over-budget transactions; optional.
    /// </param>
    /// <param name="_supressMessages">
    ///    A Boolean value that indicates whether to supress over-budget warning or error messages; optional.
    /// </param>
    public void budgetUpdate (ProjId _projId, ProjBudgetTransaction _projBudgetTransaction,ProjBudgetAdjustmentType _projBudgetAdjustmentType, boolean _allowOverBudget = false, boolean _supressMessages = false)
    {
        if (_projId)
        {
            ProjBudgetTransactionManager projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(_projBudgetTransaction);
            projBudgetTransactionManager.parmAllowOverBudget(_allowOverBudget);
            projBudgetTransactionManager.parmSupressMessages(_supressMessages);
            projBudgetTransactionManager.parmTrackBudgetStatus(this.parmTrackingBudgetStatus());

            if (!projBudgetTransactionManager.adjustBudget(_projBudgetAdjustmentType))
            {
                throw error("@Proj:BudgetError");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    Common buffer()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>childBuffer</Name>
				<Source><![CDATA[
    Common childBuffer()
    {
        return childBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    protected boolean createCommittedCost(InventQty _qty=0, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.validateCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_qty">The quantity to be set on the <c>CostControlTransCommittedCost</c> record.</param>
    /// <param name = "_transDate">The committed date to be set on <c>CostControlTransCommittedCost</c> record.</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initializeCostControlTransCommittedCost(InventQty _qty, TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        CostControlTransCommittedCost costControlTransCommittedCost;

        costControlTransCommittedCost.Qty=_qty;
        costControlTransCommittedCost.ProjTransType = this.projTransType();
        costControlTransCommittedCost.Open = NoYes::Yes;
        costControlTransCommittedCost.Reverse = NoYes::No;
        costControlTransCommittedCost.CommittedDate = _transDate;
        
        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>CostControlTransCommittedCost</c> record.
    /// </summary>
    /// <param name = "_costControlTransCommittedCost">The buffer of <c>CostControlTransCommittedCost</c>.</param>
    protected void insertCostControlTransCommittedCost(CostControlTransCommittedCost _costControlTransCommittedCost)
    {
        _costControlTransCommittedCost.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>forecastUpdate</Name>
				<Source><![CDATA[
    public void forecastUpdate(CostControlTransCommittedCost _costControlTransCommittedCost, Qty _qty,Amount _amount)
    {
        if (_costControlTransCommittedCost.ProjId)
            ProjForecastReduce::newCostControl(_costControlTransCommittedCost,
                                               _qty,
                                               _amount).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
    {
        return ProjCommittedCostUpdateAction::UpdateOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        forecastReduceQty=0.00;
        forecastReduceAmount=0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the cost and sales amounts of a transaction in overridden methods by using business logic.
    /// </summary>
    /// <param name="_costAmount">
    ///    The cost amount of the transaction.
    /// </param>
    /// <param name="_salesAmount">
    ///    The sales amount of the transaction.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method will be overridden by child classes.
    /// </remarks>
    public boolean mustUpdateBudget(AmountCur _costAmount, AmountCur _salesAmount)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinancial</Name>
				<Source><![CDATA[
    public Qty parmFinancial(Qty _financial=financial)
    {
        financial=_financial;
        return financial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LedgerDimensionDefaultAccount _ledgerDimensionDefaultAccount=ledgerDimensionDefaultAccount)
    {
        ledgerDimensionDefaultAccount = _ledgerDimensionDefaultAccount;
        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucher</Name>
				<Source><![CDATA[
    LedgerVoucher parmLedgerVoucher(LedgerVoucher   _ledgerVoucher=ledgerVoucher)
    {
        ledgerVoucher = _ledgerVoucher;
        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransType</Name>
				<Source><![CDATA[
    public ProjTransType projTransType()
    {
        return ProjTransType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    protected boolean reverseCommittedCost(NoYes isInvoiced)
    {
        return this.validateReverse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run(ProjCommittedCostUpdateAction _actionType=ProjCommittedCostUpdateAction::Unknown)
    {
        ttsbegin;

        this.init();
        if (_actionType==ProjCommittedCostUpdateAction::Unknown)
            actionType = this.getActionType();
        else
            actionType=_actionType;
        switch (actionType)
        {
            case ProjCommittedCostUpdateAction::Create:
                this.createCommittedCost();
                break;
            case ProjCommittedCostUpdateAction::UpdateReverse:
                this.reverseCommittedCost(NoYes::No);
                this.createCommittedCost();
                break;
            case ProjCommittedCostUpdateAction::UpdateOnly:
                this.updateCommittedCost();
                break;
            case ProjCommittedCostUpdateAction::Post:
                if (this.reverseCommittedCost(NoYes::Yes))
                    this.afterPost();
                this.createCommittedCost(this.remainQty(), this.parmLedgerVoucher()?this.parmLedgerVoucher().lastTransDate():DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                break;
            case ProjCommittedCostUpdateAction::Delete:
                this.reverseCommittedCost(NoYes::No);
                break;
            default:
                throw error (strFmt("@SYS93688",enum2str(_actionType)));
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the project budget.
    /// </summary>
    /// <param name="_projId">
    ///    The project ID that is associated with the transaction.
    /// </param>
    /// <param name="_projBudgetTransaction">
    ///    An instance of the <c>ProjBudgetTransaction</c> class that contains the transaction line details.
    /// </param>
    /// <param name="_supressMessages">
    ///    A Boolean value that indicates whether to suppress the over-budget messages; optional.
    /// </param>
    /// <param name="_trackBudgetStatus">
    ///    A Boolean value that indicates whether to track the budget status of the transactions; optional.
    /// </param>
    /// <returns>
    ///    true when budget validation is successful; otherwise, false.
    /// </returns>
    public boolean validateBudget (ProjId _projId, ProjBudgetTransaction _projBudgetTransaction, boolean _supressMessages = false, boolean _trackBudgetStatus = false)
    {
        boolean                         checkBudget;

        if (_projId)
        {
            ProjBudgetTransactionManager projBudgetTransactionManager = ProjBudgetTransactionManager::newProjBudgetTransactionManager(_projBudgetTransaction);
            projBudgetTransactionManager.parmTrackBudgetStatus(_trackBudgetStatus);
            projBudgetTransactionManager.parmSupressMessages(_supressMessages);
            checkBudget = projBudgetTransactionManager.validateBudget();
        }

        return checkBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReverse</Name>
				<Source><![CDATA[
    public boolean validateReverse()
    {
        boolean ret =true;
        if (!CostControlTransCommittedCost::findOpenedByProjTransID(this.projTransId()))
                ret=false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostControlPostingHour</Name>
				<Source><![CDATA[
    public static CostControlPosting newCostControlPostingHour(Common  _buffer,Common _childBuffer)
    {
        CostControlPosting              costControlPosting;

        if (_buffer.TableId==tableNum(ProdRoute) && _childBuffer.TableId == tableNum(ProdRouteProj))
        {
            CostControlPostingHourProdLine costControlPostingHourProdLine = new CostControlPostingHourProdLine(_buffer,_childBuffer);
            costControlPosting = costControlPostingHourProdLine;
        }
        else if (_buffer.TableId==tableNum(ProjJournalTrans))
        {
            CostControlPostingHourJournal costControlPostingHourJournal = new CostControlPostingHourJournal(_buffer,_childBuffer);
            costControlPosting = costControlPostingHourJournal;
        }
        else
        {
            costControlPosting=new CostControlPostingHour(_buffer,null);
        }

        return costControlPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCostControlPostingItem</Name>
				<Source><![CDATA[
    public static CostControlPosting newCostControlPostingItem(InventMovement  _movement)
    {
        CostControlPosting  costControlPosting;
        if (SysDictClass::isEqualOrSuperclass(classIdGet(_movement),classNum(InventMov_Sales)))
        {
            costControlPosting  =   new CostControlPostingItemSalesOrder(_movement);
        }

        else if (SysDictClass::isEqualOrSuperclass(classIdGet(_movement),classNum(InventMov_Virtuel)))
        {
            InventMov_Virtuel movementVirt = _movement;
            if ( movementVirt.parmInventMovReference())
            {
                switch (movementVirt.parmInventMovReference().transType())
                {
                    case InventTransType::Production:
                    case InventTransType::PmfProdCoBy:
                        costControlPosting  =   new CostControlPostingItemProduction(_movement);
                        break;
                    case InventTransType::Purch:
                        costControlPosting = new CostControlPostingItemPurchOrder(_movement);
                        break;
                    default:
                        costControlPosting = new CostControlPostingItem(_movement);
                }
            }
        }

        else if (SysDictClass::isEqualOrSuperclass(classIdGet(_movement),classNum(InventMov_Jour_Loss_Project)))
        {
            costControlPosting  =   new CostControlPostingItemJournal(_movement);
        }

        else if (SysDictClass::isEqualOrSuperclass(classIdGet(_movement),classNum(InventMov_ProdLine)))
        {
            costControlPosting = new CostControlPostingItemProdLine(_movement);
        }

        else
            costControlPosting=new CostControlPostingItem(_movement);

        return costControlPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingBudgetStatus</Name>
				<Source><![CDATA[
    public boolean parmTrackingBudgetStatus(boolean _trackingbudgetstatus = trackingBudgetStatus)
    {
        trackingBudgetStatus = _trackingbudgetstatus;

        return trackingBudgetStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>