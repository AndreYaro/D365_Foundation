<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRulesConnected</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanRulesConnected</c> class explores connected kanban rules and lets you enumerate the
/// results.
/// </summary>
public abstract class KanbanRulesConnected
{
    Map                         mapLevelKanbanRules;     // int level -> list of KanbanRules
    KanbanRule                  kanbanRuleCurrent;
    List                        listKanbanRules;
    ListEnumerator              leKanbanRules;
    int                         levelCurrent;
    int                         levelTotal;
    boolean                     initialized;
    boolean                     completedCalculation;
    boolean                     completedEnumeration;

    // find rule parameters
    KanbanFindRules             kanbanFindRules;
    LeanProductionFlowReference leanProductionFlowReference;
    InventDimGroupSetup         inventDimGroupSetup;
    InventDimParm               inventDimParm;

    // input
    KanbanRule                  kanbanRuleRoot;
    ItemId                      itemId;
    InventDimId                 inventDimId;
    InventQty                   inventQty;
    TransDateTime               dateTimeFrom;
    TransDateTime               dateTimeTo;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNextLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the next level of connected kanban rules.
    /// </summary>
    /// <returns>
    /// true if a next level exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean addNextLevel()
    {
        List            listNextLevel;

        if (   !completedCalculation
            && kanbanRuleRoot
            && mapLevelKanbanRules)
        {
            // enumerate the current level and find the connected rules for each
            if (levelTotal > 0)
            {
                if (mapLevelKanbanRules.exists(levelTotal))
                {
                    List listLastLevel = mapLevelKanbanRules.lookup(levelTotal);

                    if (   listLastLevel
                        && listLastLevel.elements())
                    {
                        ListEnumerator le = listLastLevel.getEnumerator();
                        while (le.moveNext())
                        {
                            KanbanRule kanbanRule = le.current();
                            if (kanbanRule)
                            {
                                List listConnected = this.connectedKanbanRulesAsList(kanbanRule);

                                if (   listConnected
                                    && listConnected.elements())
                                {
                                    if (!listNextLevel)
                                    {
                                        listNextLevel = listConnected;
                                    }
                                    else
                                    {
                                        // combine results in next level
                                        listNextLevel.appendList(listConnected);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                listNextLevel = this.connectedKanbanRulesAsList(kanbanRuleRoot);
            }

            completedCalculation =    !listNextLevel
                                   || !listNextLevel.elements();

            if (!completedCalculation)
            {
                // increase level and add to map
                levelTotal++;
                mapLevelKanbanRules.insert(levelTotal,listNextLevel);
            }
        }

        return !completedCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>connectedKanbanRulesAsList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the connected kanban rules of a given kanban rule
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> record to find the connected rules for.
    /// </param>
    /// <returns>
    ///    A List of connected kanban rules; otherwise, null.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected List connectedKanbanRulesAsList(KanbanRule _kanbanRule)
    {
        List    list;

        if (   this.initFindRules(_kanbanRule)
            && this.includeKanbanRule(_kanbanRule))
        {
            if (kanbanFindRules)
            {
                this.setConnectionParameters(_kanbanRule);
                list = kanbanFindRules.findKanbanRules();
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a given kanban rule is included in additional exploration.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record to check.
    /// </param>
    /// <returns>
    /// true if the kanban rule should be included; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean includeKanbanRule(KanbanRule _kanbanRule)
    {
        return _kanbanRule.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        mapLevelKanbanRules         = new Map(Types::Integer,Types::Class);
        leanProductionFlowReference = kanbanRuleRoot.leanProductionFlowReference();
        inventDimGroupSetup         = InventDimGroupSetup::newItemId(itemId);
        inventDimGroupSetup.inventDimParmActiveProductDimension(inventDimParm);

        levelTotal           = 0;
        completedCalculation = false;
        initialized          = true;

        this.initEnumeration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEnumeration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables that are used to enumerate connected kanban rules.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initEnumeration()
    {
        listKanbanRules      = null;
        leKanbanRules        = null;
        levelCurrent         = 0;
        completedEnumeration = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFindRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>KanbanFindRule</c> object.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The <c>KanbanRule</c> record that is used for the initialization.
    /// </param>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initFindRules(KanbanRule _kanbanRule)
    {
        boolean result = _kanbanRule.RecId != 0;

        if (result)
        {
            kanbanFindRules = KanbanFindRules::newFromLeanProductionFlowReference(
                                                        leanProductionFlowReference.RecId,
                                                        itemId,
                                                        dateTimeFrom,
                                                        dateTimeTo,
                                                        inventDimId,
                                                        inventDimParm,
                                                        false,
                                                        true,
                                                        true,
                                                        inventQty);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current <c>KanbanRule</c> record.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanRule</c> record; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    Use the method to retrieve the current kanban rule while enumerating the collection.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule kanbanRule()
    {
        return kanbanRuleCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>level</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current level value.
    /// </summary>
    /// <returns>
    /// The current level; otherwise, <c>0</c>.
    /// </returns>
    /// <remarks>
    /// Use the method to retrieve the current level when enumerating the collection.The level indicates
    /// the distance between the root kanban rule and the current kanban rule.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int level()
    {
        return levelCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listKanbanRulesConnected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the connected kanban rules as a flat list of <c>KanbanRule</c> records.
    /// </summary>
    /// <returns>
    ///    A <c>List</c> object of connected kanban rules.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List listKanbanRulesConnected()
    {
        List    list;

        this.reset(false);

        while (this.moveNext())
        {
            if (!list)
            {
                list = new List(Types::Record);
            }

            list.addEnd(this.kanbanRule());
        }

        this.reset(false);

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the next kanban rule in the result collection.
    /// </summary>
    /// <returns>
    ///    true if the next result exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Results are computed lazily by level.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean moveNext()
    {
        boolean result;

        // reset current rule
        kanbanRuleCurrent = null;

        if (kanbanRuleRoot)
        {
            if (!initialized)
            {
                this.init();
            }

            while (   !completedEnumeration
                   && !kanbanRuleCurrent)
            {
                if (!leKanbanRules)
                {
                    if (   levelCurrent > 0
                        && mapLevelKanbanRules.exists(levelCurrent))
                    {
                        listKanbanRules = mapLevelKanbanRules.lookup(levelCurrent);

                        if (   listKanbanRules
                            && listKanbanRules.elements())
                        {
                            // set enumerator
                            leKanbanRules = listKanbanRules.getEnumerator();
                        }
                    }
                }

                if (   leKanbanRules
                    && leKanbanRules.moveNext())
                {
                    // retrieve from list enumerator
                    kanbanRuleCurrent = leKanbanRules.current();
                    result            = true;
                }
                else
                {
                    leKanbanRules = null;

                    if (!completedCalculation)
                    {
                        // next level
                        completedEnumeration = !this.addNextLevel();
                    }
                    else
                    {
                        completedEnumeration = levelCurrent == levelTotal;
                    }

                    if (!completedEnumeration)
                    {
                        levelCurrent++;
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeFrom</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmDateTimeFrom(TransDateTime _dateTimeFrom = dateTimeFrom)
    {
        dateTimeFrom = _dateTimeFrom;
        return dateTimeFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTimeTo</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime parmDateTimeTo(TransDateTime _dateTimeTo = dateTimeTo)
    {
        dateTimeTo = _dateTimeTo;
        return dateTimeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDimId parmInventDimId(InventDimId _inventDimId = inventDimId)
    {
        inventDimId = _inventDimId;
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty parmInventQty(InventQty _inventQty = inventQty)
    {
        inventQty = _inventQty;
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleRoot</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule parmKanbanRuleRoot(KanbanRule _kanbanRuleRoot = kanbanRuleRoot)
    {
        kanbanRuleRoot = _kanbanRuleRoot;
        return kanbanRuleRoot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the enumeration and optionally the results.
    /// </summary>
    /// <param name="_forceRecalc">
    /// A Boolean value that indicates whether already computed results must be discarded.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reset(boolean _forceRecalc = false)
    {
        if (   _forceRecalc
            || !initialized
            || !completedCalculation)
        {
            this.init();
        }
        else
        {
            this.initEnumeration();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConnectionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the connection parameters.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> record that is used to set the connection parameters.
    /// </param>
    /// <remarks>
    ///    At this point the class instance of <c>KanbanFindRules</c> is instantiated. Call parm methods to specify
    ///    additional find rule requirements, for example the upstream or downstream connected activities.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected abstract void setConnectionParameters(KanbanRule _kanbanRule)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
