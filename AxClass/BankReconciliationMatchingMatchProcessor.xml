<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatchingMatchProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processor of bank reconciliation matching.
/// </summary>
class BankReconciliationMatchingMatchProcessor extends Object
{
    private const int Two = 2;

    List entryList;
    BankReconciliationHeader bankReconciliationHeader;
    BankReconciliationMatchRuleRefRecId matchRuleRecId;
    boolean isAutomation;
    boolean skipUpdateBankStatement;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        bankReconciliationHeader,
        isAutomation,
        skipUpdateBankStatement,
        matchRuleRecId
    #endmacro

    /*
    Entries counter is single
    %1 entries counter
    */
    #localmacro.IsSingle
        %1 == 1
    #endmacro

    /*
    Entries counter is multiple
    %1 entries counter
    */
    #localmacro.IsMultiple
        %1 > 1
    #endmacro

    /*
    Entries counter is zero
    %1 entries counter
    */
    #localmacro.IsNone
        %1 == 0
    #endmacro

    /*
    Entries counter is not zero
    %1 entries counter
    */
    #localmacro.IsNotNone
        %1 > 0
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the matching entry.
    /// </summary>
    /// <param name="_matchingEntry">
    /// The matching entry.
    /// </param>
    public void addEntry(BankReconciliationMatchingEntry _matchingEntry)
    {
        entryList.addEnd(_matchingEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs matching based on selected entries.
    /// </summary>
    /// <param name="_header">
    /// The bank reconciliation header.
    /// </param>
    /// <returns>
    /// The approprivate type of matching.
    /// </returns>
    protected BankReconciliationMatchingMatch constructMatch(BankReconciliationHeader _header)
    {
        BankReconciliationMatchingEntry matchingEntry;

        Counter statementCounter;
        Counter documentCounter;
        Counter reversalStatementCounter;
        BankPaymentType paymentType;

        ListEnumerator enumerator = entryList.getEnumerator();

        while (enumerator.moveNext())
        {
            matchingEntry = enumerator.current();

            switch (matchingEntry.parmEntryType())
            {
                case BankReconciliationMatchingEntryType::BankStatement:
                    if (matchingEntry.parmIsReversal())
                    {
                        reversalStatementCounter++;
                    }
                    statementCounter++;
                    paymentType = BankStmtISOReportEntry::find(matchingEntry.parmRefRecId()).BankPaymentType;
                    break;

                case BankReconciliationMatchingEntryType::BankDocument:
                    documentCounter++;
                    break;
            }
        }

        BankReconciliationMatchingType matchingType = this.findBankReconciliationMatchingTypeForMatch(statementCounter, documentCounter, reversalStatementCounter);
        BankReconciliationMatchingMatch matchingMatch = BankReconciliationMatchingMatch::construct(_header, matchingType);

        matchingMatch.parmIsAutomation(isAutomation);
        matchingMatch.parmSkipUpdateBankStatement(skipUpdateBankStatement);
        matchingMatch.parmPaymentType(paymentType);

        if (matchRuleRecId)
        {
            matchingMatch.parmMatchRuleRecId(matchRuleRecId);
        }

        if (matchingMatch)
        {
            enumerator = entryList.getEnumerator();

            while (enumerator.moveNext())
            {
                matchingEntry = enumerator.current();
                matchingMatch.addEntry(matchingEntry);
            }
        }

        return matchingMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankReconciliationMatchingTypeForMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the bank reconciliation matching type for match.
    /// </summary>
    /// <param name = "_statementCounter">
    ///     The number of statements.
    /// </param>
    /// <param name = "_documentCounter">
    ///     The number of documents.
    /// </param>
    /// <param name = "_reversalStatementCounter">
    ///     The number of reversal statements.
    /// </param>
    /// <returns>
    ///     The <c>BankReconciliationMatchingType</c> element.
    /// </returns>
    [Wrappable(true)]
    protected final BankReconciliationMatchingType findBankReconciliationMatchingTypeForMatch(
        Counter _statementCounter,
        Counter _documentCounter,
        Counter _reversalStatementCounter)
    {
        BankReconciliationMatchingType matchingType;

        if (#IsSingle(_statementCounter) && #IsNone(_documentCounter))
        {
            matchingType = BankReconciliationMatchingType::SingleStatement;
        }
        else if (#IsNone(_statementCounter) && _documentCounter == Two)
        {
            matchingType = BankReconciliationMatchingType::DocumentClear;
        }
        else if (#IsMultiple(_statementCounter) && #IsNone(_documentCounter))
        {
            matchingType = BankReconciliationMatchingType::Statement2ReversalStatement;
        }
        else if (#IsMultiple(_statementCounter) && #IsNotNone(_documentCounter) && #IsNotNone(_reversalStatementCounter))
        {
            matchingType = BankReconciliationMatchingType::Statements2ReversalDocument;
        }
        else
        {
            matchingType = BankReconciliationMatchingType::Statement2Document;
        }

        return matchingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcessMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the matching.
    /// </summary>
    /// <returns>
    /// True if the matching is successful; otherwise, false.
    /// </returns>
    public boolean doProcessMatch()
    {
        BankReconciliationMatchingMatch matchingMatch;

        matchingMatch = this.constructMatch(bankReconciliationHeader);

        return matchingMatch.processMatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doProcessUnmatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the unmatching process. All relations with the given <c>BankDocumentTable</c> record Id will be removed.
    /// </summary>
    /// <param name="_entryRecId">
    ///     The entry recid.
    /// </param>
    /// <param name="_type">
    ///     The entry type.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Throw excpetion when the reconciliation is recocniled.
    /// </exception>
    protected void doProcessUnmatch(
        RecId _entryRecId,
        BankReconciliationMatchingEntryType _type)
    {
        BankReconciliationMatching matching;
        BankReconciliationMatchingItem matchingItem;
        BankReconciliationHeader bankReconciliationHeaderLocal;

        List statementList;
        List documentList;

        container matchingitemCon;
        List allMatchingItemsList;
        ListEnumerator enumerator;

        if (_type == BankReconciliationMatchingEntryType::BankDocument)
        {
            matchingItem = BankReconciliationMatchingItem::findValidByDocumentRecId(_entryRecId);
        }
        else if (_type == BankReconciliationMatchingEntryType::BankStatement)
        {
            matchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(_entryRecId);
        }

        if (matchingItem.RecId)
        {
            //check it is not reconciled
            bankReconciliationHeaderLocal = BankReconciliationHeader::find(matching.BankReconciliationHeader);
            Debug::assert(!bankReconciliationHeaderLocal.IsReconciled);

            matching = BankReconciliationMatching::find(matchingItem.BankReconciliationMatching, true);
            allMatchingItemsList = BankReconciliationMatching::getAllMatchingItemsList(matching.RecId);

            statementList = new List(Types::Class);
            documentList = new List(Types::Class);

            enumerator = allMatchingItemsList.getEnumerator();

            while (enumerator.moveNext())
            {
                matchingitemCon = enumerator.current();

                if (conPeek(matchingitemCon, 1) == BankReconciliationMatchingEntryType::BankStatement)
                {
                    statementList.addEnd(BankReconciliationMatchingEntry::construct(conPeek(matchingitemCon, 1), conPeek(matchingitemCon, 2)));
                }
                else if (conPeek(matchingitemCon, 1) == BankReconciliationMatchingEntryType::BankDocument)
                {
                    // Not add the document entry if it is a generate voucher. As the document entry is only for showing on worksheet purpose, it is not supposed to be updated when unmatch.
                    if (!BankRedesignGenerateVoucherFlight::instance().isEnabled() || matching.BankReconciliationMatchingType != BankReconciliationMatchingType::SingleStatement)
                    {
                        documentList.addEnd(BankReconciliationMatchingEntry::construct(conPeek(matchingitemCon, 1), conPeek(matchingitemCon, 2)));
                    }
                }
            }

            ttsBegin;

            matching.delete();

            this.updateImpactedMatchingEntriesInUnMatch(statementList, documentList);

            this.unmatchingEventHandler(statementList, documentList);
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        entryList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, entryList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankReconciliationHeader</Name>
				<Source><![CDATA[
    protected BankReconciliationHeader parmBankReconciliationHeader(BankReconciliationHeader _header = bankReconciliationHeader)
    {
        bankReconciliationHeader = _header;
        return bankReconciliationHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAutomation</Name>
				<Source><![CDATA[
    public boolean parmIsAutomation(boolean _isAutomation = isAutomation)
    {
        isAutomation = _isAutomation;

        return isAutomation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUpdateBankStatement</Name>
				<Source><![CDATA[
    internal boolean parmSkipUpdateBankStatement(boolean _skipUpdateBankStatement = skipUpdateBankStatement)
    {
        skipUpdateBankStatement = _skipUpdateBankStatement;

        return skipUpdateBankStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchRuleRecId</Name>
				<Source><![CDATA[
    public BankReconciliationMatchRuleRefRecId parmMatchRuleRecId(BankReconciliationMatchRuleRefRecId _matchRuleRecId = matchRuleRecId)
    {
        matchRuleRecId = _matchRuleRecId;

        return matchRuleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the matching.
    /// </summary>
    /// <returns>
    /// True if the matching is successful; otherwise, false.
    /// </returns>
    public boolean processMatch()
    {
        return this.doProcessMatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmatchingEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Occurs before unmatching.
    /// </summary>
    /// <param name="_statementList">
    /// A list of impacted bank statement.
    /// </param>
    /// <param name="_documentList">
    /// A list of impacted bank document.
    /// </param>
    delegate void unmatchingEventHandler(
        List _statementList,
        List _documentList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container listPack;

        #define.Version1(1)
        #localmacro.Version1List
            bankReconciliationHeader,
            isAutomation,
            matchRuleRecId
        #endmacro

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, listPack] = _packedClass;
                entryList = List::create(listPack);
                return true;

            case #Version1:
                [version, #Version1List, listPack] = _packedClass;
                entryList = List::create(listPack);
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankDocumentOnUnmatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank document involved in the unmatching.
    /// </summary>
    /// <param name="_documentList">
    /// The List of bank documents to be updated.
    /// </param>
    protected void updateBankDocumentOnUnmatch(List _documentList)
    {
        ListEnumerator enumerator = _documentList.getEnumerator();
        while (enumerator.moveNext())
        {
            BankReconciliationMatchingEntry matchingEntry = enumerator.current();

            //clear correction amount
            BankDocumentTable::updateCorrectionBankCurrencyAmount(matchingEntry.parmRefRecId(), 0);

            if (FeatureStateProvider::isFeatureEnabled(BankTransClearedDateAdvancedBankReconciliationFeature::instance()))
            {
                BankAccountTrans::updateBankTransClearedDates(dateNull(), matchingEntry.parmRefRecId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateImpactedMatchingEntriesInUnMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates matching entries invovled in the unmatch operation.
    /// </summary>
    /// <param name="_statementList">
    /// The list of impacted statement.
    /// </param>
    /// <param name="_documentList">
    /// The list of impacted document.
    /// </param>
    protected void updateImpactedMatchingEntriesInUnMatch(
        List _statementList,
        List _documentList)
    {
        this.updateStatementBankDocumentOnUnmatch(_statementList);
        this.updateStatementStatusOnUnmatch(_statementList);
        this.updateStatementGeneratePaymentOnUnmatch(_statementList);
        this.updateBankDocumentOnUnmatch(_documentList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementBankDocumentOnUnmatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank statement status at unmatching.
    /// </summary>
    /// <param name="_statementList">
    /// The List of bank statement lines to be updated.
    /// </param>
    protected void updateStatementBankDocumentOnUnmatch(List    _statementList)
    {
        // When MBR is enabled, BankStmtISOReportEntry::markNewBankDocument(statementLine.RecId, false) logic
        // has been executed in BankStmtISOReportEntry::reversePostedStatementLineAndPostingInfo() and can be skipped
        if (!FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            ListEnumerator enumerator = _statementList.getEnumerator();
            while (enumerator.moveNext())
            {
                BankReconciliationMatchingEntry matchingEntry = enumerator.current();
                BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(matchingEntry.parmRefRecId());
                if (statementLine.isNewBankDocument())
                {
                    BankStmtISOReportEntry::markNewBankDocument(statementLine.RecId, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementStatusOnUnmatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates bank statement status at unmatching.
    /// </summary>
    /// <param name="_statementList">
    /// The List of bank statement lines to be updated.
    /// </param>
    protected void updateStatementStatusOnUnmatch(List _statementList)
    {
        ListEnumerator enumerator = _statementList.getEnumerator();
        while (enumerator.moveNext())
        {
            BankReconciliationMatchingEntry matchingEntry = enumerator.current();
            BankStmtISOAccountStatement::find(BankStmtISOReportEntry::find(matchingEntry.parmRefRecId()).BankStmtISOAccountStatement).refreshMatchingStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of <c>BankReconciliationMatchingMatchProcessor</c>.
    /// </summary>
    /// <param name="_header">
    /// The reconciliation header.
    /// </param>
    /// <param name="_isAutomation">
    /// Whether the processor is used in an automatic processing or manual processing.
    /// </param>
    /// <param name="_matchRuleRefRecid">
    /// The based match rule record id if it is an automatic processing.
    /// </param>
    /// <returns>
    /// The instance of <c>BankReconciliationMatchingMatchProcessor</c>.
    /// </returns>
    public static BankReconciliationMatchingMatchProcessor construct(
        BankReconciliationHeader _header,
        boolean _isAutomation = false,
        BankReconciliationMatchRuleRefRecId _matchRuleRefRecid = 0)
    {
        BankReconciliationMatchingMatchProcessor processor;

        processor = new BankReconciliationMatchingMatchProcessor();
        processor.parmBankReconciliationHeader(_header);
        processor.parmIsAutomation(_isAutomation);
        processor.parmMatchRuleRecId(_matchRuleRefRecid);

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPack</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance from pack.
    /// </summary>
    /// <param name="_pack">
    ///     The pack of instance.
    /// </param>
    /// <returns>
    ///     The created instance.
    /// </returns>
    /// <remarks>
    ///     Only used when create a instance on server from client instance.
    /// </remarks>
    private static BankReconciliationMatchingMatchProcessor constructFromPack(container _pack)
    {
        BankReconciliationMatchingMatchProcessor matchProcessor = new BankReconciliationMatchingMatchProcessor();
        matchProcessor.unpack(_pack);

        return  matchProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnmatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes unmatching.
    /// </summary>
    /// <param name="_headerRecId">
    /// The reconciliation header id.
    /// </param>
    /// <param name="_entryRecId">
    /// The entry id.
    /// </param>
    /// <param name="_type">
    /// The entry type.
    /// </param>
    public static void processUnmatch(
        RecId _headerRecId,
        RecId _entryRecId,
        BankReconciliationMatchingEntryType _type)
    {
        BankReconciliationHeader header = BankReconciliationHeader::find(_headerRecId);
        BankReconciliationMatchingMatchProcessor matchProcessor = BankReconciliationMatchingMatchProcessor::construct(header);

        matchProcessor.doProcessUnmatch(_entryRecId, _type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchStatementWithPostedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Matches the statement line with posted payment.
    /// </summary>
    /// <param name = "_statementLine">The statement line.</param>
    /// <param name = "paymentLedgerJournalTransRecId">The payment ledger journal trans.</param>
    /// <param name = "_reconciliation">The reconciliation header.</param>
    /// <param name = "_isAutomation">Whether the matching is in an automatic processing.</param>
    /// <param name = "_matchRuleRefRecid">The match rule record id for the automatic match processing.</param>
    internal static void matchStatementWithPostedPayment(
        BankStmtISOReportEntry _statementLine,
        RefRecId _paymentLedgerJournalTransRecId,
        BankReconciliationHeader _reconciliation,
        boolean _isAutomation = false,
        BankReconciliationMatchRuleRefRecId _matchRuleRefRecid = 0)
    {
        BankAccountTrans bankAccountTrans = BankAccountTrans::findBySource(tableNum(LedgerJournalTrans), _paymentLedgerJournalTransRecId);
        BankDocumentTable bankDocumentTable = BankDocumentTable::findBySource(bankAccountTrans.TableId, bankAccountTrans.RecId);

        if (bankDocumentTable
            && bankAccountTrans.TransDate <= _reconciliation.CutOffDate
            && bankAccountTrans.AmountCur == _statementLine.getAmountWithSign())
        {
            BankReconciliationMatchingMatchProcessor matchingMatchProcessor = BankReconciliationMatchingMatchProcessor::construct(_reconciliation, _isAutomation, _matchRuleRefRecid);

            BankReconciliationMatchingEntry statementMatchingEntry = BankReconciliationMatchingEntry::construct(
                BankReconciliationMatchingEntryType::BankStatement,
                _statementLine.RecId);
            matchingMatchProcessor.addEntry(statementMatchingEntry);

            BankReconciliationMatchingEntry documentMatchingEntry = BankReconciliationMatchingEntry::construct(
                BankReconciliationMatchingEntryType::BankDocument,
                bankDocumentTable.RecId);
            matchingMatchProcessor.addEntry(documentMatchingEntry);

            matchingMatchProcessor.processMatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMatchForGeneratedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the matching for generated voucher.
    /// </summary>
    /// <param name = "_statementLine">The statement line.</param>
    /// <param name = "_isAutomation">Whether the processor is used in an automatic processing or manual processing.</param>
    /// <param name = "_matchRuleRefRecid">The match rule record id if it is an automatic processing.</param>
    internal static void processMatchForGeneratedVoucher(
        BankStmtISOReportEntry _statementLine,
        boolean _isAutomation = false,
        BankReconciliationMatchRuleRefRecId _matchRuleRefRecid = 0)
    {
        if (_statementLine.RecId)
        {
            BankStmtISOAccountStatement statement = _statementLine.getStatement();
            if (statement.RecId)
            {
                BankReconciliationHeader reconciliation = BankReconciliationHeader::findActiveHeaderByAccountId(statement.BankAccountTable);
                if (reconciliation.RecId)
                {
                    ttsbegin;
                    // Move cut-off date to max(accounting date, next statement date) to make sure header information is correct
                    if (_statementLine.AccountingDate > reconciliation.CutOffDate)
                    {
                        reconciliation.updateCutOffDateAfterSpecificDate(_statementLine.AccountingDate);
                    }
                    BankReconciliationMatchingMatchProcessor matchProcessor = BankReconciliationMatchingMatchProcessor::construct(reconciliation, _isAutomation, _matchRuleRefRecid);
                    matchProcessor.addEntry(BankReconciliationMatchingEntry::construct(BankReconciliationMatchingEntryType::BankStatement, _statementLine.RecId));
                    matchProcessor.processMatch();
                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnmatchForReversedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the unmatching process for reversed voucher.
    /// </summary>
    /// <param name = "_statementLine">The RecId of statement line.</param>
    internal static void processUnmatchForReversedVoucher(RecId _statementLine)
    {
        if (_statementLine)
        {
            BankReconciliationMatching bankReconciliationMatching;
            BankReconciliationMatchingItem bankReconciliationMatchingItem;
            BankReconciliationHeader bankReconciliationHeader;
            select firstonly RecId from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankStmtISOReportEntry == _statementLine
                join RecId from bankReconciliationMatching
                    where bankReconciliationMatching.RecId == bankReconciliationMatchingItem.BankReconciliationMatching
                join RecId, IsReconciled from bankReconciliationHeader
                    where bankReconciliationHeader.RecId == bankReconciliationMatching.BankReconciliationHeader;
            if (bankReconciliationHeader.RecId)
            {
                if (bankReconciliationHeader.IsReconciled)
                {
                    BankReconciliationMatching::cancelReconcile(bankReconciliationMatching.RecId);
                }
                else
                {
                    BankReconciliationMatchingMatchProcessor::processUnmatch(
                        bankReconciliationHeader.RecId,
                        _statementLine,
                        BankReconciliationMatchingEntryType::BankStatement);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatementGeneratePaymentOnUnmatch</Name>
				<Source><![CDATA[
    private void updateStatementGeneratePaymentOnUnmatch(List _statementList)
    {
        // Delete BankStatementLinePaymentInformation when unmatch for generate payment
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            ListEnumerator enumerator = _statementList.getEnumerator();
            while (enumerator.moveNext())
            {
                BankReconciliationMatchingEntry matchingEntry = enumerator.current();
                BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(matchingEntry.parmRefRecId());
                if (statementLine.RecId && statementLine.isPayment())
                {
                    BankStatementLinePaymentInformation paymentInformation = BankStatementLinePaymentInformation::findByReportEntry(statementLine.RecId, true);
                    paymentInformation.delete();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMatchForGeneratedPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the matching after generate payment.
    /// </summary>
    /// <param name = "_accountId">The bank account id.</param>
    /// <param name = "_bankStmtISOReportEntryList">The statement line list.</param>
    /// <returns>true if cut-off date is updated, otherwise false.</returns>
    internal static void processMatchForGeneratedPayment(CompanyBankAccountId _accountId, List _bankStmtISOReportEntryList)
    {
        // process match after generate payment. Move cut-off date later to make sure it can be matched
        BankReconciliationHeader header = BankReconciliationHeader::findActiveHeaderByAccountId(_accountId);

        if (header.RecId)
        {
            ListEnumerator statementLineEnumerator = _bankStmtISOReportEntryList.getEnumerator();
            while (statementLineEnumerator.moveNext())
            {
                BankStmtISOReportEntry statementLine = BankStmtISOReportEntry::find(statementLineEnumerator.current());
                if (statementLine.RecId)
                {
                    BankStatementLinePaymentInformation paymentInfo = BankStatementLinePaymentInformation::findByReportEntry(statementLine.RecId);
                    if (paymentInfo.RecId)
                    {
                        ttsbegin;

                        // Move cut-off date to max(payment date, next statement date) to make sure it can be matched
                        if (paymentInfo.TransDate > header.CutOffDate)
                        {
                            header.updateCutOffDateAfterSpecificDate(paymentInfo.TransDate);
                        }

                        BankReconciliationMatchingMatchProcessor::matchStatementWithPostedPayment(statementLine, paymentInfo.LedgerJournalTrans, header);
                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>