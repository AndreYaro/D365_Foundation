<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>SMASubscriptionGenerator_NonRegular</Name>
  <SourceCode>
    <Declaration><![CDATA[
class SMASubscriptionGenerator_NonRegular extends SMASubscriptionGenerator
{
    boolean         fillOut;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>action</Name>
        <Source><![CDATA[
        public void action()
    {
        if ( SMASubscriptionCreate.parmContinues() && SMASubscriptionTable.StartDate != dateNull())
        {
            if (SMASubscriptionCreate.parmStartDate() - 1 != SMASubscriptionTable.LatestEnddate)
            {
                return;
            }
        }
        super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>createTrans</Name>
        <Source><![CDATA[
        public void createTrans()
    {
        ProjPeriodLine              projPeriodLine;
        Amount                      salesPrice;
        container                   openPeriods;
        TransDate                   fromDate;
        TransDate                   toDate;
        TransDate                   parmFromDate;
        TransDate                   parmToDate;
        SMASubscriptionPeriodType   periodType;
        Counter                     counter;

        while select PeriodId, PeriodFrom, PeriodTo from projPeriodLine
            where    projPeriodLine.PeriodId     == SMASubscriptionTable.invoicePeriodCode()                 &&
                     projPeriodLine.PeriodFrom   >= SMASubscriptionTable.invoiceperiodStart(this.fromDate()) &&
                     projPeriodLine.PeriodTo     <= SMASubscriptionTable.invoiceperiodEnd(this.toDate())
        {
            this.curInvoicePeriodFrom(projPeriodLine.PeriodFrom);
            this.curInvoicePeriodTo(projPeriodLine.PeriodTo);

            [parmFromDate, parmToDate] = this.getActualDates(projPeriodLine.PeriodFrom, projPeriodLine.PeriodTo);

            openPeriods = SMASubscriptionTable.findPeriods(parmFromDate, parmToDate);

            if (openPeriods)
            {
                for (counter = 1; counter <= conlen(openPeriods); counter++)
                {
                    [fromDate, toDate]  = conpeek(openPeriods, counter);
                    periodType          = this.getPeriodType(fromDate, toDate);
                    salesPrice          = this.getSalesprice(fromDate, toDate);
                    this.postTrans(salesPrice, fromDate, toDate, periodType);
                }
            }
        }
    }
]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
        public void run()
    {
        super();

        this.setDate();
    }

]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>