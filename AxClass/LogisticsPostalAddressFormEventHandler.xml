<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsPostalAddressFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class LogisticsPostalAddressFormEventHandler
{
    private static LogisticsPostalAddressExtensionOverrides postalAddressExtensionOverrides;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LogisticsPostalAddress_OnClosing</Name>
				<Source><![CDATA[
    [FormEventHandler(formStr(LogisticsPostalAddress), FormEventType::Closing)]
    public static void LogisticsPostalAddress_OnClosing(xFormRun sender, FormEventArgs e)
    {
        sender.canClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Action triggered after Form/LogisticsPostalAddress/init is executed.
    /// </summary>
    /// <param name = "args">Arguments provided by the event publisher</param>
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, init))]
    public static void LogisticsPostalAddress_Post_init(XppPrePostArgs args)
    {
        #ISOCountryRegionCodes

        FormRun    form = args.getThis();
        FormDesign formDesign = form.design();
        LogisticsEntityPostalAddressFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        if (!postalAddressExtensionOverrides)
        {
            postalAddressExtensionOverrides = LogisticsPostalAddressExtensionOverrides::construct();
        }

        // We override jumpRef method at this point because there is no available event method to register against that would allow to extend the jumpRef behavior.
        FormObjectSet taxInformationIN_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, TaxInformation_IN));
        FormDataObject eccNumber = taxInformationIN_ds.object(fieldnum(TaxInformation_IN, ECCNumber));
        eccNumber.registerOverrideMethod("jumpref", "taxInformation_IN_jumpRef", postalAddressExtensionOverrides);

        FormDataObject iecRegistrationNumberTable = taxInformationIN_ds.object(fieldnum(TaxInformation_IN, IECRegistrationNumberTable));
        iecRegistrationNumberTable.registerOverrideMethod("jumpref", "taxInformation_IN_jumpRef", postalAddressExtensionOverrides);

        FormDataObject manECCRegistrationNumberTable = taxInformationIN_ds.object(fieldnum(TaxInformation_IN, ManECCRegistrationNumberTable));
        manECCRegistrationNumberTable.registerOverrideMethod("jumpref", "taxInformation_IN_jumpRef", postalAddressExtensionOverrides);

        FormDataObject salesTaxRegistrationNumber = taxInformationIN_ds.object(fieldnum(TaxInformation_IN, SalesTaxRegistrationNumber));
        salesTaxRegistrationNumber.registerOverrideMethod("jumpref", "taxInformation_IN_jumpRef", postalAddressExtensionOverrides);

        FormDataObject stcRegistrationNumberTable = taxInformationIN_ds.object(fieldnum(TaxInformation_IN, STCRegistrationNumberTable));
        stcRegistrationNumberTable.registerOverrideMethod("jumpref", "taxInformation_IN_jumpRef", postalAddressExtensionOverrides);

        FormDataObject traderECCRegistrationNumberTable = taxInformationIN_ds.object(fieldnum(TaxInformation_IN, TraderECCRegistrationNumberTable));
        traderECCRegistrationNumberTable.registerOverrideMethod("jumpref", "taxInformation_IN_jumpRef", postalAddressExtensionOverrides);

        FormStringControl carrierCodeControl = form.design().controlname(formControlStr(LogisticsPostalAddress, TMSCarrierInfo_CarrierCode));
        carrierCodeControl.registerOverrideMethod('jumpRef', methodStr(LogisticsPostalAddressExtensionOverrides, TMSCarrierInfo_CarrierCode_jumpRef), postalAddressExtensionOverrides);

        LogisticsPostalAddressFormEventHandler::overrideTaxRegistrationTypeApplicabilityRuleMethods(formDesign, formControlStr(LogisticsPostalAddress, TaxRegistration_TaxRegistrationTypeApplicabilityRule));
        LogisticsPostalAddressFormEventHandler::overrideTaxRegistrationTypeApplicabilityRuleMethods(formDesign, formControlStr(LogisticsPostalAddress, Number_TaxRegistrationTypeApplicabilityRule));

        FormStringControl taxRegistrationNumber = formDesign.controlname(formControlStr(LogisticsPostalAddress, TaxRegistrationGrid_RegistrationNumber)) as FormStringControl;
        taxRegistrationNumber.registerOverrideMethod(methodStr(FormStringControl, tooltip), methodStr(LogisticsPostalAddressExtensionOverrides, taxRegistrationGrid_RegistrationNumber_tooltip), postalAddressExtensionOverrides);

        LogisticsPostalAddressFormEventHandler::UpdateTaxRegistrationValues(form, postalAddressForm);

        FormDataSource taxRegistration_ds = form.dataSource(formDataSourceStr(LogisticsPostalAddress, TaxRegistration)) as FormDataSource;

        if (callerTableId == tableNum(PayrollTaxRegion))
        {
            FormStringControl overview_description = formDesign.controlName(formControlStr(LogisticsPostalAddress, Overview_Description)) as FormStringControl;
            overview_description.helpText("@GlobalAddressBook:TheNameOfTheTaxRegion");
            FormStringControl details_Description = formDesign.controlName(formControlStr(LogisticsPostalAddress, Details_Description)) as FormStringControl;
            details_Description.helpText("@GlobalAddressBook:TheNameOfTheTaxRegion");
            FormStaticTextControl PayrollTaxRegionStaticText = formDesign.controlName(formControlStr(LogisticsPostalAddress, PayrollTaxRegionStaticText)) as FormStaticTextControl;
            PayrollTaxRegionStaticText.visible(true);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH])
                && (callerTableId == tableNum(CustTable) || callerTableId == tablenum(VendTable)))
        {
            FormFunctionButtonControl generalTabTaxInfo =
                formDesign.controlName(formControlStr(LogisticsPostalAddress, LogisticsPostalAddressTaxInfo_TH)) as FormFunctionButtonControl;
            generalTabTaxInfo.visible(true);
        }

        if (RetailSMB::IsRetailSMBEnabled())
        {
            RetailSMB::SetVisible(form);
        }

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            // Country region codes property does not support to show/hide controls bound to global tables
            taxRegistration_DS.object(fieldNum(TaxRegistration, DepreciationMethod_JP)).visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_updateLocalizationControlsBasedOnCountry</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, updateLocalizationControlsBasedOnCountry))]
    public static void LogisticsPostalAddress_Post_updateLocalizationControlsBasedOnCountry(XppPrePostArgs args)
    {
        LogisticsAddressCountryRegionId _countryRegionId = args.getArg("_countryRegionId");
        FormRun           form = args.getThis();
        FormDesign        formDesign = form.design();
        FormDataSource    logisticsPostalAddress_ds = form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        FormStringControl logisticsPostalAddress_StateName_RU  = formDesign.controlName(formControlStr(LogisticsPostalAddress, LogisticsPostalAddress_StateName_RU));
        FormStringControl logisticsPostalAddress_CountyName_RU = formDesign.controlName(formControlStr(LogisticsPostalAddress, LogisticsPostalAddress_CountyName_RU));
        FormDataObject    fdo = logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, State));

        if (!fdo || !fdo.visible())
        {
            logisticsPostalAddress_StateName_RU.visible(false);
        }
        else
        {
            logisticsPostalAddress_StateName_RU.visible(true);
        }

        fdo = logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, County));
        
        if (!fdo || !fdo.visible())
        {
            logisticsPostalAddress_CountyName_RU.visible(false);
        }
        else
        {
            logisticsPostalAddress_CountyName_RU.visible(true);
        }

        LogisticsPostalAddressFormEventHandler::updatePrimaryControl(form);

        LogisticsPostalAddressFormEventHandler::UpdateAddressControls_Payroll(form);
        // <GJP>
        LogisticsPostalAddressFormEventHandler::UpdateControls_JP(form, _countryRegionId);
        // </GJP>
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_updatePrimaryControl</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, OnChangeIsPrimary))]
    public static void LogisticsPostalAddress_Post_updatePrimaryControl(XppPrePostArgs args)
    {
        LogisticsPostalAddressFormEventHandler::updatePrimaryControl(args.getThis());
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditPrimary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified <c>FromCheckBoxControl</c> should be editable.  
    /// </summary>
    /// <param name = "_isPrimary">The <c>FormCheckBoxControl</c> to check.</param>
    /// <param name = "_callerTableId">The table id of the record from which the form is called.</param>
    /// <param name = "_postalAddressForm">A <c>LogisticsEntityPostalAddressFormHandler</c> instance.</param>
    /// <returns>true if the specified <c>FromCheckBoxControl</c> should be editable; otherwise, false.</returns>
    protected static boolean allowEditPrimary(FormCheckBoxControl _isPrimary, TableId _callerTableId, LogisticsEntityPostalAddressFormHandler _postalAddressForm)
    {
        boolean allowEdit = _isPrimary.allowEdit();

        if (_callerTableId == tableNum(HRMApplicationBasket))
        {
            allowEdit = allowEdit && !HcmAppBasketAddressFormHandler::disablePrimaryControl(_postalAddressForm.getEntity());
        }

        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrimaryControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the editability of the 'IsPrimary' control on the specified <c>FormRun</c> instance.
    /// </summary>
    /// <param name = "_form">A <c>FormRun</c> instance.</param>
    protected static void updatePrimaryControl(FormRun _form)
    {
        FormRun                form                      = _form;
        Object                 callerObject              = form.args().caller();
        FormCheckBoxControl    isPrimary                 = form.design().controlName(formControlStr(LogisticsPostalAddress, IsPrimary));
        FormCheckBoxControl    isPrimaryTaxRegistration  = form.design().controlName(formControlStr(LogisticsPostalAddress, IsPrimaryTaxRegistration)) as FormCheckBoxControl;
        FormComboBoxControl    viewOption                = form.design().controlName(formControlStr(LogisticsPostalAddress, viewOption)) as FormComboBoxControl;
        FormDataSource         logisticsPostalAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        FormDataSource         logisticsLocation_ds      = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocation)) as FormDataSource;
        FormDataSource         logisticsLocationExt_ds   = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocationExt)) as FormDataSource;
        LogisticsPostalAddress logisticsPostalAddress    = logisticsPostalAddress_ds.cursor();
        LogisticsLocation      logisticsLocation         = logisticsLocation_ds.cursor();
        LogisticsLocationExt   logisticsLocationExt      = logisticsLocationExt_ds.cursor();
        LogisticsEntityPostalAddressFormHandler postalAddressForm = form.parmPostalAddressForm();

        CompanyInfo companyInfo;

        TableId callerTableId   = postalAddressForm.getCallerRecord().TableId;
        boolean allowEditPrimary  = LogisticsPostalAddressFormEventHandler::allowEditPrimary(isPrimary, callerTableId, postalAddressForm);

        isPrimary.allowEdit(allowEditPrimary);

        // Lock primary for LE if financial transactions exist and primary country/region is already defined.
        if (isPrimary.allowEdit() && postalAddressForm.isParty())
        {
            select firstonly RecId, DataArea, PrimaryAddressLocation
                from companyInfo
                where companyInfo.RecId == postalAddressForm.getEntity();

            // If party is legal entity, financial trans exist and primary location already exists
            if (companyInfo.RecId && GeneralJournalEntry::existForLedger(Ledger::primaryLedger(companyInfo.RecId)) &&
                companyInfo.PrimaryAddressLocation)
            {
                isPrimary.allowEdit(false);
            }
        }

        // <GBR>
        DirPartyRecId           dirPartyRecId_BR;
        DirPartyLocationRecId   dirPartyLocationRecId_BR;
        boolean                 allowEditFiscalInfo_BR = true;
        FormRun                 callerForm_BR;

        if (BrazilParameters::isEnabled())
        {
            if (LogisticsLocation && logisticsLocationExt)
            {
                // Reset value if set to Primary
                if (isPrimary.value() && logisticsLocation_ds.cursor().isNewRecord())
                {
                    logisticsLocationExt.cnpjcpfNum_BR = '';
                    logisticsLocationExt.ieNum_BR = '';
                }
            }

            if (callerObject is FormRun)
            {
                callerForm_BR = callerObject;

                if (callerForm_BR.name() == formStr(OMLegalEntity))
                {
                    if (isPrimary.value())
                    {
                        allowEditFiscalInfo_BR  = false;
                    }
                    else
                    {
                        dirPartyRecId_BR = DirPartyTable::findRec(postalAddressForm.getEntity()).RecId;

                        if (dirPartyRecId_BR)
                        {
                            dirPartyLocationRecId_BR = DirPartyLocation::findByPartyLocation(dirPartyRecId_BR, logisticsLocation.RecId).RecId;

                            if (FiscalEstablishment_BR::findByDirPartyLocation(dirPartyLocationRecId_BR))
                            {
                                allowEditFiscalInfo_BR = false;
                            }
                        }
                    }
                }
            }

            logisticsLocationExt_ds.object(fieldNum(LogisticsLocationExt, cnpjcpfNum_BR)).allowEdit(allowEditFiscalInfo_BR);
            logisticsLocationExt_ds.object(fieldNum(LogisticsLocationExt, ieNum_BR)).allowEdit(allowEditFiscalInfo_BR);
        }
        // </GBR>

        // <GEERU>
        if (logisticsPostalAddress_ds.allowEdit())
        {
            isPrimaryTaxRegistration.allowEdit(logisticsLocation.RecId == 0 || (logisticsLocation.RecId != 0 && isPrimaryTaxRegistration.value() == false && viewOption.selection() == LogisticsLocationViewOption::Active));
        }
        else
        {
            isPrimaryTaxRegistration.allowEdit(false);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_updateControls</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, updateControls))]
    public static void LogisticsPostalAddress_Post_updateControls(XppPrePostArgs args)
    {
        // The UpdateAddressControls_Payroll call must run after all registered updatedControls events,
        // so it is executed from a post event handler instead.
        LogisticsPostalAddressFormEventHandler::UpdateAddressControls_Payroll(args.getThis());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedControls</Name>
				<Source><![CDATA[
    [SubscribesTo(formStr(LogisticsPostalAddress), delegateStr(LogisticsPostalAddress, updatedControls))]
    public static void updatedControls(FormRun _formRun)
    {
        FormDataSource      logisticsLocation_ds     = _formRun.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocation))    as FormDataSource;
        FormDataSource      logisticsLocationExt_ds  = _formRun.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocationExt)) as FormDataSource;
        FormCheckBoxControl isPrimaryTaxRegistration = _formRun.design().controlName(formControlStr(LogisticsPostalAddress, IsPrimaryTaxRegistration)) as FormCheckBoxControl;
        FormCheckBoxControl oneTime                  = _formRun.design().controlName(formControlStr(LogisticsPostalAddress, OneTime)) as FormCheckBoxControl;
        LogisticsEntityPostalAddressFormHandler postalAddressForm = _formRun.parmPostalAddressForm();

        boolean enableEditing = logisticsLocation_ds.cursor() && postalAddressForm.getIsLocationOwner();

        if (postalAddressForm.showSalesTax())
        {
            logisticsLocationExt_ds.object(fieldNum(LogisticsLocationExt, TaxGroup)).enabled(enableEditing);
        }
        else
        {
            logisticsLocationExt_ds.object(fieldNum(LogisticsLocationExt, TaxGroup)).visible(false);
        }

        if (postalAddressForm.isMultiple())
        {
            oneTime.value(postalAddressForm.getIsOneTime());

            if (isPrimaryTaxRegistration)
            {
                isPrimaryTaxRegistration.value(postalAddressForm.getIsPrimaryTaxRegistration());
            }

            if (postalAddressForm.existsIsPrimaryTaxRegistrationField())
            {
                isPrimaryTaxRegistration.visible(true);
            }
        }

        LogisticsPostalAddressFormEventHandler::updatePrimaryControl(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_forceWriteDS</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, forceWriteDS))]
    public static void LogisticsPostalAddress_Post_forceWriteDS(XppPrePostArgs args)
    {
        FormRun form = args.getThis();
        FormDataSource shipCarrierAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, ShipCarrierAddress)) as FormDataSource;
        shipCarrierAddress_ds.forceWrite(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_updateDeliveryTab</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, updateDeliveryTab))]
    public static void LogisticsPostalAddress_Post_updateDeliveryTab(XppPrePostArgs args)
    {
        FormRun                  form                  = args.getThis();
        FormDesign               formDesign            = form.design();
        FormDataSource           shipCarrierAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, ShipCarrierAddress)) as FormDataSource;
        FormGroupControl         shipCarrierInfo       = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShipCarrierInfo));
        FormGroupControl         deliveryGroupCtrl     = formDesign.controlName(formControlStr(LogisticsPostalAddress, DeliveryGroupCtrl));
        SysLookupMultiSelectCtrl rolesCtrl             = args.getArg("_rolesCtrl");

        int enableDeliveryTab = conFind(rolesCtrl.get(), LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery).RecId);
        enableDeliveryTab = enableDeliveryTab && LogisticsPostalAddressFormEventHandler::isShippingCarrierAddressEnabled(form);

        shipCarrierAddress_ds.allowCreate(enableDeliveryTab);
        shipCarrierInfo.enabled(enableDeliveryTab);
        deliveryGroupCtrl.enabled(enableDeliveryTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_resetDates</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, resetDates))]
    public static void LogisticsPostalAddress_Post_resetDates(XppPrePostArgs args)
    {
        FormRun                form                      = args.getThis();
        FormDesign             formDesign                = form.design();
        FormDataSource         logisticsLocation_ds      = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocation)) as FormDataSource;
        LogisticsLocation      logisticsLocation         = logisticsLocation_ds.cursor();
        FormDataSource         logisticsPostalAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        LogisticsPostalAddress logisticsPostalAddress    = LogisticsPostalAddress_DS.cursor();
        FormCheckBoxControl    isPrimaryTaxRegistration  = formDesign.controlName(formControlStr(LogisticsPostalAddress, IsPrimaryTaxRegistration)) as FormCheckBoxControl;

        // <GEERU>
        if (isPrimaryTaxRegistration.value() == true && logisticsLocation.isNewRecord())
        {
            logisticsPostalAddress.ValidFrom = DateTimeUtil::utcNow();
            logisticsPostalAddress.ValidTo = DateTimeUtil::maxValue();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_Post_updateDesign</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(LogisticsPostalAddress), formMethodStr(LogisticsPostalAddress, updateDesign))]
    public static void LogisticsPostalAddress_Post_updateDesign(XppPrePostArgs args)
    {
        FormRun                  form            = args.getThis();
        FormBuildDesign          formBuildDesign = form.form().design();
        FormBuildCheckBoxControl oneTimeCBCtrl   = formBuildDesign.control('oneTime');
        LogisticsEntityPostalAddressFormHandler postalAddressForm = form.parmPostalAddressForm();

        if (postalAddressForm.isMultiple() && postalAddressForm.isParty())
        {
            if (form.args().openMode() == OpenMode::New &&
                postalAddressForm.parmIsTransaction())
            {
                oneTimeCBCtrl.visible(true);
            }
        }

        if (postalAddressForm.getCallerRecord().TableId == tableNum(PayrollTaxRegion))
        {
            formBuildDesign.caption("@GlobalAddressBook:TaxRegion");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsLocation_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsLocation), FormDataSourceEventType::Initialized)]
    public static void LogisticsLocation_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        sender.object(fieldNum(LogisticsLocation, Description)).visible(callerTableId != tableNum(AssetLocation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsLocation_OnInitValue</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsLocation), FormDataSourceEventType::InitValue)]
    public static void LogisticsLocation_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        LogisticsLocation logisticsLocation = sender.cursor();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        Common callerRecord = postalAddressForm.getCallerRecord();

        if (callerRecord.TableId == tableNum(AssetLocation))
        {
            AssetLocation assetLocation = postalAddressForm.getCallerRecord();
            logisticsLocation.Description = assetLocation.Location;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsLocation_OnValidatedWrite</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsLocation), FormDataSourceEventType::ValidatedWrite)]
    public static void LogisticsLocation_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        FormDataSource shipCarrierAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, ShipCarrierAddress)) as FormDataSource;

        if (form.parmCustAccount())
        {
            // Do not invoke validateWrite() directly because we don't want to call the base method.
            LogisticsPostalAddressFormEventHandler::ShipCarrierAddress_OnValidatingWrite(shipCarrierAddress_ds, e);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsLocation_OnActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsLocation), FormDataSourceEventType::Activated)]
    public static void LogisticsLocation_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        FormTabPageControl taxRegistrationPage = form.design().controlName(formControlStr(LogisticsPostalAddress, TaxRegistrationPage)) as FormTabPageControl;
        FormDataSource logisticsLocation_ds = form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsLocation));
        LogisticsLocation logisticsLocation = logisticsLocation_ds.cursor();

        taxRegistrationPage.enabled(logisticsLocation.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormDataSourceActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::Activated)]
    public static void FormDataSourceActivated(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        FormRun form = dataSource.formRun();
        FormGroupControl brazilGroup_BR = form.design().controlname(formControlStr(LogisticsPostalAddress, BrazilGroup_BR));

        // <GIN>
        LogisticsPostalAddressFormEventHandler::UpdateControls_IN(form);
        //</GIN>

        logisticsPostalAddressFormEventHandler::UpdateControls(form);

        // <GBR>
        brazilGroup_BR.visible(BrazilParameters::isEnabled());
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_SelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::SelectionChanged)]
    public static void LogisticsPostalAddress_SelectionChanged(FormDataSource dataSource, FormDataSourceEventArgs e)
    {
        FormRun form = dataSource.formRun();
        FormDataSource logisticsLocationExt_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocationExt)) as FormDataSource;

        logisticsLocationExt_ds.reread();
        logisticsLocationExt_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::Initialized)]
    public static void LogisticsPostalAddress_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        if (callerTableId == tableNum(PayrollTaxRegion))
        {
            sender.object(fieldNum(LogisticsPostalAddress, CountryRegionId)).enabled(false);
            form.design().caption("@GlobalAddressBook:TaxRegion");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnInitValue</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::InitValue)]
    public static void LogisticsPostalAddress_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        #ISOCountryRegionCodes

        FormRun form = sender.formRun();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;
        LogisticsPostalAddress logisticsPostalAddress     = sender.cursor();

        if (callerTableId == tableNum(PayrollTaxRegion))
        {
            logisticsPostalAddress.CountryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        }

        if (callerTableId == tableNum(RHRMPersonTable))
        {
            logisticsPostalAddress.CountryRegionId = RPayTaxParameters::find().PensionFundCountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnValidatedWrite</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::ValidatedWrite)]
    public static void LogisticsPostalAddress_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        FormDataSource     logisticsLocation_ds  = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocation)) as FormDataSource;
        LogisticsLocation  logisticsLocation     = logisticsLocation_ds.cursor();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        if (callerTableId == tableNum(PayrollTaxRegion))
        {
            PayrollTaxRegion::validateDuplicateTaxRegion(logisticsLocation.Description);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnWritten</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::Written)]
    public static void LogisticsPostalAddress_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        // <GEEU>
        if (form.args().record() && (callerTableId == tableNum(CustTable) || callerTableId == tableNum(VendTable)))
        {
            form.args().record().validateWrite();
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnWritting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress ), FormDataSourceEventType::Writing)]
    public static void LogisticsPostalAddress_OnWritting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LogisticsPostalAddress postalAddressUpserted = sender.cursor();

        // Populate the channel reference id when its not previously set.
        if (System.String::IsNullOrWhiteSpace(postalAddressUpserted.ChannelReferenceId))
        {
            postalAddressUpserted.ChannelReferenceId = System.Guid::NewGuid().ToString();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_CountryRegionId_Modified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formdatafieldstr(LogisticsPostalAddress, LogisticsPostalAddress, CountryRegionId), FormDataFieldEventType::Modified)]
    public static void LogisticsPostalAddress_CountryRegionId_Modified(FormDataObject dataSource, FormDataFieldEventArgs e)
    {
        #ISOCountryRegionCodes

        FormDataSource         logisticsPostalAddress_ds  = dataSource.dataSource();
        LogisticsPostalAddress logisticsPostalAddress     = logisticsPostalAddress_ds.cursor();
        FormRun                form                       = logisticsPostalAddress_ds.formRun();
        FormDesign             formDesign                 = form.design();
        FormDataSource         taxRegistration_ds         = form.dataSource(formDataSourceStr(LogisticsPostalAddress, TaxRegistration)) as FormDataSource;
        FormTabPageControl     taxInformationManagement   = formDesign.controlname(formControlStr(LogisticsPostalAddress, TaxInformationManagement));
        FormComboBoxControl    taxGSTEPZCode_IN           = formDesign.controlname(formControlStr(LogisticsPostalAddress, LogisticsLocationExt_TaxGSTEPZCode_IN));
        FormGroupControl       brazilGroup_BR             = formDesign.controlname(formControlStr(LogisticsPostalAddress, BrazilGroup_BR));
        LogisticsAddressCountryRegionId prevCountryRegionId = form.parmPrevCountryRegionId();
        LogisticsAddressCountryRegionISOCode isoCode        = LogisticsAddressCountryRegion::find(logisticsPostalAddress.CountryRegionId).isOcode;
        TableId                callerTableId;

        if (isoCode == #isoIN)
        {
            LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
            callerTableId = postalAddressForm.getCallerRecord().TableId;
        }

        // The country of the TaxRegistration can be either the country of primary address of the current entity
        // (customer, vendor, legal entity) or the country of the primary address of current company.
        // If the current company country is changed, the corresponding TaxRegistration record needs to be deleted
        // as it does not satisfy that requirement.
        if (prevCountryRegionId != ''
            && logisticsPostalAddress.Location
            && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && prevCountryRegionId != CompanyInfo::find().postalAddress().CountryRegionId)
        {
            TaxRegistration::deleteForCountryId(logisticsPostalAddress.Location, prevCountryRegionId);
            taxRegistration_ds.executeQuery();
        }

        // LogisticsPostalAddress data source -> CountryRegionId field -> modified() -> after calling super()
        // <GIN>
        taxInformationManagement.visible(isoCode == #isoIN);

        taxGSTEPZCode_IN.visible(isoCode == #isoIN && (callerTableId == tableNum(VendTable) || callerTableId == tableNum(CustTable)));
        // </GIN>

        if (TaxIntegrationUtils::isTaxInformationEnabled(isoCode))
        {
            taxInformationManagement.visible(true);
        }
        // </GTE>

        // <GBR>
        brazilGroup_BR.visible(isoCode == #isoBR);
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>CNPJCPFNum_BR_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, LogisticsLocationExt, CNPJCPFNum_BR), FormDataFieldEventType::Modified)]
    public static void CNPJCPFNum_BR_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource       logisticsLocationExt_ds = sender.dataSource();
        FormRun              form                    = logisticsLocationExt_ds.formRun();
        LogisticsLocationExt logisticsLocationExt    = logisticsLocationExt_ds.cursor();

        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        DirPartyType partyType = DirPartyTable::findRec(postalAddressForm.getEntity()).type();
        logisticsLocationExt.cnpjcpfNum_BR = FiscalInformationUtil_BR::formatCNPJCPF(partyType, logisticsLocationExt.cnpjcpfNum_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CNPJCPFNum_BR_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, LogisticsLocationExt, CNPJCPFNum_BR), FormDataFieldEventType::Validated)]
    public static void CNPJCPFNum_BR_OnValidated(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource         logisticsLocationExt_ds   = sender.dataSource();
        FormRun                form                      = logisticsLocationExt_ds.formRun();
        LogisticsLocationExt   logisticsLocationExt      = logisticsLocationExt_ds.cursor();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();

        // validate -> after super()
        FiscalInformationUtil_BR::validateCNPJCPFNum(postalAddressForm.getEntity(), logisticsLocationExt.cnpjcpfNum_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IENum_BR_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, LogisticsLocationExt, IENum_BR), FormDataFieldEventType::Validated)]
    public static void IENum_BR_OnValidated(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource         logisticsLocationExt_ds   = sender.dataSource();
        FormRun                form                      = logisticsLocationExt_ds.formRun();
        FormDataSource         logisticsPostalAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        LogisticsPostalAddress logisticsPostalAddress    = logisticsPostalAddress_ds.cursor();
        LogisticsLocationExt   logisticsLocationExt      = logisticsLocationExt_ds.cursor();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();

        // validate -> after super()
        FiscalInformationUtil_BR::validateIENum(DirPartyTable::findRec(postalAddressForm.getEntity()).type(), logisticsLocationExt.ieNum_BR, '', logisticsPostalAddress.State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxGroup_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, LogisticsLocationExt, TaxGroup), FormDataFieldEventType::Modified)]
    public static void TaxGroup_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource         logisticsLocationExt_ds   = sender.dataSource();
        FormRun                form                      = logisticsLocationExt_ds.formRun();
        FormDataSource         logisticsPostalAddress_ds = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        LogisticsPostalAddress logisticsPostalAddress    = logisticsPostalAddress_ds.cursor();
        LogisticsLocationExt   logisticsLocationExt      = logisticsLocationExt_ds.cursor();

        // modified -> before super()
        MCRAutoTaxSearch     mcrAutoTaxSearch = new MCRAutoTaxSearch();

        //// Checks to see if they have Auto Tax Search turned on
        if (TaxParameters::find().mcrAutoTaxSearch == true)
        {
            mcrAutoTaxSearch.taxWarnings(logisticsLocationExt.TaxGroup,
                logisticsPostalAddress.City,
                logisticsPostalAddress.State,
                logisticsPostalAddress.County,
                logisticsPostalAddress.ZipCode,
                logisticsPostalAddress.CountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShipCarrierAddress_OnValidatingWrite</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, ShipCarrierAddress), FormDataSourceEventType::ValidatingWrite)]
    public static void ShipCarrierAddress_OnValidatingWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSource     shipCarrierAddress_ds = sender as FormDataSource;
        FormRun            form                  = sender.formRun();
        ShipCarrierAddress shipCarrierAddress    = shipCarrierAddress_ds.cursor();
        FormDataSource     logisticsLocation_ds  = form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsLocation)) as FormDataSource;
        LogisticsLocation  logisticsLocation     = logisticsLocation_ds.cursor();

        var custAccount = Form.parmCustAccount();
        
        if (custAccount)
        {
            shipCarrierAddress.CustAccount = custAccount;
        }

        if (logisticsLocation)
        {
            shipCarrierAddress.Location = logisticsLocation.RecId;
        }
        
        if (shipCarrierAddress.CustAccount != '')
        {
            LogisticsLocationAppUtil::shipCarrierCheck(tableNum(ShipCarrierAddress),
                logisticsLocation,
                shipCarrierAddress.DlvModeId,
                shipCarrierAddress.DlvTermId,
                shipCarrierAddress.ShipCarrierAccount,
                shipCarrierAddress.CustAccount,
                form.parmRolesCtrl().get());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShipCarrierAddress_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, ShipCarrierAddress), FormDataSourceEventType::Initialized)]
    public static void ShipCarrierAddress_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun form = sender.formRun();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        if (form && sender)
        {
            sender.allowCreate(false);

            sender.linkType(QueryDataLinkType::Passive);
            sender.joinSource(0);
        }
        sender.cursor().skipDataSourceValidateWrite(true);

        // ShipCarrierAddress data source -> init
        // don't write to this table when this is not a customer
        if (callerTableId == tableNum(CustTable))
        {
            if (form.args().record())
            {
                CustTable custTable = form.args().record();
                form.parmCustAccount(custTable.AccountNum);
            }
        }
        else
        {
            sender.joinSource(0);
        }

        // Hide the delivery tab if shipping carrier address is disabled
        FormTabPageControl deliveryTab = form.design().controlName(formcontrolstr(LogisticsPostalAddress, DeliveryTab));
        deliveryTab.visible(LogisticsPostalAddressFormEventHandler::isShippingCarrierAddressEnabled(form));

        // super();
        Query qSender = sender.query();
        if (qSender)
        {
            QueryBuildDataSource qbds = qSender.dataSourceName(sender.name());
            if (form.parmCustAccount())
            {
                qbds.addRange(fieldNum(ShipCarrierAddress, CustAccount)).value(form.parmCustAccount());
            }
            else
            {
                qbds.clearLinks();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TAN_OnValidated</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, TaxInformation_IN, TAN), FormDataFieldEventType::Validated)]
    public static void TAN_OnValidated(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource taxInformation_IN_ds = sender.datasource();
        TaxInformation_IN taxInformation_IN = taxInformation_IN_ds.cursor();

        FormRun form = taxInformation_IN_ds.formRun();
        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        switch (callerTableId)
        {
            case tableNum(CustTable):
                taxInformation_IN.validateTAN(TaxRegistrationType_IN::Customers);
                break;
            case tableNum(VendTable):
                taxInformation_IN.validateTAN(TaxRegistrationType_IN::Vendors);
                break;
            case tableNum(CompanyInfo):
                taxInformation_IN.validateTAN(TaxRegistrationType_IN::Company);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxRegistration_OnQueryExecuting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, TaxRegistration), FormDataSourceEventType::QueryExecuting)]
    public static void TaxRegistration_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun                 form                        = sender.formRun();
        Query                   taxRegistration_q           = sender.query();
        QueryBuildDataSource    taxRegDs                    = taxRegistration_q.dataSourceTable(tablenum(TaxRegistration));

        //// add a filter to limit the country of the records in the tax registration
        //// grid, a data source is added at runtime (not modeled) and named so it does
        //// not conflict with the reference group data source to the same table
        QueryBuildDataSource    taxRegTypeApplRuleGridDS    = taxRegistration_q.dataSourceName("TaxRegTypeApplRuleGridDS");

        if (!taxRegTypeApplRuleGridDS)
        {
            taxRegTypeApplRuleGridDS = taxRegDs.addDataSource(tableNum(TaxRegistrationTypeApplicabilityRule), "TaxRegTypeApplRuleGridDS");
            taxRegTypeApplRuleGridDS.addLink(fieldNum(TaxRegistration, TaxRegistrationTypeApplicabilityRule), fieldNum(TaxRegistrationTypeApplicabilityRule, RecId));
            taxRegTypeApplRuleGridDS.fetchMode(QueryFetchMode::One2One);
        }

        QueryFilter filter = SysQuery::findOrCreateQueryFilter(taxRegistration_q, taxRegTypeApplRuleGridDS, fieldStr(TaxRegistrationTypeApplicabilityRule, CountryRegionId));

        FormDataSource          logisticsPostalAddress_ds = form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress));
        LogisticsPostalAddress  logisticsPostalAddress = logisticsPostalAddress_ds.cursor();

        str filterValue = SysQuery::value(logisticsPostalAddress.CountryRegionId);

        LogisticsEntityPostalAddressFormHandler postalAddressForm         = form.parmPostalAddressForm();
        TableId                                 callerTableId             = postalAddressForm.getCallerRecord().TableId;

        Debug::assert(filter != null);

        if (callerTableId == tableNum(CustTable) || callerTableId == tableNum(VendTable))
        {
            LogisticsAddressCountryRegionId countryRegionId = CompanyInfo::find().postalAddress().CountryRegionId;
            if (countryRegionId && logisticsPostalAddress.CountryRegionId != countryRegionId)
            {
                if (strLen(filterValue) > 0)
                {
                    filterValue += ',';
                }

                filterValue += SysQuery::value(countryRegionId);
            }
        }

        filter.value(filterValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>NewTaxRegistration_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, NewTaxRegistration), FormControlEventType::Clicked)]
    public static void NewTaxRegistration_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        FormGridControl taxRegistrationGrid = form.design().controlName(formControlStr(LogisticsPostalAddress, TaxRegistrationGrid)) as FormGridControl;
        taxRegistrationGrid.allowEdit(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EditTaxRegistration_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, EditTaxRegistration), FormControlEventType::Clicked)]
    public static void EditTaxRegistration_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        FormGridControl taxRegistrationGrid = form.design().controlName(formControlStr(LogisticsPostalAddress, TaxRegistrationGrid)) as FormGridControl;
        taxRegistrationGrid.allowEdit(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowOptionsButton_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, ShowOptionsButton), FormControlEventType::Clicked)]
    public static void ShowOptionsButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun     form                = sender.formRun();
        FormDesign  formDesign          = form.design();
        FormControl statusText          = formDesign.controlName(formControlStr(LogisticsPostalAddress, StatusText));
        FormControl showOptionsButton   = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowOptionsButton));
        FormControl showAsOfDateControl = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAsOfDateControl));
        FormControl showAllCheckBox     = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAllCheckBox));
        FormControl applyButton         = formDesign.controlName(formControlStr(LogisticsPostalAddress, ApplyButton));
        FormControl showCurrentButton   = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowCurrentButton));

        statusText.visible(false);
        showOptionsButton.enabled(true);
        showAsOfDateControl.visible(true);
        showAllCheckBox.visible(true);
        applyButton.visible(true);
        showCurrentButton.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowAllCheckBox_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, ShowAllCheckBox), FormControlEventType::Clicked)]
    public static void ShowAllCheckBox_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun             form                = sender.formRun();
        FormDesign          formDesign          = form.design();
        FormDateControl     showAsOfDateControl = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAsOfDateControl)) as FormDateControl;
        FormCheckBoxControl showAllCheckBox     = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAllCheckBox)) as FormCheckBoxControl;

        showAsOfDateControl.allowEdit(showAllCheckBox.value() == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ApplyButton_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, ApplyButton), FormControlEventType::Clicked)]
    public static void ApplyButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        str textStatus;
        FormRun               form                = sender.formRun();
        FormDesign            formDesign          = form.design();
        FormDateControl       showAsOfDateControl = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAsOfDateControl)) as FormDateControl;
        FormCheckBoxControl   showAllCheckBox     = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAllCheckBox))     as FormCheckBoxControl;
        FormButtonControl     showCurrentButton   = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowCurrentButton))   as FormButtonControl;
        FormButtonControl     showOptionsButton   = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowOptionsButton))   as FormButtonControl;
        FormButtonControl     applyButton         = formDesign.controlName(formControlStr(LogisticsPostalAddress, ApplyButton))         as FormButtonControl;
        FormStaticTextControl statusText          = formDesign.controlName(formControlStr(LogisticsPostalAddress, StatusText))          as FormStaticTextControl;

        TransDate transDate = showAsOfDateControl.dateValue();

        if (showAllCheckBox.value() == NoYes::Yes)
        {
            // Displaying all records
            form.parmDateFilterOptions(DateFilterOptions::Range);
            showCurrentButton.visible(true);
            textStatus = "@SYS325266";
        }
        else if (transDate == DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            // Displaying current active records
            form.parmDateFilterOptions(DateFilterOptions::AsOf);
            showOptionsButton.enabled(true);
            textStatus = "@SYS324023";
        }
        else
        {
            // Displaying records active as of date
            form.parmDateFilterOptions(DateFilterOptions::AsOfAndRange);
            showCurrentButton.visible(true);
            textStatus = strFmt("@SYS325267", transDate);
        }

        LogisticsPostalAddressFormEventHandler::TaxRegistration_ApplyFilter(Form, form.parmDateFilterOptions(), DateTimeUtil::newDateTime(transDate, 0));

        statusText.visible(true);
        statusText.text(textStatus);
        showOptionsButton.visible(true);
        showAsOfDateControl.visible(false);
        showAllCheckBox.visible(false);
        applyButton.visible(true);
        showOptionsButton.setFocus();
        showOptionsButton.enabled(true);
        showOptionsButton.clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowCurrentButton_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, ShowCurrentButton), FormControlEventType::Clicked)]
    public static void ShowCurrentButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun               form                = sender.formRun();
        FormDesign            formDesign          = form.design();
        FormDateControl       showAsOfDateControl = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAsOfDateControl)) as FormDateControl;
        FormCheckBoxControl   showAllCheckBox     = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAllCheckBox))     as FormCheckBoxControl;
        FormButtonControl     showOptionsButton   = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowOptionsButton))   as FormButtonControl;
        FormStaticTextControl statusText          = formDesign.controlName(formControlStr(LogisticsPostalAddress, StatusText))          as FormStaticTextControl;

        LogisticsPostalAddressFormEventHandler::TaxRegistration_ApplyFilter(form, DateFilterOptions::AsOf, DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 0));
        statusText.visible(true);
        statusText.text("@SYS324023");
        showOptionsButton.enabled(true);
        sender.visible(false);

        // reset show all control
        showAsOfDateControl.allowEdit(true);
        showAllCheckBox.value(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OneTime_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, OneTime), FormControlEventType::Modified)]
    public static void OneTime_OnModified(FormControl sender, FormControlEventArgs e)
    {
        FormRun                                 form              = sender.formRun();
        LogisticsEntityPostalAddressFormHandler postalAddressForm = form.parmPostalAddressForm();
        FormCheckBoxControl                     oneTime           = sender as FormCheckBoxControl;
        postalAddressForm.setIsOneTime(oneTime.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPrimary_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles modified event handler on IsPrimary check box
    /// </summary>
    /// <param name="sender">Event sender</param>
    /// <param name="e">Event arg</param>
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, IsPrimary), FormControlEventType::Modified)]
    public static void IsPrimary_OnModified(FormControl sender, FormControlEventArgs e)
    {
        FormCheckBoxControl                     isPrimary           = sender as FormCheckBoxControl;

        if (isPrimary.value() == NoYes::Yes)
        {
            FormRun form = sender.formRun();
            FormCheckBoxControl isPrimaryTaxRegistration = sender as FormCheckBoxControl;
            FormDataSource dirPartyLocation_ds = form.dataSource(formDataSourceStr(LogisticsPostalAddress, DirPartyLocation)) as FormDataSource;
            DirPartyLocation dirPartyLocation = dirPartyLocation_ds.cursor();
            FormDataSource postalAddress_ds = form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
            LogisticsPostalAddress postalAddress = postalAddress_ds.cursor();

            TaxRegistrationNumber registrationNumber = TaxRegistration::categoryTaxRegistration(dirPartyLocation.Party,
                                                                                                TaxRegistrationTypesList::TAXID,
                                                                                                postalAddress.CountryRegionId,
                                                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                                postalAddress.recId).RegistrationNumber;

            if (registrationNumber)
            {
                if (Box::yesNo("@RegistrationNumbers:ShouldTaxExemptNumberSpecifiedOnAssociatedPartyRolesBeUpdated", DialogButton::No) == DialogButton::Yes)
                {
                    CustTable custTable;

                    update_recordset custTable
                        setting VATNum = registrationNumber
                        where custTable.party == dirPartyLocation.Party;

                    VendTable vendTable;

                    update_recordset vendTable
                        setting VATNum = registrationNumber
                        where vendTable.party == dirPartyLocation.Party;

                    CompanyInfo companyInfo;

                    update_recordset companyInfo
                        setting VATNum = registrationNumber
                        where companyInfo.RecId == dirPartyLocation.Party;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPrimaryTaxRegistration_OnModified</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LogisticsPostalAddress, IsPrimaryTaxRegistration), FormControlEventType::Modified)]
    public static void IsPrimaryTaxRegistration_OnModified(FormControl sender, FormControlEventArgs e)
    {
        FormRun form = sender.formRun();
        FormCheckBoxControl isPrimaryTaxRegistration = sender as FormCheckBoxControl;
        FormDataSource logisticsLocation_ds = Form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsLocation)) as FormDataSource;
        LogisticsLocation logisticsLocation = logisticsLocation_ds.cursor();
        LogisticsEntityPostalAddressFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        boolean ret = isPrimaryTaxRegistration.value();
        boolean primaryTaxRegistrationLocForPartyExist;

        if (LogisticsLocationAppUtil::getEntityLocationTableId(callerTableId) == tableNum(DirPartyLocation) && postalAddressForm.isPostalAddress())
        {
            primaryTaxRegistrationLocForPartyExist = DirPartyLocation::primaryTaxRegistrationLocForPartyExist(postalAddressForm.getEntity(),
                                                                                                                  LogisticsPostalAddress::findRecId(postalAddressForm.postalAddress()).CountryRegionId,
                                                                                                                  logisticsLocation.RecId);

            if (isPrimaryTaxRegistration.value() == true &&
                    primaryTaxRegistrationLocForPartyExist &&
                    Box::yesNo("@GlobalAddressBook:ThisWillClearTheCurrentCountryRegionPrimaryAddressForTaxRegi", DialogButton::No) == DialogButton::No)
            {
                ret = false;
            }

            if (isPrimaryTaxRegistration.value() == false &&
                    !primaryTaxRegistrationLocForPartyExist)
            {
                ret = true;
            }
        }

        if (ret)
        {
            postalAddressForm.setIsPrimaryTaxRegistration(isPrimaryTaxRegistration.value());
            LogisticsPostalAddressFormEventHandler::updatePrimaryControl(form);
            form.resetDates();
            form.forceWriteDS();
        }
        else
        {
            isPrimaryTaxRegistration.value(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateControls_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status of India controls.
    /// </summary>
    /// <param name = "_form">FormRun instance of LogisticsPostalAddress</param>
    public static void UpdateControls_IN(FormRun _form)
    {
        #ISOCountryRegionCodes

        FormDataSource                          logisticsPostalAddress_ds = _form.dataSource(formdatasourcestr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        LogisticsPostalAddress                  logisticsPostalAddress    = logisticsPostalAddress_ds.cursor();
        FormTabPageControl                      taxInformationManagement  = _form.design().controlname(formControlStr(LogisticsPostalAddress, TaxInformationManagement));
        FormComboBoxControl                     taxGSTEPZCode_IN          = _form.design().controlname(formControlStr(LogisticsPostalAddress, LogisticsLocationExt_TaxGSTEPZCode_IN));
        LogisticsEntityPostalAddressFormHandler postalAddressForm         = _form.parmPostalAddressForm();
        TableId                                 callerTableId             = postalAddressForm.getCallerRecord().TableId;
        LogisticsAddressCountryRegionISOCode    isoCode                   = LogisticsAddressCountryRegion::find(logisticsPostalAddress.CountryRegionId).isOcode;

        if (TaxIntegrationUtils::isTaxInformationEnabled(isoCode))
        {
            if (callerTableId == tableNum(DirPartyTable)    ||
                callerTableId == tableNum(VendTable)        ||
                callerTableId == tableNum(CustTable)        ||
                callerTableId == tableNum(CompanyInfo)      ||
                callerTableId == tableNum(InventSite)       ||
                callerTableId == tableNum(InventLocation)   ||
                callerTableId == tableNum(smmBusRelTable))
            {
                taxInformationManagement.visible(true);
            }

            if (callerTableId == tableNum(VendTable)        ||
                callerTableId == tableNum(CustTable))
            {
                taxGSTEPZCode_IN.visible(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update tax information tab.
    /// </summary>
    /// <param name = "_form">FormRun instance of LogisticsPostalAddress</param>
    public static void UpdateControls(FormRun _form)
    {
        #ISOCountryRegionCodes

        FormTabPageControl                      taxInformationManagement  = _form.design().controlname(formControlStr(LogisticsPostalAddress, TaxInformationManagement));
        LogisticsEntityPostalAddressFormHandler postalAddressForm         = _form.parmPostalAddressForm();
        TableId                                 callerTableId             = postalAddressForm.getCallerRecord().TableId;

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            if (callerTableId == tableNum(CompanyInfo) || callerTableId == tableNum(InventSite) || callerTableId == tableNum(InventLocation))
            {
                taxInformationManagement.visible(false);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAddressControls_Payroll</Name>
				<Source><![CDATA[
    public static void UpdateAddressControls_Payroll(FormRun _form)
    {
        FormDataSource    logisticsPostalAddress_ds = _form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;
        LogisticsEntityLocationFormHandler postalAddressForm = _form.parmPostalAddressForm();
        TableId callerTableId = postalAddressForm.getCallerRecord().TableId;

        if (callerTableId == tableNum(PayrollTaxRegion))
        {
            logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, Street)).visible(false);
            logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, StreetNumber)).visible(false);
            logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, BuildingCompliment)).visible(false);
            logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, PostBox)).visible(false);
            logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, DistrictName)).visible(false);
            _form.resetSize();
            _form.arrange();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateControls_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update status of Japan controls.
    /// </summary>
    /// <param name = "_form">FormRun instance of LogisticsPostalAddress</param>
    /// <param name = "_countryRegionId">Country region ID of the current address</param>
    public static void UpdateControls_JP(FormRun _form, LogisticsAddressCountryRegionId _countryRegionId)
    {
        #ISOCountryRegionCodes

        boolean        isJP = LogisticsAddressCountryRegion::find(_countryRegionId).ISOcode == #isoJP;
        FormDataSource logisticsPostalAddress_ds = _form.dataSource(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress)) as FormDataSource;

        if (isJP && _form.args().caller() is FormRun)
        {
            if (_form.args().caller().name() == formStr(OMLegalEntity))
            {
                // Visible property's default value of city/street kana name is no,
                // using visible property of city/street field to control kana name fields' visible or not.
                logisticsPostalAddress_DS.object(fieldNum(LogisticsPostalAddress, CityKana_JP)).visible(
                    isJP && logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, City)).visible());
                logisticsPostalAddress_DS.object(fieldNum(LogisticsPostalAddress, StreetKana_JP)).visible(
                    isJP && logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, Street)).visible());
            }
            else if (_form.args().caller().name() == formStr(AssetLocation)
                && logisticsPostalAddress_ds.object(fieldNum(LogisticsPostalAddress, City)).visible())
            {
                logisticsPostalAddress_DS.object(fieldNum(LogisticsPostalAddress, City)).mandatory(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateTaxRegistrationValues</Name>
				<Source><![CDATA[
    public static void UpdateTaxRegistrationValues(FormRun _form, LogisticsEntityPostalAddressFormHandler _postalAddressForm)
    {
        #ISOCountryRegionCodes

        FormDesign formDesign = _form.design();
        Common callerTable = _postalAddressForm.getCallerRecord();
        TableId callerTableId = callerTable.TableId;
        PartyTypeRestriction taxRegistrationPartyType;
        boolean enableTaxRegistration;

        FormTabPageControl taxRegistrationPage = formDesign.controlName(formControlStr(LogisticsPostalAddress, TaxRegistrationPage)) as FormTabPageControl;
        FormDateControl    showAsOfDateControl = formDesign.controlName(formControlStr(LogisticsPostalAddress, ShowAsOfDateControl)) as FormDateControl;

        if (SysDictTable::isTableMapped(tableNum(DirPartyMap), callerTableId))
        {
            taxRegistrationPartyType = PartyTypeRestriction::Organization;

            DirPartyMap dirPartyMap = callerTable;
            if (dirPartyMap)
            {
                enableTaxRegistration = true;

                if (DirPartyTable::findRec(dirPartyMap.Party).type() == DirPartyType::Person)
                {
                    taxRegistrationPartyType = PartyTypeRestriction::Person;
                }
            }

            taxRegistrationPage.visible(true);
            _form.ParmDateFilterOptions(DateFilterOptions::AsOf);
            showAsOfDateControl.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }

        _postalAddressForm.parmTaxRegistrationPartyType(taxRegistrationPartyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxRegistration_ApplyFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies effective date filter selected.
    /// </summary>
    /// <param name="_filterOptions">
    /// Date filter option parameter.
    /// </param>
    /// <param name="_showAsOfDateTime">
    /// Effective date time for a filter.
    /// </param>
    public static void TaxRegistration_ApplyFilter(FormRun _form, DateFilterOptions _filterOptions, utcdatetime _showAsOfDateTime)
    {
        DateFilterOptions   filterOptions;
        utcdatetime         maximumDate, minimumDate;
        FormDataSource      taxRegistration_ds = _form.datasource(formdatasourcestr(LogisticsPostalAddress, TaxRegistration)) as FormDataSource;
        Query               taxRegistration_q  = taxRegistration_ds.query();

        minimumdate = DateTimeUtil::minValue();
        maximumDate = DateTimeUtil::maxValue();

        filterOptions = _filterOptions;

        switch (filterOptions)
        {
            case DateFilterOptions::AsOf:
                taxRegistration_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
                taxRegistration_q.resetValidTimeStateQueryType();
                break;

            case DateFilterOptions::AsOfAndRange:
                taxRegistration_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::AsOfDate);
                taxRegistration_q.validTimeStateAsOfDateTime(_showAsOfDateTime);
                break;

            case DateFilterOptions::Range:
                taxRegistration_ds.validTimeStateAutoQuery(ValidTimeStateAutoQuery::DateRange);
                taxRegistration_q.validTimeStateDateTimeRange(minimumDate, maximumDate);
                break;
        }

        taxRegistration_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideTaxRegistrationTypeApplicabilityRuleMethods</Name>
				<Source><![CDATA[
    private static void overrideTaxRegistrationTypeApplicabilityRuleMethods(FormDesign _formDesign, str _controlName)
    {
        FormReferenceGroupControl  taxRegistrationTypeApplicabilityRule = _formDesign.controlname(_controlName) as FormReferenceGroupControl;

        if (taxRegistrationTypeApplicabilityRule)
        {
            taxRegistrationTypeApplicabilityRule.registerOverrideMethod('lookupReference', methodStr(LogisticsPostalAddressExtensionOverrides, taxRegistration_TaxRegTypeApplicabilityRule_lookupReference), postalAddressExtensionOverrides);
            taxRegistrationTypeApplicabilityRule.registerOverrideMethod('resolveReference', methodStr(LogisticsPostalAddressExtensionOverrides, taxRegistration_TaxRegTypeApplicabilityRule_resolveReference), postalAddressExtensionOverrides);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShippingCarrierAddressEnabled</Name>
				<Source><![CDATA[
    private static boolean isShippingCarrierAddressEnabled(FormRun form)
    {
		if (!form)
        {
            return false;
        }

        LogisticsEntityLocationFormHandler postalAddressForm = form.parmPostalAddressForm();
        TableId                            callerTableId     = postalAddressForm.getCallerRecord().TableId;

        return callerTableId == tableNum(CustTable)
            && (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)) || isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxRegistration_OnDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// When remove Taxregistration ID to validate TaxRegistrantionInfo.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, TaxRegistration), FormDataSourceEventType::Deleted)]
    public static void TaxRegistration_OnDeleted(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        VendTable              vendTable;
        DirPartyLocation       dirPartyLocation;

        FormDataSource   taxRegistration_ds  = _sender;
        TaxRegistration  taxRegistration     = taxRegistration_ds.cursor();

        select firstonly vendTable
            join Party from dirPartyLocation
                where dirPartyLocation.Party == vendTable.Party
                    && dirPartyLocation.RecId == taxRegistration.DirPartyLocation;

        vendTable.validateTaxRegistrationInfo_TH();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>