<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VoucherTypeWizard_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VoucherTypeWizard_CN</c> class create automatically the chinese voucher type.
/// </summary>
public class VoucherTypeWizard_CN extends SysWizard
{
    TempStr     resultString;
    Counter     selection;

    boolean     isChineseLangSelected;
    Description printLayoutGroupDescription;

    LedgerPrintLayoutGroupId_CN printLayoutGroupId;

    #define.LargerSeqNum(99999)
    #define.PriorityZero(0)
    #define.PriorityOne(1)
    #define.PriorityTwo(2)
    #define.PriorityThree(3)
    #define.PriorityFour(4)

    #File
    #VoucherTypeTxt_CN
    #OCCRetryCount
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// The access menu function.
    /// </summary>
    /// <returns>
    /// The instance of the <c>MenuFunction</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemdisplaystr(VoucherTypeWizard_CN),MenuItemType::Action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chineseLangSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if chinese language is selected.
    /// </summary>
    /// <returns>
    /// If 'True', the chinese language is selected.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean chineseLangSelected()
    {
        UserInfo    userInfo;
        #define.ChineseLang('ZH-HANS')

        select firstonly Language
            from userInfo
                where userInfo.Id == curuserid();

        return userInfo.Language == #ChineseLang;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashBankVoucherType</Name>
				<Source><![CDATA[
    private void createCashBankVoucherType()
    {
        LedgerVoucherTypeSimple_CN  ledgerVoucherTypeSimple;
        SysDictEnum                 dictEnum;

        LedgerVoucherTypeId_CN      voucherTypeId;
        Description                 description;
        NumberSequenceCode          numberSequenceCode;

        resultString = '';

        dictEnum = new SysDictEnum(enumnum(LedgerVoucherTypeSimple_CN));
        ledgerVoucherTypeSimple = dictEnum.firstValue();
        do
        {
            voucherTypeId       = dictEnum.value2Symbol(ledgerVoucherTypeSimple);
            description         = dictEnum.value2Label(ledgerVoucherTypeSimple);
            numberSequenceCode  = dictEnum.value2Symbol(ledgerVoucherTypeSimple);

            if (isChineseLangSelected)
            {
                switch (description)
                {
                    case enum2str(LedgerVoucherTypeSimple_CN::Cash):
                        voucherTypeId      = #Cash;
                        numberSequenceCode = #Cash;
                        break;
                    case enum2str(LedgerVoucherTypeSimple_CN::Bank):
                        voucherTypeId      = #Bank;
                        numberSequenceCode = #Bank;
                        break;
                    case enum2str(LedgerVoucherTypeSimple_CN::Tran):
                        voucherTypeId      = #Transfer;
                        numberSequenceCode = #Transfer;
                        break;
                    default:
                        break;
                }
            }

            try
            {
                if (!LedgerVoucherType_CN::existByNaturalKey(voucherTypeId))
                {
                    ttsbegin;
                    this.initNumberSequence(numberSequenceCode, description);
                    switch (description)
                    {
                        case enum2str(LedgerVoucherTypeSimple_CN::Cash):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityTwo,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeSimple_CN::Bank):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityOne,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeSimple_CN::Tran):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityZero,
                                true);
                            break;

                        default:
                            break;
                    }
                    // Voucher type has been created
                    resultString += strfmt("@GLS54462", voucherTypeId, #delimiterEnter);
                    ttscommit;
                }
                else
                {
                    // Voucher type already exists
                    resultString += strfmt("@GLS54459", voucherTypeId, #delimiterEnter);
                    info(strfmt("@GLS54459", voucherTypeId, #delimiterEnter));
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }

            ledgerVoucherTypeSimple = dictEnum.nextValue(ledgerVoucherTypeSimple);
        }
        while (ledgerVoucherTypeSimple != dictEnum.firstValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence table.
    /// </summary>
    /// <returns>
    /// The instance of the <c>NumberSequenceTable_CN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysExtensionSerializerExtensionMap getExtensionTable(NumberSequenceTable _table, TableId _tableId)
    {
        return _table.SysExtensionSerializerMap::getExtensionTable(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packExtensionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs number sequence table.
    /// </summary>
    /// <param name = "_table">The number sequence table.</param>
    /// <param name = "_extentionTable">The extention table.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void packExtensionTable(NumberSequenceTable _table, SysExtensionSerializerExtensionMap _extentionTable)
    {
        _table.SysExtensionSerializerMap::packExtensionTable(_extentionTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashRecVoucherType</Name>
				<Source><![CDATA[
    private void createCashRecVoucherType()
    {
        LedgerVoucherTypeExtended_CN    ledgerVoucherTypeExtended;
        SysDictEnum                     dictEnum;

        LedgerVoucherTypeId_CN          voucherTypeId;
        Description                     description;
        NumberSequenceCode              numberSequenceCode;

        resultString = '';
        dictEnum = new SysDictEnum(enumnum(LedgerVoucherTypeExtended_CN));
        ledgerVoucherTypeExtended = dictEnum.firstValue();
        do
        {
            voucherTypeId       = dictEnum.value2Symbol(ledgerVoucherTypeExtended);
            description         = dictEnum.value2Label(ledgerVoucherTypeExtended);
            numberSequenceCode  = dictEnum.value2Symbol(ledgerVoucherTypeExtended);

            if (isChineseLangSelected)
            {
                switch (description)
                {
                    case enum2str(LedgerVoucherTypeExtended_CN::CashRec):
                        voucherTypeId      = #CashReceipt;
                        numberSequenceCode = #CashReceipt;
                        break;
                    case enum2str(LedgerVoucherTypeExtended_CN::CashPay):
                        voucherTypeId      = #CashPayment;
                        numberSequenceCode = #CashPayment;
                        break;
                    case enum2str(LedgerVoucherTypeExtended_CN::BankRec):
                        voucherTypeId      = #BankReceipt;
                        numberSequenceCode = #BankReceipt;
                        break;
                    case enum2str(LedgerVoucherTypeExtended_CN::BankPay):
                        voucherTypeId      = #BankPayment;
                        numberSequenceCode = #BankPayment;
                        break;
                    case enum2str(LedgerVoucherTypeExtended_CN::Tran):
                        voucherTypeId      = #Transfer;
                        numberSequenceCode = #Transfer;
                        break;
                    default:
                        break;
                }
            }

            try
            {
                if (!LedgerVoucherType_CN::existByNaturalKey(voucherTypeId))
                {
                    ttsbegin;
                    this.initNumberSequence(numberSequenceCode, description);
                    switch (description)
                    {
                        case enum2str(LedgerVoucherTypeExtended_CN::CashRec):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityFour,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeExtended_CN::CashPay):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityThree,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeExtended_CN::BankRec):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityTwo,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeExtended_CN::BankPay):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityOne,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeExtended_CN::Tran):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #priorityZero,
                                true);
                            break;

                        default:
                            break;
                    }
                    // Voucher type has been created
                    resultString += strfmt("@GLS54462", voucherTypeId, #delimiterEnter);
                    ttscommit;
                }
                else
                {
                    // Voucher type already exists
                    resultString += strfmt("@GLS54459", voucherTypeId, #delimiterEnter);
                    info(strfmt("@GLS54459", voucherTypeId, #delimiterEnter));
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            ledgerVoucherTypeExtended = dictEnum.nextValue(ledgerVoucherTypeExtended);
        }
        while (ledgerVoucherTypeExtended != dictEnum.firstValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostVoucherType</Name>
				<Source><![CDATA[
    private void createPostVoucherType()
    {
        LedgerVoucherTypeId_CN  voucherTypeId;
        Description             description;
        NumberSequenceCode      numberSequenceCode;

        voucherTypeId       = new DictType(extendedtypenum(LedgerVoucherTypePost_CN)).label();
        description         = new DictType(extendedtypenum(LedgerVoucherTypePost_CN)).help();
        numberSequenceCode  = new DictType(extendedtypenum(LedgerVoucherTypePost_CN)).label();

        if (isChineseLangSelected)
        {
            voucherTypeId      = #Posing;
            numberSequenceCode = #Posing;
        }
        try
        {
            ttsbegin;
            this.initNumberSequence(numberSequenceCode, description);
            if (!LedgerVoucherType_CN::existByNaturalKey(voucherTypeId))
            {
                this.insertVoucherType(
                    voucherTypeId,
                    description,
                    numberSequenceCode,
                    '',
                    printLayoutGroupId,
                    #PriorityZero,
                    true);

                // Voucher type has been created
                resultString += strfmt("@GLS54462", voucherTypeId, #delimiterEnter);
            }
            else
            {
                // Voucher type already exists
                resultString += strfmt("@GLS54459", voucherTypeId, #delimiterEnter);
                info(strfmt("@GLS54459", voucherTypeId, #delimiterEnter));
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRecPayVoucherType</Name>
				<Source><![CDATA[
    private void createRecPayVoucherType()
    {
        LedgerVoucherTypeGeneral_CN ledgerVoucherTypeGeneral;
        SysDictEnum                 dictEnum;

        LedgerVoucherTypeId_CN      voucherTypeId;
        Description                 description;
        NumberSequenceCode          numberSequenceCode;

        resultString = '';
        dictEnum = new SysDictEnum(enumnum(LedgerVoucherTypeGeneral_CN));
        ledgerVoucherTypeGeneral = dictEnum.firstValue();
        do
        {
            voucherTypeId       = dictEnum.value2Symbol(ledgerVoucherTypeGeneral);
            description         = dictEnum.value2Label(ledgerVoucherTypeGeneral);
            numberSequenceCode  = dictEnum.value2Symbol(ledgerVoucherTypeGeneral);

            if (isChineseLangSelected)
            {
                switch (description)
                {
                    case enum2str(LedgerVoucherTypeGeneral_CN::Rec):
                        voucherTypeId      = #Receipt;
                        numberSequenceCode = #Receipt;
                        break;
                    case enum2str(LedgerVoucherTypeGeneral_CN::Pay):
                        voucherTypeId      = #Payment;
                        numberSequenceCode = #Payment;
                        break;
                    case enum2str(LedgerVoucherTypeGeneral_CN::Tran):
                        voucherTypeId      = #Transfer;
                        numberSequenceCode = #Transfer;
                        break;
                    default:
                        break;
                }
            }
            try
            {
                if (!LedgerVoucherType_CN::existByNaturalKey(voucherTypeId))
                {
                    ttsbegin;
                    this.initNumberSequence(numberSequenceCode, description);
                    switch (description)
                    {
                        case enum2str(LedgerVoucherTypeGeneral_CN::Rec):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityTwo,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeGeneral_CN::Pay):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityOne,
                                false);
                            break;

                        case enum2str(LedgerVoucherTypeGeneral_CN::Tran):
                            this.insertVoucherType(
                                voucherTypeId,
                                description,
                                numberSequenceCode,
                                '',
                                printLayoutGroupId,
                                #PriorityZero,
                                true);
                            break;

                        default:
                            break;
                    }
                    // Voucher type has been created
                    resultString += strfmt("@GLS54462", voucherTypeId, #delimiterEnter);
                    ttscommit;
                }
                else
                {
                    // Voucher type already exists
                    resultString += strfmt("@GLS54459", voucherTypeId, #delimiterEnter);
                    info(strfmt("@GLS54459", voucherTypeId, #delimiterEnter));
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            ledgerVoucherTypeGeneral = dictEnum.nextValue(ledgerVoucherTypeGeneral);
        }
        while (ledgerVoucherTypeGeneral != dictEnum.firstValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates voucher type.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createVoucherType()
    {
        this.initChineseLangSelection();
        this.setDataByLanguage();
        this.initPrintLayout();

        switch (selection)
        {
            case 0:
                this.createRecPayVoucherType();
                break;
            case 1:
                this.createCashBankVoucherType();
                break;
            case 2:
                this.createCashRecVoucherType();
                break;
            case 3:
                this.createPostVoucherType();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// The form name.
    /// </summary>
    /// <returns>
    /// The instance of the <c>formName</c> class.
    /// </returns>
    public formName formName()
    {
        return formstr(VoucherTypeWizard_CN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChineseLangSelection</Name>
				<Source><![CDATA[
    private void initChineseLangSelection()
    {
        isChineseLangSelected = this.chineseLangSelected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize number sequence.
    /// </summary>
    /// <param name="_code">
    /// The number sequence code.
    /// </param>
    /// <param name="_description">
    /// The name description.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initNumberSequence(NumberSequenceCode _code, Name _description)
    {
        if (!NumberSequenceTable::existByNaturalKey(_code))
        {
            this.insertNumberSequence(_code, _description, 1, #LargerSeqNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize print layout.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initPrintLayout()
    {
        LedgerPreprintVoucher_CN    printLayoutCode;
        SysDictEnum                 dictEnum;

        try
        {
            if (LedgerPrintLayoutGroup_CN::existByNaturalKey(printLayoutGroupId))
            {
                return;
            }
            else
            {
                ttsbegin;
                this.insertPrintLayoutGroup(printLayoutGroupId, printLayoutGroupDescription);
                dictEnum = new SysDictEnum(enumnum(LedgerPreprintVoucher_CN));
                printLayoutCode = dictEnum.firstValue();
                do
                {
                    this.insertPrintLayout(
                        printLayoutCode,
                        enum2str(printLayoutCode),
                        printLayoutGroupId);

                    printLayoutCode = dictEnum.nextValue(printLayoutCode);
                }
                while (printLayoutCode != dictEnum.firstValue());
                ttscommit;
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNumberSequence</Name>
				<Source><![CDATA[
    private void insertNumberSequence(
        NumberSequenceCode   _code,
        Name                 _description,
        NumberSequenceRange  _small,
        NumberSequenceRange  _large)
    {
        NumberSequenceTable     numberSequenceTable;
        NumberSequenceTable_CN  numberSequenceTableCN;

        #define.FormatEnd('_#####')

        numberSequenceTable.NumberSequence      = _code;
        numberSequenceTable.Txt                 = _description;
        numberSequenceTable.Lowest              = _small;
        numberSequenceTable.NextRec             = _small;
        numberSequenceTable.Highest             = _large;
        numberSequenceTable.Format              = _code + #FormatEnd;
        numberSequenceTable.AnnotatedFormat     = NumberSeq::createAnnotatedFormatFromFormat(numberSequenceTable.Format);
        numberSequenceTable.Continuous          = NoYes::Yes;
        numberSequenceTableCN                   = VoucherTypeWizard_CN::getExtensionTable(numberSequenceTable, tablenum(NumberSequenceTable_CN));
        numberSequenceTableCN.RestartNum        = NoYes::Yes;
        VoucherTypeWizard_CN::packExtensionTable(numberSequenceTable, numberSequenceTableCN);

        numberSequenceTable.NumberSequenceScope = NumberSeqScopeFactory::createDataAreaScope().getId();
        numberSequenceTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPrintLayout</Name>
				<Source><![CDATA[
    private void insertPrintLayout(
        LedgerPreprintVoucher_CN    _code,
        Description                 _description,
        LedgerPrintLayoutGroupId_CN _groupId)
    {
        LedgerPrintLayout_CN    printLayout;

        printLayout.Code                    = _code;
        printLayout.Description             = _description;
        printLayout.LedgerPrintLayoutGroup  = LedgerPrintLayoutGroup_CN::findByNaturalKey(_groupId).RecId;
        printLayout.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPrintLayoutGroup</Name>
				<Source><![CDATA[
    private void insertPrintLayoutGroup(
        LedgerPrintLayoutGroupId_CN _groupId,
        Description                 _description)
    {
        LedgerPrintLayoutGroup_CN   printLayoutGroup;

        printLayoutGroup.Id          = _groupId;
        printLayoutGroup.Description = _description;
        printLayoutGroup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVoucherType</Name>
				<Source><![CDATA[
    private void insertVoucherType(
        LedgerVoucherTypeId_CN       _id,
        Description                  _description,
        NumberSequenceCode           _numberSequence,
        LedgerJournalNameId          _defaultJournal,
        LedgerPrintLayoutGroupId_CN  _groupId,
        VoucherTypePriority_CN       _priority,
        boolean                      _defaultType)
    {
        LedgerVoucherType_CN    voucherType;
        LedgerVoucherType_CN    voucherTypeLocal;

        voucherType.Id                      = _id;
        voucherType.Description             = _description;
        voucherType.NumberSequenceTable     = NumberSequenceTable::findByNaturalKey(_numberSequence).RecId;
        voucherType.DefaultJournal          = _defaultJournal;
        voucherType.LedgerPrintLayoutGroup  = LedgerPrintLayoutGroup_CN::findByNaturalKey(_groupId).RecId;

        select firstonly RecId
            from voucherTypeLocal
            where voucherTypeLocal.Priority == _priority;

        if (voucherTypeLocal.RecId == 0)
        {
            voucherType.Priority = _priority;
        }
        else
        {
            select maxof(Priority) from voucherTypeLocal;
            voucherType.Priority = voucherTypeLocal.Priority + 1;
        }

        if (_defaultType)
        {
            update_recordset voucherTypeLocal
                setting DefaultType = false
                    where voucherTypeLocal.DefaultType == true;
        }

        voucherType.DefaultType = _defaultType;
        voucherType.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets next voucher type.
    /// </summary>
    public void next()
    {
        switch (this.curTab())
        {
            case 1:
                this.createVoucherType();
                break;
            default:
                break;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmSelection(Counter _selection = selection)
    {
        selection = _selection;
        return selection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultString</Name>
				<Source><![CDATA[
    /// <summary>
    /// The result string information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TempStr</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TempStr resultString()
    {
        return resultString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataByLanguage</Name>
				<Source><![CDATA[
    private void setDataByLanguage()
    {
        printLayoutGroupId          = #China;
        printLayoutGroupDescription = #ChineseVoucherSystem;

        if (isChineseLangSelected)
        {
            printLayoutGroupId          = #ZHChina;
            printLayoutGroupDescription = #ZHChineseVoucherSystem;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup navigation.
    /// </summary>
    public void setupNavigation()
    {
        backEnabled[2] = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00009, funcName());

        VoucherTypeWizard_CN wizard = new VoucherTypeWizard_CN();

        if (LedgerParameters::isChineseVoucher_CN())
        {
            if (wizard.prompt())
            {
                wizard.run();
            }
        }
        else
        {
            // Voucher type wizard will not be available unless the 'Chinese voucher system' parameter is checked
            warning("@GLS54451");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>