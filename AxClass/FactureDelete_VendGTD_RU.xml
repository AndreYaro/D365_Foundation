<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_VendGTD_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureDelete_VendGTD_RU extends FactureDelete_Vend_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected void check()
    {
        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        super();

        select firstonly logTrans
            where logTrans.FactureId  == jour.FactureId                         &&
                  (logTrans.TransType == SalesPurchBookTransType_RU::GTD        ||
                   logTrans.TransType == SalesPurchBookTransType_RU::CustomCorrection)
        exists join logTransOper
            where logTransOper.RefRecId         == logTrans.RecId  &&
                  logTransOper.Blocked          == NoYes::No       &&
                  logTransOper.CanceledRefRecId == 0;

        if (logTrans)
        {
            this.addError("@GLS104932");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        protected void delete()
    {
        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        super();

        while select forupdate logTrans
            where logTrans.FactureId  == jour.FactureId                         &&
                  (logTrans.TransType == SalesPurchBookTransType_RU::GTD        ||
                   logTrans.TransType == SalesPurchBookTransType_RU::CustomCorrection)
        {
            delete_from logTransOper
                where logTransOper.RefRecId         == logTrans.RecId &&
                      logTransOper.CanceledRefRecId != 0;
            logTrans.doDelete();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>