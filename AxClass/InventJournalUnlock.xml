<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalUnlock</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static class InventJournalUnlock
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (Box::confirm("@SCM:InventJournalUnlockConfirmationMessage"))
        {
            InventJournalUnlock::unlockSelectedJournal(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockSelectedJournal</Name>
				<Source><![CDATA[
    internal static void unlockSelectedJournal(Args _args)
    {
        if (_args.caller() &&
			_args.record() &&
           (_args.dataset() == tableNum(InventJournalTable) || _args.dataset() == tableNum(WMSJournalTable)) &&
            InventJournalUnlock::isCalledFromInventJournalForm(_args.caller().name()))
        {
            Common selectedJournal = _args.record();
            str journalId = selectedJournal.(fieldName2Id(selectedJournal.TableId, fieldStr(InventJournalTable, JournalId)));
            SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(InventJournalUnlock));

            using (SysInstrumentationActivityContext activityContext = InventJournalUnlock::getActivityContextForUnlockJournal(InventJournalUnlock::getJournalTypeString(selectedJournal), logger))
            {
                InventJournalUnlock::unlockJournal(selectedJournal);

                logger.logInformation(strFmt('Unlocking inventory journal with RecId = %1', selectedJournal.RecId));
            }
                
            info(strFmt("@SCM:InventJournalUnlockInfoMessage", journalId));			
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromInventJournalForm</Name>
				<Source><![CDATA[
    private static boolean isCalledFromInventJournalForm(str callerName)
    {
		switch(callerName)
        {
            case formStr(InventJournalTransfer):
            case formStr(InventJournalMovement):
            case formStr(InventJournalLossProfit):
            case formStr(InventJournalBOM):
            case formStr(InventJournalOwnershipChange):
            case formStr(InventJournalCount):
            case formStr(InventJournalCountTag):
            case formStr(WMSJournalTable):
                return true;
            default:
                return false;
		}
	}

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContextForUnlockJournal</Name>
				<Source><![CDATA[
    private static SysInstrumentationActivityContext getActivityContextForUnlockJournal(str inventJournalTypeStr, SysInstrumentationLogger _logger)
    {
        const str UniqueName = 'InventJournal.UnlockJournal';

        SysInstrumentationActivity activity =
            SysInstrumentationActivity::construct(
                UniqueName,
                InventJournalInstrumentationConstants::InstrumentationNamespace);

        return _logger.activityContextWithCustomProperties(activity)
            .addCustomProperty(InventJournalInstrumentationConstants::JournalType, inventJournalTypeStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockJournal</Name>
				<Source><![CDATA[
    private static void unlockJournal(Common _journalToUnlock)
    {
        ttsbegin;

        _journalToUnlock.selectForUpdate(true);
        _journalToUnlock.(fieldName2Id(_journalToUnlock.TableId, fieldStr(InventJournalTable, SystemBlocked))) = NoYes::No;
        _journalToUnlock.(fieldName2Id(_journalToUnlock.TableId, fieldStr(InventJournalTable, SessionId))) = 0;
        _journalToUnlock.(fieldName2Id(_journalToUnlock.TableId, fieldStr(InventJournalTable, BlockUserId))) = '';
        _journalToUnlock.(fieldName2Id(_journalToUnlock.TableId, fieldStr(InventJournalTable, BlockUserGroupId))) = '';
        _journalToUnlock.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTypeString</Name>
				<Source><![CDATA[
    private static str getJournalTypeString(Common selectedJournal)
    {
        str journalTypeString;
        switch (selectedJournal.TableId)
        {
            case tableNum(InventJournalTable):
                InventJournalTable inventJournalTable = selectedJournal as InventJournalTable;
                journalTypeString = enum2Symbol(enumNum(InventJournalType), inventJournalTable.JournalType);
                break;
            case tableNum(WMSJournalTable):
                WMSJournalTable wmsJournalTable = selectedJournal as WMSJournalTable;
                journalTypeString = enum2Symbol(enumNum(WMSJournalType), wmsJournalTable.JournalType);
                break;
        }
        return journalTypeString;       
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>