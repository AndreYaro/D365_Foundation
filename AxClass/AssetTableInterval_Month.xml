<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableInterval_Month</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetTableInterval_Month extends AssetTableInterval
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>depInterval2Days</Name>
				<Source><![CDATA[
    public Days depInterval2Days(AssetLifeTime  _intervals,
                          AssetTransDate _startDate)
    {
        Days    dd  = dayofmth(  _startDate);
        Months  mm  = mthofyr(   _startDate);
        Yr      yy  = year(      _startDate);
        ;

        mm = (mm + _intervals * this.periodMultiplier());

        while (mm > 12)
        {
            yy++;
            mm -= 12;
        }

        return mkdate(dd,mm,yy) - _startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    public AssetTransDate endPeriod(AssetTransDate _date)
    {
        return endmth(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfYear</Name>
				<Source><![CDATA[
    public TransDate findFirstDayOfYear(TransDate _date)
    {
        return DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfYear</Name>
				<Source><![CDATA[
    public TransDate findLastDayOfYear(TransDate _date)
    {
        return DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    public AssetLifeTime interval( AssetTransDate   _depStart,
                            AssetTransDate   _runDate)
    {
        if (_runDate < _depStart)
        {
            return 0;
        }

        return this.monthDifference(_depStart,_runDate) div this.periodMultiplier();
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthDifference</Name>
				<Source><![CDATA[
    // How many months between _end and _start?
    protected AssetLifeTime monthDifference(AssetTransDate   _start,
                                  AssetTransDate   _end)
    {
        real    fractionStartMonth;
        real    fractionEndMonth;

        if (_end < _start)
            return 0;

        fractionStartMonth = dayofmth(_start)/ dayofmth(endmth(_start));
        fractionEndMonth   = dayofmth(_end  )/ dayofmth(endmth(_end  ));

        return any2int(roundDown((fractionEndMonth    + mthofyr(_end)     + year(_end)  *12) -
                                 (fractionStartMonth  + mthofyr(_start)   + year(_start)*12)   ,1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsPerYear</Name>
				<Source><![CDATA[
    public int numOfPeriodsPerYear()
    {
        return 12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodMultiplier</Name>
				<Source><![CDATA[
    public int periodMultiplier()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfPeriod</Name>
				<Source><![CDATA[
    public AssetTransDate startOfPeriod(AssetTransDate _startDate)
    {
        return dateStartMth(_startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIntervalForLongFiscalYear</Name>
				<Source><![CDATA[
/// <summary>
    /// Finds the number of months between the start date and end date for the fiscal year.
    /// </summary>
    /// <param name="_fromDate">
    /// The start Date.
    /// </param>
    /// <param name="_toDate">
    /// The end Date.
    /// </param>
    /// <param name="_showFiscalYear">
    /// A Boolean value that indicates whether the whole fiscal year has to be considered.
    /// </param>
    /// <returns>
    /// The number of months if the fiscal year is more than 12 months; otherwise, zero.
    /// </returns>
    public static int findIntervalForLongFiscalYear(FromDate _fromDate, ToDate _toDate, boolean _showFiscalYear)
    {
        boolean isLongYear = false;
        int months;
        FiscalCalendarYear fiscalCalendarYear;
        AssetTableInterval_Month assetTableInterval = new AssetTableInterval_Month();

        if (_showFiscalYear)
        {
            if (_fromDate)
            {
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), _fromDate);
            }
            else
            {
                fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(CompanyInfoHelper::fiscalCalendarRecId(), _toDate);
            }
            _fromDate = fiscalCalendarYear.StartDate;
            _toDate = fiscalCalendarYear.EndDate;
        }

        // Total number of months including the from and to date
        months = assetTableInterval.interval(_fromDate, _toDate) + 1;

        if (months > 12)
        {
            return months;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>