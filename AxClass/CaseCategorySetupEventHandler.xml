<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseCategorySetupEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CaseCategorySetupEventHandler</c> class handles all the events for the CaseCategorySetup form.
/// </summary>
class CaseCategorySetupEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the buttons on the <c>CaseCategorySetup</c> form extension.
    /// </summary>
    /// <param name = "_sender">The sender form.</param>
    /// <param name = "_enable">Boolean value to enable or disable the button.</param>
    private static void enableButtons(FormRun _sender, boolean _enable)
    {
        FormTreeControl ctrlTree = _sender.design().controlName(formControlStr(CaseCategorySetup, ctrlTree)) as FormTreeControl;
        int selectedNode = ctrlTree.getSelection();
        boolean notRoot = selectedNode != ctrlTree.getRoot();

        FormControl btnResponsibilities = _sender.design().controlName(formControlStr(CaseCategorySetup, btnResponsibilities)) as FormControl;
        btnResponsibilities.enabled(_enable && notRoot);

        FormControl btnKnowledgeArticle = _sender.design().controlName(formControlStr(CaseCategorySetup, btnKnowledgeArticle)) as FormControl;
        btnKnowledgeArticle.enabled(_enable && notRoot);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableEngChgValidationRulesFastTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the engineering change validation rules fast tab.
    /// </summary>
    /// <param name = "_sender">The sender form.</param>
    private static void enableEngChgValidationRulesFastTab(FormRun _sender)
    {
        DictClass dictClass = new DictClass(classIdGet(_sender));
        SysFormEnumComboBox typeComboBox =  dictClass.callObject(formMethodStr(CaseCategorySetup, parmTypeComboBox), _sender);
        FormControl engChgCaseValidationRulesTabPage = _sender.design().controlName(formControlStr(CaseCategorySetup, engChgCaseValidationRulesTabPage)) as FormControl;

        if (typeComboBox.selection() == CaseCategoryType::EngineeringChange)
        {
            engChgCaseValidationRulesTabPage.visible(true);
        }
        else
        {
            engChgCaseValidationRulesTabPage.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseCategoryHierarchyDetail_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or deletes validation rules for engineering change category type and also enables or disables
    /// the buttons on the form extension.
    /// </summary>
    /// <param name="_sender">The form data source.</param>
    /// <param name="_e">The form data source event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseCategorySetup, CaseCategoryHierarchyDetail), FormDataSourceEventType::Written)]
    public static void CaseCategoryHierarchyDetail_OnWritten(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(EngChgCase)))
        {
            FormRun element = _sender.formRun();
            DictClass dictClass = new DictClass(classIdGet(element));
            SysFormEnumComboBox typeComboBox =  dictClass.callObject(formMethodStr(CaseCategorySetup, parmTypeComboBox), element);
            CaseCategoryHierarchyDetail caseCategoryHierarchyDetail = _sender.cursor() as CaseCategoryHierarchyDetail;
        
            if (typeComboBox.selection() == CaseCategoryType::EngineeringChange)
            {
                if (!EngChgCaseCategoryValidationRules::existsByCaseCategory(caseCategoryHierarchyDetail.RecId))
                {
                    EngChgCaseCategoryValidationRules::createValidationRulesForCaseCategory(caseCategoryHierarchyDetail.RecId);
                    _sender.research(true);
                }
            }
            else
            {
                if (EngChgCaseCategoryValidationRules::existsByCaseCategory(caseCategoryHierarchyDetail.RecId))
                {
                    EngChgCaseCategoryValidationRules::deleteValidationRulesForCaseCategory(caseCategoryHierarchyDetail.RecId);
                }
            }

            CaseCategorySetupEventHandler::enableButtons(element, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Identification_CaseCategory_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the engChgCaseValidationRulesTabPage tab depending on the category type chosen.
    /// </summary>
    /// <param name="_sender">The case category form control.</param>
    /// <param name="_e">The form control event args.</param>
    [FormControlEventHandler(formControlStr(CaseCategorySetup, Identification_CategoryType), FormControlEventType::Modified)]
    public static void Identification_CaseCategory_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(EngChgCase)))
        {
            CaseCategorySetupEventHandler::enableEngChgValidationRulesFastTab(_sender.formRun());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTree_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the engChgCaseValidationRulesTabPage tab and form buttons
    /// depending on the category type chosen.
    /// </summary>
    /// <param name="_sender">The control tree.</param>
    /// <param name="_e">The form control event args.</param>
    [FormControlEventHandler(formControlStr(CaseCategorySetup, ctrlTree), FormControlEventType::SelectionChanged)]
    public static void ctrlTree_OnSelectionChanged(FormControl _sender, FormControlEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(EngChgCase)))
        {
            FormRun element = _sender.formRun();
            FormTreeControl ctrlTree = element.design().controlName(formControlStr(CaseCategorySetup, ctrlTree)) as FormTreeControl;
            DictClass dictClass = new DictClass(classIdGet(element));
            CaseCategoryHierarchyTree categoryTree =  dictClass.callObject(formMethodStr(CaseCategorySetup, parmCategoryTree), element);
            boolean isCategoryNode = categoryTree.isCategoryNode(ctrlTree.getSelection());

            CaseCategorySetupEventHandler::enableButtons(element, !isCategoryNode);

            str selectedText;

            if (isCategoryNode)
            {
                // Get the enum label from either the selected category
                selectedText = enum2Str(categoryTree.selectedData());
            }
            else
            {
                // Get the enum label from the category type associated with the selected
                // CaseCategoryHierarchyDetail record.
                RecId recId = str2recId(categoryTree.selectedData());

                CaseCategoryHierarchyDetail caseCatHierarchyDetail;
                select firstonly CategoryType, RecId from caseCatHierarchyDetail
                    where caseCatHierarchyDetail.RecId == recId;

                if (caseCatHierarchyDetail)
                {
                    selectedText = enum2Str(caseCatHierarchyDetail.CategoryType);
                }
            }

            FormControl engChgCaseValidationRulesTabPage = element.design().controlName(formControlStr(CaseCategorySetup, engChgCaseValidationRulesTabPage)) as FormControl;
            if (selectedText == enum2Str(CaseCategoryType::EngineeringChange))
            {
                engChgCaseValidationRulesTabPage.visible(true);
            }
            else
            {
                engChgCaseValidationRulesTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseCategoryHierarchyDetail_OnCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the buttons on the <c>CaseCategorySetup</c>form extension.
    /// </summary>
    /// <param name="_sender">The form data source.</param>
    /// <param name="_e">The form data source event args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseCategorySetup, CaseCategoryHierarchyDetail), FormDataSourceEventType::Created)]
    public static void CaseCategoryHierarchyDetail_OnCreated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(EngChgCase)))
        {
            CaseCategorySetupEventHandler::enableButtons(_sender.formRun(), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseCategoryHierarchyDetail_OnDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the buttons on the <c>CaseCategorySetup</c>form extension.
    /// </summary>
    /// <param name="_sender">The form data source</param>
    /// <param name="_e">The form data source evenr args.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CaseCategorySetup, CaseCategoryHierarchyDetail), FormDataSourceEventType::Deleting)]
    public static void CaseCategoryHierarchyDetail_OnDeleting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(EngChgCase)))
        {
            FormRun element = _sender.formRun();
            CaseCategoryHierarchyDetail caseCategoryHierarchyDetail = _sender.cursor() as CaseCategoryHierarchyDetail;

            if (caseCategoryHierarchyDetail.RecId)
            {
                DictClass dictClass = new DictClass(classIdGet(element));
                CaseCategoryHierarchyTree categoryTree =  dictClass.callObject(formMethodStr(CaseCategorySetup, parmCategoryTree), element);
                FormTreeControl ctrlTree = element.design().controlName(formControlStr(CaseCategorySetup, ctrlTree)) as FormTreeControl;
                boolean isCategoryNode = categoryTree.isCategoryNode(ctrlTree.getSelection());
                CaseCategorySetupEventHandler::enableButtons(element, !isCategoryNode);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>