<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineQualityOrderImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>InventQualityOrderTable</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(InventQualityOrderTable))]
public class TaxModelDocLineQualityOrderImpl extends TaxModelDocLineBaseImpl
    implements TaxModelTaxable
{
    InventQualityOrderTable inventQualityOrderTable;
    TransTaxInformation     transTaxInformationLoc;
    TaxModelDocLineBaseImpl packingSlipModelLoc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        return this.getReferenceTaxModelDocLine().getCustTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    public Date getDeliveryDate()
    {
        return this.getTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line original table.
    /// </summary>
    /// <returns>
    /// The the document line original table
    /// </returns>
    public Common getDocumentLineOriginalTable()
    {
        Common                      ret;
        TaxModelTaxable             orignalModel;

        orignalModel = this.getOriginalTaxModelTaxable();

        ret = SalesPurchJournalLine::findRecId(orignalModel.getDocumentLineMainTableId(), orignalModel.getDocumentLineMainTableRecId());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full quantity.
    /// </summary>
    /// <returns>
    /// The full quantity.
    /// </returns>
    public Qty getFullQuantity()
    {
        return this.getReferenceTaxModelDocLine().getQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        PurchLine    purchLine;
        SalesLine    salesLine;
        real         lineAmount;

        if (this.isPurch())
        {
            select LineAmount from purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            lineAmount = purchLine.LineAmount;
        }

        if (this.isSales())
        {
            select LineAmount from salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            lineAmount = salesLine.LineAmount;
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>TaxModelTaxable</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTaxable</c>
    /// </returns>
    public TaxModelTaxable getOriginalTaxModelTaxable()
    {
        return this.getReferenceTaxModelDocLine().getOriginalTaxModelTaxable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        SalesLine            salesLine;
        PurchLine            purchLine;
        LogisticsPostalAddress logisticsPostalAddress;

        if (this.isPurch())
        {
            select firstonly purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(purchLine);
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformationLoc.VendorLocation);
        }
        else if (this.isSales())
        {
            select firstonly salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(salesLine);
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(transTaxInformationLoc.CustomerLocation);
        }

        return LogisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return inventQualityOrderTable.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScrapPercent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the scrap percentage of the full quantity.
    /// </summary>
    /// <returns>
    /// The percentage
    /// </returns>
    public Percent getScrapPercent()
    {
        Percent             scrapPercent;
        InventItemSampling  inventItemSampling;

        if (inventQualityOrderTable.ItemSamplingId)
        {
            inventItemSampling = InventItemSampling::find(inventQualityOrderTable.ItemSamplingId);

            if (inventItemSampling.TestQtySpecification == InventTestQtySpecification::Percent)
            {
                scrapPercent = inventItemSampling.ItemSamplingValue / 100;
            }
            else
            {
                scrapPercent = inventItemSampling.ItemSamplingValue / this.getFullQuantity();
            }
        }
        else
        {
            scrapPercent = this.getQuantity() / this.getFullQuantity();
        }

        return scrapPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        if (this.isPurch())
        {
            return TaxDirection::IncomingTax;
        }
        else
        {
            return TaxDirection::OutgoingTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    /// <remarks>
    /// The method may be required to be overridden by different type of transaction.
    /// </remarks>
    public RefRecId getTaxLocationRefRecId()
    {
        PurchLine               purchLine;
        SalesLine               salesLine;
        RefRecId                taxLocationRefRecId;

        if (this.isPurch())
        {
            select firstonly purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(purchLine);

            taxLocationRefRecId = transTaxInformationLoc.CompanyLocation;
        }

        if (this.isSales())
        {
            select firstonly salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            transTaxInformationLoc =  TransTaxInformationHelper::newHelper().getTransTaxInformationByRecord(salesLine);

            taxLocationRefRecId = transTaxInformationLoc.CompanyLocation;
        }

        return taxLocationRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        TaxModuleType   taxModuleType;

        if (this.isPurch())
        {
            taxModuleType = TaxModuleType::Purch;
        }
        else if (this.isSales())
        {
            taxModuleType = TaxModuleType::Sales;
        }

        return taxModuleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    public CurrencyCode getTransactionCurrency()
    {
        PurchLine    purchLine;
        SalesLine    salesLine;
        CurrencyCode currencyCode;

        if (this.isPurch())
        {
            select CurrencyCode from purchLine
                where inventQualityOrderTable.InventRefId == purchLine.PurchId
                    && inventQualityOrderTable.InventRefTransId == purchLine.InventTransId;

            currencyCode = purchLine.CurrencyCode;
        }

        if (this.isSales())
        {
            select CurrencyCode from salesLine
                where inventQualityOrderTable.InventRefId == salesLine.SalesId
                    && inventQualityOrderTable.InventRefTransId == salesLine.InventTransId;

            currencyCode = salesLine.CurrencyCode;
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType</c> of the transaction
    /// </returns>
    public TaxModelTransactionType getTransactionType()
    {
        if (this.isPurch())
        {
            return TaxModelTransactionType::Return;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return this.getValidateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the validate date of quality order.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TransDate</c> class.
    /// </returns>
    protected TransDate getValidateDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        return this.getReferenceTaxModelDocLine().getVendTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        inventQualityOrderTable = _documentLineMap;

        if (this.isPurch())
        {
            PurchParmLine purchParmLine;
            
            if (PurchMultithreadedPurchConfirmationFlight::instance().isEnabled())
            {
                purchParmLine = PurchParmLine::findPurchParmLineForQualityOrder(inventQualityOrderTable);
            }
            else
            {
                select firstOnly purchParmLine
                    where purchParmLine.InventTransId == inventQualityOrderTable.InventRefTransId
                        && purchParmLine.OrigPurchId  == inventQualityOrderTable.InventRefId;
            }

            packingSlipModelLoc = TaxModelDocLineFactory::newTaxModelDocLine(purchParmLine);
        }
        else if (this.isSales())
        {
            SalesParmLine salesParmLine;

            select firstOnly salesParmLine
                where salesParmLine.InventTransId == inventQualityOrderTable.InventRefTransId
                    && salesParmLine.OrigSalesId  == inventQualityOrderTable.InventRefId;

            packingSlipModelLoc = TaxModelDocLineFactory::newTaxModelDocLine(salesParmLine);
        }
        else
        {
            throw error (Error::wrongUseOfFunction(classStr(TaxModelDocLineQualityOrderImpl)));
        }

        super(_documentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return packingSlipModelLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBasedOnReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the doc line is based on reference taxmodel doc line  or not.
    /// </summary>
    /// <returns>
    /// True if the doc line is based on the reference taxModel doc line;Oterwise, false.
    /// </returns>
    public boolean isBasedOnReferenceTaxModelDocLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the quality order for a purchase order
    /// </summary>
    /// <returns>
    /// True, if the quality order for a purchase order; otherwise, false.
    /// </returns>
    protected NoYes isPurch()
    {
        return inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the quality order for a sales order
    /// </summary>
    /// <returns>
    /// True, if the quality order for a sales order; otherwise, false.
    /// </returns>
    protected NoYes isSales()
    {
        return inventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        if (this.isPurch())
        {
            select firstOnly RecId from vendInvoiceInfoLine
                where inventQualityOrderTable.InventRefId == vendInvoiceInfoLine.OrigPurchId
                    && inventQualityOrderTable.InventRefTransId == vendInvoiceInfoLine.InventTransId;

            return vendInvoiceInfoLine.RecId > 0;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    public NoYes isScrap()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return packingSlipModelLoc.getUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return DateTimeUtil::date(inventQualityOrderTable.CreatedDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return DateTimeUtil::date(inventQualityOrderTable.CreatedDateTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>