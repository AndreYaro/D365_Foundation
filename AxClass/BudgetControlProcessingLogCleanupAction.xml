<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlProcessingLogCleanupAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Data maintenance action to automatically clean up the <c>BudgetControlProcessingLog</c> table.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
internal final class BudgetControlProcessingLogCleanupAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public DataMaintenanceCaption caption()
    {
        return literalStr("@Budget:BudgetControlProcessingLogCleanupActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public DataMaintenanceDescription description()
    {
        return literalStr("@Budget:BudgetControlProcessingLogCleanupDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    public boolean isEnabled()
    {
        return BudgetControlConfiguration::isControlConfigured();
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::Performance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public ModuleAxapta module()
    {
        return ModuleAxapta::Budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(BudgetControlProcessingLogCleanupTask));
        
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        utcdatetime retentionBoundary = DateTimeUtil::addDays(DateTimeUtil::utcNow(), BudgetControlParameters::find().ProcessingLogRetentionDays * -1);

        boolean isCleanupRequired = BudgetControlParameters::doesStoredProcedureLoggingRequireDisabling();
        if (!isCleanupRequired)
        {
            BudgetControlProcessingHeader budgetControlProcessingHeader;

            select firstonly RecId
                from budgetControlProcessingHeader
                where budgetControlProcessingHeader.CreatedDateTime <= retentionBoundary;

            isCleanupRequired = budgetControlProcessingHeader.RecId != 0;
        }

        if (!isCleanupRequired)
        {
            BudgetControlProcessingLog budgetControlProcessingLog;

            select firstonly RecId
                from budgetControlProcessingLog
                where budgetControlProcessingLog.MessageCreatedTime <= retentionBoundary;

            isCleanupRequired = budgetControlProcessingLog.RecId != 0;
        }

        if (!isCleanupRequired)
        {
            BudgetControlProcessingDetail budgetControlProcessingDetail;
            select firstonly RecId
                from budgetControlProcessingDetail
                where budgetControlProcessingDetail.CreatedDateTime <= retentionBoundary;
        
            isCleanupRequired = budgetControlProcessingDetail.RecId != 0;
        }

        DataMaintenanceOpportunityResult result = DataMaintenanceOpportunityResult::construct();
        result.parmOpportunityFound(isCleanupRequired);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = true;

        return actionParameters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>