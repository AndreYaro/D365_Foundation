<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcProj_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCalcSales_IN</c> class integrates with the calculation of withhold tax from the Proj proposal by the
/// <see cref="T:SalesCalcTax_ProjProposal" />.
/// </summary>
class TaxWithholdCalcProj_IN extends TaxWithholdCalculation_IN
{
    SalesCalcTax_ProjProposal   salesCalcTax;
    ProjProposalJour            projProposalJour;
    Map                         orderBalances;
    tableId                     lineTableId;
    recId                       lineRecId;
    TaxWithholdGroup            taxWithholdGroup;
    boolean                     isRecoverable, taxIncludedInItemPrice;
    Integer                     sign;
    CustAccount                 projInvoiceAccount;
    Common                      common;
    boolean                     isGTEEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTmpTransLineWithholdGrossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the each transLine for given Project invoice journal, and insert lines into <c>TmpTransLineWithholdGrossAmount_IN</c>,
    /// which will be used to calculate pertrans value.
    /// </summary>
    protected void calcTmpTransLineWithholdGrossAmount()
    {
        AmountCur                       grossAmount;
        ProjProposalItem                projProposalItem;
        ProjProposalRevenue             projProposalRevenue;
        ProjProposalOnAcc               projProposalOnAcc;
        ProjRevenueTrans                projRevenueTrans;
        ProjItemTrans                   projItemTrans;
        ProjOnAccTrans                  projOnAccTrans;
        RefTableId                      headingTableIdLoc;
        RefRecId                        headingRecIdLoc;
        RefTableId                      SourceTableId;
        RefRecId                        SourceRecId;
        CurrencyCode                    currencyCodeLoc;
        ExchRate                        exchangeRate;

        salesCalcTax.initCursor();
        common = salesCalcTax.nextLine() as common;
        while (common)
        {
            switch (common.TableId)
            {
                case tablenum(ProjProposalRevenue) :
                    projProposalRevenue     = common;
                    SourceTableId           = projProposalRevenue.TableId;
                    SourceRecId             = projProposalRevenue.RecId;
                    projRevenueTrans        = projProposalRevenue.projRevenueTrans();
                    currencyCodeLoc         = projRevenueTrans.CurrencyId;
                    exchangeRate            = projProposalRevenue.projProposalJour().exchRate;
                    break;

                case tablenum(projProposalItem) :
                    projProposalItem        = common;
                    SourceTableId           = projProposalItem.TableId;
                    SourceRecId             = projProposalItem.RecId;
                    projItemTrans           = projProposalItem.projItemTrans();
                    currencyCodeLoc         = projItemTrans.CurrencyId;
                    if (!projItemTrans && !currencyCodeLoc
                        && projProposalItem.ItemType == ProjItemType::SalesOrder)
                    {
                        currencyCodeLoc = projProposalItem.salesLine().CurrencyCode;
                    }
                    exchangeRate            = projProposalItem.projProposalJour().exchRate;
                    break;

                case tablenum(projProposalOnAcc) :
                    projProposalOnAcc       = common;
                    SourceTableId           = projProposalOnAcc.TableId;
                    SourceRecId             = projProposalOnAcc.RecId;
                    projOnAccTrans          = projProposalOnAcc.projOnAccTrans();
                    currencyCodeLoc         = projOnAccTrans.CurrencyId;
                    exchangeRate            = projProposalOnAcc.projProposalJour().exchRate;
                    break;
            }

            headingTableIdLoc = salesCalcTax.tableId();
            headingRecIdLoc = salesCalcTax.recID();

            grossAmount = this.getGrossAmount(common);

            tmpTransLineWithholdGrossAmount.clear();
            tmpTransLineWithholdGrossAmount.LineGrossAmountCur      = grossAmount;
            tmpTransLineWithholdGrossAmount.HeadingTableId          = headingTableIdLoc;
            tmpTransLineWithholdGrossAmount.HeadingRecId            = headingRecIdLoc;
            tmpTransLineWithholdGrossAmount.SourceTableId           = SourceTableId;
            tmpTransLineWithholdGrossAmount.SourceRecId             = SourceRecId;
            tmpTransLineWithholdGrossAmount.TaxWithholdGroup        = taxWithholdGroup;
            tmpTransLineWithholdGrossAmount.AccountType             = AccountType_IN::Cust;
            tmpTransLineWithholdGrossAmount.AccountNumber           = projInvoiceAccount;
            tmpTransLineWithholdGrossAmount.TransDate               = taxdate;
            tmpTransLineWithholdGrossAmount.AmountOriginMST         = CurrencyExchangeHelper::amountCur2MST(grossAmount, currencyCodeLoc, exchangeRate, taxdate);
            tmpTransLineWithholdGrossAmount.insert();

            common = salesCalcTax.nextLine() as common;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Steps through project invoice proposal lines to calculate withhold tax for a Proposal.
    /// </summary>
    /// <returns>
    /// The withhold tax amount.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmountCur        taxWithholdAmount;
        TaxAmountCur        totalTaxWithholdAmt;
        boolean             moreLines;
        AmountCur           lineAmount;
        AmountCur           grossAmount;
        container           taxWithholdData;

        if (!headingRecId)
        {
            return 0;
        }

        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        // init TmpWHTTransLine
        this.calcTmpTransLineWithholdGrossAmount();

        salesCalcTax.initCursor();
        moreLines = true;

        while (moreLines)
        {
            common = salesCalcTax.nextLine() as common;
            if (common)
            {
                taxWithholdAmount = 0;
                boolean isCreditNote = this.isCreditNote(common);

                lineTableId = salesCalcTax.transTableId();
                lineRecId   = salesCalcTax.transRecId();
                lineAmount  = salesCalcTax.transLineAmount();
                grossAmount = this.getGrossAmount(common);

                if (isCreditNote && common.TableId == tableNum(ProjProposalItem))
                {
                    taxWithholdData = this.setWHTContainerData(common, grossAmount);
                    ProjProposalItem projProposalItem = common as ProjProposalItem;
                    SalesId salesIdLoc = projProposalItem.salesLine().SalesId;
                    if (salesIdLoc)
                    {
                        taxWithholdData = conPoke(taxWithholdData, #TaxDate, salesCalcTax.invoiceDate());
                        taxWithHoldAmount = this.creditNoteCalculation(
                            taxWithholdData,
                            '',
                            salesIdLoc);
                    }
                }
                else if (grossAmount > 0)
                {
                    taxWithholdData = this.setWHTContainerData(common, grossAmount);
                    this.setInvoiceCompany(curext());
                    this.setPaymentCompany(curext());

                    taxWithholdAmount   = this.totalTaxWithhold(projInvoiceAccount,
                                                                taxWithholdGroup,
                                                                salesCalcTax.invoiceDate(),
                                                                taxWithholdData,
                                                                isRecoverable,
                                                                false);

                    taxWithholdAmount   = taxWithholdAmount * sign;
                }

                totalTaxWithholdAmt += taxWithholdAmount;
            }
            else
            {
                moreLines = false;
            }
        }

        sw.Stop();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00050, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), sw.ElapsedMilliseconds);

        return totalTaxWithholdAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    protected boolean isCreditNote(Common _line)
    {
        boolean ret = super(_line);
        if (_line.TableId == tableNum(ProjProposalItem))
        {
            ProjProposalItem projProposalItem = _line as ProjProposalItem;
            SalesLine salesLine = projProposalItem.salesLine();
            if (projProposalItem.ItemType == ProjItemType::SalesOrder && salesLine)
            {
                SalesTable salesTableLoc = salesLine.salesTable();

                if (salesTableLoc.SalesStatus != SalesStatus::Invoiced
                    && salesLine.InventTransIdReturn
                    && salesLine.SalesQty < 0)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the baseAmount for given sourceLine for withhold tax calculation.
    /// </summary>
    /// <param name="_common">
    /// Source line buffer.
    /// </param>
    /// <returns>
    /// Returns the baseAmount for given sourceLine for withhold tax calculation.
    /// </returns>
    protected AmountCur getGrossAmount(Common _common)
    {
        AmountCur                       indirectTaxAmount, miscAmount, lineAmount, discAmount;
        TaxWithholdParameters_IN        taxWithholdParametersLoc = TaxWithholdParameters_IN::find();
        TmpTaxWorkTrans                 tmpTaxWorkTransLoc;
        MarkupTrans                     markupTrans;
        MarkupTable                     markupTable;
        ProjProposalRevenue             projProposalRevenue;
        ProjProposalOnAcc               projProposalOnAcc;
        ProjProposalItem                projProposalItem;
        ProjOnAccTrans                  projOnAccTrans;
        ProjRevenueTrans                projRevenueTrans;
        ProjItemTrans                   projItemTrans;
        AmountCur                       grossAmountLoc;
        ProjRevenueTransTaxExtensionIN  projRevenueTransTaxExtensionIN;
        ProjOnAccTransTaxExtensionIN    projOnAccTransTaxExtensionIN;
        ProjItemTransTaxExtensionIN     projItemTransTaxExtensionIN;
        
        // <GTE>
        ITaxDocumentLine                taxDocumentLine;
        ITaxableDocument                taxableDocument;
        ITaxDocument                    taxDocument;
        TaxEngineProjOnAcctTransHeader  onAcctHeader;
        TaxEngineProjRevenueTransHeader revenueHeader;
        TaxEngineProjItemTransHeader    itemHeader;
        TaxWithholdGroupHeading         taxWithholdGroupHeading;

        Map includeTaxComponentsMap = new Map(Types::String, Types::Container);
        // </GTE>

        /// <summary>
        /// Get the grossamount for given sourceLine & item tax group for withhold tax calculation.
        /// </summary>
        /// <param name="_common">
        /// Source line buffer.
        /// </param>
        /// <param name="_taxItemGroup">
        /// TaxItemGroupId value.
        /// </param>
        /// <remarks>
        /// Calculates the grossamount value for given sourceLine & item tax group for withhold tax calculation.
        /// </remarks>
        void getTotalGrossAmount(Common _commonLoc, taxItemGroup _taxItemGroup)
        {
            tmpTaxWorkTransLoc = salesCalcTax.tax().tmpTaxWorkTrans();
            // Get the indirect taxes for Withhold tax baseAmount from TmpTaxWorkTrans table.
            indirectTaxAmount = TmpTaxWorkTrans::getIndirectTaxAmtForWHTSourceBaseCur_IN(tmpTaxWorkTransLoc, _commonLoc.TableId, _commonLoc.RecId, _taxItemGroup);

            while select ModuleType, MarkupCode, Value from markupTrans
                where markupTrans.TransTableId  == _commonLoc.TableId
                    && markupTrans.TransRecId   == _commonLoc.RecId
            {
                markupTable = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);
                if (markupTable.CustType == MarkupType::CustVend)
                {
                    miscAmount += markupTrans.Value;
                }
                if (markupTable.VendType == MarkupType::CustVend)
                {
                    miscAmount -= markupTrans.Value;
                }
            }

            lineAmount = salesCalcTax.transLineAmount();

            // <GTE>
            if (isGTEEnabled)
            {
                taxWithholdGroupHeading = TaxWithholdGroupHeading::find(taxWithholdGroup);
                taxDocument = TaxBusinessService::calculateTax(taxableDocument);
                if(taxDocument)
                {
                    taxDocumentLine = taxDocument.findLineBySource(_common.TableId, _common.RecId);
                    if (taxDocumentLine)
                    {
                        if (taxDocumentLine.priceInclTax())
                        {
                            lineAmount += taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                            lineAmount -= taxDocumentLine.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                        }

                        includeTaxComponentsMap = TaxWithholdIncIndirectTaxComponentsUtil::getIncTaxComponentsForWithholdGroup(taxWithholdGroupHeading.RecId);
                        indirectTaxAmount = taxDocumentLine.getTaxAmountByComponentsAndProvider(includeTaxComponentsMap, TaxAccountingProvider::Party);
                        if (TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFrameworkFieldsConstants::TaxDirection)) == TaxDirection::IncomingTax)
                        {
                            indirectTaxAmount = -indirectTaxAmount;
                        }
                    }
                }
            }
            // </GTE>

            endDiscPercent = salesCalcTax.endDisc();
            discAmount = CurrencyExchangeHelper::amount(lineAmount, salesCalcTax.currencyCode()) * endDiscPercent / 100;

            grossAmountLoc = lineAmount - discAmount + indirectTaxAmount + miscAmount;
        }
        ;

        switch (_common.TableId)
        {
            case tablenum(ProjProposalRevenue) :
                projProposalRevenue             = _common;
                projRevenueTrans                = projProposalRevenue.projRevenueTrans();
                projRevenueTransTaxExtensionIN  = ProjRevenueTransTaxExtensionIN::findByProjRevenueTrans(projRevenueTrans.RecId);
                taxWithholdGroup                = projRevenueTransTaxExtensionIN.tdsGroup ? projRevenueTransTaxExtensionIN.tdsGroup : projRevenueTransTaxExtensionIN.tcsGroup;
                isRecoverable                   = projRevenueTransTaxExtensionIN.tdsGroup ? true : false;
                sign                            = projRevenueTransTaxExtensionIN.TCSGroup ? -1 : 1;
                projInvoiceAccount              = projProposalRevenue.projProposalJour().InvoiceAccount;
                // <GTE>
                if (isGTEEnabled)
                {
                    revenueHeader   = TaxEngineProjRevenueTransHeader::findOrCreateByProjProposalJour(projProposalRevenue.projProposalJour());
                    taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(revenueHeader));
                }
                // </GTE>
                if (projRevenueTrans.Qty > 0)
                {
                    if (CustTable::find(projProposalRevenue.projProposalJour().InvoiceAccount).TaxWithholdCalculate_IN
                            && ((taxWithholdParametersLoc.tdsActivate && taxWithholdParametersLoc.tdsInvoice && projRevenueTransTaxExtensionIN.tdsGroup)
                            || (taxWithholdParametersLoc.tcsActivate && taxWithholdParametersLoc.tcsInvoice && projRevenueTransTaxExtensionIN.tcsGroup)))
                    {
                        getTotalGrossAmount(_common, projRevenueTrans.TaxItemGroupId);
                    }
                }

                break;

            case tablenum(projProposalItem) :
                projProposalItem            = _common;
                projInvoiceAccount          = projProposalItem.projProposalJour().InvoiceAccount;
                SalesLine salesline = projProposalItem.salesLine();

                if (salesline && projProposalItem.ItemType == ProjItemType::SalesOrder)
                {
                    SalesLine_IN salesLineIN = salesLine.salesLine_IN();
                    taxWithholdGroup = salesLineIN.TDSGroup ? salesLineIN.TDSGroup : salesLineIN.TCSGroup;
                    isRecoverable = salesLineIN.TDSGroup ? true : false;
                    sign = salesLineIN.TCSGroup ? -1 : 1;
                    if (isGTEEnabled)
                    {
                        TaxEngineProjItemSOTransHeader soHeader = TaxEngineProjItemSOTransHeader::findOrCreateByProjProposalJour(projProposalItem.projProposalJour());
                        taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(soHeader));
                    }
                    if (salesline.LineAmount != 0)
                    {
                        if (CustTable::find(projProposalItem.projProposalJour().InvoiceAccount).TaxWithholdCalculate_IN
                            && ((taxWithholdParametersLoc.tdsActivate && taxWithholdParametersLoc.tdsInvoice && salesLineIN.TDSGroup)
                            || (taxWithholdParametersLoc.tcsActivate && taxWithholdParametersLoc.tcsInvoice && salesLineIN.TCSGroup)))
                        {
                            getTotalGrossAmount(_common, salesline.TaxItemGroup);
                        }
                    }
                }
                else
                {
                    projItemTrans               = projProposalItem.projItemTrans();
                    projItemTransTaxExtensionIN = ProjItemTransTaxExtensionIN::findByProjItemTrans(projItemTrans.RecId);
                    taxWithholdGroup            = projItemTransTaxExtensionIN.tdsGroup ? projItemTransTaxExtensionIN.tdsGroup : projItemTransTaxExtensionIN.tcsGroup;
                    isRecoverable               = projItemTransTaxExtensionIN.tdsGroup ? true : false;
                    sign                        = projItemTransTaxExtensionIN.TCSGroup ? -1 : 1;
                    // <GTE>
                    if (isGTEEnabled)
                    {
                        itemHeader      = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalItem.projProposalJour());
                        taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(itemHeader));
                    }
                    // </GTE>
                    if (projItemTrans.Qty > 0)
                    {
                        if (CustTable::find(projProposalItem.projProposalJour().InvoiceAccount).TaxWithholdCalculate_IN
                                && ((taxWithholdParametersLoc.tdsActivate && taxWithholdParametersLoc.tdsInvoice && projItemTransTaxExtensionIN.tdsGroup)
                                || (taxWithholdParametersLoc.tcsActivate && taxWithholdParametersLoc.tcsInvoice && projItemTransTaxExtensionIN.tcsGroup)))
                        {
                            getTotalGrossAmount(_common, projItemTrans.TaxItemGroupId);
                        }
                    }
                }
                
                break;

            case tablenum(projProposalOnAcc) :
                projProposalOnAcc               = _common;
                projOnAccTrans                  = projProposalOnAcc.projOnAccTrans();
                projOnAccTransTaxExtensionIN    = ProjOnAccTransTaxExtensionIN::findByProjOnAccTrans(projOnAccTrans.RecId);
                taxWithholdGroup                = projOnAccTransTaxExtensionIN.tdsGroup ? projOnAccTransTaxExtensionIN.tdsGroup : projOnAccTransTaxExtensionIN.tcsGroup;
                isRecoverable                   = projOnAccTransTaxExtensionIN.tdsGroup ? true : false;
                sign                            = projOnAccTransTaxExtensionIN.TCSGroup ? -1 : 1;
                projInvoiceAccount              = projProposalOnAcc.projProposalJour().InvoiceAccount;
                // <GTE>
                if (isGTEEnabled)
                {
                    onAcctHeader    = TaxEngineProjOnAcctTransHeader::findOrCreateByProjProposalJour(projProposalOnAcc.projProposalJour());
                    taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(onAcctHeader));
                }
                // </GTE>
                if (projOnAccTrans.Qty > 0)
                {
                    if (CustTable::find(projProposalOnAcc.projProposalJour().InvoiceAccount).TaxWithholdCalculate_IN
                            && ((taxWithholdParametersLoc.tdsActivate && taxWithholdParametersLoc.tdsInvoice && projOnAccTransTaxExtensionIN.tdsGroup)
                            || (taxWithholdParametersLoc.tcsActivate && taxWithholdParametersLoc.tcsInvoice && projOnAccTransTaxExtensionIN.tcsGroup)))
                    {
                        getTotalGrossAmount(_common, projOnAccTrans.TaxItemGroupId);
                    }
                }
                break;
        }

        return grossAmountLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes TaxWithholdCalcProj_IN variables with transaction values.
    /// </summary>
    /// <param name="_initializationClass">
    /// The Object.
    /// </param>
    public void init(Object _initializationClass)
    {
        salesCalcTax            = _initializationClass as SalesCalcTax_ProjProposal;
        taxModuleType           = TaxModuleType::ProjectInvoice;
        headingTableId          = salesCalcTax.tableId();
        headingRecId            = salesCalcTax.recID();
        taxDate                 = salesCalcTax.invoiceDate();
        taxIncludedInItemPrice  = salesCalcTax.isTaxIncluded();

        salesCalcTax.taxWithholdCalculation_IN(this);
        this.setExchRates(salesCalcTax.currencyCode(), salesCalcTax.exchRate(), salesCalcTax.exchRateSecondary(), Currency::noYes2UnknownNoYes(salesCalcTax.triangulation(salesCalcTax.invoiceDate())), taxDate);
        calcPostedUncalculatedTransMap = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instance for the taxwitholdcalcproj_IN
    /// </summary>
    protected void new()
    {
        orderBalances = new Map(typeName2Type(extendedTypeStr(recId)), Types::Real);
        isGTEEnabled  = TaxSolutionScopeIntegrationUtil::isCompanyEnabled();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets oredr balance of the transaction.
    /// </summary>
    /// <param name="_recId">
    /// The RecId.
    /// </param>
    /// <returns>
    /// Returns the <c>AmountCur</c> value.
    /// </returns>
    public AmountCur orderBalance(recId _recId)
    {
        AmountCur   orderBalance;

        if (orderBalances.exists(_recId))
        {
            orderBalance = orderBalances.lookup(_recId);
        }

        return orderBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>RecId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    /// The RecID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived methods.
    /// </remarks>
    public recId sourceRecId()
    {
        return common.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TableId</c> of the transaction that is to be taxed.
    /// </summary>
    /// <returns>
    /// The TableID of the transaction to be taxed.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived methods.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        return common.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs TaxwithholdCalcProj object with initial values.
    /// </summary>
    /// <param name="_salesForm">
    /// The SalesCalcTax_ProjProposal
    /// </param>
    /// <returns>
    /// Returns the instance of <c>TaxWithholdCalcProj_IN</c> class.
    /// </returns>
    public static TaxWithholdCalcProj_IN construct(SalesCalcTax_ProjProposal _salesForm)
    {
        TaxWithholdCalcProj_IN    taxWithholdCalcProj;

        taxWithholdCalcProj = new TaxWithholdCalcProj_IN();
        taxWithholdCalcProj.init(_salesForm);

        return taxWithholdCalcProj;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>