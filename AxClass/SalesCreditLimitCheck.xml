<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCreditLimitCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCreditLimitCheck extends RunBaseBatch implements BatchRetryable
{
    Counter                 progressCounter;
    Counter                 progressTotal;
    QueryRun                queryRun;
    boolean                 updateOne;
    CustAccount             custAccount;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        custAccount
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query that is used for selecting the sales orders to update.
    /// </summary>
    protected void buildQuery()
    {
        Query                   query = new Query(queryStr(SalesTableSelect));
        QueryBuildDataSource    dataSource = SysQuery::findOrCreateDataSource(query, tableNum(SalesTable));
        QueryBuildRange         range = SysQuery::findOrCreateRange(dataSource, fieldNum(SalesTable, SalesStatus));

        range.value(SalesQueryRangeUtil::salesStatusCanBeInvoiced());

        if (custAccount)
        {
            range = SysQuery::findOrCreateRange(dataSource, fieldNum(SalesTable, CustAccount));
            range.value(queryValue(custAccount));
        }

        queryRun  = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        updateOne = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate(str text)
    {
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(boolean _showProgess = false)
    {
        #OCCRetryCount
        SalesTable              salesTable;
        SalesId                 fromSalesId;

        if (_showProgess && !updateOne)
        {
            this.progressInit("@SYS59119", 0, #AviFormLetter);
            progress.setText("@SYS26577");
        }

        this.buildQuery();
        try
        {
            ttsbegin;

            update_recordset salesTable
                setting Estimate = 0
                where salesTable.SalesStatus == SalesStatus::Invoiced
                    && salesTable.Estimate    != 0;

            while (queryRun.next())
            {
                salesTable = queryRun.get(tableNum(SalesTable));

                if (_showProgess && !updateOne)
                {
                    if (fromSalesId)
                    {
                        this.progressUpdate(strFmt("@SYS59131", strFmt('%1 - %2',fromSalesId, salesTable.SalesId)));
                    }
                    else
                    {
                        this.progressUpdate(strFmt("@SYS59131", salesTable.SalesId));
                    }
                    fromSalesId = salesTable.SalesId;
                }

                if (salesTable.setEstimate())
                {
                    salesTable.doUpdate();
                }
            }

            ttscommit;
        }
        catch (Exception::Error)
        {
            info("@SYS78886");
        }

        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job is executed by using the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned by this method, the batch server executes the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>SalesCreditLimitCheck</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>SalesCreditLimitCheck</c> class.
    /// </returns>
    public static SalesCreditLimitCheck construct()
    {
        return new SalesCreditLimitCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS71634";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        SalesCreditLimitCheck   salesCreditLimitCheck = SalesCreditLimitCheck::construct();

        salesCreditLimitCheck.getLast();

        if (_args.parm())
        {
            salesCreditLimitCheck.parmCustAccount(_args.parm());
        }

        if (salesCreditLimitCheck.prompt())
        {
            salesCreditLimitCheck.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>