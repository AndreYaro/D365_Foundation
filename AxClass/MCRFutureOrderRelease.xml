<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFutureOrderRelease</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRFutureOrderRelease</c> class releases orders that are pending and
/// updates the <c>MCRCustPaymTable</c> recors and the <c>CreditCardAuthTrans</c> records
/// so the records can be picked for authorization.
/// </summary>
class MCRFutureOrderRelease
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseOrderAndResubmitPayms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Picks up the sales orders that are stopped and the
    /// corresponding <c>MCRCustPaymTable</c> record.
    /// </summary>
    /// <param name="calledByBatch">
    /// A <c>Boolean</c> value that defines whether or not this method was called by batch; optional.
    /// </param>
    /// <param name="onlineAuth">
    /// A <c>Boolean</c> value that defines if the payments are set for online authorization or not; optional.
    /// </param>
    /// <remarks>
    /// If the release date criteria is met then the <c>custpaymstatus</c> record and
    /// the <c>MCRCCAuthStatus</c> is inserted. When this method is called by the batch
    /// <c>MCRReleaseAndAuthFutureOrders</c> if online authorization is required then the payments
    /// are submitted for online authorization else the payments are moved to a pending status
    /// and will get picked up by the online authorization batch.
    /// </remarks>
    void releaseOrderAndResubmitPayms(boolean calledByBatch = false,
                                    MCROnlineAuthorization onlineAuth = NoYes::No)
    {
        SalesTable              salesTable;
        MCRCustPaymTable        mcrCustPaymTable;
        MCRCustPaymTotals       mcrCustPaymTotals;
        MCRSalesOrderTotals     mcrSalesOrderTotals;
        CreditCardAuthTrans     creditCardAuthTrans;
        boolean paymentSent = false;

        // If called by batch check the online authorization flag
        if (calledByBatch)
        {
            while select salesTable
            order by salesId desc
            where salesTable.MCROrderStopped == NoYes::Yes

            {
                if (onlineAuth == NoYes::Yes)
                {
                    mcrSalesOrderTotals = new MCRSalesOrderTotals(salesTable);
                    mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId,
                                                        salesTable.RecId,
                                                        mcrSalesOrderTotals);

                    if (salesTable.mcrOrderReleaseDate() <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                        && !mcrCustPaymTotals.allPaymentsApproved())
                    {
                        while select RecId from mcrCustPaymTable
                                where mcrCustPaymTable.RefRecId     == salesTable.RecId
                                && mcrCustPaymTable.RefTableId      == salesTable.TableId
                                && mcrCustPaymTable.Status          == MCRCustPaymStatus::NotSubmitted
                                && mcrCustPaymTable.CustPaymType    == MCRCustPaymType::CreditCard
                            notexists join creditCardAuthTrans // only get records that have no auths
                                where creditCardAuthTrans.MCRPaymRecId == mcrCustPaymTable.RecId
                        {
                            //Do not need to re-validate and recalculate payments since
                            // already performed above in the validate() method.
                            mcrCustPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays,
                                                              false,
                                                              true,
                                                              mcrCustPaymTable.RecId);
                            paymentSent = true;
                        }

                        if (paymentSent)
                        {
                            info(strfmt("@MCR24416", salesTable.SalesID));
                            paymentSent = false;
                        }
                    }
                }
                else
                {
                    info(strfmt("@MCR24417", salesTable.SalesId));
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>