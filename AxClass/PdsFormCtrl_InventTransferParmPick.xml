<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_InventTransferParmPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class serves as a FormCtrl for form InventTransferParmPick.
/// </summary>
class PdsFormCtrl_InventTransferParmPick extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complete the standard field modified functionality
    /// </summary>
    /// <param name="_fieldId">
    /// FieldId of modified field
    /// </param>
    /// <remarks>
    /// Method also calls the Form control button manager.
    /// </remarks>
    public void fieldModified(fieldId _fieldId)
    {
        super(_fieldId);

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method to be called after the form has been initialized
    /// </summary>
    /// <remarks>
    /// Overriding classes need to set the from datasources.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// thrown, if the formrun has not been set
    /// </exception>
    public void initPost()
    {
        #define.Inventory_PdsBatchAttribReserve('PdsBatchAttribReserve')

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (#PmfEnabled)
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(#Inventory_PdsBatchAttribReserve),
                methodstr(PdsFormCtrl_InventTransferParmPick, isBatchEnabled),
                ButtonRuleEffectType::Enabled);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is the BatchId Inventory dimension enabled?
    /// </summary>
    /// <returns>
    /// true, if the BatchId Inventory dimension is enabled: otherwise false
    /// </returns>
    /// <remarks>
    /// Check the current inventTransferLine record to determine if the item is
    /// batch enabled. This check is not to determine if there are any batch
    /// attributes assocciated.
    /// </remarks>
    public NoYes isBatchEnabled()
    {
        InventDimParm           inventDimParmEnabled;
        InventTransferParmLine  invTransferParmLn;

        if (buffer.TableId == tablenum(InventTransferParmLine))
        {
            invTransferParmLn = buffer;
            inventDimParmEnabled.initFromInventDimParm(
                InventTable::find(invTransferParmLn.ItemId).inventDimParmProductDimensions());
        }

        return inventDimParmEnabled.InventBatchIdFlag == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes a new instance of the PdsFormCtrl_InventTransferParmPick class.
    /// </summary>
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// Form Data source used by class - InventTransferParmLine
    /// </param>
    /// <param name="_datasources2">
    /// Form Data source used by class - InventTransferParmTable
    /// </param>
    /// <param name="_datasources3">
    /// Form Data source used by class - InventDim
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// Default value - null.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// Default value - null.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common _datasources1,
        Common _datasources2 = null,
        Common _datasources3 = null,
        Common _datasources4 = null,
        Common _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventTransferParmLine))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventTransferParmTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources3.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a new instance of the PdsFormCtrl_InventTransferParmPick class.
    /// </summary>
    /// <returns>
    /// New instance of the PdsFormCtrl_InventTransferParmPick class.
    /// </returns>
    public static PdsFormCtrl_InventTransferParmPick construct()
    {
        return new PdsFormCtrl_InventTransferParmPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PdsFormCtrl_InventTransferParmPick</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// New instance of class <c>PdsFormCtrl_InventTransferParmPick</c>
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PdsFormCtrl_InventTransferParmPick</c> and sets the formRun variable
    /// to the vlue of the calling form.
    /// </remarks>
    public static PdsFormCtrl_InventTransferParmPick newFromForm(FormRun _fr)
    {
        PmfFormCtrl     frmCtrl;
        PdsCWFormCtrl   cwFormCtrl;

        frmCtrl = PdsFormCtrl_InventTransferParmPick::construct();
        frmCtrl.parmFormRun(_fr);

        if (#PdsCatchWeightEnabled)
        {
            cwFormCtrl = PdsCWFormCtrl::constructFromForm(_fr);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(InventTransferParmLine, QtyShipNow),
                  fieldnum(InventTransferParmLine, PdsCWQtyShipNow),
                  false],
                 [fieldnum(InventTransferParmLine, QtyReceiveNow),
                  fieldnum(InventTransferParmLine, PdsCWQtyReceiveNow)]]
                ));

            cwFormCtrl.parmItemFieldId(fieldnum(InventTransferParmLine, ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(InventTransferParmLine, pdsCWUnitId));

            frmCtrl.addSubFormCtrl(cwFormCtrl);
        }
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>