<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>FormLetterReport</c> class controls the printing of documents.
/// </summary>
/// <remarks>
///    You should derive from this class if you must support new documents that need print destination
///    control.
/// </remarks>
public abstract class FormLetterReport
{
    boolean                 printingCopy;
    PrintMgmtReportRun      printMgmtReportRun;
    PrintCopyOriginal       printType;

    PrintMgmtPrintSettingDetail lastPrintMgmtPrintSettingDetail;

    boolean                 useUserDefinedDestinations;

    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNextPrintSetting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether there is another instance of the <c>PrintMgmtPrintSettingDetail</c> class, but
    ///    does not move the current enumerator.
    /// </summary>
    /// <returns>
    ///    true if there is another instance of the <c>PrintMgmtPrintSettingDetail</c> class; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method should be used to determine whether there is another instance of the
    ///    <c>PrintMgmtPrintSettingDetail</c> class exists without actually moving the current enumerator.
    /// </remarks>
    public boolean checkNextPrintSetting()
    {
        return printMgmtReportRun.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a  report by using the current print management settings.
    /// </summary>
    /// <remarks>
    /// The print management settings that are used are those that are retrieved by the
    /// <c>this.getCurrentPrintSetting</c> method.
    /// </remarks>
    public void execute()
    {
        PrintMgmtReportRun::execute(printMgmtReportRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSSRS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether SSRS exists.
    /// </summary>
    /// <returns>
    /// true if SSRS exists; Otherwise, false.
    /// </returns>
    public boolean existsSSRS()
    {
        return printMgmtReportRun.existsSSRS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPrintSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current instance of the <c>PrintMgmtPrintSettingDetail</c> class.
    /// </summary>
    /// <returns>
    /// The current instance of the <c>PrintMgmtPrintSettingDetail</c> class.
    /// </returns>
    /// <remarks>
    /// Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    /// instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    /// iterate over the print settings that have been found. The <c>getCurrentPrintSetting</c> method will
    /// then return the current instance of the <c>PrintMgmtPrintSettingDetail</c> class, which can be used
    /// to retrieve printer settings for the current copy of the report.
    /// </remarks>
    public PrintMgmtPrintSettingDetail getCurrentPrintSetting()
    {
        return lastPrintMgmtPrintSettingDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrintJobSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default printer settings for the specified <c>PrintSetupOriginalCopy</c> enumeration value.
    /// </summary>
    /// <param name="_printCopyOriginal">
    /// The <c>PrintSetupOriginalCopy</c> enumeration value that specifies whether the Original or Copy
    /// destinations should be retrieved.
    /// </param>
    /// <returns>
    /// The default printer settings for the specified <c>PrintSetupOriginalCopy</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// The general pattern for implementing this method is to use the printer destinations from the
    /// appropriate <c>FormLetter</c> class. These printer destinations will be used if no print management
    /// destinations are found or used.
    /// </remarks>
    protected abstract container getDefaultPrintJobSettings(PrintSetupOriginalCopy _printCopyOriginal)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtDocumentType</c> enumeration value that specifies what document this
    /// <c>FormLetterReport</c> class controls.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtDocumentType</c> enumeration value that specifies what document this
    /// <c>FormLetterReport</c> class controls.
    /// </returns>
    /// <remarks>
    /// This value is used to retrieve the appropriate print management settings for the report.
    /// </remarks>
    public abstract PrintMgmtDocumentType getPrintMgmtDocumentType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtHierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtHierarchyType</c> enumeration value that specifies the hierarchy this
    /// <c>FormLetterReport</c> class uses.
    /// </summary>
    /// <returns>
    /// A <c>PrintMgmtHierarchyType</c> enumeration value that specifies the hierarchy this
    /// <c>FormLetterReport</c> class uses.
    /// </returns>
    /// <remarks>
    /// This value is used to retrieve the appropriate print management settings for the report.
    /// </remarks>
    protected abstract PrintMgmtHierarchyType getPrintMgmtHierarchyType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtNodeType</c> enumeration value that specifies what node this
    /// <c>FormLetterReport</c> class uses.
    /// </summary>
    /// <returns>
    /// A <c>PrintMgmtNodeType</c> enumeration value that specifies what node this <c>FormLetterReport</c>
    /// class uses.
    /// </returns>
    /// <remarks>
    /// This value is used to retrieve the appropriate print management settings for the report.
    /// </remarks>
    protected abstract PrintMgmtNodeType getPrintMgmtNodeType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFooterPresentForCurrentPrintSetting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current instance of the <c>PrintMgmtPrintSettingDetail</c> class has footer
    ///    text that should be printed.
    /// </summary>
    /// <returns>
    ///    true if the current instance of the <c>PrintMgmtPrintSettingDetail</c> class has footer text that
    ///    should be printed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    ///    instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    ///    iterate over the print settings that have been found. The
    ///    <c>isFooterPresentForCurrentPrintSetting</c> method will then return true only if the current
    ///    instance of the <c>PrintMgmtPrintSettingDetail</c> class has footer text.
    /// </remarks>
    public boolean isFooterPresentForCurrentPrintSetting()
    {
        if (this.getCurrentPrintSetting() == null
            || this.parmPrintType() == PrintCopyOriginal::Copy
            || this.parmPrintType() == PrintCopyOriginal::Original)
        {
            return false;
        }

        return strLen(this.getCurrentPrintSetting().parmIdentificationText()) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads instances of the <c>PrintMgmtPrintSettingDetail</c> class that are used for printing the
    ///    report.
    /// </summary>
    /// <param name="_jourTable">
    ///    The journal table that is currently being printed.
    /// </param>
    /// <param name="_transTable">
    ///    The table to which print management information has been related.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID that should be used to retrieve footer text.
    /// </param>
    /// <param name="_documentKeyValue">
    ///    A human readable value that uniquely identifies the document to be printed.
    /// </param>
    /// <remarks>
    ///    Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    ///    instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    ///    iterate over the print settings that have been found. The <c>getCurrentPrintSetting</c> method will
    ///    then return the current instance of the <c>PrintMgmtPrintSettingDetail</c> class which can be used
    ///    to retrieve printer settings for the current copy of the report.
    /// </remarks>
    public void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        boolean isValidReference(Common _referencedTableBuffer)
        {
            PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();

            nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(this.getPrintMgmtNodeType()));
            nodeInstance.parmReferencedTableBuffer(_referencedTableBuffer);

            return nodeInstance.isValidReference();
        }

        void setSettingDetail(PrintMgmtDocInstanceType _type, SRSPrintDestinationSettings _defaultSettings, Common _referencedTableBuffer)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();
            PrintMgmtReportFormat printMgmtReportFormat;

            printMgmtReportFormat = PrintMgmtReportFormat::findByHierarchy(
                printMgmtReportRun.parmDocType(),
                this.getPrintMgmtHierarchyType(),
                this.getPrintMgmtNodeType(),
                _referencedTableBuffer);

            if (!printMgmtReportFormat || printMgmtReportFormat.SSRS == PrintMgmtSSRS::SSRS)
            {
                printMgmtReportFormat = PrintMgmtReportFormat::findSystem(this.getPrintMgmtDocumentType());
            }

            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            printSettingDetail.parmSSRS(printMgmtReportFormat.ssrs);

            printSettingDetail.parmType(_type);

            printSettingDetail.parmInstanceName(enum2str(_type));

            // Since this will be reported to the screen, one copy is the only thing that makes sense
            printSettingDetail.parmNumberOfCopies(1);

            printSettingDetail.parmPrintJobSettings(_defaultSettings);

            if (!this.parmUseUserDefinedDestinations())
            {
                printSettingDetail.parmPrintJobSettings().printMediumType(SRSPrintMediumType::Screen);
            }

            PrintMgmtSettings printMgmtSettings = this.getPrintMgmtSettings(
                printMgmtReportFormat,
                printMgmtReportRun.parmDocType(),
                this.getPrintMgmtHierarchyType(),
                this.getPrintMgmtNodeType(),
                _referencedTableBuffer);

            if (printMgmtSettings != null)
            {
                PrintMgmtIdentificationText printMgmtIdentificationText = PrintMgmtIdentificationText::find(printMgmtSettings.RecId, _languageId);

                printSettingDetail.parmIdentificationText(printMgmtIdentificationText.IdentificationText);
                printSettingDetail.parmNamedDestination(printMgmtSettings.NamedDestination);
            }

            printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
        }

        if (this.parmPrintType() == PrintCopyOriginal::OriginalPrint && isValidReference(_transTable))
        {
            // Print an original
            printMgmtReportRun.load(_jourTable, _transTable, _languageId, _documentKeyValue);
        }
        else if (this.parmPrintType() == PrintCopyOriginal::Copy)
        {
            // Print a copy
            setSettingDetail(PrintMgmtDocInstanceType::Copy, printMgmtReportRun.parmDefaultCopyPrintJobSettings(), _transTable);
        }
        else
        {
            // Print an original.  We also default to print one original when we are trying to
            // print using Print Mgmt information, but don't have a valid table reference.
            // This covers the reprint case where the original transaction record may not be present.
            setSettingDetail(PrintMgmtDocInstanceType::Original, printMgmtReportRun.parmDefaultOriginalPrintJobSettings(), _transTable);
        }

        if (!printMgmtReportRun.more())
        {
            checkFailed("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtSettings</Name>
				<Source><![CDATA[
    public PrintMgmtSettings getPrintMgmtSettings(
        PrintMgmtReportFormat _printMgmtReportFormat,
        PrintMgmtDocumentType _documentType,
        PrintMgmtHierarchyType _hierarchyType,
        PrintMgmtNodeType _nodeType,
        Common _referencedTableBuffer)
    {
        PrintMgmtSettings printMgmtSettings;

        PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();
        nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(_nodeType));

        while (nodeInstance)
        {
            printMgmtSettings = this.getPrintMgmtSettingsFromDocInstance(_printMgmtReportFormat, _documentType, nodeInstance, _referencedTableBuffer);

            if (printMgmtSettings)
            {
                break;
            }

            if (!this.isNodeAndDocumentTypeValid(PrintMgmtHierarchy::construct(_hierarchyType), nodeInstance, _documentType))
            {
                warning("@ApplicationFoundation:ValidationErrorsExist");
                break;
            }

            nodeInstance = PrintMgmtHierarchy::construct(_hierarchyType).getParent(nodeInstance, _documentType);
        }

        return printMgmtSettings;
     }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtSettingsFromDocInstance</Name>
				<Source><![CDATA[
    private PrintMgmtSettings getPrintMgmtSettingsFromDocInstance(
        PrintMgmtReportFormat _printMgmtReportFormat,
        PrintMgmtDocumentType _documentType,
        PrintMgmtNodeInstance _nodeInstance,
        Common _referencedTableBuffer)
    {
        PrintMgmtDocInstance printMgmtDocInstance;
        PrintMgmtSettings printMgmtSettings;

        select firstonly RecId, NamedDestination from printMgmtSettings
            where printMgmtSettings.ReportFormat == _printMgmtReportFormat.RecId
                exists join RecId from printMgmtDocInstance
                    where printMgmtSettings.ParentId == printMgmtDocInstance.RecId
                        && printMgmtDocInstance.DocumentType == _documentType
                        && printMgmtDocInstance.NodeType == _nodeInstance.parmNodeDefinition().getNodeType()
                        && printMgmtDocInstance.PriorityId == 1
                        && ((printMgmtDocInstance.ReferencedRecId == _referencedTableBuffer.RecId
                            && printMgmtDocInstance.ReferencedTableId == _referencedTableBuffer.TableId)
                        || (!printMgmtDocInstance.ReferencedRecId
                            && !printMgmtDocInstance.ReferencedTableId));

        return printMgmtSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNodeAndDocumentTypeValid</Name>
				<Source><![CDATA[
    private boolean isNodeAndDocumentTypeValid(
        PrintMgmtHierarchy _hierarchy,
        PrintMgmtNodeInstance _nodeInstance,
        PrintMgmtDocumentType _documentType)
    {
        return (_hierarchy.isValidNodeType(_nodeInstance.parmNodeDefinition().getNodeType())
                && _nodeInstance.parmNodeDefinition().isValidDocumentType(_documentType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextPrintSetting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to the next instance of the <c>PrintMgmtPrintSettingDetail</c> class.
    /// </summary>
    /// <returns>
    /// true if there is another instance of the <c>PrintMgmtPrintSettingDetail</c> class; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    /// instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    /// iterate over the print settings that have been found. The <c>getCurrentPrintSetting</c> method will
    /// then return the current instance of the <c>PrintMgmtPrintSettingDetail</c> class, which can be used
    /// to retrieve printer settings for the current copy of the report.
    /// </remarks>
    public boolean moveNextPrintSetting()
    {
        boolean ok = printMgmtReportRun.next();

        if (ok)
        {
            lastPrintMgmtPrintSettingDetail = printMgmtReportRun.settingDetail();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the appropriate <c>FormLetterReport</c> class.
    /// </summary>
    /// <remarks>
    ///    To construct instances of the <c>FormLetterReport</c> class, call the <c>construct</c> method.
    /// </remarks>
    void new()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(this.getPrintMgmtHierarchyType(), this.getPrintMgmtNodeType(), this.getPrintMgmtDocumentType());

        printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(this.getDefaultPrintJobSettings(PrintSetupOriginalCopy::Copy)));
        printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(this.getDefaultPrintJobSettings(PrintSetupOriginalCopy::Original)));

        useUserDefinedDestinations = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultCopyPrintJobSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the default copy print settings property.
    /// </summary>
    /// <param name="_printSettings">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>DefaultCopyPrintJobSettings</c> property.
    /// </returns>
    /// <remarks>
    ///    Specify the default print settings that are used in the case where no print management print
    ///    settings are found for a setting that has the <c>PrintMgmtDocInstanceType</c> enumeration value
    ///    of <c>Copy</c>. If this property is not set, it will use the value provided by the
    ///    <c>getDefaultPrintJobSetting</c> method of the <c>FormLetterReport</c> class.
    /// </remarks>
    public SRSPrintDestinationSettings parmDefaultCopyPrintJobSettings(SRSPrintDestinationSettings _printSettings = printMgmtReportRun.parmDefaultCopyPrintJobSettings())
    {
        return printMgmtReportRun.parmDefaultCopyPrintJobSettings(_printSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultOriginalPrintJobSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the default original print settings property.
    /// </summary>
    /// <param name="_printSettings">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>DefaultOriginalPrintJobSettings</c> property.
    /// </returns>
    /// <remarks>
    ///    Specify the default print settings that are used in the case where no print management print
    ///    settings are found for a setting that has the <c>PrintMgmtDocInstanceType</c> enumeration value
    ///    of <c>Copy</c>. If this property is not set, it will use the value provided by the
    ///    <c>getDefaultPrintJobSetting</c> method of the <c>FormLetterReport</c> class.
    /// </remarks>
    public SRSPrintDestinationSettings parmDefaultOriginalPrintJobSettings(SRSPrintDestinationSettings _printSettings = printMgmtReportRun.parmDefaultOriginalPrintJobSettings())
    {
        return printMgmtReportRun.parmDefaultOriginalPrintJobSettings(_printSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of <c>PrintType</c> property.
    /// </summary>
    /// <param name="_parmPrintType">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of <c>PrintType</c> property.
    /// </returns>
    /// <remarks>
    ///    This property is used by the <c>loadPrintSettings</c> method. If it is set to <c>Copy</c>, one copy
    ///    of the report will print. If set to <c>Original</c>, one original copy of the report will print. If
    ///    set to <c>OriginalPrint</c>, it will print a copy if the <c>numCopies</c> parameter for the
    ///    <c>loadPrintSettings</c> method is larger than zero, and it will print an original if the
    ///    <c>_numOriginals</c> parameter of the <c>loadPrintSettings</c> method is larger than zero.
    /// </remarks>
    public PrintCopyOriginal parmPrintType(PrintCopyOriginal _parmPrintType = printType)
    {
        printType = _parmPrintType;
        return printType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportRun</Name>
				<Source><![CDATA[
    public PrintMgmtReportRun parmReportRun()
    {
        return printMgmtReportRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportRunController</Name>
				<Source><![CDATA[
    public SrsReportRunController parmReportRunController(SrsReportRunController _srsReportRunController = printMgmtReportRun.parmReportRunController())
    {
        return printMgmtReportRun.parmReportRunController(_srsReportRunController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of <c>PrintMgmtSSRS</c> property.
    /// </summary>
    /// <param name="_printMgmtSSRS">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of <c>PrintMgmtSSRS</c> property.
    /// </returns>
    public PrintMgmtSSRS parmSSRS(PrintMgmtSSRS _ssrs = printMgmtReportRun.parmSSRS())
    {
        return printMgmtReportRun.parmSSRS(_ssrs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUsePrintMgmtDestinations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of <c>UsePrintMgmtDestinations</c> property.
    /// </summary>
    /// <param name="_usePrintMgmtDestinations">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of <c>UsePrintMgmtDestinations</c> property.
    /// </returns>
    /// <remarks>
    ///    If the <c>UsePrintMgmtDestinations</c> property value is true, print management printer
    ///    destinations for this report will be retrieved from the print management subsystem. If the
    ///    <c>UsePrintMgmtDestinations</c> property value is false, default printer destinations defined by
    ///    the <c>parmDefaultCopyPrintJobSettings</c> property and the
    ///    <c>parmDefaultOriginalPrintJobSettings</c> property will be used. The defautlt value of a property
    ///    will be set to false when you load print settings if the <c>parmUsePrintManagement</c> property is
    ///    false.
    /// </remarks>
    public boolean parmUsePrintMgmtDestinations(boolean _usePrintMgmtDestinations = !printMgmtReportRun.parmForcePrintJobSettings())
    {
        return printMgmtReportRun.parmForcePrintJobSettings(!_usePrintMgmtDestinations);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUserDefinedDestinations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>UseUserDefinedDestinations</c> field.
    /// </summary>
    /// <param name="_useUserDefinedDestinations">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>UseUserDefinedDestinations</c> field.
    /// </returns>
    /// <remarks>
    ///    If the value of the <c>UseUserDefinedDestinations</c> field is true, print management printer
    ///    destinations for this report is retrieved from the user-defined printer destinations. If the value
    ///    of the <c>UseUserDefinedDestinations</c> field is false, the destination for this report will be
    ///    Screen.If the <c>parmUsePrintMgmtDestinations</c> property value is true, user-defined printer
    ///    destinations will be ignored and print management printer destinations for this report will be
    ///    retrieved from the default print management printer destinations.
    /// </remarks>
    public boolean parmUseUserDefinedDestinations(boolean _useUserDefinedDestinations = useUserDefinedDestinations)
    {
        useUserDefinedDestinations = _useUserDefinedDestinations;
        return useUserDefinedDestinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the appropriate <c>FormLetterReport</c> class derivative.
    /// </summary>
    /// <param name="_documentType">
    /// The <c>PrintMgmtDocumentType</c> enumeration value of the form letter report being constructed.
    /// </param>
    /// <returns>
    /// An instance of the appropriate <c>FormLetterReport</c> class being requested.
    /// </returns>
    /// <remarks>
    /// As new <c>FormLetterReport</c> types are added, they should be added here also so that they can be
    /// constructed such as the other <c>FormLetterReport</c> types. Additional node types should be
    /// defined in the <c>PrintMgmtDocumentType</c> enumeration.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The specified value is not a <c>PrintMgmtDocumentType</c> enumeration value.
    /// </exception>
    public static FormLetterReport construct(PrintMgmtDocumentType _documentType)
    {
        PrintMgmtDocumentTypeFactoryAttribute attribute = new PrintMgmtDocumentTypeFactoryAttribute(_documentType);
        FormLetterReport instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(FormLetterReport), attribute) as FormLetterReport;

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>