<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableInterval_Fiscal_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension class of <C>AssetTableInterval_Fiscal</C> supporting table cache to enhance query performance
/// </summary>
class AssetTableInterval_Fiscal_JP extends AssetTableInterval_Fiscal
{
    // temporary table cache for query performance enhancement
    FiscalCalendarPeriod    fiscalPeriod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findFirstDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the quarter to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///     The first day of the quarter to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfQuarter(TransDate _date)
    {
        TransDate               ret;
        RefRecId                fiscalCalendarYearRecId;
        FiscalQuarter           quarter;

        select firstOnly FiscalCalendarYear, Quarter from  fiscalPeriod
        where   fiscalPeriod.StartDate                  <= _date
            &&  fiscalPeriod.EndDate                    >= _date
            &&  fiscalPeriod.Type                       == FiscalPeriodType::Operating;

        fiscalCalendarYearRecId = fiscalPeriod.FiscalCalendarYear;
        quarter = fiscalPeriod.Quarter;

        select  firstonly StartDate from fiscalPeriod
        order by StartDate asc
        where   fiscalPeriod.Type                       == FiscalPeriodType::Operating
            &&  fiscalPeriod.Quarter                    == quarter
            &&  fiscalPeriod.FiscalCalendarYear         == fiscalCalendarYearRecId
            &&  fiscalPeriod.FiscalCalendarYear         == this.getFiscalCalendarYear(_date).RecId;

        if (fiscalPeriod)
        {
            ret = fiscalPeriod.StartDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the quarter to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the quarter to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfQuarter(TransDate _date)
    {
        TransDate               ret;
        RefRecId                fiscalCalendarYearRecId;
        FiscalQuarter           quarter;

        select firstOnly FiscalCalendarYear, Quarter from  fiscalPeriod
        where   fiscalPeriod.StartDate                  <= _date
            &&  fiscalPeriod.EndDate                    >= _date
            &&  fiscalPeriod.Type                       == FiscalPeriodType::Operating;

        fiscalCalendarYearRecId = fiscalPeriod.FiscalCalendarYear;
        quarter = fiscalPeriod.Quarter;

        select  firstonly EndDate from fiscalPeriod
        order by StartDate desc
        where   fiscalPeriod.Type                       == FiscalPeriodType::Operating
            &&  fiscalPeriod.Quarter                    == quarter
            &&  fiscalPeriod.FiscalCalendarYear         == fiscalCalendarYearRecId
            &&  fiscalPeriod.FiscalCalendarYear         == this.getFiscalCalendarYear(_date).RecId;

        if (fiscalPeriod)
        {
            ret = fiscalPeriod.EndDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalCalendarYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves fiscal calendar year including the specific date.
    /// </summary>
    /// <param name="_date">
    ///     The date.
    /// </param>
    /// <returns>
    ///     <c>FiscalCalendarYear</c> record.
    /// </returns>
    private FiscalCalendarYear getFiscalCalendarYear(TransDate _date)
    {
        FiscalCalendarYear      fiscalCalendarYear;

        select firstOnly fiscalCalendarYear
        where   fiscalCalendarYear.FiscalCalendar ==  calendarRecId
            &&  fiscalCalendarYear.StartDate      <= _date
            &&  fiscalCalendarYear.EndDate        >= _date;

        return fiscalCalendarYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AssetTableInterval_Fiscal_JP</c> class.
    /// </summary>
    /// <param name="_assetAccrual">
    /// The asset accrual.
    /// </param>
    /// <param name="_calendarRecId">
    /// The calendar record id, optional.
    /// </param>
    public void new(AssetAccrual _assetAccrual, recId _calendarRecId = 0)
    {
        FiscalCalendarPeriod    fiscalPeriodTmp;

        super(_assetAccrual);

        if (_calendarRecId)
        {
            calendarRecId = _calendarRecId;
        }

        // Cache table FiscalCalendarPeriod in temporary table
        fiscalPeriod.setTmp();
        insert_recordset fiscalPeriod(FiscalCalendar, FiscalCalendarYear, Name, Description, Month, StartDate, EndDate, Quarter, Type)
            select FiscalCalendar, FiscalCalendarYear, Name, Description, Month, StartDate, EndDate, Quarter, Type from fiscalPeriodTmp
                where fiscalPeriodTmp.FiscalCalendar == calendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPeriodsInYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the number of periods in a fiscal year.
    /// </summary>
    /// <param name="_date">
    ///     The date specified to determine the date in the fiscal year in the specified fiscal calendar.
    /// </param>
    /// <returns>
    ///     The number of the fiscal calendar periods in fiscal year.
    /// </returns>
    public int numberOfPeriodsInYear(AssetTransDate _date)
    {
        select count(RecId)
        from    fiscalPeriod
        where   fiscalPeriod.Type                 ==  FiscalPeriodType::Operating
            &&  fiscalPeriod.FiscalCalendarYear   ==  this.getFiscalCalendarYear(_date).RecId;

        return any2int(fiscalPeriod.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the number of periods for a supplied date range.
    /// </summary>
    /// <param name="_fromDate">
    ///     The from date.
    /// </param>
    /// <param name="_toDate">
    ///     The to date.
    /// </param>
    /// <returns>
    ///     Number of periods for a supplied date range.
    /// </returns>
    public int numOfPeriods(TransDate _fromDate, TransDate _toDate)
    {
        int ret;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                select count(RecId)
                from fiscalPeriod
                where   ((fiscalPeriod.StartDate >= _fromDate
                            && fiscalPeriod.StartDate <= _toDate)
                        || (fiscalPeriod.EndDate >= _fromDate
                            && fiscalPeriod.EndDate <= _toDate))
                        && fiscalPeriod.FiscalCalendar         == calendarRecId
                        && fiscalPeriod.Type                   == FiscalPeriodType::Operating;

                ret = any2int(fiscalPeriod.RecId);
                break;
            case AssetAccrual::Quarterly:
                ret = FiscalCalendarQuarter::numberOfQuartersBetweenDates(calendarRecId, _fromDate, _toDate);
                break;
            default:
                ret = 1;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number of the fiscal periods left in a year for a given asset transaction date.
    /// </summary>
    /// <param name="_date">
    ///     The date.
    /// </param>
    /// <returns>
    ///     Number of the fiscal periods.
    /// </returns>
    public int numOfPeriodsLeftInYear(TransDate _date)
    {
        AssetDepreciationTime   assetDepreciationTime;
        TransDate               startDate;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                startDate = this.startingPeriodDate(_date);
                TransDate firstDayOfPeriod = LedgerFiscalCalendar::findFirstDayOfPeriod(calendarRecId, _date);
                TransDate lastDayOfYear = LedgerFiscalCalendar::findLastDayOfYear(calendarRecId, _date);
                FiscalCalendarYearRecId fiscalCalendarYearRecId = this.getFiscalCalendarYear(_date).RecId;
                select count(RecId) from fiscalPeriod
                    where fiscalPeriod.Type                ==  FiscalPeriodType::Operating
                        && fiscalPeriod.StartDate          >=  firstDayOfPeriod
                        && fiscalPeriod.EndDate            <=  lastDayOfYear
                        && fiscalPeriod.FiscalCalendarYear ==  fiscalCalendarYearRecId
                        && fiscalPeriod.FiscalCalendar     ==  calendarRecId;
                assetDepreciationTime = any2real(fiscalPeriod.RecId);
                break;
            case AssetAccrual::Quarterly:
                assetDepreciationTime = FiscalCalendarQuarter::numberOfQuartersLeftInYear(calendarRecId, _date);
                break;
            default:
                assetDepreciationTime = 1;
                break;
        }
        return any2int(assetDepreciationTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number of the fiscal periods in a year for a given asset transaction date.
    /// </summary>
    /// <param name="_date">
    ///     The date.
    /// </param>
    /// <returns>
    ///     Number of the fiscal periods.
    /// </returns>
    public int periodOfYear(TransDate _date)
    {
        int ret;

        if (calendarRecId && _date)
        {
            TransDate firstDayOfYear = LedgerFiscalCalendar::findFirstDayOfYear(calendarRecId, _date);
            TransDate lastDayOfPeriod = LedgerFiscalCalendar::findLastDayOfPeriod(calendarRecId, _date);
            select count(RecId) from fiscalPeriod
                where fiscalPeriod.StartDate       >= firstDayOfYear
                    && fiscalPeriod.EndDate        <= lastDayOfPeriod
                    && fiscalPeriod.Type           == FiscalPeriodType::Operating
                    && fiscalPeriod.FiscalCalendar == calendarRecId;
            ret = any2int(fiscalPeriod.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDatePeriodFwd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the given number of years to the given date.
    /// </summary>
    /// <param name="_date">
    ///     The given date.
    /// </param>
    /// <param name="_periodsToMove">
    ///     Number of periods by which the given date is moved.The unit is years.
    /// </param>
    /// <returns>
    ///     Date after adding the number of years to the given date.
    /// </returns>
    public TransDate startDatePeriodFwd(TransDate _date, int _periodsToMove)
    {
        AssetDepreciationTime   assetDepreciationTime;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                return LedgerFiscalCalendar::findStartDatePeriodFwd(calendarRecId, _date, _periodsToMove);
            case assetAccrual::Quarterly:
                return FiscalCalendarQuarter::findStartDateQuarterFwd(calendarRecId, _date, _periodsToMove);
            default:
                TransDate openingStartDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, _date);
                TransDate closingPeriodStartDate = LedgerFiscalCalendar::findClosingPeriodStartDateByDate(calendarRecId, _date);
                FiscalCalendarYearRecId fiscalCalendarYearRecId = this.getFiscalCalendarYear(_date).RecId;
                select count(RecId) from fiscalPeriod
                    where fiscalPeriod.StartDate >= openingStartDate
                        && fiscalPeriod.EndDate <= closingPeriodStartDate
                        && fiscalPeriod.Type == FiscalPeriodType::Operating
                        && fiscalPeriod.FiscalCalendarYear == fiscalCalendarYearRecId;

                assetDepreciationTime = any2real(fiscalPeriod.RecId);
                _periodsToMove = any2int(_periodsToMove * assetDepreciationTime);
                return LedgerFiscalCalendar::findStartDatePeriodFwd(calendarRecId, _date, _periodsToMove);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the starting date of the fiscal period.
    /// </summary>
    /// <param name="_date">
    ///     The date.
    /// </param>
    /// <returns>
    ///     The starting date of the fiscal period.
    /// </returns>
    public TransDate startingPeriodDate(TransDate _date)
    {
        select firstOnly StartDate from fiscalPeriod
        where   fiscalPeriod.StartDate                  <= _date
            &&  fiscalPeriod.EndDate                    >= _date;

        return fiscalPeriod.StartDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>