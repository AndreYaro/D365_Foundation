<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEcoResProductReleaseManager_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Extension class for the class <c>EcoResProductReleaseManager</c>.
/// </summary>
[ExtensionOf(classStr(EcoResProductReleaseManager))]
public final class RetailEcoResProductReleaseManager_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseToLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases the product to a specific legal entity.
    /// </summary>
    /// <param name="_isCreation">
    ///    true if the product is being created; otherwise, false.
    /// </param>
    /// <param name="_purchTaxItemGroupId">
    ///    The purchase item tax group id.
    /// </param>
    /// <param name="_salesTaxItemGroupId">
    ///    The sales item tax group id.
    /// </param>
    protected void releaseToLegalEntity(boolean _isCreation, TaxItemGroup _purchTaxItemGroupId, TaxItemGroup _salesTaxItemGroupId)
    {
        next releaseToLegalEntity(_isCreation, _purchTaxItemGroupId, _salesTaxItemGroupId);

        if (isRetailEnabledAndInUse && this.isReleaseable())
        {
            if(_purchTaxItemGroupId && !TaxItemGroupHeading::find(_purchTaxItemGroupId).TaxItemGroup)
            {
                return;
            }

            if(_salesTaxItemGroupId && !TaxItemGroupHeading::find(_salesTaxItemGroupId).TaxItemGroup)
            {
                return;
            }
            this.setAndSaveRetailProductProperties(_purchTaxItemGroupId, _salesTaxItemGroupId);

            // Copy category info code to new released product getting created
            RetailProductUpdater retailProductUpdater = RetailProductUpdater::construct();
            retailProductUpdater.copyCategoryInfoCodesToReleasedProduct(ecoResProduct.RecId, legalEntity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAndSaveRetailProductProperties</Name>
				<Source><![CDATA[
    private void setAndSaveRetailProductProperties(TaxItemGroup _purchTaxItemGroup, TaxItemGroup _salesTaxItemGroup)
    {
        retailProductPropertyManager = RetailProductPropertyManager::retrieveExisting(ecoResProduct, legalEntity);

        this.setRetailProductProperties(_purchTaxItemGroup, _salesTaxItemGroup);
    
        retailProductPropertyManager.saveRetailProductProperties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailProductProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the properties on the <c>RetailProductPropertyManager</c>.
    /// </summary>
    /// <param name = "_purchTaxItemGroup">A <c>TaxItemGroup</c> value for the purchase tax item group.</param>
    /// <param name = "_salesTaxItemGroup">A <c>TaxItemGroup</c> value for the sales tax item group.</param>
    [Hookable(true)]
    protected void setRetailProductProperties(TaxItemGroup _purchTaxItemGroup, TaxItemGroup _salesTaxItemGroup)
    {
        // <GEERU>
        #ISOCountryRegionCodes
        boolean isCountryRegionRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (attributesGlobalLookup)
        {
            retailProductPropertyManager.parmGroupProductDimension(attributesGlobalLookup.GroupProductDimension);

            if (!retailProductPropertyManager.parmGroupStorageDimension())
            {
                retailProductPropertyManager.parmGroupStorageDimension(attributesGlobalLookup.GroupStorageDimension);
            }

            if (!retailProductPropertyManager.parmGroupTrackingDimension())
            {
                retailProductPropertyManager.parmGroupTrackingDimension(attributesGlobalLookup.GroupTrackingDimension);
            }
            
            retailProductPropertyManager.parmVariantColorGroup(attributesGlobalLookup.VariantColorGroup);
            retailProductPropertyManager.parmVariantSizeGroup(attributesGlobalLookup.VariantSizeGroup);
            retailProductPropertyManager.parmVariantStyleGroup(attributesGlobalLookup.VariantStyleGroup);
        }

        if (attributesLegalEntityLookup)
        {
            attributesLegalEntityLookup.checkInvalidFieldAccess(false);

            retailProductPropertyManager.parmBarcodeSetup(attributesLegalEntityLookup.BarCodeSetup);

            retailProductPropertyManager.parmGroupCounting(attributesLegalEntityLookup.GroupCounting);
            retailProductPropertyManager.parmGroupCoverage(attributesLegalEntityLookup.GroupCoverage);
            retailProductPropertyManager.parmGroupInventoryModel(attributesLegalEntityLookup.GroupInventoryModel);
            retailProductPropertyManager.parmGroupItemGroup(attributesLegalEntityLookup.GroupItemGroup);
            retailProductPropertyManager.parmItemSalesTaxGroupPurch(_purchTaxItemGroup == '' ? attributesLegalEntityLookup.ItemSalesTaxGroupPurch : _purchTaxItemGroup);
            retailProductPropertyManager.parmItemSalesTaxGroupSales(_salesTaxItemGroup == '' ? attributesLegalEntityLookup.ItemSalesTaxGroupSales : _salesTaxItemGroup);
            retailProductPropertyManager.parmReportItemLabel(attributesLegalEntityLookup.ReportItemLabel);
            retailProductPropertyManager.parmReportShelfLabel(attributesLegalEntityLookup.ReportShelfLabel);

            retailProductPropertyManager.parmUnitBOM(unitBOM.Symbol);

            if (this.validateUnitOfMeasure(unitBOM, unitInvent, false))
            {
                retailProductPropertyManager.parmUnitInvent(unitInvent.Symbol);
            }

            retailProductPropertyManager.parmUnitPrice(attributesLegalEntityLookup.UnitPrice);
            retailProductPropertyManager.parmUnitPriceSales(attributesLegalEntityLookup.UnitPriceSales);

            if (this.validateUnitOfMeasure(unitInvent, unitSales))
            {
                retailProductPropertyManager.parmUnitSales(unitSales.Symbol);
            }

            retailProductPropertyManager.parmUnitPurchase(unitPurchase.Symbol);
            retailProductPropertyManager.parmSiteId(attributesLegalEntityLookup.SiteId);
            retailProductPropertyManager.parmWarehouseInvent(attributesLegalEntityLookup.WarehouseInvent);
            retailProductPropertyManager.parmWarehousePurch(attributesLegalEntityLookup.WarehousePurch);
            retailProductPropertyManager.parmWarehouseSales(attributesLegalEntityLookup.WarehouseSales);

            retailProductPropertyManager.parmPurchaseOverdeliveryPct(attributesLegalEntityLookup.PurchaseOverdeliveryPct);
            retailProductPropertyManager.parmPurchaseUnderdeliveryPct(attributesLegalEntityLookup.PurchaseUnderdeliveryPct);
            retailProductPropertyManager.parmSalesOverdeliveryPct(attributesLegalEntityLookup.SalesOverdeliveryPct);
            retailProductPropertyManager.parmSalesUnderdeliveryPct(attributesLegalEntityLookup.SalesUnderdeliveryPct);
            retailProductPropertyManager.parmInventoryOverdeliveryPct(attributesLegalEntityLookup.InventoryOverdeliveryPct);
            retailProductPropertyManager.parmInventoryUnderdeliveryPct(attributesLegalEntityLookup.InventoryUnderdeliveryPct);
            retailProductPropertyManager.parmItemPurchModel(attributesLegalEntityLookup.PurchModel);
            retailProductPropertyManager.parmItemCostModel(attributesLegalEntityLookup.CostModel);
            retailProductPropertyManager.parmItemBuyerGroupId(attributesLegalEntityLookup.ItemBuyerGroupId);

            // Purchase
            retailProductPropertyManager.parmPurchaseInterCompanyBlocked(attributesLegalEntityLookup.PurchaseInterCompanyBlocked);
            retailProductPropertyManager.parmItemPriceToleranceGroupId(attributesLegalEntityLookup.ItemPriceToleranceGroupId);
            retailProductPropertyManager.parmPrimaryVendorId(attributesLegalEntityLookup.PrimaryVendorId);
            retailProductPropertyManager.parmPurchasePriceDate(attributesLegalEntityLookup.PurchasePriceDate);
            retailProductPropertyManager.parmPurchasePrice(attributesLegalEntityLookup.PurchasePrice);
            retailProductPropertyManager.parmItemBuyerGroupId(attributesLegalEntityLookup.ItemBuyerGroupId);
            retailProductPropertyManager.parmPurchasePriceQty(attributesLegalEntityLookup.PurchasePriceQty);
            retailProductPropertyManager.parmPurchaseMarkupGroupId(attributesLegalEntityLookup.PurchaseMarkupGroupId);
            retailProductPropertyManager.parmPurchaseAllocateMarkup(attributesLegalEntityLookup.PurchaseAllocateMarkup);
            retailProductPropertyManager.parmPurchaseLineDisc(attributesLegalEntityLookup.PurchaseLineDisc);
            retailProductPropertyManager.parmPurchaseMultiLineDisc(attributesLegalEntityLookup.PurchaseMultiLineDisc);
            retailProductPropertyManager.parmPurchaseEndDisc(attributesLegalEntityLookup.PurchaseEndDisc);
            retailProductPropertyManager.parmPurchaseSuppItemGroupId(attributesLegalEntityLookup.PurchaseSuppItemGroupId);
            retailProductPropertyManager.parmPurchasePDSPricingPrecision(attributesLegalEntityLookup.PurchasePDSPricingPrecision);
            retailProductPropertyManager.parmPdsVendorCheckItem(attributesLegalEntityLookup.PdsVendorCheckItem);

            // MCR
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                // purchase
                retailProductPropertyManager.parmItemVendRebateGroupId(attributesLegalEntityLookup.ItemVendRebateGroupId);
                
                // sales
                retailProductPropertyManager.parmSalesAllowPriceAdjust(attributesLegalEntityLookup.SalesAllowPriceAdjust);
                retailProductPropertyManager.parmSalesInstallmentEligible(attributesLegalEntityLookup.SalesInstallmentEligible);
                retailProductPropertyManager.parmSalesFTCExempt(attributesLegalEntityLookup.SalesFTCExempt);
                retailProductPropertyManager.parmSalesContinuityScheduleId(attributesLegalEntityLookup.SalesContinuityScheduleId);
                retailProductPropertyManager.parmSalesStartDate(attributesLegalEntityLookup.SalesStartDate);
                retailProductPropertyManager.parmSalesEndDate(attributesLegalEntityLookup.SalesEndDate);
            }
            
            // Sales
            retailProductPropertyManager.parmSalesInterCompanyBlocked(attributesLegalEntityLookup.SalesInterCompanyBlocked);
            retailProductPropertyManager.parmSalesCommisionGroupId(attributesLegalEntityLookup.SalesCommisionGroupId);
            retailProductPropertyManager.parmSalesPriceModel(attributesLegalEntityLookup.SalesPriceModel);
            retailProductPropertyManager.parmSalesBasePriceModel(attributesLegalEntityLookup.SalesBasePriceModel);
            retailProductPropertyManager.parmSalesContributionRatio(attributesLegalEntityLookup.SalesContributionRatio);
            retailProductPropertyManager.parmSalesPercentMarkup(attributesLegalEntityLookup.SalesPercentMarkup);
            retailProductPropertyManager.parmSalesPriceDate(attributesLegalEntityLookup.SalesPriceDate);
            retailProductPropertyManager.parmSalesPrice(attributesLegalEntityLookup.SalesPrice);
            retailProductPropertyManager.parmSalesPriceMarkup(attributesLegalEntityLookup.SalesPriceMarkup);
            retailProductPropertyManager.parmSalesPriceMarkupQuantity(attributesLegalEntityLookup.SalesPriceMarkupQuantity);
            retailProductPropertyManager.parmSalesMarkupGroupId(attributesLegalEntityLookup.SalesMarkupGroupId);
            retailProductPropertyManager.parmSalesAllocateMarkup(attributesLegalEntityLookup.SalesAllocateMarkup);
            retailProductPropertyManager.parmSalesLineDiscount(attributesLegalEntityLookup.SalesLineDiscount);
            retailProductPropertyManager.parmSalesMultiLineDiscount(attributesLegalEntityLookup.SalesMultiLineDiscount);
            retailProductPropertyManager.parmSalesTotalDiscount(attributesLegalEntityLookup.SalesTotalDiscount);
            retailProductPropertyManager.parmSalesSuppItemGroupId(attributesLegalEntityLookup.SalesSuppItemGroupId);
            retailProductPropertyManager.parmSalesUseAltItemId(attributesLegalEntityLookup.SalesUseAltItemId);
            retailProductPropertyManager.parmSalesAltItemId(attributesLegalEntityLookup.SalesAltItemId);
            retailProductPropertyManager.parmSalesAltConfigId(attributesLegalEntityLookup.SalesAltConfigId);
            retailProductPropertyManager.parmSalesAltInventSizeId(attributesLegalEntityLookup.SalesAltInventSizeId);
            retailProductPropertyManager.parmSalesAltInventColorId(attributesLegalEntityLookup.SalesAltInventColorId);
            retailProductPropertyManager.parmSalesAltInventStyleId(attributesLegalEntityLookup.SalesAltInventStyleId);
            retailProductPropertyManager.parmSalesAltInventVersionId(attributesLegalEntityLookup.SalesAltInventVersionId);
            retailProductPropertyManager.parmSalesPDSPricingPrecision(attributesLegalEntityLookup.SalesPDSPricingPrecision);
            retailProductPropertyManager.parmSalesPdsItemRebateGroupId(attributesLegalEntityLookup.SalesPdsItemRebateGroupId);
            retailProductPropertyManager.parmSalesPdsFreightAllocationGroupId(attributesLegalEntityLookup.SalesPdsFreightAllocationGroupId);
            retailProductPropertyManager.parmSalesRetailInventoryAvailabilityBuffer(attributesLegalEntityLookup.SalesRetailInventoryAvailabilityBuffer);
            retailProductPropertyManager.parmSalesRetailInventoryAvailabilityLevelProfile(attributesLegalEntityLookup.SalesRetailInventoryAvailabilityLevelProfile);

            // Inventory
            retailProductPropertyManager.parmNetWeight(attributesLegalEntityLookup.NetWeight);
            retailProductPropertyManager.parmTaraWeight(attributesLegalEntityLookup.TaraWeight);
            retailProductPropertyManager.parmGrossDepth(attributesLegalEntityLookup.GrossDepth);
            retailProductPropertyManager.parmGrossWidth(attributesLegalEntityLookup.GrossWidth);
            retailProductPropertyManager.parmGrossHeight(attributesLegalEntityLookup.GrossHeight);
            retailProductPropertyManager.parmUnitVolume(attributesLegalEntityLookup.UnitVolume);
            retailProductPropertyManager.parmBatchNumGroupId(attributesLegalEntityLookup.BatchNumGroupId);
            retailProductPropertyManager.parmSerialNumGroupId(attributesLegalEntityLookup.SerialNumGroupId);
            retailProductPropertyManager.parmWMSArrivalHandlingTime(attributesLegalEntityLookup.WMSArrivalHandlingTime);
            retailProductPropertyManager.parmSortCode(attributesLegalEntityLookup.SortCode);
            retailProductPropertyManager.parmPackagingGroupId(attributesLegalEntityLookup.PackagingGroupId);
            retailProductPropertyManager.parmTaxPackagingQty(attributesLegalEntityLookup.TaxPackagingQty);

            // Cost
            retailProductPropertyManager.parmCostGroupId(attributesLegalEntityLookup.CostGroupId);
            retailProductPropertyManager.parmInventoryPriceDate(attributesLegalEntityLookup.InventoryPriceDate);
            retailProductPropertyManager.parmInventoryPrice(attributesLegalEntityLookup.InventoryPrice);
            retailProductPropertyManager.parmInventoryPriceUnit(attributesLegalEntityLookup.InventoryPriceUnit);
            retailProductPropertyManager.parmInventoryMarkup(attributesLegalEntityLookup.InventoryMarkup);
            retailProductPropertyManager.parmInventoryPriceQty(attributesLegalEntityLookup.InventoryPriceQty);
            retailProductPropertyManager.parmInventoryAllocateMarkup(attributesLegalEntityLookup.InventoryAllocateMarkup);
            retailProductPropertyManager.parmABCValue(attributesLegalEntityLookup.ABCValue);
            retailProductPropertyManager.parmABCContributionMargin(attributesLegalEntityLookup.ABCContributionMargin);
            retailProductPropertyManager.parmABCRevenue(attributesLegalEntityLookup.ABCRevenue);
            retailProductPropertyManager.parmABCTieUp(attributesLegalEntityLookup.ABCTieUp);

            // Retail
            retailProductPropertyManager.parmBarCodeUseEANStandard(attributesLegalEntityLookup.RetailBarCodeUseEANStandard);
            
            retailProductPropertyManager.parmPOSAllowNegativeQuantity(attributesLegalEntityLookup.RetailPOSAllowNegativeQuantity);
            retailProductPropertyManager.parmPOSDisallowDiscount(attributesLegalEntityLookup.RetailPOSDisallowDiscount);
            retailProductPropertyManager.parmPOSDisallowManualDiscount(attributesLegalEntityLookup.RetailPOSDisallowManualDiscount);
            retailProductPropertyManager.parmPOSIsScaleItem(attributesLegalEntityLookup.RetailPOSIsScaleItem);
            retailProductPropertyManager.parmPOSIsZeroPriceValid(attributesLegalEntityLookup.RetailPOSIsZeroPriceValid);
            retailProductPropertyManager.parmPOSKeyingInPrice(attributesLegalEntityLookup.RetailPOSKeyingInPrice);
            retailProductPropertyManager.parmPOSKeyingInQuantity(attributesLegalEntityLookup.RetailPOSKeyingInQuantity);
            retailProductPropertyManager.parmPOSMustKeyInComment(attributesLegalEntityLookup.RetailPOSMustKeyInComment);

            retailProductPropertyManager.parmBlockedAtRegister(attributesLegalEntityLookup.RetailBlockedAtRegister);
            retailProductPropertyManager.parmDateBlocked(attributesLegalEntityLookup.RetailDateBlocked);
            retailProductPropertyManager.parmDateToBeBlocked(attributesLegalEntityLookup.RetailDateToBeBlocked);
            retailProductPropertyManager.parmDateToActivateItem(attributesLegalEntityLookup.RetailDateToActivateItem);

            if (this.validateUnitOfMeasure(unitBaseConversion, unitSales))
            {
                retailProductPropertyManager.parmUnitBaseComparison(unitBaseConversion.Symbol);
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                retailProductPropertyManager.parmUOMSeqGroupId(attributesLegalEntityLookup.UOMSeqGroupId);
                retailProductPropertyManager.parmReservationHierarchy(attributesLegalEntityLookup.ReservationHierarchy);
            }

            retailProductPropertyManager.parmPrintVariantsShelfLabels(attributesLegalEntityLookup.RetailPrintVariantsShelfLabels);
            retailProductPropertyManager.parmSeasonCode(attributesLegalEntityLookup.RetailSeasonCode);
            retailProductPropertyManager.parmLifeFrom(attributesLegalEntityLookup.RetailLifeFrom);
            retailProductPropertyManager.parmLifeTo(attributesLegalEntityLookup.RetailLifeTo);

            // <GEERU>
            if (isCountryRegionRU)
            {
                retailProductPropertyManager.parmLabelAttribute1(attributesLegalEntityLookup.LabelAttribute1);
                retailProductPropertyManager.parmLabelAttribute2(attributesLegalEntityLookup.LabelAttribute2);
                retailProductPropertyManager.parmLabelAttribute3(attributesLegalEntityLookup.LabelAttribute3);
                retailProductPropertyManager.parmLabelAttribute4(attributesLegalEntityLookup.LabelAttribute4);
                retailProductPropertyManager.parmLabelAttribute5(attributesLegalEntityLookup.LabelAttribute5);
                retailProductPropertyManager.parmProhibitReturn_RU(attributesLegalEntityLookup.RetailProhibitReturn_RU);
            }
            // </GEERU>
        }
        else
        {
            if(_purchTaxItemGroup)
            {
                retailProductPropertyManager.parmItemSalesTaxGroupPurch(_purchTaxItemGroup);
            }
            if(_salesTaxItemGroup)
            {
                retailProductPropertyManager.parmItemSalesTaxGroupSales(_salesTaxItemGroup);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>