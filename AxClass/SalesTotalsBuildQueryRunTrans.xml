<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotalsBuildQueryRunTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTotalsBuildQueryRunTrans</c> class provides <c>QueryRun</c> objects to be used by the
/// <c>SalesTotals_Trans</c> class and the <c>SalesCalcTax_Trans</c> class for iterating
/// <c>SalesLine</c> records.
/// </summary>
class SalesTotalsBuildQueryRunTrans extends TradeTotalsBuildQueryRun implements TradeTotalsIBuildQueryRun
{
    QueryRun   salesLineQueryRun;
    QueryBuildDataSource    salesLineDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLineQueryRun</Name>
				<Source><![CDATA[
        public QueryRun buildLineQueryRun()
    {
        if (!salesLineQueryRun)
        {
            salesLineQueryRun = this.createSalesLineQueryRun();
        }

        return salesLineQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLineQueryRun</Name>
				<Source><![CDATA[
        protected QueryRun createSalesLineQueryRun()
    {
        QueryRun queryRun = new QueryRun(queryStr(SalesLine));
        QueryBuildDataSource queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(SalesLine));
        queryBuildDataSource.rangeField(fieldNum(SalesLine, SalesId)).value(queryValue(this.parmSalesTable().SalesId));

        SalesTotalsTransContract    transContract = this.parmContract();

        if (transContract.parmCalcEstimate() &&  CustParameters::find().CreditMaxCheck == TypeOfCreditmaxCheck::BalanceDelivered)
        {
            QueryBuildDataSource qbdsPackingSlip = queryBuildDataSource.addDataSource(tableNum(CustPackingSlipTrans));
            qbdsPackingSlip.joinMode(JoinMode::ExistsJoin);
            qbdsPackingSlip.addLink(fieldNum(SalesLine, InventTransId), fieldNum(CustPackingSlipTrans, InventTransId));
            qbdsPackingSlip.addRange(fieldNum(CustPackingSlipTrans, Qty)).value(SysQuery::valueNot('0'));
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainLineDataSourceNumber</Name>
				<Source><![CDATA[
        public DataSourceNumber   mainLineDataSourceNumber()
    {
        if (!salesLineDataSource)
        {
            salesLineDataSource = this.buildLineQueryRun().query().dataSourceTable(tableNum(SalesLine));
        }

        return salesLineDataSource.id();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
        protected SalesTable parmSalesTable()
    {
        return this.parmSalesTransContract().parmSalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTransContract</Name>
				<Source><![CDATA[
        protected SalesTotalsTransContract parmSalesTransContract()
    {
        return this.parmContract() as SalesTotalsTransContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static SalesTotalsBuildQueryRunTrans construct()
    {
        return new SalesTotalsBuildQueryRunTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTotalsBuildQueryRunTrans</c> class.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>Salestable</c> record that is used to filter the <c>SalesLine</c> records.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesTotalsBuildQueryRunTrans</c> class.
    /// </returns>
    public static SalesTotalsBuildQueryRunTrans newFromSalesTable(
        SalesTable  _salesTable)
    {
        SalesTotalsBuildQueryRunTrans salesTotalsBuildQueryRunTrans = SalesTotalsBuildQueryRunTrans::newFromSalesTransContract(
            SalesTotalsTransContract::newFromSalesTable(_salesTable));

        return salesTotalsBuildQueryRunTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTransContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>SalesTotalsBuildQueryRunTrans</c> class.
    /// </summary>
    /// <param name="_contract">
    /// The <c>SalesTotalsTransContract</c> object that is used to filter the <c>SalesLine</c> records.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesTotalsBuildQueryRunTrans</c> class.
    /// </returns>
    public static SalesTotalsBuildQueryRunTrans newFromSalesTransContract(
        SalesTotalsTransContract    _contract)
    {
        SalesTotalsBuildQueryRunTrans salesTotalsBuildQueryRunTrans = SalesTotalsBuildQueryRunTrans::construct();

        salesTotalsBuildQueryRunTrans.parmContract(_contract);

        return salesTotalsBuildQueryRunTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>