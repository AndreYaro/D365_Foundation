<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XppSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class XppSource
{
    #define.defaultIndentColumns(4)
    #xppTexts

    int     indentLevel;
    Source  source;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginBlock</Name>
				<Source><![CDATA[
    private void beginBlock()
    {
        source += this.indent()+'{\n';
        indentLevel += #defaultIndentColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>block</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source block(Source _statement = '')
    {
        source += this.indent() + strFmt('{');
        source += '\n';
        source += this.indent() + this.indent() + strFmt('%1',_statement);
        source += '\n';
        source += this.indent() + strFmt('}');
        //source += '\n';

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>classHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source classHeader()
    {
        UserInfo    tUserInfo;

        #Retail
        ;
        select * from tUserInfo
            where tUserInfo.id == curuserId();

        source += strfmt("// ------------------------------------------------(c) %1 LAST", year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        source += #CharNewLine;
        source += "// System: Microsoft Dynamics AX for Retail Headquarters)";
        source += #CharNewLine;
        source += "// Purpose:";
        source += #CharNewLine;
        source += "// Description:";
        source += #CharNewLine;
        source += "// Extern:";
        source += #CharNewLine;
        source += "// Creator:         ";
        source += tUserInfo.Name;
        source += strfmt(" (%1)", tUserInfo.id );
        source += #CharNewLine;
        source += "// Others:";
        source += #CharNewLine;
        source += "// Creation date:   ";
        source += date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2,2,2,2,2, DateFlags::None);
        source += #CharNewLine;
        source += "// -----------------------------------------------------------------";
        source += #CharNewLine;
        source += "// -----------------------------------------------------------------";
        source += #CharNewLine;

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source comment()
    {
    ;
        source += strfmt("// #! INCIDENT !#.LAST.%1.%2:", date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123,2,2,2,2,2, DateFlags::None), curuserId());

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source constructMethod(
        className    className
        )
    {
        className    = strLRTrim(className);
        className    = strUpr(subStr(className,1,1))+subStr(className,2,strLen(className));

        source += strFmt('public static %1 construct()',className);
        source += '\n';
        this.beginBlock();
        source += this.indent();
        source += strFmt('return new %1();',className);
        source += '\n';
        this.endBlock();

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doWhile</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source doWhile(Source _condition = '',
                 Source _loopStatement = '')
    {
        source += strFmt('do',_condition);
        source += '\n';

        this.block(_loopStatement);
        source += '\n';
        source +=  this.indent() + strFmt('while (%1);',_condition);

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source editMethod(
        extendedDataTypeName    typeName,
        tableName               tableName,
        SysElementName          name
        )
    {
        typeName    = strLRTrim(typeName);
        name        = strLRTrim(name);

        source += strFmt('public edit %1 edit%2(',typeName,name)+#newLine;
        indentLevel = 4;
        source += this.indent()+#boolean+' _set,'+#newline;
        if (tableName)
        {
            source += this.indent()+strFmt('%1 _%1,',tableName)+#newline;
        }
        source += this.indent()+strFmt('%1 _%2',typeName,name)+#newline;
        source += this.indent()+')'+#newline;
        indentLevel = 0;
        this.beginBlock();
        source += this.indent();
        this.if('_set',strFmt('%1 = _%1;',name));
        source += #newline;
        source += this.indent()+#return+' '+name+#semicolon;
        source += #newline;
        this.endBlock();

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMethodWithClass</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source editMethodWithClass(
        extendedDataTypeName    typeName,
        SysElementName          name,
        className               className,      // Could be empty
        SysElementName          methodname      // Could be empty
        )
    {
        str ifBlock;

        typeName    = strLRTrim(typeName);
        name        = strLRTrim(name);
        className   = strLRTrim(className);
        methodname  = strLRTrim(methodname);

        source += strFmt('public edit %1 edit%2(boolean _set, %1 _%2)',typeName,name);
        source += '\n';
        source += '{';
        source += '\n';
        source += this.indent();
        if (className)
        {
            if (methodname)
            {
                ifBlock = strFmt('%1.%2(_%3);',className,methodname,name);
            }
            else
            {
                ifBlock = strFmt('%1.%2(_%2);',className,name);
            }
        }
        else
        {
            ifBlock = strFmt('%1 = _%1;',name);
        }

        this.if('_set', ifBlock);

        source += '\n';
        source += this.indent();
        if (className)
        {
            if (methodname)
            {
                source += strFmt('return %1.%2();',className,methodname);
            }
            else
            {
                source += strFmt('return %1.%2();',className,name);
            }
        }
        else
        {
            source += strFmt('return %1;',name);
        }

        source += '\n';
        source += '}';

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elseBlock</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source elseBlock()
    {
        source += 'else\n';

        this.block();

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endBlock</Name>
				<Source><![CDATA[
    private void endBlock()
    {
        if (indentLevel >= #defaultIndentColumns)
            indentLevel -= #defaultIndentColumns;
        source += this.indent()+'}';
    }

]]></Source>
			</Method>
			<Method>
				<Name>endLine</Name>
				<Source><![CDATA[
    private void endLine()
    {
        source += '\n';
    }

]]></Source>
			</Method>
			<Method>
				<Name>for</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source for (Source _initialization = '',
               Source _condition = '',
               Source _update = '',
               Source _loopStatement = '')
    {
        source += strFmt('for (%1;%2;%3)',_initialization,_condition,_update);
        source += '\n';

        this.block(_loopStatement);

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>functionHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source functionHeader()
    {
        #Retail
        ;

        source += strfmt("// ------------------------------------------------(c) %1 Last", year(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        source += #CharNewLine;
        source += "// System: Microsoft Dynamics AX for Retail Headquarters";
        source += #CharNewLine;
        source += "// Description:";
        source += #CharNewLine;
        source += "// Parameters:      None";
        source += #CharNewLine;
        source += "// Return value:    None";
        source += #CharNewLine;
        source += "// Exceptions:      None";
        source += #CharNewLine;
        source += "// Pre-conditions:  None";
        source += #CharNewLine;
        source += "// Post-conditions: None";
        source += #CharNewLine;
        source += "// Creator:         ";
        source += #CharNewLine;
        source += "// Creation date:   ";
        source += date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, 2,2,2,2,2, DateFlags::None);
        source += #CharNewLine;
        source += "// -----------------------------------------------------------------";
        source += #CharNewLine;
        source += "// -----------------------------------------------------------------";
        source += #CharNewLine;

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerLine</Name>
				<Source><![CDATA[
    private void headerLine(str _headerstr)
    {
        source += strFmt(_headerStr+'\n');
    }

]]></Source>
			</Method>
			<Method>
				<Name>if</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source if (Source _condition = '',
              Source _conditionalStatement = '')
    {
        source += strFmt('if (%1)',_condition);
        source += '\n';

        this.block(_conditionalStatement);

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ifElse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source ifElse(Source _condition = '',
                  Source _ifStatement = '',
                  Source _elseStatement = '')
    {
        this.if(_condition,_ifStatement);
        source += '\n';

        source += this.indent()+strFmt('else');
        source += '\n';

        this.block(_elseStatement);

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ifElseIfElse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source ifElseIfElse(Source _ifCondition = '',
                        Source _ifStatement = '',
                        Source _elseIfCondition = '',
                        Source _elseIfStatement = '',
                        Source _elseStatement = '')
    {
        this.if(_ifCondition,_ifStatement);

        source += strFmt('else');
        source += '\n';

        source += this.indent();
        this.if(_elseIfCondition,_elseIfStatement);

        source += strFmt('else');
        source += '\n';
        this.block(_elseStatement);

        source += this.indent();

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    SourceLine indent() {return strRep(' ',indentLevel);}

]]></Source>
			</Method>
			<Method>
				<Name>mainMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source mainMethod()
    {
        this.newSource();
        this.headerLine('public static void main(Args _args)');
        this.beginBlock();
        this.endLine();
        this.endBlock();
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void new(int _indentLevel = 0)
    {
        indentLevel = _indentLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSource</Name>
				<Source><![CDATA[
    private void newSource()
    {
        source = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source parmMethod(
        extendedDataTypeName    typeName,
        SysElementName          name
        )
    {
        SysElementName     parmName;

        typeName    = strLRTrim(typeName);
        name        = strLRTrim(name);

        typeName    = strUpr(subStr(typeName,1,1))+subStr(typeName,2,strLen(typeName));
        name        = strLwr(subStr(name,1,1))+subStr(name,2,strLen(name));
        parmName    = strUpr(subStr(name,1,1))+subStr(name,2,strLen(name));

        source += strFmt('public %1 parm%2(%1 _%3 = %3)',typeName,parmName,name);
        source += '\n';
        this.beginBlock();
        source += this.indent();
        source += strFmt('%1 = _%1;',name);
        source += '\n';
        source += '\n';
        source += this.indent();
        source += strFmt('return %1;',name);
        source += '\n';
        this.endBlock();

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>switch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source switch (Source _condition = '')
    {
        source += strFmt('switch (%1)',_condition);
        source += '\n';
        this.beginBlock();

        source += this.indent() + strFmt('case :') + '\n';

        indentLevel += #defaultIndentColumns;
        source += this.indent() + strFmt('break;') + '\n';
        source += '\n';

        indentLevel -= #defaultIndentColumns;
        source += this.indent() + strFmt('case :') + '\n';

        indentLevel += #defaultIndentColumns;
        source += this.indent() + strFmt('break;') + '\n';
        source += '\n';

        indentLevel -= #defaultIndentColumns;

        this.endBlock();

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCatch</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source tryCatch(Source _tryStatement = '',
                    Source _catchCondition = '',
                    Source _catchStatement = '')
    {
        source += strFmt('try');
        source += '\n';

        this.block(_tryStatement);
        source += '\n';

        if (_catchCondition)
        {
            source += this.indent() + strFmt('catch (%1)',_catchCondition);
        }
        else
        {
            source += this.indent() + 'catch';
        }
        source += '\n';

        this.block(_catchStatement);

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>while</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source while (Source _condition = '',
                 Source _loopStatement = '')
    {
        source += strFmt('while (%1)',_condition);
        source += '\n';

        this.block(_loopStatement);

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whileSelect</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Source whileSelect(Source _data = '',
                       Source _condition = '',
                       Source _loopStatement = '')
    {
        source += strFmt('while select %1',_data);
        source += '\n';
    //    source += this.indent() + this.indent() + strFmt('order by ');
    //    source += '\n';
        source += this.indent() + this.indent() + strFmt('where %1',_condition);
        source += '\n';

        this.block(_loopStatement);

        source += this.indent();

        return source;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>