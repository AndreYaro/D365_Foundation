<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ServiceTaxPOTInquiryBase_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the base class in the inheritance  heirarchy for the reverse and reclaim functionality
/// and holds the common business logic shaed across other classes in the chain.
/// The batch functionality flows into the inheritance chain thru this abstract class.
/// </summary>
abstract class ServiceTaxPOTInquiryBase_IN extends RunBaseBatch
{
    PeriodUnit                              period;
    Integer                                 length;
    VendAccount                             vendAcc;
    QueryRun                                queryRun;
    Query                                   query;
    QueryBuildDataSource                    qbdVendTrans_IN;
    QueryBuildDataSource                    qdbVendTrans;
    DialogField                             dlgPeriod;
    DialogField                             dlgVendAcc;
    DialogField                             dlgLength;
    DialogGroup                             dlgGrpSelect;
    DialogGroup                             dlgGrpPeriod;
    TransDate                               reverseReclaimDate;
    VendTrans_W                             vendTransServiceTaxExtension;
    Voucher                                 reversalVoucher;
    TmpTaxWorkTrans                         taxWorkTrans;
    LedgerVoucherTransObject                ledgerVoucherTransObject;
    CurrencyCode                            currencyCode;
    VendTrans                               vendTrans;
    LedgerVoucher                           ledgerVoucher;
    LedgerVoucherObject                     ledgerVoucherObject;
    LedgerPostingController                 ledgerPostingController;
    NumberSeq                               numberSeq;
    RecId                                   headerRecId, invoiceRecId;
    CurrencyExchangeHelper                  exchangeRateHelper;
    boolean                                 isBatchMode;
    TmpVendTransServiceTaxExtLinkTable_IN   tmpVendTransServiceTaxExtLinkTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns True if batchable.
    /// </summary>
    /// <returns>
    /// True if batchable.
    /// </returns>
    public boolean canGoBatch()
    {
        return (isBatchMode == true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overiden method that creates the RunBase dialog.
    /// </summary>
    /// <returns>
    /// The dialog object.
    /// </returns>

    public Object dialog()
    {
        Object object = super();
        Args   args;

        if (this is ServiceTaxPOTInquiry_Reversal_IN)// Reversal
        {
            dlgGrpPeriod = object.addGroup('');
            dlgGrpPeriod.caption("@SYS40858");
            object.addGroup("@SYS40858", dlgGrpSelect);
            dlgPeriod = object.addField(enumStr(PeriodUnit));
            dlgPeriod.helpText("@SYS4082385");
            dlgPeriod.value(period);
            dlgLength = object.addField(extendedTypeStr(Periods));
            dlgLength.label("@SYS23075");
            dlgLength.helpText("@SYS4082386");
            dlgLength.value(length);
        }
        else if (this is ServiceTaxPOTInquiry_Reclaim_IN)// Reclaim
        {
            return object;
        }
        else
        {
            args = new Args();
            args.caller(this);
            args.name(formstr(VendServiceTaxPOTReverseReclaim_IN));
            object = classFactory.formRunClass(args);
            object.init();
        }

        return object;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// To create Ledger Voucher.
    /// </summary>
    /// <returns>
    ///  Returns instance of ledger voucher
    /// </returns>
    public LedgerVoucher initLedgerVoucher()
    {
        NumberSequenceReference numberSequenceReference = LedgerParameters::numRefLedgerReversalVoucher();

        ttsBegin;

        if (!numberSequenceReference)
        {
            throw error(strfmt("@SYS53911",numberSequenceReference.referenceLabel(), numberSequenceReference.referenceModuleLabel()));
        }
        numberSeq = NumberSeq::newGetVoucher(LedgerParameters::numRefLedgerReversalVoucher());
        if (numberSeq)
        {
            reversalVoucher = numberSeq.voucher();
        }
        if (!reverseReclaimDate)
        {
            reverseReclaimDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Ledger,
                                                     numberSeq.parmNumberSequenceCode());

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(reversalVoucher,
                                                              reverseReclaimDate,
                                                              SysModule::Ledger);
        if (ledgerVoucher)
        {
            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }

        ttsCommit;

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns he container of packe objects.
    /// </summary>
    /// <returns>
    /// The container of packe objects.
    /// </returns>
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBatchMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// True if running in batch.
    /// </summary>
    /// <param name="_isBatchMode">
    /// Flag inicating batch run
    /// </param>
    /// <returns>
    /// True if running in batch.
    /// </returns>
    public boolean parmIsBatchMode(boolean _isBatchMode = isBatchMode)
    {
        isBatchMode = _isBatchMode;

        return isBatchMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReversalVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns reversal vouche.
    /// </summary>
    /// <param name="_reversalVoucher">
    /// The reversal vouche.
    /// </param>
    /// <returns>
    /// Returns reversal vouche.
    /// </returns>
    public Voucher parmReversalVoucher(Voucher _reversalVoucher = reversalVoucher)
    {
        reversalVoucher = _reversalVoucher;

        return reversalVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseReclaimDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The date on which reversal or reclaim is run.
    /// </summary>
    /// <param name="_reverseReclaimDate">
    /// The date on which reversal or reclaim is run.
    /// </param>
    /// <returns>
    /// The date on which reversal or reclaim is run.
    /// </returns>
    public TransDate parmReverseReclaimDate(TransDate _reverseReclaimDate = reverseReclaimDate)
    {
        reverseReclaimDate = _reverseReclaimDate;

        return reverseReclaimDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpData</Name>
				<Source><![CDATA[
    /// <summary>
    /// The TmpVendTransServiceTaxExtLinkTable_IN bufer containing user selection
    /// </summary>
    /// <param name="_tmpVendTransServiceTaxExtLinkTable">
    /// The TmpVendTransServiceTaxExtLinkTable_IN bufer containing user selection
    /// </param>
    /// <returns>
    /// The TmpVendTransServiceTaxExtLinkTable_IN bufer containing user selection.
    /// </returns>
    public TmpVendTransServiceTaxExtLinkTable_IN parmTmpData(TmpVendTransServiceTaxExtLinkTable_IN _tmpVendTransServiceTaxExtLinkTable)
    {
        tmpVendTransServiceTaxExtLinkTable = _tmpVendTransServiceTaxExtLinkTable;

        return tmpVendTransServiceTaxExtLinkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendServiceTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parm method storing VendTrans_IN.
    /// </summary>
    /// <param name="_vendTransServiceTaxExtension">
    /// VendTrans_IN record that matches with VendTrans.
    /// </param>
    /// <returns>
    /// VendTrans_IN buffer.
    /// </returns>
    public VendTrans_W parmVendServiceTaxExtension(VendTrans_W _vendTransServiceTaxExtension = vendTransServiceTaxExtension)
    {
        vendTransServiceTaxExtension = _vendTransServiceTaxExtension;

        return vendTransServiceTaxExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns he RunBase query generated.
    /// </summary>
    /// <returns>
    /// The query generated.
    /// </returns>

    public QueryRun queryRun()
    {
        // Returns the query atached to the dialog.
        return queryrun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a Select button is to be added to the dialog. If you change the return value to true, the button will be added.
    /// </summary>
    /// <returns>
    /// Returns true if query button neds to be displayed.
    /// </returns>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The upnpack method of pack-unpack desin patern
    /// </summary>
    /// <param name="packedClass">
    /// The packed object needed for reinstantiating with values.
    /// </param>
    /// <returns>
    /// True if unpacking was a success.
    /// </returns>
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The date calculated considering the period and length.
    /// </summary>
    /// <param name="period">
    /// The period passed from dialog.
    /// </param>
    /// <param name="length">
    /// The period length passed from dialog.
    /// </param>
    /// <returns>
    /// The date calculated considering the period and length.
    /// </returns>

    public static TransDate calcDueDate(PeriodUnit period, Periods length)
    {
        TransDate dueDate;

        switch (period)
        {
            case PeriodUnit::Day:
                dueDate =  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + (length * -1);
                break;
            case PeriodUnit::Month:
                if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) == dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
                    dueDate = dateEndMth(dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (length * -1)));
                else
                    dueDate = dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (length * -1));
                break;
            case PeriodUnit::Year:
                dueDate = dateMthFwd(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), (length * -12));
                break;
        }
        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The entry point for reverse and reclaim process.
    /// </summary>
    /// <param name="_args">
    /// The args object coming from action menu item.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws eror of service tax parameter not marked.
    /// Service tax parameter must be selected in general ledger parameters to activate the Batch reclaim for service tax feature.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws eror of service tax parameter not marked.
    /// Service tax parameter must be selected in general ledger parameters to activate the Batch reversal for service tax feature.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Throws eror of service tax parameter not marked.
    /// Service tax parameter must be selected in general ledger parameters to activate the post service tax reversal/reclaim feature.
    /// </exception>

    public static void main(Args _args)
    {
        ServiceTaxPOTInquiryBase_IN serviceTaxPOTInquiryBase;
        str                         menuItemName = _args.menuItemName();

        if (TaxParameters::isServiceTaxEnable_IN() == false)
        {
            if (menuItemName == menuitemActionStr(ServiceTaxPOTInquiryBatch_Reclaim_IN))
            {
                throw error(strfmt("@SYS4082388"));
            }
            else if (menuItemName == menuitemActionStr(ServiceTaxPOTInquiryBatch_Reversal_IN))
            {
                throw error(strfmt("@SYS4082408"));
            }
            if (menuItemName == menuitemActionStr(ServiceTaxPOTInquiryBase_IN))
            {
                throw error(strfmt("@SYS4083111"));
            }
        }
        else
        {
            serviceTaxPOTInquiryBase = ServiceTaxPOTInquiry_IN::construct(menuItemName);
            serviceTaxPOTInquiryBase.getLast();
            if (serviceTaxPOTInquiryBase.prompt())
            {
                serviceTaxPOTInquiryBase.runOperation();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>