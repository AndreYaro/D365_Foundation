<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetChangeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetChangeGroup extends RunBase
{
    // <GEELT>
    #isoCountryRegionCodes
    // </GEELT>
    AssetTable          assetTable;

    NumberSeq           assetIdNumberSeq;
    AssetId             assetIdAllocated;

    [FormObservable]
    AssetGroupId        assetGroupId;

    [FormObservable]
    NoYesId             changeAssetId;

    [FormObservable]
    AssetId             assetId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abortAssetId</Name>
				<Source><![CDATA[
    void abortAssetId()
    {
        if (assetIdNumberSeq)
        {
            assetIdNumberSeq.abort();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmRenameOfAssetId</Name>
				<Source><![CDATA[
    boolean confirmRenameOfAssetId()
    {
        DictField   dictField = new DictField(tablenum(AssetTable),fieldnum(AssetTable,AssetId));
        boolean     ret;

        if (this.parmChangeAssetId())
        {
            if (Box::yesNo(strfmt("@SYS70878", assetTable.AssetId, assetId),
                DialogButton::No))
            {
                ret = true;
            }
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    Object dialog()
    {
        FormRun     dialogForm;
        Args        args = new Args(formstr(AssetChangeGroup));

        args.caller(this);

        dialogForm = classFactory.formRunClass(args);
        dialogForm.init();

        return dialogForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetId</Name>
				<Source><![CDATA[
    void initAssetId()
    {
        this.abortAssetId();

        assetIdNumberSeq = assetTable.initAssetNumberSeq(assetGroupId);
        if (assetIdNumberSeq)
        {
            assetId = assetIdNumberSeq.num();
            assetIdAllocated = assetId;
        }
        else
        {
            assetId = '';
            assetIdAllocated = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AssetTable _assetTable = assetTable)
    {
        super();
        assetTable = _assetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetGroupId</Name>
				<Source><![CDATA[
    AssetGroupId parmAssetGroupId(AssetGroupId _assetGroupId = assetGroupId)
    {
        assetGroupId = _assetGroupId;

        return assetGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetId</Name>
				<Source><![CDATA[
    AssetId parmAssetId(AssetId _assetId = assetId)
    {
        assetId = _assetId;

        if (changeAssetId)
        {
            AssetGroup assetGroup;

            assetGroup = assetGroup::find(assetGroupId, false);

            if (assetGroup
                && assetGroup.AutoNumberSequenceTable)
            {
                if (!(NumberSequenceTable::find(assetGroup.AutoNumberSequenceTable).Manual && assetId == ''))
                {
                    this.validateNewAssetId(_assetId);
                }
            }
        }

        return assetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeAssetId</Name>
				<Source><![CDATA[
    NoYesId parmChangeAssetId(NoYesId _changeAssetId = changeAssetId)
    {
        changeAssetId = _changeAssetId;

        return changeAssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewAssetId</Name>
				<Source><![CDATA[
    private boolean validateNewAssetId(assetId _newAssetId)
    {
        AssetGroup assetGroup;

        assetGroup = assetGroup::find(assetGroupId, false);

        if (assetGroup
            && assetGroup.AutoNumberSequenceTable)
        {
            if (!NumberSeq::numCheckFormat(_newAssetId, NumberSequenceTable::find(assetGroup.AutoNumberSequenceTable)))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        try
       {
            ttsbegin;
            assetTable.selectForUpdate(true);

            // Rename AssetId;
            if (changeAssetId)
            {
                assetTable.AssetId = assetId;
                assetTable.renamePrimaryKey();
            }

            this.updateAssetGroupInfo();

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>AssetBook</c>, <c>AssetDepBook</c>, <c>AssetTrans</c>, and <c>AssetDepBookTrans</c>
    /// tables with a new group.
    /// </summary>
    protected void updateAssetGroupInfo()
    {
        this.updateAssetGroupInfoOnAssetTable();
        this.updateAssetGroupInfoOnAssetTrans();
        this.updateAssetGroupInfoOnAssetBook();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroupInfoOnAssetTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>AssetTable</c> record with a new group.
    /// </summary>
    protected void updateAssetGroupInfoOnAssetTable()
    {
        assetTable.AssetGroup = assetGroupId;
        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            assetTable.initFromAssetGroupId(AssetGroupId);
        }
        // </GBR>
        assetTable.update();

        if (assetIdNumberSeq)
        {
            assetIdNumberSeq.onNumberUsed(assetTable.AssetId, assetIdAllocated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroupInfoOnAssetTrans</Name>
				<Source><![CDATA[
    private void updateAssetGroupInfoOnAssetTrans()
    {
        AssetTrans assetTrans;

        assetTrans.skipDataMethods(true);
        assetTrans.skipEvents(true);
        assetTrans.skipDatabaseLog(true);

        update_recordset assetTrans
            setting AssetGroup = assetGroupId
            where assetTrans.AssetId == assetTable.AssetId;

        AssetCache::clearScope(AssetCacheScope::AssetTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetGroupInfoOnAssetBook</Name>
				<Source><![CDATA[
    private void updateAssetGroupInfoOnAssetBook()
    {
        AssetBook assetBook;

        update_recordset assetBook
            setting AssetGroup = assetGroupId
            where assetBook.AssetId == assetTable.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        if (!assetGroupId)
        {
            ret = checkFailed("@SYS71123");    // new asset not filled in
        }
        else
        {
            if (!AssetGroup::exist(assetGroupId))
            {
                ret = checkFailed(strfmt("@SYS71124", assetGroupId));
            }
            else
            {
                if (assetGroupId == assetTable.AssetGroup)
                {
                    ret = checkFailed(strfmt("@SYS71125", assetGroupId));
                }
            }
        }

        if (changeAssetId)
        {
            if (!assetId)
            {
                ret = checkFailed("@GLS222881");
            }
            else if (AssetTable::exist(assetId))
            {
                ret = checkFailed(strfmt("@SYS67761", assetId));
            }

            ret = ret && this.validateNewAssetId(assetId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS71093";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        AssetChangeGroup    assetChangeGroup;

        if (!args || args.dataset() != tablenum(AssetTable))
        {
            throw error(strfmt("@SYS25516",AssetChangeGroup::description()));
        }

        assetChangeGroup = AssetChangeGroup::newFromAssetTable(args.record());

        if (assetChangeGroup.prompt())
        {
            assetChangeGroup.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAssetTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and returns an instance of the <c>AssetChangeGroup</c> class.
    /// </summary>
    /// <param name="_assetTable">
    /// The <c>AssetTable</c> table that would be used to initialize the class.
    /// </param>
    /// <returns>
    /// An instance of <c>AssetChangeGroup</c> class.
    /// </returns>
    public static AssetChangeGroup newFromAssetTable(AssetTable _assetTable)
    {
        AssetStatus assetStatus;

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            assetStatus =  _assetTable.assetBookCurrent().Status;
            if (assetStatus == AssetStatus::Open
                || assetStatus == AssetStatus::Suspended
                || assetStatus == AssetStatus::Closed)
            {
                return new AssetChangeGroup_LT(_assetTable);
            }
        }
        // </GEELT>

        return new AssetChangeGroup(_assetTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>