<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatReportingByTaxIdFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;

/// <summary>
/// The <c>IntrastatReportingByTaxIdFeature</c> class represents Intrastat reporting by Multiple Tax Id for integration with Feature Management.
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class IntrastatReportingByTaxIdFeature implements 
    IFeatureMetadata, 
    IFeatureLifecycle,
    IFeaturePrerequisites,
    IFeatureDependencies,
    IFeatureMetadataEnablementNotifiable
{
    private static IntrastatReportingByTaxIdFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new IntrastatReportingByTaxIdFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the singleton object instance.
    /// </summary>
    /// <returns>
    /// An <c>IntrastatReportingByTaxIdFeature</c> instance.
    /// </returns>
    [Hookable(false)]
    public static IntrastatReportingByTaxIdFeature instance()
    {
        return IntrastatReportingByTaxIdFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@IntrastatByTaxId:IntrastatReportingByTaxIdFeature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@IntrastatByTaxId:IntrastatReportingByTaxIdFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://go.microsoft.com/fwlink/?linkid=2181258';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates dependency on all the features in the list. Pre-requisites features cannot be disabled unless current feature is disabled.
    /// </summary>
    /// <returns>An array containing all the pre-requisite features.</returns>
    [Hookable(false)]
    public IFeature[] dependsOnAllFeatures()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an array of the features, if any one is enabled, feature can be enabled.
    /// </summary>
    /// <returns>An array containing the pre-requisite features.</returns>
    [Hookable(false)]
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return "@IntrastatByTaxId:CannotEnableIntrastatReportingByTaxId";
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        if (Box::yesNo(
            strFmt(
                "@TaxMultipleVATID:OnDisableFeatureNotification",
                "@IntrastatByTaxId:IntrastatReportingByTaxIdFeature",
                "@SYS6530"),
            DialogButton::No) == DialogButton::No)
        {
            throw error("@SYS110943");
        }

        ttsbegin;

        DataArea dataArea;
        while select id from dataArea where dataArea.isVirtual == NoYes::No
        {
            changecompany(dataArea.id)
            {
                TaxIntegrationTaxServiceParameters parameters = TaxIntegrationTaxServiceParameters::find(true);
                if (parameters.IsMultipleTaxIdIntrastatEnabled)
                {
                    parameters.IsMultipleTaxIdIntrastatEnabled = NoYes::No;
                    parameters.doUpdate();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>