<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_KanbanJob_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class InventMov_KanbanJob_Transfer extends InventMov_KanbanJob
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the balance sheet account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the inventory issue and receipt accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().ItemGroupId()) ;
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the operations account for the movement.
    /// </summary>
    /// <returns>
    ///    A ledger account.
    /// </returns>
    /// <remarks>
    ///    This method overrides a base class method. Use the value of the
    ///    <c>InventAccountType::InventoryInterUnitPayable</c> method and receivable accounts for posting.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitPayable));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitReceivable));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether blank issues are allowed.
    /// </summary>
    /// <param name="_inventDimGroupFieldSetup">
    ///    An <c>InventDimGroupFieldSetup</c> object that determines whether blank issues are allowed.
    /// </param>
    /// <returns>
    ///    true if blank issues are allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is an override of the base class method.
    /// </remarks>
    protected boolean dimAllowBlankIssue(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() ||
               _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAllowBlankReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether blank receipts are allowed.
    /// </summary>
    /// <param name="_inventDimGroupFieldSetup">
    ///    An <c>InventDimGroupFieldSetup</c> object to use to determine whether blank issues are allowed.
    /// </param>
    /// <returns>
    ///    true if blank receipts are allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is an override of the base class method.
    /// </remarks>
    protected boolean dimAllowBlankReceipt(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return _inventDimGroupFieldSetup.isAllowBlankIssueEnabled() ||
               _inventDimGroupFieldSetup.isAllowBlankReceiptEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a movement is a transfer of items.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public NoYes isTransfer()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransDimTransferReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Merges the from and to dimensions in the movement and clears invalid license plate numbers.
    /// </summary>
    /// <param name="_toInventDim">
    ///     The target dimension.
    /// </param>
    /// <param name="_fromInventDim">
    ///     The origin dimension.
    /// </param>
    /// <param name="_origFromDim">
    ///     The original value of the origin dimension.
    /// </param>
    /// <returns>
    ///     A record of the <c>InventDim</c> table.
    /// </returns>
    public InventDim mergeTransDimTransferReceipt(
        InventDim           _toInventDim,
        InventDim           _fromInventDim = this.inventdim(),
        InventDim           _origFromDim   = _fromInventDim)
    {
        InventDim toInventDim = super(_toInventDim,_fromInventDim,_origFromDim);
        toInventDim.clearLicensePlateIfInvalid();

        return toInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the <c>inventMovement</c> must be automatically reserved.
    /// </summary>
    /// <returns>
    ///    The default Boolean value from the <c>inventType</c> class hierarchy.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method which returns a default
    ///    Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean  mustBeAutoReserved()
    {
        return kanbanJob.mustBeAutoReserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>inventMovement</c> must be financially booked.
    /// </summary>
    /// <returns>
    /// true if the movement must be booked financially; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A movement must be booked financially if the item posts to ledger and the issue and receipt sites
    /// are not the same.
    /// </remarks>
    public boolean  mustBeBookedFinancially()
    {
        boolean     result = super();

        if (result)
        {
            InventDim issueInventDim = kanbanJob.issueInventDim();
            InventDim receiptInventDim = kanbanJob.inventDim();

            result = issueInventDim.InventSiteId != receiptInventDim.InventSiteId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement must be booked physically.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether all inventory transactions for this movement must have the same sign.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement must update the <c>InventTable</c> record cost price.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines how much over delivery is allowed.
    /// </summary>
    /// <returns>
    ///    Always returns zero.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public Percent overDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban job quantity that can be reserved.
    /// </summary>
    /// <returns>
    ///    A <c>InventQty</c> value that defines the quantity that can be reserved.
    /// </returns>
    public InventQty reserveQty()
    {
        InventQty   reservQty = 0;

        if (this.transSign() < 0)
        {
            reservQty = kanbanJob.reservQty();
        }
        return reservQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines how much under delivery is allowed.
    /// </summary>
    /// <returns>
    ///    Always returns zero.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    protected Percent subDeliveryPct()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferIssueCostPriceInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The inventory dimension for the kanban job.
    /// </summary>
    /// <returns>
    ///    The inventory dimension where the transfer was issued.
    /// </returns>
    public InventDim transferIssueCostPriceInventDim()
    {
        return kanbanJob.issueInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the movement buffer and optionally the reservation.
    /// </summary>
    /// <param name="_updateReservation">
    /// A Boolean value that specifies whether the reservation must be updated.
    /// </param>
    public void updateBuffer(boolean _updateReservation = true)
    {
        InventUpd_Estimated     estimated = InventUpd_Estimated::newInventMovement(this);

        estimated.updateNow();
        kanbanJob.doUpdate();

        if (   estimated
            && _updateReservation)
        {
            estimated.updateReservation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>