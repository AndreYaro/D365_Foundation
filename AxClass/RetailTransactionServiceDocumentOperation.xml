<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceDocumentOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionServiceDocumentOperation</c> implements the document operation related methods of the service interface exposed by the <c>RetailTransactionService</c> class to the retail channels.
/// </summary>
public static class RetailTransactionServiceDocumentOperation
{
    private const str RetailStaffIdParamName = "RetailStaffId";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>commitDocumentOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Commit a document operation
    /// </summary>
    /// <param name="requestId">
    /// An unique guid string generated by client
    /// </param>
    /// <param name="operationName">
    /// The operation name
    /// </param>
    /// <param name="document">
    /// An string for document
    /// </param>
    /// <param name="paramsDictionary">
    /// An string for params dictionary. Should be a valid json string serialized from CLR type Dictionary<string, string> instance.
    /// </param>
    /// <returns>
    /// A container object indicating update success or failure as well as RequestId, CommitResult and CommitResultDetailCode
    /// </returns>
    /// <remarks>
    /// This method is used to commit a document operation.
    /// </remarks>
    public static container commitDocumentOperation(str requestId, str operationName, str document, str paramsDictionaryJson)
    {
        System.Exception exception;
        container result = [true, ''];
        RetailDocumentOperationServiceCommitRequest request;
        container requestContainer = [document];
        Map paramsMap;
        try
        {
            guid requestIdGuid = str2Guid(requestId);
            RetailTransactionServiceDocumentOperation::validateRequestId(requestIdGuid);
            paramsMap = RetailTransactionServiceDocumentOperation::getParamsMapFromDictionary(requestIdGuid, operationName, paramsDictionaryJson);
            str currentCompany = curext();
            request = RetailDocumentOperationServiceCommitRequest::construct(requestIdGuid, operationName, currentCompany, requestContainer);

            if (paramsMap.exists(RetailStaffIdParamName))
            {
                str retailStaffId = paramsMap.lookup(RetailStaffIdParamName);
                if (retailStaffId)
                {
                    request.setRetailStaffId(retailStaffId);
                }
            }

            RetailDocumentOperationServiceCommitResponse response = RetailDocumentOperationService::commitDocumentOperation(request);
            result = [true, '', guid2Str(response.getRequestId()), enum2int(response.getResult()), enum2int(response.getResultCode())];
        }
        catch (exception)
        {
            result = [false, exception.Message];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentOperationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a document operation status
    /// </summary>
    /// <param name="requestId">
    /// An unique guid string generated by client
    /// </param>
    /// <returns>
    /// A container object to indicate update success or failure as well as Status, ProcessingErrorCode and ResponseDocument
    /// </returns>
    /// <remarks>
    /// This method is used to get a document operation status.
    /// </remarks>
    public static container getDocumentOperationStatus(str requestId)
    {
        System.Exception exception;
        container result      = [true, ''];
        RetailDocumentOperationServiceGetStatusRequest request;
        str responseDocument;

        try
        {
            guid requestIdGuid = str2Guid(requestId);
            RetailTransactionServiceDocumentOperation::validateRequestId(requestIdGuid);
            request = RetailDocumentOperationServiceGetStatusRequest::construct(requestIdGuid);
            RetailDocumentOperationServiceGetStatusResponse response = RetailDocumentOperationService::getDocumentOperationStatus(request);
            container responseContainer = response.getResponseContainer();
            if(responseContainer != conNull() && conLen(responseContainer) > 0)
            {
                // only 1 result document is expected
                responseDocument = conPeek(responseContainer, 1);
            }
            result = [true, '', enum2int(response.getStatus()), responseDocument];
        }
        catch (exception)
        {
            result = [false, exception.Message];
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRequestId</Name>
				<Source><![CDATA[
    private static void validateRequestId(guid requestId)
    {
        if(requestId == emptyGuid())
        {
            throw error("@RetailDocumentOperationLabels:ErrorNotValidRequestId");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParamsMapFromDictionary</Name>
				<Source><![CDATA[
    private static Map getParamsMapFromDictionary(guid requestId, str operationName, str paramsDictionaryJson)
    {
        Map paramsMap = new Map(Types::String, Types::String);
        System.Exception exception;

        try
        {
            Newtonsoft.Json.Linq.JObject jsonObject= Newtonsoft.Json.JsonConvert::DeserializeObject(paramsDictionaryJson);
            if(jsonObject != null)
            {
                Newtonsoft.Json.Linq.JProperty property = jsonObject.First;
                while(property != null)
                {
                    str name = property.Name;
                    if(property.Value != null)
                    {
                        str value = property.Value.ToString();
                        paramsMap.insert(name, value);
                    }
                    property = property.Next;
                }
            }
        }
        catch (exception)
        {
            RetailDocumentOperationLogger::logOperationError(requestId, 0, operationName, RetailDocumentOperationProcessingErrorCode::NotValidParamsDictionaryJsonString);
            throw error("@RetailDocumentOperationLabels:ErrorNotValidParamsDictionaryJsonString");
        }

        return paramsMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>