<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReportByIdTableBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Updates and inserts records into a temporary table to calculate tax amount grouped by tax direction and report id.
/// </summary>
class TaxTransReportByIdTableBuilder
{
    #isoCountryRegionCodes
    boolean    isTaxAmountSummation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Create a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    public static TaxTransReportByIdTableBuilder construct()
    {
        return new TaxTransReportByIdTableBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAmountByTaxDirectionAndReportId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method will return a table of the type <c>TmpTaxReportById</c> containing records for report ids and their tax amounts
    ///  for a given tax transaction.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to add report id records with their amounts from a tax transaction to or update existing
    ///  records for a report id with additional amounts from a tax transaction.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is the transaction only caused by credit notes?
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  Restricts the method to only add or update the amounts in the temporary table related to the provided report id.
    ///  If null it will add or update the amounts for all report ids for the tax transactions tax direction and tax code.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. It will change how the amounts are determined for the report id.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    /// </param>
    /// <returns>
    ///  A temporary table buffer that contains 0 to n records. Each record is for a single report id that contains the summarized tax and
    ///  tax in cost price amount for the given tax transaction.
    /// </returns>
    public TmpTaxReportById getTaxAmountByTaxDirectionAndReportId(
        TaxTrans                    _taxTrans,
        TmpTaxReportById            _tmpTaxReportById,               //Contains the table where the amounts and reportIds should be placed.
        boolean                     _isCredit            = NoYes::No,//Is the transaction only caused by creditNotes ?
        TaxReportCollection         _taxReportCollection = null,     //If the parameter is given, then will the method only return the amount for the given reportId.
        TaxReportLayout             _taxReportLayout     = TaxReportLayout::Default,
        boolean                     _isDebit             = NoYes::No
        )
    {
        //If the transaction is caused by a credit note and the reporting fields for credit notes isn't setup on
        //the taxcode, then the amount will be placed in the corresponding reporting field for non-credit note amounts.

        TaxTable    taxTable = TaxTable::find(_taxTrans.TaxCode);

        switch (_taxTrans.TaxDirection)
        {
            case TaxDirection::IncomingTax :
            case TaxDirection::IncomingTax_W:
                _tmpTaxReportById = this.insertInTmpTaxReportByIdForIncomingTax(_taxTrans, _tmpTaxReportById, taxTable, _taxReportCollection, _taxReportLayout, _isCredit, _isDebit);
                break;

            case TaxDirection::OutgoingTax :
            case TaxDirection::OutgoingTax_W:
                _tmpTaxReportById = this.insertInTmpTaxReportByIdForOutgoingTax(_taxTrans, _tmpTaxReportById, taxTable, _taxReportCollection, _taxReportLayout, _isCredit, _isDebit);
                break;

            case TaxDirection::TaxExemptPurchase :
                _tmpTaxReportById = this.insertInTmpTaxReportByIdForTaxExemptPurchase(_taxTrans, _tmpTaxReportById, taxTable, _taxReportCollection, _taxReportLayout, _isCredit, _isDebit);
                break;

            case TaxDirection::TaxExemptSales :
                _tmpTaxReportById = this.insertInTmpTaxReportByIdForTaxExemptSales(_taxTrans, _tmpTaxReportById, taxTable, _taxReportCollection, _taxReportLayout, _isCredit, _isDebit);
                break;

            case TaxDirection::UseTax :
                _tmpTaxReportById = this.insertInTmpTaxReportByIdForUseTax(_taxTrans, _tmpTaxReportById, taxTable, _taxReportCollection, _taxReportLayout, _isCredit, _isDebit);
                break;
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForIncomingTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Defines what tax report fields can can have their amount updated when the tax direction is IncomingTax.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to get the tax amount  and tax in cost price from.</param>
    /// <param name = "_tmpTaxReportById">The temporary table buffer to update or add the amounts to based on the report id.</param>
    /// <param name = "_taxTable">The tax code record related to the tax transaction.</param>
    /// <param name = "_taxReportCollection">The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.</param>
    /// <param name = "_taxReportLayout">The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.</param>
    /// <param name = "_isCredit">Is this a credit note transaction?</param>
    /// <param name = "_isDebit">Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.</param>
    /// <returns>
    ///  The temporary table buffer passed in. This table buffer may have had one of two things done to it.
    ///   1. No records were added or updated in the table buffer because none of the restrictions were satisfied.
    ///   2. One or more of the restrictions was satisfied to add or update one or more amounts in the table buffer.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForIncomingTax(
        TaxTrans            _taxTrans,
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_isCredit &&
                    _taxTable.RepFieldBaseIncomingCreditNote)
        {
            if (_taxReportLayout == TaxReportLayout::Belgium)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseIncomingCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount, _taxTrans.TaxInCostPriceMST);
            }
            else
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseIncomingCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
            }
        }
        else
        {
            _tmpTaxReportById = this.insertInTmpTaxReportByIdForRepFieldBaseIncoming(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
        }

        if (_isCredit &&
                    _taxTable.RepFieldTaxIncomingCreditNote)
        {
            this.parmIsTaxAmountSummation(true);
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxIncomingCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
        }
        else
        {
            _tmpTaxReportById = this.insertInTmpTaxReportByIdForRepFieldTaxIncoming(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldBaseIncoming</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Allows for extension on the report field to insert an amount for into the temporary table <c>TmpTaxReportById</c> when the variable _isCredit is No
    ///  or the report field RepFieldBaseIncomingCreditNote does not have a value assigned.
    ///  This extends functionality from the method insertInTmpTaxReportByIdForIncomingTax.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add the amounts to based on the report id.
    /// </param>
    /// <param name = "_taxTable">
    ///  The tax code record related to the tax transaction. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction to get the tax amount  and tax in cost price from. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.
    ///  This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is this a credit note transaction? Is used in the extension code.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    ///  Is used in the extension code.
    /// </param>
    /// <returns>
    ///  The provided temporary table buffer. If the provided tax code had a report id assigned to the report field, then the code
    ///  to add the tax amounts for that report field to the table buffer are called. Based on the logic in that method either:
    ///   1. The temporary table buffer does not have a record updated or added as it failed a condition in the subsequent method.
    ///   2. A record in the temporary table buffer is updated by summing the new amount onto the existing amount for the tax report id.
    ///   3. A new record is added to the temporary table buffer for the tax amounts for this tax report id.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldBaseIncoming(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_taxTable.RepFieldBaseIncoming)
        {
            if (_taxReportLayout == TaxReportLayout::Belgium)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseIncoming, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount, _taxTrans.TaxInCostPriceMST);
            }
            else
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseIncoming, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
            }
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxIncoming</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Allows for extension on the report field to insert an amount for into the temporary table <c>TmpTaxReportById</c> when the variable _isCredit is No
    ///  or the report field RepFieldTaxIncomingCreditNote does not have a value assigned.
    ///  This extends functionality from the method insertInTmpTaxReportByIdForIncomingTax.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add the amounts to based on the report id.
    /// </param>
    /// <param name = "_taxTable">
    ///  The tax code record related to the tax transaction. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction to get the tax amount  and tax in cost price from. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.
    ///  This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is this a credit note transaction? Is used in the extension code.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    ///  Is used in the extension code.
    /// </param>
    /// <returns>
    ///  The provided temporary table buffer. If the provided tax code had a report id assigned to the report field, then the code
    ///  to add the tax amounts for that report field to the table buffer are called. Based on the logic in that method either:
    ///   1. The temporary table buffer does not have a record updated or added as it failed a condition in the subsequent method.
    ///   2. A record in the temporary table buffer is updated by summing the new amount onto the existing amount for the tax report id.
    ///   3. A new record is added to the temporary table buffer for the tax amounts for this tax report id.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxIncoming(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if  (_taxTable.RepFieldTaxIncoming)
        {
            this.parmIsTaxAmountSummation(true);
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxIncoming, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForOutgoingTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Defines what tax report fields can have their amount updated when the tax direction is OutgoingTax.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to get the tax amount  and tax in cost price from.</param>
    /// <param name = "_tmpTaxReportById">The temporary table buffer to update or add the amounts to based on the report id.</param>
    /// <param name = "_taxTable">The tax code record related to the tax transaction.</param>
    /// <param name = "_taxReportCollection">The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.</param>
    /// <param name = "_taxReportLayout">The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.</param>
    /// <param name = "_isCredit">Is this a credit note transaction?</param>
    /// <param name = "_isDebit">Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.</param>
    /// <returns>
    ///  The temporary table buffer passed in. This table buffer may have had one of two things done to it.
    ///   1. No records were added or updated in the table buffer because none of the restrictions were satisfied.
    ///   2. One or more of the restrictions was satisfied to add or update one or more amounts in the table buffer.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForOutgoingTax(
        TaxTrans            _taxTrans,
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_isCredit &&
                    _taxTable.RepFieldBaseOutgoingCreditNote)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseOutgoingCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else
        {
            _tmpTaxReportById = this.insertInTmpTaxReportByIdForRepFieldBaseOutgoing(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
        }

        if (_isCredit &&
                    _taxTable.RepFieldTaxOutgoingCreditNote)
        {
            this.parmIsTaxAmountSummation(true);
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxOutgoingCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount);
        }
        else
        {
            _tmpTaxReportById = this.insertInTmpTaxReportByIdForRepFieldTaxOutgoing(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldBaseOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Allows for extension on the report field to insert an amount for into the temporary table <c>TmpTaxReportById</c> when the variable _isCredit is No
    ///  or the report field RepFieldBaseOutgoingCreditNote does not have a value assigned.
    ///  This extends functionality from the method insertInTmpTaxReportByIdForOutgoingTax.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add the amounts to based on the report id.
    /// </param>
    /// <param name = "_taxTable">
    ///  The tax code record related to the tax transaction. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction to get the tax amount  and tax in cost price from. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.
    ///  This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is this a credit note transaction? Is used in the extension code.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    ///  Is used in the extension code.
    /// </param>
    /// <returns>
    ///  The provided temporary table buffer. If the provided tax code had a report id assigned to the report field, then the code
    ///  to add the tax amounts for that report field to the table buffer are called. Based on the logic in that method either:
    ///   1. The temporary table buffer does not have a record updated or added as it failed a condition in the subsequent method.
    ///   2. A record in the temporary table buffer is updated by summing the new amount onto the existing amount for the tax report id.
    ///   3. A new record is added to the temporary table buffer for the tax amounts for this tax report id.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldBaseOutgoing(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_taxTable.RepFieldBaseOutgoing)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseOutgoing, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxOutgoing</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Allows for extension on the report field to insert an amount for into the temporary table <c>TmpTaxReportById</c> when the variable _isCredit is No
    ///  or the report field RepFieldTaxOutgoingCreditNote does not have a value assigned.
    ///  This extends functionality from the method insertInTmpTaxReportByIdForOutgoingTax.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add the amounts to based on the report id.
    /// </param>
    /// <param name = "_taxTable">
    ///  The tax code record related to the tax transaction. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction to get the tax amount  and tax in cost price from. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.
    ///  This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is this a credit note transaction? Is used in the extension code.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    ///  Is used in the extension code.
    /// </param>
    /// <returns>
    ///  The provided temporary table buffer. If the provided tax code had a report id assigned to the report field, then the code
    ///  to add the tax amounts for that report field to the table buffer are called. Based on the logic in that method either:
    ///   1. The temporary table buffer does not have a record updated or added as it failed a condition in the subsequent method.
    ///   2. A record in the temporary table buffer is updated by summing the new amount onto the existing amount for the tax report id.
    ///   3. A new record is added to the temporary table buffer for the tax amounts for this tax report id.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxOutgoing(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_taxTable.RepFieldTaxOutgoing)
        {
            this.parmIsTaxAmountSummation(true);
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxOutgoing, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForTaxExemptPurchase</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Defines what tax report fields can have their amount updated when the tax direction is TaxExemptPurchase.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to get the tax amount  and tax in cost price from.</param>
    /// <param name = "_tmpTaxReportById">The temporary table buffer to update or add the amounts to based on the report id.</param>
    /// <param name = "_taxTable">The tax code record related to the tax transaction.</param>
    /// <param name = "_taxReportCollection">The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.</param>
    /// <param name = "_taxReportLayout">The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.</param>
    /// <param name = "_isCredit">Is this a credit note transaction?</param>
    /// <param name = "_isDebit">Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.</param>
    /// <returns>
    ///  The temporary table buffer passed in. This table buffer may have had one of two things done to it.
    ///   1. No records were added or updated in the table buffer because none of the restrictions were satisfied.
    ///   2. One or more of the restrictions was satisfied to add or update one or more amounts in the table buffer.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForTaxExemptPurchase(
        TaxTrans            _taxTrans,
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_isCredit &&
                    _taxTable.RepFieldTaxFreeBuyCreditNote)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxFreeBuyCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else
        {
            _tmpTaxReportById = this.insertInTmpTaxReportByIdForRepFieldTaxFreeBuy(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxFreeBuy</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Allows for extension on the report field to insert an amount for into the temporary table <c>TmpTaxReportById</c> when the variable _isCredit is No
    ///  or the report field RepFieldTaxFreeBuyCreditNote does not have a value assigned.
    ///  This extends functionality from the method insertInTmpTaxReportByIdForTaxExemptPurchase.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add the amounts to based on the report id.
    /// </param>
    /// <param name = "_taxTable">
    ///  The tax code record related to the tax transaction. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction to get the tax amount  and tax in cost price from. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.
    ///  This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is this a credit note transaction? Is used in the extension code.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    ///  Is used in the extension code.
    /// </param>
    /// <returns>
    ///  The provided temporary table buffer. If the provided tax code had a report id assigned to the report field, then the code
    ///  to add the tax amounts for that report field to the table buffer are called. Based on the logic in that method either:
    ///   1. The temporary table buffer does not have a record updated or added as it failed a condition in the subsequent method.
    ///   2. A record in the temporary table buffer is updated by summing the new amount onto the existing amount for the tax report id.
    ///   3. A new record is added to the temporary table buffer for the tax amounts for this tax report id.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxFreeBuy(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_taxTable.RepFieldTaxFreeBuy)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxFreeBuy, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForTaxExemptSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Defines what tax report fields can have their amount updated when the tax direction is TaxExemptSales.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to get the tax amount  and tax in cost price from.</param>
    /// <param name = "_tmpTaxReportById">The temporary table buffer to update or add the amounts to based on the report id.</param>
    /// <param name = "_taxTable">The tax code record related to the tax transaction.</param>
    /// <param name = "_taxReportCollection">The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.</param>
    /// <param name = "_taxReportLayout">The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.</param>
    /// <param name = "_isCredit">Is this a credit note transaction?</param>
    /// <param name = "_isDebit">Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.</param>
    /// <returns>
    ///  The temporary table buffer passed in. This table buffer may have had one of two things done to it.
    ///   1. No records were added or updated in the table buffer because none of the restrictions were satisfied.
    ///   2. One or more of the restrictions was satisfied to add or update one or more amounts in the table buffer.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForTaxExemptSales(
        TaxTrans            _taxTrans,
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_isCredit &&
                    _taxTable.RepFieldTaxFreeSalesCreditNote)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxFreeSalesCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }
        else
        {
            _tmpTaxReportById = this.insertInTmpTaxReportByIdForRepFieldTaxFreeSales(_tmpTaxReportById, _taxTable, _taxReportLayout, _taxTrans, _taxReportCollection, _isCredit, _isDebit);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForRepFieldTaxFreeSales</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Allows for extension on the report field to insert an amount for into the temporary table <c>TmpTaxReportById</c> when the variable _isCredit is No
    ///  or the report field RepFieldTaxFreeSalesCreditNote does not have a value assigned.
    ///  This extends functionality from the method insertInTmpTaxReportByIdForTaxExemptSales.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add the amounts to based on the report id.
    /// </param>
    /// <param name = "_taxTable">
    ///  The tax code record related to the tax transaction. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction to get the tax amount  and tax in cost price from. This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.
    ///  This is being passed through to insertInTmpTaxReportById.
    /// </param>
    /// <param name = "_isCredit">
    ///  Is this a credit note transaction? Is used in the extension code.
    /// </param>
    /// <param name = "_isDebit">
    ///  Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.
    ///  Is used in the extension code.
    /// </param>
    /// <returns>
    ///  The provided temporary table buffer. If the provided tax code had a report id assigned to the report field, then the code
    ///  to add the tax amounts for that report field to the table buffer are called. Based on the logic in that method either:
    ///   1. The temporary table buffer does not have a record updated or added as it failed a condition in the subsequent method.
    ///   2. A record in the temporary table buffer is updated by summing the new amount onto the existing amount for the tax report id.
    ///   3. A new record is added to the temporary table buffer for the tax amounts for this tax report id.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForRepFieldTaxFreeSales(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans,
        TaxReportCollection _taxReportCollection,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_taxTable.RepFieldTaxFreeSales)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldTaxFreeSales, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount);
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdForUseTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Defines what tax report fields can have their amount updated when the tax direction is UseTax.
    /// </summary>
    /// <param name = "_taxTrans">The tax transaction to get the tax amount  and tax in cost price from.</param>
    /// <param name = "_tmpTaxReportById">The temporary table buffer to update or add the amounts to based on the report id.</param>
    /// <param name = "_taxTable">The tax code record related to the tax transaction.</param>
    /// <param name = "_taxReportCollection">The tax report id record restricting what tax report ids we want amounts for in the temporary table buffer.</param>
    /// <param name = "_taxReportLayout">The tax report layout. Used for additonal rules on determining the fields and what amounts are assigned to them.</param>
    /// <param name = "_isCredit">Is this a credit note transaction?</param>
    /// <param name = "_isDebit">Parameter added by Malaysia to restrict how amounts are added and updated in the temporary table when working in Malaysia.</param>
    /// <returns>
    ///  The temporary table buffer passed in. This table buffer may have had one of two things done to it.
    ///   1. No records were added or updated in the table buffer because none of the restrictions were satisfied.
    ///   2. One or more of the restrictions was satisfied to add or update one or more amounts in the table buffer.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportByIdForUseTax(
        TaxTrans            _taxTrans,
        TmpTaxReportById    _tmpTaxReportById,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        boolean             _isCredit,
        boolean             _isDebit)
    {
        if (_isCredit &&
                    _taxTable.RepFieldBaseUseTaxCreditNote)
        {
            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseUseTaxCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount, _taxTrans.TaxInCostPriceMST);
        }
        else
        {
            if (_taxTable.RepFieldBaseUseTax)
                        _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseUseTax, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxBaseAmount, _taxTrans.TaxInCostPriceMST);
        }

        if (_isCredit &&
                    _taxTable.RepFieldBaseUseTaxOffsetCreditNote)
        {
            if (_taxReportLayout == TaxReportLayout::Belgium)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseUseTaxOffsetCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxBaseAmount, -_taxTrans.TaxInCostPriceMST);
            }
            else
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseUseTaxOffsetCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxBaseAmount);
            }
        }
        else
        {
            if (_taxTable.RepFieldBaseUseTaxOffset)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldBaseUseTaxOffset, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxBaseAmount, -_taxTrans.TaxInCostPriceMST);
            }
        }

        if (_isCredit &&
                    _taxTable.RepFieldUseTaxCreditNote)
        {
            if (_taxReportLayout == TaxReportLayout::Germany)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount, -_taxTrans.TaxInCostPriceMST);
            }
            else
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
            }
        }
        else
        {
            if (_taxReportLayout == TaxReportLayout::Belgium)  //In case it's a credit note and the UseTaxCreditNote Field
            {
                //for the tax code is empty, then it shouldn't be reported
                if (! _isCredit && _taxTable.RepFieldUseTax)
                {
                    _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTax, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
                }
            }
            else if (_taxReportLayout == TaxReportLayout::Germany)
            {
                if (_taxTable.RepFieldUseTax)
                            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTax, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount);
            }
            else
            {
                if (_taxTable.RepFieldUseTax)
                            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTax, _taxTable, _taxReportCollection, _taxReportLayout, _taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
            }
        }

        if (_isCredit &&
                    _taxTable.RepFieldUseTaxOffsetCreditNote)
        {
            if (_taxReportLayout == TaxReportLayout::Norway)
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxOffsetCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount, -_taxTrans.TaxInCostPriceMST);
            }
            else
            {
                _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxOffsetCreditNote, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount);
            }
        }
        else
        {
            if (_taxReportLayout == TaxReportLayout::Belgium)    //In case it's a credit note and the UseTaxOffsetCreditNote Field
            {
                //for the tax code is empty, then it shouldn't be reported
                if (! _isCredit && _taxTable.RepFieldUseTaxOffset)
                {
                    _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxOffset, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount);
                }
            }
            else
            {
                if (_taxTable.RepFieldUseTaxOffset)
                {
                    switch(_taxReportLayout)
                    {
                        case TaxReportLayout::Germany:
                            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxOffset, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount, _taxTrans.TaxInCostPriceMST);
                            break;

                        case TaxReportLayout::Norway:
                            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxOffset, _taxTable, _taxReportCollection, _taxReportLayout, -_taxTrans.TaxAmount, -_taxTrans.TaxInCostPriceMST);
                            break;

                        default:
                            _tmpTaxReportById = this.insertInTmpTaxReportById(_tmpTaxReportById, _taxTrans, _taxTable.RepFieldUseTaxOffset, _taxTable, _taxReportCollection, _taxReportLayout,  -_taxTrans.TaxAmount);
                    }
                }
        }
        }

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Update or insert a record into the temporary table <c>TmpTaxReportById</c> provided. This record will contain tax amount information
    ///  for the tax report field specified in <c>TaxReportCollection</c>.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    ///  The temporary table buffer to update or add a record to.
    /// </param>
    /// <param name = "_taxTrans">
    ///  The tax transaction record the amount was retrieved from. This is used by extension logic.
    /// </param>
    /// <param name = "_taxReportField">
    ///  The tax report field the amount is for.
    /// </param>
    /// <param name = "_taxTable">
    ///  The record for the tax code on the tax transaction. This is used by customization logic for different report layouts.
    /// </param>
    /// <param name = "_taxReportCollection">
    ///  The tax report id record provided to restrict the results added to the temporary table to be only for the tax report id specified on
    ///  the tax report collection record.
    /// </param>
    /// <param name = "_taxReportLayout">
    ///  The tax report layout. This adds additional rules to how the tax amount should be calculated that is placed on the temporary table.
    /// </param>
    /// <param name = "_amount">
    ///  The tax amount to store on the temporary table.
    /// </param>
    /// <param name = "_taxInCostPrice">
    ///  The tax in cost price to store on the temporary table.
    /// </param>
    /// <returns>
    ///  There are three possible results of what has happened to the provided table buffer that is returned.
    ///   1. The provided temporary table buffer has had nothing done to it because the tax report field provided did not match the tax report
    ///      field record restriction.
    ///   2. The provided temporary table buffer has had the amounts updated on one of its records because the provided tax report field matches
    ///      a tax report field record already present on the table buffer.
    ///   3. The provided temporary table buffer has had an additional record added to the buffer with its tax amounts because the provided tax
    ///      report field did not match with any of the existing records on the table buffer.
    /// </returns>
    protected TmpTaxReportById insertInTmpTaxReportById(
        TmpTaxReportById    _tmpTaxReportById,
        TaxTrans            _taxTrans,
        TaxReportField      _taxReportField,
        TaxTable            _taxTable,
        TaxReportCollection _taxReportCollection,
        TaxReportLayout     _taxReportLayout,
        AmountMST           _amount,
        Amount              _taxInCostPrice = 0)
    {
        #TaxReportingCodesAU
        TaxAmount taxAmount_AU;

        if (_taxReportCollection && _taxReportCollection.TaxReportField != _taxReportField)
                return _tmpTaxReportById;

        _tmpTaxReportById = this.selectTmpTaxReportByIdForInsertInTmpTaxReportById(_tmpTaxReportById, _taxReportField, _taxReportLayout, _taxTrans);

        if (_taxReportLayout != TaxReportLayout::Belgium && _taxTable.RepFieldBaseUseTax == _taxReportField)
        {
            _taxInCostPrice = 0;
        }

        if (this.isReverseAmountRequired(_taxTrans, _taxReportField, _taxTable, _taxReportLayout))
        {
            _amount = -(_amount);
        }

        //For the AUS Report additionally we need to keep the original TaxAmount in the separated field,
        //because the same tax reporting code may be used for accumulating the base amount and the tax amount at the same time;
        //so, the flag isTaxAmountSummation is expected to be set when it is being processed the amount of tax for Australian report.
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAU]) && isTaxAmountSummation)
        {
            taxAmount_AU = _amount;
        }

        if (_tmpTaxReportById.TaxReportField)
        {
            _tmpTaxReportById.Amount += _amount;
            _tmpTaxReportById.TaxInCostPrice += _taxInCostPrice;
            _tmpTaxReportById.TaxAmount_AU += taxAmount_AU;
            _tmpTaxReportById.update();
        }
        else
        {
            _tmpTaxReportById = this.setValuesOnRecordToBeInsertedByInsertInTmpTaxReportById(_tmpTaxReportById, _taxReportField, _amount, _taxInCostPrice, _taxReportLayout, _taxTrans);
            _tmpTaxReportById.TaxAmount_AU = taxAmount_AU;
            _tmpTaxReportById.insert();
        }

        isTaxAmountSummation = false;

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTmpTaxReportByIdForInsertInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the query to select the TmpTaxReportById record to update. If it fails to select a record then a new record
    /// will be added to the TmpTaxReportById collection of records.
    /// </summary>
    /// <param name = "_tmpTaxReportById">The collection of TmpTaxReportById records to select from.</param>
    /// <param name = "_taxReportField">The tax report field to query on.</param>
    /// <param name = "_taxReportLayout">The tax report layout to query on.</param>
    /// <param name = "_taxTrans">The TaxTrans record related to the collection of TmpTaxReportById records.</param>
    /// <returns>The TmpTaxReportById record to update if a record is found.</returns>
    protected TmpTaxReportById selectTmpTaxReportByIdForInsertInTmpTaxReportById(
        TmpTaxReportById _tmpTaxReportById,
        TaxReportField _taxReportField,
        TaxReportLayout _taxReportLayout,
        TaxTrans _taxTrans)
    {
        select firstonly forupdate _tmpTaxReportById
                where _tmpTaxReportById.TaxReportField == _taxReportField;

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesOnRecordToBeInsertedByInsertInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the values on the TmpTaxReportById record that will be inserted into the collection of TmpTaxReportById records by InsertInTmpTaxReportById
    /// </summary>
    /// <param name = "_tmpTaxReportById">Reference to the tmp table and the record to be inserted.</param>
    /// <param name = "_taxReportField">The tax report field value.</param>
    /// <param name = "_amount">The amount value.</param>
    /// <param name = "_taxInCostPrice">The tax in cost price value.</param>
    /// <param name = "_taxReportLayout">The tax report layout the record is being created for.</param>
    /// <param name = "_taxTrans">The TaxTrans record related to the TmpTaxReportById records in the collection.</param>
    /// <returns></returns>
    protected TmpTaxReportById setValuesOnRecordToBeInsertedByInsertInTmpTaxReportById(
        TmpTaxReportById    _tmpTaxReportById,
        TaxReportField      _taxReportField,
        AmountMST           _amount,
        Amount              _taxInCostPrice,
        TaxReportLayout     _taxReportLayout,
        TaxTrans            _taxTrans)
    {
        _tmpTaxReportById.TaxReportField = _taxReportField;
        _tmpTaxReportById.Amount         = _amount;
        _tmpTaxReportById.TaxInCostPrice = _taxInCostPrice;

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTaxAmountSummation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a calculation is targeted for tax amount or tax base amount.
    /// </summary>
    /// </param>
    /// <param name = "_isTaxAmountSummation">
    /// Indicates the calculation is for tax amount or not.
    /// </param>
    /// <returns>
    /// Returns true if calculation for tax amount, returns false if calculation for tax base amount.
    /// </returns>
    public boolean parmIsTaxAmountSummation(boolean _isTaxAmountSummation = isTaxAmountSummation)
    {
        isTaxAmountSummation = _isTaxAmountSummation;

        return isTaxAmountSummation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseAmountRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a calculation of reverse amount is required
    /// </summary>
    /// <param name = "_taxTrans">
    /// The <c>TaxTrans</c>  record related to the TmpTaxReportById records in the collection.
    /// </param>
    /// <param name = "_taxReportField">The tax report field value.</param>
    /// <param name = "_taxTable">
    /// The <c>TaxTable</c> record for the tax code on the tax transaction. This is used by customization logic for different report layouts.
    /// </param>
    /// <param name = "_taxReportLayout">The tax report layout the record is being created for.</param>
    /// <returns>
    /// Returns true if the condition is matched else false.
    /// </returns>
    private boolean isReverseAmountRequired(
        TaxTrans           _taxTrans,
        TaxReportField     _taxReportField,
        TaxTable           _taxTable,
        TaxReportLayout    _taxReportLayout)
    {
        #TaxReportingCodesAU
        boolean    retVal;

        if (_taxReportLayout == TaxReportLayout::Germany)
        {
            retVal = _taxReportField == _taxTable.RepFieldBaseUseTaxOffsetCreditNote ||
                     _taxReportField == _taxTable.RepFieldBaseUseTaxOffset ||
                     _taxReportField == _taxTable.RepFieldUseTaxOffsetCreditNote ||
                     _taxReportField == _taxTable.RepFieldUseTaxOffset;
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAU]))
        {
            retVal = (_taxReportField == #field_1E &&
                     _taxTrans.TaxDirection == TaxDirection::OutgoingTax) ||
                     ((_taxTable.RepFieldTaxOutgoing == #field_1C ||
                     _taxTable.RepFieldTaxOutgoing == #field_G9And1A) &&
                     (_taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
                     _taxTrans.TaxDirection == TaxDirection::OutgoingTax_W));
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if ((_taxTrans.ReverseCharge_W == NoYes::No) &&
                (_taxTrans.TaxValue < 0) &&
                (_taxReportField == _taxTable.RepFieldBaseOutgoing || _taxReportField == _taxTable.RepFieldBaseOutgoingCreditNote) &&
                (_taxTrans.TaxDirection == TaxDirection::OutgoingTax)
                )
            {
                //Before changing the sign of the amount we also have to make sure 
                //that there is a Tax Troup with the Tax Code marked as reversed
                TaxGroupData taxGroupData;
                select RecId from taxGroupData 
                    where taxGroupData.TaxCode == _taxTrans.TaxCode
                       && taxGroupData.ReverseCharge_W == NoYes::Yes;
                retVal = (taxGroupData.RecId != 0);
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>