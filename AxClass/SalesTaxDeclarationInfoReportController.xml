<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTaxDeclarationInfoReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTaxDeclarationInfoReportController</c> class is the controller for the <c>SalesTaxDeclarationInformation</c> report.
/// </summary>
public class SalesTaxDeclarationInfoReportController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initContract(Args _args)
    {
        SalesTaxDeclarationInfoReportContract contract = this.getDataContractObject() as SalesTaxDeclarationInfoReportContract;

        if (_args && _args.parmObject())
        {
            SalesTaxDeclarationInfoReportContract contractFromArgs = _args.parmObject() as SalesTaxDeclarationInfoReportContract;

            if (contractFromArgs)
            {
                contract.parmPrintReportOnly(contractFromArgs.parmPrintReportOnly());
                contract.parmReportingDate(contractFromArgs.parmReportingDate());
                contract.parmTaxPeriod(contractFromArgs.parmTaxPeriod());
                contract.parmTaxReportPeriodFromDate(contractFromArgs.parmTaxReportPeriodFromDate());
                contract.parmTaxReportPeriodToDate(contractFromArgs.parmTaxReportPeriodToDate());
                contract.parmTaxReportJournalId(contractFromArgs.parmTaxReportJournalId());
                contract.parmIsApproved(contractFromArgs.parmIsApproved());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.writeReport();

        if (TaxParameters::find().ItemizedVATStatement_HU)
        {
            SalesTaxDeclarationInfoReportContract contract = this.getDataContractObject() as SalesTaxDeclarationInfoReportContract;
            SalesTaxDeclarationInfoItemizedExcel_HU::printReport(contract);
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the <c>TaxReportJournal_W</c> record for the report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void writeReport()
    {
        SalesTaxDeclarationInfoReportContract contract = this.getDataContractObject() as SalesTaxDeclarationInfoReportContract;

        if (contract.parmPrintReportOnly())
        {
            // Update tax report journal as approved and tax report period as reported.
            SalesTaxDeclarationInfoReportController::updateReport(contract);
        }
        else
        {
            // Create tax report journal for the tax report period
            TaxReportJournal_W taxReportJournal = SalesTaxDeclarationInfoReportController::createReport(contract);
            contract.parmTaxReportJournalId(taxReportJournal.RecId);
            SalesTaxDeclarationInfoReportController::updateReport(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelReportForTaxReportPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels tax report for the tax report period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The tax report period.
    /// </param>
    /// <param name="_fromDate">
    /// The tax report period from date.
    /// </param>
    /// <param name="_toDate">
    /// The tax report period end date.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Only the last reporting period may be canceled.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void cancelReportForTaxReportPeriod(
        TaxPeriod _taxPeriod,
        TaxPeriodDate _fromDate,
        TaxPeriodDate _toDate)
    {
        TaxReportJournal_W taxReportJournal;
        TaxTransRefundableVAT taxTransRefundableVAT;

        if (_taxPeriod && _fromDate && _toDate)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceHU00007, funcName());

            ttsBegin;

            TaxReportPeriod taxReportPeriod = TaxReportPeriod::findLastForTaxPeriod(_taxPeriod, false, true);

            if (taxReportPeriod.TaxPeriod == _taxPeriod &&
                taxReportPeriod.FromDate == _fromDate &&
                taxReportPeriod.ToDate == _toDate)
            {
                update_recordSet taxTransRefundableVAT
                    setting ReportingDate = dateNull()
                    exists join taxReportJournal
                        where taxTransRefundableVAT.ReportingDate == taxReportJournal.ReportedDate &&
                            taxReportJournal.TaxPeriod == _taxPeriod &&
                            taxReportJournal.FromDate == _fromDate &&
                            taxReportJournal.ToDate == _toDate &&
                            taxReportJournal.Updated == NoYes::Yes;

                update_recordSet taxReportJournal
                    setting Updated = NoYes::No
                    where taxReportJournal.TaxPeriod == _taxPeriod &&
                        taxReportJournal.FromDate == _fromDate &&
                        taxReportJournal.ToDate == _toDate &&
                        taxReportJournal.Updated == NoYes::Yes;

                taxReportPeriod.Reported_HU = dateNull();
                taxReportPeriod.update();

                ttsCommit;
            }
            else
            {
                throw error("@GLS111769");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    private static TaxReportJournal_W createReport(SalesTaxDeclarationInfoReportContract _contract)
    {
        TaxReportJournal_W taxReportJournal;

        ttsBegin;

        taxReportJournal.TaxPeriod    = _contract.parmTaxPeriod();
        taxReportJournal.FromDate     = _contract.parmTaxReportPeriodFromDate();
        taxReportJournal.ToDate       = _contract.parmTaxReportPeriodToDate();
        taxReportJournal.ReportedDate = _contract.parmReportingDate();
        taxReportJournal.UseTax       = _contract.parmIncludeUseTax();
        taxReportJournal.Updated      = _contract.parmIsApproved();
        taxReportJournal.insert();

        ttsCommit;

        return taxReportJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReportForTaxReportPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes tax report for the tax report period.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The tax report period.
    /// </param>
    /// <param name="_fromDate">
    /// The tax report period from date.
    /// </param>
    /// <param name="_toDate">
    /// The tax report period end date.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteReportForTaxReportPeriod(
        TaxPeriod _taxPeriod,
        TaxPeriodDate _fromDate,
        TaxPeriodDate _toDate)
    {
        TaxReportJournal_W taxReportJournal;

        if (_taxPeriod && _fromDate && _toDate)
        {
            ttsBegin;

            delete_from taxReportJournal
                where taxReportJournal.TaxPeriod == _taxPeriod &&
                    taxReportJournal.FromDate == _fromDate &&
                    taxReportJournal.ToDate == _toDate;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesTaxDeclarationInfoReportController controller = SalesTaxDeclarationInfoReportController::construct(_args);
        controller.initContract(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReport</Name>
				<Source><![CDATA[
    private static void updateReport(SalesTaxDeclarationInfoReportContract _contract)
    {
        ttsBegin;

        TaxReportJournal_W taxReportJournal = TaxReportJournal_W::find(_contract.parmTaxReportJournalId(), true);

        if (taxReportJournal && _contract.parmIsApproved() && (!taxReportJournal.Updated || !_contract.parmPrintReportOnly()))
        {
            TaxReportPeriod taxReportPeriod = TaxReportPeriod::findByPeriodFromDateAndEndDate(
                taxReportJournal.TaxPeriod,
                taxReportJournal.FromDate,
                taxReportJournal.ToDate,
                true);

            if (taxReportPeriod )
            {
                taxReportJournal.Updated = NoYes::Yes;
                taxReportJournal.update();

                if (!taxReportPeriod.Reported_HU)
                {
                    taxReportPeriod.Reported_HU = taxReportJournal.ReportedDate;
                    taxReportPeriod.update();
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes the controller.
    /// </summary>
    /// <param name = "_args">
    /// The args object for the construct.
    /// </param>
    /// <returns>
    /// The controller object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SysOperationController construct(Args _args)
    {
        SysOperationController controller = new SalesTaxDeclarationInfoReportController(classstr(SalesTaxDeclarationInformationReportService),
                                                    methodstr(SalesTaxDeclarationInformationReportService, run),
                                                    SysOperationExecutionMode::Synchronous);
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>