<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FinTagLedgerAccrualTransReferenceGroupController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FinTagLedgerAccrualTransReferenceGroupController</c> class is a <c>FinTagReferenceGroupController</c> specific for <c>LedgerJournalTransAccrualTrans</c>.
/// </summary>
internal final class FinTagLedgerAccrualTransReferenceGroupController extends FinTagReferenceGroupController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerReferenceGroup</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void registerReferenceGroup(FinTagReferenceGroupControllerContract _contract)
    {
        if (_contract && _contract.parmReferenceGroupControl())
        {
            _contract.parmReferenceGroupControl().visible(true);

            FinTagLedgerAccrualTransReferenceGroupController controller = FinTagLedgerAccrualTransReferenceGroupController::construct(_contract);
            controller.initialize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static FinTagLedgerAccrualTransReferenceGroupController construct(FinTagReferenceGroupControllerContract _contract)
    {
        FinTagLedgerAccrualTransReferenceGroupController controller = new FinTagLedgerAccrualTransReferenceGroupController();
        controller.parmReferenceGroupControl(_contract.parmReferenceGroupControl());
        controller.parmCompanyReferenceField(_contract.parmCompanyReferenceField());

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finTag</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FinTag finTag()
    {
        FinTag ret;

        LedgerJournalTransAccrualTrans ledgerJournalTransAccrualTrans = this.dataSource().cursor() as LedgerJournalTransAccrualTrans;
        LedgerJournalTransAccrual ledgerJournalTransAccrual;
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly AccountOffsetaccount from ledgerJournalTransAccrual
                join FinTag, OffsetFinTag from ledgerJournalTrans
                    where ledgerJournalTransAccrual.RefRecId == ledgerJournalTransAccrualTrans.RefRecid
                        && ledgerJournalTrans.RecId == ledgerJournalTransAccrualTrans.RefRecid;

        AccountOffsetaccount accountOffsetAccount = ledgerJournalTransAccrual.AccountOffsetaccount;

        if (accountOffsetAccount == AccountOffsetaccount::Account)
        {
            ret = FinTag::find(ledgerJournalTrans.FinTag);
        }

        else if (accountOffsetAccount == AccountOffsetaccount::OffsetAccount)
        {
            ret = FinTag::find(ledgerJournalTrans.OffsetFinTag);
        }

        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>company</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public SelectableDataArea company()
    {
        SelectableDataArea ret;
        
        LedgerJournalTransAccrualTrans ledgerJournalTransAccrualTrans = this.dataSource().cursor() as LedgerJournalTransAccrualTrans;
        LedgerJournalTransAccrual ledgerJournalTransAccrual;
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly AccountOffsetaccount from ledgerJournalTransAccrual
                join Company, OffsetCompany from ledgerJournalTrans
                    where ledgerJournalTransAccrual.RefRecId == ledgerJournalTransAccrualTrans.RefRecid
                        && ledgerJournalTrans.RecId == ledgerJournalTransAccrualTrans.RefRecid;

        AccountOffsetaccount accountOffsetAccount = ledgerJournalTransAccrual.AccountOffsetaccount;

        if (accountOffsetAccount == AccountOffsetaccount::Account)
        {
            ret = ledgerJournalTrans.Company;
        }

        else if (accountOffsetAccount == AccountOffsetaccount::OffsetAccount)
        {
            ret = ledgerJournalTrans.OffsetCompany;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>