<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableChangeReviewImpactTreeFormControlBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTableChangeReviewImpactTreeFormControlBuilder</c> class is responsible for building the tree control 
/// which shows impacted orders.
/// </summary>
internal final class PurchTableChangeReviewImpactTreeFormControlBuilder
{
    private FormTreeControl treeControl;
    private Map treeNodesToImpactedOrdersMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>redrawTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redraws the tree control with "impacted orders" for the given changed purchase line.
    /// </summary>
    /// <param name = "_purchChangeLine">A changed purchase line to redraw a tree for.</param>
    public void redrawTree(ListEnumerator _purchChangeLineListEnumerator)
    {
        this.deleteAll();

        if (_purchChangeLineListEnumerator)
        {
            ListEnumerator mergedImpactedOrdersEnumerator = this.getMergedImpactedOrders(_purchChangeLineListEnumerator);
            this.addImpactedOrdersAsNodes(mergedImpactedOrdersEnumerator);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedImpactedOrders</Name>
				<Source><![CDATA[
    private ListEnumerator getMergedImpactedOrders(ListEnumerator _purchChangeLineListEnumerator)
    {
        Set mergedImpactedOrdersSet = new Set(Types::Container);
        List mergedImpactedOrdesList = new List(Types::Class);
        
        while(_purchChangeLineListEnumerator.moveNext())
        {
            PurchTableChangeReviewChangeLine purchChangeLine = _purchChangeLineListEnumerator.current();
            if(purchChangeLine)
            {
                ListEnumerator impactedOrdersEnumerator = purchChangeLine.getImpactedOrders();
                while (impactedOrdersEnumerator.moveNext())
                {
                    PurchTableChangeReviewImpactedOrder impactedOrder = impactedOrdersEnumerator.current();
                    if (impactedOrder &&
                        impactedOrder.isRootImpactOrder() && 
                        !mergedImpactedOrdersSet.in(impactedOrder.orderKey()))
                    {
                        mergedImpactedOrdersSet.add(impactedOrder.orderKey());
                        mergedImpactedOrdesList.addEnd(impactedOrder);
                    }
                }
            } 
        }

        return mergedImpactedOrdesList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedImpactedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets selected impacted order in the tree control.
    /// </summary>
    /// <returns>A selected impacted order.</returns>
    public PurchTableChangeReviewImpactedOrder selectedImpactedOrder()
    {
        int selectedTreeItemIdx = treeControl.getSelection();

        if (treeNodesToImpactedOrdersMap.exists(selectedTreeItemIdx))
        {
            return treeNodesToImpactedOrdersMap.lookup(selectedTreeItemIdx);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addImpactedOrdersAsNodes</Name>
				<Source><![CDATA[
    private void addImpactedOrdersAsNodes(ListEnumerator _impactedOrdersEnumerator, int _parentTreeNodeIdx = 0)
    {
        if (_impactedOrdersEnumerator)
        {
            while (_impactedOrdersEnumerator.moveNext())
            {
                PurchTableChangeReviewImpactedOrder impactedOrder = _impactedOrdersEnumerator.current();

                // when construct a 1st level, skip the "child" impacted orders - those should be shown as children of other impacted orders nodes.
                if (   _parentTreeNodeIdx != 0
                    || impactedOrder.isRootImpactOrder())
                {
                    FormTreeItem treeItem = new FormTreeItem(impactedOrder.impactDescription());
                    int treeItemIdx = treeControl.addItem(_parentTreeNodeIdx, 0, treeItem);

                    treeNodesToImpactedOrdersMap.add(treeItemIdx, impactedOrder);

                    // recursively show child impacted orders.
                    this.addImpactedOrdersAsNodes(impactedOrder.getChildImpactedOrdersEnumerator(), treeItemIdx);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAll</Name>
				<Source><![CDATA[
    private void deleteAll()
    {
        treeNodesToImpactedOrdersMap = new Map(Types::Integer, Types::Class);
        treeControl.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromControl</Name>
				<Source><![CDATA[
    public static PurchTableChangeReviewImpactTreeFormControlBuilder newFromControl(FormTreeControl _treeControl)
    {
        PurchTableChangeReviewImpactTreeFormControlBuilder builder = new PurchTableChangeReviewImpactTreeFormControlBuilder();

        builder.treeControl = _treeControl;

        return builder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>