<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAutomationActivityCreation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustAutomationActivityCreation
{
    private smmActivityPurpose purpose;
    private smmActivityTypeId typeId;
    private smmActivityUserMemo userMemo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForActivity</Name>
				<Source><![CDATA[
    internal protected static CustAutomationActivityCreation newForActivity(
        smmActivityPurpose _purpose,
        smmActivityTypeId _typeId,
        smmActivityUserMemo _userMemo)
    {
        CustAutomationActivityCreation activityCreation =  CustAutomationActivityCreation::construct();

        activityCreation.parmPurpose(_purpose);
        activityCreation.parmTypeId(_typeId);
        activityCreation.parmUserMemo(_userMemo);

        return activityCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal protected static CustAutomationActivityCreation construct()
    {
        return new CustAutomationActivityCreation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an activity for a customer that uses values from a template if provided, or global values if no template is provided.
    /// If a list of invoice is provided, then the invoices and activity will be linked in collections.
    /// </summary>
    /// <param name = "_accountNum">The account number for the customer.</param>
    /// <param name = "_template">A template to use for activity values</param>
    /// <param name = "_invoicesToLink">List of invoice to link to the activity.</param>
    /// <returns>The created activity.</returns>
    public smmActivities createActivity(
        AccountNum _accountNum,
        CustAutomationActivityTemplate _template = null,
        List _invoicesToLink = null)
    {
        smmActivities activity;
        CustTable custTable = CustTable::find(_accountNum);

        if (!custTable)
        {
            return activity;
        }

        activity.initValue();
        activity.setActivityNum();
        activity.Closed = _template ? (_template.DaysUntilClosed == 0 ? NoYes::Yes : NoYes::No) : NoYes::Yes;
        activity.modifiedField(fieldnum(smmActivities, Closed));
        activity.TypeId =  _template ? _template.TypeId : this.parmTypeId();
        activity.Purpose = _template ? _template.Purpose : this.parmPurpose();
        activity.UserMemo = _template ? _template.UserMemo : this.parmUserMemo();
        activity.insertParentLink(smmActivityParentType::Customer, custTable.RecId, true);
        activity.insertParentLink(smmActivityParentType::Collections, custTable.RecId);
        activity.EndDateTime = _template ? DateTimeUtil::addDays(activity.EndDateTime, _template.DaysUntilClosed) : activity.EndDateTime;
        activity.insert();

        if (_invoicesToLink)
        {
            ListEnumerator enumerator = _invoicesToLink.getEnumerator();
            while (enumerator.moveNext())
            {
                this.linkActivityToInvoice(activity, _template, CustTrans::findFromInvoice(enumerator.current(), _accountNum));
            }
        }

        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActivityToInvoice</Name>
				<Source><![CDATA[
    private void linkActivityToInvoice(
        smmActivities _activity,
        CustAutomationActivityTemplate _template,
        CustTrans _custTrans)
    {
        List activityList = new List(Types::Int64);
        activityList.addStart(_activity.RecId);

        List invoiceList = new List(Types::Int64);
        invoiceList.addStart(_custTrans.RecId);

        CustCollectionsLinkContext context = CustCollectionsLinkContext::construct();
        context.parmPrimaryList(activityList);
        context.parmReferenceList(invoiceList);
        context.parmAction(CustCollectionsLinkAction::LinkActivityAndTransaction);

        CustCollectionsLinkHandler handler = CustCollectionsLinkHandler::construct();
        handler.parmContext(context);
        handler.run();

        DocuRef docRef = DocuRef::find(_template.dataAreaId, _template.RecId);
        if (docRef)
        {
            DocuRef::createFromDocuRef(docRef, _activity.RecId, _activity.TableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurpose</Name>
				<Source><![CDATA[
    internal smmActivityPurpose parmPurpose(smmActivityPurpose _purpose = purpose)
    {
        purpose = _purpose;
        return purpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeId</Name>
				<Source><![CDATA[
    internal smmActivityTypeId parmTypeId(smmActivityTypeId _typeId = typeId)
    {
        typeId = _typeId;
        return typeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserMemo</Name>
				<Source><![CDATA[
    internal smmActivityUserMemo parmUserMemo(smmActivityUserMemo _userMemo = userMemo)
    {
        userMemo = _userMemo;
        return userMemo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceListForPredictionActivity</Name>
				<Source><![CDATA[
    internal List generateInvoiceListForPredictionActivity(CustAutomationInvoice _invoice)
    {
        CustTrans custTrans;
        CustTransOpen transOpen;
        PayPredPredictionResult predictionResult;
        List invoiceList = new List(Types::String);
        AccountNum accountNum = _invoice.AccountNum;
        CustAutomationPredictionInvoiceTmp predictionInvoices;
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        
        CustAutomationParameters param;
        select * from param;
        real lateScore = this.adjustBenchmark(param.PredictionLateBenchmark);
        real veryLateScore = this.adjustBenchmark(param.PredictionVeryLateBenchmark);

        // The bucket scores in PayPredPredictionResult need to be multiplied by 100 to convert to percentage values.
        insert_recordset predictionInvoices (Invoice, TransRefRecId, LateScore, VeryLateScore)
            select 
                Invoice,
                RecId
            from custTrans
                where custTrans.CustAutomationPredictionSent == NoYes::No
                    && custTrans.DueDate > currentDate
            join transOpen
                where custTrans.RecId == transOpen.RefRecId
                    && custTrans.accountNum == accountNum
                    && custTrans.AccountNum == transOpen.AccountNum
            join
                BucketLate1Score,
                BucketLate2Score
            from predictionResult
                where predictionResult.SourceRecId == transOpen.RecId
                    && ((predictionResult.BucketLate1Score * 100) + (predictionResult.BucketLate2Score * 100) >= lateScore || predictionResult.BucketLate2Score * 100 >= veryLateScore);
        
        invoiceList = this.insertInvoicesByPredictionType(predictionInvoices, lateScore, veryLateScore, _invoice);

        return invoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoicesByPredictionType</Name>
				<Source><![CDATA[
    private List insertInvoicesByPredictionType(CustAutomationPredictionInvoiceTmp _predictionInvoices, real _lateScore, real _veryLateScore, CustAutomationInvoice _invoice)
    {
        List invoiceList = new List(Types::String);
        const LabelString veryLate = "@CustAutomation:CustAutomationMultipleVeryLate";
        str predictionType = _invoice.Invoice;

        if (strCmp(predictionType, veryLate) == 0)
        {
            while select Invoice from _predictionInvoices
                where _predictionInvoices.VeryLateScore * 100 >= _veryLateScore
            {
                invoiceList.addEnd(_predictionInvoices.Invoice);
            }
        }
        else
        {
            while select Invoice from _predictionInvoices
                where _predictionInvoices.VeryLateScore * 100 < _veryLateScore
                    && (_predictionInvoices.LateScore * 100) + (_predictionInvoices.VeryLateScore * 100) >= _lateScore
            {
                invoiceList.addEnd(_predictionInvoices.Invoice);
            }
        }

        return invoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBenchmark</Name>
				<Source><![CDATA[
    private real adjustBenchmark(real _benchmark)
    {
        if (decRound(_benchmark, 0) >= _benchmark)
        {
            return decRound(_benchmark, 0) - 0.5;
        }
        else
        {
            return decRound(_benchmark, 0) + 0.5;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>