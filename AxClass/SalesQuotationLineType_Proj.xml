<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationLineType_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesQuotationTypeFactoryAttribute(QuotationType::Project)]
class       SalesQuotationLineType_Proj
extends     SalesQuotationLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the resource worker employment status is not terminated.
    /// </summary>
    /// <returns>true if the resource worker employment is not terminated; otherwise, false.</returns>
    public boolean checkResource()
    {
        boolean ret = true;

        if (salesQuotationLine.ProjectResource)
        {
            if ( (salesQuotationLine.ProjTransType != QuotationProjTransType::Item) &&
             (salesQuotationLine.ProjTransType != QuotationProjTransType::None) )
            {
                ret = ResourceFacade::validateNotTerminated(salesQuotationLine.ProjectResource);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSuppItem</Name>
				<Source><![CDATA[
    boolean enableSuppItem()
    {
        return (salesQuotationLine.ProjTransType == QuotationProjTransType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the sales category
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The sales category.
    /// </param>
    /// <returns>
    /// True whether the project category has been initialized.
    /// </returns>
    protected boolean getDefaultProjectGlobalCategory(RefRecId _ecoResCategory)
    {
        boolean         ret;

        ProjCategoryId projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory);
        if (projCategoryId)
        {
            salesQuotationLine.ProjCategoryId = projCategoryId;
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationConfirmTrans</Name>
				<Source><![CDATA[
    void initFromCustQuotationConfirmTrans(
        CustQuotationConfirmTrans custQuotationConfirmTrans,
        boolean                   copyPrecisely,
        boolean                   copyPriceDisc,
        boolean                   copyQty,
        Qty                       qty
        , PdsCWInventQty          _cwQty = 0
        )
    {
        super(custQuotationConfirmTrans, copyPrecisely, copyPriceDisc, copyQty, qty
    ,_cwQty
    );

        salesQuotationLine.ProjTransType        = custQuotationConfirmTrans.ProjTransType;
        salesQuotationLine.ItemId               = custQuotationConfirmTrans.ItemId;
        salesQuotationLine.ProjectResource      = custQuotationConfirmTrans.ProjectResource;
        salesQuotationLine.ProjCategoryId       = custQuotationConfirmTrans.ProjCategoryId;
        salesQuotationLine.ProjDescription      = custQuotationConfirmTrans.ProjDescription;
        salesQuotationLine.LinePropertyId       = custQuotationConfirmTrans.LinePropertyId;
        salesQuotationLine.StartDate            = custQuotationConfirmTrans.StartDate;
        salesQuotationLine.EndDate              = custQuotationConfirmTrans.EndDate;
        salesQuotationLine.TransDate            = custQuotationConfirmTrans.TransDate;
        salesQuotationLine.OffsetAccountType    = custQuotationConfirmTrans.OffsetAccountType;
        salesQuotationLine.OffsetLedgerDimension= custQuotationConfirmTrans.LedgerDimension;
        salesQuotationLine.OffsetCompany        = custQuotationConfirmTrans.OffsetCompany;
        salesQuotationLine.AccountType          = LedgerJournalACType::Project;
        salesQuotationLine.Company              = custQuotationConfirmTrans.Company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustQuotationTrans</Name>
				<Source><![CDATA[
    void  initFromCustQuotationTrans(CustQuotationTrans custQuotationTrans,
                                 boolean            copyPrecisely,
                                 boolean            copyPriceDisc,
                                 boolean            copyQty,
                                 Qty                qty
                                 , PdsCWInventQty   _cwQty = 0
                                 )
    {
        if ((custQuotationTrans.ProjTransType == QuotationProjTransType::None) ||
        (custQuotationTrans.ProjTransType == QuotationProjTransType::Item))
        {
            super(custQuotationTrans, copyPrecisely, copyPriceDisc, copyQty, qty
        ,_cwQty
        );
        }

        if (copyQty)
        {
            salesQuotationLine.setInventDimId(custQuotationTrans.InventDimId);
            salesQuotationLine.SalesQty           = qty;
            salesQuotationLine.SalesUnit          = custQuotationTrans.SalesUnit;
            salesQuotationLine.QtyOrdered         = salesQuotationLine.calcQtyOrdered();
        }
        else
        {
            InventDim inventDim = salesQuotationLine.inventDim();
            EcoResProductDimGroupSetup::copyProductDimensionsForItem(salesQuotationLine.ItemId, custQuotationTrans.inventDim(), inventDim);
            salesQuotationLine.setInventDimIdFromInventDim(inventDim);
        }

        if (copyPriceDisc)
        {
            salesQuotationLine.SalesPrice         = custQuotationTrans.SalesPrice;
            salesQuotationLine.PriceUnit          = custQuotationTrans.PriceUnit;
            salesQuotationLine.LinePercent        = custQuotationTrans.LinePercent;
            salesQuotationLine.LineDisc           = custQuotationTrans.LineDisc;
            salesQuotationLine.MultiLnDisc        = custQuotationTrans.MultiLnDisc;
            salesQuotationLine.MultiLnPercent     = custQuotationTrans.MultiLnPercent;
            salesQuotationLine.SalesMarkup        = custQuotationTrans.SalesMarkup;
            salesQuotationLine.LineAmount         = custQuotationTrans.LineAmount;
        }

        if (copyPrecisely)
        {
            salesQuotationLine.Name               = custQuotationTrans.Name;
            salesQuotationLine.ExternalItemId     = custQuotationTrans.ExternalItemId;
            salesQuotationLine.TaxGroup           = custQuotationTrans.TaxGroup;
            salesQuotationLine.OverrideSalesTax   = custQuotationTrans.OverrideSalesTax;
            salesQuotationLine.setTaxItemGroup(custQuotationTrans.TaxItemGroup);
            salesQuotationLine.DefaultDimension   = salesQuotationLine.copyDimension(custQuotationTrans.DefaultDimension, this.dimensionCopy());
            salesQuotationLine.SalesGroup         = custQuotationTrans.SalesGroup;
        }

        salesQuotationLine.ProjTransType        = custQuotationTrans.ProjTransType;
        salesQuotationLine.ItemId               = custQuotationTrans.ItemId;
        salesQuotationLine.ProjectResource      = custQuotationTrans.ProjectResource;
        salesQuotationLine.ProjCategoryId       = custQuotationTrans.ProjCategoryId;
        salesQuotationLine.ProjDescription      = custQuotationTrans.ProjDescription;
        salesQuotationLine.LinePropertyId       = custQuotationTrans.LinePropertyId;
        salesQuotationLine.StartDate            = custQuotationTrans.StartDate;
        salesQuotationLine.EndDate              = custQuotationTrans.EndDate;
        salesQuotationLine.TransDate            = custQuotationTrans.TransDate;
        salesQuotationLine.OffsetAccountType    = custQuotationTrans.OffsetAccountType;
        salesQuotationLine.OffsetLedgerDimension= custQuotationTrans.LedgerDimension;
        salesQuotationLine.OffsetCompany        = custQuotationTrans.OffsetCompany;
        salesQuotationLine.OffsetTxt            = custQuotationTrans.OffsetTxt;
        salesQuotationLine.AccountType          = LedgerJournalACType::Project;
        salesQuotationLine.Company              = custQuotationTrans.Company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesQuotationLine</c> object by using the <c>SalesCategory</c> record.
    /// </summary>
    /// <param name="_salesCategory">
    /// The <c>SalesCategory</c> record from which to initialize the <c>SalesQuotationLine</c> object.
    /// </param>
    /// <param name="_name">
    /// The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(SalesCategory _salesCategory, ItemFreeTxt _name)
    {
        InventTable     inventTable;

        super(_salesCategory, _name);

        if (salesQuotationLine.ItemId)
        {
            inventTable = salesQuotationLine.inventTable();
        }

        if (!inventTable.ProjCategoryId && _salesCategory)
        {
            boolean ret = this.getDefaultProjectGlobalCategory(_salesCategory);
            if (ret)
            {
                salesQuotationLine.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(salesQuotationLine.projId(), salesQuotationLine.ProjCategoryId);
                salesQuotationLine.TaxItemGroup = ProjParameters::taxItemGroupItem(salesQuotationLine.ProjCategoryId, salesQuotationLine.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void initFromInventTable(InventTable inventTable, boolean _searchPrice = true)
    {
        super(inventTable, _searchPrice);

        salesQuotationLine.ProjCategoryId = inventTable.ProjCategoryId ? inventTable.ProjCategoryId : salesQuotationLine.ProjCategoryId;

        if (!inventTable.ProjCategoryId && salesQuotationLine.SalesCategory)
        {
            this.getDefaultProjectGlobalCategory(salesQuotationLine.SalesCategory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationBasketLine</Name>
				<Source><![CDATA[
    void  initFromSalesQuotationBasketLine(SalesQuotationBasketLine salesQuotationBasketLine)
    {
        salesQuotationLine.ProjTransType    = salesQuotationBasketLine.ProjTransType;
        salesQuotationLine.ItemId           = salesQuotationBasketLine.ItemId;
        salesQuotationLine.ProjectResource  = salesQuotationBasketLine.ProjectResource;
        salesQuotationLine.ProjCategoryId   = salesQuotationBasketLine.ProjCategoryId;
        salesQuotationLine.TransDate        = salesQuotationBasketLine.TransDate;

        this.initFromInventTable(salesQuotationLine.inventTable());
        this.initFromProjCategoryId();
        this.initFromProjTable(this.projTable());

        InventDim inventDim = salesQuotationLine.inventDim();
        salesQuotationLine.setInventDimId(salesQuotationBasketLine.InventDimId);

        salesQuotationLine.initFromCustExternalItemDescription();

        salesQuotationLine.SalesQty           = salesQuotationBasketLine.SalesQty;
        //  salesQuotationLine.QtyOrdered         = salesQuotationLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    void initFromSalesQuotationLine(
        SalesQuotationLine _salesQuotationLine,
        boolean            _copyPrecisely,
        boolean            _copyPriceDisc,
        boolean            _copyQty,
        Qty                _qty
        , PdsCWInventQty   _cwQty = 0
        )
    {
        if ((_salesQuotationLine.ProjTransType == QuotationProjTransType::None) ||
        (_salesQuotationLine.ProjTransType == QuotationProjTransType::Item &&
        _salesQuotationLine.QuotationType == QuotationType::Sales))
        {
            super(_salesQuotationLine, _copyPrecisely, _copyPriceDisc, _copyQty, _qty
        , _cwQty
        );
        }
        else
        {
            this.setProjCategoryId(_salesQuotationLine.ProjCategoryId);
            if (_copyQty)
            {
                salesQuotationLine.setInventDimId(_salesQuotationLine.InventDimId);
                salesQuotationLine.SalesQty           = _qty;
                salesQuotationLine.SalesUnit          = _salesQuotationLine.SalesUnit;
                salesQuotationLine.QtyOrdered         = _salesQuotationLine.SalesQty == _qty ?
                                                    _salesQuotationLine.QtyOrdered      :
                                                     salesQuotationLine.calcQtyOrdered();
            }

            if (_copyPriceDisc)
            {
                this.copyPriceDiscFromSalesQuotationLine(_salesQuotationLine);
            }

            if (_copyPrecisely)
            {
                salesQuotationLine.setInventDimId(_salesQuotationLine.InventDimId);
                salesQuotationLine.Name               = _salesQuotationLine.Name;
                salesQuotationLine.ExternalItemId     = _salesQuotationLine.ExternalItemId;
                salesQuotationLine.LedgerDimension    = _salesQuotationLine.LedgerDimension;
                salesQuotationLine.TaxGroup           = _salesQuotationLine.TaxGroup;
                salesQuotationLine.setTaxItemGroup(_salesQuotationLine.TaxItemGroup);
                salesQuotationLine.DefaultDimension   = this.retrieveDefaultDimension(_salesQuotationLine);
                salesQuotationLine.OverDeliveryPct    = _salesQuotationLine.OverDeliveryPct;
                salesQuotationLine.UnderDeliveryPct   = _salesQuotationLine.UnderDeliveryPct;
                salesQuotationLine.SalesGroup         = _salesQuotationLine.SalesGroup;
                salesQuotationLine.BarCode            = _salesQuotationLine.BarCode;
                salesQuotationLine.BarCodeType        = _salesQuotationLine.BarCodeType;
                salesQuotationLine.Transport          = _salesQuotationLine.Transport;
                salesQuotationLine.Port               = _salesQuotationLine.Port;
                salesQuotationLine.StatProcId         = _salesQuotationLine.StatProcId;
                salesQuotationLine.setAddressFromSalesQuotationLine(_salesQuotationLine);
                salesQuotationLine.IntrastatCommodity = _salesQuotationLine.IntrastatCommodity;
                salesQuotationLine.OrigCountryRegionId = _salesQuotationLine.OrigCountryRegionId;
                salesQuotationLine.OrigStateId        = _salesQuotationLine.OrigStateId;
                salesQuotationLine.OverrideSalesTax = _salesQuotationLine.OverrideSalesTax;
            }
        }

        if (!_copyPrecisely)
        {
            salesQuotationLine.Name               = _salesQuotationLine.Name;
            salesQuotationLine.ExternalItemId     = _salesQuotationLine.ExternalItemId;
            salesQuotationLine.SalesGroup         = _salesQuotationLine.SalesGroup;
            salesQuotationLine.TaxGroup           = _salesQuotationLine.TaxGroup;
            salesQuotationLine.setTaxItemGroup(_salesQuotationLine.TaxItemGroup);
            salesQuotationLine.DefaultDimension   = this.retrieveDefaultDimension(_salesQuotationLine);
            salesQuotationLine.OverrideSalesTax = _salesQuotationLine.OverrideSalesTax;
        }

        salesQuotationLine.ProjTransType        = _salesQuotationLine.ProjTransType;
        salesQuotationLine.ItemId               = _salesQuotationLine.ItemId;
        if (salesQuotationLine.ProjTransType == QuotationProjTransType::Item)
        {
            this.setStockedProduct();
            salesQuotationLine.SalesCategory = _salesQuotationLine.SalesCategory;
        }
        salesQuotationLine.ProjectResource      = _salesQuotationLine.ProjectResource;
        salesQuotationLine.ProjCategoryId       = _salesQuotationLine.ProjCategoryId;
        salesQuotationLine.ProjDescription      = _salesQuotationLine.ProjDescription;
        salesQuotationLine.LinePropertyId       = _salesQuotationLine.LinePropertyId;
        salesQuotationLine.StartDate            = _salesQuotationLine.StartDate;
        salesQuotationLine.EndDate              = _salesQuotationLine.EndDate;
        salesQuotationLine.TransDate            = _salesQuotationLine.TransDate;
        salesQuotationLine.OffsetAccountType    = _salesQuotationLine.OffsetAccountType;
        salesQuotationLine.OffsetLedgerDimension= _salesQuotationLine.OffsetLedgerDimension;
        salesQuotationLine.OffsetCompany        = _salesQuotationLine.OffsetCompany;
        salesQuotationLine.OffsetTxt            = _salesQuotationLine.OffsetTxt;
        salesQuotationLine.AccountType          = LedgerJournalACType::Project;
        salesQuotationLine.Company              = _salesQuotationLine.Company;
        salesQuotationLine.CostPrice            = _salesQuotationLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>SalesQuotationLine</c> table.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The sales quotation line record.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>SalesQuotationLine</c> table.
    /// </returns>
    [Replaceable]
    protected DimensionDefault retrieveDefaultDimension(SalesQuotationLine _salesQuotationLine)
    {
        return salesQuotationLine.copyDimension(_salesQuotationLine.DefaultDimension, this.dimensionCopy());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpSuppItem</Name>
				<Source><![CDATA[
    void initFromTmpSuppItem(TmpSuppItem _tmpSuppItem)
    {
        super(_tmpSuppItem);

        salesQuotationLine.ItemId = _tmpSuppItem.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void  initValue()
    {
        super();

        salesQuotationLine.AccountType = LedgerJournalACType::Project;
        SalesQuotationTable salesQuotationTable = salesQuotationLine.salesQuotationTable();

        ProjTable projTable = ProjTable::find(salesQuotationTable.ProjIdRef);
        if (projTable)
        {
            this.initFromProjTable(projTable);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            salesQuotationLine.TransDate = salesQuotationTable.PSAEstProjStartDate;
        }
        else
        {
            salesQuotationLine.TransDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        this.setPeriodDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventBeQuotationControlled</Name>
				<Source><![CDATA[
    boolean  mustInventBeQuotationControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    ProjTable projTable()
    {
        ProjId projId = salesQuotationLine.salesQuotationTable().ProjIdRef;
        if (projId)
        {
            return ProjTable::find(projId);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxItemGroup</Name>
				<Source><![CDATA[
    void setTaxItemGroup(TaxItemGroup _taxItemGroup)
    {
        if (ProjParameters::find().TaxItemGroupMethod == ProjTaxItemGroupMethod::Category)
        {
            super(ProjCategory::find(salesQuotationLine.ProjCategoryId).TaxItemGroupId);
        }
        else
        {
            super(_taxItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId fieldId)
    {
        boolean ret = super(fieldId);

        if (ret)
        {
            switch (fieldId)
            {
                case fieldNum(SalesQuotationLine, ProjectResource):
                    ret = this.checkResource();
                    break;

                case fieldNum(SalesQuotationLine, ProjCategoryId):
                if (salesQuotationLine.ProjCategoryId)
                    {
                        ProjCategory projCategory = ProjCategory::find(salesQuotationLine.ProjCategoryId);
                        switch (salesQuotationLine.ProjTransType)
                        {
                            case QuotationProjTransType::Fee:
                            if (projCategory.CategoryType != ProjCategoryType::Revenue)
                                {
                                    ret = checkFailed(strFmt("@SYS54897",salesQuotationLine.ProjCategoryId));
                                }
                                if (ret && (projCategory.SetupEstimate || projCategory.SetupSubscription))
                                {
                                    ret = checkFailed("@SYS88806");
                                }

                                ret = ret && projCategory.validateIfInactiveAllowed();
                                break;

                            default:
                                ret = projCategory.validateIfInactiveAllowed();
                                break;
                        }
                    }
                    break;

                case fieldNum(SalesQuotationLine, TransDate) :
                    ret = salesQuotationLine.validateProjectDate(salesQuotationLine);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjTransTypeExpense</Name>
				<Source><![CDATA[
    boolean validateProjTransTypeExpense()
    {
        boolean         retOk           = true;

        retOk = ProjCategory::find(salesQuotationLine.ProjCategoryId).validateIfInactiveAllowed();

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjTransTypeFee</Name>
				<Source><![CDATA[
    boolean validateProjTransTypeFee()
    {
        boolean             retOk           = true;

        ProjCategory projCategory = ProjCategory::find(salesQuotationLine.ProjCategoryId);

        if (projCategory.SetupEstimate)
        {
            // The value %1 in field 'Category' is not allowed according to the category setup.
            retOk = checkFailed(strFmt("@SYS100383", salesQuotationLine.ProjCategoryId));
        }
        // subscription categories are allowed in project quotation
        if (retOk && !projCategory.SetupSubscription)
        {
            retOk = projCategory.validateIfInactiveAllowed();
        }

        if (retOk)
        {
            retOk = ProjJournalTrans::checkCategoryResourceOption(salesQuotationLine.ProjCategoryId, salesQuotationLine.ProjectResource);
        }

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjTransTypeHour</Name>
				<Source><![CDATA[
    boolean validateProjTransTypeHour()
    {
        boolean         retOk           = true;

        retOk =  ProjCategory::find(salesQuotationLine.ProjCategoryId).validateIfInactiveAllowed();

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjTransTypeItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>SalesQuotationLine</c> table buffer.
    /// </summary>
    /// <returns>
    /// true if <c>SalesQuotationLine</c> table buffer has all necessary information; otherwise, false.
    /// </returns>
    boolean validateProjTransTypeItem()
    {
        boolean retOk = true;

        retOk = ProjCategory::find(salesQuotationLine.ProjCategoryId).validateIfInactiveAllowed();

        if (this.validateSalesQuotationLineForItemIdAndSalesCategory())
        {
            retOk = checkFailed("@SYS134349");
        }

        if (salesQuotationLine.ItemId && !salesQuotationLine.inventTable())
        {
            retOk = checkFailed(strFmt("@SYS5307", salesQuotationLine.ItemId));
        }

        if (! salesQuotationLine.checkTaxItemGroup()     ||
        ! salesQuotationLine.checkQuotationType()    ||
        ! salesQuotationLine.checkCurrencyCode()     ||
        ! salesQuotationLine.checkItemId())
        {
            retOk = false;
        }

        if (retOk && salesQuotationLine.BarCodeType)
        {
            if (!BarcodeSetup::find(salesQuotationLine.BarCodeType).validateBarcode(salesQuotationLine.BarCode))
            {
                retOk = false;
            }
        }

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesQuotationLineForItemIdAndSalesCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check fields <c>ItemId</c> and <c>SalesCategory</c> on <c>SalesQuotationLine</c> are filled.
    /// </summary>
    /// <returns>
    /// true if fields <c>ItemId</c> and <c>SalesCategory</c> are filled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is being called from <c>validateProjTransTypeItem</c> method.
    /// </remarks>
    protected boolean validateSalesQuotationLineForItemIdAndSalesCategory()
    {
        return !salesQuotationLine.ItemId && !salesQuotationLine.SalesCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSalesQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Quantity</c> field can be validated.
    /// </summary>
    /// <returns>
    /// true if quantity can be validated; otherwise, false.
    /// </returns>
    boolean validateSalesQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean             retOk   = true;
        ProjValCheckTrans   projValCheckTrans = new ProjValCheckTrans();

        retOk = super();

        if (retOk && !salesQuotationLine.ProjTransType)
        {
            retOk = checkFailed("@SYS84629");
        }

        if (retOk && !this.checkIsCategorySpecified())
        {
            retOk = checkFailed("@SYS78502");
        }

        retOk = retOk && this.checkResource();

        if (retOk)
        {
            switch (salesQuotationLine.ProjTransType)
            {
                case QuotationProjTransType::Expense          :
                    retOk = this.validateProjTransTypeExpense();
                    break;

                case QuotationProjTransType::Fee              :
                    retOk = this.validateProjTransTypeFee();
                    break;

                case QuotationProjTransType::Hour             :
                    retOk = this.validateProjTransTypeHour();
                    break;

                case QuotationProjTransType::Item             :
                    retOk = this.validateProjTransTypeItem();
                    break;
            }
        }

        if (retOk && salesQuotationLine.ProjCategoryId && salesQuotationLine.ProjectResource
            && (salesQuotationLine.ProjTransType != QuotationProjTransType::Item) &&
            (salesQuotationLine.ProjTransType != QuotationProjTransType::None) )
        {
            projValCheckTrans.validateMandatory(salesQuotationLine);
        }

        return retOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsCategorySpecified</Name>
				<Source><![CDATA[
    protected boolean checkIsCategorySpecified()
    {
        return salesQuotationLine.ProjCategoryId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesQuotationLineType::construct() instead.', true, 31\05\2017)]
    static SalesQuotationLineType construct(SalesQuotationLine  _salesQuotationLine)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>InventUpd</c> to be estimated or not.
    /// </summary>
    /// <returns>
    /// true if it can be estimated;else false
    /// </returns>
    public boolean  mustInventUpdEstimated()
    {
        SalesQuotationTable salesQuotationTable = salesQuotationLine.salesQuotationTable();

        // No inventrans on templates
        if (salesQuotationTable.isTemplate())
        {
            return false;
        }
                
        // No inventrans on project quotation lines where type <> 'Item'
        if ((salesQuotationLine.QuotationType == QuotationType::Project)        &&
            (salesQuotationLine.ProjTransType != QuotationProjTransType::Item))
        {
            return false;
        }
        
        SalesQuotationStatus quotationStatus = salesQuotationTable.QuotationStatus;
        
        if ((quotationStatus != SalesQuotationStatus::Created) &&
            (quotationStatus != SalesQuotationStatus::Sent)    &&
            (quotationStatus != SalesQuotationStatus::Confirmed) &&
            (quotationStatus != SalesQuotationStatus::Lost)    &&
            (quotationStatus != SalesQuotationStatus::Cancelled) &&
            (quotationStatus != SalesQuotationStatus::Revised)  &&
            (quotationStatus != SalesQuotationStatus::Modified) ||
            ((salesQuotationLine.orig().QuotationStatus == SalesQuotationStatus::Submitted) &&
            (salesQuotationLine.QuotationStatus == SalesQuotationStatus::Created)))
        {
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>