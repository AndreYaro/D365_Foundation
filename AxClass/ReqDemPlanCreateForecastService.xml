<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanCreateForecastService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanCreateForecastService</c> is a service class for launching forecast generation.
/// </summary>
public class ReqDemPlanCreateForecastService
{
    #ReqDemPlan
    #ReqDemPlanTask

    ReqDemPlanBaselineForecast      baselineForecast;
    ReqDemPlanForecastAggregator    forecastAggregator;

    private ReqDemPlanInstrumentationLogger instrumentationLogger;

    private readonly boolean batchResumeIsEnabled;
    private ReqDemPlanCreateForecastResumeProcessHelper restartResumeHelper;
    private ReqDemPlanGeneratedForecastRecId generatedForecastRecID;
    private Batch currentBatchTask;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyTrackChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Applies all the tracked changes on the generated forecast if the user has requested so.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract.
    /// </param>
    /// <param name="_logger">
    ///     The logger instance.
    /// </param>
    private void applyTrackChanges(
        ReqDemPlanCreateForecastDataContract    _dataContract,
        ReqDemPlanTaskLoggerInterface           _logger)
    {
        ReqDemPlanForecastChangeTracker     changeTracker       = null;
        ReqDemPlanGeneratedForecast         lastTrackedForecast = ReqDemPlanForecastChangeEntry::findLatestChangeLog();

        if (_dataContract.parmTransferChanges() && lastTrackedForecast)
        {
            if (lastTrackedForecast.DateGranularity == _dataContract.parmDateGranularity())
            {
                changeTracker = ReqDemPlanForecastChangeTracker::newStandard(lastTrackedForecast.RecId);
            }
            else
            {
                warning("@DMP1173");
                _logger.appendTaskDetailLog("@DMP1173");
            }
        }

        if (changeTracker)
        {
            changeTracker.applyAllChanges(ReqDemPlanForecastVersion::Forecasted);

            if (changeTracker.modifiedRecordsCount() != 0)
            {
                _logger.appendTaskDetailLog(strFmt("@DMP1174", changeTracker.modifiedRecordsCount()));
                info(strFmt("@DMP1174", changeTracker.modifiedRecordsCount()));
            }
            else
            {
                info("@DMP1175");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMissingForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates forecast records for granularities with date gaps,
    ///     and products without any forecast.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract instance.
    /// </param>
    /// <param name="_allocationKeyFilter">
    ///     The allocation key filter table buffer.
    /// </param>
    /// <param name="_logger">
    ///     The logger instance.
    /// </param>
    protected void fillMissingForecast(
        ReqDemPlanCreateForecastDataContract    _dataContract,
        ReqDemPlanAllocationKeyFilterTmp        _allocationKeyFilter,
        ReqDemPlanTaskLoggerInterface           _logger)
    {
        ReqDemPlanMissingForecastFiller missingForecastFiller;

        missingForecastFiller = ReqDemPlanMissingForecastFiller::newParameters(
            _dataContract,
            _allocationKeyFilter,
            _logger);

        missingForecastFiller.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        baselineForecast    = ReqDemPlanBaselineForecast::construct();
        forecastAggregator  = ReqDemPlanForecastAggregator::construct();
        currentBatchTask    = BatchHeader::getCurrentBatchTask();

        batchResumeIsEnabled = FeatureStateProvider::isFeatureEnabled(ReqDemPlanCreateForecastResumeFeature::instance()) 
            && BatchHeader::isExecutingInBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForecastAggregator</Name>
				<Source><![CDATA[
    public ReqDemPlanForecastAggregator parmForecastAggregator(ReqDemPlanForecastAggregator _forecastAggregator = forecastAggregator)
    {
        forecastAggregator = _forecastAggregator;
        return forecastAggregator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refillForecastTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refills forecast table with adjusted forecast used for accuracy calculation.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract to use.
    /// </param>
    /// <param name="_logger">
    ///     The logger to use.
    /// </param>
    private void refillForecastTable(ReqDemPlanCreateForecastDataContract _dataContract, ReqDemPlanTaskLoggerInterface _logger)
    {
        ReqDemPlanForecastTableBuilder      forecastTableBuilder    = ReqDemPlanForecastTableBuilder::construct();
        ReqDemPlanExportBaseDataContract    baseDataContract        = new ReqDemPlanExportBaseDataContract();

        baseDataContract.parmHistoricalStart(_dataContract.parmHistoricalStart());
        baseDataContract.parmHistoricalEnd(_dataContract.actualDemandEndDate());
        baseDataContract.parmDateGranularity(_dataContract.parmDateGranularity());
        baseDataContract.parmPlanningGroupQueryStr(_dataContract.parmPlanningGroupQueryStr());

        forecastTableBuilder.parmLogger(_logger);

        forecastTableBuilder.refill(
            baseDataContract,
            ReqDemPlanForecastParameters::find(),
            ReqDemPlanForecastVersion::Adjusted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstrumentationLogger</Name>
				<Source><![CDATA[
    internal ReqDemPlanInstrumentationLogger getInstrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = ReqDemPlanInstrumentationLogger::createLogger(classStr(ReqDemPlanCreateForecastService));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginResumableProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Begins the generate forecast process.
    /// </summary>
    protected void beginResumableProcess()
    {
        if (batchResumeIsEnabled)
        {
            restartResumeHelper.setForecastId(generatedForecastRecID);
            restartResumeHelper.beginProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endResumableProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the generate forecast process as completed.
    /// </summary>
    protected void endResumableProcess()
    {
        if (batchResumeIsEnabled)
        {
            restartResumeHelper.endProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcessStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set currently executed process stage.
    /// </summary>
    /// <param name = "_stage">The stage,</param>
    protected void setProcessStage(ReqDemPlanForecastCreateProcessStage _stage)
    {
        if (batchResumeIsEnabled)
        {
            restartResumeHelper.parmProcessStage(_stage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processStageCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark current process stage as completed.
    /// </summary>
    protected void processStageCompleted()
    {
        if (batchResumeIsEnabled)
        {
            restartResumeHelper.processStageCompleted();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExecuteProcessStage</Name>
				<Source><![CDATA[
    private boolean shouldExecuteProcessStage()
    {
        if (!batchResumeIsEnabled)
        {
            return true;
        }

        return restartResumeHelper.shouldExecuteProcessStage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessResumed</Name>
				<Source><![CDATA[
    private boolean isProcessResumed()
    {
        return currentBatchTask.retryCount > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resumeProcess</Name>
				<Source><![CDATA[
    private void resumeProcess(ReqDemPlanTaskLoggerInterface _logger)
    {
        restartResumeHelper.resumeProcess(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Launches the forecast generation process.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    public void run(ReqDemPlanCreateForecastDataContract _dataContract)
    {
        ReqDemPlanStagingTableBuilder       stagingTableBuilder = ReqDemPlanStagingTableBuilder::construct();
        ReqDemPlanTaskLoggerInterface       logger;
        ReqDemPlanTaskProcessedRecordCount  filledRecordsCount;

        this.getInstrumentationLogger();
        using (var activity = instrumentationLogger.activities().generateStatisticalBaselineForecast())
        {
            using (var lock = ReqReaderWriterLock::construct())
            {
                if (!_dataContract || !_dataContract.validate())
                {
                    error("@DMP1047");
                    return;
                }

                if (ReqMRPReaderWriterLockOwnerTrackingToggle::instance().isEnabled())
                {
                    lock.enableLockOwnerTracking();
                }

                if (ReqMRPReaderWriterLockRetryAcquiringLockToggle::instance().isEnabled())
                {
                    lock.enableRetryOnAcquiringLock();
                }

                if (!lock.tryEnterWriterLock(#DemPlanGlobalLockName))
                {
                    error("@DMP1216");
                    return;
                }

                _dataContract.parmTodaysDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                boolean isForecastResumed = false;
                if (batchResumeIsEnabled)
                {
                    restartResumeHelper = ReqDemPlanCreateForecastResumeProcessHelper::construct(currentBatchTask, instrumentationLogger);

                    restartResumeHelper.loadResumeContext();
                    if (!restartResumeHelper.prepareRestartResume())
                    {
                        error("@DMP:CreateForecastRestartdResumeFailed");
                        return;
                    }

                    if (restartResumeHelper.canResume())
                    {
                        isForecastResumed = true;
                        logger = restartResumeHelper.getTaskLoggerForResume();
                        this.resumeProcess(logger);
                    }
                }

                if (!batchResumeIsEnabled || !isForecastResumed)
                {
                    logger = ReqDemPlanTaskLogger::constructInstrumented(instrumentationLogger);
                }

                this.setProcessStage(ReqDemPlanForecastCreateProcessStage::SaveGeneratedForecastInfo);
                if (this.shouldExecuteProcessStage())
                {
                    this.saveGeneratedForecastInfo(_dataContract, logger);

                    this.beginResumableProcess();

                    this.processStageCompleted();
                }

                try
                {
                    _dataContract.attributeManager().disableAttributesWithDisabledConfigurationKeys();

                    stagingTableBuilder.parmLogger(logger);
                    stagingTableBuilder.parmPreAggregateData(false);
                    baselineForecast.parmLogger(logger);

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::ExecuteStagingBuilder);
                    if (this.shouldExecuteProcessStage())                    
                    {
                        filledRecordsCount = stagingTableBuilder.refill(_dataContract);

                        if (filledRecordsCount == 0)
                        {
                            warning("@DMP1354");

                            if (_dataContract.hasIntercompanyPlanningGroupFilter())
                            {
                                warning("@DMP1404", '', SysInfoAction_Formrun::newFormname(formStr(ReqIntercompanyPlanningGroupSetup)));
                            }
                        }

                        this.processStageCompleted();
                    }

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::RefillForecastTable);
                    if (this.shouldExecuteProcessStage())
                    {
                        this.refillForecastTable(_dataContract, logger);

                        lock.ensureStillHasUpdateLock(#DemPlanGlobalLockName);

                        this.processStageCompleted();
                    }

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::CreateBaseLineForecast);
                    if (this.shouldExecuteProcessStage())
                    {
                        this.createBaselineForecast(_dataContract);

                        lock.ensureStillHasUpdateLock(#DemPlanGlobalLockName);

                        this.processStageCompleted();
                    }

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::FillMissingForecast);
                    if (this.shouldExecuteProcessStage())
                    {
                        this.fillMissingForecast(_dataContract, stagingTableBuilder.getAllocationKeyFilter(), logger);

                        lock.ensureStillHasUpdateLock(#DemPlanGlobalLockName);

                        this.processStageCompleted();
                    }

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::ApplyTrackChanges);
                    if (this.shouldExecuteProcessStage())
                    {
                        this.applyTrackChanges(_dataContract, logger);

                        lock.ensureStillHasUpdateLock(#DemPlanGlobalLockName);

                        this.processStageCompleted();
                    }

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::FillForecastDateBuckets);
                    if (this.shouldExecuteProcessStage())
                    {
                        this.fillForecastDateBuckets(_dataContract, logger);

                        lock.ensureStillHasUpdateLock(#DemPlanGlobalLockName);

                        this.processStageCompleted();
                    }

                    this.setProcessStage(ReqDemPlanForecastCreateProcessStage::PreAggregateForecast);
                    if (this.shouldExecuteProcessStage())
                    {
                        this.preAggregateForecast(_dataContract, logger);

                        this.processStageCompleted();
                    }

                    this.endResumableProcess();

                    info("@DMP1025");
                }
                catch(Exception::CLRError)
                {
                    error("@DMP1467");
                    error(ReqDemPlanExceptionHelper::getLastExceptionMessage(logger));
                }
                catch
                {
                    error("@DMP1467");
                }

                logger.finishLogging();
                lock.releaseAllLocks();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaselineForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exposes the instance of the <c>ReqDemPlanBaselineForecast</c> class.
    /// </summary>
    /// <returns>The instance of the <c>ReqDemPlanBaselineForecast</c> class.</returns>
    public ReqDemPlanBaselineForecast getBaselineForecast()
    {
        return baselineForecast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveGeneratedForecastInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Saves the generated forecast information based on the specified data contract and logger.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract to use.
    /// </param>
    /// <param name="_logger">
    ///     The logger to use.
    /// </param>
    protected void saveGeneratedForecastInfo(
        ReqDemPlanCreateForecastDataContract    _dataContract,
        ReqDemPlanTaskLoggerInterface           _logger)

    {
        ReqDemPlanGeneratedForecast forecast;
        forecast.initFromContract(_dataContract);
        forecast.initFromLogger(_logger);
        forecast.insert();

        generatedForecastRecID = forecast.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaselineForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates baseline forecast.
    /// </summary>
    /// <param name = "_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    protected void createBaselineForecast(ReqDemPlanCreateForecastDataContract _dataContract)
    {
        baselineForecast.create(_dataContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preAggregateForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pre-aggregates the generated forecast based on given granularity and enabled attributes.
    /// </summary>
    /// <param name = "_dataContract">The data contract.</param>
    /// <param name = "_logger">The logger instance.</param>
    private void preAggregateForecast(ReqDemPlanCreateForecastDataContract _dataContract, ReqDemPlanTaskLoggerInterface _logger)
    {
        _logger.startMonitoredTask(ReqDemPlanTaskCodes::AggregateForecast, "@DMP:AggregationTask");

        _dataContract.attributeManager().setupPivotAttributes(_dataContract.attributeManager().getAllEnabledAttributes());
        forecastAggregator.aggregate(_dataContract.parmDateGranularity());

        _logger.finishTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillForecastDateBuckets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fill forecast date buckets based on given data contract.
    /// </summary>
    /// <param name = "_dataContract">The data contract.</param>
    /// <param name = "_logger">The logger instance.</param>
    private void fillForecastDateBuckets(ReqDemPlanCreateForecastDataContract _dataContract, ReqDemPlanTaskLoggerInterface _logger)
    {
        date startDate = _dataContract.calculateActualHistoricalStartDate();
        date endDate = _dataContract.actualDemandEndDate();

        _logger.startMonitoredTask(ReqDemPlanTaskCodes::FillDateBuckets, "@DMP:FillDateBucketsTask");

        var  bucketFiller = new ReqDemPlanBucketFiller(startDate, endDate, _dataContract.parmDateGranularity());
        var filledRecords = bucketFiller.fill();

        _logger.incrementTaskRecordsProcessed(filledRecords);
        _logger.finishTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransientSqlConnectionErrorRetryEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the ReqDemPlanHandleTransientSqlConnectionErrorFlight feature flight and other flights that enable lock reacquiring.
    /// </summary>
    /// <returns>Try if TransientSqlConnectionError can be retried;otherwise, false.</returns>
    internal static boolean isTransientSqlConnectionErrorRetryEnabled()
    {
        return ReqReaderWriterLockLockReacquiringOnEnterToggle::instance().isEnabled()
            && isFlightEnabled(ReqReaderWriterLock::ReaderWriterUserConnectionFlightingName)
            && ReqMRPReaderWriterLockOwnerTrackingToggle::instance().isEnabled()
            && ReqMRPReaderWriterLockRetryAcquiringLockToggle::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRetryTransientSqlConnectionError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the TransientSqlConnectionError can be retried.
    /// </summary>
    /// <param name = "_reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled">A feature value.</param>
    /// <returns>True if error can be retried; otherwise, false.</returns>
    internal static boolean canRetryTransientSqlConnectionError(boolean _reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled)
    {
        return _reqDemPlanHandleTransientSqlConnectionErrorFlightIsEnabled
            && ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransientSqlConnectionError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if Exception::Error that occured is due to a TransientSqlConnectionError error based on infolog messages.
    /// </summary>
    /// <param name = "_infologLineTry">The infolog line number of the try statement that caught the exception.</param>
    /// <returns>true if Exception::Error that occured is due to a SQL error; otherwise, false.</returns>
    internal static boolean isTransientSqlConnectionError(int _infologLineTry)
    {
        return ReqTransientSqlConnectionErrorHandlingHelper::isExceptionErrorCausedBySQLError(_infologLineTry + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRetryDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Repopulates the tmp table before retry.
    /// </summary>
    /// <param name = "_dataContract">The data contract class.</param>
    /// <param name = "_allocationKeyFilterTable">The tmp table to repopulate.</param>
    internal static void prepareRetryDataContract(ReqDemPlanCreateForecastDataContract _dataContract, ReqDemPlanAllocationKeyFilterTmp _allocationKeyFilterTable)
    {
        if (_dataContract)
        {
            ReqDemPlanDataProcessingHelper  dataHelper = new ReqDemPlanDataProcessingHelper();
            dataHelper.prepareAllocationKeyFilter(ReqDemPlanBaselineForecast::getAllocationKeysWithDataStatic(_dataContract.getFilterQuery()), _allocationKeyFilterTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTransientErrorRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs information for failed task.
    /// </summary>
    /// <param name = "_logger">The logger.</param>
    /// <param name = "_failTask">The parameter that specify if task should be failed. true if the task should be failed; otherwise, false.</param>
    internal static void logTransientErrorRetry(ReqDemPlanTaskLoggerInterface _logger, boolean _failTask = false)
    {
        if (_logger)
        {
            var currentRetryCount = xSession::currentRetryCount();
            _logger.appendTaskDetailLogWithTelemetry(strFmt("@DMP:RetryTransientSqlConnectionError", currentRetryCount));

            if (_failTask)
            {
                _logger.taskFailed();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForecastGenerationInProgress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if forecast generation is in progress.
    /// </summary>
    /// <returns>True if forecast generation is in progress; otherwhise false</returns>
    public static boolean isForecastGenerationInProgress()
    {
        return !ReqReaderWriterLock::testWriter(#DemPlanGlobalLockName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>