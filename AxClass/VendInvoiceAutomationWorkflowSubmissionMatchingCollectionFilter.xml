<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmissionMatchingCollectionFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Invoice collection filter for filtering out invoices that have not yet completed matching.
/// </summary>
internal class VendInvoiceAutomationWorkflowSubmissionMatchingCollectionFilter implements VendInvoiceAutomationIWorkflowSubmissionCollectionFilter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmissionMatchingCollectionFilter construct()
    {
        return new VendInvoiceAutomationWorkflowSubmissionMatchingCollectionFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyVendorInvoiceFilter</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public VendInvoiceAutomationInvoiceTmp applyVendorInvoiceFilter(VendInvoiceAutomationInvoiceTmp _invoicesForSubmission)
    {
        VendInvoiceAutomationInvoiceTmp invoicesThatMeetMatchingCriteria;

        this.gatherInvoicesWhereMatchingNotRequiredV2(_invoicesForSubmission, invoicesThatMeetMatchingCriteria);
        
        this.filterInvoicesWherePrepaymentFailedAndBlocked(invoicesThatMeetMatchingCriteria);
        this.gatherInvoicesWhereMatchingRequirementsAreMet(_invoicesForSubmission, invoicesThatMeetMatchingCriteria);

        return invoicesThatMeetMatchingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gatherInvoicesWhereMatchingNotRequired</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp gatherInvoicesWhereMatchingNotRequired(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForWorkflowSubmission,
        VendInvoiceAutomationInvoiceTmp _invoicesThatMeetMatchingCriteria)
    {
        insert_recordset _invoicesThatMeetMatchingCriteria(
            VendInvoiceRecId,
            VendInvoiceDataAreaId,
            VendParametersAutomationPrepaymentApplication,
            VendParametersBlockAutomationWhenPrepaymentApplicationFailed)
            select VendInvoiceRecId, VendInvoiceDataAreaId, VendParametersAutomationPrepaymentApplication, VendParametersBlockAutomationWhenPrepaymentApplicationFailed
                from _invoicesEligibleForWorkflowSubmission
                where _invoicesEligibleForWorkflowSubmission.VendParametersRequireMatchBeforeWorkflowSubmit == NoYes::No;

        return _invoicesThatMeetMatchingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gatherInvoicesWhereMatchingNotRequiredV2</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp gatherInvoicesWhereMatchingNotRequiredV2(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForWorkflowSubmission,
        VendInvoiceAutomationInvoiceTmp _invoicesThatMeetMatchingCriteria)
    {
        DocumentEvent documentEvent;
        DocumentEventLog documentEventLog;

        EnumId matchingDocumentEventEnumId = enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent);
        DocumentEventEnumValue matchingNotApplicableValue = enum2int(VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable);
        DocumentEventEnumValue matchingFailedValue = enum2int(VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed);
        DocumentEventEnumValue matchingCompletedValue = enum2int(VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed);

        insert_recordset _invoicesThatMeetMatchingCriteria(VendInvoiceRecId, VendInvoiceDataAreaId)
            select VendInvoiceRecId, VendInvoiceDataAreaId from _invoicesEligibleForWorkflowSubmission
            where _invoicesEligibleForWorkflowSubmission.VendParametersRequireMatchBeforeWorkflowSubmit == NoYes::No
                    && _invoicesEligibleForWorkflowSubmission.VendParametersAutomationProductReceiptMatching == NoYes::Yes
                exists join documentEventLog
                    where documentEventLog.SourceRecId == _invoicesEligibleForWorkflowSubmission.VendInvoiceRecId
                       && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                       && (documentEventLog.EventEnumValue == matchingNotApplicableValue ||
                           documentEventLog.EventEnumValue == matchingFailedValue ||
                           documentEventLog.EventEnumValue == matchingCompletedValue)
                exists join documentEvent
                    where documentEvent.RecId == documentEventLog.DocumentEvent
                       && documentEvent.EventEnumId == matchingDocumentEventEnumId;

        insert_recordset _invoicesThatMeetMatchingCriteria(
            VendInvoiceRecId,
            VendInvoiceDataAreaId,
            VendParametersAutomationPrepaymentApplication,
            VendParametersBlockAutomationWhenPrepaymentApplicationFailed)
            select VendInvoiceRecId, VendInvoiceDataAreaId, VendParametersAutomationPrepaymentApplication, VendParametersBlockAutomationWhenPrepaymentApplicationFailed
                from _invoicesEligibleForWorkflowSubmission
                where _invoicesEligibleForWorkflowSubmission.VendParametersRequireMatchBeforeWorkflowSubmit == NoYes::No
                    && _invoicesEligibleForWorkflowSubmission.VendParametersAutomationProductReceiptMatching == NoYes::No;

        return _invoicesThatMeetMatchingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesWherePrepaymentFailedAndBlocked</Name>
				<Source><![CDATA[
    private VendInvoiceAutomationInvoiceTmp filterInvoicesWherePrepaymentFailedAndBlocked(
        VendInvoiceAutomationInvoiceTmp _invoicesThatMeetMatchingCriteria)
    {
        DocumentEvent prepaymentEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceAutomationPrepaymentApplicationEvent));
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceAutomationHistory(_invoicesThatMeetMatchingCriteria, prepaymentEvent);
        
        DocumentEventLog documentEventLog;

        // Remove invoices that have recent automation history failed
        delete_from _invoicesThatMeetMatchingCriteria
            where _invoicesThatMeetMatchingCriteria.VendParametersAutomationPrepaymentApplication == NoYes::Yes
                && _invoicesThatMeetMatchingCriteria.VendParametersBlockAutomationWhenPrepaymentApplicationFailed == NoYes::Yes
        exists join documentEventLog
            where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                && documentEventLog.DocumentEvent == prepaymentEvent.RecId
                && documentEventLog.SourceRecId == _invoicesThatMeetMatchingCriteria.VendInvoiceRecId
                && documentEventLog.EventEnumValue == VendInvoiceAutomationPrepaymentApplicationEvent::Failed
        exists join documentEventLogTmp
            where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;

        return _invoicesThatMeetMatchingCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gatherInvoicesWhereMatchingRequirementsAreMet</Name>
				<Source><![CDATA[
    private void gatherInvoicesWhereMatchingRequirementsAreMet(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForWorkflowSubmission,
        VendInvoiceAutomationInvoiceTmp _invoicesThatMeetMatchingCriteria)
    {
        DocumentEvent documentEvent;
        DocumentEventLog documentEventLog;

        EnumId matchingDocumentEventEnumId = enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent);
        DocumentEventEnumValue matchingSuccessfulValue = enum2int(VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed);
        DocumentEventEnumValue matchingNotApplicableValue = enum2int(VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable);

        insert_recordset _invoicesThatMeetMatchingCriteria(VendInvoiceRecId, VendInvoiceDataAreaId)
            select VendInvoiceRecId, VendInvoiceDataAreaId from _invoicesEligibleForWorkflowSubmission
                where _invoicesEligibleForWorkflowSubmission.VendParametersRequireMatchBeforeWorkflowSubmit == NoYes::Yes
                exists join documentEventLog
                    where documentEventLog.SourceRecId == _invoicesEligibleForWorkflowSubmission.VendInvoiceRecId
                       && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                       && (documentEventLog.EventEnumValue == matchingSuccessfulValue ||
                           documentEventLog.EventEnumValue == matchingNotApplicableValue)
                exists join documentEvent
                    where documentEvent.RecId == documentEventLog.DocumentEvent
                       && documentEvent.EventEnumId == matchingDocumentEventEnumId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>