<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPostingProfileCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPostingProfileCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean check(RPayPostingProfile  _postingProfile,
                            RPayCostType        _costType,
                            RPayCounterUnit     _calcBase,
                            RHRMEmplId          _emplId,
                            RPayGroup           _payGroup,
                            boolean             _fullCheck,
                            boolean             _displayError)
    {
        ReportPeriod_RU         payPeriod = RPayParameters::payPeriod();
        RPayTitlePosting        rPayTitlePosting;

        Map                     rPayTitlePostingMap = new Map(Types::Container, Types::Container);
        MapEnumerator           rPayTitlePostingMapEnumerator;
        Set                     errorMessageSet;

        RPayHRMOrganizationId   rPayHRMOrganizationId;
        TitleId                 titleId;

        TableGroupAll           costTypeCode;
        RPayCostTypeRelation    costTypeRelation;
        TableGroupAll           emplCode;
        RPayEmplRelation        emplRelation;

        RPayFundMember          rPayFundMember;
        RPayGroupMember         rPayGroupMember;

        container               valueCont;
        int                     i;

        Set                     costTypeEmplSet;

        boolean                 ret = true;

        boolean checkCostType(RPayCostType _costType2)
        {
            boolean ret2 = true;

            if (costTypeEmplSet.in(_costType2))
            {
                ret2 = false;

                if (_displayError)
                {
                    if (! errorMessageSet.in(_costType2))
                    {
                        checkFailed(strFmt("@RUP2659", _costType2, _postingProfile, TableGroupAll::GroupId, rPayHRMOrganizationId, titleId));

                        errorMessageSet.add(_costType2);
                    }
                }
            }
            else
            {
                costTypeEmplSet.add(_costType2);
            }

            return ret2;
        }

        boolean checkEmployee(RHRMEmplId _emplId2)
        {
            boolean ret2 = true;

            if (costTypeEmplSet.in(_emplId2))
            {
                ret2 = false;

                if (_displayError)
                {
                    if (! errorMessageSet.in(_emplId2))
                    {
                        checkFailed(strFmt("@RUP2660", _emplId2, _postingProfile, TableGroupAll::GroupId, rPayHRMOrganizationId, titleId));

                        errorMessageSet.add(_emplId2);
                    }
                }
            }
            else
            {
                costTypeEmplSet.add(_emplId2);
            }

            return ret2;
        }
        ;

        if (! _postingProfile)
        {
            return false;
        }

        while select HrmOrganizationId, HcmTitle, CostTypeCode,
                     CostTypeRelation, EmplRelation
                     from rPayTitlePosting
            where rPayTitlePosting.PostingProfile    == _postingProfile        &&
                  rPayTitlePosting.CostTypeCode      == TableGroupAll::GroupId &&
                  (! _calcBase                                                 ||
                   rPayTitlePosting.CostTypeRelation == _calcBase)
        {
            if (rPayTitlePostingMap.exists([rPayTitlePosting.HrmOrganizationId, rPayTitlePosting.HcmTitle,
                                            rPayTitlePosting.EmplCode, rPayTitlePosting.EmplRelation]))
            {
                valueCont = rPayTitlePostingMap.lookup([rPayTitlePosting.HrmOrganizationId, rPayTitlePosting.HcmTitle,
                                                        rPayTitlePosting.EmplCode, rPayTitlePosting.EmplRelation]);
            }
            else
            {
                valueCont = conNull();
            }

            valueCont += rPayTitlePosting.CostTypeRelation;

            rPayTitlePostingMap.insert([rPayTitlePosting.HrmOrganizationId, rPayTitlePosting.HcmTitle,
                                        rPayTitlePosting.EmplCode, rPayTitlePosting.EmplRelation], valueCont);
        }

        rPayTitlePostingMapEnumerator = new MapEnumerator(rPayTitlePostingMap);

        while (rPayTitlePostingMapEnumerator.moveNext())
        {
            [rPayHRMOrganizationId, titleId, emplCode, emplRelation] = rPayTitlePostingMapEnumerator.currentKey();
            valueCont                                                = rPayTitlePostingMapEnumerator.currentValue();

            if (conlen(valueCont) > 1)
            {
                errorMessageSet = new Set(Types::String);
                costTypeEmplSet = new Set(Types::String);

                for (i = 1; i <= conlen(valueCont); i++)
                {
                    costTypeRelation = conpeek(valueCont, i);

                    while select PayCostType from rPayFundMember
                        where rPayFundMember.CounterUnit  == costTypeRelation &&
                              (! _costType                                    ||
                               rPayFundMember.PayCostType == _costType)
                    {
                        if (! checkCostType(rPayFundMember.PayCostType))
                        {
                            ret = false;

                            if (! _fullCheck)
                                return ret;
                        }
                    }
                }
            }
        }

        rPayTitlePostingMap = new Map(Types::Container, Types::Container);

        while select HrmOrganizationId, HcmTitle, CostTypeCode,
                     CostTypeRelation, EmplRelation
                     from rPayTitlePosting
            where rPayTitlePosting.PostingProfile == _postingProfile      &&
                  rPayTitlePosting.EmplCode     == TableGroupAll::GroupId &&
                  (! _payGroup                                            ||
                    rPayTitlePosting.EmplRelation == _payGroup)
        {
            if (rPayTitlePostingMap.exists([rPayTitlePosting.HrmOrganizationId, rPayTitlePosting.HcmTitle,
                                            rPayTitlePosting.CostTypeCode, rPayTitlePosting.CostTypeRelation]))
            {
                valueCont = rPayTitlePostingMap.lookup([rPayTitlePosting.HrmOrganizationId, rPayTitlePosting.HcmTitle,
                                                        rPayTitlePosting.CostTypeCode, rPayTitlePosting.CostTypeRelation]);
            }
            else
            {
                valueCont = conNull();
            }

            valueCont += rPayTitlePosting.EmplRelation;

            rPayTitlePostingMap.insert([rPayTitlePosting.HrmOrganizationId, rPayTitlePosting.HcmTitle,
                                        rPayTitlePosting.CostTypeCode, rPayTitlePosting.CostTypeRelation], valueCont);
        }

        rPayTitlePostingMapEnumerator = new MapEnumerator(rPayTitlePostingMap);

        while (rPayTitlePostingMapEnumerator.moveNext())
        {
            [rPayHRMOrganizationId, titleId, costTypeCode, costTypeRelation] = rPayTitlePostingMapEnumerator.currentKey();
            valueCont                                                        = rPayTitlePostingMapEnumerator.currentValue();

            if (conlen(valueCont) > 1)
            {
                errorMessageSet = new Set(Types::String);
                costTypeEmplSet = new Set(Types::String);

                for (i = 1; i <= conlen(valueCont); i++)
                {
                    emplRelation = conpeek(valueCont, i);

                    while select PersonEmplId from rPayGroupMember
                        where rPayGroupMember.PayGroup  == emplRelation &&
                              (! rPayGroupMember.FromDate               ||
                               rPayGroupMember.FromDate <= payPeriod)   &&
                              (! rPayGroupMember.ToDate                 ||
                               rPayGroupMember.ToDate   >= payPeriod)   &&
                              (! _emplId                                ||
                               rPayGroupMember.PersonEmplId == _emplId)
                    {
                        if (! checkEmployee(rPayGroupMember.PersonEmplId))
                        {
                            ret = false;

                            if (! _fullCheck)
                                return ret;
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCurrentProfiles</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkCurrentProfiles(RPayCostType        _costType,
                                               RPayCounterUnit     _calcBase,
                                               RHRMEmplId          _emplId,
                                               RPayGroup           _payGroup,
                                               boolean             _fullCheck      = true,
                                               boolean             _displayError   = true)
    {
        boolean ret = true;

        if (RPayParameters::find().AccountPostingProfile)
        {
            ret = ret && RPayPostingProfileCheck::checkProfile(RPayParameters::find().AccountPostingProfile,
                                                               _costType,
                                                               _calcBase,
                                                               _emplId,
                                                               _payGroup,
                                                               _fullCheck,
                                                               _displayError);
        }
        else
        {
            if (_displayError)
            {
                checkFailed("@RUP2661");
            }

            ret = false;
        }

        if (RPayParameters::find().OffsetAccountPostingProfile)
        {
            if (ret || _displayError)
            {
                ret = ret && RPayPostingProfileCheck::checkProfile(RPayParameters::find().OffsetAccountPostingProfile,
                                                                   _costType,
                                                                   _calcBase,
                                                                   _emplId,
                                                                   _payGroup,
                                                                   _fullCheck,
                                                                   _displayError);
            }
        }
        else
        {
            if (_displayError)
            {
                checkFailed("@RUP2662");
            }

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProfile</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static boolean checkProfile(RPayPostingProfile  _postingProfile,
                                       RPayCostType        _costType,
                                       RPayCounterUnit     _calcBase,
                                       RHRMEmplId          _emplId,
                                       RPayGroup           _payGroup,
                                       boolean             _fullCheck      = true,
                                       boolean             _displayError   = true)
    {
        RPayPostingProfileCheck postingProfileCheck = new RPayPostingProfileCheck();

        return postingProfileCheck.check(_postingProfile, _costType, _calcBase, _emplId, _payGroup, _fullCheck, _displayError);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>