<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymDialogUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides common payment dialog behavior
/// </summary>
public class CustVendPaymDialogUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bank_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup for the <c>CompanyBankAccountId</c> field
    /// </summary>
    /// <param name = "_dialog">The dialog that holds the <c>CompanyBankAccountId</c> field.</param>
    /// <param name = "_formControl">The <c>FormControl</c> object that needs the lookup</param>
    public static void bank_lookup(DialogRunbase _dialog, FormControl _formControl)
    {
        #ISOCountryRegionCodes
        Query                   query;
        QueryBuildDataSource    dsBankAccount;
        SysTableLookup          sysTableLookup;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoCZ, #isoEE, #isoHU, #isoLT, #isoLV, #isoPL, #isoRU ]))
        {
            sysTableLookup = SysTableLookup::newParameters(tableNum(BankAccountTable),
                                                           _dialog.formRun().controlCallingMethod(),
                                                           true);
            query = new Query();
            dsBankAccount = query.addDataSource(tableNum(BankAccountTable));
            dsBankAccount.addRange(fieldNum(BankAccountTable, BankAccountStatus)).value(queryValue(BankAccountHoldStatus::ActiveForAllTransactions));

            sysTableLookup.parmQuery(query);

            sysTableLookup.addLookupfield(fieldNum(BankAccountTable, AccountID));
            sysTableLookup.addLookupfield(fieldNum(BankAccountTable, Name));

            sysTableLookup.performFormLookup();
        }
        else
        {
            BankAccountTable::lookupBankAccount(_formControl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bank_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the bank account every time that it is modified.
    /// </summary>
    /// <param name = "_dialogBank">The dialog field that holds the <c>CompanyBankAccountId</c> field.</param>
    /// <param name="_formControl">The <c>FormControl</c> object that is modified.</param>
    /// <returns>true if the bank account in the <c>CompanyBankAccountId</c> field is active; otherwise, false.</returns>
    public static boolean bank_modified(DialogField _dialogBank, FormStringControl _formControl)
    {
        boolean isValid;
        boolean valueWasModified;

        valueWasModified = _formControl.modified();

        if (valueWasModified)
        {
            if (_dialogBank.value())
            {
                isValid = BankAccountTable::checkIsActive(_dialogBank.value());

                if (!isValid)
                {
                    _dialogBank.value('');
                }
            }
            else
            {
                isValid = true;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bank_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom logic to handle the jumpRef() method for the <c>CompanyBankAccountId</c> field.
    /// </summary>
    /// <param name = "_dialogBank">The dialog that holds the <c>CompanyBankAccountId</c> field.</param>
    public static void bank_jumpRef(DialogField _dialogBank)
    {
        Args args = new Args();
        BankAccountTable bankAccountTable = BankAccountTable::find(_dialogBank.value());

        if (bankAccountTable)
        {
            args.record(bankAccountTable);
        }

        MenuFunction menuFunction = new MenuFunction(menuitemDisplayStr(BankAccountTable), MenuItemType::Display);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides custom logic to handle the jumpRef() method for the method of payment field.
    /// </summary>
    /// <param name = "_dialogPaymMode">The dialog that holds the method of payment field.</param>
    /// <param name = "_moduleCustVend">Represents whether this is a customer or vendor method of payment.</param>
    public static void paymMode_jumpRef(DialogField _dialogPaymMode, UtilElementName _moduleCustVend)
    {
        Args args = new Args();
        Common record;
        str menuItemStr;

        switch (_moduleCustVend)
        {
            case extendedTypeStr(CustPaymMode) :
                menuItemStr = menuItemDisplayStr(CustPaymMode);
                record = CustPaymModeTable::find(_dialogPaymMode.value());

                break;
            case extendedTypeStr(VendPaymMode) :
                menuItemStr = menuItemDisplayStr(VendPaymMode);
                record = VendPaymModeTable::find(_dialogPaymMode.value());
                break;
        }

        if (record)
        {
            args.record(record);
        }

        args.caller(_dialogPaymMode.dialog().form());

        MenuFunction menuFunction = new MenuFunction(menuItemStr, MenuItemType::Display);

        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLineAccountNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the payment line account names.
    /// </summary>
    /// <param name = "_ledgerJournalId">The journal number.</param>
    /// <returns>The payment line account names.</returns>
    public static DimensionCombinationValueNameTmp generatePaymentLineAccountNames(LedgerJournalId _ledgerJournalId)
    {
        LedgerJournalTrans ledgerJournalTrans;
        DimensionCombinationNameTmp dimensionCombinationNameTmp;

        insert_recordset dimensionCombinationNameTmp
            (DimensionAttributeValueCombination)
            select LedgerDimension
            from ledgerJournalTrans
                group by LedgerDimension
                where ledgerJournalTrans.JournalNum == _ledgerJournalId
                    && ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger;

        DimensionCombinationValueNameTmp dimensionCombinationValueNameTmp;
        dimensionCombinationValueNameTmp = DimensionCombinationValueNameTmp::getDimensionCombinationValues(dimensionCombinationNameTmp);

        return dimensionCombinationValueNameTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>