<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceFunction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmaServiceFunction extends RunBase
{
    Args                    args;
    Query                   serviceQuery;
    SysQueryRun             queryRun;
    SMAServiceOrderTable    serviceOrderTable;
    DialogField             dialogShowInfolog;
    NoYesId                 showInfolog;
    SMAServiceFunctionType  serviceFunctionType;
    boolean                 periodic;
    boolean                 accepted;

    #define.CurrentVersion(8)
    #localmacro.CurrentList
        showInfolog
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>confirmDialog</Name>
				<Source><![CDATA[
    protected boolean confirmDialog(str _warning = "@SYS62458") // Are you sure you want to continue?
    {
        boolean ret = true;

        if (Box::yesNo(_warning, DialogButton::Yes) != DialogButton::Yes)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        // Infolog
        dialog.addGroup("@SYS25246");

        // Show Infolog
        dialogShowInfolog = dialog.addFieldValue(extendedtypestr(NoYesId), showInfolog, "@SYS74132", "@SYS91061");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        showInfolog = dialogShowInfolog.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStagesAllowed</Name>
				<Source><![CDATA[
    public str getStagesAllowed()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyCriteria</Name>
				<Source><![CDATA[
    private boolean isEmptyCriteria(str _criteria)
    {
        boolean ret = false;

        if (_criteria == SysQuery::valueEmptyString() || _criteria == '')
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = connull();

        if (queryRun)
        {
            pack = queryRun.pack();
        }

        return [#CurrentVersion, #CurrentList] + [pack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected SysQueryRun queryBuild()
    {
        QueryBuildDataSource qbdsProjectTable;
        QueryBuildDataSource qbdsServiceOrder;

        // Creating the query runtime
        serviceQuery = new Query();

        if (!serviceQuery)
        {
            // Query run is not initiaized
            throw error("@SYS87642");
        }

        // Add datasources to serviceQuery dependant on caller parameters
        qbdsServiceOrder = serviceQuery.addDataSource(tablenum(SMAServiceOrderTable));

        qbdsProjectTable = qbdsServiceOrder.addDataSource(tablenum(ProjTable));
        qbdsProjectTable.relations(true);
        if (  !args.record()
            || args.record().TableId == tablenum(ProjInvoiceTable)
            || args.record().TableId == tablenum(ProjTable)
            || args.record().TableId == tablenum(SMAAgreementTable)
            || args.record().TableId == tablenum(SMAServiceOrderTable))
        {
            qbdsProjectTable.joinMode(JoinMode::InnerJoin);
        }
        else
        {
            qbdsProjectTable.joinMode(JoinMode::ExistsJoin);
        }

        this.queryUpdateRange();

        queryRun = new SysQueryRun(serviceQuery);
        queryRun.promptShowSorting(false);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryUpdateRange</Name>
				<Source><![CDATA[
    protected void queryUpdateRange()
    {
        MultiSelectionHelper    multiSelectionHelper;
        QueryBuildDataSource    qbdsProjectTable;
        QueryBuildDataSource    qbdsServiceOrder;
        QueryBuildRange         criteriaCustAccount;
        QueryBuildRange         criteriaInvoiceProjId;
        QueryBuildRange         criteriaProjId;
        QueryBuildRange         criteriaAgreementId;
        QueryBuildRange         criteriaServiceOrderId;

        qbdsServiceOrder = serviceQuery.dataSourceTable(tablenum(SMAServiceOrderTable));
        qbdsProjectTable = serviceQuery.dataSourceTable(tablenum(ProjTable));

        criteriaServiceOrderId  = qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, ServiceOrderId));
        criteriaAgreementId     = qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, AgreementId));
        criteriaCustAccount     = qbdsServiceOrder.addRange(fieldnum(SMAServiceOrderTable, CustAccount));
        criteriaProjId          = qbdsProjectTable.addRange(fieldnum(ProjTable, ProjId));
        criteriaInvoiceProjId   = qbdsProjectTable.addRange(fieldnum(ProjTable, ProjInvoiceProjId));

        if (args && args.caller() && args.record())
        {
            multiSelectionHelper = MultiSelectionHelper::createFromCaller(args.caller());

            switch (args.record().TableId)
            {
                case tablenum(CustTable):
                    multiSelectionHelper.createQueryRanges(qbdsServiceOrder, fieldstr(CustTable, AccountNum));
                    break;

                case tablenum(ProjInvoiceTable):
                    multiSelectionHelper.createQueryRanges(qbdsProjectTable, fieldstr(ProjInvoiceTable, ProjInvoiceProjId));
                    break;

                case tablenum(ProjTable):
                    multiSelectionHelper.createQueryRanges(qbdsProjectTable, fieldstr(ProjTable, ProjId));
                    break;

                case tablenum(SMAAgreementTable):
                    multiSelectionHelper.createQueryRanges(qbdsServiceOrder, fieldstr(SMAAgreementTable, AgreementId));
                    break;

                case tablenum(SMAServiceOrderTable):
                    multiSelectionHelper.createQueryRanges(qbdsServiceOrder, fieldstr(SMAServiceOrderTable, ServiceOrderId));
                    break;
            }
        }

        this.setBasicRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasicRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates basic locked ranges for the query.
    /// </summary>
    protected void setBasicRanges()
    {
        QueryBuildDataSource    qbds_ServiceOrder;
        QueryBuildRange         qbr_Stage;

        qbds_ServiceOrder = serviceQuery.dataSourceTable(tablenum(SMAServiceOrderTable));

        // Stages
        qbr_Stage = qbds_ServiceOrder.addRange(fieldnum(SMAServiceOrderTable, StageId));
        qbr_Stage.value(this.getStagesAllowed());
        qbr_Stage.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       packedQuery;
        Integer         version = RunBase::getVersion(_packedClass);
        boolean         ret     = true;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;
        boolean showWarning;

        ret = super(_calledFrom);

        accepted = true;

        // Check if none of query values has been set
        showWarning = this.isEmptyCriteria(queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).findRange(fieldnum(SMAServiceOrderTable, ServiceOrderId)).value()) &&
                      this.isEmptyCriteria(queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).findRange(fieldnum(SMAServiceOrderTable, CustAccount)).value()) &&
                      this.isEmptyCriteria(queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).findRange(fieldnum(SMAServiceOrderTable, AgreementId)).value()) &&
                      this.isEmptyCriteria(queryRun.query().dataSourceTable(tablenum(ProjTable)).findRange(fieldnum(ProjTable, ProjId)).value()) &&
                      this.isEmptyCriteria(queryRun.query().dataSourceTable(tablenum(ProjTable)).findRange(fieldnum(ProjTable, ProjInvoiceProjId)).value());

        // Give a warning that all records will be selected
        if (showWarning)
        {
            accepted = this.confirmDialog();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static SMAServiceFunction construct()
    {
        return new SMAServiceFunction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SMAServiceFunction   serviceFunction;

        // check if there are arguments and if they are of the correct type
        if (!(_args && _args.parmEnumType() == enumnum(SMAServiceFunctionType)))
        {
            // function has been used incorrectly
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        serviceFunction = SMAServiceFunction::newArgs(_args);

        if (serviceFunction.prompt())
        {
            serviceFunction.runOperation();
        }

        if (_args.caller() && formHasMethod(_args.caller(), identifierstr(refreshForm)))
        {
            _args.caller().refreshForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>SMAServiceFunction</c> object from the given arguments.
    /// </summary>
    /// <param name="_args">
    ///    The specified arguments to use to create the <c>SMAServiceFunction</c> object.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>SMAServiceFunction</c> class.
    /// </returns>
    public static SMAServiceFunction newArgs(Args _args)
    {
        SMAServiceFunction   smaServiceFunction;
        boolean              periodic;

        // check if there are arguments and if they are of the correct type
        if (!(_args && _args.parmEnumType() == enumnum(SMAServiceFunctionType)))
        {
            // function has been used incorrectly
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        periodic = (_args && _args.record()) ? false : true;

        switch (_args.parmEnum())
        {
            case SMAServiceFunctionType::Cancel :
                smaServiceFunction = new SMAServiceFunction_Cancel(periodic);
                break;

            case SMAServiceFunctionType::Delete :
                smaServiceFunction = new SMAServiceFunction_Delete(periodic);
                break;

            default:
                // "Invalid Service Function Type"
                throw error("@SYS111575");
        }

        smaServiceFunction.parmArgs(_args);
        smaServiceFunction.queryBuild();

        return smaServiceFunction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>