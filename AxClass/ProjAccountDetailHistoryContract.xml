<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAccountDetailHistoryContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjAccountDetailHistoryContract</c> class is used as a data contract for the <c>ProjAccountDetailHistory</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classstr(ProjAccountDetailHistoryUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly),
    SysOperationGroupAttribute('ProjectDate', "@SPS881", '1'),
    SysOperationGroupAttribute('Data', "@SPS886", '2'),
    SysOperationGroupAttribute('LedgerDate', "@SPS873", '3')
]
public class ProjAccountDetailHistoryContract implements SysOperationValidatable
{
    TransDate           projFromDate;
    TransDate           projToDate;
    TransDate           ledgerFromDate;
    TransDate           ledgerToDate;
    Name                projDimensionFocus;
    NoYesId             projIncludeCarryForward;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerFromDate</Name>
				<Source><![CDATA[
    public TransDate parmLedgerFromDate(TransDate _ledgerFromDate = ledgerFromDate)
    {
        ledgerFromDate = _ledgerFromDate;
        return ledgerFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerToDate</Name>
				<Source><![CDATA[
    public TransDate parmLedgerToDate(TransDate _ledgerToDate = ledgerToDate)
    {
        ledgerToDate = _ledgerToDate;
        return ledgerToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjDimensionFocus</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ProjDimensionFocus'),
        SysOperationLabelAttribute(literalstr("@SYS4020062")),
        SysOperationHelpTextAttribute(literalstr("@SYS4020062")),
        SysOperationGroupMemberAttribute('Data'),
        SysOperationDisplayOrderAttribute("2")
    ]
    public Name parmProjDimensionFocus(Name _projDimensionFocus = projDimensionFocus)
    {
        projDimensionFocus = _projDimensionFocus;
        return projDimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjFromDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ProjFromDate'),
        SysOperationLabelAttribute(literalstr("@SYS312575")),
        SysOperationHelpTextAttribute(literalstr("@SYS4020058")),
        SysOperationGroupMemberAttribute('ProjectDate'),
        SysOperationDisplayOrderAttribute("1")
    ]
    public TransDate parmProjFromDate(TransDate _projFromDate = projFromDate)
    {
        projFromDate = _projFromDate;
        return projFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjToDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ProjToDate'),
        SysOperationLabelAttribute(literalstr("@SYS312575")),
        SysOperationHelpTextAttribute(literalstr("@SYS4020059")),
        SysOperationGroupMemberAttribute('ProjectDate'),
        SysOperationDisplayOrderAttribute("2")
    ]
    public TransDate parmProjToDate(TransDate _projToDate = projToDate)
    {
        projToDate = _projToDate;
        return projToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (this.parmProjDimensionFocus() == '')
        {
            // Dimension focus was not entered.
            isValid = checkFailed("@SPS867");
        }
        if (DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, this.parmProjDimensionFocus()).RecId == 0 && this.parmProjDimensionFocus() != '')
        {
            isValid = checkFailed("@SPS868");
        }
        if (this.parmProjFromDate() != dateNull() && this.parmProjToDate() != dateNull())
        {
            if (this.parmProjFromDate() > this.parmProjToDate())
            {
                isValid = checkFailed("@SYS304912");
            }
        }
        else if (this.parmProjFromDate() == dateNull() || this.parmProjToDate() == dateNull())
        {
            isValid = checkFailed("@SPS869");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>