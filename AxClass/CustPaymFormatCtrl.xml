<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymFormatCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustPaymFormatCtrl extends CustVendPaymFormatCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allAvailableFormats</Name>
				<Source><![CDATA[
    public container allAvailableFormats()
    {
        return CustPaymFormatCtrl::availableFormats();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedFormats</Name>
				<Source><![CDATA[
    public container selectedFormats(BankFormat _bankFormat)
    {
        return CustPaymFormat::selectedFormats(_bankFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableFormats</Name>
				<Source><![CDATA[
    public static container availableFormats()
    {
        #ISOCountryRegionCodes

        CustOutPaym custOutPaym;
        CustOutPaymRemittance custOutPaymRemittance;
        CustInPaym custInPaym;
        CustPaymReconciliationImport custPaymReconciliationImport;
        CustVendPaymFileAnalyze custVendPaymFileAnalyze;

        container exports;
        container imports;
        container returns;
        container remittances;
        container exportNames;
        container importNames;
        container returnNames;
        container remittanceNames;
        container fileAnalyzes;
        container fileAnalyzeNames;

        DictClass dictClass;
        List listCustOutPaym;
        List listCustInPaym;
        List listCustPaymReconcile;
        List listCustOutPaymRemittance;
        List listCustFileAnalyze;
        ListEnumerator listEnumerator;
        boolean norwayEnabled;

        listCustOutPaym = new DictClass(classnum(CustOutPaym)).extendedBy();
        listCustInPaym = new DictClass(classnum(CustInPaym)).extendedBy();
        listCustPaymReconcile = new DictClass(classnum(CustPaymReconciliationImport)).extendedBy();
        listCustOutPaymRemittance = new DictClass(classnum(CustOutPaymRemittance)).extendedBy();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            norwayEnabled = true;
            listCustFileAnalyze = new DictClass(classnum(CustVendPaymFileAnalyze)).extendedBy();
        }

        // Exports
        listEnumerator = listCustOutPaym.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass
                && !SysDictClass::isSuperclass(dictClass.id(), classnum(CustOutPaymRemittance))
                && !dictClass.isAbstract())
            {
                custOutPaym = dictClass.makeObject();

                if (custOutPaym.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(custOutPaym))
                {
                    exports += dictClass.id();
                    exportNames += custOutPaym.interfaceName();
                }
            }
        }

        // Imports
        listEnumerator = listCustInPaym.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                custInPaym = dictClass.makeObject();

                if (custInPaym.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(custInPaym))
                {
                    imports += dictClass.id();
                    importNames += custInPaym.interfaceName();
                }
            }
        }

        // Reconciliation
        listEnumerator = listCustPaymReconcile.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                custPaymReconciliationImport = dictClass.makeObject();

                if (custPaymReconciliationImport.interfaceName()
                    && ((norwayEnabled && CustVendPaymFormatCtrl::checkConfigurationKey(custOutPaym))
                        || (!norwayEnabled && CustVendPaymFormatCtrl::checkConfigurationKey(custPaymReconciliationImport))))
                {
                    returns += dictClass.id();
                    returnNames += custPaymReconciliationImport.interfaceName();
                }
            }
        }

        // Remittance
        listEnumerator = listCustOutPaymRemittance.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                custOutPaymRemittance = dictClass.makeObject();

                if (custOutPaymRemittance.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(custOutPaymRemittance))
                {
                    remittances += dictClass.id();
                    remittanceNames += custOutPaymRemittance.interfaceName();
                }
            }
        }

        // File analyze
        if (norwayEnabled)
        {
            listEnumerator = listCustFileAnalyze.getEnumerator();
            while (listEnumerator.moveNext())
            {
                dictClass = new DictClass(listEnumerator.current());

                if (dictClass && !dictClass.isAbstract())
                {
                    custVendPaymFileAnalyze = dictClass.makeObject();

                    if (custVendPaymFileAnalyze.interfaceName() && CustVendPaymFormatCtrl::checkConfigurationKey(custVendPaymFileAnalyze))
                    {
                        fileAnalyzes += dictClass.id();
                        fileAnalyzeNames += custVendPaymFileAnalyze.interfaceName();
                    }
                }
            }

            return [exports, exportNames, imports, importNames, returns, returnNames, remittances, remittanceNames, fileAnalyzes, fileAnalyzeNames];
        }

        return [exports, exportNames, imports, importNames, returns, returnNames, remittances, remittanceNames];
    }

]]></Source>
			</Method>
			<Method>
				<Name>availableSpecifications</Name>
				<Source><![CDATA[
    public static container availableSpecifications(ClassId custOutPaymClassId)
    {
        return CustVendPaymFormatCtrl::availableSpecifications(custOutPaymClassId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>