<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSplitTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSplitTrans
{
    #isoCountryRegionCodes
    boolean splitLink;
    boolean splitOnlyReversalLink;
    private boolean splitWithPessimisticLock;

    private static boolean InventSplitTransLateCurrencySelectionFlightEnabled = InventSplitTransLateCurrencySelectionFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateByAmount_RU</Name>
				<Source><![CDATA[
    private container allocateByAmount_RU(
        InventSettlement _inventSettlement,
        InventSettlement _splitSettlement,
        InventQty        _settleQtyTotal,
        InventQty        _settleQtyRemain,
        CostAmount       _settleAmountTotal,
        CostAmount       _settleAmountRemain,
        CostAmount       _adjustAmountTotal,
        CostAmount       _adjustAmountRemain,
        CurrencyCode     _currencyCode
        )
    {
        if (_inventSettlement.QtySettled == _settleQtyTotal)
        {
            _splitSettlement.QtySettled  = _settleQtyRemain;
        }
        else
        {
            if (_settleQtyTotal == 0 || _settleQtyRemain == 0 || _inventSettlement.QtySettled == 0)
            {
                _splitSettlement.QtySettled  = 0;
            }
            else
            {
                _splitSettlement.QtySettled  = decRound(_settleQtyRemain * _inventSettlement.QtySettled / _settleQtyTotal, InventAdj::settleQtyDec());
            }
        }

        if (_inventSettlement.CostAmountSettled == _settleAmountTotal)
        {
            _splitSettlement.CostAmountSettled   = _settleAmountRemain;
        }
        else
        {
            if (_settleAmountTotal == 0 || _settleAmountRemain == 0 || _inventSettlement.CostAmountSettled == 0)
            {
                _splitSettlement.CostAmountSettled   = 0;
            }
            else
            {
                _splitSettlement.CostAmountSettled   = CurrencyExchangeHelper::amount(_settleAmountRemain * _inventSettlement.CostAmountSettled / _settleAmountTotal, _currencyCode);
            }
        }

        if (_inventSettlement.CostAmountAdjustment == _adjustAmountTotal)
        {
            _splitSettlement.CostAmountAdjustment    = _adjustAmountRemain;
        }
        else
        {
            if (_adjustAmountTotal == 0 || _adjustAmountRemain == 0 || _inventSettlement.CostAmountAdjustment == 0)
            {
                _splitSettlement.CostAmountAdjustment = 0;
            }
            else
            {
                _splitSettlement.CostAmountAdjustment = CurrencyExchangeHelper::amount(_adjustAmountRemain * _inventSettlement.CostAmountAdjustment / _adjustAmountTotal, _currencyCode);
            }
        }

        if (_splitSettlement.QtySettled == 0 && _inventSettlement.QtySettled != 0)
        {
            _splitSettlement.CostAmountSettled       = 0;
            _splitSettlement.CostAmountAdjustment    = 0;
        }

        return [ _settleQtyTotal     - _inventSettlement.QtySettled,
                 _settleQtyRemain    - _splitSettlement.QtySettled,
                 _settleAmountTotal  - _inventSettlement.CostAmountSettled,
                 _settleAmountRemain - _splitSettlement.CostAmountSettled,
                 _adjustAmountTotal  - _inventSettlement.CostAmountAdjustment,
                 _adjustAmountRemain - _splitSettlement.CostAmountAdjustment ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateByQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the inventory settlement should be allocated by quantity or by value.
    /// </summary>
    /// <param name="_inventSettlement">
    ///    The <c>InventSettlement</c> record to allocate.
    /// </param>
    /// <returns>
    ///    true if the inventory settlement should be allocated by quantity; otherwise, false.
    /// </returns>
    protected boolean allocateByQty(InventSettlement _inventSettlement)
    {
        if (_inventSettlement.Cancelled)
        {
            return true;
        }

        if (_inventSettlement.SettleModel == InventSettleModel::PhysicalValue)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    boolean  check(InventTrans _splitTrans, InventQty _splitQty, PdsCWInventQty _cwQty)
    {
        boolean         ok = true;

        if (_splitTrans.PackingSlipReturned)
        {
            ok = checkFailed("@SYS18243");
        }
        // cannot check for cwqty == 0 here, as it would
        // prevent the addition of weight during picking
        // when the items are reserved.
        //

        // Check whether _cwQty and _splitTrans.PdsCWQty have different signs.
        boolean cwQtySignChanged = _cwQty != 0.0 && _splitTrans.PdsCWQty != 0.0 && sign(_cwQty) * sign(_splitTrans.PdsCWQty) < 0;

        if (cwQtySignChanged)
        {
            ok = checkFailed("@SYS19603");
        }

        // Check whether _splitQty and _splitTrans.Qty have different signs.
        boolean qtySignChanged = _splitQty != 0.0 && _splitTrans.Qty != 0.0 && sign(_splitQty) * sign(_splitTrans.Qty) < 0;

        if (qtySignChanged)
        {
            ok = checkFailed("@SYS19603");
        }

        if (_splitQty == 0)
        {
            ok = checkFailed("@SYS82965");
        }

        if (_splitTrans.Qty    == _splitQty   || ! _splitTrans)
        {
            ok = checkFailed("@SYS13895");
        }

        //Splitting of financial updated trans is allowed in order to make On-hand adjustments possible
        if (!this.validateNumOfDecimals(_splitTrans, _splitQty))
        {
            if (InventSplitTransDecimalsErrorVerboseFlight::instance().isEnabled())
            {
                InventTransOrigin inventtransOrigin = _splitTrans.inventTransOrigin();
                ok = checkFailed(strfmt("@SCM:InventSplitTransDecimalsError",
                    _splitTrans.Qty,
                    any2Str(_splitQty),
                    InventTable::inventDecimals(_splitTrans.ItemId),
                    _splitTrans.ItemId,  
                    inventtransOrigin.InventTransId,
                    inventtransOrigin.ReferenceId,
                    inventtransOrigin.ReferenceCategory,                    
                    _splitTrans.inventDim().preFix(),
                    _splitTrans.RecId));
            }
            else
            {
                ok = checkFailed(strfmt("@SYS83631", InventTable::inventDecimals(_splitTrans.ItemId)));
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNumOfDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the unit of an item can be splitted according to its decimal precision.
    /// </summary>
    /// <param name = "_splitTrans">
    /// Inventory transaction to be splitted.
    /// </param>
    /// <param name = "_splitQty">
    /// Split quantity.
    /// </param>
    /// <returns>
    /// true if the unit can be splitted; otherwise, false.
    /// </returns>
    protected boolean validateNumOfDecimals(InventTrans _splitTrans, InventQty _splitQty)
    {
        return _splitTrans.isUpdatedFinancial() || !(numOfDec(_splitQty) > InventTable::inventDecimals(_splitTrans.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSettlementBeSplited</Name>
				<Source><![CDATA[
    boolean  mustSettlementBeSplited(InventSettlement _inventSettlement)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableAdjustedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an adjusted amount that should not be allocated when the inventory transaction is split.
    /// </summary>
    /// <returns>
    ///    The adjusted amount that should not be allocated.
    /// </returns>
    protected CostAmountAdjusted notAllocatableAdjustedAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableAdjustedAmountSec_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an adjusted amount which should not be allocated when splitting the inventory transaction.
    /// </summary>
    /// <returns>
    /// Adjusted amount that should not be allocated.
    /// </returns>
    protected CostAmountAdjusted notAllocatableAdjustedAmountSec_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a settled amount that should not be allocated when the inventory transaction is split.
    /// </summary>
    /// <returns>
    ///    The settled amount that should not be allocated.
    /// </returns>
    protected CostAmountSettled notAllocatableSettledAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledAmountSec_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a settled amount which should not be allocated when splitting the inventory transaction.
    /// </summary>
    /// <returns>
    /// Settled amount that should not be allocated.
    /// </returns>
    protected CostAmountSettled notAllocatableSettledAmountSec_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a settled quantity that should not be allocated when the inventory transaction is split.
    /// </summary>
    /// <returns>
    ///    The settled quantity that should not be allocated.
    /// </returns>
    protected InventQtySettled notAllocatableSettledQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledQtySec_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a settled quantity which should not be allocated when splitting the inventory transaction.
    /// </summary>
    /// <returns>
    /// Settled quantity that should not be allocated.
    /// </returns>
    protected InventQtySettled notAllocatableSettledQtySec_RU()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitLink_RU</Name>
				<Source><![CDATA[
    final public boolean parmSplitLink_RU(boolean _splitLink = splitLink)
    {
        splitLink = _splitLink;
        return splitLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitOnlyReversalLink_RU</Name>
				<Source><![CDATA[
    public boolean parmSplitOnlyReversalLink_RU(boolean _splitOnlyReversalLink = splitOnlyReversalLink)
    {
        splitOnlyReversalLink = _splitOnlyReversalLink;
        return splitOnlyReversalLink;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitWithPessimisticLock</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmSplitWithPessimisticLock(boolean _splitWithPessimisticLock = splitWithPessimisticLock)
    {
        splitWithPessimisticLock = _splitWithPessimisticLock;
        return splitWithPessimisticLock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWNotAllocatableSettledQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a CW settled quantity which should not be
    /// allocated when splitting the inventory transaction.
    /// </summary>
    /// <returns>
    /// CW settled quantity that should not be allocated.
    /// </returns>
    protected PdsCWSettled pdsCWNotAllocatableSettledQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitAdjustedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits the adjustment amount based on the split quantity and the total quantity.
    /// </summary>
    /// <param name="_transFrom">
    ///    The <c>InventTrans</c> record that contains the adjustment amount that should be split.
    /// </param>
    /// <param name="_splitQty">
    ///    The multiplication factor that is used to split the adjustment amount.
    /// </param>
    /// <param name="_totalQty">
    ///    The division factor that is used to split the adjustment amount.
    /// </param>
    /// <param name="_transTo">
    ///    The <c>InventTrans</c> record that will be assigned the split adjustment amount.
    /// </param>
    protected void setSplitAdjustedAmount(InventTrans _transFrom,InventQty _splitQty, InventQty _totalQty, InventTrans  _transTo)
    {
        if (! _totalQty)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        _transTo.CostAmountAdjustment       = CurrencyExchangeHelper::amount(_splitQty * (_transFrom.CostAmountAdjustment - this.notAllocatableAdjustedAmount()) / _totalQty, '');

        _transFrom.CostAmountAdjustment    -= _transTo.CostAmountAdjustment;
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _transTo.CostAmountSecCurAdjustment_RU    = CurrencyExchangeHelper::amount(_splitQty * (_transFrom.CostAmountSecCurAdjustment_RU - this.notAllocatableAdjustedAmountSec_RU()) / _totalQty, CompanyInfoHelper::secondaryCurrency_RU());
            _transFrom.CostAmountSecCurAdjustment_RU -= _transTo.CostAmountSecCurAdjustment_RU;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCurrency</Name>
				<Source><![CDATA[
    private boolean needCurrency(InventTrans _transFrom)
    {
        if (_transFrom.CostAmountPosted
            || _transFrom.CostAmountOperations
            || _transFrom.CostAmountStd
            || _transFrom.CostAmountPhysical
            || _transFrom.RevenueAmountPhysical
            || _transFrom.TaxAmountPhysical)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needCurrencySec</Name>
				<Source><![CDATA[
    private boolean needCurrencySec(InventTrans _transFrom)
    {
        if (_transFrom.CostAmountSecCurPosted_RU
            || _transFrom.CostAmountStdSecCur_RU
            || _transFrom.CostAmountSecCurPhysical_RU)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitAmount</Name>
				<Source><![CDATA[
    void setSplitAmount(InventTrans _transFrom,InventQty _splitQty, InventTrans  _transTo, PdsCWInventQty _cwQty)
    {
        InventQty   totalQty    = _transFrom.Qty;
        // <GEERU>
        CurrencyCode currency;    
        CurrencyCode currencySec; 
        // </GEERU>
        PdsCWInventQty  pdsCWTotalQty   = _transFrom.PdsCWQty;

        if (!totalQty)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        if (!InventSplitTrans::InventSplitTransLateCurrencySelectionFlightEnabled)
        {
            currency = CompanyInfoHelper::standardCurrency();
            currencySec = CompanyInfoHelper::secondaryCurrency_RU();
        }
        else if (this.needCurrency(_transFrom) || this.needCurrencySec(_transFrom))
        {
            currency = CompanyInfoHelper::standardCurrency();
            currencySec = CompanyInfoHelper::secondaryCurrency_RU();
        }

        // <GEERU>
        if (!currencySec)
        {
            currencySec = currency;
        }

        _transTo.CostAmountPosted            = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountPosted / totalQty, currency);
        _transTo.CostAmountOperations        = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountOperations / totalQty, currency);
        _transTo.CostAmountStd               = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountStd / totalQty, currency);
        _transTo.CostAmountPhysical          = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountPhysical / totalQty, currency);
        _transTo.RevenueAmountPhysical       = CurrencyExchangeHelper::amount(_splitQty * _transFrom.RevenueAmountPhysical / totalQty, currency);
        _transTo.TaxAmountPhysical           = CurrencyExchangeHelper::amount(_splitQty * _transFrom.TaxAmountPhysical / totalQty, currency);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            _transTo.CostAmountSecCurPosted_RU   = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountSecCurPosted_RU / totalQty, currencySec);
            _transTo.CostAmountStdSecCur_RU      = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountStdSecCur_RU / totalQty, currencySec);
            _transTo.CostAmountSecCurPhysical_RU = CurrencyExchangeHelper::amount(_splitQty * _transFrom.CostAmountSecCurPhysical_RU / totalQty, currencySec);
        }
        // </GEERU>

        _transTo.Qty        = _splitQty;
        _transTo.PdsCWQty   =  _cwQty;

        InventHook::amountSplit(_splitQty,_transTo,_transFrom);

        _transFrom.CostAmountPosted           -= _transTo.CostAmountPosted;
        _transFrom.CostAmountOperations       -= _transTo.CostAmountOperations;
        _transFrom.CostAmountStd              -= _transTo.CostAmountStd;
        _transFrom.CostAmountPhysical         -= _transTo.CostAmountPhysical;
        _transFrom.RevenueAmountPhysical      -= _transTo.RevenueAmountPhysical;
        _transFrom.TaxAmountPhysical          -= _transTo.TaxAmountPhysical;
        // <GEERU>
        _transFrom.CostAmountSecCurPosted_RU   -= _transTo.CostAmountSecCurPosted_RU;
        _transFrom.CostAmountStdSecCur_RU      -= _transTo.CostAmountStdSecCur_RU;
        _transFrom.CostAmountSecCurPhysical_RU -= _transTo.CostAmountSecCurPhysical_RU;
        // </GEERU>

        InventHook::amountSub(_transTo,_transFrom);

        _transFrom.Qty      -= _splitQty;
        _transFrom.PdsCWQty -=  _cwQty;

        this.setSplitAdjustedAmount(_transFrom,_splitQty, totalQty, _transTo);

        this.setSplitSettledAmount(_transFrom,_splitQty, totalQty, _transTo, pdsCWTotalQty, _cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitSettledAmount</Name>
				<Source><![CDATA[
    void setSplitSettledAmount(InventTrans _transFrom,InventQty _splitQty, InventQty _totalQty, InventTrans  _transTo, PdsCWInventQty  _cwTotalQty, PdsCWInventQty  _cwSplitQty)
    {
        CostAmountPosted    costValue;
        // <GEERU>
        CostAmountPosted    costValueSecCur_RU;
        // </GEERU>

        if (!_totalQty)
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        _transTo.QtySettled                 = decRound(_splitQty * _transFrom.QtySettled  / _totalQty  ,InventAdj::settleQtyDec());
        // <GEERU>
        _transTo.QtySettledSecCur_RU        = decRound(_splitQty * _transFrom.QtySettledSecCur_RU / _totalQty ,InventAdj::settleQtyDec());
        // </GEERU>

        if (_transFrom.QtySettled == 0 || _transTo.QtySettled == 0)
        {
            _transTo.CostAmountSettled  = 0;
        }
        else
        {
            _transTo.CostAmountSettled  = CurrencyExchangeHelper::amount(_transTo.QtySettled * _transFrom.CostAmountSettled / _transFrom.QtySettled, '');
        }
        // <GEERU>
        if (_transFrom.QtySettledSecCur_RU == 0 || _transTo.QtySettledSecCur_RU == 0)
        {
            _transTo.CostAmountSettledSecCur_RU  = 0;
        }
        else
        {
            _transTo.CostAmountSettledSecCur_RU  = CurrencyExchangeHelper::amount(_transTo.QtySettledSecCur_RU * _transFrom.CostAmountSettledSecCur_RU / _transFrom.QtySettledSecCur_RU, CompanyInfoHelper::secondaryCurrency_RU());
        }
        // </GEERU>

        if (_transTo.CostAmountSettled != 0)
        {
            costValue = _transTo.costValue();
            if (abs(costValue) < abs(_transTo.CostAmountSettled))
            {
                _transTo.CostAmountSettled = costValue;
            }
        }

        // <GEERU>
        if (_transTo.CostAmountSettledSecCur_RU != 0)
        {
            costValueSecCur_RU = _transTo.costValueSecCur_RU();
            if (abs(costValueSecCur_RU) < abs(_transTo.CostAmountSettledSecCur_RU))
            {
                _transTo.CostAmountSettledSecCur_RU = costValueSecCur_RU;
            }
        }
        // </GEERU>
        _transFrom.QtySettled              -= _transTo.QtySettled;
        _transFrom.CostAmountSettled       -= _transTo.CostAmountSettled;
        // <GEERU>
        _transFrom.QtySettledSecCur_RU              -= _transTo.QtySettledSecCur_RU;
        _transFrom.CostAmountSettledSecCur_RU       -= _transTo.CostAmountSettledSecCur_RU;
        // </GEERU>

        if (_transFrom.CostAmountSettled != 0)
        {
            costValue = _transFrom.costValue();
            if (abs(costValue) < abs(_transFrom.CostAmountSettled))
            {
                _transTo.CostAmountSettled     -= costValue - _transFrom.CostAmountSettled;
                _transFrom.CostAmountSettled    = costValue;
            }
        }

        // <GEERU>
        if (_transFrom.CostAmountSettledSecCur_RU != 0)
        {
            costValueSecCur_RU = _transFrom.costValue();
            if (abs(costValueSecCur_RU) < abs(_transFrom.CostAmountSettledSecCur_RU))
            {
                _transTo.CostAmountSettledSecCur_RU     -= costValueSecCur_RU - _transFrom.CostAmountSettledSecCur_RU;
                _transFrom.CostAmountSettledSecCur_RU    = costValueSecCur_RU;
            }
        }
        // </GEERU>
        if ((_transTo.QtySettled == 0 && _transTo.CostAmountSettled != 0) ||
            (_transFrom.QtySettled == 0 && _transFrom.CostAmountSettled != 0))
        {
            throw error(strFmt("@SYS19378",funcName()));
        }

        // <GEERU>
        if ((_transTo.QtySettledSecCur_RU   == 0 && _transTo.CostAmountSettledSecCur_RU   != 0) ||
            (_transFrom.QtySettledSecCur_RU == 0 && _transFrom.CostAmountSettledSecCur_RU != 0))
        {
            throw error(strFmt("@SYS19378", funcName()));
        }
        // </GEERU>

        // check for 0 division
        if (_transFrom.PdsCWQty != 0)
        {
            _transTo.PdsCWSettled = decround(_cwSplitQty *_transFrom.PdsCWSettled / _transFrom.PdsCWQty , 0);
        }
        else
        {
            _transTo.PdsCWSettled = 0;
        }

        _transFrom.PdsCWSettled        -=  _transTo.PdsCWSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>QueryRun</c> object to select the inventory settlement records that are related to an
    ///    inventory transaction.
    /// </summary>
    /// <param name="_transFrom">
    ///    The <c>InventTrans</c> record for which to query for inventory settlements.
    /// </param>
    /// <param name="_transTo">
    ///    The <c>InventTrans</c> record that contains the split amounts and quantities.
    /// </param>
    /// <returns>
    ///    A <c>QueryRun</c> object that selects the inventory settlements related to the inventory
    ///    transaction.
    /// </returns>
    /// <remarks>
    ///     The <c>InventTrans</c> record specified by the <paramref name="_transFrom" /> parameter is also
    ///    the record that should be split.
    /// </remarks>
    protected QueryRun settlementQueryRun(InventTrans _transFrom, InventTrans _transTo)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(InventSettlement));
        queryBuildDataSource.update(true);

        queryBuildDataSource.addRange(fieldNum(InventSettlement, TransRecId)).value(queryValue(_transFrom.RecId));
        queryBuildDataSource.addRange(fieldNum(InventSettlement, InventTransId)).value(queryValue(_transFrom.inventTransOrigin().InventTransId));

        if (_transFrom.CostAmountAdjustment + _transTo.CostAmountAdjustment > 0)
        {
            queryBuildDataSource.addOrderByField(fieldNum(InventSettlement, CostAmountAdjustment), SortOrder::Ascending);
        }
        if (_transFrom.CostAmountAdjustment + _transTo.CostAmountAdjustment < 0)
        {
            queryBuildDataSource.addOrderByField(fieldNum(InventSettlement, CostAmountAdjustment), SortOrder::Descending);
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    InventTrans update(InventTrans _splitTrans, InventQty _splitQty, PdsCWInventQty _cwQty = 0)
    {
        InventTrans     copy;
        
        if (! this.check(_splitTrans,_splitQty, _cwQty))
        {
            throw error("@SYS18447");
        }

        if (splitWithPessimisticLock)
        {
            select pessimisticLock copy
                where copy.RecId == _splitTrans.RecId;

            if (copy.Qty == _splitQty)
            {
                // The inventory transaction was already split in another thread. 
                // Current process should be stopped and update should be executed again without splitting.
                throw Exception::UpdateConflict;
            }
        }
        else
        {
            select forupdate copy
                where copy.RecId == _splitTrans.RecId;
        }

        this.setSplitAmount(copy,_splitQty,_splitTrans, _cwQty);
        _splitTrans.insert(NoYes::Yes);
        copy.update(NoYes::Yes);

        this.updateSettlements(copy,_splitTrans);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && splitLink)
        {
            TransLink_RU::split(copy, _splitTrans, splitOnlyReversalLink);
        }
        // </GEERU>
        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettlements</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    void updateSettlements( InventTrans transFrom, InventTrans transTo)
    {
        InventSettlement    inventSettlement;

         // <GEERU>
         CostAmount          settleAmountRemainSec;
         CostAmount          settleAmountTotalSec;
         CostAmount          adjustAmountRemainSec;
         CostAmount          adjustAmountTotalSec;
         InventQty           settleQtyRemainSec;
         InventQty           settleQtyTotalSec;

         CurrencyCode        currency;        
         CurrencyCode        currencySec;     
         boolean             countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        CurrencyCode cur()
        {
            if (inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::SecondaryCur)
                return currencySec;

            return currency;
        } //


        if (!InventSplitTrans::InventSplitTransLateCurrencySelectionFlightEnabled)
        {
            currency = CompanyInfoHelper::standardCurrency();
            currencySec = CompanyInfoHelper::secondaryCurrency_RU();

            if (!currencySec)
            {
                currencySec = currency;
            }
        }         

        if ((transFrom.isUpdatedFinancial() ||
            (transFrom.isUpdatedPhysical() &&
            (InventTable::modelGroupByItemId(transFrom.ItemId).inventModelType().mustSplitInventSettlement() ||
             (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
             InventTable::modelGroupByItemId(transFrom.ItemId).inventModelTypeSecCur_RU().mustSplitInventSettlement())))) &&
            transFrom.hasSettlements())
         // </GEERU>
        {
            InventQty qtyTotal = transFrom.Qty  + transTo.Qty;
            if (qtyTotal == 0)
            {
                return;
            }
            
            if (InventSplitTrans::InventSplitTransLateCurrencySelectionFlightEnabled)
            {
                currency = CompanyInfoHelper::standardCurrency();
                currencySec = CompanyInfoHelper::secondaryCurrency_RU();

                if (!currencySec)
                {
                    currencySec = currency;
                }
            }
            
            CostAmount settleAmountRemain = transTo.CostAmountSettled;
            CostAmount settleAmountTotal  = transTo.CostAmountSettled + transFrom.CostAmountSettled - this.notAllocatableSettledAmount();
            CostAmount adjustAmountRemain = transTo.CostAmountAdjustment;
            CostAmount adjustAmountTotal  = transTo.CostAmountAdjustment + transFrom.CostAmountAdjustment - this.notAllocatableAdjustedAmount();
            InventQty  settleQtyRemain    = transTo.QtySettled;
            InventQty  settleQtyTotal     = transTo.QtySettled + transFrom.QtySettled - this.notAllocatableSettledQty();

            PdsCWInventQty pdsCWSettleQtyRemain = transTo.PdsCWSettled;
            PdsCWInventQty pdsCWsettleQtyTotal = transTo.PdsCWSettled + transFrom.PdsCWSettled - this.pdsCWNotAllocatableSettledQty();

            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                settleAmountRemainSec = transTo.CostAmountSettledSecCur_RU;
                settleAmountTotalSec  = transTo.CostAmountSettledSecCur_RU + transFrom.CostAmountSettledSecCur_RU - this.notAllocatableSettledAmountSec_RU();
                adjustAmountRemainSec = transTo.CostAmountSecCurAdjustment_RU;
                adjustAmountTotalSec  = transTo.CostAmountSecCurAdjustment_RU + transFrom.CostAmountSecCurAdjustment_RU - this.notAllocatableAdjustedAmountSec_RU();
                settleQtyRemainSec    = transTo.QtySettledSecCur_RU;
                settleQtyTotalSec     = transTo.QtySettledSecCur_RU + transFrom.QtySettledSecCur_RU - this.notAllocatableSettledQtySec_RU();
            }
            // </GEERU>

            QueryRun queryRun = this.settlementQueryRun(transFrom, transTo);
            while (queryRun.next())
            {
                inventSettlement = queryRun.get(tableNum(InventSettlement));

                if (this.mustSettlementBeSplited(inventSettlement))
                {
                    InventSettlement splitSettlement = InventSettlement::findRecId(inventSettlement.RecId, true);

                    if (this.allocateByQty(inventSettlement))
                    {
                        splitSettlement.QtySettled              = decRound(transTo.Qty  * inventSettlement.QtySettled  / qtyTotal,InventAdj::settleQtyDec());

                        // <GEERU>
                        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                        {
                            splitSettlement.CostAmountSettled    = CurrencyExchangeHelper::amount(transTo.Qty * inventSettlement.CostAmountSettled / qtyTotal, cur());
                            splitSettlement.CostAmountAdjustment = CurrencyExchangeHelper::amount(transTo.Qty * inventSettlement.CostAmountAdjustment / qtyTotal, cur());
                        }
                        else
                        {
                        // </GEERU>
                            splitSettlement.CostAmountSettled       = CurrencyExchangeHelper::amount(transTo.Qty * inventSettlement.CostAmountSettled / qtyTotal, '');
                            splitSettlement.CostAmountAdjustment    = CurrencyExchangeHelper::amount(transTo.Qty * inventSettlement.CostAmountAdjustment / qtyTotal, '');
                        // <GEERU>
                        }
                        // </GEERU>

                        if (transFrom.PdsCWQty + transTo.PdsCWQty)
                        {
                            splitSettlement.PdsCWSettled    = decround(transTo.PdsCWQty * inventSettlement.PdsCWSettled / (transFrom.PdsCWQty + transTo.PdsCWQty), 0);
                        }

                        if (splitSettlement.QtySettled == 0 && inventSettlement.QtySettled != 0)
                        {
                            splitSettlement.CostAmountSettled       = 0;
                            splitSettlement.CostAmountAdjustment    = 0;
                        }
                    }
                    else
                    {
                        if (inventSettlement.QtySettled == settleQtyTotal)
                        {
                            splitSettlement.PdsCWSettled = pdsCWSettleQtyRemain;
                        }
                        else
                        {
                            if (settleQtyTotal == 0 || settleQtyRemain == 0 || inventSettlement.QtySettled == 0 || pdsCWsettleQtyTotal == 0)
                            {
                                splitSettlement.PdsCWSettled    = 0;
                            }
                            else
                            {
                                splitSettlement.PdsCWSettled  = decround(pdsCWSettleQtyRemain * inventSettlement.PdsCWSettled / pdsCWsettleQtyTotal, 0);
                            }
                        }
                        // <GEERU>
                        if (inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur)
                        {
                            [ settleQtyTotal,
                              settleQtyRemain,
                              settleAmountTotal,
                              settleAmountRemain,
                              adjustAmountTotal,
                              adjustAmountRemain ] = this.allocateByAmount_RU(inventSettlement,
                                                                              splitSettlement,
                                                                              settleQtyTotal,
                                                                              settleQtyRemain,
                                                                              settleAmountTotal,
                                                                              settleAmountRemain,
                                                                              adjustAmountTotal,
                                                                              adjustAmountRemain,
                                                                              currency);
                        // </GEERU>
                        }
                        else
                        {
                        // <GEERU>
                            [ settleQtyTotalSec,
                              settleQtyRemainSec,
                              settleAmountTotalSec,
                              settleAmountRemainSec,
                              adjustAmountTotalSec,
                              adjustAmountRemainSec ] = this.allocateByAmount_RU(inventSettlement,
                                                                                 splitSettlement,
                                                                                 settleQtyTotalSec,
                                                                                 settleQtyRemainSec,
                                                                                 settleAmountTotalSec,
                                                                                 settleAmountRemainSec,
                                                                                 adjustAmountTotalSec,
                                                                                 adjustAmountRemainSec,
                                                                                 currencySec);
                       // </GEERU>
                        }

                        pdsCWSettleQtyRemain    -= splitSettlement.PdsCWSettled;
                        pdsCWsettleQtyTotal     -= inventSettlement.PdsCWSettled;
                    }

                    splitSettlement.TransRecId              = transTo.RecId;
                    if (splitSettlement.QtySettled != 0 || splitSettlement.CostAmountSettled != 0 || splitSettlement.CostAmountAdjustment != 0)
                    {
                        // Settlements with no value or quantity must not be created
                        splitSettlement.insert();
                    }

                    inventSettlement.PdsCWSettled           -= splitSettlement.PdsCWSettled;
                    inventSettlement.QtySettled             -= splitSettlement.QtySettled;
                    inventSettlement.CostAmountSettled      -= splitSettlement.CostAmountSettled;
                    inventSettlement.CostAmountAdjustment   -= splitSettlement.CostAmountAdjustment;
                    if (inventSettlement.QtySettled != 0 || inventSettlement.CostAmountSettled != 0 || inventSettlement.CostAmountAdjustment != 0)
                    {
                        inventSettlement.update();
                    }
                    else
                    {
                        inventSettlement.delete();
                    }
                }
            }

            // <GEERU>
            if (settleAmountRemain || (countryRegion_RU && settleAmountRemainSec))
            // </GEERU>
            {
                throw error("@SYS67939");
            }
            // <GEERU>
            if (adjustAmountRemain || (countryRegion_RU && adjustAmountRemainSec))
            // </GEERU>
            {
                throw error("@SYS67940");
            }
            // <GEERU>
            if (settleQtyRemain    || (countryRegion_RU && settleQtyRemainSec))
            // </GEERU>
            {
                throw error("@SYS67938");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>