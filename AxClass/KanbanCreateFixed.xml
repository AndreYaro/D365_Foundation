<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanCreateFixed</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanCreateFixed</c> class creates fixed kanbans based on a kanban rule or another kanban.
/// </summary>
public class KanbanCreateFixed extends KanbanCreate
{
    KanbanRuleFixed     kanbanRuleFixed;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the kanban due date and time.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanDueDateTime</c> value.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A required unit of measure is not set up.
    /// </exception>
    protected KanbanDueDateTime dueDateTime()
    {
        KanbanDueDateTime       calculatedDueDateTime;
        real                    leadTimeInSeconds;
        TransDateTime           currentDateTime = DateTimeUtil::getSystemDateTime();
        LeanRuleData            leanRuleData    = kanbanRule.ruleData();
        KanbanFlow              kanbanFlow      = leanRuleData.kanbanFlow();
        TransDateTime           ruleValidFrom   = leanRuleData.validFrom();
        CalendarId              calendarId      = kanbanFlow.lastPlanActivity().calendarId();

        //create a default DateTime for the kanbans
        KanbanDueDateTime defaultScheduleDateTime = max(currentDateTime,ruleValidFrom);

        //if we have a calendar, make sure the default date is opened, or find an open one
        if (calendarId)
        {
            defaultScheduleDateTime = WorkCalendar::findOpenDateTimeForward(calendarId,defaultScheduleDateTime,true);
        }

        //date and time are xor. Either we schedule roughly with lead time in days or specific with hours.
        if (kanbanRuleFixed.ReplenishmentLeadTime)
        {
            if (!kanbanRuleFixed.ReplenishmentTimeUnitOfMeasure)
            {
                throw error(strfmt("@SYS327435",kanbanRule.RuleId));
            }

            leadTimeInSeconds  = ProdTimeUnitOfMeasure::convertValueToTimeUnit(kanbanRuleFixed.ReplenishmentTimeUnitOfMeasure,
                                                                               kanbanRuleFixed.ReplenishmentLeadTime,
                                                                               ProdTimeUnitType::Seconds,
                                                                               itemId,
                                                                               inventDimId);
        }

        if (calendarId)
        {
            WorkCalendarSched workCalendarSched = new WorkCalendarSched();
            calculatedDueDateTime = workCalendarSched.schedTimeUTC(SchedDirection::Forward,
                                                                                 defaultScheduleDateTime,
                                                                                 leadTimeInSeconds,
                                                                                 NoYes::Yes,
                                                                                 calendarId,
                                                                                 false);
        }
        else
        {
            calculatedDueDateTime = DateTimeUtil::addSeconds(defaultScheduleDateTime,any2int64(decRound(leadTimeInSeconds,0)));
        }

        return max(dueDateTime,calculatedDueDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result = super();

        if (result)
        {
            kanbanRuleFixed = KanbanRuleFixed::findParentRecId(kanbanRule.RecId);
            result          = kanbanRuleFixed.RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified creation parameters.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The caller object.
    /// </param>
    /// <returns>
    ///    true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean result = super(_calledFrom);

        if (result)
        {
            if (!kanbanRuleFixed)
            {
                result = checkFailed(strfmt("@SYS320510",kanbanRule.RuleId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanCreate construct()
    {
        return new KanbanCreateFixed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>