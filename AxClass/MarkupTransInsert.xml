<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupTransInsert</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MarkupTransInsert</c> class inserts <c>MarkupTrans</c> records.
/// </summary>
class MarkupTransInsert
{
    MarkupTransInsertParameters parameters;

    readonly boolean    mcrCallCenterEnabled = MCROrderParameters::isCallCenterEnabledAndInUse();

    private NoYes       installEligible;
    private boolean     mcrAllowDelete;

    CustVendRel           accountRelation;
    ItemRelation          itemRelation;
    DlvModeRelation       dlvModeRelation;
    RetailChannelRelation retailChannelRelation;

    private RetailChannelTable retailChannelTable;

    private RetailOrderCalculator retailCalculator;

    private MarkupInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMarkupAutoLine</Name>
				<Source><![CDATA[
    protected boolean skipMarkupAutoLine(MarkupAutoLine _markupAutoLine)
    {
        if (_markupAutoLine.MarkupCategory == MarkupCategory::External)
        {
            // Don't auto insert External Charge type.
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().init())
        {
            RefRecId omInternalOrganization = RetailCharges::getOMInternalOrganizationFromSource(parameters.Source);
            retailChannelTable = RetailChannelTable::findByOperatingUnitId(omInternalOrganization);

            if (this.shouldInitRetailOrderCalculator())
            {
                this.initRetailOrderCalculator();
            }

            if (mcrCallCenterEnabled)
            {
                SalesTable salesTable;
                PurchTable purchTable;

                switch (parameters.Source.TableId)
                {
                    case(tableNum(SalesLine)):
                        SalesLine salesLine = parameters.Source;
                        salesTable = salesLine.salesTable();
                        break;

                    case(tableNum(SalesTable)):
                        salesTable = parameters.Source;
                        break;

                    case(tableNum(PurchLine)):
                        PurchLine purchLine = parameters.Source;
                        purchTable = purchLine.purchTable();
                        break;

                    case(tableNum(PurchTable)):
                        purchTable = parameters.Source;
                        break;
                }

                // set eligible flag for SO that are not returns based on parameter
                // and then use flag below before inserting markup trans record.
                if (salesTable && salesTable.SalesType != SalesType::ReturnItem)
                {
                    mcrAllowDelete = true;
                    if (MCROrderParameters::find().InstallPlanApplyMiscCharge == MCRInstallPlanApplyMiscCharge::InstallPlan)
                    {
                        installEligible = NoYes::Yes;
                    }
                }

                if (parameters.Source.TableId == tableNum(SalesQuotationTable))
                {
                    mcrAllowDelete = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDelete</Name>
				<Source><![CDATA[
    protected boolean mustDelete()
    {
        if (parameters.deleteExistingMarkupTrans &&
            ((!mcrCallCenterEnabled || parameters.ModuleType == MarkupModuleType::Vend) || mcrAllowDelete))
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    protected void delete()
    {
        if (this.mustDelete())
        {
            Markup::delete(parameters.source, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMarkupTrans</Name>
				<Source><![CDATA[
    protected MarkupTrans initializeMarkupTrans(MarkupAutoLine _markupAutoLine)
    {
        return this.initializeMarkupTransFromParent(_markupAutoLine, parameters.Source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeMarkupTransFromParent</Name>
				<Source><![CDATA[
    private MarkupTrans initializeMarkupTransFromParent(MarkupAutoLine _markupAutoLine, Common parent)
    {
        MarkupTrans markupTrans;
        markupTrans.initFromMarkupTable(_markupAutoLine.markupTable());
        markupTrans.initFromMarkupAutoLine(_markupAutoLine);
        markupTrans.initSequenceCompoundSpecificUoMFromMarkupAutoLine(_markupAutoLine, parent);
        markupTrans.initFromCaller(parent.TableId, parent);
        markupTrans.MCRInstallmentEligible = installEligible;

        if (_markupAutoLine.MarkupCurrencyCode)
        {
            markupTrans.CurrencyCode = _markupAutoLine.MarkupCurrencyCode;
        }

        markupTrans.TransTableId   = parent.TableId;
        markupTrans.TransRecId     = parent.RecId;
        markupTrans.LineNum        = MarkupTrans::lastLineNum(parent.TableId, parent.RecId) + 1;

        if (parameters.ModuleType == MarkupModuleType::Delivery)
        {
            markupTrans.ModuleType = MarkupModuleType::Delivery;
        }

        if (parameters.invertSign && 
            markupTrans.MarkupCategory == MarkupCategory::Fixed)
        {
            markupTrans.Value = -markupTrans.Value;
        }

        if (parameters.LanguageId)
        {
            markupTrans.Txt = LanguageTxt::languageId(tableNum(MarkupAutoTable), _markupAutoLine.RecId, parameters.LanguageId);
        }

        if (!markupTrans.Txt)
        {
            markupTrans.Txt = MarkupTable::find(_markupAutoLine.ModuleType, _markupAutoLine.MarkupCode).Txt;
        }

        markupTrans.IsAutoCharge = NoYes::Yes;
        
        return markupTrans;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemCode</Name>
				<Source><![CDATA[
    protected TableGroupAll itemCode()
    {
        if (parameters.ModuleCategory == HeadingLine::Heading ||
            parameters.ModuleType == MarkupModuleType::Delivery)
        {
            return TableGroupAll::All;
        }
        return TableGroupAll::Table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryModeCode</Name>
				<Source><![CDATA[
    protected TableGroupAll deliveryModeCode()
    {
        if (parameters.ModuleType == MarkupModuleType::Cust || parameters.ModuleType == MarkupModuleType::Delivery || parameters.ModuleType == MarkupModuleType::Vend)
        {
            return TableGroupAll::Table;
        }
        return TableGroupAll::All;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retailChannelCode</Name>
				<Source><![CDATA[
    protected TableGroupAll retailChannelCode()
    {
        RetailChannelCode retailChannelCode;

        if (parameters.ModuleType == MarkupModuleType::Cust || parameters.ModuleType == MarkupModuleType::Delivery)
        {
            retailChannelCode = TableGroupAll::Table;
        }
        else
        {
            retailChannelCode = TableGroupAll::All;
        }

        return retailChannelCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForMarkupAutoTable</Name>
				<Source><![CDATA[
    protected void insertForMarkupAutoTable(MarkupAutoTable _markupAutoTable)
    {
        if (parameters.isForRetailOrderWithAdvancedAutoCharges && _markupAutoTable.RetailAdvancedChargesDeliveryProrate)
        {
            return;
        }
        
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().insertForMarkupAutoTable())
        {
            MarkupAutoLine markupAutoLine;

            QueryRun qr = new QueryRun(this.buildMarkupAutoLineQuery(_markupAutoTable));
        
            while (qr.next())
            {
                markupAutoLine = qr.get(tableNum(MarkupAutoLine));
                this.insertMarkupTrans(markupAutoLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkupAutoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the correct <c>MarkupAutoTable</c> record for the code insertion.
    /// </summary>
    /// <param name = "_accountCode">The account code.</param>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_dlvModeCode">The delivery mode code.</param>
    /// <returns>The <c>MarkupAutoTable</c>.</returns>
    protected MarkupAutoTable findMarkupAutoTable(TableGroupAll _accountCode, TableGroupAll _itemCode, TableGroupAll _dlvModeCode)
    {
        MarkupAutoTable searchParameters, resultTable;
        searchParameters.initValue();

        searchParameters.ModuleCategory        = parameters.ModuleCategory;
        searchParameters.ModuleType            = parameters.ModuleType;
        searchParameters.AccountCode           = _accountCode;
        searchParameters.AccountRelation       = accountRelation;
        searchParameters.ItemCode              = _itemCode;
        searchParameters.ItemRelation          = itemRelation;
        searchParameters.ReturnRelation        = '';
        searchParameters.DlvModeCode           = _dlvModeCode;
        searchParameters.DlvModeRelation       = dlvModeRelation;

        if (FeatureStateProvider::isFeatureEnabled(RetailFilterAutoChargesByChannelEnableFeature::instance()))
        {
            searchParameters.RetailChannelCode = TableGroupAll::All;
            searchParameters.RetailChannelRelation = '';
            resultTable = this.findMarkupAutoTableByNaturalKey(searchParameters);
        }

        if (resultTable.RecId == 0)
        {
            // These search parameters are set to the default upgrade values to support backwards compatibility
            searchParameters.RetailChannelCode = TableGroupAll::Table;
            searchParameters.RetailChannelRelation = '';
            resultTable = this.findMarkupAutoTableByNaturalKey(searchParameters);
        }

        return resultTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkupAutoTableForRetailChannelCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the correct <c>MarkupAutoTable</c> record for the code insertion.
    /// </summary>
    /// <param name = "_accountCode">The account code.</param>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_dlvModeCode">The delivery mode code.</param>
    /// <param name = "_retailChannelCode">The retail channel code.</param>
    /// <returns>The <c>MarkupAutoTable</c>.</returns>
    /// <remarks> This method is only meant to be called if filtering auto charges by channel is enabled. Use findMarkupAutoTable() if it is not.</remarks>
    private MarkupAutoTable findMarkupAutoTableForRetailChannelCodes(TableGroupAll _accountCode, TableGroupAll _itemCode, TableGroupAll _dlvModeCode, TableGroupAll _retailChannelCode)
    {
        MarkupAutoTable searchParameters;
        searchParameters.initValue();

        searchParameters.ModuleCategory        = parameters.ModuleCategory;
        searchParameters.ModuleType            = parameters.ModuleType;
        searchParameters.AccountCode           = _accountCode;
        searchParameters.AccountRelation       = accountRelation;
        searchParameters.ItemCode              = _itemCode;
        searchParameters.ItemRelation          = itemRelation;
        searchParameters.ReturnRelation        = '';
        searchParameters.DlvModeCode           = _dlvModeCode;
        searchParameters.DlvModeRelation       = dlvModeRelation;

        // These search parameters should be set when filter auto charges by channel is enabled
        searchParameters.RetailChannelCode     = _retailChannelCode;
        searchParameters.RetailChannelRelation = retailChannelRelation;

        return this.findMarkupAutoTableByNaturalKey(searchParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMarkupAutoTableByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>MarkupAutoTable</c> record based on provided search parameters.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <returns>A <c>MarkupAutoTable</c> record.</returns>
    protected MarkupAutoTable findMarkupAutoTableByNaturalKey(MarkupAutoTable _searchParameters)
    {
        return MarkupAutoTable::findByNaturalKey(_searchParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>MarkupTrans</c> records for the <c>MarkupAutoTable</c>.
    /// </summary>
    /// <param name = "_accountCode">The account code.</param>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_dlvModeCode">The delivery mode code.</param>
    protected void insertForCodes(TableGroupAll _accountCode, TableGroupAll _itemCode, TableGroupAll _dlvModeCode)
    {
        MarkupAutoTable markupAutoTable = this.findMarkupAutoTable(_accountCode, _itemCode, _dlvModeCode);

        if (markupAutoTable)
        {
            this.insertForMarkupAutoTable(markupAutoTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForRetailChannelCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>MarkupTrans</c> records for the <c>MarkupAutoTable</c> if the <c>MarkupAutoTable</c> satisfies the channel filter.
    /// </summary>
    /// <param name = "_accountCode">The account code.</param>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_dlvModeCode">The delivery mode code.</param>
    /// <param name = "_retailChannelCode">The retail channel code.</param>
    /// <remarks> This method is only meant to be called if filtering auto charges by channel is enabled. Use insertForCodes() if it is not.</remarks>
    private void insertForRetailChannelCodes(TableGroupAll _accountCode, TableGroupAll _itemCode, TableGroupAll _dlvModeCode, TableGroupAll _retailChannelCode)
    {
        MarkupAutoTable markupAutoTable = this.findMarkupAutoTableForRetailChannelCodes(_accountCode, _itemCode, _dlvModeCode, _retailChannelCode);

        if (markupAutoTable && Markup::validateRelation(_retailChannelCode, retailChannelRelation) && RetailCharges::markupMatchesChannelFilter(markupAutoTable, this.parameters.Source, this.parameters.ModuleType))
        {
            this.insertForMarkupAutoTable(markupAutoTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipOriginalRetailAdvancedChargesDeliveryProrateCharges</Name>
				<Source><![CDATA[
    protected boolean shouldSkipOriginalRetailAdvancedChargesDeliveryProrateCharges(MarkupAutoTable _markupAutoTable)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeaderProratedCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts charges that are meant to be prorated to matching sales lines (This is a retail advanced auto charges feature).
    /// </summary>
    internal void insertHeaderProratedCodes()
    {
        MarkupAutoLine markupAutoLine;

        if (this.parameters.Source.TableId != tableNum(SalesTable))
        {
            // this operation only makes sense when determining charges at the SO (header) level.
            return;
        }

        SalesTable salesTable = this.parameters.Source;
        Query salesLinesQuery = salesTable.linesQuery();
        var qr = new QueryRun(salesLinesQuery);

        Map autoMarkupsToSalesLines = new Map(Types::Record, Types::Class);

        while (qr.next())
        {
            SalesLine salesLine = qr.get(tableNum(SalesLine));

            MarkupAutoTable markupAutoTable;
            while select markupAutoTable
                where markupAutoTable.ModuleCategory == HeadingLine::Heading
                    && markupAutoTable.ModuleType == parameters.ModuleType
                    && markupAutoTable.ReturnRelation == ''
            {
                if (RetailProrateChargesToMatchingSalesLines::markupMatchesSalesLine(markupAutoTable, salesTable, salesLine)
                    && RetailCharges::markupMatchesChannelFilter(markupAutoTable, salesTable, this.parameters.ModuleType)
                    && !this.shouldSkipOriginalRetailAdvancedChargesDeliveryProrateCharges(markupAutoTable))
                {
                    RetailProrateChargesToMatchingSalesLines::updateProrationGroupMap(autoMarkupsToSalesLines, markupAutoTable, salesLine);
                }
            }
        }

        // now that every auto-markup is paired with its list of sales lines, we can prorate across those sales lines.
        var autoMarkupEnum = autoMarkupsToSalesLines.getEnumerator();
        while (autoMarkupEnum.moveNext())
        {
            MarkupAutoTable mat = autoMarkupEnum.currentKey();
            List salesLines = autoMarkupEnum.currentValue();

            Amount salesLinesSum = RetailProrateChargesToMatchingSalesLines::salesLineSumAmount(salesLines);

            while select markupAutoLine
            index hint TableIdx
            where markupAutoLine.TableTableId  == mat.TableId          &&
                markupAutoLine.TableRecId      == mat.RecId            &&
                markupAutoLine.CurrencyCode    == parameters.Currency  &&
                markupAutoLine.MCRReturnMarkup == parameters.McrReturnMarkup
            {
                // If it's a line-level charge, there is no from/to range to check, and only one line.
                if (parameters.ModuleCategory == HeadingLine::Line
                // But if it's a header-level charge, we match if the from/to amount is within range.
                ||
                    (  (salesLinesSum <= 0  //if _totalAmount is not positive we do not apply tiers charges
                        && markupAutoLine.FromAmount == 0
                        && markupAutoLine.ToAmount   == 0
                        )
                        ||
                        (salesLinesSum > 0  //if _totalAmount is positive we do apply tiers charges
                        && markupAutoLine.FromAmount <= salesLinesSum
                        && (markupAutoLine.ToAmount  > salesLinesSum || markupAutoLine.ToAmount   == 0)
                        )
                    )
                )
                {
                    this.prorateChargeToLines(markupAutoLine, salesLines, salesLinesSum);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prorateChargeToLines</Name>
				<Source><![CDATA[
    private void prorateChargeToLines(MarkupAutoLine markupAutoLine, List salesLines, Amount salesLinesSum)
    {
        if (salesLinesSum == 0.00)
        {
            return;
        }

        Amount netChargeAmount = 0.00;

        if (markupAutoLine.MarkupCategory == MarkupCategory::Fixed)
        {
            netChargeAmount = markupAutoLine.Value;
        }
        else if (markupAutoLine.MarkupCategory == MarkupCategory::Percent)
        {
            netChargeAmount = (markupAutoLine.Value / 100) * salesLinesSum;
        }

        // keep track of the current difference introduced by rounding.
        Amount roundingDifference = 0.00;
        var salesLinesEnum = salesLines.getEnumerator();
        while (salesLinesEnum.moveNext())
        {
            SalesLine salesLine = salesLinesEnum.current();
            Amount lineAmountPercentOfWhole = salesLine.lineAmountForTieredCharge() / salesLinesSum;
            Amount proratedChargeAmount = netChargeAmount * lineAmountPercentOfWhole;

            MarkupTrans markupTrans = this.initializeMarkupTransFromParent(markupAutoLine, salesLine);

            markupTrans.IsAdvancedLineProrated = true;
            markupTrans.Value = CurrencyExchange::round(proratedChargeAmount - roundingDifference, markupTrans.CurrencyCode);
            roundingDifference += markupTrans.Value - proratedChargeAmount;

            if (retailChannelTable)
            {
                this.exemptTaxesForPriceInclusive(markupTrans);
            }

            if (markupTrans.MarkupCategory == MarkupCategory::Percent)
            {
                // For percent-based charges, the charge value is the percent that is used to determine the calculated amount.
                // When a percent-based charge is prorated, we do the percent calculation at the header level, and then prorate
                // the result down to the lines -- but on each line, the charge itself becomes fixed, since we have already done the percent calcuation.
                markupTrans.MarkupCategory = MarkupCategory::Fixed;
            }

            if (!RetailProrateChargesToMatchingSalesLines::proratedChargeAlreadyExistsOnThisSalesLine(markupTrans))
            {
                markupTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateRetailChannelCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// An extra iteration over RetailChannelCode Table/Group/All that only occurs if the filter auto charges by channel feature is enabled.
    /// For 'All', we search for an auto charge with RetailChannelRelation set to ''.
    /// For 'Table', we search for an auto charge with RetailChannelRelation set to the RetailChannelId of the channel, for example if the channel were 'Houston' the Id would be '000017'.
    /// For 'GroupId', we search for an auto charge for each of the user defined channel relations because any one of them could apply to the sales order.
    /// </summary>
    /// <param name = "_accountCode">The TableGroupAll value for customer accounts.</param>
    /// <param name = "_itemCode">The TableGroupAll value for items.</param>
    /// <param name = "_dlvModeCode">The TableGroupAll value for delivery modes.</param>
    private void iterateRetailChannelCodes(TableGroupAll _accountCode, TableGroupAll _itemCode, TableGroupAll _dlvModeCode)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().iterateRetailChannelCodes())
        {
            TableGroupAll retailChannelCode = this.retailChannelCode();
            while (retailChannelCode <= TableGroupAll::All)
            {
                MarkupAutoTable markupAutoTable;

                switch (retailChannelCode)
                {
                    case TableGroupAll::All:
                        retailChannelRelation = '';
                        this.insertForRetailChannelCodes(_accountCode, _itemCode, _dlvModeCode, retailChannelCode);
                        break;

                    case TableGroupAll::Table:
                        // The correct RetailChannelRelation for 'Table' is the RetailChannelId of the source's channel
                        retailChannelRelation = retailChannelTable.RetailChannelId;
                        this.insertForRetailChannelCodes(_accountCode, _itemCode, _dlvModeCode, retailChannelCode);
                        break;

                    case TableGroupAll::GroupId:
                        RetailMarkupAutoChannelGroup retailMarkupAutoChannelGroup;

                        while select RetailChannelRelation from retailMarkupAutoChannelGroup
                        {
                            retailChannelRelation = retailMarkupAutoChannelGroup.RetailChannelRelation;

                            this.insertForRetailChannelCodes(_accountCode, _itemCode, _dlvModeCode, retailChannelCode);
                        }
                        break;
                }

                retailChannelCode += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateDeliveryModeCodes</Name>
				<Source><![CDATA[
    protected void iterateDeliveryModeCodes(TableGroupAll _accountCode, TableGroupAll _itemCode)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().iterateDeliveryModeCodes())
        {
            TableGroupAll dlvModeCode = this.deliveryModeCode();

            while (dlvModeCode <= TableGroupAll::All)
            {
                dlvModeRelation = Markup::dlvModeRelation(dlvModeCode, parameters.DlvModeId, parameters.DlvModeGroup);
                if (Markup::validateRelation(dlvModeCode, dlvModeRelation))
                {
                    // If advanced auto charges and the feature to filter auto charges based on channel are enabled, run the extra logic
                    if (this.autoChargesBasedOnRetailChannel())
                    {
                        this.iterateRetailChannelCodes(_accountCode, _itemCode, dlvModeCode);
                    }
                    else
                    {
                        // At this point, we will look for all markup codes that match this configuration, and insert the markup transaction.
                        this.insertForCodes(_accountCode, _itemCode, dlvModeCode);
                    }
                }
                dlvModeCode += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoChargesBasedOnRetailChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the module type not equal to vend, advanced auto charges and filtering auto charges by channel feature enabled or not.
    /// </summary>
    /// <returns>True, if module type not equal to vend, advanced auto charges and the feature to filter auto charges based on channel are enabled. Otherwise false.</returns>
    protected boolean autoChargesBasedOnRetailChannel()
    {
        return (this.parameters.ModuleType != MarkupModuleType::Vend && RetailParameters::find().UseAdvancedAutoCharges && FeatureStateProvider::isFeatureEnabled(RetailFilterAutoChargesByChannelEnableFeature::instance()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateItemCodes</Name>
				<Source><![CDATA[
    protected void iterateItemCodes(TableGroupAll _accountCode)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().iterateItemCodes())
        {
            TableGroupAll itemCode = this.itemCode();
            while (itemCode <= TableGroupAll::All)
            {
                itemRelation = Markup::itemRelation(itemCode, parameters.Item, parameters.ItemGroup);
                if (Markup::validateRelation(itemCode, itemRelation))
                {
                    this.iterateDeliveryModeCodes(_accountCode, ItemCode);
                }
                itemCode += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateAccountCodes</Name>
				<Source><![CDATA[
    protected void iterateAccountCodes()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().iterateAccountCodes())
        {
            TableGroupAll accountCode = TableGroupAll::Table;
            while (accountCode <= TableGroupAll::All)
            {
                accountRelation = Markup::accountRelation(accountCode, parameters.Account, parameters.AccountGroup);
                if (Markup::validateRelation(accountCode, accountRelation))
                {
                    this.iterateItemCodes(accountCode);
                }
                accountCode += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMatchingCharges</Name>
				<Source><![CDATA[
    protected void insertMatchingCharges()
    {
        if (!this.shouldSkipOriginalInsertMatchingCharges())
        {
            this.iterateAccountCodes();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipOriginalInsertMatchingCharges</Name>
				<Source><![CDATA[
    protected boolean shouldSkipOriginalInsertMatchingCharges()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>MarkupTrans</c> records using the provided parameters.
    /// </summary>
    /// <param name = "_parameters">The parameters for the creation.</param>
    public void insert(MarkupTransInsertParameters _parameters)
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().chargeActivities().transInsert())
        {
            parameters = _parameters;

            if (Markup::activated(parameters.ModuleCategory, parameters.ModuleType))
            {
                this.init();

                ttsbegin;
                this.delete();
                this.insertMatchingCharges();

                if (_parameters.ShouldDoRetailChargeProration)
                {
                    this.insertHeaderProratedCodes();
                }
                        
                if (mcrCallCenterEnabled)
                {
                    this.applyShippingPromotionDiscountToMarkupTrans();
                }

                MarkupTransInsert::applyCompoundingPositionNumberToAutoCharges(parameters.ModuleCategory, parameters.Source);

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldApplyCompoundingPositionNumberToAutoCharges</Name>
				<Source><![CDATA[
    private static boolean shouldApplyCompoundingPositionNumberToAutoCharges(HeadingLine _moduleCategory, Common _source)
    {
        return _moduleCategory == HeadingLine::Heading
            && Markup::isSequenceAndCompoundEnabledForHeaderSource(_source.TableId)
            && AutoChargesSetupSequenceCompoundFeature::instance().IsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCompoundingPositionNumberToAutoCharges</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void applyCompoundingPositionNumberToAutoCharges(HeadingLine _moduleCategory, Common _source)
    {   
        using (SysInstrumentationActivityContext activityContext = MarkupInstrumentationLogger::createLogger(classStr(MarkupTransInsert)).chargeActivities().applyCompoundingPosition())
        {
            if (MarkupTransInsert::shouldApplyCompoundingPositionNumberToAutoCharges(_moduleCategory, _source))
            {
                int             i = 1;
                MarkupTrans     markupTrans;
                MarkupAutoTable markupAutoTable;
                MarkupAutoLine  markupAutoLine;

                ttsbegin;

                while select forupdate markupTrans
                    order by markupTrans.Sequence,
                        markupAutoTable.AccountCode,
                        markupAutoTable.ItemCode,
                        markupAutoTable.DlvModeCode,
                        markupTrans.MarkupAutoLineRecId
                    where markupTrans.TransTableId == _source.TableId &&
                        markupTrans.TransRecId == _source.RecId
                    join RecId from markupAutoLine
                        where markupAutoLine.RecId == markupTrans.MarkupAutoLineRecId
                        join RecId from markupAutoTable
                            where markupAutoTable.RecId == markupAutoLine.TableRecId &&
                                markupAutoTable.TableId == markupAutoLine.TableTableId
                {
                    markupTrans.Position = i;
                    markupTrans.doUpdate();

                    i++;
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyShippingPromotionDiscountToMarkupTrans</Name>
				<Source><![CDATA[
    private void applyShippingPromotionDiscountToMarkupTrans()
    {
        if (RetailShippingDiscountFeature::existsConfiguration() && retailCalculator != null)
        {
            retailCalculator.calculateShippingDiscountsForOrder(parameters.ModuleCategory, parameters.ModuleType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exemptTaxesForPriceInclusive</Name>
				<Source><![CDATA[
    private void exemptTaxesForPriceInclusive(MarkupTrans markupTrans)
    {
        if (retailCalculator != null)
        {
            markupTrans.TaxExemptPriceInclusiveOriginalPrice = markupTrans.Value;
            markupTrans.TaxExemptPriceInclusiveReductionAmount = 0;
            retailCalculator.calculatePriceForCharge(markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailOrderCalculator</Name>
				<Source><![CDATA[
    private void initRetailOrderCalculator()
    {
        SalesId salesId;
        SalesLine salesLine;
        SalesQuotationId quotationId;
        SalesQuotationLine salesQuotationLine;

        if (parameters.Source.TableId == tableNum(SalesLine))
        {
            salesLine = parameters.Source;
            salesId = salesLine.SalesId;
        }
        else if (parameters.Source.TableId == tableNum(SalesTable))
        {
            SalesTable salesTable;
            salesTable = parameters.Source;
            salesId = salesTable.SalesId;
        }
        else if (parameters.Source.TableId == tableNum(SalesQuotationLine))
        {
            salesQuotationLine = parameters.Source;
            quotationId = salesQuotationLine.QuotationId;
        }
        else if (parameters.Source.TableId == tableNum(SalesQuotationTable))
        {
            SalesQuotationTable salesQuotationTable;
            salesQuotationTable = parameters.Source;
            quotationId = salesQuotationTable.QuotationId;
        }
        else
        {
            return;
        }

        if (salesId != '')
        {
            retailCalculator = RetailOrderCalculator::construct(parameters.Source.TableId, salesId, salesLine);
        }
        else if (quotationId != '')
        {
            retailCalculator = RetailOrderCalculator::construct(parameters.Source.TableId, quotationId, salesQuotationLine);
        }
        else
        {
            return;
        }

        retailCalculator.initializeCrtTransactionInstanceVariable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupTransInsert construct()
    {
        return new MarkupTransInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMarkupAutoLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for <c>MarkupAutoLine</c> records
    /// </summary>
    /// <param name = "_markupAutoTable">The <c>MarkupAutoTable</c> value</param>
    /// <returns>Query generated for <c>MarkupAutoLine</c> table based on table <c>MarkupAutoTable</c> and parameters</returns>
    protected Query buildMarkupAutoLineQuery(MarkupAutoTable _markupAutoTable)
    {
        Query ret = new Query();

        QueryBuildDataSource qbds = ret.addDataSource(tableNum(MarkupAutoLine));

        qbds.addRange(fieldNum(MarkupAutoLine, TableTableId)).value(queryValue(_markupAutoTable.TableId));
        qbds.addRange(fieldNum(MarkupAutoLine, TableRecId)).value(queryValue(_markupAutoTable.RecId));
        qbds.addRange(fieldNum(MarkupAutoLine, CurrencyCode)).value(queryValue(parameters.Currency));
        qbds.addRange(fieldNum(MarkupAutoLine, MCRReturnMarkup)).value(queryValue(parameters.McrReturnMarkup));
        qbds.addRange(fieldNum(MarkupAutoLine, InventSiteId)).value(queryRangeConcat(queryValue(parameters.InventSiteId), ''));
        qbds.addRange(fieldNum(MarkupAutoLine, InventLocationId)).value(queryRangeConcat(queryValue(parameters.InventLocationId), ''));

        // If it's a line-level charge, there is no from/to range to check.
        if (parameters.ModuleCategory != HeadingLine::Line)
        {
            str amountFilterStr;
            
            if (parameters.TotalAmount <= 0)  //if _totalAmount is not positive we do not apply tiers charges
            {
                amountFilterStr = strfmt('((%1 == %3) && (%2 == %4))',
                    fieldstr(MarkupAutoLine, FromAmount),
                    fieldstr(MarkupAutoLine, ToAmount),
                    SysQuery::value(0),
                    SysQuery::value(0));
            }
            else if (parameters.TotalAmount > 0)  //if _totalAmount is not positive we do apply tiers charges            
            {
                amountFilterStr = strfmt('((%1 <= %3) && ((%2 > %4) || ((%2 == %5) && (%1 != %6))))',
                    fieldstr(MarkupAutoLine, FromAmount),
                    fieldstr(MarkupAutoLine, ToAmount),
                    SysQuery::value(parameters.TotalAmount),
                    SysQuery::value(parameters.TotalAmount),
                    SysQuery::value(0), //ToAmount == 0 means that we have no upper limit.
                    SysQuery::value(0)); //but it is only in the case if FromAmount is defined (not 0). Otherwise it is not a tier charge.
            }

            qbds.addRange(fieldNum(MarkupAutoLine, FromAmount)).value(amountFilterStr);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMarkupTrans</Name>
				<Source><![CDATA[
    protected void insertMarkupTrans(MarkupAutoLine _markupAutoLine)
    {
        if (this.skipMarkupAutoLine(_markupAutoLine) || RetailCharges::markupAutoLineAlreadyExists(parameters, _markupAutoLine))
        {
            return;
        }

        MarkupTrans markupTrans = this.initializeMarkupTrans(_markupAutoLine);

        if (retailChannelTable)
        {
            this.exemptTaxesForPriceInclusive(markupTrans);
        }

        markupTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitRetailOrderCalculator</Name>
				<Source><![CDATA[
    protected boolean shouldInitRetailOrderCalculator()
    {
        boolean shouldInitRetailOrderCalculator =
            RetailPricingKillSwitch::alwaysInitCalculatorMarkupTransInsert() ||
            RetailShippingDiscountFeature::existsConfiguration() ||
            retailChannelTable.CalcExemptTaxesForPriceInclusive;

        return shouldInitRetailOrderCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal MarkupInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = MarkupInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>