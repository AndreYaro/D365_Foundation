<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdOperandType_Register</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25StdOperandType_Register extends RTax25StdOperandType
{
    #define.Zero("0")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editTo</Name>
				<Source><![CDATA[
    public RTax25StdRefId editTo(boolean                    _set,
                                 RTax25StdRefId             _refIdTo,
                                 RTax25StdExpressionLine    _expressionLine)
    {
        container fieldLabels;
        RTax25FieldLabel    ret;

        if (! _set && ! _expressionLine.RefIdTo)
            return "";

        fieldLabels = RTax25RegType::construct(RTax25RegisterTable::registerId2Type(_expressionLine.RefIdFrom)).fieldLabel();

        if (_set)
        {
            _expressionLine.RefIdTo = int2str(confind(fieldLabels, _refIdTo));
            if (_expressionLine.RefIdTo == #Zero)
            {
                _expressionLine.RefIdTo = "";
            }
        }

        ret = conpeek(fieldLabels, str2int(_expressionLine.RefIdTo));
        return ret != #Zero ? ret : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupFrom</Name>
				<Source><![CDATA[
    public void lookupFrom()
    {
        controlRefIdFrom.performTypeLookup(extendedtypenum(RTax25RegisterId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTo</Name>
				<Source><![CDATA[
    public void lookupTo()
    {
        ;
        if (! expressionLine.RefIdFrom)
            return;
        RTax25RegType::lookupFieldLabel(controlRefIdTo, expressionLine.RefIdFrom, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>operand</Name>
				<Source><![CDATA[
    public AmountMST operand()
    {
        AmountMST                   ret;
        RTax25RegisterJournalTable  journalTable;
        RTax25RegisterJournalTrans  journalTrans;
        RTax25RegisterJournalLink   journalLink;
        RTax25RegisterTrans         registerTrans;
        RTax25Query                 regQuery;

        select firstonly JournalNum, FiscalYear, PeriodType, PeriodNum, EnableCorrective, RegisterJournalType, RecId from journalTable
            order by Version desc
            where journalTable.EndDate == dateTo
                && journalTable.Accepted             != RTax25CorrectionAccepted::Rejected
                && journalTable.RegisterJournalType  == RTax25RegisterJournalType::ProfitTax;

        if (journalTable.EnableCorrective)
        {
            select journalTrans
                where ! journalTrans.Cancelled                                               &&
                        journalTrans.Status     == RTax25RegisterStatus::Calculated &&
                        journalTrans.RegisterId == expressionLine.RefIdFrom
                exists join journalLink
                    where journalLink.TransRecId == journalTrans.RecId &&
                          journalLink.TableRecId == journalTable.RecId;
        }
        else
        {
            select journalTrans
                where journalTrans.RegisterId          == expressionLine.RefIdFrom         &&
                      journalTrans.JournalNum          == journalTable.JournalNum          &&
                      journalTrans.FiscalYear          == journalTable.FiscalYear          &&
                      journalTrans.PeriodType          == journalTable.PeriodType          &&
                      journalTrans.PeriodNum           == journalTable.PeriodNum           &&
                      journalTrans.RegisterJournalType == journalTable.RegisterJournalType &&
                          journalTrans.Cancelled           == NoYes::No                        &&
                          journalTrans.Status              == RTax25RegisterStatus::Calculated;
        }

        while (journalTrans)
        {
            if (journalTable.fromDate() == dateFrom)
            {
                if (RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                  journalTrans.RegisterId,
                                                  journalTrans.PeriodType,
                                                  journalTrans.PeriodNum,
                                                  journalTrans.FiscalYear))
                {
                    select firstonly RegisterValues from registerTrans
                where registerTrans.RegisterId          == journalTrans.RegisterId          &&
                      registerTrans.JournalNum          == journalTrans.JournalNum          &&
                      registerTrans.FiscalYear          == journalTrans.FiscalYear          &&
                      registerTrans.PeriodType          == journalTrans.PeriodType          &&
                      registerTrans.PeriodNum           == journalTrans.PeriodNum           &&
                      registerTrans.RegisterJournalType == journalTrans.RegisterJournalType &&
                      registerTrans.BlockType           == ReportBlockType::Body            &&
                              registerTrans.rTax25ProfitTable   == expression.targetProfitTableRecId();

                    ret = conpeek(registerTrans.RegisterValues, str2int(expressionLine.RefIdTo));
                    break;
                }
                else
        {
                    regQuery = RTax25Query::newParameters(RTax25RegisterTable::registerId2Type(journalTrans.RegisterId),
                                                          journalTrans,
                                                          true);
                    if (regQuery.first(expression.targetProfitTableRecId()))
            {
                        ret = regQuery.getField(str2int(expressionLine.RefIdTo));
                break;
            }
                }
            }

            next journalTrans;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        controlRefIdFrom.enabled(true);
        controlRefIdTo.enabled(true);

        controlRefIdFrom.lookupButton(FormLookupButton::Always);
        controlRefIdTo.lookupButton(FormLookupButton::Always);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();

        ret = RTax25RegisterTable::checkExistRegisterId(expressionLine.RefIdFrom) && ret;

        ret = RTax25RegType::checkExistField(RTax25RegisterTable::registerId2Type(expressionLine.RefIdFrom),
                                                    str2int(expressionLine.RefIdTo)) && ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>