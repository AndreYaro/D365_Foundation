<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_OC14</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_OC14 extends RAssetReport implements ERIReportPostProcessingSupported
{
    protected Struct structCompanyInfoAcquire;
    protected Struct structCompanyInfoDeliver;
    protected Struct structCompanyInfoConsignor;
    protected VendInvoiceJour vendInvoiceJour;
    protected Amount amountCost;
    protected MainAccountNum controlMainAccountNum;
    protected RAssetLocationName assetLocationName;
    protected DialogField assetStandardField;

    protected const str CompanyAddress = 'CompanyAddress';
    protected const str CompanyPhone = 'CompanyPhone';
    protected const str CompanyFax = 'CompanyFax';
    protected const str Bic = 'Bic';
    protected const str BankName = 'BankName';
    protected const str BankAccount = 'BankAccount';
    protected const str BankCorrAccount = 'BankCorrAccount';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    public container additionalFields()
    {
        return super() + [fieldNum(RAssetDocument, StandardId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeDocumentWrite</Name>
				<Source><![CDATA[
    // Check if other document with same standardID exist
    public void beforeDocumentWrite(RAssetDocument _document)
    {
        super(_document);

        this.assertNoOtherDocumentWithSameStandardID(_document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsert</Name>
				<Source><![CDATA[
    // Inserting more than one document OC14 for asset standard per asset is not allowed
    public boolean canInsert(RAssetDocument _document)
    {
        return !RAssetDocument::existByStandardID(_document.AssetId, _document.Type, _document.StandardId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS116167";
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankInfoStr</Name>
				<Source><![CDATA[
    protected str createBankInfoStr(Struct _struct)
    {
        str sz1 = _struct.value(BankName);
        str sz2 = _struct.value(BankAccount);
        str sz3 = _struct.value(Bic);
        str sz4 = _struct.value(BankCorrAccount);

        str sz  = this.mergeStr(sz1, sz2, "@GLS101791");
        sz = this.mergeStr(sz, sz3, "@GLS116752");
        sz = this.mergeStr(sz, sz4, "@GLS101793");

        return sz;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = super();

        if (isProforma)
        {
            assetStandardField = dlg.addField(extendedTypeStr(RAssetStandardId));
            assetStandardField.value(RAssetParameters::find().StandardIdDefault);
        }

        this.documentDate(rAssetTable.ActDate ? rAssetTable.ActDate : rAssetTable.AcquisitionDate);
        this.documentNumber(rAssetTable.ActNumber);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        super();

        if (isProforma)
        {
            rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, assetStandardField.value());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorInfo</Name>
				<Source><![CDATA[
    protected Struct getVendorInfo(VendTable _vendTable)
    {
        Struct struct = RAssetReport_OC14::companyInfo_Null();

        if(_vendTable)
        {
            struct.value(ConstCompanyName, _vendTable.name());
            struct.value(CompanyAddress, _vendTable.postalAddress()
                .getAddressAsLine_RU());

            LogisticsElectronicAddress electronicAddress = DirParty::primaryElectronicAddress(_vendTable.Party, LogisticsElectronicAddressMethodType::Phone);
            struct.value(CompanyPhone, electronicAddress ? electronicAddress.Locator : '');
            electronicAddress = DirParty::primaryElectronicAddress(_vendTable.Party, LogisticsElectronicAddressMethodType::Fax);
            struct.value(CompanyFax, electronicAddress ? electronicAddress.Locator : '');
            struct.value(ConstCodeOKPO, _vendTable.partyOKPOasOfDate_RU(this.documentDate()));

            if(_vendTable.BankAccount)
            {
                BankAccountMap custVendBankAccountTable = VendBankAccount::find(_vendTable.AccountNum, _vendTable.BankAccount);

                if(custVendBankAccountTable)
                {
                    struct.value(Bic, custVendBankAccountTable.bankBIC_RU());
                    struct.value(BankName, custVendBankAccountTable.bankName_RU());
                    struct.value(BankAccount, custVendBankAccountTable.AccountNum);
                    struct.value(BankCorrAccount, custVendBankAccountTable.CorrAccount_W);
                }
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoAcquire</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoAcquire()
    {
        Struct struct = RAssetReport_OC14::companyInfo_Null();

        struct.value(ConstCompanyName, companyInfo.name());
        struct.value(CompanyPhone, companyInfo.phone());
        struct.value(CompanyFax, companyInfo.teleFax());
        struct.value(ConstCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, this.documentDate()));
        struct.value(ConstChiefAccountantName, OfficialsTable_RU::findAccountant().getFIO());

        struct.value(ConstDepartamentName, assetLocationName);

        if(companyInfo.Bank)
        {
            BankAccountTable bankAccountTable = BankAccountTable::find(companyInfo.Bank);

            if(bankAccountTable)
            {
                BankGroup bankGroup = BankGroup::find(bankAccountTable.BankGroupId);

                struct.value(Bic, bankGroup.BankBIC_RU);
                struct.value(BankName, bankGroup.Name);
                struct.value(BankAccount, bankAccountTable.AccountNum);
                struct.value(BankCorrAccount, bankAccountTable.CorrAccount_W);
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoConsignor</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoConsignor()
    {
        VendTable vendTable;

        if (vendInvoiceJour)
        {
            vendTable = VendTable::find(vendInvoiceJour.ConsignorAccount_RU);
        }


        if (!vendTable)
        {
            vendTable = VendTable::find(rAssetTable.VendAccount);
        }

        return this.getVendorInfo(vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCompanyInfoDeliver</Name>
				<Source><![CDATA[
    protected Struct initCompanyInfoDeliver()
    {
        VendTable vendTable = VendTable::find(rAssetTable.VendAccount);

        return this.getVendorInfo(vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        super(_document);

        rAssetStandards = _document.findStandards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for report
    /// </summary>
    /// <returns>
    /// True if initialized succesfully
    /// </returns>
    /// <remarks>
    /// Analysis dimension value taken from dimension specified at rAssetParameters as default dimension
    /// </remarks>
    protected boolean initReport()
    {
        boolean ret = super();

        vendInvoiceJour = this.initVendInvoiceJour();
        assetLocationName = RAssetLocation::find(this.location(documentDate - 1)).Name;
        this.employee(documentDate);

        structCompanyInfoAcquire = this.initCompanyInfoAcquire();
        structCompanyInfoDeliver = this.initCompanyInfoDeliver();
        structCompanyInfoConsignor = this.initCompanyInfoConsignor();

        if (acquisitionFirstTrans)
        {
            controlMainAccountNum = this.mainAccountNum(acquisitionFirstTrans.TransDate);
        }
        else
        {
            controlMainAccountNum = this.mainAccountNum();
        }

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            controlMainAccountNum = strFmt("@SYS26868", controlMainAccountNum, this.getAnalysisCodeFromDefaultDimension(rAssetStandards.DefaultDimension));
        }

        if (rAssetStandards.CurrencyCode == CompanyInfoHelper::standardCurrency())
        {
            amountCost = rAssetStandards.AcquisitionPrice;
        }
        else
        {
            amountCost = CurrencyExchangeHelper::amountCur2MST(rAssetStandards.AcquisitionPrice, rAssetStandards.CurrencyCode, 0, rAssetTable.AcquisitionDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoiceJour</Name>
				<Source><![CDATA[
    protected VendInvoiceJour initVendInvoiceJour()
    {
        VendInvoiceJour localVendInvoiceJour;

        if (rAssetTable.VendInvoiceId)
        {
            select firstonly  localVendInvoiceJour
                where localVendInvoiceJour.PurchId == rAssetTable.PurchId
                    && localVendInvoiceJour.InvoiceId == rAssetTable.VendInvoiceId
                    && localVendInvoiceJour.InvoiceAccount == rAssetTable.VendAccount;
        }

        return localVendInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    public boolean isProforma()
    {
        return rAssetTable.Status == RAssetStatus::NoAcquisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args _args)
    {
        if (_args.dataset() != tableNum(RAssetTable))
        {
            throw error(Error::missingRecord(funcName()));
        }

        rAssetTable =  _args.record();

        super(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage01</Name>
				<Source><![CDATA[
    protected void printPage01()
    {
        str sz;
        str sz1;
        str sz2;
        str sz3;
        Struct tmpStruct;
        str szPrefix;
        str szBookmarkName;

        void outStr(str _sName)
        {
            sz = tmpStruct.value(_sName);
            szBookmarkName = szPrefix + _sName;

            this.insertValueIntoDoc(szBookmarkName, sz);
        }

        void outCompanyInfo()
        {
            outStr(ConstCompanyName);

            sz1 = tmpStruct.value(CompanyAddress);
            sz2 = tmpStruct.value(CompanyPhone);
            sz3 = tmpStruct.value(CompanyFax);

            sz  = this.mergeStr(sz1, sz2, "@GLS116750");
            sz  = this.mergeStr(sz, sz3, "@GLS116751");

            this.insertValueIntoDoc(szPrefix + CompanyAddress, sz);

            sz = this.createBankInfoStr(tmpStruct);
            this.insertValueIntoDoc(szPrefix + ConstBank, sz);

            outStr(ConstCodeOKPO);
        }

        tmpStruct =  structCompanyInfoDeliver;
        szPrefix = ConstDeliver;
        outCompanyInfo();

        tmpStruct = structCompanyInfoAcquire;
        szPrefix = ConstAcquire;
        outCompanyInfo();
        outStr(ConstDepartamentName);

        this.insertDateIntoDoc(ConstDateToBusinessAccounting, acquisitionFirstTrans.TransDate);

        this.insertValueIntoDoc(ConstControlAccount, controlMainAccountNum);

        this.insertValueIntoDoc(ConstAssetGroup, rAssetStandards.AssetGroup);

        this.insertValueIntoDoc(ConstActNumber, documentNumber);
        this.insertValueIntoDoc(ConstActDate, documentDate);

        this.insertValueIntoDoc(ConstChiefPost, OfficialsTable_RU::findDirector().Title);
        this.insertValueIntoDoc(ConstChiefName, OfficialsTable_RU::findDirector().getFIO());

        this.insertValueIntoDoc(ConstDateChiefSignature, this.dateAsStr(documentDate));

        this.insertValueIntoDoc(ConstMake, rAssetTable.Make);

        this.insertValueIntoDoc(ConstConsignorName, structCompanyInfoConsignor.value(ConstCompanyName));

        this.insertValueIntoDoc(ConstConsignorOKPO, structCompanyInfoConsignor.value(ConstCodeOKPO));

        sz1 = structCompanyInfoConsignor.value(CompanyPhone);
        sz2 = structCompanyInfoConsignor.value(CompanyFax);
        sz3 = this.createBankInfoStr(structCompanyInfoConsignor);

        sz  = this.mergeStr("", sz1, "@GLS116750");
        sz  = this.mergeStr(sz, sz2, "@GLS116751");
        sz  = this.mergeStr(sz, sz3);

        this.insertValueIntoDoc(ConstConsignorProperties, sz);

        sz = this.mergeStr(assetLocationName, structCompanyInfoAcquire.value(ConstCompanyName), ConstLeftShift, ConstRightShift);
        sz = this.mergeStr(sz, companyInfo.postalAddress().getAddressAsLine_RU());

        this.insertValueIntoDoc(ConstReeceivingEnd, sz);

        if (vendInvoiceJour)
        {
            DlvMode dlvMode = DlvMode::find(vendInvoiceJour.DlvMode);

            if (dlvMode)
            {
                this.insertValueIntoDoc(ConstReeceivingEnd, dlvMode.Txt);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPage02</Name>
				<Source><![CDATA[
    protected void printPage02()
    {
        this.insertValueIntoDoc(ConstAssetName, rAssetTable.Name);
        this.insertValueIntoDoc(ConstAssetWorksNumber, rAssetTable.SerialNum);
        this.insertValueIntoDoc(ConstAssetModel, rAssetTable.Model);
        this.insertValueIntoDoc(ConstAmountCost, amountCost);
        this.insertValueIntoDoc(ConstAmountPrice, amountCost);
        this.insertValueIntoDoc(ConstChiefAccountantName, structCompanyInfoAcquire.value(ConstChiefAccountantName));
        this.insertValueIntoDoc(ConstNewEmplName, newEmployee.worker().getFIO_RU());
        this.insertValueIntoDoc(ConstNewEmplID, newEmployee.EmployeeId);

        HrmDescription hrmDescription = HcmPosition::findByPosition(newEmployee.worker().primaryPositionId()).description();
        this.insertValueIntoDoc(ConstNewEmplTitle, hrmDescription
            ? hrmDescription
            : newEmployee.worker().primaryPositionId());

        this.insertValueIntoDoc(ConstNewEmplDateSignature, this.dateAsStr(documentDate));
        this.insertValueIntoDoc(ConstNewInvKartNumber, rAssetTable.InvKartNumber);
        this.insertDateIntoDoc(ConstNewInvKartDate, rAssetTable.InvKartDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected void run()
    {
        curWorkSheetNum = 1;
        this.printPage01();

        curWorkSheetNum = 2;
        this.printPage02();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateDocuments</Name>
				<Source><![CDATA[
    public boolean skipUpdateDocuments(boolean _value = skipUpdateDocuments)
    {
        return this.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAsset_14);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected TransDate transDate()
    {
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
        super();

        rAssetTable = RAssetTable::findrec(rAssetTable.RecId, true);
        rAssetTable.ActDate = documentDate;
        rAssetTable.ActNumber = documentNumber;
        rAssetTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo_Null</Name>
				<Source><![CDATA[
    public static public Struct companyInfo_Null()
    {
        Struct struct = new  Struct(Types::String, ConstCompanyName,
            Types::String, CompanyAddress,
            Types::String, CompanyPhone,
            Types::String, CompanyFax,
            Types::String, ConstDepartamentName,
            Types::String, Bic,
            Types::String, BankName,
            Types::String, BankAccount,
            Types::String, BankCorrAccount,
            Types::String, ConstCodeOKPO,
            Types::String, ConstChiefAccountantName);


        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'FA14';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>