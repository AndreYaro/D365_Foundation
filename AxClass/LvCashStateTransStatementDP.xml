<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvCashStateTransStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LvCashStateTransStatementDP</c> is the data provider for the <c>LvCashStateTransStatement</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(LvCashStateTransStatementContract)),
    SRSReportQueryAttribute(queryStr(LvCashStateTrans))
]
public class LvCashStateTransStatementDP extends SRSReportDataProviderBase
{
    LvCashStateTransTmp     lvCashStateTransTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCashStateTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data in the <c>LvCashStateTransTmp</c> table.
    /// </summary>
    /// <returns>
    /// The <c>LvCashStateTransTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(LvCashStateTransTmp))]
    public LvCashStateTransTmp getCashStateTransTmp()
    {
        select * from lvCashStateTransTmp;
        return lvCashStateTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCashTransactions</Name>
				<Source><![CDATA[

    private void insertCashTransactions(
        LvCashStateTrans    _lvCashStateTrans,
        LvCashStateTransTmp _lvCashStateTransTmp)
    {
        ttsBegin;

        _lvCashStateTransTmp.clear();

        switch (_lvCashStateTrans.PaymDirection)
        {
            case LvInOutPaym::Incoming:
                _lvCashStateTransTmp.ReceivedAmountMST = _lvCashStateTrans.PaymAmountMST;
                break;

            case LvInOutPaym::Outgoing:
                _lvCashStateTransTmp.IssuedAmountMST = _lvCashStateTrans.PaymAmountMST;
                break;

            default:
                break;
        }

        // Print the registration number for domestic companies only
        if (_lvCashStateTrans.CountryCode)
        {
            _lvCashStateTransTmp.CompRegistNum = '';
        }
        else
        {
            _lvCashStateTransTmp.CompRegistNum = _lvCashStateTrans.CompRegistNum;
        }

        _lvCashStateTransTmp.CompanyName    = _lvCashStateTrans.CompanyName;
        _lvCashStateTransTmp.CountryCode    = _lvCashStateTrans.CountryCode;
        _lvCashStateTransTmp.PaymCode       = _lvCashStateTrans.PaymCode;
        _lvCashStateTransTmp.CurrencyCode   = _lvCashStateTrans.CurrencyCode;
        _lvCashStateTransTmp.TotalAmountMST = _lvCashStateTrans.PaymAmountMST;
        _lvCashStateTransTmp.insert();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[

    /// <summary>
    /// The <c>LvCashStateTransStatementDP</c> acts as the data provider for the <c>LvCashStateTransStatement</c> report.
    /// </summary>
    public void processReport()
    {
        Query                   query;
        QueryRun                queryRun;
        LvCashStateTrans        lvCashStateTrans;
        CompanyCoRegNum         companyRegNum;
        LvPaymCode              lvPaymCode;

        query = this.parmQuery();
        queryRun = new queryRun(query);

        ttsBegin;

        while (queryRun.next())
        {
            lvCashStateTrans = queryRun.get(tableNum(LvCashStateTrans));

            // Since we are ordering the query itself we can depend on local variables to check if record should be inserted or updated.
            if (companyRegNum == lvCashStateTrans.CompRegistNum && lvPaymCode == lvCashStateTrans.PaymCode)
            {
                this.updateCashTransactions(lvCashStateTrans, lvCashStateTransTmp);
            }
            else
            {
                this.insertCashTransactions(lvCashStateTrans, lvCashStateTransTmp);

                companyRegNum = lvCashStateTrans.CompRegistNum;
                lvPaymCode = lvCashStateTrans.PaymCode;
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashTransactions</Name>
				<Source><![CDATA[

    private void updateCashTransactions(
        LvCashStateTrans    _lvCashStateTrans,
        LvCashStateTransTmp _lvCashStateTransTmp)
    {
        ttsBegin;

        switch (_lvCashStateTrans.PaymDirection)
        {
            case LvInOutPaym::Incoming:
                _lvCashStateTransTmp.ReceivedAmountMST += _lvCashStateTrans.PaymAmountMST;
                break;

            case LvInOutPaym::Outgoing:
                _lvCashStateTransTmp.IssuedAmountMST += _lvCashStateTrans.PaymAmountMST;
                break;

            default:
                break;
        }

        _lvCashStateTransTmp.TotalAmountMST = _lvCashStateTransTmp.ReceivedAmountMST + _lvCashStateTransTmp.IssuedAmountMST;
        _lvCashStateTransTmp.update();

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
