<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSumForPaymRemittance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendSumForPaymRemittance extends CustVendSumForPaymRemittance
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankFormat</Name>
				<Source><![CDATA[
    public BankFormat bankFormat()
    {
        return BankFormat::Remittance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>electronicReportingModelName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a configuration name for payment.
    /// </summary>
    /// <returns>A configuration name for payment.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ClassName electronicReportingModelName()
    {
        return CustVendOutPaymConstants::modelName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>electronicReportingDataContainerDescriptorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a name of start descriptor for solution.
    /// </summary>
    /// <returns>A name of start descriptor for solution.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected ClassName electronicReportingDataContainerDescriptorName()
    {
        return CustVendOutPaymConstants::creditTransferContainerDescriptorName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDueDateExceeded</Name>
				<Source><![CDATA[
    protected boolean isDueDateExceeded()
    {
        LedgerJournalTrans ledgerJournalTrans;
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        VendPromissoryNoteJour vendPromissoryNoteJour;
        QueryRun queryRun_offsetVoucher;

        queryRun.reset();

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

            queryRun_offsetVoucher = SpecTrans::createQueryRunToRefTable(
                ledgerJournalTrans.company(),
                ledgerJournalTrans.TableId,
                ledgerJournalTrans.RecId,
                tablenum(VendTransOpen));

            queryRun_offsetVoucher.allowCrossCompany(true);

            while (queryRun_offsetVoucher.next())
            {
                if (queryRun_offsetVoucher.changed(tablenum(VendTransOpen)))
                {
                    vendTransOpen = queryRun_offsetVoucher.get(tablenum(VendTransOpen));
                    if (vendTransOpen)
                    {
                        changecompany(vendTransOpen.company())
                        {
                            vendTrans = vendTransOpen.vendTrans();

                            select DueDate from vendPromissoryNoteJour
                                where vendPromissoryNoteJour.PromissoryNoteId == vendTrans.PromissoryNoteID;
                        }

                        if (vendPromissoryNoteJour.DueDate != dateNull() && vendPromissoryNoteJour.DueDate < ledgerJournalTrans.TransDate)
                        {
                            queryRun.reset();
                            return true;
                        }
                    }
                }
            }
        }

        queryRun.reset();

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalACType</Name>
				<Source><![CDATA[
    protected LedgerJournalACType ledgerJournalACType()
    {
        return LedgerJournalACType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymFormatTable</Name>
				<Source><![CDATA[
    public CustVendPaymFormatTable paymFormatTable()
    {
        return VendPaymFormat::findFormat(paymFormat, this.bankFormat());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymModeTable</Name>
				<Source><![CDATA[
    public CustVendPaymModeTable paymModeTable()
    {
        return VendPaymModeTable::find(paymMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeFormat</Name>
				<Source><![CDATA[
    protected utilElementName typeFormat()
    {
        return extendedTypeStr(VendRemittanceFormat);
    }

]]></Source>
			</Method>
			<Method>
				<Name>typePaymMode</Name>
				<Source><![CDATA[
    protected utilElementName typePaymMode()
    {
        return extendedTypeStr(VendPaymMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS83541";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>