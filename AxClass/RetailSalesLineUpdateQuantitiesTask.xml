<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesLineUpdateQuantitiesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailSalesLineUpdateQuantitiesTask extends RunBaseBatch implements BatchRetryable
{
    private const int CurrentVersion = 1;
    private const int MaxFailureLogs = 64000;

    #LOCALMACRO.CurrentList
        dataAReaId
    #ENDMACRO

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private DataAreaId dataAreaId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailSalesLineUpdateQuantitiesTask construct(DataAreaId _dataAreaId)
    {
        var task = new RetailSalesLineUpdateQuantitiesTask();
        task.dataAreaId = _dataAreaId;

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        int updatedCount = 0;
        boolean success = false;

        RecId batchJobId = this.parmCurrentBatch().BatchJobId;

        try
        {
            eventSource.EventWriteRetailSalesLineUpdateQuantitiesBatchJobStart(batchJobId, this.dataAreaId);

            changecompany (this.dataAreaId)
            {
                [success, updatedCount] = this.runUpdateForCompany(this.dataAreaId);
            }
        }
        finally
        {
            eventSource.EventWriteRetailSalesLineUpdateQuantitiesBatchJobEnd(success, updatedCount, batchJobId, this.dataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether batch task should retry in case of transient errors.
    /// </summary>
    /// <returns>true if task should be retried; otherwise, false.</returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdateForCompany</Name>
				<Source><![CDATA[
    private container runUpdateForCompany(str companyId)
    {
        System.Exception ex;

        boolean success = true;
        int updatedCount = 0;
        RecId batchId = this.batchInfo().parmBatchId();

        List failedLines = new List(Types::Int64);

        RetailSalesLine retailSalesLine;
        SalesLine salesLine;
        
        while select forupdate retailSalesLine
            where retailSalesLine.QuantityColumnsVersion == RetailSalesLineQuantityColumnsVersion::V0
            join salesLine 
            where salesLine.RecId == retailSalesLine.SalesLine
            && salesLine.SalesQty > 0
        {
            if (!salesLine.isStocked())
            {
                continue;
            }

            try
            {
                ttsbegin;
                RetailSalesLineUpdateQuantitiesTask::updateInventoryQuantities(salesLine);
                ttscommit;
                updatedCount++;

                if (updatedCount mod 1000 == 0)
                {
                    // Log every 1000 retail sales lines.
                    eventSource.EventWriteRetailSalesLineUpdateQuantitiesRecordUpdated(batchId, retailSalesLine.RecId, updatedCount, failedLines.elements());
                }
            }
            catch (ex)
            {
                if (failedLines.elements() < MaxFailureLogs)
                {
                    eventSource.EventWriteRetailSalesLineUpdateQuantitiesError(retailSalesLine.RecId, batchId, companyId, ex.ToString(), con2Str(xSession::xppCallStack()));
                }
                failedLines.addEnd(retailSalesLine.RecId);
            }
        }

        int failedCount = failedLines.elements();

        if (failedCount > 0)
        {
            eventSource.EventWriteRetailSalesLineUpdateQuantitiesBatchJobFailuresFound(failedCount, batchId, companyId);

            sleep(1000); // wait a second before retrying the failed lines

            // reset count since we are starting over
            updatedCount = 0;
            ListEnumerator enumerator = failedLines.getEnumerator();

            int retryFailureCount = 0;

            while (enumerator.moveNext())
            {
                RecId retailSalesLineRefRecId = enumerator.current();

                try
                {
                    RetailSalesLine retryRetailSalesLine;
                    SalesLine _salesLine;

                    select retryRetailSalesLine
                        join _salesLine
                        where _salesLine.RecId == retryRetailSalesLine.SalesLine
                        && retryRetailSalesLine.RecId == retailSalesLineRefRecId;

                    ttsbegin;
                    RetailSalesLineUpdateQuantitiesTask::updateInventoryQuantities(_salesLine);
                    ttscommit;
                    updatedCount++;

                    eventSource.EventWriteRetailSalesLineUpdateQuantitiesRecordUpdated(batchId, retryRetailSalesLine.RecId, updatedCount, retryFailureCount);
                }
                catch (ex)
                {
                    success = false;
                    if (retryFailureCount < MaxFailureLogs)
                    {
                        eventSource.EventWriteRetailSalesLineUpdateQuantitiesError(retailSalesLineRefRecId, batchId, companyId, ex.ToString(), con2Str(xSession::xppCallStack()));
                    }

                    retryFailureCount++;
                }
            }
        }

        return [success, updatedCount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryQuantities</Name>
				<Source><![CDATA[
    private static void updateInventoryQuantities(SalesLine _salesLine)
    {
        RetailTransactionServiceFulfillment::updateFulfillmentStatus(_salesLine.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>