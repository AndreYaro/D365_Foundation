<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocation_PurchParmLineSubTbl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MarkupAllocation_PurchParmLineSubTbl</c> class manages the allocation of the
///    <c>MarkupTrans</c> table records to the <c>VendInvoiceInfoLine</c> table records from the
///    <c>MarkupTrans</c> table records that are associated with a <c>VendInvoiceInfoSubTable</c> table
///    record.
/// </summary>
[MarkupAllocationTableNameFactoryAttribute(tableStr(VendInvoiceInfoSubTable))]
public class MarkupAllocation_PurchParmLineSubTbl extends MarkupAllocation_PurchParmLineTable
{
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAllocate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether allocation is possible for the given record.
    /// </summary>
    /// <returns>
    ///    true if allocation is possible; otherwise, false.
    /// </returns>
    public boolean canAllocate()
    {
        // <GEERU>
        boolean found;
        // </GEERU>
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (!purchId)
            {
                this.initValues();
            }

            found = MarkupAllocation_PurchParmLineSubTbl::isConnectedTo(source, allocateAll);
            switch (this.checkCostAdjustmentLock_RU())
            {
                case UnknownNoYes::Unknown:
                    return false;
                case UnknownNoYes::Yes:
                    found = true;
                    break;
            }

            if (found)
            {
                return Box::okCancel("@SYS120663", DialogButton::Cancel) == DialogButton::Ok;
            }
        }
        else
        {
        // </GEERU>
            if (!super())
            {
                return false;
            }
            if (MarkupAllocation_PurchParmLineSubTbl::isConnectedTo(source, allocateAll))
            {
                return Box::okCancel("@SYS120663", DialogButton::Cancel) == DialogButton::Ok;
            }
        // <GEERU>
        }
        // </GEERU>

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustVendAllocNeed_RU</Name>
				<Source><![CDATA[
    protected boolean checkCustVendAllocNeed_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    protected void initValues()
    {
        // <GIN>
        MarkupTrans         markupTransLoc;
        #ISOcountryRegionCodes
        boolean         countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;

        // <GIN>
        switch (source.TableId)
        {
            case(tableNum(MarkupTrans))     :   if (countryRegion_IN && LedgerParameters::find().Miscellaneouscharges_IN)
                                                {
                                                    markupTransLoc      = source;
                                                    vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::findRecId(markupTransLoc.TransRecId);
                                                    purchId = vendInvoiceInfoSubTable.OrigPurchId;
                                                    parmId = vendInvoiceInfoSubTable.ParmId;
                                                    tableRefId = vendInvoiceInfoSubTable.TableRefId;
                                                    invoiceId = '';
                                                }
                                                break;

            default                         :
        // </GIN>
                                                vendInvoiceInfoSubTable = source;
                                                purchId = vendInvoiceInfoSubTable.OrigPurchId;
                                                parmId = vendInvoiceInfoSubTable.ParmId;
                                                tableRefId = vendInvoiceInfoSubTable.TableRefId;
                                                invoiceId = '';
        // <GIN>
                                                break;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventPostingProfile_RU</Name>
				<Source><![CDATA[
    protected PostingProfile inventPostingProfile_RU(InventProfileId_RU _inventProfileId)
    {
        return InventProfileCustVendLedger_RU::vendPostingProfile(_inventProfileId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>QueryRun</c> object to retrieve the matching <c>VendInvoiceInfoLine</c> records.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object.
    /// </returns>
    public QueryRun queryBuild()
    {
        QueryRun                queryRun = super();
        QueryBuildDataSource    ds;

        ds = queryRun.query().dataSourceTable(tableNum(VendInvoiceInfoLine));
        ds.addRange(fieldNum(VendInvoiceInfoLine, OrigPurchId)).value(queryValue(purchId));
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTransFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values of a <c>MarkupTrans</c> table record.
    /// </summary>
    protected void setMarkupTransFields()
    {
        super();
        // Unlink the MarkupTrans
        markupTrans.OrigTableId = 0;
        markupTrans.OrigRecId = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocation_PurchParmLineSubTbl construct()
    {
        return new MarkupAllocation_PurchParmLineSubTbl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConnectedTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there are connected <c>MarkupTrans</c> records on purchase orders for an invoice
    ///    and displays a warning.
    /// </summary>
    /// <param name="_vendInvoiceInfoSubTable">
    ///    A <c>VendInvoiceInfoSubTable</c> table record.
    /// </param>
    /// <param name="_allocateAll">
    ///    A Boolean value that indicates whether allocation should include all <c>MarkupTrans</c> records
    /// </param>
    /// <returns>
    ///    true if a connected <c>MarkupTrans</c> record exists; otherwise, false.
    /// </returns>
    protected static boolean isConnectedTo(VendDocumentSubTableMap _vendInvoiceInfoSubTable, boolean _allocateAll)
    {
        MarkupTrans markupTrans;
        Set nums = new Set(Types::String);
        MarkupConnectedTo connectedTo;
        SetEnumerator numsEnum;

        while select markupTrans
            where markupTrans.TransTableId == _vendInvoiceInfoSubTable.TableId
               && markupTrans.TransRecId == _vendInvoiceInfoSubTable.RecId
               && markupTrans.Value != 0
               && !markupTrans.IsDeleted
        {
            if (_allocateAll || markupTrans.markupTypeItem())
            {
                connectedTo = markupTrans.connectedTo();
                if (strLen(connectedTo) > 0)
                {
                    nums.add(connectedTo);
                }
            }
        }

        numsEnum = nums.getEnumerator();
        while (numsEnum.moveNext())
        {
            warning(strFmt("@SYS120665", numsEnum.current()));
        }
        return nums.elements() > 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>