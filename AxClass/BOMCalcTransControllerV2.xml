<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMCalcTransControllerV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMCalcTransControllerV2 extends SrsReportRunController
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcTransControllerV2 construct()
    {
        return new BOMCalcTransControllerV2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    public void preRunModifyContract()
    {
        super();
        this.setQueryRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRanges</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setQueryRanges(Query _query)
    {
        Args arguments = this.parmArgs();

        if (!arguments                                                                                         ||
            !arguments.dataset()                                                                                ||
            !(arguments.dataset() == tablenum(BOMCalcTable) || arguments.dataset() == tablenum(BOMCalcTrans))   ||
            !SysDictClass::isEqualOrSuperclass(classidget(arguments.caller()),classnum(FormRun))                ||
            (arguments.caller().name() != formstr(bomCalcTable) &&
             arguments.caller().name() != formstr(inventItemPrice)))
        {
            return;
        }

        QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tablenum(BOMCalcTable));

        if (arguments.dataset() == tablenum(BOMCalcTable))
        {
            BOMCalcTable bomCalcTable = arguments.record();
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BOMCalcTable, ItemId)).value(queryValue(bomCalcTable.ItemId));
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BOMCalcTable, InventDimId)).value(queryValue(bomCalcTable.InventDimId));
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BOMCalcTable, PriceCalcId)).value(queryValue(bomCalcTable.PriceCalcId));
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BOMCalcTable, bomId)).value(queryValue(bomCalcTable.bomId));
            SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BOMCalcTable, RouteId)).value(queryValue(bomCalcTable.RouteId));
        }
        else
        {
            if (arguments.dataset() == tablenum(BOMCalcTrans))
            {
                BOMCalcTrans bomCalcTrans = arguments.record();
                SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(BOMCalcTable, PriceCalcId)).value(queryValue(bomCalcTrans.PriceCalcId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOMCalcTransControllerV2 controller = BOMCalcTransControllerV2::construct();
        controller.parmReportName(ssrsReportStr(BOMCalcTrans, PrecisionDesign));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>