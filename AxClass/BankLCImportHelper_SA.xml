<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportHelper_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Util class for bank LC import
/// </summary>
class BankLCImportHelper_SA
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTotalChargeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total margin amount.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// The total margin amount.
    /// </returns>
    public static BankLCImportChargeAmountCur_SA getTotalChargeAmount(BankLCRefRecId _bankLCImportRefRecId)
    {
        BankLCImportCharge_SA bankLCImportCharge;

        select firstonly sum(AmountCur) from bankLCImportCharge
            where bankLCImportCharge.BankLCImport == _bankLCImportRefRecId;

        return bankLCImportCharge.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalUnAllocatedChargeAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total unallocated charge amount.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// The total unallocated charge amount.
    /// </returns>
    public static BankLCImportChargeAmountCur_SA getTotalUnAllocatedChargeAmount(BankLCRefRecId _bankLCImportRefRecId)
    {
        BankLCImportCharge_SA           bankLCImportCharge;
        BankLCImportChargeAllocation_SA bankLCImportChargeAllocation;
        BankLCImportChargeAmountCur_SA  totalAmount;

        totalAmount = BankLCImportHelper_SA::getTotalChargeAmount(_bankLCImportRefRecId);

        if (totalAmount != 0)
        {
            select firstonly sum(AllocatedAmountCur) from bankLCImportChargeAllocation
                exists join bankLCImportCharge
                    where bankLCImportCharge.RecId          == bankLCImportChargeAllocation.BankLCImportCharge
                        && bankLCImportCharge.BankLCImport  == _bankLCImportRefRecId;

            return totalAmount - bankLCImportChargeAllocation.AllocatedAmountCur;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChargeTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this letter of credit has transactions.
    /// </summary>
    /// <param name="_bankLCImportTabelRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// true if the letter of credit has transactions; otherwise, false.
    /// </returns>
    public static boolean hasChargeTransactions(BankLCRefRecId _bankLCImportTabelRefRecId)
    {
        BankLCImportCharge_SA bankLCImportChargeLocal;

        select firstonly RecId from bankLCImportChargeLocal
            where bankLCImportChargeLocal.BankLCImport == _bankLCImportTabelRefRecId;

        return bankLCImportChargeLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnAllocatedCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether this letter of credit has unallocated transactions.
    /// </summary>
    /// <param name="_bankLCImportRefRecId">
    /// The record ID of the <c>BankLCImport</c> record.
    /// </param>
    /// <returns>
    /// true if the letter of credit has unallocated charge; otherwise, false.
    /// </returns>
    public static boolean hasUnAllocatedCharge(BankLCRefRecId _bankLCImportRefRecId)
    {
        boolean                         ret = false;
        BankLCImportCharge_SA           bankLCImportCharge;
        BankLCImportChargeAllocation_SA bankLCImportChargeAllocation;

        if (BankLCImportHelper_SA::getTotalUnAllocatedChargeAmount(_bankLCImportRefRecId) != 0)
        {
            ret = true;
        }
        else
        {
            select firstonly RecId from bankLCImportChargeAllocation
                where bankLCImportChargeAllocation.Settled == NoYes::No
                exists join bankLCImportCharge
                    where bankLCImportCharge.RecId          == bankLCImportChargeAllocation.BankLCImportCharge
                        &&  bankLCImportCharge.BankLCImport == _bankLCImportRefRecId;

            if (bankLCImportChargeAllocation.RecId != 0)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>