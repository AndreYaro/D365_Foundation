<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetStatementLowValuePoolDP_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetstatementLowValuePoolDP_AU</c> class is the report data provider class for the
///    <c>AssetStatementLowValuePool_AU</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetStatementLowValuePool_AU)),
    SRSReportParameterAttribute(classstr(AssetStatementLowValuePoolCntrct_AU))
]
public class AssetStatementLowValuePoolDP_AU extends SrsReportDataProviderPreProcessTempDB
{
    private const str FeatureReference = 'AU-00007';

    AssetCalcReport        assetCalcReport;
    AssetStatementRowName  rowName;
    AssetStatementRow      assetStatementRow;
    AssetBookTable         assetBookTable;

    AmountMST              acquisitionPriorYears;
    AmountMST              lowCostAssetAmount;
    AmountMST              lowValueAssetAmount;
    AmountMST              secondElementCostAmount;
    AmountMST              disposalsThisYear;
    AmountMST              reclassificationThisYear;
    AmountMST              depreciationAdjThisYear;
    AmountMST              depreciationThisYear;
    AmountMST              accumulatedDepreciation;
    AmountMST              netBookValueEndThisYear;
    AmountMST              netBookValueEndPriorYear;

    StartDate              startOfPeriod;
    EndDate                endOfPeriod;

    AssetStatementLowValuePoolTmp_AU    assetStatementLowValuePoolTmp_AU;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetStatementLowValuePoolTmp_AU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table and retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetStatementLowValuePoolTmp_AU))
    ]
    public AssetStatementLowValuePoolTmp_AU getAssetStatementLowValuePoolTmp_AU()
    {
        select assetStatementLowValuePoolTmp_AU;
        return assetStatementLowValuePoolTmp_AU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the required data into the temporary table.
    /// </summary>
    public  void  insertTmpTable()
    {
        assetStatementLowValuePoolTmp_AU.AcquisitionPriorYears     =   acquisitionPriorYears;
        assetStatementLowValuePoolTmp_AU.LowCostAssetAmount        =   lowCostAssetAmount;
        assetStatementLowValuePoolTmp_AU.LowValueAssetAmount       =   lowValueAssetAmount;
        assetStatementLowValuePoolTmp_AU.SecondElementCostAmount   =   secondElementCostAmount;
        assetStatementLowValuePoolTmp_AU.DisposalsThisYear         =   disposalsThisYear;
        assetStatementLowValuePoolTmp_AU.ReclassificationThisYear  =   reclassificationThisYear;
        assetStatementLowValuePoolTmp_AU.DepreciationAdjThisYear   =   depreciationAdjThisYear;
        assetStatementLowValuePoolTmp_AU.DepreciationThisYear      =   depreciationThisYear;
        assetStatementLowValuePoolTmp_AU.AccumulatedDepreciation   =   accumulatedDepreciation;
        assetStatementLowValuePoolTmp_AU.NetBookValueEndThisYear   =   netBookValueEndThisYear;
        assetStatementLowValuePoolTmp_AU.NetBookValueEndLastYear   =   netBookValueEndPriorYear;
        assetStatementLowValuePoolTmp_AU.RowName                   =   rowName;
        assetStatementLowValuePoolTmp_AU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public  void  processReport()
    {
        QueryRun                queryRun;
        AssetStatementInterval  assetStatementInterval;
        AssetStatementInterval  assetStatementIntervalQuery;
        AssetBook               assetBook;
        AssetBookId             bookId[];
        int                     bookIdNum;
        int                     i;
        QueryBuildDataSource    qbs;
        boolean                 firstRow  = true;

        AssetStatementLowValuePoolCntrct_AU  assetStatementLowValuePoolCntrct_AU  = this.parmDataContract() as AssetStatementLowValuePoolCntrct_AU;

        startOfPeriod  = assetStatementLowValuePoolCntrct_AU.parmStartOfPeriod();
        endOfPeriod    = assetStatementLowValuePoolCntrct_AU.parmEndOfPeriod();

        assetCalcReport  = new AssetCalcReport(startOfPeriod, endOfPeriod);

        queryRun         = new SysQueryRun(this.parmQuery());

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun, tablenum(AssetBookTable)))
            {
                assetBookTable     = queryRun.get(tablenum(AssetBookTable));
                bookIdNum++;
                bookId[bookIdNum]  = assetBookTable.BookId;
            }
        }

        queryRun.reset();
        qbs  = queryRun.query().dataSourceNo(1).addDataSource(tablenum(AssetStatementInterval));
        qbs.joinMode(1); //Outerjoin
        qbs.relations(true);

        while (queryRun.next())
        {
            if (SysReportRun::changed(queryRun,tablenum(AssetStatementRow)))
            {
                assetStatementRow  = queryRun.get(tablenum(AssetStatementRow));

                if (!firstRow)
                {
                    this.insertTmpTable();
                }

                firstRow                  = false;
                rowName                   = assetStatementRow.RowName;
                acquisitionPriorYears     = 0;
                lowCostAssetAmount        = 0;
                lowValueAssetAmount       = 0;
                secondElementCostAmount   = 0;
                disposalsThisYear         = 0;
                reclassificationThisYear  = 0;
                depreciationAdjThisYear   = 0;
                depreciationThisYear      = 0;
                accumulatedDepreciation   = 0;
                netBookValueEndThisYear   = 0;
                netBookValueEndPriorYear  = 0;
            }
            if (assetStatementRow.RowType  == RowType::Total)
            {
                assetStatementInterval  = queryRun.get(tablenum(AssetStatementInterval));
                while select assetBook
                    where (assetBook.AssetId  >= assetStatementInterval.FromAsset 
                        && assetBook.AssetId  <= assetStatementInterval.ToAsset
                        && assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetId)
                        || (assetBook.AssetGroup  >= assetStatementInterval.FromAsset
                        && assetBook.AssetGroup  <= assetStatementInterval.ToAsset
                        && assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetGroupId)
                {
                    if (assetStatementInterval.AssetIntervalRelation == AssetIntervalRelation::AssetId)
                    {
                        // There can be case where Asset Id and Asset Group ranges overlapping each other.
                        // Ignore Asset Id base records as they are already processed by asset group range.
                        select RecId from assetStatementIntervalQuery
                                where assetStatementIntervalQuery.FromAsset >= assetBook.AssetGroup
                                && assetStatementIntervalQuery.ToAsset <= assetBook.AssetGroup
                                && assetStatementIntervalQuery.AssetStatementLineNum == assetStatementInterval.AssetStatementLineNum
                                && assetStatementIntervalQuery.AssetIntervalRelation == AssetIntervalRelation::AssetGroupId;

                        if (assetStatementIntervalQuery.RecId)
                        {
                            continue;
                        }
                    }

                    for (i  = 1; i  <= bookIdNum; i++)
                    {
                        if (bookId[i]  == assetBook.BookId)
                        {
                            assetCalcReport.calcAsset(assetBook);
                            acquisitionPriorYears     += assetCalcReport.columnAcquisitionPriorYears();
                            lowCostAssetAmount        += assetCalcReport.columnLowCostAssetAmount();
                            lowValueAssetAmount       += assetCalcReport.columnLowValueAssetAmount();
                            secondElementCostAmount   += assetCalcReport.columnSecondElementCostAmount();
                            disposalsThisYear         += assetCalcReport.columnSoldAndScrappedCurrentYear();
                            reclassificationThisYear  += assetCalcReport.columnReclassificationCurrentYear();
                            depreciationAdjThisYear   += assetCalcReport.columnDepreciationAdjCurrentYear();
                            depreciationThisYear      += assetCalcReport.columnDepreciationCurrentYear();
                            accumulatedDepreciation   += assetCalcReport.columnAccumulatedDepreciation();
                            netBookValueEndThisYear   += assetCalcReport.columnNetBookValueEndCurrentYear();
                            netBookValueEndPriorYear  += assetCalcReport.columnNetBookValueEndLastYear();
                        }
                    }
                }
            }
        }

        if (rowName)
        {
            this.insertTmpTable();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>