<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqUpdateWarehouseLevelOnLocationUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is called when single InventLocation record is updated and it requires inventory level recalculation.
/// It processes only the inventory locations that are part of the same subtree as the modified InventLocation record.
/// Still all Transit wharehouses got thier inventory level updated.
/// </summary>
internal final class ReqUpdateWarehouseLevelOnLocationUpdate extends ReqUpdateWarehouseLevel
{
    const int InitialLevelNumber = 0;
    const int LevelIncreaseStep = 2;

    InventLocationId updatedInventLocationId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        updatedInventLocationId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUpdatedInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets invent location id of updated <c>InventLocation</c> record.
    /// </summary>
    /// <param name="_updatedInventLocationId">
    ///    The LocationId of modified <c>InventLocation</c> record.
    /// </param>
    /// <returns>
    ///     The InventLocationId.
    /// </returns>
    public InventLocationId parmUpdatedInventLocationId(InventLocationId _updatedInventLocationId = updatedInventLocationId)
    {
        updatedInventLocationId = _updatedInventLocationId;
        return updatedInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        if (this.shouldAllLevelsBeUpdated())
        {
            return super();
        }
        else
        {
            return this.checkForUpdatedInventLocation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAllLevelsBeUpdated</Name>
				<Source><![CDATA[
    private boolean shouldAllLevelsBeUpdated()
    {
        return !ReqUpdateWarehouseLevelForUpdatedRecordFlight::instance().isEnabled() || updatedInventLocationId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForUpdatedInventLocation</Name>
				<Source><![CDATA[
    private boolean checkForUpdatedInventLocation()
    {
        boolean ok = true;

        InventLocation updatedInventLocation = this.getInventLocation(this.updatedInventLocationId);

        if (updatedInventLocation.InventLocationIdReqMain)
        {
            if (!InventLocation::exist(updatedInventLocation.InventLocationIdReqMain))
            {
                ok = checkFailed(strfmt("@SYS70042", updatedInventLocation.InventLocationIdReqMain));
            }
            else if (updatedInventLocation.InventLocationIdReqMain && !updatedInventLocation.checkInventLocationLevel())
            {
                ok = false;
            }
        }

        if (ok && updatedInventLocation.InventLocationType != InventLocationType::Transit)
        {
            setprefix(#prefixField(updatedInventLocation, inventLocationId));

            if (ReqUpdateWarehouseLevelOnLocationUpdateBuildLocationsLevelFlight::instance().isEnabled())
            {
                InventLocation parentInventLocation;

                if (updatedInventLocation.InventLocationIdReqMain) 
                {
                    parentInventLocation = InventLocation::find(updatedInventLocation.InventLocationIdReqMain);
                }

                int parentDerivedInventLocationLevel = parentInventLocation ? parentInventLocation.InventLocationLevel + LevelIncreaseStep : InitialLevelNumber;

                ok = this.buildLocationsLevelForRoot(updatedInventLocation, parentDerivedInventLocationLevel);
            }
            else
            {
                InventLocationId rootLocationIdLocal = this.findRootReqMainLocationId(updatedInventLocation.InventLocationId);
                ok = this.buildLocationsLevelForRoot(this.getInventLocation(rootLocationIdLocal), InitialLevelNumber);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootReqMainLocationId</Name>
				<Source><![CDATA[
    private InventLocationId findRootReqMainLocationId(InventLocationId _inventLocationId)
    {
        InventLocation inventLocationLocal = InventLocation::find(_inventLocationId);
        Set uniqInventLocationRecIdSet = new Set(Types::Int64);

        while (inventLocationLocal.InventLocationIdReqMain)              
        {
            if (uniqInventLocationRecIdSet.in(inventLocationLocal.RecId))
                throw error("@SYS132865");

            uniqInventLocationRecIdSet.add(inventLocationLocal.RecId);
            inventLocationLocal = InventLocation::find(inventLocationLocal.InventLocationIdReqMain);
        }

        return inventLocationLocal.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationsLevelForRoot</Name>
				<Source><![CDATA[
    private boolean buildLocationsLevelForRoot(InventLocation _rootInventLocation, int _currentLevel)
    {
        // circularity protection check
        if (mapLevel.exists(_rootInventLocation.InventLocationId))
        {
            return checkFailed(strFmt("@SYS70041", this.getInventLocation(this.updatedInventLocationId).InventLocationIdReqMain));
        }

        mapLevel.insert(_rootInventLocation.InventLocationId, _currentLevel);
        mapInventLocation.insert(_rootInventLocation.RecId, _rootInventLocation);

        InventLocation inventLocationLocal;
        inventLocationLocal.disableCache(true);
        
        while select inventLocationLocal
            where inventLocationLocal.InventLocationIdReqMain == _rootInventLocation.InventLocationId
                && inventLocationLocal.InventLocationType != InventLocationType::Transit
                && (!ReqUpdateWarehouseLevelOnLocationUpdateBuildLocationsLevelFlight::instance().isEnabled() 
                    || inventLocationLocal.InventLocationLevel != _currentLevel + LevelIncreaseStep)
            {
                if (!this.buildLocationsLevelForRoot(inventLocationLocal, _currentLevel + LevelIncreaseStep))
                {
                    return false;
                }
            }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocation</Name>
				<Source><![CDATA[
    private InventLocation getInventLocation(InventLocationId _inventLocationId)
    {
        InventLocation inventLocationLocal;

        inventLocationLocal.disableCache(true);

        select firstonly inventLocationLocal
            where inventLocationLocal.InventLocationId == _inventLocationId;

        return inventLocationLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <remarks>
    /// Expect this method to be called after calling check so that all the maps are populated in case basic validation passed.
    /// </remarks>
    protected void update()
    {
        if (this.shouldAllLevelsBeUpdated())
        {
            super();
        }
        else
        {
            this.updateLevelsForUpdatedRecord();
            this.updateTransitLocationsLevel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLevelsForUpdatedRecord</Name>
				<Source><![CDATA[
    private void updateLevelsForUpdatedRecord()
    {
        MapIterator mi_inventLocation = new MapIterator(mapInventLocation);

        mi_inventLocation.begin();

        while (mi_inventLocation.more())
        {
            inventLocation = mapInventLocation.lookup(mi_inventLocation.key());

            if (inventLocation.InventLocationLevel != mapLevel.lookup(inventLocation.InventLocationId))
            {
                inventLocation.selectForUpdate(true);
                inventLocation.InventLocationLevel = mapLevel.lookup(inventLocation.InventLocationId);
                inventLocation.doUpdate();
            }

            mi_inventLocation.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransitLocationsLevel</Name>
				<Source><![CDATA[
    private void updateTransitLocationsLevel()
    {
        InventLocation inventLocationTransit;

        if (ReqUpdateTransitLocationsLevelFlight::instance().isEnabled())
        {
            ReqMaxWarehouseLevelsView maxLevels;

            inventLocationTransit.skipDataMethods(true);

            update_recordset inventLocationTransit
                setting InventLocationLevel = 0
                where inventLocationTransit.InventLocationType == InventLocationType::Transit
                    && inventLocationTransit.InventLocationLevel != 0
                notexists join maxLevels
                    where maxLevels.InventLocationIdTransit == inventLocationTransit.InventLocationId;

            update_recordset inventLocationTransit
                setting InventLocationLevel = maxLevels.InventLocationLevel + 1
                where inventLocationTransit.InventLocationType == InventLocationType::Transit
                    && inventLocationTransit.InventLocationLevel != maxLevels.InventLocationLevel + 1
                join maxLevels
                    where maxLevels.InventLocationIdTransit == inventLocationTransit.InventLocationId; 
        }
        else
        {
            while select forupdate inventLocationTransit
                where inventLocationTransit.InventLocationType == InventLocationType::Transit
            {
                select maxof(InventLocationLevel) from inventLocation
                    where inventLocation.InventLocationIdTransit == inventLocationTransit.InventLocationId;
                inventLocationTransit.InventLocationLevel = inventLocation ? inventLocation.InventLocationLevel + 1 : 0;
                inventLocationTransit.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container base;
        boolean ret;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;
        
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ReqUpdateWarehouseLevelOnLocationUpdate construct()
    {
        return new ReqUpdateWarehouseLevelOnLocationUpdate();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>