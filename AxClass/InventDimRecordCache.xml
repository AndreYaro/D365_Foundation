<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimRecordCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventDimRecordCache extends ReqMemoryRecordCache
{
    private static InventDimRecordCache instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>primaryKeyValueForRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str primaryKeyValueForRecord(Common _common)
    {
        InventDim inventDim = _common as InventDim;
                               
        return inventDim.DataAreaId+'#'+inventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternateKeyValuesForRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Set alternateKeyValuesForRecord(Common _common)
    {
        InventDim inventDim = _common as InventDim;

        Set alternateKeys = this.createEmptyAlternateKeyValues();
        alternateKeys.add(inventDim.DataAreaId+'#'+inventDim.SHA1HashHex);
        alternateKeys.add(inventDim.DataAreaId+'#'+inventDim.SHA3HashHex);

        return alternateKeys;
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    private static InventDimRecordCache current()
    {
        if (!instance && InventDimRecordCacheFlight::instance().isEnabled())
        {
            instance = new InventDimRecordCache();
        }
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByHash</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventDim lookupByHash(str _hash)
    {
        var cache = InventDimRecordCache::current();
        if (cache)
        {
            return cache.lookupRecordByAlternateKey(curExt()+'#'+_hash);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static InventDim lookupByInventDimId(InventDimId _inventDimId)
    {
        var cache = InventDimRecordCache::current();
        if (cache)
        {
            return cache.lookupRecordByPrimaryKey(curExt()+'#'+_inventDimId);
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void add(InventDim _inventDim)
    {
        if (_inventDim)
        {
            var cache = InventDimRecordCache::current();

            if (cache)
            {
                cache.addRecord(_inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void remove(InventDim _inventDim)
    {
        if (_inventDim)
        {
            var cache = InventDimRecordCache::current();

            if (cache)
            {
                cache.removeRecord(_inventDim);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerUncommittedChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void registerUncommittedChange(InventDim _inventDim)
    {
        if (_inventDim)
        {
            var cache = InventDimRecordCache::current();

            if (cache)
            {
                cache.registerUncommittedRecordChange(_inventDim);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>