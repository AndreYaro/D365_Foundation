<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineSplit_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class SalesLineSplit_RU
{
    SalesLine   salesLine;
    SalesQty    splitQty;

    SalesLine   newSalesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    private boolean dialog()
    {
        Dialog      dialog = new Dialog("@SYS69088");

        DialogField field = dialog.addFieldValue(extendedTypeStr(SalesQty), salesLine.RemainSalesPhysical);
        if (dialog.run())
        {
            splitQty = field.value();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    SalesLine newSalesLine()
    {
        return newSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run(Qty _splitQty = 0, PdsCWInventQty _pdsCWSplitQty = 0)
    {
        #OCCRetryCount
        InventTrans         inventTrans, newInventTrans;
        InventQty           qty2Split;
        PdsCWInventQty      pdsCWQty2Split;
        InventTransOriginId originIdOld, originIdNew;
        InventTransSplit    inventSplit;
        MarkupTrans         markupTrans, newMarkupTrans;

        void updateInventTrans()
        {
            if (abs(inventTrans.Qty) > abs(qty2Split))
            {
                inventSplit = InventTransSplit::newInventTransSplit(inventTrans.RecId);
                inventSplit.parmSplitQty(-qty2Split);
                inventSplit.pdsCWParmSplitQty(-pdsCWQty2Split);
                inventSplit.runOperation();

                select firstonly forupdate newInventTrans
                    where newInventTrans.RecId == inventSplit.updRecId();

                newInventTrans.InventTransOrigin = originIdNew;
                newInventTrans.update();

                qty2Split = 0;
                pdsCWQty2Split = 0;
            }
            else
            {
                newInventTrans.InventTransOrigin = originIdNew;
                inventTrans.update();
                qty2Split -= inventTrans.Qty;
                pdsCWQty2Split -= inventTrans.PdsCWQty;
            }
        }

        splitQty = _splitQty;

        if (!splitQty)
        {
            if (!this.dialog())
            {
                return;
            }
        }

        if (!splitQty                                   ||
            splitQty >= salesLine.SalesQty              ||
            splitQty >= salesLine.RemainSalesPhysical   ||
            splitQty >= salesLine.RemainInventPhysical  ||
            splitQty * salesLine.SalesQty < 0)
        {
            return;
        }

        try
        {
            ttsbegin;
            newSalesLine.initFromSalesTable(SalesTable::find(salesLine.SalesId));
            newSalesLine.initFromSalesLine(salesLine, true, true, true, splitQty, _pdsCWSplitQty);
            newSalesLine.LineNum               += salesLine.LineNum + 0.1;
            newSalesLine.RemainSalesPhysical    = splitQty;
            newSalesLine.RemainInventPhysical   = newSalesLine.QtyOrdered;
            newSalesLine.LineAmount             = newSalesLine.calcLineAmount();
            newSalesLine.insert(false, false);

            originIdNew = InventTransOrigin::findByInventTransId(newSalesLine.InventTransId).RecId;

            while select forupdate inventTrans
                where inventTrans.InventTransOrigin == originIdNew
            {
                inventTrans.delete(NoYes::No, NoYes::No);
            }

            salesLine.SalesQty             -= splitQty;
            salesLine.PdsCWQty             -= _pdsCWSplitQty;
            salesLine.QtyOrdered            = salesLine.calcQtyOrdered();
            salesLine.RemainSalesPhysical  -= splitQty;
            salesLine.RemainInventPhysical  = salesLine.QtyOrdered;
            salesLine.LineAmount            = salesLine.calcLineAmount();
            salesLine.update(true);

            while select forupdate markupTrans
                where markupTrans.TransTableId == tableNum(SalesLine) &&
                      markupTrans.TransRecId   == salesLine.RecId
            {
                newMarkupTrans.data(markupTrans);
                newMarkupTrans.TransRecId   = newSalesLine.RecId;
                newMarkupTrans.LineNum      = MarkupTrans::lastLineNum(newMarkupTrans.TransTableId, newMarkupTrans.TransRecId) + 1;

                markupTrans.Value           = CurrencyExchangeHelper::amount(markupTrans.Value * salesLine.RemainSalesPhysical / (salesLine.RemainSalesPhysical + splitQty));
                markupTrans.update();

                newMarkupTrans.Value       -= markupTrans.Value;
                newMarkupTrans.insert();
            }

            originIdOld = InventTransOrigin::findByInventTransId(salesLine.InventTransId).RecId;

            qty2Split = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
																							  salesLine.InventDimId,
																							  splitQty,
																							  salesLine.SalesUnit,
																							  salesLine.inventTable().inventUnitId(),
																							  NoYes::Yes);
            pdsCWQty2Split = _pdsCWSplitQty;

            while (qty2Split)
            {
                select firstonly forupdate inventTrans
                    where inventTrans.InventTransOrigin == originIdOld
                          && inventTrans.StatusIssue    >  StatusIssue::Sold
                          && inventTrans.StatusReceipt  == StatusReceipt::None
                          && !inventTrans.DatePhysical;

                if (inventTrans)
                {
                    updateInventTrans();
                    continue;
                }

                select firstonly reverse forupdate inventTrans
                    order by DatePhysical
                    where inventTrans.InventTransOrigin == originIdOld
                          && inventTrans.StatusIssue    >  StatusIssue::Sold
                          && inventTrans.StatusReceipt  == StatusReceipt::None;

                if (inventTrans)
                {
                    updateInventTrans();
                    continue;
                }

                throw error("@GLS110287");
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::Error)
        {
            ttsabort;
            Box::stop("@GLS110288");
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    private SalesLine salesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SalesLineSplit_RU    salesLineSplit = new SalesLineSplit_RU();

        if (args && args.record() && args.record().TableId == tableNum(SalesLine))
        {
            salesLineSplit.salesLine(args.record());
            salesLineSplit.run();

            Object saleLine_dataSource = FormDataUtil::getFormDataSource(args.record());
            if (saleLine_dataSource)
            {
                saleLine_dataSource.executeQuery();
            }
        }
        else
            throw error(strFmt("@SYS27147", new DictClass(classIdGet(salesLineSplit)).name()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits <c>SalesLine</c> by separating the given quantities.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record to split.
    /// </param>
    /// <param name="_splitQty">
    /// Quantity to split in purshase units of measure.
    /// </param>
    /// <param name="_pdsCWSplitQty">
    /// Catch-weight quantity to split; optional.
    /// </param>
    /// <returns>
    /// The new <c>SalesLine</c> that was created during the split.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws <c>Exception::Error</c> if either <parmref name="_salesLine"/> or <parmref name="_splitQty"/> is not provided.
    /// </exception>
    public static SalesLine update(SalesLine        _salesLine,
                                   Qty              _splitQty,
                                   PdsCWInventQty   _pdsCWSplitQty = 0.0)
    {
        SalesLineSplit_RU    salesLineSplit = new SalesLineSplit_RU();

        if (_salesLine && _splitQty)
        {
            salesLineSplit.salesLine(_salesLine);
            salesLineSplit.run(_splitQty, _pdsCWSplitQty);
        }
        else
        {
            throw error(strFmt("@SYS27147", new DictClass(classIdGet(salesLineSplit)).name()));
        }

        return salesLineSplit.newSalesLine();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>