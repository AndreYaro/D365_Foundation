<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventRegistrationPurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This class provides an implementation of the <c>InventPendingRegistrationProvider</c> interface and
///    the <c>InventRegistrationHandler</c> interface for the purchase lines.
/// </summary>
public class InventRegistrationPurchLine implements InventPendingRegistrationProvider, InventRegistrationHandler
{
    PurchLine   purchLine;
    InventDim   inventDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRegister</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the registration can be performed.
    /// </summary>
    /// <param name="_qtyToRegister">
    ///    The quantity to register.
    /// </param>
    /// <returns>
    ///    true if the registration can be performed; otherwise, false.
    /// </returns>
    public boolean canRegister(InventQty _qtyToRegister)
    {
        return this.getRegistrationHelper().validateRegister(_qtyToRegister);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description for the purchase order line.
    /// </summary>
    /// <returns>
    ///    The description for the purchase order line.
    /// </returns>
    public ItemFreeTxt getDescription()
    {
        return purchLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirPartyRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>DirPartyRecId</c> extended data type of the vendor that is associated with the
    ///    purchase order.
    /// </summary>
    /// <returns>
    ///    The <c>DirPartyRecId</c> of the vendor.
    /// </returns>
    public DirPartyRecId getDirPartyRecId()
    {
        return VendTable::find(purchLine.VendAccount).Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>EcoResDistinctProductRecId</c> extended data type of the item on the purchase
    ///    order line.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResDistinctProductRecId</c> of an item.
    /// </returns>
    public EcoResDistinctProductRecId getDistinctProductRecId()
    {
        if (
            inventDim.anyProductDimensionSpecified())
        {
            return InventDimCombination::findByInventDim(purchLine.ItemId,inventDim).DistinctProductVariant;
        }

        return InventTable::itemProduct(purchLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpectedDeliveryDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the expected delivery date for the purchase order line.
    /// </summary>
    /// <returns>
    ///    The <c>InventExpectedDeliveryDateTime</c> extended data type for the purchase order line.
    /// </returns>
    /// <remarks>
    ///    The expected delivery date is be the confirmed delivery date if it is present; otherwise, the
    ///    delivery date.
    /// </remarks>
    public InventExpectedDeliveryDateTime getExpectedDeliveryDateTime()
    {
        if (purchLine.ConfirmedDlv)
        {
            return DateTimeUtil::newDateTime(purchLine.ConfirmedDlv,0);
        }
        else
        {
            return DateTimeUtil::newDateTime(purchLine.DeliveryDate,0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossVolume</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the gross volume for the items on the purchase order line.
    /// </summary>
    /// <returns>
    ///    The <c>Volume</c> extended data type for the items on the purchase order line.
    /// </returns>
    public Volume getGrossVolume()
    {
        return purchLine.getGrossVolumePerItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGrossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the gross weight for the items in the purchase order line.
    /// </summary>
    /// <returns>
    ///    The <c>Weight</c> extended data type for the items on the purchase order line.
    /// </returns>
    public Weight getGrossWeight()
    {
        return purchLine.getGrossWeightPerItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventDim</c> record of the purchase order line.
    /// </summary>
    /// <returns>
    ///    The <c>InventDim</c> of the purchase line.
    /// </returns>
    private InventDim getInventDim()
    {
        if (purchLine.InventDimId != inventDim.InventDimId)
        {
            inventDim = InventDim::find(purchLine.InventDimId);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPendingRegistrationQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the pending quantity to register for the purchase order line.
    /// </summary>
    /// <returns>
    ///    The ordered quantity on the purchase order line.
    /// </returns>
    public InventQty getPendingRegistrationQuantity()
    {
        return purchLine.orderedInPurchUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventLocationId</c> extended data type that is related to the source line where
    ///    the receipt is expected.
    /// </summary>
    /// <returns>
    ///    An <c>InventLocationId</c> extended data type.
    /// </returns>
    public InventLocationId getReceiptInventLocationId()
    {
        return this.getInventDim().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptInventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventSiteId</c> extended data type that is related to the source line where the
    ///    receipt is expected.
    /// </summary>
    /// <returns>
    ///    An <c>InventSiteId</c> extended data type.
    /// </returns>
    public InventSiteId getReceiptInventSiteId()
    {
        return this.getInventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventTransType</c> for the order line.
    /// </summary>
    /// <returns>
    ///    The <c>InventTransType</c> for purchase orders.
    /// </returns>
    public InventTransType getReferenceCategory()
    {
        return InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the purchase ID of the purchase order.
    /// </summary>
    /// <returns>
    ///    The <c>InventTransRefId</c> extended data type for the purchase line.
    /// </returns>
    public InventTransRefId getReferenceId()
    {
        return purchLine.PurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceLineId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the <c>InventTrans</c> record for the order line.
    /// </summary>
    /// <returns>
    ///    The <c>InventTransId</c> extended data type for the purchase order line.
    /// </returns>
    public InventTransId getReferenceLineId()
    {
        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationHelper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of the <c>InventTransType</c> for the order line.
    /// </summary>
    /// <returns>
    ///    The <c>PurchNonStockedRegistrationHelper</c> object for the current purchase line.
    /// </returns>
    private PurchNonStockedRegistrationHelper getRegistrationHelper()
    {
        PurchNonStockedRegistrationHelper purchNonStockedRegistrationHelper = PurchNonStockedRegistrationHelper::newFromPurchLine(purchLine);

        return purchNonStockedRegistrationHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegistrationProvider</Name>
				<Source><![CDATA[
        public InventPendingRegistrationProvider getRegistrationProvider()
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>SourceDocumentLineRecId</c> extended data type for the purchase order line.
    /// </summary>
    /// <returns>
    ///    A <c>SourceDocumentLineRecId</c> extended data type for the purchase order line.
    /// </returns>
    public SourceDocumentLineRecId getSourceDocumentLineRecId()
    {
        return purchLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineCategoryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>EcoResCategoryId</c> extended data type of the procurement category for the
    ///    purchase order line.
    /// </summary>
    /// <returns>
    ///    The <c>EcoResCategoryId</c> extended data type of a procurement category.
    /// </returns>
    public EcoResCategoryId getSourceLineCategoryRecId()
    {
        return purchLine.ProcurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceLineLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>RefRecID</c> extended data type of the legal entity.
    /// </summary>
    /// <returns>
    ///    The <c>RefRecID</c> extended data type of the legal entity.
    /// </returns>
    public RefRecId getSourceLineLegalEntityRecId()
    {
        return purchLine.companyInfo().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyOnRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the processing that is necessary after the registration of the purchase order line is
    ///    finished.
    /// </summary>
    /// <param name="_qtyRegistered">
    ///    The quantity that is registered as arrived.
    /// </param>
    public void notifyOnRegistration(InventQty _qtyRegistered)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
        public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventRegistrationPurchLine construct()
    {
        return new InventRegistrationPurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns an <c>InventRegistrationPurchLine</c> object for the specified <c>PurchLine</c>
    ///    record.
    /// </summary>
    /// <param name="_purchLine">
    ///    The <c>PurchLine</c> record to use to create the <c>InventRegistrationPurchLine</c> object.
    /// </param>
    /// <returns>
    ///    An <c>InventRegistrationPurchLine</c> object.
    /// </returns>
    public static InventRegistrationPurchLine newFromPurchLine(PurchLine _purchLine)
    {
        InventRegistrationPurchLine inventRegistrationPurchLine = InventRegistrationPurchLine::construct();

        inventRegistrationPurchLine.parmPurchLine(_purchLine);

        return inventRegistrationPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and returns an <c>InventRegistrationPurchLine</c> object for the specified
    ///    <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    The <c>SourceDocumentLine</c> record to use to create the <c>InventRegistrationPurchLine</c> object.
    /// </param>
    /// <returns>
    ///    An <c>InventRegistrationPurchLine</c> object.
    /// </returns>
    public static InventRegistrationPurchLine newFromSourceDocumentLine(SourceDocumentLine _sourceDocumentLine)
    {
        if (!_sourceDocumentLine.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return InventRegistrationPurchLine::newFromPurchLine(PurchLine::findBySourceDocumentLine(_sourceDocumentLine.RecId).findApproved());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
