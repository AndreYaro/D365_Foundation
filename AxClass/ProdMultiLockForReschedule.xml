<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiLockForReschedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdMultiLockForReschedule</c> class encapsulates the functionality of toggling the lock for
///    reschedule flag.
/// </summary>
public class ProdMultiLockForReschedule extends RunBaseBatch implements BatchRetryable
{
    ProdTable               prodTable;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        prodTable
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable)
    {
        prodTable = _prodTable;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the toggling of the locked for reschedule flag for a set of production orders.
    /// </summary>
    /// <remarks>
    ///    This method should be executed on the server.
    /// </remarks>
    public void run()
    {
        #OCCRetryCount
        ProdTable       iterateProdTable;
        Set             setRecords = new Set(Types::Record);

        void toggleLockedForReschedule(ProdTable _prodTable)
        {
            _prodTable.selectForUpdate(true);
            if (_prodTable.ProdLocked == NoYes::Yes)
            {
                _prodTable.ProdLocked = NoYes::No;
            }
            else
            {
                _prodTable.ProdLocked = NoYes::Yes;
            }
            _prodTable.doUpdate();
        }

        super();

        try
        {
            // iterate through the datasource, get the selected records
            if (prodTable)
            {
                FormDataSource formDataSource = FormDataUtil::getFormDataSource(prodTable);

                if (formDataSource)
                {
                    if (formDataSource.getFirst(true))
                    {
                        iterateProdTable = formDataSource.getFirst(true);
                    }
                    else
                    {
                        iterateProdTable = prodTable;
                    }

                    ProdId localProdId = iterateProdTable.ProdId;
                    for (iterateProdTable = iterateProdTable; iterateProdTable; iterateProdTable=formDataSource.getNext())
                    {
                        toggleLockedForReschedule(iterateProdTable);
                        setRecords.add(iterateProdTable);
                    }

                    formDataSource.research(true);

                    // iterate through all the previously marked records and mark them again
                    SetEnumerator setEnumerator = setRecords.getEnumerator();
                    while (setEnumerator && setEnumerator.moveNext())
                    {
                        formDataSource.markRecord(setEnumerator.current(), 1);
                    }

                    formDataSource.refreshEx(-2);
                    
                    // return to the first mark record in the list
                    formDataSource.positionToRecord(ProdTable::find(localProdId));
                }
                else
                {
                    toggleLockedForReschedule(prodTable);
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS118476");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task.
    /// </summary>
    /// <returns>
    ///    true always, because this class has been validated to be able to use impersonation.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     result;
        Integer     version = conpeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion:
            default:
                [version, #CurrentList, base] = _packedClass;
                result         = super(base);
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS118461";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a <c>ProdMultiLockForReschedule</c> instance based on an <c>Args</c> parameter instance.
    /// </summary>
    /// <param name="_args">
    ///    An <c>Args</c> instance that contains information about the caller and passed in table buffer.
    /// </param>
    /// <returns>
    ///    A new <c>ProdMultiLockForReschedule</c> instance.
    /// </returns>
    public static ProdMultiLockForReschedule construct(Args _args)
    {
        ProdMultiLockForReschedule prodMultiLockForReschedule = new ProdMultiLockForReschedule();
        prodMultiLockForReschedule.getLast();
        prodMultiLockForReschedule.parmProdTable(_args.record());

        return prodMultiLockForReschedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdMultiLockForReschedule  prodMultiLockForReschedule = ProdMultiLockForReschedule::construct(_args);

        prodMultiLockForReschedule.init();
        prodMultiLockForReschedule.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>