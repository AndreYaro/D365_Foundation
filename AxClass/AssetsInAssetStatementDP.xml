<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetsInAssetStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Declares variables that are required for the <c>AssetsInAssetStatement</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetsInAssetStatement)),
    SRSReportParameterAttribute(classstr(AssetsInAssetStatementContract))
]
public class AssetsInAssetStatementDP extends SRSReportDataProviderPreProcessTempDB
{
    AssetsInAssetStatementTmp assetsInAssetStatementTmp;
    AssetStatementRow assetStatementRow;
    AssetTable assetTable;
    AssetStatementRowName enteredRowName;
    AssetStatementRowName assetStatementRowName;
    AssetStatementRowName assetStatementRname;
    int include;
    int visibilityOfTitle;
    int visibilityOfTitleNotIncluded;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetsInAssetStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns data from the <c>AssetBalanceReportColumnsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetBalanceReportColumnsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetsInAssetStatementTmp))
    ]
    public AssetsInAssetStatementTmp getAssetsInAssetStatementTmp()
    {
        select assetsInAssetStatementTmp;
        return assetsInAssetStatementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetsInAssetStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details of Fixed Asset Note into the <c>AssetBalanceReportColumnsTmp</c> temporary
    ///    table.
    /// </summary>
    private void insertAssetsInAssetStatementTmp(RecordInsertList _recordInsertList)
    {
        assetsInAssetStatementTmp.clear();
        assetsInAssetStatementTmp.AssetId = assetTable.AssetId;
        assetsInAssetStatementTmp.Name = assetTable.Name;
        assetsInAssetStatementTmp.AssetGroup = assetTable.AssetGroup;
        assetsInAssetStatementTmp.AssetStatementRowName = assetStatementRname;
        assetsInAssetStatementTmp.Included = include;
        assetsInAssetStatementTmp.VisibilityOfTitle = visibilityOfTitle;
        assetsInAssetStatementTmp.VisibilityOfTitleNotIncluded = visibilityOfTitleNotIncluded;

        _recordInsertList.add(assetsInAssetStatementTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches records that are required for the <c>AssetsInAssetStatement</c> SRS report.
    /// </summary>
    /// <remarks>
    ///    The <c>visibilityOfTitle</c> and <c>visibilityOfTitle2</c> variables are the variables that are
    ///    used to figure out whether there is any data either in Fixed Assets Included section or Fixed
    ///    Assets not Included section.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        Query query = new Query(this.parmQuery());

        AssetsInAssetStatementContract contract = this.parmDataContract() as AssetsInAssetStatementContract;
        assetStatementRowName = contract.parmAssetStatementRowName();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(AssetsInAssetStatementTmp), true, true, true, false, true, assetsInAssetStatementTmp);

        queryRun = new QueryRun(query);
        include = 3;

        while (queryRun.next())
        {
            assetTable = queryRun.get(tablenum(AssetTable));
            enteredRowName = AssetsInAssetStatementDP::rowNameForAsset(
                assetStatementRowName, assetTable.AssetId, assetTable.assetGroup);

            if(enteredRowName)
            {
                include = 1;
                visibilityOfTitle = 1;
            }

            else
            {
                include = 0;
                VisibilityOfTitleNotIncluded = 1;
            }
            
            // assetStatementRowName is the value specified on the contract form where the user can use
            // that value to filter the records to query for assets that are assigned to statement intervals.  
            // assetStatementRname is the statement interval value that an asset is assigned to.
            assetStatementRname = AssetsInAssetStatementDP::rowNameForAsset(
                assetStatementRowName, assetTable.AssetId, assetTable.assetGroup);

            this.insertAssetsInAssetStatementTmp(recordInsertList);
        }

        if (include == 3)
        {
            assetsInAssetStatementTmp.Included = include;
            recordInsertList.add(assetsInAssetStatementTmp);
        }

        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowNameForAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will determine if a given asset is assigned to the Fixed asset statement row
    /// based on the information stored in <c>AssetStatementInterval</c> table.
    /// </summary>
    /// <param name = "_assetStatementRowName">The statement row</param>
    /// <param name = "_assetId">The ID of the asset</param>
    /// <param name = "_assetGroupId">The group ID assigned to the asset</param>
    /// <returns>If the asset belongs to the row, the row name is return, otherwise empty value is returned.</returns>
    public static AssetStatementRowName rowNameForAsset(
        AssetStatementRowName   _assetStatementRowName,
        AssetId                 _assetId,
        AssetGroupId            _assetGroupId)
    {
        AssetStatementRow      assetStatementRow;
        AssetStatementInterval assetStatementInterval;
        AssetStatementLineNum  assetStatementLineNum;
        AssetStatementRowName  assetStatementRowName;
        
        if (_assetId)
        {
            if (_assetStatementRowName)
            {
                select firstonly assetStatementRow
                    where assetStatementRow.RowName == _assetStatementRowName;
                if (assetStatementRow.RecId)
                {
                    assetStatementLineNum = assetStatementRow.LineNum;
                }

                if (AssetsInAssetStatementDP::existAssetStatementInvervalWithRowStatementLine(
                        assetStatementLineNum, _assetId, _assetId, AssetIntervalRelation::AssetId))
                {
                    assetStatementRowName = _assetStatementRowName;
                }
                else if (_assetGroupId
                    && AssetsInAssetStatementDP::existAssetStatementInvervalWithRowStatementLine(
                        assetStatementLineNum, _assetGroupId, _assetGroupId, AssetIntervalRelation::AssetGroupId))
                {
                    assetStatementRowName = _assetStatementRowName;
                }
            }
            else
            {
                AssetStatementLineNum statementLineNumber =
                    AssetsInAssetStatementDP::findLineNumberAssetStatementInvervalAllRows(_assetId, _assetId, AssetIntervalRelation::AssetId);
                
                if (statementLineNumber)
                {
                    assetStatementRowName = AssetStatementRow::find(statementLineNumber).RowName;
                }
                else if (_assetGroupId)
                {
                    statementLineNumber = AssetsInAssetStatementDP::findLineNumberAssetStatementInvervalAllRows(_assetGroupId, _assetGroupId, AssetIntervalRelation::AssetGroupId);
                    if (statementLineNumber)
                    {
                        assetStatementRowName = AssetStatementRow::find(statementLineNumber).RowName;
                    }
                }                
            }
        }

        return assetStatementRowName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineNumberAssetStatementInvervalAllRows</Name>
				<Source><![CDATA[
    private static AssetStatementLineNum findLineNumberAssetStatementInvervalAllRows(
        AssetId _fromRange,
        AssetId _toRange,
        AssetIntervalRelation _assetIntervalRelation)
    {
        AssetStatementInterval assetStatementInterval;

        select firstonly AssetStatementLineNum from assetStatementInterval
            where assetStatementInterval.FromAsset <= _fromRange
                && assetStatementInterval.ToAsset >= _toRange
                && assetStatementInterval.AssetIntervalRelation == _assetIntervalRelation;

        return assetStatementInterval.AssetStatementLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAssetStatementInvervalWithRowStatementLine</Name>
				<Source><![CDATA[
    private static boolean existAssetStatementInvervalWithRowStatementLine(
        AssetStatementLineNum _statementLineNum,
        AssetId _fromRange,
        AssetId _toRange,
        AssetIntervalRelation _assetIntervalRelation)
    {
        AssetStatementInterval assetStatementInterval;
        boolean returnValue;

        select firstonly RecId from assetStatementInterval
            where assetStatementInterval.AssetStatementLineNum == _statementLineNum
                && assetStatementInterval.FromAsset <= _fromRange
                && assetStatementInterval.ToAsset >= _toRange
                && assetStatementInterval.AssetIntervalRelation == _assetIntervalRelation;
            
        if (assetStatementInterval.RecId)
        {
            returnValue = true;
        }

        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>