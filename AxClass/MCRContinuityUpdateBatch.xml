<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuityUpdateBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRContinuityUpdateBatch</c> loops through any continuity schedules which are set to
///  start at the current event, and updates the schedule to the next event if necessary.
/// </summary>
class MCRContinuityUpdateBatch extends RunBaseBatch implements BatchRetryable
{
    // Packed variables
    int minutes;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        minutes
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Dialog for continuity update job.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase       dialog = super();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processContinuitySchedules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the continuity schedule by checking the next event.
    /// </summary>
    /// <remarks>
    ///  loops through any continuity schedules which are set to
    ///     start at the current event, and checking if it is time to move to
    ///     the next event.  This then updates the schedule appropriately.
    ///     Schedules whose Order start type is 'First' should always have their
    ///     Current event Id set to the default.
    /// </remarks>
    public void processContinuitySchedules()
    {
        MCRContinuityScheduleHeader     mcrContinuityScheduleHeader;
        date                            currentDate, nextEventDate;

        currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        while select mcrContinuityScheduleHeader
            where mcrContinuityScheduleHeader.Active == NoYes::Yes
               && mcrContinuityScheduleHeader.OrderStart == MCRContinuityOrderStart::CurrentEvent
        {
            nextEventDate = mcrContinuityScheduleHeader.nextEventStartDate();
            if (nextEventDate && nextEventDate <= currentDate)
            {
                mcrContinuityScheduleHeader.advanceEvent();
            }
        }
        // Schedule's whose Order start type is 'First' should always have their
        // Current event Id set to the default (1).
        update_recordset mcrContinuityScheduleHeader
            setting CurrentEvent = 1
                where mcrContinuityScheduleHeader.OrderStart == MCRContinuityOrderStart::FirstEvent
                && mcrContinuityScheduleHeader.CurrentEvent != 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes the schedules.
    /// </summary>
    public void run()
    {
        if (!this.validate())
            throw error("");

        try
        {
            this.processContinuitySchedules();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRContinuityUpdateBatch construct()
    {
        return new MCRContinuityUpdateBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch job description.
    /// </summary>
    /// <returns>The class description.</returns>
    static ClassDescription description()
    {
        return "@MCR12205";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates and runs an instance of the class <c>MCRContinuityUpdateBatch</c>.
    /// </summary>
    /// <param name="args">
    /// The arguments required by the class.
    /// </param>
    public static void main(Args args)
    {
        MCRContinuityUpdateBatch    continuityUpdateBatch;

        continuityUpdateBatch = MCRContinuityUpdateBatch::construct();

        if (continuityUpdateBatch.prompt())
        {
            continuityUpdateBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>MCRContinuityUpdateBatch</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>MCRContinuityUpdateBatch</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This batch job is not retryable because run() is not wrapped with a transaction.
    /// </summary>
    /// <returns>An instance of BatchInfo with the configuration for retryable and retries.</returns>
    public BatchInfo batchInfo()
    {
        BatchInfo info = super();

        info.parmRetryable(false);
        info.parmRetriesOnFailure(0);

        return info;
    }

]]></Source>
			</Method>

		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>