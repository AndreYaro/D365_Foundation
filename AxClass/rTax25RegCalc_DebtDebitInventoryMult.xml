<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_DebtDebitInventoryMult</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_DebtDebitInventoryMult extends RTax25RegCalc_DebtInventoryMultiply implements BatchRetryable
{
    RTax25DebtPeriodType    periodType;
    AmountMST               debt0_45Total,
                            debt45_90Total,
                            debt90_240Total,
                            debtReserved,
                            hopelessTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>excludeFromReserve</Name>
				<Source><![CDATA[
    protected NoYes excludeFromReserve(
        CustVendTrans   _custVendTrans,
        RefTableId      _refTableId,
        RefRecId        _refRecId)
    {
        RTax25DebtAmounts       debtAmounts;
        AgreementHeaderExt_RU   agreementHeader;
        NoYes                   ret;

        if (rTax25DebtModel)
        {
            debtAmounts = RTax25DebtAmounts::newModelParameters(
                dateTo,
                RTax25DebtType::Debit,
                NoYes::No,
                rTax25DebtModel.AccountingPolicy == RTax25DebtPolicy::Document,
                rTax25DebtModel.AccountingPolicy == RTax25DebtPolicy::Document,
                this.isTaxModel());

            debtAmounts.parmRefTableId(_refTableId);
            debtAmounts.parmRefRecId(_refRecId);

            ret = debtAmounts.getExclFromReserve(_custVendTrans.DefaultDimension);
        }
        else
        {
            agreementHeader = AgreementHeaderExt_RU::findByDefaultDimension(_custVendTrans.DefaultDimension);

            if (agreementHeader)
            {
                ret = this.isTaxModel() ? agreementHeader.ExcludeReserveCalcTax : agreementHeader.ExcludeReserveCalc;
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodType</Name>
				<Source><![CDATA[
    private void initPeriodType()
    {
        if (! periodType)
        {
            periodType = RTax25DebtPeriodType::newModelParameters(RTax25DebtType::Debit, regQuery.getRegType().badDebtModel());
            periodType.prepareSummator(dateTo + 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    protected boolean initRunItem()
    {
        boolean ret = super();

        this.initPeriodType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
    protected void insertRegisterFooter()
    {
        int startPos = RTax25RegType_DebtDebitInventory::debtStartPos();
        container totals = ['', dateNull(), dateNull(), NoYes::No, debt0_45Total, debt45_90Total, debt90_240Total, debtReserved, hopelessTotal, 0];

        this.initPeriodType();

        totals = conDel(totals, startPos + periodType.rowCount(), RTax25DebtModelPeriod::maxPeriodNum() - periodType.rowCount());

        regQuery.addFooterRecord(0, totals, 0, '', startCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating if the register is related to tax model.
    /// </summary>
    /// <returns>
    /// A boolean value indicating if the register is related to tax model.
    /// </returns>

    protected NoYes isTaxModel()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustVendTrans</Name>
				<Source><![CDATA[
    protected void processCustVendTrans(CustVendTrans _custVendTrans)
    {
        AmountMST                       badDeptRemain;
        DueDate                         dueDate;
        DocumentNum                     sourceDocument;
        RefTableId                      refTableId;
        RefRecId                        refRecId;
        int                             i;
        container                       value;
        CustVendTransDetails            custVendTransDetails;
        CustVendTrans                   transOffset     = _custVendTrans.data();
        CustVendSettlement              transSettlement = CustVendTransStatic::newTrans(_custVendTrans).custVendSettlement();
        LedgerTransType                 ledgerTransType = LedgerTransType::RTax25_BadDebtDebitAmortisation;

        dueDate = CustVendTrans::getDueDate_RU(_custVendTrans);

        if (dueDate > dateTo)
        return;

        custVendTransDetails = new CustVendTransDetails(_custVendTrans, dateTo);

        badDeptRemain = _custVendTrans.AmountMST - custVendTransDetails.amountMSTSettled();

        //payed debts (not written-off) should be included into inventory
        //so the reserves accounted on them are written-off
        if (! badDeptRemain)
        {
            if (_custVendTrans.Closed < modelDateFrom)
            {
                return;
            }

            select sum(SettleAmountMST) from transSettlement
            where transSettlement.TransRecId == _custVendTrans.RecId
        exists join transOffset
            where transOffset.RecId       == transSettlement.OffsetRecid  &&
                  transOffset.TransType   == ledgerTransType              &&
                  transOffset.TransDate   <= dateTo;

            if (transSettlement.SettleAmountMST)
            {
                return;
            }
        }

        [sourceDocument, refTableId, refRecId] = this.sourceDocument(_custVendTrans);

        periodType.clearAmounts();
        periodType.setAmount(dueDate, abs(badDeptRemain));

        value = [sourceDocument,
            _custVendTrans.TransDate,
            dueDate,
            this.excludeFromReserve(_custVendTrans, refTableId, refRecId)];

        for (i = 1; i <= periodType.rowCount(); i++)
        {
            value += periodType.getAmount(i);
        }

        value += 0;
        regQuery.addBodyRecord(RTax25ProfitLedgerSetup::findDefaultDimensionProfitId(_custVendTrans.DefaultDimension),
                   value,
                   refTableId,
                   refRecId,
                   strfmt('%1-"%2","%3"', _custVendTrans.TableId == tablenum(CustTrans) ? "@SYS11779" : "@SYS8079",
                                          _custVendTrans.AccountNum,
                                          _custVendTrans.Voucher),
                   0);

        progress.incCount();
        startCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected void totals(RTax25RegisterTransMap _trans)
    {
        RTax25RegisterTrans_DebtDebitInventory trans = _trans;
        debt0_45Total   += trans.Debt0_45;
        debt45_90Total  += trans.Debt45_90;
        debt90_240Total += trans.Debt90_240;
        debtReserved    += trans.DebtReserved;
        hopelessTotal   += trans.Hopeless;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>