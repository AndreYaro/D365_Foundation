<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EcoResProductVariantManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProductDimensionsValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the dimensions values to a distinct product variant.
    /// </summary>
    /// <param name="_distinctProductVariant">
    ///    The ID of a record in the <c>EcoResDistinctProductVariant</c> table.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with the dimensions values. The container contains pairs in the form of the
    ///    <c>dimensionAttributeRecordId</c> value and the <c>dimensionValueRecordId</c> value where the
    ///    <c>dimensionAttributeRecordId</c> value is the ID of a record in the
    ///    <c>EcoResProductDimensionAttribute</c> table and the <c>dimensionValueRecordId</c> value is the ID
    ///    of a record that stores the dimension value.
    /// </param>
    public static void addProductDimensionsValues(RefRecId _distinctProductVariant, container _dimensions)
    {
        int                                 dimensionIndex;
        RefRecId                            productDimensionAttribute;
        RefRecId                            dimensionValue;
        RefRecId                            productModelDimensionAttribute;

        EcoResDistinctProductVariant ecoResDistinctProductVariant = EcoResDistinctProductVariant::find(_distinctProductVariant);
        RefRecId productMaster = ecoResDistinctProductVariant.ProductMaster;

        if (!ecoResDistinctProductVariant.RecId)
        {
            throw error(EcoResDistinctProductVariant::txtNotExist());
        }

        ttsbegin;

        for (dimensionIndex = conLen(_dimensions); dimensionIndex > 0; --dimensionIndex)
        {
            [productDimensionAttribute, dimensionValue] = conPeek(_dimensions, dimensionIndex);
            if (productModelDimensionAttribute != productDimensionAttribute)
            {
                EcoResProductVariantManager::addProductDimensionValue(
                    ecoResDistinctProductVariant,
                    productDimensionAttribute,
                    dimensionValue);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a dimension value to a product variant.
    /// </summary>
    /// <param name="_ecoResDistinctProductVariant">
    ///    The ID of a record in the <c>EcoResDistinctProductVariant</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a dimension record that stores the dimension value.
    /// </param>
    private static void addProductDimensionValue(
        EcoResDistinctProductVariant    _ecoResDistinctProductVariant,
        RefRecId                        _productDimensionAttribute,
        RefRecId                        _dimensionValue)
    {
        EcoResProductDimensionAttribute     ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttribute);

        //perform validation of dimension value
        EcoResProductVariantManager::checkDimensionValue(
            _ecoResDistinctProductVariant.ProductMaster,
            _productDimensionAttribute,
            _dimensionValue,
            true);

        //create records
        InventProductDimension productDimension = InventDimension::singletonFromInventDimFieldId(ecoResProductDimensionAttribute.getInventDimFieldId());
        if (productDimension)
        {
            productDimension.createProductDimensionValue(_ecoResDistinctProductVariant, ecoResProductDimensionAttribute, _dimensionValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionsValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a product variant can be assigned the dimension values and whether the dimension
    ///    values are valid.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with the values of the dimensions.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    true to cause an exception to be thrown if the validation fails; false to return the value if the
    ///    validation fails.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The container specified by the <paramref name="_dimensions" /> parameter contains pairs in the form
    ///    of dimension attribute and dimension value record IDs. The dimension attribute record ID is the ID
    ///    of a record in the <c>EcoResProductDimensionAttribute</c> table and the dimension value record ID
    ///    is the ID of a record that stores the dimension value.
    /// </remarks>
    public static boolean checkDimensionsValues(
        RefRecId                            _productMaster,
        container                           _dimensions,
        boolean                             _throwExceptionOnFailure = false)
    {
        RefRecId    productDimensionAttribute;
        RefRecId    dimensionValue;
        int         dimensionIndex;
        int         dimensionsConLength = conLen(_dimensions);
        boolean     ret                 = true;

        for (dimensionIndex = 1; dimensionIndex <= dimensionsConLength; ++dimensionIndex)
        {
            [productDimensionAttribute, dimensionValue] = conPeek(_dimensions, dimensionIndex);
            ret = EcoResProductVariantManager::checkDimensionValue(
                _productMaster,
                productDimensionAttribute,
                dimensionValue,
                _throwExceptionOnFailure) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a product variant can be assigned a dimension value and if the dimension value
    ///    is valid.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a record in a dimension table.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    A Boolean value that indicates whether to cause an exception if the validation fails.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    public static boolean checkDimensionValue(
        RefRecId                            _productMaster,
        RefRecId                            _productDimensionAttribute,
        RefRecId                            _dimensionValue,
        boolean                             _throwExceptionOnFailure = false)
    {
        //validate parameters
        if (!EcoResProductVariantManager::validateCheckDimensionParameters(
                _productMaster,
                _productDimensionAttribute,
                _dimensionValue,
                _throwExceptionOnFailure))
        {
            return false;
        }

        //get generic product model
        EcoResProductMaster ecoResProductMaster = EcoResProductMaster::find(_productMaster);
        if (!ecoResProductMaster.RecId)
        {
            return EcoResProductVariantManager::processErrorMessage(
                EcoResProductMaster::txtNotExist(),
                _throwExceptionOnFailure);
        }

        //get product dimension group
        EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(ecoResProductMaster.RecId);
        if (!ecoResProductDimensionGroupProduct.RecId)
        {
            return EcoResProductVariantManager::processErrorMessage(
                strFmt("@SYS133836", ecoResProductMaster.productNumber()),
                _throwExceptionOnFailure);
        }

        //get product dimension attribute
        EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(_productDimensionAttribute);
        if (!ecoResProductDimensionAttribute.RecId)
        {
            return EcoResProductVariantManager::processErrorMessage(
                "@SYS134112",
                _throwExceptionOnFailure);
        }

        //get label
        str label = ecoResProductDimensionAttribute.getDimensionTableLabel();

        //perform check: dimension active, no dimension value
        FieldId dimFieldId = ecoResProductDimensionAttribute.getInventDimFieldId();
        if (EcoResProductDimGroupSetup::newDimensionGroup(ecoResProductDimensionGroupProduct.ProductDimensionGroup).getFieldSetup(dimFieldId).isActive())
        {
            if (!_dimensionValue)
            {
                return EcoResProductVariantManager::processErrorMessage(
                    strFmt("@SYS133837", label, ecoResProductMaster.productNumber()),
                    _throwExceptionOnFailure);
            }
        }
        else if (_dimensionValue) //perform check: dimension inactive, specified dimension value
        {
            return EcoResProductVariantManager::processErrorMessage(
                strFmt("@SYS133838", ecoResProductMaster.productNumber(), label),
                _throwExceptionOnFailure);
        }

        //check if dim value has been assigned to a generic product model
        return EcoResProductVariantManager::checkDimensionValueForModel(
                _productMaster,
                _productDimensionAttribute,
                _dimensionValue,
                _throwExceptionOnFailure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionValueForModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a dimension value has been assigned to a generic product model.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a record in a dimension table.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    A Boolean value that indicates whether to cause an exception if the validation fails.
    /// </param>
    /// <returns>
    ///    true if the check succeeds; otherwise, false.
    /// </returns>
    public static boolean checkDimensionValueForModel(
        RefRecId               _productMaster,
        RefRecId               _productDimensionAttribute,
        RefRecId               _dimensionValue,
        boolean                _throwExceptionOnFailure = false)
    {
        return EcoResProductMasterManager::checkExistDimensionValue(_productMaster, _productDimensionAttribute, _dimensionValue, _throwExceptionOnFailure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotExistDistinctProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for the nonexistence of a distinct product variant.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table for which the check is performed.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with the values of the dimension.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    A Boolean value that indicates whether to cause an exception if the validation fails.
    /// </param>
    /// <returns>
    ///    true if a distinct product variant does not exist; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The container specified by the <paramref name="_dimensions" /> parameter contains pairs in the form
    ///    of dimension attribute and dimension value record IDs. The dimension attribute record ID is the ID
    ///    of a record in the <c>EcoResProductDimensionAttribute</c> table and the dimension value record ID
    ///    is the ID of a record that stores the dimension value.
    /// </remarks>
    public static boolean checkNotExistDistinctProductVariant(
        RefRecId    _productMaster,
        container   _dimensions,
        boolean     _throwExceptionOnFailure = false)
    {
        if (EcoResProductVariantManager::existDistinctProductVariant(_productMaster, _dimensions))
        {
            return EcoResProductVariantManager::processErrorMessage(
                "@SYS133839",
                _throwExceptionOnFailure);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotExistDistinctProductVariantNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for the nonexistence of a distinct product variant by product number.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table for which the check is performed.
    /// </param>
    /// <param name="_productNumber">
    ///    The product number to check for uniqueness.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    A Boolean value that indicates whether to cause an exception if the validation fails; optional
    /// </param>
    /// <returns>
    ///    true if a distinct product variant does not exist; otherwise, false.
    /// </returns>
    public static boolean checkNotExistDistinctProductVariantNumber(
        RefRecId    _productMaster,
        EcoResProductDisplayProductNumber _productNumber,
        boolean     _throwExceptionOnFailure = false)
    {
        if (EcoResProduct::findByDisplayProductNumber(_productNumber))
        {
            if (EcoResProductMaster::find(_productMaster).nomenclature(EcoResNomenclatureRole::Id))
            {
                return EcoResProductVariantManager::processErrorMessage(
                    strFmt("@SCM:EcoResProductVariantNomenclatureNotUniqueNumber", _productNumber),
                    _throwExceptionOnFailure);
            }
            else
            {
                return EcoResProductVariantManager::processErrorMessage(
                    strFmt("@SYS331036", _productNumber),
                    _throwExceptionOnFailure);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates a product variant based on the specified parameters.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of the product master on which to base the variant.
    /// </param>
    /// <param name="_searchName">
    ///    The search name of the new product variant.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with dimension attributes and values for the product variant.
    /// </param>
    /// <param name="_productNumber">
    ///    The display product number, optional.
    /// </param>
    /// <returns>
    ///    The record ID of the product variant that was found or created.
    /// </returns>
    public static EcoResDistinctProductVariantRecId findOrCreateProductVariant(
        EcoResProductMasterRecId            _productMaster,
        EcoResProductSearchName             _searchName,
        container                           _dimensions,
        EcoResProductDisplayProductNumber   _productNumber = '')
    {
        EcoResDistinctProductVariantRecId variantRecId = EcoResProductVariantManager::findDistinctProductVariant(_productMaster, _dimensions).RecId;

        if (!variantRecId)
        {
            variantRecId = EcoResProductVariantManager::createProductVariant(
                                _productMaster,
                                _searchName,
                                _dimensions,
                                _productNumber);
        }

        return variantRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a product variant based on the specified parameters.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of the product master on which to base the variant.
    /// </param>
    /// <param name="_searchName">
    ///    The search name of the new product variant.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with dimension attributes and values for the product variant.
    /// </param>
    /// <param name="_productNumber">
    ///    The display product number, optional.
    /// </param>
    /// <returns>
    ///    The ID of the created product variant.
    /// </returns>
    public static RefRecId createProductVariant(
        RefRecId                            _productMaster,
        EcoResProductSearchName             _searchName,
        container                           _dimensions,
        EcoResProductDisplayProductNumber   _productNumber = '')
    {
        EcoResProductMaster ecoResProductMaster = EcoResProductMaster::find(_productMaster);

        if (!ecoResProductMaster.RecId)
        {
            return EcoResProductVariantManager::processErrorMessage(
                            EcoResProductMaster::txtNotExist(),
                            true);
        }

        // build DisplayProductNumber
        EcoResProductDisplayProductNumber displayProductNumber = _productNumber ? _productNumber : EcoResProductNumberBuilderVariant::buildFromProductMasterAndDimensions(
                                                                                                    ecoResProductMaster,
                                                                                                    _dimensions);
        EcoResProductName displayProductName = EcoResProductNumberBuilderVariant::buildNameFromProductMasterAndDimensions(
                                                                                                    ecoResProductMaster,
                                                                                                    _dimensions);

        EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct = EcoResProductDimensionGroupProduct::findByProduct(ecoResProductMaster.RecId);

        //check if all active dimensions are passed
        EcoResProductVariantManager::validateActiveDimensions(displayProductNumber, ecoResProductDimensionGroupProduct.ProductDimensionGroup, _dimensions);

        //check for variant with the same dimension values
        EcoResProductVariantManager::checkNotExistDistinctProductVariant(
            _productMaster,
            _dimensions,
            true);

        EcoResProductVariantManager::checkNotExistDistinctProductVariantNumber(
            _productMaster,
            displayProductNumber,
            true);

        ttsbegin;
       
        //insert product variant
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
              
        ecoResDistinctProductVariant.DisplayProductNumber  = displayProductNumber;

        ecoResDistinctProductVariant = EcoResProductVariantManager::initFromProductMaster(ecoResDistinctProductVariant, ecoResProductMaster);

        EcoResNomenclatureRecId nomenclatureNameRecId = ecoResProductMaster.nomenclature(EcoResNomenclatureRole::Name);
        if (nomenclatureNameRecId)
        {
            ecoResDistinctProductVariant.setSearchName(displayProductName);
        }
        else
        {
            ecoResDistinctProductVariant.setSearchName(_searchName);
        }
        
        ecoResDistinctProductVariant.insert();
            
        RefRecId ecoResDistinctProductVariantRecId = ecoResDistinctProductVariant.RecId;

        EcoResProductVariantManager::createProductVariantTranslation(nomenclatureNameRecId,
                                                                     ecoResProductMaster,
                                                                     ecoResDistinctProductVariantRecId,
                                                                     displayProductName);
        
        //insert dimensions
        EcoResProductVariantManager::addProductDimensionsValues(
                                         ecoResDistinctProductVariantRecId,
                                         _dimensions);
        ttscommit;

        return ecoResDistinctProductVariantRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProductMaster</Name>
				<Source><![CDATA[
    protected static EcoResDistinctProductVariant initFromProductMaster(EcoResDistinctProductVariant _productVariant, EcoResProductMaster _productMaster)
    {
        _productVariant.ProductType = _productMaster.ProductType;
        _productVariant.ProductMaster = _productMaster.RecId;
        _productVariant.PdsCWProduct = _productMaster.PdsCWProduct;

        return _productVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductVariantTranslation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>EcoResProductTranslation</c> records for product variant.
    /// </summary>
    /// <param name = "_nomenclatureNameRecId">
    /// The nomenclature RecId.
    /// </param>
    /// <param name = "_ecoResProductMaster">
    /// The product master from which the translation is created.
    /// </param>
    /// <param name = "_ecoResDistinctProductVariantRecId">
    /// The product variant RecId.
    /// </param>
    /// <param name = "_displayProductName">
    /// The product variant name.
    /// </param>
    [Replaceable]
    protected static void createProductVariantTranslation(EcoResNomenclatureRecId _nomenclatureNameRecId, 
                                                        EcoResProductMaster _ecoResProductMaster, 
                                                        RefRecId _ecoResDistinctProductVariantRecId,
                                                        EcoResProductName _displayProductName)
    {
        EcoResDistinctProductVariant ecoResDistinctProductVariant;
        EcoResProductTranslation  ecoResProductTranslation_Variant, ecoResProductTranslation;

        if (_nomenclatureNameRecId)
        {
            insert_recordset ecoResProductTranslation_Variant
                 (Product, LanguageId, Description, Name)
                select _ecoResDistinctProductVariantRecId, LanguageId, Description, _displayProductName
                    from ecoResProductTranslation
                    where ecoResProductTranslation.Product == _ecoResProductMaster.RecId;
        }
        else
        {
            insert_recordset ecoResProductTranslation_Variant
                 (Product, LanguageId, Description, Name)
                select _ecoResDistinctProductVariantRecId, LanguageId, Description, Name
                    from ecoResProductTranslation
                    where ecoResProductTranslation.Product == _ecoResProductMaster.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductVariantCustomTranslationDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles creation of custom translations for the method <c>createProductVariant</c>.
    /// </summary>
    /// <param name = "_ecoResProductMaster">
    ///     The product master from which the translation is created.
    /// </param>
    /// <param name = "_nomenclatureRecId">
    ///     The nomenclature RecId.
    /// </param>
    /// <param name = "_result">
    ///     The result, indicating whether a custom translation was added.
    /// </param>
    static delegate void createProductVariantCustomTranslationDelegate(
        EcoResProductMaster         _ecoResProductMaster,
        EcoResNomenclatureRecId     _nomenclatureRecId,
        EventHandlerAcceptResult    _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDistinctProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for existence of a distinct product variant.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table for which the check is performed.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with the values of the dimensions.
    /// </param>
    /// <returns>
    ///    true if a distinct product variant exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The container contains pairs in the form of <c>dimensionAttributeRecordId</c> and
    ///    <c>dimensionValueRecordId</c> values. The <c>dimensionAttributeRecordId</c> value is the ID of a
    ///    record in the <c>EcoResProductDimensionAttribute</c> table and the <c>dimensionValueRecordId</c>
    ///    value is the ID of a record that stores the dimension value.
    /// </remarks>
    public static boolean existDistinctProductVariant(RefRecId _productMaster, container _dimensions)
    {
        return (EcoResProductVariantManager::findDistinctProductVariant(_productMaster, _dimensions).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDistinctProductVariant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the distinct product variant that matches the specified dimensions.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table for which the check is performed.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with the dimensions values.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>EcoResDistinctProductVariant</c> table if the combination exists; otherwise, an
    ///    empty buffer.
    /// </returns>
    /// <remarks>
    ///    The container specified by the <paramref name="_dimensions" /> parameter contains pairs of
    ///    <c>dimensionAttributeRecordId</c> and <c>dimensionValueRecordId</c> values. The
    ///    <c>dimensionAttributeRecordId</c> value is the ID of a record in the
    ///    <c>EcoResProductDimensionAttribute</c> table and the <c>dimensionValueRecordId</c> value is the ID
    ///    of a record that stores the dimension value.
    /// </remarks>
    public static EcoResDistinctProductVariant findDistinctProductVariant(
        RefRecId    _productMaster,
        container   _dimensions,
        boolean     _forUpdate = false)
    {
        EcoResDistinctProductVariant        ecoResDistinctProductVariant;
        QueryBuildDataSource                qbdsVariant;
        int                                 dimensionIndex;
        RefRecId                            productDimensionAttribute;
        RefRecId                            dimensionValue;

        void addDimensionDataSource(
            TableId     _subtype,
            RefRecId    _productDimensionAttribute,
            FieldId     _dimensionFieldId,
            RefRecId    _dimension)
        {
            QueryBuildDataSource    qbds;

            qbds = qbdsVariant.addDataSource(_subtype);
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);
            qbds.addRange(fieldNum(EcoResProductVariantDimensionValue, ProductDimensionAttribute)).value(queryValue(_productDimensionAttribute));
            qbds.addRange(_dimensionFieldId).value(queryValue(_dimension));
        }

        Query query = new Query();

        // RLS is implicitly enabled when executing dynamically-built queries. RLS adds a filter to only return records
        // for the sub types that the user has access to. In this place we don't want a filtered result, so we need to disable RLS.
        query.recordLevelSecurity(false);

        qbdsVariant = query.addDataSource(tableNum(EcoResDistinctProductVariant));
        qbdsVariant.firstOnly(true);
        qbdsVariant.update(_forUpdate);

        //filter by ProductMaster value
        qbdsVariant.addRange(fieldNum(EcoResDistinctProductVariant, ProductMaster)).value(queryValue(_productMaster));

        //add data sources for dimensions
        //product variant will be joined with all passed dimensions to check if it exists
        for (dimensionIndex = conLen(_dimensions); dimensionIndex > 0; --dimensionIndex)
        {
            [productDimensionAttribute, dimensionValue] = conPeek(_dimensions, dimensionIndex);
            EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(productDimensionAttribute);
            TableId variantDimensionTableId = ecoResProductDimensionAttribute.getVariantDimensionTableId();

            addDimensionDataSource(
                variantDimensionTableId,
                productDimensionAttribute,
                EcoResProductVariantDimensionValue::dimensionForeignKeyFieldId(variantDimensionTableId),
                dimensionValue);
        }

        QueryRun queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            ecoResDistinctProductVariant = queryRun.get(tableNum(EcoResDistinctProductVariant));
        }

        return ecoResDistinctProductVariant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays an error message or causes an exception with the error message.
    /// </summary>
    /// <param name="_message">
    ///    A message text.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    A Boolean value that specifies whether to cause an exception or return a value if the validation
    ///    fails.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_throwExceptionOnFailure" /> parameter is true.
    /// </exception>
    public static boolean processErrorMessage(
        str     _message,
        boolean _throwExceptionOnFailure)
    {
        if (_throwExceptionOnFailure)
        {
            throw error(_message);
        }
        return checkFailed(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActiveDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified product dimensions are valid product dimensions.
    /// </summary>
    /// <param name="_productNumber">
    ///    The product number of the product to validate the dimensions against.
    /// </param>
    /// <param name="_productDimensionGroup">
    ///    The dimension group to validate the dimensions against.
    /// </param>
    /// <param name="_dimensions">
    ///    A container with the dimension attributes and values to validate.
    /// </param>
    public static void validateActiveDimensions(
        EcoResProductNumber                 _productNumber,
        RefRecId                            _productDimensionGroup,
        container                           _dimensions)
    {
        RefRecId                        productDimensionAttributeRecId;
        RefRecId                        dimension;
        FieldId                         dimFieldId;
        Map                             passedDimensionsAndValues = new Map(Types::Integer, Types::Int64);
        int                             loopIndex;

        //loop all the dimensions passed in to get the corresponding fieldIds
        int dimensionsLength = conLen(_dimensions);
        for (loopIndex = 1; loopIndex <= dimensionsLength; ++loopIndex)
        {
            [productDimensionAttributeRecId, dimension] = conPeek(_dimensions, loopIndex);
            dimFieldId = EcoResProductDimensionAttribute::find(productDimensionAttributeRecId).getInventDimFieldId();

            if (!dimFieldId)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            passedDimensionsAndValues.insert(dimFieldId,dimension);
        }

        List activeProductDimFields = EcoResProductDimGroupSetup::newDimensionGroup(_productDimensionGroup).activeDimensionFields();
        ListEnumerator enumerator = activeProductDimFields.getEnumerator();

        //loop all the active product dimensions and verify that the passed in dimensions and values are ok
        while (enumerator.moveNext())
        {
            dimFieldId = enumerator.current();

            //fail if dimensions is not passed in, or an active dimension is passed but has no value
            if (!passedDimensionsAndValues.exists(dimFieldId) || !passedDimensionsAndValues.lookup(dimFieldId))
            {
                EcoResProductDimensionAttribute ecoResProductDimensionAttribute = EcoResProductDimensionAttribute::find(
                    EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(dimFieldId));
                str dimensionTablelabel = ecoResProductDimensionAttribute.getDimensionTableLabel();
                throw error(strFmt("@SYS135739", dimensionTablelabel, _productNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCheckDimensionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the parameters that are passed to the <c>checkColorDimensionValue</c>,
    ///    <c>checkConfigurationDimensionValue</c>, or <c>checkSizeDimensionValue</c> methods.
    /// </summary>
    /// <param name="_productMaster">
    ///    The ID of a record in the <c>EcoResProductMaster</c> table.
    /// </param>
    /// <param name="_productDimensionAttribute">
    ///    The ID of a record in the <c>EcoResProductDimensionAttribute</c> table.
    /// </param>
    /// <param name="_dimensionValue">
    ///    The ID of a dimension record that stores the dimension value.
    /// </param>
    /// <param name="_throwExceptionOnFailure">
    ///    A Boolean value that indicates whether to cause an exception if the validation fails.
    /// </param>
    /// <returns>
    ///    true if the validation succeeds; otherwise, false.
    /// </returns>
    private static boolean validateCheckDimensionParameters(
        RefRecId               _productMaster,
        RefRecId               _productDimensionAttribute,
        RefRecId               _dimensionValue,
        boolean                _throwExceptionOnFailure)
    {
        if (!_productMaster)
        {
            return EcoResProductVariantManager::processErrorMessage("@SYS133841", _throwExceptionOnFailure);
        }

        if (!_productDimensionAttribute)
        {
            return EcoResProductVariantManager::processErrorMessage("@SYS133842", _throwExceptionOnFailure);
        }

        if (!_dimensionValue)
        {
            return EcoResProductVariantManager::processErrorMessage("@SYS133843", _throwExceptionOnFailure);
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>