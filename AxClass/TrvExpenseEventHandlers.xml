<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvExpenseEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TrvAllowanceRate_onInitializingRecord</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(TrvAllowanceRate), DataEventType::InitializingRecord)]
    public static void TrvAllowanceRate_onInitializingRecord(Common _sender, DataEventArgs _e)
    {
        TrvAllowanceRate allowanceRate = _sender as TrvAllowanceRate;
        TrvParameters   trvParameters = TrvParameters::find();
        TrvPerDiems     trvPerDiems;

        allowanceRate.HotelReduction = trvParameters.HotelReductionDef;
        allowanceRate.MealReduction = trvParameters.MealReductionDef;
        allowanceRate.OtherReduction = trvParameters.OtherReductionDef;
        allowanceRate.FromQty = trvParameters.MinHours;
        allowanceRate.ToQty = 24;

        select firstonly DeductBreakf, DeductLunch, DeductDinner, DeductOneMeal, DeductTwoMeals, DeductThreeOrMoreMeals
            from trvPerDiems
            where trvPerDiems.RecId == allowanceRate.PerDiemRecId;

        if (trvPerDiems.RecId != 0)
        {
            allowanceRate.DeductBreakf = trvPerDiems.DeductBreakf;
            allowanceRate.DeductLunch = trvPerDiems.DeductLunch;
            allowanceRate.DeductDinner = trvPerDiems.DeductDinner;
            allowanceRate.DeductOneMeal = trvPerDiems.DeductOneMeal;
            allowanceRate.DeductTwoMeals = trvPerDiems.DeductTwoMeals;
            allowanceRate.DeductThreeOrMoreMeals = trvPerDiems.DeductThreeOrMoreMeals;
        }
        else
        {
            allowanceRate.DeductBreakf = trvParameters.DeductBreakf;
            allowanceRate.DeductLunch = trvParameters.DeductLunch;
            allowanceRate.DeductDinner = trvParameters.DeductDinner;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvPerDiems_onInitializingRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize per diem values from <c>TrvParameters</c>
    /// </summary>
    /// <param name="sender">the record buffer to initialize</param>
    /// <param name="e">the event args, not used</param>
    [DataEventHandler(tableStr(TrvPerDiems), DataEventType::InitializingRecord)]
    public static void TrvPerDiems_onInitializingRecord(Common _sender, DataEventArgs _e)
    {
        TrvPerDiems     perDiems = _sender as TrvPerDiems;
        TrvParameters   trvParameters = TrvParameters::find();

        switch (trvParameters.MealReductionType)
        {
            case TrvMealReductionType::MealTypePerDay:
                perDiems.DeductBreakf = trvParameters.DeductBreakf;
                perDiems.DeductLunch = trvParameters.DeductLunch;
                perDiems.DeductDinner = trvParameters.DeductDinner;
                break;

            // Case: TrvMealReductionType::MealsPerDay (1, 2, or 3+)
            // Nothing to do because there is no data in TrvParameters that can be use as default.
            // Case: TrvMealReductionType::MealTypePerTrip (Breakfast, Lunch, Dinner)
            // Nothing to do because per diem calculation will be based on the trip, not per day.
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvPayMethod_onValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that payment methods referenced in an unposted record or credit card expense cannot be deleted.
    /// </summary>
    /// <param name="_sender">The <c>TrvPayMethod</c> record to be deleted.</param>
    /// <param name="_e">The event arguments. The argument ValidateResult is used to communicate the validation results.</param>
    [DataEventHandler(tableStr(TrvPayMethod), DataEventType::ValidatingDelete)]
    public static void TrvPayMethod_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        TrvPayMethod        payMethod = _sender as TrvPayMethod;
        ValidateEventArgs   validateEventArgs = _e as ValidateEventArgs;
        boolean             ret = true;
        TrvExpTrans         trvExpTrans;
        TrvPBSMaindata      trvPBSMaindata;
        CompanyInfo         companyInfo = CompanyInfo::find();

        select firstonly RecId from trvExpTrans
            where trvExpTrans.PayMethod == payMethod.PayMethod &&
                trvExpTrans.LegalEntity == companyInfo.RecId &&
                trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger;

        if (trvExpTrans.RecId)
        {
            ret = checkFailed("@SYS341906");
        }

        if (ret)
        {
            select firstonly RecId from trvPBSMaindata
                where trvPBSMaindata.Paymethod == payMethod.PayMethod
                notexists join trvExpTrans where trvExpTrans.pbsRecId == trvPBSMaindata.RecId &&
                trvExpTrans.ApprovalStatus == TrvAppStatus::Ledger;

            if (trvPBSMaindata.RecId)
            {
                ret = checkFailed("@SYS341925");
            }
        }

        if (!ret)
        {
            validateEventArgs.parmValidateResult(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvCostTypeRates_onValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that no record exists in table <c>TrvCostTypeRates</c> referencing the
    /// record being deleted.
    /// </summary>
    /// <param name="_sender">The <c>TrvCostTypeRates</c> record to be deleted.</param>
    /// <param name="_e">The event arguments. The argument ValidateResult is used to communicate the validation results.</param>
    [DataEventHandler(tableStr(TrvCostTypeRates), DataEventType::ValidatingDelete)]
    public static void TrvCostTypeRates_onValidatingDelete(Common _sender, DataEventArgs _e)
    {
        boolean         ret = true;
        TrvCostTypeRates costTypeRates = _sender as TrvCostTypeRates;
        ValidateEventArgs   validateEventArgs = _e as ValidateEventArgs;
        TrvExpTrans     expTrans;

        select firstOnly recid from expTrans
                where expTrans.ExpType == TrvExpType::Transport
                && expTrans.VehicleType == costTypeRates.VehicleType
                && expTrans.ApprovalStatus != TrvAppStatus::Ledger
                && expTrans.LegalEntity == CompanyInfo::current();

        if (expTrans)
        {
            ret = checkFailed(strfmt("@SYS128564", "@SYS101480", "@SYS101487"));
        }

        if (!ret)
        {
            validateEventArgs.parmValidateResult(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvPayMethod_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that if the payment method is bank, the offset account is an active bank account.
    /// </summary>
    /// <param name="_sender">The <c>TrvPayMethod</c> record to be written.</param>
    /// <param name="_e">The event arguments. The argument ValidateResult is used to communicate the validation results.</param>
    [DataEventHandler(tableStr(TrvPayMethod), DataEventType::ValidatingWrite)]
    public static void TrvPayMethod_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        boolean ret = true;
        TrvPayMethod        payMethod = _sender as TrvPayMethod;
        ValidateEventArgs   validateEventArgs = _e as ValidateEventArgs;

        if (payMethod.PostMethod == TrvPostMethod::Bank)
        {
            ret = BankAccountTable::checkIsActive(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(payMethod.OffsetLedgerDimension));
        }

        validateEventArgs.parmValidateResult(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvCostType_Post_validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>TrvCostType</c>.<c>ExpType</c> matches the Expense
    /// <c>SharedCategoryRoles</c>.<c>ExpenseType</c>.
    /// </summary>
    /// <param name="_args">The event arguments</param>
    [PostHandlerFor(tableStr(TrvCostType), tableMethodStr(TrvCostType, validateField))]
    public static void TrvCostType_Post_validateField(XppPrePostArgs _args)
    {
        boolean		ok;
        TrvCostType	costType = _args.getThis();
        FieldId     fieldId = _args.getArgNum(1);

        if (fieldId == fieldNum(TrvCostType, ExpType))
        {
            ok = _args.getReturnValue();
            if (costType.ExpType != TrvSharedCategory_Extension::getExpType(costType.CostType))
            {
                ok = checkFailed("@SYS190119") && ok;
            }
            _args.setReturnValue(ok);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvParameters_Post_validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>TrvParameters</c> table
    /// </summary>
    /// <param name="args">The event arguments</param>
    [PostHandlerFor(tableStr(TrvParameters), tableMethodStr(TrvParameters, validateField))]
    public static void TrvParameters_Post_validateField(XppPrePostArgs _args)
    {
        boolean		            ret = _args.getReturnValue();
        TrvParameters	        parameters = _args.getThis();
        FieldId                 fieldId = _args.getArgNum(1);
        TrvExpTable             trvExpTable;
        TrvExpTrans             trvExpTrans;
        TaxParameters           taxParameters;
        WorkflowVersionTable    workflowVersionTable;

        switch (fieldId)
        {
            case(fieldNum(TrvParameters, PersonalPaidBy)):
                select count(RecId) from trvExpTable join trvExpTrans where
                    trvExpTable.LegalEntity == CompanyInfo::current() &&
                    trvExpTable.ExpNumber == trvExpTrans.ExpNumber &&
                    (
                    trvExpTable.ApprovalStatus == TrvAppStatus::Create ||
                    trvExpTable.ApprovalStatus == TrvAppStatus::Submitted ||
                    trvExpTable.ApprovalStatus == TrvAppStatus::Approved ||
                    trvExpTable.ApprovalStatus == TrvAppStatus::Pending ||
                    trvExpTable.ApprovalStatus == TrvAppStatus::Returned
                    ) &&
                    trvExpTrans.ExpType == TrvExpType::Personal;

                if (trvExpTable.RecId > 0)
                {
                    ret = ret && checkFailed(strfmt("@SYS126495", trvExpTable.RecId));
                }

                break;

            case (fieldnum(TrvParameters, EnableTaxRecovery)):
                if (parameters.EnableTaxRecovery)
                {
                    taxParameters = TaxParameters::find();
                    if (taxParameters.PurchTaxOnOperations == NoYes::Yes)
                    {
                        ret = ret && checkFailed("@SYS322352");
                    }

                    workflowVersionTable = Workflow::findWorkflowConfigToActivateForType(workflowtypestr(TrvTaxTemplate), -1, tablenum(TrvExpenseTaxRecovery));

                    if (!workflowVersionTable)
                    {
                        ret = ret && checkFailed("@SYS138536");
                    }
                }

                break;
        }

        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvParameters_Post_initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TrvParameters</c> table
    /// </summary>
    /// <param name="args">The event arguments</param>
    [PostHandlerFor(tableStr(TrvParameters), tableMethodStr(TrvParameters, initValue))]
    public static void TrvParameters_Post_initValue(XppPrePostArgs _args)
    {
        TrvParameters	parameters = _args.getThis();
        TransactTxt     transactTxt;

        parameters.TaxIncluded = NoYes::Yes;

        select forupdate transactTxt where transactTxt.TransactionType == LedgerTransTxt::Expense;
        if (!transactTxt)
        {
            transactTxt.TransactionType = LedgerTransTxt::Expense;
            transactTxt.LanguageId = 'user';
            transactTxt.Txt = "@SYS101341" + " %4 %5";
            transactTxt.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvValidatePayment_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the payment method is permitted for a personal expense.
    /// </summary>
    /// <param name="_sender">The <c>TrvValidatePayment</c> record to be validated.</param>
    /// <param name="_e">The event arguments. The argument ValidateResult is used to communicate the validation results.</param>
    public static void TrvValidatePayment_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        boolean ret;
        TrvValidatePayment        validatePayment = _sender as TrvValidatePayment;
        ValidateEventArgs   validateEventArgs = _e as ValidateEventArgs;

        ret = TrvCostType::checkPaymentMethodForPersonalExpense(validatePayment.CostType, validatePayment.PayMethod);

        validateEventArgs.parmValidateResult(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpGuest_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// When updating the guests on an expense transaction, validate for policy violations.
    /// </summary>
    /// <param name="_sender">The record change being verified</param>
    /// <param name="_e">The event arguments, not used</param>
    [DataEventHandler(tableStr(TrvExpGuest), DataEventType::Updating)]
    public static void TrvExpGuest_onUpdating(Common _sender, DataEventArgs _e)
    {
        TrvExpTransGuest    trvExpTransGuest;
        TrvExpGuest         expGuest = _sender as TrvExpGuest;
        TrvParameters       trvParameters = TrvParameters::find();

        if (trvParameters.WhenToEvaluatePolicy == TrvEvaluateExpensePolicies::OnLineSave)
        {
            select firstonly TrvExpTrans from trvExpTransGuest where trvExpTransGuest.TrvExpGuest == expGuest.RecId;
            TrvPolicyEvalEngine::evaluateViolationsForLine(trvExpTransGuest.TrvExpTrans, SysPolicyTypeEnum::TrvExpensePolicy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpTransGuest_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    /// When updating the guests on an expense transaction, validate for policy violations.
    /// </summary>
    /// <param name="_sender">The updated record being verified</param>
    /// <param name="_e">The event arguments, not used</param>
    [DataEventHandler(tableStr(TrvExpTransGuest), DataEventType::Updating)]
    public static void TrvExpTransGuest_onUpdating(Common _sender, DataEventArgs _e)
    {
        TrvExpTransGuest    expGuest = _sender as TrvExpTransGuest;

        TrvPolicyEvalEngine::evaluateExpenseLineOnSave(expGuest.TrvExpTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpTransGuest_onDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// When deleting the guests on an expense transaction, validate for policy violations.
    /// </summary>
    /// <param name="_sender">The deleted record being verified</param>
    /// <param name="_e">The event arguments, not used</param>
    [DataEventHandler(tableStr(TrvExpTransGuest), DataEventType::Deleting)]
    public static void TrvExpTransGuest_onDeleting(Common _sender, DataEventArgs _e)
    {
        TrvExpTransGuest    expGuest = _sender as TrvExpTransGuest;

        TrvPolicyEvalEngine::evaluateExpenseLineOnSave(expGuest.TrvExpTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpTransGuest_onInserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// When creating the guests on an expense transaction, validate for policy violations.
    /// </summary>
    /// <param name="_sender">The inserted record being verified</param>
    /// <param name="_e">The event arguments, not used</param>
    [DataEventHandler(tableStr(TrvExpTransGuest), DataEventType::Inserting)]
    public static void TrvExpTransGuest_onInserting(Common _sender, DataEventArgs _e)
    {
        TrvExpTransGuest    expGuest = _sender as TrvExpTransGuest;

        TrvPolicyEvalEngine::evaluateExpenseLineOnSave(expGuest.TrvExpTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpPaymentDetails_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to update payment fields on the expense report on payment details record update.
    /// </summary>
    /// <param name="sender">
    /// a <c>TrvExpPaymentDetails</c> record.
    /// </param>
    /// <param name="e">
    /// Args object.
    /// </param>
    [DataEventHandler(tableStr(TrvExpPaymentDetails), DataEventType::Updated)]
    public static void TrvExpPaymentDetails_onUpdated(Common sender, DataEventArgs e)
    {
        TrvExpPaymentDetails    expensePayment = sender as TrvExpPaymentDetails;
        TrvExpenseEventHandlers::updateExpenseReport(expensePayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TrvExpPaymentDetails_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to update payment fields on the expense report on payment details record insert.
    /// </summary>
    /// <param name="sender">
    /// a <c>TrvExpPaymentDetails</c> record.
    /// </param>
    /// <param name="e">
    /// Args object.
    /// </param>
    [DataEventHandler(tableStr(TrvExpPaymentDetails), DataEventType::Inserted)]
    public static void TrvExpPaymentDetails_onInserted(Common sender, DataEventArgs e)
    {
        TrvExpPaymentDetails    expensePayment = sender as TrvExpPaymentDetails;
        TrvExpenseEventHandlers::updateExpenseReport(expensePayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseReport</Name>
				<Source><![CDATA[
    private static void updateExpenseReport(TrvExpPaymentDetails _expensePayment)
    {
        TrvExpTable             expenseReport;

        if (_expensePayment.PaymentVoucher != '' || _expensePayment.PaymentDate != dateNull())
        {
            // only need to update Payment fields once, use where clause to figure that out
            select firstonly forupdate PaymentDate, PaymentVoucher, InvoiceId from  expenseReport
                where expenseReport.RecId == _expensePayment.TrvExpTable
                    && (expenseReport.PaymentVoucher == ''
                    || (expenseReport.PaymentVoucher != _expensePayment.PaymentVoucher
                        && expenseReport.PaymentVoucher != "@SYS342615"));

            // Update payment fields on expense report when there is a single voucher against it,
            // or set to <multiple>
            if (expenseReport)
            {
                if (expenseReport.PaymentVoucher == '')
                {
                    // single Voucher so far, set fields on header accordingly
                    expenseReport.PaymentDate = _expensePayment.PaymentDate;
                    expenseReport.PaymentVoucher = _expensePayment.PaymentVoucher;
                }
                else
                {
                    // Initialize from payment details
                    expenseReport.PaymentVoucher = "@SYS342615";
                    expenseReport.PaymentDate = dateNull();
                }
                expenseReport.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>