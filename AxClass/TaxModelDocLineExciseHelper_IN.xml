<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineExciseHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class to support the implementation of document line domain object supporting Exise Tax.
/// </summary>
public class TaxModelDocLineExciseHelper_IN extends TaxModelDocLineHelper_IN
{
    TaxModelExciseTaxable_IN taxModelExciseTaxable;

    container exciseNumSequences;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().getExciseDirectSettlement();
        }
        else
        {
            return transTaxInformation.ExciseDirectSettlement;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise tax number sequence.
    /// </summary>
    /// <returns>
    /// The number sequence generated.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getExciseNumberSeq()
    {
        return exciseNumSequences;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseRecordType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseRecordType_IN</c> of the document line map.
    /// </summary>
    /// <returns>
    /// The <c>ExciseRecordType_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ExciseRecordType_IN getExciseRecordType()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().getExciseRecordType();
        }
        else
        {
            return transTaxInformation.ExciseRecordType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the excise reference tax model doc line.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxModelExciseTaxable_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxModelExciseTaxable_IN getExciseReferenceTaxModelDocLine()
    {
        return taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelExciseTaxable_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getExciseTariffCodeRefRecId()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().getExciseTariffCodeRefRecId();
        }
        else
        {
            return transTaxInformation.ExciseTariffCodes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTariffCodesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseTariffCodes_IN</c> of this document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseTariffCodes_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ExciseTariffCodes_IN getExciseTariffCodesTable()
    {
        return ExciseTariffCodes_IN::find(taxModelExciseTaxable.getExciseTariffCodeRefRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountType_IN getExciseTaxAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret;

        switch (taxModelTaxable.getTaxDirection())
        {
            case TaxDirection::IncomingTax :
                switch (taxModelExciseTaxable.getExciseDirectSettlement())
                {
                    case DirectSettlement_IN::None  :
                        if (taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23D)
                        {
                            ret = TaxAccountType_IN::ExciseRG23DRecoverableAccount;
                        }
                        else
                        {
                            ret = TaxAccountType_IN::ExciseRecoverableAccount;
                        }
                        break;
                    case DirectSettlement_IN::PLA   :
                        ret = TaxAccountType_IN::ExcisePLAAccount;
                        break;
                    case DirectSettlement_IN::RG23A :
                    case DirectSettlement_IN::RG23C :
                        ret = TaxAccountType_IN::ExciseRecoverableAccount;
                        break;
                }
                break;
            case TaxDirection::OutgoingTax :
                switch (taxModelExciseTaxable.getExciseDirectSettlement())
                {
                    case DirectSettlement_IN::None  :
                        if (taxModelExciseTaxable.getExciseRecordType() == ExciseRecordType_IN::RG23D)
                        {
                            ret = TaxAccountType_IN::ExciseRG23DPayableAccount;
                        }
                        else
                        {
                            ret = TaxAccountType_IN::ExcisePayableAccount;
                        }
                        break;
                    case DirectSettlement_IN::PLA   :
                        ret = TaxAccountType_IN::ExcisePLAAccount;
                        break;
                    case DirectSettlement_IN::RG23A :
                    case DirectSettlement_IN::RG23C :
                        ret = TaxAccountType_IN::ExciseRecoverableAccount;
                        break;
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAccountType_IN getExciseTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        return TaxAccountType_IN::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Excise Registration Number
    /// </summary>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber_IN getExciseTaxRegistrationNumber()
    {
        return this.getTaxRegistrationNumber(TaxType_IN::Excise);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTaxRegistrationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of Excise Registration
    /// </summary>
    /// <returns>
    /// The <c>RefRecId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getExciseTaxRegistrationRefRecId()
    {
        return this.getTaxRegistrationNumberRefRecId(TaxType_IN::Excise);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ExciseType_IN</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ExciseType_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ExciseType_IN getExciseType()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().getExciseType();
        }
        else
        {
            return transTaxInformation.ExciseType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxRegistrationNumber_IN</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>TaxRegistrationNumber_IN</c> of the tax registration
    /// </returns>
    public TaxRegistrationNumber_IN getTaxRegistrationNumber(
        TaxType_IN      _taxType)
    {
        TaxRegistrationNumber_IN ret;

        ret = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, _taxType).RegistrationNumber;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumberRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the tax registration based on the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given <c>TaxType_IN</c>
    /// </param>
    /// <returns>
    /// The <c>RecId</c> of the tax registration
    /// </returns>
    public RefRecId getTaxRegistrationNumberRefRecId(
        TaxType_IN      _taxType)
    {
        RefRecId ret;

        ret = TransTaxInformationHelper::getTaxRegistrationNumbers(transTaxInformation, _taxType).RecId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseCENVATCreditAvailed</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is CENVAT CreditA vailed or not.
    /// </summary>
    /// <returns>
    /// True if the document line is CENVAT Credit Availed;otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isExciseCENVATCreditAvailed()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().isExciseCENVATCreditAvailed();
        }
        else
        {
            return transTaxInformation.ExciseCENVATCreditAvailed;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYesId isExciseConsignment()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().isExciseConsignment();
        }
        else
        {
            return transTaxInformation.ExciseConsignment;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction should register DSA.
    /// </summary>
    /// <returns>
    /// True if the document line should register DSA; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isExicseDSA()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getExciseReferenceTaxModelDocLine().isExicseDSA();
        }
        else
        {
            return transTaxInformation.ExciseDSA;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseSSI</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is avaialbe for SSI.
    /// </summary>
    /// <returns>
    /// True if the document line is SSI applied; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isExicseSSI()
    {
        VendTable vendTable;
        TaxInformationVendTable_IN taxInformationVendTable;
        boolean   ret;

        vendTable = taxModelTaxable.getVendTable();
        taxInformationVendTable = vendTable.getTaxInformationVendTable_IN();

        if (vendTable)
        {
            if (taxInformationVendTable.IsSSI)
            {
                TaxModelTaxable_IN taxModelTaxableIN = taxModelTaxable as TaxModelTaxable_IN;
                if (!taxInformationVendTable.SSIValidityDate
                    || taxModelTaxableIN.getTaxRateBasingDate(TaxType_IN::Excise) <= taxInformationVendTable.SSIValidityDate)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the excise tax number sequence.
    /// </summary>
    /// <param name="_nums">
    /// The sequence numbers
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setExciseNumberSeq(container _nums)
    {
        exciseNumSequences = _nums;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxModelExciseTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance of <c>TaxModelExciseTaxable</c>
    /// </summary>
    /// <param name="_taxModelExciseTaxable">
    /// The given instance of <c>TaxModelExciseTaxable_IN</c>
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTaxModelExciseTaxable(TaxModelExciseTaxable_IN _taxModelExciseTaxable)
    {
        taxModelExciseTaxable = _taxModelExciseTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostAmountRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise amount register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise amount register; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes shouldPostAmountRegister()
    {
        TaxOnItem taxOnItem;

        return taxModelTaxable.shouldPostTaxTrans()
            && taxModelExciseTaxable.getExciseTaxAccountType(taxOnItem) != TaxAccountType_IN::ExciseExpenseAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostQuantityRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if excise quantity register should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post excise quantity register; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes shouldPostQuantityRegister()
    {
        TaxOnItem taxOnItem;
        return
            taxModelTaxable.shouldPostTaxTrans()
                && taxModelTaxable.getItemId() != ''
                && taxModelExciseTaxable.getExciseTaxAccountType(taxOnItem) != TaxAccountType_IN::ExciseExpenseAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipExciseTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should the Excise Tax be skipped on this transaction line?
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c> on the transaction line.
    /// </param>
    /// <returns>
    /// True, it should be skipped; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldSkipExciseTax(TaxOnItem _taxOnItem)
    {
        boolean ret;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            ret = this.getExciseReferenceTaxModelDocLine().shouldSkipExciseTax(_taxOnItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is scrap or not.
    /// </summary>
    /// <returns>
    /// True if the document line is scrap;otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isScrap()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>