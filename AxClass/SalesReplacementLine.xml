<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReplacementLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesReplacementLine</c> is responsible for creating the replacement lines for each entry in the return replacement table that exist for a sales
/// or return order line.
/// </summary>
class SalesReplacementLine
{
    SalesLine   salesLine;
    boolean     replacementOrderOpen;
    boolean     mcrCallCenterEnabled;
    NoYes       mcrOrderCompletionEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesReplacementLine construct()
    {
        return new SalesReplacementLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    public static SalesReplacementLine newFromSalesLine(SalesLine _salesLine)
    {
        SalesReplacementLine salesReplacementLine = SalesReplacementLine::construct();
        salesReplacementLine.initialize(_salesLine);
        return salesReplacementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(SalesLine _salesLine)
    {
        salesLine = _salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacement</Name>
				<Source><![CDATA[
    public void createReplacement()
    {
        SalesTable              salesTableUpdate;
        AmountCur               prevReplacementTotal;

        SalesTable salesTable = salesLine.salesTable();
        SalesTable replacementOrder = SalesTable::find(salesTable.ReturnReplacementId , true);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            mcrCallCenterEnabled = true;
            mcrOrderCompletionEnabled = RetailMCRChannelTable::mcrEnableOrderCompletion(replacementOrder);
        }

        ttsbegin;
        ReturnReplaceItemRef replaceItemRef;
        while select forupdate replaceItemRef
            where replaceItemRef.OrigSalesId        == salesLine.SalesId
                && replaceItemRef.OrigSalesLineNum  == salesLine.LineNum
                && replaceItemRef.ReplaceSalesId    == ''
        {
            if (!replacementOrder)
            {

                // create a new sales order
                replacementOrder = this.createReplacementOrder(salesTable);
                // update original sales order with replacement order Id
                salesTableUpdate = SalesTable::find(salesTable.SalesId, true);
                
                this.updateOriginalSalesOrder(salesTableUpdate, replacementOrder);
            }
            // If the replacement order is not open, then open it.
            else if (!replacementOrderOpen
                && mcrCallCenterEnabled
                && mcrOrderCompletionEnabled)
            {
                salesTableUpdate = SalesTable::find(salesTable.SalesId, true);

                MCRSalesOrderTotals salesOrderTotalsReplace = new MCRSalesOrderTotals(replacementOrder);
                prevReplacementTotal = salesOrderTotalsReplace.getTotalOrder();

                this.openMCRReplacementOrder(replacementOrder);
            }

            // create replacement line
            SalesLine replacementLine = this.initAndCreateReplacementLine(replacementOrder, replaceItemRef, salesTable);

            this.updateReplacementLineTax(replacementOrder, replaceItemRef, replacementLine);

            this.updateReturnItemReplacementReference(replaceItemRef, replacementOrder, replacementLine);
        }
        if (this.shouldAdjustPayment(salesTableUpdate))
        {
            this.adjustPayments(salesTableUpdate, replacementOrder, prevReplacementTotal);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAdjustPayment</Name>
				<Source><![CDATA[
    protected boolean shouldAdjustPayment(SalesTable _salesTable)
    {
        return replacementOrderOpen
            && mcrCallCenterEnabled
            && mcrOrderCompletionEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacementOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new replacement order based on the specified sales order.
    /// </summary>
    /// <param name = "_salesTable">The sales table with the original sales order.</param>
    /// <returns>The replacement sales order.</returns>
    protected SalesTable createReplacementOrder(SalesTable _salesTable)
    {
        // create a new sales order
        SalesTable replacementOrder = SalesTable::createSalesTable_Replacement(_salesTable);

        return replacementOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOriginalSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the original sales order after the replacement order is created.
    /// </summary>
    /// <param name = "_originalOrder">The original sales order.</param>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    protected void updateOriginalSalesOrder(SalesTable _originalOrder, SalesTable _replacementOrder)
    {
        _originalOrder.ReturnReplacementId = _replacementOrder.SalesId;

        if (mcrCallCenterEnabled && 
            mcrOrderCompletionEnabled)
        {
            MCRReturnSalesTable mcrReturnSalesTable = this.updateReturnSalesTable(_originalOrder, _replacementOrder);
            _originalOrder.mcrPackMCRReturnSalesTable(mcrReturnSalesTable);
            replacementOrderOpen = true;
        }

        _originalOrder.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the retail return sales table record related to the original sales order.
    /// </summary>
    /// <param name = "_originalOrder">The original sales order.</param>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    /// <returns>The retail return sales table record related to the original sales order.</returns>
    protected MCRReturnSalesTable updateReturnSalesTable(SalesTable _originalOrder, SalesTable _replacementOrder)
    {
        MCRReturnSalesTable mcrReturnSalesTableUpdate = _originalOrder.mcrReturnSalesTable();
        mcrReturnSalesTableUpdate.ApplyCreditToExchange = NoYes::Yes;
        if (MCRCustTable::findByCustAccount(_replacementOrder.InvoiceAccount).AllowOnAccount)
        {
            mcrReturnSalesTableUpdate.AdvanceExchange = MCRAdvanceExchange::ReleaseExchangeOrder;
        }
        else
        {
            mcrReturnSalesTableUpdate.AdvanceExchange = MCRAdvanceExchange::DoNotRelease;
        }

        return mcrReturnSalesTableUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMCRReplacementOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales status of the replacement order to be an open order.
    /// </summary>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    protected void openMCRReplacementOrder(SalesTable _replacementOrder)
    {
        _replacementOrder.mcrOpenSalesOrder();

        replacementOrderOpen = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndCreateReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and creates the sales replacement line.
    /// </summary>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    /// <param name = "_replaceItemRef">The return item replacement reference that is used to create the replacement line.</param>
    /// <param name = "_salesTable">The original sales order.</param>
    /// <returns>The created replacement line.</returns>
    protected SalesLine initAndCreateReplacementLine(SalesTable _replacementOrder, ReturnReplaceItemRef _replaceItemRef, SalesTable _salesTable)
    {
        SalesLine replacementLine = this.initReplacementLine(_replacementOrder, _replaceItemRef);

        SalesLineCreateLineParameters salesLineCreateLineParameters = this.instantiateCreateReplacementLineParameters(_salesTable);

        this.createReplacementLine(replacementLine, salesLineCreateLineParameters);

        return replacementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales replacement line.
    /// </summary>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    /// <param name = "_replaceItemRef">The return item replacement reference that is used to create the replacement line.</param>
    /// <returns>The initialized replacement line.</returns>
    protected SalesLine initReplacementLine(SalesTable _replacementOrder, ReturnReplaceItemRef _replaceItemRef)
    {
        SalesLine replacementLine;
        replacementLine.clear();
        replacementLine.initFromSalesTable(_replacementOrder);
        replacementLine.ItemId      = _replaceItemRef.ItemId;
        replacementLine.SalesQty    = _replaceItemRef.ReturnReplaceQty;

        replacementLine.PdsCWQty    = _replaceItemRef.PdsCWReplaceQty;

        replacementLine.initLineFromItemOrCategory();

        replacementLine.setInventDimId(_replaceItemRef.InventDimId);

        //Check if alternative item setup exist.
        SalesAlternativeItem salesAlternativeItem = SalesAlternativeItem::newAlternativeItem(replacementLine);
        if (salesAlternativeItem.existAlternativeItem())
        {
            replacementLine.setAlternativeItem(salesAlternativeItem, true);
        }

        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            this.kittingInitReplacementLine_delegate(_replaceItemRef, replacementLine);
        }

        this.initDeliveryDetailsFromOrigSalesLine(replacementLine);

        return replacementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDeliveryDetailsFromOrigSalesLine</Name>
				<Source><![CDATA[
    private void initDeliveryDetailsFromOrigSalesLine(SalesLine _replacementLine)
    {
        SalesLine origSalesLine = SalesLine::findInventTransId(salesLine.InventTransIdReturn);

        if (origSalesLine)
        {
            _replacementLine.DeliveryPostalAddress = origSalesLine.DeliveryPostalAddress;
            _replacementLine.DeliveryName = origSalesLine.DeliveryName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateCreateReplacementLineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the parameters used to create the replacement line.
    /// </summary>
    /// <param name = "_salesTable">The original sales order.</param>
    /// <returns>The <c>SalesLineCreateLineParameters</c> that is used to create the replacement line.</returns>
    protected SalesLineCreateLineParameters instantiateCreateReplacementLineParameters(SalesTable _salesTable)
    {
        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
        salesLineCreateLineParameters.validation = true;
        salesLineCreateLineParameters.searchPrice = true;
        salesLineCreateLineParameters.checkReservation = _salesTable.Reservation==ItemReservation::Automatic;
        salesLineCreateLineParameters.skipCreditLimitCheck = true;
        salesLineCreateLineParameters.searchAgreementLine = true;

        return salesLineCreateLineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReplacementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sales replacement line.
    /// </summary>
    /// <param name = "_replacementLine">The replacemenet line to be created.</param>
    /// <param name = "salesLineCreateLineParameters">The <c>SalesLineCreateLineParameters</c> that is used to create the replacement line.</param>
    protected void createReplacementLine(SalesLine _replacementLine, SalesLineCreateLineParameters salesLineCreateLineParameters)
    {
        _replacementLine.createLineFromParameters(salesLineCreateLineParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReplacementLineTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tax for the replacement line.
    /// </summary>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    /// <param name = "_replaceItemRef">The return item replacement reference that is used to create the replacement line.</param>
    /// <param name = "_replacementLine">The replacemenet sales line.</param>
    protected void updateReplacementLineTax(SalesTable _replacementOrder, ReturnReplaceItemRef _replaceItemRef, SalesLine _replacementLine)
    {
        #ISOCountryRegionCodes

        if (TaxParameters::find().Excise_IN
                || TaxParameters::find().vat_in
                || TaxWithholdParameters_IN::checkTaxParameters())
        {
            // Get the related SalesLine
            SalesLine salesLineRef;
            select firstOnly RecId from salesLineRef
                    where salesLineRef.SalesId  == _replaceItemRef.OrigSalesId
                        && salesLineRef.LineNum == _replaceItemRef.OrigSalesLineNum;

            if (salesLineRef.RecId)
            {
                TransTaxInformationHelper::copyTransTaxInformation(salesLineRef, _replacementLine);
            }
        }
                
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(_replacementOrder.TableId, _replacementOrder.RecId, _replacementLine.TableId, _replacementLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnItemReplacementReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the return item replacement reference after the replacement line is created.
    /// </summary>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    /// <param name = "_replaceItemRef">The return item replacement reference that is used to create the replacement line.</param>
    /// <param name = "_replacementLine">The replacemenet sales line.</param>
    protected void updateReturnItemReplacementReference(ReturnReplaceItemRef _replaceItemRef, SalesTable _replacementOrder, SalesLine _replacementLine)
    {
        _replaceItemRef.ReplaceSalesId       = _replacementOrder.SalesId;
        _replaceItemRef.ReplaceSalesLineNum  = _replacementLine.LineNum;
        _replaceItemRef.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the replacement order payment.
    /// </summary>
    /// <param name = "_originalOrder">The original sales order.</param>
    /// <param name = "_replacementOrder">The replacemenet sales order.</param>
    /// <param name = "_prevReplacementTotal">The total amount before the replacement.</param>
    protected void adjustPayments(SalesTable _originalOrder, SalesTable _replacementOrder, AmountCur _prevReplacementTotal)
    {
        MCRSalesOrderTotals salesOrderTotalsReplace = new MCRSalesOrderTotals(_replacementOrder);
        AmountCur currReplacementTotal = salesOrderTotalsReplace.getTotalOrder();
        AmountCur creditNeededForReplacement = currReplacementTotal - _prevReplacementTotal;

        MCRCustPaymTable custPaymTableReturn;
        select sum(Amount) from custPaymTableReturn
                where  custPaymTableReturn.RefTableId == _originalOrder.TableId
                    && custPaymTableReturn.RefRecId == _originalOrder.RecId
                    && custPaymTableReturn.CustPaymType == MCRCustPaymType::OnAccount;

        MCRCustPaymTable custPaymTableRepl;
        select sum(Amount) from custPaymTableRepl
                where  custPaymTableRepl.RefTableId == _replacementOrder.TableId
                    && custPaymTableRepl.RefRecId == _replacementOrder.RecId
                    && custPaymTableRepl.CustPaymType == MCRCustPaymType::OnAccount;

        AmountCur creditAvailFromRet = (abs(custPaymTableReturn.Amount) > custPaymTableRepl.Amount) ?
                            custPaymTableReturn.Amount + custPaymTableRepl.Amount : 0;

        if (abs(creditAvailFromRet) >= creditNeededForReplacement)
        {
            MCRReturnSalesOrderRefund::createExchangeCredit(creditNeededForReplacement + custPaymTableRepl.Amount,
                                                                _replacementOrder.SalesId);

            creditAvailFromRet = 0;
        }
        else
        {
            AmountCur adjustedAmount;
            // Adjust return payments to pay for exchange and apply return credit to the
            // replacement order.
            while select forupdate custPaymTableReturn
                    where   custPaymTableReturn.RefTableId == _originalOrder.TableId
                        &&  custPaymTableReturn.RefRecId == _originalOrder.RecId
                        &&  custPaymTableReturn.Amount != custPaymTableReturn.PostedAmount
                        &&  custPaymTableReturn.CustPaymType != MCRCustPaymType::OnAccount
            {
                if (abs(creditAvailFromRet + adjustedAmount + custPaymTableReturn.Amount - custPaymTableReturn.PostedAmount)
                        >  creditNeededForReplacement)
                {
                    custPaymTableReturn.Amount += creditNeededForReplacement + adjustedAmount + creditAvailFromRet;
                    adjustedAmount = -creditNeededForReplacement;
                }
                else
                {
                    adjustedAmount += custPaymTableReturn.Amount - custPaymTableReturn.PostedAmount;
                    custPaymTableReturn.Amount  = custPaymTableReturn.PostedAmount;
                }

                if (custPaymTableReturn.Amount)
                {
                    custPaymTableReturn.update();
                }
                else // if the adjusted payment goes to 0 delete it
                {
                    custPaymTableReturn.delete();
                }

                if (adjustedAmount == creditNeededForReplacement) break;
            }

            if (adjustedAmount)
            {
                SalesTable salesTableOrig = SalesTable::find(_originalOrder.mcrReturnSalesTable().OriginalSalesId);
                MCRReturnSalesOrderRefund returnSalesOrderRefund = new MCRReturnSalesOrderRefund(salesTableOrig, _originalOrder);
                returnSalesOrderRefund.createCredit(adjustedAmount, NoYes::No, _replacementOrder.SalesId);
                creditAvailFromRet = 0;

                MCRCustPaymTotals custPaymTotals = MCRCustPaymTotals::construct(_originalOrder.TableId, _originalOrder.RecId);
                custPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays);
            }
            else if (creditAvailFromRet)
            {
                MCRReturnSalesOrderRefund::createExchangeCredit(-creditAvailFromRet + custPaymTableRepl.Amount,
                                                                _replacementOrder.SalesId);
                creditAvailFromRet = 0;
            }
        }

        SalesTableType_ReturnItem  salesTableType_ReturnItem = SalesTableType::construct(_originalOrder);

        // if payment balances then submit order otherwise it will be
        // put on payment balance hold
        if (!salesTableType_ReturnItem.mcrSetExchangeHolds())
        {
            MCREndOrder::orderRecap(_replacementOrder);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingInitReplacementLine_delegate</Name>
				<Source><![CDATA[
    delegate void kittingInitReplacementLine_delegate(ReturnReplaceItemRef replaceItemRef, SalesLine replacementLine)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>