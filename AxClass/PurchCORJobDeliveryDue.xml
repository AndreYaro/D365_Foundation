<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCORJobDeliveryDue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchCORJobDeliveryDue</c> class iterates through the <c>PurchLine</c> table, selecting by
///    imminent delivery dates, and submits the selected <c>PurchLine</c> records to the delivery due in
///    xx days workflow.
/// </summary>
/// <remarks>
///    Only the <c>PurchLines</c> records with a related COR policy are submitted to the workflow.
/// </remarks>
class PurchCORJobDeliveryDue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a delivery date range to the query and submits the selected <c>PurchLine</c> records to the
    /// workflow.
    /// </summary>
    /// <param name="_dataContract">
    /// An instance of the <c>PurchCORJobDeliveryDueContract</c> class.
    /// </param>
    public  void submitToWorkflow(PurchCORJobDeliveryDueContract _dataContract)
    {
        PurchLine purchLine;
        QueryRun  queryRun;
        QueryBuildDataSource qbdsPurchTable;

        // Decode the container from the string until query is supported as a data contract
        container queryContainer = SysOperationHelper::base64Decode(_dataContract.parmQuery());
        if (!queryContainer)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        queryRun = new QueryRun(new Query(queryContainer));

        ttsbegin;
        queryRun.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, DeliveryDate)).value(queryRange("", DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())+ _dataContract.parmDaysBeforeDeliveryDate()));
        queryRun.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, WfDeliveryDueState)).value(queryValue(TradeWorkflowState::NotSubmitted));
        queryRun.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, IsDeleted)).value(queryValue(NoYes::No));

        qbdsPurchTable = queryRun.query().dataSourceTable(tableNum(PurchLine)).addDataSource(tableNum(PurchTable));
        qbdsPurchTable.addLink(fieldNum(PurchLine, PurchId), fieldNum(PurchTable, PurchId));
        qbdsPurchTable.addRange(fieldNum(PurchTable, DocumentState)).value(queryValue(VersioningDocumentState::Confirmed));
        queryRun.allowCrossCompany(_dataContract.parmAllowQueryCrossCompany());

        while (queryRun.next())
        {
            purchLine = queryRun.get(tableNum(PurchLine));

            if ((purchLine.RecId) &&
               (DirPersonUserEx::worker2UserId(purchLine.Requester) != "") &&
               (PurchCORPolicyTable::findPolicy(purchLine).RecId != 0))
            {
                changecompany(purchLine.
                company()
                )
                {
                    PurchCORDeliveryDueWorkflow::activatePurchaseWorkflow(purchLine, strFmt("@SYS303446", _dataContract.parmDaysBeforeDeliveryDate()));
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
