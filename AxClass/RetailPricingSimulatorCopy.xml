<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingSimulatorCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles copying of transactions in pricing simulator.
/// </summary>
internal static class RetailPricingSimulatorCopy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies records from selected simulation to destination simulation.
    /// </summary>
    /// <param name = "_sourceTransRecord">User selected simulation record from RetailPricingSimulatorSalesTransaction table.</param>
    /// <param name = "_destinationTransRecId">RecId of destination simulation.</param>
    /// <param name = "_loadItemsAndStoreOnly">True, if only item and channel are to be copied.</param>
    internal static void copyTransaction(
        RetailPricingSimulatorSalesTransaction _sourceTransRecord,
        RecId _destinationTransRecId,
        boolean _loadItemsAndStoreOnly)
    {
        RetailPricingSimulatorSalesTransaction destinationRecord;

        ttsBegin;

        select firstOnly forupdate ChannelCurrency, CustAccount, Description,
            IncludeDisabledDiscounts, LineItemCount, RetailChannelTable,
            SimulationDateTime, SimulationName, TotalDiscount, TotalMargin, TransactionTotal
                from destinationRecord
                where destinationRecord.RecId == _destinationTransRecId;

        // Update channel details for simulation.
        destinationRecord.ChannelCurrency = _sourceTransRecord.ChannelCurrency;
        destinationRecord.RetailChannelTable = _sourceTransRecord.RetailChannelTable;

        // Update other header details only if user has selected to do so.
        if (!_loadItemsAndStoreOnly)
        {
            destinationRecord.Description = _sourceTransRecord.Description;
            destinationRecord.SimulationDateTime = _sourceTransRecord.SimulationDateTime;
            destinationRecord.CustAccount = _sourceTransRecord.CustAccount;
            destinationRecord.IncludeDisabledDiscounts = _sourceTransRecord.IncludeDisabledDiscounts;
            destinationRecord.SalesAgreementId = _sourceTransRecord.SalesAgreementId;
            destinationRecord.PricingDiagnostics = _sourceTransRecord.PricingDiagnostics;

            // Transaction summary
            destinationRecord.TotalMargin = _sourceTransRecord.TotalMargin;
            destinationRecord.TransactionTotal = _sourceTransRecord.TransactionTotal;
            destinationRecord.LineItemCount = _sourceTransRecord.LineItemCount;
            destinationRecord.TotalDiscount = _sourceTransRecord.TotalDiscount;
        }

        // Update header details from datasource buffer
        destinationRecord.update();

        // Delete any existing records from FK related tables to PricingSimulatorSalesTransaction
        RetailPricingSimulatorCopy::deleteCurrentData(
            _destinationTransRecId, _loadItemsAndStoreOnly);

        // Copy PricingSimulatorSalesLine records from the source simulation to destination simulation.
        RetailPricingSimulatorCopy::copySalesLines(
            _sourceTransRecord.RecId, _destinationTransRecId,  _loadItemsAndStoreOnly);

        // Copy other entites (affiliations / loyalty tiers/ catalogs / coupon codes / price groups),
        // if user has not specified to copy item and channel only.
        if (!_loadItemsAndStoreOnly)
        {
            // Copy affiliations and loyalty tiers records.
            RetailPricingSimulatorCopy::copyAffiliationsAndLoyalties(
                _sourceTransRecord.RecId, _destinationTransRecId);

            // Copy catalog records.
            RetailPricingSimulatorCopy::copyCatalogs(
                _sourceTransRecord.RecId, _destinationTransRecId);

            // Copy coupon codes records.
            RetailPricingSimulatorCopy::copyCouponCodes(
                _sourceTransRecord.RecId, _destinationTransRecId);

            // Copy price groups.
            RetailPricingSimulatorCopy::copyPriceGroups(
                _sourceTransRecord.RecId, _destinationTransRecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySalesLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies pricing simulator sales lines records from source to destination simulation.
    /// </summary>
    /// <param name = "_sourceTransRecId">RecId of the source record.</param>
    /// <param name = "_destinationTransRecId">RecId of the target record.</param>
    /// <param name = "_loadItemsAndStoreOnly">True, if user has selected to copy item and channels only.</param>
    private static void copySalesLines(
        RecId _sourceTransRecId,
        RecId _destinationTransRecId,
        boolean _loadItemsAndStoreOnly)
    {
        RetailPricingSimulatorSalesLine sourceSalesLine, destSalesline;

        ttsBegin;

        // Insert line details without sales and pricing calculations
        insert_recordset destSalesline(DisplayProductNumber, Product, ProductName, Variant, DisplayProductVariantNumber, InventDimId,
                UOM, SalesLineNum, OriginalPrice, RetailPricingSimulatorSalesTransaction, Quantity)
        select DisplayProductNumber, Product, ProductName, Variant, DisplayProductVariantNumber, InventDimId,
            UoM, SalesLineNum, OriginalPrice, _destinationTransRecId, Quantity
            from sourceSalesLine
                where sourceSalesLine.RetailPricingSimulatorSalesTransaction == _sourceTransRecId;

        // If user has not selected to copy items and channel only, update prices and discount details as well on copied lines.
        if (!_loadItemsAndStoreOnly)
        {
            update_recordset destSalesline
                setting
                    Margin = sourceSalesLine.Margin,
                    OfferName = sourceSalesLine.OfferName,
                    SalesPrice = sourceSalesLine.SalesPrice,
                    DiscountAmount = sourceSalesLine.DiscountAmount,
                    DiscPct = sourceSalesLine.DiscPct
                where destSalesline.RetailPricingSimulatorSalesTransaction == _destinationTransRecId
                join Margin, OfferName, SalesPrice, DiscountAmount, DiscPct, RetailPricingSimulatorSalesTransaction, SalesLineNum from sourceSalesLine
                    where sourceSalesLine.RetailPricingSimulatorSalesTransaction == _sourceTransRecId &&
                        sourceSalesLine.SalesLineNum == destSalesline.SalesLineNum;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAffiliationsAndLoyalties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies pricing simulator affliations and loyalty tiers records from source to destination simulation.
    /// </summary>
    /// <param name = "_sourceTransRecId">RecId of the source record.</param>
    /// <param name = "_destinationTransRecId">RecId of the destination record.</param>
    private static void copyAffiliationsAndLoyalties(
        RecId _sourceTransRecId,
        RecId _destinationTransRecId)
    {
        RetailPricingSimulatorAffiliation sourceAffiliation, destAffiliations;

        ttsBegin;

        insert_recordset destAffiliations(AffiliationType, IsManullyAdded, RetailPricingSimulatorSalesTransaction,
            RetailAffiliation, RetailLoyaltyTier)
        select AffiliationType, IsManullyAdded, _destinationTransRecId, RetailAffiliation, RetailLoyaltyTier
            from sourceAffiliation
            where sourceAffiliation.RetailPricingSimulatorSalesTransaction == _sourceTransRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCatalogs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies pricing simulator catalog records from source to destination simulation.
    /// </summary>
    /// <param name = "_sourceTransRecId">RecId of the source record.</param>
    /// <param name = "_destinationTransRecId">RecId of the destination record.</param>
    private static void copyCatalogs(
        RecId _sourceTransRecId,
        RecId _destinationTransRecId)
    {
        RetailPricingSimulatorCatalog sourceCatalog, destCatalog;

        ttsBegin;

        insert_recordset destCatalog(Catalog, RetailPricingSimulatorSalesTransaction)
            select Catalog, _destinationTransRecId
                from sourceCatalog
                where sourceCatalog.RetailPricingSimulatorSalesTransaction == _sourceTransRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCouponCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies pricing simulator coupon code records from source to destination simulation.
    /// </summary>
    /// <param name = "_sourceTransactionRecId">RecId of the source record.</param>
    /// <param name = "_destinationTransactionRecId">RecId of the destination record.</param>
    private static void copyCouponCodes(
        RecId _sourceTransRecId,
        RecId _destinationTransRecId)
    {
        RetailPricingSimulatorDiscountCode sourceDiscountCode, destDiscountCode;

        ttsBegin;

        insert_recordset destDiscountCode(RetailDiscountCode, RetailPricingSimulatorSalesTransaction)
            select RetailDiscountCode, _destinationTransRecId
                from sourceDiscountCode
                where sourceDiscountCode.RetailPricingSimulatorSalesTransaction == _sourceTransRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPriceGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies pricing simulator price group records from source to destination simulation.
    /// </summary>
    /// <param name = "_sourceTransactionRecId">RecId of the source record.</param>
    /// <param name = "_destinationTransactionRecId">RecId of the destination record.</param>
    private static void copyPriceGroups(
        RecId _sourceTransRecId,
        RecId _destinationTransRecId)
    {
        RetailPricingSimulatorPriceGroup sourcePriceGroup, destPriceGroup;

        ttsBegin;

        insert_recordset destPriceGroup(RetailDiscountPriceGroup, RetailPricingSimulatorSalesTransaction)
            select RetailDiscountPriceGroup, _destinationTransRecId
                from sourcePriceGroup
                where sourcePriceGroup.RetailPricingSimulatorSalesTransaction == _sourceTransRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCurrentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any existing records from tables related to PricingSimulatorSalesTransaction, before copying new records.
    /// </summary>
    /// <param name = "_transactionId">RecId of the PricingSimulatorSalesTransaction table's record.</param>
    /// <param name = "_loadItemsAndStoreOnly">True, if only items and channel are to be copied.</param>
    private static void deleteCurrentData(
        RecId _transactionId,
        boolean _loadItemsAndStoreOnly)
    {
        RetailPricingSimulatorSalesLine salesLines;
        RetailPricingSimulatorCatalog catalogs;
        RetailPricingSimulatorAffiliation affiliations;
        RetailPricingSimulatorDiscountCode couponCode;
        RetailPricingSimulatorPriceGroup priceGroup; 

        ttsBegin;

        // Delete pricing simulator sales line records.
        delete_from salesLines
            where salesLines.RetailPricingSimulatorSalesTransaction == _transactionId;

        // If, user has not selected to copy items and channel only, delete other table's records as well.
        if (!_loadItemsAndStoreOnly)
        {
            // Delete pricing simulator catalogs records.
            delete_from catalogs
                where catalogs.RetailPricingSimulatorSalesTransaction == _transactionId;

            // Delete pricing simulator affiliation records.
            delete_from affiliations
                where affiliations.RetailPricingSimulatorSalesTransaction == _transactionId;

            // Delete pricing simulator coupon codes records.
            delete_from couponCode
                where couponCode.RetailPricingSimulatorSalesTransaction == _transactionId;

            // Delete pricing simulator price groups.
            delete_from priceGroup
                where priceGroup.RetailPricingSimulatorSalesTransaction == _transactionId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>