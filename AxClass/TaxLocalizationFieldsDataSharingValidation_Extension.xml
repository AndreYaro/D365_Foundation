<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxLocalizationFieldsDataSharingValidation_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(SysDataSharingValidation))]
public static class TaxLocalizationFieldsDataSharingValidation_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateAdditionalPolicyConstraints</Name>
				<Source><![CDATA[
    public static boolean validateAdditionalPolicyConstraints(SysDataSharingPolicyRecId _policyRecId)
    {
        boolean canEnable = next validateAdditionalPolicyConstraints(_policyRecId);

        if (TaxLocalizationDataSharingValidationFlight::instance().isEnabled())
        {
            SysDataSharingOrganization dataSharingOrganization;
            Set policyCountryRegionSet = new Set(Types::String);
            while select DataSharingCompany from dataSharingOrganization where dataSharingOrganization.DataSharingPolicy == _policyRecId
            {
                policyCountryRegionSet.add(SysCountryRegionCode::countryInfo(dataSharingOrganization.DataSharingCompany));
            }

            SysDataSharingPolicy dataSharingPolicy = SysDataSharingPolicy::find(_policyRecId);
            if (dataSharingPolicy.MasterCompany)
            {
                policyCountryRegionSet.add(SysCountryRegionCode::countryInfo(dataSharingPolicy.MasterCompany));
            }

            var supportedTaxTables = SysDataSharingValidation::toBeValidatedTableList();
            for (int i = 1; i <= conLen(supportedTaxTables); ++i)
            {
                str tableName = conPeek(supportedTaxTables, i);
                if (!SysDataSharingRule::existsTable(_policyRecId, tableName))
                {
                    continue;
                }

                Map localizationFields = SysDataSharingValidation::getLocalizationFields(tableName);
                MapEnumerator localizationFieldEnumerator = localizationFields.getEnumerator();
                while (localizationFieldEnumerator.moveNext())
                {
                    str localizationFieldName = localizationFieldEnumerator.currentKey();
                    if (!SysDataSharingValidation::isFieldShared(_policyRecId, tableName, localizationFieldName))
                    {
                        continue;
                    }

                    container localizationFieldCountryRegions = localizationFieldEnumerator.currentValue();

                    SetIterator policyCountryRegionIterator = new SetIterator(policyCountryRegionSet);
                    boolean visited = false;
                    boolean policyCountryRegionInFieldCountryRegion = false;
                    while (policyCountryRegionIterator.more())
                    {
                        str currentPolicyCountryRegion = policyCountryRegionIterator.value();
                        boolean currentCodeInFieldCode = conFind(localizationFieldCountryRegions, currentPolicyCountryRegion);
                        if (!visited)
                        {
                            policyCountryRegionInFieldCountryRegion = currentCodeInFieldCode;
                            visited = true;
                        }
                        else
                        {
                            if (policyCountryRegionInFieldCountryRegion != currentCodeInFieldCode)
                            {
                                return checkFailed(strFmt("@ApplicationSuite_SysSharing:DataSharingPolicyFieldCountryRegionNotCompatibleWarning", tableName, localizationFieldName));
                            }
                        }

                        policyCountryRegionIterator.next();
                    }
                }
            }
        }

        return canEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldShared</Name>
				<Source><![CDATA[
    private static boolean isFieldShared(SysDataSharingPolicyRecId _policyRecId, TableName _tableName, FieldName _fieldName)
    {
        SysDataSharingTableField dataSharingTableField;
        select firstonly RecId from dataSharingTableField
            where dataSharingTableField.DataSharingPolicy == _policyRecId
                && dataSharingTableField.TableName == _tableName
                && dataSharingTableField.FieldName == _fieldName
                && dataSharingTableField.IsShared == NoYes::Yes;

        return dataSharingTableField.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalizationFields</Name>
				<Source><![CDATA[
    private static Map getLocalizationFields(TableName _tableName)
    {
        Map localizationFields = new Map(Types::String, Types::Container);
        DictTable dictTable = new DictTable(tableName2Id(_tableName));
        for (int i = 1; i <= dictTable.fieldCnt(); i++)
        {
            DictField field = new DictField(dictTable.id(), dictTable.fieldCnt2Id(i));
            if (field.isSystem())
            {
                continue;
            }

            System.Object[] countryRegionCodes = field.getCountryRegionCodes();
            if (countryRegionCodes.get_Length() == 0)
            {
                continue;
            }

            var name = field.name();
            localizationFields.add(name, countryRegionCodes);
        }

        return localizationFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toBeValidatedTableList</Name>
				<Source><![CDATA[
    private static container toBeValidatedTableList()
    {
        return [
            tablestr(TaxItemGroupHeading), 
            tableStr(TaxGroupHeading), 
            tablestr(TaxParameters), 
            tablestr(TaxAuthorityAddress), 
            tableStr(TaxPeriodHead), 
            tableStr(TaxAuthorityAddressRegistration),
            tableStr(TaxWithholdGroupHeading)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>