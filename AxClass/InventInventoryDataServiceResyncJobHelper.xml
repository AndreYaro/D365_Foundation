<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceResyncJobHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceResyncJobHelper
{
    public const int MaxSleepCount = 2 * 4 * 60; // MaxSleepCount * HeartbeatIntervalInMilliSeconds = 2 hours.
    public const int MaxRetryCount = 10;
    public const int HeartbeatIntervalInMilliSeconds = 15 * 1000; // 15s

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postResyncJob</Name>
				<Source><![CDATA[
    public static boolean postResyncJob()
    {
        int sleepCount = 0;
        InventInventoryDataServiceJobInitiateResponse jobInitiateResponse;
        InventInventoryDataServiceJobProgressResponse jobProgressResponse;
        InventInventoryDataServiceOngoingJobQueryResponse ongoingJobQueryResponse;
        InventInstrumentationLogger logger = InventInstrumentationLogger::CreateLogger(classStr(InventInventoryDataServiceResyncJobHelper));

        ttsbegin;
        InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Running, '');
        ttscommit;

        str currentJobId = '';
 
        var inventoryServiceClient = new InventoryServiceClient(false);

        try
        {
            ongoingJobQueryResponse = inventoryServiceClient.getOngoingResyncJob();
        }
        catch
        {
            ttsbegin;
            InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Failed, "@SCM:InventoryServiceFailedtoGetOngoingResyncJobErrorMessage");
            ttscommit;
            logger.logError("Failed to get ongoing resync job to Inventory Visibility add-in.");
            throw error("@SCM:InventoryServiceFailedtoGetOngoingResyncJobErrorMessage");
        }

        if (ongoingJobQueryResponse.parmIsOngoingJobExist())
        {
            currentJobId = ongoingJobQueryResponse.parmJobId();
            logger.logInformation(strFmt("There is an ongoing resync job, jobId: %1", currentJobId));
        }
        else
        {
            boolean isResyncJobCreated = false;
            var retryCount = 0;
            while (!isResyncJobCreated)
            {
                InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
                if (!parameter.isInventoryServiceStatusEnable())
                {
                    return false;
                }

                try
                {
                    jobInitiateResponse = inventoryServiceClient.postResyncJob();
                }
                catch
                {
                    ttsbegin;
                    InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Failed, "@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
                    ttscommit;
                    logger.logError("Failed to post resync job to Inventory Visibility add-in.");
                    throw error("@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
                }

                if (jobInitiateResponse.isConflict() || jobInitiateResponse.isOk())
                {
                    isResyncJobCreated = true;
                    currentJobId = jobInitiateResponse.parmJobId();
                    logger.logInformation(strFmt("Create resync job successfully, jobId: %1", currentJobId));
                }
                else if (jobInitiateResponse.isForbidden())
                {
                    sleep(HeartbeatIntervalInMilliSeconds);
                    sleepCount++;
                    if (sleepCount > MaxSleepCount)
                    {
                        ttsbegin;
                        InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Suspended, "@SCM:InventoryServiceForbiddenAndWaitTimeoutErrorMessage");
                        ttscommit;
                        logger.logError("The current status of Inventory Visibility is forbidden, and there is a waiting timeout.");
                        throw error("@SCM:InventoryServiceForbiddenAndWaitTimeoutErrorMessage");
                    }
                }
                else
                {
                    retryCount++;
                    if (retryCount > MaxRetryCount)
                    {
                        ttsbegin;
                        InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Failed, "@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
                        ttscommit;
                        logger.logError("Hit max retry count, failed to post resync job to Inventory Visibility add-in.");
                        throw error("@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
                    }
                }
            }
        }

        if (currentJobId != '')
        {
            boolean isResyncJobCompleted = false;
            sleepCount = 0;
            while(!isResyncJobCompleted)
            {
                InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
                if (!parameter.isInventoryServiceStatusEnable())
                {
                    return false;
                }

                try
                {
                    jobProgressResponse = inventoryServiceClient.getJobProgress(currentJobId);
                }
                catch
                {
                    ttsbegin;
                    InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Failed, "@SCM:InventoryServiceFailedtoGetResyncJobProgressErrorMessage");
                    ttscommit;
                    logger.logError("Failed to get Inventory Visibility resync job progress.");
                    throw error("@SCM:InventoryServiceFailedtoGetResyncJobProgressErrorMessage");
                }

                if(jobProgressResponse.isOk() && jobProgressResponse.isJobInTerminalState())
                {
                    if (jobProgressResponse.isJobInCompletedState())
                    {
                        isResyncJobCompleted = true;
                        return true;
                    }
                    else
                    {
                        ttsbegin;
                        InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Failed, "@SCM:InventoryServiceResyncJobFaultedStateErrorMessage");
                        ttscommit;
                        logger.logError("Inventory Visibility resync job faulted.");
                        throw error("@SCM:InventoryServiceResyncJobFaultedStateErrorMessage");
                    }
                }

                sleep(HeartbeatIntervalInMilliSeconds);
                sleepCount++;
                if (sleepCount > MaxSleepCount)
                {
                    ttsbegin;
                    InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Timeout, "@SCM:InventoryServiceResyncJobTimeoutErrorMessage");
                    ttscommit;
                    logger.logError("Inventory Visibility resync job timeout.");
                    throw error("@SCM:InventoryServiceResyncJobTimeoutErrorMessage");
                }
            }
        }
        else
        {
            ttsbegin;
            InventInventoryDataServiceParameters::updateResyncJobStatus(InventoryServiceResyncJobStatus::Failed, "@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
            ttscommit;
            logger.logError("Current resyn jobId is null, failed to get ongoing resync job to Inventory Visibility add-in.");
            throw error("@SCM:InventoryServiceFailedtoPostResyncJobErrorMessage");
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>