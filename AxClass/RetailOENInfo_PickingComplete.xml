<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfo_PickingComplete</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
/// <summary>
/// Generate event notification for packing complete order.
/// </summary>
class RetailOENInfo_PickingComplete extends RetailOENInfo
{
    WMSPickingRoute         wmsPickingRoute;
    const str WmsPickingRouteNotFoundMessageId = 'WmsPickingRoute_Not_Found';
    /// <summary>
    /// This method is used to return retail event notification type.
    /// </summary>
    /// <returns>
    /// Retail event notification type.
    /// </returns>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::PickingComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDetailInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates detail information about transaction.
    /// </summary>
    /// <param name="messageTemplate">
    /// String which has the transaction information.
    /// </param>
    /// <returns>
    /// Detail information about transaction.
    /// </returns>
    protected str generateDetailInfo(str messageTemplate)
    {
        return super(messageTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds sales order and sets value to <c>RetailOENInfo</c>.
    /// </summary>
    /// <param name="refRecId">
    /// Record id of <c>wmsPickingRoute</c>.
    /// </param>
    public void resolveSalesOrder(RefRecId refRecId)
    {
        select firstOnly wmsPickingRoute
            where wmsPickingRoute.RecId == refRecId;

        if (!wmsPickingRoute && !wmsPickingRoute.transRefId)
        {
            ApplicationEventSource::EventWriteRetailOrderNotificationInformation(WmsPickingRouteNotFoundMessageId, '', con2Str(xSession::xppCallStack()));
        }

        // Assume the transfer type is Sales if we get here.

        this.parmSalesOrder(SalesTable::find(wmsPickingRoute.transRefId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyPicked</Name>
				<Source><![CDATA[
    protected InventQty getSalesLineQtyPicked(SalesLine _salesLine)
    {
        WMSOrderTrans wmsOrderTrans;

        select sum(Qty) from wmsOrderTrans
			where wmsOrderTrans.inventTransId == _salesLine.InventTransId
				&& wmsOrderTrans.shipmentId == wmsPickingRoute.shipmentId;

        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesLine.ItemId,
																					 _salesLine.InventDimId,
																					 wmsOrderTrans.qty,
																					 _salesLine.inventTable().inventUnitId(),
																					 _salesLine.SalesUnit,
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>