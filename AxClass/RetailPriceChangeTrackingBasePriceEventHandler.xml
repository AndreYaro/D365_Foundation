<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingBasePriceEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data event handlers for base price changes.
/// </summary>
internal class RetailPriceChangeTrackingBasePriceEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventTableModule_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating base price
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void InventTableModule_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        InventTableModule original = orig as InventTableModule;
        InventTableModule newInstance = sender;

        // Check only sales price.
        if (newInstance.ModuleType != ModuleInventPurchSales::Sales)
        {
            return;
        }

        if (original != null &&
            (original.Price != newInstance.Price
            || original.PriceUnit != newInstance.PriceUnit
            || original.priceQty != newInstance.PriceQty
            || original.LineDisc != newInstance.LineDisc))
        {
            InventTable inventTable = InventTable::find(original.ItemId);
            RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTableModule_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for delete base price
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void InventTableModule_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        InventTableModule original = orig as InventTableModule;

        // Check only sales price.
        if (original.ModuleType != ModuleInventPurchSales::Sales)
        {
            return;
        }

        InventTable inventTable = InventTable::find(original.ItemId);
        RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTableModule_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for inserting base price
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void InventTableModule_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        InventTableModule newInstance = sender;

        // Check only sales price.
        if (newInstance.ModuleType != ModuleInventPurchSales::Sales)
        {
            return;
        }

        InventTable inventTable = InventTable::find(newInstance.ItemId);
        RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailInventTable_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating discount behaviors
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailInventTable_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailInventTable original = orig as RetailInventTable;
        RetailInventTable newInstance = sender;

        if (original != null &&
            (original.noDiscountAllowed != newInstance.noDiscountAllowed
            || original.noPeriodicDiscountAllowed != newInstance.noPeriodicDiscountAllowed))
        {
            InventTable inventTable = InventTable::find(original.itemId);
            RetailPriceChangeTracking::writeProductPriceChangeRecord(inventTable.Product);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>