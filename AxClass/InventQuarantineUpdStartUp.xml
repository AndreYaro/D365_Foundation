<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineUpdStartUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventQuarantineUpdStartUp extends InventQuarantineUpd
{
    boolean isReferenceOriginModified;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isReferenceOriginModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating whether the record of origin (<c>InventTransOrigin.ReferenceId</c>) for the reference lot (<c>InventQuarantineOrder.InventTransIdRef</c>)
    /// has been modified as a consequence of updating the quarantine order.
    /// </summary>
    /// <returns>
    /// <c>true</c> if the record of origin (InventTransOrigin.ReferenceId) for the reference lot (InventQuarantineOrder.InventTransIdRef)
    /// has been modified as a consequence of updating the quarantine order; otherwise, <c>false</c>.
    /// </returns>
    public boolean isReferenceOriginModified()
    {
        return isReferenceOriginModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        void run()
    {
        setPrefix(InventQuarantineMultiStartUp::description());

        isReferenceOriginModified = false;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuarantineOrder</Name>
				<Source><![CDATA[
        void updateQuarantineOrder()
    {
        InventMov_Quarantine        movement        = InventMovement::construct(inventQuarantineOrder);
        InventMov_QuarantineInvent  movement_Invent = InventMovement::construct(inventQuarantineOrder,InventMovSubType::TransferReceipt);

        InventTrans                 inventTrans;
        InventDimParm               inventDimParm;

        movement_Invent.parmInventDirection(InventDirection::Issue);
        InventUpd_Physical physical = InventUpd_Physical::newInventQuarantineOrderIssue(movement_Invent, -inventQuarantineOrder.Qty,0
            , -inventQuarantineOrder.PdsCWQty,
            0
            );

        physical.updateNow(ledgerVoucher);

        movement.parmInventDirection(InventDirection::Receipt);
        physical = InventUpd_Physical::newInventQuarantineOrderReceipt(movement, inventQuarantineOrder.Qty,0, -physical.updCostAmountInvent()
            , inventQuarantineOrder.PdsCWQty,
            0
            );

        // Skip reservation to prevent existing transactions from reserving our stuff.
        physical.parmAllowAutoReserveDim(false);
        physical.updateNow(ledgerVoucher);

        inventQuarantineOrder.RemainQty         = inventQuarantineOrder.Qty;

        inventQuarantineOrder.PdsCWRemainQty    = inventQuarantineOrder.PdsCWQty;

        inventQuarantineOrder.Status            = InventQuarantineStatus::Started;
        inventQuarantineOrder.QuarantineDate    = ledgerVoucher.lastTransDate();

        isReferenceOriginModified               = inventQuarantineOrder.isUpdateReturnOrderRequired();
        inventQuarantineOrder.update();

        InventDim inventDimQTOrder = inventQuarantineOrder.inventDim();
        //synchronize inventTrans' inventdim so quarantine warehouses issues inventdim are assigned to standard warehouses receipt
        while select sum(Qty) from inventTrans
            group by InventDimId
            where inventTrans.InventTransOrigin == movement.inventTransOriginId()
                &&  inventTrans.StatusIssue     >  StatusIssue::Picked
                &&  inventTrans.StatusReceipt   == StatusReceipt::None
                &&  inventTrans.InventDimId     != inventQuarantineOrder.InventDimIdQuarantine//if dimensions are the same as on line, there is no need to sync
        {
            InventDim inventDimTo = InventDim::find(inventTrans.InventDimId);

            //location specific dimensions should be preserved
            inventDimTo.InventLocationId = inventDimQTOrder.InventLocationId;
            inventDimTo.wmsLocationId    = inventDimQTOrder.wmsLocationId;

            inventDimTo = InventDim::findOrCreate(inventDimTo);
            inventDimParm.initFromInventDim(inventDimTo);

            InventUpd_ChangeDimension inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(movement_Invent,inventDimQTOrder,inventDimParm,inventDimTo,abs(inventTrans.Qty));
            inventUpd_ChangeDimension.updateNow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        boolean validate()
    {
        if (inventQuarantineOrder.Status != InventQuarantineStatus::Created)
        {
            return checkFailed(strFmt("@SYS58575",InventQuarantineStatus::Created));
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static InventQuarantineUpdStartUp construct()
    {
        InventQuarantineUpdStartUp inventQuarantineUpdStartUp = new InventQuarantineUpdStartUp();

        return inventQuarantineUpdStartUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
        static InventQuarantineUpdStartUp newParmBuffer(InventParmQuarantineOrder inventParmQuarantineOrder)
    {
        inventParmQuarantineOrder.skipTTSCheck(true);
        inventParmQuarantineOrder.ParmBuffer::initParmId();
        inventParmQuarantineOrder.write();

        InventQuarantineUpdStartUp inventQuarantineUpdStartUp = InventQuarantineUpdStartUp::construct();
        inventQuarantineUpdStartUp.parmParmBuffer(inventParmQuarantineOrder);

        return inventQuarantineUpdStartUp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
