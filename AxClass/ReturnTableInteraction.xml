<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReturnTableInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReturnTableInteraction</c> class is the interaction class for the return order form.
/// </summary>
public class ReturnTableInteraction
    extends PageInteraction
{
    SalesTable      salesTable;
    SalesLine       salesLine;

    ReturnTableButtonStateProvider  returnTableButtonStateProvider;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableCommonActions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables menu items that are affected by both header and line changes.
    /// </summary>
    protected void enableCommonActions()
    {
        // Group groupNew
        this.enableControl(formControlStr(ReturnTable, ReturnCreateReplacement),    returnTableButtonStateProvider.checkRuleReturnCreateReplacement());

        // Group groupModify
        this.enableControl(formControlStr(ReturnTable, ReturnCancel),               returnTableButtonStateProvider.checkRuleReturnCancel());

        this.enableControl(formControlStr(ReturnTable, buttonUpdatePackingSlip),
            returnTableButtonStateProvider.parmPackingSlipButtonEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables a control.
    /// </summary>
    /// <param name = "_formControlStr">A reference to the control to enable or disable.</param>
    /// <param name = "_enabled">A value indicating if control should enabled or disabled.</param>
    protected void enableControl(str _formControlStr, boolean _enabled)
    {
        this.page().actionPaneControlEnabled(_formControlStr, _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHeaderButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the header level controls.
    /// </summary>
    public void enableHeaderButtons()
    {
        returnTableButtonStateProvider.initHeaderActions();

        this.enableCommonActions();

        this.registerButtonRules();

        this.enableControl(formControlStr(ReturnTable, ButtonPurchTableThisCompany),
            returnTableButtonStateProvider.parmPurchTableThisCompanyEnabled());
        this.enableControl(formControlStr(ReturnTable, ButtonInterCompanySalesTable),
            returnTableButtonStateProvider.parmInterCompanySalesOrderEnabled());
        this.enableControl(formControlStr(ReturnTable, ButtonInterCompanyPurchTable),
            returnTableButtonStateProvider.parmInterCompanyPurchOrderEnabled());
        this.enableControl(formControlStr(ReturnTable, ButtonInterCompanyOriginalSalesTable),
            returnTableButtonStateProvider.parmInterCompanyOriginalSalesOrdEnabled());

        this.enableControl(formControlStr(ReturnTable, IntercompanyReferences),
            returnTableButtonStateProvider.parmReferencesEnabled());

        this.enableControl(formControlStr(returnTable, PurchCreateFromSalesReturn),
            returnTableButtonStateProvider.parmPurchCreateFromSalesReturnEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableLineButtons</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the line level controls.
    /// </summary>
    public void enableLineButtons()
    {
        returnTableButtonStateProvider.initLineActions();

        this.enableCommonActions();

        this.enableControl(
            formControlStr(ReturnTable, ButtonMarkupTransLineGrid),
            returnTableButtonStateProvider.parmMarkupTransLineEnabled() && !salesTable.isCompletedCallCenterOrder());

        this.enableControl(formControlStr(ReturnTable, ReturnReplaceItemLineGrid),
            returnTableButtonStateProvider.parmReturnReplacementEnabled());

        this.enableControl(formControlStr(ReturnTable, InterCompanyRemoveMarkingGrid),
            returnTableButtonStateProvider.parmInterCompanyEnabled());

        this.enableControl(formControlStr(ReturnTable, InventTransRegister),
            returnTableButtonStateProvider.parmInventTransRegisterEnabled());

        // Agreement buttons (line)
        this.enableControl(formControlStr(returnTable, CreateLink),
            returnTableButtonStateProvider.parmCreateLinkEnabled());
        this.enableControl(formControlStr(returnTable, RemoveLink),
            returnTableButtonStateProvider.parmRemoveLinkEnabled());
        this.enableControl(formControlStr(returnTable, SalesAgreementLine),
            returnTableButtonStateProvider.parmSalesAgreementLineEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a record by using the active records for the form.
    /// </summary>
    private void init()
    {
        salesTable              = this.page().activeRecord('SalesTable');
        salesLine               = this.page().activeRecord('SalesLine');

        returnTableButtonStateProvider = new ReturnTableButtonStateProvider();
        returnTableButtonStateProvider.setDatasources(salesTable, salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerButtonRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Registers each control with rules that govern the enabled state.
    /// </summary>
    protected void registerButtonRules()
    {
        // Group groupReturn
        this.enableControl(formControlStr(ReturnTable, ReturnFindSalesOrder),       returnTableButtonStateProvider.checkRuleReturnFindSalesOrder());

        this.enableControl(formControlStr(ReturnTable, PurchCreateFromSalesReturn), returnTableButtonStateProvider.checkRulePurchCreateFromSalesReturn());

        // Group groupCharges
        this.enableControl(
            formControlStr(ReturnTable, ButtonMarkupTransHeading),
            returnTableButtonStateProvider.checkRuleMarkupTrans_HeadingSales() && !salesTable.isCompletedCallCenterOrder());

        // Group groupSend
        this.enableControl(formControlStr(ReturnTable, ButtonAcknowledgement),      returnTableButtonStateProvider.checkRuleReturnAcknowledgment());
        this.enableControl(formControlStr(ReturnTable, ButtonReturnOrder),          returnTableButtonStateProvider.checkRuleReturnDocument());

        // Group groupJournals
        this.enableControl(formControlStr(ReturnTable, buttonPackingSlipJournal),   returnTableButtonStateProvider.checkRuleJournalPackingSlip());
        this.enableControl(formControlStr(ReturnTable, buttonJournalInvoice),       returnTableButtonStateProvider.checkRuleJournalInvoice());

        // Group groupRelatedInformation
        this.enableControl(formControlStr(ReturnTable, buttonPurchTable),           returnTableButtonStateProvider.checkRulePurchTable());
        this.enableControl(formControlStr(ReturnTable, buttonReplacementOrder),     returnTableButtonStateProvider.checkRuleReplacementOrder());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the line action menu item buttons when the active sales order line has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesLine', 'selectionChanged')]
    public void salesLine_DS_selectionChanged()
    {
        this.init();
        this.enableLineButtons();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable_DS_selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the header action menu item buttons when the active sales order header has been updated.
    /// </summary>
    [FormDataSourceInteractionAttribute('SalesTable', 'selectionChanged')]
    public void salesTable_DS_selectionChanged()
    {
        this.init();
        this.enableHeaderButtons();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>