<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmCheckPostPriceDiscTableUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscAdmCheckPostPriceDiscTableUpdater</c> updates the <c>PriceDiscTable</c> for specified journal number and reference.
/// </summary>
class PriceDiscAdmCheckPostPriceDiscTableUpdater extends SysQueryUpdateRecordSet
{
    PriceDiscAdmTrans priceDiscAdmTransrange;
    private const TableName joinedTable = tableStr(PriceDiscAdmTrans);
    private boolean isRangeInitialized;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formattedQueryValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Format value for specified field for query.
    /// </summary>
    /// <param name = "_field">The field.</param>
    /// <returns>Formatted value for specified field.</returns>
    protected final str formattedQueryValue(str _field)
    {
        return strFmt('%1.%2', joinedTable, _field);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFieldValueMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the field mapping.
    /// </summary>
    protected void initializeFieldValueMap()
    {
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Agreement), this.formattedQueryValue(fieldStr(PriceDiscAdmTrans, Agreement)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, PDSCalculationId), this.formattedQueryValue(fieldStr(PriceDiscAdmTrans, PDSCalculationId)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, ItemCode), this.formattedQueryValue(fieldStr(PriceDiscAdmTrans,ItemCode)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, AccountCode), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,AccountCode)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, ItemRelation), this.formattedQueryValue(fieldStr(PriceDiscAdmTrans,ItemRelation)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, AccountRelation), this.formattedQueryValue(fieldStr(PriceDiscAdmTrans,AccountRelation)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, UnitId), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,UnitId)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, QuantityAmountFrom), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,QuantityAmountFrom)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, QuantityAmountTo), this.formattedQueryValue(fieldStr(PriceDiscAdmTrans,QuantityAmountTo)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, GenericCurrency), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,GenericCurrency)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, FromDate),this.formattedQueryValue(fieldStr(PriceDiscAdmTrans,FromDate)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, ToDate), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,ToDate)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Amount),this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Amount)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Currency),this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Currency)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Percent1), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Percent1)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Percent2), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Percent2)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, DeliveryTime), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,DeliveryTime)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, SearchAgain), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,SearchAgain)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, PriceUnit), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,PriceUnit)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Relation), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Relation)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Markup),this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Markup)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, AllocateMarkup), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,AllocateMarkup)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, Module), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,Module)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, CalendarDays), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,CalendarDays)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, InventDimId), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,InventDimId)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, DisregardLeadTime),this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,DisregardLeadTime)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, AgreementHeaderExt_RU), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,AgreementHeaderExt_RU)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, InventBaileeFreeDays_RU), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,InventBaileeFreeDays_RU)));
        this.insertFieldValueMapPair(tableNum(PriceDiscTable), fieldNum(PriceDiscTable, MaximumRetailPrice_IN), this.formattedQueryValue( fieldStr(PriceDiscAdmTrans,MaximumRetailPrice_IN)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    /// <returns>The Query</returns>
    protected Query initQuery()
    {
        if (!isRangeInitialized)
        {
            throw error(Error::WrongUseOfFunction(funcName()));
        }

        Query query = new Query();
        query.recordLevelSecurity(false);
        QueryBuildDataSource qbdsPriceDiscTable = query.addDataSource(tableNum(PriceDiscTable));
        QueryBuildDataSource qbdsPriceDiscAdmTrans = qbdsPriceDiscTable.addDataSource(tableNum(PriceDiscAdmTrans), joinedTable);
        qbdsPriceDiscAdmTrans.relations(true);
        qbdsPriceDiscAdmTrans.joinMode(JoinMode::InnerJoin);
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, JournalNum)).value(queryValue(priceDiscAdmTransrange.JournalNum));
        qbdsPriceDiscAdmTrans.addRange(fieldNum(PriceDiscAdmTrans, MustBeDeleted)).value(queryValue(priceDiscAdmTransrange.MustBeDeleted));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDataMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip data methods.
    /// </summary>
    /// <returns>true if data methods must be skipped; otherwise, false.</returns>
    protected boolean skipDataMethods()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip events.
    /// </summary>
    /// <returns>true if events must be skipped; otherwise, false.</returns>
    protected boolean skipEvents()
    {
        if (PriceDiscSalesParametersManagerSkipEventsFlight::instance().isEnabled())
        {
            return SalesParameters::find().IsPriceDiscTableUpdateSkipEventsEnabled;
        }

        return PriceDiscAdmCheckPostSkipEventsFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>withPriceDiscAdmTransRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the <c>PriceDiscAdmTrans</c> which is used to specify the range for the update query.
    /// </summary>
    /// <param name = "_range">The <c>PriceDiscAdmTrans</c> which is used to specify the range for the update query.</param>
    /// <returns>The instance with which this method was called.</returns>
    public PriceDiscAdmCheckPostPriceDiscTableUpdater withPriceDiscAdmTransRange(PriceDiscAdmTrans _range)
    {
        priceDiscAdmTransrange = _range;
        isRangeInitialized = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PriceDiscAdmCheckPostPriceDiscTableUpdater</c> class.
    /// </summary>
    /// <returns>A new instance of <c>PriceDiscAdmCheckPostPriceDiscTableUpdater</c>.</returns>
    public static PriceDiscAdmCheckPostPriceDiscTableUpdater construct()
    {
        return new PriceDiscAdmCheckPostPriceDiscTableUpdater();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>