<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransStatementContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for Dimension service.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the Dimension service.
/// </remarks>
[DataContract]
[SysOperationGroup('Focuses', "@SYS83218", '1')]
[SysOperationGroup('Date', "@SYS7402", '2')]
[SysOperationGroup('PageLayout', "@SYS27406", '3')]
[SysOperationGroup('PrintOut', "@SYS12608", '4')]
[SysOperationContractProcessing(classstr(LedgerTransStatementUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)]
class LedgerTransStatementContract implements SysOperationValidatable
{
    DimensionsTransTableType dimensionsTransTableType;
    LedgerReportCurrencySelection ledgerReportCurrencySelection;
    boolean groupPerSec;
    boolean salesTaxSpec;
    boolean displayCompanyForLedgerAccount;
    boolean offsetAccount;
    boolean currencyTotal;
    boolean emptyPeriods;
    boolean withoutTrans;
    boolean openingTrans;
    boolean closingTrans;
    boolean includeReversed;
    TransDate fromDate;
    TransDate toDate;
    boolean newPage;
    DimensionsLedgerTransSpecDim specification;

    List postingLayers;

    DateCode dateCode;
    MainAccountNum mainAccountNum;
    str reportTitle;
    Name primaryDimensionFocus;
    Name secondaryDimensionFocus;

    // <GEEPL>
    str sysVersion;
    DirPartyName userName;
    boolean showTotals;
    boolean showFooter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmClosingTrans</Name>
				<Source><![CDATA[
    // </GEEPL>

    /// <summary>
    /// Gets or sets the value of the datacontract parameter closingTrans.
    /// </summary>
    /// <param name="_closingTrans">
    /// The new value of the datacontract parameter closingTrans; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter closingTrans.
    /// </returns>
    [
        DataMember('ClosingTrans'),
        SysOperationLabel(literalstr("@GeneralLedger:IncludeAllClosingTransactions")),
        SysOperationHelpText(literalstr("@SYS82258")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('09')
    ]
    public boolean parmClosingTrans(boolean _closingTrans = closingTrans)
    {
        closingTrans  = _closingTrans;
        return closingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter currencyTotal.
    /// </summary>
    /// <param name="_currencyTotal">
    /// The new value of the datacontract parameter currencyTotal.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter _currencyTotal.
    /// </returns>
    [
        DataMember('CurrencyTotal'),
        SysOperationLabel(literalstr("@SYS62928")),
        SysOperationHelpText(literalstr("@SYS83297")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('05')
    ]
    public boolean parmCurrencyTotal(boolean _currencyTotal = currencyTotal)
    {
        currencyTotal  = _currencyTotal ;
        return currencyTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter dateCode.
    /// </summary>
    /// <param name="_dateCode">
    /// The new value of the datacontract parameter dateCode.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter dateCode.
    /// </returns>
    [
        DataMember('DateCode'),
        SysOperationLabel(literalstr("@SYS22526")),
        SysOperationHelpText(literalstr("@SYS60051")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('1')
    ]
    public DateCode parmDateCode(DateCode _dateCode = dateCode)
    {
        dateCode = _dateCode;
        return dateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayCompanyForLedgerAccount</Name>
				<Source><![CDATA[
    [DataMember(identifierStr(DisplayCompanyForLedgerAccount))]
    public boolean parmDisplayCompanyForLedgerAccount(boolean _displayCompanyForLedgerAccount = displayCompanyForLedgerAccount)
    {
        displayCompanyForLedgerAccount = _displayCompanyForLedgerAccount;
        return displayCompanyForLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmptyPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter emptyPeriods.
    /// </summary>
    /// <param name="_emptyPeriods">
    /// The new value of the datacontract parameter emptyPeriods; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter emptyPeriods.
    /// </returns>
    [
        DataMember('EmptyPeriods'),
        SysOperationLabel(literalstr("@SYS1527")),
        SysOperationHelpText(literalstr("@SYS24758")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('06')
    ]
    public boolean parmEmptyPeriods(boolean _emptyPeriods = emptyPeriods)
    {
        emptyPeriods  = _emptyPeriods ;
        return emptyPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter fromdate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter fromdate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter fromdate.
    /// </returns>
    [
        DataMember('FromDate'),
        SysOperationLabel(literalstr("@SYS5209")),
        SysOperationHelpText(literalstr("@SYS67")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('2')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupPerSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter group per secondary focus.
    /// </summary>
    /// <param name="_groupPerSec">
    /// The new value of the datacontract parameter group per secondary focus; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter group per secondary focus.
    /// </returns>
    [
        DataMember('GroupPerSec'),
        SysOperationLabel(literalstr("@SYS85873")),
        SysOperationHelpText(literalstr("@SYS85874")),
        SysOperationGroupMember('Focuses'),
        SysOperationDisplayOrder('5')
    ]
    public boolean parmGroupPerSec(boolean _groupPerSec = groupPerSec)
    {
        groupPerSec = _groupPerSec;
        return groupPerSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter includeReversed.
    /// </summary>
    /// <param name="_includeReversed">
    /// The new value of the datacontract parameter includeReversed; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter includeReversed.
    /// </returns>
    [
        DataMember('IncludeReversed'),
        SysOperationLabel(literalstr("@SYS78625")),
        SysOperationHelpText(literalstr("@SYS78627")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('10')
    ]
    public boolean parmIncludeReversed(boolean _includeReversed = includeReversed)
    {
        includeReversed  = _includeReversed;
        return includeReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter newPage.
    /// </summary>
    /// <param name="_newPage">
    /// The new value of the datacontract parameter newPage; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter newPage.
    /// </returns>
    [
        DataMember('NewPage'),
        SysOperationLabel(literalstr("@SYS15349")),
        SysOperationHelpText(literalstr("@SYS85875")),
        SysOperationGroupMember('PageLayout'),
        SysOperationDisplayOrder('1')
    ]
    public boolean parmNewPage(boolean _newPage = newPage)
    {
        newPage = _newPage;
        return newPage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter OffsetAccount.
    /// </summary>
    /// <param name="_offsetAccount">
    /// The new value of the datacontract parameter OffsetAccount; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter OffsetAccount.
    /// </returns>
    [
        DataMember('OffsetAccount'),
        SysOperationLabel(literalstr("@SYS11162")),
        SysOperationHelpText(literalstr("@SYS330996")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('04')
    ]
    public boolean parmOffsetAccount(boolean _offsetAccount = offsetAccount)
    {
        offsetAccount  = _offsetAccount;
        return offsetAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter openingTrans.
    /// </summary>
    /// <param name="_openingTrans">
    /// The new value of the datacontract parameter openingTrans; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter openingTrans.
    /// </returns>
    [
        DataMember('OpeningTrans'),
        SysOperationLabel(literalstr("@SYS4000403")),
        SysOperationHelpText(literalstr("@SYS4000404")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('08')
    ]
    public boolean parmOpeningTrans(boolean _openingTrans = openingTrans)
    {
        openingTrans  = _openingTrans;
        return openingTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter postingLayers.
    /// </summary>
    /// <param name="_postingLayers">
    /// The new value of the datacontract parameter postingLayers; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter postingLayers.
    /// </returns>
    [
        DataMember('PostingLayers'),
        SysOperationLabel(literalstr("@SYS10925")),
        SysOperationHelpText(literalstr("@SYS1487")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('02'),
        AifCollectionType('return', Types::Enum, enumStr(CurrentOperationsTax))
    ]
    public List parmPostingLayers(List _postingLayers = postingLayers)
    {
        postingLayers = _postingLayers;
        return postingLayers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryDimensionFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the primary financial dimension focus of data contract parameter.
    /// </summary>
    /// <param name="_primaryDimensionFocus">
    /// The new value of the primary financial dimension focus; optional.
    /// </param>
    /// <returns>
    /// The current value of the primary financial dimension focus data contract parameter.
    /// </returns>
    [
        DataMember('PrimaryDimensionFocus'),
        SysOperationLabel(literalstr("@SYS329752")),
        SysOperationGroupMember('Focuses'),
        SysOperationDisplayOrder('3')
    ]
    public Name parmPrimaryDimensionFocus(Name _primaryDimensionFocus = primaryDimensionFocus)
    {
        primaryDimensionFocus = _primaryDimensionFocus;
        return primaryDimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>reportTitle</c> data contract parameter.
    /// </summary>
    /// <param name="_reportTitle">
    ///    The new value of the <c>reportTitle</c> data contract parameter.
    /// </param>
    /// <returns>
    ///    The current value of the <c>reportTitle</c> data contract parameter.
    /// </returns>
    [DataMember('ReportTitle')]
    public Str60 parmReportTitle(str _reportTitle = reportTitle)
    {
        reportTitle  = _reportTitle;
        return reportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTaxSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter salesTaxSpec.
    /// </summary>
    /// <param name="_salesTaxSpec">
    /// The new value of the datacontract parameter salesTaxSpec; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter salesTaxSpec.
    /// </returns>
    [
        DataMember('SalesTaxSpec'),
        SysOperationLabel(literalstr("@SYS54353")),
        SysOperationHelpText(literalstr("@SYS83630")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('03')
    ]
    public boolean parmSalesTaxSpec(boolean _salesTaxSpec = salesTaxSpec)
    {
        salesTaxSpec  = _salesTaxSpec ;
        return salesTaxSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSecondaryDimensionFocus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the secondary financial dimension focus of data contract parameter.
    /// </summary>
    /// <param name="_secondaryDimensionFocus">
    /// The new value of the secondary financial dimension focus; optional.
    /// </param>
    /// <returns>
    /// The current value of the secondary financial dimension focus data contract parameter.
    /// </returns>
    [
        DataMember('SecondaryDimensionFocus'),
        SysOperationLabel(literalstr("@SYS329756")),
        SysOperationGroupMember('Focuses'),
        SysOperationDisplayOrder('4')
    ]
    public Name parmSecondaryDimensionFocus(Name _secondaryDimensionFocus = secondaryDimensionFocus)
    {
        secondaryDimensionFocus = _secondaryDimensionFocus;
        return secondaryDimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFooter</Name>
				<Source><![CDATA[
    [DataMember(identifierStr(ShowFooter))]
    public boolean parmShowFooter(boolean _showFooter = showFooter)
    {
        showFooter = _showFooter;
        return showFooter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTotals</Name>
				<Source><![CDATA[
    [DataMember(identifierStr(ShowTotals))]
    public boolean parmShowTotals(boolean _showTotals = showTotals)
    {
        showTotals = _showTotals;
        return showTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter specification.
    /// </summary>
    /// <param name="_specification">
    /// The new value of the datacontract parameter specification; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter specification.
    /// </returns>
    [
        DataMember('Specification'),
        SysOperationLabel(literalstr("@SYS101254")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('01')
    ]
    public DimensionsLedgerTransSpecDim parmSpecification(DimensionsLedgerTransSpecDim _specification = specification )
    {
        specification  = _specification ;
        return specification ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>SysVersion</c> parameter.
    /// </summary>
    /// <param name="_sysVersion">
    /// The value to set.
    /// </param>
    /// <returns>
    /// The value of the <c>ParmSysVersion</c> parameter.
    /// </returns>
    [DataMember('SysVersion')]
    public Description255 parmSysVersion(str _sysVersion = sysVersion)
    {
        sysVersion = _sysVersion;
        return sysVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter toDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter toDate; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter toDate.
    /// </returns>
    [
        DataMember('ToDate'),
        SysOperationLabel(literalstr("@SYS14656")),
        SysOperationHelpText(literalstr("@SYS67")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('3')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Transactions.
    /// </summary>
    /// <param name="_dimensionsTransTableType">
    /// The new value of the datacontract parameter Transactions; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter Transactions.
    /// </returns>
    [
        DataMember('Transactions'),
        SysOperationLabel(literalstr("@SYS1084")),
        SysOperationHelpText(literalstr("@SYS85872")),
        SysOperationGroupMember('Focuses'),
        SysOperationDisplayOrder('1')
    ]
    public DimensionsTransTableType parmTransaction(DimensionsTransTableType _dimensionsTransTableType = dimensionsTransTableType)
    {
        dimensionsTransTableType = _dimensionsTransTableType;
        return dimensionsTransTableType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencySelection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter Currency selection.
    /// </summary>
    /// <param name="_ledgerReportCurrencySelection">
    /// The new value of the datacontract parameter Currency selection; optional.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter Currency selection.
    /// </returns>
    [
        DataMember('CurrencySelection'),
        SysOperationLabel(literalstr("@SYS7572")),
        SysOperationHelpText(literalstr("@GLS105019")),
        SysOperationGroupMember('Focuses'),
        SysOperationDisplayOrder('2')
    ]
    public LedgerReportCurrencySelection parmCurrencySelection(LedgerReportCurrencySelection _ledgerReportCurrencySelection = ledgerReportCurrencySelection)
    {
        ledgerReportCurrencySelection = _ledgerReportCurrencySelection;
        return ledgerReportCurrencySelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserName</Name>
				<Source><![CDATA[
    [DataMember('UserName')]
    public DirPartyName parmUserName(DirPartyName _userName = userName)
    {
        userName = _userName;
        return userName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWithoutTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter withoutTrans.
    /// </summary>
    /// <param name="_withoutTrans">
    /// The new value of the datacontract parameter withoutTrans.
    /// </param>
    /// <returns>
    /// The current value of datacontract parameter withoutTrans.
    /// </returns>
    [
        DataMember('WithoutTrans'),
        SysOperationLabel(literalstr("@SYS7749")),
        SysOperationHelpText(literalstr("@SYS83212")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('07')
    ]
    public boolean parmWithoutTrans(boolean _withoutTrans = withoutTrans)
    {
        withoutTrans  = _withoutTrans;
        return withoutTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the parameters.
    /// </summary>
    /// <returns>
    /// true if all report parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = LedgerReportFromAndToDateValidator::validateReportFromAndToDate(this.fromDate, this.toDate);

        boolean periodLimitFeatureEnabled = LedgerDimensionStatementReportPeriodLimitFlight::instance().isEnabled();

        if (isValid && periodLimitFeatureEnabled)
        {
            isValid = LedgerReportFromAndToDateValidator::validateFromAndToDateNotExceeded(this.fromDate, this.toDate);
        }

        RecId primaryFocusRecId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, this.parmPrimaryDimensionFocus()).RecId;
        RecId secondaryFocusRecId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, this.parmSecondaryDimensionFocus()).RecId;

        if (!primaryFocusRecId)
        {
            isValid = checkFailed("@SYS83202");
        }

        if (DimensionHierarchy::haveCommonAttributes(primaryFocusRecId, secondaryFocusRecId))
        {
            isValid = checkFailed("@SYS83203");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>