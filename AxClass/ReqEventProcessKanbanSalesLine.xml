<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanSalesLine</c> class processes kanban sales line events.
/// </summary>
public class ReqEventProcessKanbanSalesLine extends ReqEventProcessKanban implements BatchRetryable
{
    SalesLine   salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the BOM ID to use.
    /// </summary>
    /// <returns>
    ///    A <c>BOMId</c> string value.
    /// </returns>
    protected BOMId bomId()
    {
        BOMId   bomId;

        if (kanbanRule.KanbanType == LeanKanbanType::Manufacturing)
        {
            bomId = salesLine.ItemBOMId;
        }

        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table buffer on which the class operates.
    /// </summary>
    /// <returns>
    ///    A <c>Common</c> table buffer.
    /// </returns>
    protected Common buffer()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether delete actions are allowed.
    /// </summary>
    /// <returns>
    ///    true if the delete action is allowed; otherwise, false.
    /// </returns>
    protected boolean canDelete()
    {
        return actionMode == ReqEventProcessAction::Delete ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctpConfirmedDatesValidity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the confirmed dates calculated by CTP are valid by verifying that all the jobs were planned and
    ///    if that is not the case, show a warning to the user.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void ctpConfirmedDatesValidity()
    {
        KanbanEventQuantityMapSalesLine     kanbanEventQuantityMapSalesLine;
        Map                                 map;
        MapEnumerator                       me;
        Kanban                              kanban;
        KanbanJob                           kanbanJob;

        // Warning message only for Automatic with CTP
        if (   kanbanRuleEvent.SalesLineEvent == KanbanSalesLineEventType::AutomaticWithCTP
            && kanbanRuleVariable.MaximumPlannedOrders > 0)
        {
            // only for update, which is the operation happening when adding confirmed sales order dates
            if (actionMode == ReqEventProcessAction::Update)
            {
                // get the kanbans affected by the sales line
                kanbanEventQuantityMapSalesLine = KanbanEventQuantityMapSalesLine::newStandard(salesLine);
                map = kanbanEventQuantityMapSalesLine.mapKanbanQuantities();

                if (   map
                    && map.elements())
                {
                    me = map.getEnumerator();
                    while (me.moveNext())
                    {
                        kanban = Kanban::find(me.currentKey());

                        // show warning for kanbans affected by this event (same rule)
                        if (kanban.KanbanRule == kanbanRule.RecId)
                        {
                            // that are not yet planned
                            while select PlanActivityName
                                from kanbanJob
                                where kanbanJob.Status == LeanKanbanJobStatus::NotPlanned
                                   && kanbanJob.Kanban == kanban.RecId
                            {
                                warning(strFmt("@SYS340444", kanbanJob.PlanActivityName, kanban.KanbanId, kanban.ItemId));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description for the class.
    /// </summary>
    /// <returns>
    ///    A description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS4000040";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the due date and time of the event
    /// </summary>
    /// <returns>
    ///    The value of a <c>TransDateTime</c> extended data type.
    /// </returns>
    protected TransDateTime dueDateTime()
    {
        return DateTimeUtil::newDateTime(
                salesLine.deliveryDate(),
                ReqParameters::find().ReqTimePoDefault,
                DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the event origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    protected boolean eventExists()
    {
        return    salesLine
               && SalesLine::exist(salesLine.SalesId,salesLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the string identification value of the buffer.
    /// </summary>
    /// <returns>
    ///    A string value that identifies the buffer.
    /// </returns>
    protected str id()
    {
        return strFmt("@SYS319622",salesLine.ItemId,salesLine.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActionMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the action mode.
    /// </summary>
    protected void initActionMode()
    {
        super();

        if (actionMode == ReqEventProcessAction::None)
        {
            if (   !salesLine
                || !SalesLine::findSourceDocumentLine(reqPeggingAssignmentRequirement.SourceDocumentLine))
            {
                actionMode = ReqEventProcessAction::Delete;
            }
            else
            {
                actionMode = ReqEventProcessAction::Update;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the event quantity to process.
    /// </summary>
    protected void initInventQty()
    {
        super();

        if (   !kanbanRuleFound
            || !kanbanFlow.isLastActivityInventoryControlled()
            || kanbanFlow.isLastLocationKanbanSupermarket())
        {
            inventQty = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceRequirementParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    protected boolean initSourceRequirementParm()
    {
        if (!kanbanSourceRequirementParm)
        {
            kanbanSourceRequirementParm = KanbanSourceRequirementParm::newStandard(
                                                                        salesLine,
                                                                        tableNum(SalesLine),
                                                                        salesLine.RecId,
                                                                        tableNum(SalesLine),
                                                                        salesLine.RecId);
        }

        return    kanbanSourceRequirementParm
               && kanbanSourceRequirementParm.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the inventory dimension for which the event is processed.
    /// </summary>
    /// <returns>
    ///    The value of a <c>InventDimId</c> extended data type.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return salesLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory transaction originator of the sales line.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    protected InventTransOriginId inventTransOriginId()
    {
        return InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId,salesLine.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item ID for which an event is processed.
    /// </summary>
    /// <returns>
    ///    The value of an <c>ItemId</c> extended data type.
    /// </returns>
    protected ItemId itemId()
    {
        return salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban event type that is processed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanEventType</c> enumeration value.
    /// </returns>
    protected KanbanEventType kanbanEventType()
    {
        return KanbanEventType::SalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current event must be handled.
    /// </summary>
    /// <returns>
    ///    true if the event must be handled; otherwise, false.
    /// </returns>
    protected boolean mustHandleEvent()
    {
        boolean ret;

        ret = salesLine.isStocked()
              && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessSynchronously</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the event must be processed synchronously.
    /// </summary>
    /// <returns>
    ///    true if the event must be processed synchronously; otherwise, false.
    /// </returns>
    protected boolean mustProcessSynchronously()
    {
        return    super()
               || !kanbanRuleEvent
               || salesLine.isDeliveryDateControlTypeClassicCTP()
               || kanbanRuleEvent.SalesLineEvent    == KanbanSalesLineEventType::Automatic
               || kanbanRuleEvent.SalesLineEvent    == KanbanSalesLineEventType::AutomaticWithCTP
               || (kanbanRuleEvent.SalesLineEvent   == KanbanSalesLineEventType::Manual
                   && this.mustIncludeManualEvents());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the event.
    /// </summary>
    protected void processEvent()
    {
        super();

        this.ctpConfirmedDatesValidity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the source document line that is causing the event.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    protected SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
        return salesLine.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqEventProcessKanbanSalesLine construct()
    {
        return new ReqEventProcessKanbanSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesTable      salesTable;
        SalesLine       salesLine;

        if (_args)
        {
            switch (_args.record().TableId)
            {
                // Process a single sales line
                case tableNum(SalesLine):
                    ReqEventProcessKanban::newStandard(_args.record(), true).runOperation();
                    break;

                // Process a whole sales order
                case tableNum(SalesTable):
                    salesTable = _args.record();
                    while select salesLine
                        where salesLine.SalesId == salesTable.SalesId
                    {
                        ReqEventProcessKanban::newStandard(salesLine, true).runOperation();
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReserveOnhandQty</Name>
				<Source><![CDATA[
    protected boolean canReserveOnhandQty()
    {
        var res = super();

        return res || (kanbanRuleEvent.SourceRequirementReservation == NoYes::No &&  salesLine.Reservation != ItemReservation::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqEventProcessKanbanSalesLine</c> class.
    /// </summary>
    /// <param name="_salesLine">
    ///    A <c>SalesLine</c> table buffer to use to instantiate the class.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that indicates whether the processing is performed interactively.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanSalesLine</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanSalesLine newStandard(
        SalesLine _salesLine,
        boolean   _interactive)
    {
        ReqEventProcessKanbanSalesLine  reqEventProcess = ReqEventProcessKanbanSalesLine::construct();

        reqEventProcess.parmSalesLine(_salesLine);
        reqEventProcess.parmInteractive(_interactive);
        reqEventProcess.parmAcceptReceiveSemiFinishedKanbanRule(false);
        reqEventProcess.parmAcceptReceiveFinishedKanbanRule(true);

        return reqEventProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>