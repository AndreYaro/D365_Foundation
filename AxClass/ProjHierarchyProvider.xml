<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHierarchyProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plug-in and event handler for case Hierarchy.
/// </summary>
[ExportMetadataAttribute('CaseIHierarchy', 'Project'),ExportAttribute('Dynamics.AX.Application.CaseIHierarchy')]
class ProjHierarchyProvider implements CaseIHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcessButtonMenuItem</Name>
				<Source><![CDATA[
    public Str getProcessButtonMenuItem(HierarchyType _hierarchyType)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyType2fieldId</Name>
				<Source><![CDATA[
    public FieldId hierarchyType2fieldId(HierarchyType _hierarchyType)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyType2ParentType</Name>
				<Source><![CDATA[
    public smmActivityParentType hierarchyType2ParentType(HierarchyType _hierarchyType)
    {
        return smmActivityParentType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyType2tableId</Name>
				<Source><![CDATA[
    public RefTableId hierarchyType2tableId(HierarchyType _hierarchyType)
    {
        return tableNum(ProjTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2hierarchyType</Name>
				<Source><![CDATA[
    public HierarchyType tableId2hierarchyType(TableId _tableId)
    {
        return HierarchyType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyTypeCRM</Name>
				<Source><![CDATA[
    public boolean isHierarchyTypeCRM(HierarchyType _hierarchyType)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHierarchyTypeProject</Name>
				<Source><![CDATA[
    public boolean isHierarchyTypeProject(HierarchyType _hierarchyType)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Hierarchy_onValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate hierarchy.
    /// </summary>
    /// <param name="sender">
    /// Sending table buffer.
    /// </param>
    /// <param name="e">
    /// The event args.
    /// </param>
    [DataEventHandler(tableStr(Hierarchy), DataEventType::ValidatingWrite)]
    public static void Hierarchy_onValidatingWrite(Common _sender, DataEventArgs _e)
    {
        boolean ret = true;
        Hierarchy hierarchy = _sender;
        Hierarchy curHierarchy = Hierarchy::findByName(hierarchy.Name, false);

        validateEventArgs validateEventArgs = _e as validateEventArgs;

        if (hierarchy.isNewRecord() && curHierarchy && hierarchy.HierarchyType == HierarchyType::Project)
        {
            ret = checkFailed("@Proj:TemplateAlreadyExists");
        }

        validateEventArgs.parmValidateResult(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preDeleteHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>Hierarchy.preDeleteHierarchy()</c> event.
    /// </summary>
    /// <param name = "_eventArgs">
    /// The arguments for the event.
    /// </param>
    [SubscribesTo(tableStr(Hierarchy), delegatestr(Hierarchy, preDeleteHierarchy))]
    public static void preDeleteHierarchy(Hierarchy _hierarchy)
    {
        if (_hierarchy.HierarchyId && Project::Enabled())
        {
            PSAActivityEstimates    psaActivityEstimates;
            PSAActivitySetup        psaActivitySetup;
            HierarchyTreeTable      hierarchyTreeTable;
            smmActivities           smmActivities;

            delete_from psaActivityEstimates
                exists join smmActivities
                    where smmActivities.ActivityNumber == psaActivityEstimates.ActivityNumber
                exists join hierarchyTreeTable
                    where hierarchyTreeTable.RefRecId == smmActivities.RecId
                        && hierarchyTreeTable.HierarchyId == _hierarchy.HierarchyId;
                
            delete_from psaActivitySetup
                exists join smmActivities
                    where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber
                exists join hierarchyTreeTable
                    where hierarchyTreeTable.RefRecId == smmActivities.RecId
                        && hierarchyTreeTable.HierarchyId == _hierarchy.HierarchyId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyTypeWithTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>Hierarchy.getHierarchyTypeWithTableId()</c> event.
    /// </summary>
    /// <param name = "_eventArgs">
    /// The arguments for the event.
    /// </param>
    /// <param name = "_tableId">
    /// The table ID of the table integrating with Case.
    /// </param>
    [SubscribesTo(tableStr(Hierarchy), delegatestr(Hierarchy, getHierarchyTypeWithTableId))]
    public static void getHierarchyTypeWithTableId(CaseHierarchyTypeEventArgs _args, TableId _tableId)
    {
        if (_tableId == tableNum(ProjTable))
        {
            _args.parmHierarchyType(HierarchyType::Project);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentType2HierarchyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>Hierarchy.parentType2HierarchyType()</c> event.
    /// </summary>
    /// <param name = "_eventArgs">
    /// The arguments for the event.
    /// </param>
    /// <param name = "_tableId">
    /// The table ID of the table integrating with Case.
    /// </param>
    [SubscribesTo(tableStr(Hierarchy), delegatestr(Hierarchy, getHierarchyTypeWithParentType))]
    public static void parentType2HierarchyType(CaseHierarchyTypeEventArgs _args, smmActivityParentType _parentType)
    {
        if (_parentType == smmActivityParentType::Project)
        {
            _args.parmHierarchyType(HierarchyType::Project);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>