<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WarrantyLookupProcessingJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processing job to explode warranty groups and associations to warranty lookup tables.
/// </summary>
internal class WarrantyLookupProcessingJob extends RunBaseBatch implements BatchRetryable
{
    WarrantyGroupHeaderId groupHeaderRecId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        groupHeaderRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmGroupHeaderRecId</Name>
				<Source><![CDATA[
    public int64 parmGroupHeaderRecId(WarrantyGroupHeaderId _groupHeaderRecId = groupHeaderRecId)
    {
        groupHeaderRecId = _groupHeaderRecId;
        return groupHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Warranty:WarrantyGroupPublishingJob";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLookupGroupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lookup group data under given lookup group header.
    /// </summary>
    /// <param name = "_lookupGroupHeaderRecId">lookup group header</param>
    protected void updateLookupGroupData(RefRecId _lookupGroupHeaderRecId)
    {
        WarrantyGroupData groupData;

        WarrantyLookupGroupData lookupGroupData;
        WarrantyLookupGroupDataTemp lookupGroupDataTemp;

        NoYes yesValue = NoYes::Yes; 

        insert_recordset lookupGroupDataTemp (WarrantyProduct, DisplayOrder, ShouldBeInserted)
            select WarrantyProduct, DisplayOrder, yesValue
            from groupData
            where groupData.WarrantyGroupHeader == groupHeaderRecId
                && groupData.Status == WarrantyGroupStatusType::Published
            notexists join lookupGroupData
                where lookupGroupData.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
                    && lookupGroupData.WarrantyProduct == groupData.WarrantyProduct;

        insert_recordset lookupGroupDataTemp (WarrantyProduct, DisplayOrder, ShouldBeUpdated)
            select WarrantyProduct, DisplayOrder, yesValue
            from groupData
            where groupData.WarrantyGroupHeader == groupHeaderRecId
                && groupData.Status == WarrantyGroupStatusType::Published
            exists join lookupGroupData
                where lookupGroupData.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
                    && lookupGroupData.WarrantyProduct == groupData.WarrantyProduct
                    && lookupGroupData.DisplayOrder != groupData.DisplayOrder;

        ttsbegin;
        delete_from lookupGroupData
            where lookupGroupData.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
            notexists join groupData
                where groupData.WarrantyGroupHeader == groupHeaderRecId
                && groupData.Status == WarrantyGroupStatusType::Published
                && groupData.WarrantyProduct == lookupGroupData.WarrantyProduct;

        update_recordset lookupGroupData
            setting DisplayOrder = lookupGroupDataTemp.DisplayOrder
            join lookupGroupDataTemp
            where lookupGroupData.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
                && lookupGroupDataTemp.WarrantyProduct == lookupGroupData.WarrantyProduct
                && lookupGroupDataTemp.ShouldBeUpdated == NoYes::Yes;

        insert_recordset lookupGroupData (WarrantyLookupGroupHeader, WarrantyProduct, DisplayOrder)
            select _lookupGroupHeaderRecId, WarrantyProduct, DisplayOrder from lookupGroupDataTemp
            where lookupGroupDataTemp.ShouldBeInserted == NoYes::Yes;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLookupCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lookup categotry data under given lookup group header.
    /// </summary>
    /// <param name = "_lookupGroupHeaderRecId">lookup group header</param>
    protected void updateLookupCategory(RefRecId _lookupGroupHeaderRecId)
    {
        EcoResCategory category;
        EcoResCategory descendantCategory;
        WarrantyApplicableProduct applicableCategory;
        WarrantyLookupCategory lookupCategory;
        WarrantyLookupCategoryTemp lookupCategoryTemp;

        // processing applicable
        while select Category, Applicability from applicableCategory
            where applicableCategory.WarrantyGroupHeader == groupHeaderRecId
            && applicableCategory.Status == WarrantyGroupStatusType::Published
            && applicableCategory.Applicability == WarrantyApplicabilityYesNo::Applicable
            && applicableCategory.Category > 0
        {
            category = EcoResCategory::find(applicableCategory.Category);
            descendantCategory = category.getDescendants();

            lookupCategoryTemp.Category = category.RecId;
            lookupCategoryTemp.ShouldBeInserted = NoYes::Yes;
            lookupCategoryTemp.insert();

            while (descendantCategory)
            {
                lookupCategoryTemp.Category = descendantCategory.RecId;
                lookupCategoryTemp.insert();

                next descendantCategory;
            }
        }    
        
        // processing not applicable
        while select Category, Applicability from applicableCategory
            where applicableCategory.WarrantyGroupHeader == groupHeaderRecId
            && applicableCategory.Status == WarrantyGroupStatusType::Published
            && applicableCategory.Applicability == WarrantyApplicabilityYesNo::NotApplicable
            && applicableCategory.Category > 0
        {
            category = EcoResCategory::find(applicableCategory.Category);
            descendantCategory = category.getChildren();

            delete_from lookupCategoryTemp where lookupCategoryTemp.Category == category.RecId;

            while (descendantCategory)
            {
                delete_from lookupCategoryTemp where lookupCategoryTemp.Category == descendantCategory.RecId;
                next descendantCategory;
            }
        }

        // determine data to be inserted, setting flag here is to avoid insert while not exist / exist join the same table
        // which causes perf issue.
        update_recordset lookupCategoryTemp
            setting ShouldBeInserted = NoYes::No
            exists join lookupCategory
            where lookupCategory.Category == lookupCategoryTemp.Category
                 && lookupCategory.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId;

        // updating the delta
        ttsbegin;
        delete_from lookupCategory
            where lookupCategory.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
            notexists join lookupCategoryTemp
            where lookupCategoryTemp.Category == lookupCategory.Category;

        insert_recordset lookupCategory (WarrantyLookupGroupHeader, Category)
            select _lookupGroupHeaderRecId, Category from lookupCategoryTemp
            where lookupCategoryTemp.ShouldBeInserted == NoYes::Yes;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLookupProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lookup product data under given lookup group header.
    /// </summary>
    /// <param name = "_lookupGroupHeaderRecId">lookup group header</param>
    protected void updateLookupProduct(RefRecId _lookupGroupHeaderRecId)
    {
        WarrantyApplicableProduct applicableProduct;
        WarrantyLookupProduct lookupProduct;

        ttsbegin;
        // delete existing product lookup
        delete_from lookupProduct
            where lookupProduct.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId;

        // processing applicable
        insert_recordset lookupProduct (WarrantyLookupGroupHeader, Product, Applicability)
            select _lookupGroupHeaderRecId, Product, Applicability from applicableProduct
            where applicableProduct.WarrantyGroupHeader == groupHeaderRecId
                && applicableProduct.Status == WarrantyGroupStatusType::Published
                && applicableProduct.Product > 0;

        insert_recordset lookupProduct (WarrantyLookupGroupHeader, Product, Applicability)
            select _lookupGroupHeaderRecId, Variant, Applicability from applicableProduct
            where applicableProduct.WarrantyGroupHeader == groupHeaderRecId
                && applicableProduct.Status == WarrantyGroupStatusType::Published
            && applicableProduct.Variant > 0;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLookupChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lookup channel data under given lookup group header.
    /// </summary>
    /// <param name = "_lookupGroupHeaderRecId">lookup group header</param>
    protected void updateLookupChannel(RefRecId _lookupGroupHeaderRecId)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailWarrantyLookupChannel lookupChannel;
            RetailWarrantyLookupChannelTemp lookupChannelTemp;
            NoYes yesValue = NoYes::Yes;

            RetailWarrantyApplicableChannel applicableChannel;
            RetailChannelTable channelTable;
            OMOperatingUnit omOperatingUnit;
            OMExplodedOrganizationSecurityGraph omExplodedGraph;

            insert_recordset lookupChannelTemp (RetailChannelTable, ShouldBeInserted)
                select RecId, yesValue from channelTable
                    exists join omExplodedGraph
                        where channelTable.OMOperatingUnitID == omExplodedGraph.Organization
                    exists join applicableChannel
                        where applicableChannel.OMInternalOrganizationId == omExplodedGraph.AncestorOrganization
                            && applicableChannel.WarrantyGroupHeader == groupHeaderRecId
                            && applicableChannel.Status == WarrantyGroupStatusType::Published;

            update_recordset lookupChannelTemp
                setting ShouldBeInserted = NoYes::No
                exists join lookupChannel
                where lookupChannel.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
                && lookupChannel.RetailChannelTable == lookupChannelTemp.RetailChannelTable;

            // update lookup channel table
            ttsbegin;
            delete_from lookupChannel
                where lookupChannel.WarrantyLookupGroupHeader == _lookupGroupHeaderRecId
                notexists join lookupChannelTemp
                    where lookupChannelTemp.RetailChannelTable == lookupChannel.RetailChannelTable;

            insert_recordset lookupChannel (WarrantyLookupGroupHeader, RetailChannelTable)
                select _lookupGroupHeaderRecId, RetailChannelTable from lookupChannelTemp
                where lookupChannelTemp.ShouldBeInserted == NoYes::Yes;

            ttscommit;

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLookupData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lookup data.
    /// </summary>
    protected void updateLookupData()
    {
        WarrantyLookupGroupHeader lookupGroupHeader
            = WarrantyLookupGroupHeader::findOrCreate(groupHeaderRecId);
        
        this.updateLookupGroupData(lookupGroupHeader.RecId);
        this.updateLookupCategory(lookupGroupHeader.RecId);
        this.updateLookupProduct(lookupGroupHeader.RecId);
        this.updateLookupChannel(lookupGroupHeader.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsbegin;
        this.updateLookupData();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>