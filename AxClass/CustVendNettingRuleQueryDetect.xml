<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendNettingRuleQueryDetect</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CustVendNettingRuleQueryDetect implements INettingRuleQueryDetect
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCurrencyCodeProcessingList</Name>
				<Source><![CDATA[
    public List getCurrencyCodeProcessingList(INettingRuleExecutionPair _nettingRuleExecutionPair)
    {
        INettingRuleCurrencyCodeProvide nettingRuleCurrencyCodeProvider = _nettingRuleExecutionPair.getCurrencyCodeProvider();
        List transactionCurrencyCodeList;
        CustVendNettingPair nettingPair = CustVendNettingPair::find(_nettingRuleExecutionPair.getPairRecId());
        switch (nettingRuleCurrencyCodeProvider.getCurrencyCodeRange())
        {
            case CustVendNettingRuleExecutionPairCurrencyCodeRange::Eq:
                transactionCurrencyCodeList = this.getCurrenyCodeListBySpecifiedValue(nettingRuleCurrencyCodeProvider);
                break;
            case CustVendNettingRuleExecutionPairCurrencyCodeRange::Neq:
                transactionCurrencyCodeList = this.getCurrenyCodeListBySpecifiedExcludeValue(nettingRuleCurrencyCodeProvider, nettingPair);
                break;
            case CustVendNettingRuleExecutionPairCurrencyCodeRange::All:
                transactionCurrencyCodeList = this.getCurrenyCodeListByNotSpecifiedValue(nettingRuleCurrencyCodeProvider, nettingPair);
                break;
            default:
                transactionCurrencyCodeList = new List(Types::String);
                break;
        }

        return transactionCurrencyCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrenyCodeListBySpecifiedValue</Name>
				<Source><![CDATA[
    private List getCurrenyCodeListBySpecifiedValue(INettingRuleCurrencyCodeProvide _currencyCodeProvide)
    {
        List transactionCurrencyCodeList = new List(Types::String);
        if (_currencyCodeProvide.getCurrencyCode() != '')
        {
            transactionCurrencyCodeList.addEnd(_currencyCodeProvide.getCurrencyCode());
        }

        return transactionCurrencyCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrenyCodeListBySpecifiedExcludeValue</Name>
				<Source><![CDATA[
    private List getCurrenyCodeListBySpecifiedExcludeValue(INettingRuleCurrencyCodeProvide _currencyCodeProvide, CustVendNettingPair _custvendNettingPair)
    {
        List transactionCurrencyCodeList = new List(Types::String);
        if (_currencyCodeProvide.getCurrencyCode() != '')
        {
            Set creditCurrencyCodeSet = this.getCurrencyCodeListForAccount(_custvendNettingPair.CreditAccountNum, _custvendNettingPair.CreditAccountType, _custvendNettingPair.CreditCompany);
            creditCurrencyCodeSet.remove(_currencyCodeProvide.getCurrencyCode());
            Set debitCurrencyCodeSet = this.getCurrencyCodeListForAccount(_custvendNettingPair.DebitAccountNum, _custvendNettingPair.DebitAccountType, _custvendNettingPair.DebitCompany);
            SetEnumerator debitCurrencyCodeEnumerator = debitCurrencyCodeSet.getEnumerator();
            while (debitCurrencyCodeEnumerator.moveNext())
            {
                if (creditCurrencyCodeSet.in(debitCurrencyCodeEnumerator.current()))
                {
                    transactionCurrencyCodeList.addEnd(debitCurrencyCodeEnumerator.current());
                }
            }
        }

        return transactionCurrencyCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrenyCodeListByNotSpecifiedValue</Name>
				<Source><![CDATA[
    private List getCurrenyCodeListByNotSpecifiedValue(INettingRuleCurrencyCodeProvide _currencyCodeProvide, CustVendNettingPair _custvendNettingPair)
    {
        List transactionCurrencyCodeList = new List(Types::String);

        Set creditCurrencyCodeSet = this.getCurrencyCodeListForAccount(_custvendNettingPair.CreditAccountNum, _custvendNettingPair.CreditAccountType, _custvendNettingPair.CreditCompany);
        Set debitCurrencyCodeSet = this.getCurrencyCodeListForAccount(_custvendNettingPair.DebitAccountNum, _custvendNettingPair.DebitAccountType, _custvendNettingPair.DebitCompany);
        SetEnumerator debitCurrencyCodeEnumerator = debitCurrencyCodeSet.getEnumerator();
        while (debitCurrencyCodeEnumerator.moveNext())
        {
            if (creditCurrencyCodeSet.in(debitCurrencyCodeEnumerator.current()))
            {
                transactionCurrencyCodeList.addEnd(debitCurrencyCodeEnumerator.current());
            }
        }
        return transactionCurrencyCodeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCodeListForAccount</Name>
				<Source><![CDATA[
    private Set getCurrencyCodeListForAccount(CustVendAC _accountNum, LedgerJournalACType _accountType, CompanyId _company)
    {
        Set currencyCode = new Set(Types::String);

        ModuleCustVend moduleCustVend;
        if (_accountType == LedgerJournalACType::Vend)
        {
            moduleCustVend = ModuleCustVend::Vend;
        }
        else if (_accountType == LedgerJournalACType::Cust)
        {
            moduleCustVend = ModuleCustVend::Cust;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        changecompany(_company)
        {
            CustVendTrans custVendTrans = CustVendTrans::getEmptyTableBuffer(moduleCustVend);
            CustVendTransOpen custVendTransOpen = CustVendTransOpen::getEmptyTableBuffer(moduleCustVend);

            while select CurrencyCode from custVendTrans
                group by custVendTrans.CurrencyCode
                exists join custVendTransOpen
                where custVendTrans.RecId == custVendTransOpen.RefRecId
                    && custVendTrans.AccountNum == _accountNum
            {
                currencyCode.add(custVendTrans.CurrencyCode);
            }
        }

        return currencyCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>