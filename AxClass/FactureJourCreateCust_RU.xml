<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureJourCreateCust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureJourCreateCust_RU extends FactureJourCreate_RU implements BatchRetryable
{
    LanguageId  languageId;
    boolean     mixedLanguages;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctFactureNumRef</Name>
				<Source><![CDATA[
    private NumberSequenceReference correctFactureNumRef(UseOriginalDocumentAsFacture_RU _useOriginalDocumentAsFacture_RU = this.parmUseOriginalDocumentAsFacture())
    {
        return _useOriginalDocumentAsFacture_RU ? CustParameters::numRefOrigAsFactureCorrectExternalId_RU() : CustParameters::numRefCorrectFactureExternalId_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureNumRef</Name>
				<Source><![CDATA[
    private NumberSequenceReference factureNumRef(UseOriginalDocumentAsFacture_RU _useOriginalDocumentAsFacture_RU = this.parmUseOriginalDocumentAsFacture())
    {
        NumberSequenceReference ret;
        if (_useOriginalDocumentAsFacture_RU)
        {
            ret = CustParameters::numRefOrigDocAsFactureExternalId_RU();
        }
        else
        {
            ret = CustParameters::numRefFactureExternalId_RU();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendInvoiceJourByRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour findCustVendInvoiceJourByRecId(RefRecId _recId)
    {
        return CustInvoiceJour::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendInvoiceTransByRecId</Name>
				<Source><![CDATA[
    protected CustVendInvoiceTrans findCustVendInvoiceTransByRecId(RefRecId _recId)
    {
        return CustInvoiceTrans::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceJourByTrans</Name>
				<Source><![CDATA[
    protected Common findInvoiceJourByTrans(Common _trans)
    {
        CustInvoiceTrans localCustInvoiceTrans;
        ;

        localCustInvoiceTrans = _trans as CustInvoiceTrans;

        return CustInvoiceJour::findFromCustInvoiceTrans(localCustInvoiceTrans.SalesId,
                                                         localCustInvoiceTrans.InvoiceId,
                                                         localCustInvoiceTrans.InvoiceDate,
                                                         localCustInvoiceTrans.NumberSequenceGroup,
                                                         true,
                                                         ! localCustInvoiceTrans.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceTransByFacture</Name>
				<Source><![CDATA[
    protected Common findInvoiceTransByFacture()
    {
        return CustInvoiceTrans::findFacture_RU(factureTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournal</Name>
				<Source><![CDATA[
    protected void initJournal()
    {
        DictType               dictType;
        NumberSequenceTable    numTable, numTableExternal;
        boolean                error = false;
        NumberSequenceCode     numberSequenceCode;
        RecId                  numberSequenceId;
        NumberSeqScope         scope   = NumberSeqScopeFactory::createDefaultScope();

        numberSeq = NumberSeq::newGetNum(CustParameters::numRefCustFactureId_RU(),false,true);

        if (! numberSeq)
        {
            warning(strfmt("@SYS53911", "@GLS106861", "@SYS25196"));
            error    = true;
        }
        else
        {
            numTable = numberSeq.parmNumTableNum(numTable);
            if (numTable.Manual)
            {
                dictType = new DictType(extendedtypenum(CustFactureId_RU));
                warning(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                error    = true;
            }
        }

        super();

        if (correctionType == FactureCorrectionType_RU::Revision)
        {
            factureJour.FactureExternalId = correctedFactureExtId;
        }
        else
        {
            if (this.parmUseOriginalDocumentAsFacture() && factureJour.FactureExternalId && correctionType == FactureCorrectionType_RU::Unknown)
            {
                factureExtIdNumSeq = '';
            }
            else
            {
                if (! factureExtIdNumSeq)
                {
                    factureExtIdNumSeq = InventProfileTypeSetup_RU::find(factureJour.InventProfileType).NumberSequenceGroupId;
                }

                if (factureExtIdNumSeq)
                {
                    numberSequenceId = correct ?
                                        NumberSequenceGroupRef::findNaturalKey(this.correctFactureNumRef().NumberSequenceDatatype,
                                                                            scope.getId(),
                                                                            factureExtIdNumSeq).NumberSequenceId :
                                        NumberSequenceGroupRef::findNaturalKey(this.factureNumRef().NumberSequenceDatatype,
                                                                            scope.getId(),
                                                                            factureExtIdNumSeq).NumberSequenceId;

                    numberSequenceCode = NumberSequenceTable::find(numberSequenceId).NumberSequence;
                }

                if (numberSequenceCode)
                {
                    externalNumberSeq = NumberSeq_RU::newGetNumFromId(numberSequenceId, false, true);
                }
                else
                {
                    externalNumberSeq = NumberSeq_RU::newGetNum(correct                                             ?
                                                            this.correctFactureNumRef() :
                                                            this.factureNumRef(),
                                                            false,
                                                            true);
                }

                if (! externalNumberSeq)
                {
                    dictType = new DictType(extendedtypenum(FactureExternalId_RU));
                    warning(strfmt("@SYS53911", dictType.label(), "@SYS25196"));
                    error    = true;
                }
                else
                {
                    numTableExternal = externalNumberSeq.parmNumTableNum(numTableExternal);
                    if (numTableExternal.Manual)
                    {
                        dictType = new DictType(extendedtypenum(FactureExternalId_RU));
                        warning(strfmt("@GLS104926", dictType.label(), "@SYS25196"));
                        error    = true;
                    }
                    if (! numTableExternal.Continuous)
                    {
                        dictType = new DictType(extendedtypenum(FactureExternalId_RU));
                        warning(strfmt("@SYS26207", strfmt("@SYS70938", numTableExternal.NumberSequence, dictType.label())));
                        error    = true;
                    }

                    if (! error && mustBeUpdated && ! factureExtId) // factureExtId can be reused ID of deleted facture
                    {
                        factureJour.FactureExternalId = externalNumberSeq.num();
                    }

                    if (! error && factureExtId)
                    {
                        if (NumberSequenceList::exist(numTableExternal.RecId, NumStatus::Free, factureExtId))
                        {
                            if (mustBeUpdated)
                            {
                                NumberSeq_RU externalNumberSeq_RU = externalNumberSeq;
                                externalNumberSeq_RU.useNumFromList(numTableExternal, factureExtId);
                            }
                            factureJour.FactureExternalId = factureExtId;
                        }
                        else
                        {
                            warning(strfmt("@GLS104927", factureExtId, tableid2pname(tablenum(NumberSequenceList)), tablestr(NumberSequenceList)));
                            error = true;
                        }
                    }
                }
            }
        }

        if (error)
        {
            throw error("@GLS106933");
        }

        factureJour.FactureId             = numberSeq.num();

        factureJour.Module                = FactureModule_RU::Cust;
        factureJour.NumberSequenceGroupId = factureExtIdNumSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        TaxTable    taxTable;
        super();

        factureTrans = holder.factureTrans();

        select firstonly recid from  factureTrans
            where factureTrans.FactureId == factureJour.FactureId   &&
                  factureTrans.Module    == factureJour.Module
            join recid from taxTable
                where taxTable.TaxCode      == factureTrans.TaxCode &&
                      taxTable.TaxType_W    == TaxType_W::VATZero   &&
                      taxTable.DomesticMarketTaxCode_RU;

        factureJour.ExportProcessing = factureTrans.RecId ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public FactureModule_RU module()
    {
        return FactureModule_RU::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLanguageId</Name>
				<Source><![CDATA[
    public LanguageId parmLanguageId(LanguageId _languageId = languageId)
    {
        LanguageId ret;

        if (mixedLanguages)
        {
            ret = CustTable::find(factureJour.CustVendInvoiceAccount).languageId();
            ret = ret ? ret : CompanyInfo::languageId();
            return ret;
        }

        if (languageId && _languageId && _languageId != languageId)
        {
            mixedLanguages = true;
        }
        languageId = _languageId;
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceOrder</Name>
				<Source><![CDATA[
    protected void updateSourceOrder(CustVendInvoiceJour _jour)
    {
        SalesTable      table;
        CustInvoiceJour localCustInvoiceJour = _jour;

        ttsbegin;

        table = localCustInvoiceJour.salesTable(true);
        if (table && table.DocumentStatus != DocumentStatus::Facture_RU)
        {
            table.DocumentStatus = DocumentStatus::Facture_RU;
            table.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>