<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CollectionsBIHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CollectionsBIHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSystemCurrencyAmount</Name>
				<Source><![CDATA[
        /// <summary>
    /// Converts the transaction amount to the system level defined currency amount.
    /// </summary>
    /// <param name="_viewName">
    /// The name of the view that contains the field to use for comparison.
    /// </param>
    /// <param name="_dataSourceName">
    /// The name of the data source on the view that contains the field to use for comparison.
    /// </param>
    /// <param name="_transactionCurrencyAmountFieldName">
    /// The name of the transaction amount field on the view to use for comparison.
    /// </param>
    /// <param name="_transactionCurrencyCodeFieldName">
    /// The name of the transaction currency code field on the view to use for comparison.
    /// </param>
    /// <param name="_exchangeRateTable">
    /// The name of the table containing the exchange to use for comparison. 
    /// </param>
    /// <param name="_exchangeRate">
    /// The name of the exchange rate field to use for comparison.
    /// </param>
    /// <param name="_systemParameters">
    /// The name of the table containing the system currency code to use for comparison.
    /// </param>
    /// <param name="_systemCurrencyCode">
    /// The name of the system currency code being translated to use for comparison.
    /// </param>
    /// <returns>
    /// A string expression formatted as a conditional sql expression.
    /// </returns>
    /// <remarks>
    /// If the transaction currency code matches the system currency code defined in
    /// the <c>SystemParameters</c> table, the amount is not translated; otherwise, the
    /// amount is translated based on the system currency code.
    /// </remarks>
    public static str calculateSystemCurrencyAmount(
        Name _viewName,
        Name _dataSourceName,
        Name _accountingCurrencyAmountFieldName,
        Name _currencyDataSource,
        Name _accountingCurrencyCodeFieldName,
        Name _exchangeRateTable = tablestr(ExchangeRateEffectiveViewToday),
        Name _exchangeRate = fieldStr(ExchangeRateEffectiveViewToday, CrossRate),
        Name _systemParameters = tablestr(SystemParameters),
        Name _systemCurrencyCode = fieldStr(SystemParameters, SystemCurrencyCode))
    {
        List accountingMatchSystemCurrency = new List(Types::String);

        accountingMatchSystemCurrency.addEnd(SysComputedColumn::equalExpression(
            SysComputedColumn::comparisonField(
                _viewName,
                _currencyDataSource,
                _accountingCurrencyCodeFieldName
            ),
            SysComputedColumn::comparisonField(
                _viewName,
                _systemParameters,
                _systemCurrencyCode))
        );

        return SysComputedColumn::if(
            SysComputedColumn::and(accountingMatchSystemCurrency),
            SysComputedColumn::returnField(
                _viewName,
                _dataSourceName,
                _accountingCurrencyAmountFieldName),
            SysComputedColumn::divide(
                SysComputedColumn::multiply(
                    SysComputedColumn::returnField(
                        _viewName,
                        _dataSourceName,
                        _accountingCurrencyAmountFieldName),
                    SysComputedColumn::returnField(
                        _viewName,
                        _exchangeRateTable,
                        _exchangeRate)),
                SysComputedColumn::returnLiteral(100))
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDSOforPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compute the DSO value for a given period of days
    /// </summary>
    /// <param name = "_viewName">
    /// The name of the view that contains the field to use for comparison.
    /// </param>
    /// <param name = "_dataSourceName">
    /// The name of the datasource on the view that contains the field to use for comparison.
    /// </param>
    /// <param name = "_accountsReceivables">
    /// The total amount of credit for accounts receivables. 
    /// </param>
    /// <param name = "_creditSales">
    /// The total amount of accounts receivables for a given period.
    /// </param>
    /// <param name = "_periodOfDays">
    /// The number of days to calculate the DSO period.
    /// </param>
    /// <returns>
    /// The computed column containing the DSO for <c>_periodOfDays</c>
    /// </returns>
    public static str calculateDSOforPeriod(
        Name _viewName,
        Name _dataSourceName,
        Name _accountsReceivables,
        Name _creditSales,
        str _periodOfDays)
    {
        return SysComputedColumn::if(
            SysComputedColumn::equalExpression(
                SysComputedColumn::returnField(
                    _viewName,
                    _dataSourceName,
                    _creditSales),
                '0'),
                '0',
                SysComputedColumn::multiply(
                SysComputedColumn::divide(
                    SysComputedColumn::returnField(
                        _viewName,
                        _dataSourceName,
                        _accountsReceivables),
                    SysComputedColumn::returnField(
                        _viewName,
                        _dataSourceName,
                        _creditSales)), 
                    _periodOfDays));
    }

]]></Source>
			</Method>
			<Method>
				<Name>balance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the balance for <c>CustTrans</c> to store on the view.
    /// </summary>
    /// <param name = "_viewName">
    /// The name of the view that contains the field to use for comparison.
    /// </param>
    /// <returns>
    /// The computed column for <c>CustTrans</c> balance for a transaction.
    /// </returns>
    public static str balance(Name _viewName)
    {
        return SysComputedColumn::if(
            SysComputedColumn::isNullExpression(
                SysComputedColumn::comparisonField(
                    _viewName,
                    tableStr(CustTransOpen),
                    fieldStr(CustTransOpen, AmountMST))),
            //If no CustTransOpen, return CustTrans.AmountMST converted to system currency.
        CollectionsBIHelper::calculateSystemCurrencyAmount(
                _viewName,
                tableStr(CustTrans),
                fieldStr(CustTrans, AmountMst),
                tableStr(Ledger),
                fieldStr(Ledger, AccountingCurrency)),

            SysComputedColumn::if(
                SysComputedColumn::equalExpression(
                    SysComputedColumn::comparisonField(
                            _viewName,
                            tableStr(CustTrans),
                            fieldStr(CustTrans, AmountMST)),
                    SysComputedColumn::comparisonField(
                            _viewName,
                            tableStr(CustTransOpen),
                            fieldStr(CustTransOpen, AmountMST))),
                    //If CustTrans.AmountMST and CustTransOpen.AmountMST are equal
                    //return CustTrans.AmountMST converted to system currency.
                    CollectionsBIHelper::calculateSystemCurrencyAmount(
                        _viewName,
                        tableStr(CustTrans),
                        fieldStr(CustTrans, AmountMst),
                        tableStr(Ledger),
                        fieldStr(Ledger, AccountingCurrency)),
                    //If CustTrans.AmountMST and CustTransOpen.AmountMST are different,
                    //return CustTransOpen.AmountMST convereted to system currency.
                    CollectionsBIHelper::calculateSystemCurrencyAmount(
                            _viewName,
                            tableStr(CustTransOpen),
                            fieldStr(CustTransOpen, AmountMst),
                            tableStr(Ledger),
                            fieldStr(Ledger, AccountingCurrency))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>prior30Days</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the date that is 30 days prior to today.
    /// </summary>
    /// <param name = "_viewName">
    /// The name of the view that contains the field to use for comparison.
    /// </param>
    /// <returns>Date 30 days prior to today.</returns>
    public static str prior30Days(Name _viewName)
    {
        return SysComputedColumn::getDateAdd(
            '-30',
            SysComputedColumn::comparisonField(
                _viewName,
                tableStr(ExchangeRateEffectiveViewToday),
                fieldStr(ExchangeRateEffectiveViewToday, GregorianDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDSOForNDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current transaction should be included in DSO calculation
    /// </summary>
    /// <param name = "_numDays">Number of days for DSO period.</param>
    /// <param name = "_viewName">The name of the view that contains the field to use for comparison.</param>
    /// <param name = "_dataSourceName">The name of the datasource on the view that contains the field to use for comparison.</param>
    /// <param name = "_dateFieldName">The transaction date for the invoice.</param>
    /// <param name = "_currentDateDataSource">The name of the datasource on the view that contains the date field to use for comparison.</param>
    /// <param name = "_currentDateFieldName">The current date.</param>
    /// <returns>Yes if transaction should be included in DSO calculation</returns>
    public static str isDSOForNDays(
        int _numDays,
        Name _viewName,
        Name _dataSourceName,
        Name _dateFieldName,
        Name _currentDateDataSource = tableStr(ExchangeRateEffectiveViewToday),
        Name _currentDateFieldName = fieldStr(ExchangeRateEffectiveViewToday, GregorianDate))
    {
        return SysComputedColumn::if(
            SysComputedColumn::and2(
                SysComputedColumn::compareExpressions(
                    SysComputedColumn::comparisonField(
                        _viewName,
                        _dataSourceName,
                        _dateFieldName),
                    '>=',
                    CollectionsBIHelper::dateAddNDays(_numDays, _viewName, _currentDateDataSource, _currentDateFieldName)),
                SysComputedColumn::compareExpressions(
                    SysComputedColumn::comparisonField(
                        _viewName,
                        _dataSourceName,
                        _dateFieldName),
                    '<=',
                    SysComputedColumn::comparisonField(
                        _viewName,
                        _currentDateDataSource,
                        _currentDateFieldName))),
            SysComputedColumn::returnLiteral(1),
            SysComputedColumn::returnLiteral(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateAddNDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add n number of days to a date.
    /// </summary>
    /// <param name = "_numDays">The number of days to add to a date.</param>
    /// <param name = "_viewName">The name of the view that contains the field to use for comparison.</param>
    /// <param name = "_dateDataSource">The name of the datasource on the view that contains the date field to use for comparison.</param>
    /// <param name = "_dateFieldName">The date field to add _numDays to.</param>
    /// <returns>The date with _numDays added to the date field.</returns>
    public static str dateAddNDays(
        int _numDays, 
        Name _viewName,
        Name _dateDataSource = tableStr(ExchangeRateEffectiveViewToday),
        Name _dateFieldName = fieldStr(ExchangeRateEffectiveViewToday, GregorianDate))
    {
        return SysComputedColumn::getDateAdd(
            SysComputedColumn::returnLiteral(_numDays),
            SysComputedColumn::comparisonField(
                _viewName,
                _dateDataSource,
                _dateFieldName));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>