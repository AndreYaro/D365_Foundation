<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSalesTaxPaymentExcisePosting_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Posts taxTrans for PLA and updates PLA register.
/// </summary>
public class TaxSalesTaxPaymentExcisePosting_IN extends TaxSalesTaxPaymentPosting_IN
{
    Num         PLANumberSequence;
    Num         RG23ANumberSequence;
    Num         RG23CNumberSequence;

    boolean     getPLAAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExciseNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Excise number sequence to post Excise Register
    /// </summary>
    /// <param name="_exciseReference">
    /// The ExciseReference_IN
    /// </param>
    /// <returns>
    /// The number sequence that is used to post Excise Register
    /// </returns>
    private Num getExciseNumberSequence(ExciseReference_IN _exciseReference)
    {
        ExciseNumSequenceRef_IN     numSeqRef;
        Num                         numSeq;

        numSeqRef = ExciseNumSequenceRef_IN::findByRegistrationNumber(profile.parmTaxRegistrationNumber().RecId, _exciseReference);
        numSeq = numberSeq::newGetNumFromCode(NumberSequenceTable::find(numSeqRef.NumberSequenceTable).NumberSequence, NumberSeqScopeFactory::createDefaultScope(), true, false).num();

        Debug::assert(numSeq != '');

        return numSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processExciseRGRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use handler to process the scenario of Excise RG register
    /// </summary>
    /// <param name="_historyDetail">
    /// The TaxSalesTaxPaymentHistoryDetails_IN that is used to be processed
    /// </param>
    /// <param name="_tableNode">
    /// The TaxReportHierarchyNode_IN object
    /// </param>
    private void processExciseRGRegister(TaxSalesTaxPaymentHistoryDetails_IN _historyDetail,
                                         TaxReportHierarchyNode_IN           _tableNode)
    {
        TaxReportPostingExciseRGUpdateHandler_IN    exciseRGHandler;

        if (_tableNode.RefEnumValue == ExciseRecordType_IN::RG23A)
        {
            if (RG23ANumberSequence == '')
            {
                RG23ANumberSequence  = this.getExciseNumberSequence(ExciseReference_IN::RG23AII);
            }
        }
        else if (_tableNode.RefEnumValue == ExciseRecordType_IN::RG23C)
        {
            if (RG23CNumberSequence == '')
            {
                RG23CNumberSequence  = this.getExciseNumberSequence(ExciseReference_IN::RG23CII);
            }
        }

        if (_historyDetail.RecoverableAmountToSettle != 0 || _historyDetail.PreSettledRecAmountMST != 0)
        {
            exciseRGHandler = new TaxReportPostingExciseRGUpdateHandler_IN();
            exciseRGHandler.parmPostToRegisterRecoverable(NoYes::Yes);
            exciseRGHandler.parmBalance(_historyDetail.RecoverableAmountToSettle + _historyDetail.PreSettledRecAmountMST);
            exciseRGHandler.parmRG23ANumberSequence(RG23ANumberSequence);
            exciseRGHandler.process(this.parmTaxSalesTaxPaymentDoc(), _historyDetail);
        }

        if (_historyDetail.PayableAmountToSettle != 0 || _historyDetail.PreSettledPayAmountMST != 0)
        {
            exciseRGHandler = new TaxReportPostingExciseRGUpdateHandler_IN();
            exciseRGHandler.parmPostToRegisterPayable(NoYes::Yes);
            exciseRGHandler.parmBalance(_historyDetail.PayableAmountToSettle + _historyDetail.PreSettledPayAmountMST);
            exciseRGHandler.parmRG23ANumberSequence(RG23ANumberSequence);
            exciseRGHandler.parmRG23CNumberSequence(RG23CNumberSequence);
            exciseRGHandler.process(this.parmTaxSalesTaxPaymentDoc(), _historyDetail);
        }

        if (_historyDetail.Balance > 0)
        {
            exciseRGHandler = new TaxReportPostingExciseRGUpdateHandler_IN();
            exciseRGHandler.parmPostToRegisterRecoverable(NoYes::Yes);
            exciseRGHandler.parmBalance(_historyDetail.Balance * -1);
            exciseRGHandler.parmRG23ANumberSequence(RG23ANumberSequence);
            exciseRGHandler.parmRG23CNumberSequence(RG23CNumberSequence);
            exciseRGHandler.process(this.parmTaxSalesTaxPaymentDoc(), _historyDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerVoucher</Name>
				<Source><![CDATA[
        protected void processLedgerVoucher()
    {
        TaxSalesTaxPaymentHistoryDetails_IN     canPostHistoryDetail, historyDetail;
        TaxReportHierarchyNode_IN               canPostTableNode, tableNode;TaxAmount                               totalTaxAmount;
        TaxReportPostingExcisePLAPaymHandler_IN plaPaymentHandler;

        while select TaxSalesTaxPaymentHistory_IN, TaxRegistrationNumbers_IN, TaxReportHierarchyNode_IN from canPostHistoryDetail
            order by canPostTableNode.Level asc
                where canPostHistoryDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                   && canPostHistoryDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
            join  canPostTableNode
                where canPostHistoryDetail.TaxReportHierarchyNode_IN == canPostTableNode.RecId
                &&    canPostTableNode.CanPost == NoYes::Yes
        {
            totalTaxAmount = 0;

            //Post each node that has balance under the tax component node
            while select historyDetail
                order by tableNode.Level desc
                    where historyDetail.TaxSalesTaxPaymentHistory_IN == history.RecId
                    &&    historyDetail.TaxRegistrationNumbers_IN == profile.parmTaxRegistrationNumber().RecId
                    &&    (historyDetail.RecoverableAmountToSettle != 0 ||
                           historyDetail.PayableAmountToSettle != 0 ||
                           historyDetail.PreSettledRecAmountMST != 0 ||
                           historyDetail.PreSettledPayAmountMST != 0)
                join  tableNode
                    where historyDetail.TaxReportHierarchyNode_IN == tableNode.RecId
                    &&    tableNode.LeftId >= canPostTableNode.LeftId
                    &&    tableNode.RightId <= canPostTableNode.RightId
                    &&    tableNode.TaxReportHierarchyVersion_IN == canPostTableNode.TaxReportHierarchyVersion_IN
            {
                this.parmHasLedgerVoucherTrans(true);

                if (tableNode.RecId == canPostTableNode.RecId || tableNode.CanPost == NoYes::No)
                {
                    //Post balance
                    if (historyDetail.Balance <= 0)
                    {
                        this.processTaxAmount(historyDetail);
                        this.processExciseRGRegister(historyDetail, tableNode);
                        totalTaxAmount += historyDetail.Balance;
                    }
                    else
                    {
                        //ExcessCarryForward
                        this.processExcessRecAmount(historyDetail);
                        this.processExciseRGRegister(historyDetail, tableNode);
                    }
                }
            }

            //Post taxTrans for PLA and update PLA register
            if (totalTaxAmount < 0)
            {
                if (PLANumberSequence == '')
                {
                    PLANumberSequence = this.getExciseNumberSequence(ExciseReference_IN::PLA);
                }
                plaPaymentHandler = new TaxReportPostingExcisePLAPaymHandler_IN();
                plaPaymentHandler.parmPLANumberSequence(PLANumberSequence);
                plaPaymentHandler.parmBalance(totalTaxAmount * -1);
                plaPaymentHandler.parmTaxComponentNode(canPostTableNode);
                plaPaymentHandler.process(taxPaymentDoc, historyDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c> TaxSalesTaxPaymentExcisePosting_IN </c>.
    /// </summary>
    /// <param name="_history">
    /// The instance of <c> TaxSalesTaxPaymentHistory_IN </c>.
    /// </param>
    /// <param name="_profile">
    /// The instance of <c> TaxSalesTaxPaymentProfile_IN </c>.
    /// </param>
    /// <returns>
    /// A new instance of <c> TaxSalesTaxPaymentExcisePosting_IN </c>.
    /// </returns>
    public static TaxSalesTaxPaymentExcisePosting_IN construct(TaxSalesTaxPaymentHistory_IN _history,
                                                               TaxSalesTaxPaymentProfile_IN _profile)
    {
        TaxSalesTaxPaymentExcisePosting_IN paymentPosting = new TaxSalesTaxPaymentExcisePosting_IN(_history, _profile);

        return paymentPosting;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>