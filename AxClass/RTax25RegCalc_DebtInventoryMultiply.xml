<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_DebtInventoryMultiply</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25RegCalc_DebtInventoryMultiply extends RunBaseBatch implements BatchRetryable
{
    CustVend_RU                 custVend;
    RecId                       recIdFrom, recIdTo;
    RTax25RegisterLineNum64     startCount, recordCount;
    RefRecId                    journalTransRecId;
    RTax25RegisterJournalTrans  registerJournalTrans;
    RTax25Query                 regQuery;
    RTax25RegisterTransMap      regTrans;
    TransDate                   dateTo;
    RTax25RegisterType          registerType;
    TransDate                   modelCalcDate;
    TransDate                   modelDateFrom;
    RTax25DebtModel             rTax25DebtModel;
 
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        startCount,
        journalTransRecId,
        inBatch,
        custVend,
        recIdFrom,
        recIdTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCustBadDebts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcCustBadDebts()
    {
        CustTrans custTrans;
        ;

        while select custTrans
            order by RecId asc
            where custTrans.TransDate    < dateTo + 1                                         &&
                  custTrans.TransType    != LedgerTransType::ExchAdjustment                   &&
                  custTrans.TransType    != LedgerTransType::AdvanceAdjustment_RU             &&
                  custTrans.TransType    != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                  custTrans.TransType    != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                  custTrans.TransType    != LedgerTransType::Tax                              &&
                  custTrans.Voucher      != custTrans.LastSettleVoucher                       &&
                  ((registerType         != RTax25RegisterType::DebtDebitInventory            &&
                    registerType         != RTax25RegisterType::DebtDebitInventoryRAP)        ||
                   custTrans.AmountCur   > 0)                                                 &&
                  (registerType          != RTax25RegisterType::DebtCreditInventory           ||
                   (custTrans.AmountCur  < 0 && custTrans.Prepayment))                        &&
                  (! recIdFrom                                                                ||
                   (custTrans.RecId      >= recIdFrom                                         &&
                    custTrans.RecId      <= recIdTo))
        {
            progress.setText(strfmt("@SYS66092", custTrans.Invoice, custTrans.Voucher));
            this.processCustVendTrans(custTrans);
            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcVendBadDebts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcVendBadDebts()
    {
        VendTrans   vendTrans;
        ;

        while select vendTrans
            order by RecId asc
            where vendTrans.TransDate    < dateTo + 1                                         &&
                  vendTrans.TransType    != LedgerTransType::ExchAdjustment                   &&
                  vendTrans.TransType    != LedgerTransType::AdvanceAdjustment_RU             &&
                  vendTrans.TransType    != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                  vendTrans.TransType    != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                  vendTrans.TransType    != LedgerTransType::Tax                              &&
                  vendTrans.Voucher      != vendTrans.LastSettleVoucher                       &&
                  ((registerType         != RTax25RegisterType::DebtDebitInventory            &&
                    registerType         != RTax25RegisterType::DebtDebitInventoryRAP)        ||
                   (vendTrans.AmountCur  > 0))                                                &&
                  (registerType          != RTax25RegisterType::DebtCreditInventory           ||
                   vendTrans.AmountCur   < 0)                                                 &&
                  (! recIdFrom                                                                ||
                   (vendTrans.RecId      >= recIdFrom                                         &&
                    vendTrans.RecId      <= recIdTo))
        {
            progress.setText(strfmt("@SYS66092", vendTrans.Invoice, vendTrans.Voucher));
            this.processCustVendTrans(vendTrans);
            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean initRunItem()
    {
        CustTrans   custTrans;
        VendTrans   vendTrans;

        if (! this.parmInBatch() && (! modelCalcDate || modelCalcDate == dateTo))
        {
            if (custVend != CustVend_RU::Vend)
            {
                select count(RecId) from custTrans
                    where custTrans.TransDate    < dateTo + 1                                         &&
                          custTrans.TransType    != LedgerTransType::ExchAdjustment                   &&
                          custTrans.TransType    != LedgerTransType::AdvanceAdjustment_RU             &&
                          custTrans.TransType    != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                          custTrans.TransType    != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                          custTrans.TransType    != LedgerTransType::Tax                              &&
                          custTrans.Voucher      != custTrans.LastSettleVoucher                       &&
                          ((registerType         != RTax25RegisterType::DebtDebitInventory            &&
                            registerType         != RTax25RegisterType::DebtDebitInventoryRAP)        ||
                           custTrans.AmountCur   > 0)                                                 &&
                          (registerType          != RTax25RegisterType::DebtCreditInventory           ||
                           (custTrans.AmountCur  < 0 && custTrans.Prepayment))                        &&
                          (! recIdFrom                                                                ||
                           (custTrans.RecId      >= recIdFrom                                         &&
                            custTrans.RecId      <= recIdTo));
            }

            if (custVend != CustVend_RU::Cust)
            {
                select count(RecId) from vendTrans
                    where vendTrans.TransDate    < dateTo + 1                                         &&
                          vendTrans.TransType    != LedgerTransType::ExchAdjustment                   &&
                          vendTrans.TransType    != LedgerTransType::AdvanceAdjustment_RU             &&
                          vendTrans.TransType    != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                          vendTrans.TransType    != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                          vendTrans.TransType    != LedgerTransType::Tax                              &&
                          vendTrans.Voucher      != vendTrans.LastSettleVoucher                       &&
                          ((registerType         != RTax25RegisterType::DebtDebitInventory            &&
                            registerType         != RTax25RegisterType::DebtDebitInventoryRAP)        ||
                           (vendTrans.AmountCur  > 0))                                                &&
                          (registerType          != RTax25RegisterType::DebtCreditInventory           ||
                           vendTrans.AmountCur   < 0)                                                 &&
                          (! recIdFrom                                                                ||
                           (vendTrans.RecId      >= recIdFrom                                         &&
                            vendTrans.RecId      <= recIdTo));
            }

            recordCount = custTrans.RecId + vendTrans.RecId;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterFooter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertRegisterFooter()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRegisterHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertRegisterHeader()
    {
        regQuery.addHeaderRecord(0,
                                 conNull(),
                                 0,
                                 strfmt("@SYS76498", "@SYS25005", dateTo + 1),
                                 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTransRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmJournalTransRecId(RefRecId _journalTransRecId = journalTransRecId)
    {
        ;
        journalTransRecId = _journalTransRecId;
        return journalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecIdRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmRecIdRange(CustVend_RU  _custVend,
                               RecId        _recIdFrom,
                               RecId        _recIdTo)
    {
        ;
        custVend  = _custVend;
        recIdFrom = _recIdFrom;
        recIdTo   = _recIdTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartCount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterLineNum64 parmStartCount(RTax25RegisterLineNum64 _startCount = startCount)
    {
        ;
        startCount = _startCount;
        return startCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustVendTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processCustVendTrans(CustVendTrans _custVendTrans)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumbering</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void renumbering()
    {
        if (! this.parmInBatch())
        {
            select count(RecId) from regTrans
                where regTrans.JournalTransRefRecId == registerJournalTrans.RecId;
        }
        this.progressInit("@SYS4138", regTrans.RecId, #AviUpdate);
        progress.updateInterval(10);

        regTrans.skipDataMethods(true);
        regTrans.skipDatabaseLog(true);
        regTrans.skipEvents(true);

        this.insertRegisterHeader();
        startCount = 2;
        while select forupdate regTrans
            order by LineNumber desc
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                  regTrans.LineNumber           <  0
        {
            progress.setText(strFmt("@SYS26913", startCount));
            regTrans.LineNumber = startCount;
            regTrans.doUpdate();
            this.totals(regTrans);
            startCount++;
            progress.incCount();
        }
        this.insertRegisterFooter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        select firstonly registerJournalTrans
            where registerJournalTrans.RecId == journalTransRecId;

        registerType = RTax25RegisterTable::registerId2Type(registerJournalTrans.RegisterId);
        regQuery     = RTax25Query::newParameters(registerType, registerJournalTrans, true);
        regQuery.initSuspendRecId();
        regTrans = new SysDictTable(regQuery.getRegType().detachedTableId()).makeRecord();
        dateTo = registerJournalTrans.toDate();

        modelCalcDate = dateNull();
        if (regQuery.getRegType().badDebtModel())
        {
            rTax25DebtModel = RTax25DebtModel::findRecId(regQuery.getRegType().badDebtModel());
            if (rTax25DebtModel)
            {
                [modelDateFrom, modelCalcDate] = RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, dateTo);
            }
        }

        if (startCount)
        {
            this.initRunItem();
            this.runItem();
        }
        else
        {
            this.runFinal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFinal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runFinal()
    {
        ttsbegin;

        select firstonly RecId from regTrans
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId;

        if (regTrans.RecId)
        {
            this.renumbering();
        }
        regQuery.insertDatabase();

        registerJournalTrans.selectForUpdate(true);
        registerJournalTrans.Status = RTax25RegisterStatus::Calculated;
        registerJournalTrans.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItem</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void runItem()
    {
        #OCCRetryCount

        this.progressInit('', recordCount, #AviUpdate);
        progress.updateInterval(10);

        try
        {
            ttsbegin;
            if (! modelCalcDate || modelCalcDate == dateTo)
            {
                if (custVend != CustVend_RU::Vend)
                {
                    this.calcCustBadDebts();
                }
                if (custVend != CustVend_RU::Cust)
                {
                    this.calcVendBadDebts();
                }
            }
            regQuery.insertDatabase();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container sourceDocument(CustVendTrans _custVendTrans)
    {
        return RTax25RegCalc_DebtInventoryMultiply::findSourceDocument(_custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void totals(RTax25RegisterTransMap _trans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegCalc_DebtInventoryMultiply construct(RTax25RegisterType _registerType,
                                                                       int64              _startCount,
                                                                       RefRecId           _journalTransRecId,
                                                                       boolean            _isInBatch)
    {
        RTax25RegCalc_DebtInventoryMultiply ret;
        ;

        switch (_registerType)
        {
            case RTax25RegisterType::DebtCreditInventory:
                ret = new rTax25RegCalc_DebtCreditInventoryMult();
                break;
            case RTax25RegisterType::DebtDebitInventory:
                ret = new rTax25RegCalc_DebtDebitInventoryMult();
                break;
            case RTax25RegisterType::DebtDebitInventoryRAP:
                ret = new rTax25RegCalc_DebtDebitInventoryMultRAP();
                break;
            default :
                ret = RTax25RegCalc_DebtInventoryMultiply::constructDefault(_registerType);
                if (!ret)
                {
                    throw error(error::wrongUseOfFunction(funcname()));
                }
        }
        ret.parmStartCount(_startCount);
        ret.parmJournalTransRecId(_journalTransRecId);
        ret.parmInBatch(_isInBatch);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_registerType">A main register type.</param>
    /// <returns>An instance of a class <c>RTax25RegCalc_DebtInventoryMultiply</c>, if extended.</returns>
    protected static RTax25RegCalc_DebtInventoryMultiply constructDefault(RTax25RegisterType _registerType)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method find an original document for the customer or vendor transaction.
    /// </summary>
    /// <param name = "_custVendTrans">A customer or vendor transaction.</param>
    /// <returns>A <c>Container</c> with reference to the original document.</returns>
    public static container findSourceDocument(CustVendTrans _custVendTrans)
    {
        BankPaymentOrderJour_RU paymentOrderJour;
        LedgerJournalTrans      ledgerJournalTrans;
        CustInvoiceJour         custInvoiceJour;
        VendInvoiceJour         vendInvoiceJour;
        DocumentNum             srcDocNum;
        RefTableId              refTableId;
        RefRecId                refRecId;
        DimensionAttributeLevelValueView dimView;

        if (_custVendTrans.Invoice)
        {
            srcDocNum = _custVendTrans.Invoice;

            switch (_custVendTrans.TableId)
            {
                case tablenum(CustTrans) :
                select firstonly RecId from custInvoiceJour
                    where custInvoiceJour.LedgerVoucher  == _custVendTrans.Voucher    &&
                          custInvoiceJour.InvoiceDate    == _custVendTrans.TransDate  &&
                          custInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum &&
                          custInvoiceJour.InvoiceId      == _custVendTrans.Invoice;

                    refTableId  = custInvoiceJour.TableId;
                    refRecId    = custInvoiceJour.RecId;
                    break;
                case tablenum(VendTrans) :
                select firstonly RecId from vendInvoiceJour
                    where vendInvoiceJour.LedgerVoucher  == _custVendTrans.Voucher    &&
                          vendInvoiceJour.InvoiceDate    == _custVendTrans.TransDate  &&
                          vendInvoiceJour.InvoiceAccount == _custVendTrans.AccountNum &&
                          vendInvoiceJour.InvoiceId      == _custVendTrans.Invoice;

                    refTableId  = vendInvoiceJour.TableId;
                    refRecId    = vendInvoiceJour.RecId;
                    break;
            }
        }
        else
        {
            select firstonly firstfast PaymentOrderNum from paymentOrderJour
                where paymentOrderJour.Voucher          == _custVendTrans.Voucher  &&
                      paymentOrderJour.PaymentTransDate == _custVendTrans.TransDate;

            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher            == _custVendTrans.Voucher     &&
                      ledgerJournalTrans.TransDate          == _custVendTrans.TransDate   &&
                      ledgerJournalTrans.TransactionType    == _custVendTrans.TransType
            exists join TableId from dimView
                where dimView.ValueCombinationRecId == ledgerJournalTrans.LedgerDimension &&
                      dimView.DisplayValue          == _custVendTrans.AccountNum;

            refTableId = ledgerJournalTrans.TableId;
            refRecId   = ledgerJournalTrans.RecId;

            srcDocNum = paymentOrderJour.PaymentOrderNum ? paymentOrderJour.PaymentOrderNum :
                                                       (_custVendTrans.DocumentNum ? _custVendTrans.DocumentNum :
                                                                                     _custVendTrans.Voucher);
        }

        if (! refRecId)
        {
            refTableId  = _custVendTrans.TableId;
            refRecId    = _custVendTrans.RecId;
        }

        return [srcDocNum, refTableId, refRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>