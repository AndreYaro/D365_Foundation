<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalProcessor</c> class handles the processing flow for Bank - foreign currency revaluations.
/// </summary>
internal final class BankCurrencyRevalProcessor
{
    private BankCurrencyRevalContract bankCurrencyReval;
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;
    private BankCurrencyRevalTmp expandedBankCurrencyRevalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the processing of bank currency revaluations based on the given <c>BankCurrencyRevalContract</c> class instance.
    /// </summary>
    /// <param name = "bankCurrencyRevalContract">A <c>BankCurrencyRevalContract</c> class instance used to drive the execution of the processor.</param>
    /// <remarks>
    /// The parameter name exists without the normal '_' character due to how the <c>SysOperationServiceController</c> class instruments
    /// the calling of the run method.
    /// </remarks>
    internal void run(BankCurrencyRevalContract bankCurrencyRevalContract)
    {
        this.initialize(bankCurrencyRevalContract);

        this.processRevaluations();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BankCurrencyRevalContract _bankCurrencyRevalContract)
    {
        bankCurrencyReval = _bankCurrencyRevalContract;

        // This will only be true in the case when the preview form is being opened and we want the created temp table records to be placed in the preview form's
        // table buffer, which is bound to the grid on the form.
        // Otherwise, it just uses the instance that it is given upon creation of the class by default.
        if (bankCurrencyReval.parmBankCurrencyRevalTmpTableName() != '')
        {
            if (!FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
            {
                bankCurrencyRevalTmp.useExistingTempDBTable(bankCurrencyReval.parmBankCurrencyRevalTmpTableName());
            }
            else
            {
                expandedBankCurrencyRevalTmp.useExistingTempDBTable(bankCurrencyReval.parmBankCurrencyRevalTmpTableName());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRevaluations</Name>
				<Source><![CDATA[
    private void processRevaluations()
    {
        boolean processedRevaluations;

        if (this.adjustmentValuesNeedToBeCalculated())
        {
            BankCurrencyRevalDataInitializer dataInitializer = BankCurrencyRevalDataInitializer::newFromContractAndBankCurrencyRevalTmp(bankCurrencyReval, bankCurrencyRevalTmp);
            dataInitializer.createBankCurrencyRevalData();
        }

        if (this.hasRecordsToBeProcessed())
        {
            if (this.adjustmentValuesNeedToBeCalculated())
            {
                processedRevaluations = this.processAdjustments();
            }

            if (this.shouldProceedToPosting())
            {
                if (FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
                {
                    this.aggregateExpandedBankCurrencyRevalTmp();
                }

                BankCurrencyRevalDataPost tmpDataPost = new BankCurrencyRevalDataPost(bankCurrencyRevalTmp, expandedBankCurrencyRevalTmp);
                processedRevaluations = tmpDataPost.executePosting();
            }
        }

        if (processedRevaluations)
        {
            info("@GeneralLedger:ForeignCurrencyRevalComplete");
        }
        else
        {
            info("@GeneralLedger:ForeignCurrencyRevalCompleteNoAdjustments");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRecordsToBeProcessed</Name>
				<Source><![CDATA[
    private boolean hasRecordsToBeProcessed()
    {
        BankCurrencyRevalTmp bankCurrencyRevalTmpLocal, expandedBankCurrencyRevalTmpLocal;
        bankCurrencyRevalTmpLocal.useExistingTempDBTable(bankCurrencyRevalTmp.getPhysicalTableName());
        expandedBankCurrencyRevalTmpLocal.useExistingTempDBTable(expandedBankCurrencyRevalTmp.getPhysicalTableName());

        select count(RecId) from bankCurrencyRevalTmpLocal;
        select count(RecId) from expandedBankCurrencyRevalTmpLocal;

        return bankCurrencyRevalTmpLocal.RecId > 0 || expandedBankCurrencyRevalTmpLocal.RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustmentValuesNeedToBeCalculated</Name>
				<Source><![CDATA[
    private boolean adjustmentValuesNeedToBeCalculated()
    {
        return bankCurrencyReval.parmRunMode() == BankCurrencyRevalRunMode::CalculateOnly
            || bankCurrencyReval.parmRunMode() == BankCurrencyRevalRunMode::CalculateAndPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldProceedToPosting</Name>
				<Source><![CDATA[
    private boolean shouldProceedToPosting()
    {
        return bankCurrencyReval.parmRunMode() != BankCurrencyRevalRunMode::CalculateOnly
            && this.hasRecordsToBeProcessed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdjustments</Name>
				<Source><![CDATA[
    private boolean processAdjustments()
    {
        BankCurrencyRevalDataUpdator dataUpdator = BankCurrencyRevalDataUpdator::newFromBankCurrencyRevalTmp(bankCurrencyRevalTmp);
        dataUpdator.updateBankCurrencyRevalData();

        if (!FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance()))
        {
            BankCurrencyRevalAdjustmentEngine adjustmentEngine = BankCurrencyRevalAdjustmentEngine::newFromBankCurrencyRevalTmp(bankCurrencyRevalTmp);
            adjustmentEngine.run();

            BankCurrencyRevalDataTrimmer trimmer = BankCurrencyRevalDataTrimmer::newFromBankCurrencyRevalTmp(bankCurrencyRevalTmp);
            trimmer.trim();
        }
        else
        {
            BankCurrencyRevalPostingCalculator calculator = new BankCurrencyRevalPostingCalculator(bankCurrencyRevalTmp, expandedBankCurrencyRevalTmp);
            calculator.doCalculation();

            BankCurrencyRevalDataTrimmer trimmer = BankCurrencyRevalDataTrimmer::newFromBankCurrencyRevalTmp(expandedBankCurrencyRevalTmp);
            trimmer.trim();
        }

        return this.hasRecordsToBeProcessed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>aggregateExpandedBankCurrencyRevalTmp</Name>
				<Source><![CDATA[
    private void aggregateExpandedBankCurrencyRevalTmp()
    {
        delete_from bankCurrencyRevalTmp;

        insert_recordset bankCurrencyRevalTmp (LegalEntity, BankAccountId, BankCurrencyCode, BankLedgerDimension, ExchangeRateDate, TransDate, BankCurrencyAmount, AccountingCurrencyAmount, ReportingCurrencyAmount, AccountingCurrencyAdjustmentAmount, ReportingCurrencyAdjustmentAmount)
            select LegalEntity, BankAccountId, BankCurrencyCode, BankLedgerDimension, ExchangeRateDate, TransDate, sum(BankCurrencyAmount), sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), sum(AccountingCurrencyAdjustmentAmount), sum(ReportingCurrencyAdjustmentAmount)
                from expandedBankCurrencyRevalTmp
                group by LegalEntity, BankAccountId, BankCurrencyCode, BankLedgerDimension, ExchangeRateDate, TransDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>