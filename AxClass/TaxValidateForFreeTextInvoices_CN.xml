<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValidateForFreeTextInvoices_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxValidateForFreeTextInvoices_CN</c> class is used to validate tax for free text invoices.
/// </summary>
class TaxValidateForFreeTextInvoices_CN extends TaxValidateForTaxIntegration_CN
{
    CustInvoiceTable    custInvoiceTable;
    CustBankAccount     custBankAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existCustBankAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account name exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account name exist.
    /// </returns>
    protected boolean existCustBankAccountName()
    {
        boolean ret = true;
        if (!custBankAccount.name)
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustBankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the cust bank account number exist.
    /// </summary>
    /// <returns>
    /// Returns true if the cust bank account number exist.
    /// </returns>
    protected boolean existCustBankAccountNum()
    {
        boolean ret = true;

        unchecked (Uncheck::TableSecurityPermission)
        {
            if (!custBankAccount.AccountNum)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax registration number from cust exist.
    /// </summary>
    /// <param name="_companyInfoExtension">
    /// The company info extension information.
    /// </param>
    /// <returns>
    /// Returns true if the tax registration number from cust exist.
    /// </returns>
    protected boolean existTaxRegistrationNumberFromCust(CompanyInfoExtension_CN _companyInfoExtension)
    {
        boolean ret = false;

        if (TaxRegistration::getTaxRegistrationNumberFromCust(custInvoiceTable.InvoiceAccount, custInvoiceTable.InvoiceDate, _companyInfoExtension.TaxRegistrationType))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVATInvoiceDescTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the VAT invoice desc table exist.
    /// </summary>
    /// <returns>
    /// Returns true if the VAT invoice desc table exist.
    /// </returns>
    protected boolean existVATInvoiceDescTable()
    {
        boolean ret = false;

        if (CustInvoiceTableExtension_CN::findByCustInvoiceTable(custInvoiceTable.RecId).VATInvoiceDescTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountAndNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice amount and number of lines.
    /// </summary>
    public void getInvoiceAmountAndNumOfLines()
    {
        CustInvoiceLine     custInvoiceLine;
        AmountCur           netAmount;
        AmountCur           TaxAmount = 0;
        CustFreeInvoiceCalcTotals   custFreeInvoiceCalcTotals;
        container                   displayFieldsCon;

        select sum(AmountCur), count(RecId) from custInvoiceLine
            where custInvoiceLine.ParentRecId  == custInvoiceTable.RecId;

        netAmount = custInvoiceLine.AmountCur;
        numOfLines = int642int(custInvoiceLine.RecId);

        if (taxProfileTable.IncludeTax)
        {
            custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceTable);
            custFreeInvoiceCalcTotals.calc();
            displayFieldsCon = custFreeInvoiceCalcTotals.displayFields();
            taxAmount = conPeek(displayFieldsCon, CustFreeInvoiceCalcTotals::posTaxTotal());
        }

        invoiceAmount = netAmount + TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDefault</Name>
				<Source><![CDATA[
        public void initValueDefault()
    {
        super();
        custInvoiceTable    = common;

        custBankAccount     = CustBankAccount::find(this.parmInvoiceAccount(), this.parmCustBankAccountId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMessageForMoreProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs message for more profile.
    /// </summary>
    protected void logMessageForMoreProfile()
    {
         checkFailed(strFmt("@GLS220592", custInvoiceTable.InvoiceId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode parmCurrencyCode()
    {
        CurrencyCode localCurrencyCode;

        localCurrencyCode = custInvoiceTable.CurrencyCode;

        return localCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccountId</Name>
				<Source><![CDATA[
        protected CustBankAccountId parmCustBankAccountId()
    {
        CustBankAccountId custBankAccountIdLocal;

        custBankAccountIdLocal = custInvoiceTable.CustBankAccountId;

        return custBankAccountIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
        protected CustInvoiceAccount parmInvoiceAccount()
    {
        CustInvoiceAccount invoiceAccountLocal;

        invoiceAccountLocal = custInvoiceTable.InvoiceAccount;

        return invoiceAccountLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
        protected InvoiceId parmInvoiceId()
    {
        invoiceId       invoiceIdLocal;

        invoiceIdLocal = custInvoiceTable.InvoiceId;

        return  invoiceIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
        protected SalesId parmSalesId()
    {
        salesId     salesIdLocal;

        salesIdLocal = custInvoiceTable.SalesId;

        return salesIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates bank account information.
    /// </summary>
    /// <returns>
    /// Returns true if the validate succeed.
    /// </returns>
    public boolean validateBankAccount()
    {
        boolean ret = true;

        if (!(custInvoiceTable && custInvoiceTable.CustBankAccountId))
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
        public boolean validateTaxCode()
    {
        CustInvoiceLine     custInvoiceLine;
        boolean             ret = true;

        while select custInvoiceLine
            group by custInvoiceLine.TaxGroup, custInvoiceLine.TaxItemGroup
            where custInvoiceLine.ParentRecId  == custInvoiceTable.RecId
        {
            numOfTaxCode ++;
            this.validatePostTaxCode(custInvoiceLine.TaxGroup, custInvoiceLine.TaxItemGroup);
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new cust invoice table.
    /// </summary>
    /// <param name="_custInvoiceTable">
    /// The cust invoice table.
    /// </param>
    /// <param name="_taxProfileTable">
    /// The tax profile table information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValidateForFreeTextInvoices_CN</c> class.
    /// </returns>
    Static public TaxValidateForFreeTextInvoices_CN newCustInvoiceTable(CustInvoiceTable  _custInvoiceTable, TaxProfileTable_CN _taxProfileTable)
    {
        TaxValidateForFreeTextInvoices_CN taxValidateForFreeTextInvoice = new TaxValidateForFreeTextInvoices_CN(_custInvoiceTable, _taxProfileTable);

        taxValidateForFreeTextInvoice.initValueDefault();

        return taxValidateForFreeTextInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>