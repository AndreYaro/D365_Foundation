<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOENInfo_OrderReadyForPickup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generate event notification for order ready for pickup.
/// </summary>
public class RetailOENInfo_OrderReadyForPickup extends RetailOENInfo
{
    // Pick up in store related placeholders.
    #define.PickupStoreAddress('pickupstoreaddress')
    #define.PickupStoreHourFrom('pickupstoreopenfrom')
    #define.PickupStoreHourTo('pickupstoreopento')
    #define.PickupStoreName('pickupstorename')
    #define.PickupChannelId('pickupchannelid')
    #define.PackingSlipId('packingslipid')
    #define.ConfirmationId('confirmationid')


    CustPackingSlipJour packingSlipJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EventNotificationType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return the event notification type.
    /// </summary>
    /// <returns>
    /// Event notification type.
    /// </returns>
    public RetailEventNotificationType EventNotificationType()
    {
        return RetailEventNotificationType::OrderReadyForPickup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the packing slip and sales order.
    /// </summary>
    /// <param name="refRecId">
    /// Record id of <c>CustPackingSlipJour</c>.
    /// </param>
    public void resolveSalesOrder(RefRecId _refRecId)
    {
        this.packingSlipJournal = CustPackingSlipJour::findRecId(_refRecId);
        this.parmSalesOrder(SalesTable::find(packingSlipJournal.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSaleslineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the object of <c>SalesLine</c> table with replacing e-mail related placeholders with the actual subject, message etc.
    /// </summary>
    /// <param name="saleslineTableTemplate">
    /// String containing the template for message.
    /// </param>
    /// <returns>
    /// Message template with actual subject and message.
    /// </returns>
    protected str generateSaleslineTable(str _saleslineTableTemplate)
    {
        SalesLine       salesLine;
        CustPackingSlipTrans custPackingSlipTrans;
        str             result;
        Map             saleslineMap;
        MCRSalesLine    mcrSalesLine;
        RetailGiftCardTransactions retailGiftCardTransactions;
        RetailDlvModeTmp pickupDlvModes = RetailDlvMode::getPickupDeliveryModes();

        while select LineNum from custPackingSlipTrans
                where custPackingSlipTrans.SalesId == packingSlipJournal.SalesId
                && custPackingSlipTrans.DeliveryDate == packingSlipJournal.DeliveryDate
                && custPackingSlipTrans.PackingSlipId == packingSlipJournal.PackingSlipId
            join salesLine
                where salesLine.SalesId == salesOrder.SalesId
                && salesLine.InventTransId == custPackingSlipTrans.InventTransId
                && salesLine.SalesQty > 0
            outer join firstOnly GiftCardGiftMessage from mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine.RecId
            outer join firstOnly Amount, CardNumber from retailGiftCardTransactions
                where retailGiftCardTransactions.MCRInventTransId == salesLine.InventTransId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue
            exists join Code from pickupDlvModes
                where pickupDlvModes.Code == salesLine.DlvMode

        {
            saleslineMap = this.createSalesLineMap(salesLine, retailGiftCardTransactions, mcrSalesLine);
            result += SysEmailMessage::stringExpand(_saleslineTableTemplate, saleslineMap);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineQtyPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a sales line, return the quantity that was packed on the current packing slip.
    /// </summary>
    /// <param name = "_salesLine">The sales line</param>
    /// <returns></returns>
    protected SalesQty getSalesLineQtyPacked(SalesLine _salesLine)
    {
        CustPackingSlipTrans custPackingSlipTrans;

        select firstonly Qty from custPackingSlipTrans
            where custPackingSlipTrans.SalesId == packingSlipJournal.SalesId
                && custPackingSlipTrans.PackingSlipId == packingSlipJournal.PackingSlipId
                && custPackingSlipTrans.DeliveryDate == packingSlipJournal.DeliveryDate
                && custPackingSlipTrans.InventTransId == _salesLine.InventTransId;

        return custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotificationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether notification is enabled.
    /// </summary>
    /// <returns>
    /// True if the notification type is enabled and there is at least one line on the packing slip with mode of delivery set to pickup; otherwise, false.
    /// </returns>
    public boolean isNotificationEnabled()
    {
        boolean ret = super();

        if (ret)
        {
            ret = this.salesOrder.getRetailSalesOrderType() == RetailSalesOrderType::CustomerOrder;
        }

        if (ret)
        {
            RetailDlvModeTmp pickupDlvModes = RetailDlvMode::getPickupDeliveryModes();

            SalesLine salesLine;
            CustPackingSlipTrans custPackingSlipTrans;
            select firstonly RecId from custPackingSlipTrans
                    where custPackingSlipTrans.SalesId == packingSlipJournal.SalesId
                    && custPackingSlipTrans.PackingSlipId == packingSlipJournal.PackingSlipId
                    && custPackingSlipTrans.DeliveryDate == packingSlipJournal.DeliveryDate
                join salesLine
                    where salesLine.SalesId == salesOrder.SalesId
                    && salesLine.InventTransId == custPackingSlipTrans.InventTransId
                    && salesLine.SalesQty > 0
                exists join pickupDlvModes
                    where pickupDlvModes.Code == salesLine.DlvMode;
            if (!salesLine)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameterMap</Name>
				<Source><![CDATA[
    protected void initParameterMap()
    {
        // Make sure that every parameter should be converted into string.
        super();

        RetailStoreTable pickupStore;
        CustPackingSlipTrans custPackingSlipTrans;
        SalesLine salesLine;
        InventDim inventDim;
        RetailDlvModeTmp pickupDlvModes = RetailDlvMode::getPickupDeliveryModes();

        if (packingSlipJournal)
        {
            parameterMap.insert(#PackingSlipId, packingSlipJournal.PackingSlipId);
        }

        select firstonly RecId from custPackingSlipTrans
                    where custPackingSlipTrans.SalesId == packingSlipJournal.SalesId
                    && custPackingSlipTrans.DeliveryDate == packingSlipJournal.DeliveryDate
                    && custPackingSlipTrans.PackingSlipId == packingSlipJournal.PackingSlipId
                join RecId from salesLine
                    where salesLine.SalesId == custPackingSlipTrans.SalesId
                    && salesLine.InventTransId == custPackingSlipTrans.InventTransId
                join InventLocationId from inventDim
                    where inventDim.InventDimId == salesLine.InventDimId
                exists join pickupDlvModes
                    where pickupDlvModes.Code == salesLine.DlvMode;

        select firstonly pickupStore
            where pickupStore.InventLocation == inventDim.InventLocationId
            && pickupStore.inventLocationDataAreaId == curExt();

        if (pickupStore)
        {
            InventLocation pickupStoreWarehouse = InventLocation::find(pickupStore.InventLocation);
            if (!pickupStoreWarehouse)
            {
                eventSource.EventWriteEmailNotificationPrimaryWarehouseNotFoundForStore(pickupStore.RecId);
                throw Exception::Error;
            }
            else
            {
                parameterMap.insert(#PickupStoreAddress, InventLocation::find(pickupStore.inventLocation).address());
            }

            parameterMap.insert(#PickupStoreHourFrom, time2str(pickupStore.openFrom, TimeSeparator::Colon, TimeFormat::AMPM));
            parameterMap.insert(#PickupStoreHourTo, time2str(pickupStore.openTo, TimeSeparator::Colon, TimeFormat::AMPM));
            parameterMap.insert(#PickupStoreName, pickupStore.name());
            parameterMap.insert(#PickupChannelId, int642str(pickupStore.RecId));
        }

        SalesTable salesTable = this.parmSalesOrder();
        if (salesTable && salesTable.retailSalesTable())
        {
            parameterMap.insert(#ConfirmationId, salesTable.retailSalesTable().ChannelReferenceId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistinctDeliveryModeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get distinct delivery mode id.
    /// </summary>
    /// <remark>
    /// Return delivery mode id if all sales lines linked with <c>CustPackingSlipJour</c> whose delivery mode is pick up delivery mode share same delivery mode id. Otherwise, return null;
    /// </remark>
    protected DlvModeId getDistinctDeliveryModeId()
    {
        DlvModeId deliveryModeId;
        SalesLine salesLine;
        CustPackingSlipTrans custPackingSlipTrans;

        RetailDlvModeTmp pickupDlvModes = RetailDlvMode::getPickupDeliveryModes();

        while
            select DlvMode from salesLine
                group by salesLine.DlvMode
                join RecId from custPackingSlipTrans
                where custPackingSlipTrans.SalesId == packingSlipJournal.SalesId
                && custPackingSlipTrans.DeliveryDate == packingSlipJournal.DeliveryDate
                && custPackingSlipTrans.PackingSlipId == packingSlipJournal.PackingSlipId
                && custPackingSlipTrans.SalesId == salesLine.SalesId
                && salesLine.InventTransId == custPackingSlipTrans.InventTransId
                && salesLine.SalesQty > 0
                exists join Code from pickupDlvModes
                where pickupDlvModes.Code == salesLine.DlvMode
        {
            if (deliveryModeId)
            {
                deliveryModeId = null;
                break;
            }
            else
            {
                deliveryModeId = salesLine.DlvMode;
            }
        }

        return deliveryModeId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>