<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWbsCostPlanningServerActions</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjWbsCostPlanningServerActions implements IServerActions
{
    HierarchyIdBase             hierarchyId;
    ProjWbsSessionContextDataContract   sessionContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProjWbsSessionContextDataContract _sesisonContext)
    {
        sessionContext = _sesisonContext;
        if (sessionContext != null)
        {
            hierarchyId = sessionContext.parmHierarchyId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjWbsCostPlanningServerActions construct(ProjWbsSessionContextDataContract _sessionContext)
    {
        return new ProjWbsCostPlanningServerActions(_sessionContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute server actions according to the client requests.
    /// </summary>
    /// <param name = "_action">Client requests action type.</param>
    /// <returns>Empty value.</returns>
    public str executeAction(ActionDataContract  _action)
    {
        Enumerator              argsEnumerator;
        str                     hierarchyTaskId, recId, elementId, projTransType, projCategoryId, resourceCategory;
        str                     resource, description, quantity, projLineProperty, itemId;
        str                     salesCategory, unitCostPrice, unitSalesPrice, totalCostPrice, totalSalesPrice;
        str                     estimateNumber;
        boolean                 isParent;

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case 'add':
                argsEnumerator.moveNext();
                hierarchyTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                estimateNumber = argsEnumerator.current();
                argsEnumerator.moveNext();
                projTransType = argsEnumerator.current();
                argsEnumerator.moveNext();
                projCategoryId = argsEnumerator.current();
                argsEnumerator.moveNext();
                resourceCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                resource = argsEnumerator.current();
                argsEnumerator.moveNext();
                description = argsEnumerator.current();
                argsEnumerator.moveNext();
                quantity = argsEnumerator.current();
                argsEnumerator.moveNext();
                salesCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                unitCostPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                unitSalesPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                totalCostPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                totalSalesPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                projLineProperty = argsEnumerator.current();
                argsEnumerator.moveNext();
                itemId = argsEnumerator.current();
                QuotationProjTransType enumTransactionType;
                enumTransactionType = str2enum(enumTransactionType, projTransType);

                ProjEstimate::add(this.hierarchyId, str2Int64(hierarchyTaskId), str2Int(estimateNumber), enumTransactionType, projCategoryId,
                                  str2Int64(resourceCategory), str2Int64(resource), description, str2Num(quantity), str2Int64(salesCategory), str2Num(unitCostPrice),
                                  str2Num(unitSalesPrice), str2Num(totalCostPrice), str2num(totalSalesPrice), projLineProperty, itemId, null, true, sessionContext.parmWBSType());
                break;
            case 'update':
                argsEnumerator.moveNext();
                hierarchyTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                recId = argsEnumerator.current();
                argsEnumerator.moveNext();
                estimateNumber = argsEnumerator.current();
                argsEnumerator.moveNext();
                projTransType = argsEnumerator.current();
                argsEnumerator.moveNext();
                projCategoryId = argsEnumerator.current();
                argsEnumerator.moveNext();
                resourceCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                resource = argsEnumerator.current();
                argsEnumerator.moveNext();
                description = argsEnumerator.current();
                argsEnumerator.moveNext();
                quantity = argsEnumerator.current();
                argsEnumerator.moveNext();
                salesCategory = argsEnumerator.current();
                argsEnumerator.moveNext();
                unitCostPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                unitSalesPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                totalCostPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                totalSalesPrice = argsEnumerator.current();
                argsEnumerator.moveNext();
                projLineProperty =argsEnumerator.current();
                argsEnumerator.moveNext();
                itemId = argsEnumerator.current();

                ProjEstimate::update(this.hierarchyId, hierarchyTaskId, recId, estimateNumber, projTransType, projCategoryId,
                                     resourceCategory, resource, description, quantity, salesCategory, unitCostPrice,
                                     unitSalesPrice, totalCostPrice, totalSalesPrice, projLineProperty, itemId, sessionContext.parmWBSType());
                break;
            case 'delete':
                argsEnumerator.moveNext();
                hierarchyTaskId = argsEnumerator.current();
                argsEnumerator.moveNext();
                recId = argsEnumerator.current();
                argsEnumerator.moveNext();
                isParent = str2int(argsEnumerator.current());
                if (isParent)
                {
                    ProjEstimate::deleteParent(this.hierarchyId, hierarchyTaskId);
                }
                else
                {
                    ProjEstimate::delete(this.hierarchyId, recId, hierarchyTaskId);
                }
                break;
            default:
                EventHandlerResult eventResult;
                this.runExecuteActionDelegate(_action, eventResult);
                        
                if (!eventResult.hasResult())
                {
                    error("@Proj:UnrecocognizedOperation");
                }

                break;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>runExecuteActionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the executeAction method for running custom actions defined in <c>ActionDataContract</c>.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> object</param>
    /// <param name = "_result"><c>EventHandlerResult</c> instance</param>
    delegate void runExecuteActionDelegate(ActionDataContract  _action, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeDataRetrievalAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the data retrieval based on the action set on the <c>ActionDataContract</c> object.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> object</param>
    /// <returns>
    /// A <c>CollectionDataContract</c> object that contains data related to the action.
    /// </returns>
    public CollectionDataContract executeDataRetrievalAction(ActionDataContract _action)
    {
        Enumerator                  argsEnumerator;
        CollectionDataContract      dataCollection = CollectionDataContract::construct();
        str                         fieldChanged, hierarchyTaskId, transactionType, projCategoryId, itemNumber, resourceRole, salesCategory;
        int64                       resource, recId;
        str                         estimateNumber;
        NonNegativeCostPrice		unitCostPrice, unitSalesPrice;
        NonNegativeQuantity         quantity;
        Description                 description;
        ProjLinePropertyId          projLineProperty;

        argsEnumerator = _action.parmArgs().getEnumerator();
        switch (_action.parmName())
        {
            case '':
                dataCollection = ProjEstimate::get(this.hierarchyId);
                break;
            case 'updateEstimateDetails':
                argsEnumerator.moveNext(); //Field Changed
                fieldChanged = argsEnumerator.current();
                argsEnumerator.moveNext(); //HierarchyId
                hierarchyTaskId = argsEnumerator.current();
                argsEnumerator.moveNext(); //Estimate Number
                estimateNumber = argsEnumerator.current();
                argsEnumerator.moveNext(); //Transaction Type
                transactionType = argsEnumerator.current();
                argsEnumerator.moveNext(); //Project Category
                projCategoryId = argsEnumerator.current();
                argsEnumerator.moveNext(); //Resource Role
                resourceRole = argsEnumerator.current();
                argsEnumerator.moveNext(); //Resource
                resource = argsEnumerator.current();
                argsEnumerator.moveNext(); //Item Number
                itemNumber = argsEnumerator.current();
                argsEnumerator.moveNext(); //Quantity
                quantity = argsEnumerator.current();
                argsEnumerator.moveNext(); //UnitCostPrice
                unitCostPrice = argsEnumerator.current();
                argsEnumerator.moveNext(); //Description
                description = argsEnumerator.current();
                argsEnumerator.moveNext(); //ProjLinePropertyID
                projLineProperty = argsEnumerator.current();
                argsEnumerator.moveNext(); //UniSalesPrice
                unitSalesPrice = argsEnumerator.current();
                argsEnumerator.moveNext(); //SalesCategory
                salesCategory = argsEnumerator.current();

                QuotationProjTransType enumTransactionType;
                enumTransactionType = str2enum(enumTransactionType, transactionType);

                ProjEstimateDataContract updateEstimates = ProjEstimateDataContract::construct();
                TransDate taskStart = ProjPlanVersion::findByHierarchyAndTaskId(this.hierarchyId, str2int64(hierarchyTaskId)).TaskStartDate;

                updateEstimates.updateEstimates(fieldChanged, this.hierarchyId, str2int64(hierarchyTaskId), taskStart, 
                                                str2Int(estimateNumber), enumTransactionType, projCategoryId, str2Int64(resourceRole), 
                                                resource, itemNumber, description, projLineProperty, quantity, unitCostPrice, unitSalesPrice, salesCategory);

                List updateEstimateWrapper = new List(Types::Class);
                updateEstimateWrapper.addEnd(updateEstimates);

                dataCollection.parmItems(updateEstimateWrapper);
                break;
            case 'getTransactionTypes':
                List enumLabels = this.getTransactionTypes();
                dataCollection.parmItems(enumLabels);
                break;
            case 'getCategoryTypes':
                List projCategories = this.getProjectCategoryTypes();
                dataCollection.parmItems(projCategories);
                break;
            case 'getLineProperties':
                List properties = this.getLineProperties();
                dataCollection.parmItems(properties);
                break;
            case 'getItemNumbers':
                List items = this.getItemNumbers();
                dataCollection.parmItems(items);
                break;
            case 'getSalesCategories':
                List categories = this.getSalesCategories();
                dataCollection.parmItems(categories);
                break;
            case 'getResourceCategories':
                dataCollection = ProjTask::getResourceCategories();
                break;
            case 'openProductDimForm':
                argsEnumerator.moveNext();
                recId = argsEnumerator.current();
                argsEnumerator.moveNext();
                estimateNumber = argsEnumerator.current();
                argsEnumerator.moveNext();
                hierarchyTaskId = argsEnumerator.current();
                this.openProductDimForm(recId,this.hierarchyId, hierarchyTaskId, estimateNumber);
                break;
            default:
                EventHandlerResult eventResult;
                this.runExecuteDataRetrievalActionDelegate(_action, eventResult);
                        
                if (!eventResult.hasResult())
                {
                    error("@Proj:UnrecocognizedOperation");
                }

                break;
        }
        return dataCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runExecuteDataRetrievalActionDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to be called in the default case within the executeDataRetrievalAction method for running custom data retreival actions defined in <c>ActionDataContract</c>.
    /// </summary>
    /// <param name = "_action"><c>ActionDataContract</c> instance</param>
    /// <param name = "_result"><c>EventHandlerResult</c> instance</param>
    delegate void runExecuteDataRetrievalActionDelegate(ActionDataContract  _action, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openProductDimform</Name>
				<Source><![CDATA[
    private void openProductDimform(RecId recId, HierarchyIdBase _hierarchyId, str _taskId, str _estimateNumber)
    {
        PSAActivityEstimates    estimateRecord;
        FormRun                 formRun;
        ProjHierarchyTaskId     taskId = str2Int64(_taskId);
        int                     estimateNumber = str2Int(_estimateNumber);
        Args args = new Args();

        if (recId){
            select firstonly estimateRecord where estimateRecord.RecId == recId;
        } else {
            select firstonly estimateRecord where
                estimateRecord.ProjPlanHierarchyId == _hierarchyID
                && estimateRecord.ProjPlanHierarchyTaskId == taskId
                && estimateRecord.EstimateNumber == estimateNumber;
        }

        args.record(estimateRecord);
        args.openMode(OpenMode::Edit);
        formRun = new MenuFunction(menuitemDisplayStr(ProjProductDimensions), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionTypes</Name>
				<Source><![CDATA[
    private List getTransactionTypes()
    {
        DictEnum enumDict = new DictEnum(enumName2Id(enumstr('QuotationProjTransType')));
        List enumLabels = new List(Types::String);
        int i ;
        str enumValue;

        for (i = 0; i < enumDict.values(); i++)
        {
            enumValue = enumDict.index2Label(i);
            if (enumValue != '')
            {
                enumLabels.addEnd(enumValue);
            }
        }
        return enumLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCategoryTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a list of project categories for all transaction types filtered by Project/Category validation.
    /// </summary>
    /// <returns>A <c>List</c> instance that contains <c>List</c> of project categories.</returns>
    protected List getProjectCategoryTypes()
    {
        ProjCategoryTypeDataContract projCategoryTypeHour;
        ProjCategoryTypeDataContract projCategoryTypeFee;
        ProjCategoryTypeDataContract projCategoryTypeItem;
        ProjCategoryTypeDataContract projCategoryTypeExpense;

        List projCategories             = new List(Types::Class);
        List projCategoriesHour         = new List(Types::Class);
        List projCategoriesFee          = new List(Types::Class);
        List projCategoriesItem         = new List(Types::Class);
        List projCategoriesExpense      = new List(Types::Class);

        ProjCategoryTypeDataContract allProjCategoryTypeHour;
        ProjCategoryTypeDataContract allProjCategoryTypeFee;
        ProjCategoryTypeDataContract allProjCategoryTypeItem;
        ProjCategoryTypeDataContract allProjCategoryTypeExpense;

        List allProjCategoriesHour      = new List(Types::Class);
        List allProjCategoriesFee       = new List(Types::Class);
        List allProjCategoriesItem      = new List(Types::Class);
        List allProjCategoriesExpense   = new List(Types::Class);

        ProjCategory            projCategory;
        CategoryTable           categoryTable;
        ProjTable               projTable;
        SalesQuotationTable     quotationTable;
        Common                  hierarchyLinkedTable = HierarchyLinkTable_Extension::findLinkedTableByHierarchyId(this.hierarchyId);
        ProjParameters          projParams = ProjParameters::find();
        boolean                 validateCategories = false;

        switch (hierarchyLinkedTable.TableId)
        {
            case tableNum(ProjTable):
                projTable = hierarchyLinkedTable;
                validateCategories = projTable.ValidateProjCategory;
                break;

            case tableNum(SalesQuotationTable):
                quotationTable = hierarchyLinkedTable;

                if (quotationTable.ProjIdRef)
                {
                    projTable = projTable::find(quotationTable.ProjIdRef);
                    validateCategories = projTable.ValidateProjCategory;
                    break;
                }
                validateCategories = false;
                break;

            default:
                break;
        }

        if (validateCategories)
        {
            ProjProjectCategoryAssoc    validationView;

            while select CategoryId from validationView
            Group By validationView.CategoryId
            where validationView.ProjId == projTable.ProjId
            {
                projCategory = ProjCategory::find(validationView.CategoryId);
                if (projCategory.CategoryType == ProjCategoryType::Hour)
                {
                    projCategoryTypeHour       = ProjCategoryTypeDataContract::construct();
                    projCategoryTypeHour.parmCategoryId(projCategory.CategoryId);
                    projCategoryTypeHour.parmCategoryName(projCategory.Name);
                    projCategoriesHour.addEnd(projCategoryTypeHour);
                }
                else if (projCategory.CategoryType == ProjCategoryType::Revenue)
                {
                    projCategoryTypeFee       = ProjCategoryTypeDataContract::construct();
                    projCategoryTypeFee.parmCategoryId(projCategory.CategoryId);
                    projCategoryTypeFee.parmCategoryName(projCategory.Name);
                    projCategoriesFee.addEnd(projCategoryTypeFee);
                }
                else if (projCategory.CategoryType == ProjCategoryType::Cost)
                {
                    projCategoryTypeExpense       = ProjCategoryTypeDataContract::construct();
                    projCategoryTypeExpense.parmCategoryId(projCategory.CategoryId);
                    projCategoryTypeExpense.parmCategoryName(projCategory.Name);
                    projCategoriesExpense.addEnd(projCategoryTypeExpense);
                }
                else if (projCategory.CategoryType == ProjCategoryType::Item)
                {
                    projCategoryTypeItem       = ProjCategoryTypeDataContract::construct();
                    projCategoryTypeItem.parmCategoryId(projCategory.CategoryId);
                    projCategoryTypeItem.parmCategoryName(projCategory.Name);
                    projCategoriesItem.addEnd(projCategoryTypeItem);
                }
            }

            projCategories.addEnd(projCategoriesHour);
            projCategories.addEnd(projCategoriesFee);
            projCategories.addEnd(projCategoriesItem);
            projCategories.addEnd(projCategoriesExpense);
        }

        while select CategoryId from categoryTable
            outer join ProjCategory
            where ProjCategory.CategoryId == CategoryTable.CategoryId
            && CategoryTable.UseInProject == NoYes::Yes
        {
            if (projCategory.CategoryType == ProjCategoryType::Hour)
            {
                allProjCategoryTypeHour    = ProjCategoryTypeDataContract::construct();
                allProjCategoryTypeHour.parmCategoryId(projCategory.CategoryId);
                allProjCategoryTypeHour.parmCategoryName(projCategory.Name);
                allProjCategoriesHour.addEnd(allProjCategoryTypeHour);
            }
            else if (projCategory.CategoryType == ProjCategoryType::Revenue)
            {
                allProjCategoryTypeFee    = ProjCategoryTypeDataContract::construct();
                allProjCategoryTypeFee.parmCategoryId(projCategory.CategoryId);
                allProjCategoryTypeFee.parmCategoryName(projCategory.Name);
                allProjCategoriesFee.addEnd(allProjCategoryTypeFee);
            }
            else if (projCategory.CategoryType == ProjCategoryType::Cost)
            {
                allProjCategoryTypeExpense    = ProjCategoryTypeDataContract::construct();
                allProjCategoryTypeExpense.parmCategoryId(projCategory.CategoryId);
                allProjCategoryTypeExpense.parmCategoryName(projCategory.Name);
                allProjCategoriesExpense.addEnd(allProjCategoryTypeExpense);
            }
            else if (projCategory.CategoryType == ProjCategoryType::Item)
            {
                allProjCategoryTypeItem    = ProjCategoryTypeDataContract::construct();
                allProjCategoryTypeItem.parmCategoryId(projCategory.CategoryId);
                allProjCategoryTypeItem.parmCategoryName(projCategory.Name);
                allProjCategoriesItem.addEnd(allProjCategoryTypeItem);
            }
        }
        projCategories.addEnd(allProjCategoriesHour);
        projCategories.addEnd(allProjCategoriesFee);
        projCategories.addEnd(allProjCategoriesItem);
        projCategories.addEnd(allProjCategoriesExpense);

        return projCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineProperties</Name>
				<Source><![CDATA[
    private List getLineProperties()
    {
        List properties = new List(Types::String);
        ProjLineProperty projLineProperty;

        while select LinePropertyId from projLineProperty
        {
            properties.addEnd(ProjLineProperty.LinePropertyId);
        }
        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemNumbers</Name>
				<Source><![CDATA[
    private List getItemNumbers()
    {
        List items = new List(Types::Class);
        ProjItemDataContract itemContract;
        str itemTypeEnumLabel;
        InventTableExpanded inventTableExtended;

        while select ItemId, ItemType, NameAlias, ProductName from inventTableExtended
        {
            itemContract = ProjItemDataContract::construct();
            itemContract.parmItemNumber(inventTableExtended.ItemId);
            itemContract.parmSearchName(inventTableExtended.NameAlias);

            itemTypeEnumLabel = itemContract.getItemEnumLabelFromValue(inventTableExtended.ItemType);
            itemContract.parmItemType(itemTypeEnumLabel);
            itemContract.parmProduct(inventTableExtended.ProductName);

            items.addEnd(itemContract);
        }

        return items;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesCategories</Name>
				<Source><![CDATA[
    private List getSalesCategories()
    {
        List categories = new List(Types::Class);
        EcoResCategory                  ecoResCategory;
        EcoResCategoryHierarchyRole     ecoResCategoryHierarchyRole;
        EcoResCategoryHierarchy         ecoResCategoryHierarchy;
        ProjSalesCategoryDataContract   salesCategory;

        ecoResCategoryHierarchyRole = EcoResCategoryHierarchyRole::getHierarchiesByRole(EcoResCategoryNamedHierarchyRole::Sales);
        ecoResCategoryHierarchy     = EcoResCategoryHierarchy::find(ecoResCategoryHierarchyRole.CategoryHierarchy);

        while select Name, RecId, ParentCategory from ecoResCategory
            Order by ecoResCategory.Level
            where ecoResCategory.isActive == NoYes::Yes
            && ecoResCategory.CategoryHierarchy == ecoResCategoryHierarchy.RecId
        {
            salesCategory = ProjSalesCategoryDataContract::construct();
            salesCategory.parmName(ecoResCategory.Name);
            salesCategory.parmRecId(ecoResCategory.RecId);
            salesCategory.parmParentRecId(ecoResCategory.ParentCategory);

            categories.addEnd(SalesCategory);
        }

        return categories;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>