<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormletterParmDataChooseLinesContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FormletterParmDataChooseLinesContract</c> class will be used as the input data contract class for the <c>chooseLinesServerIL</c> method in the <c>SalesFormletterParmData</c> and <c>PurchFormletterParmData</c> classes.
/// </summary>
class FormletterParmDataChooseLinesContract
implements SysPackable
{
    container      formletterContractPacked;
    boolean        append;
    boolean        reuseParmUpdate;
    boolean        onlyCreateParmUpdate;
    boolean        executeLateSelection;

    #define.CurrentVersion(1)
    #LOCALMACRO.ParmList
        formletterContractPacked,
        append,
        reuseParmUpdate,
        onlyCreateParmUpdate,
        executeLateSelection
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion,#ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppend</Name>
				<Source><![CDATA[
        public boolean parmAppend(boolean _append = append)
    {
        append = _append;
        return append;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExecuteLateSelection</Name>
				<Source><![CDATA[
        public boolean parmExecuteLateSelection(boolean _executeLateSelection= executeLateSelection)
    {
        executeLateSelection = _executeLateSelection;
        return executeLateSelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormletterContractPacked</Name>
				<Source><![CDATA[
        public container parmFormletterContractPacked(container _formletterContractPacked = formletterContractPacked)
    {
        formletterContractPacked = _formletterContractPacked;
        return formletterContractPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyCreateParmUpdate</Name>
				<Source><![CDATA[
        public boolean parmOnlyCreateParmUpdate(boolean _onlyCreateParmUpdate = onlyCreateParmUpdate)
    {
        onlyCreateParmUpdate = _onlyCreateParmUpdate;
        return onlyCreateParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReuseParmUpdate</Name>
				<Source><![CDATA[
        public boolean parmReuseParmUpdate(boolean _reuseParmUpdate = reuseParmUpdate)
    {
        reuseParmUpdate = _reuseParmUpdate;
        return reuseParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static FormletterParmDataChooseLinesContract construct()
    {
        return new FormletterParmDataChooseLinesContract();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>