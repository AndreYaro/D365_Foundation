<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReceiptsListJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchReceiptsListJournalCreate extends FormletterJournalCreate
{
    VendReceiptsListJour        vendReceiptsListJour;
    VendReceiptsListTrans       vendReceiptsListTrans;

    PurchTable                  purchTable;
    PurchParmTable              purchParmTable;
    PurchParmUpdate             purchParmUpdate;
    PurchLine                   purchLine;

    RecordSortedList            recordListPurchParmLine;
    NoYes                       creditNote;
    PurchTotals                 purchTotals;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkDiscardLine</Name>
				<Source><![CDATA[
    protected boolean  checkDiscardLine(Common _purchParmLine)
    {
        PurchParmLine purchParmLine = _purchParmLine as PurchParmLine;
        if (purchParmLine.ReceiveNow == 0)
            return true;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header when either the sales order, the purchase order, or the request for
    /// quote is updated.
    /// </summary>
    protected void createJournalHeader()
    {
        this.setDeliveryFields();

        vendReceiptsListJour.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    protected void createJournalLine(Common _purchParmLine)
    {
        PurchParmLine purchParmLine = _purchParmLine as PurchParmLine;
        purchLine = _purchParmLine.purchLine();

        InventQualityManagementBlockHandler::blockPurchaseReceiptsList(purchLine);

        vendReceiptsListTrans.clear();
        vendReceiptsListTrans.initFromPurchLine(purchLine);
        vendReceiptsListTrans.initFromVendReceiptsListJour(vendReceiptsListJour);
        vendReceiptsListTrans.setLinenum(lineNum);

        vendReceiptsListTrans.PurchQty  = purchParmLine.ReceiveNow;
        vendReceiptsListTrans.InventQty = purchParmLine.InventNow;
        vendReceiptsListTrans.PdsCWInventQty    = purchParmLine.PdsCWReceiveNow;
        vendReceiptsListTrans.ReasonTableRef =purchParmLine.ReasonTableRef;

        this.insertJournalLine(vendReceiptsListTrans);

        if (#PdsVendBatchEnabled)
        {
            purchParmLine.bufferPdsVendBatchInfo().cascadeDetailsToBatchesCreated();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _purchParmLine)
    {
        VendReceiptsListPurchLink   vendReceiptsListPurchLink;
        vendReceiptsListPurchLink.clear();
        vendReceiptsListPurchLink.initFromPurchParmLine         (_purchParmLine as PurchParmLine);
        vendReceiptsListPurchLink.initFromVendReceiptsListJour  (vendReceiptsListJour);
        this.insertJournalLink(vendReceiptsListPurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endCreate</Name>
				<Source><![CDATA[
    protected void endCreate()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.transitDocument();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            TaxBusinessService::transferTaxDocument(purchParmTable, vendReceiptsListJour);
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Purchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    public Common getJournal()
    {
        return vendReceiptsListJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    protected void initJournalHeader()
    {
        vendReceiptsListJour.clear();
        vendReceiptsListJour.initValue();

        vendReceiptsListJour.initFromPurchTable(purchTable);
        vendReceiptsListJour.ParmId               = purchParmUpdate.ParmId;
        vendReceiptsListJour.ReceiptsListId       = this.getJournalNumber();
        vendReceiptsListJour.ReceiptsListDate     = this.updateDate();

        vendReceiptsListJour.InterCompanyPosted   = this.parmInterCompanyPosted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTable</Name>
				<Source><![CDATA[
    protected void initSourceTable()
    {
        purchTable = purchParmTable.purchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    protected void initTotals()
    {
        purchTotals = PurchTotals::newParmTable(purchParmTable, purchParmUpdate.SpecQty, purchParmUpdate.ParmId, purchParmUpdate.SumPurchId, this.parmDocumentStatus());
        purchTotals.calc();
        this.parmTax(purchTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tableNum(VendReceiptsListTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    protected tableId linksTableId()
    {
        return tableNum(VendReceiptsListPurchLink);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return PurchParameters::numRefReceiptsListId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchParmTable)
    {
        purchParmTable = _parmTable as PurchParmTable;

        return purchParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmUpdate</Name>
				<Source><![CDATA[
    public Common parmParmUpdate(Common _parmUpdate = purchParmUpdate)
    {
        purchParmUpdate = _parmUpdate as PurchParmUpdate;

        return purchParmUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    protected boolean  proforma()
    {
        return purchParmUpdate.Proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return purchTotals.recordListPurchParmLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDeliveryFields</Name>
				<Source><![CDATA[
    protected void setDeliveryFields()
    {
        PurchLine           localPurchLine;
        PurchParmLine       purchParmLine;

        select firstonly purchParmLine
            where purchParmLine.ParmId     == purchParmTable.ParmId
            &&    purchParmLine.TableRefId == purchParmTable.TableRefId;

        localPurchLine = purchParmLine.purchLine();

        vendReceiptsListJour.DeliveryPostalAddress = purchParmTable.DeliveryPostalAddress ? purchParmTable.DeliveryPostalAddress : localPurchLine.DeliveryPostalAddress;

        vendReceiptsListJour.DeliveryName          = purchParmTable.DeliveryName    ? purchParmTable.DeliveryName : localPurchLine.DeliveryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    protected Object totals()
    {
        return purchTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    protected Common typeParmLine()
    {
        PurchParmLine   purchParmLine;
        return purchParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    protected TransDate  updateDate()
    {
        return purchParmTable.updateDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReceiptsListJournalCreate construct()
    {
        return new PurchReceiptsListJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transitDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transit documents
    /// </summary>
    private void transitDocument()
    {
        TransitDocumentManager_IN   transitManager;
        VendReceiptsListTrans       vendReceiptsListTransLoc;
        PurchParmLine               purchParmLineLocal;
        
        transitManager = TransitDocumentManager_IN::newManager();
        transitManager.transit(purchParmTable, vendReceiptsListJour);

        while select vendReceiptsListTransLoc
                where vendReceiptsListTransLoc.PurchId              == vendReceiptsListJour.PurchId
                    && vendReceiptsListTransLoc.ReceiptsListId      == vendReceiptsListJour.ReceiptsListId
                    && vendReceiptsListTransLoc.ReceiptsListDate    == vendReceiptsListJour.ReceiptsListDate
                join purchParmLineLocal
                    where  purchParmLineLocal.InventTransId    == vendReceiptsListTransLoc.InventTransId
                        && purchParmLineLocal.ReasonTableRef   == vendReceiptsListTransLoc.ReasonTableRef
        {
            transitManager.transit(purchParmLineLocal, vendReceiptsListTransLoc, vendReceiptsListJour);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>