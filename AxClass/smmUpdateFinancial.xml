<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmUpdateFinancial</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmUpdateFinancial extends RunBaseBatch implements BatchRetryable
{
    QueryRun            qRun;
    DirPartyRecId       party;
    DialogField         fromDate;
    DialogField         toDate;

    smmPeriodFrom       fromDateVal;
    smmPeriodTo         toDateVal;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        fromDateVal,
        toDateVal
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description from the current class by calling the static description method of the
    /// class.
    /// </summary>
    /// <returns>
    /// The description of the current class.
    /// </returns>
    /// <remarks>
    /// The static <c>RunBase::description</c> method is typically used to obtain the description of a
    /// class because a class does not have to be initialized to call it.
    /// </remarks>
    public ClassDescription caption()
    {
        return "@SYS80647";
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS80647";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        smmParametersTable  smmParametersTable;

        smmParametersTable = smmParametersTable::find();

        // Period
        dialog.addGroup("@SYS40858");

        fromDate = dialog.addField(extendedTypeStr(smmPeriodFrom));
        toDate   = dialog.addField(extendedTypeStr(smmPeriodTo));

        fromDateVal = smmParametersTable.PeriodFrom;
        toDateVal   = smmParametersTable.PeriodTo;

        fromDate.value(fromDateVal);
        toDate.value(toDateVal);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDateVal = fromDate.value();
        toDateVal   = toDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, (qRun ? qRun.pack() : connull())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParty</Name>
				<Source><![CDATA[
    DirPartyRecId parmParty(DirPartyRecId _Party = Party)
    {
        Party = _Party;
        return Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it in
    /// the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        QueryBuildRange qbRange;
        if (!qRun)
        {
            qRun = new QueryRun(new Query(querystr(custUpdateFinancials)));
        }
        if (Party)
        {
            qbRange = qRun.query().dataSourceTable(tablenum(CustTable)).findRange(fieldnum(CustTable,Party));
            if (!qbRange)
            {
                qbRange = qRun.query().dataSourceTable(tablenum(CustTable)).addRange(fieldnum(CustTable,Party));
            }
            qbRange.value(queryvalue(Party));
        }

        return qRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        super();

        try
        {
            smmBusRelRevenue::updateFinancials(this.queryRun(),fromDateVal,toDateVal);
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job is run by using the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    /// longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        boolean ret;

        ret = party ? false : true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;
                if (SysQuery::isPackedOk(packedQuery) && !qRun)
                {
                    qRun = new QueryRun(packedQuery);
                }

                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean         ret;
        ProjPeriodId    periodId;

        ret = super(_calledFrom);

        if (ret)
        {
            periodId = smmParametersTable::find().PeriodId;

            if (!periodId)
            {
                // Period must be selected in CRM parameters.
                throw error("@SYS97163");
            }

            if (fromDate.value() && toDate.value() && fromDate.value() > toDate.value())
            {
                // From date must be before To date
                return checkFailed("@SYS91020");
            }
            if (!ProjPeriodLine::findFromPeriodFrom(periodId,fromDate.value())
                || !ProjPeriodLine::findFromPeriodTo(periodId,toDate.value()))
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        smmUpdateFinancial          busRelUpdateFinancials;
        CustTable                   custTable;
        smmBusRelRevenue            busRelRevenue;
        DirPartyRecId               Party;

        if (args && args.dataset() == tablenum(CustTable))
        {
            custTable     = args.record();
            Party   = custTable.Party;
        }
        else if (args && args.dataset() == tablenum(smmBusRelRevenue))

        {
            busRelRevenue   = args.record();
            Party     = busRelRevenue.Party;
        }

        busRelUpdateFinancials = new smmUpdateFinancial();

        busRelUpdateFinancials.parmParty(Party);

        if (busRelUpdateFinancials.prompt())
        {
            busRelUpdateFinancials.runOperation();
        }

        if (args && args.caller())
        {
            args.caller().refreshData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>