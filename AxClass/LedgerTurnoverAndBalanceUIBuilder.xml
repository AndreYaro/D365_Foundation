<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTurnoverAndBalanceUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerTurnoverAndBalancelUIBuilder</c> class is the UI builder class for the
///    <c>LedgerTurnoverAndBalance</c> report.
/// </summary>
public class LedgerTurnoverAndBalanceUIBuilder extends SrsReportDataContractUIBuilder
{
    LedgerTurnoverAndBalanceContract    contract;

    TransDate               fromDate;
    TransDate               toDate;
    boolean                 printClosingTransactions;
    boolean                 printZeroBalances;
    boolean                 printOpeningBalance;
    boolean                 separateBalance;
    CurrentOperationsTax    printPostingLayer;
    protected LedgerPostingLayerMultiSelection printPostingLayers;
    DimensionEnumeration    dimensionSelections;
    Map                     dimControlMap;
    Map                     dimRangeMap;

    // The following parameters are not shown to the user. They are set to a specific value in the Controller class
    str                     sysVersion;
    DirPartyName            userName;

    DialogField dialogDimensionRetrictions;
    DialogField dialogPrintZeroBalances;
    DialogField dialogFromDate;
    DialogField dialogToDate;
    DialogField dialogPrintClosingTransactions;
    DialogField dialogPrintOpeningBalance;
    DialogField dialogPrintPostingLayer;
    DialogField dialogSeparateBalance;
    DialogField dialogSysVersion;
    DialogField dialogUserName;
    protected LedgerPostingLayerMultiSelectLookup postingLayerLookup;
    protected LedgerTrialBalanceListPageBalanceParms balanceParameters;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds and handles the UI dialog box for the <c>LedgerTurnoverAndBalance</c> report.
    /// </summary>
    public void build()
    {
        DialogGroup                 dialogDimensions;
        DialogField                 dimField;
        str                         thisVal;
        str                         thisLabel;
        DimensionAttributeSetItem   dasi;
        DimensionAttribute          dimAttr;

        contract = this.dataContractObject() as LedgerTurnoverAndBalanceContract;

        this.getParameterSavedValues();

        dialogFromDate = this.dialog().addFieldValue(extendedTypeStr(TransDate), fromDate, "@SYS5209", "@ApplicationSuite_Localization:TurnoverBalanceStartDate");
        dialogToDate = this.dialog().addFieldValue(extendedTypeStr(TransDate), toDate, "@SYS14656", "@ApplicationSuite_Localization:TurnoverBalanceStartDate");

        dialogPrintPostingLayer = this.dialog().addFieldValue(extendedTypeStr(LedgerPostingLayerMultiSelection),printPostingLayers,"@SYS10925", "@SYS1487");
        
        dialogPrintPostingLayer.registerOverrideMethod(methodStr(FormStringControl, lookup),
            methodStr(LedgerTurnoverAndBalanceUIBuilder, contactPostingLayerLookup),
            this);

        dialogPrintZeroBalances = this.dialog().addFieldValue(enumStr(boolean),printZeroBalances, "@ApplicationSuite_Localization:TurnoverPrintZeroBalance", "@ApplicationSuite_Localization:TurnoverBalanceStartDateVendor");
        dialogPrintOpeningBalance = this.dialog().addFieldValue(enumStr(boolean),printOpeningBalance, "@ApplicationSuite_Localization:TurnoverPrintOpeningBalance", "@ApplicationSuite_Localization:TurnoverBalanceStartDateVendor");
        dialogSeparateBalance = this.dialog().addFieldValue(enumStr(boolean),separateBalance, "@ApplicationSuite_Localization:TurnoverSeparateBalance", "@ApplicationSuite_Localization:TurnoverBalanceStartDateVendor");
        dialogPrintClosingTransactions = this.dialog().addFieldValue(enumStr(boolean),printClosingTransactions,"@SYS14844", "@ApplicationSuite_Localization:TurnoverAdditionalSummary");

        dialogDimensions = this.dialog().addGroup("@ApplicationSuite_Localization:TurnoverRangeOfDimensions");

        // Control map maps dimension attributes to physical controls
        dimControlMap = new Map(Types::Int64, Types::Class);

        // DimRangeMap map dimension attributes to ranges
        dimRangeMap = contract.parmDimensionRangeMap();

        while select DimensionAttribute from dasi where dasi.DimensionAttributeSet == DimensionCache::getDimensionAttributeSetForLedger()
            join * from dimAttr where dimAttr.RecId == dasi.DimensionAttribute
        {
            // Skip main account when defineing dialog fields for the dimensions
            if (DimensionAttribute::find(dasi.DimensionAttribute).Type != DimensionAttributeType::MainAccount)
            {
                if (dimRangeMap.exists(dasi.DimensionAttribute))
                {
                    thisVal = dimRangeMap.lookup(dasi.DimensionAttribute);
                }
                else
                {
                    thisVal = '';
                }

                thisLabel = dimAttr.localizedName();

                dimField = this.dialog().addFieldValue(extendedTypeStr(DimensionValue), thisVal, thisLabel);
                dimField.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(LedgerTurnoverAndBalanceUIBuilder, lookupDimensionAttribute), this);

                dimControlMap.insert(dasi.DimensionAttribute, dimField);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPostingLayerLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates look up for posting layers.
    /// </summary>
    /// <param name = "_callerControl">The posting layer control.</param>
    private void contactPostingLayerLookup(FormStringControl _callerControl)
    {
        postingLayerLookup.lookupPostingLayer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>LedgerTurnoverAndBalance</c> parameter value before it runs the report.
    /// </summary>
    public void getFromDialog()
    {
        fromDate = dialogFromDate.value();
        toDate = dialogToDate.value();
        printClosingTransactions = dialogPrintClosingTransactions.value();
        printZeroBalances = dialogPrintZeroBalances.value();
        printOpeningBalance = dialogPrintOpeningBalance.value();
        separateBalance = dialogSeparateBalance.value();
        printPostingLayers = dialogPrintPostingLayer.value();

        this.saveParameterValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterSavedValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the saved parameter values.
    /// </summary>
    private void getParameterSavedValues()
    {
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();

        printZeroBalances = contract.parmPrintZeroBalances();
        printOpeningBalance = contract.parmPrintOpeningBalance();
        printClosingTransactions = contract.parmPrintClosingTransactions();
        separateBalance = contract.parmSeparateBalance();
        printPostingLayer = contract.parmPrintPostingLayer();
        printPostingLayers = contract.parmPrintPostingLayers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements a custom lookup for dimension attribute.
    /// </summary>
    /// <param name="_dimensionValue">
    ///    The <c>FormStringControl</c> for which the lookup fields must be associated.
    /// </param>
    private void lookupDimensionAttribute(FormStringControl _dimensionValue)
    {
        if (_dimensionValue != null)
        {
            DimensionValueLookupHelper::lookupDimensionValues(DimensionAttribute::findByLocalizedName(_dimensionValue.label()), _dimensionValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the parameter values from the dialog box.
    /// </summary>
    private void saveParameterValues()
    {
        MapEnumerator       controlMapEnum;
        DialogField         dimField;
        RecId               dimAttrRecId;
        FormStringControl   fsc;

        contract.parmFromDate(fromDate);
        contract.parmToDate(toDate);
        contract.parmPrintClosingTransactions(printClosingTransactions);
        contract.parmPrintZeroBalances(printZeroBalances);
        contract.parmPrintOpeningBalance(printOpeningBalance);
        contract.parmSeparateBalance(separateBalance);
        contract.parmPrintPostingLayer(printPostingLayer);
        contract.parmPrintPostingLayers(printPostingLayers);

        dimRangeMap = new Map(Types::Int64, Types::String);

        controlMapEnum = dimControlMap.getEnumerator();

        while (controlMapEnum.moveNext())
        {
            dimAttrRecId = controlMapEnum.currentKey();
            dimField = controlMapEnum.currentValue();
            fsc = dimField.control();

            if (fsc.text())
            {
                dimRangeMap.insert(dimAttrRecId, fsc.text());
            }
        }

        contract.parmDimensionRangeMap(dimRangeMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionAttributeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the record ID and natural key string of a <c>DimensionAttributeValue</c> record for the
    ///    specified <c>DimensionAttribute</c> record.
    /// </summary>
    /// <param name="_dimensionAttribute">
    ///    The <c>DimensionAttribute</c> record of the value to be set.
    /// </param>
    /// <param name="_dimAttrValueRecId">
    ///    The record ID of the <c>DimensionAttributeValue</c> record.
    /// </param>
    /// <param name="_value">
    ///    The natural key string that is associated with the <c>DimensionAttributeValue</c> record.
    /// </param>
    /// <remarks>
    ///    This method is used as a callback from the lookup form. When a user directly types in a value, it
    ///    will be handled through the related [field]_modified method.
    /// </remarks>
    public void setDimensionAttributeValue(DimensionAttribute _dimensionAttribute, RecId _dimAttrValueRecId, str _value)
    {
        // Force a save of the set(s) as the user may leave the tab at any point and no event will be raised to force a savedimControlMap
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides lookup method for Posting Layers control.
    /// </summary>
    public void postRun()
    {
        super();

        postingLayerLookup = LedgerPostingLayerMultiSelectLookup::construct(dialogPrintPostingLayer.control());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>