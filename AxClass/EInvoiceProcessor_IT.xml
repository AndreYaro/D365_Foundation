<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceProcessor_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceProcessor_IT</c> class manages all processing of Italian electronic invoices.
/// </summary>
public class EInvoiceProcessor_IT extends RunBaseBatch implements BatchRetryable
{
    RecordSortedList eInvoiceList;
    Set actions;
    EInvoiceParameters_IT parameters;
    private DialogField paramDialogAction;
    private DialogField paramDialogUseDefault;
    private  EInvoiceAction_IT dialogAction;
    private NoYes useDefault = NoYes::Yes;
    
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedEInvoiceList,
        packedActions
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply the selected actions to the electronic invoice.
    /// </summary>
    /// <param name="_eInvoice">
    /// The electronic invoice header.
    /// </param>
    protected void applyActions(EInvoice_IT _eInvoice)
    {
        boolean isActionApplicable(EInvoiceAction_IT _action)
        {
            return this.parmActions().in(_action) &&
                this.getStatusesProcessableForAction(_action).in(_eInvoice.Status);
        }

        if (isActionApplicable(EInvoiceAction_IT::CreateXML))
        {
            _eInvoice.createXMLOutgoing();
            _eInvoice.reread();
        }
        else if (isActionApplicable(EInvoiceAction_IT::CreateXMLUpdate))
        {
            _eInvoice.createXMLOutgoing(curUserId());
            _eInvoice.reread();
        }

        if (isActionApplicable(EInvoiceAction_IT::SignXML))
        {
            _eInvoice.signXMLOutgoing();
            _eInvoice.reread();
        }
        else if (isActionApplicable(EInvoiceAction_IT::SignXMLUpdate))
        {
            _eInvoice.signXMLOutgoing(curUserId());
            _eInvoice.reread();
        }

        if (isActionApplicable(EInvoiceAction_IT::SendXML) || isActionApplicable(EInvoiceAction_IT::SendXMLUpdate))
        {
            Common invoice = _eInvoice.getInvoiceRecord();

            using (EInvoiceContext_IT eInvoiceContext = EInvoiceContext_IT::instance())
            {
                eInvoiceContext.parmCheckERDestinationExists(false);
                EInvoice_IT::exportXMLToSharePoint(invoice.RecId, invoice.TableId);
            }

            _eInvoice.reread();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionsApplicableToEInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of actions applicable to the list of eInvoices.
    /// </summary>
    /// <returns>
    /// The set containing <c>EInvoiceAction_IT</c> values.
    /// </returns>
    public Set getActionsApplicableToEInvoiceList()
    {
        Set actionsApplicable = new Set(Types::Enum);

        DictEnum dictEnum = new DictEnum(enumNum(EInvoiceAction_IT));
        int enumElementIdx;

        EInvoice_IT eInvoice;
        boolean nextExists;

        if (this.parmEInvoiceList().len())
        {
            // no actions are applicable to an empty list, so initializing only after the if ()
            for (enumElementIdx = 0; enumElementIdx < dictEnum.values(); enumElementIdx ++)
            {
                actionsApplicable.add(dictEnum.index2Value(enumElementIdx));
            }

            nextExists = this.parmEInvoiceList().first(eInvoice);
            while (nextExists && actionsApplicable.elements())
            {
                actionsApplicable = Set::intersection(
                    actionsApplicable,
                    this.getActionsApplicableToStatus(eInvoice.Status));

                nextExists = this.parmEInvoiceList().next(eInvoice);
            }
        }

        return actionsApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionsApplicableToStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the set of actions applicable to the specified status of the eInvoice.
    /// </summary>
    /// <param name="_status">
    /// The eInvoice status.
    /// </param>
    /// <returns>
    /// The set of actions applicable to the specified status of the eInvoice.
    /// </returns>
    public Set getActionsApplicableToStatus(EInvoiceStatus_IT _status)
    {
        Set actionsApplicable = new Set(Types::Enum);

        DictEnum dictEnum = new DictEnum(enumNum(EInvoiceAction_IT));
        int enumElementIdx;

        EInvoiceAction_IT   action;

        for (enumElementIdx = 0; enumElementIdx < dictEnum.values(); enumElementIdx ++)
        {
            action = dictEnum.index2Value(enumElementIdx);
            if (this.getStatusesProcessableForAction(action).in(_status))
            {
                actionsApplicable.add(action);
            }
        }

        return actionsApplicable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusesProcessable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets statuses of electronic invoices to which the current set of actions can be applied.
    /// </summary>
    /// <returns>
    /// The set of statuses of electronic invoices to which the current set of actions can be applied.
    /// </returns>
    /// <remarks>
    /// The result set of statuses is a union of statuses to which the current set of actions can be applied,
    /// so not all actions from the current set can be applied to all statuses from the result set.
    /// </remarks>
    public Set getStatusesProcessable()
    {
        Set statusesProcessable = new Set(Types::Enum);

        SetEnumerator actionsEnumerator = this.parmActions().getEnumerator();

        actionsEnumerator.reset();
        while (actionsEnumerator.moveNext())
        {
            statusesProcessable = this.getStatusesProcessableForAction(actionsEnumerator.current(), statusesProcessable);
        }

        return statusesProcessable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStatusesProcessableForAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets statuses of electronic invoices to which the specified action can be applied.
    /// </summary>
    /// <param name="_action">
    /// The action to apply to the electronic invoices.
    /// </param>
    /// <param name="_statusesProcessable">
    /// The set of statuses of electronic invoices that should be merged with the return value; optional.
    /// </param>
    /// <returns>
    /// The set of statuses of electronic invoices to which the specified action can be applied.
    /// </returns>
    public Set getStatusesProcessableForAction(EInvoiceAction_IT _action, Set _statusesProcessable = new Set(Types::Enum))
    {
        switch (_action)
        {
            // Statuses applicable for creating XML
            case EInvoiceAction_IT::CreateXMLUpdate:
                _statusesProcessable.add(EInvoiceStatus_IT::CreatedFailed);
                _statusesProcessable.add(EInvoiceStatus_IT::Created);
                _statusesProcessable.add(EInvoiceStatus_IT::SignFailed);
                _statusesProcessable.add(EInvoiceStatus_IT::SignOK);
                _statusesProcessable.add(EInvoiceStatus_IT::SendFailed);
                _statusesProcessable.add(EInvoiceStatus_IT::SendOK);
                // no break

            case EInvoiceAction_IT::CreateXML:
                _statusesProcessable.add(EInvoiceStatus_IT::New);
                break;

            // Statuses applicable for signing XML
            case EInvoiceAction_IT::SignXMLUpdate:
                if (parameters.GenDigitalSignature != DigitalSignature::Disabled)
                {
                    _statusesProcessable.add(EInvoiceStatus_IT::Created);
                    _statusesProcessable.add(EInvoiceStatus_IT::SignFailed);
                    _statusesProcessable.add(EInvoiceStatus_IT::SignOK);
                    _statusesProcessable.add(EInvoiceStatus_IT::SendFailed);
                    _statusesProcessable.add(EInvoiceStatus_IT::SendOK);
                }
                break;

            case EInvoiceAction_IT::SignXML:
                if (parameters.GenDigitalSignature != DigitalSignature::Disabled    &&
                    parameters.GenIsAutoDigitalSigning)
                {
                    _statusesProcessable.add(EInvoiceStatus_IT::Created);
                }
                break;

            // Statuses applicable for sending XML
            case EInvoiceAction_IT::SendXMLUpdate:
                _statusesProcessable.add(EInvoiceStatus_IT::New);
                _statusesProcessable.add(EInvoiceStatus_IT::Created);
                _statusesProcessable.add(EInvoiceStatus_IT::SignFailed);
                _statusesProcessable.add(EInvoiceStatus_IT::SignOK);
                _statusesProcessable.add(EInvoiceStatus_IT::SendFailed);
                _statusesProcessable.add(EInvoiceStatus_IT::SendOK);
                break;

            case EInvoiceAction_IT::SendXML:
                if (parameters.GenIsAutoSending == NoYes::Yes) 
                {
                    _statusesProcessable.add(EInvoiceStatus_IT::Created);
                }
                break;
        }

        return _statusesProcessable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of actions to be applied to the electronic invoices.
    /// </summary>
    public void initActions()
    {
        if (useDefault)
        {
            if (actions.elements())
            {
                return;
            }

            actions.add(EInvoiceAction_IT::CreateXML);

            if (parameters.GenDigitalSignature != DigitalSignature::Disabled &&
                parameters.GenIsAutoDigitalSigning)
            {
                actions.add(EInvoiceAction_IT::SignXML);
            }
        }
        else
        {
            actions.add(dialogAction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the list of electronic invoices for processing.
    /// </summary>
    public void initEInvoiceList()
    {
        SetEnumerator statusesEnumerator;

        if (this.parmEInvoiceList().len())
        {
            return;
        }

        statusesEnumerator = this.getStatusesProcessable().getEnumerator();
        statusesEnumerator.reset();
        while (statusesEnumerator.moveNext())
        {
            this.initEInvoiceListByStatus(statusesEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEInvoiceListByStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the electronic invoices of the given status to the processing list.
    /// </summary>
    /// <param name="_status">
    /// The status of the electronic invoices.
    /// </param>
    protected void initEInvoiceListByStatus(EInvoiceStatus_IT _status)
    {
        EInvoice_IT eInvoice;

        while select eInvoice
            where eInvoice.Status == _status
        {
            this.parmEInvoiceList().ins(eInvoice, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        parameters = EInvoiceParameters_IT::find();

        eInvoiceList = new RecordSortedList(tablenum(EInvoice_IT));
        eInvoiceList.sortOrder(fieldNum(EInvoice_IT, RecId));

        actions = new Set(Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed =  [#CurrentVersion,
            this.packEInvoiceList(),
            this.packActions()];
        packed = this.appendVariableToPack(packed, varStr(dialogAction), dialogAction);
        packed = this.appendVariableToPack(packed, varStr(useDefault), useDefault);

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(EInvoiceProcessor_IT) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the the list of the actions to be applied to the selected electronic invoice (invoices).
    /// </summary>
    /// <returns>
    /// The container with action types.
    /// </returns>
    protected container packActions()
    {
        container packedActions = conNull();
        SetEnumerator actionsEnumerator = this.parmActions().getEnumerator();

        actionsEnumerator.reset();
        while (actionsEnumerator.moveNext())
        {
            packedActions += actionsEnumerator.current();
        }

        return packedActions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packEInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the list of electronic invoices to be processed into the container.
    /// </summary>
    /// <returns>
    /// The container of record IDs of the electronic invoices to be processed.
    /// </returns>
    protected container packEInvoiceList()
    {
        container packedEInvoiceList = connull();
        EInvoice_IT eInvoice;
        boolean nextExists;

        nextExists = this.parmEInvoiceList().first(eInvoice);
        while (nextExists && eInvoice)
        {
            packedEInvoiceList += eInvoice.RecId;
            nextExists = this.parmEInvoiceList().next(eInvoice);
        }

        return packedEInvoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActions</Name>
				<Source><![CDATA[
    public Set parmActions(Set _actions = actions)
    {
        actions = _actions;
        return actions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEInvoiceList</Name>
				<Source><![CDATA[
    public RecordSortedList parmEInvoiceList(RecordSortedList _eInvoiceList = eInvoiceList)
    {
        eInvoiceList = _eInvoiceList;
        return eInvoiceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogAction</Name>
				<Source><![CDATA[
    public EInvoiceAction_IT parmDialogAction(EInvoiceAction_IT _dialogAction = dialogAction)
    {
        dialogAction = _dialogAction;
        return dialogAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseDefault</Name>
				<Source><![CDATA[
    public NoYes parmUseDefault(NoYes _useDefault = useDefault)
    {
        useDefault = _useDefault;
        return useDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.runProcessing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run e-Invoice processing.
    /// </summary>
    public void runProcessing()
    {
        EInvoice_IT eInvoice;
        boolean nextExists;

        EInvoiceProcessor_IT singleEInvoice;
        BatchHeader batchHeader;

        this.initActions();
        this.initEInvoiceList();

        if (!this.parmEInvoiceList().len() ||
            !this.parmActions().elements())
            return;

        if (!this.validatePreRun())
            return;

        if (this.isInBatch() && this.parmEInvoiceList().len() > 1)
        {
            batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
        }

        nextExists = this.parmEInvoiceList().first(eInvoice);
        while (nextExists)
        {
            singleEInvoice = EInvoiceProcessor_IT::newEInvoiceActions(eInvoice, this.parmActions());

            if (batchHeader)
            {
                singleEInvoice.batchInfo().parmCaption(eInvoice.description());
                singleEInvoice.batchInfo().parmAutomaticTransaction(NoYes::No);
                batchHeader.addRuntimeTask(singleEInvoice, this.parmCurrentBatch().RecId);
            }
            else
            {
                singleEInvoice.applyActions(eInvoice);
            }

            nextExists = this.parmEInvoiceList().next(eInvoice);
        }

        if (batchHeader)
        {
            batchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container packedEInvoiceList;
        container packedActions;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;

                this.unpackEInvoiceList(packedEInvoiceList);
                this.unpackActions(packedActions);
                this.dialogAction = this.extractPackedVariable(_packedClass, varStr(dialogAction));
                this.useDefault = this.extractPackedVariable(_packedClass, varStr(useDefault));

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the the list of the actions to be applied to the selected electronic invoice (invoices).
    /// </summary>
    /// <param name="_packedActions">
    /// The container with action types.
    /// </param>
    protected void unpackActions(container _packedActions)
    {
        int packedActionsIdx;
        int packedActionsLen = conLen(_packedActions);

        for (packedActionsIdx = 1; packedActionsIdx <= packedActionsLen; packedActionsIdx ++)
        {
            this.parmActions().add(conPeek(_packedActions, packedActionsIdx));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackEInvoiceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the list of electronic invoices to be processed from the container.
    /// </summary>
    /// <param name="_packedEInvoiceList">
    /// The container of record IDs of the electronic invoices to be proceesed.
    /// </param>
    protected void unpackEInvoiceList(container _packedEInvoiceList)
    {
        int packedEInvoiceListIdx;
        int packedEInvoiceListLen = conLen(_packedEInvoiceList);

        for (packedEInvoiceListIdx = 1; packedEInvoiceListIdx <= packedEInvoiceListLen; packedEInvoiceListIdx ++)
        {
            this.parmEInvoiceList().ins(EInvoice_IT::find(conPeek(_packedEInvoiceList, packedEInvoiceListIdx)), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the user interaction is required since the specified actions overwrite the results from previous processing.
    /// </summary>
    /// <returns>
    /// false, if some conflicts were encountered and the user has canceleld the processing; otherwise true.
    /// </returns>
    /// <remarks>
    /// Since user interaction is not possible in batch mode, validation should always pass in batch mode.
    /// </remarks>
    public boolean validatePreRun()
    {
        boolean ret = true;

        EInvoice_IT eInvoice;
        boolean nextExists;

        boolean validateCreateUpdate = this.parmActions().in(EInvoiceAction_IT::CreateXMLUpdate);
        boolean validateSignUpdate = this.parmActions().in(EInvoiceAction_IT::SignXMLUpdate);
        boolean validateSendUpdate = this.parmActions().in(EInvoiceAction_IT::SendXMLUpdate);

        Map errorsMap = new Map(Types::String, Types::Class);
        str errorText;

        void addError(EInvoiceAction_IT _action, EInvoiceStatus_IT _status, str _invoiceDescription)
        {
            Set errorActions;

            str invoiceKey = strfmt("@SYP4881712", _invoiceDescription, _status);

            if (errorsMap.exists(invoiceKey))
            {
                errorActions = errorsMap.lookup(invoiceKey);
            }
            else
            {
                errorActions = new Set(Types::Enum);
            }

            errorActions.add(_action);

            errorsMap.insert(invoiceKey, errorActions);
        }

        void buildErrorText()
        {
            MapEnumerator errorsEnumerator = errorsMap.getEnumerator();

            str invoiceKey;
            Set errorActions;

            str invoiceError;

            while (errorsEnumerator.moveNext())
            {
                invoiceKey = errorsEnumerator.currentKey();
                errorActions = errorsEnumerator.currentValue();

                invoiceError = invoiceKey;
                if (errorActions.in(EInvoiceAction_IT::CreateXMLUpdate))
                {
                    invoiceError += ' ' + "@SYP4881694";
                }
                if (errorActions.in(EInvoiceAction_IT::SignXMLUpdate))
                {
                    invoiceError += ' ' + "@SYP4881696";
                }
                if (errorActions.in(EInvoiceAction_IT::SendXMLUpdate))
                {
                    invoiceError += ' ' + "@SYP4881695";
                }

                errorText += (errorText ? '\n' : '') + invoiceError;
            }
        }

        if (!this.isInBatch() &&
            (validateCreateUpdate ||
            validateSignUpdate ||
            validateSendUpdate))
        {
            nextExists = this.parmEInvoiceList().first(eInvoice);
            while (nextExists)
            {
                if (validateCreateUpdate    &&
                    (eInvoice.Status == EInvoiceStatus_IT::Created ||
                    eInvoice.Status == EInvoiceStatus_IT::SignOK ||
                    eInvoice.Status == EInvoiceStatus_IT::SendOK))
                {
                    addError(EInvoiceAction_IT::CreateXMLUpdate, eInvoice.Status, eInvoice.description());
                }

                if (validateSignUpdate &&
                    (eInvoice.Status == EInvoiceStatus_IT::SignOK ||
                    eInvoice.Status == EInvoiceStatus_IT::SendOK ||
                    (eInvoice.Status == EInvoiceStatus_IT::SendFailed && eInvoice.XMLOutgoingSigned)))
                {
                    addError(EInvoiceAction_IT::SignXMLUpdate, eInvoice.Status, eInvoice.description());
                }

                if (validateSendUpdate &&
                    eInvoice.Status == EInvoiceStatus_IT::SendOK)
                {
                    addError(EInvoiceAction_IT::SendXMLUpdate, eInvoice.Status, eInvoice.description());
                }

                nextExists = this.parmEInvoiceList().next(eInvoice);
            }

            buildErrorText();

            ret = this.validatePreRunPrompt(errorText, errorsMap.elements()) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreRunPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user for to confirm the updating the eInvoices.
    /// </summary>
    /// <param name="_errorText">
    /// The error text, describing the eInvoices and their statuses that cause the update warning.
    /// </param>
    /// <param name="_invoicesCount">
    /// The number of the eInvoices that need confirmation.
    /// </param>
    /// <returns>
    /// true, if the user has confirmed the update; false otherwise.
    /// </returns>
    protected boolean validatePreRunPrompt(str _errorText, int _invoicesCount)
    {
        Dialog  dialog;
        boolean ret = true;

        if (_errorText && _invoicesCount)
        {
            dialog = new Dialog("@SYS12529");
            if (_invoicesCount == 1)
            {
                dialog.addText(_errorText);
            }
            else
            {
                dialog.addFieldValue(extendedTypeStr(Notes), _errorText, "@SYS866", "@SYS26001").allowEdit(false);
            }

            dialog.run();
            dialog.wait();

            if (!dialog.closedOk())
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EInvoiceProcessor_IT construct()
    {
        return new EInvoiceProcessor_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog paramDialog = super();
        paramDialogAction = paramDialog.addFieldValue(enumStr(EInvoiceAction_IT), dialogAction);
        paramDialogAction.enabled(!useDefault);

        paramDialogUseDefault = paramDialog.addFieldValue(enumStr(NoYes), useDefault, "@SYS342690");
        paramDialogUseDefault.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(EInvoiceProcessor_IT, paramDialogUseDefaultModified),
            this);

        return paramDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDialogUseDefaultModified</Name>
				<Source><![CDATA[
    private boolean paramDialogUseDefaultModified(FormCheckBoxControl _importMultipleStatementAccounts)
    {
        paramDialogAction.enabled(!paramDialogUseDefault.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        dialogAction = paramDialogAction.value();
        useDefault = paramDialogUseDefault.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EInvoiceProcessor_IT processor;
        RecId eInvoiceCallerRecId;
        FormDatasource formDatasource;

        if (_args)
        {
            if (_args.record() && _args.dataset() == tablenum(EInvoice_IT))
            {
                processor = EInvoiceProcessor_IT::newEInvoice(_args.record());

                if (FormDataUtil::isFormDataSource(_args.record()))
                {
                    eInvoiceCallerRecId = _args.record().RecId;
                    formDatasource = FormDataUtil::getFormDataSource(_args.record());
                }
            }
            else
            {
                processor = new EInvoiceProcessor_IT();
            }

            if (_args.parmEnumType() == enumnum(EInvoiceAction_IT))
            {
                processor.parmActions().add(_args.parmEnum());
            }

            processor.runProcessing();

            if (formDatasource)
            {
                formDatasource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoiceProcessor_IT</c> class for the specified eInvoice record.
    /// </summary>
    /// <param name="_eInvoice">
    /// The eInvoice record.
    /// </param>
    /// <returns>
    /// A new instance of the <c>EInvoiceProcessor_IT</c> class
    /// </returns>
    /// <remarks>
    /// Multiple eInvoices can be processed if the <paramref name="_eInvoice"/> is a record bound to form datasource.
    /// </remarks>
    public static EInvoiceProcessor_IT newEInvoice(EInvoice_IT _eInvoice)
    {
        EInvoiceProcessor_IT eInvoiceProcessor = new EInvoiceProcessor_IT();

        FormDataSource formDatasource;
        EInvoice_IT eInvoiceCaller;

        if (_eInvoice)
        {
            if (FormDataUtil::isFormDataSource(_eInvoice))
            {
                formDatasource = FormDataUtil::getFormDataSource(_eInvoice) as FormDataSource;
                if (formDatasource && formDatasource.getFirst(true))
                {
                    eInvoiceCaller = formDatasource.getFirst(true);
                }
                else
                {
                    eInvoiceCaller = _eInvoice;
                }

                while (eInvoiceCaller)
                {
                    eInvoiceProcessor.parmEInvoiceList().ins(eInvoiceCaller);

                    if (formDatasource)
                    {
                        eInvoiceCaller = formDatasource.getNext();
                    }
                    else
                    {
                        eInvoiceCaller = null;
                    }
                }
            }
            else
            {
                eInvoiceProcessor.parmEInvoiceList().ins(_eInvoice);
            }
        }

        return eInvoiceProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEInvoiceActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EInvoiceProcessor_IT</c> class for the specified
    /// eInvoice record and set of actions to apply to the eInvoice.
    /// </summary>
    /// <param name="_eInvoice">
    /// The eInvoice record.
    /// </param>
    /// <param name="_actions">
    /// The set of actions to apply to the specified eInvoice.
    /// </param>
    /// <returns>
    /// A new instance of the <c>EInvoiceProcessor_IT</c> class
    /// </returns>
    /// <remarks>
    /// Only single eInvoice is processed; cf. to the <c>newEInvoice</c> method.
    /// </remarks>
    public static EInvoiceProcessor_IT newEInvoiceActions(EInvoice_IT _eInvoice, Set _actions)
    {
        EInvoiceProcessor_IT eInvoiceProcessor = new EInvoiceProcessor_IT();

        eInvoiceProcessor.parmActions(_actions);
        eInvoiceProcessor.parmEInvoiceList().ins(EInvoice_IT::find(_eInvoice.RecId));

        return eInvoiceProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>