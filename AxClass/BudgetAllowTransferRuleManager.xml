<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAllowTransferRuleManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAllowTransferRuleManager</c> class manages the budget allow transfer rules.
/// </summary>
public class BudgetAllowTransferRuleManager
{
    DimensionExpressionCriteriaCollection expressionCriteriaCollection;

    BudgetAllowTransferRuleMemberName memberName;
    RecId memberRecId;
    RecId ruleRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the criteria expression to the rule.
    /// </summary>
    /// <param name="_expressionCriteria">
    /// The <c>DimensionExpressionCriteria</c> object to add.
    /// </param>
    /// <remarks>
    /// The specified criteria expression will replace the existing criteria expression for the dimension attribute.
    /// </remarks>
    public void addExpressionCriteria(DimensionExpressionCriteria _expressionCriteria)
    {
        // Remove any existing criteria as only one expression can be defined per dimension attribute.
        expressionCriteriaCollection.removeCriteriaForAttribute(_expressionCriteria.parmDimensionAttributeId());

        expressionCriteriaCollection.addExpressionCriteria(_expressionCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the criteria for the specified dimension attribute.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">
    /// The dimension attribute ID for which to remove the criteria.
    /// </param>
    public void removeExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        expressionCriteriaCollection.removeCriteriaForAttribute(_dimensionAttributeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableDimensionAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the available dimension attributes for the specified primary ledger and account structure.
    /// </summary>
    /// <param name = "_primaryLedgerRecId">
    /// The primary ledger record ID.
    /// </param>
    /// <param name = "_accountStructureRecId">
    /// The account structure record ID.
    /// </param>
    /// <returns>
    /// The available dimension attributes for the specified primary ledger and account structure.
    /// </returns>
    public static List getAvailableDimensionAttributes(LedgerRecId _primaryLedgerRecId, DimensionHierarchyId _accountStructureRecId)
    {
        DimensionHierarchyLevel dimensionHierarchyLevel;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        DimensionAttribute dimensionAttribute;

        List dimensionAttributes = new List(Types::Record);

        if (_primaryLedgerRecId && _accountStructureRecId)
        {
            while select RecId from budgetDimensionAttribute
                order by dimensionhierarchyLevel.Level
                where budgetDimensionAttribute.PrimaryLedger == _primaryLedgerRecId
                join * from dimensionAttribute
                    where budgetDimensionAttribute.DimensionAttribute == dimensionAttribute.RecId
                join RecId from dimensionHierarchyLevel
                    where dimensionHierarchyLevel.DimensionAttribute == dimensionAttribute.RecId
                        && dimensionHierarchyLevel.DimensionHierarchy == _accountStructureRecId
            {
                dimensionAttributes.addEnd(dimensionAttribute);
            }
        }

        return dimensionAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpressionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the criteria for the specified dimension attribute.
    /// </summary>
    /// <param name = "_dimensionAttributeRecId">
    /// The dimension attribute ID for which to get the criteria.
    /// </param>
    /// <returns>
    /// The criteria for the dimension attribute if it has been entered; otherwise, the default all values allowed criteria.
    /// </returns>
    protected DimensionExpressionCriteria getExpressionCriteria(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        DimensionExpressionCriteria expressionCriteria;

        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            if (expressionCriteriaCollection.current().parmDimensionAttributeId() == _dimensionAttributeRecId)
            {
                expressionCriteria = expressionCriteriaCollection.current();
                break;
            }
        }

        if (!expressionCriteria)
        {
            expressionCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                _dimensionAttributeRecId,
                DimensionCriteriaOperators::WildcardSQL,
                '',
                '',
                false,
                false);
        }

        return expressionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetAllowTransferRuleManager</c> class.
    /// </summary>
    /// <param name="_allowTransferRuleMemberRecId">
    /// The record ID of the <c>BudgetAllowTransferRuleMember</c> record.
    /// </param>
    protected void initialize(RecId _allowTransferRuleMemberRecId)
    {
        BudgetAllowTransferRuleMember member = BudgetAllowTransferRuleMember::find(_allowTransferRuleMemberRecId);

        memberName = member.Name;
        memberRecId = member.RecId;
        ruleRecId = member.BudgetAllowTransferRule;

        this.initializeExpressionCriteriaCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>DimensionExpressionCriteriaCollection</c> object for the budget allow transfer rule.
    /// </summary>
    public void initializeExpressionCriteriaCollection()
    {
        BudgetAllowTransferRuleMemberCriteria allowTransferRuleCriteria;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        DimensionAttribute dimensionAttribute;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        expressionCriteriaCollection = DimensionExpressionCriteriaCollection::construct();

        BudgetAllowTransferRule allowTransferRule = BudgetAllowTransferRule::find(ruleRecId);

        while select * from allowTransferRuleCriteria
            where allowTransferRuleCriteria.BudgetAllowTransferRuleMember == memberRecId
            join RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.RecId == allowTransferRuleCriteria.BudgetPrimaryLedgerDimensionAttribute
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == budgetDimensionAttribute.DimensionAttribute
            join RecId from dimensionHierarchyLevel
                order by dimensionHierarchyLevel.Level
                where dimensionHierarchyLevel.DimensionAttribute == dimensionAttribute.RecId
                    && dimensionHierarchyLevel.DimensionHierarchy == allowTransferRule.DimensionHierarchyAccountStructure
        {
            expressionCriteriaCollection.addExpressionCriteria(
                DimensionExpressionCriteria::newForDimensionExpression(
                    dimensionAttribute.RecId,
                    allowTransferRuleCriteria.WildCardString,
                    allowTransferRuleCriteria.RangeFrom,
                    allowTransferRuleCriteria.RangeTo,
                    allowTransferRuleCriteria.IsFromOpen,
                    allowTransferRuleCriteria.IsToOpen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemberName</Name>
				<Source><![CDATA[
    public BudgetAllowTransferRuleMemberName parmMemberName(BudgetAllowTransferRuleMemberName _memberName = memberName)
    {
        memberName = _memberName;

        return memberName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpressionCriteriaCollection</Name>
				<Source><![CDATA[
    public DimensionExpressionCriteriaCollection parmExpressionCriteriaCollection(
        DimensionExpressionCriteriaCollection _expressionCriteriaCollection = expressionCriteriaCollection)
    {
        expressionCriteriaCollection = _expressionCriteriaCollection;
        return expressionCriteriaCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the budget allow transfer rule member.
    /// </summary>
    /// <remarks>
    /// The <c>BudgetAllowTransferRuleMember</c> and <c>BudgetAllowTransferRuleMemberCriteria</c> tables are impacted.
    /// </remarks>
    public void save()
    {
        if (!BudgetAllowTransferRuleMember::exist(memberRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        BudgetAllowTransferRuleMember member = BudgetAllowTransferRuleMember::find(memberRecId, true);
        BudgetAllowTransferRule rule = BudgetAllowTransferRule::find(member.BudgetAllowTransferRule);

        // Update the rule member
        member.Name = memberName;
        member.update();

        BudgetAllowTransferRuleMemberCriteria memberCriteria;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        // Update the transfer rule criteria
        delete_from memberCriteria
            where memberCriteria.BudgetAllowTransferRuleMember == memberRecId;

        // Insert the transfer rule criteria records
        memberCriteria.BudgetAllowTransferRuleMember = memberRecId;

        expressionCriteriaCollection.initializeEnumerator();

        while (expressionCriteriaCollection.moveNext())
        {
            DimensionExpressionCriteria expressionCriteria = expressionCriteriaCollection.current();

            select firstonly RecId from budgetDimensionAttribute
                where budgetDimensionAttribute.PrimaryLedger == rule.PrimaryLedger
                    && budgetDimensionAttribute.DimensionAttribute == expressionCriteria.parmDimensionAttributeId()
                exists join dimensionHierarchyLevel
                    where dimensionHierarchyLevel.DimensionAttribute == budgetDimensionAttribute.DimensionAttribute
                        && dimensionHierarchyLevel.DimensionHierarchy == rule.DimensionHierarchyAccountStructure;

            memberCriteria.BudgetPrimaryLedgerDimensionAttribute = budgetDimensionAttribute.RecId;
            memberCriteria.RangeFrom = expressionCriteria.parmRangeFromValue();
            memberCriteria.RangeTo = expressionCriteria.parmRangeToValue();
            memberCriteria.WildCardString = expressionCriteria.parmWildcardValue();
            memberCriteria.IsFromOpen = expressionCriteria.parmIsRangeFromValueExcluded();
            memberCriteria.IsToOpen = expressionCriteria.parmIsRangeToValueExcluded();
            memberCriteria.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>BudgetAllowTransferRuleMember</c> record is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>BudgetAllowTransferRuleMember</c> record is valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        // Validate that the name is unique.
        isValid = this.validateMemberName();

        // Validate the criteria.
        isValid = this.validateCriteria() && isValid;

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the criteria is valid.
    /// </summary>
    /// <returns>
    /// true if the criteria is valid; otherwise, false.
    /// </returns>
    protected boolean validateCriteria()
    {
        boolean isValid = true;
        boolean isCriteriaIntersecting;

        DimensionExpressionCriteria existingCriteria;
        DimensionExpressionCriteria givenCriteria;

        DimensionAttribute dimensionAttribute;
        BudgetPrimaryLedgerDimensionAttribute budgetDimensionAttribute;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        BudgetAllowTransferRuleMember existingMember;
        BudgetAllowTransferRuleMemberCriteria existingMemberCriteria;

        BudgetAllowTransferRuleMember member = BudgetAllowTransferRuleMember::find(memberRecId);
        BudgetAllowTransferRule rule = BudgetAllowTransferRule::find(member.BudgetAllowTransferRule);

        while select RecId from existingMember
            where existingMember.RecId != member.RecId
                && existingMember.BudgetAllowTransferRule == rule.RecId
        {
            // Verify for each existing member, the set of criteria for the same rule does not intersect.
            while select budgetDimensionAttribute
                where budgetDimensionAttribute.PrimaryLedger == rule.PrimaryLedger
                join RecId from dimensionAttribute
                    where budgetDimensionAttribute.DimensionAttribute == dimensionAttribute.RecId
                join Level from dimensionHierarchyLevel
                    order by dimensionHierarchyLevel.Level
                    where dimensionAttribute.RecId == dimensionHierarchyLevel.DimensionAttribute
                        && dimensionHierarchyLevel.DimensionHierarchy == rule.DimensionHierarchyAccountStructure
            {
                // Get the criteria for the dimension attribute in the order of the account structure.
                // If it is not defined it is treated as a wildcard.
                givenCriteria = this.getExpressionCriteria(dimensionAttribute.RecId);

                // Get the existing member criteria for the dimension attribute.
                select firstonly existingMemberCriteria
                    where existingMemberCriteria.BudgetAllowTransferRuleMember == existingMember.RecId
                        && existingMemberCriteria.BudgetPrimaryLedgerDimensionAttribute == budgetDimensionAttribute.RecId;

                if (existingMemberCriteria)
                {
                    // The criteria for the dimension attribute is defined for the existing member.
                    // Get the existing criteria.
                    existingCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                        dimensionAttribute.RecId,
                        existingMemberCriteria.WildCardString,
                        existingMemberCriteria.RangeFrom,
                        existingMemberCriteria.RangeTo,
                        existingMemberCriteria.IsFromOpen,
                        existingMemberCriteria.IsToOpen);
                }
                else
                {
                    // The criteria for the dimension attribute is not defined for the existing rule.
                    // Treat the existing criteria as a wildcard.
                    existingCriteria = DimensionExpressionCriteria::newForDimensionExpression(
                        dimensionAttribute.RecId,
                        DimensionCriteriaOperators::WildcardSQL,
                        '',
                        '',
                        false,
                        false);
                }

                isCriteriaIntersecting = DimensionExpressionCriteriaCollection::isExpressionCriteriaIntersecting(existingCriteria, givenCriteria);

                if (!isCriteriaIntersecting)
                {
                    // If any dimension attribute does not intersect then the criteria does not intersect.
                    break;
                }
            }

            if (isCriteriaIntersecting)
            {
                // The set of member criteria intersects with an existing set of member criteria.
                break;
            }
        }

        if (isCriteriaIntersecting)
        {
            isValid = checkFailed(strfmt("@SYS320759", member.Name));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMemberName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>Name</c> field of the <c>BudgetAllowTransferRuleMember</c> record is valid.
    /// </summary>
    /// <returns>
    /// true if the name is valid; otherwise, false.
    /// </returns>
    private boolean validateMemberName()
    {
        boolean isValid = true;

        BudgetAllowTransferRule rule;
        BudgetAllowTransferRuleMember member;

        select firstonly RecId from member
            where member.Name == memberName
                && member.RecId != memberRecId
            exists join rule
                where rule.RecId == member.BudgetAllowTransferRule
                    && rule.RecId == ruleRecId;

        if (member)
        {
            isValid = checkFailed("@SYS320763");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetAllowTransferRuleManager</c> class.
    /// </summary>
    /// <param name="_allowTransferRuleMemberRecId">
    /// The record ID of the <c>BudgetAllowTransferRuleMember</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetAllowTransferRuleManager</c> class.
    /// </returns>
    public static BudgetAllowTransferRuleManager construct(RecId _allowTransferRuleMemberRecId)
    {
        BudgetAllowTransferRuleManager ruleManager;

        // Ensure rule member exists.
        if (!BudgetAllowTransferRuleMember::exist(_allowTransferRuleMemberRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ruleManager = new BudgetAllowTransferRuleManager();
        ruleManager.initialize(_allowTransferRuleMemberRecId);

        return ruleManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBudgetAllowTransferRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a copy of the <c>BudgetAllowTransferRule</c> record.
    /// </summary>
    /// <param name="_ruleRecId">
    /// The record ID of the <c>BudgetAllowTransferRule</c> record.
    /// </param>
    /// <param name="_name">
    /// The name of the new <c>BudgetAllowTransferRule</c> record.
    /// </param>
    /// <param name="_description">
    /// The description of the new <c>BudgetAllowTransferRule</c> record.
    /// </param>
    public static void copyBudgetAllowTransferRule(
        RecId _ruleRecId,
        BudgetAllowTransferRuleName _name,
        Description _description)
    {
        // Validate input parameters
        if (!BudgetAllowTransferRule::exist(_ruleRecId) || !_name)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        BudgetAllowTransferRule rule = BudgetAllowTransferRule::find(_ruleRecId);

        if (rule)
        {
            BudgetAllowTransferRule newRule;

            // Copy the rule.
            buf2Buf(rule, newRule);

            // Update the name and description.
            newRule.Name = _name;
            newRule.Description = _description;

            newRule.insert();

            RecId newRuleRecId = newRule.RecId;

            BudgetAllowTransferRuleMember member;
            BudgetAllowTransferRuleMember newMember;

            // Copy the rule members.
            insert_recordset newMember (Name, BudgetAllowTransferRule)
                select Name, newRuleRecId from member
                    where member.BudgetAllowTransferRule == rule.RecId;

            BudgetAllowTransferRuleMemberCriteria memberCriteria;
            BudgetAllowTransferRuleMemberCriteria newMemberCriteria;

            // Copy the rule member criteria.
            insert_recordset newMemberCriteria (WildCardString, RangeFrom, RangeTo, IsFromOpen, IsToOpen, BudgetPrimaryLedgerDimensionAttribute, BudgetAllowTransferRuleMember)
                select WildCardString, RangeFrom, RangeTo, IsFromOpen, IsToOpen, BudgetPrimaryLedgerDimensionAttribute from memberCriteria
                    join RecId from newMember
                        where newMember.BudgetAllowTransferRule == newRuleRecId
                    exists join member
                        where member.RecId == memberCriteria.BudgetAllowTransferRuleMember
                            && member.Name == newMember.Name
                            && member.BudgetAllowTransferRule == rule.RecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetAllowTransferRuleMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetAllowTransferRuleMember</c> record.
    /// </summary>
    /// <param name="_ruleRecId">
    /// The record ID of the <c>BudgetAllowTransferRule</c> record.
    /// </param>
    /// <param name="_name">
    /// The name of the <c>BudgetAllowTransferRuleMember</c>.
    /// </param>
    /// <returns>
    /// The <c>BudgetAllowTransferRuleMember</c> record; otherwise, an empty record.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// A <c>BudgetAllowTransferRuleMember</c> with the specified name already exists for the specified rule.
    /// </exception>
    public static BudgetAllowTransferRuleMember createBudgetAllowTransferRuleMember(
        RecId _ruleRecId,
        BudgetAllowTransferRuleMemberName _name)
    {
        // Validate input parameters
        BudgetAllowTransferRule rule = BudgetAllowTransferRule::find(_ruleRecId);

        if (!rule || !_name)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        // Create the budget allow transfer rule member
        BudgetAllowTransferRuleMember member;

        member.BudgetAllowTransferRule = rule.RecId;
        member.Name = _name;
        member.insert();

        ttscommit;

        return member;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBudgetAllowTransferRuleMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetAllowTransferRuleMember</c> record and the associated <c>BudgetAllowTransferRuleMemberCriteria</c> records.
    /// </summary>
    /// <param name="_memberRecId">
    /// The record ID of the <c>BudgetAllowTransferRuleMember</c> record to delete.
    /// </param>
    public static void deleteBudgetAllowTransferRuleMember(RecId _memberRecId)
    {
        // Ensure the BudgetAllowTransferRuleMember exists
        if (!BudgetAllowTransferRuleMember::exist(_memberRecId))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ttsbegin;

        BudgetAllowTransferRuleMemberCriteria criteria;

        delete_from criteria
            where criteria.BudgetAllowTransferRuleMember == _memberRecId;

        BudgetAllowTransferRuleMember member;

        delete_from member
            where member.RecId == _memberRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMembersForBudgetAllowTransferRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetAllowTransferRuleMember</c> records and the associated
    /// <c>BudgetAllowTransferRuleMemberCriteria</c> records for the specified <c>BudgetAllowTransferRule</c> record.
    /// </summary>
    /// <param name="_ruleRecId">
    /// The record ID of the <c>BudgetAllowTransferRule</c> record.
    /// </param>
    public static void deleteMembersForBudgetAllowTransferRule(RecId _ruleRecId)
    {
        BudgetAllowTransferRuleMember member;
        BudgetAllowTransferRuleMemberCriteria criteria;

        ttsbegin;

        delete_from criteria
            exists join member
                where member.RecId == criteria.BudgetAllowTransferRuleMember
                    && member.BudgetAllowTransferRule == _ruleRecId;

        delete_from member
            where member.BudgetAllowTransferRule == _ruleRecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllowTransferRulesByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BudgetAllowTransferRule</c> records for the specified source ledger dimension.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    /// The record ID of the source ledger dimension record.
    /// </param>
    /// <returns>
    /// The <c>Set</c> of <c>BudgetAllowTransferRule</c> record IDs; otherwise, an empty <c>Set</c>.
    /// </returns>
    public static Set findAllowTransferRulesByLedgerDimension(
        LedgerRecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        Set allowTransferRuleIDs = new Set(Types::Int64);

        // Get the budget dimension values from the source ledger dimension.
        Map dimensionValues = BudgetPrimaryLedgerDimensionAttribute::getBudgetDimensionAttributeValues(_primaryLedgerRecId, _ledgerDimension);

        if (dimensionValues.elements() > 0)
        {
            // The dimension values map will only have elements if the primary ledger and source ledger dimension are valid.
            DimensionHierarchyId sourceAccountStructure = DimensionHierarchy::getAccountStructureFromDimensionCombination(_ledgerDimension).RecId;

            // Create the query.
            Query query = new Query();

            // Add the BudgetAllowTransferRule data source.
            QueryBuildDataSource qbdsRule = query.addDataSource(tablenum(BudgetAllowTransferRule), 'BATR');
            qbdsRule.addRange(fieldnum(BudgetAllowTransferRule, PrimaryLedger)).value(SysQuery::value(_primaryLedgerRecId));
            qbdsRule.addRange(fieldnum(BudgetAllowTransferRule, DimensionHierarchyAccountStructure)).value(SysQuery::value(sourceAccountStructure));

            // Add the BudgetAllowTransferRuleMember data source.
            QueryBuildDataSource qbdsMember = qbdsRule.addDataSource(tablenum(BudgetAllowTransferRuleMember), 'BATRM');
            qbdsMember.relations(true);
            qbdsMember.joinMode(JoinMode::ExistsJoin);

            // Add the BudgetAllowTransferRuleMemberCriteria data source.
            QueryBuildDataSource qbdsCriteria = qbdsMember.addDataSource(tablenum(BudgetAllowTransferRuleMemberCriteria), 'BATRMC');
            qbdsCriteria.relations(true);
            qbdsCriteria.joinMode(JoinMode::NoExistsJoin);

            // Add criteria for dimension values
            str criteriaRange = '(';
            boolean isFirst = true;

            MapEnumerator dimensionValuesEnumerator = dimensionValues.getEnumerator();

            while (dimensionValuesEnumerator.moveNext())
            {
                RecId budgetDimAttrId = dimensionValuesEnumerator.currentKey();
                DimensionValue displayValue = dimensionValuesEnumerator.currentValue();
                str dimAttrCriteria;

                if (displayValue)
                {
                    // We need to escape the value before using it
                    displayValue = queryValue(displayValue);

                    // Restrict the budget dimension attribute of the transfer rule member criteria.
                    dimAttrCriteria = strfmt(
                        '((BATRMC.BudgetPrimaryLedgerDimensionAttribute  = %1)',
                        int642str(budgetDimAttrId));

                    // Restrict the from value and to values of the transfer rule member criteria.
                    dimAttrCriteria += strfmt(
                        ' && (((BATRMC.WildCardString = "") && (((BATRMC.RangeFrom != "") && ((BATRMC.IsFromOpen = 0) && (BATRMC.RangeFrom > "%1")) || ((BATRMC.IsFromOpen = 1) && (BATRMC.RangeFrom >= "%1")))',
                        displayValue);

                    dimAttrCriteria += strfmt(
                        ' || ((BATRMC.RangeTo != "") && ((BATRMC.IsToOpen = 0) && (BATRMC.RangeTo < "%1")) || ((BATRMC.IsToOpen = 1) && (BATRMC.RangeTo <= "%1")))))',
                        displayValue);

                    // Restrict the wild card value of the transfer rule member criteria.
                    dimAttrCriteria += strfmt(
                        ' || ((BATRMC.WildCardString != "") && (!("%1" like BATRMC.WildCardString)))))',
                        displayValue);
                }
                else
                {
                    // Restrict the transfer rule member criteria for the blank value.
                    dimAttrCriteria = strfmt(
                        '((BATRMC.BudgetPrimaryLedgerDimensionAttribute  = %1) && ((BATRMC.WildCardString = "") && (BATRMC.RangeFrom != "")))',
                        int642str(budgetDimAttrId));
                }

                if (isFirst)
                {
                    criteriaRange += dimAttrCriteria;
                    isFirst = false;
                }
                else
                {
                    criteriaRange = criteriaRange + ' || ' + dimAttrCriteria;
                }
            }

            criteriaRange += ')';

            // Add criteria range.
            qbdsCriteria.addRange(fieldnum(BudgetAllowTransferRuleMemberCriteria, WildCardString)).value(criteriaRange);

            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                allowTransferRuleIDs.add(queryRun.get(tablenum(BudgetAllowTransferRule)).RecId);
            }
        }

        return allowTransferRuleIDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMemberNameForRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified name is valid.
    /// </summary>
    /// <param name="_name">
    /// The name of the <c>BudgetAllowTransferRuleMember</c> record.
    /// </param>
    /// <param name="_ruleRecId">
    /// The record ID of the <c>BudgetAllowTransferRule</c> record.
    /// </param>
    /// <returns>
    /// true if the name is valid; otherwise, false.
    /// </returns>
    public static boolean validateMemberNameForRule(BudgetAllowTransferRuleMemberName _name, RecId _ruleRecId)
    {
        boolean isValid = true;

        BudgetAllowTransferRuleMember member;

        select firstonly RecId from member
            where member.Name == _name
                && member.BudgetAllowTransferRule == _ruleRecId;

        if (member)
        {
            isValid = checkFailed("@SYS320763");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRuleName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified name is valid.
    /// </summary>
    /// <param name="_name">
    /// The name of the <c>BudgetAllowTransferRule</c> record.
    /// </param>
    /// <param name="_primaryLedgerRecId">
    /// The record ID of the primary <c>Ledger</c> record.
    /// </param>
    /// <returns>
    /// true if the name is valid; otherwise, false.
    /// </returns>
    public static boolean validateRuleName(BudgetAllowTransferRuleName _name, RecId _primaryLedgerRecId)
    {
        boolean isValid = true;

        BudgetAllowTransferRule rule;

        select firstonly RecId from rule
            where rule.Name == _name
                && rule.PrimaryLedger == _primaryLedgerRecId;

        if (rule)
        {
            isValid = checkFailed("@SYS320763");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>