<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CommReportShipmentCalcPurch_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Initializes lines for report for principal for the purchase by commissioner scenario.
/// </summary>
class CommReportShipmentCalcPurch_RU extends CommReportShipmentCalc_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates lines for report for principal.
    /// </summary>
    protected void createReportLines()
    {
        Query                q;
        QueryRun             qr;
        QueryBuildDataSource qbds, qbdsInventTrans;
        RecId                dimAttrRecId = AgreementHeaderExt_RU::getAgreementDimensionAttribute();

        q = new Query();

        qbdsInventTrans = q.addDataSource(tableNum(InventTrans));

        findOrCreateRange_W(qbdsInventTrans, fieldNum(InventTrans, TableId), strFmt(issueReceiptValue,
                                                                                    qbdsInventTrans.name(),
                                                                                    enum2int(StatusIssue::Sold),
                                                                                    enum2int(StatusReceipt::Purchased)));
        findOrCreateRange_W(qbdsInventTrans, fieldNum(InventTrans, DateFinancial), queryRange(commReportJour.StartDate, commReportJour.EndDate));

        qbds = qbdsInventTrans.addDataSource(tableNum(InventTransOrigin));
        qbds.addLink(fieldNum(InventTrans, InventTransOrigin), fieldNum(InventTransOrigin, RecId));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tableNum(CustInvoiceTrans));
        qbds.addLink(fieldNum(InventTransOrigin, InventTransId), fieldNum(CustInvoiceTrans, InventTransId));
        qbds.addLink(fieldNum(InventTrans, InvoiceId), fieldNum(CustInvoiceTrans, InvoiceId), qbdsInventTrans.name());
        qbds.joinMode(JoinMode::InnerJoin);

        qbds = qbds.addDataSource(tableNum(CustInvoiceJour));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);

        findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour, InvoiceAccount), queryValue(commReportJour.PartnerCode));

        SysQuery::addDimensionAttributeRange(q,
        qbds.name(),
        fieldStr(CustInvoiceJour, DefaultDimension),
        DimensionComponent::DimensionAttribute,
        commReportJour.AgreementId,
        DimensionAttribute::find(dimAttrRecId).Name);

        qbds = qbds.addDataSource(tableNum(CustInvoiceJour_RU));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, fieldNum(CustInvoiceJour_RU, InventProfileType_RU), con2Str([InventProfileType_RU::CommissionAgent,
                                                                                           InventProfileType_RU::CommissionPrincipalAgent]));

        qbds = qbdsInventTrans.addDataSource(tableNum(InventDim));
        qbds.addLink(fieldNum(InventTrans, InventDimId), fieldNum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qr = new QueryRun(q);

        while (qr.next())
        {
            inventTrans         = qr.get(tableNum(InventTrans));
            inventTransOrigin   = qr.get(tableNum(InventTransOrigin));
            custInvoiceTrans    = qr.get(tableNum(CustInvoiceTrans));
            custInvoiceJour     = qr.get(tableNum(CustInvoiceJour));
            inventDim           = qr.get(tableNum(inventDim));

            this.processVendShipments();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture reference for report line.
    /// </summary>
    /// <param name="_reportTransItem">
    /// The <c>CommReportTransItem_RU</c> record that requires facture reference.
    /// </param>
    protected void initFactureRef(CommReportTransItem_RU _reportTransItem)
    {
        FactureTrans_RU factureTrans;
        FactureJour_RU  factureJour;

        if (! vendInvoiceTrans)
        {
            return;
        }

        if (! mapFactureIdDate.exists(vendInvoiceTrans.RecId))
        {
            factureTrans = FactureTrans_RU::findVendInvoiceTrans(vendInvoiceTrans);
            factureJour  = FactureJour_RU::find(factureTrans.FactureId, factureTrans.Module);

            _reportTransItem.FactureExternalId      = factureJour.FactureExternalId;
            _reportTransItem.FactureDateExternal    = factureJour.FactureDate_External ?
                                                  factureJour.FactureDate_External :
                                                  factureJour.FactureDate;
            _reportTransItem.RefFactureJour         = factureJour.RecId;

            mapFactureIdDate.insert(vendInvoiceTrans.RecId, [_reportTransItem.FactureExternalId,
                                                         _reportTransItem.FactureDateExternal,
                                                         _reportTransItem.RefFactureJour]);
        }
        else
        {
            [_reportTransItem.FactureExternalId,
         _reportTransItem.FactureDateExternal,
         _reportTransItem.RefFactureJour] = mapFactureIdDate.lookup(vendInvoiceTrans.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits vendor account number.
    /// </summary>
    /// <param name="_reportTransItem">
    /// The <c>CommReportTransItem_RU</c> record that requires vendor account number.
    /// </param>
    protected void initVendor(CommReportTransItem_RU _reportTransItem)
    {
        InventOwner_RU  inventOwner;

        _reportTransItem.VendAccount = vendInvoiceJour.InvoiceAccount;

        if (! _reportTransItem.VendAccount && inventDim.InventOwnerId_RU)
        {
            inventOwner = inventDim.inventOwner_RU();
            if (inventOwner.AccountType == InventOwnerAccountType_RU::Vend)
            {
                _reportTransItem.VendAccount = inventOwner.AccountNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    client server static public ClassDescription description()
    {
        return "@SalesPurchBook:GenerateReportForPrincipalShip";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>