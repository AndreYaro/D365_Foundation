<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EUSalesListReportingEngine_FI</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EUSalesListReportingEngine_FI</c> class extends the functionality of the implements BatchRetryable
/// <c>EUSalesListReportingEngine</c> class in order to support requirements that are specific to
/// Finland.
/// </summary>
#ISOCountryRegionCodes
[CountryRegionAttribute(#isoFI)]
public class EUSalesListReportingEngine_FI extends EUSalesListReportingEngine
{
    DialogField                     dialogCorrection;

    NoYes                           correction;

    EUSalesListReportingLine        euSalesListReportingLineCorrection;
    EUSalesListReportingGroup       euSalesListReportingGroup;
    EUSalesListReportingHeader      euSalesListReportingHeader;
    EUSalesListReportingLine        euSalesListReportingLinesByDeliveryCode;

    Line                            lineCountCorrections;
    int                             lineCountNonTriangularItemSale;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGenerateFile</Name>
				<Source><![CDATA[
protected boolean canGenerateFile()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return EUSalesListReportingEngine::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <paramref name="_euSalesListReportingLine" /> buffer holds any values.
    /// </summary>
    /// <param name="_euSalesListReportingLine">
    /// The buffer to check for contents.
    /// </param>
    /// <returns>
    /// true if the buffer is empty; otherwise, false.
    /// </returns>
    protected boolean isEmptyLine(EUSalesListReportingLine _euSalesListReportingLine)    
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the base method to handle the special case of correction lines.
    /// </summary>
    /// <returns>
    /// The return value from call to base method.
    /// </returns>
    /// <remarks>
    /// Correction lines are not supposed to be grouped with typical transaction lines and must be reported
    /// as individual lines.
    /// </remarks>
    protected boolean isNewLine()
    {
        boolean     ret, retCorrected;

        Line        lineCountCorrectionsIncrement,
                    lineCountIncrement;

        EUSalesList euSalesList = queryRun.get(tableNum(EUSalesList));

        if (lastVATNum != euSalesList.vatNum
            || lastCountryRegionId != euSalesList.CountryRegionId
            || lastDirection != euSalesList.Direction)
        {
            lastVATNum = euSalesList.vatNum;
            lastCountryRegionId = euSalesList.CountryRegionId;
            lastDirection = euSalesList.Direction;
            ret = true;
        }

        [ retCorrected, lineCountCorrectionsIncrement, lineCountIncrement ] = this.updateCorrectedData(
            euSalesListReportingHeader,
            euSalesListReportingGroup,
            euSalesListReportingLineCorrection);

        lineCountCorrections += lineCountCorrectionsIncrement;
        lineCount += lineCountIncrement;

        return ret && retCorrected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>