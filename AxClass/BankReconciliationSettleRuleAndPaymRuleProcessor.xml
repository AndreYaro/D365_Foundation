<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationSettleRuleAndPaymRuleProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconciliationSettleRuleAndPaymRuleProcessor</c> class is responsible for processing settle customer invoice matching rules and generate payment matching rules.
/// </summary>
[BankReconciliationMatchActionType(BankReconciliationMatchActionType::CustPaym)]
[BankReconciliationMatchActionType(BankReconciliationMatchActionType::VendPaym)]
[BankReconciliationMatchActionType(BankReconciliationMatchActionType::SettleCustInv)]
internal final class BankReconciliationSettleRuleAndPaymRuleProcessor extends BankReconciliationMatchRuleProcessor
{
    private QueryRun qrStatement;
    private BankReconciliationMatchingRuleQuery matchingRuleQuery;
    private BankStatementLinePaymentInformation paymInfo;
    private BankReconciliationMatchActionType matchActionType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        BankReconciliationMatchRule _matchRule,
        BankReconciliationStatementOpenTmp _statementTmp,
        BankReconciliationDocumentOpenTmp _documentTmp,
        BankReconciliationHeader _reconciliation,
        BankReconciliationDataManager _dataManager)
    {
        matchActionType = _matchRule.MatchActionType;

        super(_matchRule, _statementTmp, _documentTmp, _reconciliation, _dataManager);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preprocess</Name>
				<Source><![CDATA[
    internal protected void preprocess()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMatchAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates payment for the matched statement line, creates matching entries, and updates record status.
    /// </summary>
    /// <param name="_openStatementForMatch">
    /// The matched <c>BankReconciliationStatementOpenTmp</c> record.
    /// </param>
    /// <param name="_bankStatementsToUpdate">
    /// The <c>BankStmtTmp</c> is responsible for recording the related bank statement header and will be used to update the header status latter.
    /// </param>
    internal protected void performMatchAction(Common _openStatementForMatch, BankStmtTmp _bankStatementsToUpdate)
    {
        ttsbegin;

        BankReconciliationStatementOpenTmp openStatement = _openStatementForMatch as BankReconciliationStatementOpenTmp;
        BankStmtISOReportEntry bankStmtLine = BankStmtISOReportEntry::find(openStatement.BankStmtISOReportEntry);
        BankReconciliationStatementOpenView statementView = qrStatement.get(tablenum(BankReconciliationStatementOpenView));

        switch (matchActionType)
        {
            case BankReconciliationMatchActionType::SettleCustInv:
                paymInfo.initFromMatchingRulePostingInfo(bankStmtLine, matchingRulePostingInfo, matchActionType, NoYes::No);
                QueryRun qrOpenInvoice = this.buildCustInvoiceQueryAndUpdatePaymInfo(statementView, BankReconciliationMatchRuleLineType::SettleCustInvoice);

                if (qrOpenInvoice)
                {
                    this.postPaymAndSettleCustInvForStatementLine(statementView, bankStmtLine, qrOpenInvoice);

                    if (paymInfo.Posted)
                    {
                        this.matchStatementAndUpdateStatus(bankStmtLine, paymInfo.LedgerJournalTrans, openStatement, _bankStatementsToUpdate);
                        hasInvoiceSettled = NoYes::Yes;
                    }
                }
                break;

            case BankReconciliationMatchActionType::CustPaym:
                paymInfo.initFromMatchingRulePostingInfo(bankStmtLine, matchingRulePostingInfo, matchActionType);
                this.buildCustInvoiceQueryAndUpdatePaymInfo(statementView, BankReconciliationMatchRuleLineType::MatchOpenClosedCustInvoice);

                if (paymInfo.CustAccount)
                {
                    BankStatementPaymentJournalGenerator::generatePaymentForStmtLine(
                        BankAccountTable::find(bankStmtLine.getAccountId()),
                        bankStmtLine,
                        BankPaymentType::CustPayment,
                        paymInfo);

                    this.matchStatementAndUpdateStatus(bankStmtLine, paymInfo.LedgerJournalTrans, openStatement, _bankStatementsToUpdate);
                }

                break;

            case BankReconciliationMatchActionType::VendPaym:
                paymInfo.initFromMatchingRulePostingInfo(bankStmtLine, matchingRulePostingInfo, matchActionType);

                BankStatementPaymentJournalGenerator::generatePaymentForStmtLine(
                    BankAccountTable::find(bankStmtLine.getAccountId()),
                    bankStmtLine,
                    BankPaymentType::VendPayment,
                    paymInfo);

                this.matchStatementAndUpdateStatus(bankStmtLine, paymInfo.LedgerJournalTrans, openStatement, _bankStatementsToUpdate);
                break;

            default:
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustInvoiceQueryAndUpdatePaymInfo</Name>
				<Source><![CDATA[
    private QueryRun buildCustInvoiceQueryAndUpdatePaymInfo(BankReconciliationStatementOpenView _statementView, BankReconciliationMatchRuleLineType _lineType)
    {
        QueryRun qrInvoice;

        if (matchRule.existNonSysGenMatchRuleLine(_lineType))
        {
            matchingRuleQuery.parmComparedStatementViewBuffer(_statementView);
            qrInvoice = matchingRuleQuery.getQueryRunForSearching(_lineType, null);

            if (qrInvoice)
            {
                BankModernReconciliationRuleUtils::updateQueryOrderForBankCustInvoiceQuery(qrInvoice, matchActionType);
                while (qrInvoice.next())
                {
                    CustInvoiceForBankReconciliationView custInvoice = qrInvoice.get(tablenum(CustInvoiceForBankReconciliationView));
                    if (custInvoice && this.inOperatorCompareSuccess(matchRule, custInvoice, _statementView))
                    {
                        this.finalizePaymentInfoFromCustInvoice(paymInfo, custInvoice);
                        if (matchActionType == BankReconciliationMatchActionType::SettleCustInv)
                        {
                            qrInvoice.reset();
                            QueryBuildDataSource custInvoiceDS = qrInvoice.query().dataSourceTable(tableNum(CustInvoiceForBankReconciliationView));
                            SysQuery::findOrCreateRange(custInvoiceDS, fieldNum(CustInvoiceForBankReconciliationView, AccountNum)).value(custInvoice.AccountNum);
                        }
                        break;
                    }
                }
            }
        }

        return qrInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchStatementAndUpdateStatus</Name>
				<Source><![CDATA[
    private void matchStatementAndUpdateStatus(
        BankStmtISOReportEntry _statementLine,
        RefRecId _paymentLedgerJournalTransRecId,
        BankReconciliationStatementOpenTmp _openStatement,
        BankStmtTmp _bankStatementsToUpdate)
    {
        BankReconciliationMatchingMatchProcessor::matchStatementWithPostedPayment(_statementLine,
            _paymentLedgerJournalTransRecId,
            reconciliation,
            true,
            matchRule.RecId);

        if (BankReconciliationMatchRuleBreakTransactionScopeFlight::instance().isEnabled())
        {
            BankStmtISOAccountStatement::updateBankStatementStatus(_openStatement.BankStmtISOAccountStatement);
        }
        else
        {
            BankReconciliationAutoMatchUtils::addBankStatementForUpdate(_bankStatementsToUpdate, _openStatement.BankStmtISOReportEntry);
        }

        _openStatement.selectForUpdate(true);
        _openStatement.IsMatched = NoYes::Yes;
        _openStatement.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizePaymentInfoFromCustInvoice</Name>
				<Source><![CDATA[
    private void finalizePaymentInfoFromCustInvoice(BankStatementLinePaymentInformation _paymInfo, CustInvoiceForBankReconciliationView _custInvoice)
    {
        if (_custInvoice.AccountNum)
        {
            _paymInfo.CustAccount = _custInvoice.AccountNum;
        }

        if (_custInvoice.PaymMode)
        {
            CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(_custInvoice.PaymMode);

            if (custPaymModeTable.FurtherPosting == NoYes::No)
            {
                _paymInfo.PaymMode = _custInvoice.PaymMode;
                _paymInfo.BankTransType = custPaymModeTable.BankTransType ? custPaymModeTable.BankTransType : _paymInfo.BankTransType;
            }
            else
            {
                _paymInfo.PaymMode = null;
                _paymInfo.BankTransType = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPaymAndSettleCustInvForStatementLine</Name>
				<Source><![CDATA[
    private void postPaymAndSettleCustInvForStatementLine(
        BankReconciliationStatementOpenView _statementView,
        BankStmtISOReportEntry _bankStmtLine,
        QueryRun _qrInvoice)
    {
        ttsbegin;

        SpecTransManager specTransManager;
        LedgerJournalTrans ledgerJournalTrans;
        boolean hasPaymentGenerated = false;
        AmountMST settledAmountMST;
        AmountMST paymentAmountMST;

        while (_qrInvoice.next())
        {
            CustInvoiceForBankReconciliationView custInvoiceForBankReconciliationView = _qrInvoice.get(tablenum(CustInvoiceForBankReconciliationView));
            CustTransOpen custTransOpen = _qrInvoice.get(tablenum(CustTransOpen));

            if (this.inOperatorCompareSuccess(matchRule, custInvoiceForBankReconciliationView, _statementView)
                && !SpecTrans::existByRef(custTransOpen.company(), tableNum(CustTransOpen), custTransOpen.RecId))
            {
                if (!hasPaymentGenerated)
                {
                    ledgerJournalTrans = BankStatementPaymentJournalGenerator::generatePaymentForStmtLine(
                        BankAccountTable::find(_bankStmtLine.getAccountId()),
                        _bankStmtLine,
                        BankPaymentType::CustPayment,
                        paymInfo);

                    ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
                    ledgerJournalTrans.update();

                    specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);
                    hasPaymentGenerated = true;

                    paymentAmountMST = ledgerJournalTrans.calcAmountMST();
                }

                specTransManager.insert(
                    custTransOpen.DataAreaId,
                    custTransOpen.TableId,
                    custTransOpen.RecId,
                    custTransOpen.AmountCur,
                    custInvoiceForBankReconciliationView.CurrencyCode,
                    NoYes::No,
                    0,
                    ledgerJournalTrans.TransDate);

                settledAmountMST += custTransOpen.AmountMST;

                if (abs(paymentAmountMST) <= abs(settledAmountMST))
                {
                    break;
                }
            }

        }

        if (hasPaymentGenerated)
        {
            BankStatementPaymentJournalGenerator::postPaymentJournal(ledgerJournalTrans.ledgerJournalTable());

            paymInfo.selectForUpdate(true);
            paymInfo.Posted = NoYes::Yes;
            paymInfo.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inOperatorCompareSuccess</Name>
				<Source><![CDATA[
    private boolean inOperatorCompareSuccess(
        BankReconciliationMatchRule _matchRule,
        CustInvoiceForBankReconciliationView _custInvoiceForBankReconciliationView,
        BankReconciliationStatementOpenView _statementView)
    {
        boolean ret = true;
        BankReconciliationMatchRuleLine matchRuleLine;

        while select CompareFieldId, FieldId, Value from matchRuleLine
            where matchRuleLine.BankReconciliationMatchRule == _matchRule.RecId
                && matchRuleLine.Operator == BankReconciliationMatchOperatorType::In
                && (matchRuleLine.LineType == BankReconciliationMatchRuleLineType::SettleCustInvoice
                    || matchRuleLine.LineType == BankReconciliationMatchRuleLineType::MatchOpenClosedCustInvoice)
        {
            str stmtValue = matchRuleLine.CompareFieldId ? _statementView.(matchRuleLine.CompareFieldId) : matchRuleLine.Value;
            str invValue = _custInvoiceForBankReconciliationView.(matchRuleLine.FieldId);

            if (!strScan(stmtValue, invValue, 1, strLen(stmtValue)))
            {
                ret = false;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedStatementCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of unmatched statement lines.
    /// </summary>
    /// <returns>
    /// The number of unmatched statement lines.
    /// </returns>
    internal protected int64 getUnmatchedStatementCount()
    {
        select count(RecId) from reconciliationStatementTmp
            where reconciliationStatementTmp.IsMatched == NoYes::No;

        return reconciliationStatementTmp.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStatementQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query run for searching unmatched statement lines.
    /// </summary>
    /// <returns>
    /// The query run for searching unmatched statement lines.
    /// </returns>
    internal protected QueryRun buildStatementQueryRun()
    {
        BankReconciliationMatchRuleLineType lineType;
        matchingRuleQuery = BankReconciliationMatchingRuleQuery::construct(matchRule.RecId);

        switch (matchActionType)
        {
            case BankReconciliationMatchActionType::CustPaym:
                lineType = BankReconciliationMatchRuleLineType::GenerateCustPaym;
                break;

            case BankReconciliationMatchActionType::VendPaym:
                lineType = BankReconciliationMatchRuleLineType::GenerateVendPaym;
                break;

            case BankReconciliationMatchActionType::SettleCustInv:
                lineType = BankReconciliationMatchRuleLineType::SettleStatement;
                break;
        }

        qrStatement = matchingRuleQuery.getQueryRunForSearching(
            lineType,
            reconciliationStatementTmp);

        return qrStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current <c>BankReconciliationStatementOpenTmp</c> record of the given query run..
    /// </summary>
    /// <param name="_statementQueryRun">
    /// The query run for searching unmatched statement lines.
    /// </param>
    /// <returns>
    /// The current <c>BankReconciliationStatementOpenTmp</c> record of the given query run.
    /// </returns>
    internal protected Common getCurrentStatement(QueryRun _statementQueryRun)
    {
        return _statementQueryRun.get(tableNum(BankReconciliationStatementOpenTmp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPerformMatchAction</Name>
				<Source><![CDATA[
    internal protected boolean canPerformMatchAction()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSearchedDocumentIdList</Name>
				<Source><![CDATA[
    internal protected void getSearchedDocumentIdList(Common _tmpStatement)
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>