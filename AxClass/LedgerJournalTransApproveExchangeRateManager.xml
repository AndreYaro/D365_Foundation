<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransApproveExchangeRateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages exchange rate defaulting for the vendor invoice approval journal.
/// </summary>
internal static class LedgerJournalTransApproveExchangeRateManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateExchangeRatesForEditableApprovalJournalTransaction</Name>
				<Source><![CDATA[
    internal static void updateExchangeRatesForEditableApprovalJournalTransaction(
        LedgerJournalTable _invoiceApprovalJournal, 
        LedgerJournalTrans _editableInvoiceApprovalJournalTransaction, 
        LedgerJournalEngine _journalEngine)
    {
        LedgerJournalTrans firstAutomaticallyGeneratedTransactionInVoucher = LedgerJournalTransApproveExchangeRateManager::findFirstInvoiceApprovalTransactionInVoucher(
            _invoiceApprovalJournal, 
            _editableInvoiceApprovalJournalTransaction.Voucher);

        LedgerJournalTransApproveExchangeRateManager::updateExchangeRatesOnEditableTransaction(
            _editableInvoiceApprovalJournalTransaction, 
            firstAutomaticallyGeneratedTransactionInVoucher, 
            _journalEngine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstInvoiceApprovalTransactionInVoucher</Name>
				<Source><![CDATA[
    private static LedgerJournalTrans findFirstInvoiceApprovalTransactionInVoucher(LedgerJournalTable _invoiceApprovalJournal, Voucher _invoiceApprovalVoucher)
    {
        LedgerJournalTrans firstApprovalTransactionInVoucher;

        select firstonly firstApprovalTransactionInVoucher
            where firstApprovalTransactionInVoucher.JournalNum == _invoiceApprovalJournal.JournalNum
               && firstApprovalTransactionInVoucher.Voucher == _invoiceApprovalVoucher
               && firstApprovalTransactionInVoucher.NoEdit == NoYes::Yes;

        return firstApprovalTransactionInVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExchangeRatesOnEditableTransaction</Name>
				<Source><![CDATA[
    private static void updateExchangeRatesOnEditableTransaction(
        LedgerJournalTrans _journalTransactionBeingModified,
        LedgerJournalTrans _approvalTransactionFromInvoiceRegister,
        LedgerJournalEngine _journalEngine)
    {
        DataAreaId invoiceRegisterDataArea = _approvalTransactionFromInvoiceRegister.Company;
        CompanyInfo invoiceRegisterCompany = CompanyInfo::findDataArea(invoiceRegisterDataArea);
        Ledger invoiceRegisterCompanyLedger = Ledger::findByLegalEntity(invoiceRegisterCompany.RecId);

        CurrencyCode accountingCurrencyFromRegister = invoiceRegisterCompanyLedger.AccountingCurrency;
        CurrencyCode reportingCurrencyFromRegister = invoiceRegisterCompanyLedger.ReportingCurrency;

        CurrencyExchangeRate accountingCurrencyExchangeRateFromRegister = _approvalTransactionFromInvoiceRegister.ExchRate;
        ExchrateSecondary accountingCurrencyExchangeRateSecondaryFromRegister = _approvalTransactionFromInvoiceRegister.ExchRateSecond;

        CurrencyExchangeRate reportingCurrencyExchangeRateFromRegister = _approvalTransactionFromInvoiceRegister.ReportingCurrencyExchRate;
        ReportingCurrencyExchRateSecondary reportingCurrencyExchangeRateSecondaryFromRegister = _approvalTransactionFromInvoiceRegister.ReportingCurrencyExchRateSecondary;

        // If the journal transaction's company matches the company from the invoice register,
        // default the accounting and reporting currency exchange rates on the journal transaction equal to those
        // pulled from the invoice register
        if (_journalTransactionBeingModified.Company == invoiceRegisterDataArea)
        {
            _journalTransactionBeingModified.ExchRate = accountingCurrencyExchangeRateFromRegister;
            _journalTransactionBeingModified.ExchRateSecond = accountingCurrencyExchangeRateSecondaryFromRegister;

            _journalTransactionBeingModified.ReportingCurrencyExchRate = reportingCurrencyExchangeRateFromRegister;
            _journalTransactionBeingModified.ReportingCurrencyExchRateSecondary = reportingCurrencyExchangeRateSecondaryFromRegister;
        }
        else
        {
            // Find the company and ledger for the journal transaction being modified
            CompanyInfo journalTransactionCompany = CompanyInfo::findDataArea(_journalTransactionBeingModified.Company);
            Ledger journalTransactionCompanyLedger = Ledger::findByLegalEntity(journalTransactionCompany.RecId);

            // If both the accounting and reporting currencies for the journal transaction are the same as the invoice register's company,
            // default the accounting and reporting exchange rates on the journal transaction equal to those pulled from the invoice register
            if (journalTransactionCompanyLedger.AccountingCurrency == accountingCurrencyFromRegister 
             && journalTransactionCompanyLedger.ReportingCurrency == reportingCurrencyFromRegister)
            {
                _journalTransactionBeingModified.ExchRate = accountingCurrencyExchangeRateFromRegister;
                _journalTransactionBeingModified.ExchRateSecond = accountingCurrencyExchangeRateSecondaryFromRegister;

                _journalTransactionBeingModified.ReportingCurrencyExchRate = reportingCurrencyExchangeRateFromRegister;
                _journalTransactionBeingModified.ReportingCurrencyExchRateSecondary = reportingCurrencyExchangeRateSecondaryFromRegister;
            }
            else
            {
                // If either of the accounting or reporting currencies are different between the journal transaction and the invoice register,
                // update the currency exchange rates for the journal transaction
                _journalEngine.currencyModified(_journalTransactionBeingModified);

                LedgerJournalTable ledgerJournalTableRegister;
                LedgerJournalTrans ledgerJournalTransRegister;

                if (VendInvoiceApprovalIntercompanyExchangeRateFlight::instance().isEnabled())
                {
                    LedgerJournalVoucherChanged ledgerJournalVoucherChanged = ledgerJournalVoucherChanged::find(_approvalTransactionFromInvoiceRegister.JournalNum, _approvalTransactionFromInvoiceRegister.Voucher);

                    select firstonly CurrencyCode, Company from ledgerJournalTransRegister
                    where ledgerJournalTransRegister.Voucher == ledgerJournalVoucherChanged.FromVoucher
                        && ledgerJournalTransRegister.TransDate == ledgerJournalVoucherChanged.FromDate
                    join ledgerJournalTableRegister
                        where ledgerJournalTableRegister.JournalNum == ledgerJournalTransRegister.JournalNum
                            && ledgerJournalTableRegister.JournalType == LedgerJournalType::PurchaseLedger;
                }
                else
                {
                    select firstonly CurrencyCode, Company from ledgerJournalTransRegister
                    where ledgerJournalTransRegister.Voucher == _approvalTransactionFromInvoiceRegister.Voucher
                        && ledgerJournalTransRegister.TransDate == _approvalTransactionFromInvoiceRegister.TransDate
                    join ledgerJournalTableRegister
                        where ledgerJournalTableRegister.JournalNum == ledgerJournalTransRegister.JournalNum
                            && ledgerJournalTableRegister.JournalType == LedgerJournalType::PurchaseLedger;
                }

                CurrencyCode registerAccountingCurrency = Ledger::findByLegalEntity((CompanyInfo::findDataArea(ledgerJournalTransRegister.Company)).RecId).AccountingCurrency;

                // Vendor invoice register transaction currency and accounting currency of the register is not same then we retaining the 
                // exchange rate in the case of approval journal case as well.
                if (ledgerJournalTransRegister.CurrencyCode != registerAccountingCurrency)
                {
                    _journalTransactionBeingModified.ExchRate = accountingCurrencyExchangeRateFromRegister;
                    _journalTransactionBeingModified.ExchRateSecond = accountingCurrencyExchangeRateSecondaryFromRegister;
                }

                // To ensure consistency across accounting exchange rates within this voucher, set the accounting currency exchange rate 
                // equal to the accounting currency exchange rate pulled from the invoice register if the accounting currencies are the same
                if (journalTransactionCompanyLedger.AccountingCurrency == accountingCurrencyFromRegister)
                {
                    _journalTransactionBeingModified.ExchRate = accountingCurrencyExchangeRateFromRegister;
                    _journalTransactionBeingModified.ExchRateSecond = accountingCurrencyExchangeRateSecondaryFromRegister;
                }
                else if (journalTransactionCompanyLedger.AccountingCurrency == reportingCurrencyFromRegister)
                {
                    // To ensure consistency across accounting and reporting exchange rates within this voucher, set the accounting currency 
                    // exchange rate equal to the reporting currency exchange rate pulled from the invoice register if the accounting currency
                    // of the modified transaction equals the reporting currency of the invoice register
                    _journalTransactionBeingModified.ExchRate = reportingCurrencyExchangeRateFromRegister;
                    _journalTransactionBeingModified.ExchRateSecond = reportingCurrencyExchangeRateSecondaryFromRegister;
                }

                // Similarly, to ensure consistency across reporting exchange rates within this voucher, set the reporting currency exchange rate
                // equal to the reporting currency exchange rate pulled from the invoice register if the reporting currencies are the same
                if (journalTransactionCompanyLedger.ReportingCurrency == reportingCurrencyFromRegister)
                {
                    _journalTransactionBeingModified.ReportingCurrencyExchRate = reportingCurrencyExchangeRateFromRegister;
                    _journalTransactionBeingModified.ReportingCurrencyExchRateSecondary = reportingCurrencyExchangeRateSecondaryFromRegister;
                }
                else if (journalTransactionCompanyLedger.ReportingCurrency == accountingCurrencyFromRegister)
                {
                    // To ensure consistency across accounting and reporting exchange rates within this voucher, set the reporting currency
                    // exchange rate equal to the accounting currency exchange rate pulled from the invoice register if the reporting currency
                    // of the modified transaction equals the accounting currency of the invoice register
                    _journalTransactionBeingModified.ReportingCurrencyExchRate = accountingCurrencyExchangeRateFromRegister;
                    _journalTransactionBeingModified.ReportingCurrencyExchRateSecondary = accountingCurrencyExchangeRateSecondaryFromRegister;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>