<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeModuleType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for commonly used logic related to <c>ModuleInventPurchSales</c> enum.
/// </summary>
public abstract class TradeModuleType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formLetterJournalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the journal item number to use based on the item number and external item number and the corresponding module parameters.
    /// </summary>
    /// <param name = "_itemId">Item number</param>
    /// <param name = "_externalItemId">External item number</param>
    /// <returns>Journal item number</returns>
    public abstract ItemId formLetterJournalItemId(ItemId _itemId, ExternalItemId _externalItemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formLetterJournalExternalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the journal external item number to be used based on the external item number and the corresponding module parameters.
    /// </summary>
    /// <param name = "_externalItemId">External item number</param>
    /// <returns>Journal external item number</returns>
    public abstract ExternalItemId formLetterJournalExternalItemId(ExternalItemId _externalItemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMCRPriceHistoryUpdateEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether price history is enabled and whether a price history update should ever be called.
    /// </summary>
    /// <returns>true if price history update can occur; otherwise, false.</returns>
    public boolean isMCRPriceHistoryUpdateEnabled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the type of price/discount to apply during price calculation.
    /// </summary>
    /// <param name = "_priceGroupType">Price/discount group</param>
    /// <returns>Price/discount type for the module</returns>
    public abstract PriceType priceDiscType(PriceGroupType _priceGroupType)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceDiscPerAgreementApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if price/discount calculation is applicable per agreement.
    /// </summary>
    /// <returns>true if the calculation is applicable; otherwise, false.</returns>
    public NoYes isPriceDiscPerAgreementApplicable()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activePriceFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about which dimensions are active and marked as used by the price search for this module for the specified item.
    /// </summary>
    /// <param name = "_itemId">Item number</param>
    /// <returns>
    ///    A list that contains IDs of dimensions, from the <c>InventDim</c> table, that fulfills the condition.
    /// </returns>
    public abstract List activePriceFields(ItemId _itemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTradePartyModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the corresponding <c>ModuleInventCustVend</c> value.
    /// </summary>
    /// <returns>Trade party module type value.</returns>
    public abstract ModuleInventCustVend toTradePartyModuleType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>toModuleCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the corresponding <c>ModuleCustVend</c> value.
    /// </summary>
    /// <returns>Customer/Vendor module type.</returns>
    public abstract ModuleCustVend toModuleCustVend()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAgreementLineCommittedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the committed quantity for the provided agreement line.
    /// </summary>
    /// <param name = "_agreementLine">Agreement line quantity record.</param>
    /// <returns>Committed quantity</returns>
    public abstract AgreementCommitedQuantity calcAgreementLineCommittedQty(AgreementLineQuantityCommitment _agreementLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTaxItemGroupFromItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the tax item group id from the item group record.
    /// </summary>
    /// <param name = "_inventTableModule">Inventory module parameters.</param>
    /// <param name = "_inventItemGroup">Item group record</param>
    public abstract void assignTaxItemGroupFromItemGroup(InventTableModule _inventTableModule, InventItemGroup _inventItemGroup)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignPrimaryFlagsForItemPriceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the primary flags for the corresponding module for the item price group record.
    /// </summary>
    /// <param name = "_priceDiscGroupItems">Item price group record.</param>
    public abstract void assignPrimaryFlagsForItemPriceGroup(MCRPriceDiscGroupItem _priceDiscGroupItems)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOldPrimaryModuleTypeGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes or uncheck the old primary flag on the group for the module type.
    /// </summary>
    /// <param name = "_inventTableModule">Inventory module parameters.</param>
    public abstract void deleteOldPrimaryModuleTypeGroup(InventTableModule _inventTableModule)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance based on the specified <c>ModuleInventPurchSales</c> enum value.
    /// </summary>
    /// <param name = "_moduleType">Module for which to instantiate.</param>
    /// <returns>An instance of <c>TradeModuleType</c> class.</returns>
    public static TradeModuleType newFromModule(ModuleInventPurchSales _moduleType)
    {
        TradeModuleType instance = TradeModuleType::newFromModuleNoThrow(_moduleType);

        if (!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromModuleNoThrow</Name>
				<Source><![CDATA[
    private static TradeModuleType newFromModuleNoThrow(ModuleInventPurchSales _moduleType)
    {
        ModuleInventPurchSalesFactoryAttribute attr = new ModuleInventPurchSalesFactoryAttribute(_moduleType);
        TradeModuleType instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(TradeModuleType), attr);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is an implementation of <c>TradeModuleType</c> for the particular <c>ModuleInventPurchSales</c> enum value.
    /// </summary>
    /// <param name = "_moduleType">Module to check for applicability.</param>
    /// <returns>true, if the hierarchy is applicable; otherwise, false</returns>
    public static boolean isApplicableForModule(ModuleInventPurchSales _moduleType)
    {
        TradeModuleType instance = TradeModuleType::newFromModuleNoThrow(_moduleType);

        return instance != null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>