<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAdvanceApplicationTransQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendAdvanceApplicationTransQueryBuilder</c> constructs the query based on the state of the invoice and application trans.
/// </summary>
internal final class VendAdvanceApplicationTransQueryBuilder
{
    private RecId advancedApplicationRecId;
    private RecId invoiceRecIdId;
    private RecId advancedInvoiceRecId;

    private boolean isPosted;
    private boolean isReversal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query used to get <c>VendAdvanceApplicationTrans</c> records.
    /// </summary>
    /// <param name = "_forUpdate">If selecting the records for update.</param>
    /// <param name = "_firstOnly">If only selecting the first record.</param>
    /// <param name = "_concurrencyModel">The <c>ConcurrencyModel</c> to use.</param>
    /// <returns>The constructed query object.</returns>
    public final Query buildQuery(boolean _forUpdate = false, boolean _firstOnly = true, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        Query q = new Query();

        QueryBuildDataSource qbds = q.addDataSource(tableNum(VendAdvanceApplicationTrans));
        qbds.firstOnly(_firstOnly);
        qbds.update(_forUpdate);

        if (_concurrencyModel != ConcurrencyModel::Auto)
        {
            qbds.concurrencyModel(enum2int(_concurrencyModel));
        }

        if (advancedApplicationRecId != 0)
        {
            qbds.addRange(fieldNum(VendAdvanceApplicationTrans, AdvanceApplicationId)).value(queryValue(advancedApplicationRecId));
        }

        if (invoiceRecIdId != 0)
        {
            FieldId invoiceFieldId = isPosted ? fieldNum(VendAdvanceApplicationTrans, PostedInvoiceRecId) : fieldNum(VendAdvanceApplicationTrans, UnpostedInvoiceRecId);
            qbds.addRange(invoiceFieldId).value(queryValue(invoiceRecIdId));
        }

        if (advancedInvoiceRecId != 0)
        {
            FieldId advanceInvoiceFieldId = isReversal ? fieldNum(VendAdvanceApplicationTrans, AdvancedInvoiceLineRecId) : fieldNum(VendAdvanceApplicationTrans, AdvancedInvoiceHeaderRecId);
            qbds.addRange(advanceInvoiceFieldId).value(queryValue(advancedInvoiceRecId));
        }

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancedApplicationRecId</Name>
				<Source><![CDATA[
    public RecId parmAdvancedApplicationRecId(RecId _advancedApplicationRecId = advancedApplicationRecId)
    {
        advancedApplicationRecId = _advancedApplicationRecId;
        return advancedApplicationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceRecId</Name>
				<Source><![CDATA[
    public RecId parmInvoiceRecId(RecId _invoiceRecIdId = invoiceRecIdId)
    {
        invoiceRecIdId = _invoiceRecIdId;
        return invoiceRecIdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvancedInvoiceRecId</Name>
				<Source><![CDATA[
    public RecId parmAdvancedInvoiceRecId(RecId _advancedInvoiceRecId = advancedInvoiceRecId)
    {
        advancedInvoiceRecId = _advancedInvoiceRecId;
        return advancedInvoiceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPosted</Name>
				<Source><![CDATA[
    public boolean parmIsPosted(boolean _isPosted = isPosted)
    {
        isPosted = _isPosted;
        return isPosted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReversal</Name>
				<Source><![CDATA[
    public boolean parmIsReversal(boolean _isReversal = isReversal)
    {
        isReversal = _isReversal;
        return isReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendAdvanceApplicationTransQueryBuilder construct()
    {
        return new VendAdvanceApplicationTransQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVendAdvanceParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>VendAdvanceApplicationTransQueryBuilder</c> instance from an istance of 
    /// <c>VendAdvanceApplicationTransQueryParameters</c>.
    /// </summary>
    /// <param name = "_params">The parameter object used to construct the instance.</param>
    /// <returns>An instance of <c>VendAdvanceApplicationTransQueryBuilder</c> class.</returns>
    public static VendAdvanceApplicationTransQueryBuilder newFromVendAdvanceParams(VendAdvanceApplicationTransQueryParameters _params)
    {
        VendAdvanceApplicationTransQueryBuilder queryBuilder = VendAdvanceApplicationTransQueryBuilder::construct();
        queryBuilder.parmInvoiceRecId(_params.standardInvoiceRecId);
        queryBuilder.parmAdvancedInvoiceRecId(_params.advancedInvoiceRecId);
        queryBuilder.parmIsPosted(_params.isPosted);
        queryBuilder.parmIsReversal(_params.isReversal);

        return queryBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>