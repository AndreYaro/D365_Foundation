<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPaySheetEngine_Payment</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPaySheetEngine_Payment extends RPaySheetEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxAmount</Name>
				<Source><![CDATA[
        protected TaxAmount calcTaxAmount(RPayTrans _payTrans)
    {
        RPayTaxEmplSum  taxEmplSum;
        RPaySheetTable  paySheetTablePeriod;
        RPaySheetTrans  paySheetTransPeriod;

        if (paySheetTable.Pn)
        {
            select sum(TaxAmount) from paySheetTransPeriod
                where paySheetTransPeriod.Emplid == _payTrans.Emplid
                exists join paySheetTablePeriod
                    where paySheetTablePeriod.RecId         == paySheetTransPeriod.SheetTableRecId  &&
                          paySheetTablePeriod.PaySheetSost  != RPaySheetSost::NoPaid                &&
                          paySheetTablePeriod.PayPeriod     == paySheetTable.PayPeriod;

            select sum(DeductTaxAmount) from taxEmplSum
                where taxEmplSum.EmplId     == _payTrans.Emplid &&
                      taxEmplSum.PayPeriod  ==  paySheetTable.PayPeriod;
        }

        return taxEmplSum.DeductTaxAmount - paySheetTransPeriod.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSheetChange</Name>
				<Source><![CDATA[
        protected boolean canSheetChange(boolean needMessage = true)
    {
        if ((select firstonly rPayModuleTable
                where rpayModuleTable.PayModuleSost == RPayModuleSost::NoCalculate).RecId)
        {
            if (needMessage)
            {
                info("@RUP658");
            }
            return false;
        }

        if ((select firstonly rpayEmplCalculate).RecId)
        {
            if (needMessage)
            {
                info("@RUP670");
            }
            return false;
        }
        if ((select firstonly rpaySheetTable
                where rpaySheetTable.PayPeriod    == RPayParameters::payPeriod() &&
                      rpaySheetTable.PaySheetSost == RPaySheetSost::NoPaid       &&
                      rpaySheetTable.PaySheetType != RPaySheetType::Payment      &&
                      rpaySheetTable.PaySheetType != RPaySheetType::Prepayment   &&
                      rpaySheetTable.PaySheetType != RPaySheetType::Tax).RecId != 0)
        {
            if (needMessage)
            {
                info("@RUP674");
            }
            return false;
        }

        if (! RPayCalcSalaryPeriodicity::isLastInPayPeriod(RPayParameters::calcDate(), RPayParameters::payPeriod()))
        {
            if (needMessage)
            {
                info("@RUP2535");
            }
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheet</Name>
				<Source><![CDATA[
        #AviFiles
    public void createSheet()
    {
        SysOperationProgress    operationProgress;
        RPayTrans               payTrans;
        RHRMEmplTable           emplTable;
        RPayHRMOrganization     hrmOrganization;
        Amount                  emplAmount,sheetAmount = 0;
        RPaySheetTrans          p_paySheetTrans;
        NumberSeq               numberSeqLocal;
        RpaySheetTypeCreate     sheetTypeCreate;
        boolean                 updateTaxTrans;

        void insertSheetTable()
        {
            numberSeqLocal = NumberSeq::newGetNum(RPayParameters::numRefSheetNum(),true);
            paySheetTable.clear();
            paySheetTable.Name              = this.description();
            paySheetTable.PaySheetNum       = numberSeqLocal.num();
            paySheetTable.PayPeriod         = endmth(ctrlPayPeriod.dateValue());
            paySheetTable.TransDate         = this.parmSheetTransDate();
            paySheetTable.PaySheetType      = this.paySheetType();
            paySheetTable.PaySheetSost      = RPaySheetSost::NoPaid;
            paySheetTable.PaySheetRound     = RPayParameters::find().PaySheetRound;
            paySheetTable.HrmOrganisationId = hrmOrganization.HrmOrganizationId;
            paySheetTable.Pn                = NoYes::Yes;
            paySheetTable.insert();
        }
        void updateSheetTable()
        {
            if (sheetAmount)
            {
                paySheetTable.SumSheet = sheetAmount;
                paySheetTable.update();
                numberSeqLocal.used();
            }
            else
            {
                paySheetTable.delete();
            }
        }
        ;
        if (! this.canSheetChange())
        {
            return;
        }

        if (! this.paySheetCreateDialog())
        {
            return;
        }

        ttsbegin;

        sheetTypeCreate = this.parmPaySheetTypeCreate();
        switch (sheetTypeCreate)
        {
            case RpaySheetTypeCreate::Plant:
                insertSheetTable();
                break;
            case RpaySheetTypeCreate::SubDivision:
                break;
        }

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption("@RUP544");
        operationProgress.setAnimation(#AviUpdate);
        select count(RecId) from  emplTable
            exists join payTrans where  payTrans.PayPeriod == endmth(ctrlPayPeriod.dateValue()) &&
                                        payTrans.Emplid    == emplTable.EmployeeId;

        operationProgress.setTotal(emplTable.RecId);

        while select HrmOrganizationId from hrmOrganization
        {
            if (sheetTypeCreate == RpaySheetTypeCreate::SubDivision)
            {
                sheetAmount = 0;
                insertSheetTable();
            }

            while select EmployeeId, PayBankPayment from emplTable
            {
                if (RPayHistory::getHistoryLineByDate(emplTable.EmployeeId, this.parmSheetTransDate()).HrmOrganizationId ==
                    hrmOrganization.HrmOrganizationId &&
                    RPayParameters::payPeriod(emplTable.EmployeeId) == endmth(ctrlPayPeriod.dateValue()))
                {
                    emplAmount = 0;

                    select sum(Amount) from payTrans
                         where payTrans.Emplid    == emplTable.EmployeeId &&
                               payTrans.PayPeriod == endmth(ctrlPayPeriod.dateValue()) &&
                              !payTrans.TaxRedemption;

                    emplAmount = payTrans.Amount;

                    updateTaxTrans = false;

                    if (RPayTaxParameters::find().ReimbursementType == RPayTaxReimbursementType::RefundPayroll && emplTable.PayBankPayment)
                    {
                         select sum(Amount) from payTrans
                             where payTrans.Emplid    == emplTable.EmployeeId               &&
                                   payTrans.PayPeriod == endmth(ctrlPayPeriod.dateValue())  &&
                                   payTrans.RefSheetTransRecid == 0                         &&
                                   payTrans.TaxRedemption;

                         emplAmount += payTrans.Amount;
                         updateTaxTrans = true;
                    }

                    emplAmount = roundDown(emplAmount,paySheetTable.PaySheetRound);

                    if (emplAmount > 0)
                    {
                        operationProgress.setText("@RUP372" + emplTable.EmployeeId);
                        operationProgress.incCount();

                        p_paySheetTrans.SheetTableRecId = paySheetTable.RecId;
                        p_paySheetTrans.Emplid          = emplTable.EmployeeId;
                        p_paySheetTrans.Amount          = emplAmount;
                        p_paySheetTrans.BankPayment     = emplTable.PayBankPayment;
                        payTrans.Emplid                 = emplTable.EmployeeId;
                        p_paySheetTrans.TaxAmount       = this.calcTaxAmount(payTrans);
                        p_paySheetTrans.insert();

                        if (updateTaxTrans)
                        {
                            payTrans.skipDataMethods(true);
                            update_recordset payTrans setting RefSheetTransRecid = p_paySheetTrans.RecId
                                where payTrans.Emplid    == emplTable.EmployeeId               &&
                                      payTrans.PayPeriod == endmth(ctrlPayPeriod.dateValue())  &&
                                      payTrans.RefSheetTransRecid == 0                         &&
                                      payTrans.TaxRedemption;
                             payTrans.skipDataMethods(false);
                             updateTaxTrans = false;
                        }

                        sheetAmount += emplAmount;
                    }
                }
            }

            if (sheetTypeCreate == RpaySheetTypeCreate::SubDivision)
            {
                updateSheetTable();
            }
        }

        if (sheetTypeCreate == RpaySheetTypeCreate::Plant)
        {
            updateSheetTable();
        }

        ttscommit;

        sheetTableDs.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSheet</Name>
				<Source><![CDATA[
        public void deleteSheet()
    {
        RPayTrans       rPayTrans;
        RPaySheetTrans  paySheetTrans;

        if (this.validateDelete())
        {
            if (Box::yesNo(strFmt("@SYS55298", "@RUP539"), DialogButton::No, "@SYS24848", "@GLS104152") == DialogButton::Yes)
            {
                ttsbegin;

                if (paySheetTable.PaySheetSost == RPaySheetSost::ForPaid)
                {
                    this.updatePeriodicity(NoYes::No);
                }

                while select RecId from paySheetTrans
                    where paySheetTrans.SheetTableRecId == paySheetTable.RecId
                {
                    while select forupdate rPayTrans
                        where rPayTrans.RefSheetTransRecid == paySheetTrans.RecId
                    {
                        rPayTrans.RefSheetTransRecid = 0;
                        rPayTrans.doUpdate();
                    }
                }

                delete_from paySheetTable
                    where paySheetTable.PayPeriod == endmth(ctrlPayPeriod.dateValue()) &&
                          paySheetTable.PaySheetType == this.paySheetType();

                ttscommit;

                sheetTableDs.research();
                this.updateFormDesign();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
        public void deleteTrans()
    {
        RPayTrans       rPayTrans;
        RPaySheetTrans  paySheetTrans;

        super();

        paySheetTrans = sheetTransDs.cursor();

        update_recordset rPayTrans
            setting RefSheetTransRecid = 0
            where   rPayTrans.RefSheetTransRecid == paySheetTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        protected TempStr description()
    {
        return "@RUP486";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaySheetTable</Name>
				<Source><![CDATA[
        public void initPaySheetTable()
    {
        super();
        paySheetTable.PaySheetRound = RPayParameters::find().PaySheetRound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FormRun _formRun)
    {
        super(_formRun);
        ctrlCreate.visible(true);
        ctrlDeleteAll.visible(true);
        ctrlPrint.visible(true);
        ctrlPay.visible(true);
        ctrlSetSumm.visible(false);
        ctrlQuery.visible(false);
        ctrlPaySheetType.visible(false);
        ctrlTax.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>passToCash</Name>
				<Source><![CDATA[
        public boolean passToCash()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            this.updatePeriodicity(NoYes::Yes);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetType</Name>
				<Source><![CDATA[
        protected RPaySheetType paySheetType()
    {
        return RPaySheetType::Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
        protected void setAllowEdit(DialogField _dialogField)
    {
        _dialogField.allowEdit(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
        public void updateFormDesign()
    {
        super();
        sheetTableDs.allowCreate(false);
        sheetTableDs.allowDelete(false);
        sheetTransDs.allowCreate(false);
        sheetTransDs.allowDelete(false);
        sheetTransDs.allowEdit(false);

        if (paySheetTable.RecId)
        {
           ctrlCreate.enabled(false);
           ctrlDeleteAll.enabled(true);
           ctrlCalcReport.visible(true);
           ctrlCalcPayReport.visible(true);
           ctrlTransDate.allowEdit(false);
        }
        else
        {
           ctrlCreate.enabled(this.canSheetChange(false));
           ctrlDeleteAll.enabled(false);
           ctrlCalcReport.visible(false);
           ctrlCalcPayReport.visible(false);
        }

        if (endmth(ctrlPayPeriod.dateValue()) < RPayParameters::payPeriod())
        {
             ctrlCreate.enabled(false);
             ctrlDeleteAll.enabled(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>