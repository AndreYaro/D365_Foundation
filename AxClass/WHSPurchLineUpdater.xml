<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPurchLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPurchLineUpdater</c> class is used to update values tracked in <c>WHSPurchsLine</c> tag tables when purch lines are updated.
/// </summary>
[WHSSourceLineTableUpdateAttribute(tableStr(PurchLine))]
class WHSPurchLineUpdater extends WHSSourceLineUpdater
{
    PurchLine purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets global variables based on passed in common.
    /// </summary>
    /// <param name="_common">
    /// Common is a purch line record.
    /// </param>
    /// <remarks>
    /// The purch line should hold new values after an update.
    /// </remarks>
    public void initFromBuffer(Common _common)
    {
        this.setCommonBuffer(_common);

        if (PdsGlobal::pdsIsCWItem(purchLine.ItemId))
        {
            inventHandlingUOM = PdsCatchWeightItem::pdsCWUnitId(purchLine.ItemId);
            newUOMSymbol = purchLine.pdsCWUnitId();
            newInventHandlingQty = purchLine.PurchaseType == PurchaseType::Journal ? 0 : purchLine.PdsCWRemainInventPhysical;
        }
        else
        {
            inventHandlingUOM = InventTableModule::find(purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId;
            newUOMSymbol = purchLine.PurchUnit;
            newInventHandlingQty = purchLine.PurchaseType == PurchaseType::Journal ? 0 : purchLine.RemainInventPhysical;
        }

        productRefRecId = InventTable::itemProduct(purchLine.itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the appropriate <c>WHSPurchLine</c> record based on changes to the related purch line record.
    /// </summary>
    public void updateTable()
    {
        if (newInventHandlingQty != oldInventHandlingQty || oldUOMSymbol != newUOMSymbol || loadLineDiffHandlingQty)
        {
            ttsBegin;
            WHSPurchLine whsPurchLine = WHSPurchLine::find(purchLine.InventTransId, true);
            whsPurchLine.updateQtyLeftToLoad();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCommonBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>PurchLine</c> variable based on the passed in common.
    /// </summary>
    /// <param name="_common">
    /// Common is a purch line record.
    /// </param>
    internal protected void setCommonBuffer(Common _common)
    {
        if (!(_common is PurchLine))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        purchLine = _common as PurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ItemId</c> from the <c>PurchLine</c>
    /// </summary>
    /// <returns>
    /// <c>ItemId</c> from the the <c>PurchLine</c> record
    /// </returns>
    [Hookable(false)]
    internal protected ItemId getItemIdFromBuffer()
    {
        return purchLine.ItemId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>