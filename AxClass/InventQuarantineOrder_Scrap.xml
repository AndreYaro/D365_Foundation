<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineOrder_Scrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventQuarantineOrder_Scrap extends RunBase
{
    InventQuarantineId  inventQuarantineId;
    InventQty           scrapQty;
    TransDate           transDate;

    DialogRunbase       dialog;
    DialogField         dialogScrapQty;
    DialogField         dialogQuarantineId;
    DialogField         dialogTransDate;

    PdsCWInventQty      cwScrapQty;
    DialogField         cwDialogScrapQty;

    #DEFINE.CurrentVersion(100)

    #LOCALMACRO.CurrentList
        inventQuarantineId,
        scrapQty,
        transDate,
        cwScrapQty
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        InventQuarantineOrder   quarantineOrder = InventQuarantineOrder::find(inventQuarantineId);
        boolean                 isCWItem = false;

        dialog = super();

        dialogQuarantineId = dialog.addField(extendedtypestr(InventQuarantineId));
        dialogQuarantineId.value(inventQuarantineId);

        if (#PdsCatchWeightEnabled)
        {
            // Cannot allow user to switch from CW item to non-CW item.
            dialogQuarantineId.active(false);

            isCWItem = PdsGlobal::pdsIsCWItem(quarantineOrder.ItemId);
            if (isCWItem)
            {
                DialogField cwQtyField = dialog.addField(extendedtypestr(PdsCWInventQty));
                cwQtyField.value(quarantineOrder.PdsCWRemainQty);
                cwQtyField.active(false);
            }
        }

        DialogField qty = dialog.addField(extendedtypestr(InventQty), "@SYS10197", "@SYS10197");
        qty.value(InventQuarantineOrder::find(inventQuarantineId).RemainQty);
        qty.active(false);

        dialogTransDate = dialog.addField(extendedtypestr(TransDate));
        dialogTransDate.value(transDate);

        if (isCWItem)
        {
            cwDialogScrapQty = dialog.addField(extendedtypestr(PdsCWInventQty));
            cwDialogScrapQty.value(cwScrapQty);
        }

        dialogScrapQty   = dialog.addField(extendedtypestr(InventQty));
        dialogScrapQty.value(scrapQty);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        scrapQty            = dialogScrapQty.value();
        transDate           = dialogTransDate.value();
        inventQuarantineId  = dialogQuarantineId.value();

        if (cwDialogScrapQty)
        {
            cwScrapQty      = cwDialogScrapQty.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the PdsCWScrapQty parameter.
    /// </summary>
    /// <param name="_cwScrapQty">Value to set.</param>
    /// <returns>The PdsCWScrapQty parameter.</returns>
    public PdsCWInventQty parmCWScrapQty(InventQty _cwScrapQty = cwScrapQty)
    {
        cwScrapQty = _cwScrapQty;
        return cwScrapQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQuarantineId</Name>
				<Source><![CDATA[
    public InventQuarantineId parmInventQuarantineId(InventQuarantineId _inventQuarantineId = inventQuarantineId)
    {
        inventQuarantineId = _inventQuarantineId;
        return inventQuarantineId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScrapQty</Name>
				<Source><![CDATA[
    public InventQty parmScrapQty(InventQty _scrapQty = scrapQty)
    {
        scrapQty = _scrapQty;
        return scrapQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        setprefix(InventQuarantineOrder_Scrap::description());

        try
        {
            ttsbegin;

            if (!this.validate())
                throw error("@SYS18447");

            InventQuarantineOrder inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineId, true);

            NumberSeq    numberSeq = NumberSeq::newGetNum(InventParameters::numRefInventJournalVoucherId());

            LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Invent, numberSeq.parmNumberSequenceCode());

            TransactionTxt transactionTxt   = TransactionTxt::construct();
            transactionTxt.setType(LedgerTransTxt::InventJournalLossProfit);
            transactionTxt.setDate(transDate);

            InventMov_Quarantine inventMovement_quarantine = InventMovement::construct(inventQuarantineOrder);
            inventMovement_quarantine.parmInventDirection(InventDirection::Receipt);

            InventQty startQty = inventMovement_quarantine.transIdSum().received();
            PdsCWInventQty cwStartQty = inventMovement_quarantine.transIdSum().pdsCWReceived();

            LedgerVoucherObject ledgerVoucherObject;

            if (startQty > 0)
            {
                InventJournalVoucherId startVoucherId = numberSeq.num();
                transactionTxt.setVoucher(startVoucherId);

                ledgerVoucherObject = LedgerVoucherObject::newVoucher(startVoucherId, transDate, SysModule::Invent, LedgerTransType::Invent);
                ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
                ledgerVoucher.addVoucher(ledgerVoucherObject);

                inventQuarantineOrder.startFinancial(startQty, 0, ledgerVoucher, cwStartQty, 0);
            }

            InventMovement inventMovement = InventMov_Vir_QuarantineLoss::newParameters(
                                                                            inventQuarantineOrder.InventTransId,
                                                                            inventQuarantineOrder.ItemId,
                                                                            inventQuarantineOrder.InventDimIdQuarantine,
                                                                            inventQuarantineOrder.DefaultDimension,
                                                                            transDate,
                                                                            -scrapQty,
                                                                            inventQuarantineOrder.QuarantineId,
                                                                            -cwScrapQty);

            InventJournalVoucherId voucherId = numberSeq.num();

            transactionTxt.setVoucher(voucherId);

            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucherId, transDate, SysModule::Invent, LedgerTransType::Invent);
            ledgerVoucherObject.lastTransTxt(transactionTxt.txt());
            ledgerVoucher.addVoucher(ledgerVoucherObject);

            InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newVirtuelQuarantineLoss(inventMovement, ledgerVoucher, 0);
            inventUpd_Financial.updateNow();

            inventQuarantineOrder.RemainQty -= scrapQty;
            inventQuarantineOrder.PdsCWRemainQty -= cwScrapQty;

            if (inventQuarantineOrder.RemainQty == 0)
                inventQuarantineOrder.Status = InventQuarantineStatus::Ended;

            inventQuarantineOrder.update();

            ledgerVoucher.end();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        #LOCALMACRO.CurrentListV1
            inventQuarantineId,
            scrapQty,
            transDate
        #ENDMACRO

        Integer     version      = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;

            case 1:
                [version,#CurrentListV1] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        InventQuarantineOrder inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineId);

        if (! inventQuarantineOrder)
        {
            // Quarantine order %1 does not exist.
            return checkFailed(strfmt("@SYS58441", inventQuarantineId));
        }

        switch (inventQuarantineOrder.Status)
        {
            case InventQuarantineStatus::Created:
            case InventQuarantineStatus::ReportedFinished:
            case InventQuarantineStatus::Ended:
                // Quarantine order %1 has incorrect status.
                return checkFailed(strfmt("@SYS58714", inventQuarantineId));
        }

        return this.validateScrapQuantities(inventQuarantineOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateScrapQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the scrap quantity values.
    /// </summary>
    /// <param name="_inventQuarantineOrder">
    ///    The <c>InventQuarantineOrder</c> record to be scrap.
    /// </param>
    /// <param name="_scrapQty">
    ///    The scrap quantity in inventory unit.
    /// </param>
    /// <param name="_cwScrapQty">
    ///    The catch weight scrap quantity in CW unit.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean validateScrapQuantities(
        InventQuarantineOrder _inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineId),
        InventQty             _scrapQty              = scrapQty,
        PdsCWInventQty        _cwScrapQty            = cwScrapQty)
    {
        if (PdsGlobal::pdsIsCWItem(_inventQuarantineOrder.ItemId))
        {
            if (!PdsCatchWeight::validateInventQty(_inventQuarantineOrder.ItemId,_scrapQty,_cwScrapQty))
            {
                return false;
            }

            if (!PdsCatchWeight::validateInventQty(_inventQuarantineOrder.ItemId,
                                                   _inventQuarantineOrder.Qty - _scrapQty,
                                                   _inventQuarantineOrder.PdsCWQty - _cwScrapQty))
            {
                return false;
            }
        }

        if (_scrapQty   * _inventQuarantineOrder.RemainQty   < 0)
        {
            // Split quantity must have the same sign as the transaction.
            return checkFailed("@SYS19603");
        }

        if (_scrapQty > _inventQuarantineOrder.RemainQty || _scrapQty <= 0)
        {
            // Illegal quantity
            return checkFailed("@SYS25644");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQuarantineOrder_Scrap construct()
    {
        return new InventQuarantineOrder_Scrap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS21681";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventQuarantineOrder_Scrap     inventQuarantineOrder_Scrap;
        Map                             recs = new Map(typeName2Type(extendedtypestr(recId)), Types::Record);

        if (args && args.record())
        {
            switch (args.record().TableId)
            {
                case (tablenum(InventQuarantineOrder)) :
                    InventQuarantineOrder inventQuarantineOrder = args.record();
                    inventQuarantineOrder_Scrap = InventQuarantineOrder_Scrap::construct();

                    inventQuarantineOrder_Scrap.getLast();

                    inventQuarantineOrder_Scrap.parmInventQuarantineId(inventQuarantineOrder.QuarantineId);

                    if (PdsGlobal::pdsIsCWItem(inventQuarantineOrder.ItemId))
                    {
                        inventQuarantineOrder_Scrap.parmCWScrapQty(1
                            * (inventQuarantineOrder.PdsCWRemainQty >= 0
                                ? 1 : -1));
                        inventQuarantineOrder_Scrap.parmScrapQty(
                            PdsCatchWeight::inventQty(inventQuarantineOrder.ItemId,
                                inventQuarantineOrder_Scrap.parmCWScrapQty()));
                    }
                    else
                    {
                        inventQuarantineOrder_Scrap.parmScrapQty(1 * (inventQuarantineOrder.RemainQty >= 0 ? 1 : -1));
                    }
                    inventQuarantineOrder_Scrap.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    if (!inventQuarantineOrder_Scrap.prompt())
                        return;

                    inventQuarantineOrder_Scrap.runOperation();

                    if (args.caller())
                    {
                        Object callerForm = args.caller();
                        inventQuarantineOrder = InventQuarantineOrder::find(inventQuarantineOrder.QuarantineId);
                        recs.insert(inventQuarantineOrder.RecId, inventQuarantineOrder);
                        callerForm.doFormCache([recs.pack(), connull(), connull()]);
                    }

                    break;

                default:
                    throw error(strfmt("@SYS19306",funcname()));
            }
        }
        else
        {
            inventQuarantineOrder_Scrap = InventQuarantineOrder_Scrap::construct();
            if (!inventQuarantineOrder_Scrap.prompt())
                return;

            inventQuarantineOrder_Scrap.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>