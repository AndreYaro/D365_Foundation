<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchWorkflowApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchWorkflowApproval</c> class manages the purchase order and purchase order line approval
/// actions.
/// </summary>
/// <remarks>
/// This class extends the <c>WorkflowWorkItemActionManager</c> class.
/// </remarks>
class PurchWorkflowApproval implements IValidateWorkflowWorkItemAction
{
    Args args;
    Object caller;
    Common purchDocument;
    WorkflowWorkItemTable workItem;
    WorkflowWorkItemActionType workItemActionType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs checks that are required for a purchase order or a purchase order line on approval.
    /// </summary>
    public void check()
    {
        PurchTable purchTable;
        PurchLine purchLine;

        if (purchDocument.RecId)
        {
            switch (purchDocument.TableId)
            {
                case tableNum(PurchTable):
                    purchTable = purchDocument as PurchTable;
                    if (!PurchTableWorkflow::isWorkflowSubmitEnhancementEnabled(false))
                    {
                        purchTable.checkFullyDistributedAndQualified();

                        PurchTotals::newPurchTable(purchTable).calc();
                    
                        if (Ledger::isLedgerBudgetControlEnabled())
                        {
                            // Submit to source document processor to perform GL budget check.
                            SourceDocumentProcessorFacade::submitOnDemandSourceDocumentImpl(purchTable);
                        }
                    }
                    
                    if (PublicSectorUtils::isBudgetReservationEnabled())
                    {
                        PurchTable::checkBudgetReservationBalance_PSN(purchTable.PurchId, purchTable.SourceDocumentHeader);
                    }

                    break;

                case tableNum(PurchLine):
                    purchLine = purchDocument as PurchLine;
                    purchLine.checkFullyDistributedAndQualified();

                    if (Ledger::isLedgerBudgetControlEnabled())
                    {
                        // Submit to source document processor to perform GL budget check.
                        SourceDocumentProcessorFacade::submitOnDemandSourceDocLineImpl(purchLine, SourceDocumentLine::find(purchLine.SourceDocumentLine).AccountingStatus);
                    }
                    
                    purchLine.checkBudgetReservationBalance();

                    break;

                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = args)
    {
        args = _args;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaller</Name>
				<Source><![CDATA[
    public Object parmCaller(Object _caller = caller)
    {
        caller = _caller;

        return caller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchDocument</Name>
				<Source><![CDATA[
    public Common parmPurchDocument(Common _purchDocument = purchDocument)
    {
        purchDocument = _purchDocument;

        return purchDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts the approval action dialog box.
    /// </summary>
    public void prompt()
    {
        WorkflowWorkItemActionDialog workflowWorkItemActionDialog;

        workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workItem,
                                                                                workItemActionType,
                                                                                new MenuFunction(args.menuItemName(),
                                                                                args.menuItemType()));

        workflowWorkItemActionDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
        workflowWorkItemActionDialog.run();

        if (workflowWorkItemActionDialog.parmIsClosedOK())
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(workItem,
                                                                    workflowWorkItemActionDialog.parmWorkflowComment(),
                                                                    workflowWorkItemActionDialog.parmTargetUser(),
                                                                    workItemActionType,
                                                                    args.menuItemName(),
                                                                    workflowWorkItemActionDialog.parmTargetQueue());

            if (PurchTableWorkflow::isWorkflowSubmitEnhancementEnabled(false) 
                && purchDocument is PurchTable)
            {
                PurchTable purchTable = purchDocument as PurchTable;
                purchTable.updateAwaitingWorkflowTotalsCalculation(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    protected void preWorkflowDialogRun()
    {
        // Perform budget check before confirming the workflow approval window.
        // This gives the approver a chance to cancel their approval action if there is any budget error or warning.
        this.check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the approval work item process.
    /// </summary>
    public void run()
    {
        this.validateWorkItem();
        this.prompt();
        this.updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowControls</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the workflow controls.
    /// </summary>
    public void updateWorkflowControls()
    {
        caller.updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the work item.
    /// </summary>
    /// <returns>
    ///    true if the work item is valid; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A valid action type for the corresponding work item could not be found.
    /// </exception>
    public boolean validateWorkItem()
    {
        boolean isValid = true;

        workItem = caller.getActiveWorkflowWorkItem();

        if (workItem.RecId != 0)
        {
            workItemActionType = WorkflowWorkItemActionManager::findActionTypeForMenuItem(workItem, args.menuItemName());

            if (workItemActionType == WorkflowWorkItemActionType::None)
            {
                throw error("@SYS109040");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the workflow document prior to approval.
    /// </summary>
    /// <param name = "context">
    ///	    An instance of WorkflowWorkItemActionValidationContext containing data used for validation of workflow item.
    /// </param>
    /// <returns>
    ///     True if validation passes successfully. False if validation fails.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///	    When context is not provided or the work item reference table id is invalid.
    /// </exception>
    public boolean validate(WorkflowWorkItemActionValidationContext context)
    {
        if(!context)
        {
            throw error("@ApplicationSuite_Localization:ValidationContextNotProvided");
        }

        WorkflowWorkItemTable workflowWorkItem = context.parmWorkItem();

        // Based on the referenced table id, query for the correct record.
        switch (workflowWorkItem.RefTableId)
        {
            case tableNum(PurchTable):
                this.purchDocument = PurchTable::findRecId(workflowWorkItem.RefRecId);
                break;
            case tableNum(PurchLine):
                this.purchDocument = PurchLine::findRecId(workflowWorkItem.RefRecId);
                break;
            default:
                throw error(strFmt("@ApplicationSuite_Localization:InvalidRefTableId", workflowWorkItem.RefTableId, tableNum(PurchTable), tableNum(PurchLine)));
         }

         this.check();

         return true;
     }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchWorkflowApproval</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>PurchWorkflowApproval</c> class.
    /// </returns>
    private static PurchWorkflowApproval construct()
    {
        return new PurchWorkflowApproval();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point to the class when a purchase order or purchase order line approval menu
    ///    item is selected.
    /// </summary>
    /// <param name="_args">
    ///    The arguments of the <c>PurchWorkflowApproval</c> class.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    A valid action type for the corresponding work item could not be found.
    /// </exception>
    public static void main(Args _args)
    {
        PurchWorkflowApproval purchWorkflowApproval = PurchWorkflowApproval::newPurchWorkflowApproval(_args);

        purchWorkflowApproval.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchWorkflowApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PurchWorkflowApproval</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments to use to start the workflow approval action menu item.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchWorkflowApproval</c> class.
    /// </returns>
    public static PurchWorkflowApproval newPurchWorkflowApproval(Args _args)
    {
        PurchWorkflowApproval purchWorkflowApproval = PurchWorkflowApproval::construct();

        purchWorkflowApproval.parmArgs(_args);
        purchWorkflowApproval.parmCaller(_args.caller());
        purchWorkflowApproval.parmPurchDocument(_args.record());

        return purchWorkflowApproval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>