<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostCalcTransData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostCalcTransData</c> class encapsulates the data that is primarily used as input for a
/// costing sheet calculation.
/// </summary>
/// <remarks>
///  Member variables are as follows:
///  <list type="bullet">
///   <item>
///    <description>
///    The <c>costTmpCalcTrans</c> table buffer is a temporary table that contains transaction data. Each
///    transaction has a cost group, contribution, consumption, level, and so on.
///    </description>
///   </item>
///   <item>
///   <description>The Item ID is the ID of the produced item. This will surface when there are some
///   overhead calculation factors, which are specific for a particular item group or item
///   ID.</description>
///   </item>
///   <item>
///    <description>
///    The <c>qty</c> value is the quantity of produced items. This variable is used when costing sheet
///    calculation results are displayed on "Costing sheet" tabs in the BOM calculation and Production
///    Order result forms. All amounts will be divided by this value when "Per" equals "Unit".
///    </description>
///   </item>
///   <item>
///    <description>
///    The <c>transDate</c> value is the date for which overhead costs are calculated.
///    </description>
///   </item>
///   <item>
///    <description>
///    The <c>level</c> value is a level that is considered as the first level for calculating surcharges
///    of Level, Sublevel, and Total subtypes.
///    </description>
///   </item>
///   <item>
///    <description>
///    The <c>inventSiteId</c> value is the site ID for which to calculate indirect costs.
///    </description>
///   </item>
///   <item>
///    <description>
///    The <c>bomCalcItem</c> object is a reference to a <c>BOMCalcItem</c> object. It is used only when
///    BOM calculation is run so that fallback may be used when the factor to use is determined.
///    </description>
///   </item>
///  </list>
/// </remarks>
class CostCalcTransData
{
    // whenever adding new variables here, correct initCostCalcTransData() and key() methods
    CostTmpCalcTrans    costTmpCalcTrans;
    ItemId              itemId;
    Qty                 qty;
    TransDate           transDate;
    Level               level;
    InventSiteId        inventSiteId;
    BOMCalcItem         bomCalcItem;
    Qty                 costSheetCalculationQuantity;
    boolean             setCostSheetCalculationQuantity;
    boolean             calculateRecycledByProducts;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCalcTrans</Name>
				<Source><![CDATA[
    public CostCalcTransData addCalcTrans(
        CostGroupId         _costGroupId,
        UnitOfMeasureSymbol _unitID,
        ItemCalcType        _transType,
        BOMCalcResource     _resource,
        AmountMST           _contributionVariable,
        AmountMST           _contributionConstant,
        Qty                 _consumptionVariable,
        Qty                 _consumptionConstant,
        Level               _level,
        InventDimId         _inventDimId)
    {
        costTmpCalcTrans.clear();
        costTmpCalcTrans.CostGroupId            = _costGroupId;
        costTmpCalcTrans.CostGroupBehavior      = BOMCostGroup::find(_costGroupId).CostGroupBehavior;
        costTmpCalcTrans.UnitId                 = _unitID;
        costTmpCalcTrans.TransType              = _transType;
        costTmpCalcTrans.Resource               = _resource;
        costTmpCalcTrans.ContributionVariable   = _contributionVariable;
        costTmpCalcTrans.ContributionConstant   = _contributionConstant;
        costTmpCalcTrans.ConsumptionVariable    = _consumptionVariable;
        costTmpCalcTrans.ConsumptionConstant    = _consumptionConstant;
        costTmpCalcTrans.Level                  = _level;
        costTmpCalcTrans.insert();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    [SysObsolete('This method is deprecated use addCalcTrans instead', false, 30\06\2018)]
    public CostCalcTransData add(
        CostGroupId         _costGroupId,
        UnitOfMeasureSymbol _unitID,
        ItemCalcType        _transType,
        BOMCalcResource     _resource,
        AmountMST           _contributionVariable,
        AmountMST           _contributionConstant,
        Qty                 _consumptionVariable,
        Qty                 _consumptionConstant,
        Level               _level
        )
    {
        return this.addCalcTrans(_costGroupId,
                                 _unitID,
                                 _transType,
                                 _resource,
                                 _contributionVariable,
                                 _contributionConstant,
                                 _consumptionVariable,
                                 _consumptionConstant,
                                 _level,
                                 '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBOMCalcTrans</Name>
				<Source><![CDATA[
    public void addBOMCalcTrans(BOMCalcTrans _bomCalcTrans)
    {
        this.addCalcTrans(_bomCalcTrans.CostGroupId,
                          _bomCalcTrans.displayUnitId(),
                          _bomCalcTrans.CalcType,
                          _bomCalcTrans.Resource,
                          _bomCalcTrans.CostPriceQty * _bomCalcTrans.qty(),
                          _bomCalcTrans.CostMarkupQty,
                          _bomCalcTrans.ConsumptionVariable,
                          _bomCalcTrans.ConsumptionConstant,
                          _bomCalcTrans.Level,
                          _bomCalcTrans.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCostCalcTransData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the temporary calculation records from another <c>CostCalcTransData</c> object.
    /// </summary>
    /// <param name="_costCalcTransData">
    /// The object from which to obtain the temporary records.
    /// </param>
    /// <param name="_costAllocationPct">
    /// The cost allocation percentage with which the quantity and amounts should be adjusted; optional.
    /// </param>
    /// <returns>
    /// The <c>CostCalcTransData</c> object.
    /// </returns>
    public CostCalcTransData addCostCalcTransData(CostCalcTransData _costCalcTransData
                                                , PmfCostAllocationPct _costAllocationPct = 100
                                                )
    {
        CostTmpCalcTrans costTmpCalcTransToAdd = _costCalcTransData.getCostTmpCalcTrans();

        while select costTmpCalcTransToAdd
        {
            costTmpCalcTrans.clear();
            costTmpCalcTrans.data(costTmpCalcTransToAdd);

            // Adjust amount and quantity according to the cost allocation percentages
            costTmpCalcTrans.ContributionVariable   = costTmpCalcTrans.ContributionVariable * (_costAllocationPct / 100);
            costTmpCalcTrans.ContributionConstant   = costTmpCalcTrans.ContributionConstant * (_costAllocationPct / 100);
            costTmpCalcTrans.ConsumptionVariable    = costTmpCalcTrans.ConsumptionVariable * (_costAllocationPct / 100);
            costTmpCalcTrans.ConsumptionConstant    = costTmpCalcTrans.ConsumptionConstant * (_costAllocationPct / 100);

            costTmpCalcTrans.insert();
        }

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCostTmpCalcTrans</Name>
				<Source><![CDATA[
    public CostCalcTransData addCostTmpCalcTrans(CostTmpCalcTrans _costTmpCalcTrans)
    {
        costTmpCalcTrans.clear();
        costTmpCalcTrans.data(_costTmpCalcTrans);
        costTmpCalcTrans.insert();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCostingBreakdownProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an estimated material and time cost item breakdown map to a cost calculation data.
    /// </summary>
    /// <param name = "_breakdownProdCalcTrans">An estimated material and time cost record map.</param>
    /// <param name = "_costSheetProdCalcMode">A calculation mode.</param>
    public void addCostingBreakdownProdCalcTrans(
        PmfProdCalcTransMap _breakdownProdCalcTrans,
        CostSheetProdCalcMode _costSheetProdCalcMode)
    {
        _breakdownProdCalcTrans.CostAmount = 0;
        _breakdownProdCalcTrans.CostMarkup = 0;
        _breakdownProdCalcTrans.RealCostAdjustment = 0;
        _breakdownProdCalcTrans.RealCostAmount = 0;
        _breakdownProdCalcTrans.CalcType = ItemCalcType::Item;

        this.addProdCalcTrans(_breakdownProdCalcTrans, _costSheetProdCalcMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdCalcTrans</Name>
				<Source><![CDATA[
    public void addProdCalcTrans(
        PmfProdCalcTransMap     _prodCalcTrans,
        CostSheetProdCalcMode   _costSheetProdCalcMode)
    {
        AmountMST   costVariable;
        AmountMST   costConstant;
        Qty         consumptionVariable;
        Qty         consumptionConstant;

        switch (_costSheetProdCalcMode)
        {
            case CostSheetProdCalcMode::Estimation :
                costVariable = _prodCalcTrans.CostAmount;
                costConstant = _prodCalcTrans.CostMarkup;
                consumptionVariable = _prodCalcTrans.ConsumpVariable;
                consumptionConstant = _prodCalcTrans.ConsumpConstant;
                break;

            case CostSheetProdCalcMode::Costing :
                costVariable = _prodCalcTrans.realCostAmountTotal();
                costConstant = 0;
                consumptionVariable = _prodCalcTrans.realConsumptionTotal();
                consumptionConstant = 0;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.addCalcTrans(_prodCalcTrans.CostGroupId,
                          _prodCalcTrans.displayUnitId(),
                          _prodCalcTrans.CalcType,
                          _prodCalcTrans.Resource,
                          costVariable,
                          costConstant,
                          consumptionVariable,
                          consumptionConstant,
                          _prodCalcTrans.CollectRefLevel,
                          _prodCalcTrans.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOMCalcItem</Name>
				<Source><![CDATA[
    public BOMCalcItem getBOMCalcItem()
    {
        return bomCalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionConstant</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total constant consumption from the encapsulated temporary table.
    /// </summary>
    /// <returns>
    ///    The constant consumption.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The unit IDs used in the records of the encapsulated <c>CostTmpCalcTrans</c> table are not
    ///    identical.
    /// </exception>
    public Qty getConsumptionConstant()
    {
        if (!this.validateUnitId())
        {
            // When this method is called, the UnitId values are expected to be identical in CostTmpCalcTrans table
            throw error("@SCM:NonIdenticalUnitIdValues");
        }

        select sum(ConsumptionConstant) from costTmpCalcTrans;

        return costTmpCalcTrans.ConsumptionConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionVariable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the total variable consumption from the encapsulated temporary table.
    /// </summary>
    /// <returns>
    ///    The variable consumption.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The unit IDs that are used in the records of the encapsulated <c>CostTmpCalcTrans</c> table are not
    ///    identical.
    /// </exception>
    public Qty getConsumptionVariable()
    {
        if (!this.validateUnitId())
        {
            // When this method is called, the UnitId values are expected to be identical in CostTmpCalcTrans table
            throw error("@SCM:NonIdenticalUnitIdValues");
        }

        select sum(ConsumptionVariable) from costTmpCalcTrans;

        return costTmpCalcTrans.ConsumptionVariable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContributionConstant</Name>
				<Source><![CDATA[
    public CostSheetContributionConstant getContributionConstant()
    {
        select sum(ContributionConstant) from costTmpCalcTrans;

        return costTmpCalcTrans.ContributionConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContributionVariable</Name>
				<Source><![CDATA[
    public CostSheetContributionVariable getContributionVariable()
    {
        select sum(ContributionVariable) from costTmpCalcTrans;

        return costTmpCalcTrans.ContributionVariable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostSheetCalculationQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets cost sheet calculation quantity.
    /// </summary>
    /// <returns>
    ///    If the value is set, return costSheetCalculationQuantity, otherwise return qty.
    /// </returns>
    public Qty getCostSheetCalculationQuantity()
    {
        if (setCostSheetCalculationQuantity)
        {
            return costSheetCalculationQuantity;
        }
        else
        {
            return this.getQty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostFixed</Name>
				<Source><![CDATA[
    public CostSheetCostFixed getCostFixed()
    {
        select sum(ContributionConstant), sum(ContributionVariable)
            from costTmpCalcTrans
                where costTmpCalcTrans.CostGroupBehavior == CostGroupBehavior::Fixed;

        return costTmpCalcTrans.ContributionConstant + costTmpCalcTrans.ContributionVariable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostTmpCalcTrans</Name>
				<Source><![CDATA[
    public CostTmpCalcTrans getCostTmpCalcTrans()
    {
        return costTmpCalcTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostTotal</Name>
				<Source><![CDATA[
    public AmountMST getCostTotal()
    {
        return this.getCostVariable() + this.getCostFixed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostVariable</Name>
				<Source><![CDATA[
    public CostSheetCostVariable getCostVariable()
    {
        select sum(ContributionConstant), sum(ContributionVariable)
            from costTmpCalcTrans
                where costTmpCalcTrans.CostGroupBehavior == CostGroupBehavior::Undefined
                   || costTmpCalcTrans.CostGroupBehavior == CostGroupBehavior::Variable;

        return costTmpCalcTrans.ContributionConstant + costTmpCalcTrans.ContributionVariable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId getInventSiteId()
    {
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemGroupId</Name>
				<Source><![CDATA[
    public ItemGroupId getItemGroupId()
    {
        if (!itemId)
        {
            return '';
        }

        return InventTable::find(itemId).itemGroupId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    public ItemId getItemId()
    {
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevel</Name>
				<Source><![CDATA[
    public Level getLevel()
    {
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQty</Name>
				<Source><![CDATA[
    public Qty getQty()
    {
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    public TransDate getTransDate()
    {
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the unit ID that is used in the enclosed <c>CostTmpCalcTrans</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The unit ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The unit IDs used in the records of the encapsulated <c>CostTmpCalcTrans</c> table are not
    ///    identical.
    /// </exception>
    public UnitOfMeasureSymbol getUnitID()
    {
        if (!this.validateUnitId())
        {
            // When this method is called, the UnitId values are expected to be identical in CostTmpCalcTrans table
            throw error("@SCM:NonIdenticalUnitIdValues");
        }

        select firstonly costTmpCalcTrans;
        return costTmpCalcTrans.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostCalcTransData</Name>
				<Source><![CDATA[
    void initCostCalcTransData(CostCalcTransData _costCalcTransData)
    {
        itemId = _costCalcTransData.getItemId();
        qty = _costCalcTransData.getQty();
        level = _costCalcTransData.getLevel();
        transDate = _costCalcTransData.getTransDate();
        inventSiteId = _costCalcTransData.getInventSiteId();
        bomCalcItem = _costCalcTransData.getBOMCalcItem();
        this.SetCostSheetCalculationQuantity(_costCalcTransData.getCostSheetCalculationQuantity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the enclosed <c>CostTmpCalcTrans</c> temporary table is empty.
    /// </summary>
    /// <returns>
    ///    true if there are no records in the <c>CostTmpCalcTrans</c> table; otherwise, false.
    /// </returns>
    public boolean isEmpty()
    {
        select firstonly RecId from costTmpCalcTrans;

        return costTmpCalcTrans.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a key to use to cache costing sheets for the different sets of input data.
    /// </summary>
    /// <returns>
    ///    A key that represents the input data.
    /// </returns>
    /// <remarks>
    ///    The costing sheet cache should be used for only 1 line of input data, such as when a consumption of
    ///    1 item is reported.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The key length exceeds the length supported by the extended data type.
    /// </exception>
    public CostSheetInputDataKey key()
    {
        #define.Separator('|')
        str key;

        select count(RecId) from costTmpCalcTrans;

        if (costTmpCalcTrans.RecId > 1)
            return '';

        key += strFmt("%1%2%3%2%4%2%5%2%6%2",
            itemId,
            #Separator,
            qty,
            transDate,
            level,
            inventSiteId);

        select firstonly costTmpCalcTrans;

        key += strFmt("%1%2%3%2%4%2%5%2%6%2%7",
            costTmpCalcTrans.CostGroupId,
            #Separator,
            costTmpCalcTrans.CostGroupBehavior,
            costTmpCalcTrans.UnitId,
            costTmpCalcTrans.TransType,
            costTmpCalcTrans.Level,
            costTmpCalcTrans.Resource);

        int keyLengthLimit = new SysDictType(extendedTypeNum(CostSheetInputDataKey)).stringLen();

        if (strLen(key) > keyLengthLimit)
            throw error(strFmt("@SCM:CostSheetInputDataKeyTooLong", strLen(key), keyLengthLimit));

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        ItemId _itemId,
        Qty _qty,
        TransDate _transDate,
        Level _level,
        InventSiteId _inventSiteId)
    {
        itemId = _itemId;
        transDate = _transDate;

        this.setQty(_qty);
        this.setLevel(_level);
        this.setInventSiteId(_inventSiteId);
        calculateRecycledByProducts = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMCalcItem</Name>
				<Source><![CDATA[
    public void setBOMCalcItem(BOMCalcItem _bomCalcItem)
    {
        if (!_bomCalcItem)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        bomCalcItem = _bomCalcItem;
        inventSiteId = bomCalcItem.parmSiteId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostSheetCalculationQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets cost sheet calculation quantity.
    /// </summary>
    public void setCostSheetCalculationQuantity(Qty _costSheetCalculationQuantity)
    {
        costSheetCalculationQuantity = _costSheetCalculationQuantity;
        setCostSheetCalculationQuantity = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    public void setInventSiteId(InventSiteId _inventSiteId)
    {
        if (bomCalcItem)
        {
            throw error(Error::wrongUseOfFunction(funcName())); // never assign site id directly if bomCalcItem is not null
        }
        inventSiteId = _inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLevel</Name>
				<Source><![CDATA[
    public void setLevel(Level _level)
    {
        level = _level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQty</Name>
				<Source><![CDATA[
    public void setQty(Qty _qty)
    {
        qty = _qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateRecycledByProducts</Name>
				<Source><![CDATA[
    public boolean parmCalculateRecycledByProducts(boolean _calculateRecycledByProducts = calculateRecycledByProducts)
    {
        calculateRecycledByProducts = _calculateRecycledByProducts;

        return calculateRecycledByProducts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitId</Name>
				<Source><![CDATA[
    protected boolean validateUnitId()
    {
        select firstonly costTmpCalcTrans;
        UnitOfMeasureSymbol unitID = costTmpCalcTrans.UnitId;

        select firstonly costTmpCalcTrans
            where costTmpCalcTrans.UnitId != unitID;

        if (costTmpCalcTrans.RecId)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostCalcTransData construct(
        ItemId _itemId = '',
        Qty _qty = 1,
        TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        Level _level = 1,
        InventSiteId _inventSiteId = ''
        )
    {
        return new CostCalcTransData(_itemId, _qty, _transDate, _level, _inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>CostCalcTransData</c> instance from a <c>PmfProdCoBy</c> record.
    /// </summary>
    /// <param name="_prodCoBy">The <c>PmfProdCoBy</c> record used for initialization.</param>
    /// <param name = "_level">A reference level.</param>
    /// <param name = "_inventSiteId">An inventory site Id.</param>
    /// <returns>The created <c>CostCalcTransData</c> instance.</returns>
    public static CostCalcTransData newFromPmfProdCoBy(PmfProdCoBy _prodCoBy, Level _level = 1, InventSiteId _inventSiteId = '')
    {
        return CostCalcTransData::construct(
            _prodCoBy.ItemId,
            _prodCoBy.reportedFinishedGood(),
            _prodCoBy.RealDate,
            _level,
            _inventSiteId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>