<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanMultiJobDimPhysical</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanMultiJobDimPhysical</c> class handles the opening of picking and registration forms
///    when it is required.
/// </summary>
public abstract class KanbanMultiJobDimPhysical
{
    ParmId                  parmId;
    LeanKanbanJobStatus     targetKanbanJobStatus;
    List                    list;
    ListEnumerator          listEnumerator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the form to open.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    public abstract formName formName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds kanban jobs to the list of movements that require additional specification of picking or
    ///    registration dimensions.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    protected abstract void handleKanbanJob(KanbanJob _kanbanJob)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds kanban job picking list records to the list of movements that require picking or registration
    ///    if it is required.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    protected void handleKanbanJobPickingList(KanbanJob _kanbanJob)
    {
        KanbanJobPickingList    kanbanJobPickingList;

        if (   targetKanbanJobStatus >= LeanKanbanJobStatus::Prepared
            && _kanbanJob.Type       == LeanKanbanJobType::Process
            && !_kanbanJob.existPreviousJobOfType(LeanKanbanJobType::Process))
        {
            while select kanbanJobPickingList
                where kanbanJobPickingList.Job                 == _kanbanJob.RecId
                   && ((kanbanJobPickingList.FlushingPrinciple == FlushingPrincipKanban::Prepare
                   &&   targetKanbanJobStatus                  >= LeanKanbanJobStatus::Prepared)
                   ||  (kanbanJobPickingList.FlushingPrinciple == FlushingPrincipKanban::End
                   &&   targetKanbanJobStatus                  >= LeanKanbanJobStatus::Completed)
                   && kanbanJobPickingList.InventTransId       != '')
            {
                InventTransOriginId inventTransOriginId = kanbanJobPickingList.inventTransOriginId();
                if (this.mustAddToList(inventTransOriginId))
                {
                    list.addEnd(kanbanJobPickingList);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        list = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddToList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a movement for a given <c>InventTransOrigin</c> record ID is ready to be physically updated or must be added to the internal list.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    A record ID of the <c>InventTransOrigin</c> table.
    /// </param>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    true if the movement must be added to the internal list; otherwise, false.
    /// </returns>
    protected boolean mustAddToList(
        InventTransOriginId _inventTransOriginId,
        KanbanJob           _kanbanJob = null)
    {
        InventTrans     inventTrans;
        boolean         result;
        StatusIssue     statusIssue   = this.statusIssue();
        StatusReceipt   statusReceipt = this.statusReceipt();

        while select inventTrans
            where inventTrans.InventTransOrigin == _inventTransOriginId
               && ((inventTrans.StatusIssue     >  statusIssue
               &&   statusIssue                 != StatusIssue::None)
               ||  (inventTrans.StatusIssue     == statusIssue
               &&   statusIssue                 == StatusIssue::None))
               && ((inventTrans.StatusReceipt   >  statusReceipt
               &&   statusReceipt               != StatusReceipt::None)
               ||  (inventTrans.StatusReceipt   == statusReceipt
               &&   statusReceipt               == StatusReceipt::None))
        {
            result = !inventTrans.inventMovement().checkDimPhysical(inventTrans.Qty,inventTrans.inventDim(),false,false);
            if (result)
            {
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the picking or registration form if it is required.
    /// </summary>
    protected void openForm()
    {
        if (   list
            && list.elements())
        {
            listEnumerator = list.getEnumerator();
            listEnumerator.moveNext();
            Common common = listEnumerator.current();

            Args args = new Args(this.formName());
            args.caller(this);
            args.record(common);

            FormRun formRun = classfactory.formRunClass(args);
            formRun.init();
            formRun.run();
            formRun.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a container that contains a list of records.
    /// </summary>
    /// <returns>
    ///    A container that contains the records; otherwise an empty container.
    /// </returns>
    /// <remarks>
    ///    The method is called by the picking or registration form to retrieve the movements that must be
    ///    shown in the form.
    /// </remarks>
    public container packedList()
    {
        container   result;

        if (list)
        {
            result = list.pack();
        }
        else
        {
            result = new List(Types::Record).pack();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
        public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetKanbanJobStatus</Name>
				<Source><![CDATA[
        public LeanKanbanJobStatus parmTargetKanbanJobStatus(LeanKanbanJobStatus _targetKanbanJobStatus = targetKanbanJobStatus)
    {
        targetKanbanJobStatus = _targetKanbanJobStatus;
        return targetKanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the picking or registration form with movements that require additional inventory dimension specification before physical updates can be posted.
    /// </summary>
    public void run()
    {
        KanbanJobStatusUpdate   kanbanJobStatusUpdate;
        KanbanJob               kanbanJob;
        Kanban                  kanban;
        LegalEntity             legalEntity = CompanyInfo::current();

        this.init();

        if (parmId)
        {
            // handle jobs for the specified parmId, but only cases where quantities do not deviate
            while select TableId from kanbanJobStatusUpdate
                where kanbanJobStatusUpdate.ParmId  == parmId
                join kanbanJob
                    where kanbanJob.RecId           == kanbanJobStatusUpdate.Job
                       && kanbanJob.QuantityOrdered == kanbanJobStatusUpdate.QuantityReceived
                exists join kanban
                    where kanban.RecId       == kanbanJob.Kanban
                       && kanban.LegalEntity == legalEntity
            {
                this.handleKanbanJobPickingList(kanbanJob);
                this.handleKanbanJob(kanbanJob);
            }
        }

        this.openForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies which issue inventory transactions must be considered.
    /// </summary>
    /// <returns>
    ///    A <c>StatusIssue</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The inventory transactions that have a status greater than the defined value being considered.
    /// </remarks>
    protected StatusIssue statusIssue()
    {
        return StatusIssue::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>statusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies which receipt inventory transactions must be considered.
    /// </summary>
    /// <returns>
    ///    A <c>StatusReceipt</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    Inventory transactions with a status greater than the defined value must be considered.
    /// </remarks>
    protected StatusReceipt statusReceipt()
    {
        return StatusReceipt::None;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
