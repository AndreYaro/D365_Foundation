<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanHCMReportDPV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanHCMReportDPV2</c> class is responsible for preparing the data for the <c>BudgetPlanHCMReportV2</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(BudgetPlanHCMReportV2)),
    SRSReportParameterAttribute(classStr(BudgetPlanHCMReportContract))
]
public class BudgetPlanHCMReportDPV2 extends SRSReportDataProviderPreProcessTempDb
{
    BudgetPlanHCMReportTmp budgetPlanHCMReportTmp;
    BudgetPlanHCMReportContract budgetPlanHCMReportContract;
    Query budgetPlanHCMReportQuery;

    BudgetPlanHCMReportGroupOption firstGroupOption;
    BudgetPlanHCMReportGroupOption secondGroupOption;
    HcmPositionForecast hcmPositionForecast;
    HcmPositionForecastDetailV2 hcmPositionForecastDetailV2;
    BudgetPlanHeader budgetPlanHeaderMonetary;
    BudgetPlanHeader budgetPlanHeaderQuantity;
    BudgetPlanLine budgetPlanLine;
    HcmPositionForecastScenario positionForecastScenario;
    HcmPositionForecastRecId prevPositionForecastRecId;
    Map localPositionForecastScenarioCollection;
    MapEnumerator localPositionForecastScenarioEnumerator;
    BudgetPlanHCMReportTmp localbudgetPlanHCMReportTmp;
    Set budgetPlanHCMGrpIdentifierCollection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>filterExceptionsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes records from the <c>BudgetPlanHCMReportTmp</c> temporary table that meet the full time equivalency requirement for a position when exceptions only is enabled.
    /// </summary>
    protected void filterExceptionsOnly()
    {
        BudgetPlanHCMReportTmp exceptionBudgetPlanHCMReportTmp;
        BudgetPlanHCMReportTmp cycleBudgetPlanHCMReportTmp;

        // If exceptions only is enabled then reprocess the table and remove any items that meet the full time equivalency, have a monetary BP and have a quantity BP.
        if (budgetPlanHCMReportContract.parmIsRestrictedToExceptions() == NoYes::Yes)
        {
            this.setUserConnection(exceptionBudgetPlanHCMReportTmp);
            insert_recordset exceptionBudgetPlanHCMReportTmp
            (
                Description,
                FirstGroupOption,
                FullTimeEquivalencyCount,
                HcmFullTimeEquivalency,
                HcmPositionRecId,
                MonetaryBudgetPlan,
                PositionForecastScenario,
                PositionId,
                QuantityBudgetPlan,
                SecondGroupOption,
                Worker
            )
            select
                Description,
                FirstGroupOption,
                FullTimeEquivalencyCount,
                HcmFullTimeEquivalency,
                HcmPositionRecId,
                MonetaryBudgetPlan,
                PositionForecastScenario,
                PositionId,
                QuantityBudgetPlan,
                SecondGroupOption,
                Worker
            from budgetPlanHCMReportTmp;
            
            this.setUserConnection(cycleBudgetPlanHCMReportTmp);
            insert_recordset cycleBudgetPlanHCMReportTmp
            (
                Description,
                FirstGroupOption,
                FullTimeEquivalencyCount,
                HcmFullTimeEquivalency,
                HcmPositionRecId,
                MonetaryBudgetPlan,
                PositionForecastScenario,
                PositionId,
                QuantityBudgetPlan,
                SecondGroupOption,
                Worker
            )
            select
                Description,
                FirstGroupOption,
                FullTimeEquivalencyCount,
                HcmFullTimeEquivalency,
                HcmPositionRecId,
                MonetaryBudgetPlan,
                PositionForecastScenario,
                PositionId,
                QuantityBudgetPlan,
                SecondGroupOption,
                Worker
            from budgetPlanHCMReportTmp;

            while select PositionId, HcmFullTimeEquivalency from cycleBudgetPlanHCMReportTmp
            {
                select sum(FullTimeEquivalencyCount) from exceptionBudgetPlanHCMReportTmp
                    where exceptionBudgetPlanHCMReportTmp.PositionId == cycleBudgetPlanHCMReportTmp.PositionId;

                if (exceptionBudgetPlanHCMReportTmp.FullTimeEquivalencyCount == cycleBudgetPlanHCMReportTmp.HcmFullTimeEquivalency)
                {
                    select firstOnly RecId from exceptionBudgetPlanHCMReportTmp
                        where exceptionBudgetPlanHCMReportTmp.PositionId == cycleBudgetPlanHCMReportTmp.PositionId
                            && exceptionBudgetPlanHCMReportTmp.MonetaryBudgetPlan != '';

                    if (exceptionBudgetPlanHCMReportTmp.RecId)
                    {
                        delete_from budgetPlanHCMReportTmp
                            where budgetPlanHCMReportTmp.PositionId == cycleBudgetPlanHCMReportTmp.positionId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetPlanHCMReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>BudgetPlanHCMReportTmp</c> table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>BudgetPlanHCMReportTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('BudgetPlanHCMReportTmp')
    ]
    public BudgetPlanHCMReportTmp getBudgetPlanHCMReportTmp()
    {
        select budgetPlanHCMReportTmp;

        return budgetPlanHCMReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupOptionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value associated with the grouping option that the user selected.
    /// </summary>
    /// <param name="_groupOption">
    /// The grouping option that the user selected.
    /// </param>
    /// <returns>
    /// The value associated with the grouping option the user selected.
    /// </returns>
    protected str getGroupOptionValue(BudgetPlanHCMReportGroupOption _groupOption)
    {
        str fieldValue;

        switch (_groupOption)
        {
            case BudgetPlanHCMReportGroupOption::Department :
                fieldValue = OMOperatingUnit::find(hcmPositionForecastDetailV2.Department, OMOperatingUnitType::OMDepartment).Name;
                break;

            case BudgetPlanHCMReportGroupOption::Job :
                fieldValue = HcmJob::find(hcmPositionForecastDetailV2.Job).JobId;
                break;

            case BudgetPlanHCMReportGroupOption::ReportsToPosition :
                fieldValue = hcmPositionForecast.reportsToPosition();
                break;

            case BudgetPlanHCMReportGroupOption::PositionType :
                fieldValue = HcmPositionType::find(hcmPositionForecastDetailV2.PositionType).Description;
                break;

            case BudgetPlanHCMReportGroupOption::CompensationRegion :
                fieldValue = HcmCompLocation::find(hcmPositionForecastDetailV2.CompLocation).Description;
                break;
        }

        return fieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBudgetPlanHCMReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>BudgetPlanDetailsTmp</c> table.
    /// </summary>
    protected void insertBudgetPlanHCMReportTmp()
    {
        BudgetPlanLine localBudgetPlanLine;
        BudgetPlanScenario localBudgetPlanScenario;
        HcmPositionForecastScenario localPositionForecastScenario;
        HcmForecastScenario localForecastScenario;
        container budgetPlanHCMGroupIdentifier;

        ttsbegin;
        if (budgetPlanLine.EstimateType == BudgetPlanEstimateType::Quantity)
        {
            budgetPlanHCMReportTmp.QuantityBudgetPlan = budgetPlanHeaderQuantity.DocumentNumber;
        }
        else
        {
            budgetPlanHCMReportTmp.MonetaryBudgetPlan = budgetPlanHeaderMonetary.DocumentNumber;
        }

        // Get the FTE amount for the budgetPlanLines.
        select sum(Quantity) from localBudgetPlanLine
            where localBudgetPlanLine.BudgetPlanHeader == budgetPlanHeaderQuantity.RecId
                && localBudgetPlanLine.Position == hcmPositionForecast.RecId
            exists join localBudgetPlanScenario
                where localBudgetPlanScenario.RecId == localBudgetPlanLine.BudgetPlanScenario
                    && localBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Quantity
                    && localBudgetPlanScenario.Name == budgetPlanHCMReportContract.parmBudgetPlanQuantityScenario();

        budgetPlanHCMGroupIdentifier = [hcmPositionForecast.Position, budgetPlanHCMReportContract.parmFirstGroupOption(), budgetPlanHCMReportContract.parmSecondGroupOption()];

        // Setting value of HcmFullTimeEquivalency for only first record of a group because HcmFullTimeEquivalency value is a master table record
        // replicating it for all records gives undesired totals.
        if (!budgetPlanHCMGrpIdentifierCollection.in(budgetPlanHCMGroupIdentifier))
        {
            budgetPlanHCMReportTmp.HcmFullTimeEquivalency = positionForecastScenario.FullTimeEquivalency;
            budgetPlanHCMGrpIdentifierCollection.add(budgetPlanHCMGroupIdentifier);
        }

        budgetPlanHCMReportTmp.FullTimeEquivalencyCount = localBudgetPlanLine.Quantity;
        budgetPlanHCMReportTmp.Worker = hcmPositionForecast.worker();
        budgetPlanHCMReportTmp.Description = hcmPositionForecastDetailV2.Description;
        budgetPlanHCMReportTmp.PositionId = hcmPositionForecast.positionId();
        budgetPlanHCMReportTmp.HcmPositionRecId = hcmPositionForecast.Position;
        budgetPlanHCMReportTmp.FirstGroupOption = this.getGroupOptionValue(budgetPlanHCMReportContract.parmFirstGroupOption());
        budgetPlanHCMReportTmp.SecondGroupOption = this.getGroupOptionValue(budgetPlanHCMReportContract.parmSecondGroupOption());

        // Only set PositionForecastScenario field when the forecast position changes
        if (prevPositionForecastRecId != positionForecastScenario.PositionForecast)
        {
            // lookup for the PositionForecast which is linked to scenario of Monetary type
            select RecId, PositionForecast from localPositionForecastScenario
                where localPositionForecastScenario.PositionForecast == positionForecastScenario.PositionForecast
                join RecId from localBudgetPlanScenario
                    where localBudgetPlanScenario.Name == budgetPlanHCMReportContract.parmBudgetPlanMonetaryScenario()
                        && localBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary
                join RecId from localForecastScenario
                    where localForecastScenario.BudgetPlanScenario == localBudgetPlanScenario.RecId
                        && localForecastScenario.RecId == localPositionForecastScenario.ForecastScenario;

            // if it finds the PositionForecast linked to scenario of Monetary type
            // then set PositionForecastScenario and updates the map with key and value.
            if (localPositionForecastScenario.RecId)
            {
                budgetPlanHCMReportTmp.PositionForecastScenario = localPositionForecastScenario.RecId;
                prevPositionForecastRecId = positionForecastScenario.PositionForecast;

                if (!localPositionForecastScenarioCollection.exists(budgetPlanHCMReportTmp.PositionForecastScenario))
                {
                    localPositionForecastScenarioCollection.insert(budgetPlanHCMReportTmp.PositionForecastScenario, budgetPlanHCMReportTmp.PositionId);
                }
            }
        }

        if (!budgetPlanHCMReportTmp)
        {
            budgetPlanHCMReportTmp.insert();
        }
        else
        {
            budgetPlanHCMReportTmp.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        QueryRun queryRun;
        str budgetPlanLineDatasource = tableId2name(tableNum(BudgetPlanLine));
        UserConnection userConn = this.parmUserConnection();
        this.setUserConnection(budgetPlanHcmReportTmp);

        budgetPlanHCMReportContract = this.parmDataContract() as BudgetPlanHCMReportContract;
        firstGroupOption = budgetPlanHCMReportContract.parmFirstGroupOption();
        secondGroupOption = budgetPlanHCMReportContract.parmSecondGroupOption();

        localPositionForecastScenarioCollection = new Map(Types::Int64, Types::String);
        localPositionForecastScenarioEnumerator = new MapEnumerator(localPositionForecastScenarioCollection);

        budgetPlanHCMReportQuery = this.parmQuery();

        budgetPlanHCMGrpIdentifierCollection = new Set(Types::Container);

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            hcmPositionForecast = queryRun.get(tableNum(HcmPositionForecast));
            hcmPositionForecastDetailV2 = queryRun.get(tableNum(HcmPositionForecastDetailV2));

            budgetPlanLine = queryRun.get(tableNum(BudgetPlanLine));
            if (budgetplanline.EstimateType == BudgetPlanEstimateType::Monetary)
            {
                budgetPlanHeaderMonetary = queryRun.get(tableNum(BudgetPlanHeader));
            }
            else
            {
                budgetPlanHeaderQuantity = queryRun.get(tableNum(BudgetPlanHeader));
            }
            positionForecastScenario = queryRun.get(tableNum(HcmPositionForecastScenario));
            this.setTmpTableCursorToEmptyRowForPosition();

            this.insertBudgetPlanHCMReportTmp();
        }

        this.setUserConnection(localbudgetPlanHCMReportTmp);
        insert_recordset localbudgetPlanHCMReportTmp
        (
            Description,
            FirstGroupOption,
            FullTimeEquivalencyCount,
            HcmFullTimeEquivalency,
            HcmPositionRecId,
            MonetaryBudgetPlan,
            PositionForecastScenario,
            PositionId,
            QuantityBudgetPlan,
            SecondGroupOption,
            Worker
        )
        select
            Description,
            FirstGroupOption,
            FullTimeEquivalencyCount,
            HcmFullTimeEquivalency,
            HcmPositionRecId,
            MonetaryBudgetPlan,
            PositionForecastScenario,
            PositionId,
            QuantityBudgetPlan,
            SecondGroupOption,
            Worker
        from budgetPlanHCMReportTmp;

        // Loop through the collection of PositionForecastScenario and PositionId
        // Updates all the record with PositionForecastScenarioRecId key value
        // PositionForecastScenario is set zero in the temp Table.
        while (localPositionForecastScenarioCollection.empty() && localPositionForecastScenarioEnumerator.moveNext())
        {
            update_recordset localbudgetPlanHCMReportTmp
                setting
                PositionForecastScenario = localPositionForecastScenarioEnumerator.currentKey()
                where localbudgetPlanHCMReportTmp.PositionId == localPositionForecastScenarioEnumerator.currentValue()
                    && localbudgetPlanHCMReportTmp.PositionForecastScenario == 0;
        }
        this.filterExceptionsOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection on the table buffer.
    /// </summary>
    /// <param name="_common">
    /// The table buffer.
    /// </param>
    private void setUserConnection(Common _common)
    {
        UserConnection con = this.parmUserConnection();

        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpTableCursorToEmptyRowForPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the cursor for the <c>BudgetPlanHCMReportTmp</c> temporary table to the empty record for the current position if one exists.
    /// </summary>
    /// <remarks>
    /// This is used to reset the cursor back on a record that has been created for a position
    /// but has no budget plan associated with it or has the same budget plan as the current budget
    /// plan header. In this scenario we want to re-use that record.
    /// </remarks>
    protected void setTmpTableCursorToEmptyRowForPosition()
    {
        // Check if we have a blank line for this position already. If we do then use that line.
        select firstOnly forUpdate budgetPlanHCMReportTmp
            where budgetPlanHCMReportTmp.PositionId == hcmPositionForecast.positionId()
                && ((budgetPlanHCMReportTmp.MonetaryBudgetPlan == '' && budgetPlanHCMReportTmp.QuantityBudgetPlan == '')
                || ((budgetPlanHCMReportTmp.MonetaryBudgetPlan == budgetPlanHeaderQuantity.DocumentNumber
                        && budgetPlanHeaderQuantity.DocumentNumber != '')
                    || (budgetPlanHCMReportTmp.QuantityBudgetPlan == budgetPlanHeaderMonetary.DocumentNumber
                        && budgetPlanHeaderMonetary.DocumentNumber != ''))
                || (budgetPlanHCMReportTmp.MonetaryBudgetPlan == budgetPlanHeaderMonetary.DocumentNumber
                    && budgetPlanHeaderMonetary.DocumentNumber != '')
                || (budgetPlanHCMReportTmp.QuantityBudgetPlan == budgetPlanHeaderQuantity.DocumentNumber
                    && budgetPlanHeaderQuantity.DocumentNumber != ''));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>