<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesDropShipmentCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesDropShipmentCancel</c> class is used to cancel a drop shipment.
/// </summary>
class SalesDropShipmentCancel
{
    SalesLine   salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether a user can cancel the drop shipment.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        boolean ok = true;

        if (salesLine.isPackingSlipOrInvoiceUpdated())
        {
            ok = checkFailed("@SYS191049");
        }

        // If called from form ensure the user gives explicit ok to also remove referenced order line
        if (ok && FormDataUtil::isFormDataSource(salesLine))
        {
            ok = salesLine.warningForReference();
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PurchLine</c> record that is marked to the <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_selectForUpdate">
    ///    A Boolean value the specifies whether the record must be selected for update.
    /// </param>
    /// <returns>
    ///    A <c>PurchLine</c> record.
    /// </returns>
    protected PurchLine findPurchLine(boolean _selectForUpdate = false)
    {
        return PurchLine::findInventTransId(salesLine.InventRefTransId, _selectForUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes marking from the order line.
    /// </summary>
    protected void removeMarking()
    {
        ttsbegin;

        PurchLine purchLine = this.findPurchLine(true);

        if (salesLine.isStocked())
        {
            this.removeMarkingFromOrderLineWithStockedItem(purchLine);
        }
        else
        {
            this.removeMarkingFromOrderLineWithNonStockedItem(purchLine);
        }

        //Create drop ship PO order event entry
        MCROrderEventTable  mcrOrderEventTable;
        mcrOrderEventTable.insertFromDropShipment(salesLine.SalesId,
                                                  purchLine.PurchId,
                                                  MCROrderEventType::CancelDropShipPO);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarkingFromOrderLineWithStockedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes marking from an order line with a stocked item.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record.
    /// </param>
    protected void removeMarkingFromOrderLineWithStockedItem(PurchLine _purchLine)
    {
        InventTransOriginId salesLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId);
        InventTransOriginId purchLineInventTransOriginId = InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId);

        InventTransOrigin::deleteMarking(purchLineInventTransOriginId, salesLineInventTransOriginId, salesLine.QtyOrdered, true);
        InventTransOrigin::deleteMarking(salesLineInventTransOriginId, purchLineInventTransOriginId, -_purchLine.QtyOrdered, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarkingFromOrderLineWithNonStockedItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes marking from an order line with a non-stocked item.
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record.
    /// </param>
    protected void removeMarkingFromOrderLineWithNonStockedItem(PurchLine _purchLine)
    {
        _purchLine.selectForUpdate(true);
        _purchLine.clearInventReference();
        _purchLine.DeliveryType = TradeLineDlvType::None;
        _purchLine.update();

        salesLine.selectForUpdate(true);
        salesLine.clearInventReference();
        salesLine.DeliveryType = TradeLineDlvType::None;
        salesLine.SourcingOrigin = SalesSourcingOrigin::Inventory;
        salesLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels the drop shipment and deletes the related purchase order delivery line.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    It is not possible to cancel the drop shipment.
    /// </exception>
    public void run()
    {
        if (this.check())
        {
            MCRSalesLineDropShipment::deleteRelatedPurchaseOrderLine(salesLine.RecId);
        }
        else
        {
            throw error("@SYS18447");
        }

        info("@SYS191050");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesDropShipmentCancel construct()
    {
        return new SalesDropShipmentCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesDropShipmentCancel salesDropShipmentCancel;

        if (_args.dataset() != tableNum(SalesLine))
        {
            throw error(strFmt("@SYS29104",classId2Name(classIdGet(salesDropShipmentCancel))));
        }
        SalesLine salesLine = _args.record() as SalesLine;

        salesDropShipmentCancel = SalesDropShipmentCancel::newSalesLine(salesLine);
        salesDropShipmentCancel.run();

        if (FormDataUtil::isFormDataSource(salesLine))
        {
            FormDataUtil::getFormDataSource(salesLine).research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    public static SalesDropShipmentCancel newSalesLine(SalesLine _salesLine)
    {
        SalesDropShipmentCancel salesDropShipmentCancel = SalesDropShipmentCancel::construct();

        salesDropShipmentCancel.parmSalesLine(_salesLine);
        return salesDropShipmentCancel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>