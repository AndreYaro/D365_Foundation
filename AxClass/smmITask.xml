<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmITask</Name>
	<SourceCode>
		<Declaration><![CDATA[
interface SmmITask extends smmIItem
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the actual effort spent on the task.
    /// </summary>
    /// <returns>
    /// An integer representing the actual effort spent on the task.
    /// </returns>
    int actualWork()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>billingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task's billing information.
    /// </summary>
    /// <returns>
    /// A string with the task's billing information.
    /// </returns>
    str billingInformation()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>categories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the categories assigned to the task.
    /// </summary>
    /// <returns>
    /// A string containing the categories assigned to the task.
    /// </returns>
    str categories()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>complete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the task is complete.
    /// </summary>
    /// <returns>
    /// True if the task is complete; otherwise, false.
    /// </returns>
    boolean complete()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>dateCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the completion date of the task.
    /// </summary>
    /// <returns>
    /// A date representing the completion date of the task.
    /// </returns>
    utcdatetime dateCompleted()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>dueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the due date for the task.
    /// </summary>
    /// <returns>
    /// A datetime representing the due date for the task.
    /// </returns>
    utcdatetime dueDate()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getRecurrencePattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the recurrence pattern for the task.
    /// </summary>
    /// <returns>
    /// The recurrence pattern for the task.
    /// </returns>
    smmIRecurrence getRecurrencePattern()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>importance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the importance level of the task.
    /// </summary>
    /// <returns>
    /// An int representing the importance of the task.
    /// The value will be one of the following:
    /// #olImportanceLow, #olImportanceNormal, #olImportanceHigh
    /// </returns>
    int importance()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>isRecurring</Name>
				<Source><![CDATA[
    boolean isRecurring()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>mileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the task's mileage.
    /// </summary>
    /// <returns>
    /// A string representing the task's mileage.
    /// </returns>
    str mileage()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>parentFolderId</Name>
				<Source><![CDATA[
    str parentFolderId()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>percentComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the percentage of the task completed at the current date and time.
    /// </summary>
    /// <returns>
    /// An integer representing the percetenge of the task completed at the moment.
    /// </returns>
    int percentComplete()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>reminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a reminder was set for this task.
    /// </summary>
    /// <returns>
    /// True if the task has a reminder set; otherwise, false.
    /// </returns>
    boolean reminderSet()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>reminderTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date and time at which the reminder should occur for the task.
    /// </summary>
    /// <returns>
    /// A datetime containing the moment when the reminder should occur for this task.
    /// </returns>
    utcdatetime reminderTime()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>role</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the role of the owner in this task.
    /// </summary>
    /// <returns>
    /// Returns string containing the free-form text string associating the owner of a task with a role for the task.
    /// </returns>
    str role()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>saveItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the task.
    /// </summary>
    /// <returns>
    /// The task that was saved.
    /// </returns>
    smmITask saveItem()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>sensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sensitivity for the task.
    /// </summary>
    /// <returns>
    /// A constant in the OlSensitivity enumeration indicating the sensitivity for the task.
    /// The value may be #olConfidential, #olNormal, #olPersonal or #olPrivate.
    /// </returns>
    int sensitivity()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setActualWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the actual effort spent on the task.
    /// </summary>
    /// <param name="_actualWork">
    /// A long representing the actual effort spent on the task.
    /// </param>
    void setActualWork(smmActualWork _actualWork)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setBillingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task's billing information.
    /// </summary>
    /// <param name="_billingInformation">
    /// A string with the task's billing information.
    /// </param>
    void setBillingInformation(str _billingInformation)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task's clear-text body.
    /// </summary>
    /// <param name="_body">
    /// A string with the task's body.
    /// </param>
    void setBody(str _body)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the categories assigned to the task.
    /// </summary>
    /// <param name="_categories">
    /// A string containing the categories assigned to the task.
    /// </param>
    void setCategories(str _categories)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the companies assigned to the task.
    /// </summary>
    /// <param name="_companies">
    /// A string containing the names of the companies associated with the task.
    /// </param>
    void setCompanies(str _companies)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the task is complete.
    /// </summary>
    /// <param name="_complete">
    /// True if the task is complete; otherwise, false.
    /// </param>
    void setComplete(boolean _complete)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setContactNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the contact names associated with the task.
    /// </summary>
    /// <param name="_contactNames">
    /// A string representing the contact names associated with the task.
    /// </param>
    void setContactNames(str _contactNames)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setDateCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the completion date of the task.
    /// </summary>
    /// <param name="_dateCompleted">
    /// A date representing the completion date of the task.
    /// </param>
    void setDateCompleted(utcdatetime _dateCompleted)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the due date for the task.
    /// </summary>
    /// <param name="_dueDate">
    /// A datetime representing the due date for the task.
    /// </param>
    void setDueDate(utcdatetime _dueDate)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the importance level of the task.
    /// </summary>
    /// <param name="_importance">
    /// An int representing the importance of the task.
    /// The value should be one of the following:
    /// #olImportanceLow, #olImportanceNormal, #olImportanceHigh
    /// </param>
    void setImportance(int _importance)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setMileage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task's mileage.
    /// </summary>
    /// <param name="_mileage">
    /// A string representing the task's mileage.
    /// </param>
    void setMileage(str _mileage)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the owner of the task.
    /// </summary>
    /// <param name="_owner">
    /// A string indicating the owner of the task.
    /// </param>
    void setOwner(str _owner)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setPercentComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the percentage of the task completed at the current date and time.
    /// </summary>
    /// <param name="_percentComplete">
    /// An integer representing the percetenge of the task completed at the moment.
    /// </param>
    void setPercentComplete(smmPercentageCompleted _percentComplete)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setReminderSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if a reminder was set for this task.
    /// </summary>
    /// <param name="_reminderSet">
    /// True if the task has a reminder set; otherwise, false.
    /// </param>
    void setReminderSet(boolean _reminderSet)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setReminderTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// sets the date and time at which the reminder should occur for the task.
    /// </summary>
    /// <param name="_reminderTime">
    /// A datetime containing the moment when the reminder should occur for this task.
    /// </param>
    void setReminderTime(utcdatetime _reminderTime)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the role of the owner in this task.
    /// </summary>
    /// <param name="_role">
    /// A string containing the free-form text string associating the owner of a task with a role for the task.
    /// </param>
    void setRole(str _role)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setSensitivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sensitivity for the task.
    /// </summary>
    /// <param name="_sensitivity">
    /// A constant in the OlSensitivity enumeration indicating the sensitivity for the task.
    /// The value may be #olConfidential, #olNormal, #olPersonal or #olPrivate.
    /// </param>
    void setSensitivity(int _sensitivity)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start date for the task.
    /// </summary>
    /// <param name="_startDate">
    /// The task's start date.
    /// </param>
    void setStartDate(utcdatetime _startDate)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the status for the task.
    /// </summary>
    /// <param name="_status">
    /// An int representing a member of the OITaskStatus enumeration.
    /// Possible values: #olTaskComplete, #olTaskDeferred, #olTaskInProgress,
    /// #olTaskNotStarted or #olTaskWaiting.
    /// </param>
    void setStatus(int _status)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the subject for the task.
    /// </summary>
    /// <param name="_subject">
    /// A string indicating the subject for the task.
    /// </param>
    void setSubject(str _subject)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setTeamTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets if the task is a team task.
    /// </summary>
    /// <param name="_teamTask">
    /// True if the task is a team task; otherwise, false.
    /// </param>
    void setTeamTask(boolean _teamTask)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>setTotalWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the total work for the task.
    /// </summary>
    /// <param name="_totalWork">
    /// An integer indicating the total work for the task.
    /// </param>
    void setTotalWork(smmTotalWork _totalWork)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>startDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the start date for the task.
    /// </summary>
    /// <returns>
    /// The task's start date and time.
    /// </returns>
    utcdatetime startDate()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status for the task.
    /// </summary>
    /// <returns>
    /// An int representing a member of the OITaskStatus enumeration.
    /// Possible values: #olTaskComplete, #olTaskDeferred, #olTaskInProgress,
    /// #olTaskNotStarted or #olTaskWaiting.
    /// </returns>
    int status()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>subject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the subject for the task.
    /// </summary>
    /// <returns>
    /// A string indicating the task's subject.
    /// </returns>
    str subject()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>teamTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the task is a team task.
    /// </summary>
    /// <returns>
    /// True if the task is a team task; otherwise, false.
    /// </returns>
    boolean teamTask()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>totalWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total work for the task.
    /// </summary>
    /// <returns>
    /// An integer indicating the total work for the task.
    /// </returns>
    int totalWork()
    {
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>