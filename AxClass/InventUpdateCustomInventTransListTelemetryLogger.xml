<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventUpdateCustomInventTransListTelemetryLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using EventSource = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// The <c>InventUpdateCustomInventTransListTelemetryLogger</c> class logs telemetry events 
/// when a custom inventory transaction list is used for the inventory updates.
/// </summary>
internal final class InventUpdateCustomInventTransListTelemetryLogger
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logCustomInventTransListInitialized</Name>
				<Source><![CDATA[
    internal static void logCustomInventTransListInitialized(InventUpdate _inventUpdate, str _methodName)
    {
        InventMovement movement = _inventUpdate.movement();
        EventSource::EventWriteInventUpdateCustomTransListInitialized(
            classId2Name(_inventUpdate.handle()),
            _methodName,
            classId2Name(movement.handle()),
            movement.inventTransOriginId(),
            movement.inventTable().RecId,
            movement.inventDimId(),
            con2Str(xSession::xppCallStack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTransListInitializedFromCustomList</Name>
				<Source><![CDATA[
    internal static void logTransListInitializedFromCustomList(InventUpdate _inventUpdate, str _methodName)
    {
        InventMovement movement = _inventUpdate.movement();
        EventSource::EventWriteInventUpdateTransListInitializedFromCustomList(
            classId2Name(_inventUpdate.handle()),
            _methodName,
            classId2Name(movement.handle()),
            movement.inventTransOriginId(),
            movement.inventTable().RecId,
            movement.inventDimId(),
            con2Str(xSession::xppCallStack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInvalidCustomInventTrans</Name>
				<Source><![CDATA[
    internal static void logInvalidCustomInventTrans(InventUpdate _inventUpdate, str _methodName, InventTrans _inventTrans, InventQty _customQuantity)
    {
        InventMovement movement = _inventUpdate.movement();
        EventSource::EventWriteInventUpdateInvalidCustomInventTrans(
            classId2Name(_inventUpdate.handle()),
            _methodName,
            classId2Name(movement.handle()),
            movement.inventDimId(),
            movement.inventTransOriginId(),
            movement.inventTable().RecId,
            _inventTrans.RecId,
            enum2Str(_inventTrans.StatusIssue),
            enum2Str(_inventTrans.StatusReceipt),
            enum2Str(_inventTrans.TransChildType),
            _inventTrans.TransChildRefId,
            _inventTrans.Qty,
            _customQuantity,
            _inventTrans.InventTransOrigin,
            _inventTrans.inventDimId,
            con2Str(xSession::xppCallStack()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInvalidTotalCustomInventTransQuantity</Name>
				<Source><![CDATA[
    internal static void logInvalidTotalCustomInventTransQuantity(InventUpdate _inventUpdate, str _methodName, InventQty _remainingQuantity)
    {
        InventMovement movement = _inventUpdate.movement();
        EventSource::EventWriteInvalidTotalCustomInventTransQuantity(
            classId2Name(_inventUpdate.handle()),
            _methodName,
            classId2Name(movement.handle()),
            movement.inventTransOriginId(),
            movement.inventTable().RecId,
            movement.inventDimId(),
            _remainingQuantity,
            con2Str(xSession::xppCallStack()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>