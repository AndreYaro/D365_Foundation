<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostRevenueTrans_Adj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostRevenueTrans_Adj extends ProjPostRevenueTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method is true.
    /// </remarks>
    public void projTransUpdate()
    {
        //  if the project parameter AlwaysRegulationTrans is set to 'No' fields are updated on the original transaction
        if (this.parmAdjustBuffer())
        {
            projRevenueTrans.TaxItemGroupId         = this.parmAdjustBuffer().TaxItemGroupId;
            projRevenueTrans.ActivityNumber         = this.parmAdjustBuffer().ActivityNumber;
            projRevenueTrans.TaxGroupId             = this.parmAdjustBuffer().TaxgroupId;
            projRevenueTrans.Txt                    = this.parmAdjustBuffer().Txt;
            projRevenueTrans.LinePropertyId         = this.parmAdjustBuffer().LinePropertyId;
            projRevenueTrans.CurrencyId             = this.parmAdjustBuffer().CurrencyId;
            projRevenueTrans.DefaultDimension       = this.parmAdjustBuffer().DefaultDimension;

            if (ProjCategory::find(this.parmAdjustBuffer().CategoryId).SetupSubscription)
            {
                projRevenueTrans.smaBasePrice       = this.parmAdjustBuffer().smaBasePrice;
                projRevenueTrans.smaIndex           = this.parmAdjustBuffer().smaIndex;
                projRevenueTrans.smaEnddate         = this.parmAdjustBuffer().smaEnddate;
                projRevenueTrans.smaStartDate       = this.parmAdjustBuffer().smaStartDate;
                projRevenueTrans.smaBasePrice       = this.parmAdjustBuffer().smaBasePrice;

                if (this.parmAdjustBuffer().smaSubscriptionPeriodType   == SMASubscriptionPeriodType::PriceChange ||
                    this.parmAdjustBuffer().smaSubscriptionPeriodType   == SMASubscriptionPeriodType::ReductionDays)
                {
                    projRevenueTrans.smaSubscriptionPeriodType = this.parmAdjustBuffer().smaSubscriptionPeriodType;
                }
                else
                {
                    projRevenueTrans.smaSubscriptionPeriodType = SMASubscriptionTable::getPeriodType(
                                                                        this.parmAdjustBuffer().smaStartDate,
                                                                        this.parmAdjustBuffer().smaEnddate,
                                                                        SMASubscriptionTable::find(this.parmAdjustBuffer().smaSubscriptionId).invoicePeriodCode())  ;
                }
            }
        }

        projRevenueTrans.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>