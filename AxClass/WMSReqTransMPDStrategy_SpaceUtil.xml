<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsReqTransMPDStrategy_SpaceUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSReqTransMPDStrategy_SpaceUtil</c> class implements the space utilization specific
/// strategy pattern for the <c>WMSReqTransMovementsPerDayDP</c> class.
/// </summary>
class wmsReqTransMPDStrategy_SpaceUtil extends WMSReqTransMPDStrategy
{
    WMSSpaceUtilForecast    spaceUtilForecast;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query used by <c>WMSReqTransMovementsPerDayDP</c> to find data.
    /// </summary>
    /// <returns>
    /// The query object.
    /// </returns>
    public Query buildQuery()
    {
        QueryBuildDataSource                dsReqTrans;
        QueryBuildDataSource                dsInventDim;
        QueryBuildDataSource                dsStorageUnitReqTrans;
        QueryBuildDataSource                dsInventTable;
        Query                               query;

        query = super();

        dsReqTrans  = query.dataSourceTable(tableNum(ReqTrans));
        dsInventDim = query.dataSourceTable(tableNum(InventDim));

        // add the link to the storage unit and apply the filtering by unit and site
        dsStorageUnitReqTrans = dsInventDim.addDataSource(tableNum(WMSStorageLoadUnitReqTrans));
        dsStorageUnitReqTrans.joinMode(JoinMode::InnerJoin);
        dsStorageUnitReqTrans.fetchMode(QueryFetchMode::One2One);

        dsStorageUnitReqTrans.addRange(fieldNum(WMSStorageLoadUnitReqTrans, wmsStorageLoadUnit)).value(queryValue(localContract.parmWMSStorageLoadUnit()));
        dsStorageUnitReqTrans.addRange(fieldNum(WMSStorageLoadUnitReqTrans, InventSiteId)).value(queryValue(localContract.parmInventSiteId()));

        dsStorageUnitReqTrans.addLink(fieldNum(InventDim, InventSiteId), fieldNum(WMSStorageLoadUnitReqTrans, InventSiteId));
        dsStorageUnitReqTrans.addLink(fieldNum(InventDim, InventLocationId), fieldNum(WMSStorageLoadUnitReqTrans, InventLocationID));

        Enumerator enum = InventDim::dimProductDimFieldList().getEnumerator();
        while (enum.moveNext())
        {
            FieldId inventDimFieldId = enum.current();
            FieldId mappedFieldId = InventDimFieldsMap::mappedFieldId(inventDimFieldId, tableStr(WMSStorageLoadUnitReqTrans));

            if (mappedFieldId)
            {
                dsStorageUnitReqTrans.addLink(inventDimFieldId, mappedFieldId);
            }
        }

        dsStorageUnitReqTrans.addLink(fieldNum(ReqTrans, ItemId), fieldNum(WMSStorageLoadUnitReqTrans, ItemId), dsReqTrans.name());
        dsStorageUnitReqTrans.addLink(fieldNum(ReqTrans, PlanVersion), fieldNum(WMSStorageLoadUnitReqTrans, PlanVersion), dsReqTrans.name());

        // add invent table
        dsInventTable = dsStorageUnitReqTrans.addDataSource(tableNum(InventTable));
        dsInventTable.joinMode(JoinMode::InnerJoin);
        dsInventTable.fetchMode(QueryFetchMode::One2One);
        dsInventTable.addLink(fieldNum(WMSStorageLoadUnitReqTrans, ItemId), fieldNum(InventTable, ItemId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the report should be processed.
    /// </summary>
    /// <returns>
    /// true if report should be processed; otherwise, false.
    /// </returns>
    public boolean canProcessReport()
    {
        return spaceUtilForecast.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs object initialization.
    /// </summary>
    public void initialize()
    {
        super();

        if (localContract.parmWMSStorageLoadUnit() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        spaceUtilForecast = WMSSpaceUtilForecast::find(localContract.parmWMSStorageLoadUnit(), localContract.parmDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates fields of the <c>WMSMovementsPerDayTmp</c> table.
    /// </summary>
    /// <param name="_wmsMovementsPerDayTmp">
    /// The <c>WMSMovementsPerDayTmp</c> fields to populate.
    /// </param>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> table to use as reference.
    /// </param>
    /// <returns>
    /// true if succeeded; otherwise, false.
    /// </returns>
    public boolean populateFields(WMSMovementsPerDayTmp _wmsMovementsPerDayTmp,
                                  InventTable           _inventTable)
    {
        boolean result = false;

        switch (localContract.parmWMSStorageLoadUnitType())
        {
            case WMSStorageLoadUnitType::Pallet:
                if (_inventTable.StandardPalletQuantity > 0)
                {
                    if (spaceUtilForecast.CurrentPalletCount != 0)
                    {
                        _wmsMovementsPerDayTmp.UtilizationPct = abs((roundUp(_wmsMovementsPerDayTmp.Qty / _inventTable.StandardPalletQuantity, 1)) / spaceUtilForecast.CurrentPalletCount);
                    }
                    result = true;
                }
                break;

            case WMSStorageLoadUnitType::Volume:
                if (_inventTable.grossVolume() > 0)
                {
                    if (spaceUtilForecast.CurrentVolume != 0)
                    {
                        _wmsMovementsPerDayTmp.UtilizationPct = abs((_wmsMovementsPerDayTmp.Qty * _inventTable.grossVolume()) / spaceUtilForecast.CurrentVolume);
                    }
                    result = true;
                }
                break;

            case WMSStorageLoadUnitType::Weight:
                if (_inventTable.grossWeight() > 0)
                {
                    if (spaceUtilForecast.CurrentWeight != 0)
                    {
                        _wmsMovementsPerDayTmp.UtilizationPct = abs((_wmsMovementsPerDayTmp.Qty * _inventTable.grossWeight()) / spaceUtilForecast.CurrentWeight);
                    }
                    result = true;
                }
                break;

            default:
                _wmsMovementsPerDayTmp.clear();
                result = false;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>