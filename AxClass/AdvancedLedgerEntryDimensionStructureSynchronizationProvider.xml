<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AdvancedLedgerEntryDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>AdvancedLedgerEntryDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for advanced ledger entry data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaption("@PublicSector:AdvancedLedgerEntryDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterface(true)]
[DimensionStructureSynchronizationProviderV2Flight(classStr(AdvancedLedgerEntryDimensionStructureSyncV2Flight))]
public class AdvancedLedgerEntryDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider),
            staticMethodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', staticMethodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));

            AdvancedLedgerEntryLine advancedLedgerEntryLine;
            AdvancedLedgerEntryHeader advancedLedgerEntryHeader;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            CompanyInfo companyInfo = CompanyInfo::find(_ledger.PrimaryForLegalEntity);
       
            unchecked(Uncheck::XDS)
            {
                changecompany(companyInfo.DataArea)
                {
                    // Locate any LedgerDimension from unposted advanced ledger entry lines
                    select firstonly RecId from advancedLedgerEntryLine
                exists join advancedLedgerEntryHeader
                    where advancedLedgerEntryHeader.RecId == advancedLedgerEntryLine.AdvancedLedgerEntryHeader
                        && advancedLedgerEntryHeader.TransactionStatus == AdvancedLedgerEntryTransactionStatus::Draft
                        && advancedLedgerEntryHeader.DataAreaId == companyInfo.DataArea
                exists join dimAttrValueGroupCombination
                    where dimAttrValueGroupCombination.DimensionAttributeValueCombination == advancedLedgerEntryLine.LedgerDimension
                exists join dimAttrValueGroup
                    where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                        && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;

                    if (advancedLedgerEntryLine.RecId)
                    {
                        // The account structure is referenced by a ledger dimension in unposted advanced ledger entry lines
                        checkFailed(strfmt("@PublicSector:AdvancedLedgerEntryLineLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                        _ret.booleanResult(true);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, insertDimensionSynchronize));
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

                if (synchronizationRequest)
                {
                    DimensionSynchronize                dimSynchronize;
                    DimensionSynchronize                dimSynchronizeNotExists;
                    DimensionSynchronizeLedger          dimSynchronizeLedger;

                    dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
                    dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
                    dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

                    AdvancedLedgerEntryLine             advancedLedgerEntryLine;
                    AdvancedLedgerEntryHeader           advancedLedgerEntryHeader;
                    DimensionAttributeValueCombination  dimAttrValueCombination;
                    DataArea                            company;

                    unchecked(Uncheck::XDS)
                    {

                        while select Id from company where company.IsVirtual == NoYes::No
                        {
                            changecompany(company.Id)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                advancedLedgerEntryLine.clear();
                                advancedLedgerEntryHeader.clear();

                                // Extract LedgerDimension's from unposted Advanced ledger entry transactions
                                insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea)
                                select LedgerDimension from advancedLedgerEntryLine
                                    group by advancedLedgerEntryLine.LedgerDimension, dimSynchronizeLedger.DataArea
                                join advancedLedgerEntryHeader
                                    where advancedLedgerEntryHeader.RecId == advancedLedgerEntryLine.AdvancedLedgerEntryHeader &&
                                        advancedLedgerEntryHeader.TransactionStatus == AdvancedLedgerEntryTransactionStatus::Draft
                                join DataArea from dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == advancedLedgerEntryHeader.DataAreaId
                                join dimAttrValueCombination
                                    where dimAttrValueCombination.RecId == advancedLedgerEntryLine.LedgerDimension
                                notexists join dimSynchronizeNotExists
                                    where dimSynchronizeNotExists.OriginalLedgerDimension == advancedLedgerEntryLine.LedgerDimension;
                                
                                activityContext.addCustomProperty('MethodName', methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, insertDimensionSynchronize));
                                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }             
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        RefRecId providerStatusTrackingId;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));
        
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                RefRecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();

                unchecked (Uncheck::XDS)
                {
                    DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

                    select forupdate firstonly RecId from dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _request.parmProviderName();

                    if (dimensionStructureSyncProviderStatusTracking.RecId == 0)
                    {
                        ttsbegin;

                        dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                        dimensionStructureSyncProviderStatusTracking.ProviderName = _request.parmProviderName();
                        dimensionStructureSyncProviderStatusTracking.insert();

                        providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;

                        AdvancedLedgerEntryLine advancedLedgerEntryLine;
                        AdvancedLedgerEntryHeader advancedLedgerEntryHeader;
                        DataArea company;
                        
                        while select Id from company
                            where company.IsVirtual == NoYes::No
                        {
                            changecompany(company.Id)
                            {
                                DimensionSynchronizeDetail dimSynchronize;
                                DimensionSynchronizeDetail dimSynchronizeNotExists;
                                DimensionSynchronizeLedgerDetail dimSynchronizeLedger;

                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                advancedLedgerEntryLine.clear();
                                advancedLedgerEntryHeader.clear();
                                
                                // Extract LedgerDimension's from unposted Advanced ledger entry transactions
                                insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea)
                                    select providerStatusTrackingId, LedgerDimension from advancedLedgerEntryLine
                                        group by advancedLedgerEntryLine.LedgerDimension, dimSynchronizeLedger.DataArea
                                    join advancedLedgerEntryHeader
                                        where advancedLedgerEntryHeader.RecId == advancedLedgerEntryLine.AdvancedLedgerEntryHeader &&
                                            advancedLedgerEntryHeader.TransactionStatus == AdvancedLedgerEntryTransactionStatus::Draft
                                    join DataArea from dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == advancedLedgerEntryHeader.DataAreaId
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == advancedLedgerEntryLine.LedgerDimension &&
                                            dimSynchronizeNotExists.ProviderStatusTrackingId == providerStatusTrackingId;
                                
                                activityContext.addCustomProperty('MethodName', methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));
                                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }

                        dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                        dimensionStructureSyncProviderStatusTracking.update();

                        ttscommit;
                    }
                    else
                    {
                        providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;
                    }
                }
            }
        }

        return providerStatusTrackingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, updateProviderReferences));
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            if (synchronizationRequest)
            {
                DimensionSynchronize        dimSynchronize;
                DimensionSynchronizeLedger  dimSynchronizeLedger;

                dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
                dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

                AdvancedLedgerEntryLine     advancedLedgerEntryLine;
                AdvancedLedgerEntryHeader   advancedLedgerEntryHeader;
                DataArea                    company;

                unchecked(Uncheck::XDS)
                {
                    while select Id from company where company.IsVirtual == NoYes::No
                    {

                        changecompany(company.Id)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            advancedLedgerEntryLine.clear();
                            advancedLedgerEntryHeader.clear();

                            // Update unposted Advanced ledger entry transaction with the new ledger dimension values
                            update_recordset advancedLedgerEntryLine
                            setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                            join advancedLedgerEntryHeader
                                where advancedLedgerEntryHeader.RecId == advancedLedgerEntryLine.AdvancedLedgerEntryHeader &&
                                    advancedLedgerEntryHeader.TransactionStatus == AdvancedLedgerEntryTransactionStatus::Draft
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.DataArea == advancedLedgerEntryHeader.DataAreaId
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == advancedLedgerEntryLine.LedgerDimension &&
                                    dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                            info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", advancedLedgerEntryLine.rowCount(), tableId2PName(advancedLedgerEntryLine.TableId), company.Id));

                            activityContext.addCustomProperty('MethodName', methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, updateProviderReferences));
                            activityContext.addCustomProperty('WereRecordsUpdated', int2str(advancedLedgerEntryLine.rowCount() > 0));
                        }
                    }
             
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, updateProviderReferencesV2));
        
        try
        {
            ttsbegin;
        
            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                RefRecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();

                AdvancedLedgerEntryLine advancedLedgerEntryLine;
                AdvancedLedgerEntryHeader advancedLedgerEntryHeader;
                DataArea company;

                unchecked(Uncheck::XDS)
                {
                    // Skip event handlers to avoid falling back to row-by-row operation.
                    advancedLedgerEntryLine.skipEvents(true);
                    advancedLedgerEntryLine.skipPostLoad(true);

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                    {
                        changecompany(company.Id)
                        {
                            DimensionSynchronizeDetail dimSynchronize;
                            DimensionSynchronizeLedgerDetail dimSynchronizeLedger;

                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            advancedLedgerEntryLine.clear();
                            advancedLedgerEntryHeader.clear();

                            // Update unposted Advanced ledger entry transaction with the new ledger dimension values
                            update_recordset advancedLedgerEntryLine
                                setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                join advancedLedgerEntryHeader
                                    where advancedLedgerEntryHeader.RecId == advancedLedgerEntryLine.AdvancedLedgerEntryHeader &&
                                        advancedLedgerEntryHeader.TransactionStatus == AdvancedLedgerEntryTransactionStatus::Draft
                                join dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == advancedLedgerEntryLine.LedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                        dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId()
                                join dimSynchronizeLedger
                                    where dimSynchronizeLedger.DataArea == advancedLedgerEntryHeader.DataAreaId &&
                                        dimSynchronizeLedger.BatchJobId == batchJobId;

                            info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", advancedLedgerEntryLine.rowCount(), tableId2PName(advancedLedgerEntryLine.TableId), company.Id));

                            activityContext.addCustomProperty('MethodName', methodStr(AdvancedLedgerEntryDimensionStructureSynchronizationProvider, updateProviderReferencesV2));
                            activityContext.addCustomProperty('WereRecordsUpdated', int2str(advancedLedgerEntryLine.rowCount() > 0));
                        }
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() > MaxRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>