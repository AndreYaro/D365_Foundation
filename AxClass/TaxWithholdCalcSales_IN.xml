<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcSales_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCalcSales_IN</c> class integrates with the calculation of withhold tax from the sales order lines by the
/// <see cref="T:SalesCalcTax_Sales" />.
/// </summary>
class TaxWithholdCalcSales_IN extends TaxWithholdCalculation_IN
{
    SalesCalcTax_Sales  salesCalcTax;
    SalesLine           salesLine;

    NoYes               markupAdminister;
    Map                 orderBalances;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the grossAmount for given sales order.
    /// </summary>
    protected void calcGrossAmountCur()
    {
        this.initGrossAmountCur();
        this.finalizeGrossAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Steps through sales order lines to calculate withhold tax for a sales order.
    /// </summary>
    /// <returns>
    ///    The withhold tax amount.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmountCur        taxWithholdAmount;
        TaxAmountCur        totalTaxWithholdAmt;
        boolean             isCreditNote;
        boolean             isRecoverable;
        container           taxWithholdData;
        SalesTable          salesTableLoc;
        container           customerInformation;
        TaxWithholdGroup    taxWithholdGroup;
        //based on which to determin how much to calc WHT
        AmountCur           lineGrossAmountCur;
        SalesLine_IN        salesLine_IN;
        boolean             isOnJewelry = false;
        boolean             isByCash = false;
        boolean             isSettled = false;
        AmountCur           sumOfPaymentAmountCur = 0;

        if (!headingRecId)
        {
            return 0;
        }

        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        if (headingTableId == tableNum(SalesTable))
        {
            salesTableLoc = SalesTable::findRecId(headingRecId);
        }

        if (salesTableLoc && !this.isTDSTCSApplicableForHeader(salesTableLoc))
        {
            return 0;
        }

        this.calcGrossAmountCur();

        salesCalcTax.initCursor();

        salesLine = salesCalcTax.nextLine() as SalesLine;
        salesTableLoc = salesLine.salesTable();

        while (salesLine)
        {
            taxWithHoldAmount = 0;
            salesLine_IN = salesLine.salesLine_IN();

            isOnJewelry  = TaxWithholdDesignerTable_IN::isonJewelry(salesLine.salesLine_IN().tdsGroup ? salesLine.salesLine_IN().tdsGroup : salesLine.salesLine_IN().tcsGroup, salesCalcTax.invoiceDate());
            isByCash     = PaymTerm::isbyCashTermsofPayment_IN(salesTableLoc.Payment) || CustPaymModeTable::isbyCashMethodofPayment_IN(salesTableLoc.PaymMode);
            isSettled    = this.isSettled(salesTableLoc.company(), salesTableLoc.TableId, salesTableLoc.RecId);

            if (this.isWHTParameterMarked(salesLine)
                &&(!(isOnJewelry && !isByCash && !isSettled))
            )
            {
                taxWithholdGroup    = salesLine_IN.tdsGroup ? salesLine_IN.tdsGroup : salesLine_IN.tcsGroup;
                isRecoverable       = salesLine_IN.tdsGroup ? true : false;

                isCreditNote = this.isCreditNote(salesLine);

                lineGrossAmountCur = TmpTransLineWithholdGrossAmount_IN::lineGrossAmountCur(tmpTransLineWithholdGrossAmount, salesLine.TableId, salesLine.RecId);

                if (isSettled && isOnJewelry && sumOfPaymentAmountCur == 0)
                {
                    sumOfPaymentAmountCur = this.getSumOfPayment(salesTableLoc);
                    if (sumOfPaymentAmountCur > 0)
                    {
                        isByCash = true;
                    }
                }

                taxWithholdData = this.setWHTContainerData(salesLine, lineGrossAmountCur);

                // Set customer information.
                customerInformation += salesTableLoc.CustAccount;
                customerInformation += '';
                customerInformation += '';
                customerInformation += '';
                customerInformation += curext(); // invoice Company
                customerInformation += curext(); // payment Company

                this.setInvoiceCompany(curext());
                this.setPaymentCompany(curext());

                if (isCreditNote)
                {
                    taxWithholdData = conPoke(taxWithholdData, #TaxDate, taxDate);
                    taxWithHoldAmount = this.creditNoteCalculation(taxWithholdData,
                                                                    '',
                                                                    salesLine.SalesId);
                }
                else if (lineGrossAmountCur > 0)
                {
                    taxWithholdAmount   = this.totalTaxWithhold(salesTableLoc.InvoiceAccount,
                                                                taxWithholdGroup,
                                                                salesCalcTax.invoiceDate(),
                                                                taxWithholdData,
                                                                isRecoverable,
                                                                false,
                                                                '',
                                                                salesLine.InventRefId,
                                                                '',
                                                                0,
                                                                0,
                                                                LedgerJournalACType::Cust,
                                                                LedgerJournalACType::Cust,
                                                                customerInformation,
                                                                false,
                                                                0,
                                                                isOnJewelry,
                                                                isByCash);
                }
                if (!isCreditNote && salesLine_IN.TCSGroup != '')
                {
                    taxWithholdAmount = taxWithholdAmount * -1;
                }

                totalTaxWithholdAmt += taxWithholdAmount;
            }
            salesLine = salesCalcTax.nextLine() as SalesLine;
        }

        sw.Stop();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00054, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), sw.ElapsedMilliseconds);

        return totalTaxWithholdAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// finalizes the grossAmount for given sales order lines and updates the <c>TmpTransLineWithholdGrossAmount_IN</c> table.
    /// </summary>
    protected void finalizeGrossAmountCur()
    {
        container                           paymentAmountCurCon;
        container                           taxWithholdCodeTypeCon;
        AmountCur                           paymentAmountCur;
        TaxWithholdCodeType_IN              paymentTaxWithholdCodeType;
        int                                 conPosition;
        SalesLine                           salesLineLoc;
        SalesTable                          salesTableLoc;
        boolean                             isLineSettled;
        TaxWithholdCodeType_IN              invoiceLineTaxWithholdCodeType;
        TmpTransLineWithholdGrossAmount_IN  tmpTransLineWithholdGrossAmountLoc;
        AmountCur                           invoiceLineRemainSettledAmountCur;
        AmountCur                           invoiceWHTSettledAmountCur;

        salesCalcTax.initCursor();
        salesLineLoc = salesCalcTax.nextLine() as SalesLine;
        salesTableLoc = salesLineLoc.salesTable();
        conPosition = 1;
        ttsBegin;
        if(!TaxWithholdGroupHeading::find(salesTableLoc.TCSGroup_IN).TaxLiabilityOnPayment_IN)
        {
            [paymentAmountCurCon, taxWithholdCodeTypeCon] = this.settleSales(salesTableLoc);
        }
        paymentAmountCur            = conPeek(paymentAmountCurCon,conPosition);
        paymentTaxWithholdCodeType  = conPeek(taxWithholdCodeTypeCon, conPosition);
        while (salesLineLoc && (conPosition <= conLen(paymentAmountCurCon) || !paymentAmountCur))
        {
            invoiceLineTaxWithholdCodeType      = salesLineLoc.salesLine_IN().taxWithholdCodeType_IN();
            tmpTransLineWithholdGrossAmountLoc  = TmpTransLineWithholdGrossAmount_IN::findBySource(tmpTransLineWithholdGrossAmount, salesLineLoc.TableId, salesLineLoc.RecId);
            invoiceLineRemainSettledAmountCur   = tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur;
            invoiceWHTSettledAmountCur          = 0;
            isLineSettled                       = false;
            if (!isLineSettled)
            {
                if (paymentAmountCur == 0 && conPosition <= conLen(paymentAmountCurCon))
                {
                    conPosition ++;
                    paymentAmountCur = conPeek(paymentAmountCurCon,conPosition);
                    paymentTaxWithholdCodeType  = conPeek(taxWithholdCodeTypeCon, conPosition);
                }
                if (abs(invoiceLineRemainSettledAmountCur) > abs(paymentAmountCur))
                {
                    invoiceLineRemainSettledAmountCur += paymentAmountCur;
                    if (invoiceLineTaxWithholdCodeType != TaxWithholdCodeType_IN::None
                        && paymentTaxWithholdCodeType == invoiceLineTaxWithholdCodeType)
                    {
                        invoiceWHTSettledAmountCur += paymentAmountCur;
                    }
                    paymentAmountCur = 0;
                }
                else
                {
                    paymentAmountCur += invoiceLineRemainSettledAmountCur;
                    if (invoiceLineTaxWithholdCodeType != TaxWithholdCodeType_IN::None
                        && paymentTaxWithholdCodeType == invoiceLineTaxWithholdCodeType)
                    {
                        invoiceWHTSettledAmountCur -= invoiceLineRemainSettledAmountCur;
                    }
                    invoiceLineRemainSettledAmountCur = 0;
                    isLineSettled = true;
                }
            }
            tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur += invoiceWHTSettledAmountCur;
            tmpTransLineWithholdGrossAmountLoc.update();
            salesLineLoc = salesCalcTax.nextLine() as SalesLine;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSumOfPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Sum Of Payment.
    /// </summary>
    /// <param name="_salesTable">
    /// The salesTable information.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    Protected AmountCur getSumOfPayment(SalesTable _salesTable)
    {
        AmountCur sumOfPaymentAmountCur = 0;
        SpecTrans           specTrans;
        CustTransOpen       custTransOpen;
        CustTrans           custTransLoc;
        TaxWithholdTrans    taxWithholdTransLoc;

        // calc Sum Amount of payments - for jewelry
        while select SpecRecId, SpecTableId, RefCompany, RefTableId, RefRecId, Balance01  from specTrans
            where specTrans.SpecRecId       == _salesTable.RecId
                && specTrans.SpecTableId    == _salesTable.TableId
        {
            select firstOnly TableId, RecId, AmountCur, CashDiscDate, DueDate, RefRecId, AccountNum, TransDate from custTransOpen
                where custTransOpen.TableId     == specTrans.RefTableId
                    && custTransOpen.RecId      == specTrans.RefRecId;

            if (custTransOpen.RecId)
            {
                select firstOnly AccountNum,RecId,PaymMode from custTransLoc
                    where custTransLoc.AccountNum   == custTransOpen.AccountNum
                        && custTransLoc.RecId       == custTransOpen.RefRecId;
                if (custTransLoc.RecId)
                {
                    //check whether it has calc tcs before on payment
                    select firstOnly CustTransInvoiceId,RecId from taxWithholdTransLoc
                        where taxWithholdTransLoc.CustTransInvoiceId == custTransLoc.RecId;

                    if (!taxWithholdTransLoc.RecId)
                    {
                        //check method of payment
                        if (CustPaymModeTable::isbyCashMethodofPayment_IN(custTransLoc.PaymMode))
                        {
                            sumOfPaymentAmountCur += -custTransOpen.AmountCur;
                        }
                    }
                }
            }
        }

        return sumOfPaymentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Object _initializationClass)
    {
        salesCalcTax        = _initializationClass as SalesCalcTax_Sales;
        taxModuleType          = TaxModuleType::Sales;

        headingTableId         = salesCalcTax.tableId();
        headingRecId           = salesCalcTax.recID();

        taxDate                = salesCalcTax.invoiceDate();
        salesCalcTax.taxWithholdCalculation_IN(this);

        this.setExchRates(salesCalcTax.currencyCode(), salesCalcTax.exchRate(), salesCalcTax.exchRateSecondary(), Currency::noYes2UnknownNoYes(salesCalcTax.triangulation(salesCalcTax.invoiceDate())), taxDate);
        calcPostedUncalculatedTransMap = new Map(Types::Int64, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the grossAmount for given sales order lines for withhold tax calculation to <c>TmpTransLineWithholdGrossAmount_IN</c> table.
    /// </summary>
    protected void initGrossAmountCur()
    {
        SalesLine                   salesLineloc;
        SalesTable                  salesTableloc;
        AmountCur                   indirectTaxAmount, grossAmount, miscAmount, lineAmount, discAmount;
        TmpTaxWorkTrans             tmpTaxWorkTransLoc;
        MarkupTrans                 markupTrans;
        MarkupTable                 markupTable;
        SalesLine_IN                salesLineIN;
        TaxWithholdGroupHeading     taxWithholdGroupHeading;
        TaxWithholdGroup            taxWithholdGroup;
        CurrencyCode                currencyCodeLoc;
        ExchRate                    exchangeRate;
        // <GTE>
        TaxDocumentLineProxy        taxDocumentLine;
        ITaxableDocument            taxableDocument;
        ITaxDocument                taxDocument;
        SalesTotals                 salesTotals;
        ITaxDocumentLineEnumerator  lineEnumerator;

        Map includeTaxComponentsMap = new Map(Types::String, Types::Container);
        // </GTE>

        salesCalcTax.initCursor();

        salesLineloc = salesCalcTax.nextLine() as SalesLine;
        salesTableLoc = salesLineloc.salesTable();

        while (salesLineloc)
        {
            miscAmount = 0;
            lineAmount = -salesCalcTax.transLineAmount();

            tmpTaxWorkTransLoc = salesCalcTax.tax().tmpTaxWorkTrans();
            salesLineIN = SalesLine_IN::findBySalesLine(salesLineloc.RecId);
            taxWithholdGroup = salesLineIN.TDSGroup ? salesLineIN.TDSGroup : salesLineIN.TCSGroup;
            // Get the indirect taxes for Withhold tax baseAmount from TmpTaxWorkTrans table.
            indirectTaxAmount = TmpTaxWorkTrans::getIndirectTaxAmtForWHTSourceBaseCur_IN(tmpTaxWorkTransLoc, salesLineloc.TableId, salesLineloc.RecId, salesLineloc.TaxItemGroup,'',taxWithholdGroup);

            if (salesLineloc.SalesQty < 0)
            {
                // For creditNote taxes are negative.
                indirectTaxAmount = indirectTaxAmount * -1;
            }

            select firstonly taxWithholdGroupHeading
                where taxWithholdGroupHeading.TaxWithholdGroup == salesLineIN.TDSGroup
                    || taxWithholdGroupHeading.TaxWithholdGroup == salesLineIN.TCSGroup;

            markupTrans = salesCalcTax.nextMarkupLine();

            while(markupTrans
                && taxWithholdGroupHeading
                && taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No)
            {
                MarkupAmount markupTransLineAmount = salesCalcTax.markupAmount();
                miscAmount += markupTransLineAmount;
                markupTrans = salesCalcTax.nextMarkupLine();
            }

            currencyCodeLoc         = salesTableLoc.CurrencyCode;
            exchangeRate            = exchRate;
            lineAmount = salesCalcTax.transLineAmount();

            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                salesTotals = salesCalcTax.getSalesTotals();
                taxWithholdGroupHeading = TaxWithholdGroupHeading::find(taxWithholdGroup);
                taxableDocument = TaxableDocumentObject::construct(salesTotals.parmTaxableDocumentDescriptor());
                if (taxableDocument)
                {
                    taxDocument = TaxBusinessService::calculateTax(taxableDocument);
                    if (taxDocument)
                    {
                        lineEnumerator = taxDocument.lines();
                        while (lineEnumerator.moveNext())
                        {
                            taxDocumentLine = lineEnumerator.current();
                            if (taxDocumentLine)
                            {
                                if ((taxDocumentLine.sourceTableId() == tableNum(SalesParmLine)
                                        && SalesParmLine::findRecId(taxDocumentLine.sourceRecId()).salesLine().RecId == salesLineloc.RecId)
                                    || (taxDocumentLine.sourceTableId() == tableNum(SalesLine)
                                        && SalesLine::findRecId(taxDocumentLine.sourceRecId()).RecId == salesLineloc.RecId)
                                    || (taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No
                                        && taxDocumentLine.sourceTableId() == tableNum(MarkupTrans)
                                        && MarkupTrans::findRecId(taxDocumentLine.sourceRecId()).TransTableId == salesLineloc.TableId
                                        && MarkupTrans::findRecId(taxDocumentLine.sourceRecId()).TransRecId == salesLineloc.RecId))
                                {
                                    if (taxDocumentLine.priceInclTax() && taxDocumentLine.sourceTableId() != tableNum(MarkupTrans))
                                    {
                                        lineAmount += taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                                        lineAmount -= taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                                    }
                                    else if (taxDocumentLine.priceInclTax() && taxDocumentLine.sourceTableId() == tableNum(MarkupTrans))
                                    {
                                        miscAmount += taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                                        miscAmount -= taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                                    }

                                    indirectTaxAmount += this.getIndirectTaxAmountByLine(
                                        taxDocument,
                                        taxDocumentLine,
                                        taxWithholdGroupHeading);
                                }
                            }
                        }
                        if (TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFrameworkFieldsConstants::TaxDirection)) == TaxDirection::IncomingTax)
                        {
                            indirectTaxAmount = -indirectTaxAmount;
                        }
                    }
                }
            }
            // </GTE>

            endDiscPercent = salesCalcTax.endDisc();
            discAmount = CurrencyExchangeHelper::amount(lineAmount, salesCalcTax.currencyCode()) * endDiscPercent / 100;

            grossAmount = lineAmount - discAmount + indirectTaxAmount + miscAmount;

            tmpTransLineWithholdGrossAmount.clear();
            tmpTransLineWithholdGrossAmount.LineGrossAmountCur      = grossAmount;
            tmpTransLineWithholdGrossAmount.HeadingTableId          = salesTableloc.TableId;
            tmpTransLineWithholdGrossAmount.HeadingRecId            = salesTableloc.RecId;
            tmpTransLineWithholdGrossAmount.SourceTableId           = salesLineloc.TableId;
            tmpTransLineWithholdGrossAmount.SourceRecId             = salesLineloc.RecId;
            tmpTransLineWithholdGrossAmount.TaxWithholdGroup        = taxWithholdGroup;
            tmpTransLineWithholdGrossAmount.AccountType             = AccountType_IN::Cust;
            tmpTransLineWithholdGrossAmount.AccountNumber           = salesTableLoc.InvoiceAccount;
            tmpTransLineWithholdGrossAmount.TransDate               = taxdate;
            tmpTransLineWithholdGrossAmount.AmountOriginMST         = CurrencyExchangeHelper::amountCur2MST(grossAmount, currencyCodeLoc, exchangeRate, taxdate);
            tmpTransLineWithholdGrossAmount.insert();

            salesLineloc = salesCalcTax.nextLine() as SalesLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction line is credit note.
    /// </summary>
    /// <param name="_line">
    /// SalesLine buffer.
    /// </param>
    /// <returns>
    /// true is line is creditNote, otherwise false.
    /// </returns>
    protected boolean isCreditNote(Common _line)
    {
        boolean     ret = false;
        SalesTable  salesTableLoc;
        SalesLine   salesLineLoc;

        if (_line.TableId == tableNum(SalesLine))
        {
            salesLineLoc = _line as SalesLine;
            salesTableLoc = salesLineLoc.salesTable();

            if (salesTableLoc.SalesStatus != SalesStatus::Invoiced
                && salesLineLoc.InventTransIdReturn
                && salesLineLoc.SalesQty < 0)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTDSTCSApplicableForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether TDS/TCS will be calculated for given purchase order/Vendor invoice header.
    /// </summary>
    /// <param name="_salesTable">
    /// The SalesTable buffer.
    /// </param>
    /// <returns>
    /// Returns true if TDS/TCS will be calculated for header; otherwise false.
    /// </returns>
    private boolean isTDSTCSApplicableForHeader(SalesTable _salesTable)
    {
        SalesLine       salesLineLoc;
        SalesLine_IN    salesLine_INLoc;

        if (_salesTable.SalesId)
        {
            select firstOnly RecId from salesLine_INLoc
                where salesLine_INLoc.TDSGroup
                    || salesLine_INLoc.TCSGroup
                exists join salesLineLoc
                    where salesLineLoc.RecId == salesLine_INLoc.SalesLine
                        && salesLineLoc.SalesId == _salesTable.SalesId;
        }

        return (salesLine_INLoc.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHTParameterMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if TDS/TCS is applicable.
    /// </summary>
    /// <param name="_common">
    /// SalesLine buffer.
    /// </param>
    /// <returns>
    /// true if TDS/TCS taxes are applicable, otherwise false.
    /// </returns>
    protected boolean isWHTParameterMarked(Common _common)
    {
        SalesLine                   salesLineloc;
        SalesTable                  salesTableloc;
        TaxWithholdParameters_IN    taxWithholdParameters;
        boolean                     ret = false;
        SalesLine_IN                salesLine_IN;

        taxWithholdParameters = TaxWithholdParameters_IN::find();

        salesLineloc  = _common as SalesLine;
        salesTableloc = salesLineloc.salesTable();
        salesLine_IN  = salesLineloc.salesLine_IN();

        if (CustTable::find(salesTableloc.InvoiceAccount).TaxWithholdCalculate_IN
            && ((taxWithholdParameters.tdsActivate && taxWithholdParameters.tdsInvoice && salesLine_IN.tdsGroup)
            || (taxWithholdParameters.tcsActivate && taxWithholdParameters.tcsInvoice && salesLine_IN.tcsGroup)))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        orderBalances = new Map(typeName2Type(extendedTypeStr(recId)), Types::Real);
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets order balance information.
    /// </summary>
    /// <param name="_recId">
    /// The rec id.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public AmountCur orderBalance(recId _recId)
    {
        AmountCur   orderBalance;

        if (orderBalances.exists(_recId))
        {
            orderBalance = orderBalances.lookup(_recId);
        }

        return orderBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source rec id.
    /// </summary>
    /// <returns>
    /// The sales line rec id.
    /// </returns>
    public recId sourceRecId()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table id information.
    /// </summary>
    /// <returns>
    /// The sales line table id.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return salesLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>TaxWithholdCalcSales_IN</c> class.
    /// </summary>
    /// <param name="_salesForm">
    /// The sales form information.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxWithholdCalcSales_IN</c> class.
    /// </returns>
    public static TaxWithholdCalcSales_IN construct(SalesCalcTax_Sales   _salesForm)
    {
        TaxWithholdCalcSales_IN    taxWithholdCalcSales;

        taxWithholdCalcSales = new TaxWithholdCalcSales_IN();

        taxWithholdCalcSales.init(_salesForm);

        return taxWithholdCalcSales;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>