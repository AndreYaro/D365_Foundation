<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcItemDimData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcItemDimData</c> class represents an item with associated item dimensions and a site.
/// </summary>
class BomCalcItemDimData
{
    ItemId          itemId;
    InventDim       productInventDim;
    InventSiteId    inventSiteId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts data into a string.
    /// </summary>
    /// <returns>
    ///    A delimited string of member-variable values.
    /// </returns>
    public str key()
    {
        str key = itemId;

        InventDimensionEnumerator enum = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (enum.moveNext())
        {
            key += this.separator();
            key += productInventDim.dimValue2str(enum.currentInventDimFieldId());
        }

        key += this.separator();
        key += inventSiteId;

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductInventDim</Name>
				<Source><![CDATA[
    public InventDim parmProductInventDim(InventDim _productInventDim = productInventDim)
    {
        productInventDim = _productInventDim;

        return productInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>separator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines a separator (delimiter) that will be used when generating a key string.
    /// </summary>
    /// <returns>
    ///    A character with a separator value.
    /// </returns>
    /// <remarks>
    ///    The separator should be something that cannot be entered manually in a form.
    /// </remarks>
    [Wrappable(false), Hookable(false)]
    protected final str 1 separator()
    {
        return '\t';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMCalcItemDimData construct()
    {
        return new BOMCalcItemDimData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>BOMCalcItemDimData</c> object and initializes it based on input values.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_inventSiteId">
    ///    The site ID; optional.
    /// </param>
    /// <param name="_productInventDim">
    ///    An <c>InventDim</c> record with product dimension values.
    /// </param>
    /// <returns>
    ///    A<c> BOMCalcItemDimData</c> object.
    /// </returns>
    public static BOMCalcItemDimData newFromParameters(ItemId _itemId, InventSiteId _inventSiteId = '', InventDim productInventDim = null)
    {
        BOMCalcItemDimData bomCalcItemDimData = BOMCalcItemDimData::construct();

        bomCalcItemDimData.parmItemId(_itemId);
        bomCalcItemDimData.parmInventSiteId(_inventSiteId);
        bomCalcItemDimData.parmProductInventDim(productInventDim);

        return bomCalcItemDimData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>