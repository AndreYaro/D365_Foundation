<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdJournalCheckPostRoute_Burden</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ProdJournalCheckPostRoute_Burden</c> is responsible for posting the route card journal carrying the burden cost.
/// </summary>
class ProdJournalCheckPostRoute_Burden extends ProdJournalCheckPostRoute implements BatchRetryable
{
    ProdTable           prodTable;
    ProdJournalTable    prodJournalTableBurden;
    PmfProdCoBy         pmfProdCoBy;
    boolean             skipUpdateOfProdCalcTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProdJobType</Name>
				<Source><![CDATA[
    public ProdJobType getProdJobType(RouteJobType _routeJobType)
    {
        ProdJobType_Burden burdenJobType = super(_routeJobType) as ProdJobType_Burden;

        burdenJobType.parmProdCoBy(pmfProdCoBy);

        return burdenJobType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initProdRouteTrans</Name>
				<Source><![CDATA[
    public void initProdRouteTrans(ProdRouteTrans _prodRouteTrans, ProdJournalTable _prodJournalTableRoute, ProdJournalRoute _prodJournalRoute)
    {
        super(_prodRouteTrans, _prodJournalTableRoute, _prodJournalRoute);

        _prodRouteTrans.ServiceItemId       = pmfProdCoBy.ItemId;
        _prodRouteTrans.ServiceInventDimId  = pmfProdCoBy.InventDimId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateRealCalcProduction</Name>
				<Source><![CDATA[
    public boolean mustUpdateRealCalcProduction()
    {
        return super() && ! this.parmSkipUpdateOfProdCalcTrans();
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmProdCoBy</Name>
				<Source><![CDATA[
    public PmfProdCoBy parmProdCoBy(PmfProdCoBy _pmfProdCoBy = pmfProdCoBy)
    {
        pmfProdCoBy = _pmfProdCoBy;
        return pmfProdCoBy;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmSkipUpdateOfProdCalcTrans</Name>
				<Source><![CDATA[
    public boolean parmSkipUpdateOfProdCalcTrans(boolean _skipUpdateOfProdCalcTrans = skipUpdateOfProdCalcTrans)
    {
        skipUpdateOfProdCalcTrans = _skipUpdateOfProdCalcTrans;
        return skipUpdateOfProdCalcTrans;
    }
]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateProdCalcTrans</Name>
				<Source><![CDATA[
    protected boolean shouldUpdateProdCalcTrans(ProdTable               _prodTable,
                                                ProdRouteTrans          _prodRouteTrans)
    {
        return super(_prodTable, _prodRouteTrans) && ! this.parmSkipUpdateOfProdCalcTrans();
    }
]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdateProdRouteScheduling</Name>
				<Source><![CDATA[
    protected boolean shouldUpdateProdRouteScheduling()
    {
        return false;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdJournalCheckPostRoute_Burden construct()
    {
        return new ProdJournalCheckPostRoute_Burden();
    }
]]></Source>
			</Method>
			<Method>
				<Name>newPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProdJournalCheckPostRoute_Burden</c> class instance.
    /// </summary>
    /// <param name="_prodJournalId">
    /// The production journal id.
    /// </param>
    /// <param name="_showInfoResult">
    /// True if infolog should be shown; false otherwise.
    /// </param>
    /// <returns>
    /// The <c>ProdJournalCheckPostRoute_Burden</c> class instance.
    /// </returns>
    public static ProdJournalCheckPostRoute_Burden newPostJournal(
        ProdJournalId   _prodJournalId,
        boolean         _showInfoResult)
    {
        ProdJournalCheckPostRoute_Burden journalCheckPost = new ProdJournalCheckPostRoute_Burden();

        journalCheckPost.initNewJournalCheckPost(_prodJournalId,
                                                 _showInfoResult);

        return journalCheckPost;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
