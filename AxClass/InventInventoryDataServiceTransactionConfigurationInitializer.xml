<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceTransactionConfigurationInitializer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Platform.Integration.Framework.Contracts;

internal final class InventInventoryDataServiceTransactionConfigurationInitializer
{
    private const str InventoryVisibilityAppAADClientID = '3022308a-b9bd-4a18-b8ac-2ddedb2075e1';
    private const UserId InventoryVisibilityAppUserId = 'InventoryServiceUser'; // max length: 20 chars
    private const SysAADClientIdName InventoryServiceApplicationName = 'Inventory Visibility App';
    private const str InventoryVisibilityAppRoleName = roleStr(InventInventoryDataServiceIntegrationRole);
    public const str XDSPolicyBypassRoleName = roleStr(XDSDataAccessPolicyBypassRole);
    private const str InventoryVisibilityAppUserObjectId = '0ab92bc8-9893-4338-b6dc-4f5cf0ecb005'; // random guid

    private const str FiledGroup = 'IVImport';
    private const str IVDatasource = '@iv';

    // Adjustment configurations
    private const DMFDefinitionGroupName AdjustmentGroupName = 'IVTransactionImport_Adjustment';
    private const IntegrationName AdjustmentIntegrationName = 'IVTransactionImport_Adjustment';
    private const DMFEntityName AdjustmentHeaderEntityName = "@SCM:InventoryServiceAdjustmentJournalHeaderEntity";
    private const DMFEntityName AdjustmentLineEntityName = "@SCM:InventoryServiceAdjustmentJournalEntryEntity";
    private const str AdjustmentIVMeasure = 'adjustment';
    private const str AdjustmentHeaderCsvFileName = 'InventoryAdjustmentJournalHeader.csv';
    private const str AdjustmentLineCsvFileName = 'InventoryServiceAdjustmentJournalEntry.csv';
    private const str AdjustmentHeaderCsv = 'JOURNALNUMBER,JOURNALNAMEID,INVENTORYSERVICEJOURNALEXPECTEDSTATUS\r\n';
    private const str AdjustmentLineCsv = 'JOURNALNUMBER,LINENUMBER,TRANSACTIONDATE,ITEMNUMBER,PRODUCTCONFIGURATIONID,PRODUCTCOLORID,PRODUCTSIZEID,PRODUCTSTYLEID,INVENTORYSITEID,INVENTORYWAREHOUSEID,WAREHOUSELOCATIONID,INVENTORYSTATUSID,LICENSEPLATENUMBER,ITEMBATCHNUMBER,ITEMSERIALNUMBER,INVENTORYQUANTITY,UNITCOST,INVENTORYSERVICEADJUSTMENTOFFSETDATASOURCE,INVENTORYSERVICEADJUSTMENTOFFSETPHYSICALMEASURE,INVENTORYSERVICETRANSACTIONID\r\n';

    private InventInventoryDataServiceTransactionParameters transactionParameter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        transactionParameter = InventInventoryDataServiceTransactionParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configure</Name>
				<Source><![CDATA[
    internal void configure()
    {
        this.configureAADClientId();

        this.configureDMFParameter();

        if (transactionParameter.AdjustmentJournalEnabled)
        {
            this.configureDMFGroup(AdjustmentGroupName, AdjustmentHeaderEntityName, AdjustmentLineEntityName, AdjustmentHeaderCsvFileName, AdjustmentLineCsvFileName, AdjustmentHeaderCsv, AdjustmentLineCsv);

            str activityId = this.configureRecurringIntegration(AdjustmentGroupName, AdjustmentIntegrationName);

            this.configureService(activityId);

            this.configureOffset(AdjustmentIVMeasure);
        }

        Info("@SCM:InventoryServiceTransactionConfigurationGenerateSuccess");
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureDMFParameter</Name>
				<Source><![CDATA[
    private void configureDMFParameter()
    {
        ttsbegin;
        DMFCompatibilityParameters parameter;
        parameter.selectForUpdate(true);
            
        select firstonly parameter
            index Key
            where parameter.Key == 0;

        if (!parameter)
        {
            Company::createParameter(parameter);
        }
        
        parameter.EnableParallelPackageImport = NoYes::Yes;
        parameter.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureAADClientId</Name>
				<Source><![CDATA[
    private void configureAADClientId()
    {
        this.ensureInventoryVisibilityAppUserExists();

        ttsbegin;
        SysAADClientTable sysAADClientTable;
 
        select firstonly RecId from sysAADClientTable
            where sysAADClientTable.AADClientId == InventoryVisibilityAppAADClientID;
        if (!sysAADClientTable.RecId)
        {
            sysAADClientTable.AADClientId = InventoryVisibilityAppAADClientID;
            sysAADClientTable.Name = InventoryServiceApplicationName;
            sysAADClientTable.UserId = InventoryVisibilityAppUserId;
            sysAADClientTable.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureInventoryVisibilityAppUserExists</Name>
				<Source><![CDATA[
    private void ensureInventoryVisibilityAppUserExists()
    {
        const boolean IsMicrosoftAccount = true;

        xUserInfo::createMintedTokenUser(
            InventoryVisibilityAppUserId,
            [InventoryVisibilityAppRoleName, XDSPolicyBypassRoleName],
            guidFromString(InventoryVisibilityAppUserObjectId),
            IsMicrosoftAccount);

        // minted token user creation skips role checks if the user already exists
        this.ensureUserHasRole(InventoryVisibilityAppUserId, InventoryVisibilityAppRoleName);
        this.ensureUserHasRole(InventoryVisibilityAppUserId, XDSPolicyBypassRoleName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureUserHasRole</Name>
				<Source><![CDATA[
    private void ensureUserHasRole(UserId _userId, str _userRole)
    {
        SecurityRole role;
        select firstonly role where role.AotName == _userRole || role.Name == _userRole;

        Debug::assert(role.RecId != 0);

        SecurityUserRole securityUserRole;
        select firstonly securityUserRole
            where securityUserRole.User == _userId
                && securityUserRole.SecurityRole == role.RecId;

        if (!securityUserRole)
        {
            securityUserRole.SecurityRole = role.RecId;
            securityUserRole.User = _userId;
            securityUserRole.AssignmentMode = RoleAssignmentMode::Manual;
            securityUserRole.AssignmentStatus = RoleAssignmentStatus::Enabled;
            securityUserRole.insert();
        }

        // Kernel automatically assigns SystemUser role to every user upon creation,
        // but we don't need it and it requires a paid license so we should remove it.
        select firstonly role where role.AotName == roleStr(SystemUser);
        SecurityUserRole userRole;
        delete_from userRole where userRole.User == _userId && userRole.SecurityRole == role.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureDMFGroup</Name>
				<Source><![CDATA[
    private void configureDMFGroup(str _groupName, str _headerEntityName, str _lineEntityName, str _headerFileName, str _lineFileName, str _headerContent, str _lineContent)
    {
        this.checkEntityExist(_headerEntityName);
        this.checkEntityExist(_lineEntityName);

        ttsbegin;
        DMFDefinitionGroup definitionGroup = DMFDefinitionGroup::find(_groupName);

        if (!definitionGroup)
        {
            this.insertDefinitionGroup(_groupName, definitionGroup);
        }

        this.configureDMFGroupEntity(_groupName, _headerEntityName, _headerFileName, _headerContent);
        this.configureDMFGroupEntity(_groupName, _lineEntityName, _lineFileName, _lineContent);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureDMFGroupEntity</Name>
				<Source><![CDATA[
    private void configureDMFGroupEntity(str _groupName, str _entityName, str _fileName, str _content)
    {
        DMFDefinitionGroupEntity definitionGroupEntity = DMFDefinitionGroupEntity::find(_groupName, _entityName);

        if (!definitionGroupEntity)
        {
            var sampleFilePath = this.uploadFileFromStr(_fileName, _content);
            if (sampleFilePath)
            {
                this.insertDefinitionGroupEntity(_groupName, _entityName, sampleFilePath);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEntityExist</Name>
				<Source><![CDATA[
    private void checkEntityExist(str _entityName)
    {
        if (!DMFEntity::find(_entityName))
        {
            throw error(strFmt("@SCM:InventoryServiceTransactionRefreshEntity", _entityName, "@DMF726"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefinitionGroup</Name>
				<Source><![CDATA[
    private void insertDefinitionGroup(str _groupName, DMFDefinitionGroup _definitionGroup)
    {
        _definitionGroup.initValue();
        _definitionGroup.DefinitionGroupName = _groupName;
        _definitionGroup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFileFromStr</Name>
				<Source><![CDATA[
    private str uploadFileFromStr(str _fileName, str _content)
    {
        using (System.IO.MemoryStream stream = new System.IO.MemoryStream())
        {
            using (System.IO.StreamWriter writer = new System.IO.StreamWriter(stream))
            {
                writer.Write(_content);
                writer.Flush();
                stream.Position = 0;
                FileUploadTemporaryStorageStrategy paymentFileTemporaryStorageStrategy = new FileUploadTemporaryStorageStrategy();
                FileUploadTemporaryStorageResult result = paymentFileTemporaryStorageStrategy.uploadFile(stream, _fileName);

                return result.getFileId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFileFromResources</Name>
				<Source><![CDATA[
    private str uploadFileFromResources(str _resource)
    {
        ResourceNode resourceNode = SysResource::getResourceNode(_resource);
        
        if (resourceNode)
        {
            XmlDocument xmlFile = this.updateProjectNameElementInXmlFile(resourceNode);

            using (System.IO.MemoryStream stream = new System.IO.MemoryStream())
            {
                using (System.IO.StreamWriter writer = new System.IO.StreamWriter(stream))
                {
                    writer.Write(xmlFile);
                    writer.Flush();
                    stream.Position = 0;
                    FileUploadTemporaryStorageStrategy paymentFileTemporaryStorageStrategy = new FileUploadTemporaryStorageStrategy();
                    FileUploadTemporaryStorageResult result = paymentFileTemporaryStorageStrategy.uploadFile(stream, resourceNode.filename());

                    return result.getFileId();
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectNameElementInXmlFile</Name>
				<Source><![CDATA[
    private XmlDocument updateProjectNameElementInXmlFile(ResourceNode _resourceNode)
    {
        str loadXml;
        [loadXml] = SysResource::getResourceNodeData(_resourceNode);

        XmlDocument xmlFile = XmlDocument::newXml(loadXml, true);
     
        return xmlFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefinitionGroupEntity</Name>
				<Source><![CDATA[
    private void insertDefinitionGroupEntity(str _groupName, str _entityName, str _sampleFilePath)
    {
        #DMF
        DMFDefinitionGroupEntity definitionGroupEntity;

        // Create data project entity
        definitionGroupEntity.initValue();
        definitionGroupEntity.DefinitionGroup       = _groupName;
        definitionGroupEntity.Entity                = _entityName;
        definitionGroupEntity.Source                = 'CSV';
        definitionGroupEntity.SampleFilePath        = _sampleFilePath;
        definitionGroupEntity.SampleFilePathOriginal = _sampleFilePath;
        definitionGroupEntity.SkipStaging           = true;
        definitionGroupEntity.QueryData             = DMFUtil::getDefaultQueryForEntityV3(_entityName, _groupName);
        
        definitionGroupEntity.insert(true);

        // Generate FieldAccess mapping. if no field group is specified - map all fields.
        DMFXmlGeneration::generateMappingV2(definitionGroupEntity, FiledGroup);
        definitionGroupEntity.updateMappingStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureRecurringIntegration</Name>
				<Source><![CDATA[
    private str configureRecurringIntegration(str _groupName, str _integrationName)
    {
        IntegrationActivityTable activityTable;
        select RecId, ActivityId from activityTable where activityTable.Name == _integrationName;
        if (!activityTable)
        {
            IntegrationClientMapTable activityClientMapTable;

            SysRecurrenceData recurrenceData = SysRecurrence::defaultRecurrence();
            recurrenceData = SysRecurrence::setRecurrenceUnit(recurrenceData, SysRecurrenceUnit::Minute, 1);
            recurrenceData = SysRecurrence::setRecurrenceNoEnd(recurrenceData);

            ttsbegin;

            activityTable.initValue();

            activityTable.Direction = IntegrationDirection::Inbound;
            activityTable.DataSource = IntegrationActivityDataSource::DataPackage;
            activityTable.PreventUpload = NoYes::No;
            activityTable.DefinitionGroupName = _groupName;
            activityTable.Name = _integrationName;
            activityTable.SysRecurrenceData = recurrenceData;
            activityTable.State = IntegrationActivityState::Active;

            activityTable.insert();

            activityClientMapTable.initValue();
            activityClientMapTable.ClientId = InventoryVisibilityAppAADClientID;
            activityClientMapTable.IsEnabled = true;
            activityClientMapTable.ActivityTable = activityTable.RecId;
            activityClientMapTable.insert();

            ttscommit;

            SysIntegrationSchedulerService schedulerService = new SysIntegrationSchedulerService();
            Activity activity = IntegrationPacker::PackActivity(activityTable);
            schedulerService.Start(activity);
        }

        return guid2Str(activityTable.ActivityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureService</Name>
				<Source><![CDATA[
    private void configureService(str activityId)
    {
        var inventoryServiceClient = new InventoryServiceClient();
        inventoryServiceClient.initializeTransactionConfiguration(activityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureOffset</Name>
				<Source><![CDATA[
    private void configureOffset(str _measure)
    {
        InventInventoryDataServiceAdjustmentOffsetMappingV2 offsetMap;

        ttsbegin;
        offsetMap.InventTransType = InventTransType::InventLossProfit;
        offsetMap.InventoryServiceAdjustmentOffsetJournalEvent = InventoryServiceAdjustmentOffsetJournalEvent::Post;
        offsetMap.Datasource = IVDatasource;
        offsetMap.PhysicalMeasure = _measure;
        offsetMap.initializeFlag();
        offsetMap.upsert();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>