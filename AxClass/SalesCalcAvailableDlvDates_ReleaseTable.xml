<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCalcAvailableDlvDates_ReleaseTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesCalcAvailableDlvDates_ReleaseTable extends SalesCalcAvailableDlvDates
{
    SalesCreateReleaseOrderTableTmp   releaseOrderTable;
    SalesCreateReleaseOrderTableTmp   releaseOrderTableOrig;
    SalesCreateReleaseOrderTableTmp   releaseOrderTableCaller;
    SalesTable                        salesTableBlanket;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        releaseOrderTable,
        releaseOrderTableOrig,
        releaseOrderTableCaller,
        salesTableBlanket
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to do delivery date control on the confirmed dates.
    /// </summary>
    /// <returns>
    /// true if the delivery date control on the confirmed dates has finished; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should always return false in sub-classes that are related to tables that do not
    /// contain confirmed date fields. For example, the <c>TmpSalesTable</c> and <c>TmpSalesLine</c> tables.
    /// </remarks>
    protected boolean checkConfirmedDates()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the delivery date control is active or not.
    /// </summary>
    /// <returns>
    /// true if the delivery date control is active; otherwise, false.
    /// </returns>
    protected boolean deliveryDateControlActive()
    {
        boolean ok = super();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doUpdateCaller</Name>
				<Source><![CDATA[
    protected boolean doUpdateCaller(boolean _disableDlvDateControl = false)
    {
        if (_disableDlvDateControl)
        {
            if (releaseOrderTableOrig.DeliveryDateControlType != SalesDeliveryDateControlType::None)
            {
                return true;
            }
        }
        else
        {
            if (deliveryDateControlMap.DlvMode                 != releaseOrderTableOrig.DlvMode
            ||  deliveryDateControlMap.InventSiteId            != releaseOrderTableOrig.InventSiteId
            ||  deliveryDateControlMap.InventLocationId        != releaseOrderTableOrig.InventLocationId
            ||  deliveryDateControlMap.ShippingDateRequested   != releaseOrderTableOrig.ShippingDateRequested
            ||  deliveryDateControlMap.ReceiptDateRequested    != releaseOrderTableOrig.ReceiptDateRequested)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether changes have been made to fields that influence the delivery date control.
    /// </summary>
    /// <returns>
    /// true if changes have been made to fields that influence the delivery date control; otherwise, false.
    /// </returns>
    protected boolean doValidateWrite()
    {
        if (releaseOrderTable.DlvMode                 != releaseOrderTableOrig.DlvMode
        ||  releaseOrderTable.InventLocationId        != releaseOrderTableOrig.InventLocationId
        ||  releaseOrderTable.DeliveryPostalAddress   != releaseOrderTableOrig.DeliveryPostalAddress
        ||  releaseOrderTable.DeliveryDateControlType != releaseOrderTableOrig.DeliveryDateControlType)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldId2DlvDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType fieldId2DlvDateType(FieldId _fieldId)
    {
        SalesDlvDateType    dlvDateType;

        switch (_fieldId)
        {
            case fieldNum(SalesCreateReleaseOrderTableTmp,ReceiptDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedReceipt;
                break;
            case fieldNum(SalesCreateReleaseOrderTableTmp,ShippingDateRequested) :
                dlvDateType = SalesDlvDateType::RequestedShipping;
                break;
            default :
                dlvDateType = SalesDlvDateType::None;
                break;
        }

        return dlvDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMasterDateType</Name>
				<Source><![CDATA[
    protected SalesDlvDateType initMasterDateType(SalesDlvDateType _masterDateType)
    {
        SalesDlvDateType    masterDateTypeLocal = _masterDateType;

        if (_masterDateType != SalesDlvDateType::RequestedReceipt &&
            _masterDateType != SalesDlvDateType::RequestedShipping)
        {
            if (releaseOrderTable.ReceiptDateRequested)
            {
                masterDateTypeLocal = SalesDlvDateType::RequestedReceipt;
            }
            else if (releaseOrderTable.ShippingDateRequested)
            {
                masterDateTypeLocal = SalesDlvDateType::RequestedShipping;
            }
            else
            {
                masterDateTypeLocal = SalesDlvDateType::RequestedShipping;
                releaseOrderTable.ShippingDateRequested = this.effectiveOrderDate() + this.salesLeadTime();
            }
        }
        return masterDateTypeLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEnableShowDialog</Name>
				<Source><![CDATA[
    public boolean parmEnableShowDialog(boolean _enableShowDialog = enableShowDialog)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    protected InventLocationId parmInventLocationId(InventLocationId  _inventLocationId = releaseOrderTable.InventLocationId)
    {
        deliveryDateControlMap.InventLocationId = _inventLocationId;
        releaseOrderTable.InventLocationId      = _inventLocationId;
        return releaseOrderTable.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    protected InventSiteId parmInventSiteId(InventSiteId  _inventSiteId = releaseOrderTable.InventSiteId)
    {
        deliveryDateControlMap.InventSiteId = _inventSiteId;
        releaseOrderTable.InventSiteId      = _inventSiteId;
        return releaseOrderTable.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCreateReleaseOrderTableTmp</Name>
				<Source><![CDATA[
    public SalesCreateReleaseOrderTableTmp parmSalesCreateReleaseOrderTableTmp(SalesCreateReleaseOrderTableTmp _releaseOrderTable = releaseOrderTable)
    {
        deliveryDateControlMap  = _releaseOrderTable.data();
        releaseOrderTable       = _releaseOrderTable.data();
        releaseOrderTableOrig   = _releaseOrderTable.orig();
        releaseOrderTableCaller = _releaseOrderTable;
        salesTableBlanket       = SalesTable::find(releaseOrderTable.SalesIdBlanket);

        return releaseOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the receipt calendar ID for the customer and returns it.
    /// </summary>
    /// <returns>
    /// The receipt calendar ID for the customer.
    /// </returns>
    protected CalendarId receiptCalendarId()
    {
        if (receiptCalendarId)
        {
            return receiptCalendarId;
        }

        receiptCalendarId = LogisticsLocationExt::find(releaseOrderTable.deliveryLocation()).SalesCalendarId;

        if (!receiptCalendarId && releaseOrderTable.AddressRefTableId && releaseOrderTable.AddressRefRecId )
        {
            switch (releaseOrderTable.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = LogisticsLocationExt::find(releaseOrderTable.AddressRefRecId).SalesCalendarId;
                    receiptCalendarId = (select logisticsLocationExt where logisticsLocationExt.Location == releaseOrderTable.AddressRefRecId).SalesCalendarId;
                    break;

                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == releaseOrderTable.AddressRefTableId && custTable.RecId == releaseOrderTable.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId && salesTableBlanket.AddressRefTableId && salesTableBlanket.AddressRefRecId )
        {
            switch (salesTableBlanket.AddressRefTableId)
            {
                case tableNum(LogisticsLocation) :
                    receiptCalendarId = (select logisticsLocationExt where logisticsLocationExt.Location == salesTableBlanket.AddressRefRecId).SalesCalendarId;
                    break;

                case tableNum(CustTable) :
                    receiptCalendarId = (select custTable where custTable.TableId == salesTableBlanket.AddressRefTableId && custTable.RecId == salesTableBlanket.AddressRefRecId).SalesCalendarId;
                    break;
                default :
                    break;
            }
        }

        if (!receiptCalendarId)
        {
            receiptCalendarId = CustTable::find(releaseOrderTable.CustAccount).SalesCalendarId;
        }

        return receiptCalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesLeadTimeBasedOnDeliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales lead time based on the delivery date control type and sets that the sales lead time has been found.
    /// </summary>
    protected void initializeSalesLeadTimeBasedOnDeliveryDateControlType()
    {
        switch (releaseOrderTable.DeliveryDateControlType)
        {
            case SalesDeliveryDateControlType::ATP:
            case SalesDeliveryDateControlType::ATPPlusIssueMargin:
                salesLeadTime  = 0;
                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                break;
            case SalesDeliveryDateControlType::None:
            case SalesDeliveryDateControlType::SalesLeadTime:
                // For SalesDeliveryDateControlType::None lead time should also be calculated.
                salesLeadTime  = SalesParameters::find().LeadTimeSalesDefault;
                salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                break;
        }

        salesLeadTimeFound = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of days it takes an order to retrieve from the shipping point to the receiving
    /// point for a given mode of delivery.
    /// </summary>
    /// <returns>
    /// The number of days it takes an order to retrieve from the shipping point to the receiving point for
    /// a given mode of delivery.
    /// </returns>
    public CustVendTransportDays transportDays()
    {
        LogisticsPostalAddress              logisticsPostalAddress;
        LogisticsPostalAddressRecId         deliveryPostalAddressRecId;

        if (releaseOrderTable.DeliveryPostalAddress)
        {
            deliveryPostalAddressRecId = releaseOrderTable.DeliveryPostalAddress;
        }
        else
        {
            deliveryPostalAddressRecId = salesTableBlanket.DeliveryPostalAddress;
        }

        select firstonly CountryRegionId, State, County, ZipCode from logisticsPostalAddress
            where logisticsPostalAddress.RecId == deliveryPostalAddressRecId;

        CustVendTransportDays transportDays = CustVendTransportPointLine::defaultTransportDays(dlvModeIdSelected,
                                                                                               inventLocationIdTransportShipping,
                                                                                               logisticsPostalAddress.CountryRegionId,
                                                                                               logisticsPostalAddress.State,
                                                                                               logisticsPostalAddress.County,
                                                                                               logisticsPostalAddress.ZipCode);

        return transportDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedSuper;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedSuper] = _packedClass;

                if (packedSuper)
                    return super(packedSuper);
            break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    protected void updateCaller(Common  _record,
                                boolean _disableDlvDateControl = false)
    {
        super(_record,_disableDlvDateControl);

        if (this.parmCheckOnly())
            return;

        if (_record.TableId != tableNum(SalesCreateReleaseOrderTableTmp))
            throw error("@SYS18626");

        SalesCreateReleaseOrderTableTmp releaseOrderTableCallerLocal = _record;

        if (this.parmCancelModifiedField())
        {
            if (releaseOrderTableCallerLocal.RecId)
            {
                releaseOrderTableCallerLocal.ShippingDateRequested   = releaseOrderTableOrig.ShippingDateRequested;
                releaseOrderTableCallerLocal.ReceiptDateRequested    = releaseOrderTableOrig.ReceiptDateRequested;
                releaseOrderTableCallerLocal.DeliveryDateControlType = releaseOrderTableOrig.DeliveryDateControlType;
            }
            return;
        }

        if (_disableDlvDateControl)
        {
            releaseOrderTableCallerLocal.DeliveryDateControlType = SalesDeliveryDateControlType::None;
        }
        else
        {
            releaseOrderTableCallerLocal.DlvMode               = deliveryDateControlMap.DlvMode;
            releaseOrderTableCallerLocal.InventLocationId      = deliveryDateControlMap.InventLocationId;
            releaseOrderTableCallerLocal.InventSiteId          = deliveryDateControlMap.InventSiteId;
            releaseOrderTableCallerLocal.ShippingDateRequested = deliveryDateControlMap.ShippingDateRequested;

            if (isConfigurationkeyEnabled(configurationKeyNum(SalesDeliveryDateControl)))
            {
                releaseOrderTableCallerLocal.ReceiptDateRequested  = deliveryDateControlMap.ReceiptDateRequested;
            }
        }

        FormDataSource releaseOrderTable_ds = FormDataUtil::getFormDataSource(releaseOrderTableCallerLocal);
        if (releaseOrderTable_ds)
        {
            releaseOrderTable_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static SalesCalcAvailableDlvDates_ReleaseTable construct()
    {
        return new SalesCalcAvailableDlvDates_ReleaseTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesCreateReleaseOrderTableTmp</Name>
				<Source><![CDATA[
    public static SalesCalcAvailableDlvDates_ReleaseTable newSalesCreateReleaseOrderTableTmp(SalesCreateReleaseOrderTableTmp _releaseOrderTable,
                                                                                                    FieldId                        _fieldId = 0)
    {
        SalesCalcAvailableDlvDates_ReleaseTable salesCalc = SalesCalcAvailableDlvDates_ReleaseTable::construct();

        SalesDlvDateType masterDateType = salesCalc.fieldId2DlvDateType(_fieldId);
        salesCalc.parmSalesCreateReleaseOrderTableTmp(_releaseOrderTable);
        salesCalc.parmInventLocationIdSelected(_releaseOrderTable.InventLocationId);
        salesCalc.parmDlvModeIdSelected(_releaseOrderTable.DlvMode);
        salesCalc.parmInventSiteIdSelected(_releaseOrderTable.InventSiteId);
        salesCalc.parmInventLocationTransportShipping(_releaseOrderTable.InventLocationId);
        salesCalc.parmOrderEntryDeadlineGroupId(CustTable::find(_releaseOrderTable.CustAccount).OrderEntryDeadlineGroupId);
        salesCalc.parmRecalculateShippingDate(true);
        if (!_releaseOrderTable.RecId)
        {
            masterDateType = salesCalc.initMasterDateType(masterDateType);
        }
        salesCalc.initMaster(masterDateType);

        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>