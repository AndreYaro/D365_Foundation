<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareContract</c> class is the data contract for the <c>InventItemPriceCompare</c> SSRS report.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(InventItemPriceCompareUIBuilder), SysOperationDataContractProcessingMode::CreateSeparateUIBuilderForEachContract),
    SysOperationGroupAttribute('Parameter', ' ', '1'),
    SysOperationGroupAttribute('Compare', "@SCM:InventItemPriceComparePendingCaption", '2'),
    SysOperationGroupAttribute('CompareTo', "@SYS4009681", '3')
]
class InventItemPriceCompareContract implements SysOperationValidatable
{
    CostingVersionPriceType         comparePriceType;
    CostingVersionId                compareVersionId, compareToVersionId;
    TransDate                       compareDate, compareToDate;
    CostingVersionCompareTo         compareTo;
    InventItemPriceCompareLevel     compareLevel;
    InventItemPriceCompareInventory calculateInventory;
    SRSPrintMediumType              printMediumType;
    SRSReportFileFormat             fileFormat;
    Query                           query;
    container                       packedQuery;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        comparePriceType,
        compareVersionId,
        compareDate,
        compareTo,
        compareToVersionId,
        compareToDate,
        compareLevel,
        calculateInventory,
        printMediumType,
        fileFormat,
        packedQuery
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        if (query != null)
        {
            packedQuery = query.pack();
        }
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateInventory</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CalculateInventory'),
        SysOperationLabelAttribute(literalStr("@SYS4009692")),
        SysOperationHelpTextAttribute(literalStr("@SYS4009701")),
        SysOperationGroupMemberAttribute('Parameter'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public InventItemPriceCompareInventory parmCalculateInventory(InventItemPriceCompareInventory _calculateInventory = calculateInventory)
    {
        calculateInventory = _calculateInventory;

        return calculateInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CompareDate'),
        SysOperationLabelAttribute(literalStr("@SYS7402")),
        SysOperationHelpTextAttribute(literalStr("@SYS112140")),
        SysOperationGroupMemberAttribute('Compare'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public TransDate parmCompareDate(TransDate _compareDate = compareDate)
    {
        compareDate = _compareDate;

        return compareDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareLevel</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CompareLevel'),
        SysOperationLabelAttribute(literalStr("@SYS4009702")),
        SysOperationHelpTextAttribute(literalStr("@SYS4009703")),
        SysOperationGroupMemberAttribute('Compare'),
        SysOperationDisplayOrderAttribute('4')
    ]
    public InventItemPriceCompareLevel parmCompareLevel(InventItemPriceCompareLevel _compareLevel = compareLevel)
    {
        compareLevel = _compareLevel;

        return compareLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComparePriceType</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('ComparePriceType'),
        SysOperationLabelAttribute(literalStr("@SYS103620")),
        SysOperationHelpTextAttribute(literalStr("@SYS103621")),
        SysOperationGroupMemberAttribute('Compare'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public CostingVersionPriceType parmComparePriceType(CostingVersionPriceType _comparePriceType = comparePriceType)
    {
        comparePriceType = _comparePriceType;

        return comparePriceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareTo</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CompareTo'),
        SysOperationLabelAttribute(literalStr("@SYS4009704")),
        SysOperationHelpTextAttribute(literalStr("@SYS4009705")),
        SysOperationGroupMemberAttribute('CompareTo'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public CostingVersionCompareTo parmCompareTo(CostingVersionCompareTo _compareTo = compareTo)
    {
        compareTo = _compareTo;

        return compareTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareToDate</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CompareToDate'),
        SysOperationLabelAttribute(literalStr("@SYS7402")),
        SysOperationHelpTextAttribute(literalStr("@SYS112140")),
        SysOperationGroupMemberAttribute('CompareTo'),
        SysOperationDisplayOrderAttribute('3')
    ]
    public TransDate parmCompareToDate(TransDate _compareToDate = compareToDate)
    {
        compareToDate = _compareToDate;

        return compareToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareToVersionId</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CompareToVersionId'),
        SysOperationLabelAttribute(literalStr("@SYS41323")),
        SysOperationHelpTextAttribute(literalStr("@SYS103416")),
        SysOperationGroupMemberAttribute('CompareTo'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public CostingVersionId parmCompareToVersionId(CostingVersionId _compareToVersionId = compareToVersionId)
    {
        compareToVersionId = _compareToVersionId;

        return compareToVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareVersionId</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('CompareVersionId'),
        SysOperationLabelAttribute(literalStr("@SYS41323")),
        SysOperationHelpTextAttribute(literalStr("@SYS103416")),
        SysOperationGroupMemberAttribute('Compare'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public CostingVersionId parmCompareVersionId(CostingVersionId _compareVersionId = compareVersionId)
    {
        compareVersionId = _compareVersionId;

        return compareVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayCostGroupId</Name>
				<Source><![CDATA[
        [
    DataMemberAttribute('DisplayCostGroupId')
    ]
    public boolean parmDisplayCostGroupId(boolean _dummy = false)
    {
        return compareLevel == InventItemPriceCompareLevel::CostGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayCostGroupType</Name>
				<Source><![CDATA[
        [
    DataMemberAttribute('DisplayCostGroupType')
    ]
    public boolean parmDisplayCostGroupType(boolean _dummy = false)
    {
        return compareLevel == InventItemPriceCompareLevel::CostGroupType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayInExcel</Name>
				<Source><![CDATA[
        [
    DataMemberAttribute('DisplayInExcel')
    ]
    public boolean parmDisplayInExcel(boolean _dummy = false)
    {
        return (printMediumType == SRSPrintMediumType::File || printMediumType == SRSPrintMediumType::Email) && fileFormat == SRSReportFileFormat::Excel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayInventoryFields</Name>
				<Source><![CDATA[
        [
    DataMemberAttribute('DisplayInventoryFields')
    ]
    public boolean parmDisplayInventoryFields(boolean _dummy = false)
    {
        return calculateInventory == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayPriceFields</Name>
				<Source><![CDATA[
        [
    DataMemberAttribute('DisplayPriceFields')
    ]
    public boolean parmDisplayPriceFields(boolean _dummy = false)
    {
        return calculateInventory == NoYes::No || this.parmDisplayInExcel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileFormat</Name>
				<Source><![CDATA[
        public SRSReportFileFormat parmFileFormat(SRSReportFileFormat _fileFormat = fileFormat)
    {
        fileFormat = _fileFormat;

        return fileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMediumType</Name>
				<Source><![CDATA[
        public SRSPrintMediumType parmPrintMediumType(SRSPrintMediumType _printMediumType = printMediumType)
    {
        printMediumType = _printMediumType;

        return printMediumType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
        public Query parmQuery(Query _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #currentList] = _packedClass;
                if (packedQuery)
                {
                    query = new Query(packedQuery);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean valid = true;

        valid = this.validateCompareVersionId() &&
                this.validateCompareDate() &&
                this.validateCompareToVersionId() &&
                this.validateCompareToDate();

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare date is specified.
    /// </summary>
    /// <returns>
    /// true if compare date is specified; otherwise, false.
    /// </returns>
    protected boolean validateCompareDate()
    {
        boolean valid = true;

        if (!compareDate)
        {
            valid = checkFailed("@SYS4009706");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare to date is specified.
    /// </summary>
    /// <returns>
    /// true if compare to date is specified; otherwise, false.
    /// </returns>
    protected boolean validateCompareToDate()
    {
        boolean valid = true;

        if (!compareToDate)
        {
            valid = checkFailed("@SYS4009671");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareToVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare to version is specified.
    /// </summary>
    /// <returns>
    /// true if compare to version is specified; otherwise, false.
    /// </returns>
    protected boolean validateCompareToVersionId()
    {
        boolean valid = true;

        if (compareTo == CostingVersionCompareTo::Simulated &&
            !compareToVersionId)
        {
            valid = checkFailed("@SYS4009672");
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompareVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if compare version is specified.
    /// </summary>
    /// <returns>
    /// true if compare version is specified; otherwise, false.
    /// </returns>
    protected boolean validateCompareVersionId()
    {
        boolean valid = true;

        if (!compareVersionId)
        {
            valid = checkFailed("@SYS4009673");
        }

        return valid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>