<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditLogTypeConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionAuditLogTypeConverter</c> class converts AX primitive types to culture invariant strings.
/// </summary>
[Wrappable(false)]
internal static class RetailTransactionAuditLogTypeConverter
{
    internal const str ContainerPlaceHolderStringValue = 'CONTAINER';
    internal const str UnknownTypePlaceHolderStringValue = 'UNKNOWN-TYPE';

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>_obj</c> to a culture invariant string.
    /// </summary>
    /// <param name = "_tableId">The ID of the Table that owns the field.</param>
    /// <param name = "_fieldId">The ID of the field.</param>
    /// <param name = "_obj">The object to be converted.</param>
    /// <returns>A culture invariant string representation of <c>_obj</c>.</returns>
    [Hookable(false)]
    public static str convertToString(TableId _tableId, FieldId _fieldId, anytype _obj)
    {
        switch (typeOf(_obj))
        {
            case Types::Enum:
                return RetailTransactionAuditLogTypeConverter::convertEnumToString(_tableId, _fieldId, _obj);

            case Types::String:
                return _obj;

            case Types::Int64:
            case Types::Integer:
            case Types::Real:
            case Types::Time:
            case Types::Guid:
                return System.String::Format(System.Globalization.CultureInfo::InvariantCulture, '{0}', _obj);

            case Types::Date:
                System.DateTime dateObj = _obj;
                return dateObj.ToString('yyyy-MM-dd', System.Globalization.CultureInfo::InvariantCulture);

            case Types::UtcDateTime:
                System.DateTime dateTimeObj = _obj;
                return dateTimeObj.ToString('u', System.Globalization.CultureInfo::InvariantCulture);

            case Types::Container:
                return ContainerPlaceHolderStringValue;
        }

        eventSource.EventWriteStatementsAuditLogUnsupportedTypeConversion(strFmt('%1', typeOf(_obj)));

        return UnknownTypePlaceHolderStringValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueToLocalizedString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>_str</c> to formatted and localized string representation depending on the type of <c>_dictField</c>.
    /// </summary>
    /// <param name = "_dictField">The field that holds the data being formatted.</param>
    /// <param name = "_str">The data to be formatted.</param>
    /// <returns>A formatted and localized string representing the <c>_str</c>.</returns>
    [Hookable(false)]
    public static str valueToLocalizedString(SysDictField _dictField, str _str)
    {
        if (_dictField == null)
        {
            // If tableId/fieldId is invalid, _dictField will be null, skip the localization.
            return _str;
        }
        
        anytype obj;

        switch (_dictField.baseType())
        {
            case Types::Enum:
                obj = RetailTransactionAuditLogTypeConverter::convertStringToEnum(_dictField, _str);
                break;

            case Types::String:
                obj = _str;
                break;

            case Types::Int64:
                obj = str2Int64(_str);
                break;

            case Types::Integer:
                obj = str2Int(_str);
                break;

            case Types::Real:
                obj = str2Num(_str);
                break;

            case Types::Time:
                obj = str2Time(_str);
                break;

            case Types::Guid:
                obj = str2Guid(_str);
                break;

            case Types::Date:
                System.DateTime dateFromDb = System.DateTime::Parse(_str, System.Globalization.CultureInfo::InvariantCulture, System.Globalization.DateTimeStyles::AssumeLocal);
                obj = mkDate(dateFromDb.Day, dateFromDb.Month, dateFromDb.Year);
                break;

            case Types::UtcDateTime:
                System.DateTime dotNetDateTimeFromDb = System.DateTime::Parse(_str, System.Globalization.CultureInfo::InvariantCulture, System.Globalization.DateTimeStyles::AdjustToUniversal);
                utcdatetime axDateTimeWithTimezone = DateTimeUtil::applyTimeZoneOffset(dotNetDateTimeFromDb, DateTimeUtil::getUserPreferredTimeZone());
                obj = axDateTimeWithTimezone;
                break;

            case Types::Container:
                obj = ContainerPlaceHolderStringValue;
        }

        return strFmt('%1', obj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertEnumToString</Name>
				<Source><![CDATA[
    private static str convertEnumToString(TableId _tableId, FieldId _fieldId, anytype _obj)
    {
        SysDictField dictField = new SysDictField(_tableId, _fieldId);

        EnumId enumId = dictField.enumId();

        return enum2Symbol(enumId, _obj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertStringToEnum</Name>
				<Source><![CDATA[
    private static anytype convertStringToEnum(SysDictField _dictField, str _enumValue)
    {
        EnumId enumId = _dictField.enumId();
        int enumValue = symbol2Enum(enumId, _enumValue);

        SysDictEnum dictEnum = new SysDictEnum(enumId);
        
        return dictEnum.value2Label(enumValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>