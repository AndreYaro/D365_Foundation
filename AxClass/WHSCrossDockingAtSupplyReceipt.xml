<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockingAtSupplyReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains the logic for cross docking at supply receipt.
/// </summary>
public final class WHSCrossDockingAtSupplyReceipt extends WHSCrossDocking
{
    private Common              commonSupply;
    private InventQty           supplyQty;
    private WHSLicensePlateId   licensePlateId;
    private InventTransId       supplyInventTransId;
    private WHSWorkBuildId      crossDockWorkBuildId;
    private WMSLocationId       startLocationId;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute cross docking at supply receipt.
    /// </summary>
    /// <returns>
    /// true if cross docking completes; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal final boolean execute()
    {
        using (var activityContext = this.instrumentationLogger().plannedCrossDocking().crossDock())
        {
            boolean foundTemplate;
            boolean ret = true;
            int     templateCount;

            ttsbegin;
    
            WHSCrossDockTemplate crossDockTemplate;

            while select crossDockTemplate 
                order by SequenceNumber
                where crossDockTemplate.DemandReleasePolicy == WHSCrossDockDemandReleasePolicy::AtSupplyReceipt
                &&    ((crossDockTemplate.WarehouseGroupAll == whsWarehouseGroupAll::Warehouse && crossDockTemplate.InventLocationId == inventDim.InventLocationId)
                    || crossDockTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Group
                    || crossDockTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::All)
            {
                if (crossDockTemplate.WarehouseGroupAll == WhsWarehouseGroupAll::Group
                        && !WhsWarehouseGroup::containsWarehouse(crossDockTemplate.WarehouseGroupId, inventDim.InventLocationId))
                {
                    continue;
                }
                templateCount++;

                this.instrumentationLogger().logRecordInformation(crossDockTemplate);

                if (this.shouldReleaseCrossDockedDemandFromMarking(crossDockTemplate) && this.checkTemplateFilter(crossDockTemplate.PackedQueryRun))
                {
                    foundTemplate = true;

                    ret = this.releaseCrossDockedDemandFromMarking(crossDockTemplate);
                    break;
                }

            }
    
            ttscommit;

            this.instrumentationLogger().plannedCrossDocking().crossDocked(activityContext, ret, foundTemplate, templateCount);
    
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReleaseCrossDockedDemandFromMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether marked demand should be released to the warehouse.
    /// </summary>
    /// <param name = "_crossDockTemplate">The template used for cross docking.</param>
    /// <returns>true if marked demand should be released to the warehouse; otherwise, false.</returns>
    protected boolean shouldReleaseCrossDockedDemandFromMarking(WHSCrossDockTemplate _crossDockTemplate)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>crossDock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes cross docking at supply receipt .
    /// </summary>
    /// <param name="_common">
    /// The supply source.
    /// </param>
    /// <param name="_inventQty">
    /// The inventory quantity from the supply source.
    /// </param>
    /// <param name="_licensePlateId">
    /// The inbound license plate needing to be cross docked.
    /// </param>
    /// <param name="_tmpWorkLine">
    /// The temporary work line to be used when creating cross dock work.
    /// </param>
    /// <returns>
    /// True if cross docking executes correctly; otherwise false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Invalid record.
    /// </exception>
    [Hookable(false)]
    internal static boolean crossDock(
        Common              _common,
        InventQty           _inventQty,
        WHSLicensePlateId   _licensePlateId,
        WHSTmpWorkLine      _tmpWorkLine)
    {
        boolean         ret;
    
        switch (_common.TableId)
        {
            case tableNum(ProdTable):
                ret = WHSCrossDockingAtSupplyReceipt::newFromParameters(_common, _inventQty, _licensePlateId, _tmpWorkLine).execute();
                break;
    
            default:
                throw error("@WAX:CrossDockErrorInvalidRecord");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize a new <c>WHSCrossDockingAtSupplyReceipt</c> class.
    /// </summary>
    /// <param name = "_common">The record to use during initialization.</param>
    /// <param name = "_supplyQty">The work create ID.</param>
    /// <param name = "_licensePlateId">The license plate ID.</param>
    /// <param name = "_tmpWorkLine">The temporary work line to be used when creating cross dock work.</param>
    /// <returns>
    /// An instance of the <c>WHSCrossDockingAtSupplyReceipt</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSCrossDockingAtSupplyReceipt newFromParameters(
        Common              _common,
        InventQty           _supplyQty,
        WHSLicensePlateId   _licensePlateId,
        WHSTmpWorkLine      _tmpWorkLine)
    {
        var atSupplyReceipt = new WHSCrossDockingAtSupplyReceipt(_common);

        atSupplyReceipt.parmCommonSupply(_common);
        atSupplyReceipt.parmSupplyQty(_supplyQty);
        atSupplyReceipt.parmLicensePlateId(_licensePlateId);
        atSupplyReceipt.parmCrossDockWorkBuildId(_tmpWorkLine.WorkCreateId);
        atSupplyReceipt.parmStartLocationId(_tmpWorkLine.StartLocationId);

        atSupplyReceipt.setGlobals();
    
        return atSupplyReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGlobals</Name>
				<Source><![CDATA[
    private void setGlobals()
    {
        itemId = this.resolveItemId(commonSupply);
        inventDim = this.resolveInventDim(commonSupply);
        supplyInventTransId = this.resolveInventTransId(commonSupply);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonSupply</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common parmCommonSupply(Common _commonSupply = commonSupply)
    {
        commonSupply = _commonSupply;
        return commonSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCrossDockWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkBuildId parmCrossDockWorkBuildId(WHSWorkBuildId _crossDockWorkBuildId = crossDockWorkBuildId)
    {
        crossDockWorkBuildId = _crossDockWorkBuildId;
        return crossDockWorkBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = licensePlateId)
    {
        licensePlateId = _licensePlateId;
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupplyQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQty parmSupplyQty(InventQty _supplyQty = supplyQty)
    {
        supplyQty = _supplyQty;
        return supplyQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WMSLocationId parmStartLocationId(WMSLocationId _startLocationId = startLocationId)
    {
        startLocationId = _startLocationId;
        return startLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSupplyInventTransId</Name>
				<Source><![CDATA[
    protected final InventTransId parmSupplyInventTransId()
    {
        return supplyInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMarkingExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates marking exists for inbound license plate.
    /// </summary>
    /// <param name="_inventTransId">
    /// The Id of the transaction.
    /// </param>
    /// <param name="_licensePlateId">
    /// The inbound license plate being evaluated.
    /// </param>
    /// <returns>
    /// True if marking exists; otherwise false.
    /// </returns>
    [Hookable(false)]
    internal static boolean validateMarkingExists(
        InventTransId       _inventTransId,
        WHSLicensePlateId   _licensePlateId)
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;
    
        select firstOnly RecId from inventTrans
            where inventTrans.MarkingRefInventTransOrigin != 0
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                    &&    inventTransOrigin.InventTransId == _inventTransId
                exists join inventDim
                    where inventDim.inventDimId == inventTrans.inventDimId
                    &&    inventDim.LicensePlateId == _licensePlateId;
    
        return inventTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseCrossDockedDemandFromMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the marked demand to the warehouse, creating cross dock work.
    /// </summary>
    /// <param name="_crossDockTemplate">
    /// The template used to validate.
    /// </param>
    /// <returns>
    /// True if inventory is released; otherwise false.
    /// </returns>
    private boolean releaseCrossDockedDemandFromMarking(WHSCrossDockTemplate _crossDockTemplate)
    {
        WHSTmpReleaseToWarehouse    tmpReleaseToWarehouse;
        WHSReleaseToWarehouseId     releaseToWarehouseId = WHSTmpReleaseToWarehouse::getNextReleaseToWarehouseId();

        boolean executeRelease = this.planCrossDockedDemandFromMarking(tmpReleaseToWarehouse, releaseToWarehouseId);
    
        // Release demand to warehouse
        if (executeRelease)
        {
            this.releaseCrossDockedDemandWork(tmpReleaseToWarehouse, releaseToWarehouseId, _crossDockTemplate);
        }
    
        return executeRelease;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planCrossDockedDemandFromMarking</Name>
				<Source><![CDATA[
    private boolean planCrossDockedDemandFromMarking(
        WHSTmpReleaseToWarehouse    _tmpReleaseToWarehouse,
        WHSReleaseToWarehouseId     _releaseToWarehouseId)
    {
        using (var activityContext = this.instrumentationLogger().plannedCrossDocking().planCrossDockingFromMarking())
        {
            InventQty                   runningQty = supplyQty;
            boolean                     ret;

            int     markingCount;
            int     plannedCount;
            int     failedCount;
    
            InventTrans         supplyInventTrans;
            InventDim           supplyInventDimLP;
            InventTransOrigin   supplyInventTransOrigin;
    
            // Iterate over marked inventory transactions
            while select supplyInventTrans
                where supplyInventTrans.MarkingRefInventTransOrigin != 0
                exists join supplyInventTransOrigin
                    where supplyInventTransOrigin.RecId         == supplyInventTrans.InventTransOrigin
                    &&    supplyInventTransOrigin.InventTransId == supplyInventTransId
                    exists join supplyInventDimLP
                        where supplyInventDimLP.inventDimId       == supplyInventTrans.inventDimId
                        &&    supplyInventDimLP.LicensePlateId    == licensePlateId
            {
                markingCount++;

                InventTransOrigin demandInventTransOrigin = InventTransOrigin::find(supplyInventTrans.MarkingRefInventTransOrigin);
    
                this.instrumentationLogger().logRecordInformation(demandInventTransOrigin);

                InventDim supplyInventDim = supplyInventTrans.inventDim();
                supplyInventDim.clearLocationAndBelowDim(supplyInventTrans.ItemId);
                supplyInventDim = InventDim::findOrCreate(supplyInventDim);
    
                InventQty releaseQty;

                // Create warehouse release records based on the demand source
                switch (demandInventTransOrigin.ReferenceCategory)
                {
                    case InventTransType::Sales:
                        SalesLine       salesLine;
                        WHSSalesLine    whsSalesLine;

                        select firstOnly InventTransId, QtyOrdered from salesLine
                            where salesLine.InventTransId == demandInventTransOrigin.InventTransId
                            join ReleasedQty from whsSalesLine
                                where whsSalesLine.InventTransId == salesLine.InventTransId;
    
                        releaseQty = min(runningQty, salesLine.QtyOrdered - whsSalesLine.ReleasedQty, supplyInventTrans.Qty);
    
                        if (releaseQty)
                        {
                            WHSTmpReleaseToWarehouse::createLineFromInventTransIdInventDimId(_tmpReleaseToWarehouse,
                                                                                             _releaseToWarehouseId,
                                                                                             salesLine.InventTransId,
                                                                                             supplyInventDim.inventDimId,
                                                                                             WHSModule::Sales,
                                                                                             releaseQty);
    
                            ret = true;
                            plannedCount++;
                        }
                        break;
    
                    case InventTransType::TransferOrderShip:
                        InventTransferLine      transferLine;
                        WHSInventTransferLine   whsTransferLine;

                        select firstOnly InventTransId, QtyTransfer from transferLine
                            where transferLine.InventTransId == demandInventTransOrigin.InventTransId
                            join ReleasedQty from whsTransferLine
                                where whsTransferLine.InventTransferLine == transferLine.RecId;
    
                        releaseQty = min(runningQty, transferLine.QtyTransfer - whsTransferLine.ReleasedQty, supplyInventTrans.Qty);

                        if (releaseQty)
                        {
                            WHSTmpReleaseToWarehouse::createLineFromInventTransIdInventDimId(_tmpReleaseToWarehouse,
                                                                                             _releaseToWarehouseId,
                                                                                             transferLine.InventTransId,
                                                                                             supplyInventDim.InventDimId,
                                                                                             WHSModule::Transfer,
                                                                                             releaseQty);
    
                            ret = true;
                            plannedCount++;
                        }
                        break;

                    default:
                        failedCount++;
                        break;
                }
    
                runningQty -= releaseQty;
    
                // Break from loop if all inbound supply quantity promised to release
                if (runningQty <= 0)
                {
                    break;
                }
            }

            this.instrumentationLogger().plannedCrossDocking().plannedCrossDockingFromMarking(activityContext, markingCount, plannedCount, failedCount);

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseCrossDockedDemandWork</Name>
				<Source><![CDATA[
    private void releaseCrossDockedDemandWork(
        WHSTmpReleaseToWarehouse    _tmpReleaseToWarehouse, 
        WHSReleaseToWarehouseId     _releaseToWarehouseId, 
        WHSCrossDockTemplate        _crossDockTemplate)
    {
        using (WHSCrossDockingStartLocationContex context = WHSCrossDockingStartLocationContex::newFromStartLocationId(this.parmStartLocationId()))
        {
            WHSWarehouseRelease::releaseToWarehouseFromCrossDockAtSupplyReceipt(_tmpReleaseToWarehouse,
                                                                                _releaseToWarehouseId,
                                                                                false,
                                                                                false,
                                                                                false,
                                                                                this.parmCrossDockWorkBuildId(),
                                                                                this.parmLicensePlateId(),
                                                                                _crossDockTemplate.CrossDockTemplateId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>