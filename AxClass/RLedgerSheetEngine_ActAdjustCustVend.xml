<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetEngine_ActAdjustCustVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rLedgerSheetEngine_ActAdjustCustVend  extends RLedgerSheetClient
{
    CustVendTable           custVendTable;

    NoYes                   byAgreement;
    NoYes                   deleteZeroInvoiceBalance;

    NoYes                   showCovenanteePart;

    DialogField             dfByAgreement;
    DialogField             dfShowDocument;
    DialogField             dfDeleteZeroInvoiceBalance;
    DialogField             dfShowCovenanteePart;

    Array                   arrKernel;

    protected const int rLedgerSheetEngine_ActAdjustCustVendCurrentVersion = 1;
    protected const int overlayPictureSet = 1;
    protected const int firstArrOrderKernelIdx = 1;
    protected const int widthColumnNumber = 60;
    protected const int widthColumnData = 80;
    protected const int widthColumnDocument = 320;
    protected const int reportFooterTotalSumPicture = 1;
    protected const int reportFooterTitlePicture = 7;
    protected const str currencyTypeConst = "CurrencyType";
    protected const str currencyTypeBriefConst = "CurrencyTypeBrief";
    protected const str mainAccountNumConst = "MainAccountNum";
    protected const str groupContragent = "grContragent";
    protected const str custVendACConst = "CustVendAC";
    protected const str contragentConst = "Contragent";
    protected const int groupColumnsConst = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    public void contextMenu(HWND _hwnd,int _idx,int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    protected OXMLExcelReport_LedgerSheet_RU createExcelReport()
    {
        OXMLExcelReport_ActAdjustCustVend_RU report = OXMLExcelReport_ActAdjustCustVend_RU::construct();

        report.setParameters(listControl, this);

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRLedgerSheetServer</Name>
				<Source><![CDATA[
    protected void createRLedgerSheetServer()
    {
        RActAdjustEngineKernelCustVend      kernel;
        CustVendTable                       relationCustVendTable, localCustVendTable;
        int                                 idx;
        ModuleCustVend                      moduleCustVend;

        void createKernel()
        {
            kernel = RActAdjustEngineKernelCustVend::construct(moduleCustVend, this, localCustVendTable);

            kernel.initParameters([fromDate, toDate, currencyTypeBrief, currencyCode, byAgreement, showDocument, deleteZeroInvoiceBalance, showCovenanteePart]);
            arrKernel.value(idx, kernel);
        }

        arrKernel          = new Array(Types::Class);

        idx                = firstArrOrderKernelIdx;
        localCustVendTable = custVendTable;
        moduleCustVend     = this.keyFirstKernelObj();
        createKernel();

        if (contragent)
        {
            relationCustVendTable = this.relationCustVendTable();

            if (relationCustVendTable)
            {
                idx                = arrKernel.lastIndex() + 1;
                localCustVendTable = relationCustVendTable;
                moduleCustVend     = this.keySecondKernelObj();
                createKernel();
            }
        }

        if (arrKernel.lastIndex() > firstArrOrderKernelIdx)
        {
            for (idx = firstArrOrderKernelIdx; idx <= arrKernel.lastIndex(); idx++)
            {
                kernel = arrKernel.value(idx);
                kernel.setShowCovenanteeName(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotalRow</Name>
				<Source><![CDATA[
    public boolean deleteTotalRow(int _column = -1)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {

        DialogRunbase dialog = super();

        dialogOperationTax.visible(false);
        dlgGroupBalance.visible(false);

        dialogDeleteZero.visible(false);
        dialogShowSumAccount.visible(false);
        dialogShowSumAccountShrinked.enabled(true);

        dlgGroupDimensionCriteria.visible(false);

        dialogPrintRanges.visible(false);

        dlgGroupSetup.columns(groupColumnsConst);

        dfShowCovenanteePart       = dialog.addFieldValue(enumStr(NoYes), showCovenanteePart, "@GLS110544", "@GLS110510");
        dfDeleteZeroInvoiceBalance = dialog.addFieldValue(enumStr(NoYes), deleteZeroInvoiceBalance, "@GLS110511", "@GLS110512");
        dfByAgreement              = dialog.addFieldValue(enumStr(NoYes), byAgreement, "@GLS106724", "@GLS110507");
        dfShowDocument             = dialog.addFieldValue(enumStr(NoYes), showDocument, "@SYS54210", "@GLS110508");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateDesign</Name>
				<Source><![CDATA[
    public void dialogUpdateDesign(Dialog _dialog)
    {

        FormDesign          formDesign;
        FormStringControl   formStringControl;
        FormControl         formControl;

        super(_dialog);

        formDesign   = dialogFormRun.design();

        formDesign.controlName(currencyTypeConst).visible(false);
        formDesign.controlName(currencyTypeBriefConst).visible(true);

        formDesign.controlName(mainAccountNumConst).visible(false);

        formDesign.controlName(groupContragent).visible(true);

        formStringControl = formDesign.controlName(custVendACConst);
        formStringControl.extendedDataType(this.edtForCustVendAC());
        formStringControl.lookupButton(FormLookupButton::Always);

        formControl       = formDesign.controlName(contragentConst);
        formControl.helpText(this.helpTextCovenantee());
    }

]]></Source>
			</Method>
			<Method>
				<Name>edtForCustVendAC</Name>
				<Source><![CDATA[
    abstract protected ExtendedTypeId edtForCustVendAC()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableShrinkAllAccounts</Name>
				<Source><![CDATA[
    public boolean enableShrinkAllAccounts()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeRLedgerSheetServer</Name>
				<Source><![CDATA[
    protected void executeRLedgerSheetServer()
    {
        RActAdjustEngineKernelCustVend   kernel;
        int                              cx;

        for (cx = firstArrOrderKernelIdx; cx <= arrKernel.lastIndex(); cx++)
        {
            kernel = arrKernel.value(cx);
            kernel.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    public void fetchNextRows()
    {
        RActAdjustEngineKernelCustVend      kernel;
        int                                 cx, idx = -1;

        Struct                              structBalanceBegPeriod, structBalanceEndPeriod, structTurnover;
        TempStr                             txtTurnover, txtBalanceEndPeriod;
        boolean                             printTotals;

        printTotals = (arrKernel.lastIndex() > firstArrOrderKernelIdx);

        txtBalanceEndPeriod = strFmt("@GLS110513", toDate);

        if (fromDate == dateNull())
            txtTurnover = strFmt("@GLS110514", toDate);
        else
            txtTurnover = strFmt("@GLS110515", fromDate, toDate);

        for (cx = firstArrOrderKernelIdx; cx <= arrKernel.lastIndex(); cx++)
        {
            kernel = arrKernel.value(cx);
            idx    = kernel.fetchNextRows(idx);

            if (printTotals)
            {
                if ((!structBalanceBegPeriod) || (!structBalanceEndPeriod) || (!structTurnover))
                {
                    structBalanceBegPeriod = kernel.structBalanceBegPeriod();
                    structBalanceEndPeriod = kernel.structBalanceEndPeriod(txtBalanceEndPeriod);
                    structTurnover         = kernel.structTurnover(txtTurnover);
                }
                else
                {
                    structBalanceBegPeriod = RHolderData_ActAdjustCustVend::addStruct(structBalanceBegPeriod, kernel.structBalanceBegPeriod());
                    structBalanceEndPeriod = RHolderData_ActAdjustCustVend::addStruct(structBalanceEndPeriod, kernel.structBalanceEndPeriod(txtBalanceEndPeriod));
                    structTurnover         = RHolderData_ActAdjustCustVend::addStruct(structTurnover, kernel.structTurnover(txtTurnover));
                }
            }
        }

        if (printTotals)
        {
            kernel = arrKernel.value(firstArrOrderKernelIdx);

            idx = kernel.insRowTotalTxt("@GLS105164", reportFooterTitlePicture, idx);

            idx = kernel.insRowTotalStruct(structBalanceBegPeriod, reportFooterTotalSumPicture, idx);
            idx = kernel.insRowTotalStruct(structTurnover, reportFooterTotalSumPicture, idx);
            idx = kernel.insRowTotalStruct(structBalanceEndPeriod, reportFooterTotalSumPicture, idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTable</Name>
				<Source><![CDATA[
    public CustVendTable getCustVendTable()
    {
        return custVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyAndAmountDictType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets currency and <c>SysDictType</c> that corresponds to current amount
    ///    based on <c>CurrencyTypeBrief_RU</c>
    /// </summary>
    /// <param name = "_currencyTypeBrief">
    ///    <c>CurrencyTypeBrief_RU</c> value based on which the values are selected.
    /// </param>
    protected void setCurrencyAndAmountDictType(CurrencyTypeBrief_RU _currencyTypeBrief)
    {
        switch (_currencyTypeBrief)
        {
            case CurrencyTypeBrief_RU::Standard:
                currencyType = CurrencyType_RU::Standard;
                amountDictType = new SysDictType(extendedTypeNum(AmountMSTLong));
                break;

            case CurrencyTypeBrief_RU::Currency:
                currencyType = CurrencyType_RU::Currency;
                amountDictType = new SysDictType(extendedTypeNum(AmountCurLong));

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean         ret = true;

        [periodCode, FromDate, ToDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria] = dialogFormRun.getControlValue();

        this.setCurrencyAndAmountDictType(currencyTypeBrief);

        showCovenanteePart       = dfShowCovenanteePart.value();
        deleteZeroInvoiceBalance = dfDeleteZeroInvoiceBalance.value();
        byAgreement              = dfByAgreement.value();
        showDocument             = dfShowDocument.value();
        showTotalsOnly = dialogShowSumAccountShrinked.value();

        custVendTable            = this.initCustVendTable(custVendAC);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemType</Name>
				<Source><![CDATA[
    public container getItemType(int _idx)
    {
        container                        con;
        RActAdjustEngineKernelCustVend   kernel;

        FormListItem                     item;
        int                              cx;
        boolean                          foundItemType = false;

        for (cx = firstArrOrderKernelIdx; cx <= arrKernel.lastIndex(); cx++)
        {
            kernel = arrKernel.value(cx);
            con    = kernel.getItemType(_idx);

            if (con != conNull())
            {
                foundItemType = true;
                break;
            }
        }

        if (!foundItemType)
        {
            item = listControl.getItem(_idx);

            if (item.data())
            {
                switch (item.image())
                {
                    case  reportFooterTotalSumPicture :
                        con = [RActAdjustCVPartitionType::Covenantee, RActAdjustCVReportLineType::ReportFooterTotals];
                        break;

                    case  reportFooterTitlePicture :
                        con = [RActAdjustCVPartitionType::Covenantee, RActAdjustCVReportLineType::ReportFooter];
                        break;

                    default :
                        throw error(Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParmContainer</Name>
				<Source><![CDATA[
    public container getParmContainer()
    {
        container con;

        con = super();
        con += [currencyTypeBrief, byAgreement, showDocument, deleteZeroInvoiceBalance, custVendAC];

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportCaption</Name>
				<Source><![CDATA[
    abstract public TempStr getReportCaption()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportTitle</Name>
				<Source><![CDATA[
    public TempStr getReportTitle()
    {
        TempStr      reportTitle;

        if ((fromDate != dateNull()) && (toDate != dateNull()))
            reportTitle = strFmt("@GLS110516", CompanyInfo::find().name(), custVendTable.name(), fromDate, toDate);
        else
            reportTitle = strFmt("@GLS110517", CompanyInfo::find().name(), custVendTable.name(), toDate);

        return reportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowCovenanteePart</Name>
				<Source><![CDATA[
    public NoYes getShowCovenanteePart()
    {
        return showCovenanteePart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpTextCovenantee</Name>
				<Source><![CDATA[
    abstract protected str helpTextCovenantee()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTable</Name>
				<Source><![CDATA[
    abstract protected CustVendTable initCustVendTable(CustVendAC  _custVendAC)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    public void initListView()
    {
        FormListColumn      listColumn;
        Imagelist           imagelist;
        int                 imageOverlay;
        int                 widthAmountField;
        const int ImageOverlayYellowLock = 790;

        void addColumn( str                 txt,
                        int                 widthColumn,
                        FormListFormat      formListFormat)
        {
            listColumn = new FormListColumn();
            listColumn.format(formListFormat);

            if (widthColumn)
            {
                listColumn.width(widthColumn);
            }

            listColumn.text(txt);

            listControl.addColumn(listControl.getColumnCount() + 1, listColumn);
        }

        addColumn("@SYS55931", widthColumnNumber, FormListFormat::Right);

        addColumn("@SYS7402", widthColumnData, FormListFormat::Center);

        addColumn("@SYS26398", widthColumnDocument, FormListFormat::Left);

        addColumn("@GLS108407", 0, FormListFormat::Right);

        addColumn("@SYS9512", 0, FormListFormat::Right);

        addColumn("@SYS7084", 0, FormListFormat::Right);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFirstKernelObj</Name>
				<Source><![CDATA[
    abstract protected ModuleCustVend keyFirstKernelObj()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>keySecondKernelObj</Name>
				<Source><![CDATA[
    abstract protected ModuleCustVend keySecondKernelObj()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalDocumentsByRow</Name>
				<Source><![CDATA[
    public void originalDocumentsByRow(int _idx)
    {
        RActAdjustEngineKernelCustVend   kernel;
        int                              cx;

        for (cx = firstArrOrderKernelIdx; cx <= arrKernel.lastIndex(); cx++)
        {
            kernel = arrKernel.value(cx);

            if (kernel.originalDocuments(_idx))
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [rLedgerSheetEngine_ActAdjustCustVendCurrentVersion, byAgreement, showDocument, deleteZeroInvoiceBalance, showCovenanteePart, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>relationCustVendTable</Name>
				<Source><![CDATA[
    abstract protected CustVendTable relationCustVendTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leaveAllAccountsOnly</Name>
				<Source><![CDATA[
    public void leaveAllAccountsOnly()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>leaveTotalAccountsOnly</Name>
				<Source><![CDATA[
    public void leaveTotalAccountsOnly()
    {
  
        if (showTotalsOnly)
        {
            RActAdjustEngineKernelCustVend   kernel;
            int                              cx;

            for (cx = firstArrOrderKernelIdx; cx <= arrKernel.lastIndex(); cx++)
            {
                kernel = arrKernel.value(cx);
                kernel.shrinkAllAccounts();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtReportFooterResume</Name>
				<Source><![CDATA[
    public Notes txtReportFooterResume()
    {
        RActAdjustEngineKernelCustVend  kernel;

        Amount                          amount;
        Amount                          turnoverDeb = 0, turnoverCred = 0, balanceDeb = 0, balanceCred = 0;
        Amount                          tmpTurnoverDeb, tmpTurnoverCred, tmpBalanceDeb, tmpBalanceCred;

        Notes                           txt;
        int                             cx;

        RNumDateInWordConverter         converter = RNumDateInWordConverter::construct();

        for (cx = firstArrOrderKernelIdx; cx <= arrKernel.lastIndex(); cx++)
        {
            kernel       = arrKernel.value(cx);

            [tmpTurnoverDeb, tmpTurnoverCred, tmpBalanceDeb, tmpBalanceCred] = kernel.balanceAndTurnoverCovenantee();

            turnoverDeb  += tmpTurnoverDeb;
            turnoverCred += tmpTurnoverCred;
            balanceDeb   += tmpBalanceDeb;
            balanceCred  += tmpBalanceCred;
        }

        amount = abs(balanceDeb - balanceCred);

        if (balanceDeb == balanceCred)
            txt = strFmt("@GLS110518", toDate, CompanyInfo::find().name(), custVendTable.name());
        else if (balanceDeb > balanceCred)
        {
            txt = strFmt("@GLS110519",
                        toDate,
                        custVendTable.name(),
                        CompanyInfo::find().name(),
                        CurrencyNameDeclension_RU::numeralsToCurrencyShort(amount, currencyCode),
                        converter.numeralsToCurrency(amount, currencyCode));
        }
        else
        {
            txt = strFmt("@GLS110519",
                        toDate,
                        CompanyInfo::find().name(),
                        custVendTable.name(),
                        CurrencyNameDeclension_RU::numeralsToCurrencyShort(amount, currencyCode),
                        converter.numeralsToCurrency(amount, currencyCode));
        }

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        container   con;

        switch (version)
        {
            case rLedgerSheetEngine_ActAdjustCustVendCurrentVersion:

                [version, byAgreement, showDocument, deleteZeroInvoiceBalance, showCovenanteePart, con] = _packedClass;

                if (con != conNull())
                    super(con);

                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(boolean _update = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!custVendAC)
            ret = checkFailed("@GLS110526");
        else if (!custVendTable)
            ret = checkFailed(strFmt("@GLS110527", custVendAC));

        if (! toDate)
            ret = checkFailed("@GLS105013");
        else if (fromDate > toDate)
            ret = checkFailed("@GLS101164");

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>