<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransNeutralTracker_Insert</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransNeutralTracker_Insert extends ReqTransNeutralTracker
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createNewBundle</Name>
				<Source><![CDATA[
    internal ReqTransNeutralBundle createNewBundle()
    {
        return new ReqTransNeutralBundle_Insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNonNeutralTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts remaining non-neutral transactions in the tracker.
    /// </summary>
    /// <param name = "_insertList">
    /// A record insert list to use for inserting <c>ReqTrans</c> records; optional.
    /// </param>
    /// <param name = "_reqPlanData">
    /// The plan data to use with the insertion of the records; optional.
    /// </param>
    internal void insertNonNeutralTransactions(RecordInsertList _insertList = null, ReqPlanData _reqPlanData = null)
    {
        MapEnumerator bundleEnumerator = reqTransNeutralBundleByBundleId.getEnumerator();

        while (bundleEnumerator.moveNext())
        {
            ReqTransNeutralBundle_Insert bundle = bundleEnumerator.currentValue();
            totalNeutralizedTransactions += bundle.insertRemainingRecords(_insertList, _reqPlanData);
        }

        this.finalizeTelemetry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTelemetryActivityName</Name>
				<Source><![CDATA[
    internal str getTelemetryActivityName()
    {
        return ReqInstrumentationActivities::NeutralTransactionTracking_Insert;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>