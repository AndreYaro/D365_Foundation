<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWBSTreeNodeOperator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjWBSTreeNodeOperator</c> class is used to encapsulate changes that are to
///    be applied to <c>ProjWBSTreeNode</c> and enumerate through its dependencies.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class ProjWBSTreeNodeOperator
{
    ProjWBSTreeNode     node;
    ProjWBSTree         tree;

    Map                 childrenToInsert;
    smmActivityNumber   newParentActivityNumber;
    ProjWBSTreeNode     childNodeToExcludeFrom;

    List                children;
    Set                 predecessors;

    ListEnumerator      childrenEnumerator;
    MapEnumerator       childrenToInsertEnumerator;
    SetEnumerator       predecessorsEnumerator;

    boolean             isInChildren;
    boolean             isInChildrenToInsert;
    boolean             enumeratePredecessors;
    boolean             firstMove;
    boolean             isInitiallySummaryNode;
    boolean             childrenToInsertContiguous;
    boolean             canBeSkipped;

    ProjWBSTreeNode     currentNode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns current dependency.
    /// </summary>
    /// <returns>
    ///     Current dependency element number.
    /// </returns>
    public ElementNumber current()
    {
        return currentNode ? currentNode.elementNumber() : "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEnumeration</Name>
				<Source><![CDATA[
    private void initEnumeration()
    {
        isInChildren                    = !children.empty();
        isInChildrenToInsert            = isInChildren ? false : !childrenToInsert.empty();
        enumeratePredecessors           = isInChildren ? false : true;

        childrenEnumerator              = children.getEnumerator();
        childrenToInsertEnumerator      = childrenToInsert.getEnumerator();
        predecessorsEnumerator          = predecessors.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInitiallySummaryNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns true if the node was a summary one at the time operator was created.
    /// </summary>
    /// <returns>
    ///     true if node was a summary one.
    /// </returns>
    /// <remarks>
    ///     When operator is created for the node, the node may or may not be summary. After the operator is applied,
    ///     the node can still remain summary after the operator is applied. Method returns true if node had been summary
    ///     at the time operator was applied.
    /// </remarks>
    public boolean isInitiallySummaryNode()
    {
        return isInitiallySummaryNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Moves iterator forward.
    /// </summary>
    /// <returns>
    ///     True if enumerator denotes a valid dependency.
    /// </returns>
    public boolean moveNext()
    {
        if (firstMove)
        {
            this.initEnumeration();
            firstMove = false;
        }

        if (isInChildren)
        {
            if (!this.nextChild())
            {
                isInChildren = false;
                isInChildrenToInsert = true;
                return this.nextChildToInsert();
            }
            return true;
        }
        else if (isInChildrenToInsert)
        {
            if (this.nextChildToInsert())
            {
                enumeratePredecessors = false;
                return true;
            }
        }

        if (enumeratePredecessors)
        {
            return this.nextPredecessor();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProjWBSTReeNodeOperator</c> instance.
    /// </summary>
    /// <param name = "_tree">
    /// The <c>ProjWbsTree</c> object to which the <c>ProjWBSTreeNode</c> node belongs.
    /// </param>
    /// <param name = "_node">
    /// The <c>ProjWbsTreeNode</c> object for which to enumerate dependencies.
    /// </param>
    /// <param name = "_newParent">
    /// Specifies the new <c>ProjWbsTreeNode</c> parent activityNumber.
    /// </param>
    /// <param name = "_childrenToInsert">
    /// A map that maps outline numbers of children after which new children are to be inserted
    /// to lists of element numbers of nodes that are to be inserted.
    /// </param>
    /// <param name = "_childToExcludeFrom">
    /// The node from which the enumerator should starting skipping nodes.
    /// </param>
    /// <param name = "_canBeSkipped">
    /// If true, while processing operators the order in which the current operator is processed
    /// will not matter.
    /// </param>
    protected void new(ProjWbsTree        _tree,
                       ProjWBSTreeNode    _node,
                       smmActivityNumber  _newParent,
                       Map                _childrenToInsert,
                       ElementNumber      _childToExcludeFrom,
                       boolean            _canBeSkipped)
    {
        node = _node;
        tree = _tree;

        childrenToInsert                = _childrenToInsert ? _childrenToInsert : new Map(Types::Real, Types::Class);
        children                        = tree.getChildrenOf(node.elementNumber());
        isInitiallySummaryNode          = !children.empty();
        predecessors                    = _node.parmPredecessors();

        newParentActivityNumber         = _newParent;
        childNodeToExcludeFrom          = _childToExcludeFrom ? tree.getNodeByElementNumber(_childToExcludeFrom) : null;

        firstMove                       = true;
        childrenToInsertContiguous      = false;
        canBeSkipped                    = _canBeSkipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextChild</Name>
				<Source><![CDATA[
    private boolean nextChild()
    {
        if (!childrenEnumerator.moveNext())
        {
            return false;
        }
        currentNode = tree.getNodeByElementNumber(childrenEnumerator.current());
        return this.shouldChildNodeBeSkipped() ? this.nextChild() : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextChildToInsert</Name>
				<Source><![CDATA[
    private boolean nextChildToInsert()
    {
        if (childrenEnumerator.moveNext())
        {
            currentNode = childrenEnumerator.current();
            return true;
        }

        if (!childrenToInsertEnumerator.moveNext())
        {
            return false;
        }

        childrenEnumerator = childrenToInsertEnumerator.currentValue().getEnumerator();
        return this.nextChildToInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPredecessor</Name>
				<Source><![CDATA[
    private boolean nextPredecessor()
    {
        if (predecessorsEnumerator.moveNext())
        {
            currentNode = tree.getNodeByActivityNumber(predecessorsEnumerator.current());
            if (currentNode.activityNumber() == newParentActivityNumber)
            {
                return this.nextPredecessor();
            }
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanBeSkipped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates that while processing operators the order in which current operator is processed does not matter.
    /// </summary>
    /// <returns>
    ///     true if  processing order does not matter.
    /// </returns>
    public boolean parmCanBeSkipped()
    {
        return canBeSkipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildrenToInsert</Name>
				<Source><![CDATA[
    public Map parmChildrenToInsert()
    {
        return childrenToInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildrenToInsertContiguous</Name>
				<Source><![CDATA[
    public boolean parmChildrenToInsertContiguous(boolean _childrenToInsertContiguous = childrenToInsertContiguous)
    {
        childrenToInsertContiguous = _childrenToInsertContiguous;
        return _childrenToInsertContiguous;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildToExcludeFrom</Name>
				<Source><![CDATA[
    public ProjWBSTreeNode parmChildToExcludeFrom()
    {
        return childNodeToExcludeFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewParent</Name>
				<Source><![CDATA[
    public smmActivityNumber parmNewParent()
    {
        return newParentActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNode</Name>
				<Source><![CDATA[
    public ProjWBSTreeNode parmNode()
    {
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    public ProjWBSTree parmTree()
    {
        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldChildNodeBeSkipped</Name>
				<Source><![CDATA[
    private boolean shouldChildNodeBeSkipped()
    {
        return childNodeToExcludeFrom && currentNode.parmSiblingNumber() >= childNodeToExcludeFrom.parmSiblingNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ProjWBSTReeNodeOperator</c> instance.
    /// </summary>
    /// <param name = "_tree">
    /// The <c>ProjWbsTree</c> object to which the <c>ProjWBSTreeNode</c> node belongs.
    /// </param>
    /// <param name = "_node">
    /// The <c>ProjWbsTreeNode</c> object for which to enumerate dependencies.
    /// </param>
    /// <param name = "_newParent">
    /// Specifies the new <c>ProjWbsTreeNode</c> parent activityNumber.
    /// </param>
    /// <param name = "_childrenToInsert">
    /// A map that maps outline numbers of children after which new children are to be inserted
    /// to lists of element numbers of nodes that are to be inserted.
    /// </param>
    /// <param name = "_childToExcludeFrom">
    /// The node from which the enumerator should starting skipping nodes.
    /// </param>
    /// <param name = "_operatorCanBeSkipped">
    /// If true, while processing operators the order in which the current operator is processed
    /// will not matter.
    /// </param>
    /// <returns>
    /// A new <c>ProjWBSTreeNodeOperator</c> instance.
    /// </returns>
    public static ProjWBSTreeNodeOperator construct(ProjWbsTree         _tree,
                                                    ProjWBSTreeNode     _node,
                                                    smmActivityNumber   _newParent              = "",
                                                    Map                 _childrenToInsert       = null,
                                                    ElementNumber       _childToExcludeFrom     = "",
                                                    boolean             _operatorCanBeSkipped   = false)
    {
        return new ProjWBSTreeNodeOperator(_tree, _node, _newParent, _childrenToInsert, _childToExcludeFrom, _operatorCanBeSkipped);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>