<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementHeaderFieldEditabilityDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementHeaderFieldEditabilityDataProvider</c> class is responsible
/// for providing data that is necessary for detremining editability of purchase agreement header fields.
/// </summary>
class PurchAgreementHeaderFieldEditabilityDataProvider extends AgreementHeaderFieldEditabilityDataProvider
{
    // Input

    PurchAgreementHeader purchAgreementHeader;

    // Cached values (can only be access through parm methods)

    UnknownNoYes activeWorkflowTemplateExists = UnknownNoYes::Unknown;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AgreementHeaderFieldEditabilityDataProvider</c> class
    /// for the specified <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name = "_agreementHeader">The <c>AgreementHeader</c> record.</param>
    /// <returns>Creates a new instance of the <c>AgreementHeaderFieldEditabilityDataProvider</c> class.</returns>
    public static PurchAgreementHeaderFieldEditabilityDataProvider newFromAgreementHeader(PurchAgreementHeader _agreementHeader)
    {
        var dataProvider = PurchAgreementHeaderFieldEditabilityDataProvider::construct();
        dataProvider.initFromAgreementHeader(_agreementHeader);
        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveWorkflowTemplateExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an active workflow template for purchase agreements exists.
    /// </summary>
    /// <returns>true, if an active workflow template for purchase agreements exists; otherwise, false.</returns>
    public boolean parmActiveWorkflowTemplateExists()
    {
        if (activeWorkflowTemplateExists == UnknownNoYes::Unknown)
        {
            activeWorkflowTemplateExists = this.booleanToUnknownNoYes(PurchAgreementHeader::activeWorkflowTemplateExists());
        }

        return activeWorkflowTemplateExists == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether vendor can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if vendor can be edited on the agreement; otherwise, false.
    /// </returns>
    public boolean canEditVendor()
    {
        return !purchAgreementHeader.isReleaseOrderMatched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the project ID can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if project ID can be edited on the agreement; otherwise, false.
    /// </returns>
    public boolean canEditProjectId()
    {
        var agreementHeaderDefaultOrig = this.parmAgreementHeaderDefault().orig();
        return !agreementHeaderDefaultOrig.RecId || (agreementHeaderDefaultOrig.RecId && agreementHeaderDefaultOrig.Project);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEditAgreementState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the agreement state can be edited on the agreement.
    /// </summary>
    /// <returns>
    /// true if the agreement state can be edited on the agreement; otherwise, false.
    /// </returns>
    public boolean canEditAgreementState()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && this.parmActiveWorkflowTemplateExists()
            && purchAgreementHeader.WorkflowStatus_PSN != PurchAgreementWorkflowStatus::Approved
            && !purchAgreementHeader.isAgreementCLMOwned())
        {
            return false;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object based on the specified <c>AgreementHeader</c> record.
    /// </summary>
    /// <param name = "_agreementHeader">The <c>AgreementHeader</c> record.</param>
    protected void initFromAgreementHeader(AgreementHeader _agreementHeader)
    {
        super(_agreementHeader);
        purchAgreementHeader = _agreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PurchAgreementHeaderFieldEditabilityDataProvider construct()
    {
        return new PurchAgreementHeaderFieldEditabilityDataProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>