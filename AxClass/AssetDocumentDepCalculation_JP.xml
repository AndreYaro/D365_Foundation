<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDocumentDepCalculation_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified document of asset.
/// </summary>
abstract class AssetDocumentDepCalculation_JP
implements AssetDocumentTypeSupportedInterface_JP
{
    // The date range to calculate depreciation amount for asset document.
    AssetTransDate      periodStartDate;
    AssetTransDate      periodEndDate;

    // Asset document that needs to calculate depreciation amount
    AssetDocumentTable_JP   assetDocumentTable_JP;
    AssetDocumentEntry_JP   assetDocumentEntry_JP;

    // Related basic asset information
    AssetDepBookMap_JP      assetDepBookMap_JP;
    AssetTable              assetTable;

    AssetTableInterval      assetTableInterval;

    AssetTransDate          endDayOfServiceLife;
    boolean                 enableCatchupOnEndDayOfServiceLife;

    AssetAmount             amountToDepreciate;
    AssetAmount             accumulatedDepAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount for current period.
    /// </summary>
    /// <returns>
    /// The depreciation amount for current period.
    /// </returns>
    public AssetAmount calc()
    {
        AssetAmount                 ret;
        AssetAmount                 remaining;
        AssetDepBookTableMap_JP     assetDepBookTableMapLoc;

        if (this.isTheEndPeriodOfServiceLife())
        {
            ret = this.calcForEndPeriod();
        }
        else
        {
            ret = this.calcForNormalPeriod();

            // Make sure the accumulated depreciation amount will not exceed the amount to depreciate.
            if (accumulatedDepAmount + ret > amountToDepreciate)
            {
                ret = amountToDepreciate - accumulatedDepAmount;
            }
            accumulatedDepAmount += ret;

            // Handle the small remaining amount that less than the rounding rule.
            // Such small remaining amount cannot be depreciate in normal way, so directly depreciate this amount in current period.
            remaining = amountToDepreciate - accumulatedDepAmount;
            if (remaining > 0)
            {
                assetDepBookTableMapLoc = AssetDepBookTableMap_JP::find(
                    AssetDepCalculationHelper_JP::determineAssetBookType(assetDepBookMap_JP.TableId),
                    assetDepBookMap_JP.AssetBookId);
                if (assetDepBookTableMapLoc.RoundOffDepreciation(remaining) == 0)
                {
                    ret += remaining;
                    accumulatedDepAmount += remaining;
                }
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcForEndPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount for the end period.
    /// </summary>
    /// <returns>
    /// The depreciation amount for the end period.
    /// </returns>
    /// <remarks>
    /// Use catch up method to calculate the depreciation amount for the end period
    /// to make sure all depreciable amount is depreciationed.
    /// </remarks>
    public AssetAmount calcForEndPeriod()
    {
        AssetAmount     ret;

        ret = amountToDepreciate - accumulatedDepAmount;

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcForNormalPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount for the non-end period.
    /// </summary>
    /// <returns>
    /// The depreciation amount for the non-end period.
    /// </returns>
    abstract public AssetAmount calcForNormalPeriod()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document type of current asset document entry.
    /// </summary>
    /// <returns>
    /// The asset document type of current asset document entry.
    /// </returns>
    abstract public AssetDocumentType_JP getAssetDocumentType()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getDepDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the depreciation date of current depreciation calculation.
    /// </summary>
    /// <returns>
    /// The depreciation date of current depreciation calculation.
    /// </returns>
    public AssetTransDate getDepDate()
    {
        return periodEndDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getSupportedAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all supported asset document type(s).
    /// </summary>
    /// <returns>
    /// A container include all supported asset document type(s).
    /// </returns>
    public container getSupportedAssetDocumentType()
    {
        // All the sub classes that support more than one asset document types, needs to override this method.
        return [this.getAssetDocumentType()];
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
/// <summary>
    /// Does some necessary initialization.
    /// </summary>
    public void init()
    {
        // An asset document must be specified before init
        if (assetDocumentEntry_JP.RecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        //
        // For current document entry, init all related info if they does not exist or does not match the current document entry.
        //
        if (assetDocumentTable_JP.RecId     == 0
            || assetDocumentTable_JP.RecId  != assetDocumentEntry_JP.AssetDocumentTable_JP)
        {
            assetDocumentTable_JP = AssetDocumentTable_JP::find(assetDocumentEntry_JP.AssetDocumentTable_JP);
        }

        if (assetTable.RecId        == 0
            || assetTable.AssetId   != assetDocumentEntry_JP.AssetId)
        {
            assetTable = assetTable::find(assetDocumentEntry_JP.AssetId);
        }

        if (assetDepBookMap_JP.RecId            == 0
            || assetDepBookMap_JP.AssetId       != assetDocumentEntry_JP.AssetId
            || assetDepBookMap_JP.AssetBookId   != assetDocumentEntry_JP.BookId)
        {
            assetDepBookMap_JP = AssetDepBookMap_JP::findByAssetIdBookId(
                assetDocumentEntry_JP.AssetId,
                assetDocumentEntry_JP.BookId);
        }

        if (!assetTableInterval)
        {
            this.initAssetTableInterval();
        }

        periodStartDate = dateNull();
        periodEndDate   = dateNull();

        this.initEndDayOfServiceLife();
    }
]]></Source>
			</Method>
			<Method>
				<Name>initAssetTableInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does assetTableInterval initialization.
    /// </summary>
    protected void initAssetTableInterval()
    {
        assetTableInterval = assetDepBookMap_JP.AssetDepBookMap_JP::assetTableInterval();
    }
]]></Source>
			</Method>
			<Method>
				<Name>initEndDayOfServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the end day of service life.
    /// </summary>
    protected void initEndDayOfServiceLife()
    {
        if (endDayOfServiceLife == dateNull())
        {
            endDayOfServiceLife = dateMax();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>isCalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whethere calculation needed.
    /// </summary>
    /// <returns>
    /// Returns true if calculation need to be processed; Otherwise return false.
    /// </returns>
    public boolean isCalculationNeeded()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isTheEndPeriodOfServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether current period is the end period of service life.
    /// </summary>
    /// <returns>
    /// true if current period is the end period of service life; otherwise, return false.
    /// </returns>
    public boolean isTheEndPeriodOfServiceLife()
    {
        boolean ret = false;

        if (endDayOfServiceLife     >= periodStartDate
            && endDayOfServiceLife  <= periodEndDate)
        {
            ret = true;
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>moveToNextPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves to next period
    /// </summary>
    protected void moveToNextPeriod()
    {
        AssetTransDate      baseDateLoc;

        if (periodStartDate == dateNull())
        {
            if (assetDocumentEntry_JP
                && assetDocumentEntry_JP.type() == AssetDocumentType_JP::AssetReductionEntry_Reserve)
            {
                baseDateLoc = assetDepBookMap_JP.LastReserveAllocationDate
                    ? assetDepBookMap_JP.LastReserveAllocationDate + 1
                    : assetDepBookMap_JP.AllocationStartDate;
            }
            else
            {
                baseDateLoc = assetDepBookMap_JP.LastDepreciationDate
                    ? assetDepBookMap_JP.LastDepreciationDate + 1
                    : assetDepBookMap_JP.DepreciationStartDate;
            }
            periodStartDate = assetTableInterval.startOfPeriod(baseDateLoc);
            periodEndDate   = assetTableInterval.endPeriod(periodStartDate);
        }
        else
        {
            periodStartDate = periodEndDate + 1;
            periodEndDate   = assetTableInterval.endPeriod(periodStartDate);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whtether it is allowed to do next loop calculation.
    /// </summary>
    /// <param name="_upperDate">
    /// The maximum date of current calculation period. Optional.
    /// </param>
    /// <returns>
    /// true if allowed; otherwise, return false.
    /// </returns>
    public boolean next(AssetTransDate _upperDate = dateMax())
    {
        boolean             ret = true;
        AssetTransDate      oldPeriodStart  = periodStartDate;
        AssetTransDate      oldPeriodEnd    = periodEndDate;

        // Stop the calculation when all amount has been depreciated.
        ret = (amountToDepreciate > accumulatedDepAmount);

        if (ret)
        {
            this.moveToNextPeriod();

            // For the last period in service life, it can be partial period.
            if (periodEndDate       > _upperDate
                || periodStartDate  > endDayOfServiceLife)
            {
                // Extended the upper date, go back to old period
                periodStartDate = oldPeriodStart;
                periodEndDate   = oldPeriodEnd;

                ret = false;
            }
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDepBookMap_JP</Name>
				<Source><![CDATA[
    public AssetDepBookMap_JP parmAssetDepBookMap_JP(AssetDepBookMap_JP _assetDepBookMap_JP = assetDepBookMap_JP)
    {
        assetDepBookMap_JP = _assetDepBookMap_JP;
        return assetDepBookMap_JP;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry_JP</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmAssetDocumentEntry_JP(AssetDocumentEntry_JP _assetDocumentEntry_JP = assetDocumentEntry_JP)
    {
        assetDocumentEntry_JP = _assetDocumentEntry_JP;
        return assetDocumentEntry_JP;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentTable_JP</Name>
				<Source><![CDATA[
    public AssetDocumentTable_JP parmAssetDocumentTable_JP(AssetDocumentTable_JP _assetDocumentTable_JP = assetDocumentTable_JP)
    {
        assetDocumentTable_JP = _assetDocumentTable_JP;
        return assetDocumentTable_JP;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTable</Name>
				<Source><![CDATA[
    public AssetTable parmAssetTable(AssetTable _assetTable = assetTable)
    {
        assetTable = _assetTable;
        return assetTable;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAssetTableInterval</Name>
				<Source><![CDATA[
    public AssetTableInterval parmAssetTableInterval(AssetTableInterval _assetTableInterval = assetTableInterval)
    {
        assetTableInterval = _assetTableInterval;
        return assetTableInterval;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmEndDayOfServiceLife</Name>
				<Source><![CDATA[
    public AssetTransDate parmEndDayOfServiceLife(AssetTransDate _endDayOfServiceLife = endDayOfServiceLife)
    {
        endDayOfServiceLife = _endDayOfServiceLife;
        return endDayOfServiceLife;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a sub class of <C>AssetDepCalculation_JP</C> based on specified type of depreciation method.
    /// </summary>
    /// <param name="_assetDocumentEntry_JP">
    /// The asset document entry.
    /// </param>
    /// <returns>
    /// A new instance of a sub class of <C>AssetDocumentDepCalculation_JP</C>.
    /// </returns>
    public static AssetDocumentDepCalculation_JP construct(
        AssetDocumentEntry_JP       _assetDocumentEntry_JP)
    {
        AssetDocumentDepCalculation_JP  ret;
        AssetDocumentType_JP            assetDocumentType = _assetDocumentEntry_JP.type();

        ret = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(AssetDocumentDepCalculation_JP),
            new AssetDocumentTypeAttribute_JP(assetDocumentType));

        if (ret)
        {
            ret.parmAssetDocumentEntry_JP(_assetDocumentEntry_JP);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAllSupportedAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of asset document type(s) that supported by <C>AssetDocumentDepCalculation_JP</C>
    /// or its sub classes.
    /// </summary>
    /// <returns>
    /// A container that holds all supported asset document type(s).
    /// </returns>
    public static container getAllSupportedAssetDocumentType()
    {
        return AssetDocumentTypeSupportedHelper_JP::getAllSupportedAssetDocumentType(classNum(AssetDocumentDepCalculation_JP));
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>