<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMTable_BOMTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMTable</c> datasource of the <c>BOMTable</c> form
/// </summary>
class PmfFormCtrl_BOMTable_BOMTable
    extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkBOMButtonsVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if the BOM related buttons should be visible
    /// </summary>
    /// <returns>
    /// true, if the buttons should be shown
    /// </returns>
    public boolean checkBOMButtonsVisible()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the data source initialization
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer associated with the datasource
    /// </param>
    /// <remarks>
    /// This method needs to be called to add appropriate ranges to the
    /// datasource query
    /// </remarks>
    public void dataSourceInitPost(Common _buffer)
    {
        Query                   q;
        QueryBuildDataSource    qB;

        super(_buffer);

        if (this.isPmfEnabled())
        {
            q = this.parmFormDataSource(FormDataUtil::getFormDataSource(_buffer)).query();
            qB = q.dataSourceTable(tablenum(BOMTable));

            QueryBuildRange range = qB.addRange(fieldnum(BOMTable, PmfBOMFormula));
            range.value(
                queryValue(
                    this.isFormulaEnabled()
                        ? PmfBOMFormula::Formula
                        : PmfBOMFormula::BOM));
            range.status(RangeStatus::Locked);

            this.parmFormDataSource().query(q);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRuleBOMNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers control rules for controls using the BOMTable.BOMNum data source.
    /// </summary>
    /// <param name = "_formGroupControlName">The name of the parent group control.</param>
    /// <param name = "_formControlName">The name of the control.</param>
    protected void registerCtrlRuleBOMNum(str _formGroupControlName, str _formControlName)
    {
        this.registerCtrlRule(
                formRun.design().controlName(_formGroupControlName),
                formRun.design().controlName(_formControlName),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO1018");

        this.registerCtrlRule(
                formRun.design().controlName(_formGroupControlName),
                formRun.design().controlName(_formControlName),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO1115");
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRuleBOMName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers control rules for controls using the BOMTable.BOMName data source.
    /// </summary>
    /// <param name = "_formGroupControlName">The name of the parent group control.</param>
    /// <param name = "_formControlName">The name of the control.</param>
    protected void registerCtrlRuleBOMName(str _formGroupControlName, str _formControlName)
    {
        this.registerCtrlRule(
                formRun.design().controlName(_formGroupControlName),
                formRun.design().controlName(_formControlName),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO992");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form is initialized
    /// </summary>
    /// <remarks>
    /// The method initializes the button manager for several controls on the form
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an exception, if the form run has not been set for the class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@SCM:Formulas");
            this.parmFormRun().design().titleDatasource('');
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, ActionPaneTab)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO1115");
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, LineViewHeaderDetails)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@SCM:FormulaHeader");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMTable,BOMApprove)),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO534");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMTable,BOMApprove)),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::Text,
                "@PRO128");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMTable,Check)),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PRO322");

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMTable,BOMDesigner)),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, checkBOMButtonsVisible),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMTable,CoByProducts)),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMTable, LineViewLines)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Caption,
                "@PRO1509");

        this.registerCtrlRuleBOMNum(formControlStr(BOMTable,TableGrpGrid),
                                        formControlStr(BOMTable,BOMTable_BOMNum));

        this.registerCtrlRuleBOMNum(formControlStr(BOMTable,HeaderDetailsGeneral),
                                        formControlStr(BOMTable,HeaderDetailsGeneral_BOMTable_BOMNum));

        this.registerCtrlRuleBOMNum(formControlStr(BOMTable,LineViewHeaderDetails),
                                        formControlStr(BOMTable,LineViewHeaderDetails_BOMTable_BOMNum));

        this.registerCtrlRuleBOMNum(formControlStr(BOMTable,NavigationListGrid),
                                        formControlStr(BOMTable,NavigationListGrid_BOMTable_BOMNum));

        this.registerCtrlRuleBOMName(formControlStr(BOMTable,TableGrpGrid),
                                         formControlStr(BOMTable,BOMTable_Name));

        this.registerCtrlRuleBOMName(formControlStr(BOMTable,HeaderDetailsGeneral),
                                         formControlStr(BOMTable,HeaderDetailsGeneral_BOMTable_Name));

        this.registerCtrlRuleBOMName(formControlStr(BOMTable,LineViewHeaderDetails),
                                         formControlStr(BOMTable,LineViewHeaderDetails_BOMTable_Name));

        this.registerCtrlRuleBOMName(formControlStr(BOMTable,NavigationListGrid),
                                         formControlStr(BOMTable,NavigationListGrid_BOMTable_Name));
        this.registerCtrlRule(
                formRun.design().controlName(formControlStr(BOMTable,ButtonGroup)),
                formRun.design().controlName(formControlStr(BOMTable,PmfFormulaDesigner)),
                methodstr(PmfFormCtrl_BOMTable_BOMTable, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        InventTable callerInventTable;
        BOMTable    callerBOMTable;
        InventSum   callerInventSum;
        Common      common = this.callerBuffer();

        boolean     ret = false;

        switch (common.TableId)
        {
            case tablenum(InventTable) :
                callerInventTable = common;
                ret = callerInventTable.isFormulaAllowed();
                break;
            case tablenum(BOMTable) :
                callerBOMTable = common;
                ret = callerBOMTable.PmfBOMFormula == PmfBOMFormula::Formula;
                break;
            case tablenum(InventSum) :
                callerInventSum = common;
                ret = callerInventSum.inventTable().isFormulaAllowed();
                break;
            default:
                // break;
        }

        ret = ret
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaTable)
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaTableHeader);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOMTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the form design
    /// </summary>
    public void updateDesign()
    {
        boolean     allowEdit       = true;
        BOMTable    bomTable = buffer;

        if (BOMParameters::find().BlockEditing && bomTable.isApproved())
        {
            allowEdit = false;
        }

        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).allowEdit(allowEdit);

            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMTable_BOMTable construct()
    {
        return new PmfFormCtrl_BOMTable_BOMTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMTable_BOMTable newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMTable_BOMTable::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>