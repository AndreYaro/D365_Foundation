<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailBusinessProcessStarterService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// the class is used to handle business logic of <d>RetailBusinessProcessStarterContract</d> class
/// </summary>
public class RetailBusinessProcessStarterService extends SysOperationServiceBase
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create BusinessProcess according to the related <d>RetailBusinessProcessStarterContract</d> class
    /// </summary>
    /// <param name = "contract">the business process contract</param>
    public void run(RetailBusinessProcessStarterContract contract)
    {
        // Edit recurrent process should not create checklist instance immediately
        if (contract.parmInEdit() && contract.parmRecurrence())
            return;
        
        this.createRetailBusinessProcessHeader(contract.parmRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetailBusinessProcessHeader</Name>
				<Source><![CDATA[
    public void createRetailBusinessProcessHeader(int64 processRecId)
    {   
        RetailBusinessProcess process;
        RetailBusinessProcessChannel processChannel;
        RetailBusinessProcessWorker processWorker;
        BusinessProcessTemplateHeader templateHeader;

        RetailBusinessProcessTargetDate targetDate;
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;

        try
        {
            select firstonly process where process.RecId == processRecId;

            select firstonly templateHeader where templateHeader.RecId == process.RetailBusinessProcessTemplateHeader;
            
            BatchHeader batchHeader = this.getCurrentBatchHeader();
            
            targetDate = this.isExecutingInBatch() ? DateTimeUtil::date(batchHeader.parmStartDateTime()) + process.RecurrenceTargetDateOffset : process.TargetDate;
            
            ttsbegin;

            while select processChannel where processChannel.RetailBusinessProcess == processRecId
            {
                eventSource.EventWriteBusinessProcessHydrationChannelStart(templateHeader.RecId, processRecId, processChannel.Channel);
                BusinessProcessGenericHydrator hydrator = BusinessProcessGenericHydrator::construct(templateHeader,
                                                                                DateTimeUtil::date(targetDate),
                                                                                RetailBusinessProcessTaskDueDateCalculator::construct(templateHeader));
                hydrator.parmName(templateHeader.Name);
                hydrator.parmRetailBusinessProcess(processRecId);
                hydrator.parmChannelRecId(processChannel.Channel);
                hydrator.hydrateProcessFromTemplate();
                eventSource.EventWriteBusinessProcessHydrationChannelStop(templateHeader.RecId, processRecId, processChannel.Channel);
            }

            while select processWorker where processWorker.RetailBusinessProcess == processRecId
            {
                eventSource.EventWriteBusinessProcessHydrationWorkerStart(templateHeader.RecId, processRecId, processWorker.HCMWorker);
                BusinessProcessGenericHydrator hydrator = BusinessProcessGenericHydrator::construct(templateHeader,
                                                                                DateTimeUtil::date(targetDate),
                                                                                RetailBusinessProcessTaskDueDateCalculator::construct(templateHeader));
                hydrator.parmName(templateHeader.Name);
                hydrator.parmRetailBusinessProcess(processRecId);
                hydrator.parmHcmWorkerRecId(processWorker.HCMWorker);
                hydrator.hydrateProcessFromTemplate();
                eventSource.EventWriteBusinessProcessHydrationWorkerStop(templateHeader.RecId, processRecId, processWorker.HCMWorker);
            }
            
            ttscommit;
        }
        catch (xppEx)
        {
            eventSource.EventWriteBusinessProcessHeaderCreationError(templateHeader.RecId, xppEx.ToString());
            throw error(xppEx.Message);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>