<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableInterval_Fiscal</Name>
	<SourceCode>
		<Declaration><![CDATA[
///  <summary>
///     Interval details of Fiscal calendar
/// </summary>
/// <remarks>
///     extends AssetTableInterval
/// </remarks>
public class AssetTableInterval_Fiscal extends AssetTableInterval
{
    FiscalCalendarRecId calendarRecId;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetDepreciationTime</Name>
				<Source><![CDATA[
    public AssetDepreciationTime assetDepreciationTime(AssetTransDate _assetTransDate)
    {
        AssetDepreciationTime   assetDepreciationTime;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                assetDepreciationTime = LedgerFiscalCalendar::numberOfPeriodsInYear(calendarRecId, _assetTransDate);
                break;
            // <GJP>
            case assetAccrual::Quarterly:
                assetDepreciationTime = FiscalCalendarQuarter::numberOfQuartersInYear(calendarRecId, _assetTransDate);
                break;
            // </GJP>
            default:
                assetDepreciationTime = 1;
        }

        if (assetDepreciationTime == 0)
        {
            throw error(strfmt("@SYS128204", FiscalCalendar::find(calendarRecId).CalendarId));
        }

        return assetDepreciationTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the end date of the first object that has only a closing period after the specified date.
    /// </summary>
    /// <param name="_date">
    ///    The specified date to find the closing period for.
    /// </param>
    /// <returns>
    ///    The end date of the closing period after the specified date.
    /// </returns>
    public TransDate closingPeriodDate(TransDate _date)
    {
        return LedgerFiscalCalendar::findLastDayOfYear(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the month to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The month to which the date belongs.
    /// </returns>
    public int dateToMonth(TransDate _date)
    {
        return LedgerFiscalCalendar::findMonthByDate(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the period to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The period to which the date belongs.
    /// </returns>
    public int dateToPeriod(TransDate _date)
    {
        return LedgerFiscalCalendar::findPeriodPositionByDate(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of the day in the fiscal period for the specified asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of day in the fiscal period.
    /// </returns>
    public int dayOfPeriod(AssetTransDate _assetTransDate)
    {
        int returnValue;
        AssetTransDate firstDayOfPeriod;

        if (_assetTransDate && calendarRecId)
        {
            // Get the first day of the period.  In case the period is not defined,
            // do not determine the number of day.
            firstDayOfPeriod = LedgerFiscalCalendar::findFirstDayOfMonth(calendarRecId, _assetTransDate);
            if (firstDayOfPeriod)
            {
                returnValue = _assetTransDate - firstDayOfPeriod + 1;
            }
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endingPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the ending date of the period to which the given date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The ending date of the period to which the specified date belongs.
    /// </returns>
    public TransDate endingPeriodDate(TransDate _date)
    {
        return LedgerFiscalCalendar::findLastDayOfPeriod(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    public AssetTransDate endPeriod(AssetTransDate _assetTransDate)
    {
        AssetTransDate  assetTransDate;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                assetTransDate = LedgerFiscalCalendar::findLastDayOfPeriod(calendarRecId, _assetTransDate);
                break;
            // <GJP>
            case assetAccrual::Quarterly:
                assetTransDate = LedgerFiscalCalendar::findLastDayOfQuarter(calendarRecId, _assetTransDate);
                    
                break;
            // </GJP>
            default:
                assetTransDate = LedgerFiscalCalendar::findLastDayOfYear(calendarRecId, _assetTransDate);
        }

        return assetTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of the quarter in the fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The number of the quarter in the given fiscal year.
    /// </returns>
    public int findCurrentQuarter(TransDate _date)
    {
        return LedgerFiscalCalendar::findQuarterByDate(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the month to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The first day of the month to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfMonth(TransDate _date)
    {
        return LedgerFiscalCalendar::findFirstDayOfMonth(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the period to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The first day of the period to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfPeriod(TransDate _date)
    {
        return LedgerFiscalCalendar::findFirstDayOfPeriod(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the quarter to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The first day of the quarter to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfQuarter(TransDate _date)
    {
        return LedgerFiscalCalendar::findFirstDayOfQuarter(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first date of a fiscal year for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// The date for which the first date of the year will be found.
    /// </param>
    /// <returns>
    /// The first date of the year.
    /// </returns>
    public TransDate findFirstDayOfYear(TransDate _date)
    {
        return LedgerFiscalCalendar::findFirstDayOfYear(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the month to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the month to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfMonth(TransDate _date)
    {
        return LedgerFiscalCalendar::findLastDayOfMonth(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the period to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the period to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfPeriod(TransDate _date)
    {
        return LedgerFiscalCalendar::findLastDayOfPeriod(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the quarter to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the quarter to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfQuarter(TransDate _date)
    {
        return LedgerFiscalCalendar::findLastDayOfQuarter(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last date of a fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The date for which the last date of the year will be found.
    /// </param>
    /// <returns>
    /// The last date of the year.
    /// </returns>
    public TransDate findLastDayOfYear(TransDate _date)
    {
        return LedgerFiscalCalendar::findLastDayOfYear(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the middle date of a fiscal period for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Middle of the period date.
    /// </returns>
    public TransDate findMiddleOfPeriod(TransDate _date)
    {
        return LedgerFiscalCalendar::findMiddleOfPeriod(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the middle day of the year to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The middle day of the year to which the date belongs.
    /// </returns>
    public TransDate findMiddleOfYear(TransDate _date)
    {
        return LedgerFiscalCalendar::findMiddleOfYear(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasYearChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if two dates are in a different fiscal year.
    /// </summary>
    /// <param name="_oldDate">
    /// The first date for which to check is done.
    /// </param>
    /// <param name="_newDate">
    /// The second date for which to check is done.
    /// </param>
    /// <returns>
    /// true if the dates in different fiscal or calendar year; otherwise, false.
    /// </returns>
    public boolean hasYearChanged(AssetTransDate _oldDate, AssetTransDate _newDate)
    {
        return LedgerFiscalCalendar::findFirstDayOfYear(calendarRecId, _oldDate) != LedgerFiscalCalendar::findFirstDayOfYear(calendarRecId, _newDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>indexOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The index of the period for the asset accrual fiscal period for the RB/SL depreciation method.
    /// </summary>
    /// <param name="_assetTransDate">
    ///    The start of the depreciation period.
    /// </param>
    /// <returns>
    ///    The index of the period for the specified date.
    /// </returns>
    /// <remarks>
    ///    Only the fiscal period option is available for the RB/SL depreciation method.
    /// </remarks>
    public int indexOfPeriod(AssetTransDate _assetTransDate)
    {
        int assetDepreciationTime;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                assetDepreciationTime = this.periodOfYear(_assetTransDate);
                break;
            // <GJP>
            case AssetAccrual::Quarterly:
                assetDepreciationTime = FiscalCalendarQuarter::findQuarterPositionByDate(calendarRecId, _assetTransDate);
                break;
            // </GJP>
            default:
                assetDepreciationTime = 1;
                break;
        }
        return assetDepreciationTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
    public AssetLifeTime interval(
        AssetTransDate   _depStart,
        AssetTransDate   _runDate)
    {
        if (year(_runDate) <= year(_depStart))
        {
            return 0;
        }
        return (year(_runDate) - year(_depStart)) -1 ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AssetAccrual _assetAccrual, recId _calendarRecId = CompanyInfoHelper::fiscalCalendarRecId())
    {
        assetAccrual = _assetAccrual;
        calendarRecId = _calendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPeriodsInYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of periods in a fiscal year.
    /// </summary>
    /// <param name="_date">
    ///    The date specified to determine the date in the fiscal year in the specified fiscal calendar.
    /// </param>
    /// <returns>
    ///    The number of the fiscal calendar periods in fiscal year.
    /// </returns>
    public int numberOfPeriodsInYear(AssetTransDate _date)
    {
        return LedgerFiscalCalendar::numberOfPeriodsInYear(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the number of periods for a supplied date range.
    /// </summary>
    /// <param name="_fromDate">
    ///     The from date.
    /// </param>
    /// <param name="_toDate">
    ///     The to date.
    /// </param>
    /// <returns>
    ///     Number of periods for a supplied date range.
    /// </returns>
    public int numOfPeriods(TransDate _fromDate, TransDate _toDate)
    {
        int retValue;
        TransDate lastDayOfYear;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                retValue = LedgerFiscalCalendar::numberOfPeriodsBetweenDates(calendarRecId, _fromDate, _toDate);
                break;
            // <GJP>
            case AssetAccrual::Quarterly:
                retValue = FiscalCalendarQuarter::numberOfQuartersBetweenDates(calendarRecId, _fromDate, _toDate);
                break;
            // </GJP>
            case AssetAccrual::Yearly:
                while (_fromDate <= _toDate)
                {
                    lastDayOfYear = this.findLastDayOfYear(_fromDate);
                    if (lastDayOfYear == dateNull())
                    {
                        retValue = 0;
                        break;
                    }
                    else
                    {
                        _fromDate = lastDayOfYear + 1;
                        retValue++;
                    }
                }
                break;
            default:
                retValue = 1;
        }
        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    ///  <summary>
    ///     This method calculates the number of periods left in that year
    /// </summary>
    /// <param name="_date">
    ///     Input date
    /// </param>
    /// <returns>
    ///     number of periods in the year
    /// </returns>
    /// <remarks>
    ///     overwritten method
    /// </remarks>
    public int numOfPeriodsLeftInYear(TransDate _date)
    {
        int assetDepreciationTime;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                assetDepreciationTime = LedgerFiscalCalendar::numberOfPeriodsLeftInYear(calendarRecId, _date);
                break;
            // <GJP>
            case AssetAccrual::Quarterly:
                assetDepreciationTime = FiscalCalendarQuarter::numberOfQuartersLeftInYear(calendarRecId, _date);
                break;
            // </GJP>
            default:
                assetDepreciationTime = 1;
        }

        return assetDepreciationTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsPerYear</Name>
				<Source><![CDATA[
    public int numOfPeriodsPerYear()
    {
        return any2int(this.assetDepreciationTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingPeriodDate</Name>
				<Source><![CDATA[
    public TransDate openingPeriodDate(TransDate _date)
    {
        return LedgerFiscalCalendar::findFirstDayOfYear(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the fiscal period in a year for a given asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of the fiscal period.
    /// </returns>
    public int periodOfYear(AssetTransDate _assetTransDate)
    {
        int assetDepreciationTime;

        if (calendarRecId && _assetTransDate)
        {
            assetDepreciationTime = LedgerFiscalCalendar::findPeriodPositionByDate(calendarRecId, _assetTransDate);
        }

        return assetDepreciationTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDatePeriodFwd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the given number of fiscal periods to the given date.
    /// </summary>
    /// <param name="_date">
    ///     The given date.
    /// </param>
    /// <param name="_periodsToMove">
    ///     Number of fiscal periods by which the given date is moved.
    /// </param>
    /// <returns>
    ///     Date after adding the number of years to the given date.
    /// </returns>
    public TransDate startDatePeriodFwd(TransDate _date, int _periodsToMove)
    {
        AssetDepreciationTime   assetDepreciationTime;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                return LedgerFiscalCalendar::findStartDatePeriodFwd(calendarRecId, _date, _periodsToMove);
            // <GJP>
            case assetAccrual::Quarterly:
                return FiscalCalendarQuarter::findStartDateQuarterFwd(calendarRecId, _date, _periodsToMove);
            // </GJP>
            default:
                return this.startDateYearFwd(_date, _periodsToMove);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startDateYearFwd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the given number of years to the given date.
    /// </summary>
    /// <param name="_date">
    ///     The given date.
    /// </param>
    /// <param name="_yearsToMove">
    ///     Number of years by which the given date is moved.The unit is years.
    /// </param>
    /// <returns>
    ///     Date after adding the number of years to the given date.
    /// </returns>
    public TransDate startDateYearFwd(TransDate _date, real _yearsToMove)
    {
        TransDate currentTransDate = _date;
        int numberOfPeriodsInYear;

        while (_yearsToMove > 0)
        {
            numberOfPeriodsInYear = LedgerFiscalCalendar::numberOfPeriodsInYear(calendarRecId, currentTransDate);

            // If a partial year is moved, only move by the number of fiscal periods that represent the partial year.
            if (_yearsToMove < 1)
            {
                numberOfPeriodsInYear =  real2int(_yearsToMove * numberOfPeriodsInYear);
            }

            currentTransDate = LedgerFiscalCalendar::findStartDatePeriodFwd(calendarRecId, currentTransDate, numberOfPeriodsInYear);

            _yearsToMove--;
        }

        return currentTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startingPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the starting date of a fiscal quarter for a supplied date.
    /// </summary>
    /// <param name="_date">
    ///     The given date.
    /// </param>
    /// <returns>
    ///     The starting date of a fiscal quarter for a supplied date.
    /// </returns>
    public TransDate startingPeriodDate(TransDate _date)
    {
        return LedgerFiscalCalendar::findFirstDayOfPeriod(calendarRecId, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfPeriod</Name>
				<Source><![CDATA[
    public AssetTransDate startOfPeriod(AssetTransDate _assetTransDate)
    {
        AssetTransDate  assetTransDate;

        switch (assetAccrual)
        {
            case AssetAccrual::FiscalPeriod:
                assetTransDate = LedgerFiscalCalendar::findFirstDayOfPeriod(calendarRecId,_assetTransDate);
                break;
            // <GJP>
            case AssetAccrual::Quarterly:
                assetTransDate = LedgerFiscalCalendar::findFirstDayOfQuarter(calendarRecId, _assetTransDate);
                break;
            // </GJP>
            default:
                assetTransDate = LedgerFiscalCalendar::findFirstDayOfYear(calendarRecId, _assetTransDate);
        }

        return assetTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearRatio_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// The ratio of current year (consider the calendar change and the specified start date) compare to the full year defined in calendar.
    /// </summary>
    /// <param name="_dateInYear">
    /// The data used to identify the year.
    /// </param>
    /// <param name="_startDate">
    /// The start date of current year to calculate the ratio. Optional.
    /// </param>
    /// <returns>
    /// The ratio of current year compare to the full year defined in calendar.
    /// </returns>
    public real yearRatio_JP(
        TransDate   _dateInYear,
        TransDate   _startDate = dateNull())
    {
        real                                ret = 0;
        TransDate                           firstDayOfYear;
        TransDate                           lastDayOfYear;
        int                                 numOfPeriodInYear;

        firstDayOfYear = this.findFirstDayOfYear(_dateInYear);
        lastDayOfYear  = this.findLastDayOfYear(_dateInYear);

        if (_startDate <= firstDayOfYear)
        {
            ret = 1;
        }
        else if (_startDate <= lastDayOfYear)
        {
            numOfPeriodInYear   = this.numOfPeriodsLeftInYear(firstDayOfYear);
            Debug::assert(numOfPeriodInYear > 0);

            if (numOfPeriodInYear)
            {
                ret = this.numOfPeriodsLeftInYear(_startDate) / numOfPeriodInYear;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearToPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the number of periods in the asset service life.
    /// </summary>
    /// <param name="_assetServiceLife">
    ///    The service life of the asset.
    /// </param>
    /// <param name="_depreciationStartDate">
    ///    The depreciation start date of an asset.
    /// </param>
    /// <returns>
    ///    The Total number of periods during the service life of the asset.
    /// </returns>
    ///
    public AssetLifeTime yearToPeriod(
        AssetServiceLife _assetServiceLife,
        AssetTransDate _depreciationStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        const int MonthsInYear = 12;
        AssetLifeTime assetLifeTime;

        // If daily depreciation is used,
        // periods could be calculated based on regular calendar,
        // to count all leap years correctly.
        if (this.isDailyDepreciation(this.getDepreciationPeriod(_depreciationStartDate)))
        {
            assetLifeTime = this.calcAssetLifeTimeInDays(_depreciationStartDate, _assetServiceLife * MonthsInYear);
        }
        else
        {
            assetLifeTime = this.calcAssetLifeTime(_depreciationStartDate, _assetServiceLife);
        }

        return assetLifeTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDailyDepreciation</Name>
				<Source><![CDATA[
    private boolean isDailyDepreciation(int _numberOfPeriods)
    {
        return _numberOfPeriods >= 365;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetLifeTime</Name>
				<Source><![CDATA[
    private AssetLifeTime calcAssetLifeTime(
        TransDate _depreciationStartDate, 
        AssetServiceLife _assetServiceLife)
    {
        real temp;
        real totalPeriods;

        // Take in an account that a portion of the year is entered by a user.
        // Calculate the periods of the whole years.
        int numberOfFullYears = real2int(round(_assetServiceLife, 0));
        AssetTransDate currentYearDate = _depreciationStartDate;

        for (int i = 0; i < numberOfFullYears; i++)
        {
            if (currentYearDate)
            {
                temp = this.getDepreciationPeriod(currentYearDate);

                currentYearDate = LedgerFiscalCalendar::findNextYearStart(calendarRecId, currentYearDate);
            }

            totalPeriods = totalPeriods + temp;
        }

        // Recalculate the remainder of the service life.
        real remainingPeriods = _assetServiceLife - numberOfFullYears;

        if (remainingPeriods)
        {
            temp = any2int(this.assetDepreciationTime(currentYearDate ? currentYearDate : _depreciationStartDate));
            totalPeriods = totalPeriods + remainingPeriods * temp;
        }
        
        return real2int(decRound(totalPeriods, 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepreciationPeriod</Name>
				<Source><![CDATA[
    private real getDepreciationPeriod(AssetTransDate _currentYearDate)
    {
        real periods = any2int(this.assetDepreciationTime(_currentYearDate));

        return periods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of a subclass of the <c>AssetTableInterval</c> class.
    /// </summary>
    /// <param name="_assetAccrual">
    /// The asset accrual.
    /// </param>
    /// <param name="_calendarRecId">
    /// The record ID of the calendar to use when creating the interval; optional.
    /// </param>
    /// <param name="_isCacheTable">
    /// If ture, cache fiscal calendar tables to avoid multiple database call; optional.
    /// </param>
    /// <returns>
    /// The new instance of an <c>AssetTableInterval</c> subclass.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Calendar %1 does not exist.
    /// </exception>
    public static AssetTableInterval newFiscalCalendar(AssetAccrual _assetAccrual, RecId _calendarRecId = 0
        , boolean _isCacheTable = false
    )
    {
        if (_isCacheTable && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            return new AssetTableInterval_Fiscal_JP(_assetAccrual, _calendarRecId);
        }
        else
        {
            if (_calendarRecId)
            {
                if (FiscalCalendar::exist(_calendarRecId))
                {
                    return new AssetTableInterval_Fiscal(_assetAccrual, _calendarRecId);
                }
                else
                {
                    throw error(strFmt("@SYS25948", FiscalCalendar::find(_calendarRecId).CalendarId));
                }
            }
            else
            {
                return new AssetTableInterval_Fiscal(_assetAccrual);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the middle date of a month for a supplied date.
    /// </summary>
    /// <param name="_date">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Middle of the month date.
    /// </returns>
    public TransDate findMiddleOfMonth(TransDate _date)
    {
        return LedgerFiscalCalendar::findMiddleOfMonth(calendarRecId, _date);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>