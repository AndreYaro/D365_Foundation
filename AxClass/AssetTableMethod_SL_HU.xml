<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_SL_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class AssetTableMethod_SL_HU extends AssetTableMethod
{
    AssetDepreciationTime   periods;
    AssetAmount             periodAmount;
    AssetRevaluationAmount  revaluationAmount;
    boolean                 theEnd;
    AssetTransDate          previousDepreciationDate;
    AssetTransDate          assetLifeTimeEnd;
    AssetAmount             extraordinaryDepAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
        public AssetAmount calc()
    {
        AssetTransDate      startOfPeriod;
        AssetAmount         orgPeriodAmount;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();
            depreciationDate = min(assetLifeTimeEnd, periodEnd);
            depreciationDate = min(parmRunDate,      periodEnd);
            this.setAmountToDepreciate();
            extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId,
                                                                             periodEnd,
                                                                             assetBook.BookId,
                                                                             AssetTransType::ExtraordinaryDepreciation);

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                periods = round(periods + prevPeriods, 0);
                prevPeriods = 0;
            }

            if (assetDepreciationProfile.Method == AssetDepreciationMethod::StraightLine_HU)
            {
                this.calc_SL_ServiceLife();
            }
            else    // AssetDepreciationMethod::StraightLineLifeRemaining_HU create later
            {
                this.calc_SL_RemainingLife();
            }

            this.calcRestPeriod(startOfPeriod);

            periods -= restPeriod;

            revaluationAmount = assetBook.roundOffDepreciation(periodAmount  * this.revaluationFactor()) - periodAmount;
            periodAmount += revaluationAmount;

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   =  min(deprInterval.endPeriod(periodstart), assetLifeTimeEnd);

            periodEnd   =  min(periodEnd,parmRunDate);
            previousDepreciationDate = depreciationDate;

            if (amountToDepreciate < prevDepAmount + prevDepAmountExternal + prevDepAmountExternal + extraordinaryDepAmount + periodAmount)
            {
                periodAmount = assetBook.roundOffDepreciation(amountToDepreciate - prevDepAmount - prevDepAmountExternal - prevDepAmountExternal - extraordinaryDepAmount);
            }

            orgPeriodAmount = periodAmount;
            if (periodAmount && (! prevPeriods))
            {
                periodAmount = assetBook.roundOffDepreciation(periodAmount);
            }

            if ((! prevPeriods) &&
                ((amountToDepreciate <= prevDepAmount + periodAmount + prevDepAmountExternal + extraordinaryDepAmount) ||
                 (amountToDepreciate <= prevDepAmount + orgPeriodAmount + prevDepAmountExternal + extraordinaryDepAmount)))
            {
                theEnd = true;
                periodAmount = amountToDepreciate - (prevDepAmount + prevDepAmountExternal + extraordinaryDepAmount);
            }

            prevDepAmount += periodAmount;
        }
        else
        {
            periodAmount = 0;
        }

        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL_RemainingLife</Name>
				<Source><![CDATA[
    private void calc_SL_RemainingLife()
    {
        AssetBookTable assetBookTable = assetBook.assetBookTable();

        if (periods == 1)
        {
            periodAmount = CurrencyExchange::round((amountToDepreciate -
                                                     prevDepAmount -
                                                     prevDepAmountExternal -
                                                     extraordinaryDepAmount) /
                                                     round(periods + prevPeriods, 0),
                                                     Ledger::accountingCurrency());
        }
        else if (periods > 0)
        {
            periodAmount = (amountToDepreciate -
                            prevDepAmount -
                            prevDepAmountExternal -
                            extraordinaryDepAmount) / (assetLifeTimeEnd - periodstart + 1);
            periodAmount = CurrencyExchange::roundWithRule(
                            periodAmount * (periodEnd - periodstart + 1),
                            assetBookTable.RoundOffDepreciation,
                            RoundOffType::RoundDown);
        }
        else
        {
            periodAmount = 0;
            if (! dualDepreciation)
                theEnd = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc_SL_ServiceLife</Name>
				<Source><![CDATA[
        private void calc_SL_ServiceLife()
    {
        if (assetBook.LifeTime)
        {
            periodAmount = (amountToDepreciate    -
                            prevDepAmount         -
                            prevDepAmountExternal -
                            extraordinaryDepAmount) / (assetLifeTimeEnd - periodstart + 1);
            periodAmount = periodAmount * (periodEnd - periodstart + 1);
        }
        else
        {
            periodAmount = 0;
            if (! dualDepreciation)
                theEnd = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
        protected void calcRestPeriod(AssetTransDate _startOfPeriod)
    {
        AssetBookTable      assetBookTable = AssetBookTable::find(assetBook.BookId);
        super(_startOfPeriod);

        if (calculatePrevPeriods && ! amountToDepreciate)
        {
            prevPeriods += restPeriod;
        }
        else
        {
            calculatePrevPeriods = false;
            periodAmount = assetBookTable.roundOffDepreciation(periodAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        #define.Monthly(1)
    #define.Quarterly(3)
    #define.HalfYearly(6)
    #define.Yearly(12)
    public void init()
    {
        int periodFactor;

        super();

        switch (assetDepreciationProfile.Accrual)
        {
            case AssetAccrual::Monthly    : periodFactor = #Monthly; break;
            case AssetAccrual::Quarterly  : periodFactor = #Quarterly; break;
            case AssetAccrual::HalfYearly : periodFactor = #HalfYearly; break;
            case AssetAccrual::Yearly     : periodFactor = #Yearly; break;
            default:                        periodFactor =  1;
        }
        assetLifeTimeEnd = dateMthFwd(assetBook.DepreciationStartDate - 1,
                                      assetBook.LifeTime * periodFactor);
        periodEnd = min(periodEnd, assetLifeTimeEnd);
        periodEnd = min(periodEnd, parmRunDate);

        periods  = assetBook.LifeTimeRest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(AssetBook _assetBook, AssetTransDate _assetTransDate, boolean _dualDepreciation, boolean _depreciationAltProfile, boolean _depreciationExtProfile, AssetBudgetModelId _assetBudgetModelId)
    {
        // Needed to instantiate correct type when running under CIL
        super(_assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile, _depreciationExtProfile, _assetBudgetModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        public boolean next()
    {
        if (theEnd)
            return false;

        if (parmRunDate <= baseDate)
            return false;

        this.setDepDate();
        depreciationDate = min(assetLifeTimeEnd, periodEnd);
        depreciationDate = min(parmRunDate,      periodEnd);

    //
    //  This prevents depreciations with invalid dates from
    //  being handled.
    //
        if (!depreciationDate ||
            depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart || periodEnd >  parmRunDate)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revaluationAmount</Name>
				<Source><![CDATA[
        public AssetRevaluationAmount revaluationAmount()
    {
        return revaluationAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>