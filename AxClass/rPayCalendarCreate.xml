<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayCalendarCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class rPayCalendarCreate extends RunBase
{
    DialogRunbase       dialog;
    DialogField         dialogCalendar;
    DialogField         dialogFromDate;
    DialogField         dialogToDate;
    DialogField         dialogUseBasic;
    DialogField         dialogWorkTime;
    RPayCalendarId      calendarId;
    TransDate           fromDate;
    TransDate           toDate;
    RPayTimeId          payTimeId;
    RPayCalendarTable   payCalendarTable;
    Object              callerForm;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
         calendarId,
         fromDate,
         toDate,
         payTimeId
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Args    args;
        FormRun formRun;
        ;
        args    = new Args(formStr(RPayCalendarCreateDialog));
        formRun = classfactory.formRunClass(args);

        args.caller(this);
        formRun.init();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        calendarId  = dialogCalendar.value();
        fromDate    = dialogFromDate.value();
        toDate      = dialogToDate.value();
        payTimeId   = dialogWorkTime.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        ;
        calendarId = payCalendarTable.CalendarId;
        fromDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        toDate     = nextYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        payTimeId  = payCalendarTable.PayTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendar</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayCalendarId  parmCalendar(RPayCalendarId _calendarId = calendarId)
    {
        ;
        calendarId       = _calendarId;
        payCalendarTable = RPayCalendarTable::find(calendarId);
        payTimeId        = payCalendarTable.PayTimeId;
        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        ;
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayTimeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayTimeId parmPayTimeId(RPayTimeId _payTime = payTimeId)
    {
        ;
        payTimeId = _payTime;
        return payTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        ;
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            ttsbegin;

            if (! this.validate())
            {
                throw error("@SYS18447");
            }

            this.updateCalender();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass, 1);
        ;
        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalender</Name>
				<Source><![CDATA[
    #TimeConstants
    private void updateCalender()
    {
        RPayTimeLine            payTimeLine;
        RPayTimeTable           payTimeTable;
        RPayCalendarDate        payCalendarDate;
        RPayCalendarDateLine    payCalendarDateLine;
        RPayHolidaysTable       payHolidaysTable;
        TransDate               transDate = fromDate;

        void createCalendarLine(int dayOfWeek = RPayCalendarDate::getNoPeriodDay(payTimeTable, transDate, fromDate))
        {
            if (payTimeId)
            {
                while select payTimeLine
                    where payTimeLine.PayTimeId   == payTimeId &&
                          payTimeLine.Weekday     == dayOfWeek
                {
                    payCalendarDate.PayDayType = RPayDayType::WorkDay;
                    payCalendarDateLine.clear();
                    payCalendarDateLine.initFromPayCalendarDate(payCalendarDate);
                    payCalendarDateLine.initFromPayTimeLine(payTimeLine);
                    payCalendarDateLine.insert();
                }
            }
        }
        ;

        ttsbegin;

        while (transDate <= toDate)
        {
            select firstonly forupdate payCalendarDate
                where payCalendarDate.CalendarId == calendarId &&
                      payCalendarDate.TransDate  == transDate;

            if (payCalendarDate)
                payCalendarDate.delete();

            payCalendarDate.CalendarId = calendarId;
            payCalendarDate.TransDate  = transDate;
            payCalendarDate.PayDayType = RPayDayType::Holiday;

            select firstonly PayDayType from payHolidaysTable
                where payHolidaysTable.TransDate == transDate;

            switch (payCalendarTable.PayCalendarType)
            {
                case RPayCalendarType::FiveDay:

                    if (dayOfWk(transDate) <= #dayOfWeekFriday)
                    {
                        if (! payHolidaysTable || payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                        {
                            createCalendarLine();
                        }
                    }
                    else
                    {
                        if (payHolidaysTable && payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                        {
                            createCalendarLine(1);
                        }
                    }
                    break;

                case RPayCalendarType::SixDay:

                    if (dayOfWk(transDate) <= #dayOfWeekSaturday)
                    {
                        if (! payHolidaysTable || payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                        {
                            createCalendarLine();
                        }
                    }
                    else
                    {
                        if (payHolidaysTable && payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                        {
                            createCalendarLine(1);
                        }
                    }
                    break;

                case RPayCalendarType::SevenDays:

                    if (dayOfWk(transDate) <= #dayOfWeekSunday)
                    {
                        if (! payHolidaysTable || payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                        {
                            createCalendarLine();
                        }
                    }
                    else
                    {
                        if (payHolidaysTable && payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                        {
                            createCalendarLine(1);
                        }
                    }
                    break;

                case RPayCalendarType::Other:
                    payTimeTable = RPayTimeTable::find(payTimeId);
                    if (! payCalendarTable.Holiday ||
                        ! payHolidaysTable         ||
                        payHolidaysTable.PayDayType == RPayDayType::WorkDay)
                    {
                        createCalendarLine();
                    }
                    break;

                default:
                    throw error(strFmt("@SYS57821", payCalendarTable.PayCalendarType));
            }
            payCalendarDate.insert();

            transDate++;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean  ok;
        ;
        ok = super();

        if (! calendarId)
        {
            ok = checkFailed("@SYS25956");
        }

        if (! RPayCalendarTable::checkExist(calendarId))
        {
            ok = false;
        }

        if (payTimeId && ! RPayTimeTable::checkExist(payTimeId))
        {
            ok = false;
        }

        if (fromDate > toDate)
        {
            ok = checkFailed("@SYS16982");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP281";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        RPayCalendarCreate  payCalendarCreate;
        Object              callerForm;
        ;
        switch (args.dataset())
        {
            case tableNum(RPayCalendarDate):
                payCalendarCreate = RPayCalendarCreate::newPayCalendarDate(args.record(), args);
                break;
            default:
                throw error(strFmt("@GLS105568", funcName()));
        }

        if (payCalendarCreate.prompt())
        {
            payCalendarCreate.runOperation();
        }

        if (args.caller())
        {
            callerForm = args.caller();
            callerForm.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPayCalendarDate</Name>
				<Source><![CDATA[
    private static RPayCalendarCreate newPayCalendarDate(RPayCalendarDate    _payCalendarDate,
                                                         Args                _args)
    {
        RPayCalendarCreate  payCalendarCreate = new RPayCalendarCreate();
        RPayCalendarTable   payCalendarTable  = RPayCalendarTable::find(_payCalendarDate.CalendarId);
        ;
        payCalendarCreate.getLast();
        payCalendarCreate.parmCalendar(payCalendarTable.CalendarId);

        if (! payCalendarCreate.parmCalendar() && _args.caller())
        {
            payCalendarCreate.parmCalendar(_args.caller().calendarId());
        }

        return payCalendarCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>