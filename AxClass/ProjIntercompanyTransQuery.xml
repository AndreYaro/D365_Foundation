<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyTransQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class performs a query on the transactions that can be invoiced to
/// another legal entity.
/// </summary>
public class ProjIntercompanyTransQuery
{
    ProjIntercompanyTransQueryParams            params;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildExpenseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve all the expenses entered against a project.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object to retrieve expenses records from <c>TrvExpTrans</c> table for the project.
    /// </returns>
    protected Query buildExpenseQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbdsExpTrans;
        ProjId                  projId;

        if (params.parmProjectQuery())
        {
            query = params.parmProjectQuery();
            qbdsExpTrans = query.dataSourceTable(tableNum(ProjTable)).addDataSource(tableNum(TrvExpTrans));
            qbdsExpTrans.joinMode(JoinMode::InnerJoin);
            qbdsExpTrans.fetchMode(QueryFetchMode::One2One);
            qbdsExpTrans.relations(false);
            qbdsExpTrans.addLink(fieldNum(ProjTable, projId), fieldNum(TrvExpTrans, projId));
            qbdsExpTrans.addLink(fieldNum(ProjTable, DataAreaId), fieldNum(TrvExpTrans, InterCompanyLE));
        }
        else
        {
            query = new Query();
            qbdsExpTrans = query.addDataSource(tableNum(TrvExpTrans));
        }

        qbdsExpTrans.addRange(fieldNum(TrvExpTrans, IntercompanyLE)).value(params.parmBorrowingLE());
        qbdsExpTrans.addRange(fieldNum(TrvExpTrans, ApprovalStatus)).value(int2str(TrvAppStatus::Ledger));
        qbdsExpTrans.addRange(fieldNum(TrvExpTrans, ReferenceDataAreaID)).value(curext());
        qbdsExpTrans.addRange(fieldNum(TrvExpTrans, IntercompanyBilled)).value(int2str(false));

        qbdsExpTrans.addRange(
                        fieldNum(TrvExpTrans, LineType)).value(strfmt('(%1 != %2)',
                        fieldStr(TrvExpTrans, LineType),
                        any2int(TrvExpLineType::ItemizedHeader)));

        qbdsExpTrans.addRange(
                        fieldNum(TrvExpTrans, SplitLineType)).value(strfmt('(%1 != %2)',
                        fieldStr(TrvExpTrans, SplitLineType),
                        any2int(TrvExpSplitLineType::SplitHeader)));

        qbdsExpTrans.addOrderByField(fieldNum(TrvExpTrans, ProjId));

        if (params.parmFromDate() || params.parmToDate())
        {
            qbdsExpTrans.addRange(fieldNum(TrvExpTrans, TransDate))
                .value(SysQuery::range(params.parmFromDate(), params.parmToDate()));
        }

        if (params.parmProjectId())
        {
            projId = params.parmProjectId();
            if (params.parmIncludeSubprojects())
            {
                projId += '*';
            }
            qbdsExpTrans.addRange(fieldNum(TrvExpTrans, ProjId)).value(projId);
        }
        else
        {
            qbdsExpTrans.addRange(fieldNum(TrvExpTrans, ProjId)).value(SysQuery::valueNotEmptyString());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildHoursQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve all the timesheets entered against a project.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object to retrieve timesheet records from <c>TSTimesheetTrans</c> table for the project.
    /// </returns>
    protected Query buildHoursQuery()
    {
        ProjId                  projid;
        Query                   hoursQuery;
        QueryBuildDataSource    qbdsHours;
        QueryBuildDataSource    qbdsTsLine;
        QueryBuildDataSource    qbdsTsLineWeek;

        hoursQuery = new Query();

        qbdsHours = hoursQuery.addDataSource(tableNum(TSTimesheetTrans));
        qbdsHours.addRange(fieldNum(TSTimesheetTrans, IntercompanyBilled)).value(int2str(false));
        qbdsHours.addRange(fieldNum(TSTimesheetTrans, ApprovalStatus)).value(int2str(TSAppStatus::Ledger));

        qbdsTsLineWeek = qbdsHours.addDataSource(tableNum(TSTimesheetLineWeek));
        qbdsTsLineWeek.relations(true);
        qbdsTsLineWeek.joinMode(JoinMode::InnerJoin);

        qbdsTsLine = qbdsTsLineWeek.addDataSource(tableNum(TSTimesheetLine));
        qbdsTsLine.relations(true);
        qbdsTsLine.joinMode(JoinMode::InnerJoin);
        qbdsTsLine.addOrderByField(fieldNum(TSTimesheetLine, ProjId));

        if (params.parmFromDate() || params.parmToDate())
        {
            qbdsHours.addRange(fieldNum(TSTimesheetTrans, TransDate))
                .value(SysQuery::range(params.parmFromDate(), params.parmToDate()));
        }

        qbdsTsLine.addRange(fieldNum(TSTimesheetLine, ProjectDataAreaId)).value(SysQuery::value(params.parmBorrowingLE()));

        if (params.parmProjectId())
        {
            projId = params.parmProjectId();
            if (params.parmIncludeSubprojects())
            {
                projId += '*';
            }
            qbdsTsLine.addRange(fieldNum(TSTimesheetLine, ProjId)).value(projId);
        }

        return hoursQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectAdvancedJournalLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve all the project advance journals.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object to retrieve project advance journal records from <c>ProjAdvancedJournalLine</c> table for the project.
    /// </returns>
    protected Query buildProjectAdvancedJournalLinesQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsLine = query.addDataSource(tableNum(ProjAdvancedJournalLine));
        qbdsLine.addRange(fieldNum(ProjAdvancedJournalLine, IntercompanyBilled)).value(int2str(false));
        qbdsLine.addOrderByField(fieldNum(ProjAdvancedJournalLine, ProjId));

        QueryBuildDataSource qbdsHeader = qbdsLine.addDataSource(tableNum(ProjAdvancedJournal));
        qbdsHeader.relations(true);
        qbdsHeader.joinMode(JoinMode::InnerJoin);
        qbdsHeader.addRange(fieldNum(ProjAdvancedJournal, Status)).value(any2Str(ProjAdvancedJournalStatus::Posted));

        if (params.parmFromDate() || params.parmToDate())
        {
            qbdsLine.addRange(fieldNum(ProjAdvancedJournalLine, AccountingDate))
                .value(SysQuery::range(params.parmFromDate(), params.parmToDate()));
        }

        qbdsLine.addRange(fieldNum(ProjAdvancedJournalLine, ProjDataAreaId)).value(SysQuery::value(params.parmBorrowingLE()));

        if (params.parmProjectId())
        {
            ProjId projId = params.parmProjectId();
            if (params.parmIncludeSubprojects())
            {
                projId += '*';
            }
            qbdsLine.addRange(fieldNum(ProjAdvancedJournalLine, ProjId)).value(projId);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProjectIdSetFromProjectQuery</Name>
				<Source><![CDATA[
    private Set buildProjectIdSetFromProjectQuery()
    {
        Set         projIdSet;
        QueryRun    projQueryRun;
        ProjTable   currProjTable;

        if (params.parmProjectQuery())
        {
            changeCompany (params.parmBorrowingLE())
            {
                projQueryRun = new QueryRun(params.parmProjectQuery());
                projIdSet = new Set(Types::String);
                while (projQueryRun.next())
                {
                    currProjTable = projQueryRun.get(tableNum(ProjTable));
                    projIdSet.add(currProjTable.ProjId);
                }
            }
        }

        return projIdSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVendorInvoiceLinesQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve all the project invoices.
    /// </summary>
    /// <returns>
    /// <c>Query</c> object to retrieve vendor invoice line records from <c>VendInvoiceInfoLine_Project</c> table for the project.
    /// </returns>
    protected Query buildVendorInvoiceLinesQuery()
    {
        ProjId                  projid;
        Query                   linesQuery;
        QueryBuildDataSource    qbdsLines;
        QueryBuildDataSource    qbdsProjLinesExt;
        QueryBuildDataSource    qbdsHeader;

        linesQuery = new Query();

        qbdsProjLinesExt = linesQuery.addDataSource(tableNum(VendInvoiceInfoLine_Project));
        qbdsProjLinesExt.addRange(fieldNum(VendInvoiceInfoLine_Project, IntercompanyBilled)).value(int2str(false));
        qbdsProjLinesExt.addRange(fieldNum(VendInvoiceInfoLine_Project, ProjDataAreaId)).value(SysQuery::value(params.parmBorrowingLE()));
        qbdsProjLinesExt.addOrderByField(fieldNum(VendInvoiceInfoLine_Project, ProjId));

        qbdsLines = qbdsProjLinesExt.addDataSource(tableNum(VendInvoiceInfoLine));
        qbdsLines.relations(true);
        qbdsLines.joinMode(JoinMode::InnerJoin);

        qbdsHeader = qbdsLines.addDataSource(tableNum(VendInvoiceInfoTable));
        qbdsHeader.relations(true);
        qbdsHeader.joinMode(JoinMode::ExistsJoin);
        qbdsHeader.addRange(fieldNum(VendInvoiceInfoTable, ParmJobStatus)).value(QueryValue(ParmJobStatus::Executed));

        if (params.parmFromDate() || params.parmToDate())
        {
            qbdsHeader.addRange(fieldNum(VendInvoiceInfoTable, TransDate))
                .value(SysQuery::range(params.parmFromDate(), params.parmToDate()));
        }

        if (params.parmProjectId())
        {
            projId = params.parmProjectId();
            if (params.parmIncludeSubprojects())
            {
                projId += '*';
            }
            qbdsProjLinesExt.addRange(fieldNum(VendInvoiceInfoLine_Project, ProjId)).value(projId);
        }

        return linesQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>ProjIntercompanyInvoiceOrigTrans</c> object for the current expense
    /// transaction in a <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object to get the expense transaction from.
    /// </param>
    /// <returns>
    /// A <c>ProjIntercompanyInvoiceOrigTrans</c> for the current expense.
    /// </returns>
    protected ProjIntercompanyInvoiceOrigTrans getExpenseTrans(QueryRun _queryRun)
    {
        return ProjIntercompanyInvoiceOrigExpense::construct(_queryRun.get(tableNum(TrvExpTrans)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoursTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>ProjIntercompanyInvoiceOrigTrans</c> object for the current timesheet
    /// transaction in a <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object to get the timesheet transaction from.
    /// </param>
    /// <returns>
    /// A <c>ProjIntercompanyInvoiceOrigTrans</c> for the current timesheet.
    /// </returns>
    protected ProjIntercompanyInvoiceOrigTrans getHoursTrans(QueryRun _queryRun)
    {
        return ProjIntercompanyInvoiceOrigTimesheet::construct(_queryrun.get(tableNum(TSTimesheetTrans)),
                                                               _queryrun.get(tableNum(TSTimesheetLineWeek)),
                                                               _queryrun.get(tableNum(TSTimesheetLine)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjAdvancedJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>ProjIntercompanyInvoiceOrigTrans</c> object for the current project advanced journal
    /// transaction in a <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object to get the project advanced journal transaction from.
    /// </param>
    /// <returns>
    /// A <c>ProjIntercompanyInvoiceOrigTrans</c> for the current project advanced journal line.
    /// </returns>
    protected ProjIntercompanyInvoiceOrigTrans getProjAdvancedJournalLine(QueryRun _queryRun)
    {
        return ProjIntercompanyInvoiceOrigProjAdvancedJournal::construct(_queryRun.get(tableNum(ProjAdvancedJournalLine)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of <c>ProjIntercompanyInvoiceOrigTrans</c> based on the query parameters.
    /// </summary>
    /// <returns>
    /// A list of <c>ProjIntercompanyInvoiceOrigTrans</c> based on the query parameters.
    /// </returns>
    public List getTransList()
    {
        Query                               hoursQuery;
        Query                               expenseQuery;
        Query                               projAdvancedJournalLinesQuery;
        Query                               vendorInvoiceLinesQuery;
        QueryRun                            queryrun;
        ProjTable                           currProjTable;
        TSTimesheetLine                     currTsLine;
        TrvExpTrans                         currExpLine;
        ProjAdvancedJournalLine             currProjAdvancedJournalLine;
        VendInvoiceInfoLine_Project         currProjVendLine;
        List                                transList;
        Set                                 projIdsToInclude;

        transList = new List(Types::Class);

        if (!params.parmBorrowingLE())
        {
            return transList;
        }

        if (params.parmIncludeHours())
        {
            // If a project query was passed in, we need to run it separately because the project records are
            // in the borrowing entity, while the timesheets are in the lending entity. Since both are company-based
            // tables, we cannot join them in the same query.
            projIdsToInclude = this.buildProjectIdSetFromProjectQuery();
            hoursQuery = this.buildHoursQuery();
            queryrun = new QueryRun(hoursQuery);
            while (queryrun.next())
            {
                currTsLine = queryrun.get(tableNum(TSTimesheetLine));
                if (params.parmContractId())
                {
                    if (currTsLine.ProjId != currProjTable.ProjId)
                    {
                        // We're interested in the project information from another legal entity, so
                        // retrieve it separately
                        currProjTable = ProjTable::findByDataArea(currTsLine.ProjId, params.parmBorrowingLE());
                    }
                    if (params.parmContractId() != currProjTable.ProjInvoiceProjId)
                    {
                        continue;
                    }
                }
                if (projIdsToInclude && projIdsToInclude.in(currTsLine.ProjId) == false)
                {
                    continue;
                }
                transList.addEnd(this.getHoursTrans(queryrun));
            }
        }

        if (params.parmIncludeExpenses())
        {
            expenseQuery = this.buildExpenseQuery();
            queryrun = new QueryRun(expenseQuery);
            while (queryrun.next())
            {
                currExpLine = queryrun.get(tableNum(TrvExpTrans));
                if (params.parmContractId())
                {
                    if (currExpLine.ProjId != currProjTable.ProjId)
                    {
                        currProjTable = ProjTable::findByDataArea(currExpLine.ProjId, params.parmBorrowingLE());
                    }
                    if (params.parmContractId() != currProjTable.ProjInvoiceProjId)
                    {
                        continue;
                    }
                }
                transList.addEnd(this.getExpenseTrans(queryrun));
            }
        }

        if (params.parmIncludeProjAdvancedJournalLines())
        {
            projIdsToInclude = this.buildProjectIdSetFromProjectQuery();
            projAdvancedJournalLinesQuery = this.buildProjectAdvancedJournalLinesQuery();
            queryrun = new QueryRun(projAdvancedJournalLinesQuery);
            while (queryrun.next())
            {
                currProjAdvancedJournalLine = queryrun.get(tableNum(ProjAdvancedJournalLine));
                if (params.parmContractId())
                {
                    if (currProjAdvancedJournalLine.ProjId != currProjTable.ProjId)
                    {
                        currProjTable = ProjTable::findByDataArea(currProjAdvancedJournalLine.ProjId, params.parmBorrowingLE());
                    }
                    if (params.parmContractId() != currProjTable.ProjInvoiceProjId)
                    {
                        continue;
                    }
                }
                if (projIdsToInclude && projIdsToInclude.in(currProjAdvancedJournalLine.ProjId) == false)
                {
                    continue;
                }
                transList.addEnd(this.getProjAdvancedJournalLine(queryrun));
            }
        }

        if (params.parmIncludeVendorInvoiceLines())
        {
            vendorInvoiceLinesQuery = this.buildVendorInvoiceLinesQuery();
            queryrun = new queryrun(vendorInvoiceLinesQuery);
            while (queryrun.next())
            {
                currProjVendLine = queryrun.get(tableNum(VendInvoiceInfoLine_Project));
                if (params.parmContractId())
                {
                    if (currProjVendLine.ProjId != currProjTable.ProjId)
                    {
                        currProjTable = ProjTable::findByDataArea(currProjVendLine.ProjId, params.parmBorrowingLE());
                    }
                    if (params.parmContractId() != currProjTable.ProjInvoiceProjId)
                    {
                        continue;
                    }
                }
                transList.addEnd(this.getVendInvoiceLineTrans(queryrun));
            }
        }
        return transList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceLineTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>ProjIntercompanyInvoiceOrigTrans</c> object for the current vendor
    /// invoice line in a <c>QueryRun</c> object.
    /// </summary>
    /// <param name="_queryRun">
    /// The <c>QueryRun</c> object to get the vendor invoice line from.
    /// </param>
    /// <returns>
    /// A <c>ProjIntercompanyInvoiceOrigTrans</c> for the current vendor invoice line.
    /// </returns>
    protected ProjIntercompanyInvoiceOrigTrans getVendInvoiceLineTrans(QueryRun _queryRun)
    {
        return ProjIntercompanyInvoiceOrigVendInvoice::construct(_queryrun.get(tableNum(VendInvoiceInfoLine)),
                                                                 _queryRun.get(tableNum(VendInvoiceInfoLine_Project)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyTransQuery</c> with given
    /// parameters from a <c>ProjIntercompanyTransQueryParams</c> object.
    /// </summary>
    /// <param name="_queryParams">
    /// An <c>ProjIntercompanyTransQueryParams</c> object with the parameters for the query.
    /// </param>
    protected void new(ProjIntercompanyTransQueryParams _queryParams)
    {
        params = _queryParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ProjIntercompanyTransQuery</c> with given
    /// parameters from a <c>ProjIntercompanyTransQueryParams</c> object.
    /// </summary>
    /// <param name="_queryParams">
    /// An <c>ProjIntercompanyTransQueryParams</c> object with the parameters for the query.
    /// </param>
    /// <returns>
    /// A new <c>ProjIntercompanyTransQuery</c> object.
    /// </returns>
    public static  ProjIntercompanyTransQuery construct(ProjIntercompanyTransQueryParams _queryParams)
    {
        return new ProjIntercompanyTransQuery(_queryParams);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCompanyLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an intercompany company lookup for the legal entity which is setup in <c>LedgerInterCompany</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// A form control object for which we need to provide the lookup.
    /// </param>
    /// <returns>
    /// An intercompany company lookup.
    /// </returns>
    public static void interCompanyCompanyLookup(FormControl _formControl)
    {
        LedgerInterCompany      ledgerInterCompany;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        SysTableLookup          sysTableLookup;

        sysTableLookup = SysTableLookup::newParameters(tableNum(CompanyInfo), _formControl);
        sysTableLookup.addLookupfield(fieldNum(CompanyInfo, DataArea));
        sysTableLookup.setLabel("@SYS318577");
        sysTableLookup.addLookupfield(fieldNum(CompanyInfo, Name));
        sysTableLookup.addSelectionField(fieldNum(CompanyInfo, DataArea));

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(CompanyInfo));
        queryBuildDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea), SortOrder::Ascending);

        while select DestinationCompany from ledgerInterCompany
                where ledgerInterCompany.OriginatingCompany == curExt()
        {
            queryBuildDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(ledgerInterCompany.DestinationCompany);
        }

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>