<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationRuleParser</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankReconciliationRuleParser
{
    private const str Asterisk = '*';
    private const str BeginWith = ' like "%1*"';
    private const str CombineRange = '%1 && (%2)';
    private const str Contain = ' like "*%1*"';
    private const str EndWith = ' like "*%1"';
    private const str Equal = '=';
    private const str GreaterThan = '> ';
    private const str GreaterThanOrEqual = '>=';
    private const str LessThan = '< ';
    private const str LessThanOrEqual = '<=';
    private const str Minus = '-';
    private const str NotEqual = '!=';
    private const str OppositeAmount = '*-1';
    private const str Plus = '+';
    private const str Range = '..';
    private const str SingleRange = '(%1)';
    private const str StringWrapper = '"%1"';
    internal const str MatchActionTypeNotEqual = 'MatchActionType != %1';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRangeValueString</Name>
				<Source><![CDATA[
    internal static BankReconciliationMatchFieldValue getRangeValueString(BankReconciliationMatchOperatorType _operator, anyType _compareValue)
    {
        BankReconciliationMatchFieldValue value;

        switch (_operator)
        {
            case BankReconciliationMatchOperatorType::Equals:
                value = SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::NotEqual:
                value = SysQuery::valueNot(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::GreaterThan:
                value = GreaterThan + SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::GreaterThanOrEquals:
                value = SysQuery::value(_compareValue) + Range;
                break;

            case BankReconciliationMatchOperatorType::LessThan:
                value = LessThan + SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::LessThanOrEquals:
                value = Range + SysQuery::value(_compareValue);
                break;

            case BankReconciliationMatchOperatorType::Contains:
                value = SysQuery::valueLike(SysQuery::value(_compareValue));
                break;

            case BankReconciliationMatchOperatorType::BeginWith:
                value = SysQuery::valueLikeAfter(SysQuery::value(_compareValue));
                break;

            case BankReconciliationMatchOperatorType::EndWith:
                value = Asterisk + SysQuery::value(_compareValue);
                break;

            default:
                break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLRangeValueString</Name>
				<Source><![CDATA[
    internal static BankReconciliationMatchFieldValue getSQLRangeValueString(BankReconciliationMatchOperatorType _operator, anyType _compareValue, Types _type)
    {
        BankReconciliationMatchFieldValue value;
        str compareValue = _type == Types::Date ? DateTimeUtil::toStr(_compareValue) : SysQuery::value(_compareValue);

        if (compareValue == xSysQuery::valueEmptyString())
        {
            compareValue = '';
        }

        if (_type == Types::Date && !compareValue)
        {
            compareValue = DateTimeUtil::toStr(str2Date(_compareValue, 213));
        }

        switch (_operator)
        {
            case BankReconciliationMatchOperatorType::Equals:
                value = Equal + BankReconciliationRuleParser::convertCompareValue(_type, compareValue);
                break;

            case BankReconciliationMatchOperatorType::NotEqual:
                value = NotEqual + BankReconciliationRuleParser::convertCompareValue(_type, compareValue);
                break;

            case BankReconciliationMatchOperatorType::GreaterThan:
                value = GreaterThan + BankReconciliationRuleParser::convertCompareValue(_type, compareValue);
                break;

            case BankReconciliationMatchOperatorType::GreaterThanOrEquals:
                value = GreaterThanOrEqual + BankReconciliationRuleParser::convertCompareValue(_type, compareValue);
                break;

            case BankReconciliationMatchOperatorType::LessThan:
                value = LessThan + BankReconciliationRuleParser::convertCompareValue(_type, compareValue);
                break;

            case BankReconciliationMatchOperatorType::LessThanOrEquals:
                value = LessThanOrEqual + BankReconciliationRuleParser::convertCompareValue(_type, compareValue);
                break;

            case BankReconciliationMatchOperatorType::Contains:
                value = strFmt(Contain, compareValue);
                break;

            case BankReconciliationMatchOperatorType::BeginWith:
                value = strFmt(BeginWith, compareValue);
                break;

            case BankReconciliationMatchOperatorType::EndWith:
                value = strFmt(EndWith, compareValue);
                break;

            default:
                break;
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialOperatorType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the operator type needs to be specially handled.
    /// </summary>
    /// <param name = "_operatorType">The operator type.</param>
    /// <returns>True if the operator type needs to be specially handled, otherwise false.</returns>
    internal static boolean isSpecialOperatorType(BankReconciliationMatchOperatorType _operatorType)
    {
        return _operatorType == BankReconciliationMatchOperatorType::In;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComparedTableFieldId</Name>
				<Source><![CDATA[
    internal static FieldId getComparedTableFieldId(FieldId _comparedFieldId, Common _comparedTable)
    {
        FieldId comparedTableFieldId = _comparedFieldId;
        switch (_comparedTable.TableId)
        {
            case tableNum(BankReconciliationGroupStatementOpenTmp):
                comparedTableFieldId = BankReconciliationGroupStatementOpenTmp::getFieldIdFromStatementOpen(_comparedFieldId);
                break;

            case tableNum(BankReconciliationGroupDocumentOpenTmp):
                comparedTableFieldId = BankReconciliationGroupDocumentOpenTmp::getFieldIdFromDocumentOpen(_comparedFieldId);
                break;

            default:
                break;
        }
        return comparedTableFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineRanges</Name>
				<Source><![CDATA[
    internal static str combineRanges(str _preRange, str _newRange)
    {
        return _preRange == '' ? strFmt(SingleRange, _newRange) : strFmt(CombineRange, _preRange, _newRange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompareValueFromField</Name>
				<Source><![CDATA[
    internal static anytype getCompareValueFromField(
        Types _type,
        anytype _comparedFieldValue,
        BankReconciliationMatchFieldValue _comparedFieldExpression)
    {
        anytype result;

        if (_comparedFieldExpression)
        {
            result = BankReconciliationRuleParser::calculateCompareFieldExpression(
                _type,
                _comparedFieldValue,
                _comparedFieldExpression);
        }
        else
        {
            result = _comparedFieldValue;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCompareFieldExpression</Name>
				<Source><![CDATA[
    internal static anytype calculateCompareFieldExpression(
        Types _type,
        anytype _comparedFieldValue,
        BankReconciliationMatchFieldValue _expression)
    {
        anyType result;

        str operator = substr(_expression, 0, strLen(Plus));
        str expressionString = subStr(_expression,
            strLen(Plus) + 1,
            strLen(_expression) - strLen(Plus));

        anytype expressionValue = BankReconciliationRuleParser::convertExpressionStringToExpressionValue(_type, expressionString);

        switch (operator)
        {
            case Plus:
                result = _comparedFieldValue + expressionValue;
                break;
            case Minus:
                result = _comparedFieldValue - expressionValue;
                break;
            case Asterisk:
                result = _comparedFieldValue * expressionValue;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldIdFromFieldLabel</Name>
				<Source><![CDATA[
    internal static FieldId getFieldIdFromFieldLabel(
        TableId _tableId,
        FieldLabel _fieldLabel)
    {
        DictTable dictTable = new DictTable(_tableId);
        FieldId fieldId;

        if (_fieldLabel)
        {
            for (Counter counter = 1; counter <= dictTable.fieldCnt(); counter++)
            {
                DictField dictField = new DictField(_tableId, dictTable.fieldCnt2Id(counter));
                // Prerequisite is the field label is unique
                if (dictField.label() == _fieldLabel)
                {
                    fieldId = dictTable.fieldCnt2Id(counter);
                    break;
                }
            }

            if (!fieldId)
            {
                throw error("@GLS222256");
            }
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTypeForField</Name>
				<Source><![CDATA[
    internal static Types getTypeForField(TableId _tableId, FieldId _fieldId)
    {
        DictField dictField = new DictField(_tableId, _fieldId);

        return dictField.baseType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertEnumCompareValueToIndex</Name>
				<Source><![CDATA[
    internal static anytype convertEnumCompareValueToIndex(TableId _tableId, FieldId _fieldId, anytype compareValue)
    {
        DictField dictField = new DictField(_tableId, _fieldId);
        EnumId enumId = dictField.enumId();
        SysDictEnum dicEnum = new SysDictEnum(enumId);
        anytype comparedValueIndex = dicEnum.value2Index(compareValue);
        return comparedValueIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertExpressionStringToExpressionValue</Name>
				<Source><![CDATA[
    private static anytype convertExpressionStringToExpressionValue(Types _type, BankReconciliationMatchFieldValue _value)
    {
        anytype value;

        switch (_type)
        {
            case Types::Enum:
            case Types::Integer:
            case Types::Date:
                value = str2int(_value);
                break;

            case Types::Real:
                value = str2num(_value);
                break;

            case Types::String:
                value = _value;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCompareValue</Name>
				<Source><![CDATA[
    private static str convertCompareValue(Types _type, str _compareValue)
    {
        return _type == Types::String ? strFmt(StringWrapper, _compareValue) : _compareValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>