<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSProcessXML_Load</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Serializes the transportation management information related to the load to XML file.
/// </summary>
class TmsProcessXML_Load extends TMSProcessXML_Base
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beginFillingSegmentTable</Name>
				<Source><![CDATA[
    private TMSRouteSegmentTable beginFillingSegmentTable(XmlNode _xmlNode)
    {
        TMSCarrierCode              shipmentCarrier;
        TMSCarrierServiceCode       shipmentService;
        TMSCarrierGroupCode         shipmentGroup;
        TMSModeCode                 shipmentMode;
        TMSFreightTermCode          shipmentFreight;
        TMSRouteSegmentTable        segmentTable;

        shipmentCarrier = this.returnNamedNode(_xmlNode, #carrier);
        shipmentService = this.returnNamedNode(_xmlNode, #carrierService);
        shipmentGroup   = this.returnNamedNode(_xmlNode, #carrierGroup);
        shipmentMode    = this.returnNamedNode(_xmlNode, #modeCode);
        shipmentFreight = this.returnNamedNode(_xmlNode, #freightTerm);

        segmentTable.RefTableId          = commonRec.TableId;
        segmentTable.RefRecId            = commonRec.RecId;
        segmentTable.CarrierCode         = shipmentCarrier   ? shipmentCarrier   : segmentCarrier;
        segmentTable.CarrierServiceCode  = shipmentService   ? shipmentService   : segmentService;
        segmentTable.CarrierGroupCode    = shipmentGroup     ? shipmentGroup     : segmentGroup;
        segmentTable.ModeCode            = shipmentMode      ? shipmentMode      : segmentMode;
        segmentTable.FreightTermCode     = shipmentFreight   ? shipmentFreight   : segmentFreight;

        segmentTable.CarrierCode         = segmentTable.CarrierCode ? segmentTable.CarrierCode : carrierCode;
        segmentTable.CarrierServiceCode  = segmentTable.CarrierServiceCode ? segmentTable.CarrierServiceCode : carrierServiceCode;
        segmentTable.ModeCode            = segmentTable.ModeCode ? segmentTable.ModeCode : mode;

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates segment record tied to a route
    /// </summary>
    /// <param name="_sequence">
    /// Sequence used in segment creation
    /// </param>
    public void createRouteSegment(TMSSequence _sequence)
    {
        segment.RouteCode                   = routeCode;
        segment.Sequence                    = _sequence;
        segment.OriginName                  = fromAddress.parmName();
        segment.OriginLocation              = fromAddress.parmLocation();
        segment.OriginResidential           = fromAddress.parmResidential();
        segment.DestinationName             = toAddress.parmName();
        segment.DestinationLocation         = toAddress.parmLocation();
        segment.DestinationResidential      = toAddress.parmResidential();
        segment.CarrierGroupCode            = carrierGroupCode;
        segment.CarrierCode                 = carrierCode;
        segment.CarrierServiceCode          = carrierServiceCode;
        segment.ModeCode			 = mode;
        segment.DlvTermId                   = freightTerm;
        segment.ScheduledShipUTCDateTime    = shipDateTime;
        segment.ScheduledArrivalUTCDateTime = dlvDateTime;
        segment.insert();

        routeSequence = segment.Sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRouteSegmentLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the route segment load record
    /// </summary>
    public void createRouteSegmentLoad()
    {
        TMSRouteSegmentLoad     segmentLoad;
        WHSLoadTable            loadTable = WHSLoadTable::find(id);

        segmentLoad.RouteCode                = routeCode;
        segmentLoad.Sequence                 = routeSequence;
        segmentLoad.Id                       = id;
        segmentLoad.OriginPostalCode         = segment.originPostalAddress().ZipCode;
        segmentLoad.DestinationPostalCode    = segment.destinationPostalAddress().ZipCode;
        segmentLoad.BillOfLadingId           = loadTable.BillOfLadingId;
        segmentLoad.BookingNum               = loadTable.BookingNum;
        segmentLoad.VoyageNum                = loadTable.VoyageNum;
        segmentLoad.VesselName               = loadTable.VesselName;
        segmentLoad.InspectionSeal           = loadTable.InspectionSeal;
        segmentLoad.HouseBill                = loadTable.HouseBill;
        segmentLoad.SailUTCDateTime          = loadTable.SailUTCDateTime;
        segmentLoad.OrderNum                 = loadTable.OrderNum;
        segmentLoad.AccountNum               = loadTable.AccountNum;
        segmentLoad.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    XML createXML()
    {
        commonRec = WHSLoadTable::find(id);

        if (id)
        {
            ttsbegin;

            this.deletePreviousInformation(commonRec);

            ttscommit;
        }

        this.writeXML();

        return requestDoc.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSegmentTable</Name>
				<Source><![CDATA[
    private TMSRouteSegmentTable insertSegmentTable(TMSRouteSegmentTable _segmentTable, XmlNode _xmlNode)
    {
        TMSRouteSegmentTable        segmentTable = _segmentTable;
        TMSResponsibleForPayment    shipmentResponsible;
        TMSVendorCode               shipmentVendorCode;
        TMSVendorInvoiceCode        shipmentVendorInvoiceCode;

        [shipmentResponsible,
        shipmentVendorCode,
        shipmentVendorInvoiceCode]          = this.readShipPayment(_xmlNode);

        segmentTable.ResponsibleForPayment   = shipmentResponsible       ? shipmentResponsible       : segmentResponsible;
        segmentTable.VendorCode              = shipmentVendorCode        ? shipmentVendorCode        : segmentVendorCode;
        segmentTable.VendorInvoiceCode       = shipmentVendorInvoiceCode ? shipmentVendorInvoiceCode : segmentVendorInvoiceCode;

            segmentTable.insert();

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Read the Shipment node of the response xml
    /// </summary>
    /// <param name="_xmlNode">
    ///     The main XML Node for processing.
    /// </param>
    /// <param name="_segmentNode">
    ///     If evaluating a shipment within the context of a segment - this is the associated node
    /// </param>
    void readShipShipment(XmlNode _xmlNode, XmlNode _segmentNode = null)
    {
        TMSRouteSegmentTable        segmentTable;
        XmlNodeList                 addressList;
        XmlNode                     addressNode;
        TMSAddressPhone             pickupAdd;
        TMSAddressPhone             dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible;
        TMSVendorCode               shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode;
        TMSSequence                 sequence;
        TMSRouteAccessorialLevel    level = TMSRouteAccessorialLevel::Segment;
        SalesTable                  salesTable;

        recordType    = any2enum(symbol2Enum(enumNum(TMSRecordType), this.returnNamedNode(_xmlNode, #recordType)));
        loadDirection = symbol2Enum(enumNum(TMSDirection), this.returnNamedNode(_xmlNode, #direction));

        if (_segmentNode)
        {
            routeSegmentConfigRecId = str2int64(this.returnNamedNode(_segmentNode, #segmentConfigRecId));
        }

        id = this.returnNamedNode(_xmlNode, #loadId);

        if (parentRecId != 0)
        {
            salesTable = SalesTable::findRecId(parentRecId);
            commonRec = salesTable;
        }
        else
        {
            commonRec       = WHSLoadTable::find(id);
        }

        if (communicationType == TMSCommunicationType::Confirmation && !segmentLoadLine.Sequence)
        {
            sequence = this.setSequence(_xmlNode);
        }
        else
        {
            segmentTable = this.beginFillingSegmentTable(_xmlNode);

            if (communicationType == TMSCommunicationType::Rate)
            {
                this.readRateRoute(segmentTable.CarrierCode, segmentTable.CarrierServiceCode, segmentTable.ModeCode);
            }

            segmentTable.RouteId                = routeId;
            segmentTable.RouteRecId             = routeRecId;
            segmentTable.TMSRouteSegmentConfig  = routeSegmentConfigRecId;

            segmentTable = this.insertSegmentTable(segmentTable, _xmlNode);

            addressList         = _xmlNode.selectNodes(#pickUp);
            addressNode         = addressList.nextNode();
            pickupAdd           = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);

            if (communicationType == TMSCommunicationType::RateRoute || communicationType == TMSCommunicationType::Route)
            {
                pickupAdd           = segmentFromAddress != null ? segmentFromAddress : pickupAdd;
            }

            [shipOriginResponsible,
            shipOriginVendorCode,
            shipOriginVendorInvoiceCode] = this.readShipPayment(addressNode);

            addressList         = _xmlNode.selectNodes(#dropOff);
            addressNode         = addressList.nextNode();
            dropOffAdd          = this.readAddress(addressNode, level, segmentTable.TableId, segmentTable.RecId);

            if (communicationType == TMSCommunicationType::RateRoute || communicationType == TMSCommunicationType::Route)
            {
                dropOffAdd          = segmentToAddress != null ? segmentToAddress : dropOffAdd;
            }

            [shipDestResponsible,
            shipDestVendorCode,
            shipDestVendorInvoiceCode] = this.readShipPayment(addressNode);

            segmentTable = this.writeSegmentTable(segmentTable, pickupAdd, dropOffAdd, shipOriginResponsible, shipOriginVendorCode,
                                   shipOriginVendorInvoiceCode, shipDestResponsible, shipDestVendorCode, shipDestVendorInvoiceCode);

            if (communicationType != TMSCommunicationType::Route)
            {
                segmentRate = _segmentNode != null;
                this.readOverrideEntities(_xmlNode, TMSRateType::Rate, segmentTable.RefTableId, segmentTable.RefRecId);
                this.readRatingEntities(_xmlNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
                segmentRate = false;
            }
        }

        if (communicationType != TMSCommunicationType::RateShop)
        {
            if (segmentTable.RecId == 0)
            {
                select firstonly segmentTable where segmentTable.RouteId == routeCode && segmentTable.Sequence == sequence;
            }

            this.readShippingEntity(_xmlNode, segmentTable.TableId, segmentTable.RecId);
        }

        if (_segmentNode && communicationType != TMSCommunicationType::Route)
        {
            this.readRatingEntities(_xmlNode, TMSRateType::Rate, segmentTable.TableId, segmentTable.RecId);
            addressList = _xmlNode.selectNodes(#pickUp);
            addressNode = addressList.nextNode();
            this.readAddress(addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);

            addressList = _xmlNode.selectNodes(#dropOff);
            addressNode = addressList.nextNode();
            this.readAddress(addressNode, TMSRouteAccessorialLevel::Shipment, segmentTable.TableId, segmentTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private TMSSequence setSequence(XmlNode _xmlNode)
    {
        TMSSequence                 sequence;

        if (createRoute)
        {
            sequence                = 1;
            this.createRouteSegment(sequence);
            this.createRouteSegmentLoad();
            segmentLoadLine.DestinationPostalCode    = segment.destinationPostalAddress().ZipCode;
            segmentLoadLine.OriginPostalCode         = segment.originPostalAddress().ZipCode;
            this.readOverrideEntities(_xmlNode);
        }
        else
        {
            sequence                = str2int(this.returnNamedNode(_xmlNode, #sequence));

            if (segmentFromAddress != null)
            {
                segmentLoadLine.DestinationPostalCode    = segmentFromAddress.parmPostalCode();
                segmentLoadLine.OriginPostalCode         = segmentToAddress.parmPostalCode();
            }
        }

        segmentLoadLine.Sequence                 = sequence;
        segmentLoadLine.Generated                = NoYes::Yes;
        this.readRatingEntities(_xmlNode);

        return sequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeSegmentTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes record to the segment table
    /// </summary>
    /// <param name="_segmentTable">
    /// Segment table record
    /// </param>
    /// <param name="_pickupAdd">
    /// Pickup address information
    /// </param>
    /// <param name="_dropOffAdd">
    /// Drop-off address information
    /// </param>
    /// <param name="_shipOriginResponsible">
    /// Ship origin person responsible
    /// </param>
    /// <param name="_shipOriginVendorCode">
    /// Ship origin vendor code
    /// </param>
    /// <param name="_shipOriginVendorInvoiceCode">
    /// Ship origin vendor invoice number
    /// </param>
    /// <param name="_shipDestResponsible">
    /// Ship destination responsible
    /// </param>
    /// <param name="_shipDestVendorCode">
    /// Ship destination vendor code
    /// </param>
    /// <param name="_shipDestVendorInvoiceCode">
    /// Ship destination vendor invoice number
    /// </param>
    /// <returns>
    /// <c>TMSRouteSegmentTable</c> record
    /// </returns>
    private TMSRouteSegmentTable writeSegmentTable(
        TMSRouteSegmentTable        _segmentTable,
        TMSAddressPhone             _pickupAdd,
        TMSAddressPhone             _dropOffAdd,
        TMSResponsibleForPayment    _shipOriginResponsible,
        TMSVendorCode               _shipOriginVendorCode,
        TMSVendorInvoiceCode        _shipOriginVendorInvoiceCode,
        TMSResponsibleForPayment    _shipDestResponsible,
        TMSVendorCode               _shipDestVendorCode,
        TMSVendorInvoiceCode        _shipDestVendorInvoiceCode)
    {
        TMSRouteSegmentTable        segmentTable                = _segmentTable;
        TMSAddressPhone             pickupAdd                   = _pickupAdd;
        TMSAddressPhone             dropOffAdd                  = _dropOffAdd;
        TMSResponsibleForPayment    shipOriginResponsible       = _shipOriginResponsible;
        TMSVendorCode               shipOriginVendorCode        = _shipOriginVendorCode;
        TMSVendorInvoiceCode        shipOriginVendorInvoiceCode = _shipOriginVendorInvoiceCode;
        TMSResponsibleForPayment    shipDestResponsible         = _shipDestResponsible;
        TMSVendorCode               shipDestVendorCode          = _shipDestVendorCode;
        TMSVendorInvoiceCode        shipDestVendorInvoiceCode   = _shipDestVendorInvoiceCode;

        ttsbegin;

        segmentTable.OriginName                         = pickupAdd.parmName();
        segmentTable.OriginalOriginPostalAddress        = pickupAdd.parmPostalAddressRecId();
        segmentTable.OriginAddress                      = pickupAdd.parmStreet();
        segmentTable.OriginCity                         = pickupAdd.parmCity();
        segmentTable.OriginState                        = pickupAdd.parmState();
        segmentTable.OriginCounty                       = pickupAdd.parmCounty();
        segmentTable.OriginCountryRegion                = pickupAdd.parmCountryRegion();
        segmentTable.OriginCountryRegionISOCode         = LogisticsAddressCountryRegion::find(segmentTable.OriginCountryRegion).isOcode;
        segmentTable.OriginPostalCode                   = pickupAdd.parmPostalCode();
        segmentTable.OriginResidential                  = pickupAdd.parmResidential();
        segmentTable.OriginResponsibleForPayment        = shipOriginResponsible ? shipOriginResponsible : originResponsible;
        segmentTable.OriginVendorCode                   = shipOriginVendorCode ? shipOriginVendorCode : originVendorCode;
        segmentTable.OriginVendorInvoiceCode            = shipOriginVendorInvoiceCode ? shipOriginVendorInvoiceCode : originVendorInvoiceCode;
        segmentTable.DestinationName                    = dropOffAdd.parmName();
        segmentTable.OriginalDestinationPostalAddress   = dropOffAdd.parmPostalAddressRecId();
        segmentTable.DestinationAddress                 = dropOffAdd.parmStreet();
        segmentTable.DestinationCity                    = dropOffAdd.parmCity();
        segmentTable.DestinationState                   = dropOffAdd.parmState();
        segmentTable.DestinationCounty                  = dropOffAdd.parmCounty();
        segmentTable.DestinationCountryRegion           = dropOffAdd.parmCountryRegion();
        segmentTable.DestinationCountryRegionISOCode    = LogisticsAddressCountryRegion::find(segmentTable.DestinationCountryRegion).isOcode;
        segmentTable.DestinationPostalCode              = dropOffAdd.parmPostalCode();
        segmentTable.DestinationResidential             = dropOffAdd.parmResidential();
        segmentTable.DestinationResponsibleForPayment   = shipDestResponsible ? shipDestResponsible : destResponsible;
        segmentTable.DestinationVendorCode              = shipDestVendorCode ? shipDestVendorCode : destVendorCode;
        segmentTable.DestinationVendorInvoiceCode       = shipDestVendorInvoiceCode ? shipDestVendorInvoiceCode : destVendorInvoiceCode;
        segmentTable.DestinationHubCode                 = segmentDestHub;
        segmentTable.OriginHubCode                      = segmentOriginHub;
        segmentTable.Miles                              = miles;
        segmentTable.write();

        ttscommit;

        return segmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipLoad</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the associated load information on the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the load.
    /// </param>
    /// <param name="_class">
    ///     The class of the load.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the load.
    /// </param>
    /// <param name="_parentNode">
    ///     The parent node of the xml node.
    /// </param>
    void writeShipLoad(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume, XmlNode _parentNode)
    {
        XmlNode             fromNode;
        XmlNode             toNode;
        WHSLoadTable        loadTable;
        WHSLoadLine         loadLine;
        WHSClass            whsClass;
        WHSContainerTable   containerTable;
        WHSShipmentTable    shipmentTable;
        Weight              shipmentWeight;

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeShipment);
        this.writeXMLElement(_xmlNode, #routeGuideName, routeGuideName);
        this.writeXMLElement(_xmlNode, #routePlanName, routePlanName);
        this.writeXMLElement(_xmlNode, #routeConfigCode, routeConfigCode);
        this.writeXMLElement(_xmlNode, #sequence, int2str(routeSequence));

        loadTable = WHSLoadTable::find(id);
        loadLine = WHSLoadLine::findFirstForLoadId(loadTable.LoadId);
        this.writeXMLElement(_xmlNode, #recordType, Global::enum2Symbol(enumNum(TMSRecordType), enum2int(TMSRecordType::Load)));
        this.writeXMLElement(_xmlNode, #loadId, id);
        this.writeXMLElement(_xmlNode, #direction, Global::enum2Symbol(enumNum(TMSDirection), loadTable.LoadDirection));
        this.writeXMLElement(_xmlNode, #orderNum, loadLine.OrderNum);
        this.writeXMLElement(_xmlNode, #orderCurrency, this.getOrderCurrency(loadLine));
        this.writeXMLElement(_xmlNode, #loadTemplate, loadTable.LoadTemplateId);
        this.writeXMLElement(_xmlNode, #transportationTemplate, transportationTemplateId);

        this.writeShipCustomer(_xmlNode);
        this.writeXMLElement(_xmlNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segmentResponsible)));
        this.writeXMLElement(_xmlNode, #vendorCode, segmentVendorCode);
        this.writeXMLElement(_xmlNode, #vendorInvoiceCode, segmentVendorInvoiceCode);

        fromNode = this.writeXMLNode(_xmlNode, #pickup);
        this.writeAddress(fromNode, this.getFromAddressNotNull());
        this.writeXMLElement(fromNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(originResponsible)));
        this.writeXMLElement(fromNode, #vendorCode, originVendorCode);
        this.writeXMLElement(fromNode, #vendorInvoiceCode, originVendorInvoiceCode);

        toNode = this.writeXMLNode(_xmlNode, #dropoff);
        this.writeAddress(toNode, this.getToAddressNotNull());
        this.writeXMLElement(toNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(destResponsible)));
        this.writeXMLElement(toNode, #vendorCode, destVendorCode);
        this.writeXMLElement(toNode, #vendorInvoiceCode, destVendorInvoiceCode);

        while select ShipmentId from shipmentTable
            where shipmentTable.LoadId == loadTable.LoadId
        {
            if ((select firstonly whsContainerTable where whsContainerTable.ShipmentId == shipmentTable.ShipmentId).RecId != 0)
            {
                while select Weight from containerTable
                    where containerTable.ShipmentId == shipmentTable.ShipmentId
                {
                    shipmentWeight += containerTable.Weight;
                }
            }
        }

        if (shipmentWeight == 0)
        {
            this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(_weight));
        }
        else
        {
            this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(shipmentWeight));
        }

        this.writeXMLElement(_xmlNode, #volume, TMSProcessXML_Base::real2str(_volume));
        this.writeXMLElement(_xmlNode, #class, TMSProcessXML_Base::real2str(_class));
        this.writeXMLElement(_xmlNode, #stcc, strFmt('%1', stcc));
        this.writeXMLElement(_xmlNode, #dlvDate, this.convertUTCDateTime2Str(dlvDateTime));
        this.writeXMLElement(_xmlNode, #shipDate, this.convertUTCDateTime2Str(shipDateTime));
        this.writeXMLElement(_xmlNode, #freightTerm, strFmt('%1', freightTerm));
        this.writeXMLElement(_xmlNode, #equipment, strFmt('%1', equipment));
        this.writeXMLElement(_xmlNode, #value, TMSProcessXML_Base::real2str(value));
        this.writeXMLElement(_xmlNode, #directDelivery, Global::enum2Symbol(enumNum(NoYes), directDelivery));

        while select loadLine
            where loadLine.LoadId == id
        {
            whsClass = WHSLTLClass::find(WHSNMFC::find(WHSEcoResProductTransportationCodes::findByItemId(loadLine.ItemId).nmfcCode).ltlClassCode).Class;
            this.writeShippingEntity(_xmlNode, #typeLine, loadLine.ItemId, loadLine.loadLineWeight(), whsClass, loadLine.loadLineVolume(), loadLine.displayTotalValue(), loadLine.RecId, loadLine.Qty);
        }

        if (communicationType == TMSCommunicationType::Confirmation || manualApportionment)
        {
            this.writeShipManualAccessorials(_xmlNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipLoadShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the associated shipments to the load.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the load.
    /// </param>
    /// <param name="_class">
    ///     The class of the load.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the load.
    /// </param>
    /// <param name="_parentNode">
    ///     The parent node of the xml node.
    /// </param>
    void writeShipLoadShipment(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume, XmlNode _parentNode)
    {
        XmlNode             fromNode;
        XmlNode             toNode;
        WHSShipmentTable    shipmentTable;
        WHSLoadTable        loadTable;
        WHSLoadLine         loadLine;
        WHSClass            whsClass;
        WHSContainerTable   containerTable;
        Weight              shipmentWeight;
        int                 containerCount;

        while select ShipmentId from shipmentTable
            where shipmentTable.LoadId == id
        {
            if (   routeCode 
                && routeSequence
                && (communicationType == TMSCommunicationType::Confirmation || communicationType == TMSCommunicationType::Apportionment)
                && TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
            {
                TMSRouteSegmentShipment routeSegementShipment;

                select firstonly RecId from routeSegementShipment
                    where routeSegementShipment.Id          == shipmentTable.ShipmentId
                       && routeSegementShipment.Sequence    == routeSequence
                       && routeSegementShipment.RouteCode   == routeCode;
                if (!routeSegementShipment.RecId)
                {
                    continue;
                }
            }

            this.writeXMLElement(_xmlNode, #shippingEntityType, #typeShipment);
            this.writeXMLElement(_xmlNode, #routeGuideName, routeGuideName);
            this.writeXMLElement(_xmlNode, #routePlanName, routePlanName);
            this.writeXMLElement(_xmlNode, #routeConfigCode, routeConfigCode);
            this.writeXMLElement(_xmlNode, #sequence, int2str(routeSequence));
            this.writeXMLElement(_xmlNode, #segmentConfigRecId, int642str(routeSegmentConfigRecId));

            loadTable = WHSLoadTable::find(id);
            loadLine = WHSLoadLine::findFirstForShipmentId(shipmentTable.ShipmentId);
            this.writeXMLElement(_xmlNode, #recordType, Global::enum2Symbol(enumNum(TMSRecordType), enum2int(TMSRecordType::Load)));
            this.writeXMLElement(_xmlNode, #loadId, id);
            this.writeXMLElement(_xmlNode, #shipmentId, shipmentTable.ShipmentId);
            this.writeXMLElement(_xmlNode, #direction, Global::enum2Symbol(enumNum(TMSDirection), loadTable.LoadDirection));
            this.writeXMLElement(_xmlNode, #orderNum, loadLine.OrderNum);
            this.writeXMLElement(_xmlNode, #orderCurrency, this.getOrderCurrency(loadLine));
            this.writeXMLElement(_xmlNode, #loadTemplate, loadTable.LoadTemplateId);
            this.writeXMLElement(_xmlNode, #transportationTemplate, transportationTemplateId);

            this.writeShipCustomer(_xmlNode);
            this.writeXMLElement(_xmlNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segmentResponsible)));
            this.writeXMLElement(_xmlNode, #vendorCode, segmentVendorCode);
            this.writeXMLElement(_xmlNode, #vendorInvoiceCode, segmentVendorInvoiceCode);

            fromNode = this.writeXMLNode(_xmlNode, #pickup);
            this.writeAddress(fromNode, this.getFromAddressNotNull());
            this.writeXMLElement(fromNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(originResponsible)));
            this.writeXMLElement(fromNode, #vendorCode, originVendorCode);
            this.writeXMLElement(fromNode, #vendorInvoiceCode, originVendorInvoiceCode);

            toNode = this.writeXMLNode(_xmlNode, #dropoff);
            this.writeAddress(toNode, this.getToAddressNotNull());
            this.writeXMLElement(toNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(destResponsible)));
            this.writeXMLElement(toNode, #vendorCode, destVendorCode);
            this.writeXMLElement(toNode, #vendorInvoiceCode, destVendorInvoiceCode);

            if ((select firstonly whsContainerTable where whsContainerTable.ShipmentId == shipmentTable.ShipmentId).RecId != 0)
            {
                while select Weight from containerTable
                    where containerTable.ShipmentId == shipmentTable.ShipmentId
                {
                    shipmentWeight += containerTable.Weight;
                    ++containerCount;
                }                    

                XmlNodeList children = _xmlNode.childNodes();
                if (children.length() > 0)
                {
                    XMLNodeListIterator iterator = new XMLNodeListIterator(children);
                    while (iterator.moreValues())
                    {
                        XmlNode child = iterator.value();
                        if (child.name() == #weight || child.name() == #ContainerCount)
                        {
                            _xmlNode.removeChild(child);
                        }
                        iterator.nextValue();
                    }
                }

                this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(shipmentWeight));
                this.writeXMLElement(_xmlNode, #ContainerCount, int2Str(containerCount));
            }
            else
            {
                this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(_weight));
            }

            this.writeXMLElement(_xmlNode, #volume, TMSProcessXML_Base::real2str(_volume));
            this.writeXMLElement(_xmlNode, #class, TMSProcessXML_Base::real2str(_class));
            this.writeXMLElement(_xmlNode, #stcc, strFmt('%1', stcc));
            this.writeXMLElement(_xmlNode, #dlvDate, this.convertUTCDateTime2Str(dlvDateTime));
            this.writeXMLElement(_xmlNode, #shipDate, this.convertUTCDateTime2Str(shipDateTime));
            this.writeXMLElement(_xmlNode, #freightTerm, strFmt('%1', freightTerm));
            this.writeXMLElement(_xmlNode, #equipment, strFmt('%1', equipment));
            this.writeXMLElement(_xmlNode, #value, TMSProcessXML_Base::real2str(value));
            this.writeXMLElement(_xmlNode, #directDelivery, Global::enum2Symbol(enumNum(NoYes), directDelivery));

            while select loadLine
                where loadLine.ShipmentId == shipmentTable.ShipmentId
            {
                whsClass = WHSLTLClass::find(WHSNMFC::find(WHSEcoResProductTransportationCodes::findByItemId(loadLine.ItemId).nmfcCode).ltlClassCode).Class;
                this.writeShippingEntity(_xmlNode, #typeLine, loadLine.ItemId, loadLine.loadLineWeight(), whsClass, loadLine.loadLineVolume(), loadLine.displayTotalValue(), loadLine.RecId, loadLine.Qty);
            }

            this.writeShipDeliveryAccessorials(_xmlNode, shipmentTable.ShipmentId);
        }

        if (communicationType == TMSCommunicationType::Confirmation || manualApportionment)
        {
            this.writeShipManualAccessorials(_xmlNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShippingEntity</Name>
				<Source><![CDATA[
    void writeShippingEntity(XmlNode        _xmlNode,
                             str            _shipType,
                             ItemId         _item       = '',
                             Weight         _weight     = 0.0,
                             WHSClass       _class      = 0.0,
                             Volume         _volume     = 0.0,
                             AmountMST      _value      = 0.0,
                             RefRecId       _recId      = 0,
                             Qty            _qty        = 0.0)
    {
        XmlNode         shipNode;

        switch (_shipType)
        {
            case #typeRoute:
                shipNode = this.writeXMLNode(_xmlNode, #shipping);
                this.writeShipRoute(shipNode);
                break;

            case #typeSegment:
                shipNode = this.writeXMLNode(_xmlNode, #shipping);
                this.writeShipSegment(shipNode);
                break;

            case #typeShipment:
                shipNode = this.writeXMLNode(_xmlNode, #shipping);
                this.writeShipShipment(shipNode, _weight, _class, _volume, _xmlNode);
                break;

            case #typeContainer:
                shipNode = this.writeXMLNode(_xmlNode, #shipping);
                this.writeShipContainer(shipNode, _weight, _class, _volume);
                break;

            case #typeLine:
                shipNode = this.writeXMLNode(_xmlNode, #shipping);
                this.writeShipLine(shipNode, _item, _weight, _class, _volume, _value, _recId, _qty);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipShipment</Name>
				<Source><![CDATA[
    void writeShipShipment(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume, XmlNode _parentNode)
    {
        if ((select count(RecId) from whsShipmentTable where whsShipmentTable.LoadId == id).RecId == 0)
        {
            this.writeShipLoad(_xmlNode, _weight, _class, volume, _parentNode);
        }
        else
        {
            this.writeShipLoadShipment(_xmlNode, _weight, _class, volume, _parentNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
	/// <summary>
	/// Constructs the class instance.
	/// </summary>
	/// <returns>
	/// The class instance.
	/// </returns>
    static TMSProcessXML_Load construct()
    {
        TMSProcessXML_Load  processXML;

        processXML = new TMSProcessXML_Load();

        return processXML;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>