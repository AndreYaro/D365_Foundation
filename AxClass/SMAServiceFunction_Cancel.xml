<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>SMAServiceFunction_Cancel</Name>
  <SourceCode>
    <Declaration><![CDATA[
public class SMAServiceFunction_Cancel extends SMAServiceFunction
{
    QueryBuildRange     criteriaStageId;
    SMAStageId          stageId;
    NoYesId             reverseCancel;
    DialogField         dialogReverseCancel;


    #localmacro.CurrentList
        reverseCancel
    #endmacro

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>confirmDialog</Name>
        <Source><![CDATA[
        protected boolean confirmDialog(str _warning = "")
    {
        boolean     ret;
        str         strMsg = _warning;

        if (reverseCancel)
        {
            // Are you sure you want to reverse cancel on all canceled service orders?
            strMsg = "@SYS91975";
        }
        else
        {
            // Are you sure you want to cancel all service orders?
            strMsg = "@SYS91974";
        }

        ret = super(strMsg);

        return ret;
    }
]]></Source>
      </Method>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialog = super();

        // Option
        dialog.addGroup("@SYS73535");

        // Revoke cancel
        dialogReverseCancel = dialog.addFieldValue(extendedTypeStr(NoYesId),reverseCancel, "@SYS90044");

        return dialog;
    }
]]></Source>
      </Method>
      <Method>
        <Name>getFromDialog</Name>
        <Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        reverseCancel = dialogReverseCancel.value();

        return ret;
    }
]]></Source>
      </Method>
      <Method>
        <Name>getStagesAllowed</Name>
        <Source><![CDATA[
        public str getStagesAllowed()
    {
        #define.separator("\,")

        SMAStageTable   stageTable;
        str             tmpStageStr = '';

        while select StageId, StageCanCancel from stageTable order by StageId where stageTable.StageCanCancel == NoYes::Yes
        {
            if (tmpStageStr)
            {
                tmpStageStr = tmpStageStr + #separator;
            }

            tmpStageStr = tmpStageStr + stageTable.StageId;
        }

        return tmpStageStr;
    }
]]></Source>
      </Method>
      <Method>
        <Name>new</Name>
        <Source><![CDATA[
        public void new(boolean _periodic = false)
    {
        periodic = _periodic;

        super();
    }
]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        boolean                 applyCancel = false;
        int                     intCancel   = 0;
        str                     strMsg;

        if (accepted)
        {
            queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).update(true);
            queryRun.query().dataSourceTable(tablenum(SMAServiceOrderTable)).concurrencyModel(ConcurrencyModel::Optimistic);

            while (queryRun.next())
            {
                serviceOrderTable   = queryRun.get(tablenum(SMAServiceOrderTable));

                try
                {
                    applyCancel = (reverseCancel && serviceOrderTable.Progress == SMAServiceOrderProgress::Canceled) || (!reverseCancel && serviceOrderTable.Progress != SMAServiceOrderProgress::Canceled);

                    if (applyCancel)
                    {
                        ttsbegin;

                        serviceOrderTable.updateCancelRevokeLines(reverseCancel);
                        intCancel++;

                        ttscommit;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            serviceOrderTable = SMAServiceOrderTable::find(serviceOrderTable.ServiceOrderId, true, ConcurrencyModel::Optimistic);
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch
                {
                    exceptionTextFallThrough();
                }
            }
            if (showInfolog)
            {
                if (reverseCancel)
                {
                    // Reversed cancel on %1 service orders.
                    strMsg = "@SYS91976";
                }
                else
                {
                    // Canceled %1 service orders.
                    strMsg = "@SYS91972";
                }

                info(strfmt(strMsg, intCancel));
            }
        }
    }
]]></Source>
      </Method>
      <Method>
        <Name>setBasicRanges</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Creates basic locked ranges for the query.
    /// </summary>
    protected void setBasicRanges()
    {
        QueryBuildDataSource    qbds_ServiceOrder;
        QueryBuildRange         qbr_Progress;

        super();

        qbds_ServiceOrder = serviceQuery.dataSourceTable(tablenum(SMAServiceOrderTable));

        // Add range Progress with value Not Transferred
        qbr_Progress = qbds_ServiceOrder.addRange(fieldnum(SMAServiceOrderTable, Progress));
        qbr_Progress.value(SysQuery::valueNot(SMAServiceOrderProgress::Transferred));
        qbr_Progress.status(RangeStatus::Locked);
    }
]]></Source>
      </Method>
      <Method>
        <Name>description</Name>
        <Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public ClassDescription description()
    {
        // Cancel service orders
        return "@SYS90060";
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>