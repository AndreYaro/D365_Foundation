<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanCreateVariableEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanCreate</c> class creates event kanbans based on a kanban rule or another kanban.
/// </summary>
public class KanbanCreateVariableEvent extends KanbanCreateVariable
{
    KanbanRuleEvent     kanbanRuleEvent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createKanbanSourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>KanbanSourceRequirement</c> record for the event kanban.
    /// </summary>
    /// <param name="_kanban">
    ///    The event <c>Kanban</c> record.
    /// </param>
    protected void createKanbanSourceRequirement(Kanban _kanban)
    {
        KanbanSourceRequirement     kanbanSourceRequirement;

        // initialize the source requirement record
        kanbanSourceRequirement.initFromKanban(_kanban);
        kanbanSourceRequirement.initFromKanbanSourceRequirementParm(kanbanSourceRequirementParm);

        Common sourceRequirement = kanbanSourceRequirementParm.parmSourceRequirement();

        // check, that the source requirement is a movement
        // if that is not the case, set it to the kanban itself; do the same for the parent and root
        if (!InventMovement::constructNoThrow(sourceRequirement))
        {
            kanbanSourceRequirement.SourceRequirementTableId       = tableNum(Kanban);
            kanbanSourceRequirement.SourceRequirementRecId         = kanbanSourceRequirement.Kanban;
            kanbanSourceRequirement.ParentSourceRequirementTableId = kanbanSourceRequirement.SourceRequirementTableId;
            kanbanSourceRequirement.ParentSourceRequirementRecId   = kanbanSourceRequirement.SourceRequirementRecId;
            kanbanSourceRequirement.RootSourceRequirementTableId   = kanbanSourceRequirement.ParentSourceRequirementTableId;
            kanbanSourceRequirement.RootSourceRequirementRecId     = kanbanSourceRequirement.ParentSourceRequirementRecId;
        }

        // if parent is not a movement, set is to the source requirement
        if (   !kanbanSourceRequirementParm.sourceRequirementIsParent()
            && !kanbanSourceRequirement.parentSourceRequirementMovement())
        {
            kanbanSourceRequirement.ParentSourceRequirementTableId = kanbanSourceRequirement.SourceRequirementTableId;
            kanbanSourceRequirement.ParentSourceRequirementRecId   = kanbanSourceRequirement.SourceRequirementRecId;
        }

        // if the root is not a movement, set it to the parent
        if (   !kanbanSourceRequirementParm.sourceRequirementIsRoot()
            && !kanbanSourceRequirementParm.parentSourceRequirementIsRoot()
            && !kanbanSourceRequirement.rootSourceRequirementMovement())
        {
            kanbanSourceRequirement.RootSourceRequirementTableId = kanbanSourceRequirement.ParentSourceRequirementTableId;
            kanbanSourceRequirement.RootSourceRequirementRecId   = kanbanSourceRequirement.ParentSourceRequirementRecId;
        }

        kanbanSourceRequirement.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the kanban due date and due time.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanDueDateTime</c> temporal value.
    /// </returns>
    protected KanbanDueDateTime dueDateTime()
    {
        return max(DateTimeUtil::getSystemDateTime(),dueDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class variables.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result = super();

        if (result)
        {
            kanbanRuleEvent = KanbanRuleEvent::findParentRecId(kanbanRuleVariable.RecId);
            result          = kanbanRuleEvent.RecId != 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKanban</Name>
				<Source><![CDATA[
        protected void insertKanban(Kanban _kanban)
    {
        super(_kanban);

        this.createKanbanSourceRequirement(_kanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the specified creation parameters.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The caller object.
    /// </param>
    /// <returns>
    ///    true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean result = super(_calledFrom);

        if (result)
        {
            if (!kanbanRuleEvent)
            {
                result = checkFailed(strFmt("@SYS320510",kanbanRule.RuleId));
            }

            if (   !kanbanSourceRequirementParm
                || !kanbanSourceRequirementParm.validate())
            {
                result = checkFailed("@SYS4000067");
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanCreate construct()
    {
        return new KanbanCreateVariableEvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
