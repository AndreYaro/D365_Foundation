<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateTableType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract class that holds the rebate type processes.
/// </summary>
abstract public class PdsRebateTableType
{
    PdsRebateTable pdsRebateTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor account number for the customer.
    /// </summary>
    /// <returns>
    /// The Vendor account number.
    /// </returns>
    public AccountNum custVendAccount()
    {
        return CustTable::find(pdsRebateTable.CustAccount).VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPostLedgerReversalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the rebate is deleted.
    /// </summary>
    /// <param name="_voucher">
    /// The Voucher number of the ledger.
    /// </param>
    /// <param name="_amount">
    /// The amount associated to the rebate.
    /// </param>
    protected void doPostLedgerReversalTrans(
        Voucher         _voucher,
        Amount          _amount)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;

        // <GCN>
        boolean isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
       // </GCN>

        ttsBegin;

        ledgerJournalTable                      = ledgerJournalTable.pdsInitFromledgerJournalName(this.ledgerJournalNameReversal());
        ledgerJournalTable.insert();

        ledgerJournalTable.LedgerJournalInclTax = NoYes::No;
        ledgerJournalTable.doUpdate();

        ledgerJournalTrans.initValue();

        ledgerJournalTrans                      = this.initLedgerJournalTrans(ledgerJournalTrans);

        ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::Ledger;

        ledgerJournalTrans.TransDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalTrans.Voucher              = _voucher;
        ledgerJournalTrans.Txt                  = "@PRO1117";

        ledgerJournalTrans.pdsCalcAmt(false, _amount);

        ledgerJournalTrans.DocumentDate         = pdsRebateTable.PdsProcessDate;
        ledgerJournalTrans.CurrencyCode         = pdsRebateTable.CurrencyCode;

        ledgerJournalTrans.Payment              = PdsRebateParameters::find().PdsInvoiceJournalPaymentTerm;

        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Ledger;
        ledgerJournalTrans.Invoice              = pdsRebateTable.SalesInvoiceId;

        // <GCN>
        if (isChineseVoucher && !ledgerJournalTrans.LedgerVoucherType_CN)
        {
            this.getDefaultVoucherTypeAndVoucherNum_CN(ledgerJournalTrans);
        }
        // </GCN>

        this.setLedgerJournalTransCurrencyExchRate(ledgerJournalTrans);

        ledgerJournalTrans.insert();
        ttscommit;

        PdsRebateTrans::insertFromPdsRebateTable(pdsRebateTable, PdsRebateTransaction::LedgerJournalProcessing, _amount, ledgerJournalTrans.JournalNum);

        LedgerJournalPost::postJournal(ledgerJournalTable, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPostLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the rebate is processed.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of the ledger.
    /// </param>
    /// <param name="_amount">
    /// The amount associated to the rebate.
    /// </param>
    /// <param name="_forAdjustment">
    /// A Boolean value indicating whether if the rebate is an adjustment.
    /// </param>
    protected void doPostLedgerTrans(
        Voucher         _voucher,
        Amount          _amount,
        boolean         _forAdjustment = false)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;

        // <GCN>
        boolean isChineseVoucher = LedgerParameters::isChineseVoucher_CN();
       // </GCN>

        ledgerJournalTable                      = ledgerJournalTable.pdsInitFromledgerJournalName(this.ledgerJournalNameProcess());

        ttsbegin;
        ledgerJournalTable.insert();

        ledgerJournalTable.LedgerJournalInclTax = NoYes::No;
        ledgerJournalTable.doUpdate();

        ledgerJournalTrans.initValue();
        ledgerJournalTrans                      = this.initLedgerJournalTrans(ledgerJournalTrans);
        ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Ledger;
        ledgerJournalTrans.Voucher              = _voucher;

        if (_forAdjustment)
        {
            ledgerJournalTrans.Txt              = "@PRO1466";
        }
        else
        {
            ledgerJournalTrans.Txt              = pdsRebateTable.setJournalTransactionTxt(this.ledgerTransTxt()).txt();
        }

        ledgerJournalTrans.pdsCalcAmt(false, _amount);

        ledgerJournalTrans.DocumentDate         = pdsRebateTable.PdsProcessDate;
        ledgerJournalTrans.CurrencyCode         = pdsRebateTable.CurrencyCode;
        ledgerJournalTrans.TransDate            = pdsRebateTable.PdsProcessDate;
        ledgerJournalTrans.Invoice              = pdsRebateTable.SalesInvoiceId;

        // <GCN>
        if (isChineseVoucher && !ledgerJournalTrans.LedgerVoucherType_CN)
        {
            this.getDefaultVoucherTypeAndVoucherNum_CN(ledgerJournalTrans);
        }
        // </GCN>

        this.setLedgerJournalTransCurrencyExchRate(ledgerJournalTrans);

        ledgerJournalTrans.insert();

        ttscommit;

        PdsRebateTrans::insertFromPdsRebateTable(pdsRebateTable, PdsRebateTransaction::LedgerJournalProcessing, _amount, ledgerJournalTrans.JournalNum);

        LedgerJournalPost::postJournal(ledgerJournalTable, NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultVoucherTypeAndVoucherNum_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default Chinese voucher type
    /// assigns the voucher number for the given transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The LedgerJournalTrans record to set the values on
    /// </param>
    private void getDefaultVoucherTypeAndVoucherNum_CN(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerVoucherType_CN ledgerVoucherType = LedgerVoucherType_CN::findDefault();
        _ledgerJournalTrans.LedgerVoucherType_CN = ledgerVoucherType.RecId;
        _ledgerJournalTrans.Voucher_CN = NumberSeq_Voucher_CN::newGetVoucherFromCode(ledgerVoucherType.NumberSequenceTable, _ledgerJournalTrans.TransDate).voucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>LedgerJournalTrans</c> record with dimension and offset dimension information.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to be initialized.
    /// </param>
    protected void initDimensions(LedgerJournalTrans _ledgerJournalTrans)
    {
        List dimensionSources = new List(Types::Class);
        List offsetDimensionSources = new List(Types::Class);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(pdsRebateTable.DefaultDimension));
        offsetDimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(pdsRebateTable.OffsetDefaultDimension));

        _ledgerJournalTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(pdsRebateTable.OffsetLedgerDimension, LedgerDimensionDefaultingEngine::getDefaultDimension(offsetDimensionSources));
        _ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(pdsRebateTable.LedgerDimension, LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> record used for the posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The ledger journal transactions.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;

        this.initDimensions(_ledgerJournalTrans);

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>LedgerJournalTrans</c> record with tax information.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to be initialized.
    /// </param>
    protected void initTaxes(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.TaxGroup     = pdsRebateTable.TaxGroup;
        _ledgerJournalTrans.TaxItemGroup = pdsRebateTable.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for rebate process posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    abstract public LedgerJournalName ledgerJournalNameProcess()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalName</c> table record used for rebate types for rebate deletion posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalNameReversal()
    {
        return LedgerJournalName::find(PdsRebateParameters::find().PdsLedgerAccrualJournalNameId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the number sequence code used to create a journal name.
    /// </summary>
    /// <param name="_ledgerJournalName">
    /// The jounal to retrieve the code for.
    /// </param>
    /// <returns>
    ///     The number sequence code used to create journals.
    /// </returns>
    public NumberSequenceCode ledgerJournalNameVoucher(LedgerJournalName _ledgerJournalName)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_ledgerJournalName.NumberSequenceTable);

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets LedgerTransTxt as 'RebateCustomerDeductionJournal' used for rebate types to describe the the ledger posting for when rebate is processed.
    /// </summary>
    /// <returns>
    /// A LedgerTransTxt 'RebateCustomerDeductionJournal'.
    /// </returns>
    protected LedgerTransTxt ledgerTransTxt()
    {
        return LedgerTransTxt::RebateCustomerDeductionJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PdsRebateTable</c> table record on which rebate process is performing.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// The <c>PdsRebateTable</c> table record.
    /// </param>
    /// <returns>
    /// The rebate table record.
    /// </returns>
    protected PdsRebateTable parmPdsRebateTable(Common _pdsRebateTable = pdsRebateTable)
    {
        if (!prmisdefault(_pdsRebateTable))
        {
            pdsRebateTable = _pdsRebateTable;
        }

        return pdsRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate program type.
    /// </summary>
    /// <returns>
    /// The rebate program type.
    /// </returns>
    abstract public PdsRebateProgramType pdsRebateProgramType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledgerjournal number and post the journal when rebate is processed.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    /// <returns>
    /// The Voucher number.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The freight journal parameter for the rebate program module is not set correctly.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The rebate accrual journal parameter for the rebate program module is not set correctly.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The trade spending journal parameter for the rebate program module is not set correctly.
    /// </exception>
    private Voucher postLedger(
        boolean _forAdjustment)
    {
        Voucher                     voucher;
        NumberSeq                   numberSeq;
        PdsRebateProgramType        pdsRebateProgramType;

        if (this.ledgerJournalNameProcess())
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(
                                        this.ledgerJournalNameVoucher(this.ledgerJournalNameProcess()),
                                        NumberSeqScopeFactory::createDefaultScope(),
                                        false);

            voucher = numberSeq.voucher();

            this.postLedgerTrans(voucher, _forAdjustment);

            return voucher;
        }
        else
        {
            pdsRebateProgramType = this.pdsRebateProgramType();

            if (pdsRebateProgramType == PdsRebateProgramType::Freight)
            {
                throw error("@PRO1196");
            }
            else if (pdsRebateProgramType == PdsRebateProgramType::Rebate
                    || pdsRebateProgramType == PdsRebateProgramType::BillBack
                    )
            {
                throw error("@PRO1199");
            }
            else
            {
                throw error("@PRO1198");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledgerjournal number and post the journal when rebate is deleted.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The rebate accrual journal parameter for the rebate program module is not set correctly.
    /// </exception>
    public void postLedgerReversal()
    {
        NumberSeq                   numberSeq;

        if (this.ledgerJournalNameReversal())
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(
                                        this.ledgerJournalNameVoucher(this.ledgerJournalNameReversal()),
                                        NumberSeqScopeFactory::createDefaultScope(),
                                        false);

            this.postLedgerReversalTrans(numberSeq.voucher());
        }
        else
        {
            throw error("@PRO1199");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerReversalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the rebate is deleted,
    /// If the rebate balance is not zero.
    /// </summary>
    /// <param name="_voucher">
    /// The Voucher number of the ledger.
    /// </param>
    protected void postLedgerReversalTrans(
        Voucher         _voucher)
    {
        if (_voucher && (pdsRebateTable.PdsRebateBalance != 0))
        {
            this.doPostLedgerReversalTrans(_voucher, -pdsRebateTable.PdsRebateBalance);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the rebate is processed,
    /// if the rebate amount is not zero.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of the ledger.
    /// </param>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    protected void postLedgerTrans(
        Voucher         _voucher,
        boolean         _forAdjustment = false)
    {
        Amount amount;

        if (_voucher)
        {
            amount = pdsRebateTable.ledgerPostingAmount();

            if (amount != 0)
            {
                this.doPostLedgerTrans(_voucher, amount, _forAdjustment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate payment process.
    /// </summary>
    public void runPayment()
    {
        pdsRebateTable.setRebateBalance();
        pdsRebateTable.setCorrectedRebateAmount();
        pdsRebateTable.PdsMarkForCredit = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate processing.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    public void runProcessed(
        boolean _forAdjustment  = false)
    {
        if (!pdsRebateTable.PdsProcessDate)
        {
            pdsRebateTable.PdsProcessDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        pdsRebateTable.PdsRebateJournalRefNum   = this.postLedger(_forAdjustment);

        pdsRebateTable.PdsMarkForCredit         = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets exchange rate information in LedgerJournalTrans
    /// based on the currency code and transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The LedgerJournalTrans record to set the values on.
    /// </param>
    protected void setLedgerJournalTransCurrencyExchRate(LedgerJournalTrans  _ledgerJournalTrans)
    {
        _ledgerJournalTrans.ExchRate        = ExchangeRateHelper::exchRate(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);
        _ledgerJournalTrans.ExchRateSecond  = ExchangeRateHelper::exchRateSecond(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>PdsRebateTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = true;

        if (_fieldName == fieldStr(PdsRebateTable, PdsMarkForCredit))
        {
            if (pdsRebateTable.PdsPaymtType == PdsPaymtType::Freight)
            {
                ret = checkFailed("@PRO1138");
            }
        }
        else if (_fieldName == fieldStr(PdsRebateTable, PdsCorrectedRebateAmt))
        {
            if (pdsRebateTable.PdsMarkForCredit != NoYes::Yes)
            {
                ret = checkFailed("@PRO1139");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the <c>PdsRebateTable</c> record can be written.
    /// </summary>
    /// <returns>
    /// true if the record can be written; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = true;

        if (!pdsRebateTable.checkConsumedRebateAmount())
        {
            ret = checkFailed("@PRO1142");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PdsRebateTableType</c> class based on the reference buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The reference buffer that decides which derived version of the class to instantiate.
    /// </param>
    /// <returns>
    /// A <c>PdsRebateTableType</c> class instance.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The class cannot be instantiated based on the specified <paramref name="_buffer" /> parameter.
    /// </exception>
    public static PdsRebateTableType newBuffer(Common _buffer)
    {
        PdsRebateTableType  pdsRebateTableType;
        PdsRebateTable      pdsRebateTable;

        switch (_buffer.TableId)
        {
            case tablenum(PdsRebateTable)  :
                pdsRebateTable = _buffer;
                break;
            default :
                throw error("@SYS72176");
        }

        switch (pdsRebateTable.pdsRebateAgreement().PdsRebateProgramType)
        {
            case PdsRebateProgramType::Freight :
                pdsRebateTableType = PdsRebateTableType_Freight::construct();
                break;

            case PdsRebateProgramType::Rebate :
                pdsRebateTableType = PdsRebateTableType_Rebate::construct();
                break;

            case PdsRebateProgramType::BillBack :
                pdsRebateTableType = PdsRebateTableType_BillBack::construct();
                break;

            default :
                pdsRebateTableType = PdsRebateTableType_TMA::construct();
        }

        pdsRebateTableType.parmPdsRebateTable(pdsRebateTable);

        return pdsRebateTableType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Field value will be changed.
    /// </summary>
    /// <param name="_fieldId">
    /// The field Id to modify.
    /// </param>
    /// <param name="_rebateTable">
    /// The <c>PdsRebateTable</c> record to be modified.
    /// </param>
    public void modifiedField(FieldId _fieldId, PdsRebateTable _rebateTable)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>