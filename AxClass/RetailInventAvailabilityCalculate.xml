<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventAvailabilityCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The batch job to calculate inventory availability.
/// </summary>
public class RetailInventAvailabilityCalculate extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    // The timeout for trying to acquire the lock to run the Product Availability Job will be 10 minutes.
    private static int ProductAvailabilityJobAcquireLockTimeOutMilliseconds = 600000;

    private const str sharedConfigName = 'RETAILINVENTAVAILABILITYCALCULATE_OPTIMIZED_DELETE';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate inventory availability for the RetailInventAvailability table.
    /// </summary>
    /// <param name="_createPreaction">
    /// Whether to create preactions.
    /// </param>
    public void calculate(boolean _createPreaction)
    {
        ttsBegin;

        System.Diagnostics.Stopwatch totalJobStopWatch = new System.Diagnostics.Stopwatch();
        System.Diagnostics.Stopwatch subJobStopWatch = new System.Diagnostics.Stopwatch();
        int64 totalRowsAffected = 0;
        int64 dataAreaRowsInserted = 0;
        int64 dataAreaRowsUpdated = 0;
        int64 dataAreaRowsDeleted = 0;
        int64 durationInMs;

        eventSource.EventWriteProductAvailabilityJobBegin(tableStr(RetailInventAvailability));
        this.startNewTiming(totalJobStopWatch);

        // Set product availability water mark based on last inventory transaction
        InventTrans inventTrans;
        select crosscompany maxof(RecId) from inventTrans;
        RetailInventAvailabilityParameters parameters = RetailInventAvailabilityParameters::find(true);
        if (parameters.LastInventTrans != inventTrans.RecId)
        {
            parameters.LastInventTrans = inventTrans.RecId;
        }

        // Avoid record set operations falling back to record-by-record operations.
        RetailInventAvailability retailInventAvailability;
        retailInventAvailability.skipDatabaseLog(true);
        retailInventAvailability.skipEvents(true);

        boolean isOptimizedDelete = true;
        RetailSharedConfigurationParameters sharedConfigParameters = RetailSharedConfigurationParameters::findByName(sharedConfigName);
        if (sharedConfigParameters.RecId)
        {
            isOptimizedDelete = str2Int(sharedConfigParameters.Value);
        }

        // Delete obsolete availabilities (past data from older build).
        delete_from retailInventAvailability where !retailInventAvailability.InventDataAreaId;
        
        dataAreaRowsDeleted += retailInventAvailability.RowCount();

        // Delete availabilities if no corresponding inventory
        CompanyInfo companyInfo;
        while select crosscompany DataArea from companyInfo
            exists join retailInventAvailability
                where retailInventAvailability.InventDataAreaId == companyInfo.DataArea
        {
            changeCompany(companyInfo.DataArea)
            {
                eventSource.EventWriteProductAvailabilityJobDeleteBegin(tableStr(RetailInventAvailability), companyInfo.RecId);
                this.startNewTiming(subJobStopWatch);

                if (isOptimizedDelete)
                {
                    RetailInventSum retailInventSum;
                    delete_from retailInventAvailability
                        where retailInventAvailability.InventDataAreaId == companyInfo.DataArea
                        notexists join retailInventSum
                            where retailInventSum.Item == retailInventAvailability.ItemRecId
                                && retailInventSum.InventDim == retailInventAvailability.InventDimRecId;
                }
                else
                {
                    InventTable inventTable;
                    InventDim inventDim;
                    InventSum inventSum;
                    delete_from retailInventAvailability
                        where retailInventAvailability.InventDataAreaId == companyInfo.DataArea
                        exists join inventTable
                            where inventTable.RecId == retailInventAvailability.ItemRecId
                        exists join inventDim
                            where inventDim.RecId == retailInventAvailability.InventDimRecId
                        notexists join inventSum
                            where inventSum.ItemId == inventTable.ItemId
                                && inventSum.InventDimId == inventDim.InventDimId;
                }
                
                int64 rowsDeleted = retailInventAvailability.RowCount();
                dataAreaRowsDeleted += rowsDeleted;
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobDeleteEnd(tableStr(RetailInventAvailability), companyInfo.RecId, rowsDeleted, durationInMs);
            }
        }

        // Update/insert availabilities for updated/new inventory
        InventSum InventSum;
        while select crosscompany DataArea from companyInfo
            exists join InventSum
                where InventSum.DataAreaId == companyInfo.DataArea
        {
            DataAreaId inventDataAreaId = companyInfo.DataArea;
            changeCompany(inventDataAreaId)
            {
                // Update
                eventSource.EventWriteProductAvailabilityJobUpdateBegin(tableStr(RetailInventAvailability), companyInfo.RecId);
                this.startNewTiming(subJobStopWatch);

                RetailInventSum retailInventSum;
                update_recordset retailInventAvailability
                    setting AvailPhysical = retailInventSum.AvailPhysical,
                        InventDataAreaId = inventDataAreaId
                    join retailInventSum
                        where retailInventSum.Item == retailInventAvailability.ItemRecId
                            && retailInventSum.InventDim == retailInventAvailability.InventDimRecId
                            && (retailInventAvailability.AvailPhysical != retailInventSum.AvailPhysical
                                || retailInventAvailability.InventDataAreaId != inventDataAreaId);

                int64 rowsUpdated = retailInventAvailability.RowCount();
                dataAreaRowsUpdated += rowsUpdated;
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobUpdateEnd(tableStr(RetailInventAvailability), companyInfo.RecId, rowsUpdated, durationInMs);

                // Insert
                eventSource.EventWriteProductAvailabilityJobInsertBegin(tableStr(RetailInventAvailability), companyInfo.RecId);
                this.startNewTiming(subJobStopWatch);

                RetailInventAvailability checkRetailInventAvailability;
                insert_recordset retailInventAvailability(
                    ItemRecId,
                    InventDimRecId,
                    AvailPhysical,
                    InventDataAreaId
                )
                select
                    Item, InventDim, AvailPhysical, inventDataAreaId from retailInventSum
                notexists join checkRetailInventAvailability
                    where checkRetailInventAvailability.ItemRecId == retailInventSum.Item
                        && checkRetailInventAvailability.InventDimRecId == retailInventSum.InventDim;

                int64 rowsInserted = retailInventAvailability.RowCount();
                dataAreaRowsInserted += rowsInserted;
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobInsertEnd(tableStr(RetailInventAvailability), companyInfo.RecId, rowsInserted, durationInMs);
            }
        }

        parameters.LastProductAvailabilityJobEndDateTime = DateTimeUtil::utcNow();
        parameters.update();

        // Keep track of how many total rows are affected by the whole job
        totalRowsAffected = dataAreaRowsDeleted + dataAreaRowsUpdated + dataAreaRowsInserted;
        durationInMs = this.stopTimingAndGetDurationInMs(totalJobStopWatch);
        eventSource.EventWriteProductAvailabilityJobEnd(tableStr(RetailInventAvailability), /* Use 0 for performance */ 0, totalRowsAffected, durationInMs);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailProductAvailabilityJobControlModel jobControlModel = RetailInventAvailabilityCalculate::getJobControlModel();
        System.Exception ex;

        using (RetailJobSyncManager jobSyncManager = this.initJobSyncManager())
        {
            // We will try to acquire an update lock such that only one Product Availability job may execute at a time.
            // If we are unable to acquire the lock after the set time, the job will throw an exception.
            jobSyncManager.acquireUpdateLock(ProductAvailabilityJobAcquireLockTimeOutMilliseconds);

            if (jobControlModel == RetailProductAvailabilityJobControlModel::PopulateRetailProductWarehouseInventoryTable)
            {
                try
                {
                    RetailProductWarehouseInventoryCalculate retailProductWarehouseInventoryCalculate = new RetailProductWarehouseInventoryCalculate();
                    retailProductWarehouseInventoryCalculate.calculateProductWarehouseInventory();
                }
                catch(ex)
                {
                    str exceptionStr = strFmt("%1 Exception details: %2", "@RETAIL:ProductAvailabilityJobNewError", RetailInventAvailabilityCalculate::exceptionToString(ex));
                    eventSource.EventWriteProductAvailabilityJobFailed(tableStr(RetailProductWarehouseInventory), exceptionStr);
                    throw error("@RETAIL:ProductAvailabilityJobNewError");
                }
            }
            else
            {
                try
                {
                    this.calculate(true);
                }
                catch(ex)
                {
                    str exceptionStr = strFmt("%1 Exception details: %2", "@RETAIL:ProductAvailabilityJobLegacyError", RetailInventAvailabilityCalculate::exceptionToString(ex));
                    eventSource.EventWriteProductAvailabilityJobFailed(tableStr(RetailInventAvailability), exceptionStr);
                    throw error("@RETAIL:ProductAvailabilityJobLegacyError");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailInventAvailabilityCalculate construct()
    {
        return new RetailInventAvailabilityCalculate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailInventAvailabilityCalculate scheduler = new RetailInventAvailabilityCalculate();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYP4910246";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailInventAvailabilityCalculate</c> class
    ///  can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailInventAvailabilityCalculate</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJobControlModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retrieves the job policy from RetailSharedParameters.
    /// </summary>
    /// <returns>
    /// The job control model.
    /// </returns>
    private static RetailProductAvailabilityJobControlModel getJobControlModel()
    {
        RetailSharedParameters parameters = RetailSharedParameters::find();
        RetailProductAvailabilityJobControlModel jobControlModel = parameters.ProductAvailabilityJobPolicy;

        return jobControlModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJobSyncManager</Name>
				<Source><![CDATA[
    private RetailJobSyncManager initJobSyncManager()
    {
        str lockName = RetailJobSyncManagerHelper::getProductAvailabilityJobLockName();

        RetailJobSyncManager jobSyncManager = RetailJobSyncManager::construct(lockName, funcName());
        jobSyncManager.parmExceptionMessage("@Retail:RetailJobSyncManagerExceptionMessageCalculate");

        return jobSyncManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exceptionToString</Name>
				<Source><![CDATA[
    private static str exceptionToString(System.Exception _exception)
    {
        if (_exception != null)
        {
            str exceptionType = _exception.GetType().FullName;
            str stackTrace = _exception.StackTrace != null ? _exception.StackTrace.ToString() : strFmt('Exception stack trace was null. Current stack is: %1', System.Environment::StackTrace);
            str exceptionMessage = _exception.Message != null ? _exception.Message : 'Exception message was null';
            str exceptionToLog = strFmt("Exception Type: %1 / Exception message: %2 / Exception stacktrace: %3", exceptionType, exceptionMessage, stackTrace);

            return exceptionToLog;
        }
        else
        {
            return strFmt('%1 was called with a null exception. Printing the current call stack: %2', funcName(),  System.Environment::StackTrace);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startNewTiming</Name>
				<Source><![CDATA[
    private void startNewTiming(System.Diagnostics.Stopwatch stopWatch)
    {
        stopWatch.Reset();
        stopWatch.Start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopTimingAndGetDurationInMs</Name>
				<Source><![CDATA[
    private int64 stopTimingAndGetDurationInMs(System.Diagnostics.Stopwatch stopWatch)
    {
        stopWatch.Stop();
        System.TimeSpan timeSpan = stopWatch.Elapsed;
        int64 durationInMs = timeSpan.TotalMilliseconds;
        return durationInMs;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>