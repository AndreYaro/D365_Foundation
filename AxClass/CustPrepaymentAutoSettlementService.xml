<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPrepaymentAutoSettlementService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustPrepaymentAutoSettlementService</c> class executes the settlement of prepayment invoices.
/// </summary>
internal final class CustPrepaymentAutoSettlementService
{
    private CustInvoiceJour custInvoiceJour;
    private Salestable salesTable;
    private CustPrepaymentAutoSettlementPostingEvent prepaymentAutoSettlementPostingEvent;
    private boolean prepaymentSettlementProcessed;
    private boolean prepaymentSettlementErrored;
    private int totalRecordsProcessed;

    private CustPrepaymentInstrumentationLogger logger;
    private ProcessScheduleWorkItem processScheduleWorkItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activities</Name>
				<Source><![CDATA[
    private CustPrepaymentAutoReversalPostingInstrumentationActivities activities()
    {
        if (!logger)
        {
            logger = CustPrepaymentInstrumentationLogger::createLogger(classStr(CustPrepaymentAutoSettlementService));
        }

        return logger.prePaymentReversalPostingLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTask</Name>
				<Source><![CDATA[
    internal void runTask(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        processScheduleWorkItem = _processScheduleWorkItem;
        using (var activityContext = this.activities().runPrepaymentPosting())
        {
            this.postPrepayment(_processScheduleWorkItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPrepayment</Name>
				<Source><![CDATA[
    private void postPrepayment(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        int infologStartLine = infologLine();

        void log(ProcessExecutionSourceStatus _processExecutionSourceStatus)
        {
            this.writeProcessAutomationLog(_processScheduleWorkItem, _processExecutionSourceStatus, infologStartLine);
        }

        try
        {
            this.post();            
        }
        catch (Exception::Error)
        {
            log(ProcessExecutionSourceStatus::Error);

            // do not rethrow business exceptions and unrecoverable errors
        }
        catch
        {
            log(ProcessExecutionSourceStatus::Error);

            throw; // recoverable system errors are handled by process automation/batch framework
        }
        finally
        {
            try
            {
                if (prepaymentSettlementErrored)
                {
                    info(strFmt("@AccountsReceivable:PrepaymentAutoSettlementPostingSuccessInfo", totalRecordsProcessed));
                    log(ProcessExecutionSourceStatus::Error);
                }
                else if (prepaymentSettlementProcessed)
                {
                    info(strFmt("@AccountsReceivable:PrepaymentAutoSettlementPostingSuccessInfo", totalRecordsProcessed));
                    log(ProcessExecutionSourceStatus::Success);
                }
            }
            catch (Exception::CLRError)
            {
                System.Exception ex = CLRInterop::getLastException();
                info(strFmt(ex.Message));
                log(ProcessExecutionSourceStatus::Error);
            }
            catch
            {
                log(ProcessExecutionSourceStatus::Error);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    private void post()
    {
        Set companiesToPostPrepayment = this.getCompaniesToPostPrepayment();
        SetEnumerator companiesToPostPrepaymentEnumerator = companiesToPostPrepayment.getEnumerator();

        while (companiesToPostPrepaymentEnumerator.moveNext())
        {
            this.postingByCompany(companiesToPostPrepaymentEnumerator.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method posts reversal of prepayment invoices against the original invoice present in the prepayment tracking table.
    /// </summary>
    /// <param name = "_dataAreaId">The company for which prepayment process executes.</param>
    private void postingByCompany(DataAreaId _dataAreaId)
    {
        int infologLine = infologLine();

        changecompany(_dataAreaId)
        {
            using (var activityContext = this.activities().prePaymentPostingByCompany(_dataAreaId))
            {
                prepaymentAutoSettlementPostingEvent.clear();                         
                CustPrepaymentInvoiceTable custPrepaymentInvoiceTable, custPrepaymentInvoiceTableReversal;
                                                                                       
                while select prepaymentAutoSettlementPostingEvent
                    where prepaymentAutoSettlementPostingEvent.Status == CustPrepaymentHandlingStatus::NotProcessed
                {
                    try
                    {
                        custInvoiceJour = CustInvoiceJour::findRecId(prepaymentAutoSettlementPostingEvent.CustInvoiceJour);
                        salesTable = SalesTable::find(custInvoiceJour.SalesId);                                   
                        
                        // Check that no reversal exists for the selected invoice and sales order.
                        select firstonly RecId from custPrepaymentInvoiceTableReversal
                            exists join custPrepaymentInvoiceTable
                            where custPrepaymentInvoiceTableReversal.OrigCustPrepaymentInvoiceTable == custPrepaymentInvoiceTable.RecId
                                &&  custPrepaymentInvoiceTable.SalesId == salesTable.SalesId
                                &&  custPrepaymentInvoiceTableReversal.CustInvoiceJour == prepaymentAutoSettlementPostingEvent.CustInvoiceJour;
                            
                        if (!custPrepaymentInvoiceTableReversal)
                        {
                            if (salesTable)
                            {
                                CustPrepaymentHandler prepaymentHander = new CustPrepaymentHandler(salesTable.CustAccount);
                                prepaymentHander.handlePosting(custInvoiceJour, salesTable);
                            }

                            prepaymentSettlementProcessed = true;
                            totalRecordsProcessed ++;
                        }
                        else
                        {
                            ttsbegin;

                            prepaymentAutoSettlementPostingEvent.selectForUpdate(true);
                            prepaymentAutoSettlementPostingEvent.Status = CustPrepaymentHandlingStatus::Processed;
                            prepaymentAutoSettlementPostingEvent.update();

                            ttscommit;
                        }
                    }
                    catch
                    {
                        prepaymentSettlementErrored = true;

                        ttsbegin;

                        if (prepaymentAutoSettlementPostingEvent)
                        {
                            changecompany(custInvoiceJour.DataAreaId)
                            {
                                prepaymentAutoSettlementPostingEvent.selectForUpdate(true);
                                prepaymentAutoSettlementPostingEvent.status = CustPrepaymentHandlingStatus::Error;
                                prepaymentAutoSettlementPostingEvent.doUpdate();

                                info(strFmt("@AccountsReceivable:PrepaymentAutoSettlementPostingErrorInfo", 
                                            custInvoiceJour.SalesId, custInvoiceJour.InvoiceId, custInvoiceJour.InvoiceAccount));
                                this.writeProcessAutomationLog(processScheduleWorkItem,
                                                               ProcessExecutionSourceStatus::Error,
                                                               infologLine);
                            }
                        }

                        ttscommit;
                    }                    
                }           

                if (prepaymentSettlementProcessed)
                {
                    prePaymentAutoSettlementPostingEvent.clear();
                    custPrepaymentInvoiceTable.clear();

                    update_recordset prePaymentAutoSettlementPostingEvent
                            setting Status = CustPrePaymentHandlingStatus::Processed
                            exists join custPrepaymentInvoiceTable
                            where prePaymentAutoSettlementPostingEvent.CustInvoiceJour == custPrepaymentInvoiceTable.CustInvoiceJour
                                  && prePaymentAutoSettlementPostingEvent.Status == CustPrePaymentHandlingStatus::NotProcessed;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompaniesToPostPrePayment</Name>
				<Source><![CDATA[
    private Set getCompaniesToPostPrePayment()
    {
        Set companiesToPostPrepayment = new Set(Types::String);

        CustPrepaymentAutoSettlementPostingEvent prepaymentAutoSettlementPostingEventLoc;

        while select crossCompany dataAreaId
            from prepaymentAutoSettlementPostingEventLoc group by dataAreaId
            where prepaymentAutoSettlementPostingEventLoc.Status == CustPrepaymentHandlingStatus::NotProcessed
        {
            companiesToPostPrepayment.add(prepaymentAutoSettlementPostingEventLoc.DataAreaId);
        }

        return companiesToPostPrepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProcessAutomationLog</Name>
				<Source><![CDATA[
    private void writeProcessAutomationLog(
        ProcessScheduleWorkItem _processScheduleWorkItem,
        ProcessExecutionSourceStatus _processExecutionSourceStatus,
        int _infologStartLine)
    {
        ProcessExecutionSourceLinkItem processExecutionSourceLinkItem = this.createExecutionSourceLinkItem(_processScheduleWorkItem, _processExecutionSourceStatus);
        ProcessExecutionSourceLink processExecutionSourceLink = ProcessExecutionSourceLink::writeSourceLinkItem(processExecutionSourceLinkItem);

        if (_processExecutionSourceStatus == ProcessExecutionSourceStatus::Error 
            || _processExecutionSourceStatus == ProcessExecutionSourceStatus   ::Success)
        {
            Integer currentLine = infologLine();

            container infoLogData = infolog.copy(_infologStartLine + 1, currentLine);

            SysInfologEnumerator infoLogEnumerator = SysInfologEnumerator::newData(infoLogData);
            while (infoLogEnumerator.moveNext())
            {
                ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(processExecutionSourceLink.RecId,
                                                                                                                                            infoLogEnumerator.currentException(),
                                                                                                                                            infoLogEnumerator.currentMessage());
                ProcessExecutionMessageLog::insertMessage(messageLogItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLinkItem createExecutionSourceLinkItem(
        ProcessScheduleWorkItem _contract,
        ProcessExecutionSourceStatus _processExecutionSourceStatus)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(_contract.parmExecutionId());
        linkItem.parmExecutionSourceStatus(_processExecutionSourceStatus);
        linkItem.parmHeader("@AccountsReceivable:PrePaymentAutoSettlementService");

        if (_processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
        {
            linkItem.parmMessage("@AccountsReceivable:PrePaymentAutoSettlementServiceError");
        }
        else
        {
            linkItem.parmMessage("@AccountsReceivable:PrePaymentAutoSettlementServiceSuccess");
        }

        linkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());

        linkItem.parmSourceRecId(0);
        linkItem.parmSourceTableId(0);

        return linkItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>