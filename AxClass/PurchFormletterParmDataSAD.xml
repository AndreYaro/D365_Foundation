<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormletterParmDataSAD</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchFormletterParmDataSAD</c> class initializes invoice posting data for processing via SAD
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::PlSAD)]
class PurchFormletterParmDataSAD extends PurchFormletterParmDataInvoice
{
    private InventQty currentPlSADPurchLineQty;
    private DocumentDate currentPLSADInvoiceDocumentDate;
    private InvoiceId currentPLSADInvoiceInvoiceId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToOrigOrderIdSet</Name>
				<Source><![CDATA[
    public void addToOrigOrderIdSet(VendDocumentTableMap _vendDocumentTableMap, VendDocumentSubTableMap _vendDocumentSubTableMap, PurchTable _purchTable)
    {
        str parmTableKey;

        super(_vendDocumentTableMap, _vendDocumentSubTableMap, _purchTable);

        if (!this.skipOrderIdInReSelect(_purchTable, _vendDocumentTableMap, _vendDocumentSubTableMap))
        {
            parmTableKey = this.parmSubTableMapKey(_vendDocumentSubTableMap);
            this.insertParmSubTableMap(_vendDocumentSubTableMap, parmTableKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLinesQuery</Name>
				<Source><![CDATA[
    protected void adjustLinesQuery(boolean _queryAdditional)
    {
        void copyRanges(QueryBuildDataSource source, QueryBuildDataSource dest)
        {
            QueryBuildRange range;
            int i;

            for (i = 1; i <= source.rangeCount(); i++)
            {
                range = source.range(i);
                dest.addRange(range.field()).value(range.value());
            }
        }

        super(_queryAdditional);

        if (_queryAdditional)
        {
            copyRanges(
                chooseLines.query().dataSourceTable(tableNum(VendInvoiceInfoLine_W)),
                chooseLinesPendingInvoice.query().dataSourceTable(tableNum(VendInvoiceInfoLine_W)));

            copyRanges(
                chooseLines.query().dataSourceTable(tableNum(PlSADPurchLine)),
                chooseLinesPendingInvoice.query().dataSourceTable(tableNum(PlSADPurchLine)));
        }

        // no non-PO posting here
        chooseLinesNonPOInvoice.query().dataSourceTable(tableNum(VendInvoiceInfoTable)).enabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    protected boolean createParmLine(
        Common         _purchLine,
        TradeLineRefId _tableRef                          = '',
        boolean        _callFromCreateParmLineAndSubLines = false)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        str                     vendInvoiceInfoLineKey;
        VendInvoiceInfoLine     localVendInvoiceInfoLine;

        boolean ret = super(_purchLine, _tableRef, _callFromCreateParmLineAndSubLines);

        if (ret)
        {
            vendInvoiceInfoLineKey = this.parmLineMapKey(_purchLine);
            if (parmLineMap.exists(vendInvoiceInfoLineKey))
            {
                localVendInvoiceInfoLine = parmLineMap.lookup(vendInvoiceInfoLineKey);

                vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::createFromVendInvoiceInfoLine(
                    localVendInvoiceInfoLine,
                    localVendInvoiceInfoLine.ParmId,
                    localVendInvoiceInfoLine.purchTable().PurchName,
                    false);

                this.insertParmSubTable(vendInvoiceInfoSubTable);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLineAndSubLines</Name>
				<Source><![CDATA[
    protected boolean createParmLineAndSubLines(PurchLine _purchLine, container _packedSubLinesMap, TradeLineRefId _tableRef)
    {
        boolean ret = false;

        if (_purchLine.purchLine_W().SADInvoiceLineNo_PL)
        {
            ret = super(_purchLine, _packedSubLinesMap, _tableRef);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmTableFromLine</Name>
				<Source><![CDATA[
    protected void initParmTableFromLine(VendDocumentTableMap _vendDocumentTable, common _sourceLineMap)
    {
        if (_vendDocumentTable.Num)
        {
            return;
        }	

        [_vendDocumentTable.Num, _vendDocumentTable.DocumentDate] = this.getSADInvoiceIdDocumentDate(_sourceLineMap.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryBuild</Name>
				<Source><![CDATA[
    protected void initQueryBuild()
    {
        void addSADDatasources(Query _query, boolean _initRanges)
        {
            QueryBuildDataSource qbdsVendInvoiceInfoLine;
            QueryBuildDataSource qbdsVendInvoiceInfoLine_W;
            QueryBuildDataSource qbdsPurchLine;
            QueryBuildDataSource qbdsPurchLine_W;
            QueryBuildDataSource qbdsPlSADPurchLine;

            qbdsVendInvoiceInfoLine = _query.dataSourceTable(tableNum(VendInvoiceInfoLine));

            qbdsVendInvoiceInfoLine_W = qbdsVendInvoiceInfoLine.addDataSource(tableNum(VendInvoiceInfoLine_W));
            qbdsVendInvoiceInfoLine_W.joinMode(JoinMode::InnerJoin);
            qbdsVendInvoiceInfoLine_W.relations(true);
            if (_initRanges)
            {
                findOrCreateRange_W(qbdsVendInvoiceInfoLine_W, fieldNum(VendInvoiceInfoLine_W, SADNumberCode_PL), this.parmSADNumberCode_PL());
            }

            // PurchLine
            JoinMode joinMode = FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance())
                                ? JoinMode::InnerJoin 
                                : JoinMode::ExistsJoin;

            qbdsPurchLine           = _query.dataSourceTable(tableNum(PurchLine));
            if (! qbdsPurchLine)
            {
                qbdsPurchLine = qbdsVendInvoiceInfoLine.addDataSource(tableNum(PurchLine));
                qbdsPurchLine.joinMode(joinMode);
                qbdsPurchLine.relations(true);
            }

            qbdsPlSADPurchLine      = qbdsPurchLine.addDataSource(tableNum(PlSADPurchLine));

            qbdsPlSADPurchLine.joinMode(joinMode);
            qbdsPlSADPurchLine.relations(true);
            if (_initRanges)
            {
                findOrCreateRange_W(qbdsPlSADPurchLine, fieldNum(PlSADPurchLine, SADNumberCode), this.parmSADNumberCode_PL());
            }

            qbdsPurchLine_W         = qbdsPurchLine.addDataSource(tableNum(PurchLine_W));

            qbdsPurchLine_W.joinMode(JoinMode::InnerJoin);
            qbdsPurchLine_W.relations(true);
            qbdsPurchLine_W.addSortField(fieldnum(PurchLine_W, SADInvoiceLineNo_PL));
            qbdsPurchLine.addSortField(fieldnum(PurchLine, LineNumber));

            if (FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance()))
            {
                qbdsPlSADPurchLine.fetchMode(QueryFetchMode::One2One);
                qbdsPurchLine_W.fetchMode(QueryFetchMode::One2One);

                qbdsPlSADPurchLine.addSelectionField(fieldNum(PlSADPurchLine, SADInvoiceLineNo));
                qbdsPlSADPurchLine.addSelectionField(fieldNum(PlSADPurchLine, Qty));

                QueryBuildDataSource qbdsPlSADInvoice = qbdsPlSADPurchLine.addDataSource(tableNum(PlSADInvoice));
                qbdsPlSADInvoice.joinMode(JoinMode::InnerJoin);
                qbdsPlSADInvoice.fetchMode(QueryFetchMode::One2One);
                qbdsPlSADInvoice.relations(false);
                qbdsPlSADInvoice.addLink(fieldNum(PlSADPurchLine, PurchId), fieldNum(PlSADInvoice, PurchId));
                qbdsPlSADInvoice.addLink(fieldNum(PlSADPurchLine, SADNumberCode), fieldNum(PlSADInvoice, SADNumberCode));
                qbdsPlSADInvoice.addLink(fieldNum(PlSADPurchLine, SADInvoiceLineNo), fieldNum(PlSADInvoice, SADInvoiceLineNo));

                qbdsPlSADInvoice.addSelectionField(fieldNum(PlSADInvoice, InvoiceId));
            }
        }

        super();

        addSADDatasources(chooseLines.query(), true);
        addSADDatasources(chooseLinesPendingInvoice.query(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSetBasedLogic</Name>
				<Source><![CDATA[
    protected boolean allowSetBasedLogic()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmLine</Name>
				<Source><![CDATA[
    protected void insertParmLine(Common _parmLine)
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoLine_W   vendInvoiceInfoLine_W;
        PlSADPurchLine          sadPurchLine;

        if (_parmLine.TableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoLine   = _parmLine;
            vendInvoiceInfoLine_W = vendInvoiceInfoLine.vendInvoiceInfoLine_W();

            if (FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance()))
            {
                sadPurchLine = PlSADPurchLine::findRefRecIdInvoiceId(vendInvoiceInfoLine.PurchLineRecId, currentPLSADInvoiceInvoiceId);
            }
            else
            {
                sadPurchLine = PlSADPurchLine::find(vendInvoiceInfoLine.PurchLineRecId);
            }

            vendInvoiceInfoLine_W.SADInvoiceLineNo_PL = sadPurchLine.SADInvoiceLineNo;
            vendInvoiceInfoLine_W.SADLineNo_PL        = sadPurchLine.SADLineNo;
            vendInvoiceInfoLine_W.SADNumberCode_PL    = this.parmSADNumberCode_PL();
            vendInvoiceInfoLine_W.VendInvoiceInfoLine = vendInvoiceInfoLine.RecId;

            vendInvoiceInfoLine.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_W);
        }

        super(_parmLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmSubTable</Name>
				<Source><![CDATA[
    protected void insertParmSubTable(Common _vendInvoiceInfoSubTable)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable = _vendInvoiceInfoSubTable;

        if (! parmSubTableMap.exists(this.parmSubTableMapKey(vendInvoiceInfoSubTable)))
        {
            super(vendInvoiceInfoSubTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertParmTable</Name>
				<Source><![CDATA[
    protected void insertParmTable(Common _vendInvoiceInfoTable)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = _vendInvoiceInfoTable;
        PlSADInvoice         localSADInvoice;
        PlSADTable           localSADTable = PlSADTable::find(this.parmSADNumberCode_PL());

        select firstOnly DocumentDate from localSADInvoice
            where localSadInvoice.SADNumberCode == this.parmSADNumberCode_PL() &&
                  localSadInvoice.InvoiceId     == vendInvoiceInfoTable.Num;

        vendInvoiceInfoTable.ExchRate           = localSADTable.ExchRate;
        vendInvoiceInfoTable.DocumentDate       = localSADInvoice.DocumentDate;
        vendInvoiceInfoTable.vendDocumentTableMap::parmVATDueDate_W(localSADTable.VATDueDate);
        vendInvoiceInfoTable.vendDocumentTableMap::parmPurchReceiptDate_W(vendInvoiceInfoTable.vendDocumentTableMap::parmVATDueDate_W());

        super(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineMapKey</Name>
				<Source><![CDATA[
    protected str parmLineMapKey(Common _line)
    {
        str key;
	
        switch (_line.TableId)
        {
            case tableNum(VendInvoiceInfoLine)     :
                VendInvoiceInfoLine vendInvoiceInfoLine = _line;
                key = this.addToKey(key, this.getSADInvoiceId(vendInvoiceInfoLine.purchLine().RecId));
                key = this.addToKey(key, vendInvoiceInfoLine.InventTransId);
                break;

            case tableNum(PurchLine) :
                PurchLine purchLine = _line;
                key = this.addToKey(key, this.getSADInvoiceId(purchLine.RecId));
                key = this.addToKey(key, purchLine.InventTransId);
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSADInvoiceId</Name>
				<Source><![CDATA[
    private InvoiceId getSADInvoiceId(PurchLineRefRecId _purchLineRefRecId)
    {
        TransDate dummy;
        InvoiceId invoiceId;

        [invoiceId, dummy] = this.getSADInvoiceIdDocumentDate(_purchLineRefRecId);
        
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSADInvoiceIdDocumentDate</Name>
				<Source><![CDATA[
    private container getSADInvoiceIdDocumentDate(PurchLineRefRecId _purchLineRefRecId)
    {
        if (FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance()))
        {
            return [currentPLSADInvoiceInvoiceId, currentPLSADInvoiceDocumentDate];
        }

        PlSADPurchLine sadPurchLine = PlSADPurchLine::find(_purchLineRefRecId);
        PlSADInvoice sadInvoice = PlSADInvoice::findInvoiceNo(sadPurchLine.SADNumberCode, sadPurchLine.SADInvoiceLineNo);
        
        return [sadInvoice.InvoiceId, sadInvoice.DocumentDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableMapKey</Name>
				<Source><![CDATA[
    protected str parmTableMapKey(Common _source)
    {
        str                         key;
        VendInvoiceInfoTable        vendInvoiceInfoTable;
        VendInvoiceInfoSubTable     vendInvoiceInfoSubTable;
        VendInvoiceInfoLine         vendInvoiceInfoLine;
        PurchLine                   purchLine;

        // no super() call

        switch (_source.TableId)
        {
            case tableNum(VendInvoiceInfoTable)    :
                vendInvoiceInfoTable    = _source;
                key = this.addToKey(key, vendInvoiceInfoTable.Num);
                break;

            case tableNum(VendInvoiceInfoSubTable) :
                vendInvoiceInfoSubTable = _source;
                key = this.addToKey(key, vendInvoiceInfoSubTable.vendInvoiceInfoTable().Num);
                break;

            case tableNum(VendInvoiceInfoLine)     :
                vendInvoiceInfoLine     = _source;
                key = this.addToKey(key, this.getSADInvoiceId(vendInvoiceInfoLine.purchLine().RecId));
                break;

            case tableNum(PurchLine)               :
                key = this.addToKey(key, this.getSADInvoiceId(_source.RecId));
                break;
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesNext</Name>
				<Source><![CDATA[
    protected boolean chooseLinesNext()
    {
        boolean ret = super();

        if (FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance()))
        {
            PLSADInvoice currentPLSADInvoice = chooseLines.get(tableNum(PLSADInvoice));
            currentPLSADInvoiceInvoiceId = currentPLSADInvoice.InvoiceId;
            currentPLSADInvoiceDocumentDate = currentPLSADInvoice.DocumentDate;
        }

        PlSADPurchLine sadPurchLine = chooseLines.get(tableNum(PlSADPurchLine));
        currentPlSADPurchLineQty = sadPurchLine.Qty;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmLine</Name>
				<Source><![CDATA[
    protected void setParmLine(PurchLine _purchLine, VendDocumentLineMap _localParmLine)
    {
        super(_purchLine, _localParmLine);

        if (FeatureStateProvider::isFeatureEnabled(PlSADMultiInvoicePerPurchOrderFeature::instance()))
        {
            _localParmLine.ReceiveNow = currentPlSADPurchLineQty;
            _localParmLine.setInventReceiveNow();

            _localParmLine.vendDocumentLineInterface().modifiedReceiveNowWithPromptDefaultByDocumentStatus(
                true,
                UnknownNoYes::Unknown,
                DocumentStatus::PlSAD);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>