<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjConsumptionCateg2PrdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjConsumptionCateg2PrdDP</c> class provides data for the
///    <c>ProjListProjConsumptionCategory2CoPeriod</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjConsumptionContract))
]
class ProjListProjConsumptionCateg2PrdDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    projStatement                   period1ProjStatement;
    projStatement                   period2ProjStatement;
    ProjListProjTrans_Consumption   listProjTrans;
    projListProjTrans2Period        listProjTrans2Period;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjConsumptionTmp      projListProjConsumptionTmp;

    QueryRun                queryRun;

    AmountMST               period1Salary;
    AmountMST               period2Salary;
    ProjQty                 period1QtyHour;
    ProjQty                 period2QtyHour;
    AmountMST               period1TotalCost;
    AmountMST               period2TotalCost;
    AmountMST               period1Item;
    AmountMST               period2Item;
    AmountMST               period1Expenses;
    AmountMST               period2Expenses;

    ProjCategoryId          categoryId;
    ProjCategoryName        categoryName;

    boolean                 checkEmplItem;
    boolean                 firstRun;

    str                     headerLabel;
    str                     period1Label;
    str                     period2Label;
    int                     hourQtyDecimals;
    int                     valueAddedDecimals;
    int                     grossMarginDecimals;
    int                     amountDecimals;
    int                     showQtyHour;
    int                     showSalary;
    int                     showExpenses;
    int                     showItem;
    int                     showTotalCost;
    int                     reportType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        period1ProjStatement.parmCategoryId(categoryId);
        period2ProjStatement.parmCategoryId(categoryId);

        if (amountQty == ProjAmountQty::Amount || amountQty == ProjAmountQty::AmountQty)
        {
            period1Salary      = period1ProjStatement.c105_Consumption_Hour();
            period2Salary      = period2ProjStatement.c105_Consumption_Hour();
        }

        if (amountQty == ProjAmountQty::Qty || amountQty == ProjAmountQty::AmountQty)
        {
            period1QtyHour     = period1ProjStatement.c105_Consumption_Hour_qty();
            period2QtyHour     = period2ProjStatement.c105_Consumption_Hour_qty();
        }

        period1Expenses    = period1ProjStatement.c125_Consumption_Cost();
        period1Item        = period1ProjStatement.c120_Consumption_Item();
        period1TotalCost   = period1ProjStatement.c100_Total_Consumption();

        period2Expenses    = period2ProjStatement.c125_Consumption_Cost();
        period2Item        = period2ProjStatement.c120_Consumption_Item();
        period2TotalCost   = period2ProjStatement.c100_Total_Consumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>projListProjConsumptionTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>projListProjProfitLossTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjConsumptionTmp')]
    public ProjListProjConsumptionTmp getProjListProjConsumptionTmp()
    {
        select * from projListProjConsumptionTmp;
        return projListProjConsumptionTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans2Period = projListProjTrans2Period::construct(ProjListStateType::Consumption, ProjListStateId::Category);
        listProjTrans = listProjTrans2Period.getProjListProjTrans1();
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans2Period.getProjListProjTrans1());

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmtime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);

        listProjTrans2Period.parmPeriod1FromDate(ledgerFromDate);
        listProjTrans2Period.parmPeriod1ToDate(ledgerToDate);
        listProjTrans2Period.parmPeriod2FromDate(ledgerFromDate1);
        listProjTrans2Period.parmPeriod2ToDate(ledgerToDate1);

        listProjTrans2Period.parmColumnData(actualVsBudget);
        listProjTrans2Period.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListprojListProjConsumptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListprojListProjConsumptionTmp()
    {
        projListProjConsumptionTmp.clear();

        projListProjConsumptionTmp.Id            = categoryId;
        projListProjConsumptionTmp.IdLabel       = "@SYS69410";
        projListProjConsumptionTmp.Name          = categoryName;

        projListProjConsumptionTmp.QtyHour       = period1QtyHour;
        projListProjConsumptionTmp.QtyHour1      = period2QtyHour;

        projListProjConsumptionTmp.EmplCost      = listProjTransLayout.showAmountReport(period1Salary, showAmount);
        projListProjConsumptionTmp.EmplCost1     = listProjTransLayout.showAmountReport(period2Salary, showAmount);

        projListProjConsumptionTmp.CostCost      = listProjTransLayout.showAmountReport(period1Expenses, showAmount);
        projListProjConsumptionTmp.CostCost1     = listProjTransLayout.showAmountReport(period2Expenses, showAmount);

        projListProjConsumptionTmp.ItemCost      = listProjTransLayout.showAmountReport(period1Item, showAmount);
        projListProjConsumptionTmp.ItemCost1     = listProjTransLayout.showAmountReport(period2Item, showAmount);

        projListProjConsumptionTmp.TotalCost     = listProjTransLayout.showAmountReport(period1TotalCost, showAmount);
        projListProjConsumptionTmp.TotalCost1    = listProjTransLayout.showAmountReport(period2TotalCost, showAmount);

        // set labels
        projListProjConsumptionTmp.HeaderLabel     = headerLabel;
        projListProjConsumptionTmp.PeriodLabel     = period1Label;
        projListProjConsumptionTmp.PeriodLabel1    = period2Label;

        // set decimal values
        projListProjConsumptionTmp.DecimalHourQty     = hourQtyDecimals;
        projListProjConsumptionTmp.DecimalAmount      = amountDecimals;

        // set field visibility
        projListProjConsumptionTmp.ShowQtyHour        = showQtyHour;
        projListProjConsumptionTmp.ShowEmplCost       = showSalary;
        projListProjConsumptionTmp.ShowTotalCost      = showTotalCost;
        projListProjConsumptionTmp.ShowItemCost       = showItem;
        projListProjConsumptionTmp.ShowCostCost       = showExpenses;

        projListProjConsumptionTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether if the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return ((period1Salary       != 0) ||
                (period2Salary       != 0) ||
                (period1QtyHour      != 0) ||
                (period2QtyHour      != 0) ||
                (period2TotalCost    != 0) ||
                (period1TotalCost    != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeHide, rangeDummy;

        queryDataSource     = queryRun.query().dataSourceTable(tablenum(ProjCategory));

        queryDataSource.addSortField(fieldnum(ProjCategory,CategoryId));
        rangeHide           = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
        rangeHide.status(RangeStatus::Hidden);

        if (hour)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (expenses)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (item)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (! (hour || expenses || item))
        {
            rangeDummy            = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
            rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the category record and calls the <c>calculate</c> method.
    /// </summary>
    void printCategory()
    {
        ProjCategory       projCategoryLocal;

        projCategoryLocal       = queryRun.get(tablenum(ProjCategory));

        categoryId              = projCategoryLocal.CategoryId;
        categoryName            = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListprojListProjConsumptionTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SQL Server Reporting Services (SSRS) at run time. The method should compute data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjConsumptionContract contract = this.parmDataContract() as ProjListProjConsumptionContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();

        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        ledgerFromDate1 = contract.parmLedgerFromDate1();
        ledgerToDate1 = contract.parmLedgerToDate1();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();

        reportType = contract.parmReportType();

        this.initProjListTrans();

        [showQtyHour, showSalary, showExpenses, showItem, showTotalCost] = listProjTrans.setDisplayFlags(amountQty, hour, expenses, item);
        [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        period1Label = listProjTrans2Period.formatPeriodLabel("@SYS9308",1, DateFlags::None);
        period2Label = listProjTrans2Period.formatPeriodLabel("@SYS13183",2, DateFlags::None);
        headerLabel = listProjTrans2Period.formatSelection(showAmount);

        period1ProjStatement = projStatement::newListProjConsumption(listProjTrans2Period.getProjListProjTrans1(),
                                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget), amountQty, forecastModelId);

        period2ProjStatement = projStatement::newListProjConsumption(listProjTrans2Period.getProjListProjTrans2(),
                                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget), amountQty, forecastModelId);

        queryRun = new SysQueryRun(this.parmQuery());

        this.modifyQuery();

        while (queryRun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>