<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableWizardCtrl</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjTableWizardCtrl
{
    ProjTableWizard projTableWizard;
    FormDataSource form_DS;

    ProjId templateProjId;
    ProjId parentProjId;
    ProjId createProjId;
    ProjId newId;
    WizardProjName createMethod;
    ProjName createMask;
    ProjInvoiceProjId createInvoiceProjId;
    CustAccount createCustAccount;
    ProjType createProjType;

    boolean dimension4Copy[];
    ProjGroupId projGroupId;
    ProjStatus projStatus;
    ProjResponsibleWorker projResponsibleWorker;
    ProjResponsibleFinancialWorker projResponsibleFinancialWorker;
    ProjResponsibleSalesWorker projResponsibleSalesWorker;
    ProjProjectedStartDate projProjectedStartDate;
    ProjStartDate projStartDate;
    ProjProjectedEndDate projProjectedEndDate;
    ProjExtensionDate projExtensionDate;
    ProjEndDate projEndDate;
    ProjTaxGroup projTaxGroup;
    ProjPriceGroupID projPriceGroup;

    Email contactEmail;

    ProjTable buffer;
    ProjWIPTable projWIPTable;
    NumberSeq numberSeq;

    boolean first;

    str sortingId1;
    str sortingId2;
    str sortingId3;

    DimensionDefault dim;
    str controlId;
    str periodId;
    int maxProjCount;
    Array oldProjId, newProjId;
    boolean copyAddress;
    boolean copyPwpSetting;
    boolean copyVendRetention;
    boolean isDimModified;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>childExist</Name>
				<Source><![CDATA[
    boolean childExist(ProjTable _projTable)
    {
        ProjTable   projChild;
        ProjId      projId = _projTable.ProjId;

        projChild.setTmp();
        projChild.setTmpData(_projTable);

        select firstonly projChild where projChild.ParentId == projId;

        if (projChild)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdQtyDB</Name>
				<Source><![CDATA[
    int createdQtyDB()
    {
        return any2int((select count(RecId) from projTable).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdQtyFile</Name>
				<Source><![CDATA[
    Integer createdQtyFile()
    {
        ProjTable    projTableFile;
        int                 tmpCount;

        projTableFile.setTmp();
        projTableFile.setTmpData(buffer);

        while select RecId from projTableFile
        {
            tmpCount++;
        }

        return tmpCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new Project based on the selected template.
    /// </summary>
    /// <param name="values">
    /// A container of template project record information.
    /// </param>
    void createProject(container values)
    {
        ProjTable               projStructure;
        
        oldProjId = new Array(Types::String);
        newProjId = new Array(Types::String);
        first = true;
        maxProjCount = 1;
        isDimModified = false;

        this.unPackCreateValues(values);
        this.deleteFile();

        select projStructure
            order by ProjId
            where projStructure.ProjId like this.templateProjId()+'*';

        while (projStructure)
        {
            buffer.data(projStructure);
            
            this.initializeProjTable(projStructure);

            first = false;

            if (!this.validateFields() || !buffer.ProjId)
            {
                break;
            }

            if (this.projWorkerValidation(buffer))
            {
                buffer.doInsert();
            }

            maxProjCount++;
            next projStructure;
        }

        form_DS.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projWorkerValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the responsible workers have active employment.
    /// </summary>
    /// <param name = "_projTable">
    ///     A <c>ProjTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if the responsible workers have active employment or no workers defined; otherwise false.
    /// </returns>
    protected boolean projWorkerValidation(ProjTable _projTable)
    {
        return this.responsibleWorkerHasActiveEmployement(_projTable.WorkerResponsible)
                && this.responsibleFinancialWorkerHasActiveEmployement(_projTable.WorkerResponsibleFinancial)
                && this.responsibleSalesWorkerHasActiveEmployement(_projTable.WorkerResponsibleSales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsibleWorkerHasActiveEmployement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the project responsible worker has the active employment.
    /// </summary>
    /// <param name = "_projTable">
    ///     A <c>ProjTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if the project responsible worker has the active employment or no worker defined; otherwise false.
    /// </returns>
    protected boolean responsibleWorkerHasActiveEmployement(ProjResponsibleWorker _workerRecId)
    {
        if (_workerRecId)
        {
            return HcmEmployment::getActiveEmploymentsByWorker(_workerRecId).RecId;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsibleFinancialWorkerHasActiveEmployement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the project responsible financial worker has the active employment.
    /// </summary>
    /// <param name = "_projTable">
    ///     A <c>ProjTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if the project responsible financial worker has the active employment or no worker defined; otherwise false.
    /// </returns>
    protected boolean responsibleFinancialWorkerHasActiveEmployement(ProjResponsibleFinancialWorker _workerRecId)
    {
        if (_workerRecId)
        {
            return HcmEmployment::getActiveEmploymentsByWorker(_workerRecId).RecId;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsibleSalesWorkerHasActiveEmployement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the project responsible sales worker has active employment.
    /// </summary>
    /// <param name = "_projTable">
    ///     A <c>ProjTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if the project responsible sales worker has the active employment or no worker defined; otherwise false.
    /// </returns>
    protected boolean responsibleSalesWorkerHasActiveEmployement(ProjResponsibleSalesWorker _workerRecId)
    {
        if (_workerRecId)
        {
            return HcmEmployment::getActiveEmploymentsByWorker(_workerRecId).RecId;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ProjTable</c> record based on the selected template.
    /// </summary>
    /// <param name="_projTable">
    /// The project table record with selected template information.
    /// </param>
    protected void initializeProjTable(ProjTable _projTable)
    {
        buffer.Created = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        // Address will be setup latter in the script.
        buffer.DlvName = '';
        buffer.DeliveryLocation = 0;

        // Set new shop floor control job Id
        buffer.JobId = '';
        buffer.setShopFloorControlJobId();

        oldProjId.value(maxProjCount, buffer.ProjId);

        if (first && parentProjId)
        {
            buffer.ProjId            = createProjId;
            buffer.ParentId          = parentProjId;
        }
        else
        {
            buffer.ProjId            = ProjTableWizardCtrl::setNewProjId(_projTable.ProjId,
                                                                             _projTable.ParentId,
                                                                             this.templateProjId(),
                                                                             createProjId,
                                                                             first);
            buffer.ParentId          = this.setParentId(_projTable,buffer);
        }

        newProjId.value(maxProjCount, buffer.ProjId);

        if (first && projGroupId)
        {
            buffer.Type              = createProjType;
            buffer.projGroupId       = projGroupId;
        }
        else
        {
            buffer.Type              = _projTable.Type;
            buffer.projGroupId       = _projTable.ProjGroupId;
        }

        if (buffer.Type == ProjType::Time || buffer.Type == ProjType::TimeMaterial || buffer.Type == ProjType::FixedPrice || (buffer.ProjInvoiceProjId && ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled()))
        {
            buffer.AssetId = '';
        }

        buffer.Name              = this.setName(_projTable);
        buffer.Template          = NoYes::No;
        buffer.wipProject        = this.setWIPProject(_projTable.wipProject,buffer.Type, maxProjCount);

        if (createCustAccount)
        {
            buffer.CustAccount   = createCustAccount;
        }

        buffer.ProjInvoiceProjId = this.setInvoiceProjId();
        if (buffer.ProjInvoiceProjId)
        {
            buffer.initFromInvoice(ProjInvoiceTable::find(buffer.ProjInvoiceProjId));
        }

        buffer.Status            = this.setStatus(buffer.Type);

        if (_projTable.DefaultDimension && !DimensionDefaultFacade::areEqual(_projTable.DefaultDimension, buffer.DefaultDimension))
        {
            buffer.DefaultDimension = _projTable.DefaultDimension ;
        }
		
        if (projResponsibleWorker)
        {
            buffer.WorkerResponsible   = projResponsibleWorker;
        }
        if (projResponsibleFinancialWorker)
        {
            buffer.WorkerResponsibleFinancial = projResponsibleFinancialWorker;
        }
        if (projResponsibleSalesWorker)
        {
            buffer.WorkerResponsibleSales = projResponsibleSalesWorker;
        }

        buffer.ProjectedStartDate = projProjectedStartDate;

        // Update PsaSchedStartDate and PsaSchedEndDate to become a working date starting from ProjectedStartDate
        if (!WorkCalendarDate::isPickupDate(buffer.PsaSchedCalendarId, buffer.ProjectedStartDate))
        {
            buffer.PsaSchedStartDate  = WorkCalendar::findOpenDateForward(buffer.PsaSchedCalendarId, buffer.ProjectedStartDate, buffer.PsaSchedFromTime);
        }
        else if (buffer.ProjectedStartDate == dateNull())
        {
            buffer.psaSchedStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            buffer.PsaSchedStartDate  = buffer.ProjectedStartDate;
        }

        if (buffer.PSASchedCalendarId && buffer.PsaSchedStartDate)
        {
            Days oldProjDuration    = WorkCalendarCalculator::calcDuration(_projTable.PSASchedStartDate, _projTable.PSASchedEndDate, _projTable.PSASchedCalendarId);
            buffer.PsaSchedEndDate  = WorkCalendarCalculator::findEndDateForStartDateAndDuration(buffer.PsaSchedStartDate, oldProjDuration, buffer.PSASchedCalendarId);
        }
        else
        {
            buffer.PsaSchedEndDate    = buffer.ProjectedStartDate;
        }

        buffer.PSASchedEffort = 0;

        buffer.StartDate        = projStartDate;

        buffer.ProjectedEndDate = projProjectedEndDate;

        buffer.ExtensionDate    = projExtensionDate;

        buffer.EndDate       = projEndDate;

        if (projTaxGroup)
        {
            buffer.TaxGroupId    = projTaxGroup;
        }
        if (projPriceGroup)
        {
            buffer.ProjPriceGroup = projPriceGroup;
        }

        CustTable custTable;
        if (buffer.CustAccount)
        {
            custTable = CustTable::find(buffer.CustAccount);
            buffer.Email      = custTable.email();
        }

        LogisticsLocationEntity location;
        if (copyAddress)
        {
            //create location
            location = LogisticsLocationEntity::constructFromLocationRecId(_projTable.DeliveryLocation);
            buffer.DlvName = _projTable.DlvName;
        }
        else if (custTable.RecId)
        {
            //create location
            location = DirParty::primaryPostalAddressLocation(custTable.Party);
            if (location && location.parmLocationRecId())
            {
                buffer.DlvName = location.parmLocationDescription();
            }
        }
        if (location && location.parmLocationRecId())
        {
            LogisticsLocation logisticsLocation;
            LogisticsPostalAddress logisticsPostalAddress;
            ttsbegin;
            // Create a location record
            logisticsLocation = LogisticsLocation::create(location.parmLocationDescription(),true);
            buffer.DeliveryLocation = logisticsLocation.RecId;

            // Copy Address to location record
            logisticsPostalAddress.data(location.getPostalAddress());
            logisticsPostalAddress.Location = logisticsLocation.RecId;
            logisticsPostalAddress.insert();
            ttscommit;
        }

        if (contactEmail)
        {
            buffer.Email         = contactEmail;
        }

        if (first && !DimensionDefaultFacade::areEqual(dim, buffer.DefaultDimension))
        {
            isDimModified = true;
        }
        if (dim && isDimModified)
        {
            buffer.DefaultDimension = dim;
        }
        if (sortingId1)
        {
            buffer.SortingId[1] = sortingId1;
        }
        if (sortingId2)
        {
            buffer.SortingId[2] = sortingId2;
        }
        if (sortingId3)
        {
            buffer.SortingId[3] = sortingId3;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFile</Name>
				<Source><![CDATA[
    void deleteFile(boolean reExecuteQuery = false)
    {
        ProjTable projTable;

        projTable.setTmp();
        projTable.setTmpData(buffer);

        ttsbegin;

        while select forupdate projTable
        {
            projTable.doDelete();
        }

        ttscommit;

        if (reExecuteQuery)
        {
            form_DS.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@SYS50498";
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInFile</Name>
				<Source><![CDATA[
    boolean existInFile()
    {
        ProjTable projTable;

        projTable.setTmp();
        projTable.setTmpData(buffer);

        select firstonly RecId from projTable
            where projTable.ProjId == buffer.ProjId;

        return projTable.RecId ? (projTable.RecId == buffer.RecId ? false : true) : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDB</Name>
				<Source><![CDATA[
    void insertDB()
    {
        ProjTable       templateProjTable;
        container       templateProjIds;
        Counter         counter = 1;
        ProjTable   projTableDB,
                    projTableFile,
                    projTableTemplate;

        projTableFile.setTmp();
        projTableFile.setTmpData(buffer);

        while select ProjId from templateProjTable
            order by ProjId
            where templateProjTable.ProjId like this.templateProjId() + '*'
        {
            templateProjIds += templateProjTable.ProjId;
        }

        ttsbegin;

        while select projTableFile
        {
            projTableDB.data(projTableFile);
            if (projTableDB.validateWrite())
            {
                this.insertProjTable(projTableDB, templateProjIds, counter);
            }
            counter++;
        }

        select projTableDB
            order by ProjId
            where projTableDB.ProjId like this.parmNewId() + '*';

        select projTableTemplate
            order by ProjId
            where projTableTemplate.ProjId like this.templateProjId() + '*';

        while (projTableDB && projTableTemplate)
        {
            Docu::copy(projTableTemplate, projTableDB);
            next projTableDB;
            next projTableTemplate;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>ProjTable</c> record.
    /// </summary>
    /// <param name = "_projTableDB">
    /// A <c>ProjTable</c> table buffer.
    /// </param>
    /// <param name = "_templateProjIds">
    /// A container of project Ids.
    /// </param>
    /// <param name = "_counter">
    /// The number of records that have been inserted.
    /// </param>
    protected void insertProjTable(ProjTable _projTableDB, container _templateProjIds, Counter _counter)
    {
        _projTableDB.psaSchedScheduled = PSAScheduled::NotScheduled;

        // Clear shop floor job Id, it will be set when calling insert
        _projTableDB.JobId = '';

        _projTableDB.insert();

        if (this.parmCopyPwpSetting() || this.parmCopyVendRetention())
        {
            this.insertDBPwpSetting(conPeek(_templateProjIds, _counter), _projTableDB.ProjId);
        }

        if (_projTableDB.WorkerResponsible)
        {
            PSAProjSchedRole::addTeamMemberForProject(_projTableDB.ProjId, _projTableDB.WorkerResponsible,
                                                      _projTableDB.PSASchedStartDate, _projTableDB.PSASchedEndDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDBPwpSetting</Name>
				<Source><![CDATA[
    public void insertDBPwpSetting(ProjId _templateProjId, ProjId _newProjId)
    {
        ProjPWPVendorRetentionSetting   srcProjPWPVendorRetentionSetting;
        ProjPWPVendorRetentionSetting   desProjPWPVendorRetentionSetting;

        while select srcProjPWPVendorRetentionSetting
            where srcProjPWPVendorRetentionSetting.ProjId == _templateProjId
        {
            desProjPWPVendorRetentionSetting.data(srcProjPWPVendorRetentionSetting);
            desProjPWPVendorRetentionSetting.ProjId = _newProjId;
            if (!this.parmCopyPwpSetting())
            {
                desProjPWPVendorRetentionSetting.PwpThresholdPercent = 0;
            }
            if (!this.parmCopyVendRetention())
            {
                desProjPWPVendorRetentionSetting.RuleId = '';
            }
            desProjPWPVendorRetentionSetting.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProjTableWizard _projTableWizard, FormDataSource _form_DS  = null, FormDataSource _form_DS1 = null)
    {
        projTableWizard     = _projTableWizard;
        form_DS             = _form_DS;
        buffer              = form_DS.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyPwpSetting</Name>
				<Source><![CDATA[
    public boolean parmCopyPwpSetting(boolean _copyPwpSetting = copyPwpSetting)
    {
        copyPwpSetting  = _copyPwpSetting;

        return copyPwpSetting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyVendRetention</Name>
				<Source><![CDATA[
    public boolean parmCopyVendRetention(boolean _copyVendRetention = copyVendRetention)
    {
        copyVendRetention = _copyVendRetention;

        return copyVendRetention;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewId</Name>
				<Source><![CDATA[
    ProjId parmNewId(ProjId    _newId = newId)
    {
        newId  = _newId;

        return newId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceProjId</Name>
				<Source><![CDATA[
    ProjInvoiceProjId setInvoiceProjId()
    {
        ProjInvoiceProjId contractId = '';

        if (buffer.Type == ProjType::Time || buffer.Type == ProjType::Cost || buffer.Type == ProjType::Internal || buffer.Type == ProjType::Investment)
        {
            contractId = '';
        }
        else
        {
            if (createInvoiceProjId)
            {
                contractId = createInvoiceProjId;
            }
            else
            {
                contractId = buffer.ProjInvoiceProjId;
            }
        }
        return contractId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setName</Name>
				<Source><![CDATA[
    ProjName setName(ProjTable   _projStructure)
    {
        ProjName    name;

        switch (createMethod)
        {
            case WizardProjName::TemplateProject : name = _projStructure.Name;
                break;
            case WizardProjName::NewAndTemplate  : name = createMask + _projStructure.Name;
                break;
            case WizardProjName::NewNoTemplate   : name = createMask;
                break;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewIdArray</Name>
				<Source><![CDATA[
    Array setNewIdArray()
    {
        return newProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOldIdArray</Name>
				<Source><![CDATA[
    Array setOldIdArray()
    {
        return oldProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParentId</Name>
				<Source><![CDATA[
    ProjId setParentId(ProjTable _projStructure, ProjTable _buffer)
    {
        ProjId      parentId;
        int         lenMaskParent;

        if (_projStructure.ParentId)
        {
            if (_buffer.ProjId   == createProjId)
            {
                parentId      = '';
            }
            else
            {
                lenMaskParent       = 0;
                lenMaskParent       = strLen((select projTable where projTable.ProjId == _projStructure.ParentId).Format);
                parentId     = subStr(_buffer.ProjId,1,strLen(_buffer.ProjId)-lenMaskParent);
            }
        }

        return parentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjCount</Name>
				<Source><![CDATA[
    int setProjCount()
    {
        return maxProjCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    public ProjStatus  setStatus(ProjType  _projType)
    {
        return ProjStatusTypeRule::firstStage(_projType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWIPProject</Name>
				<Source><![CDATA[
    ProjId setWIPProject(ProjId _wipProject, ProjType _projType, int maxParent)
    {
        int i = 1;

        ProjTable projTableLocal = ProjTable::find(_wipProject);

        if (_wipProject && (_projType == ProjType::FixedPrice || _projType == ProjType::Investment ||
           (projTableLocal.ProjInvoiceProjId &&
            ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
            ProjMultipleContractLinesForProjectFeatureHelper::existContractLineForBillingMethod(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjContractBillingMethod::FixedPrice))))
        {
            while (i <= maxParent)
            {
                if (_wipProject == oldProjId.value(i))
                {
                    return newProjId.value(i);
                }
                i++;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateProjId</Name>
				<Source><![CDATA[
    ProjId templateProjId(ProjId _templateProjid  = templateProjid)
    {
        templateProjid   = _templateProjid;

        return templateProjid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPackCreateValues</Name>
				<Source><![CDATA[
    void unPackCreateValues(container values)
    {
        container   cGeneral,
                    cAddress,
                    sorting;

        [templateProjid, parentProjId, createProjId, createProjType, createMethod, createMask, createInvoiceProjId, createCustAccount, cGeneral, cAddress, sorting, dim] = values;

        [projGroupId, projStatus, projResponsibleSalesWorker,projResponsibleWorker, projResponsibleFinancialWorker, projProjectedStartDate, projStartDate, projProjectedEndDate, projExtensionDate, projEndDate, projTaxGroup, projPriceGroup] = cGeneral;

        [copyAddress, contactEmail]       = cAddress;

        [sortingId1, sortingId2, sortingId3]       = sorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateFields</Name>
				<Source><![CDATA[
    boolean validateDateFields(date startDate, date endDate, date projectedStartDate, date projectedEndDate, date extensionDate)
    {
        boolean        ok = true;

        if (ok && startDate && endDate)
        {
            if (endDate < startDate)
            {
                // End date must come after start date.
                ok = checkFailed("@SYS21592");
            }
        }

        // Validation of Projected end date shouldn't be before Projected start date and actual start date
        if (ok && (projectedEndDate && !startDate && projectedStartDate))
        {
            if (projectedEndDate < projectedStartDate)
            {
                 ok = checkFailed("@SYS130588");
            }
        }

        if (ok && (projectedEndDate && !projectedStartDate && startDate))
        {
            if (projectedEndDate < startDate)
            {
                ok = checkFailed("@SYS130589");
            }
        }

        if (ok && projectedEndDate && startDate && projectedStartDate)
        {
            if (projectedEndDate < projectedStartDate)
            {
                ok = checkFailed("@SYS130588");
            }
            if (projectedEndDate < startDate)
            {
                ok = checkFailed("@SYS130589");
            }
        }

        // Validation of Extension date shouldn't be before Actual start date or Projected start date
        if (ok && ((extensionDate && startDate) || (extensionDate && projectedStartDate)))
        {
            if (extensionDate < startDate || extensionDate < projectedStartDate)
            {
                 ok = checkFailed("@SYS130590");
            }
        }

            // Validation of Extension date shouldn't be before Projected end date
        if (ok && extensionDate && projectedEndDate && extensionDate < projectedEndDate)
        {
             ok = checkFailed("@SYS130591");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ok  = true;

        if (this.childExist(buffer))
        {
            // There are sub-projects for the project.
            ok = checkFailed("@SYS50687");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFields</Name>
				<Source><![CDATA[
    boolean validateFields()
    {
        ProjTable      projTable;
        boolean        ok = true;

        projTable.data(buffer);

        if (this.existInFile())
        {
            ok = checkFailed("@SYS57612");
        }

        if (ok && ProjTable::exist(buffer.ProjId))
        {
            ok = checkFailed("@SYS57613");
        }

        if (ok && (buffer.Type == ProjType::TimeMaterial || buffer.Type == ProjType::FixedPrice) && !buffer.ProjInvoiceProjId)
        {
            ok = checkFailed("@SYS53031");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNewProjId</Name>
				<Source><![CDATA[
    static boolean checkNewProjId(ProjId    _projIdOld,
                                  ProjId    _projIdNew,
                                  ProjId    _parentProjId = '')
    {
        boolean    ret = true;
        ProjTable  projTableMax;
        int        maskLength;
        DictType   dictType;
        ProjId     projHier = _projIdNew;

        if (ProjTable::exist(_projIdNew))
        {
            ret = checkFailed(strFmt("@SYS19470",_projIdNew));
        }

        if (ret)
        {
            if (_projIdOld)
            {
                while select ProjId from projTableMax
                    where projTableMax.ProjId like _projIdOld+'*'
                {
                    maskLength   = (strLen(projTableMax.ProjId) - strLen(_projIdOld)) > maskLength ?
                                   (strLen(projTableMax.ProjId) - strLen(_projIdOld))              :
                                    maskLength;
                }
            }
            dictType = new DictType(new DictField(tableNum(ProjTable), fieldNum(ProjTable, ProjId)).typeId());

            if (strLen(_projIdNew) + maskLength > dictType.stringLen())
            {
                ret = checkFailed(strFmt("@SYS58712",_projIdOld,(dictType.stringLen()-maskLength)));
            }
        }

        if (ret && !_parentProjId)
        {
            while (projHier)
            {
                projHier    = subStr(projHier,1,strLen(projHier)-1);
                if (ProjTable::exist(projHier))
                {
                    ret = checkFailed (strFmt("@SYS53140",projHier));
                }
            }
        }

        if (ret && !_parentProjId)
        {
            if (ProjTable::like(_projIdNew+'*'))
            {
                ret = checkFailed (strFmt("@SYS53140",ProjTable::findLike(_projIdNew+'*').ProjId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projIdLen</Name>
				<Source><![CDATA[
    static int projIdLen()
    {
        DictType            projIdType;
        projIdType = new DictType(new DictField(tableNum(ProjTable), fieldNum(ProjTable, ProjId)).typeId());

        return projIdType.stringLen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewProjId</Name>
				<Source><![CDATA[
    static ProjId setNewProjId(ProjId  _structureProjId, ProjId _structureParentId, ProjId _templateId, ProjId _createProjId, boolean _first = false)
    {
        ProjId                  newProjid;
        int                     lenFormat;
        ProjId                  parentId;
        NumberSequenceFormat    format;
        str                     fullProjID;
        DictField               dictField;

        if (_first)
        {
            newProjid   = _createProjId;
        }
        else
        {
            lenFormat = 0;
            parentId  = _structureParentId;
            format    = '';

            while (parentId && (parentId != ProjTable::find(_templateId).ParentId))
            {
                format    = (select projTable where projTable.ProjId == parentId).Format;
                lenformat += strLen(format);
                parentId  = (select projTable where projTable.ProjId == parentId).ParentId;
            }

            fullProjID   = _createProjId + subStr(
                                            _structureProjId,
                                            strLen(_structureProjId)-lenFormat+1,
                                            ProjTableWizardCtrl::projIdLen());

            dictField = new DictField(tableNum(ProjTable), fieldNum(ProjTable, ProjId));

            if (strLen(fullProjID) > dictField.stringLen())
            {
                checkFailed(strFmt("@SYS93405", fullProjID));
                newProjid = "";
            }
            else
            {
                newProjid = fullProjID;
            }
        }

        return newProjid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>