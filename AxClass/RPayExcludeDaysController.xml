<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayExcludeDaysController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates excluded days for employee.
/// </summary>
class RPayExcludeDaysController
{
    RHRMEmplId          emplId;
    Yr                  calcYear;
    RPayTimeGroupCode   nonAppearanceTimeGroupCode;
    Set                 excludeDaysSet;
    boolean             isExcludeDaysInitialized;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcExcludeDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates excluded days.
    /// </summary>
    /// <param name="_include">
    /// If true then result should be included.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void calcExcludeDays(boolean _include = true)
    {
        RPayFundEmplSumTotal    fundEmplSumTotal;
        container               yearsCon;
        Set                     yesrsSet;
        SetEnumerator           se;
        Yr                      calcYrLoc;
        TransDate               startDateLoc, endDateLoc, docEndDate;

        yearsCon = this.getYearsExcludeDays();
        yesrsSet = Set::create(yearsCon);
        yesrsSet.add(calcYear);
        se = yesrsSet.getEnumerator();

        docEndDate = this.getLastDocumentExcludeDate();

        if (!docEndDate)
        {
            docEndDate = maxdate();
        }

        ttsbegin;
        while (se.moveNext())
        {
            calcYrLoc = se.current();

            select firstonly forupdate fundEmplSumTotal
                    where   fundEmplSumTotal.emplId == emplId
                        &&  fundEmplSumTotal.Yr     == calcYrLoc
                        &&  !fundEmplSumTotal.IsManual
                        &&  !fundEmplSumTotal.VendAccount;

            if (!fundEmplSumTotal.RecId)
            {
                fundEmplSumTotal.initValue();
                fundEmplSumTotal.Yr         = calcYrLoc;
                fundEmplSumTotal.EmplId     = emplId;
                fundEmplSumTotal.Include    = _include;
            }

            startDateLoc = mkDate(1, 1, calcYrLoc);

            if (calcYrLoc < calcYear)
            {
                endDateLoc = dateEndYr(startDateLoc);
            }
            else if (calcYrLoc == calcYear)
            {
                endDateLoc = max(min(RPayParameters::PayPeriod(), dateEndYr(startDateLoc)),
                                 min(dateEndYr(startDateLoc), docEndDate));
            }
            else
            {
                endDateLoc = min(dateEndYr(startDateLoc), docEndDate);
            }

            fundEmplSumTotal.ExcludeDays = this.getExcludeDays(startDateLoc, endDateLoc);
            fundEmplSumTotal.checkAndCorrectExcludeDays();

            if (fundEmplSumTotal.RecId || fundEmplSumTotal.ExcludeDays)
            {
                fundEmplSumTotal.write();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludeDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves excluded days for employee.
    /// </summary>
    /// <param name="_startDate">
    /// Start date.
    /// </param>
    /// <param name="_endDate">
    /// End date.
    /// </param>
    /// <returns>
    /// Excluded days for employee.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Days getExcludeDays(StartDate _startDate = mkdate(1, 1, calcYear), EndDate _endDate = mkDate(31, 12, calcYear))
    {
        Days            excludedDays;
        RPayExcludeDays excludeDays;
        SetEnumerator   se;
        Set             excludeDaysSetNew = new Set(excludeDaysSet.typeId());

        se = excludeDaysSet.getEnumerator();

        while (se.moveNext())
        {
            excludeDays = se.current();
            excludeDays.parmStartDate(_startDate);
            excludeDays.parmEndDate(_endDate);

            excludedDays += excludeDays.getExcludedDays();
            excludeDaysSetNew.add(excludeDays);
        }

        excludeDaysSet = excludeDaysSetNew;

        return excludedDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves excluded period for employee.
    /// </summary>
    /// <returns>
    /// The packed set of excluded period for employee.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getExcludedPeriods()
    {
        StartDate       startYear = mkdate(1, 1, calcYear);
        EndDate         endYear = mkdate(31, 12, calcYear);
        Set             excludedPeriodsSet;
        SetEnumerator   se;
        boolean         first = true;

        RPayExcludeDays excludeDays;

        se = excludeDaysSet.getEnumerator();

        while (se.moveNext())
        {
            excludeDays = se.current();
            excludeDays.parmStartDate(startYear);
            excludeDays.parmEndDate(endYear);

            if (first)
            {
                excludedPeriodsSet = Set::create(excludeDays.getExcludedPeriods());
                first = false;
            }
            else
            {
                excludedPeriodsSet = Set::union(Set::create(excludeDays.getExcludedPeriods()), excludedPeriodsSet);
            }
        }

        return excludedPeriodsSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastDocumentExcludeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves last document date for employee.
    /// </summary>
    /// <returns>
    /// The last document date for employee.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    TransDate getLastDocumentExcludeDate()
    {
        TransDate               lastDate;
        RPayExcludeDays         excludeDays;
        SetEnumerator           se;

        se = excludeDaysSet.getEnumerator();

        while (se.moveNext())
        {
            excludeDays = se.current();

            lastDate = max(excludeDays.getLastDocumentExcludeDate(), lastDate);
        }

        return lastDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYearsExcludeDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves packed set of excluded years.
    /// </summary>
    /// <returns>
    /// The packed set of excluded years.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container getYearsExcludeDays()
    {
        StartDate               startYear = mkdate(1, 1, calcYear);
        EndDate                 endYear = mkdate(31, 12, calcYear);
        Set                     yearsSet;
        RPayExcludeDays         excludeDays;
        SetEnumerator           se;
        boolean                 first = true;

        se = excludeDaysSet.getEnumerator();

        while (se.moveNext())
        {
            excludeDays = se.current();
            excludeDays.parmStartDate(startYear);
            excludeDays.parmEndDate(endYear);

            if (first)
            {
                yearsSet = Set::create(excludeDays.getYearsExcludeDays());
                first = false;
            }
            else
            {
                yearsSet = Set::union(yearsSet, Set::create(excludeDays.getYearsExcludeDays()));
            }
        }

        return yearsSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExcludedDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the set of algoriths for calculation excluded days.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initExcludedDays()
    {
        RPayExcludeDays excludeDays;
        StartDate       startYear = mkdate(1, 1, calcYear);
        EndDate         endYear = mkdate(31, 12, calcYear);

        excludeDays = RPayExcludeDays::construct(RPayExcludeType::Tbl, emplId, startYear, endYear, nonAppearanceTimeGroupCode);
        excludeDaysSet.add(excludeDays);

        excludeDays = RPayExcludeDays::construct(RPayExcludeType::SickList, emplId, startYear, endYear, nonAppearanceTimeGroupCode);
        excludeDaysSet.add(excludeDays);

        excludeDays = RPayExcludeDays::construct(RPayExcludeType::Vacation, emplId, startYear, endYear, nonAppearanceTimeGroupCode);
        excludeDaysSet.add(excludeDays);

        excludeDays = RPayExcludeDays::construct(RPayExcludeType::BusinessTrip, emplId, startYear, endYear, nonAppearanceTimeGroupCode);
        excludeDaysSet.add(excludeDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        excludeDaysSet = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcYear</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        Yr parmCalcYear(Yr _calcYear = calcYear)
    {
        calcYear = _calcYear;
        return calcYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmplId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        RHRMEmplId parmEmplId(RHRMEmplId _emplId = emplId)
    {
        emplId = _emplId;
        return emplId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNonAppearanceTimeGroupCode</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        RPayTimeGroupCode parmNonAppearanceTimeGroupCode(RPayTimeGroupCode _nonAppearanceTimeGroupCode = nonAppearanceTimeGroupCode)
    {
        nonAppearanceTimeGroupCode = _nonAppearanceTimeGroupCode;
        return nonAppearanceTimeGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>RPayExcludeDaysController</c> class.
    /// </summary>
    /// <param name="_emplId">
    /// Employee code.
    /// </param>
    /// <param name="_calcYear">
    /// The year.
    /// </param>
    /// <param name="_nonAppearanceTimeGroupCode">
    /// The non appearance time group code.
    /// </param>
    /// <returns>
    /// The instance of <c>RPayExcludeDaysController</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayExcludeDaysController construct(
        RHRMEmplId          _emplId,
        Yr                  _calcYear,
        RPayTimeGroupCode   _nonAppearanceTimeGroupCode = RPayAverageEarnParameters::find().ExcludedTimeGroup)
    {
        RPayExcludeDaysController rPayExcludeDays = new RPayExcludeDaysController();

        rPayExcludeDays.parmEmplId(_emplId);
        rPayExcludeDays.parmCalcYear(_calcYear);
        rPayExcludeDays.parmNonAppearanceTimeGroupCode(_nonAppearanceTimeGroupCode);

        rPayExcludeDays.initExcludedDays();

        return rPayExcludeDays;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>