<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetMovementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>AssetMovementDP</c> class is the data provider for the <c>AssetMovement</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetMovement))
]
public class AssetMovementDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetMovementTmp assetMovementTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetMovementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>AssetMovementTmp</c> record.
    /// </summary>
    /// <returns>
    /// The <c>AssetMovementTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetMovementTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AssetMovementTmp getAssetMovementTmp()
    {
        select assetMovementTmp;
        return assetMovementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepartmentName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the department name.
    /// </summary>
    /// <param name="_omRecId">
    ///     The record Id of the department.
    /// </param>
    /// <returns>
    ///     The department name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public OMDepartmentName getDepartmentName(OMDepartmentRecId _omRecId)
    {
        OmOperatingUnit omUnit;

        select firstonly Name from omUnit
            where omUnit.recId == _omRecId;

        return omUnit.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party number for a worker.
    /// </summary>
    /// <param name="_workerRecId">
    /// The record ID of the <c>HCMWorker</c> table.
    /// </param>
    /// <returns>
    /// The party number for a specified worker.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DirPartyNumber getPartyNumber(HcmWorkerRecId _workerRecId)
    {
        DirPartyTable party;
        HcmWorker worker;

         select firstonly Person from worker
            join partynumber from party
                where worker.RecId == _workerRecId
                && Party.recid == worker.person;

        return party.PartyNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the query execution and populates the <c>AssetMovementTmp</c> table.
    /// </summary>
    public void processReport()
    {
        AssetBook assetBook;
        AssetTable assetTable;
        AssetSumCalc_Trans assetSumCalc;
        AssetInternalTransferHistory  transHistory;
        Range assetIdRange, bookIdRange;
        QueryRun queryRun;

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetMovementTmp.clear();

            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetBook =  queryRun.get(tableNum(AssetBook)) as AssetBook;
            transHistory = queryRun.get(tableNum(AssetInternalTransferHistory)) as AssetInternalTransferHistory;

            assetIdRange = queryValue(assetTable.AssetId);
            bookIdRange = queryValue(assetBook.BookId);

            assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetIdRange, bookIdRange, dateNull(), transHistory.TransferDate);

            assetMovementTmp.PreviousDepartment = this.getDepartmentName(transHistory.FromDepartment);
            assetMovementTmp.Department = this.getDepartmentName(transHistory.ToDepartment);

            assetMovementTmp.PreviousResponsible = HcmWorker::worker2Name(transHistory.FromWorkerResponsible);
            assetMovementTmp.Responsible = HcmWorker::worker2Name(transHistory.ToWorkerResponsible);

            assetMovementTmp.ResponsiblePartyNumber = this.getPartyNumber(transHistory.ToWorkerResponsible);

            assetMovementTmp.FinancialValue = assetSumCalc.financialValue();
            assetMovementTmp.NetBookValue = assetSumCalc.netBookValue();
            assetMovementTmp.Depreciation = assetSumCalc.depreciationValue_CZ_LV();

            assetMovementTmp.AssetId = assetTable.AssetId;
            assetMovementTmp.AssetName = assetTable.Name;
            assetMovementTmp.CategoryId = assetTable.CategoryId_LV;
            assetMovementTmp.AssetQuantity = assetTable.Quantity;

            assetMovementTmp.BookId = assetBook.BookId;

            assetMovementTmp.TransactionDate = transHistory.TransferDate;
            assetMovementTmp.PreviousLocation = transHistory.FromLocation;
            assetMovementTmp.Location = transHistory.ToLocation;

            assetMovementTmp.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>