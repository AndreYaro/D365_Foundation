<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepCalculation_EquallyDivided_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is used to do depreciation calculation for a specified Japan depreciation method: Equally divided depreciation.
/// </summary>
public class AssetDepCalculation_EquallyDivided_JP extends AssetDepCalculation_JP
{
    // The start date that depreciation should logically started, but it may be not the same as the real depreciation start date.
    // For Low value and Lump sum, when real depreciation start date is in the middle of the year, JP goverment requests to depreciate
    // a whole year's amount. It means, the real depreciation start date is still in the middle o fthe year, but the total depreciation
    // amount of this year is counted from the first month to the last month in this year. So the logically depreciation start date is
    // the first date of this year.
    AssetTransDate      depLogicStartDate;

    // The end date that depreciation should logically ended. If user follow the proposal, this date should the as as the real depreciation
    // end date. But if user do some manually change, the real end date may be different from this logically end date.
    AssetTransDate      depLogicEndDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAllowableLimitForAccumulatedDep</Name>
				<Source><![CDATA[
    protected AssetAmount calcAllowableLimitForAccumulatedDep()
    {
        AssetAmount ret;

        ret = calcArgs.parmAmountToDepreciate();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCurYearDepRateAsFraction</Name>
				<Source><![CDATA[
    protected container calcCurYearDepRateAsFraction()
    {
        container           ret;
        real                depRateNominator;
        real                depRateDenominator = 1;
        AssetTableInterval  depInterval;
        AssetTransDate      depStartDateInCurYear;
        AssetTransDate      endDateInCurYear;
        int                 numOfMonthNotBeenDivided;
        int                 numOfMonthInCurYear;

        #TimeConstants

        if (calcArgs.parmNumOfYearsEquallyDivided() <= 0)
        {
            depRateNominator = 1;
            ret = [depRateNominator, depRateDenominator];
            return ret;
        }

        depInterval             = calcArgs.parmAssetTableInterval();
        depStartDateInCurYear   = this.calcDepStartDateInCurYear();
        endDateInCurYear        = depInterval.findLastDayOfYear(depStartDateInCurYear);

        if (this.isFirstYearOfServiceLife())
        {
            depStartDateInCurYear   = this.getDepLogicStartDate();
        }
        else
        {
            depStartDateInCurYear   = this.calcDepStartDateInCurYear();
        }

        endDateInCurYear            = depInterval.findLastDayOfYear(depStartDateInCurYear);
        numOfMonthNotBeenDivided    = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(depStartDateInCurYear, this.getDepLogicEndDate() + 1);
        numOfMonthInCurYear         = AssetDepCalculationHelper_JP::calcNumberOfMthInDateRange(depStartDateInCurYear, depInterval.findLastDayOfYear(depStartDateInCurYear) + 1);
        if (numOfMonthInCurYear >= numOfMonthNotBeenDivided || numOfMonthNotBeenDivided <= 0)
        {
            depRateNominator = 1;
        }
        else
        {
            depRateNominator = numOfMonthInCurYear;
            depRateDenominator = numOfMonthNotBeenDivided;
        }

        ret = [depRateNominator, depRateDenominator];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciableRatioForCurYear</Name>
				<Source><![CDATA[
    protected real calcDepreciableRatioForCurYear()
    {
        // For equally depreciation method, each year is considered as a full year.
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcFinalAmountToDepreciate</Name>
				<Source><![CDATA[
    protected AssetAmount calcFinalAmountToDepreciate()
    {
        AssetAmount ret;

        ret = this.calcAllowableLimitForAccumulatedDep()
            - this.getBeginningBalanceOfAccumulatedDep(this.calcDepStartDateInCurYear())
            - this.getBeginningBalanceOfAccumulatedExtDep(calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmPeriodStart()));

        // reduction entry adjustment
        if (calcArgs.parmIsReductionEntry())
        {
            ret += this.getReductionEntryAdjustment(calcArgs.parmPeriodEnd());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfDepreciablePeriodInCurYear</Name>
				<Source><![CDATA[
    protected int calcNumOfDepreciablePeriodInCurYear()
    {
        int                 ret;
        AssetTransDate      depEndDateInCurYear;
        AssetTransDate      firstDateInCurYear;
        AssetTransDate      lastDateInCurYear;
        AssetTransDate      equallyDividedEndDate;
        AssetTableInterval  depInterval;

        depInterval             = calcArgs.parmAssetTableInterval();
        equallyDividedEndDate   = this.getDepLogicEndDate();

        firstDateInCurYear      = depInterval.findFirstDayOfYear(calcArgs.parmPeriodstart());
        lastDateInCurYear       = depInterval.findLastDayOfYear(calcArgs.parmPeriodstart());
        depEndDateInCurYear     = (equallyDividedEndDate > lastDateInCurYear) ? lastDateInCurYear : depInterval.endPeriod(equallyDividedEndDate);
        // Adjust the depEndDateInCurYear to make sure it is in the same year of current period strat date.
        if (depEndDateInCurYear < firstDateInCurYear)
        {
            depEndDateInCurYear = firstDateInCurYear;
        }

        ret = max(depInterval.indexofPeriod(depEndDateInCurYear) - depInterval.indexofPeriod(this.calcDepStartDateInCurYear()) + 1, 0);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDepreciationMethod</Name>
				<Source><![CDATA[
    public AssetDepreciationMethod getAssetDepreciationMethod()
    {
        return AssetDepreciationMethod::EquallyDivided_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepLogicEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the logically depreciation end date.
    /// </summary>
    /// <returns>
    /// The logically depreciation end date.
    /// </returns>
    public AssetTransDate getDepLogicEndDate()
    {
        AssetTransDate              depLogicStartDateLoc;

        if (!depLogicEndDate)
        {
            depLogicStartDateLoc = this.getDepLogicStartDate();

            depLogicEndDate = mkDate(dayOfMth(depLogicStartDateLoc), mthOfYr(depLogicStartDateLoc), year(depLogicStartDateLoc) + calcArgs.parmNumOfYearsEquallyDivided()) - 1;
        }

        return depLogicEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDepLogicStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the logically depreciation start date.
    /// </summary>
    /// <returns>
    /// The logically depreciation start date.
    /// </returns>
    public AssetTransDate getDepLogicStartDate()
    {
        AssetTable  assetTable;

        if (!depLogicStartDate)
        {
            assetTable = assetTable::find(calcArgs.parmAssetId());

            if (assetTable.AssetGroupMap_JP::isLowValue()
                || assetTable.AssetGroupMap_JP::isLumpSum())
            {
                // For Low value and Lump sum, the first year is always considered as a full year depreciation.
                // But the depreciation start date does not change.
                depLogicStartDate = calcArgs.parmAssetTableInterval().findFirstDayOfYear(calcArgs.parmDepreciationStartDate());
            }
            else
            {
                depLogicStartDate = calcArgs.parmAssetTableInterval().startOfPeriod(calcArgs.parmDepreciationStartDate());
            }
        }

        return depLogicStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstYearOfServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current depreciation period is in the first year of service life.
    /// </summary>
    /// <returns>
    /// true if it is in the first year; otherwise, return false.
    /// </returns>
    public boolean isFirstYearOfServiceLife()
    {
        boolean             ret         = false;
        AssetTableInterval  interval    = calcArgs.parmAssetTableInterval();

        if (interval.findFirstDayOfYear(calcArgs.parmPeriodStart()) == this.getDepLogicStartDate())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastYearOfServiceLife</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current depreciation period is in the last year of service life.
    /// </summary>
    /// <returns>
    /// true if it is in the last year; otherwise, return false.
    /// </returns>
    public boolean isLastYearOfServiceLife()
    {
        boolean     ret = false;

        if (calcArgs.parmAssetTableInterval().findLastDayOfYear(calcArgs.parmPeriodEnd()) >= this.getDepLogicEndDate())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>