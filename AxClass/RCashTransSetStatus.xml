<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rCashTransSetStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rCashTransSetStatus extends RunBaseBatch implements BatchRetryable
{
    LedgerJournalTrans      ledgerJournalTrans;
    RecordSortedList        ledgerJournalTransList;

    boolean                 confirmEnabled;             // Nast;UA_Cash
    boolean                 wfRun;                      //Execution without form
    // <GEELT>
    RepresPersonCard_LT     represPersonCard;
    // </GEELT>
    // Packed variables
    RCashTransStatus        status;
    RCashDocTaxValue        docTaxValue;
    RCashDocSalesTaxValue   docSalesTaxValue;

    // Dialog fields
    DialogField             dialogDocTaxValue;
    DialogField             dialogDocSalesTaxValue;
    // <GEELT>
    DialogField             dialogRepresPersonCard;
    // </GEELT>
    // <GEERU>
    boolean                 isCashCollEnabled;
    // </GEERU>

    #ISOCountryRegionCodes

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        docTaxValue,
        docSalesTaxValue
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    private boolean checkValues(LedgerJournalTrans _ledgerJournalTrans     = null,
                                RunbaseProgress    _progress               = null)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        boolean                 ret = true;

        ledgerJournalCheckPost   = LedgerJournalCheckPost::newLedgerJournalTrans(_ledgerJournalTrans,
                                                                                 LedgerJournalVoucher::Voucher,
                                                                                 NoYes::No,
                                                                                 NoYes::No,
                                                                                 NoYes::No);

        ledgerJournalCheckPost.parmShowErrorOk(false);

        if (_progress)
        {
            ledgerJournalCheckPost.progress(_progress);
        }

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

        ret = ledgerJournalCheckPost.tableErrorLog() == "" && ret;

        // <GEERU>
        if (isCashCollEnabled)
        {
            ret = this.checkCashColl_RU(_ledgerJournalTrans) && ret;
        }
        // </GEERU>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmEnabled</Name>
				<Source><![CDATA[
    public boolean confirmEnabled(boolean _confirmEnabled = confirmEnabled)
    {
        confirmEnabled = _confirmEnabled;

        return confirmEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            dialogDocTaxValue        = dialog.addFieldValue(extendedTypeStr(RCashDocTaxValue), docTaxValue);
            dialogDocSalesTaxValue   = dialog.addFieldValue(extendedTypeStr(RCashDocSalesTaxValue), docSalesTaxValue);
        }
        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            dialogRepresPersonCard = dialog.addField(extendedTypeStr(RepresPersonCard_LT));
        }
        // </GEELT>
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (dialogDocTaxValue && dialogDocSalesTaxValue)
        {
            docTaxValue      = dialogDocTaxValue.value();
            docSalesTaxValue = dialogDocSalesTaxValue.value();
        }
        // <GEELT>
        if (dialogRepresPersonCard)
        {
            represPersonCard = dialogRepresPersonCard.value();
        }
        // </GEELT>
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocSalesTaxValue</Name>
				<Source><![CDATA[
    public RCashDocSalesTaxValue parmDocSalesTaxValue(RCashDocSalesTaxValue _docSalesTaxValue = docSalesTaxValue)
    {
        docSalesTaxValue = _docSalesTaxValue;

        return docSalesTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocTaxValue</Name>
				<Source><![CDATA[
    public RCashDocTaxValue parmDocTaxValue(RCashDocTaxValue _docTaxValue = docTaxValue)
    {
        docTaxValue = _docTaxValue;

        return docTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTransList</Name>
				<Source><![CDATA[
    public RecordSortedList parmLedgerJournalTransList(RecordSortedList _ledgerJournalTransList = ledgerJournalTransList)
    {
        ledgerJournalTransList = _ledgerJournalTransList;
        return ledgerJournalTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRepresPersonCard_LT</Name>
				<Source><![CDATA[
    public RepresPersonCard_LT parmRepresPersonCard_LT(RepresPersonCard_LT  _represPersonCard = represPersonCard)
    {
        represPersonCard = _represPersonCard;
        return represPersonCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatus</Name>
				<Source><![CDATA[
    public RCashTransStatus parmStatus(RCashTransStatus _status = status)
    {
        status = _status;
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWithoutForm</Name>
				<Source><![CDATA[
    public boolean parmWithoutForm(boolean _wfRun)
    {
        wfRun = _wfRun;
        return wfRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rPaySheetDeleteRef</Name>
				<Source><![CDATA[
    private void rPaySheetDeleteRef(RCashTrans  _cashTrans)
    {
        RpayDepositTable  payDepositTable;
        ;

        switch (ledgerJournalTrans.RCashPayTransType)
        {
            case  RCashPayLedgerTransType::Cash:
                RPaySheetTable::deleteCashOrderLink(_cashTrans);
                break;
            case  RCashPayLedgerTransType::Deposit:
                ttsbegin;
                while select forupdate payDepositTable
                    where payDepositTable.PayDepositType == RPayDepositType::PettyCash  &&
                          payDepositTable.CashAccount    == _cashTrans.AccountNum       &&
                          payDepositTable.ClosedDate     == _cashTrans.TransDate        &&
                          payDepositTable.PayDocNum      == _cashTrans.DocId
                {
                    payDepositTable.ClosedDate     = dateNull();
                    payDepositTable.PayDocNum      = "";
                    payDepositTable.CashJournalNum = "";
                    payDepositTable.CashAccount    = "";

                    payDepositTable.update();
                    info(strfmt("@RUP54", payDepositTable.EmplId));
                }
                ttscommit;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.validate())
            throw error("");

        try
        {
            ttsbegin;

            if (! this.update())
                throw error("@SYS18447");

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCashTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates <c>CRashTrans</c> based on <c>RCashTransStatus</c> value.
    /// </summary>
    /// <param name = "_status">
    ///    <c>RCashTransStatus</c> value, based on which the <c>CRashTrans</c> is updated.
    /// </param>
    /// <param name = "_ledgerJourTransRCash"><c>ledgerJournalTrans_RCash</c> that is used for the update</param>
    /// <param name = "_ledgerJourTransUpd"><c>LedgerJournalTrans</c> that is used for the update</param>
    /// <returns>
    ///    <c>container</c> composed of <c>boolean</c>, <c>RCashDocId</c>, <c>RCashTrans</c>, <c>RCashTransStatus</c>.
    /// </returns>
    protected container updateCashTrans(RCashTransStatus _status, ledgerJournalTrans_RCash _ledgerJourTransRCash, LedgerJournalTrans _ledgerJourTransUpd)
    {
        boolean ok = true;
        RCashDocId docId;
        RCashTrans cashTrans;
        RCashVoucher cashVoucher = new RCashVoucher(ledgerJournalTrans, _ledgerJourTransRCash, this);
        CancelCashDueAnnouncement_RU cancelCashDueAnnouncement;

        void updateNoDecrease()
        {
            cashTrans   = cashVoucher.createOrUpdateTrans(status);
            docId       = cashTrans.DocId;
        }

        void updateAndBalanceDecrease()
        {
            updateNoDecrease();
            cashTrans.AmountCur = 0;
            cashTrans.AmountMST = 0;
            RCashVoucher::updateBalances(cashTrans);
        }

        switch (_status)
        {
            case RCashTransStatus::Confirmed :
                if (!this.checkValues(ledgerJournalTrans))
                {
                    ok = false;
                    break;
                }
                updateNoDecrease();
                if (! cashTrans)
                {
                    ok = checkFailed("@GLS104517");
                    break;
                }
                break;
            case RCashTransStatus::Approved :
                if (_ledgerJourTransRCash.TransStatus == RCashTransStatus::None && ! this.checkValues(ledgerJournalTrans))
                {
                    ok = false;
                    break;
                }
                updateNoDecrease();
                if (! cashTrans)
                {
                    ok = checkFailed("@GLS104517");
                }
                break;

            case RCashTransStatus::Canceled :
                SpecTransManager::newFromSpec(ledgerJournalTrans).deleteAll();
                updateAndBalanceDecrease();

                // should match context of cash due announcement creation
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
                {
                    cancelCashDueAnnouncement = CancelCashDueAnnouncement_RU::construct();
                    cancelCashDueAnnouncement.parmLedgerRecId(ledgerJournalTrans.RecId);
                    cancelCashDueAnnouncement.parmLedgerJournalTransForUpdate(_ledgerJourTransUpd);
                    cancelCashDueAnnouncement.run();
                }
                break;

            case RCashTransStatus::None :
                if (_ledgerJourTransRCash.TransStatus == RCashTransStatus::Confirmed ||
                           (_ledgerJourTransRCash.TransStatus == RCashTransStatus::Approved  && ! confirmEnabled))
                {
                    if (! cashVoucher.deleteTrans())
                    {
                        ok = checkFailed("@GLS104518");
                        break;
                    }
                    docId = "";
                }
                else if (_ledgerJourTransRCash.TransStatus == RCashTransStatus::Approved)
                {
                    status = RCashTransStatus::Confirmed;
                    updateAndBalanceDecrease();
                    if (! cashTrans)
                    {
                        ok = checkFailed("@GLS104517");
                    }
                }
                break;

            default:
                break;
        }

        return [ok, docId, cashTrans, status];
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    private boolean update()
    {
        RCashTrans                      cashTrans;
        RCashDocId                      docId;
        boolean                         found;
        boolean                         ok = true;
        RCashTransStatus                statusOrig;
        LedgerJournalTrans_RCash        ledgerJournalTrans_RCash;
        LedgerJournalTrans              ledgerJournalTransForUpdate;

        found = ledgerJournalTransList.first(ledgerJournalTrans);
        statusOrig = status;
        while (found && ok)
        {
            status                   = statusOrig;
            ledgerJournalTrans          = LedgerJournalTrans::findRecId(ledgerJournalTrans.RecId, true);
            ledgerJournalTransForUpdate = LedgerJournalTrans::findRecId(ledgerJournalTrans.RecId, true);
            ledgerJournalTrans_RCash = LedgerJournalTrans_RCash::find(ledgerJournalTrans.RecId, true);
            docId                    = ledgerJournalTrans_RCash.CashDocId;

            if (this.validateRCastTransStatus(ledgerJournalTrans_RCash.TransStatus))
            {
                found = ledgerJournalTransList.next(ledgerJournalTrans);
                continue;
            }

            if (ledgerJournalTrans.AccountType          == LedgerJournalACType::RCash &&
                ledgerJournalTrans.OffsetAccountType    == LedgerJournalACType::RCash)
                return checkFailed("@GLS104455");

            if (ledgerJournalTrans.AccountType       != LedgerJournalACType::RCash &&
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::RCash)
            {
                ledgerJournalTrans.AccountType           = ledgerJournalTrans.OffsetAccountType;
                ledgerJournalTrans.LedgerDimension       = ledgerJournalTrans.OffsetLedgerDimension;
                ledgerJournalTrans.AmountCurCredit       = -ledgerJournalTrans.AmountCurCredit;
                ledgerJournalTrans.AmountCurDebit        = -ledgerJournalTrans.AmountCurDebit;
                ledgerJournalTrans.OffsetAccountType     = ledgerJournalTrans.orig().AccountType;
                ledgerJournalTrans.OffsetLedgerDimension = ledgerJournalTrans.orig().LedgerDimension;
            }

            if (! ledgerJournalTrans.amount())
                return checkFailed("@SYS58995");

            // check values only if AccountType == RCash
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::RCash)
            {
                [ok, docId, cashTrans, status] = this.updateCashTrans(status, ledgerJournalTrans_RCash, ledgerJournalTransForUpdate);
            }
            else
            {
                docId = LedgerJournalTrans_RCash::find(LedgerJournalTrans::mainAccount(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher).RecId).CashDocId;
            }

            if (ok)
            {
                ledgerJournalTrans_RCash.TransStatus = status;
                if (cashTrans)
                {
                    ledgerJournalTrans_RCash.DocType = cashTrans.DocType;
                }
                ledgerJournalTrans_RCash.CashDocId = docId;
                ledgerJournalTransForUpdate.NoEdit = status == RCashTransStatus::None ?
                                                NoYes::No :
                                                NoYes::Yes;
                ledgerJournalTransForUpdate.update();

                ledgerJournalTrans_RCash.RefRecId = ledgerJournalTrans.RecId;
                ledgerJournalTrans_RCash.write();

                found = ledgerJournalTransList.next(ledgerJournalTrans);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRCastTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the ledger journal with a <c>TransStatus</c> _journal status can be skipped during the update.
    /// </summary>
    /// <param name = "_journalStatus">
    ///    The status that will be validated.
    /// </param>
    /// <returns>
    ///    true if the status matches the conditions; otherwise false.
    /// </returns>
    protected boolean validateRCastTransStatus(RCashTransStatus _journalStatus)
    {
        return (status != RCashTransStatus::None && (_journalStatus == status || _journalStatus == RCashTransStatus::Canceled
                 || (status == RCashTransStatus::Confirmed && _journalStatus == RCashTransStatus::Approved)))
                || (status == RCashTransStatus::None && _journalStatus == RCashTransStatus::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (status == RCashTransStatus::Canceled)
        {
            if (Box::yesNo("@GLS104560", DialogButton::Cancel,
                           "@GLS104500","") == DialogButton::No)
            {
                return checkFailed("@GLS101992");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS112855";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    static public void main(Args args)
    {
        RCashTransSetStatus setStatus;
        LedgerJournalTrans  ledgerJournalTrans;
        RecordSortedList    ledgerJournalTransList = new RecordSortedList(tableNum(LedgerJournalTrans));
        FormDataSource      formDS;
        boolean             ret = true;
        LedgerJournalTrans  tmpLedgerJournalTrans;

        ledgerJournalTransList.sortOrder(fieldNum(LedgerJournalTrans, RecId));
        formDS = FormDataUtil::getFormDataSource(args.record());
        for (ledgerJournalTrans = formDS.getFirst(true) ?
             formDS.getFirst(true)                      :
             args.record();
             ledgerJournalTrans;
             ledgerJournalTrans = formDS.getNext())
        {
            ledgerJournalTransList.ins(ledgerJournalTrans);
            if (ledgerJournalTrans.RecId == LedgerJournalTrans::mainAccount(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher).RecId)
            {
                while select tmpLedgerJournalTrans
                    index NumVoucherIdx
                    where tmpLedgerJournalTrans.JournalNum == ledgerJournalTrans.JournalNum &&
                          tmpLedgerJournalTrans.Voucher    == ledgerJournalTrans.Voucher    &&
                          tmpLedgerJournalTrans.RecId      != ledgerJournalTrans.RecId
                {
                    ledgerJournalTransList.ins(tmpLedgerJournalTrans);
                }
            }
        }

        setStatus = new RCashTransSetStatus();
        setStatus.parmLedgerJournalTransList(ledgerJournalTransList);
        setStatus.parmStatus(args.parmEnum());
        setStatus.confirmEnabled(RCashParameters::find().ConfirmationEnabled);

        if (((setStatus.parmStatus() == RCashTransStatus::Approved && !setStatus.confirmEnabled())
          || (setStatus.parmStatus() == RCashTransStatus::Confirmed && setStatus.confirmEnabled()))
          && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU
            // <GEELT>
            , #isoLT // </GEELT>
            ]))
        {
            ret = setStatus.prompt();
        }

        if (ret)
        {
            setStatus.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCashColl_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if values related to cash collection are correct.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// True if cash collection values are correct; otherwise, false.
    /// </returns>
    private boolean checkCashColl_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.AmountCurCredit < 0) // Storno
        {
            return ret;
        }

        if (ledgerJournalTrans_RCash::isCashCollAllowEdit_RU(_ledgerJournalTrans))
        {
            ret = this.validateCashCollAmount_RU(_ledgerJournalTrans);

            ret = this.validateCashCollMandatoryFields_RU(_ledgerJournalTrans) && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        // <GEERU>
        isCashCollEnabled = LedgerJournalTrans_RCash::isCashCollEnabled_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCashCollAmount_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates cash collection amount.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// True if amount is correct; otherwise, false.
    /// </returns>
    private boolean validateCashCollAmount_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.AmountCurCredit != RetailCashCollDeclarationJourTrans_RU::totalDeclarationAmount(_ledgerJournalTrans.RecId))
        {
            ret = checkFailed("@SYP4880999");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCashCollMandatoryFields_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates cash collection mandatory fields.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <returns>
    /// True if mandatory fields are filled in; otherwise, false.
    /// </returns>
    private boolean validateCashCollMandatoryFields_RU(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans_RCash ledgerJournalTrans_RCash;
        boolean ret = true;

        if (!_ledgerJournalTrans.BankSpecAccountId_RU)
        {
            ret = checkFailed("@SYP4880996");
        }

        ledgerJournalTrans_RCash = ledgerJournalTrans_RCash::find(_ledgerJournalTrans.RecId);

        if (!ledgerJournalTrans_RCash.CashCollBagNum_RU)
        {
            ret = checkFailed(strfmt("@GLS103654", fieldPName(LedgerJournalTrans_RCash, CashCollBagNum_RU)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>