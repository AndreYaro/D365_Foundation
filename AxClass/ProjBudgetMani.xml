<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetMani</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class ProjBudgetMani extends BudgetManipulation
{
    Object                      dialog;

    [FormObservable]
    ProjId              newProjId;
    [FormObservable]
    ProjCategoryId      newCategoryId;
    [FormObservable]
    ProjLinePropertyId  newStatus;
    [FormObservable]
    ResourceRecId       newResource;
    [FormObservable]
    NoYes               changeProjId;
    [FormObservable]
    NoYes               changeCategoryId;
    [FormObservable]
    NoYes               changeStatus;
    [FormObservable]
    NoYes               changeResource;
    [FormObservable]
    NoYes               changeFundingSource;

    [FormObservable]
    ProjId              projId;
    [FormObservable]
    BudgetModelId       budgetModel;
    [FormObservable]
    Dimension           dimensionId;
    [FormObservable]
    ProjFundingSourceId fundingSource;

    [FormObservable]
    Factor              qtyFactor;
    [FormObservable]
    Constant            qtyConstant;
    [FormObservable]
    Factor              costFactor;
    [FormObservable]
    Constant            costConstant;
    [FormObservable]
    Factor              salesFactor;
    [FormObservable]
    Constant            salesConstant;

    Integer             currentVersion;

    DialogField         _administration;
    DialogField         _changeModel;
    DialogField         _newModel;
    DialogField         _changeProjId;
    DialogField         _newProjId;
    DialogField         _changeResource;
    DialogField         _newResource;
    DialogField         _changeCategoryId;
    DialogField         _newCategoryId;
    DialogField         _changeStatus;
    DialogField         _newStatus;
    DialogField         _changeDimension;
    DialogField         _dimension;
    DialogField         _changeFundingSource;
    DialogField         _fundingsource;

    DialogField         _changePeriod;
    DialogField         _changeQty;
    DialogField         _changeBudget;

    DialogField         _qtyFactor;
    DialogField         _qtyMarkup;
    DialogField         _costFactor;
    DialogField         _costMarkup;
    DialogField         _salesFactor;
    DialogField         _salesMarkup;
    DialogGroup         _changeOfGroup;
    DialogGroup         _dateGroup;

    #define.CurrentVersion(10)
    #LOCALMACRO.CurrentList
        CurrentVersion,
        Administration,
        ChangeModel,
        Model,
        ChangeProjId,
        NewProjId,
        ChangeCategoryId,
        NewCategoryId,
        ChangeStatus,
        NewStatus,
        ChangeResource,
        NewResource,
        ChangeDim,
        Dimension,
        ChangePeriod,
        DisplacementQty,
        DisplacementMethod,
        QtyFactor,
        QtyConstant,
        CostFactor,
        CostConstant,
        SalesFactor,
        SalesConstant,
        changeFundingSource,
        fundingSource
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCategoryIdField</Name>
				<Source><![CDATA[
    void addCategoryIdField(Dialog _dialog)
    {
        _newCategoryId  = _dialog.addFieldValue(extendedTypeStr(ProjCategoryId), newCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    public void initFields(BudgetMap _projBudget)
    {
        super(_projBudget);

        if (administration== BudgetMani::Copying)
        {
            if (_projBudget.TableId == tableNum(ProjForecastRevenue)
            || _projBudget.TableId == tableNum(ProjForecastCost)
            || _projBudget.TableId == tableNum(ProjForecastEmpl))
            {
                _projBudget.TransId = NumberSeq::newGetNum(ProjParameters::numRefProjTransIdBase()).num();
            }
        }

        _projBudget.ProjId          = changeProjId     ? newProjId     : _projBudget.ProjId;
        _projBudget.CategoryId      = changeCategoryId ? newCategoryId : _projBudget.CategoryId;

        if (_projBudget.TableId != tableNum(ProjForecastRevenue))
        {
            _projBudget.LinePropertyId = changeStatus ? newStatus : _projBudget.LinePropertyId;
        }

        if (_projBudget.TableId == tableNum(ProjForecastEmpl))
        {
            _projBudget.Resource = changeResource ? newResource : _projBudget.Resource;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldsPSA</Name>
				<Source><![CDATA[
    public void initFieldsPSA(BudgetMap   _projBudget)
    {
        administration      = BudgetMani::Copying;
        changeModel         = NoYes::Yes;
        changeCategoryId    = NoYes::No;
        newCategoryId       = '';
        changeStatus        = NoYes::No;
        newStatus           = '';
        changeResource      = NoYes::No;
        newResource         = 0;
        changeProjId        = NoYes::No;
        newProjId           = '';
        changeDim           = NoYes::No;
        changePeriod        = NoYes::No;
        displacementQty     = NoYes::No;
        displacementMethod  = PeriodUnit::Day;
        qtyFactor           = 1;
        qtyConstant         = 0;
        costFactor          = 1;
        costConstant        = 0;
        salesFactor         = 1;
        salesConstant       = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        qtyFactor = 1;
        costFactor = 1;
        salesFactor = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        currentVersion   = 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeCategoryId</Name>
				<Source><![CDATA[
    public NoYes parmChangeCategoryId(NoYes _parmChangeCategoryId = changeCategoryId)
    {
        changeCategoryId  = _parmChangeCategoryId;

        return changeCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeFundingSource</Name>
				<Source><![CDATA[
    public NoYes parmChangeFundingSource(NoYes _parmChangeFundingSource = changeFundingSource)
    {
        changeFundingSource  = _parmChangeFundingSource;

        return changeFundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeProjId</Name>
				<Source><![CDATA[
    public NoYes parmChangeProjId(NoYes _parmChangeProjId = changeProjId)
    {
        changeProjId  = _parmChangeProjId;

        return changeProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeResource</Name>
				<Source><![CDATA[
    public NoYes parmChangeResource(NoYes _parmChangeResource = changeResource)
    {
        changeResource  = _parmChangeResource;

        return changeResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeStatus</Name>
				<Source><![CDATA[
    public NoYes parmChangeStatus(NoYes _parmChangeStatus = changeStatus)
    {
        changeStatus  = _parmChangeStatus;

        return changeStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostConstant</Name>
				<Source><![CDATA[
    public Constant parmCostConstant(Constant _parmCostConstant = costConstant)
    {
        costConstant  = _parmCostConstant;

        return costConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostFactor</Name>
				<Source><![CDATA[
    public Factor parmCostFactor(Factor _parmCostFactor = costFactor)
    {
        costFactor  = _parmCostFactor;

        return costFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmNewCategoryId(ProjCategoryId _parmNewCategoryId = newCategoryId)
    {
        newCategoryId  = _parmNewCategoryId;

        return newCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewFundingSourceId</Name>
				<Source><![CDATA[
    public ProjFundingSourceId parmNewFundingSourceId(ProjId _parmFundingSource = fundingSource)
    {
        fundingSource  = _parmFundingSource;

        return fundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewProjId</Name>
				<Source><![CDATA[
    public ProjId parmNewProjId(ProjId _parmNewProjId = newProjId)
    {
        newProjId  = _parmNewProjId;

        return newProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewResource</Name>
				<Source><![CDATA[
    public ResourceRecId parmNewResource(ResourceRecId _parmNewResource = newResource)
    {
        newResource  = _parmNewResource;

        return newResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNewStatus</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmNewStatus(ProjLinePropertyId _parmNewStatus = newStatus)
    {
        newStatus  = _parmNewStatus;

        return newStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyConstant</Name>
				<Source><![CDATA[
    public Constant parmQtyConstant(Constant _parmQtyConstant = qtyConstant)
    {
        qtyConstant  = _parmQtyConstant;

        return qtyConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyFactor</Name>
				<Source><![CDATA[
    public Factor parmQtyFactor(Factor _parmQtyFactor = qtyFactor)
    {
        qtyFactor  = _parmQtyFactor;

        return qtyFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesConstant</Name>
				<Source><![CDATA[
    public Constant parmSalesConstant(Constant _parmSalesConstant = salesConstant)
    {
        salesConstant  = _parmSalesConstant;

        return salesConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesFactor</Name>
				<Source><![CDATA[
    public Factor parmSalesFactor(Factor _parmSalesFactor = salesFactor)
    {
        salesFactor  = _parmSalesFactor;

        return salesFactor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    public abstract Query search()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    public void setField(BudgetMap budget)
    {
        super(budget);

        budget.Qty = (budget.Qty * qtyFactor) + qtyConstant;

        if (budget.TableId != tableNum(ProjForecastRevenue))
        {
            budget.CostPrice = (budget.CostPrice * costFactor) + costConstant;
        }

        budget.SalesPrice = (budget.SalesPrice * salesFactor) + salesConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        //  This method should be overridden by the subclass which implements the dailag method.
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>