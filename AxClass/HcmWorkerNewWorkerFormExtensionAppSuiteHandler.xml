<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerNewWorkerFormExtensionAppSuiteHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the ApplicationSuite module form extension events for the HcmWorkerNewWorker form.
/// </summary>
class HcmWorkerNewWorkerFormExtensionAppSuiteHandler
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmWorkerNewWorker_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for HcmWorkerNewWorker form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PostHandlerFor(formStr(HcmWorkerNewWorker), formMethodStr(HcmWorkerNewWorker, init))]
    public static void HcmWorkerNewWorker_Post_init(XppPrePostArgs _args)
    {
        FormRun workerForm = _args.getThis();
        FormStringControl legalEntityControl = workerForm.design().controlName(formControlStr(HcmWorkerNewWorker, LegalEntity)) as FormStringControl;
        FormStringControl employeeId_RU = workerForm.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;

        // <GEERU><GEEU>
        if (EmplParameters_RU::enableAdvanceHolders(legalEntityControl.text()))
        {
            employeeId_RU.visible(true);
            employeeId_RU.mandatory(true);
            workerForm.parmEmployeeIdOldValue(employeeId_RU.text());
        }
        // </GEERU></GEEU>

        if (RetailSMB::IsRetailSMBEnabled())
        {
            FormComboBoxControl jobId = workerForm.design().controlName(formControlStr(HcmWorkerNewWorker, jobid)) as FormComboBoxControl;
            HcmJob      hcmJob;

            jobId.clear();

            // Add all existing jobs to the combobox
            while select JobId from hcmJob
            {
                jobId.add(hcmJob.JobId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LegalEntity_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  LegalEntity form control OnModified event handler for the HcmWorkerNewWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerNewWorker, LegalEntity), FormControlEventType::Modified)]
    public static void LegalEntity_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun workerForm = _sender.formRun();

        FormStringControl legalEntityControl = workerForm.design().controlName(formControlStr(HcmWorkerNewWorker, LegalEntity)) as FormStringControl;
        FormStringControl employeeId_RU = workerForm.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;

        boolean isoRU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], legalEntityControl.text());
        employeeId_RU.visible(isoRU);
        employeeId_RU.mandatory(isoRU);

        if (! isoRU)
        {
            employeeId_RU.text('');
            workerForm.parmEmployeeIdOldValue('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmployeeId_RU_OnEnter</Name>
				<Source><![CDATA[
    /// <summary>
    ///  EmployeeId_RU form control OnEnter event handler for the HcmWorkerNewWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerNewWorker, EmployeeId_RU), FormControlEventType::Enter)]
    public static void EmployeeId_RU_OnEnter(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun senderFormRun = _sender.formRun();
        senderFormRun.checkDuplicateName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmployeeId_RU_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  EmployeeId_RU form control OnModified event handler for the HcmWorkerNewWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerNewWorker, EmployeeId_RU), FormControlEventType::Modified)]
    public static void EmployeeId_RU_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun newWorkerForm = _sender.formRun();
        newWorkerForm.isValidCreate();

        FormStringControl employeeId_RU = newWorkerForm.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;

        newWorkerForm.parmEmployeeIdOldValue(employeeId_RU.text());
    }

]]></Source>
			</Method>
			<Method>
				<Name>EmployeeId_RU_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  EmployeeId_RU form control OnValidated event handler for the HcmWorkerNewWorker form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(HcmWorkerNewWorker, EmployeeId_RU), FormControlEventType::Validated)]
    public static void EmployeeId_RU_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        FormRun workerForm = _sender.formRun();
        FormStringControl employeeId_RU = workerForm.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;
        FormControlCancelEventArgs args = _e as FormControlCancelEventArgs;
        boolean validationResult = args.cancelled();

        if (EmployeeTable_RU::findByEmployeeId(employeeId_RU.text()).RecId)
        {
            warning("@Workforce:ThisWorkerIdIsAlreadyInUseEnterANewWorkerId");
        }
        if (validationResult)
        {
            warning("@Workforce:TheWorkerIdIsNotUniquePleaseChooseAUniqueId");
            EmployeeId_RU employeeIdOldValue = workerForm.parmEmployeeIdOldValue();
            employeeId_RU.text(employeeIdOldValue);
            args.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingCreateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates employeeId_RU value on worker creation event and sets the result to EventHandlerResult.
    /// </summary>
    /// <param name="_formElement">The target form for the queries.</param>
    /// <param name="_isPersonnelActionEnable">Indicates whether or not the Personnel Action configuration key is enabled</param>
    /// <param name="_isCreateWorkerActionValid">Indicates whether or not the current criteria is valid when Personnel Action configuration key is enabled</param>
    /// <param name="_isCreateWorkerValid">Indicates whether or not the current criteria is valid when Personnel Action configuration key is not enabled</param>
    [SubscribesTo(FormStr(HcmWorkerNewWorker), delegatestr(HcmWorkerNewWorker, validatingCreate))]
    public static void validatingCreateHandler(FormRun _formElement, boolean _isPersonnelActionEnable,
        boolean _isCreateWorkerActionValid, boolean _isCreateWorkerValid)
    {
        boolean isEmployeeValid = false;
        FormStringControl employeeId_RU = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;
        // <GEERU><GEEU>
        if (! employeeId_RU.mandatory()
                || (employeeId_RU.text() != ''
                    && ! EmployeeTable_RU::findByEmployeeId(employeeId_RU.text()).RecId))
        {
            isEmployeeValid = true;
        }

        if (_isPersonnelActionEnable)
        {
            FormCommandButtonControl createWorkerActionButton = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, CreateWorkerAction)) as FormCommandButtonControl;
            createWorkerActionButton.enabled(_isCreateWorkerActionValid && isEmployeeValid);
        }
        else
        {
            FormCommandButtonControl okButton = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, OK)) as FormCommandButtonControl;
            okButton.enabled(_isCreateWorkerValid && isEmployeeValid);
        }
        // </GEERU></GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>redirectingToHcmWorkerActionDetailHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates employeeId_RU value on worker creation event and sets the result to EventHandlerResult.
    /// </summary>
    /// <param name = "_formElement">The HcmWorkerNewWorker form instance that raised the event.</param>
    /// <param name = "_args">The <c>Args</c> value which will be used to redirect to HcmWorkerActionDetail form</param>
    /// <param name="_result">The value of <c>EventHandlerResult</c></param>
    [SubscribesTo(FormStr(HcmWorkerNewWorker), delegatestr(HcmWorkerNewWorker, redirectingToHcmWorkerActionDetail))]
    public static void redirectingToHcmWorkerActionDetailHandler(FormRun _formElement, Args _args, EventHandlerResult _result)
    {
        FormStringControl employeeId_RU = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;
        _args.parm(employeeId_RU.text());
        _result.result(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorkerNewWorker_OKClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates position related records if RetailSMB is enabled
    /// </summary>
    /// <param name = "_formElement">The HcmWorkerNewWorker form instance that raised the event.</param>
    /// <param name="_result">The value of <c>EventHandlerResult</c></param>
    [SubscribesTo(formStr(HcmWorkerNewWorker), delegateStr(HcmWorkerNewWorker, OKClicked))]
    public static void HcmWorkerNewWorker_OKClicked(FormRun _formElement, EventHandlerResult _result)
    {
        #RetailSMB
        HcmPositionDuration                     positionDuration;
        utcDateTime                             validFrom;
        FormComboBoxControl jobId = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, jobid)) as FormComboBoxControl;
        FormStringControl position = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, Position)) as FormStringControl;
        FormDateTimeControl assignmentStartDate = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, AssignmentStartDate)) as FormDateTimeControl;
        FormDateTimeControl assignmentEndDate = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, AssignmentEndDate)) as FormDateTimeControl;

        HcmPosition hcmPosition = _formElement.parmHcmPosition();
        HcmPositionDetail hcmPositionDetail = _formElement.parmHcmPositionDetail();

        if (RetailSMB::IsRetailSMBEnabled())
        {
            // Set validFrom to the beginning of the day
            validFrom = DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 0);

            // Create a position with position details and duration
            hcmPosition.clear();
            hcmPosition.initValue();
            hcmPosition.PositionId = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(HcmPositionId)), true).num();
            hcmPosition.insert();

            hcmPositionDetail.initValue();
            hcmPositionDetail.Position = hcmPosition.RecId;
            hcmPositionDetail.Job = HcmJob::findByJob(jobId.text()).RecId;
            hcmPositionDetail.ValidFrom = validFrom;
            hcmPositionDetail.ValidTo = DateTimeUtil::maxValue();
            hcmPositionDetail.insert();

            positionDuration.initValue();
            positionDuration.Position = hcmPosition.RecId;
            positionDuration.ValidFrom = validFrom;
            positionDuration.ValidTo = DateTimeUtil::maxValue();
            positionDuration.insert();

            // Assign values to the controls in position group so that we can re-use the
            // bussiness logic to associate position with worker
            position.text(hcmPosition.PositionId);
            assignmentStartDate.dateTimeValue(validFrom);
            // Reduce one day to assignment end date otherwise it might exceed the position duration end date
            assignmentEndDate.dateTimeValue(DateTimeUtil::addDays(DateTimeUtil::maxValue(), -1));
        }

        // <GEERU><GEEU>
        FormStringControl employeeId_RU = _formElement.design().controlName(formControlStr(HcmWorkerNewWorker, EmployeeId_RU)) as FormStringControl;
        _result.result(employeeId_RU.text());
        // </GEERU></GEEU>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>