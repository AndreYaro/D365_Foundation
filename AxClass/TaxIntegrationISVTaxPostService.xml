<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationISVTaxPostService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TaxServiceAPI = Microsoft.Dynamics.TaxCalculation.ApiContracts;

/// <summary>
/// The <c>TaxIntegrationISVTaxPostService</c> class provides the service operation for sending tax results to tax calculation service.
/// </summary>
internal class TaxIntegrationISVTaxPostService
{
    private const str LoggerNamePost = 'Tax Integration - ISV Tax Post - Post';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes actual operation to send tax results to tax calculation service.
    /// <param name="_dataContract">
    /// A <c>TaxIntegrationISVTaxPostContract</c> object.
    /// </param>
    public void execute(TaxIntegrationISVTaxPostContract _dataContract)
    {
        if (_dataContract.parmSourceTableId() && _dataContract.parmSourceRecId())
        {
            this.postBySourceTable(_dataContract.parmSourceTableId(), _dataContract.parmSourceRecId(), _dataContract.parmTaxModuleType());
            return;
        }

        Query query = new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()));
        QueryRun queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            TaxIntegrationISVTaxPostLog executionLog = queryRun.get(tableNum(TaxIntegrationISVTaxPostLog));

            this.postBySourceTable(executionLog.SourceTableId, executionLog.SourceRecId, executionLog.Source);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBySourceTable</Name>
				<Source><![CDATA[
    private void postBySourceTable(
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        TaxModuleType _taxModuleType)
    {
        TaxIntegrationISVTaxPostLog taxIntegrationISVTaxPostLog = TaxIntegrationISVTaxPostLog::findBySource(_sourceTableId, _sourceRecId, _taxModuleType, true);

        if (taxIntegrationISVTaxPostLog.IsReverse)
        {
            TaxIntegrationISVTaxPostLog originalTaxIntegrationISVTaxPostLog;

            select firstonly originalTaxIntegrationISVTaxPostLog
                where originalTaxIntegrationISVTaxPostLog.RecId == taxIntegrationISVTaxPostLog.OrigTaxPostLogRecId;

            if (originalTaxIntegrationISVTaxPostLog.Status != TaxIntegrationISVTaxPostStatus::Succeeded)
            {
                throw warning(strFmt("@TaxIntegration:ISVSendReversedTaxFailed", taxIntegrationISVTaxPostLog.Voucher, originalTaxIntegrationISVTaxPostLog.Voucher));
            }
        }

        taxIntegrationISVTaxPostLog.updateStatus(TaxIntegrationISVTaxPostStatus::InProgress);

        TaxServiceAPI.TaxCalculationISVPostResultAggregator postResult;

        try
        {
            using (var context = TaxIntegrationAbstractActivity::getActivityContextStatic(LoggerNamePost))
            {
                TaxIntegrationCalculationInputPersisted persistedTaxCalculationInput;

                persistedTaxCalculationInput = TaxIntegrationCalculationInputPersisted::findByJournalTable(_sourceTableId, _sourceRecId, _taxModuleType, taxIntegrationISVTaxPostLog.IsReverse);

                if (persistedTaxCalculationInput
                    && persistedTaxCalculationInput.Status == TaxIntegrationPersistedTaxCalculationInputStatus::Original)
                {
                    persistedTaxCalculationInput.transit();
                }

                var taxEngineProxy = new TaxEngineServicePlusProxy();

                postResult = taxEngineProxy.postToISV(
                    TaxIntegrationTaxServiceParameters::find().ISVFeatureSetupId,
                    TaxIntegrationISVTaxPostUtil::deserializeTaxCalculationInput(persistedTaxCalculationInput.PackedTaxCalculationInput));

                if (postResult.OK)
                {
                    taxIntegrationISVTaxPostLog.updateStatus(TaxIntegrationISVTaxPostStatus::Succeeded);
                }
                else
                {
                    throw postResult.Exception;
                }
            }
        }
        catch
        {
            taxIntegrationISVTaxPostLog.updateStatus(TaxIntegrationISVTaxPostStatus::Failed, postResult.Exception.ToString());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>