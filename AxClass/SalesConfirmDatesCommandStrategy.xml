<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDatesCommandStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmDatesCommandStrategy</c> class implements the logic to set confirmed dates for a
/// <c>SalesDeliveryDateControlMap</c> map.
/// </summary>
/// <remarks>
/// This class will only set the confirmed dates. When the new dates have to be written to the database
/// they must be handled after usage of the class.
/// </remarks>
public class SalesConfirmDatesCommandStrategy extends SalesConfirmDatesStrategy
{
    SalesDeliveryDateControlType    deliveryDateControlTypeForced;
    SalesShippingDateLatestAllowed  shippingDateLatestAllowed;
    SalesShippingDateConfirmed      shippingDateConfirmedFixed;
    boolean                         skipConflictHandling;
    boolean                         notCalculateConfirmDates;
    TransDate                       maxShippingDate;
    TransDate                       maxReceiptDate;
    private SalesAllowMultipleShipDates allowMultipleShipDates;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the earliest possible ship and receipt dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <param name="_fromDate">
    /// A date value that contains a starting date.
    /// </param>
    protected void calculateConfirmedDates(
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller,
        TransDate                   _fromDate = dateNull())
    {
        TransDate fromDate;

        if (shippingDateConfirmedFixed)
        {
            fromDate = shippingDateConfirmedFixed;
        }
        else if (allowMultipleShipDates)
        {
            TransDate shipDate = _salesDeliveryDateControlMapCaller.ShippingDateConfirmed ? _salesDeliveryDateControlMapCaller.ShippingDateConfirmed : _salesDeliveryDateControlMapCaller.ShippingDateRequested;
            fromDate = max(shipDate, _fromDate);
        }
        else
        {
            fromDate = _fromDate;
        }

        if (notCalculateConfirmDates)
        {
            return;
        }

        if (deliveryDateControlTypeForced != SalesDeliveryDateControlType::None)
        {
            salesCalcAvailableDlvDates.parmTempDeliveryDateControlType(true);
            salesCalcAvailableDlvDates.parmDeliveryDateControlType(deliveryDateControlTypeForced);
        }

        super(_salesDeliveryDateControlMapCaller, fromDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed dates can be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates can be
    /// set.
    /// </param>
    /// <returns>
    /// true if confirmed dates should be set; otherwise, false.
    /// </returns>
    protected boolean canSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        TransDate       shippingDate = max(_salesDeliveryDateControlMapCaller.ShippingDateRequested,earliestShippingDate);

        return ! shippingDateLatestAllowed
              || shippingDate <= shippingDateLatestAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlTypeForced</Name>
				<Source><![CDATA[
    protected SalesDeliveryDateControlType deliveryDateControlTypeForced()
    {
        return deliveryDateControlTypeForced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWarningRequestedReceiptDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default warning when the requested receipt date is exceeded.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record.
    /// </param>
    /// <returns>
    /// true if a default warning was created; otherwise, false.
    /// </returns>
    protected boolean defaultWarningRequestedReceiptDate(SalesDeliveryDateControlMap     _salesDeliveryDateControlMapCaller)
    {
        if (   _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed   > _salesDeliveryDateControlMapCaller.ReceiptDateRequested
            || earliestReceiptDate                                       > _salesDeliveryDateControlMapCaller.ReceiptDateRequested)
        {
            setPrefix(strFmt("@SYS324466", _salesDeliveryDateControlMapCaller.ShippingDateRequested));
            this.warningDateExceeded(_salesDeliveryDateControlMapCaller.ReceiptDateRequested,
                                     _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed,
                                     extendedTypeNum(SalesReceiptDateConfirmed));

            this.warningDateExceeded(_salesDeliveryDateControlMapCaller.ReceiptDateRequested,
                                     earliestReceiptDate,
                                     extendedTypeNum(SalesReceiptDateCalculated));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWarningRequestedShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default warning when the requested ship date is exceeded.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record.
    /// </param>
    /// <returns>
    /// true if a default warning was created; otherwise, false.
    /// </returns>
    protected boolean defaultWarningRequestedShipDate(SalesDeliveryDateControlMap     _salesDeliveryDateControlMapCaller)
    {
        if (   _salesDeliveryDateControlMapCaller.ShippingDateConfirmed > _salesDeliveryDateControlMapCaller.ShippingDateRequested
            || earliestShippingDate                                     > _salesDeliveryDateControlMapCaller.ShippingDateRequested)
        {
            setPrefix(strFmt("@SYS324465", _salesDeliveryDateControlMapCaller.ShippingDateRequested));
            this.warningDateExceeded(_salesDeliveryDateControlMapCaller.ShippingDateRequested,
                                     _salesDeliveryDateControlMapCaller.ShippingDateConfirmed,
                                     extendedTypeNum(SalesShippingDateConfirmed));

            this.warningDateExceeded(_salesDeliveryDateControlMapCaller.ShippingDateRequested,
                                     earliestShippingDate,
                                     extendedTypeNum(SalesShippingDateCalculated));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateControlType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the appropriate date delivery control type.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <returns>
    /// An enumeration value that represents the date delivery control type.
    /// </returns>
    protected SalesDeliveryDateControlType deliveryDateControlType(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        SalesDeliveryDateControlType    salesDeliveryDateControlType;

        if (deliveryDateControlTypeForced == SalesDeliveryDateControlType::None)
        {
            salesDeliveryDateControlType = super(_salesDeliveryDateControlMapCaller);
        }
        else
        {
            salesDeliveryDateControlType = deliveryDateControlTypeForced;
        }

        return salesDeliveryDateControlType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements logic to handle a conflict regarding the confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which the confirmed dates
    /// exceed the requested dates.
    /// </param>
    protected void handleConflict(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        boolean warningCreated = this.handleSalesLineConflict(_salesDeliveryDateControlMapCaller);

        if (!warningCreated)
        {
            warningCreated = this.defaultWarningRequestedShipDate(_salesDeliveryDateControlMapCaller);
        }

        if (!warningCreated)
        {
            warningCreated = this.defaultWarningRequestedReceiptDate(_salesDeliveryDateControlMapCaller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSalesLineConflict</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean handleSalesLineConflict(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (_salesDeliveryDateControlMapCaller.TableId == tableNum(SalesLine))
        {
            SalesLine salesLine = _salesDeliveryDateControlMapCaller;
            SalesLine salesLineOrig = salesDeliveryDateControlMapInitial;
            if (   salesLine.ShippingDateConfirmed
                && salesLine.ShippingDateConfirmed != salesLineOrig.ShippingDateConfirmed)
            {
                if (salesLine.ShippingDateConfirmed > salesLine.ShippingDateRequested)
                {
                    warning(strFmt("@SYS323573",salesLine.ShippingDateConfirmed,salesLine.ShippingDateRequested));
                    return true;
                }
            }
            else if (shippingDateLatestAllowed && earliestShippingDate > shippingDateLatestAllowed)
            {
                warning(strFmt("@SYS323571",earliestShippingDate,shippingDateLatestAllowed));
                return true;
            }

            if (this.isDeliveryDateControlTypeMpsCTP(_salesDeliveryDateControlMapCaller))
            {
                if (salesLine
                    && salesLine.MPSFullRunCTPStatus == MPSFullRunCTPStatus::NotReady)
                {
                    if (_salesDeliveryDateControlMapCaller.DeliveryDateControlType == SalesDeliveryDateControlType::FullRunCTP)
                    {
                        warning("@SCM:MPSFullRunCTP_SalesLineNotInSyncWithPlanResult_CalculateConfirmedDates_Warning");
                    }

                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the confirmed dates and determines whether a conflict exists.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCallerOrig">
    /// A <c>SalesDeliveryDateControlMap</c> map representing a record before confirmed dates are set.
    /// </param>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map representing a record for which confirmed dates might have
    /// been set.
    /// </param>
    /// <returns>
    /// true if the confirmed dates are valid; otherwise, false.
    /// </returns>
    protected boolean haveConflict(
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCallerOrig,
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        boolean     ret;

        if (! skipConflictHandling)
        {
            ret = super(_salesDeliveryDateControlMapCallerOrig, _salesDeliveryDateControlMapCaller);

            ret = ret
                 || _salesDeliveryDateControlMapCaller.ShippingDateConfirmed > _salesDeliveryDateControlMapCaller.ShippingDateRequested
                 || _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed  > _salesDeliveryDateControlMapCaller.ReceiptDateRequested;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected boolean init(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (notCalculateConfirmDates)
        {
            earliestShippingDate = maxShippingDate;
            earliestReceiptDate  = maxReceiptDate;
            return true;
        }

        boolean ret = super(_salesDeliveryDateControlMapCaller);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the confirmed dates must be set.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates can be
    /// set.
    /// </param>
    /// <returns>
    /// true if the confirmed dates must be set; otherwise, false.
    /// </returns>
    public boolean mustSetConfirmedDates(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        return this.deliveryDateControlType(_salesDeliveryDateControlMapCaller)!= SalesDeliveryDateControlType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDateControlTypeForced</Name>
				<Source><![CDATA[
        public SalesDeliveryDateControlType parmDeliveryDateControlTypeForced(SalesDeliveryDateControlType _deliveryDateControlTypeForced = deliveryDateControlTypeForced)
    {
        deliveryDateControlTypeForced = _deliveryDateControlTypeForced;

        return deliveryDateControlTypeForced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNotCalculateConfirmDates</Name>
				<Source><![CDATA[
        public boolean parmNotCalculateConfirmDates(boolean _notCalculateConfirmDates = notCalculateConfirmDates)
    {
        notCalculateConfirmDates = _notCalculateConfirmDates;

        return notCalculateConfirmDates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingDateConfirmedFixed</Name>
				<Source><![CDATA[
        public SalesShippingDateConfirmed parmShippingDateConfirmedFixed(SalesShippingDateConfirmed _shippingDateConfirmedFixed = shippingDateConfirmedFixed)
    {
        shippingDateConfirmedFixed = _shippingDateConfirmedFixed;

        return shippingDateConfirmedFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingDateLatestAllowed</Name>
				<Source><![CDATA[
        public SalesShippingDateLatestAllowed parmShippingDateLatestAllowed(SalesShippingDateLatestAllowed _shippingDateLatestAllowed = shippingDateLatestAllowed)
    {
        shippingDateLatestAllowed = _shippingDateLatestAllowed;

        return shippingDateLatestAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipConflictHandling</Name>
				<Source><![CDATA[
        public boolean parmSkipConflictHandling(boolean _skipConflictHandling = skipConflictHandling)
    {
        skipConflictHandling = _skipConflictHandling;

        return skipConflictHandling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowMultipleShipDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and Sets the value of field Allow multiple deliveries.
    /// </summary>
    /// <param name="_allowMultipleShipDates">Value of field Allow multiple deliveries.</param>
    public boolean parmAllowMultipleShipDates(SalesAllowMultipleShipDates _allowMultipleShipDates = allowMultipleShipDates)
    {
        allowMultipleShipDates = _allowMultipleShipDates;
        return allowMultipleShipDates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public boolean run(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        boolean ret = super(_salesDeliveryDateControlMapCaller);

        maxShippingDate = max(earliestShippingDate, maxShippingDate);
        maxReceiptDate  = max(earliestReceiptDate, maxReceiptDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReqCalcExplode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a master scheduling when it is required.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    protected void runReqCalcExplode(SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller)
    {
        if (! shippingDateConfirmedFixed)
        {
            //
            // if the class is called with a shippingDateConfirmedFixed date (one ship date for all sales lines),
            // we don't need to run the master scheduling again as it has been executed during the first calculation of confirmed dates.
            //

            super(_salesDeliveryDateControlMapCaller);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfirmedDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current <c>SalesDeliveryDateControlMap</c> map by using the new confirmed dates.
    /// </summary>
    /// <param name="_salesDeliveryDateControlMapCaller">
    /// A <c>SalesDeliveryDateControlMap</c> map that represents a record for which confirmed dates must be
    /// set.
    /// </param>
    /// <param name="_shipDate">
    /// A date value that contains the new shipping date.
    /// </param>
    /// <param name="_receiptDate">
    /// A date value that contains the new receipt date.
    /// </param>
    protected void setConfirmedDates(
        SalesDeliveryDateControlMap _salesDeliveryDateControlMapCaller,
        TransDate                   _shipDate       = earliestShippingDate,
        TransDate                   _receiptDate    = earliestReceiptDate)
    {
        TransDate shipDate = _salesDeliveryDateControlMapCaller.ShippingDateConfirmed ? _salesDeliveryDateControlMapCaller.ShippingDateConfirmed : _salesDeliveryDateControlMapCaller.ShippingDateRequested;
        TransDate receiptDate = _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed  ? _salesDeliveryDateControlMapCaller.ReceiptDateConfirmed :  _salesDeliveryDateControlMapCaller.ReceiptDateRequested;

        super(_salesDeliveryDateControlMapCaller, max(_shipDate,shipDate), max(_receiptDate,receiptDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningDateExceeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a warning when the specified requested date is exceeded by another specified date.
    /// </summary>
    /// <param name="_dateRequested">
    /// A date value that contains a requested date.
    /// </param>
    /// <param name="_dateToCheck">
    /// A date value that is checked against the requested date.
    /// </param>
    /// <param name="_extendedTypeId">
    /// An integer value that contains an extended data type ID that represents the date field that is
    /// validated.
    /// </param>
    protected void warningDateExceeded(
        TransDate       _dateRequested,
        TransDate       _dateToCheck,
        extendedTypeId  _extendedTypeId)
    {
        if (_dateToCheck > _dateRequested)
        {
            warning(strFmt("@SYS76498",extendedTypeId2pname(_extendedTypeId),_dateToCheck));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesConfirmDatesCommandStrategy</c> class.
    /// </summary>
    /// <returns>
    /// A <c>SalesConfirmDatesCommandStrategy</c> object.
    /// </returns>
    private static SalesConfirmDatesCommandStrategy construct()
    {
        return new SalesConfirmDatesCommandStrategy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesConfirmDatesCommandStrategy</c> class.
    /// </summary>
    /// <param name="_deliveryDateControlTypeForced">
    /// An enumeration value that contains a forced date delivery control type.
    /// </param>
    /// <param name="_shippingDateLatestAllowed">
    /// A date value that contains the latest allowed shipping date; optional.
    /// </param>
    /// <param name="_shippingDateConfirmedFixed">
    /// A date value that contains a fixed confirmed ship date; optional.
    /// </param>
    /// <param name="_skipConflictHandling">
    /// A Boolean value that indicates whether warnings should be skipped; optional.
    /// </param>
    /// <returns>
    /// A <c>SalesConfirmDatesCommandStrategy</c> object.
    /// </returns>
    public static SalesConfirmDatesCommandStrategy newParameters(
        SalesDeliveryDateControlType    _deliveryDateControlTypeForced,
        SalesShippingDateLatestAllowed  _shippingDateLatestAllowed  = dateNull(),
        SalesShippingDateConfirmed      _shippingDateConfirmedFixed = dateNull(),
        boolean                         _skipConflictHandling       = false)
    {
        SalesConfirmDatesCommandStrategy salesConfirmDatesCommandStrategy = SalesConfirmDatesCommandStrategy::construct();
        salesConfirmDatesCommandStrategy.parmDeliveryDateControlTypeForced(_deliveryDateControlTypeForced);
        salesConfirmDatesCommandStrategy.parmShippingDateLatestAllowed(_shippingDateLatestAllowed);
        salesConfirmDatesCommandStrategy.parmShippingDateConfirmedFixed(_shippingDateConfirmedFixed);
        salesConfirmDatesCommandStrategy.parmSkipConflictHandling(_skipConflictHandling);

        return salesConfirmDatesCommandStrategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>