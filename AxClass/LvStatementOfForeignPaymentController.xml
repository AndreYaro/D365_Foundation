<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvStatementOfForeignPaymentController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class invokes the appropriate LvStatmentOfForeignPayment report based on the menu item used.
/// </summary>
public class LvStatementOfForeignPaymentController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SrsReportRdlDataContract    rdlContract;
        Query                       bankTransactionQuery;
        QueryBuildDataSource        qbds;
        MonthsOfYear                reportingMonth;
        Yr                          reportingYear;
        str                         reportingDateStr;
        date                        firstDateOfMonth;
        date                        lastDateOfMonth;

        // get the user-specified reporting date values and derive the first and last day of the specified month
        rdlContract = this.parmReportContract().parmRdlContract();
        reportingMonth = rdlContract.getParameter(LvStatementOfForeignPaymentRdlContract::ParameterReportingMonth).getValueTyped();
        reportingYear = rdlContract.getParameter(LvStatementOfForeignPaymentRdlContract::ParameterReportingYear).getValueTyped();

        // derive the first and last days of the
        reportingDateStr = strFmt("%1",enum2int(reportingMonth));
        reportingDateStr = "@GLS101011" + "@SYS35673" + reportingDateStr + "@SYS35673" + strFmt("%1", reportingYear);
        firstDateOfMonth = str2Date(reportingDateStr, 123);
        lastDateOfMonth = endmth(firstDateOfMonth);

        // Modify the query contract to include a date range for the specified month
        bankTransactionQuery = this.getFirstQuery();
        SrsReportHelper::addFromAndToDateRangeToQuery(
            bankTransactionQuery,
            firstDateOfMonth,
            lastDateOfMonth,
            tableNum(BankAccountTrans),
            fieldNum(BankAccountTrans, TransDate));

        // Add sort by Bank Account and/or Transaction Date
        qbds = bankTransactionQuery.dataSourceTable(tableNum(BankAccountTrans));
        if (this.parmReportName() == ssrsReportStr(LvStatementOfForeignPaymentDomesticBank, Report))
        {
            qbds.addSortField(fieldNum(BankAccountTrans, AccountId));
            qbds.addSortField(fieldNum(BankAccountTrans, TransDate));
        }
        else if (this.parmReportName() == ssrsReportStr(LvStatementOfForeignPaymentForeignBank, Report))
        {
            qbds.addSortField(fieldNum(BankAccountTrans, TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>LvStatementOfForeignPaymentController</c> controller class for
    /// the <c>LvStatementOfForeignPaymentForeignBank</c> and <c>LvStatementOfForeignPaymentDomesticBank</c> reports.
    /// </summary>
    /// <param name="_args">
    /// The parameters to run the report.
    /// </param>
    /// <returns>
    /// A new <c>LvStatementOfForeignPaymentController</c> instance.
    /// </returns>
    /// <remarks>
    /// The resulting controller instance will be hooked to the report associated with the calling menu item.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// <c>missingParameter</c> exception thrown if this method is invoked with a null parameter value.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// <c>wronguUseOfFunction</c> exception thrown if provided arguments are not what is expected.
    /// </exception>
    public static LvStatementOfForeignPaymentController construct(Args _args)
    {
        LvStatementOfForeignPaymentController controller = new LvStatementOfForeignPaymentController();

        if (!_args)
        {
            throw error(Error::missingParameter(null));
        }

        // hook to the appropriate report based on the menu item used
        switch (_args.menuItemName())
        {
            case menuitemOutputStr(LvStatementOfForeignPaymentForeignBank) :
                controller.parmReportName(ssrsReportStr(LvStatementOfForeignPaymentForeignBank, Report));
                break;

            case menuitemOutputStr(LvStatementOfForeignPaymentDomesticBank) :
                controller.parmReportName(ssrsReportStr(LvStatementOfForeignPaymentDomesticBank, Report));
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00015, funcName());

        LvStatementOfForeignPaymentController::construct(args).startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>