<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationPurchReqTableDataRetrieval</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationPurchReqTableDataRetrieval</c> class retrieves data from <c>PurchReqTable</c>, etc.
/// </summary>
[TaxIntegrationDataRetrieval(tableStr(PurchReqTable))]
public class TaxIntegrationPurchReqTableDataRetrieval
    extends TaxIntegrationAbstractDataRetrievalTemplate
{
    protected PurchReqTable purchReqTable;
    protected PurchReqLine purchReqLine;

    protected VendTable vendTable;
    protected VendTable vendTableInvoice;
    protected UnitOfMeasure unitOfMeasure;

    protected InventDim inventDim;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDocumentQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the document.
    /// </summary>
    /// <returns>The query for the document.</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentQueryObject()
    {
        if (TaxIntegrationConstructWithSourceRecordPurchaseFlight::instance().isEnabled() && document.getLocalRecord())
        {
            purchReqTable = document.getLocalRecord();
            return null;
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchReqTable)
                .where(this.purchReqTable, fieldStr(PurchReqTable, RecId))
                    .isEqualToLiteral(this.document.getLocalRecId())
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the lines of the document.
    /// </summary>
    /// <returns>The query for the lines of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getLineQueryObject()
    {
        SysDaQueryObjectBuilder queryObjectBuilder;
        if (TaxIntegrationPurchReqDocumentPerLineFlight::instance().isEnabled())
        {
            PurchCalcTax purchCalcTax = document.getLegacyTax().purchCalcTax();
            if (!(purchCalcTax is PurchCalcTax_PurchReq))
            {
                throw error(strFmt('@TaxIntegrationException:TaxIntegrationCannotSupport', classId2Name(classIDGet(purchCalcTax)), funcName()));
            }

            PurchCalcTax_PurchReq purchCalcTaxReq = purchCalcTax;
            return SysDaQueryObjectBuilder::from(this.purchReqLine)
                .where(this.purchReqLine, fieldStr(PurchReqLine, RecId))
                    .isEqualToLiteral(purchCalcTaxReq.getPurchReqLine().RecId)
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchReqLine, fieldStr(PurchReqLine, VendAccount))
                .outerJoin(this.vendTableInvoice) // alternate key
                    .where(this.vendTableInvoice, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.vendTable, fieldStr(VendTable, InvoiceAccount))
                .outerJoin(this.unitOfMeasure) // primary key
                    .where(this.unitOfMeasure, fieldStr(UnitOfMeasure, RecId))
                        .isEqualTo(this.purchReqLine, fieldStr(PurchReqLine, PurchUnitOfMeasure))
                .outerJoin(this.inventDim) // alternate key
                    .where(this.inventDim, fieldStr(InventDim, inventDimId))
                        .isEqualTo(this.purchReqLine, fieldStr(PurchReqLine, InventDimId))
                .toSysDaQueryObject();
        }
        else
        {
            return SysDaQueryObjectBuilder::from(this.purchReqLine)
                .where(this.purchReqLine, fieldStr(PurchReqLine, PurchReqTable))
                    .isEqualToLiteral(this.purchReqTable.RecId)
                .outerJoin(this.vendTable) // alternate key
                    .where(this.vendTable, fieldStr(VendTable, AccountNum))
                        .isEqualTo(this.purchReqLine, fieldStr(PurchReqLine, VendAccount))
                .outerJoin(this.unitOfMeasure) // primary key
                    .where(this.unitOfMeasure, fieldStr(UnitOfMeasure, RecId))
                        .isEqualTo(this.purchReqLine, fieldStr(PurchReqLine, PurchUnitOfMeasure))
                .outerJoin(this.inventDim) // alternate key
                    .where(this.inventDim, fieldStr(InventDim, inventDimId))
                        .isEqualTo(this.purchReqLine, fieldStr(PurchReqLine, InventDimId))
                .toSysDaQueryObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentChargeQueryObject</Name>
				<Source><![CDATA[
    ///// <summary>
    ///// Gets the query for the charges of the document.
    ///// </summary>
    ///// <returns>The query for the charges of the document</returns>
    [Replaceable]
    protected SysDaQueryObject getDocumentChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfDocument)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchReqTable.TableId)
            .where(this.markupTransOfDocument, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchReqTable.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineChargeQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for the charges of each line.
    /// </summary>
    /// <returns>The query for the charges of each line.</returns>
    [Replaceable]
    protected SysDaQueryObject getLineChargeQueryObject()
    {
        return SysDaQueryObjectBuilder::from(this.markupTransOfLine)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransTableId))
                .isEqualToLiteral(this.purchReqLine.TableId)
            .where(this.markupTransOfLine, fieldStr(MarkupTrans, TransRecId))
                .isEqualToLiteral(this.purchReqLine.RecId)
            .toSysDaQueryObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a line of the document.
    /// </summary>
    /// <returns>The constructed line of the document.</returns>
    protected TaxIntegrationLineObject constructLine()
    {
        return TaxIntegrationLineObject::constructOnDocument(
                this.purchReqLine.TableId,
                this.purchReqLine.RecId,
                this.document);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document.
    /// </summary>
    protected void copyToDocument()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentByDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies defaults to the document.
    /// </summary>
    protected void copyToDocumentByDefault()
    {
        super();

        document.setDirection(TaxIntegrationDirection::Purchase);
        document.setInvoiceId('');
        document.setIncludingTax(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies specific line information to the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToDocumentFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        if (this.purchReqLine.VendAccount)
        {
            document.setOrderAccount(this.purchReqLine.VendAccount);
            CustVendTable custVendInvoiceTable;
            if (TaxIntegrationPurchReqDocumentPerLineFlight::instance().isEnabled())
            {
                custVendInvoiceTable = vendTableInvoice;
            }
            else
            {
                custVendInvoiceTable = VendTable::find(VendTable::find(document.getOrderAccount()).InvoiceAccount);
            }

            document.setInvoiceAccount(custVendInvoiceTable ? custVendInvoiceTable.AccountNum : document.getOrderAccount());

            VendTable vendInvoiceTable = custVendInvoiceTable ? custVendInvoiceTable : vendTable;
            this.copyToDocumentFromVATNum(
                vendInvoiceTable.VATNum,
                vendInvoiceTable.VATNumTableType,
                vendInvoiceTable.VATNumRecId);
        }

        if (TaxIntegrationPurchReqDocumentPerLineFlight::instance().isEnabled())
        {
            this.copyAddressToDocumentFromLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToDocumentFromLine</Name>
				<Source><![CDATA[
    private void copyAddressToDocumentFromLine()
    {
        // The origin addresses are retrieved from vendor on each line.
        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            vendTable,
            LogisticsLocationRoleType::Delivery);

        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.purchReqLine.DeliveryPostalAddress);

        this.copyToDocumentFromShipmentAddressWithCountryRegionType(
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);

        LogisticsPostalAddress invoiceOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            vendTableInvoice ? vendTableInvoice : vendTable,
            LogisticsLocationRoleType::Invoice);

        LogisticsPostalAddress invoiceDestinationLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromCompanyInformation(
            CompanyInfo::find(),
            LogisticsLocationRoleType::Invoice);

        this.copyToDocumentFromInvoiceAddressWithCountryRegionType(
            invoiceOriginLogisticsPostalAddress,
            invoiceDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLine(TaxIntegrationLineObject _line)
    {
        super(_line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyToLineFromLineTable(TaxIntegrationLineObject _line)
    {
        super(_line);

        this.copyToLineFromPurchReqLine(_line, this.purchReqLine);
        this.copyToLineFromInventDim(_line, this.inventDim);
        this.copyToLineFromInventTable(_line, this.purchReqLine.inventTable());

        // no _line.setProductVariant
        // no _line.setDirectDelivery
        // no _line.setDeliveryTerm
        _line.setDeliveryDate(document.getDeliveryDate());

        _line.setLedgerDimension(this.purchReqLine.DefaultDimension);
        // no _line.setOperationLedgerDimension
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyQuantityAndTransactionAmountToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's quantity and amount.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyQuantityAndTransactionAmountToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        _line.setQuantity(this.purchReqLine.PurchQty);

        _line.setLineAmount(PriceDisc::price2Amount(
            this.purchReqLine.PurchPrice,
            this.purchReqLine.PriceUnit,
            PriceDisc::discAmount(
                document.getTaxIntegrationSetting().getDiscountParameter(),
                this.purchReqLine.LineDisc,
                0),
            _line.getQuantity(),
            this.purchReqLine.PurchQty,
            this.purchReqLine.PurchMarkup,
            PriceDisc::discPercent(
                document.getTaxIntegrationSetting().getDiscountParameter(),
                this.purchReqLine.LinePercent,
                0),
            this.purchReqLine.CurrencyCode,
            this.purchReqLine.LineAmount));
        _line.setTransactionAmount(_line.getLineAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current line of the document's address.
    /// </summary>
    /// <param name = "_line">The current line of the document.</param>
    protected void copyAddressToLine(TaxIntegrationLineObject _line)
    {
        super(_line);

        LogisticsPostalAddress shipmentOriginLogisticsPostalAddress = TaxIntegrationLogisticsPostalAddressUtility::retrieveAddressFromVendor(
            this.vendTable,
            LogisticsLocationRoleType::Delivery);
        LogisticsPostalAddress shipmentDestinationLogisticsPostalAddress = LogisticsPostalAddress::findRecId(
            this.purchReqLine.DeliveryPostalAddress);

        this.copyToLineFromShipmentAddressWithCountryRegionType(
            _line,
            shipmentOriginLogisticsPostalAddress,
            shipmentDestinationLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineCharge(TaxIntegrationLineObject _charge)
    {
        super(_charge);

        this.copyToLineChargeFromLineTable(_charge);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineChargeFromLineTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the current charge of the current line from <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_charge">The current charge of the current line.</param>
    protected void copyToLineChargeFromLineTable(TaxIntegrationLineObject _charge)
    {
        _charge.setLedgerDimension(this.purchReqLine.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToLineFromPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a line object from <c>PurchReqLine</c>.
    /// </summary>
    /// <param name = "_destination">The destination <c>TaxIntegrationLineObject</c>.</param>
    /// <param name = "_source">The source <c>PurchReqLine</c>.</param>
    protected void copyToLineFromPurchReqLine(
        TaxIntegrationLineObject _destination,
        PurchReqLine _source)
    {
        _destination.setItemId(_source.ItemId);
        _destination.setCategoryId(_source.ProcurementCategory);
        if (_destination.getCategoryId())
        {
            EcoResCategory ecoRESCategory = EcoResCategory::find(_destination.getCategoryId());
            _destination.setItemCategoryName(ecoRESCategory.Name);
        }
        // no _destination.setIntrastatCommodityId
        _destination.setUnit(this.unitOfMeasure.Symbol);
        if (_destination.getCategoryId())
        {
            _destination.setText(_destination.getItemCategoryName());
        }
        else
        {
            _destination.setText(_destination.getItemId());
        }
        _destination.setTransactionCurrencyCode(_source.CurrencyCode);
        // no _destination.setInventoryTransactionId

        _destination.setTaxGroup(_source.TaxGroup);
        _destination.setTaxItemGroup(_source.TaxItemGroup);
        _destination.setOverrideSalesTax(_source.OverrideSalesTax);

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            _destination.setRequestedDate(_source.RequiredDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToDocumentFromHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to the document from <c>PurchReqTable</c>.
    /// </summary>
    protected void copyToDocumentFromHeaderTable()
    {
        super();

        if (isTaxIntegrationEnabledForTaxSolutionProvider)
        {
            document.setRequestedDate(this.purchReqTable.RequiredDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>