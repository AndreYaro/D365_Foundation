<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestCategoryNCAWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class VendVendorRequestCategoryNCAWorkflowEventHandler implements WorkflowStartedEventHandler,
                                                                           WorkflowCanceledEventHandler,
                                                                           WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the canceled event for the workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that created the event.
    /// </param>
    public void canceled(WorkflowEventArgs _workflowElementEventArgs)
    {
        ttsbegin;

        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (vendRequest.RecId)
        {
            vendRequest.RequestStatus = VendVendorRequestStatus::WorkflowCanceled;
            vendRequest.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the start event for the workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that created the event.
    /// </param>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (!vendRequest)
        {
            throw error(Error::missingRecord(tableStr(VendVendorRequestNewCategory)));
        }

        ttsbegin;
        vendRequest.RequestStatus = VendVendorRequestStatus::PendingApproval;
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the completed event for the workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A value that obtains the workflow context of the workflow item that created the event.
    /// </param>
    public void completed(WorkflowEventArgs _workflowElementEventArgs)
    {
        ttsbegin;

        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (vendRequest.RecId && !(vendRequest.RequestStatus == VendVendorRequestStatus::Rejected
                                    || vendRequest.RequestStatus == VendVendorRequestStatus::WorkflowCanceled
                                    || vendRequest.RequestStatus == VendVendorRequestStatus::ChangeRequested))
        {
            vendRequest.RequestStatus = VendVendorRequestStatus::Approved;
            vendRequest.update();
            VendVendorRequestNewCategory::addCategoriesFromRequest(vendRequest.RecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>