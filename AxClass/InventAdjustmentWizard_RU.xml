<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAdjustmentWizard_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventAdjustmentWizard_RU extends SysWizard
{
    InventAdjustType_RU             adjustType;
    InventAdjustCorrAllocation_RU   corrAllocation;
    InventTransCurrency_RU          inventTransCurrency;
    TmpFormLookUp                   tmpFormLookUp;
    Price                           price;
    CostAmount                      costAmount;
    ValueQty                        valueQty;
    CostAmount                      value;
    Percent                         percent;
    InventAdjustmentBy              inventAdjustmentBy;
    TransDate                       transDate;
    InventAdjustmentSpec            specification;
    FreeTxt                         freeTxt;
    InventAdj                       inventAdj;
    InventDimParm                   inventDimParm;
    boolean                         showLedgerVaucher;
    InventClosing                   inventClosing;
    boolean                         adjOnHand;
    Args                            args;
    MainAccountNum                  ledgerAccount;
    TmpAccountSum                   tmpAccountSum;

    LedgerDimensionAccount          corrLedgerAccount;
    LedgerPostingType               corrLedgerPosting;
    boolean                         storno;
    boolean                         corrAccountProfitLoss;
    Amount                          totalAmount;
    TransDate                       balanceDate;

    const int TabCorrectionType = 2;
    const int TabSelection = 3;
    const int TabAllocation = 4;
    const int TabPrice = 5;
    const int TabAmount = 6;
    const int TabValue = 7;
    const int TabPercent = 8;
    const int TabFromGLAccountPage = 9;
    const int TabFromGLAccountPage2 = 10;
    const int TabResultsPage = 11;
    const int TabPostingPage = 12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accessMenuFunction</Name>
				<Source><![CDATA[
    public MenuFunction accessMenuFunction()
    {
        return new MenuFunction(menuitemdisplaystr(InventAdjustmentWizard_RU), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAmount</Name>
				<Source><![CDATA[
    private void adjustAmount()
    {
        this.checkSelection();

        if (adjustType == InventAdjustType_RU::Transactions)
        {
            InventDataAdjTransact::adjustAmountServer(tmpFormLookUp, valueQty, costAmount, inventTransCurrency);
        }
        else
        {
            InventDataAdjSumUp::adjustAmountServer(tmpFormLookUp, valueQty, costAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCostPrice</Name>
				<Source><![CDATA[
    private void adjustCostPrice()
    {
        if (adjustType == InventAdjustType_RU::Transactions)
        {
            InventDataAdjTransact::adjustCostPriceServer(tmpFormLookUp, inventTransCurrency);
        }
        else
        {
            InventDataAdjSumUp::adjustCostPriceServer(tmpFormLookUp, inventTransCurrency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromGLAccount</Name>
				<Source><![CDATA[
    private void adjustFromGLAccount()
    {
        this.adjustAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustFromPage</Name>
				<Source><![CDATA[
    private void adjustFromPage(int _pageNo)
    {
        this.checkSelection();

        switch (_pageNo)
        {
            case TabPrice:
                this.adjustPrice();
                break;
            case TabAmount:
                this.adjustAmount();
                break;
            case TabValue:
                this.adjustValue();
                break;
            case TabPercent:
                this.adjustPercent();
                break;
            case TabFromGLAccountPage2:
                this.adjustFromGLAccount();
                break;
        }

        this.updateTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPercent</Name>
				<Source><![CDATA[
    private void adjustPercent()
    {
        if (percent < -100)
        {
            throw error("@SYS1852");
        }

        if (adjustType == InventAdjustType_RU::Transactions)
        {
            InventDataAdjTransact::adjustPercentServer(tmpFormLookUp, percent, inventTransCurrency);
        }
        else
        {
            InventDataAdjSumUp::adjustPercentServer(tmpFormLookUp, inventAdjustmentBy, percent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPrice</Name>
				<Source><![CDATA[
    private void adjustPrice()
    {
        if (price < 0)
        {
            throw error("@SYS1852");
        }

        if (adjustType == InventAdjustType_RU::Transactions)
        {
            InventDataAdjTransact::adjustPriceServer(tmpFormLookUp, price, inventTransCurrency);
        }
        else
        {
            InventDataAdjSumUp::adjustPriceServer(tmpFormLookUp, price);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustValue</Name>
				<Source><![CDATA[
    private void adjustValue()
    {
        if (adjustType == InventAdjustType_RU::Transactions)
        {
            InventDataAdjTransact::adjustValueServer(tmpFormLookUp, valueQty, value, inventTransCurrency);
        }
        else
        {
            InventDataAdjSumUp::adjustValueServer(tmpFormLookUp, valueQty, value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSelection</Name>
				<Source><![CDATA[
    private void checkSelection()
    {
        if (!this.selectionExists())
        {
            throw error("@SYS24531");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtons</Name>
				<Source><![CDATA[
    protected void enableButtons(boolean _setFocus = true)
    {
        backButton.enabled(tabIdx != 1 && backEnabled[tabIdx]);
        FormDesign design = formRun.design();

        if (this.hasFinishButton())
        {
            if (!finishButton.visible())
            {
                finishButton.visible(true);
            }

            finishButton.enabled(finishEnabled[tabIdx]);
            if (tabIdx == numberOfTabs && _setFocus)
            {
                finishButton.setFocus();
            }
        }
        else
        {
            if (tabIdx == numberOfTabs)
            {
                if (!finishButton.visible())
                {
                    finishButton.visible(true);
                }

                if (nextButton.visible())
                {
                    nextButton.visible(false);
                }

                if (_setFocus)
                {
                    finishButton.setFocus();
                }
            }
            else
            {
                if (finishButton.visible())
                {
                    finishButton.visible(false);
                }

                if (!nextButton.visible())
                {
                    nextButton.visible(true);
                }
            }
        }

        if (nextEnabled[tabIdx] && tabIdx<numberOfTabs)
        {
            nextButton.enabled(true);
            if (_setFocus)
            {
                nextButton.setFocus();
            }
        }
        else
        {
            nextButton.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        return formstr(InventAdjustmentWizard_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        adjOnHand   = true;
        args        = _args;

        storno = InventParameters::find().StornoAdjPosting;

        if (_args)
        {
            inventTransCurrency = InventCostClosing::callerInventTransCurrency_RU(_args);

            if (_args.caller() && _args.dataset() == tablenum(InventClosing))
            {
                inventClosing = _args.record();

                if (!inventClosing.Active ||
                    inventClosing.Cancellation ||
                    inventClosing.AdjustmentType == InventAdjustmentType::Recalculation ||
                    inventClosing.InventCostStatus != InventCostStatus::Ended)
                {
                    adjOnHand   = false;
                    adjustType  = InventAdjustType_RU::Transactions;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPostingParams</Name>
				<Source><![CDATA[
    private void initPostingParams()
    {
        InventDataAdj       dataAdj = InventDataAdjSumUp::newFromForm(tmpFormLookUp);

        if (adjustType == InventAdjustType_RU::Transactions)
        {
            InventAdj_Transact inventAdj_Transact = InventAdj_Transact::newTransact(dataAdj.pack(), inventTransCurrency);
            inventAdj = inventAdj_Transact;

            transDate           = inventAdj_Transact.parmTransDate();
            freeTxt             = inventAdj_Transact.parmFreeTxt();
            specification       = inventAdj_Transact.parmSpecification();
        }
        else
        {
            InventAdj_SumUp inventAdj_SumUp = InventAdj_SumUp::newSumUp(dataAdj.pack(), inventDimParm,
                inventClosing::closingDate(false, inventTransCurrency), true,
                inventTransCurrency);
            inventAdj       = inventAdj_SumUp;

            transDate       = inventAdj_SumUp.parmTransDate();
            freeTxt         = inventAdj_SumUp.parmFreeTxt();
            specification   = inventAdj_SumUp.parmSpecification();
        }

        this.updateTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    void next()
    {
        Object formObject = formRun;

        if (formObject)
        {
            this.parmAdjustType(formObject.adjustType());
            this.parmCorrAllocation(formObject.corrAllocation());
        }

        switch (this.curTab())
        {
            case TabCorrectionType:
                if (this.selectItems())
                {
                    super();
                }
                break;

            case TabAllocation:
                this.skipAllocationTabs();
                this.nextEnabled(ledgerAccount != '', TabFromGLAccountPage);
                if (corrAllocation == InventAdjustCorrAllocation_RU::CostPrice)
                {
                    this.adjustCostPrice();
                    this.updateTotalAmount();
                }
                super();
                break;

            case TabPrice, TabAmount, TabValue, TabPercent, TabFromGLAccountPage2:
                this.adjustFromPage(this.curTab());
                super();
                break;

            case TabFromGLAccountPage:
                this.nextEnabled(costAmount != 0, TabFromGLAccountPage2);
                super();
                break;

            case TabResultsPage:
                this.initPostingParams();
                super();
                break;

            default:
                super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjOnHand</Name>
				<Source><![CDATA[
    public boolean parmAdjOnHand(boolean _adjOnHand = adjOnHand)
    {
        adjOnHand = _adjOnHand;

        return adjOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdjustType</Name>
				<Source><![CDATA[
    public InventAdjustType_RU parmAdjustType(InventAdjustType_RU _adjustType = adjustType)
    {
        if (adjOnHand)
        {
            adjustType = _adjustType;
        }
        else
        {
            adjustType  = InventAdjustType_RU::Transactions;
        }

        return adjustType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBalanceDate</Name>
				<Source><![CDATA[
    public TransDate parmBalanceDate(TransDate _balanceDate = balanceDate)
    {
        if (balanceDate != _balanceDate)
        {
            balanceDate = _balanceDate;

            this.nextEnabled(ledgerAccount != '' && balanceDate, TabFromGLAccountPage);
        }

        return balanceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrAccountProfitLoss</Name>
				<Source><![CDATA[
    public boolean parmCorrAccountProfitLoss(boolean _corrAccountProfitLoss = corrAccountProfitLoss)
    {
        if (corrAccountProfitLoss != _corrAccountProfitLoss)
        {
            corrAccountProfitLoss = _corrAccountProfitLoss;

            if (corrAccountProfitLoss)
            {
                corrLedgerAccount = 0;
                corrLedgerPosting = LedgerPostingType::None;
            }

            this.nextEnabled(corrAccountProfitLoss || (corrLedgerAccount != 0 && corrLedgerPosting != LedgerPostingType::None), TabPostingPage);
        }

        return corrAccountProfitLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrAllocation</Name>
				<Source><![CDATA[
    public InventAdjustCorrAllocation_RU parmCorrAllocation(InventAdjustCorrAllocation_RU _corrAllocation = corrAllocation)
    {
        if (corrAllocation != _corrAllocation)
        {
            corrAllocation = _corrAllocation;

            if (corrAllocation != InventAdjustCorrAllocation_RU::FromGLAccount)
            {
                ledgerAccount = '';
            }
        }

        return corrAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrLedgerAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionAccountCorr_RU parmCorrLedgerAccount(LedgerDimensionAccountCorr_RU _corrLedgerAccount = corrLedgerAccount)
    {
        if (corrLedgerAccount != _corrLedgerAccount)
        {
            corrLedgerAccount = _corrLedgerAccount;
            this.nextEnabled(corrAccountProfitLoss || (corrLedgerAccount != 0 && corrLedgerPosting != LedgerPostingType::None), TabPostingPage);
        }

        return corrLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrLedgerPosting</Name>
				<Source><![CDATA[
    public LedgerPostingType parmCorrLedgerPosting(LedgerPostingType _corrLedgerPosting = corrLedgerPosting)
    {
        if (corrLedgerPosting != _corrLedgerPosting)
        {
            corrLedgerPosting = _corrLedgerPosting;
            this.nextEnabled(corrAccountProfitLoss || (corrLedgerAccount != 0 && corrLedgerPosting != LedgerPostingType::None), TabPostingPage);
        }

        return corrLedgerPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAmount</Name>
				<Source><![CDATA[
    public CostAmount parmCostAmount(CostAmount _costAmount = costAmount)
    {
        if (costAmount != _costAmount)
        {
            costAmount = _costAmount;
            this.nextEnabled(costAmount != 0, TabFromGLAccountPage2);
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreeTxt</Name>
				<Source><![CDATA[
    public FreeTxt parmFreeTxt(FreeTxt _freeTxt = freeTxt)
    {
        freeTxt = _freeTxt;

        return freeTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventAdjustmentBy</Name>
				<Source><![CDATA[
    public InventAdjustmentBy parmInventAdjustmentBy(InventAdjustmentBy _inventAdjustmentBy = inventAdjustmentBy)
    {
        inventAdjustmentBy = _inventAdjustmentBy;

        return inventAdjustmentBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransCurrency</Name>
				<Source><![CDATA[
    public InventTransCurrency_RU parmInventTransCurrency(InventTransCurrency_RU _inventTransCurrency = inventTransCurrency)
    {
        inventTransCurrency = _inventTransCurrency;

        return inventTransCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerAccount</Name>
				<Source><![CDATA[
    public MainAccountNum parmLedgerAccount(MainAccountNum _ledgerAccount = ledgerAccount)
    {
        if (ledgerAccount != _ledgerAccount)
        {
            if (!corrLedgerAccount || LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(corrLedgerAccount) == ledgerAccount)
            {
                MainAccount mainAccountLoc = MainAccount::findByMainAccountId(_ledgerAccount);
                if (mainAccountLoc)
                {
                    corrLedgerAccount = LedgerDimensionDefaultingEngine::createLedgerDimension(LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountRecId(mainAccountLoc.RecId), new List(Types::Class));
                }
                else
                {
                    corrLedgerAccount = 0;
                }
            }

            ledgerAccount = _ledgerAccount;

            this.nextEnabled(ledgerAccount != '' && balanceDate, TabFromGLAccountPage);
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPercent</Name>
				<Source><![CDATA[
    public Percent parmPercent(Percent _percent = percent)
    {
        percent = _percent;

        return percent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrice</Name>
				<Source><![CDATA[
    public Price parmPrice(Price _price = price)
    {
        price = _price;

        return price;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLedgerVaucher</Name>
				<Source><![CDATA[
    public boolean parmShowLedgerVaucher(boolean _showLedgerVaucher = showLedgerVaucher)
    {
        showLedgerVaucher = _showLedgerVaucher;

        return showLedgerVaucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecification</Name>
				<Source><![CDATA[
    public InventAdjustmentSpec parmSpecification(InventAdjustmentSpec _specification = specification)
    {
        specification = _specification;

        return specification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStorno</Name>
				<Source><![CDATA[
    public boolean parmStorno(boolean _storno = storno)
    {
        storno = _storno;

        return storno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
    public CostAmount parmValue(CostAmount _value = value)
    {
        value = _value;

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueQty</Name>
				<Source><![CDATA[
    public ValueQty parmValueQty(ValueQty _valueQty = valueQty)
    {
        valueQty = _valueQty;

        return valueQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    private void post()
    {
        if (!inventAdj)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00119, funcName());


        inventAdj.parmStorno_RU(storno);

        if (!corrAccountProfitLoss && corrLedgerAccount)
        {
            inventAdj.parmCorrDimension_RU(LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(corrLedgerAccount));
            inventAdj.parmCorrLedgerAccount_RU(corrLedgerAccount);
            inventAdj.parmCorrLedgerPosting_RU(corrLedgerPosting);
        }

        if (adjustType)
        {
            InventAdj_Transact inventAdj_Transact = inventAdj;
            inventAdj_Transact.parmTransDate(transDate);
            inventAdj_Transact.parmSpecification(specification);
            inventAdj_Transact.parmFreeTxt(freeTxt);
        }
        else
        {
            InventAdj_SumUp inventAdj_SumUp = inventAdj;
            inventAdj_SumUp.parmSpecification(specification);
            inventAdj_SumUp.parmFreeTxt(freeTxt);
        }

        inventAdj.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.post();

        this.updateCaller();
        this.showLedgerVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionExists</Name>
				<Source><![CDATA[
    private boolean selectionExists()
    {
        TmpFormLookUp   tmp;

        tmp.setTmpData(tmpFormLookUp);
        select firstonly tmp;

        return tmp.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectItems</Name>
				<Source><![CDATA[
    private boolean selectItems()
    {
        InventAdjSelect         inventAdjSelect;
        InventAdjOnhandSelect   inventAdjOnhandSelect;
        boolean                 res;
        Object                  formObject = formRun;

        nextButton.enabled(false);

        if (adjustType == InventAdjustType_RU::Transactions)
        {
            inventAdjSelect = InventAdjTransactSelect::newFromForm(tmpFormLookUp, inventTransCurrency);
        }
        else
        {
            inventAdjOnhandSelect   = InventAdjOnhandSelect::newFromForm(tmpFormLookUp,
                    inventClosing::closingDate(true, inventTransCurrency), true,
                    inventTransCurrency);

            inventAdjSelect         = inventAdjOnhandSelect;
        }

        try
        {
            delete_from tmpFormLookUp;

            if (inventAdjSelect.prompt())
            {
                inventAdjSelect.runOperation();

                if (adjustType == InventAdjustType_RU::OnHand)
                {
                    inventDimParm = inventAdjOnhandSelect.parmInventDimParm();
                }

                this.nextEnabled(this.selectionExists(), TabSelection);
                res = true;
            }

            nextButton.enabled(true);
        }
        catch(Exception::Error)
        {
            nextButton.enabled(true);
            throw Exception::Error;
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLedgerVoucher</Name>
				<Source><![CDATA[
    private void showLedgerVoucher()
    {
        if (showLedgerVaucher)
        {
            new MenuFunction(menuitemdisplaystr(LedgerTransVoucher1), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipAllocationTabs</Name>
				<Source><![CDATA[
    private void skipAllocationTabs()
    {
        DictEnum    dictEnum = new DictEnum(enumnum(InventAdjustCorrAllocation_RU));
        int         i;

        for (i = 1; i < dictEnum.values(); i++)
        {
            this.skipTab(i + TabAllocation, i != corrAllocation);
        }

        this.skipTab(TabFromGLAccountPage2, corrAllocation != InventAdjustCorrAllocation_RU::FromGLAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpAccountSum</Name>
				<Source><![CDATA[
    public TmpAccountSum tmpAccountSum(TmpAccountSum _tmpAccountSum = tmpAccountSum)
    {
        tmpAccountSum = _tmpAccountSum;
        return tmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpFormLookUp</Name>
				<Source><![CDATA[
    public TmpFormLookUp tmpFormLookUp(TmpFormLookUp _tmpFormLookUp = tmpFormLookUp)
    {
        tmpFormLookUp = _tmpFormLookUp;
        return tmpFormLookUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    public Amount totalAmount()
    {
        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCaller</Name>
				<Source><![CDATA[
    private void updateCaller()
    {
        InventClosing   tmp;

        if (inventAdj && FormDataUtil::isFormDataSource(inventClosing))
        {
            tmp.data(inventAdj.parmInventClosing());
            FormDataUtil::getFormDataSource(inventClosing).research();
            FormDataUtil::getFormDataSource(inventClosing).findRecord(tmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotalAmount</Name>
				<Source><![CDATA[
    private void updateTotalAmount()
    {
        TmpFormLookUp   tmp;

        tmp.setTmpData(tmpFormLookUp);

        select sum(AdjustNow) from tmp;
        totalAmount = tmp.AdjustNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public InventAdjustmentWizard_RU construct()
    {
        return new InventAdjustmentWizard_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        InventAdjustmentWizard_RU wizard = InventAdjustmentWizard_RU::construct();

        wizard.initFromArgs(_args);
        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>