<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EventNotification_SalesLineResponsible</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EventNotification_SalesLineResponsible</c> class delivers the alerts notifications to the
///    sales order line.
/// </summary>
/// <remarks>
/// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
/// </remarks>
class EventNotification_SalesLineResponsible extends EventNotification
{
    SysIMailerNonInteractive mailer;
    Email        senderEmailAddress;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalizes the <c>EventInbox</c> record and, when it is specified, sends an e-mail.
    /// </summary>
    /// <returns>
    /// An integer value that contains the inbox ID.
    /// </returns>
    public EventInboxId create()
    {
        SysUserInfo     userInfo;

        super();

        // send mail as well if enabled.
        userInfo = SysUserInfo::find(inbox.UserId);
        if (   userInfo
            && userInfo.EventWorkflowTasksInEmail)
        {
            if (SysEmailDistributor::validateEmail(userInfo.emailDisplay()))
            {
                 inbox.SendEmail = true;
                 inbox.EmailRecipient = userInfo.emailDisplay();
                 this.sendMail();
            }
        }

        inbox.AlertCreatedDateTime = DateTimeUtil::newDateTime(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),DateTimeUtil::getUserPreferredTimeZone());
        inbox.update();

        return inbox.InboxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
        inbox.NotificationSource = EventNotificationSource::Alerts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>senderEmailAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the e-mail address of the sender.
    /// </summary>
    /// <returns>
    /// A String value that contains the e-mail address of the sender.
    /// </returns>
    protected Email senderEmailAddress()
    {
        SysUserInfo     sysUserInfo;

        if (! senderEmailAddress)
        {
            // get the sender email address
            sysUserInfo = SysUserInfo::find(curuserid());
            senderEmailAddress = sysUserInfo.emailDisplay();

            // set senderEmail = toEmail
            if (! senderEmailAddress)
            {
                sysUserInfo         = SysUserInfo::find(inbox.UserId);
                senderEmailAddress  = sysUserInfo.emailDisplay();
            }
        }

        return senderEmailAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the notification as an e-mail message.
    /// </summary>
    protected void sendMail()
    {
        #define.mailPriority(1)

        super();

        if (mailer == null)
        {
            mailer = SysMailerFactory::getNonInteractiveMailer();
        }

        if (mailer != null
            && SysEmailDistributor::validateEmail(this.senderEmailAddress()))
        {
            try
            {
                var messageBuilder = new SysMailerMessageBuilder();
                messageBuilder.setFrom(this.senderEmailAddress(), "@SYS115063")
                              .setSubject(inbox.Subject)
                              .addTo(inbox.EmailRecipient)
                              .setPriority(#mailPriority)
                              .setBody(strReplace(inbox.Message, '\r\n', '<br>'));
                mailer.sendNonInteractive(messageBuilder.getMessage());
            }
            catch
            {
                warning(strfmt("@SYS324464",inbox.EmailRecipient));
                mailer = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static EventNotification_SalesLineResponsible construct()
    {
        return new EventNotification_SalesLineResponsible();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>EventNotification_SalesLineResponsible</c> object.
    /// </summary>
    /// <param name="_userId">
    /// A String value that contains the user ID that represents the recipient of the notification.
    /// </param>
    /// <param name="_subject">
    /// A String value that contains the subject of the notification.
    /// </param>
    /// <param name="_message">
    /// A String value that contains the message of the notification.
    /// </param>
    /// <param name="_eventNotificationType">
    /// An enumeration value that contains the notification type.
    /// </param>
    /// <param name="_record">
    /// A record of any type that relates to the notification.
    /// </param>
    /// <returns>
    /// An <c>EventNotification_SalesLineResponsible</c> object.
    /// </returns>
    public static EventNotification_SalesLineResponsible newStandard(
        userId                  _userId,
        EventSubject            _subject,
        EventMessage            _message,
        EventNotificationType   _eventNotificationType,
        Common                  _record)
    {
        EventNotification_SalesLineResponsible  notification    = EventNotification_SalesLineResponsible::construct();

        notification.parmUserId(_userId);
        notification.parmSubject(_subject);
        notification.parmMessage(_message);
        notification.parmNotificationType(_eventNotificationType);
        notification.parmRecord(_record);

        return notification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendNotification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a notification that is related to a sales line.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> record that represents a sales order line.
    /// </param>
    /// <param name="_subject">
    /// A String value that contains subject of the notification.
    /// </param>
    /// <param name="_message">
    /// A String value that contains the message of the notification.
    /// </param>
    /// <param name="_eventNotificationType">
    /// An enumeration value that contains the notification type.
    /// </param>
    public static void sendNotification(
        SalesLine               _salesLine,
        EventSubject            _subject,
        EventMessage            _message,
        EventNotificationType   _eventNotificationType)
    {
        EventNotification_SalesLineResponsible  notification;

        notification = EventNotification_SalesLineResponsible::newStandard(_salesLine.eventNotificationUserId(),_subject,_message,_eventNotificationType,_salesLine.salesTable());
        notification.parmMenuFunction(new MenuFunction(menuitemdisplaystr(SalesTableDetails),MenuItemType::Display));

        notification.create();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>