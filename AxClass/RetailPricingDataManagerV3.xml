<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingDataManagerV3</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>RetailPricingDataManagerV3</c> class implements the queries for <c>IPricingDataAccessor</c>.
///  It should be used when <c>RetailDiscountPerformanceImprovementFeature</c> is enabled.
/// </summary>
public class RetailPricingDataManagerV3 extends RetailPricingDataManagerV2
{
    private boolean avoidReadDuplicatedDiscountFlightEnabled = RetailReadDiscountOfSameOfferIdFlight::instance().isEnabled();
    Set offerIdItemSet = new Set(Types::String);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ReadRetailDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets retail discounts.
    /// </summary>
    /// <param name = "items">An object of item number.</param>
    /// <param name = "priceGroups">An object of price group.</param>
    /// <param name = "minActiveDate">A minimum active date to read retail discount.</param>
    /// <param name = "maxActiveDate">A maximum active date to read retail discount.</param>
    /// <param name = "currencyCode">A currency code to read retail discount.</param>
    /// <param name = "settings">Settings.</param>
    /// <returns>Retail discounts.</returns>
    public System.Object ReadRetailDiscounts(
            System.Object items,
            System.Object priceGroups,
            System.DateTimeOffset minActiveDate,
            System.DateTimeOffset maxActiveDate,
            System.String currencyCode,
            Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        using(var ReadRetailDiscountsTelemetry = RetailPricingInstrumentationSegment::construct(
            RetailInstrumentationSegmentArea, methodStr(RetailPricingDataManagerV3, ReadRetailDiscounts)))
        {
            ValidFromDate minFromDate =  this.GetDateInChannelTimeZone(minActiveDate);
            ValidFromDate maxToDate =  this.GetDateInChannelTimeZone(maxActiveDate);

            Map validationPeriodLookup = new Map(Types::String, Types::AnyType);

            // convert price group record ids into temp table for join
            TmpRecIdFilter priceDiscGroupTmp = this.getTmpPriceGroupTableFromGroupIds(priceGroups);

            CLRObject discountList = this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount());

            Set couponOfferIds = this.getCouponCodeOfferIds();

            // Get discount data table for MatchAllAssociatedPriceGroups set as yes and associated price groups.
            RetailTmpOfferIdWithPriceGroups offerIdWithPriceDiscGroupTmp = this.getOfferIdAndAssociatedPriceGroupList();

            this.readRetailDiscountsByCategories(
                couponOfferIds,
                discountList,
                minFromDate,
                maxToDate,
                priceDiscGroupTmp,
                validationPeriodLookup,
                currencyCode,
                offerIdWithPriceDiscGroupTmp);

            this.readRetailDiscountsByProducts(
                couponOfferIds,
                discountList,
                minFromDate,
                maxToDate,
                priceDiscGroupTmp,
                validationPeriodLookup,
                currencyCode,
                offerIdWithPriceDiscGroupTmp);

            this.readRetailDiscountsByProductMasters(
                couponOfferIds,
                discountList,
                minFromDate,
                maxToDate,
                priceDiscGroupTmp,
                validationPeriodLookup,
                currencyCode,
                offerIdWithPriceDiscGroupTmp);

            tmpOrderDataInsertList.insertDatabase();

            return discountList.AsReadOnly();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadPriceAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets price adjustments.
    /// </summary>
    /// <param name = "items">An object of item number.</param>
    /// <param name = "priceGroups">An object of price group.</param>
    /// <param name = "minActiveDate">A minimum active date.</param>
    /// <param name = "maxActiveDate">A maximum active date.</param>
    /// <param name = "settings">The query result settings.</param>
    /// <returns>The adjusted price.</returns>
    /// <remarks>
    /// Check for exists configuration for given price groups, skip all calls if no configuration found
    /// </remarks>
    public System.Object ReadPriceAdjustments(
            System.Object items,
            System.Object priceGroups,
            System.DateTimeOffset minActiveDate,
            System.DateTimeOffset maxActiveDate,
            Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        RetailDiscountPriceGroup promoPriceGroup;

        ValidFromDate minFromDate = this.GetDateInChannelTimeZone(minActiveDate);
        ValidToDate maxToDate = this.GetDateInChannelTimeZone(maxActiveDate);

        TmpRecIdFilter priceDiscGroupTmp = this.getTmpPriceGroupTableFromGroupIds(priceGroups);

        RetailPeriodicDiscount promo;
        select firstonly RecId from promo
            where promo.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
                   && promo.Status == RetailDisabledEnabled::Enabled
                   && ((promo.ValidFrom <= minFromDate || promo.ValidFrom <= noDate)
                   && (promo.ValidTo >= maxToDate || promo.ValidTo <= noDate))
            exists join promoPriceGroup
                where promoPriceGroup.OfferId == promo.OfferId
            exists join priceDiscGroupTmp
                where priceDiscGroupTmp.RefRecId == promoPriceGroup.PriceDiscGroup;

        if (!promo)
        {
            return this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment());
        }

        CLRObject adjustmentList = this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment());
        Map validationPeriodLookup = new Map(Types::String, Types::AnyType);

        // Get discount data table for MatchAllAssociatedPriceGroups set as yes and associated price groups.
        RetailTmpOfferIdWithPriceGroups offerIdWithPriceDiscGroupTmp = this.getOfferIdAndAssociatedPriceGroupList();

        this.readRetailPriceAdjustmentsByCategories(
                adjustmentList,
                minFromDate,
                maxToDate,
                priceDiscGroupTmp,
                validationPeriodLookup,
                offerIdWithPriceDiscGroupTmp);

        this.readRetailPriceAdjustmentsByProducts(
                adjustmentList,
                minFromDate,
                maxToDate,
                priceDiscGroupTmp,
                validationPeriodLookup,
                offerIdWithPriceDiscGroupTmp);

        this.readRetailPriceAdjustmentsByProductMasters(
                adjustmentList,
                minFromDate,
                maxToDate,
                priceDiscGroupTmp,
                validationPeriodLookup,
                offerIdWithPriceDiscGroupTmp);

        tmpOrderDataInsertList.insertDatabase();

        return adjustmentList.AsReadOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRetailDiscountsByCategories</Name>
				<Source><![CDATA[
    private void readRetailDiscountsByCategories(
        Set _couponOfferIds,
        CLRObject _discountList,
        ValidFromDate _minFromDate,
        ValidFromDate _maxToDate,
        TmpRecIdFilter _priceDiscGroupTmp,
        Map _validationPeriodLookup,
        System.String _currencyCode,
        RetailTmpOfferIdWithPriceGroups _offerIdWithPriceGroups)
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailPricingDataManagerV3), 'ReadRetailDiscounts.ByCategories'))
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount;

            RetailCategoryContainmentLookup categoryLookup;        
            EcoResProductCategory productCategory;
            RetailTempOrderCategory tmpOrderItemCategory;
            RetailSpecialCategoryMember variantCategory;
            InventTable inventTable;
            RetailGroupMemberLine retailGroupMemberLine;

            insert_recordset tmpOrderItemCategory(itemId, inventDimId, Product, Category)
                select itemId, inventDimId, Product from mTmpOrderItem
                join inventTable 
                    where inventTable.ItemId == mTmpOrderItem.ItemId
                join productCategory
                    where productCategory.Product == inventTable.Product
                join Category from categoryLookup
                    where productCategory.Category == categoryLookup.ContainedCategory;

            if (this.shouldQuerySupplementalCategory())
            {
                // Insert supplemental category - variant based.
                insert_recordset tmpOrderItemCategory(itemId, inventDimId, Product, Category)
                select itemId, inventDimId, Product from mTmpOrderItem
                    where mTmpOrderItem.Variant > 0
                join retailGroupMemberLine
                    where  retailGroupMemberLine.Variant == mTmpOrderItem.Product
                join variantCategory
                    where retailGroupMemberLine.RecId == variantCategory.RetailGroupMember
                join Category from categoryLookup
                    where variantCategory.Category == categoryLookup.ContainedCategory;
            }

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountCategoryLookup retailPeriodicDiscountCategoryLookup;
            RetailDiscountPriceGroup discountPriceGroup;

            int rowsReturned;
            int rowsApplicable;

            // get lines matching the category
            while select forceSelectOrder forceNestedLoop tmpOrderItemCategory
            join retailPeriodicDiscountCategoryLookup
                where retailPeriodicDiscountCategoryLookup.PeriodicDiscountType != RetailDiscountOfferTypeBase::Promotion && retailPeriodicDiscountCategoryLookup.PeriodicDiscountType != RetailDiscountOfferTypeBase::Shipping
                    && (retailPeriodicDiscountCategoryLookup.ValidFrom <= _minFromDate || retailPeriodicDiscountCategoryLookup.ValidFrom <= noDate)
                    && (retailPeriodicDiscountCategoryLookup.ValidTo >= _maxToDate || retailPeriodicDiscountCategoryLookup.ValidTo <= noDate)
                    && retailPeriodicDiscountCategoryLookup.CurrencyCode == _currencyCode
                    && tmpOrderItemCategory.Category == retailPeriodicDiscountCategoryLookup.Category
            join periodicDiscount
                where periodicDiscount.OfferId == retailPeriodicDiscountCategoryLookup.OfferId
            exists join discountPriceGroup
                where discountPriceGroup.OfferId == periodicDiscount.OfferId
            exists join RefRecId from _priceDiscGroupTmp
                where _priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            {
                if (this.checkSetKey(tmpOrderItemCategory.Product, tmpOrderItemCategory.itemId, tmpOrderItemCategory.inventDimId, periodicDiscount.OfferId, retailPeriodicDiscountCategoryLookup.RetailPeriodicDiscountLineRecordId))
                {
                    continue;
                }

                rowsReturned += 1;
                if (this.validateCoupon(periodicDiscount, _couponOfferIds)
                    || !this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, _priceDiscGroupTmp, _offerIdWithPriceGroups))
                {
                    continue;
                }

                rowsApplicable += 1;
                crtDiscount = this.CreateCrtPeriodicDiscount(periodicDiscount);
                this.SetPeriodicDiscountCategoryLookup(crtDiscount, retailPeriodicDiscountCategoryLookup);
                this.SetPeriodicDiscountOrderItemCategory(crtDiscount, tmpOrderItemCategory);

                _discountList.Add(crtDiscount);

                crtDiscount.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, _validationPeriodLookup);
                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                this.generateSetKey(crtDiscount.ProductId, crtDiscount.ItemId, crtDiscount.InventoryDimensionId, periodicDiscount.OfferId, retailPeriodicDiscountCategoryLookup.RetailPeriodicDiscountLineRecordId);
            }

            instrumentation.addExtendedData("rowsReturned", int2Str(rowsReturned));
            instrumentation.addExtendedData("rowsApplicable", int2Str(rowsApplicable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRetailDiscountsByProducts</Name>
				<Source><![CDATA[
    private void readRetailDiscountsByProducts(
        Set _couponOfferIds,
        CLRObject _discountList,
        ValidFromDate _minFromDate,
        ValidFromDate _maxToDate,
        TmpRecIdFilter _priceDiscGroupTmp,
        Map _validationPeriodLookup,
        System.String _currencyCode,
        RetailTmpOfferIdWithPriceGroups _offerIdWithPriceGroups)
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailPricingDataManagerV3), 'ReadRetailDiscounts.ByProducts'))
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount;

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup;
            RetailDiscountPriceGroup discountPriceGroup;

            int rowsReturned;
            int rowsApplicable;

            // get lines matching the product
            while select forceSelectOrder forceNestedLoop mTmpOrderItem
            join retailPeriodicDiscountProductLookup
                where retailPeriodicDiscountProductLookup.PeriodicDiscountType != RetailDiscountOfferTypeBase::Promotion && retailPeriodicDiscountProductLookup.PeriodicDiscountType != RetailDiscountOfferTypeBase::Shipping
                    && (retailPeriodicDiscountProductLookup.ValidFrom <= _minFromDate || retailPeriodicDiscountProductLookup.ValidFrom <= noDate)
                    && (retailPeriodicDiscountProductLookup.ValidTo >= _maxToDate || retailPeriodicDiscountProductLookup.ValidTo <= noDate)
                    && retailPeriodicDiscountProductLookup.CurrencyCode == _currencyCode
                    && retailPeriodicDiscountProductLookup.Product == mTmpOrderItem.Product
            join periodicDiscount
                where periodicDiscount.OfferId == retailPeriodicDiscountProductLookup.OfferId
            exists join discountPriceGroup
                where discountPriceGroup.OfferId == periodicDiscount.OfferId
            exists join _priceDiscGroupTmp
                where _priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            {
                if (this.checkSetKey(mTmpOrderItem.Product, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId))
                {
                    continue;
                }

                rowsReturned += 1;
                if (this.validateCoupon(periodicDiscount, _couponOfferIds)
                    || !this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, _priceDiscGroupTmp, _offerIdWithPriceGroups))
                {
                    continue;
                }

                rowsApplicable += 1;
                crtDiscount = this.CreateCrtPeriodicDiscount(periodicDiscount);
                this.SetPeriodicDiscountProductLookup(crtDiscount, retailPeriodicDiscountProductLookup);
                this.SetPeriodicDiscountOrderItem(crtDiscount, mTmpOrderItem);

                _discountList.Add(crtDiscount);

                crtDiscount.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, _validationPeriodLookup);
                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                this.generateSetKey(crtDiscount.ProductId, crtDiscount.ItemId, crtDiscount.InventoryDimensionId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId);
            }

            instrumentation.addExtendedData("rowsReturned", int2Str(rowsReturned));
            instrumentation.addExtendedData("rowsApplicable", int2Str(rowsApplicable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRetailDiscountsByProductMasters</Name>
				<Source><![CDATA[
    private void readRetailDiscountsByProductMasters(
        Set _couponOfferIds,
        CLRObject _discountList,
        ValidFromDate _minFromDate,
        ValidFromDate _maxToDate,
        TmpRecIdFilter _priceDiscGroupTmp,
        Map _validationPeriodLookup,
        System.String _currencyCode,
        RetailTmpOfferIdWithPriceGroups _offerIdWithPriceGroups)
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailPricingDataManagerV3), 'ReadRetailDiscounts.ByProductMasters'))
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount;

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup;
            RetailDiscountPriceGroup discountPriceGroup;
            EcoResDistinctProductVariant ecoResProductVariant;

            int rowsReturned;
            int rowsApplicable;

            // get lines matching the product's master
            while select forceSelectOrder forceNestedLoop mTmpOrderItem
            join RecId from ecoResProductVariant
                where ecoResProductVariant.RecId == mTmpOrderItem.Product
            join  retailPeriodicDiscountProductLookup
                where retailPeriodicDiscountProductLookup.PeriodicDiscountType != RetailDiscountOfferTypeBase::Promotion && retailPeriodicDiscountProductLookup.PeriodicDiscountType != RetailDiscountOfferTypeBase::Shipping
                    && (retailPeriodicDiscountProductLookup.ValidFrom <= _minFromDate || retailPeriodicDiscountProductLookup.ValidFrom <= noDate)
                    && (retailPeriodicDiscountProductLookup.ValidTo >= _maxToDate || retailPeriodicDiscountProductLookup.ValidTo <= noDate)
                    && retailPeriodicDiscountProductLookup.CurrencyCode == _currencyCode
                    && retailPeriodicDiscountProductLookup.Product == ecoResProductVariant.ProductMaster
            join periodicDiscount
                where periodicDiscount.OfferId == retailPeriodicDiscountProductLookup.OfferId
            exists join discountPriceGroup
                where discountPriceGroup.OfferId == periodicDiscount.OfferId
            exists join _priceDiscGroupTmp
                where _priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            {
                if (this.checkSetKey(mTmpOrderItem.Product, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId))
                {
                    continue;
                }

                rowsReturned += 1;
                if (this.validateCoupon(periodicDiscount, _couponOfferIds)
                    || !this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, _priceDiscGroupTmp, _offerIdWithPriceGroups))
                {
                    continue;
                }
                
                rowsApplicable += 1;
                crtDiscount = this.CreateCrtPeriodicDiscount(periodicDiscount);
                this.SetPeriodicDiscountProductLookup(crtDiscount, retailPeriodicDiscountProductLookup);
                this.SetPeriodicDiscountOrderItem(crtDiscount, mTmpOrderItem);

                _discountList.Add(crtDiscount);

                crtDiscount.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, _validationPeriodLookup);
                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                this.generateSetKey(crtDiscount.ProductId, crtDiscount.ItemId, crtDiscount.InventoryDimensionId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId);
            }

            instrumentation.addExtendedData("rowsReturned", int2Str(rowsReturned));
            instrumentation.addExtendedData("rowsApplicable", int2Str(rowsApplicable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRetailPriceAdjustmentsByCategories</Name>
				<Source><![CDATA[
    private void readRetailPriceAdjustmentsByCategories(
        CLRObject _adjustmentList,
        ValidFromDate _minFromDate,
        ValidFromDate _maxToDate,
        TmpRecIdFilter _priceDiscGroupTmp,
        Map _validationPeriodLookup,
        RetailTmpOfferIdWithPriceGroups _offerIdWithPriceGroups)
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailPricingDataManagerV3), 'ReadPriceAdjustments.ByCategories'))
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment;

            RetailCategoryContainmentLookup categoryLookup;
            EcoResProductCategory productCategory;
            RetailTempOrderCategory tmpOrderItemCategory;
            RetailSpecialCategoryMember variantCategory;
            InventTable inventTable;
            RetailGroupMemberLine retailGroupMemberLine;

            insert_recordset tmpOrderItemCategory(itemId, inventDimId, Product, Category)
                select itemId, inventDimId, Product from mTmpOrderItem
                join inventTable
                    where inventTable.ItemId == mTmpOrderItem.ItemId
                join productCategory
                    where productCategory.Product == inventTable.Product
                join Category from categoryLookup
                    where productCategory.Category == categoryLookup.ContainedCategory;

            if (this.shouldQuerySupplementalCategory())
            {
                // Insert supplemental category - variant based.
                insert_recordset tmpOrderItemCategory(itemId, inventDimId, Product, Category)
                    select itemId, inventDimId, Product from mTmpOrderItem
                        where mTmpOrderItem.Variant > 0
                    join retailGroupMemberLine
                        where  retailGroupMemberLine.Variant == mTmpOrderItem.Product
                    join variantCategory
                        where retailGroupMemberLine.RecId == variantCategory.RetailGroupMember
                    join Category from categoryLookup
                        where variantCategory.Category == categoryLookup.ContainedCategory;
            }

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountCategoryLookup retailPeriodicDiscountCategoryLookup;
            RetailDiscountPriceGroup discountPriceGroup;

            int rowsReturned;
            int rowsApplicable;

            // get lines matching the category
            while select forceselectorder forceNestedLoop tmpOrderItemCategory
            join retailPeriodicDiscountCategoryLookup
                where retailPeriodicDiscountCategoryLookup.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
                    && (retailPeriodicDiscountCategoryLookup.ValidFrom <= _minFromDate || retailPeriodicDiscountCategoryLookup.ValidFrom <= noDate)
                    && (retailPeriodicDiscountCategoryLookup.ValidTo >= _maxToDate || retailPeriodicDiscountCategoryLookup.ValidTo <= noDate)
                    && tmpOrderItemCategory.Category == retailPeriodicDiscountCategoryLookup.Category
            join periodicDiscount
                where periodicDiscount.OfferId == retailPeriodicDiscountCategoryLookup.OfferId
            exists join discountPriceGroup
                where discountPriceGroup.OfferId == periodicDiscount.OfferId
            exists join _priceDiscGroupTmp
                where _priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            {
                if (this.checkSetKey(tmpOrderItemCategory.Product, tmpOrderItemCategory.itemId, tmpOrderItemCategory.inventDimId, periodicDiscount.OfferId, retailPeriodicDiscountCategoryLookup.RetailPeriodicDiscountLineRecordId))
                {
                    continue;
                }

                rowsReturned += 1;
                if (!this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, _priceDiscGroupTmp, _offerIdWithPriceGroups))
                {
                    continue;
                }

                rowsApplicable += 1;
                crtAdjustment = this.CreateCrtPriceAdjustment(periodicDiscount);
                this.SetPriceAdjustmentCategoryLookup(crtAdjustment, retailPeriodicDiscountCategoryLookup);
                this.SetPriceAdjustmentOrderItemCategory(crtAdjustment, tmpOrderItemCategory);

                _adjustmentList.Add(crtAdjustment);

                crtAdjustment.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, _validationPeriodLookup);
                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                this.generateSetKey(crtAdjustment.ProductId, crtAdjustment.ItemId, crtAdjustment.InventoryDimensionId, periodicDiscount.OfferId, retailPeriodicDiscountCategoryLookup.RetailPeriodicDiscountLineRecordId);
            }

            instrumentation.addExtendedData("rowsReturned", int2Str(rowsReturned));
            instrumentation.addExtendedData("rowsApplicable", int2Str(rowsApplicable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRetailPriceAdjustmentsByProducts</Name>
				<Source><![CDATA[
    private void readRetailPriceAdjustmentsByProducts(
        CLRObject _adjustmentList,
        ValidFromDate _minFromDate,
        ValidFromDate _maxToDate,
        TmpRecIdFilter _priceDiscGroupTmp,
        Map _validationPeriodLookup,
        RetailTmpOfferIdWithPriceGroups _offerIdWithPriceGroups)
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailPricingDataManagerV3), 'ReadPriceAdjustments.ByProducts'))
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment;

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup;
            RetailDiscountPriceGroup discountPriceGroup;

            int rowsReturned;
            int rowsApplicable;

            // get lines matching the product
            while select forceSelectOrder forceNestedLoop mTmpOrderItem
            join retailPeriodicDiscountProductLookup
                where retailPeriodicDiscountProductLookup.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
                    && (retailPeriodicDiscountProductLookup.ValidFrom <= _minFromDate || retailPeriodicDiscountProductLookup.ValidFrom <= noDate)
                    && (retailPeriodicDiscountProductLookup.ValidTo >= _maxToDate || retailPeriodicDiscountProductLookup.ValidTo <= noDate)
                    && retailPeriodicDiscountProductLookup.Product == mTmpOrderItem.Product
            join periodicDiscount
                where periodicDiscount.OfferId == retailPeriodicDiscountProductLookup.OfferId
            exists join discountPriceGroup
                where discountPriceGroup.OfferId == periodicDiscount.OfferId
            exists join RefRecId from _priceDiscGroupTmp
                where _priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            {
                if (this.checkSetKey(mTmpOrderItem.Product, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId))
                {
                    continue;
                }

                rowsReturned += 1;
                if (!this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, _priceDiscGroupTmp, _offerIdWithPriceGroups))
                {
                    continue;
                }

                rowsApplicable += 1;
                crtAdjustment = this.CreateCrtPriceAdjustment(periodicDiscount);
                this.SetPriceAdjustmentProductLookup(crtAdjustment, retailPeriodicDiscountProductLookup);
                this.SetPriceAdjustmentOrderItem(crtAdjustment, mTmpOrderItem);

                _adjustmentList.Add(crtAdjustment);

                crtAdjustment.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, _validationPeriodLookup);
                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                this.generateSetKey(crtAdjustment.ProductId, crtAdjustment.ItemId, crtAdjustment.InventoryDimensionId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId);
            }

            instrumentation.addExtendedData("rowsReturned", int2Str(rowsReturned));
            instrumentation.addExtendedData("rowsApplicable", int2Str(rowsApplicable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRetailPriceAdjustmentsByProductMasters</Name>
				<Source><![CDATA[
    private void readRetailPriceAdjustmentsByProductMasters(
        CLRObject _adjustmentList,
        ValidFromDate _minFromDate,
        ValidFromDate _maxToDate,
        TmpRecIdFilter _priceDiscGroupTmp,
        Map _validationPeriodLookup,
        RetailTmpOfferIdWithPriceGroups _offerIdWithPriceGroups)
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(
            classStr(RetailPricingDataManagerV3), 'ReadPriceAdjustments.ByProductMasters'))
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment;

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup;
            RetailDiscountPriceGroup discountPriceGroup;
            EcoResDistinctProductVariant ecoResProductVariant;

            int rowsReturned;
            int rowsApplicable;

            // get lines matching the product's master
            while select forceSelectOrder forceNestedLoop mTmpOrderItem
            join RecId from ecoResProductVariant
                where ecoResProductVariant.RecId == mTmpOrderItem.Product
            join retailPeriodicDiscountProductLookup
                where retailPeriodicDiscountProductLookup.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
                    && (retailPeriodicDiscountProductLookup.ValidFrom <= _minFromDate || retailPeriodicDiscountProductLookup.ValidFrom <= noDate)
                    && (retailPeriodicDiscountProductLookup.ValidTo >= _maxToDate || retailPeriodicDiscountProductLookup.ValidTo <= noDate)
                    && retailPeriodicDiscountProductLookup.Product == ecoResProductVariant.ProductMaster
            join periodicDiscount
                where periodicDiscount.OfferId == retailPeriodicDiscountProductLookup.OfferId
            exists join discountPriceGroup
                where discountPriceGroup.OfferId == periodicDiscount.OfferId
            exists join _priceDiscGroupTmp
                where _priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            {
                if (this.checkSetKey(mTmpOrderItem.Product, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId))
                {
                    continue;
                }

                rowsReturned += 1;
                if (!this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, _priceDiscGroupTmp, _offerIdWithPriceGroups))
                {
                    continue;
                }

                rowsApplicable += 1;
                crtAdjustment = this.CreateCrtPriceAdjustment(periodicDiscount);
                this.SetPriceAdjustmentProductLookup(crtAdjustment, retailPeriodicDiscountProductLookup);
                this.SetPriceAdjustmentOrderItem(crtAdjustment, mTmpOrderItem);

                _adjustmentList.Add(crtAdjustment);

                crtAdjustment.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, _validationPeriodLookup);
                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                this.generateSetKey(crtAdjustment.ProductId, crtAdjustment.ItemId, crtAdjustment.InventoryDimensionId, periodicDiscount.OfferId, retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId);
            }

            instrumentation.addExtendedData("rowsReturned", int2Str(rowsReturned));
            instrumentation.addExtendedData("rowsApplicable", int2Str(rowsApplicable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCrtPriceAdjustment</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment CreateCrtPriceAdjustment(RetailPeriodicDiscount discount)
    {
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment = new Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment();

        crtAdjustment.OfferId = discount.OfferId;
        crtAdjustment.ValidFromDate = this.ConvertDateToSystemDateTimeOffsetV3(discount.ValidFrom);
        crtAdjustment.ValidToDate = this.ConvertDateToSystemDateTimeOffsetV3(discount.ValidTo);
        crtAdjustment.ConcurrencyMode = enum2int(discount.ConcurrencyMode);
        crtAdjustment.PricingPriorityNumber = discount.PricingPriorityNumber;
        crtAdjustment.DateValidationType = discount.DateValidationType;
        crtAdjustment.ValidationPeriodId = discount.ValidationPeriodId;
        crtAdjustment.CurrencyCode = discount.CurrencyCode;

        return crtAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPriceAdjustmentCategoryLookup</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment SetPriceAdjustmentCategoryLookup(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment,
        RetailPeriodicDiscountCategoryLookup retailPeriodicDiscountCategoryLookup)
    {
        UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(retailPeriodicDiscountCategoryLookup.UnitOfMeasure);
        crtAdjustment.UnitOfMeasure = unitOfMeasure.Symbol;
        crtAdjustment.DiscountMethod = enum2int(retailPeriodicDiscountCategoryLookup.SimpleDiscountMethod);
        crtAdjustment.OfferPrice = retailPeriodicDiscountCategoryLookup.SimpleDiscountOfferPrice;
        crtAdjustment.DiscountPercent = retailPeriodicDiscountCategoryLookup.SimpleDiscountPct;
        crtAdjustment.DiscountAmount = retailPeriodicDiscountCategoryLookup.SimpleDiscountAmount;
        crtAdjustment.RecordId = retailPeriodicDiscountCategoryLookup.RetailPeriodicDiscountLineRecordId;

        return crtAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPriceAdjustmentProductLookup</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment SetPriceAdjustmentProductLookup(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment,
        RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup)
    {
        UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(retailPeriodicDiscountProductLookup.UnitOfMeasure);
        crtAdjustment.UnitOfMeasure = unitOfMeasure.Symbol;
        crtAdjustment.DiscountMethod = enum2int(retailPeriodicDiscountProductLookup.SimpleDiscountMethod);
        crtAdjustment.OfferPrice = retailPeriodicDiscountProductLookup.SimpleDiscountOfferPrice;
        crtAdjustment.DiscountPercent = retailPeriodicDiscountProductLookup.SimpleDiscountPct;
        crtAdjustment.DiscountAmount = retailPeriodicDiscountProductLookup.SimpleDiscountAmount;
        crtAdjustment.RecordId = retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId;

        return crtAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPriceAdjustmentOrderItem</Name>
				<Source><![CDATA[
    private Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment SetPriceAdjustmentOrderItem(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment,
        RetailTempOrderItem tmpOrderItem)
    {
        crtAdjustment.ProductId = tmpOrderItem.Product;
        crtAdjustment.ItemId = tmpOrderItem.itemId;
        crtAdjustment.InventoryDimensionId = tmpOrderItem.inventDimId;

        return crtAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPriceAdjustmentOrderItemCategory</Name>
				<Source><![CDATA[
    private Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment SetPriceAdjustmentOrderItemCategory(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtAdjustment,
        RetailTempOrderCategory tmpOrderItemCategory)
    {
        crtAdjustment.ProductId = tmpOrderItemCategory.Product;
        crtAdjustment.ItemId = tmpOrderItemCategory.itemId;
        crtAdjustment.InventoryDimensionId = tmpOrderItemCategory.inventDimId;

        return crtAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCrtPeriodicDiscount</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount CreateCrtPeriodicDiscount(RetailPeriodicDiscount periodicDiscount)
    {
        RetailExtensibleEnumerationInitializer::setExtensibleEnumInitializer(funcName());

        Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount = new Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount();

        RetailDiscountOffer discountOffer;
        RetailDiscountMixAndMatch discountMixAndMatch;
        RetailDiscountMultibuy discountMultibuy;
        RetailDiscountThreshold discountThreshold;

        int discountType;
        switch (periodicDiscount.PeriodicDiscountType)
        {
            case RetailDiscountOfferTypeBase::DiscountOffer:
            case RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit:
                discountOffer = periodicDiscount;
                break;
            case RetailDiscountOfferTypeBase::MixAndMatch:
            case RetailDiscountOfferTypeBase::LeastExpensiveFavorRetailer:
                discountMixAndMatch = periodicDiscount;
                discountType = discountMixAndMatch.MixAndMatchDiscountType;
                break;
            case RetailDiscountOfferTypeBase::Multibuy:
                discountMultibuy = periodicDiscount;
                discountType = discountMultibuy.MultibuyDiscountType;
                break;
            case RetailDiscountOfferTypeBase::Threshold:
                discountThreshold = periodicDiscount;
                break;
            default:
                break;
        }

        crtDiscount.OfferId = periodicDiscount.OfferId;
        crtDiscount.ValidFromDate = this.ConvertDateToSystemDateTimeOffsetV3(periodicDiscount.ValidFrom);
        crtDiscount.ValidToDate = this.ConvertDateToSystemDateTimeOffsetV3(periodicDiscount.ValidTo);
        crtDiscount.ConcurrencyMode = enum2int(periodicDiscount.ConcurrencyMode);
        crtDiscount.PricingPriorityNumber = periodicDiscount.PricingPriorityNumber;
        crtDiscount.DateValidationType = periodicDiscount.DateValidationType;
        crtDiscount.ValidationPeriodId = periodicDiscount.ValidationPeriodId;
        crtDiscount.Name = periodicDiscount.Name;
        crtDiscount.ExtensiblePeriodicDiscountType = Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.TypeHelperForAx::GetExtensiblePeriodicDiscountOfferTypeByValue(enum2int(periodicDiscount.PeriodicDiscountType));
        crtDiscount.IsDiscountCodeRequired = periodicDiscount.IsDiscountCodeRequired;
        crtDiscount.DiscountType = discountType;
        crtDiscount.MixAndMatchDealPrice = discountMixAndMatch.DealPriceValue;
        crtDiscount.MixAndMatchDiscountPercent = periodicDiscount.DiscountPercentValue;
        crtDiscount.MixAndMatchDiscountAmount = discountMixAndMatch.DiscountAmountValue;
        crtDiscount.MixAndMatchNumberOfLeastExpensiveLines = discountMixAndMatch.NoOfLeastExpensiveLines;
        crtDiscount.MixAndMatchNumberOfTimeApplicable = discountMixAndMatch.numberOfTimesApplicable;
        crtDiscount.LeastExpensiveMode = enum2int(discountMixAndMatch.LeastExpensiveMode);
        crtDiscount.MixAndMatchShouldCountNonDiscountItems = discountMixAndMatch.MixAndMatchCountNonDiscountItems;
        crtDiscount.ShouldCountNonDiscountItems = discountThreshold.CountNonDiscountItems;
        crtDiscount.CurrencyCode = periodicDiscount.CurrencyCode;
        crtDiscount.MixAndMatchGeneratesBundleId = discountMixAndMatch.GeneratesBundleId;
        crtDiscount.OfferQuantityLimit = discountOffer.QuantityLimit;

        return crtDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPeriodicDiscountCategoryLookup</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount SetPeriodicDiscountCategoryLookup(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount,
        RetailPeriodicDiscountCategoryLookup retailPeriodicDiscountCategoryLookup)
    {
        UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(retailPeriodicDiscountCategoryLookup.UnitOfMeasure);
        crtDiscount.UnitOfMeasureSymbol = unitOfMeasure.Symbol;
        crtDiscount.DiscountMethod = retailPeriodicDiscountCategoryLookup.SimpleDiscountMethod;
        crtDiscount.OfferPrice = retailPeriodicDiscountCategoryLookup.SimpleDiscountOfferPrice;
        crtDiscount.DiscountPercent = retailPeriodicDiscountCategoryLookup.SimpleDiscountPct;
        crtDiscount.DiscountAmount = retailPeriodicDiscountCategoryLookup.SimpleDiscountAmount;
        crtDiscount.DiscountLineNumber = retailPeriodicDiscountCategoryLookup.LineNum;
        crtDiscount.DiscountLinePercentOrValue = retailPeriodicDiscountCategoryLookup.DiscountPercentOrValue;
        crtDiscount.MixAndMatchLineGroup = retailPeriodicDiscountCategoryLookup.MixAndMatchLineGroup;
        crtDiscount.MixAndMatchLineSpecificDiscountType = retailPeriodicDiscountCategoryLookup.MixAndMatchDiscountType;
        crtDiscount.MixAndMatchLineNumberOfItemsNeeded = retailPeriodicDiscountCategoryLookup.MixAndMatchNumberOfItemsNeeded;
        crtDiscount.LineType = enum2int(retailPeriodicDiscountCategoryLookup.LineType);
        crtDiscount.IsDiscountApplyingLine = retailPeriodicDiscountCategoryLookup.IsDiscountApplyingLine;
        crtDiscount.ThresholdApplyingLineQuantityLimit = retailPeriodicDiscountCategoryLookup.ThresholdQuantityLimit;
        crtDiscount.ThresholdApplyingLineDiscountMethod = enum2int(retailPeriodicDiscountCategoryLookup.ThresholdLineDiscountMethod);
        crtDiscount.ThresholdApplyingLineTierId = retailPeriodicDiscountCategoryLookup.ThresholdTier;
        crtDiscount.RecordId = retailPeriodicDiscountCategoryLookup.RetailPeriodicDiscountLineRecordId;

        return crtDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPeriodicDiscountProductLookup</Name>
				<Source><![CDATA[
    [Replaceable(false)]
    public Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount SetPeriodicDiscountProductLookup(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount,
        RetailPeriodicDiscountProductLookup retailPeriodicDiscountProductLookup)
    {
        UnitOfMeasure unitOfMeasure = UnitOfMeasure::find(retailPeriodicDiscountProductLookup.UnitOfMeasure);
        crtDiscount.UnitOfMeasureSymbol = unitOfMeasure.Symbol;
        crtDiscount.DiscountMethod = retailPeriodicDiscountProductLookup.SimpleDiscountMethod;
        crtDiscount.OfferPrice = retailPeriodicDiscountProductLookup.SimpleDiscountOfferPrice;
        crtDiscount.DiscountPercent = retailPeriodicDiscountProductLookup.SimpleDiscountPct;
        crtDiscount.DiscountAmount = retailPeriodicDiscountProductLookup.SimpleDiscountAmount;
        crtDiscount.DiscountLineNumber = retailPeriodicDiscountProductLookup.LineNum;
        crtDiscount.DiscountLinePercentOrValue = retailPeriodicDiscountProductLookup.DiscountPercentOrValue;
        crtDiscount.MixAndMatchLineGroup = retailPeriodicDiscountProductLookup.MixAndMatchLineGroup;
        crtDiscount.MixAndMatchLineSpecificDiscountType = retailPeriodicDiscountProductLookup.MixAndMatchDiscountType;
        crtDiscount.MixAndMatchLineNumberOfItemsNeeded = retailPeriodicDiscountProductLookup.MixAndMatchNumberOfItemsNeeded;
        crtDiscount.LineType = enum2int(retailPeriodicDiscountProductLookup.LineType);
        crtDiscount.IsDiscountApplyingLine = retailPeriodicDiscountProductLookup.IsDiscountApplyingLine;
        crtDiscount.ThresholdApplyingLineQuantityLimit = retailPeriodicDiscountProductLookup.ThresholdQuantityLimit;
        crtDiscount.ThresholdApplyingLineDiscountMethod = enum2int(retailPeriodicDiscountProductLookup.ThresholdLineDiscountMethod);
        crtDiscount.ThresholdApplyingLineTierId = retailPeriodicDiscountProductLookup.ThresholdTier;
        crtDiscount.RecordId = retailPeriodicDiscountProductLookup.RetailPeriodicDiscountLineRecordId;

        return crtDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPeriodicDiscountOrderItem</Name>
				<Source><![CDATA[
    private Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount SetPeriodicDiscountOrderItem(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount,
        RetailTempOrderItem tmpOrderItem)
    {
        crtDiscount.ProductId = tmpOrderItem.Product;
        crtDiscount.ItemId = tmpOrderItem.itemId;
        crtDiscount.InventoryDimensionId = tmpOrderItem.inventDimId;

        return crtDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetPeriodicDiscountOrderItemCategory</Name>
				<Source><![CDATA[
    private Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount SetPeriodicDiscountOrderItemCategory(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount,
        RetailTempOrderCategory tmpOrderItemCategory)
    {
        crtDiscount.ProductId = tmpOrderItemCategory.Product;
        crtDiscount.ItemId = tmpOrderItemCategory.itemId;
        crtDiscount.InventoryDimensionId = tmpOrderItemCategory.inventDimId;

        return crtDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ConvertDateToSystemDateTimeOffsetV3</Name>
				<Source><![CDATA[
    private System.DateTimeOffset ConvertDateToSystemDateTimeOffsetV3(date localDate)
    {
        System.TimeZoneInfo timeZoneInfo = System.TimeZoneInfo::FindSystemTimeZoneById(mPriceChannelConfiguration.ChannelTimeZoneId);
        return new System.DateTimeOffset(year(localDate), mthofyr(localDate), dayofmth(localDate), 0, 0, 0, timeZoneInfo.BaseUtcOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldQuerySupplementalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// For customers don't have supplemental category or no variants at all,
    /// they can extend this method to reduce one heavy query.
    /// </summary>
    /// <returns>True if querying supplemental category is necessary.</returns>
    protected boolean shouldQuerySupplementalCategory()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSetKey</Name>
				<Source><![CDATA[
    private void generateSetKey(
        EcoResProductRecId product,
        ItemId itemId,
        InventDimId inventDimId,
        RetailOfferIdEx3 offerId,
        RefRecId discountLineRecId)
    {
        if (avoidReadDuplicatedDiscountFlightEnabled)
        {
            offerIdItemSet.add(strFmt("%1_%2_%3_%4_%5", product, itemId, inventDimId, offerId, int642Str(discountLineRecId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSetKey</Name>
				<Source><![CDATA[
    private boolean checkSetKey(
        EcoResProductRecId product,
        ItemId itemId,
        InventDimId inventDimId,
        RetailOfferIdEx3 offerId,
        RefRecId discountLineRecId)
    {
        if (avoidReadDuplicatedDiscountFlightEnabled)
        {
            return offerIdItemSet.in(strFmt("%1_%2_%3_%4_%5", product, itemId, inventDimId, offerId, int642Str(discountLineRecId)));
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>