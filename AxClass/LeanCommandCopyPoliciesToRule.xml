<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandCopyPoliciesToRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>LeanCommandCopyPoliciesToRule</c> class is used to copy policies from one kanban rule to another kanban rule.
/// </summary>
class LeanCommandCopyPoliciesToRule extends LeanCommandBase
{
    LeanRuleData        leanRuleDataSource;
    LeanRuleData        leanRuleDataTarget;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyKanbanQuantityPolicies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies kanban quantity policies from a source kanban rule to a target kanban rule.
    /// </summary>
    protected void copyKanbanQuantityPolicies()
    {
        KanbanQuantityPolicyKanbanRuleFixed     kanbanQtyPolicyKanbanRuleFixed;
        KanbanQuantityPolicyKanbanRuleFixed     kanbanQtyPolicyKanbanRuleFixedSource;

        RefRecId sourceKanbanRuleFixedRecId = leanRuleDataSource.parmKanbanRuleFixed().RecId;

        if (sourceKanbanRuleFixedRecId)
        {
            RefRecId targetKanbanRuleFixedRecId = leanRuleDataTarget.parmKanbanRuleFixed().RecId;

            if (   targetKanbanRuleFixedRecId
                && sourceKanbanRuleFixedRecId
                && targetKanbanRuleFixedRecId != sourceKanbanRuleFixedRecId)
            {
                kanbanQtyPolicyKanbanRuleFixed.skipDataMethods(true);

                insert_recordset kanbanQtyPolicyKanbanRuleFixed (KanbanRuleFixed,KanbanQuantityPolicy)
                    select targetKanbanRuleFixedRecId, KanbanQuantityPolicy from kanbanQtyPolicyKanbanRuleFixedSource
                        where kanbanQtyPolicyKanbanRuleFixedSource.KanbanRuleFixed == leanRuleDataSource.parmKanbanRuleFixed().RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements logic to copy policies.
    /// </summary>
    /// <returns>
    ///    true if policies were successfully copied; otherwise, false.
    /// </returns>
    protected boolean execute()
    {
        this.copyKanbanQuantityPolicies();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleDataSource</Name>
				<Source><![CDATA[
        public LeanRuleData parmLeanRuleDataSource(LeanRuleData _leanRuleDataSource = leanRuleDataSource)
    {
        leanRuleDataSource = _leanRuleDataSource;

        return leanRuleDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanRuleDataTarget</Name>
				<Source><![CDATA[
        public LeanRuleData parmLeanRuleDataTarget(LeanRuleData _leanRuleDataTarget = leanRuleDataTarget)
    {
        leanRuleDataTarget = _leanRuleDataTarget;

        return leanRuleDataTarget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LeanCommandCopyPoliciesToRule</c> class.
    /// </summary>
    /// <returns>
    /// A <c>LeanCommandCopyPoliciesToRule</c> object.
    /// </returns>
    private static LeanCommandCopyPoliciesToRule construct()
    {
        return new LeanCommandCopyPoliciesToRule();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes an instance of the <c>LeanCommandCopyPoliciesToRule</c> class.
    /// </summary>
    /// <param name="_leanRuleDataSource">
    /// A <c>LeanRuleData</c> object that represents a source kanban rule.
    /// </param>
    /// <param name="_leanRuleDataTarget">
    /// A <c>LeanRuleData</c> object that represents a target kanban rule.
    /// </param>
    /// <returns>
    /// A <c>LeanCommandCopyPoliciesToRule</c> object.
    /// </returns>
    public static LeanCommandCopyPoliciesToRule newStandard(
        LeanRuleData    _leanRuleDataSource,
        LeanRuleData    _leanRuleDataTarget)
    {
        LeanCommandCopyPoliciesToRule leanCommandCopyPoliciesToRule = LeanCommandCopyPoliciesToRule::construct();

        leanCommandCopyPoliciesToRule.parmLeanRuleDataSource(_leanRuleDataSource);
        leanCommandCopyPoliciesToRule.parmLeanRuleDataTarget(_leanRuleDataTarget);

        return leanCommandCopyPoliciesToRule;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
