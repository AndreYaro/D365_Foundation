<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqWFExpendiParticipantProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchReqWFExpendiParticipantProvider extends WorkflowParticipantProvider_Expend
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    public WorkflowParticipantExpenDocumentType documentType()
    {
        return WorkflowParticipantExpenDocumentType::PurchReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParticipantTokens</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list that has the <c>WorkflowParticipantExpenToken.Name</c> field for display in the
    /// workflow configuration UI.
    /// </summary>
    /// <returns>
    /// An instance of a <c>WorkflowParticipantTokenList</c> class that contains the value of the
    /// <c>WorkflowParticipantExpenToken.Name</c> fieldnum as the participant token ID and the
    /// <c>WorkflowParticipantExpenToken.Name</c> value as the participant token name.
    /// </returns>

    public WorkflowParticipantTokenList getParticipantTokens()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the <c>PurchReqLine</c> dimensions to a list of users.
    /// </summary>
    /// <param name="_context">
    /// An instance of the <c>WorkflowContext</c> class.
    /// </param>
    /// <param name="_participantTokenName">
    /// A <c>PurchLine.Requisitioner</c> token.
    /// </param>
    /// <returns>
    /// An instance of the <c>WorkflowUserList</c> class that contains all enabled users from the token.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The participant token does not exist.
    /// </exception>

    public WorkflowUserList resolve(WorkflowContext          _context,
                                    WorkflowParticipantToken _participantTokenName)
    {
        PurchReqTable                               purchReqTable;
        PurchReqLine                                purchReqLine;
        WorkflowParticipantExpenToken               workflowParticipantExpenToken;
        WorkflowParticipantExpenTokenLine           workflowParticipantExpenTokenLine;
        WorkflowUserList                            userList = WorkflowUserList::construct();

        if (!_participantTokenName)
            throw error("@SYS105453");

        workflowParticipantExpenToken = WorkflowParticipantExpenToken::findName(WorkflowParticipantExpenDocumentType::PurchReq,
                                                                                _participantTokenName);

        if (!workflowParticipantExpenToken)
        {
            throw error(strFmt("@SYS313865", _participantTokenName));
        }

        if (_context.parmTableId() == tableNum(PurchReqTable))
        {
            purchReqTable   = PurchReqTable::find(_context.parmRecId());
        }
        else
        {
            purchReqTable   = PurchReqTable::find(PurchReqLine::find(_context.parmRecId()).PurchReqTable);
        }

        SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(purchReqTable, SourceDocumentLineAccountingStatus::FullyDistributed);

        while select ProjId, SourceDocumentLine, BuyingLegalEntity, RecId from purchReqLine where
                    purchReqLine.PurchReqTable == purchReqTable.RecId &&
                    (
                     _context.parmTableId() == tableNum(PurchReqTable) ||
                     (_context.parmTableId() == tableNum(PurchReqLine) && purchReqLine.RecId == _context.parmRecId())
                    )
        {
            changecompany(CompanyInfo::findRecId(purchReqLine.BuyingLegalEntity).DataArea)
            {
                workflowParticipantExpenTokenLine = WorkflowParticipantExpenTokenLine::findTokenLine(workflowParticipantExpenToken.RecId,
                                                                                                     purchReqLine.BuyingLegalEntity);
                this.initializeUserList(workflowParticipantExpenTokenLine, purchReqLine, userList);
            }
        }

        if (userList.getCount() == 0)
        {
            throw error(strFmt("@SCM:ParticipantTokenNotResolveUserCorrectAaccountingDistributionTryAgain", _participantTokenName));
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUserList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the dimensions of the <c>PurchReqLine</c> table to a list of users
    /// depending if the <c>WorkflowParticipantExpenTokenLine</c> record exists.
    /// </summary>
    /// <param name = "_workflowParticipantExpenTokenLine">The <c>WorkflowParticipantExpenTokenLine</c> record.</param>
    /// <param name = "_purchReqLine">The <c>PurchReqLine</c> record.</param>
    /// <param name = "_userList">An instance of the <c>WorkflowUserList</c> class.</param>
    protected void initializeUserList(WorkflowParticipantExpenTokenLine _workflowParticipantExpenTokenLine,
                                      PurchReqLine                      _purchReqLine,
                                      WorkflowUserList                  _userList)
    {
        RefRecId    dimensionAttributeSetRecId;
        MarkupTrans markupTrans;

        if (!_workflowParticipantExpenTokenLine)
        {
            return;
        }
        
        if (_purchReqLine.ProjId)
        {
            this.resolveProjectDistributions(_purchReqLine.SourceDocumentLine, _workflowParticipantExpenTokenLine, _userList);

            dimensionAttributeSetRecId  = _workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet;
        }
        else
        {
            dimensionAttributeSetRecId  = _workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet;
        }

        if (dimensionAttributeSetRecId)
        {
            this.resolveDimensions(_userList, _purchReqLine.SourceDocumentLine, dimensionAttributeSetRecId);

            while select SourceDocumentLine from  markupTrans where markupTrans.TransTableId == _purchReqLine.TableId &&
                                                                            markupTrans.TransRecId   == _purchReqLine.RecId
            {
                this.resolveDimensions(_userList, markupTrans.SourceDocumentLine, dimensionAttributeSetRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchReqWFExpendiParticipantProvider construct()
    {
        return new PurchReqWFExpendiParticipantProvider();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>