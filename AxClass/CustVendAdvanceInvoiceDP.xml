<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAdvanceInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendAdvanceInvoiceDP</c> class is the base report data provider class for the
/// <c>CustAdvanceInvoice</c> and <c>VendAdvanceInvoice</c> reports.
/// </summary>
abstract class CustVendAdvanceInvoiceDP extends SRSReportDataProviderBase
{
    CustVendAdvanceInvoiceContract  contract;
    CustVendAdvanceInvoiceTmp       advanceInvoiceTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearInvoiceLineFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the invoice line fields from the report temp table buffer.
    /// </summary>
    /// <remarks>
    /// This is done so the report can differentiate between advance invoice lines and other bands of the report.
    /// </remarks>
    protected void clearInvoiceLineFields()
    {
        advanceInvoiceTmp.LineDescription = '';
        advanceInvoiceTmp.LineInvoiceText = '';
        advanceInvoiceTmp.LineAmountCur = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the core advance invoice line fields in the report temp table buffer and inserts the record.
    /// </summary>
    /// <param name="advanceInvoiceLine">
    /// The specific advance invoice line to default from.
    /// </param>
    protected void createInvoiceLine(CzAdvanceInvoiceLine advanceInvoiceLine)
    {
        advanceInvoiceTmp.LineDescription = advanceInvoiceLine.Description;
        advanceInvoiceTmp.LineInvoiceText = advanceInvoiceLine.InvoiceTxt;
        advanceInvoiceTmp.LineAmountCur = advanceInvoiceLine.AmountCur;

        this.insertAdvanceInvoiceTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements an original document section on the advance invoice report.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice having an original document.
    /// </param>
    protected void createOriginalDocument(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        Debug::assert(advanceInvoiceTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements a taxes section on the advance invoice report.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice having tax details.
    /// </param>
    protected void createTaxes(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        Debug::assert(advanceInvoiceTable.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the specific advance invoice record currently being printed.
    /// </summary>
    /// <returns>
    /// The specific advance invoice record currently being printed.
    /// </returns>
    abstract protected CzAdvanceInvoiceTable getAdvanceInvoiceTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>CustAdvanceInvoiceTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>CustAdvanceInvoiceTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustVendAdvanceInvoiceTmp))]
    public CustVendAdvanceInvoiceTmp getAdvanceInvoiceTmp()
    {
        select advanceInvoiceTmp;
        return advanceInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTitleNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value that will be used as the document number in the title of the report.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice currently being printed.
    /// </param>
    /// <returns>
    /// The value that will be used as the document number in the title of the report.
    /// </returns>
    protected InvoiceId getDocumentTitleNumber(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        return advanceInvoiceTable.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdvanceInvoiceLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record buffer with the lines for the advance invoice currently being printed.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice currently being printed.
    /// </param>
    /// <returns>
    /// A dataset of lines for the advance invoice currently being printed, positioned on the first record;
    /// otherwise, an empty record buffer.
    /// </returns>
    /// <remarks>
    /// The use of the <c>firstonly</c> keyword is avoided so callers can iterate the possible dataset.
    /// </remarks>
    abstract protected CzAdvanceInvoiceLine initAdvanceInvoiceLineMap(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAdvanceInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>CustAdvanceInvoiceTmp</c> temporary table.
    /// </summary>
    protected void insertAdvanceInvoiceTmp()
    {
        advanceInvoiceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the text that will be used in the header of the current advance invoice report as a
    /// document title.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice currently being printed.
    /// </param>
    /// <returns>
    /// The text that will be used in the header of the current advance invoice report as a document title.
    /// </returns>
    protected FreeText invoiceTxt(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        str invoiceTxt;

        if (advanceInvoiceTable.InvoiceId)
        {
            invoiceTxt = strfmt("@SYS76498",
                                "@GLS107927",
                                this.getDocumentTitleNumber(advanceInvoiceTable));
        }
        else
        {
            invoiceTxt = "@GLS107933";
        }

        return invoiceTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// Note that this is a framework class. Customizing this class may cause problems with future upgrades
    /// to the software.
    /// </remarks>
    public void processReport()
    {
        CzAdvanceInvoiceTable   advanceInvoiceTable;
        CzAdvanceInvoiceLine    advanceInvoiceLine;
        boolean linesExist;

        contract = this.parmDataContract() as CustVendAdvanceInvoiceContract;

        advanceInvoiceTable = this.getAdvanceInvoiceTable();

        advanceInvoiceLine = this.initAdvanceInvoiceLineMap(advanceInvoiceTable);

        if (advanceInvoiceTable)
        {
            this.setInvoiceHeaderFields(advanceInvoiceTable);
            advanceInvoiceTmp.setCompanyFields();

            while (advanceInvoiceLine)
            {
                linesExist = true;

                this.createInvoiceLine(advanceInvoiceLine);

                next advanceInvoiceLine;
            }

            this.clearInvoiceLineFields();

            if (!linesExist)
            {
                // Print report with company info and invoice header only
                this.insertAdvanceInvoiceTmp();
            }
            else
            {
                this.createTaxes(advanceInvoiceTable);
                this.createOriginalDocument(advanceInvoiceTable);
            }
        }
        else
        {
            // Print report with company info only
            advanceInvoiceTmp.setCompanyFields();
            this.insertAdvanceInvoiceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the core advance invoice header fields in the report temporary table buffer.
    /// </summary>
    /// <param name="advanceInvoiceTable">
    /// The specific advance invoice currently being printed.
    /// </param>
    protected void setInvoiceHeaderFields(CzAdvanceInvoiceTable advanceInvoiceTable)
    {
        // Set common invoice fields
        advanceInvoiceTmp.InvoiceAccount = advanceInvoiceTable.InvoiceAccount;
        advanceInvoiceTmp.InvoiceText = this.invoiceTxt(advanceInvoiceTable);
        advanceInvoiceTmp.InvoiceDate = advanceInvoiceTable.InvoiceDate;
        advanceInvoiceTmp.DueDate = advanceInvoiceTable.DueDate;
        advanceInvoiceTmp.Payment = advanceInvoiceTable.Payment;
        advanceInvoiceTmp.InvoiceId = advanceInvoiceTable.InvoiceId;
        advanceInvoiceTmp.BankConstantSymbol = advanceInvoiceTable.BankConstantSymbol;
        advanceInvoiceTmp.ContactPersonName = advanceInvoiceTable.editContactPersonName(false, '');
        advanceInvoiceTmp.Address = LogisticsPostalAddress::findRecId(advanceInvoiceTable.PostalAddress).Address;
        advanceInvoiceTmp.InvoiceAmount = advanceInvoiceTable.InvoiceAmount;
        advanceInvoiceTmp.CurrencyCode = advanceInvoiceTable.CurrencyCode;
        advanceInvoiceTmp.InvoiceRecId = advanceInvoiceTable.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
