<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCreateOrderFromCustomer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesCreateOrderFromCustomer</c> class creates the sales order for a specific customer.
/// </summary>
class SalesCreateOrderFromCustomer
{
    SalesTable              salesTable;
    SalesAgreementHeader    salesAgreementHeader;
    boolean agreementFormClosedOK;
    boolean initFromCustTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales order based on the account number of the customer.
    /// </summary>
    /// <param name="_custTable">
    /// A <c>CustTable</c> record that is used to initialize the sales order.
    /// </param>
    /// <returns>
    /// The record of the new sales order; otherwise, null.
    /// </returns>
    public SalesTable create(CustTable _custTable)
    {
        CustTable           custTable = _custTable;
 
        //Verify customer has not been merged.
        if (_custTable.MCRMergedParent)
        {
            custTable = CustTable::find(_custTable.MCRMergedParent);
        }

        salesTable = this.initializeSalesTable(custTable);

        if (this.mustSkipSalesOrderCreation(custTable))
        {
            // Create with agreement form was closed
            return null;
        }

        ttsbegin;
        salesTable.SalesId = this.setSalesId();
        salesTable.transferCustAccount_Server(this.parmInitFromCustTable());

        if (salesAgreementHeader)
        {
            salesTable.initFromSalesAgreementHeader(salesAgreementHeader);
        }

        if (!salesTable.validateWrite())
        {
            throw Exception::Error;
        }

        salesTable.insert();
        ttscommit;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order.
    /// </summary>
    /// <param name="_custTable">
    /// A <c>CustTable</c> record that is used to initialize the sales order.
    /// </param>
    /// <returns>
    /// A <c>SalesTable</c> record.
    /// </returns>
    public SalesTable initializeSalesTable(CustTable _custTable)
    {
        SalesTableForm salesTableForm = SalesTableForm::construct(SalesTableFormId::None, _custTable);
        salesTableForm.custAccount(_custTable.AccountNum);
        salesTableForm.initValues();

        salesTable = salesTableForm.salesTable();
        salesTable.initValue();     
   
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate new salesId based on number sequence.
    /// </summary>
    [Replaceable]
    protected SalesId setSalesId()
    {
		return NumberSeq::newGetNum(SalesParameters::numRefSalesId()).num();
	}

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipSalesOrderCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to skip the sales order creation.
    /// </summary>
    /// <param name="_custTable">
    /// A <c>CustTable</c> record that is used to initialize the sales order.
    /// </param>
    /// <returns>
    /// true if the sales order creation must be skipped; otherwise, false.
    /// </returns>
    protected boolean mustSkipSalesOrderCreation(CustTable _custTable)
    {
        return SalesAgreementHeader::existForCustomer(_custTable.AccountNum)
            && !this.openCreateWithAgreementForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>openCreateWithAgreementForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a form for creating the order that is linked to the sales agreement.
    /// </summary>
    /// <returns>
    /// true if form was successfully closed; otherwise, false.
    /// </returns>
    protected boolean openCreateWithAgreementForm()
    {
        Args        args = new Args();

        args.name(formStr(SalesCreateOrderFromCustomerWthAgreement));
        args.caller(this);
        FormRun salesCreateOrder = classfactory.formRunClass(args);
        salesCreateOrder.init();
        salesCreateOrder.run();
        if (!salesCreateOrder.closed())
        {
            salesCreateOrder.wait();
            agreementFormClosedOK = salesCreateOrder.closedOk();
        }

        return agreementFormClosedOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitFromCustTable</Name>
				<Source><![CDATA[
    public boolean parmInitFromCustTable(boolean _initFromCustTable = initFromCustTable)
    {
        initFromCustTable = _initFromCustTable;

        return initFromCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAgreementHeader</Name>
				<Source><![CDATA[
    public SalesAgreementHeader parmSalesAgreementHeader(SalesAgreementHeader _salesAgreementHeader = salesAgreementHeader)
    {
        salesAgreementHeader = _salesAgreementHeader;
        return salesAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesCreateOrderFromCustomer construct()
    {
        return new SalesCreateOrderFromCustomer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a sales order from the given customer.
    /// </summary>
    /// <param name="_custTable">
    /// A <c>CustTable</c> record.
    /// </param>
    /// <param name="_initFromCustTable">
    ///   A <c>boolean</c> value identifies if the sales order should be initailized from the <c>CustTable</c> record. Default value is true; Optional.
    /// </param>
    /// <returns>
    /// A <c>SalesTable</c> record.
    /// </returns>
    static public SalesTable createNewOrder(CustTable _custTable, boolean _initFromCustTable = true)
    {
        SalesCreateOrderFromCustomer salesCreateOrder = SalesCreateOrderFromCustomer::initializeSalesCreateOrder(_initFromCustTable);

        return salesCreateOrder.create(_custTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSalesCreateOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a sales order.
    /// </summary>
    /// <param name="_initFromCustTable">
    ///   A <c>boolean</c> value identifies if the sales order should be initailized from the <c>CustTable</c> record. Default value is true; Optional.
    /// </param>
    /// <returns>
    /// An object of <c>SalesCreateOrderFromCustomer</c> class.
    /// </returns>
    static public SalesCreateOrderFromCustomer initializeSalesCreateOrder(boolean _initFromCustTable = true)
    {
        SalesCreateOrderFromCustomer salesCreateOrder = SalesCreateOrderFromCustomer::construct();
        salesCreateOrder.parmInitFromCustTable(_initFromCustTable);

        return salesCreateOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCreateLinesFromItemList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether getting the pop up message on item list configuartion.
    /// </summary>
    /// <param name = "_salesTable">
    /// A <c>SalesTable</c> record.
    /// </param>
    public static void mcrCreateLinesFromItemList(SalesTable _salesTable)
    {
        FormRun formRun;
        Args    formArgs = new Args();

        formArgs.record(_salesTable);

        formRun = new MenuFunction(menuitemDisplayStr(MCRItemListCopying),
                                 MenuItemType::Display).create(formArgs);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SalesTable salesTable;
        Args       formArgs = new Args();

        if (!_args || !_args.record())
        {
            throw error(strfmt("@SYS29104", classstr(SalesCreateOrderFromCustomer)));
        }

        salesTable = SalesCreateOrderFromCustomer::createNewSalesOrder(_args);

        if (!salesTable)
        {
            return; // Customer creation was canceled
        }

        // Prompts the item list pop-up.
        if (salesTable.SalesType == SalesType::Sales
            && SalesParameters::find().mcrPromptForItemList
            && MCRCustTable::hasAnyItemListGenerated(salesTable.CustAccount))
        {
            SalesCreateOrderFromCustomer::mcrCreateLinesFromItemList(salesTable);
        }

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
        {
            Args createdSalesOrderArgs = SalesCreateOrderFromCustomer::newCreatedSalesOrderArgs(_args, salesTable);
        
            new MenuFunction(menuitemdisplaystr(SalesTableForEdit), MenuItemType::Display).run(createdSalesOrderArgs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new sales order.
    /// </summary>
    /// <param name = "_args">
    ///     Any arguments passed.
    /// </param>
    /// <returns>
    ///     The created <c>SalesTable</c> record.
    /// </returns>
    protected static SalesTable createNewSalesOrder(Args _args)
    {
        SalesTable  salesTable;

        if (_args)
        {
            if (SalesParameters::find().PromptTransfer &&
                Box::yesNo("@SYS418", DialogButton::Yes) != DialogButton::Yes)
            {
                salesTable = SalesCreateOrderFromCustomer::createNewOrder(_args.record(), false);
            }
            else
            {
                salesTable = SalesCreateOrderFromCustomer::createNewOrder(_args.record(), true);
            }
        }

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCreatedSalesOrderArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>Args</c> object for the created sales order.
    /// </summary>
    /// <param name = "_args">
    /// The <c>Args</c> object to initialize from.
    /// </param>
    /// <param name = "_salesTable">
    /// The created <c>SalesTable</c> record.
    /// </param>
    /// <returns>
    /// The <c>Args</c> object for the created sales order.
    /// </returns>
    protected static Args newCreatedSalesOrderArgs(Args _args, SalesTable _salesTable)
    {
        Args createdSalesOrderArgs = new Args();

        createdSalesOrderArgs.record(_args.record());
        createdSalesOrderArgs.lookupRecord(_salesTable);
        createdSalesOrderArgs.caller(_args.caller());
        createdSalesOrderArgs.parmObject(_args.caller());
        createdSalesOrderArgs.openMode(OpenMode::Edit);

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // pass along button parameters to sales table form
            if (_args.parm() == 'create') //this means this class was called from Forms\MCRCustomerService.MenuItemButton:CreateOrder button.  See value on parameters property.
            {
                MCRSalesTableConfigure salesTableConfigure = new MCRSalesTableConfigure();
                salesTableConfigure.parmCustomerServiceParam(MCRCustomerServiceParam::Create);
                createdSalesOrderArgs.parmObject(salesTableConfigure);
            }
        }

        return createdSalesOrderArgs;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>