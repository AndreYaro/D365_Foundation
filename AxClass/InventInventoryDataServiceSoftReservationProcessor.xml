<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceSoftReservationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceSoftReservationProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processInventTrans</Name>
				<Source><![CDATA[
    public static void processInventTrans(InventTrans _inventTrans, DataEventType dataEventType)
    {
        if (dataEventType == DataEventType::Inserted)
        {
            InventInventoryDataServiceSoftReservationProcessor::insertSoftReserveHistoryFromInsertedInventTrans(_inventTrans);
        }
        else if (dataEventType == DataEventType::Updated)
        {
            InventInventoryDataServiceSoftReservationProcessor::insertSoftReserveHistoryFromUpdatedInventTrans(_inventTrans);
        }
        else if (dataEventType == DataEventType::Deleted)
        {
            InventInventoryDataServiceSoftReservationProcessor::insertSoftReserveHistoryFromDeletedInventTrans(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSalesLine</Name>
				<Source><![CDATA[
    public static void processSalesLine(SalesLine salesLine, DataEventType dataEventType)
    {
        if (dataEventType == DataEventType::Inserted)
        {
            if (InventInventoryDataServiceSoftReservationCompatibleV0V1Flight::instance().isEnabled())
            {
                InventInventoryDataServiceSoftReservationProcessor::deleteSoftReservedExternallyHistoryRecord(salesLine);
            }
            else
            {
                InventInventoryDataServiceSoftReservationProcessor::updateNewSoftReserveHistoryInventDimId(salesLine);
            }
        }
        else if (dataEventType == DataEventType::Updated)
        {
            if (salesLine.InventDimId != salesLine.orig().InventDimId)
            {
                InventInventoryDataServiceSoftReservationProcessor::updateInventDim(salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNewSoftReserveHistoryInventDimId</Name>
				<Source><![CDATA[
    // old version
    private static void updateNewSoftReserveHistoryInventDimId(SalesLine _salesLine)
    {
        if (_salesLine.IsSoftReservedExternally)
        {
            InventInventoryDataServiceSoftReserveHistory softReserveHistory = InventInventoryDataServiceSoftReserveHistory::findInventTransId(_salesLine.InventTransId, true);

            if (softReserveHistory.RecId)
            {
                softReserveHistory.SuccessedQty = softReserveHistory.UnprocessedQty;
                softReserveHistory.UnprocessedQty = 0;

                softReserveHistory.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSoftReservedExternallyHistoryRecord</Name>
				<Source><![CDATA[
    private static void deleteSoftReservedExternallyHistoryRecord(SalesLine _salesLine)
    {
        if (_salesLine.IsSoftReservedExternally || _salesLine.InventoryServiceReservationId != "" || _salesLine.InventoryServiceAutoOffset == true)
        {
            InventInventoryDataServiceSoftReserveHistory softReserveHistory = InventInventoryDataServiceSoftReserveHistory::findInventTransId(_salesLine.InventTransId, true);

            if (softReserveHistory.RecId)
            {
                softReserveHistory.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSoftReserveHistory</Name>
				<Source><![CDATA[
    private static void updateSoftReserveHistory(InventInventoryDataServiceSoftReserveHistory _softReserveHistory)
    {
        if (_softReserveHistory.isSoftReserveQuantitiesEmpty())
        {
            _softReserveHistory.delete();
        }
        else
        {
            _softReserveHistory.combineUnpostedQty();
            _softReserveHistory.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventDim</Name>
				<Source><![CDATA[
    private static void updateInventDim(Salesline _salesLine)
    {
        InventInventoryDataServiceSoftReserveHistory softReserveHistory = InventInventoryDataServiceSoftReserveHistory::findInventTransId(_salesLine.InventTransId, true);

        if (softReserveHistory.RecId && !softReserveHistory.existsNonZereSoftReservedQuantity())
        {
            softReserveHistory.InventDimId = _salesLine.InventDimId;
            InventInventoryDataServiceSoftReservationProcessor::updateSoftReserveHistory(softReserveHistory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSoftReserveHistoryFromInsertedInventTrans</Name>
				<Source><![CDATA[
    private static void insertSoftReserveHistoryFromInsertedInventTrans(InventTrans _inventTrans)
    {
        InventInventoryDataServiceSoftReservationProcessor::upsertSoftReservRecords(_inventTrans, -_inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSoftReserveHistoryFromUpdatedInventTrans</Name>
				<Source><![CDATA[
    private static void insertSoftReserveHistoryFromUpdatedInventTrans(InventTrans _inventTrans)
    {
        if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueExactMatched(_inventTrans, StatusIssue::OnOrder)
            && _inventTrans.Qty != _inventTrans.orig().Qty)
        {
            InventInventoryDataServiceSoftReservationProcessor::upsertSoftReservRecords(_inventTrans, -(_inventTrans.Qty -_inventTrans.orig().Qty));
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatchedForUpdatedInventTrans(_inventTrans, _inventTrans.orig(), StatusIssue::OnOrder))
        {
            InventInventoryDataServiceSoftReservationProcessor::upsertSoftReservRecords(_inventTrans, -_inventTrans.Qty);
        }
        else if (InventInventoryDataServiceSoftReservationHelper::isStatusIssueMatchedForUpdatedInventTrans( _inventTrans.orig(), _inventTrans, StatusIssue::OnOrder))
        {
            InventInventoryDataServiceSoftReservationProcessor::upsertSoftReservRecords(_inventTrans, _inventTrans.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSoftReserveHistoryFromDeletedInventTrans</Name>
				<Source><![CDATA[
    private static void insertSoftReserveHistoryFromDeletedInventTrans(InventTrans _inventTrans)
    {
        InventInventoryDataServiceSoftReservationProcessor::upsertSoftReservRecords(_inventTrans, _inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>upsertSoftReservRecords</Name>
				<Source><![CDATA[
    private static void upsertSoftReservRecords(InventTrans _inventTrans, Real _qty)
    {
        InventInventoryDataServiceSoftReserveHistory softReserveHistory;
        select forupdate firstonly softReserveHistory 
            where softReserveHistory.InventtransOrigin == _inventTrans.InventTransOrigin;

        if (softReserveHistory.RecId)
        {
            softReserveHistory.UnprocessedQty += _qty;
            InventInventoryDataServiceSoftReservationProcessor::updateSoftReserveHistory(softReserveHistory);    
        }
        else
        {
            InventTable item = InventTable::find(_inventTrans.ItemId);
            if (!item.inventItemType().isServiceItem() && item.isStocked()) // Soft reservation is only valid for stocked, non-service items
            {
                InventTransOrigin inventTransOrigin; // can't use InventTransOriginSalesLine here because when inventtrans is insert, the InventTransOriginSalesLine has not been insert
                select firstonly inventTransOrigin
                    where inventTransOrigin.RecId == _inventTrans.InventTransOrigin
                    && inventTransOrigin.ReferenceCategory == InventTransType::Sales;

                if (inventTransOrigin)
                {
                    SalesLine salesLine;
                    select firstonly salesLine where salesline.InventTransId == inventtransOrigin.InventTransId;

                    if (!salesLine.RecId) // When salesline is created, inventtranse is created before salesline
                    {
                        softReserveHistory.ItemId = _inventTrans.ItemId;
                        softReserveHistory.InventTransOrigin = _inventTrans.inventTransOrigin;
                        softReserveHistory.InventDimId = _inventTrans.InventDimId;
                        softReserveHistory.UnprocessedQty = _qty;

                        softReserveHistory.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>