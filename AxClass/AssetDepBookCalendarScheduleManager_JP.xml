<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepBookCalendarScheduleManager_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a calendar schedule manager class for value model/depreciation book.
/// </summary>
class AssetDepBookCalendarScheduleManager_JP
{
    Map                     fiscalCalendars;
    AssetDepBookTableMap_JP assetDepBookTableMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFiscalCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Fiscal Calendar on the specific date
    /// </summary>
    /// <param name="_date">
    /// The date.
    /// </param>
    /// <returns>
    /// Returns the <c>RecId</c> of the fiscal calendar.
    /// </returns>
    public RefRecId getFiscalCalendar(AssetTransDate _date)
    {
        RefRecId            ret;
        MapEnumerator       enumerator;

        enumerator = fiscalCalendars.getEnumerator();
        while (enumerator.moveNext())
        {
            if (enumerator.currentKey() <= _date)
            {
                ret = enumerator.currentValue();
            }
            else
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the initialization. Pull all fiscal calendar into cache.
    /// </summary>
    protected void init()
    {
        AssetDepBookCalendarSchedule_JP calendarSchedule;
        AssetTransDate                  fromDate = dateNull();
        AssetTransDate                  toDate = dateMax();

        // Add default fiscal calendar
        fiscalCalendars.insert(dateNull(), assetDepBookTableMap.AssetDepBookTableMap_JP::getFiscalCalendar_JP(dateNull()));

        // Add all fiscal calendar based on the calendar change
        while select validTimeState(fromDate, toDate) ValidFrom, FiscalCalendar from calendarSchedule
            order by calendarSchedule.ValidFrom
            where calendarSchedule.SourceTableId == assetDepBookTableMap.TableId
                && calendarSchedule.SourceRecId == assetDepBookTableMap.RecId
        {
            fiscalCalendars.insert(calendarSchedule.ValidFrom, calendarSchedule.FiscalCalendar);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>AssetDepBookCalendarScheduleManager_JP</c> class.
    /// </summary>
    /// <param name="_assetDepBookTableMap">
    /// The asset depreciation book table map of the <c>AssetDepBookTableMap_JP</c>.
    /// </param>
    public void new(AssetDepBookTableMap_JP _assetDepBookTableMap)
    {
        fiscalCalendars = new Map(Types::Date, Types::Int64);
        assetDepBookTableMap = _assetDepBookTableMap;

        this.init();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>