<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysPolicyTypeSourceDocumentQueryEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SysPolicyTypeSourceDocumentQueryEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SysPolicyTypeSourceDocumentQueryDeletedEvent</Name>
				<Source><![CDATA[
    [DataEventHandler(tablestr(SysPolicyTypeSourceDocumentQuery), DataEventType::Deleted), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void SysPolicyTypeSourceDocumentQueryDeletedEvent(Common c, DataEventArgs e)
    {
        SysPolicyTypeSourceDocumentQuery sourceDocumentQuery = c as SysPolicyTypeSourceDocumentQuery;

        SysPolicyType policyType = SysPolicyType::findByEnum(SysPolicyTypeEnum::AuditPolicy);

        // Delete AuditPolicyCaseGroup record for AuditPolicy type deletes.
        if ((sourceDocumentQuery.PolicyType == policyType.RecId) && (!sourceDocumentQuery.queryRootTableCount()) && (sourceDocumentQuery.SourceRelationType))
        {
            AuditPolicyCaseGroup auditCaseGroup = AuditPolicyCaseGroup::findBySource(sourceDocumentQuery.SourceRelationType, true);

            if (auditCaseGroup.RecId)
            {
                auditCaseGroup.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysPolicyTypeSourceDocumentQueryInsertedEvent</Name>
				<Source><![CDATA[
    [DataEventHandler(tablestr(SysPolicyTypeSourceDocumentQuery), DataEventType::Inserted), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void SysPolicyTypeSourceDocumentQueryInsertedEvent(Common c, DataEventArgs e)
    {
        SysPolicyTypeSourceDocumentQuery sourceDocumentQuery = c as SysPolicyTypeSourceDocumentQuery;

        SysPolicyType policyType = SysPolicyType::findByEnum(SysPolicyTypeEnum::AuditPolicy);

        // Insert AuditPolicyCaseGroup record for AuditPolicy type inserts.
        if ((sourceDocumentQuery.PolicyType == policyType.RecId) && (sourceDocumentQuery.SourceRelationType))
        {
            AuditPolicyCaseGroup auditCaseGroup = AuditPolicyCaseGroup::findBySource(sourceDocumentQuery.SourceRelationType);

            if (!auditCaseGroup.RecId)
            {
                auditCaseGroup.AuditPolicyCaseGroupType = AuditPolicyCaseGroupType::AuditPolicyRule;
                auditCaseGroup.SourceRelationType = sourceDocumentQuery.SourceRelationType;
                auditCaseGroup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SysPolicyTypeSourceDocumentQueryUpdatedEvent</Name>
				<Source><![CDATA[
    [DataEventHandler(tablestr(SysPolicyTypeSourceDocumentQuery), DataEventType::Updated), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void SysPolicyTypeSourceDocumentQueryUpdatedEvent(Common c, DataEventArgs e)
    {
        SysPolicyTypeSourceDocumentQuery sourceDocumentQueryNew = c as SysPolicyTypeSourceDocumentQuery;
        SysPolicyTypeSourceDocumentQuery sourceDocumentQueryOld = (c.orig()) as SysPolicyTypeSourceDocumentQuery;

        AuditPolicyCaseGroup auditCaseGroup;

        SysPolicyType policyType = SysPolicyType::findByEnum(SysPolicyTypeEnum::AuditPolicy);

        policyType = SysPolicyType::findByEnum(SysPolicyTypeEnum::AuditPolicy);

        // Update AuditPolicyCaseGroup record for AuditPolicy type updates.
        if ((sourceDocumentQueryNew.PolicyType == policyType.RecId) && (sourceDocumentQueryNew.SourceRelationType))
        {
            // If a grouping record for the current source document does not exist, insert one.
            auditCaseGroup = AuditPolicyCaseGroup::findBySource(sourceDocumentQueryNew.SourceRelationType,  true);

            if (!auditCaseGroup.RecId)
            {
                auditCaseGroup.AuditPolicyCaseGroupType = AuditPolicyCaseGroupType::AuditPolicyRule;
                auditCaseGroup.SourceRelationType = sourceDocumentQueryNew.SourceRelationType;
                auditCaseGroup.insert();
            }
        }

        if ((sourceDocumentQueryOld.PolicyType == policyType.RecId) && (!sourceDocumentQueryOld.queryRootTableCount()) && (sourceDocumentQueryOld.SourceRelationType))
        {
            // If the root table changed with the update, find the old source document grouping record
            // and delete it (if one exists).
            auditCaseGroup = AuditPolicyCaseGroup::findBySource(sourceDocumentQueryOld.SourceRelationType,  true);

            if (auditCaseGroup.RecId)
            {
                auditCaseGroup.delete();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>