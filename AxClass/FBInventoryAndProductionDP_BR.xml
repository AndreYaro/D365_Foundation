<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBInventoryAndProductionDP_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBInventoryAndProductionDP_BR</c> class is the Report Data Provider class for the
/// FBInventoryAndProduction_BR SSRS report.
/// </summary>
[SRSReportParameterAttribute(classStr(FBHeaderContract_BR))]
public class FBInventoryAndProductionDP_BR extends SRSReportDataProviderPreProcessTempDB
{
    TmpFBInventoryAndProduction_BR tmpFBInventoryAndProduction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInitialBalance</Name>
				<Source><![CDATA[
    private Qty getInitialBalance(FBInventoryCalculator_BR _inventoryCalculator, FBBookingPeriod_BR _bookingPeriod, ItemId _itemId)
    {
        date lastDayBeforePeriod = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::newDateTime(_bookingPeriod.periodFrom(), 0), -1));
        InventTable inventTable = InventTable::find(_itemId);

        _inventoryCalculator.calculateInventoryBalancesForItem(lastDayBeforePeriod, inventTable);

        return _inventoryCalculator.getQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFBInventoryAndProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TmpFBInventoryAndProduction_BR</c> table.
    /// </summary>
    /// <returns>
    /// The <c>TmpFBInventoryAndProduction_BR</c>.
    /// </returns>
    [SRSReportDataSet(tableStr(TmpFBInventoryAndProduction_BR))]
    public TmpFBInventoryAndProduction_BR getTmpFBInventoryAndProduction()
    {
        select tmpFBInventoryAndProduction;
        return tmpFBInventoryAndProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInitialBalance</Name>
				<Source><![CDATA[
    private void insertInitialBalance(QueryRun _iterator, Qty _initialQty)
    {
        tmpFBInventoryAndProduction.clear();

        this.setItemFields(_iterator);

        tmpFBInventoryAndProduction.QuantityInventory = _initialQty;
        tmpFBInventoryAndProduction.TextRelease  = "@SpedFiscalBlockK:InitialBalance";
        tmpFBInventoryAndProduction.IsInitialBalance = NoYes::Yes;

        this.insertTmpFBInventoryAndProduction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpFBInventoryAndProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a register in the table <c>TmpFBInventoryAndProduction_BR</c>.
    /// </summary>
    private void insertTmpFBInventoryAndProduction()
    {
        tmpFBInventoryAndProduction.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        FBHeaderContract_BR contract = this.parmDataContract() as FBHeaderContract_BR;
        FBBookingPeriod_BR bookingPeriod = FBBookingPeriod_BR::find(contract.parmFBBookingPeriodRecId());
        FBInventoryCalculator_BR inventoryCalculator = new FBInventoryCalculator_BR(bookingPeriod.fiscalEstablishment().RecId);

        changeCompany (bookingPeriod.FiscalEstablishmentDataArea)
        {
            Query query = new Query(queryStr(FBInventoryAndProduction_BR));

            QueryBuildRange rangeDate = query.dataSourceTable(tableNum(InventTrans)).addRange(fieldNum(InventTrans, DateFinancial));
            rangeDate.value(SysQuery::range(bookingPeriod.periodFrom(), bookingPeriod.periodTo()));

            QueryBuildRange rangeFiscalEstablishment = query.dataSourceTable(tableNum(FiscalEstablishmentInventSite_BR)).addRange(fieldNum(FiscalEstablishmentInventSite_BR, FiscalEstablishment_BR));
            rangeFiscalEstablishment.value(SysQuery::value(bookingPeriod.fiscalEstablishment().RecId));

            QueryRun iterator = new QueryRun(query);

            while (iterator.next())
            {
                InventTrans inventTrans = iterator.get(tableNum(InventTrans)) as InventTrans;

                if (inventTrans.StatusIssue != StatusIssue::Sold && inventTrans.StatusReceipt != StatusReceipt::Purchased)
                {
                    continue;
                }

                ItemId currentItemId;
                Qty totalQty;

                if (currentItemId != inventTrans.ItemId)
                {
                    totalQty = this.getInitialBalance(inventoryCalculator, bookingPeriod, inventTrans.ItemId);
                    currentItemId = inventTrans.ItemId;

                    this.insertInitialBalance(iterator, totalQty);
                }

                totalQty += inventTrans.Qty;

                this.setInventoryBasicFields(iterator, totalQty);
                this.setInventorySpecificFields(iterator);

                this.insertTmpFBInventoryAndProduction();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentCustFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields related to a customer fiscal document in the table <c>TmpFBInventoryAndProduction_BR</c>.
    /// </summary>
    /// <param name="_iterator">
    /// An iterator pointing to the Fiscal Document with the values to be set.
    /// </param>
    private void setFiscalDocumentCustFields(QueryRun _iterator)
    {
        FiscalDocument_BR fiscalDocument = _iterator.get(tableNum(FiscalDocument_BR), 1) as FiscalDocument_BR;
        FiscalDocumentLine_BR fiscalDocumentLine = _iterator.get(TableNum(FiscalDocumentLine_BR), 1) as FiscalDocumentLine_BR;

        tmpFBInventoryAndProduction.Specie = enum2str(fiscalDocument.Specie);
        tmpFBInventoryAndProduction.FiscalDocumentSeries = fiscalDocument.FiscalDocumentSeries;
        tmpFBInventoryAndProduction.DocumentNumber = fiscalDocument.FiscalDocumentNumber;

        tmpFBInventoryAndProduction.CFOP = fiscalDocumentLine.CFOP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentVendFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields related to a vendor fiscal document in the table <c>TmpFBInventoryAndProduction_BR</c>.
    /// </summary>
    /// <param name="_iterator">
    /// An iterator pointing to the Fiscal Document with the values to be set.
    /// </param>
    private void setFiscalDocumentVendFields(QueryRun _iterator)
    {
        FiscalDocument_BR fiscalDocument = _iterator.get(tableNum(FiscalDocument_BR), 2) as FiscalDocument_BR;
        FiscalDocumentLine_BR fiscalDocumentLine  = _iterator.get(TableNum(FiscalDocumentLine_BR), 2) as FiscalDocumentLine_BR;

        tmpFBInventoryAndProduction.Specie = enum2str(fiscalDocument.Specie);
        tmpFBInventoryAndProduction.FiscalDocumentSeries = fiscalDocument.FiscalDocumentSeries;
        tmpFBInventoryAndProduction.DocumentNumber = fiscalDocument.FiscalDocumentNumber;

        tmpFBInventoryAndProduction.CFOP = fiscalDocumentLine.CFOP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryBasicFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the basic fields in the table <c>TmpFBInventoryAndProduction_BR</c>.
    /// </summary>
    /// <param name="_iterator">
    /// An iterator pointing to the inventory transaction with the values to be set.
    /// </param>
    /// <param name="_totalQty">
    /// The total inventory quantity after the current transaction.
    /// </param>
    private void setInventoryBasicFields(QueryRun _iterator, Qty _totalQty)
    {
        InventTrans inventTrans = _iterator.get(tableNum(InventTrans)) as InventTrans;
        InventTransOrigin inventTransOrigin = _iterator.get(tableNum(inventTransOrigin), 3) as InventTransOrigin;

        tmpFBInventoryAndProduction.clear();

        this.setItemFields(_iterator);

        tmpFBInventoryAndProduction.DocumentDate = inventTrans.DateFinancial;
        tmpFBInventoryAndProduction.Direction = inventTrans.Qty > 0 ? "@GLS61074" : "@GLS61075";
        tmpFBInventoryAndProduction.DocumentNumber = inventTransOrigin.ReferenceId;
        tmpFBInventoryAndProduction.IsInitialBalance = NoYes::No;
        tmpFBInventoryAndProduction.TextRelease = enum2Str(inventTransOrigin.ReferenceCategory);

        if (inventTransOrigin.ReferenceCategory == InventTransType::Production)
        {
            InventLocation inventLocation = _iterator.get(tableNum(inventLocation)) as InventLocation;

            switch (inventLocation.InventCountingGroup_BR)
            {
                case InventCountingGroup_BR::OwnStock:
                case InventCountingGroup_BR::OtherStock:
                    tmpFBInventoryAndProduction.Quantity = abs(inventTrans.Qty);
                    tmpFBInventoryAndProduction.QuantityOther = 0;
                    break;

                case InventCountingGroup_BR::OwnStockInOtherPower:
                    tmpFBInventoryAndProduction.Quantity  = 0;
                    tmpFBInventoryAndProduction.QuantityOther = abs(inventTrans.Qty);
                    break;
            }
            tmpFBInventoryAndProduction.QuantityDiversity = 0;
        }
        else
        {
            tmpFBInventoryAndProduction.Quantity = 0;
            tmpFBInventoryAndProduction.QuantityOther = 0;
            tmpFBInventoryAndProduction.QuantityDiversity = abs(inventTrans.Qty);
        }

        tmpFBInventoryAndProduction.LineAmount = abs(inventTrans.CostAmountPosted);
        tmpFBInventoryAndProduction.QuantityInventory = _totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventorySpecificFields</Name>
				<Source><![CDATA[
    private void setInventorySpecificFields(QueryRun _iterator)
    {
        InventTransOrigin inventTransOrigin = _iterator.get(tableNum(inventTransOrigin), 3) as inventTransOrigin;

        switch (inventTransOrigin.ReferenceCategory)
        {
            case InventTransType::Purch:
                this.setFiscalDocumentVendFields(_iterator);
                break;

            case InventTransType::Sales:
                FiscalDocument_BR fiscalDocument = _iterator.get(tableNum(FiscalDocument_BR)) as FiscalDocument_BR;
                RetailFiscalReceipt_BR fiscalReceipt = _iterator.get(tableNum(RetailFiscalReceipt_BR)) as RetailFiscalReceipt_BR;

                if (fiscalDocument)
                {
                    this.setFiscalDocumentCustFields(_iterator);
                }
                else if (fiscalReceipt)
                {
                    this.setRetailFiscalReceiptFields(_iterator);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemFields</Name>
				<Source><![CDATA[
    private void setItemFields(QueryRun _iterator)
    {
        InventTable inventTable = _iterator.get(tableNum(InventTable)) as InventTable;
        EcoResProductTranslation ecoResProductTranslation = _iterator.get(tableNum(EcoResProductTranslation)) as EcoResProductTranslation;

        tmpFBInventoryAndProduction.ItemId = inventTable.ItemId;
        tmpFBInventoryAndProduction.NameAlias = ecoResProductTranslation.Name;
        tmpFBInventoryAndProduction.UnitId = inventTable.inventTableModuleInvent().UnitId;
        tmpFBInventoryAndProduction.TaxFiscalClassification = inventTable.TaxFiscalClassification_BR;
        tmpFBInventoryAndProduction.InventProductType = inventTable.InventProductType_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailFiscalReceiptFields</Name>
				<Source><![CDATA[
    private void setRetailFiscalReceiptFields(QueryRun _iterator)
    {
        RetailFiscalReceipt_BR fiscalReceipt = _iterator.get(tableNum(RetailFiscalReceipt_BR)) as RetailFiscalReceipt_BR;
        RetailFiscalReceiptLine_BR fiscalReceiptLine = _iterator.get(tableNum(RetailFiscalReceiptLine_BR)) as RetailFiscalReceiptLine_BR;

        tmpFBInventoryAndProduction.Specie = enum2str(FiscalDocumentSpecie_BR::CF);
        tmpFBInventoryAndProduction.DocumentNumber = int2str(fiscalReceipt.FiscalReceiptNumber);
        tmpFBInventoryAndProduction.TextRelease = "@SYS4110534";

        tmpFBInventoryAndProduction.CFOP = fiscalReceiptLine.CFOP;

        tmpFBInventoryAndProduction.FiscalPrinterSerialNumber = fiscalReceipt.FiscalPrinterSerialNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>