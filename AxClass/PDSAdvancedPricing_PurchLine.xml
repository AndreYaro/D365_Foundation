<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSAdvancedPricing_PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PDSAdvancedPricing_PurchLine</c> computes prices using potency pricing calculation expressions for purchase order lines.
/// </summary>
public class PDSAdvancedPricing_PurchLine extends PDSAdvancedPricing
{
    PurchLine               purchLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPriceDiscParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscParameters</c> class.
    /// </summary>
    /// <returns>An instance of the <c>PriceDiscParameters</c> class.</returns>
    protected PriceDiscParameters createPriceDiscParameters()
    {
        return PriceDiscParameters::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculationId</Name>
				<Source><![CDATA[
    protected PDSCalculationId calculationId()
    {
        PriceDiscParameters parameters = this.createPriceDiscParameters();
        SalesPurchLine salesPurchLine = purchLine;
        parameters.initFromSalesPurchLineInterface(salesPurchLine.salesPurchLineInterface(), InventDim::find(purchLine.InventDimId));

        PriceDisc priceDisc = PriceDisc::newFromPriceDiscParameters(parameters);

        priceDisc.findPrice(purchLine.priceGroupId());
        return priceDisc.parmPDSCalculationId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModule</Name>
				<Source><![CDATA[
        protected InventTableModule inventTableModule()
    {
        return InventTableModule::find(this.itemId(), ModuleInventPurchSales::Purch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
        protected InventTransId inventTransId()
    {
        return purchLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
        protected ItemId itemId()
    {
        return purchLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
        public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
        protected Qty qty()
    {
        InventTransIdSum        inventTransIdSum;
        Qty                     qty;

        inventTransIdSum = InventTransIdSum::newTransOriginId(InventTrans::findTransId(purchLine.InventTransId).InventTransOrigin);
        qty = inventTransIdSum.registered();
        if (!qty)
        {
            qty = inventTransIdSum.received();
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitPrice</Name>
				<Source><![CDATA[
        protected PriceCur unitPrice()
    {
        return purchLine.PurchPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the adjusted prices on the related <c>PurchLine</c>.
    /// </summary>
    public void updatePurchLineAmount()
    {
        PDSAdvancedPriceInfo    advancedPriceInfo;

        ttsBegin;

        advancedPriceInfo = purchLine.pdsAdvancedPriceInfo(true);
        advancedPriceInfo.CalculatedUnitPrice = this.calc();
        if (purchLine.PurchQty)
        {
            advancedPriceInfo.CalculatedLineAmount = advancedPriceInfo.price2LineAmount(purchLine.PurchQty);
        }
        advancedPriceInfo.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PDSAdvancedPricing_PurchLine construct()
    {
        return new PDSAdvancedPricing_PurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PDSAdvancedPricing</c> for a purchase line.
    /// </summary>
    /// <param name="_purchLine">
    /// The <c>PurchLine</c> for which to calculate a price.
    /// </param>
    /// <returns>
    /// A <c>PDSAdvancedPricing</c> to compute the calculated adjusted price for <paramref name="_purchLine"/>.
    /// </returns>
    public static PDSAdvancedPricing_PurchLine newPurchLine(PurchLine _purchLine)
    {
        PDSAdvancedPricing_PurchLine    advPricing;

        advPricing = PDSAdvancedPricing_PurchLine::construct();
        advPricing.parmPurchLine(_purchLine);
        advPricing.parmPDSCalculationTable(PDSCalculationTable::find(_purchLine.PDSCalculationId));

        return advPricing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>PDSAdvancedPricing</c> for a purchase parm line.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The <c>PurchParmLine</c> for which to calculate a price.
    /// </param>
    /// <returns>
    /// A <c>PDSAdvancedPricing</c> to compute the calculated adjusted price for <paramref name="_purchParmLine"/>.
    /// </returns>
    public static PDSAdvancedPricing_PurchLine newPurchParmLine(PurchParmLine _purchParmLine)
    {
        PDSAdvancedPricing_PurchLine    advPricing;

        advPricing = PDSAdvancedPricing_PurchLine::construct();
        advPricing.parmPurchLine(_purchParmLine.purchLine());
        advPricing.parmPDSCalculationTable(PDSCalculationTable::find(_purchParmLine.purchLine().PDSCalculationId));

        return advPricing;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>