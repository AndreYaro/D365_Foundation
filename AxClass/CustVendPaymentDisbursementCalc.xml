<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymentDisbursementCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustVendPaymDisbursementCalc</c> class is used to create the customer or vendor specific Open transactions.
/// This class uses the <c>CustVendInvoiceJour</c> , <c>CustVendPaymentDisbursement</c>
/// tableMaps and <c>PurchTotals</c> class to create the <c>CustVendTransOpen</c> records.
/// </summary>
class CustVendPaymentDisbursementCalc
{
    CustVendPaymentDisbursement custVendPaymentDisbursement;
    VendPaymentDisbursement     vendPaymentDisbursement;
    CustVendInvoiceJour         custVendInvoiceJour;
    VendInvoiceInfoTable        vendInvoiceInfoTable;

    AmountCur                   paymentAmountCur;
    AmountCur                   invoiceTaxAmount;
    AmountCur                   invoiceAmount;
    CashDiscAmount              cashDiscAmount;
    CashDiscCode                cashDiscCode;
    TransDate                   invoiceDate;
    DueDate                     dueDate;
    DiscDate                    cashDiscDate;
    InvoiceId                   invoiceId;
    PaymTermId                  paymTermId;
    PaymDayId                   paymDayId;
    CurrencyCode                currencyCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCustVendTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the vendor or customer specific Open transactions based on the specified percentage allocation.
    /// </summary>
    /// <param name="custVendTrans">
    /// The <c>CustVendTrans</c> tableMap for which the Open transactions are created.
    /// </param>
    /// <param name="exchRate">
    /// The <c>exchRate</c> field to be used in amount conversion.
    /// </param>
    public void createCustVendTransaction(CustVendTrans custVendTrans, ExchRate exchRate)
    {
        VendTransCashDisc   vendTransCashDisc;
        CustVendTransOpen   custVendTransOpen    = custVendTrans.transOpen();
        AmountCur           amountCurRemain;
        AmountCur           baseAmountCashDisc;
        AmountMST           remainAmountMST;
        CashDisc            cashDisc;
        boolean             firstTransOpen = true;
        AmountCur           distributedTaxAmount;
        AmountCur           discountAmount;

        CustVendPaymentDisbursement newcustVendPaymentDisbursement = custVendPaymentDisbursement.data();

        amountCurRemain     = CurrencyExchangeHelper::amount(invoiceAmount * newcustVendPaymentDisbursement.factor(), currencyCode);
        remainAmountMST     = CurrencyExchangeHelper::mstAmount(amountCurRemain, currencyCode, invoiceDate, UnknownNoYes::Unknown, exchRate);
        paymentAmountCur    = amountCurRemain;
        discountAmount      = cashDiscAmount;

        // this will never happened
        if (!custVendInvoiceJour)
        {
            error("@SYS25904");
            return;
        }

        ttsbegin;

        // creates the CustVendTrans record if it is not previously exist.
        if (! custVendTrans.RecId)
        {
            custVendTrans.insert();
        }

        // finding the cash discount buffer.
        if (custVendTrans.CashDiscCode)
        {
            cashDisc = CashDisc::find(custVendTrans.CashDiscCode);
        }

        custVendTransOpen.RefRecId      = custVendTrans.RecId;
        custVendTransOpen.AccountNum    = custVendTrans.AccountNum;
        custVendTransOpen.TransDate     = custVendTrans.TransDate;

        while select newcustVendPaymentDisbursement
        where newcustVendPaymentDisbursement.ExtRecId == custVendInvoiceJour.RecId
        {
            if (amountCurRemain || firstTransOpen)
            {
                custVendTransOpen.ThirdPartyBankAccountId = newcustVendPaymentDisbursement.VendBankAccountId;

                custVendTransOpen.AmountCur         = CurrencyExchangeHelper::amount(newcustVendPaymentDisbursement.DueAmount * newcustVendPaymentDisbursement.factor(), currencyCode);
                custVendTransOpen.PossibleCashDisc  = CurrencyExchangeHelper::amount(newcustVendPaymentDisbursement.DiscAmount * newcustVendPaymentDisbursement.factor(), currencyCode);
                custVendTransOpen.AmountMST         = CurrencyExchangeHelper::mstAmount(custVendTransOpen.AmountCur, currencyCode, invoiceDate, UnknownNoYes::Unknown, exchRate);

                custVendTransOpen.CashDiscDate      = newcustVendPaymentDisbursement.DiscDate;
                custVendTransOpen.DueDate           = newcustVendPaymentDisbursement.DueDate;

                amountCurRemain                    -= custVendTransOpen.AmountCur;
                remainAmountMST                    -= custVendTransOpen.AmountMST;

                distributedTaxAmount                =
                CurrencyExchangeHelper::amount(invoiceTaxAmount * newcustVendPaymentDisbursement.DueAmount / invoiceAmount, currencyCode);

                custVendTransOpen.insert();

                if (cashDisc)
                {
                    switch (custVendTransOpen.TableId)
                    {
                        case tablenum(VendTransOpen) :
                        using (TaxIntegrationTaxJurisdictionParametersContext taxIntegrationTaxJurisdictionParametersContext = TaxIntegrationTaxJurisdictionParametersContext::construct(custVendInvoiceJour.TableId, custVendInvoiceJour.RecId))
                        {
                            baseAmountCashDisc = LedgerJournalCashDiscService::baseAmountCashDisc(ModuleCustVend::Vend,
                                                                                            CustVendTransCashDisc::amountExclTax(custVendTransOpen.AmountCur, distributedTaxAmount),
                                                                                            distributedTaxAmount,
                                                                                            cashDisc.Percent);
                        }

                        // cash discount calculation
                        vendTransCashDisc = vendTransCashDisc.calcCashDisc(custVendTransOpen.company(), currencyCode,
                                                       baseAmountCashDisc,
                                                       dueDate,
                                                       invoiceDate,
                                                       cashDiscCode,
                                                       custVendTransOpen.TableId,
                                                       custVendTransOpen.RecId);

                        discountAmount -= abs(vendTransCashDisc.CashDiscAmount);
                        break;
                    }
                }
            }

            // for first open transaction making dueDate same to CustVendTrans.
            if (firstTransOpen && custVendTrans.DueDate != custVendTransOpen.DueDate)
            {
                custVendTrans.DueDate = custVendTransOpen.DueDate;
                custVendTrans.update();
            }
            firstTransOpen = false;
        }

        // remaining amount is added in the open Transaction order with Amount and DueDate
        if (remainAmountMST)
        {
            select forupdate firstonly custVendTransOpen
                order by AmountMST desc,
                         DueDate desc
                where custVendTransOpen.RefRecId   == custVendTrans.RecId &&
                      custVendTransOpen.AccountNum == custVendTrans.AccountNum;

            if (custVendTransOpen.RecId)
            {
                custVendTransOpen.AmountMST += remainAmountMST;
                custVendTransOpen.update();
            }
        }

        // if discount differences
        if (discountAmount)
        {
            ttsbegin;

            select firstonly custVendTransOpen
                order by AmountMST desc,
                DueDate desc
                where custVendTransOpen.RefRecId   == custVendTrans.RecId &&
                custVendTransOpen.AccountNum == custVendTrans.AccountNum;

            select forupdate firstonly vendTransCashDisc
                order by CashDiscAmount
                where vendTransCashDisc.RefRecId == custVendTransOpen.RecId;

            vendTransCashDisc.CashDiscAmount -= discountAmount;
            vendTransCashDisc.update();

            ttscommit;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the records in the <c>VendPaymentDisbursement</c> table for vendors based on the allocation percentage.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// The recId of <c>CustVendInvoiceJour</c> table for which the <c>VendPaymentDisbursement</c> table records are created.
    /// </param>
    /// <remarks>
    /// This is overridden in the extended class(es). Currently the XML comment is Vend-specific.
    /// </remarks>
    public void createTransaction(CustVendInvoiceJour _custVendInvoiceJour)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables with the <c>CustVendInvoiceJour</c> tableMap.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// The <c>CustVendInvoiceJour</c> tableMap is used to initialize the class variables for creating the Open transactions.
    /// </param>
    public void initFromCustVendInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour)
    {
        invoiceAmount       = _custVendInvoiceJour.InvoiceAmount;
        cashDiscAmount      = _custVendInvoiceJour.CashDisc;
        dueDate             = _custVendInvoiceJour.DueDate;
        cashDiscDate        = _custVendInvoiceJour.CashDiscDate;
        invoiceId           = _custVendInvoiceJour.InvoiceId;
        paymTermId          = _custVendInvoiceJour.Payment;
        paymDayId           = _custVendInvoiceJour.PaymDayId;
        invoiceDate         = _custVendInvoiceJour.InvoiceDate;
        currencyCode        = _custVendInvoiceJour.CurrencyCode;
        cashDiscCode        = _custVendInvoiceJour.CashDiscCode;
        invoiceTaxAmount    = _custVendInvoiceJour.SumTax;
        paymentAmountCur    = invoiceAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustVendPaymentDisbursement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>CustVendPaymentDisbursement</c> tableMap.
    /// </summary>
    /// <param name="_custVendPaymentDisbursement">
    /// The <c>CustVendPaymentDisbursement</c> tableMap initalizes the local tableMap.
    /// </param>
    public void initFromCustVendPaymentDisbursement(CustVendPaymentDisbursement  _custVendPaymentDisbursement)
    {
        custVendPaymentDisbursement = _custVendPaymentDisbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the variables with the <c>PurchTotals</c> class object.
    /// </summary>
    /// <param name="purchTotals">
    /// The <c>PurchTotals</c> class object is used to initialize the class variables for creating the Open transactions.
    /// </param>
    /// <remarks>
    /// This is overridden in the extended class(es). Currently the XML comment is Vend-specific.
    /// </remarks>
    public void initFromPurchTotals(PurchTotals   purchTotals)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>DueAmount</c> and <c>DiscAmount</c> fields of <c>CustVendPaymentDisbursement</c> tableMap.
    /// </summary>
    /// <param name="_custVendPaymentDisbursement">
    /// The <c>CustVendPaymentDisbursement</c> tableMap for which the <c>DueAmount</c> and <c>DiscAmount</c> fields are updated.
    /// </param>
    /// <param name="amountCur">
    /// The <c>AmountCur</c> field for which the <c>DueAmount</c> and <c>DiscAmount</c> fields are updated.
    /// </param>
    protected void remainAmountCur(CustVendPaymentDisbursement _custVendPaymentDisbursement,
                         AmountCur                  amountCur)
    {
        _custVendPaymentDisbursement.selectForUpdate(true);
        _custVendPaymentDisbursement.DueAmount  += amountCur;
        _custVendPaymentDisbursement.DiscAmount = invoiceAmount > 0 ? min(_custVendPaymentDisbursement.DueAmount, _custVendPaymentDisbursement.DiscAmount)
                                                                 : max(_custVendPaymentDisbursement.DueAmount, _custVendPaymentDisbursement.DiscAmount);
        _custVendPaymentDisbursement.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DueDate</c> field.
    /// </summary>
    protected void setDueDate()
    {
        dueDate = dueDate ? dueDate : PaymTerm::advanceDate(paymTermId,invoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the object of the <c>CustVendPaymDisbursementCalc</c> class.
    /// </summary>
    /// <param name="_common">
    /// The <c>Common</c> table buffer for which the <c>CustVendPaymDisbursementCalc</c> class object is created.
    /// </param>
    /// <returns>
    /// The object of the <c>CustVendPaymDisbursementCalc</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The function is used with the wrong argument.
    /// </exception>
    public static CustVendPaymentDisbursementCalc construct(Common _common)
    {
        CustVendPaymentDisbursementCalc   paymDisbursementCalc;

        switch (_common.TableId)
        {
            case tablenum(PurchParmTable):
            case tablenum(VendInvoiceInfoTable):
            case tablenum(VendInvoiceJour):
                paymDisbursementCalc = new VendPaymentDisbursementCalc(_common);

            break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return paymDisbursementCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>