<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsPickingLineCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsPickingLineCancel extends RunBase
{
    RecId               wmsOrderTransRecId;
    WMSOrderId          wmsOrderId;
    InventTransId       inventTransId;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        wmsOrderId,
        wmsOrderTransRecId,
        inventTransId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        DialogRunbase ret;

        ret = this.dialogInternal(_dialog, _forceOnClient);
        ret.addText(strFmt("@SYS112671",inventTransId));
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    public InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsOrderId</Name>
				<Source><![CDATA[
    public WMSOrderId parmWmsOrderId(WMSOrderId _wmsOrderId = wmsOrderId)
    {
        wmsOrderId = _wmsOrderId;
        return wmsOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsOrderTransRecId</Name>
				<Source><![CDATA[
    public RecId parmWmsOrderTransRecId(RecId _wmsOrderTransRecId = wmsOrderTransRecId)
    {
        wmsOrderTransRecId = _wmsOrderTransRecId;
        return wmsOrderTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        WMSOrderTrans   wmsOrderTransCopy;

        try
        {
            ttsbegin;

            select firstonly forupdate wmsOrderTransCopy
                where wmsOrderTransCopy.OrderId     == wmsOrderId    &&
                      wmsOrderTransCopy.RecId       == wmsOrderTransRecId;

            if (!wmsOrderTransCopy.canBeCancelled())
            {
                throw(error("@SYS50574"));
            }

            wmsOrderTransCopy.cancel();

            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version;

        if (packedClass == conNull())
        {
            return false;
        }

        version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSPickingLineCancel construct()
    {
        return new WMSPickingLineCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS54106";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        WMSPickingLineCancel    wmsPickingLineCancel;
        WMSOrderTrans           wmsOrderTransCaller;
        Object                  callerForm;

        if (!args || !args.record())
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        switch (args.record().TableId)
        {
            case (tableNum(WMSOrderTrans)) :

                wmsPickingLineCancel = WMSPickingLineCancel::newWMSPickingLineCancel(args.record());

                if (wmsPickingLineCancel.prompt())
                {
                    wmsPickingLineCancel.runOperation();

                    wmsOrderTransCaller = args.record();
                    if (FormDataUtil::isFormDataSource(wmsOrderTransCaller))
                    {
                        FormDataUtil::getFormDataSource(wmsOrderTransCaller).reread();
                        FormDataUtil::getFormDataSource(wmsOrderTransCaller).refresh();

                        callerForm = args.caller();
                        if (formHasMethod(callerForm,identifierStr(doRefresh)))
                        {
                            callerForm.doRefresh();
                        }
                    }
                }
                break;
            default:
                throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSPickingLineCancel</Name>
				<Source><![CDATA[
    static WMSPickingLineCancel newWMSPickingLineCancel(WMSOrderTrans _wmsOrderTrans)
    {
        WMSPickingLineCancel    wmsPickingLineCancel = WMSPickingLineCancel::construct();

        wmsPickingLineCancel.getLast();
        wmsPickingLineCancel.parmWmsOrderId(_wmsOrderTrans.OrderId);
        wmsPickingLineCancel.parmWmsOrderTransRecId(_wmsOrderTrans.RecId);
        wmsPickingLineCancel.parmInventTransId(_wmsOrderTrans.InventTransId);

        return wmsPickingLineCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>