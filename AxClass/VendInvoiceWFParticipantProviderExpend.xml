<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceWFParticipantProviderExpend</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceWFParticipantProviderExpend extends WorkflowParticipantProvider_Expend
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentType</Name>
				<Source><![CDATA[
    public WorkflowParticipantExpenDocumentType documentType()
    {
        return WorkflowParticipantExpenDocumentType::VendInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resolves the vendor invoice line dimensions to a list of users
    /// </summary>
    /// <param name="_context">
    ///     An instance of the <c>WorkflowContext</c> class
    /// </param>
    /// <param name="_participantTokenName">
    ///     The participant token that is selected for a role-based assignment.
    /// </param>
    /// <returns>
    ///     An instance of the <c>WorkflowUserList</c> class that contains the enabled users from the token
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///     Participant token does not exist
    /// </exception>
    public WorkflowUserList resolve(WorkflowContext _context, WorkflowParticipantToken _participantTokenName)
    {
        if (!_participantTokenName)
        {
            throw error("@SYS105453");
        }

        WorkflowParticipantExpenToken workflowParticipantExpenToken = WorkflowParticipantExpenToken::findName(this.documentType(), _participantTokenName);

        if (!workflowParticipantExpenToken)
        {
            throw error(strFmt("@SYS313865", _participantTokenName));
        }

        VendInvoiceInfoTable vendInvoiceInfoTable = this.getVendInvoiceInfoTableFromContext(_context);

        WorkflowUserList userList = WorkflowUserList::construct();
        
        this.resolveUsers(userList, _context, workflowParticipantExpenToken, vendInvoiceInfoTable);

        if (userList.getCount() == 0)
        {
            str resolveErrors = this.failedToFindUsersErrorMessage(_context, workflowParticipantExpenToken, vendInvoiceInfoTable);

            str errorText = strFmt("@SYS313866", _participantTokenName);

            if (resolveErrors != '')
            {
                errorText = strFmt('%1. %2', errorText, resolveErrors);
            }

            throw error(errorText);
        }

        return userList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>failedToFindUsersErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the failed to resolve users error message.
    /// </summary>
    /// <param name = "_context">The workflow context.</param>
    /// <param name = "_workflowParticipantExpenToken">The workflow participent token.</param>
    /// <param name = "_vendInvoiceInfoTable">The <c>VendInvoiceInfoTable</c> header record.</param>
    /// <returns>The error message when users are not found.</returns>
    protected str failedToFindUsersErrorMessage(WorkflowContext _context, WorkflowParticipantExpenToken _workflowParticipantExpenToken, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        str requiredDimensions  = '';

        if (this.useDefaultResolveUsers() && this.doesContextHaveExpectedTable(_context))
        {
            WorkflowParticipantExpenTokenLine workflowParticipantExpenTokenLine =
                WorkflowParticipantExpenTokenLine::findTokenLine(_workflowParticipantExpenToken.RecId, _vendInvoiceInfoTable.companyInfo().RecId);

            Query q = this.buildVendInvoiceInfoLineQuery(_context, _vendInvoiceInfoTable);
            q.firstOnly1();

            QueryBuildDataSource qbds = SysQuery::findOrCreateDataSource(q, tableNum(VendInvoiceInfoLine_Project));
            qbds.joinMode(JoinMode::ExistsJoin);
            
            container dimensionsToCheck;

            if (this.doesQueryReturnValue(q, tableNum(VendInvoiceInfoLine)))
            {
                dimensionsToCheck = this.getDimensionAttributeLocalizedNamesFromSet(workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet);
            }

            qbds.joinMode(JoinMode::NoExistsJoin);

            if (this.doesQueryReturnValue(q, tableNum(VendInvoiceInfoLine)))
            {
                container localDimensionsToCheck = this.getDimensionAttributeLocalizedNamesFromSet(workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet);

                dimensionsToCheck = (dimensionsToCheck != conNull() ? conUnion(dimensionsToCheck, localDimensionsToCheck) : localDimensionsToCheck);
            }

            if (dimensionsToCheck != conNull())
            {
                requiredDimensions = conPeek(dimensionsToCheck, 1);

                for (int i = 2; i <= conLen(dimensionsToCheck); i++)
                {
                    requiredDimensions = strFmt('%1, %2', requiredDimensions, conPeek(dimensionsToCheck, i));
                }

                requiredDimensions = strFmt("@AccountsPayable:VendInvoiceWFParticipantProviderExpend_LineDimError", requiredDimensions);
            }
        }

        return requiredDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesQueryReturnValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the query will return a value.
    /// </summary>
    /// <param name = "_q">The query to run.</param>
    /// <param name = "_table">The table to check for return value.</param>
    /// <returns>true if the query will return a valie for the table; otherwise, false.</returns>
    private boolean doesQueryReturnValue(Query _q, TableId _table)
    {
        QueryRun qr = new QueryRun(_q);

        qr.next();

        return qr.get(_table).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeLocalizedNamesFromSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized dimension names from <c>DimensionAttributeSet</c> that are enabled
    /// for the workflow.
    /// </summary>
    /// <param name = "_DASRecId">The <c>DimensionAttributeSet</c> record ID for the dimension set.</param>
    /// <returns>A container of the localized names.</returns>
    private container getDimensionAttributeLocalizedNamesFromSet(RefRecId _DASRecId)
    {
        container dimNames;
        DimensionAttribute DA;
        DimensionAttributeSetItem DASI;

        while select DA
            order by Name asc
            exists join DASI
                where DASI.DimensionAttribute == DA.RecId
                    && DASI.DimensionAttributeSet == _DASRecId
                    && DASI.EnumerationValue == NoYes::Yes
        {
            if (dimNames == conNull())
            {
                dimNames = [DA.localizedName()];
            }
            else
            {
                dimNames += DA.localizedName();
            }
        }

        return dimNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDefaultResolveUsers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the workflow user list should be resolved by the default functionality.
    /// </summary>
    /// <returns>true if the user list is to be resolved by the default functionality; otherwise, false.</returns>
    protected boolean useDefaultResolveUsers()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveUsers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the workflow user list from the document lines.
    /// </summary>
    /// <param name = "_userList">The workflow user list to populate</param>
    /// <param name = "_context">The workflow's context.</param>
    /// <param name = "_workflowParticipantExpenToken">The workflow participant token record.</param>
    /// <param name = "_vendInvoiceInfoTable">The <c>VendInvoiceInfoTable</c> record to process.</param>
    protected void resolveUsers(WorkflowUserList _userList, WorkflowContext _context, WorkflowParticipantExpenToken _workflowParticipantExpenToken, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        if (this.useDefaultResolveUsers() && this.doesContextHaveExpectedTable(_context))
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            VendInvoiceInfoLine_Project vendInvoiceInfoLine_Project;
            RefRecId dimensionAttributeSetRecId;
            MarkupTrans markupTrans;

            SourceDocumentProcessorFacade::submitSourceDocumentLinesForHeader(_vendInvoiceInfoTable, SourceDocumentLineAccountingStatus::FullyDistributed);

            WorkflowParticipantExpenTokenLine workflowParticipantExpenTokenLine =
                WorkflowParticipantExpenTokenLine::findTokenLine(_workflowParticipantExpenToken.RecId, _vendInvoiceInfoTable.companyInfo().RecId);

            QueryRun qr = new QueryRun(this.buildVendInvoiceInfoLineQuery(_context, _vendInvoiceInfoTable));

            while (qr.next())
            {
                if (qr.changed(tableNum(VendInvoiceInfoLine)))
                {
                    vendInvoiceInfoLine = qr.get(tableNum(VendInvoiceInfoLine)) as VendInvoiceInfoLine;
                }

                if (qr.changed(tableNum(VendInvoiceInfoLine_Project)))
                {
                    vendInvoiceInfoLine_Project = qr.get(tableNum(VendInvoiceInfoLine_Project)) as VendInvoiceInfoLine_Project;
                }

                if (workflowParticipantExpenTokenLine)
                {
                    if (vendInvoiceInfoLine_Project && vendInvoiceInfoLine_Project.ProjId)
                    {
                        this.resolveProject(vendInvoiceInfoLine_Project.ProjId, workflowParticipantExpenTokenLine, _userList);

                        dimensionAttributeSetRecId = workflowParticipantExpenTokenLine.ProjectDimensionAttributeSet;
                    }
                    else
                    {
                        dimensionAttributeSetRecId = workflowParticipantExpenTokenLine.OrganizationDimensionAttributeSet;
                    }

                    if (dimensionAttributeSetRecId)
                    {
                        if (!vendInvoiceInfoLine_Project)
                        {
                            this.resolveDimensionsFromInvoiceLine(_userList, vendInvoiceInfoLine, dimensionAttributeSetRecId);
                        }
                        
                        this.resolveDimensions(_userList, vendInvoiceInfoLine.SourceDocumentLine, dimensionAttributeSetRecId);

                        while select SourceDocumentLine from markupTrans
                            where markupTrans.TransTableId == vendInvoiceInfoLine.TableId
                                && markupTrans.TransRecId == vendInvoiceInfoLine.RecId
                        {
                            this.resolveDimensions(_userList, markupTrans.SourceDocumentLine, dimensionAttributeSetRecId);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveDimensionsFromInvoiceLine</Name>
				<Source><![CDATA[
    protected void resolveDimensionsFromInvoiceLine(
        WorkflowUserList    _userList,
        VendInvoiceInfoLine _vendInvoiceInfoLine,
        RecId               _dimensionAttributeSetRecId)
    {
        DimensionAttributeValue             dimensionAttributeValue;
        DimensionAttributeValueSetItemView  dimensionAttributeValueSetItemView;
        DimensionAttributeSetItem           dimensionAttributeSetItem;
        
        while select Owner from dimensionAttributeValue
            where dimensionAttributeValue.Owner != 0
                exists join RecId from dimensionAttributeSetItem
                    where dimensionAttributeSetItem.DimensionAttribute      == dimensionAttributeValue.DimensionAttribute
                        && dimensionAttributeSetItem.DimensionAttributeSet  == _dimensionAttributeSetRecId
                        && dimensionAttributeSetItem.EnumerationValue       == NoYes::Yes
                exists join dimensionAttributeValueSetItemView 
                    where dimensionAttributeValueSetItemView.DimensionAttribute             == dimensionAttributeSetItem.DimensionAttribute
                        && dimensionAttributeValueSetItemView.DimensionAttributeValueSet    == _vendInvoiceInfoLine.DefaultDimension
                        && dimensionAttributeValueSetItemView.DimensionAttributeValue       == dimensionAttributeValue.RecId
        {
            _userList.add(DirPersonUserEx::worker2UserId(dimensionAttributeValue.Owner));
        }

        DimensionAttrValueLedgerOverride dimensionAttrValueLedgerOverride;

        while select Owner from dimensionAttrValueLedgerOverride
            where dimensionAttrValueLedgerOverride.Owner    != 0 
                && dimensionAttrValueLedgerOverride.Ledger  == Ledger::current()
                exists join RecId, DimensionAttribute from dimensionAttributeValue
                    where dimensionAttributeValue.RecId == dimensionAttrValueLedgerOverride.DimensionAttributeValue
                exists join RecId from dimensionAttributeSetItem
                    where dimensionAttributeSetItem.DimensionAttribute      == dimensionAttributeValue.DimensionAttribute
                        && dimensionAttributeSetItem.DimensionAttributeSet  == _dimensionAttributeSetRecId
                        && dimensionAttributeSetItem.EnumerationValue       == NoYes::Yes
                exists join dimensionAttributeValueSetItemView
                    where dimensionAttributeValueSetItemView.DimensionAttribute             == dimensionAttributeSetItem.DimensionAttribute
                        && dimensionAttributeValueSetItemView.DimensionAttributeValueSet    == _vendInvoiceInfoLine.DefaultDimension
                        && dimensionAttributeValueSetItemView.DimensionAttributeValue       == dimensionAttributeValue.RecId
        {
            _userList.add(DirPersonUserEx::worker2UserId(dimensionAttrValueLedgerOverride.Owner));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVendInvoiceInfoLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for <c>VendInvoiceInfoLine</c> records.
    /// </summary>
    /// <param name = "_context">The workflow context.</param>
    /// <param name = "_vendInvoiceInfoTable">The <c>VendInvoiceInfoTable</c> header record.</param>
    /// <returns>The query for getting <c>VendInvoiceInfoLine</c> records.</returns>
    private Query buildVendInvoiceInfoLineQuery(WorkflowContext _context, VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        Query q = new Query();

        QueryBuildDataSource qbdsVIIL = q.addDataSource(tableNum(VendInvoiceInfoLine));
        qbdsVIIL.addRange(fieldNum(VendInvoiceInfoLine, TableRefId)).value(queryValue(_vendInvoiceInfoTable.TableRefId));
        qbdsVIIL.addRange(fieldNum(VendInvoiceInfoLine, ParmId)).value(queryValue(_vendInvoiceInfoTable.ParmId));

        if (_context.parmTableId() == tableNum(VendInvoiceInfoLine))
        {
            qbdsVIIL.addRange(fieldNum(VendInvoiceInfoLine, RecId)).value(queryValue(_context.parmRecId()));
        }

        QueryBuildDataSource qbdsVIILP = qbdsVIIL.addDataSource(tableNum(VendInvoiceInfoLine_Project));
        qbdsVIILP.addLink(fieldNum(VendInvoiceInfoLine, RecId), fieldNum(VendInvoiceInfoLine_Project, VendInvoiceInfoLineRefRecId));
        qbdsVIILP.joinMode(JoinMode::OuterJoin);
        qbdsVIILP.addSelectionField(fieldNum(VendInvoiceInfoLine_Project, ProjId));

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceInfoTableFromContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendInvoiceInfoTable</c> record from the workflow context.
    /// </summary>
    /// <param name = "_context">The workflow context.</param>
    /// <returns>A <c>VendInvoiceInfoTable</c> record.</returns>
    private VendInvoiceInfoTable getVendInvoiceInfoTableFromContext(WorkflowContext _context)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_context.parmTableId() == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_context.parmRecId());
        }
        else if (_context.parmTableId() == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoTable = VendInvoiceInfoLine::findRecId(_context.parmRecId()).vendInvoiceInfoTable();
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesContextHaveExpectedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the <c>WorkFlowContext</c> has the expected tables.
    /// </summary>
    /// <param name = "_context">The workflow context.</param>
    /// <returns>true if the expected tables are found; otherwise, false.</returns>
    private boolean doesContextHaveExpectedTable(WorkflowContext _context)
    {
        return _context.parmTableId() == tableNum(VendInvoiceInfoTable) || _context.parmTableId() == tableNum(VendInvoiceInfoLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendInvoiceWFParticipantProviderExpend construct()
    {
        return new VendInvoiceWFParticipantProviderExpend();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>