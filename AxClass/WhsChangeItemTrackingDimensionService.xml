<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsChangeItemTrackingDimensionService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSChangeItemTrackingDimensionService</c> class provides the stateless service operation for changing the
/// tracking dimension and reservation hierarchy set on an item that potentially already has transactions and inventory.
/// </summary>
class WhsChangeItemTrackingDimensionService extends WhsChangeItemHierarchyService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeItemTrackingDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the tracking dimension and reservation hierarchy of all selected items in the query.
    /// </summary>
    /// <param name="_changeItemTrackingDimensionDataContract">
    /// An instance of <c>WHSChangeItemTrackingDimensionDataContract</c> class.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error is thrown when <c>InventTrans</c> records are created for an item by an external process
    /// while being converted to a new reservation hierarchy.
    /// </exception>
    public void changeItemTrackingDimension(WHSChangeItemTrackingDimensionDataContract _changeItemTrackingDimensionDataContract)
    {
        EcoResTrackingDimensionGroupName    newTrackingDimensionName = _changeItemTrackingDimensionDataContract.parmNewTrackingDimensionName();
        EcoResTrackingDimensionGroup        newTrackingDimension = EcoResTrackingDimensionGroup::findByDimensionGroupName(newTrackingDimensionName);

        WHSReservationHierarchyName         newHierarchyName = _changeItemTrackingDimensionDataContract.parmNewHierarchyName();
        WHSReservationHierarchy             newReservationHierarchy = WHSReservationHierarchy::findByName(newHierarchyName);

        // Check given tracking dimension exists
        if (!newTrackingDimension.RecId)
        {
            error("@SCM:InvalidTrackingDimensionGroupError");
            return;
        }

        // Check given reservation hierarchy exists
        if (!newReservationHierarchy.RecId)
        {
            error("@WAX4814");
            return;
        }

        Counter  itemsSelected = 0;
        Counter  itemsConverted = 0;
        boolean  noChangesNeeded = false; // Set to true if changes were not needed for an item because the dimensions and hierarchy were the same
        QueryRun queryRun = new QueryRun(_changeItemTrackingDimensionDataContract.getQuery());

        // Loop over every item found by the given query
        while (queryRun.next())
        {
            InventTable item;

            try
            {
                ttsbegin;

                item = queryRun.get(tableNum(InventTable));
                ++itemsSelected;

                EcoResTrackingDimensionGroupItem curTrackingDimensionItem = EcoResTrackingDimensionGroupItem::findByItem(item.DataAreaId, item.ItemId, true);
                WHSReservationHierarchyItem curReservationHierarchyItem   = WHSReservationHierarchyItem::findByItem(item.DataAreaId, item.ItemId, true);

                // Check that the item has a tracking dimension assigned
                if (!curTrackingDimensionItem.RecId)
                {
                    throw error(strFmt("@SCM:MissingTrackingDimensionsOnItem", item.ItemId));
                }

                // Skip items that already have the selected tracking dimension and the reservation hierarchy
                if (curTrackingDimensionItem.TrackingDimensionGroup     != newTrackingDimension.RecId 
                    || curReservationHierarchyItem.ReservationHierarchy != newReservationHierarchy.RecId)
                {
                    // Get the last transaction modified date time
                    ModifiedDateTime lastItemTransactionDateTime = this.selectLastItemTransactionDateTime(item.ItemId);

                    // Only proceed if the reservation hierarchy can be temporarily removed
                    if (this.validateItem(item, 0))
                    {
                        // Temporarily remove the original reservation hierarchy
                        curReservationHierarchyItem.delete();

                        // Clear WHSInventReserve for the current item
                        this.clearWhsInventReserveForItem(item);

                        // Check that the new tracking dimension group can be applied and if so, update it
                        InventTableInventoryDimensionGroups::updateDimensionGroupsForItem(
                            item.DataAreaId, item.itemId,
                            EcoResStorageDimensionGroupItem::findByItem(item.DataAreaId, item.itemId).StorageDimensionGroup,
                            newTrackingDimension.RecId,
                            item.Product);

                        // Check that the new reservation hierarchy can be applied to the item
                        if (this.validateItem(item, newReservationHierarchy.RecId))
                        {
                            // Apply the new reservation hierarchy
                            this.createHierarchyRecordForItem(item, newReservationHierarchy.RecId);

                            // Adjust WHSInventReserve records to reflect the new hierarchy
                            this.adjustInventoryForHierarchy(item, 0);

                            if (this.checkNoTransactionChanges(item.ItemId, lastItemTransactionDateTime))
                            {
                                ++itemsConverted;
                            }
                            else
                            {
                                throw error(strFmt("@WAX4850", item.ItemId));
                            }
                        }
                        else
                        {
                            throw error(strFmt("@SCM:ReservationHierarchyForItemCouldNotBeChangedError", item.ItemId));
                        }
                    }
                    else
                    {
                        throw error(strFmt("@SCM:ReservationHierarchyForItemCouldNotBeChangedError", item.ItemId));
                    }
                }
                else
                {
                    ++itemsConverted;
                    noChangesNeeded = true;
                }

                ttscommit;
            }
            catch (Exception::UpdateConflict)
            {
                throw Exception::UpdateConflict;
            }
            catch (Exception::DuplicateKeyException)
            {
                throw Exception::DuplicateKeyException;
            }
            catch
            {
                warning(strFmt("@SCM:ItemNotConvertedToNewTrackingDimensionWarning", item.ItemId));
            }
        }

        if (noChangesNeeded)
        {
            info("@SCM:NoChangesNeededForSomeItems");
        }

        info(strFmt("@SCM:TotalNumberOfItemsWithChangedTrackingDimension", itemsConverted, itemsSelected));
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWhsInventReserveForItem</Name>
				<Source><![CDATA[
    private void clearWhsInventReserveForItem(InventTable _item)
    {
        WHSInventReserve whsInventReserve;
        delete_from whsInventReserve where whsInventReserve.ItemId == _item.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHierarchyRecordForItem</Name>
				<Source><![CDATA[
    private void createHierarchyRecordForItem(InventTable _item, WHSReservationHierarchyRecId _newReservationHierarchyRecId)
    {
        WHSReservationHierarchyItem reservationHierarchyItem;
        reservationHierarchyItem.ItemDataAreaId = _item.dataAreaId;
        reservationHierarchyItem.ItemId = _item.ItemId;
        reservationHierarchyItem.ReservationHierarchy = _newReservationHierarchyRecId;
        reservationHierarchyItem.write();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>