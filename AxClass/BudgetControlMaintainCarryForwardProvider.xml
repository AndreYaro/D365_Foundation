<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlMaintainCarryForwardProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlMaintainCarryForwardProvider</c> class is a budget control data
/// maintenance scenario that updates the carry-forward status on related documents based
/// on the maintain carry-forward status option.
/// </summary>
public class BudgetControlMaintainCarryForwardProvider extends BudgetControlDataMaintenanceProvider
{
    ClassName providerClassName;
    LedgerRecId primaryLedger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds related documents not previously considered to be carry-forward.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The <c>BudgetControlDataMaintenance</c> process group record Id.
    /// </param>
    public void findDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        this.preFindDocuments(_budgetControlDataMaintenanceRecId);

        if (BudgetControlConfiguration::findActiveByPrimaryLedger(primaryLedger).MaintainCarryForwardAmounts)
        {
            this.findDocumentTrackingSequencesMissingCF(_budgetControlDataMaintenanceRecId);
            this.findRelievingDocumentsMissingCF(_budgetControlDataMaintenanceRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preFindDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes existing found documents prior to finding new documents.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record Id.
    /// </param>
    public void preFindDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        super(_budgetControlDataMaintenanceRecId);

        BudgetControlDataMaintenanceProvider::removeExistingFoundDocuments(_budgetControlDataMaintenanceRecId, providerClassName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reprocesses the budget control summary balance.
    /// </summary>
    /// <param name="_budgetControlDataMaintenanceRecId">
    /// The budget control data maintenance record Id.
    /// </param>
    public void postProcessDocuments(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetControlDataMaintenanceProvider::reprocessSummaryBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the carry-forward status on related documents based on the maintain carry-forward status option.
    /// </summary>
    /// <param name="_dataMaintenanceTrackingRecId">
    /// A <c>BudgetControlDataMaintenanceTracking</c> record Id.
    /// </param>
    /// <returns>
    /// The <c>BudgetCheckResult</c> value for the processed budget register entry.
    /// </returns>
    public BudgetCheckResult processDocument(RecId _dataMaintenanceTrackingRecId)
    {
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking;

        if (BudgetControlConfiguration::findActiveByPrimaryLedger(Ledger::current()).MaintainCarryforwardAmounts)
        {
            select firstOnly BudgetControlDataMaintenance, TrackingDocument from budgetControlDataMaintenanceTracking
                where budgetControlDataMaintenanceTracking.RecId == _dataMaintenanceTrackingRecId;

            this.processDocTrackingSequencesMissingCF(budgetControlDataMaintenanceTracking.TrackingDocument, budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance);

            // To ensure that the carry-forward flag is set correctly through the entire document chain, the processRelievingDocumentsMissingCF method is called four times.
            // Four is the anticipated maximum length of the document lifecycle chain. If the chain is longer, the provider can be run additional times to find additional documents.
            this.processRelievingDocumentsMissingCF(budgetControlDataMaintenanceTracking.TrackingDocument, budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance);
            this.processRelievingDocumentsMissingCF(budgetControlDataMaintenanceTracking.TrackingDocument, budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance);
            this.processRelievingDocumentsMissingCF(budgetControlDataMaintenanceTracking.TrackingDocument, budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance);
            this.processRelievingDocumentsMissingCF(budgetControlDataMaintenanceTracking.TrackingDocument, budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance);

            return BudgetCheckResult::Passed;
        }

        // If the MaintainCarryforwardAmounts feature is not turned on, return NoCheck because
        // no documents will be updated.
        return BudgetCheckResult::NoCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDescription</Name>
				<Source><![CDATA[
    public Description255 getDescription()
    {
        return "@Budget:MaintainCarryforwardUpdateStatus";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public Description255 getName()
    {
        return "@Budget:MaintainCarryforwardFindRelatedDocuments";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDocumentTrackingSequencesMissingCF</Name>
				<Source><![CDATA[
    private void findDocumentTrackingSequencesMissingCF(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        Description255 dataMaintenanceProviderName = this.getName();
        Description255 dataMaintenanceDescription = this.getDescription();
        utcdatetime dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();
        BudgetSourceTrackingStatus budgetSourceTrackingStatus;

        BudgetControlDataMaintenance budgetControlDataMaintenance;
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking, existingBudgetControlDataMaintenanceTracking;
        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking, previousBudgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail, previousBudgetSourceTrackingDetail;

        budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);
        budgetSourceTrackingStatus = budgetControlDataMaintenance.DocumentSourceTrackingStatus;

        ttsBegin;

        // Find budget sources with a tracking record marked as carry-forward and tracking records
        // with higher sequence numbers that did not maintain the carry-forward flag.
        while select RecId, minOf(BudgetControlSourceIntegrator)
            from budgetSource
                group by budgetSource.RecId
            join minOf(TrackingNumber) from budgetSourceTracking
                where budgetSourceTracking.BudgetSource == budgetSource.RecId
                    && budgetSourceTracking.Status == budgetSourceTrackingStatus
                    && budgetSourceTracking.TrackingDate >= budgetControlDataMaintenance.DocumentFromDate
                    && budgetSourceTracking.TrackingDate <= budgetControlDataMaintenance.DocumentToDate
            join sum(AccountingCurrencyAmount) from budgetSourceTrackingDetail
                where budgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTracking.RecId
                    && budgetSourceTrackingDetail.PrimaryLedger == primaryLedger
                    && budgetSourceTrackingDetail.IsCarryForward == NoYes::No
            exists join previousBudgetSourceTracking
                where previousBudgetSourceTracking.BudgetSource == budgetSource.RecId
                    && previousBudgetSourceTracking.SequenceNumber <= budgetSourceTracking.SequenceNumber
                    && previousBudgetSourceTracking.TrackingDate <= budgetSourceTracking.TrackingDate
            exists join previousBudgetSourceTrackingDetail
                where previousBudgetSourceTrackingDetail.BudgetSourceTracking == previousBudgetSourceTracking.RecId
                    && previousBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes
            notexists join existingBudgetControlDataMaintenanceTracking
                where existingBudgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                    && existingBudgetControlDataMaintenanceTracking.DataMaintenanceProvider == providerClassName
                    && existingBudgetControlDataMaintenanceTracking.TrackingDocument == budgetSource.RecId
        {
            budgetControlDataMaintenanceTracking.clear();

            budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance = _budgetControlDataMaintenanceRecId;
            budgetControlDataMaintenanceTracking.DataMaintenanceProvider = providerClassName;
            budgetControlDataMaintenanceTracking.DataMaintenanceProviderName = dataMaintenanceProviderName;
            budgetControlDataMaintenanceTracking.DataMaintenanceProviderDescription = strFmt(
                "@Budget:MaintainCarryforwardDocumentDetail",
                enum2str(budgetSource.BudgetControlSourceIntegrator),
                budgetSourceTracking.TrackingNumber,
                budgetSourceTrackingDetail.AccountingCurrencyAmount);
            budgetControlDataMaintenanceTracking.DataMaintenanceProviderDetectionDateTime = dataMaintenanceDetectionDateTime;
            budgetControlDataMaintenanceTracking.TrackingDocument = budgetSource.RecId;
            budgetControlDataMaintenanceTracking.TrackingStatus = budgetSourceTrackingStatus;
            budgetControlDataMaintenanceTracking.TrackingSourceIntegrator = budgetSource.budgetControlSourceIntegrator;
            budgetControlDataMaintenanceTracking.TrackingNumber = budgetSourceTracking.TrackingNumber;

            budgetControlDataMaintenanceTracking.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelievingDocumentsMissingCF</Name>
				<Source><![CDATA[
    private void findRelievingDocumentsMissingCF(BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        Description255 dataMaintenanceProviderName = this.getName();
        Description255 dataMaintenanceDescription = this.getDescription();
        utcdatetime dataMaintenanceDetectionDateTime = DateTimeUtil::utcNow();
        BudgetSourceTrackingStatus budgetSourceTrackingStatus;

        BudgetControlDataMaintenance budgetControlDataMaintenance;
        BudgetControlDataMaintenanceTracking budgetControlDataMaintenanceTracking, existingBudgetControlDataMaintenanceTracking;
        BudgetSource relievingBudgetSource;
        BudgetSourceTracking relievingBudgetSourceTracking, relievedBudgetSourceTracking, previousBudgetSourceTracking;
        BudgetSourceTrackingDetail relievingBudgetSourceTrackingDetail, relievedBudgetSourceTrackingDetail, previousBudgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);
        budgetSourceTrackingStatus = budgetControlDataMaintenance.DocumentSourceTrackingStatus;

        ttsBegin;

        // Find relieving budget sources with tracking records that did not maintain the
        // carry-forward status from the relieved budget source tracking record.
        while select RecId, minOf(BudgetControlSourceIntegrator)
            from relievingBudgetSource
                group by relievingBudgetSource.RecId
            join minOf(TrackingNumber) from relievingBudgetSourceTracking
                where relievingBudgetSourceTracking.BudgetSource == relievingBudgetSource.RecId
                    && relievingBudgetSourceTracking.Status == budgetSourceTrackingStatus
                    && relievingBudgetSourceTracking.TrackingDate >= budgetControlDataMaintenance.DocumentFromDate
                    && relievingBudgetSourceTracking.TrackingDate <= budgetControlDataMaintenance.DocumentToDate
            join sum(AccountingCurrencyAmount) from relievingBudgetSourceTrackingDetail
                where relievingBudgetSourceTrackingDetail.BudgetSourceTracking == relievingBudgetSourceTracking.RecId
                    && relievingBudgetSourceTrackingDetail.IsCarryForward == NoYes::No
                    && relievingBudgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            join RecId from budgetSourceTrackingRelievingDetail
                where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == relievingBudgetSourceTracking.RecId
            join RecId from relievedBudgetSourceTrackingDetail
                where relievedBudgetSourceTrackingDetail.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
            join RecId from relievedBudgetSourceTracking
                where relievedBudgetSourceTracking.RecId == relievedBudgetSourceTrackingDetail.BudgetSourceTracking
            exists join previousBudgetSourceTracking
                where previousBudgetSourceTracking.BudgetSource == relievedBudgetSourceTracking.BudgetSource
                    && previousBudgetSourceTracking.SequenceNumber <= relievedBudgetSourceTracking.SequenceNumber
                    && previousBudgetSourceTracking.TrackingDate <= relievedBudgetSourceTracking.TrackingDate
            exists join previousBudgetSourceTrackingDetail
                where previousBudgetSourceTrackingDetail.BudgetSourceTracking == previousBudgetSourceTracking.RecId
                    && previousBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes
            notexists join existingBudgetControlDataMaintenanceTracking
                where existingBudgetControlDataMaintenanceTracking.BudgetControlDataMaintenance == _budgetControlDataMaintenanceRecId
                    && existingBudgetControlDataMaintenanceTracking.DataMaintenanceProvider == providerClassName
                    && existingBudgetControlDataMaintenanceTracking.TrackingDocument == relievingBudgetSource.RecId
        {
            budgetControlDataMaintenanceTracking.clear();

            budgetControlDataMaintenanceTracking.BudgetControlDataMaintenance = _budgetControlDataMaintenanceRecId;
            budgetControlDataMaintenanceTracking.DataMaintenanceProvider = providerClassName;
            budgetControlDataMaintenanceTracking.DataMaintenanceProviderName = dataMaintenanceProviderName;
            budgetControlDataMaintenanceTracking.DataMaintenanceProviderDescription = strFmt(
                "@Budget:MaintainCarryforwardDocumentDetail",
                enum2str(relievingBudgetSource.BudgetControlSourceIntegrator),
                relievingBudgetSourceTracking.TrackingNumber,
                relievingBudgetSourceTrackingDetail.AccountingCurrencyAmount);
            budgetControlDataMaintenanceTracking.DataMaintenanceProviderDetectionDateTime = dataMaintenanceDetectionDateTime;
            budgetControlDataMaintenanceTracking.TrackingDocument = relievingBudgetSource.RecId;
            budgetControlDataMaintenanceTracking.TrackingStatus = budgetSourceTrackingStatus;
            budgetControlDataMaintenanceTracking.TrackingSourceIntegrator = relievingBudgetSource.budgetControlSourceIntegrator;
            budgetControlDataMaintenanceTracking.TrackingNumber = relievingBudgetSourceTracking.TrackingNumber;

            budgetControlDataMaintenanceTracking.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapseRelievingDetailRecords</Name>
				<Source><![CDATA[
    private void collapseRelievingDetailRecords(
        RecId _trackingDetailRecIdToCollapse1,
        RecId _trackingDetailRecIdToCollapse2)
    {
        BudgetSourceTrackingRelievingDetail relievingDetailToCollapse, relievingDetailToRemove, pairedRelievingDetail;

        ttsBegin;

        while select forUpdate AccountingCurrencyAmount from relievingDetailToCollapse
            where relievingDetailToCollapse.RelievedBudgetSourceTrackingDetail == _trackingDetailRecIdToCollapse1
            join pairedRelievingDetail
                where pairedRelievingDetail.RelievedBudgetSourceTrackingDetail == _trackingDetailRecIdToCollapse2
                    && pairedRelievingDetail.RelievingBudgetSourceTracking == relievingDetailToCollapse.RelievingBudgetSourceTracking
                    && pairedRelievingDetail.RelievingBudgetSourceLedgerDimension == relievingDetailToCollapse.RelievingBudgetSourceLedgerDimension
                    && pairedRelievingDetail.IsReturnOfBudgetFunds == relievingDetailToCollapse.IsReturnOfBudgetFunds
        {
            // Combine the amounts into the first relieving detail record.
            relievingDetailToCollapse.AccountingCurrencyAmount += pairedRelievingDetail.AccountingCurrencyAmount;
            relievingDetailToCollapse.update();

            // Delete the other relieving detail record.
            select forUpdate firstOnly RecId from relievingDetailToRemove
                where relievingDetailToRemove.RecId == pairedRelievingDetail.RecId;

            relievingDetailToRemove.delete();
        }

        update_recordSet relievingDetailToCollapse
            setting RelievedBudgetSourceTrackingDetail = _trackingDetailRecIdToCollapse1
                where relievingDetailToCollapse.RelievedBudgetSourceTrackingDetail == _trackingDetailRecIdToCollapse2;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDocTrackingSequencesMissingCF</Name>
				<Source><![CDATA[
    private void processDocTrackingSequencesMissingCF(BudgetSourceRecId _budgetSourceRecId, BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetSourceTrackingStatus budgetSourceTrackingStatus;

        BudgetSource budgetSource;
        BudgetSourceTracking budgetSourceTracking, previousBudgetSourceTracking;
        BudgetSourceTrackingDetail budgetSourceTrackingDetail, previousBudgetSourceTrackingDetail, pairedBudgetSourceTrackingDetail, removedBudgetSourceTrackingDetail;
        BudgetControlDataMaintenance budgetControlDataMaintenance;

        budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);
        budgetSourceTrackingStatus = budgetControlDataMaintenance.DocumentSourceTrackingStatus;

        ttsBegin;

        // Combine BudgetSourceTrackingDetail pairs with mismatched IsCarryForward flags.
        while select forUpdate AccountingCurrencyAmount from budgetSourceTrackingDetail
                where budgetSourceTrackingDetail.IsCarryForward == NoYes::Yes
                    && budgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            join AccountingCurrencyAmount from pairedBudgetSourceTrackingDetail
                where pairedBudgetSourceTrackingDetail.BudgetSourceTracking == budgetSourceTrackingDetail.BudgetSourceTracking
                    && pairedBudgetSourceTrackingDetail.BudgetSourceLedgerDimension == budgetSourceTrackingDetail.BudgetSourceLedgerDimension
                    && pairedBudgetSourceTrackingDetail.IsReturnOfBudgetFunds == budgetSourceTrackingDetail.IsReturnOfBudgetFunds
                    && pairedBudgetSourceTrackingDetail.PrimaryLedger == budgetSourceTrackingDetail.PrimaryLedger
                    && pairedBudgetSourceTrackingDetail.IsCarryForward == NoYes::No
            exists join budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
                    && budgetSourceTracking.Status == budgetSourceTrackingStatus
                    && budgetSourceTracking.TrackingDate >= budgetControlDataMaintenance.DocumentFromDate
                    && budgetSourceTracking.TrackingDate <= budgetControlDataMaintenance.DocumentToDate
            exists join budgetSource
                where budgetSource.RecId == budgetSourceTracking.BudgetSource
                    && budgetSource.RecId == _budgetSourceRecId
            exists join previousBudgetSourceTracking
                where previousBudgetSourceTracking.BudgetSource == budgetSource.RecId
                    && previousBudgetSourceTracking.SequenceNumber <= budgetSourceTracking.SequenceNumber
                    && previousBudgetSourceTracking.TrackingDate <= budgetSourceTracking.TrackingDate
            exists join previousBudgetSourceTrackingDetail
                where previousBudgetSourceTrackingDetail.BudgetSourceTracking == previousBudgetSourceTracking.RecId
                    && previousBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes
        {
            // Combine the amounts into the first detail record.
            budgetSourceTrackingDetail.AccountingCurrencyAmount += pairedBudgetSourceTrackingDetail.AccountingCurrencyAmount;
            budgetSourceTrackingDetail.update();

            this.collapseRelievingDetailRecords(budgetSourceTrackingDetail.RecId, pairedBudgetSourceTrackingDetail.RecId);

            // Delete the deprecated detail record.
            select forUpdate firstOnly RecId from removedBudgetSourceTrackingDetail
                where removedBudgetSourceTrackingDetail.RecId == pairedBudgetSourceTrackingDetail.RecId;

            removedBudgetSourceTrackingDetail.delete();
        }

        // Update the carry-forward flag on budget source tracking records that did not maintain the flag
        // correctly from tracking records with smaller sequence numbers that have been marked as carry-forward.
        update_recordSet budgetSourceTrackingDetail
            setting IsCarryForward = NoYes::Yes
                where budgetSourceTrackingDetail.PrimaryLedger == primaryLedger
                    && budgetSourceTrackingDetail.IsCarryForward == NoYes::No
            join RecId from budgetSourceTracking
                where budgetSourceTracking.RecId == budgetSourceTrackingDetail.BudgetSourceTracking
                    && budgetSourceTracking.Status == budgetSourceTrackingStatus
                    && budgetSourceTracking.TrackingDate >= budgetControlDataMaintenance.DocumentFromDate
                    && budgetSourceTracking.TrackingDate <= budgetControlDataMaintenance.DocumentToDate
            join RecId from budgetSource
                where budgetSource.RecId == budgetSourceTracking.BudgetSource
                    && budgetSource.RecId == _budgetSourceRecId
            join RecId from previousBudgetSourceTracking
                where previousBudgetSourceTracking.BudgetSource == budgetSource.RecId
                    && previousBudgetSourceTracking.SequenceNumber <= budgetSourceTracking.SequenceNumber
                    && previousBudgetSourceTracking.TrackingDate <= budgetSourceTracking.TrackingDate
            join RecId from previousBudgetSourceTrackingDetail
                where previousBudgetSourceTrackingDetail.BudgetSourceTracking == previousBudgetSourceTracking.RecId
                    && previousBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRelievingDocumentsMissingCF</Name>
				<Source><![CDATA[
    private void processRelievingDocumentsMissingCF(BudgetSourceRecId _budgetSourceRecId, BudgetControlDataMaintenanceRecId _budgetControlDataMaintenanceRecId)
    {
        BudgetSourceTrackingStatus budgetSourceTrackingStatus;

        BudgetControlDataMaintenance budgetControlDataMaintenance;
        BudgetSource relievingBudgetSource;
        BudgetSourceTracking relievingBudgetSourceTracking, relievedBudgetSourceTracking, previousBudgetSourceTracking;
        BudgetSourceTrackingDetail relievingBudgetSourceTrackingDetail, relievedBudgetSourceTrackingDetail, previousBudgetSourceTrackingDetail;
        BudgetSourceTrackingRelievingDetail budgetSourceTrackingRelievingDetail;

        BudgetSourceTrackingDetail pairedBudgetSourceTrackingDetail, removedBudgetSourceTrackingDetail;

        budgetControlDataMaintenance = BudgetControlDataMaintenance::find(_budgetControlDataMaintenanceRecId);
        budgetSourceTrackingStatus = budgetControlDataMaintenance.DocumentSourceTrackingStatus;

        ttsBegin;

        // Combine BudgetSourceTrackingDetail pairs with mismatched IsCarryForward flags.
        while select forUpdate AccountingCurrencyAmount from relievingBudgetSourceTrackingDetail
                where relievingBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes
                    && relievingBudgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            join AccountingCurrencyAmount from pairedBudgetSourceTrackingDetail
                where pairedBudgetSourceTrackingDetail.BudgetSourceTracking == relievingBudgetSourceTrackingDetail.BudgetSourceTracking
                    && pairedBudgetSourceTrackingDetail.BudgetSourceLedgerDimension == relievingBudgetSourceTrackingDetail.BudgetSourceLedgerDimension
                    && pairedBudgetSourceTrackingDetail.IsReturnOfBudgetFunds == relievingBudgetSourceTrackingDetail.IsReturnOfBudgetFunds
                    && pairedBudgetSourceTrackingDetail.PrimaryLedger == relievingBudgetSourceTrackingDetail.PrimaryLedger
                    && pairedBudgetSourceTrackingDetail.IsCarryForward == NoYes::No
            exists join relievingBudgetSourceTracking
                where relievingBudgetSourceTracking.RecId == relievingBudgetSourceTrackingDetail.BudgetSourceTracking
                    && relievingBudgetSourceTracking.BudgetSource == _budgetSourceRecId
                    && relievingBudgetSourceTracking.Status == budgetSourceTrackingStatus
                    && relievingBudgetSourceTracking.TrackingDate >= budgetControlDataMaintenance.DocumentFromDate
                    && relievingBudgetSourceTracking.TrackingDate <= budgetControlDataMaintenance.DocumentToDate
            exists join budgetSourceTrackingRelievingDetail
                where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == relievingBudgetSourceTracking.RecId
            exists join relievedBudgetSourceTrackingDetail
                where relievedBudgetSourceTrackingDetail.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
            exists join relievedBudgetSourceTracking
                where relievedBudgetSourceTracking.RecId == relievedBudgetSourceTrackingDetail.BudgetSourceTracking
            exists join previousBudgetSourceTracking
                where previousBudgetSourceTracking.BudgetSource == relievedBudgetSourceTracking.BudgetSource
                    && previousBudgetSourceTracking.SequenceNumber <= relievedBudgetSourceTracking.SequenceNumber
                    && previousBudgetSourceTracking.TrackingDate <= relievedBudgetSourceTracking.TrackingDate
            exists join previousBudgetSourceTrackingDetail
                where previousBudgetSourceTrackingDetail.BudgetSourceTracking == previousBudgetSourceTracking.RecId
                    && previousBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes
        {
            // Combine the amounts into the first detail record.
            relievingBudgetSourceTrackingDetail.AccountingCurrencyAmount += pairedBudgetSourceTrackingDetail.AccountingCurrencyAmount;
            relievingBudgetSourceTrackingDetail.update();

            this.collapseRelievingDetailRecords(relievingBudgetSourceTrackingDetail.RecId, pairedBudgetSourceTrackingDetail.RecId);

            // Delete the deprecated detail record.
            select forUpdate firstOnly RecId from removedBudgetSourceTrackingDetail
                where removedBudgetSourceTrackingDetail.RecId == pairedBudgetSourceTrackingDetail.RecId;

            removedBudgetSourceTrackingDetail.delete();
        }

        // Update the carry-forward flag on relieving budget source tracking detail records that did
        // not maintain the carry-forward status from the relieved budget source tracking detail record.
        update_recordSet relievingBudgetSourceTrackingDetail
            setting IsCarryForward = NoYes::Yes
                where relievingBudgetSourceTrackingDetail.IsCarryForward == NoYes::No
                    && relievingBudgetSourceTrackingDetail.PrimaryLedger == primaryLedger
            join relievingBudgetSourceTracking
                where relievingBudgetSourceTracking.RecId == relievingBudgetSourceTrackingDetail.BudgetSourceTracking
                    && relievingBudgetSourceTracking.Status == budgetSourceTrackingStatus
                    && relievingBudgetSourceTracking.TrackingDate >= budgetControlDataMaintenance.DocumentFromDate
                    && relievingBudgetSourceTracking.TrackingDate <= budgetControlDataMaintenance.DocumentToDate
            join RecId from relievingBudgetSource
                where relievingBudgetSource.RecId == relievingBudgetSourceTracking.BudgetSource
                    && relievingBudgetSource.RecId == _budgetSourceRecId
            join RecId from budgetSourceTrackingRelievingDetail
                where budgetSourceTrackingRelievingDetail.RelievingBudgetSourceTracking == relievingBudgetSourceTracking.RecId
            join RecId from relievedBudgetSourceTrackingDetail
                where relievedBudgetSourceTrackingDetail.RecId == budgetSourceTrackingRelievingDetail.RelievedBudgetSourceTrackingDetail
            join RecId from relievedBudgetSourceTracking
                where relievedBudgetSourceTracking.RecId == relievedBudgetSourceTrackingDetail.BudgetSourceTracking
            join RecId from previousBudgetSourceTracking
                where previousBudgetSourceTracking.BudgetSource == relievedBudgetSourceTracking.BudgetSource
                    && previousBudgetSourceTracking.SequenceNumber <= relievedBudgetSourceTracking.SequenceNumber
                    && previousBudgetSourceTracking.TrackingDate <= relievedBudgetSourceTracking.TrackingDate
            join RecId from previousBudgetSourceTrackingDetail
                where previousBudgetSourceTrackingDetail.BudgetSourceTracking == previousBudgetSourceTracking.RecId
                    && previousBudgetSourceTrackingDetail.IsCarryForward == NoYes::Yes;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        providerClassName = classStr(BudgetControlMaintainCarryForwardProvider);
        primaryLedger = Ledger::current();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>