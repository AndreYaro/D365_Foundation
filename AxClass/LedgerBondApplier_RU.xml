<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerBondApplier_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  Incapsulates applying bonding plan - final split and merge algorytms
/// </summary>
/// <remarks>
///    1. create;
///    2. call add() for each transactions;
///    3. after splitting transactions call getResult() to get all spplitted and merged transactions;
/// </remarks>
class LedgerBondApplier_RU
{
    LedgerBondClient_RU         bondClient;
    LedgerBondServer_RU         bondServer;
    TmpLedgerBondWorkTable_RU   tmpBond;
    CurrencyCode                mstCode;
    CurrencyCode                mstSecondCode;

    LedgerBondId_RU         splitVrefIdFence;
    LedgerBondId_RU         lastVrefIdInprogress;
    RecordSortedList        resultTransList;
    Map                     equalsTransMap;
    boolean                 checkedBeforeBond;
    RecordSortedList        recoveryTransList;
    RecordSortedList        unBondedTransactions;
    Map                     balanceMap;
    boolean                 fatalError;
    LedgerBondAdditionalPropertiesMerger_RU additionalPropertiesMerger;

    private TmpLedgerBondWorkTable_RU tmpBondForEqualProcessing;
    private boolean isTmpBondForEqualProcessingInitialized;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTmpBondForEqualProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes table for correspondence for equality processing.
    /// </summary>
    [Hookable(false)]
    public void initTmpBondForEqualProcessing()
    {
        if (!isTmpBondForEqualProcessingInitialized)
        {
            tmpBondForEqualProcessing.setTmpData(tmpBond);
            isTmpBondForEqualProcessingInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds _trans to an applier. After all transactions are added,
    /// getResult mathod can be called to obtain splitted, bonded amd summarized
    /// transactions
    /// </summary>
    /// <param name="_trans">
    ///    transaction
    /// </param>
    public void add(LedgerBondableTrans_RU _trans)
    {
        this.lastVRefIdInprogress(_trans.parmID());
        this.splitTrans(_trans, _trans.parmDetailSummary());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCheckBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds given transaction with given sign to check its balance
    /// </summary>
    /// <param name="_ledgerTrans">
    ///   transaction to add
    /// </param>
    /// <param name="_sign">
    ///    sign to increment balance
    /// </param>
    /// <remarks>
    ///    Method is used to check that total balance by currency is 0
    /// </remarks>
    protected void addCheckBalance(TmpLedgerBondResultTransaction_RU _ledgerTrans, Sign _sign = 1)
    {
        void addKey(CurrencyCode _currencyCode, Amount _amount)
        {
            Amount old = balanceMap.exists(_currencyCode) ? balanceMap.lookup(_currencyCode) : nullValueBaseType(Types::Real);
            balanceMap.insert(_currencyCode, (_sign * _amount) + old);
        }

        if (! balanceMap)
        {
            balanceMap = new Map(Types::String, Types::Real);
        }

        addKey(_ledgerTrans.TransactionCurrencyCode, _ledgerTrans.TransactionCurrencyAmount);
        addKey(mstCode,                              _ledgerTrans.AccountingCurrencyAmount);
        addKey(mstSecondCode,                        _ledgerTrans.ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEqualBondTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds vref of _bondTransObject to equalsTransMap
    /// </summary>
    /// <param name="_bondTransObject">
    ///  LedgerBondTransObject_RU
    /// </param>
    /// <param name="_detailSummary">
    ///  Summarize transaction or no
    /// </param>
    protected void addEqualBondTransObject(LedgerBondTransObject_RU _bondTransObject,
                                           DetailSummary            _detailSummary)
    {
        container   key = this.getEqualTransKey(_bondTransObject.ledgerTransObject(), _detailSummary, _bondTransObject);
        Set         vrefs;

        if (equalsTransMap.exists(key))
        {
            vrefs = equalsTransMap.lookup(key);
        }
        else
        {
            vrefs = new Set(Types::Integer);
        }
        vrefs.add(_bondTransObject.vrefId());
        equalsTransMap.insert(key, vrefs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bondUnbondedTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Bond transactions which still remainse unbonded
    /// </summary>
    protected void bondUnbondedTransactions()
    {
        boolean                  more;
        TmpLedgerBondResultTransaction_RU trans;
        ;
        if (unBondedTransactions.len())
        {
            bondClient.addNewLogObject();
            for (more = unBondedTransactions.first(trans);
            more;
            more = unBondedTransactions.next(trans))
            {
                if (trans.TransactionCurrencyAmount   ||
                    trans.AccountingCurrencyAmount    ||
                    trans.ReportingCurrencyAmount)
                {
                    bondServer.addTrans(trans.asObject(), trans.BondId);
                }
            }
            bondClient.bondLog2Log();
            bondClient.removeCurrentLogObject();

            for (more = unBondedTransactions.first(trans);
            more;
            more = unBondedTransactions.next(trans))
            {
                if (trans.TransactionCurrencyAmount   ||
                    trans.AccountingCurrencyAmount    ||
                    trans.ReportingCurrencyAmount)
                {
                    this.splitTrans(trans.asObject(), trans.DetailSummary, trans.BondId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndInsertLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Perfoms checking and insertion of given transaction to given list
    /// </summary>
    /// <param name="_ledgerTransList">
    ///    list of <c>TmpLedgerBondResultTransaction_RU</c>
    /// </param>
    /// <param name="_ledgerTrans">
    ///   Transaction to insert
    /// </param>
    /// <param name="_detailSummary">
    ///    Summarization mode
    /// </param>
    /// <param name="_updateIfExists">
    ///   update transaction in the list if it already exists
    /// </param>
    protected void checkAndInsertLedgerTrans(RecordSortedList                  _ledgerTransList,
                                             TmpLedgerBondResultTransaction_RU _ledgerTrans,
                                             DetailSummary                     _detailSummary = DetailSummary::Detail,
                                             boolean                           _updateIfExists = false)
    {
        TmpLedgerBondResultTransaction_RU localLedgerTrans;
        localLedgerTrans.data(_ledgerTrans);

        if (_detailSummary == DetailSummary::Summary                    &&
            _ledgerTrans.BondBatchTrans_RU &&
            _ledgerTransList.find(localLedgerTrans))
        {
            if (localLedgerTrans.TransactionCurrencyAmount ?
                    localLedgerTrans.TransactionCurrencyAmount == -_ledgerTrans.TransactionCurrencyAmount :
                    localLedgerTrans.AccountingCurrencyAmount ?
                        localLedgerTrans.AccountingCurrencyAmount == -_ledgerTrans.AccountingCurrencyAmount :
                        localLedgerTrans.ReportingCurrencyAmount  == -_ledgerTrans.ReportingCurrencyAmount)
            {
                // Detected AccX +10 <-> AccX -10 situation
                // Delete an old obsolete corresponding transaction
                // and do not insert current one
                _ledgerTransList.del(localLedgerTrans);
                #if.logEnabled
                this.log(strFmt("Complimentary transactions on account '%1' skipped",
                                _ledgerTrans.LedgerDimensionId));
                #endif
                return;
            }
        }

        if (! _ledgerTrans.BondBatchTrans_RU)
        {
            this.insTransList(_ledgerTransList, _ledgerTrans);
        }
        else
        {
            _ledgerTransList.ins(_ledgerTrans, _updateIfExists);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforeBond</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Perform check of object state before bond begins
    /// </summary>
    /// <returns>
    ///   true if ok, false on error
    /// </returns>
    protected boolean checkBeforeBond()
    {
        boolean                     more;
        LedgerBondTransList_RU    bondTransList = bondServer.bondTransactions();
        boolean ret = true;
        ;

        checkedBeforeBond = true;

        if (bondServer.fatalErrorState())
            return false;

        bondTransList.parmTransDate(dateNull());
        for (more = bondTransList.first();
        more;
        more = bondTransList.next())
        {
            if (! bondTransList.item().bondedCompletely())
            {
                ret = false;
                break;
            }
        }

        if (! ret && LedgerParameters::find().Correspondence_RU)
        {
            this.showManualBondAction("@GLS102495");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSign</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines sign of given transaction by amounts
    /// </summary>
    /// <param name="_ledgerTrans">
    ///   transaction to determine sign
    /// </param>
    /// <returns>
    ///   Sign of transaction (1 or -1)
    /// </returns>
    protected Sign determineSign(LedgerBondableTrans_RU _ledgerTrans)
    {
        if (_ledgerTrans.parmTransactionCurrencyAmount() +
            _ledgerTrans.parmAccountingCurrencyAmount()  +
            _ledgerTrans.parmReportingCurrencyAmount()   == 0)
            return 1;

        return (_ledgerTrans.parmTransactionCurrencyAmount() ?
                    _ledgerTrans.parmTransactionCurrencyAmount() :
                    _ledgerTrans.parmAccountingCurrencyAmount() ?
                        _ledgerTrans.parmAccountingCurrencyAmount() :
                        _ledgerTrans.parmReportingCurrencyAmount()
               ) > 0 ? 1 : -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fatalErrorState</Name>
				<Source><![CDATA[
    /// <summary>
    ///  True if errors detected
    /// </summary>
    /// <returns>
    ///  True if errors detected
    /// </returns>
    boolean fatalErrorState()
    {
        return fatalError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEqualBondTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns set of bondng object equivalent to given by summarization key
    /// </summary>
    /// <param name="_bondTransObject">
    ///    object to find equivalents
    /// </param>
    /// <param name="_detailSummary">
    ///   summarization mode
    /// </param>
    /// <returns>
    ///  Set of <c>LedgerBondTransObject_RU</c>
    /// </returns>

    protected Set getEqualBondTransObject(LedgerBondTransObject_RU _bondTransObject,
                                          DetailSummary            _detailSummary)
    {
        container key = this.getEqualTransKey(_bondTransObject.ledgerTransObject(), _detailSummary, _bondTransObject);
        Set         equalsVrefs = new Set(Types::Integer);
        ;
        if (equalsTransMap.exists(key))
        {
            equalsVrefs = equalsTransMap.lookup(key);
        }
        return equalsVrefs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEqualTransKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets key to find transactions to summarize
    /// </summary>
    /// <param name="_trans">
    ///    bonding transaction
    /// </param>
    /// <param name="_detailSummary">
    ///   summarization mode
    /// </param>
    /// <param name="_bondTransObject">
    ///   bonding remainders object
    /// </param>
    /// <returns>
    ///   container with key fields values
    /// </returns>
    protected container getEqualTransKey(LedgerBondableTrans_RU _trans, DetailSummary _detailSummary, LedgerBondTransObject_RU _bondTransObject)
    {
        return [
                _trans.parmLedgerDimensionId(),
                _trans.parmTransactionCurrencyCode(),
                _trans.parmAllocationLevel(),
                _trans.parmIsCorrection(),
                _trans.parmPostingType(),
               _trans.parmPaymentReference(),
               (_detailSummary == DetailSummary::Summary ? 0 : _bondTransObject.parmParentVrefId())
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns bonded transactions
    /// </summary>
    /// <returns>
    /// RecordSortedList of TmpLedgerBondResultTransaction_RU
    /// </returns>
    /// <remarks>
    /// Call this method after all transactions in a LedgerVoucherObject are posted
    /// otherwise no transactions will be posted at all
    /// Validate and insert internal buffer into LedgerVoucher transaction list
    /// </remarks>
    public RecordSortedList getResult()
    {
        boolean         ok = ! fatalError;
        boolean         nonFatalError = false;
        TmpLedgerBondResultTransaction_RU     ledgerTrans;
        boolean         more;
        MapIterator     mapIterator;
        this.logResultTransList();
        // Check for secondary difference errors and balance
        if (ok)
        {
            this.postupdateTransList(resultTransList);
            for (more = resultTransList.first(ledgerTrans);
            more;
            more = resultTransList.next(ledgerTrans))
            {
                // Substract resulting transactions from the original transactions balance
                this.addCheckBalance(ledgerTrans, -1);
                if (
                    //! ledgerTrans.BondBatch_RU ||
                    ! ledgerTrans.BondBatchTrans_RU)
                {
                    nonFatalError = true;
                }
            }
            if (nonFatalError && LedgerParameters::find().Correspondence_RU)
            {
                this.showManualBondAction("@GLS102494");
            }
        }

        // Finally check that all transactions was splitted in balance
        if (ok && balanceMap)
        {
            mapIterator = new MapIterator(balanceMap);
            while (mapIterator.more())
            {
                if (mapIterator.value() != 0.0)
                {
                    ok = false;
                    break;
                }
                mapIterator.next();
            }
            if (! ok)
            {
                this.showManualBondAction("@GLS106695");
            }
        }

        if (! ok)
        {
            // Use the recovery list with unbonded transactions
            resultTransList = recoveryTransList;
        }
        // Copy from the result list to a ledgerVoucher transList
        return resultTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates and initializes bonding transaction list
    /// </summary>
    /// <returns>
    ///   List of <c>TmpLedgerBondResultTransaction_RU</c>
    /// </returns>
    protected RecordSortedList initLedgerTransList()
    {
        RecordSortedList    ret;

        ret = new RecordSortedList(tableNum(TmpLedgerBondResultTransaction_RU));
        ret.sortOrder(
            fieldNum(TmpLedgerBondResultTransaction_RU, AccountingDate),
            fieldNum(TmpLedgerBondResultTransaction_RU, LedgerDimensionId),
            fieldNum(TmpLedgerBondResultTransaction_RU, GroupCommonPropertiesID),
            fieldNum(TmpLedgerBondResultTransaction_RU, TransactionCurrencyCode),
            fieldNum(TmpLedgerBondResultTransaction_RU, AllocationLevel),
            fieldNum(TmpLedgerBondResultTransaction_RU, IsCorrection),
            fieldNum(TmpLedgerBondResultTransaction_RU, PostingType),
            fieldNum(TmpLedgerBondResultTransaction_RU, PaymentReference),
            fieldNum(TmpLedgerBondResultTransaction_RU, RecId),
            fieldNum(TmpLedgerBondResultTransaction_RU, BondBatchTrans_RU)
        );

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts given transaction to given list with grouping
    /// </summary>
    /// <param name="_transList">
    ///    transaction list
    /// </param>
    /// <param name="_ledgerTrans">
    ///  transaction
    /// </param>
    protected void insTransList(RecordSortedList    _transList,
                                TmpLedgerBondResultTransaction_RU _ledgerTrans)
    {
        // See LedgerVoucher.postGroup()
        TmpLedgerBondResultTransaction_RU   localLedgerTrans;
        DetailSummary                       detailSummary = _ledgerTrans.DetailSummary;
        localLedgerTrans.data(_ledgerTrans);

        if (detailSummary == DetailSummary::Summary)
        {
            if (_transList.find(localLedgerTrans))
            {
                localLedgerTrans.TransactionCurrencyAmount  += _ledgerTrans.TransactionCurrencyAmount;
                localLedgerTrans.AccountingCurrencyAmount   += _ledgerTrans.AccountingCurrencyAmount;
                localLedgerTrans.ReportingCurrencyAmount    += _ledgerTrans.ReportingCurrencyAmount;
                localLedgerTrans.Quantity                   += _ledgerTrans.Quantity;
                localLedgerTrans.MergeablePropertiesID      = additionalPropertiesMerger.mergeProperties(localLedgerTrans.MergeablePropertiesID,
                                                                                                         _ledgerTrans.MergeablePropertiesID);
            }
            _transList.ins(localLedgerTrans, true);
        }
        else
        {
            _transList.ins(localLedgerTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastVRefIdInprogress</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Last bonding transaction id
    /// </summary>
    /// <param name="_value">
    ///    new value
    /// </param>
    /// <returns>
    ///    current value
    /// </returns>
    protected LedgerBondId_RU lastVRefIdInprogress(LedgerBondId_RU _value = lastVrefIdInprogress)
    {
        lastVrefIdInprogress = _value;
        return lastVrefIdInprogress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>log</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds message to log
    /// </summary>
    /// <param name="_str">
    ///   message
    /// </param>
    /// <remarks>
    ///   to enable log uncomment // #define.logEnabled in the class declaration
    /// </remarks>
    protected void log(str _str)
    {
        info(_str);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logResultTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Outputs result transaction list into log
    /// </summary>
    /// <remarks>
    ///   to enable log uncomment // #define.logEnabled in the class declaration
    /// </remarks>
    protected void logResultTransList()
    {
        #if.logEnabled
        TmpLedgerBondResultTransaction_RU trans;
        boolean more;
        this.log('<');
        for (more = resultTransList.first(trans);
        more;
        more = resultTransList.next(trans))
        {
            this.log(trans.asObject().toString());
    }
        this.log('<');
        #endIf
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTrans</Name>
				<Source><![CDATA[
    private void mergeTrans(RecordSortedList         _ledgerTransList,
                            LedgerBondTransObject_RU _bondTransObject,
                            DetailSummary            _detailSummary)
    {
        LedgerBondTransObject_RU equalTransObject;
        SetEnumerator            equalsEnumerator;
        LedgerBondAmountSide_RU  sideDebitCredit;
        ;
        if (_detailSummary == DetailSummary::Summary ||
            splitVrefIdFence)
        {
            sideDebitCredit = _bondTransObject.vrefId() == tmpBond.DebitBondId ?
                              LedgerBondAmountSide_RU::Debit :
                              LedgerBondAmountSide_RU::Credit;

            equalsEnumerator = this.getEqualBondTransObject(_bondTransObject,_detailSummary).getEnumerator();
            while (equalsEnumerator.moveNext())
            {
                if (equalsEnumerator.current() != _bondTransObject.vrefId())
                {
                    equalTransObject = bondServer.findBondTransObject(equalsEnumerator.current());

                    equalTransObject = this.processEqualTransObject(_bondTransObject,
                                                                    _detailSummary,
                                                                    equalTransObject,
                                                                    sideDebitCredit);
                    if (equalTransObject)
                    {
                        this.checkAndInsertLedgerTrans(_ledgerTransList,
                                                       TmpLedgerBondResultTransaction_RU::newByTransObject(equalTransObject.ledgerTransObject()),
                                                       _detailSummary,
                                                       true);
                        this.logResultTransList();
                        return;
                    }
                }
            }
        }
        // Nothing to merge
        this.checkAndInsertLedgerTrans(_ledgerTransList,
                                       TmpLedgerBondResultTransaction_RU::newByTransObject(_bondTransObject.ledgerTransObject()),
                                       _detailSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new LedgerBondApplier
    /// </summary>
    /// <param name="_bondClient">
    ///    is used to perform bond unbonded transactions
    /// </param>
    /// <param name="_bondServer">
    ///    stores bonding plan
    /// </param>
    /// <param name="_additionalPropertiesMerger">
    ///    provides algorithm of merging properties specific to transaction kind
    /// </param>
    void new(LedgerBondClient_RU _bondClient, LedgerBondServer_RU _bondServer, LedgerBondAdditionalPropertiesMerger_RU _additionalPropertiesMerger=null)
    {
        bondClient = _bondClient;
        bondServer = _bondServer;

        recoveryTransList       = this.initLedgerTransList();
        resultTransList         = this.initLedgerTransList();
        unBondedTransactions    = this.initLedgerTransList();

        mstCode       = CompanyInfoHelper::standardCurrency();
        mstSecondCode = CompanyInfoHelper::secondaryCurrency_RU();

        tmpBond.setTmpData(bondServer.tmpBond());
        additionalPropertiesMerger = _additionalPropertiesMerger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onManualBond</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Event occurs when automatic correspondece can not be done
    /// </summary>
    /// <param name="_warningMessage">
    ///   message to warn user
    /// </param>
    /// <param name="_helpURL">
    ///   URL for Info::add
    /// </param>
    delegate void onManualBond(str _warningMessage, str _helpURL)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postupdateTransList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update corrupted during the merge procedure batchTrans numbers like 1293 &lt;--&gt; 8934
    /// </summary>
    /// <param name="_ledgerTransList">
    ///    List of ledger transactions
    /// </param>
    protected void postupdateTransList(RecordSortedList _ledgerTransList)
    {
        LedgerBondTransObject_RU    bondTransObject;
        LedgerBondTransList_RU      bondTransList = bondServer.bondTransactions();
        boolean                     more;
        TmpLedgerBondResultTransaction_RU localLedgerTrans;
        this.bondUnbondedTransactions();
        bondTransList.parmTransDate(dateNull());
        for (more = bondTransList.first();
        more;
        more = bondTransList.next())
        {
            bondTransObject = bondTransList.item();
            if (! bondTransObject.ledgerTransObject().parmBondBatchTrans_RU())
                continue;

            select firstonly tmpBond
                where tmpBond.DebitBondId  == bondTransObject.vrefId() ||
                      tmpBond.CreditBondId == bondTransObject.vrefId();
            if (bondTransObject.ledgerTransObject().parmBondBatchTrans_RU() != tmpBond.RecId)
            {
                localLedgerTrans.initFromTransObject(bondTransObject.ledgerTransObject());
                if (! _ledgerTransList.find(localLedgerTrans))
                    continue;

                _ledgerTransList.del(localLedgerTrans);
                localLedgerTrans.BondBatchTrans_RU = tmpBond.RecId;
                this.checkAndInsertLedgerTrans(_ledgerTransList, localLedgerTrans, localLedgerTrans.DetailSummary);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEqualTransObject</Name>
				<Source><![CDATA[
    private LedgerBondTransObject_RU processEqualTransObject(LedgerBondTransObject_RU _bondTransObject,
                                                             DetailSummary            _detailSummary,
                                                             LedgerBondTransObject_RU _equalTransObject,
                                                             LedgerBondAmountSide_RU  _sideDebitCredit)
    {
        boolean                     doMerge = false, mergeBondTrans = false;
        TmpLedgerBondWorkTable_RU   equalTransBond;
        LedgerBondTransObject_RU    offsetToEqualTransBond, offsetToTransBond;

        if (_equalTransObject.parmPosted()                                                  &&
            _equalTransObject.vrefId() != _bondTransObject.vrefId()                         &&
            (_detailSummary            == DetailSummary::Summary                            ||
                (_detailSummary           == DetailSummary::Detail                          &&
                 _equalTransObject.hasSameParentWith(_bondTransObject)))              &&
            _equalTransObject.equals(_bondTransObject) )
        {
            if (isTmpBondForEqualProcessingInitialized)
            {
                equalTransBond = tmpBondForEqualProcessing;
            }
            else
            {
                equalTransBond.setTmpData(tmpBond);
            }

            if (_sideDebitCredit == LedgerBondAmountSide_RU::Debit)
            {
                select firstonly forupdate equalTransBond
                    where equalTransBond.DebitBondId   == _equalTransObject.vrefId() &&
                          equalTransBond.RecId      != tmpBond.RecId;
                if (equalTransBond)
                {
                    offsetToEqualTransBond = bondServer.findBondTransObject(equalTransBond.CreditBondId);
                    if (! offsetToEqualTransBond)
                    {
                        return null;
                    }
                    offsetToTransBond = bondServer.findBondTransObject(tmpBond.CreditBondId);
                    if (offsetToEqualTransBond.equals(offsetToTransBond)    &&
                        (
                            _detailSummary == DetailSummary::Summary  ||
                            (_detailSummary == DetailSummary::Detail  &&
                                (
                                    offsetToEqualTransBond.hasSameParentWith(offsetToTransBond) ||
                                    offsetToEqualTransBond.vrefId() == offsetToTransBond.vrefId()
                                )
                            )
                        )
                    )
                    {
                        tmpBond.DebitBondId = _equalTransObject.vrefId();
                        doMerge = true;
                        mergeBondTrans = equalTransBond.CreditBondId == tmpBond.CreditBondId;
                    }
                }
            }
            else // - if _sideDebitCredit != LedgerBondAmountSide_RU::Debit
            {
                select firstonly forupdate equalTransBond
                    where equalTransBond.CreditBondId  == _equalTransObject.vrefId() &&
                          equalTransBond.RecId      != tmpBond.RecId;
                if (equalTransBond)
                {
                    offsetToEqualTransBond = bondServer.findBondTransObject(equalTransBond.DebitBondId);
                    if (! offsetToEqualTransBond)
                    {
                        fatalError = true;
                        return null;
                    }
                    offsetToTransBond = bondServer.findBondTransObject(tmpBond.DebitBondId);
                    if (offsetToEqualTransBond.equals(offsetToTransBond)    &&
                        ((_detailSummary == DetailSummary::Summary)         ||
                         (_detailSummary == DetailSummary::Detail           &&
                          (offsetToTransBond.hasSameParentWith(offsetToEqualTransBond) ||
                           offsetToEqualTransBond.vrefId()        == offsetToTransBond.vrefId()))))
                    {
                        tmpBond.CreditBondId = _equalTransObject.vrefId();
                        doMerge = true;
                        mergeBondTrans = equalTransBond.DebitBondId == tmpBond.DebitBondId;
                    }
                }
            }

            if (doMerge)
            {
                _equalTransObject.mergeBondTransObject(tmpBond.AmountCurDebit,
                                                       tmpBond.AmountMST,
                                                       tmpBond.AmountMSTSecondary,
                                                       _bondTransObject.ledgerTransObject().parmMergeablePropertiesID(),
                                                       additionalPropertiesMerger);
                if (mergeBondTrans)
                {
                    equalTransBond.AmountCurCredit += tmpBond.AmountCurCredit;
                    equalTransBond.AmountCurDebit  += tmpBond.AmountCurDebit;
                    equalTransBond.AmountMST       += tmpBond.AmountMST;
                    equalTransBond.AmountMSTSecondary
                                                   += tmpBond.AmountMSTSecondary;
                    equalTransBond.doUpdate();
                    tmpBond.doDelete();
                }
                else
                {
                    tmpBond.doUpdate();
                }
                #if.logEnabled
                this.log(strFmt("Bond %1 merged with %2",
                                 _bondTransObject.vrefId(),
                                 _equalTransObject.vrefId()));
                #endif

                bondServer.removeBondTransObject(_bondTransObject);
                this.removeEqualsTransObject(_bondTransObject,_detailSummary);
                return _equalTransObject;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeEqualsTransObject</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Removes transaction object which is equal to given
    /// </summary>
    /// <param name="_bondTransObject">
    ///    Bond transaction object
    /// </param>
    /// <param name="_detailSummary">
    ///   Summarization mode
    /// </param>
    protected void removeEqualsTransObject(LedgerBondTransObject_RU _bondTransObject,
                                           DetailSummary            _detailSummary)
    {
        container   key = this.getEqualTransKey(_bondTransObject.ledgerTransObject(), _detailSummary, _bondTransObject);
        Set         vrefs;
        ;
        if (equalsTransMap.exists(key))
        {
            vrefs = equalsTransMap.lookup(key);
            vrefs.remove(_bondTransObject.vrefId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showManualBondAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows warnig messages.
    /// </summary>
    /// <param name="_warningMessage">
    /// Text of warning.
    /// </param>
    /// <param name="_helpURL">
    /// String of url.
    /// </param>
    void showManualBondAction(str _warningMessage = "@GLS102497",
                              str _helpURL = "")
    {
        this.onManualBond(_warningMessage, _helpUrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///   splits given transaction to reflect correcpondence
    /// </summary>
    /// <param name="_ledgerTrans">
    ///   transaction to split
    /// </param>
    /// <param name="_detailSummary">
    ///   summarization mode
    /// </param>
    /// <param name="_lastBondIdInprogress">
    ///    last bonding identifier
    /// </param>
    protected void splitTrans(LedgerBondableTrans_RU _ledgerTrans,
                           DetailSummary             _detailSummary,
                           LedgerBondId_RU           _lastBondIdInprogress = this.lastVRefIdInprogress())
    {
        LedgerBondAmountSide_RU     sourceSideBefore, side;
        int                         sourceSignBefore, sourceSignAfter;
        int                         resSign;

        AmountCur                   amountCur;
        AmountMST                   amountMST;
        AmountMSTSecondary          amountMSTSecond;

        LedgerBondId_RU             vrefId;
        LedgerBondTransObject_RU    bondTransObject;

        void doSplit()
        {
            side    = tmpBond.DebitBondId == _lastBondIdInprogress ?
                          LedgerBondAmountSide_RU::Debit :
                          LedgerBondAmountSide_RU::Credit;

            resSign = sourceSideBefore == side ? sourceSignBefore : -sourceSignBefore;

            amountCur       = resSign * abs(tmpBond.AmountCurDebit);
            amountMST       = resSign * abs(tmpBond.AmountMST);
            amountMSTSecond = resSign * abs(tmpBond.AmountMSTSecondary);

            _ledgerTrans.parmTransactionCurrencyAmount(_ledgerTrans.parmTransactionCurrencyAmount() - amountCur);
            _ledgerTrans.parmAccountingCurrencyAmount( _ledgerTrans.parmAccountingCurrencyAmount()  - amountMST);
            _ledgerTrans.parmReportingCurrencyAmount(  _ledgerTrans.parmReportingCurrencyAmount()   - amountMSTSecond);

            sourceSignAfter = this.determineSign(_ledgerTrans);

            if (sourceSignBefore != sourceSignAfter)
            {
                _ledgerTrans.parmIsCredit(! _ledgerTrans.parmIsCredit());
            }

            bondTransObject = bondServer.findBondTransObject(_lastBondIdInprogress);

            if (_ledgerTrans.parmTransactionCurrencyAmount() ||
                _ledgerTrans.parmAccountingCurrencyAmount()  ||
                _ledgerTrans.parmReportingCurrencyAmount()
                )
            {
                if (! splitVrefIdFence)
                {
                    splitVrefIdFence = bondServer.lastVrefId();
                }
                vrefId = bondServer.lastVrefId() + 1;

                #if.logEnabled
                this.log(strFmt("Bond %1 splitted into %1 and %2", _lastBondIdInprogress, vrefId));
                #endIf

                bondTransObject = bondTransObject.split(vrefId, _ledgerTrans.parmIsCredit(), amountCur, amountMST, amountMSTSecond);
                bondServer.insertBondTransObject(bondTransObject);
                this.addEqualBondTransObject(bondTransObject, _detailSummary);
                if (side == LedgerBondAmountSide_RU::Debit)
                {
                    tmpBond.DebitBondId  = vrefId;
                }
                else
                {
                    tmpBond.CreditBondId = vrefId;
                }
                tmpBond.update();
            }

            bondTransObject.parmPosted(true);
            bondTransObject.ledgerTransObject().parmBondBatchTrans_RU(tmpBond.RecId);
            this.addEqualBondTransObject(bondTransObject, _detailSummary);
            this.mergeTrans(resultTransList, bondTransObject, _detailSummary);
        }
        ;
        fatalError = fatalError || bondServer.fatalErrorState();

        if (! checkedBeforeBond && ! fatalError)
        {
            fatalError = ! this.checkBeforeBond();
            equalsTransMap      = new Map(Types::Container, Types::Class);
        }

        vrefId          = _lastBondIdInprogress;
        bondTransObject = bondServer.findBondTransObject(vrefId);
        fatalError = fatalError || ! bondTransObject;
        if (! fatalError)
        {
            bondTransObject.ledgerTransObject().parmDetailSummary(_detailSummary);
        }

        if (_ledgerTrans.parmLedgerDimensionId() && bondTransObject)
        {
            bondTransObject.ledgerTransObject().parmLedgerDimensionId(_ledgerTrans.parmLedgerDimensionId());
        }

        if (_lastBondIdInprogress == this.lastVRefIdInprogress())
        {
            this.insTransList(recoveryTransList, TmpLedgerBondResultTransaction_RU::newByTransObject(_ledgerTrans));
        }
        this.addCheckBalance(TmpLedgerBondResultTransaction_RU::newByTransObject(_ledgerTrans));
        if (fatalError)
            return;

        _ledgerTrans.calculateInternalValues();
        sourceSideBefore = _ledgerTrans.parmIsCredit() ? LedgerBondAmountSide_RU::Credit : LedgerBondAmountSide_RU::Debit;
        sourceSignBefore = this.determineSign(_ledgerTrans);

        if (sourceSignBefore == 1)
        {
            while select tmpBond index CreditBondIdx
                where tmpBond.CreditBondId  == _lastBondIdInprogress
            {
                doSplit();
            }
            while select tmpBond index DebitBondIdx
                where  tmpBond.DebitBondId == _lastBondIdInprogress
            {
                doSplit();
            }
        }
        else
        {
            while select tmpBond index DebitBondIdx
                where tmpBond.DebitBondId  == _lastBondIdInprogress
            {
                doSplit();
            }
            while select tmpBond index CreditBondIdx
                where  tmpBond.CreditBondId == _lastBondIdInprogress
            {
                doSplit();
            }
        }

        //if (_ledgerTrans.AmountCur || _ledgerTrans.AmountMST || _ledgerTrans.AmountMSTSecond)
        if (_ledgerTrans.parmTransactionCurrencyAmount() ||
            _ledgerTrans.parmAccountingCurrencyAmount()  ||
            _ledgerTrans.parmReportingCurrencyAmount())
        {
            // if no ... was inserted?
            if (_lastBondIdInprogress == this.lastVRefIdInprogress())
            {
                this.insTransList(unBondedTransactions, TmpLedgerBondResultTransaction_RU::newByTransObject(_ledgerTrans));
            }
            else
            {
                this.checkAndInsertLedgerTrans(resultTransList, TmpLedgerBondResultTransaction_RU::newByTransObject(_ledgerTrans), _ledgerTrans.parmDetailSummary());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>