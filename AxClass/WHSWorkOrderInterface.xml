<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkOrderInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkOrderInterface</c> class provides an abstraction for work orders, such as <c>WHSWorkTable</c> records.
/// </summary>
public abstract class WHSWorkOrderInterface
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    internal abstract WHSWorkId parmWorkId(WHSWorkId _workId = '')
    {    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    internal abstract WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetLicensePlateId</Name>
				<Source><![CDATA[
    internal abstract WHSLicensePlateId parmTargetLicensePlateId(WHSLicensePlateId _targetLicensePlateId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    internal abstract InventSiteId parmInventSiteId(InventSiteId _inventSiteId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityOrderId</Name>
				<Source><![CDATA[
    internal abstract InventQualityOrderId parmInventQualityOrderId(InventQualityOrderId _inventQualityOrderId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    internal abstract InventLocationId parmInventLocationId(InventLocationId _inventLocationId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTransType</Name>
				<Source><![CDATA[
    internal abstract WHSWorkTransType parmWorkTransType(WHSWorkTransType _workTransType = WHSWorkTransType::None)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    internal abstract WHSWaveId parmWaveId(WHSWaveId _waveId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    internal abstract WHSShipmentId parmShipmentId(WHSShipmentId _shipmentId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    internal abstract WHSLoadId parmLoadId(WHSLoadId _loadId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    internal abstract WHSOrderNum parmOrderNum(WHSOrderNum _orderNum = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImmediateReplenishmentUnitId</Name>
				<Source><![CDATA[
    internal abstract UnitOfMeasureSymbol parmImmediateReplenishmentUnitId(UnitOfMeasureSymbol _immediateReplenishmentUnitId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    internal abstract WHSContainerId parmContainerId(WHSContainerId _containerId = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseWorkForWaveReplen</Name>
				<Source><![CDATA[
    internal abstract WHSUseWorkForWaveReplen parmUseWorkForWaveReplen(WHSUseWorkForWaveReplen _useWorkForWaveReplen = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelReplenWhenDemandCanceled</Name>
				<Source><![CDATA[
    internal abstract WHSCancelReplenWhenDemandCanceled parmCancelReplenWhenDemandCanceled(WHSCancelReplenWhenDemandCanceled _cancelReplenWhenDemandCanceled = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransTxt</Name>
				<Source><![CDATA[
    internal abstract TransTxt parmTransTxt(TransTxt _transTxt = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreatedBy</Name>
				<Source><![CDATA[
    internal abstract UserId parmWorkCreatedBy(UserId _workCreatedBy = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionCode</Name>
				<Source><![CDATA[
    internal abstract WHSDispositionCode parmDispositionCode(WHSDispositionCode _dispositionCode = '')
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignNewWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a new work id on the underlying record.
    /// </summary>
    internal abstract void assignNewWorkId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the class based on the buffer.
    /// </summary>
    /// <param name = "_buffer">A record buffer.</param>
    public abstract void initializeFromBuffer(Common _buffer)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the class based on the work id.
    /// </summary>
    /// <param name = "_workId">The work id of the buffer to be initalized.</param>
    /// <param name = "_forUpdate">Boolean which controls whether the underlying record is selected for update.</param>
    private void initializeFromWorkId(WHSWorkId _workId, boolean _forUpdate = false)
    {
        this.initializeFromBuffer(this.findRecord(_workId, _forUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the work order.
    /// </summary>
    [Hookable(false)]
    internal void insert()
    {
        this.buffer().insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the work order.
    /// </summary>
    [Hookable(false)]
    internal void update()
    {
        this.buffer().update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a record with the work Id.
    /// </summary>
    /// <param name = "_workId">The work Id.</param>
    /// <param name = "_forUpdate">A boolean determining if the record should be selected for update.</param>
    /// <returns>A record with the work Id.</returns>
    internal abstract Common findRecord(WHSWorkId _workId, boolean _forUpdate = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a record of the correct type.
    /// </summary>
    /// <param name = "_workId">The work Id.</param>
    /// <returns>A record of the correct type.</returns>
    internal abstract boolean exist(WHSWorkId _workId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFieldsOnWorkOrderOnTmpWorkLineChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears fields on the work order when a <c>WHSTmpWorkLine</c> record is changed.
    /// </summary>
    /// <param name = "_tmpWorkLine">The changed <c>WHSTmpWorkLine</c> record.</param>
    [Hookable(false)]
    internal void clearFieldsOnWorkOrderOnTmpWorkLineChange(WHSTmpWorkLine _tmpWorkLine)
    {
        this.initializeFromWorkId(_tmpWorkLine.WorkId, true);

        this.parmWaveId(_tmpWorkLine.WaveId == this.parmWaveId() ? this.parmWaveId() : '');
        this.parmLoadId(_tmpWorkLine.LoadId == this.parmLoadId() ? this.parmLoadId() : '');
        this.parmShipmentId(_tmpWorkLine.ShipmentId == this.parmShipmentId() ? this.parmShipmentId() : '');
        this.parmOrderNum(_tmpWorkLine.OrderNum == this.parmOrderNum() ? this.parmOrderNum() : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWorkOrderInterface</c> instance based on the provided buffer.
    /// </summary>
    /// <param name = "_buffer">
    /// A <buffer used to create the instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWorkOrderInterface</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkOrderInterface createInstanceFromBuffer(Common _buffer)
    {
        var instance = WHSWorkOrderInterface::createInstanceFromTableName(tableId2Name(_buffer.tableId));

        instance.initializeFromBuffer(_buffer);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWorkOrderInterface</c> instance based on the table name.
    /// </summary>
    /// <param name = "_tableName">
    /// The table name used to create the instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSWorkOrderInterface</c> class.
    /// </returns>
    [Hookable(false)]
    internal static WHSWorkOrderInterface createInstanceFromTableName(TableName _tableName)
    {
        var attr = new WHSWorkOrderInterfaceFactoryAttribute(_tableName);
        
        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWorkOrderInterface), attr) as WHSWorkOrderInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromWorkOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WHSWorkOrderInterface</c> instance based on the work order line.
    /// </summary>
    /// <param name = "_workOrderLine">An instance of <c>WHSWorkOrderLineInterface</c> based on which the <c>WHSWorkOrderInterface</c> will be created.</param>
    /// <param name = "_forUpdate">Boolean that controls whether the </param>
    /// <returns></returns>
    [Hookable(false)]
    internal static WHSWorkOrderInterface createInstanceFromWorkOrderLine(WHSWorkOrderLineInterface _workOrderLine, boolean _forUpdate = false)
    {
        WHSWorkOrderInterface workOrderInterface = _workOrderLine.createWorkOrderInterface();

        workOrderInterface.initializeFromWorkId(_workOrderLine.parmWorkId(), _forUpdate);

        return workOrderInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineContainerId</Name>
				<Source><![CDATA[
    private WHSContainerId determineContainerId(
        WHSTmpWorkLine          _tmpWorkLine, 
        WHSWorkTemplateTable    _workTemplateTable)
    {
        WHSContainerId containerId;
        
        // The work table container ID should be the based on how the work is being grouped.
        if (WHSWorkTemplateGroup::isGroupedBy(_workTemplateTable.RecId, tableNum(WHSTmpWorkLine), fieldNum(WHSTmpWorkLine, ContainerId)))
        {
            containerId = _tmpWorkLine.ContainerId;
        }
        else if (WHSWorkTemplateGroup::isGroupedBy(_workTemplateTable.RecId, tableNum(WHSTmpWorkLine), fieldNum(WHSTmpWorkLine, HighestContainerId)))
        {
            containerId = _tmpWorkLine.HighestContainerId;
        }

        return containerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkTableFromTmpWorkLineAndTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the underlying buffer based on the provided <c>WHSTmpWorkLine</c> and <c>WHSWorkTemplateTable</c>.
    /// </summary>
    /// <param name = "_tmpWorkLine">The <c>WHSTmpWorkLine</c> to be used for the initialization.</param>
    /// <param name = "_inventLocationId">The <c>InventLocationId</c> to be used. If blank the <c>InventLocationId</c> of the inventDim will be used for the initialization.</param>
    /// <param name = "_workTemplateTable">The <c>WHSWorkTemplateTable</c> to be used for the initialization.</param>
    [Hookable(false)]
    internal void initializeWorkTableFromTmpWorkLineAndTemplate(
        WHSTmpWorkLine          _tmpWorkLine, 
        InventLocationId        _inventLocationId,
        WHSWorkTemplateTable    _workTemplateTable)
    {
        InventDim inventDim = InventDim::find(_tmpWorkLine.InventDimId);
        var inventLocationId  = _inventLocationId ? _inventLocationId : inventDim.InventLocationId;
        this.parmInventSiteId(inventDim.InventSiteId);
        this.parmInventLocationId(inventLocationId);
        this.parmContainerId(this.determineContainerId(_tmpWorkLine, _workTemplateTable));

        this.initializeFromTmpWorkLine(_tmpWorkLine);
        
        this.initializeFromWorkTemplate(_workTemplateTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCommonFromTmpWorkLine</Name>
				<Source><![CDATA[
    internal void initializeCommonFromTmpWorkLine(WHSTmpWorkLine _tmpWorkLine)
    {
        this.parmWorkTransType(_tmpWorkLine.WorkTransType);
        this.parmWaveId(_tmpWorkLine.WaveId);
        this.parmOrderNum(_tmpWorkLine.OrderNum);
        this.parmLoadId(_tmpWorkLine.LoadId);
        this.parmShipmentId(_tmpWorkLine.ShipmentId);
        this.parmImmediateReplenishmentUnitId(_tmpWorkLine.ImmediateReplenishmentUnitId);
        this.parmUseWorkForWaveReplen(_tmpWorkLine.UseWorkForWaveReplen);
        this.parmCancelReplenWhenDemandCanceled(_tmpWorkLine.CancelReplenWhenDemandCanceled);
        this.parmTransTxt(_tmpWorkLine.TransTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTmpWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the underlying buffer based on the provided <c>WHSTmpWorkLine</c>.
    /// </summary>
    /// <param name = "_tmpWorkLine">The <c>WHSTmpWorkLine</c> to be used for the initialization.</param>
    internal abstract void initializeFromTmpWorkLine(WHSTmpWorkLine _tmpWorkLine)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWorkTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the underlying record using the <c>WHSWorkTemplateTable</c> provided.
    /// </summary>
    /// <param name = "_workTemplateTable">The <c>WHSWorkTemplateTable</c> to be used for the initialization.</param>
    internal abstract void initializeFromWorkTemplate(WHSWorkTemplateTable  _workTemplateTable)
    {       
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves record buffer.
    /// </summary>
    /// <returns>Instance of <c>Common</c>.</returns>
    public abstract Common buffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the work order.
    /// </summary>
    [Hookable(false)]
    internal void delete()
    {
        if (this.buffer().RecId)
        {
            this.buffer().delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified work.
    /// </summary>
    /// <param name = "_workId">The work id to delete.</param>
    internal abstract void deleteWork(WHSWorkId _workId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSingleWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a single work line and cleans up the remaining work lines.
    /// </summary>
    /// <param name = "_workId">The work id of the work line to delete.</param>
    /// <param name = "_inventTransId">The invent trans id of the work line to delete.</param>
    /// <returns>An instance of <c>WHSWorkOrderLineInterface</c> initialized with the deleted work line.</returns>
    internal abstract WHSWorkOrderLineInterface deleteSingleWorkLine(WHSWorkId _workId, InventTransId _inventTransId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the specified work, and ensures the correct state.
    /// </summary>
    /// <param name = "_workId">
    /// The Work ID to cancel.
    /// </param>
    /// <param name = "_throwError">
    /// true if the method should throw an error on failure, otherwise, false.
    /// </param>
    /// <param name = "_allowCancelClosed">
    /// true if cancelling of closed work is allowed, otherwise, false.
    /// </param>
    /// <param name = "_cancelReplenishmentWorkWithDependentWork">
    /// Should the replenishment work that has dependent work be canceled? Optional.
    /// </param>
    /// <param name = "_cancellingProductReceipt">
    /// true if product receipt is being cancelled, otherwise, false.
    /// </param>
    /// <param name = "_decrementLoadLineWorkCreatedQty">
    /// true if load lines work created quantity is being decremented, otherwise, false.
    /// </param>
    /// <returns>
    /// true, if the work was cancelled successfully; otherwise, false.
    /// </returns>
    internal abstract void cancelWork(
        WHSWorkId    _workId,
        boolean      _throwError = true,
        boolean      _allowCancelClosed = false,
        UnknownNoYes _cancelReplenishmentWorkWithDependentWork = UnknownNoYes::Unknown,
        boolean      _cancellingProductReceipt = false,
        boolean      _decrementLoadLineWorkCreatedQty = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the work order.
    /// </summary>
    [Hookable(false)]
    internal void clear()
    {
        this.buffer().clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstWorkWithPickLineAfterLastPutLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the work Id of the first work id that has a pick line after the final put lines.
    /// </summary>
    /// <param name = "_workBuildId">A workuildId which will be used for selecting the work.</param>
    /// <param name = "_waveId">A wave Id which will be used for selecting the work.</param>
    /// <returns>The work Id of the first work that has a pick line after the final put lines. 
    /// If no works with pick lines after the last put is found, which is the expectation, an empty string is returned.     
    /// </returns>
    [Hookable(false)] 
    internal WHSWorkId findFirstWorkWithPickLineAfterLastPutLine(
        WHSWorkBuildId _workBuildId, 
        WHSWaveId _waveId)
    {
        var workOrderMetaDataProvider = this.workOrderMetaDataProviderInterface();        
        
        Common workOrderBuffer = workOrderMetaDataProvider.emptyBuffer();

        SysDaQueryObject workOrderQueryObject = new SysDaQueryObject(workOrderBuffer);
        workOrderQueryObject.firstOnlyHint = true;

		workOrderQueryObject.projection().add(workOrderMetaDataProvider.workIdFieldStr());               
        SysDaQueryExpression workOrderQueryWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(workOrderBuffer, workOrderMetaDataProvider.waveIdFieldStr()), new SysDaValueExpression(_waveId))
			                                                .and(new SysDaEqualsExpression(new SysDaFieldExpression(workOrderBuffer, workOrderMetaDataProvider.workBuildIdFieldStr()), new SysDaValueExpression(_workBuildId)));
        workOrderQueryObject.whereClause(workOrderQueryWhereClause);

        var workOrderLineMetaDataProvider = this.workOrderLineMetaDataProviderInterface();
        Common workOrderLinePickBuffer = workOrderLineMetaDataProvider.emptyBuffer();
        
        SysDaQueryObject workOrderLinePickQuery = this.workOrderPickLineSysDaQueryObject(workOrderBuffer, workOrderLinePickBuffer, workOrderMetaDataProvider, workOrderLineMetaDataProvider);
        SysDaQueryObject workOrderLinePutQuery = this.workOrderPutLineSysDaQueryObject(workOrderBuffer, workOrderLinePickBuffer, workOrderMetaDataProvider, workOrderLineMetaDataProvider);

        workOrderQueryObject.joinClause(SysDaJoinKind::ExistsJoin, workOrderLinePickQuery);
        workOrderLinePickQuery.joinClause(SysDaJoinKind::NotExistsJoin, workOrderLinePutQuery);        

        SysDaFindStatement findStatement = new SysDaFindStatement();
        findStatement.executeQuery(new SysDaFindObject(workOrderQueryObject));

		//this is just optimization to avoid creating the object if nothing was returned
        if (workOrderBuffer)
        {
            return WHSWorkOrderInterface::createInstanceFromBuffer(workOrderBuffer).parmWorkId();
        }
        
        return '';
	}

]]></Source>
			</Method>
			<Method>
				<Name>workOrderPickLineSysDaQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject workOrderPickLineSysDaQueryObject(
        Common                                      _workOrderBuffer, 
        Common                                      _workOrderLinePickBuffer,
        WHSWorkOrderMetadataProviderInterface       _workOrderMetaDataProvider,
        WHSWorkOrderLineMetaDataProviderInterface   _workOrderLineMetaDataProvider)
    {
        SysDaQueryObject workOrderLinePickQuery = new SysDaQueryObject(_workOrderLinePickBuffer);
            
        SysDaQueryExpression workOrderLinePickWhereClause = new SysDaEqualsExpression(new SysDaFieldExpression(_workOrderLinePickBuffer, _workOrderLineMetaDataProvider.workIdFieldStr()), new SysDaFieldExpression(_workOrderBuffer, _workOrderMetaDataProvider.workIdFieldStr()))
                                                                .and(new SysDaEqualsExpression(new SysDaFieldExpression(_workOrderLinePickBuffer, _workOrderLineMetaDataProvider.workTypeFieldStr()), new SysDaValueExpression(WHSWorkType::Pick)));
        
        workOrderLinePickQuery.whereClause(workOrderLinePickWhereClause);

        return workOrderLinePickQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderPutLineSysDaQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject workOrderPutLineSysDaQueryObject(
        Common                                      _workOrderBuffer,
        Common                                      _workOrderLinePickBuffer,
        WHSWorkOrderMetadataProviderInterface       _workOrderMetaDataProvider,
        WHSWorkOrderLineMetaDataProviderInterface   _workOrderLineMetaDataProvider)
    {
        Common workOrderLinePutBuffer = _workOrderLineMetaDataProvider.emptyBuffer();

        SysDaQueryObject workOrderLinePutQuery = new SysDaQueryObject(workOrderLinePutBuffer);
            
        SysDaQueryExpression workOrderLinePutWhereClause =  new SysDaEqualsExpression(new SysDaFieldExpression(workOrderLinePutBuffer, _workOrderLineMetaDataProvider.workIdFieldStr()), new SysDaFieldExpression(_workOrderBuffer, _workOrderMetaDataProvider.workIdFieldStr()))
                                                                .and(new SysDaEqualsExpression(new SysDaFieldExpression(workOrderLinePutBuffer, _workOrderLineMetaDataProvider.workTypeFieldStr()), new SysDaValueExpression(WHSWorkType::Put))
                                                                .and(new SysDaGreaterThanExpression(new SysDaFieldExpression(workOrderLinePutBuffer, _workOrderLineMetaDataProvider.lineNumFieldStr()), new SysDaFieldExpression(_workOrderLinePickBuffer, _workOrderLineMetaDataProvider.lineNumFieldStr()))));
  
        workOrderLinePutQuery.whereClause(workOrderLinePutWhereClause);
        workOrderLinePutQuery.joinClauseKind(SysDaJoinKind::NotExistsJoin);

        return workOrderLinePutQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderMetadataProviderInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the metadata provider interface for work order implementation.
    /// </summary>
    /// <returns>The metadata provider interface for work order implementation.</returns>
    [Hookable(false)]
    internal WHSWorkOrderMetadataProviderInterface workOrderMetadataProviderInterface()
    {
        return WHSWorkOrderMetadataProviderInterface::createInstanceFromWorkOrderInterface(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLineMetadataProviderInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the metadata provider interface for work order line implementation.
    /// </summary>
    /// <returns>The metadata provider interface for work order line implementation.</returns>
    [Hookable(false)]
    internal WHSWorkOrderLineMetaDataProviderInterface workOrderLineMetadataProviderInterface()
    {
        return this.workOrderLineInterface().workOrderLineMetadataProviderInterface();
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLineInterface</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the work order line interface for work order implementation.
    /// </summary>
    /// <returns>The work order line interface work order implementation.</returns>
    internal abstract WHSWorkOrderLineInterface workOrderLineInterface()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineLoadLineDetailsEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an enumerator containing load line details related to a given work Id.
    /// </summary>
    /// <param name = "_workId">The work Id.</param>
    /// <returns>Enumerator to load lines related to a given work.</returns>
    internal abstract WHSWorkLineLoadLineDetailsEnumerator getWorkLineLoadLineDetailsEnumerator(WHSWorkId _workId)
    {
     
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementWorkCreatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decrement the <c>WorkCreatedQty</c> for the specified load line, as well as tracking information for the load line during wave processing.
    /// </summary>
    /// <param name = "_loadLineRecId">Load line record identifier.</param>
    /// <param name = "_workCreatedQtyDecrement">Quantity to decrement by.</param>
    /// <param name = "_waveId">Wave identifier used to update the tracking information for the load line during wave processing.</param>
    internal abstract void decrementWorkCreatedQty(RecId _loadLineRecId, InventQty _workCreatedQtyDecrement, WHSWaveId _waveId)
    {

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>