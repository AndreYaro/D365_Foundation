<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementConfirmController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SalesConfirmController</c> class is the helper class for the associated  report.
/// </summary>
public class AgreementConfirmController extends SrsPrintMgmtController implements BatchRetryable
{
    AgreementHeader                                     agreementHeader;
    AgreementHeaderHistory                              agreementHeaderHistory;
    recId                                               recId;
    NoYes                                               proforma;
    PrintCopyOriginal                                   printCopyOriginal;
    AgreementProformaConfirm                            agreementConfirm;
    AgreementConfirmationRDPContract                    contract;
    ModuleSalesPurch                                    moduleType;
    AgreementClassificationCategory                     classificationCategory;
    AgreementConfirmationReportClassificationCategory   confirmationReportClassificationCategory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of print management report run object.
    /// </summary>
    /// <remarks>
    ///    This method is called by framework from the <c>startOperation</c> method. It provides the necessary
    ///    construction of the <c>PrintMgmtReprotRun</c> class.IMPORTANT: The implementation class should
    ///    override this method to create the correct instance and call the <c>super</c> method to start the
    ///    base class implementation.This is a framework class. Customizing this class may cause problems with
    ///    future upgrades to the software.
    /// </remarks>
    protected void initPrintMgmtReportRun()
    {
        Args                        argsLocal        = this.parmArgs();

        printCopyOriginal = argsLocal.parmEnum();

        if (argsLocal.caller() is AgreementProformaConfirm)
        {
            recId = any2int64(argsLocal.parm());
            // Set the caller
            agreementConfirm = argsLocal.caller();
            proforma         = agreementConfirm.parmProForma();

            if (argsLocal.record())
            {
                agreementHeader = argsLocal.record();
            }

            moduleType = agreementHeader.moduleType();
            classificationCategory = AgreementClassification::find(agreementHeader.AgreementClassification).ClassificationCategory;
        }
        else //called from history form
        {
            if (argsLocal.record())
            {
                agreementHeaderHistory = argsLocal.record();
                recId = agreementHeaderHistory.RecId;
            }

            switch (argsLocal.record().TableId)
            {
                case  tableNum(SalesAgreementHeaderHistory):
                    moduleType = ModuleSalesPurch::Sales;
                    break;
                case  tableNum(PurchAgreementHeaderHistory):
                    moduleType = ModuleSalesPurch::Purch;
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }

            classificationCategory = AgreementClassification::find(agreementHeaderHistory.AgreementClassification).ClassificationCategory;
        }

        confirmationReportClassificationCategory = AgreementConfirmationReportClassificationCategory::newFromType(moduleType, classificationCategory);
        if (confirmationReportClassificationCategory)
        {
            printMgmtReportRun = confirmationReportClassificationCategory.constructPrintMgmtReportRun();
        }

        if (!printMgmtReportRun)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        if (agreementConfirm)
        {
            // Get the print settings
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(agreementConfirm.parmPrintJobSettings());
            printMgmtReportRun.parmForcePrintJobSettings(!agreementConfirm.parmUsePrintManagement());
        }
        else
        {
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>SRSReportParameters</c> values to the report contract.
    /// </summary>
    protected void preRunModifyContract()
    {
        if (!contract)
        {
            contract = this.parmReportContract().parmRdpContract();
        }

        super();

        this.getReportContract().parmReportCaption("@SYS316853");

        contract.parmRecordId(recId);
        contract.parmProforma(proforma);
        contract.parmModuleSalesPurch(moduleType);
        contract.parmAgreementClassificationCategory(classificationCategory);

        confirmationReportClassificationCategory.preRunModifyContract(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        confirmationReportClassificationCategory.initializeRunPrintMgmt(this, printMgmtReportRun, agreementHeader, agreementHeaderHistory);

        this.outputReports();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        AgreementConfirmController agreementConfirmController = new AgreementConfirmController();
        agreementConfirmController.parmArgs(_args);
        agreementConfirmController.parmReportName(ssrsReportStr(AgreementConfirmation, Report));
        agreementConfirmController.parmShowDialog(false);
        agreementConfirmController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>