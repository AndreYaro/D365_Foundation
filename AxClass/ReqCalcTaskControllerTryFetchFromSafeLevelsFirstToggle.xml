<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcTaskControllerTryFetchFromSafeLevelsFirstToggle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqCalcTaskControllerTryFetchSafeLevelsFirstToggle</c> class handles the flighting logic to
/// determine if we should first try to fetch from a "safe" (Status, Level, LevelState) when fetching a next bundle
/// to process in <c>ReqCalcTaskController.assignBundle</c>.
///
/// Making an attempt to first fetch from "safe" (Status, Level, LevelState) aka the one we have found a bundle on last time
/// helps us battle issues with uncleaned ghost records as we are using
/// a more specific index so we are only affected by not cleaned ghost records within
/// particular (Status, Level, LevelState). Note that most of the time the next bundle will be found that way.
/// </summary>
internal final class ReqCalcTaskControllerTryFetchFromSafeLevelsFirstToggle extends WHSEnabledByDefaultToggle
{
    private static ReqCalcTaskControllerTryFetchFromSafeLevelsFirstToggle singleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>ReqCalcTaskControllerTryFetchSafeLevelsFirstToggle</c> class.
    /// </summary>
    /// <returns>
    /// The created instance.
    /// </returns>
    [Hookable(false)]
    static internal ReqCalcTaskControllerTryFetchFromSafeLevelsFirstToggle instance()
    {
        if (!singleton)
        {
            singleton = new ReqCalcTaskControllerTryFetchFromSafeLevelsFirstToggle();
        }

        return singleton;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>