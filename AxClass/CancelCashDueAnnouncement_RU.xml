<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CancelCashDueAnnouncement_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CancelCashDueAnnouncement_RU
{
    RecId ledgerRecId;
    RecId cashRecId;
    LedgerJournalTrans ledgerJournalTransForUpdate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args)
    {
        if (!_args || !_args.record() || !FormDataUtil::isFormDataSource(_args.record()))
            throw error(Error::wrongUseOfFunction(funcName()));

        switch (_args.dataset())
        {
            case tableNum(LedgerJournalTrans):
                ledgerRecId = _args.record().RecId;
                break;

            case tableNum(CashDueAnnouncementJournal_RU):
                cashRecId = _args.record().RecId;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTransForUpdate</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTransForUpdate(LedgerJournalTrans _value = ledgerJournalTransForUpdate)
    {
        ledgerJournalTransForUpdate = _value;
        return ledgerJournalTransForUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerRecId</Name>
				<Source><![CDATA[
    public RefRecId parmLedgerRecId(RefRecId _ledgerRecId = ledgerRecId)
    {
        ledgerRecId = _ledgerRecId;
        return ledgerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        LedgerJournalTrans ledgerJournalTrans;
        CashDueAnnouncementJournal_RU cashDueAnnouncementJournal;

        ttsbegin;

        if (ledgerJournalTransForUpdate)
        {
            ledgerJournalTrans = ledgerJournalTransForUpdate;
        }
        else if (ledgerRecId)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerRecId, true);
        }
        else
        {
            select firstonly cashDueAnnouncementJournal
                where cashDueAnnouncementJournal.RecId == cashRecId;

            select firstonly forupdate ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == cashDueAnnouncementJournal.JournalNum &&
                      ledgerJournalTrans.AnnouncementNum_RU == cashDueAnnouncementJournal.AnnouncementNum;
        }

        delete_from cashDueAnnouncementJournal
            where cashDueAnnouncementJournal.AnnouncementNum == ledgerJournalTrans.AnnouncementNum_RU;

        info(strFmt("@GLS113132", ledgerJournalTrans.AnnouncementNum_RU));

        ledgerJournalTrans.AnnouncementNum_RU = '';
        ledgerJournalTrans.DocumentDate = dateNull();
        ledgerJournalTrans.DocumentNum = '';
        ledgerJournalTrans.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CancelCashDueAnnouncement_RU construct()
    {
        return new CancelCashDueAnnouncement_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CancelCashDueAnnouncement_RU cancelCashDueAnnouncement = CancelCashDueAnnouncement_RU::construct();

        cancelCashDueAnnouncement.initFromArgs(_args);

        if (Box::okCancel("@GLS113133", 1) == DialogButton::Ok)
        {
            cancelCashDueAnnouncement.run();

            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>