<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormDataSourceFilters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for preserving user applied filters and sorting on a grid form.
/// </summary>
public class ProjFormDataSourceFilters
{
    private Map queryFilters = new Map(Types::Integer, Types::Class);
    private container conSortFields;

    private boolean projFormDataSourceSortingFlight = ProjFormDataSourceSortingFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectFromDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the query from the query run object.
    /// </summary>
    /// <param name = "_formDataSource">
    /// An instance of the form data source.
    /// </param>
    public void collectFromDataSource(FormDataSource _formDataSource)
    {
        if (_formDataSource)
        {
            QueryRun queryRun = _formDataSource.queryRun();

            if (queryRun) 
            {
                this.collectFromQuery(queryRun.query());

                if (projFormDataSourceSortingFlight)
                {
                    this.collectSortFields(queryRun.query(), _formDataSource);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the filters from the provided query.
    /// </summary>
    /// <param name = "_query">
    /// The query being executed.
    /// </param>
    public void collectFromQuery(Query _query)
    {
        int filterCount = _query.queryFilterCount();

        for (int i = 1; i <= filterCount; i++)
        {
            QueryFilter queryFilter = _query.queryFilter(i);
            TableId tableId = queryFilter.dataSource().table();
            
            this.addFilter(tableId, fieldName2Id(tableId, queryFilter.field()), queryFilter.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectSortFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collects the order by fields from the provided query.
    /// </summary>
    /// <param name = "_query">
    /// The query being executed.
    /// </param>
    /// <param name = "_formDataSource">
    /// An instance of the form data source.
    /// </param>
    private void collectSortFields(Query _query, FormDataSource _formDataSource)
    {
        QueryBuildDataSource qbds = _formDataSource.queryRunQueryBuildDataSource();
        int orderByCount = _query.orderByFieldCount(qbds);
        boolean orderByExists = false;

        // Attempt to find an existing sort on that field.
        for (int i=1; i <= orderByCount; i++)
        {
            QueryOrderByField orderByField = _query.orderByField(i, qbds);
            
            if (orderByField.dataSource().table() == tableNum(PSATmpProjProposalSummary))
            {
                if (fieldId2name(tableNum(PSATmpProjProposalSummary), orderByField.fieldID()) == fieldStr(PSATmpProjProposalSummary, ContractLineNum))
                {
                    if (orderByField.direction() == SortOrder::Ascending)
                    {
                        orderByExists = true;
                    }
                }
            }

            if (!orderByExists)
            {
                conSortFields += [[orderByField.dataSource().table(), orderByField.fieldID(), orderByField.direction()]];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds user applied filters on the grid form to a map.
    /// </summary>
    /// <param name = "_tableId">
    /// The table id used to lookup query filters.
    /// </param>
    /// <param name = "_fieldId">
    /// The field id used to lookup query filters.
    /// </param>
    /// <param name = "_value">
    /// The value of the filtered field.
    /// </param>
    protected void addFilter(TableId _tableId, FieldId _fieldId, str _value)
    {
        Map fieldValue;

        if (queryFilters.exists(_tableId))
        {
            fieldValue = queryFilters.lookup(_tableId);

            container valuesCon;

            if (fieldValue.exists(_fieldId))
            {
                valuesCon = fieldValue.lookup(_fieldId);
            }

            valuesCon += _value;

            fieldValue.insert(_fieldId, valuesCon);
        }
        else
        {
            fieldValue = new Map(Types::Integer, Types::Container);
            
            fieldValue.insert(_fieldId, [_value]);
        }

        queryFilters.insert(_tableId, fieldValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Only apply filters when they have been removed from the queryRun.
    /// This happens then FormDataSourceName_ds.executeQuery() is called explicitly from the code.
    /// </summary>
    /// <param name = "_formDataSource">
    /// Instance of the form data source.
    /// </param>
    /// <returns>
    /// Returns a boolean describing whether or not the filters can be applied.
    /// </returns>
    public boolean canApplyFilters(FormDataSource _formDataSource)
    {
        if (_formDataSource)
        {
            QueryRun queryRun = _formDataSource.queryRun();
            
            if (queryRun)
            {
                return !queryRun.query().queryFilterCount() && queryFilters.elements();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplySorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Only apply sorting when they have been removed from the queryRun.
    /// This happens then FormDataSourceName_ds.executeQuery() is called explicitly from the code.
    /// </summary>
    /// <param name = "_formDataSource">
    /// Instance of the form data source.
    /// </param>
    /// <returns>
    /// Returns a boolean describing whether or not the sorting can be applied.
    /// </returns>
    private boolean canApplySorting(FormDataSource _formDataSource)
    {
        boolean applySorting = false;

        if (_formDataSource && projFormDataSourceSortingFlight)
        {
            Query query = _formDataSource.queryRun().query();
            QueryBuildDataSource qbds = _formDataSource.queryRunQueryBuildDataSource();

            if (_formDataSource.table() == tableNum(PSATmpProjProposalSummary))
            {
                int orderByCount = query.orderByFieldCount(qbds);
                boolean orderByExists = false;
                // Attempt to find an existing sort on that field.
                for (int i=1; i <= orderByCount; i++)
                {
                    QueryOrderByField queryOrderByField = query.orderByField(i,qbds);
                    if (fieldId2Name(tableNum(PSATmpProjProposalSummary), queryOrderByField.fieldID()) == fieldStr(PSATmpProjProposalSummary, ContractLineNum))
                    {
                        if (queryOrderByField.direction() == SortOrder::Ascending)
                        {
                            orderByExists = true;
                        }
                        else
                        {
                            orderByExists = false;
                        }
                    }
                    else
                    {
                        orderByExists = false;
                    }
                }

                applySorting = orderByExists && conSortFields != conNull();
            }
            else
            {
                applySorting = !query.orderByFieldCount() && conSortFields != conNull();
            }
        }

        return applySorting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the preserved user filters to the query and updates the form.
    /// </summary>
    /// <param name = "_formDataSource">
    /// An instance of the form data source.
    /// </param>
    public void applyFilters(FormDataSource _formDataSource)
    {
        if (this.canApplyFilters(_formDataSource))
        {
            Query                   query = _formDataSource.queryRun().query();
            QueryBuildDataSource    qbds;

            MapIterator mapITables = new MapIterator(queryFilters);

            while (mapITables.more())
            {
                MapIterator mapIFields = new MapIterator(mapITables.value());
                container   values;

                qbds  = query.dataSourceTable(mapITables.key());
                   
                while (mapIFields.more())
                {
                    values = mapIFields.value();

                    for (int c = 1; c <= conLen(values); c++)
                    {
                        query.addQueryFilter(qbds, fieldId2Name(mapITables.key(), mapIFields.key())).value(conPeek(values, c));
                    }

                    mapIFields.next();
                }

                mapITables.next();
            }
            
            _formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the preserved user sorting to the query and updates the form.
    /// </summary>
    /// <param name = "_formDataSource">
    /// An instance of the form data source.
    /// </param>
    internal void applySorting(FormDataSource _formDataSource)
    {
        boolean orderByUpdated = false;
        Query query = _formDataSource.queryRun().query();
        QueryBuildDataSource qbds = query.dataSourceTable(_formDataSource.table());

        if (this.canApplySorting(_formDataSource))
        {
            qbds.sortClear();
            for (var i = 1; i <= conLen(conSortFields); ++i)
            {
                container dsContainer = conPeek(conSortFields, i);
                if (qbds.table() == conPeek(dsContainer, 1))
                {
                    qbds.addSortField(conPeek(dsContainer, 2), conPeek(dsContainer, 3));
                }
            }
            
            _formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAndCollectFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and collects filters from the form data source.
    /// </summary>
    /// <param name = "_formDataSource">
    /// An instance of the form data source.
    /// </param>
    /// <returns>
    /// Returns an instance of the <c>ProjFormDataSourceFilters</c> class.
    /// </returns>
    public static ProjFormDataSourceFilters constructAndCollectFilters(FormDataSource _formDataSource)
    {
        ProjFormDataSourceFilters formDataSourceFilters = new ProjFormDataSourceFilters();

        formDataSourceFilters.collectFromDataSource(_formDataSource);

        return formDataSourceFilters;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>