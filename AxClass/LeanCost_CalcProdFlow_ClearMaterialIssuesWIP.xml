<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCost_CalcProdFlow_ClearMaterialIssuesWIP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanCost_CalcProdFlow_ClearMaterialIssuesWIP</c> class is the task responsible for the clearing material issues from the WIP during lean backflush costing for a
/// specific production flow and a specific item.
/// </summary>
public class LeanCost_CalcProdFlow_ClearMaterialIssuesWIP extends LeanCost_CalcProdFlow_ClearMaterialWIP implements BatchRetryable
{
    Map     unusedRawMaterialsQtyMap;

    int64   runTimeClearMaterialIssuesWIP;
    int64   nbInventTransClearMaterialIssuesWIP;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>LeanCost_CalcProdFlow_ClearMaterialIssuesWIP</c> class with the specified parameters.
    /// </summary>
    /// <param name = "_leanProductionFlowCostingRecId">The record ID of a production flow costing.</param>
    /// <param name = "_itemId">The item ID.</param>
    /// <param name = "_leanCostingToDate">The backflush costing date.</param>
    /// <param name = "_planReferenceName">The production flow name.</param>
    /// <param name = "_planDefaultDimensions">The default dimensions.</param>
    /// <param name = "_unusedRawMaterialsQtyMap">The map with unused quantities.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <returns>A new instance of the <c>LeanCost_CalcProdFlow_ClearMaterialIssuesWIP</c> class.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCost_CalcProdFlow_ClearMaterialIssuesWIP newFromParameters(
        LeanProductionFlowCostingRefRecId   _leanProductionFlowCostingRecId,
        ItemId                              _itemId,
        ToDate                              _leanCostingToDate,
        PlanName                            _planReferenceName,
        DimensionDefault                    _planDefaultDimensions,
        Map                                 _unusedRawMaterialsQtyMap,
        CurrencyCode                        _currencyCode)
    {
        LeanCost_CalcProdFlow_ClearMaterialIssuesWIP task = LeanCost_CalcProdFlow_ClearMaterialIssuesWIP::construct();

        task.itemId = _itemId;
        task.leanCostingDate = _leanCostingToDate;
        task.planReferenceName = _planReferenceName;
        task.planDefaultDimensions = _planDefaultDimensions;
        task.unusedRawMaterialsQtyMap = _unusedRawMaterialsQtyMap;
        task.currencyCode = _currencyCode;
        task.leanProductionFlowCostingRecId = _leanProductionFlowCostingRecId;

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanCost_CalcProdFlow_ClearMaterialIssuesWIP construct()
    {
        return new LeanCost_CalcProdFlow_ClearMaterialIssuesWIP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedUnusedRawMaterialsQtyMap;

        if (unusedRawMaterialsQtyMap)
        {
            packedUnusedRawMaterialsQtyMap = unusedRawMaterialsQtyMap.pack();
        }

        return [#CurrentVersion, packedUnusedRawMaterialsQtyMap] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        container   packedUnusedRawMaterialsQtyMap;

        switch (version)
        {
            case #CurrentVersion:
                container base;
                [version, packedUnusedRawMaterialsQtyMap, base] = _packedClass;
                if (packedUnusedRawMaterialsQtyMap)
                {
                    unusedRawMaterialsQtyMap = Map::create(packedUnusedRawMaterialsQtyMap);
                    return super(base);
                }
                else
                {
                    return false;
                }
            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    protected void execute()
    {
        const UtilElementName NumberOfInventTransClearMaterialIssuesWIP = 'NumberOfInventTransClearMaterialIssuesWIP';

        InventTrans                             inventTrans;
        InventTransOrigin                       inventTransOrigin;
        InventCostTrans                         inventCostTrans;
        InventDim                               inventDim;
        InventDim                               inventItemDim;
        InventItemPrice                         inventItemPrice;
        
        InventDim                               prevProductDim;
        InventSiteId							prevSiteId;
        
        Qty                                     qtyLeft;
        Qty                                     remainQty;
        Qty                                     updateQty;
        
        InventDimGroupSetup                     inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        InventCostOnhandCache                   inventCostOnHandCache = InventCostOnhandCache::construct();
        CostManagementInstrumentationLogger     instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(LeanCost_CalcProdFlow_ClearMaterialIssuesWIP));

        using (var backflushCostingActivityContext = instrumentationLogger.backflushCostingActivities().clearMaterialIssuesWIP(
                                                        classStr(LeanCost_CalcProdFlow_ClearMaterialIssuesWIP),
                                                        inventTable.RecId,
                                                        leanCostingDate,
                                                        PlanReference::findPlanName(planReferenceName).RecId,
                                                        leanProductionFlowCostingRecId,
                                                        planDefaultDimensions))
        {
            // Issues materials
            while select forupdate * from inventTrans
                where inventTrans.itemId == itemId
                   && inventTrans.DateStatus      <= leanCostingDate
                   && ((inventTrans.StatusIssue   == StatusIssue::Deducted
                        && inventTrans.StatusReceipt == StatusReceipt::None) ||
                       (inventTrans.StatusIssue   == StatusIssue::None
                        && inventTrans.StatusReceipt == StatusReceipt::Received))
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                join Tableid from inventTransOrigin
                    order by inventTransOrigin.ItemInventDimId, inventTrans.DatePhysical desc, inventTrans.StatusReceipt asc
                    where inventTrans.InventTransOrigin    == inventTransOrigin.RecId
                       && inventTransOrigin.ReferenceCategory != InventTransType::KanbanJobProcess
                exists join inventCostTrans
                    where inventCostTrans.InventTransId    == inventTransOrigin.InventTransId
                       && inventCostTrans.CostTransRefType == InventCostTransRefType::ProductionFlow
                       && inventCostTrans.TransRefId       == planReferenceName
            {
                nbInventTransClearMaterialIssuesWIP++;

                if (prevSiteId != inventDim.InventSiteId ||
                    InventDim::getModifiedProductDimensionFields(prevProductDim, inventDim).elements() > 0)
                {
                    if (qtyLeft != 0)
                    {
                        // on the item, more qty was left than I had put into the prod flow
                        warning(strFmt("@SYS301727", itemId, planReferenceName, qtyLeft));
                    }

                    prevProductDim.inventDimFieldsMap::initProductDimensionsFrom(inventDim);
                    prevSiteId = inventDim.InventSiteId;
                
                    // I need to get the product dimensions
                    inventItemDim = inventDim.data();
                    inventItemDim.clearNotSiteAndProductDim(inventDimGroupSetup);
                    inventItemDim = InventDim::findOrCreate(inventItemDim);
                
                    if (unusedRawMaterialsQtyMap.exists(inventItemDim.InventDimId))
                    {
                        qtyLeft    = unusedRawMaterialsQtyMap.lookup(inventItemDim.InventDimId);
                    }
                    else
                    {
                        qtyLeft = 0;
                    }
                
                    inventItemPrice = this.findItemPriceOrThrowError(leanCostingDate, inventDim);
                }
            
                if (qtyLeft &&
                    sign(qtyLeft) == sign(inventTrans.Qty) &&
                    inventTrans.StatusReceipt == StatusReceipt::None)
                {
                    Qty transactionRemainQty = inventTrans.Qty;
                    if (abs(qtyLeft) >= abs(transactionRemainQty))
                    {
                        remainQty = transactionRemainQty;
                    }
                    else
                    {
                        remainQty = qtyLeft;
                    }
                    qtyLeft -= remainQty;
                    updateQty = transactionRemainQty - remainQty;
                
                    this.addDirectMaterialConsumption(inventItemPrice, -remainQty);
                
                    if (qtyLeft == 0)
                    {
                        unusedRawMaterialsQtyMap.remove(inventItemDim.InventDimId);
                    }
                }
                else
                {
                    remainQty = 0;
                    updateQty = inventTrans.Qty;
                }
            
                if (updateQty)
                {
                    InventMovement movement = InventMovement::construct(inventTrans);
                
                    InventUpd_Financial inventUpd_Financial = InventUpd_Financial::newKanbanMovement(
                                                                                                movement,
                                                                                                ledgerVoucher,
                                                                                                updateQty,
                                                                                                0,
                                                                                                CurrencyExchangeHelper::amount(updateQty * inventItemPrice.pcsPrice()));
                    inventUpd_Financial.parmInventCostOnhandCache(inventCostOnHandCache);
                    inventUpd_Financial.updateNow();

                    if (movement.mustBeBookedFinancially())
                    {
                        this.clearMaterialWIPAccount(movement, inventItemPrice, -updateQty);
                    }
                }
            }
        
            if (unusedRawMaterialsQtyMap.elements() != 0)
            {
                warning(strFmt("@CostManagement:MessageValidation_LeanCost_NotAllUnusedQuantityUsed", itemId));
            }

            ledgerVoucher.persistState();
            this.transferConflictingRevaluationsFromParallelSession();

            Set instrumentationPropertyCollection = new Set(Types::Class);
            var loggerProperties = instrumentationLogger.properties();
            instrumentationPropertyCollection.add(loggerProperties.addCount(NumberOfInventTransClearMaterialIssuesWIP, nbInventTransClearMaterialIssuesWIP));
            instrumentationLogger.logPropertyCollection(instrumentationPropertyCollection);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@CostManagement:Class_LeanCost_CalcProdFlow_ClearMaterialIssuesWIP";
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirectMaterialConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds direct material consumption to the temporary table for the main thread to consolidate the data afterwards.
    /// </summary>
    /// <param name="_inventItemPrice">
    /// The item price used for the consumption.
    /// </param>
    /// <param name="_qty">
    /// The quantity consumed.
    /// </param>
    private void addDirectMaterialConsumption(InventItemPrice _inventItemPrice, Qty _qty)
    {
        LeanCostTmpDirectMaterialConsumption tmpIssueDirectMaterialConsumption;

        tmpIssueDirectMaterialConsumption.LeanProductionFlowCosting = leanProductionFlowCostingRecId;
        tmpIssueDirectMaterialConsumption.InventItemPrice = _inventItemPrice.RecId;
        tmpIssueDirectMaterialConsumption.Qty = _qty;
        tmpIssueDirectMaterialConsumption.ItemId = itemId;
        tmpIssueDirectMaterialConsumption.insert();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>