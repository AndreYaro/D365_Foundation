<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffQueryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>SettlementWriteOffQueryGenerator</c> generates query parameters for calculation of settlement write off amounts.
/// </summary>
[ExportInterfaceAttribute()]
internal abstract class SettlementWriteOffQueryGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQueryForAccountMatchSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the query for matching account transactions in settlement write off.
    /// </summary>
    /// <param name = "_specCompany">The specification company.</param>
    /// <param name = "_specTableId">The specification table id.</param>
    /// <param name = "_specRecId">The specification record.</param>
    /// <returns>The query for matching payment journals with ordering.</returns>
    internal Query getQueryForAccountMatchSettlement(
        DataAreaId _specCompany,
        RefTableId _specTableId,
        RefRecId _specRecId)
    {
        Query matchSettlementQuery = this.getDefaultMatchSettlementQuery(_specCompany, _specTableId, _specRecId);

        this.restrictMatchQueryToCreditOrDebitBalances(matchSettlementQuery);

        return matchSettlementQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForPaymentJournalMatchSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the query for matching a payment journal to marked settlement records in settlement write off.
    /// </summary>
    /// <param name = "_specCompany">The specification company.</param>
    /// <param name = "_specTableId">The specification table id.</param>
    /// <param name = "_specRecId">The specification record.</param>
    /// <returns>The query for matching payment journals with ordering.</returns>
    internal Query getQueryForPaymentJournalMatchSettlement(
        DataAreaId _specCompany,
        RefTableId _specTableId,
        RefRecId _specRecId)
    {
        return this.getDefaultMatchSettlementQuery(_specCompany, _specTableId, _specRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForSummarizedMarkedPaymentBalance</Name>
				<Source><![CDATA[
    internal Query getQueryForSummarizedMarkedPaymentBalance(CustVendTable _custVendTable)
    {
        Query accountMarkedPaymentsQuery = new Query();
        QueryBuildDataSource specTransDS = accountMarkedPaymentsQuery.addDataSource(tableNum(SpecTrans));

        specTransDS.addSelectionField(fieldNum(SpecTrans, Balance01), SelectionField::Sum);

        specTransDS.addRange(fieldNum(SpecTrans, SpecCompany)).value(queryValue(_custVendTable.company()));
        specTransDS.addRange(fieldNum(SpecTrans, SpecTableId)).value(queryValue(_custVendTable.TableId));
        specTransDS.addRange(fieldNum(SpecTrans, SpecRecId)).value(queryValue(_custVendTable.RecId));

        QueryBuildRange specTransBalanceRange = specTransDS.addRange(fieldNum(SpecTrans, Balance01));

        this.restrictSpecTransToPayments(accountMarkedPaymentsQuery);

        return accountMarkedPaymentsQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultMatchSettlementQuery</Name>
				<Source><![CDATA[
    private Query getDefaultMatchSettlementQuery(
        DataAreaId _specCompany,
        RefTableId _specTableId,
        RefRecId _specRecId)
    {
        Query matchSettlementQuery = new Query();
        matchSettlementQuery.allowCrossCompany(true);

        QueryBuildDataSource specTransDS = this.createSpecTransDataSource(matchSettlementQuery, _specCompany, _specTableId, _specRecId);
        QueryBuildDataSource custVendTransOpenDS = this.addCustVendTransOpenDatasource(specTransDS);
        this.createMatchSettleOrderClause(matchSettlementQuery);

        return matchSettlementQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecTransDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource createSpecTransDataSource(
        Query _query,
        DataAreaId _specCompany,
        RefTableId _specTableId,
        RefRecId _specRecId)
    {
        QueryBuildDataSource specTransDS = _query.addDataSource(tableNum(SpecTrans));
        specTransDS.addRange(fieldNum(SpecTrans, SpecCompany)).value(_specCompany);
        specTransDS.addRange(fieldNum(SpecTrans, SpecTableId)).value(queryValue(_specTableId));
        specTransDS.addRange(fieldNum(SpecTrans, SpecRecId)).value(queryValue(_specRecId));

        return specTransDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustVendTransOpenDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends the customer or vendor transaction open datasource to the given datasource.
    /// </summary>
    /// <param name = "_specTransDS">The <c>SpecTrans</c> root datasource to the query.</param>
    /// <returns>The open transaction data source.</returns>
    internal protected abstract QueryBuildDataSource addCustVendTransOpenDatasource(QueryBuildDataSource _specTransDS)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMatchSettleOrderClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the order clauses used to determine the order for processing.
    /// </summary>
    /// <param name = "_matchQuery">The query to apply order clauses to.</param>
    internal protected abstract void createMatchSettleOrderClause(Query _matchQuery)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictMatchQueryToCreditOrDebitBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restricts the matching query to the document balances for the query.
    /// </summary>
    /// <param name = "_matchQuery">The query to apply ranges to.</param>
    internal protected abstract void restrictMatchQueryToCreditOrDebitBalances(Query _matchQuery)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>restrictSpecTransToPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restricts the query to the <c>SpecTrans</c> payment amounts for this module.
    /// </summary>
    /// <param name = "_query">The query to restrict.</param>
    internal protected abstract void restrictSpecTransToPayments(Query _query)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>