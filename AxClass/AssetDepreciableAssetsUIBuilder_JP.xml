<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciableAssetsUIBuilder_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDepreciableAssetsUIBuilder_JP</c> class is the UIBuilder for the <c>AssetDepreciableAssets</c> SSRS report.
/// </summary>
class AssetDepreciableAssetsUIBuilder_JP extends SrsReportFileFormatDataContractUIBuilder
{
    DialogField                 dialogFieldCity;
    DialogField                 dialogFieldCalendarYearName;
    DialogField                 dialogFieldBlueReturn;
    DialogField                 dialogFieldNonTaxable;
    DialogField                 dialogFieldOfficeBuildingAsset;
    DialogField                 dialogFieldIncludeAppendedTable;
    DialogField                 dialogFieldReportType;
    DialogField                 dialogFieldStateId;
    DialogField                 dialogFieldDepreciationMethod;
    DialogField                 dialogFieldRoundMethod;
    DialogField                 dialogFieldIncludedAssets;
    DialogField                 dialogFieldRateType;
    DialogField                 dialogFieldRegNumbers;
    FormStringControl           regNumberRecIdsControl;
    Query                       parmQuery;

    AssetDepreciableAssetsController_JP assetDepreciableAssetsController;
    AssetDepreciableAssetsContract_JP   assetDepreciableAssetsContract_JP;

    str                         cityStr;
    LogisticsAddressStateId     lastStateId;
    CompanyInfoRecId            companyInfoRecordId = CompanyInfo::current();

    #define.Semicolon(';')
    #define.RegNumberRecIdsControlName('RegNumberRecIdsControlName')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calendarYearNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the look-up interaction for the fiscal year lookup control.
    /// </summary>
    /// <param name="_stringControl">
    /// The <c>FormStringControl</c> that triggers this event.
    /// </param>
    public void calendarYearNameLookup(FormStringControl _stringControl)
    {
        FiscalCalendarYear::lookupCalendarYearByFiscalCanlendar_JP(_stringControl, Ledger::find(Ledger::current()).FiscalCalendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Data contract query builder.
    /// </summary>
    /// <returns>
    /// Query builder which attached in contract.
    /// </returns>
    private SysDataContractQueryUIBuilder getQueryBuilder()
    {
        Map                             contractObjects;
        MapEnumerator                   contractEnumerator;
        SysOperationDataContractInfo    contractInfo;
        SysOperationUIBuilder           builder;

        contractObjects = assetDepreciableAssetsController.getDataContractInfoObjects();
        if (contractObjects)
        {
            contractEnumerator = contractObjects.getEnumerator();

            while (contractEnumerator.moveNext())
            {
                contractInfo    = contractEnumerator.currentValue();
                builder         = assetDepreciableAssetsController.getUIBuilderForContractObject(contractInfo.dataContractObject());
                if (builder is SysDataContractQueryUIBuilder)
                {
                    return builder;
                }
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dialog fields from binding information.
    /// </summary>
    private void initDialogField()
    {
        assetDepreciableAssetsContract_JP = this.dataContractObject();

        dialogFieldStateId              = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmStateId));
        dialogFieldCity                 = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmCity));
        dialogFieldCalendarYearName     = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmCalendarYearName));
        dialogFieldBlueReturn           = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmIsBlueReturn));
        dialogFieldNonTaxable           = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmIsNonTaxable));
        dialogFieldOfficeBuildingAsset  = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmOfficeBuildingAsset));
        dialogFieldIncludeAppendedTable = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmIsIncludeAppendedTable));
        dialogFieldReportType           = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmReportType));
        dialogFieldDepreciationMethod   = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmReportDepreciationMethod));
        dialogFieldRoundMethod          = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmReportRoundMethod));
        dialogFieldIncludedAssets       = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmReportIncludedAssets));
        dialogFieldRateType             = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmReportRateDisplayType));
        dialogFieldRegNumbers           = this.bindInfo().getDialogField(assetDepreciableAssetsContract_JP, methodStr(AssetDepreciableAssetsContract_JP, parmRegistrationNumbers));
    }

]]></Source>
			</Method>
			<Method>
				<Name>officeBuildingAssetLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the look-up interaction for the office building asset lookup control.
    /// </summary>
    /// <param name="_stringControl">
    /// The <c>FormStringControl</c> that triggers this event.
    /// </param>
    public void officeBuildingAssetLookup(FormStringControl _stringControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    qbds_AssetTable;
        QueryBuildDataSource    qbds_MajorType;

        sysTableLookup = SysTableLookup::newParameters(tableNum(AssetTable), _stringControl);
        sysTableLookup.addLookupfield(fieldNum(AssetTable, AssetId));
        sysTableLookup.addLookupfield(fieldNum(AssetTable, Name));
        sysTableLookup.addLookupfield(fieldNum(AssetTable, AssetGroup));

        query = new Query();
        qbds_AssetTable = query.addDataSource(tableNum(AssetTable));
        qbds_MajorType = qbds_AssetTable.addDataSource(tableNum(AssetMajorType));
        qbds_MajorType.relations(true);

        qbds_MajorType.addRange(fieldNum(AssetMajorType, AssetType_JP)).value(queryValue(AssetType_JP::Structure));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method in order to initialize the dialog field and set the properties.
    /// </summary>
    public void postBuild()
    {
        FormBuildGroupControl   formBuildGroupControl;

        assetDepreciableAssetsController = this.controller();

        super();

        formBuildGroupControl   = this.dialog().curFormGroup();
        formBuildGroupControl.columns(2);

        this.initDialogField();
        this.setFieldProperties();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overrides this method in order to register the dialog field methods to implment lookup on the paramenter dialog.
    /// </summary>
    public void postRun()
    {
        SysOperationDialog  reportDialogBox = this.dialog();
        FormStringControl   regNumberControl = dialogFieldRegNumbers.control();
        str                 selectedRegNumbers;

        dialogFieldCalendarYearName.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(AssetDepreciableAssetsUIBuilder_JP, calendarYearNameLookup),
            this);

        dialogFieldOfficeBuildingAsset.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(AssetDepreciableAssetsUIBuilder_JP, officeBuildingAssetLookup),
            this);

        dialogFieldRegNumbers.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(AssetDepreciableAssetsUIBuilder_JP, registrationNumberLookup),
            this);

        dialogFieldRegNumbers.registerOverrideMethod(
            methodStr(FormStringControl, textChange),
            methodStr(AssetDepreciableAssetsUIBuilder_JP, registrationNumberTextChange),
            this);

        regNumberRecIdsControl = reportDialogBox.formRun().design().addControl(FormControlType::String, #RegNumberRecIdsControlName);
        regNumberRecIdsControl.visible(false);

        /*
        This is a workaround for a kernel issue:
        1. Open report dialog box
        2. Clear registration number text box control
        Expected result: textChange method of registrationi number control is called
        Actual result: it is not called
        */
        selectedRegNumbers = regNumberControl.text();
        regNumberControl.text("");
        regNumberControl.pasteText(selectedRegNumbers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildQueryControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuilds the parm query.
    /// </summary>
    /// <param name="_queryUIBuilder">
    /// ParmQuery builder.
    /// </param>
    private void rebuildQueryControl(SysDataContractQueryUIBuilder _queryUIBuilder)
    {
        FormBuildGroupControl   queryBuildControl;
        FormGroupControl        queryControl;
        Form                    form;
        FormRun                 formRun;
        SRSReportRunBuilder     queryHelper;
        Map                     dataContractObjectsAndNestedQueries;
        MapEnumerator           dataContractObjectsAndNestedQueriesEnumerator;
        Object                  contractInfo;
        str                     sysOperationQueryDataContractInfoKey;

        str groupFix = #GroupPrefix;

        form    = this.dialog().form();
        formRun = this.dialog().formRun();

        if (formRun)
        {
            dataContractObjectsAndNestedQueries = _queryUIBuilder.controller().getDataContractInfoObjectsRecursively();
            dataContractObjectsAndNestedQueriesEnumerator = dataContractObjectsAndNestedQueries.getEnumerator();
            while (dataContractObjectsAndNestedQueriesEnumerator.moveNext())
            {
                contractInfo = dataContractObjectsAndNestedQueriesEnumerator.currentValue();
                if (contractInfo is SysOperationQueryDataContractInfo)
                {
                    sysOperationQueryDataContractInfoKey = dataContractObjectsAndNestedQueriesEnumerator.currentKey();
                    break;
                }
            }

            queryBuildControl = form.design().control(#GroupPrefix + sysOperationQueryDataContractInfoKey);

            queryControl = formRun.control(queryBuildControl.id());

            queryHelper  = assetDepreciableAssetsController.queryHelper(sysOperationQueryDataContractInfoKey);
            queryHelper.updateQueryGroupControl(
            queryControl,
            new QueryRun(parmQuery));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field properties based on the printing report.
    /// </summary>
    private void setFieldProperties()
    {
        AssetDepreciableAssetsContract_JP contract;

        dialogFieldStateId.enabled(false);
        dialogFieldCity.enabled(false);

        dialogFieldReportType.visible(false);

        contract = this.dataContractObject() as AssetDepreciableAssetsContract_JP;
        if (contract.parmReportType() != AssetDepreciableAssetsReportType_JP::Main)
        {
            dialogFieldBlueReturn.visible(false);
            dialogFieldNonTaxable.visible(false);
            dialogFieldOfficeBuildingAsset.visible(false);
            dialogFieldIncludeAppendedTable.visible(false);
            dialogFieldDepreciationMethod.visible(false);
        }

        if (contract.parmReportType() != AssetDepreciableAssetsReportType_JP::AppendedTable1)
        {
            dialogFieldIncludedAssets.visible(false);
        }

        if (contract.parmReportType() == AssetDepreciableAssetsReportType_JP::AppendedTable2)
        {
            dialogFieldRoundMethod.visible(false);
            dialogFieldRateType.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registrationNumberLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Look up registration numbers.
    /// </summary>
    /// <param name="_stringControl">
    /// A <c>FormStringControl</c> reference for which to create the lookup.
    /// </param>
    public void registrationNumberLookup(FormStringControl _regNumberControl)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildFieldList     qbfl;
        container               selectedFields;
        str                     selectedRegNumbers;

        query = new Query();
        query.validTimeStateDateRange(dateNull(), maxDate());
        qbds = query.addDataSource(tableNum(TaxRegistration));
        qbds.addGroupByField(fieldNum(TaxRegistration, RegistrationNumber));
        qbfl = qbds.fields();
        qbfl.dynamic(false);
        qbfl.clearFieldList();
        qbfl.addField(fieldNum(TaxRegistration, RegistrationNumber));
        qbfl.addField(fieldNum(TaxRegistration, Description), SelectionField::Max);

        qbds = qbds.addDataSource(tableNum(DirPartyLocation));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(true);
        qbds.addRange(fieldNum(DirPartyLocation, Party)).value(SysQuery::value(companyInfoRecordId));
        qbfl = qbds.fields();
        qbfl.dynamic(false);
        qbfl.clearFieldList();

        qbds = qbds.addDataSource(tableNum(DirPartyLocationRole));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(true);
        qbfl = qbds.fields();
        qbfl.dynamic(false);
        qbfl.clearFieldList();

        qbds = qbds.addDataSource(tableNum(LogisticsLocationRole));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.relations(true);
        qbds.addRange(fieldNum(LogisticsLocationRole, Type)).value(SysQuery::value(LogisticsLocationRoleType::FixedAsset));
        qbfl = qbds.fields();
        qbfl.dynamic(false);
        qbfl.clearFieldList();

        selectedFields = [tableNum(TaxRegistration), fieldNum(TaxRegistration, RegistrationNumber)];

        SysLookupMultiSelectGrid::lookup(query, _regNumberControl, regNumberRecIdsControl, _regNumberControl, selectedFields);

        /* This is a workaround for a kernel issue:
            1. Open dialog box
            2. Select a registration number
            3. Select all text of registration number control
            4. Press Backspace key to clear registration number control
            Expected result: textChange method of registration number control is called
            Actual result  : textChange method of registration number control is NOT called
        */
        selectedRegNumbers = _regNumberControl.text();
        _regNumberControl.text("");
        _regNumberControl.pasteText(selectedRegNumbers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registrationNumberTextChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called to refresh State and City dialog field when registration number dialog field is modifed
    /// </summary>
    /// <param name="_stringControl">
    /// A <c>FormStringControl</c> reference for which to create the lookup.
    /// </param>
    public void registrationNumberTextChange(FormStringControl _regNumberControl)
    {
        this.refreshStateAndCity();
        _regNumberControl.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshStateAndCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh State and City field on report dialog box
    /// </summary>
    private void refreshStateAndCity()
    {
        TaxRegistrationNumber       selectedRegNumbers;
        TaxRegistration             taxRegistration;
        DirPartyPostalAddressView   dirPartyPostalAddressView;
        utcdatetime                 theMinDate = DateTimeUtil::minValue();
        utcdatetime                 theMaxDate = DateTimeUtil::maxValue();

        selectedRegNumbers = dialogFieldRegNumbers.value();

        if (selectedRegNumbers
            // Only one registration number is selected
            && !strContains(selectedRegNumbers, #Semicolon))
        {
            select firstonly validtimestate(theMinDate, theMaxDate) RecId from taxRegistration
                where taxRegistration.RegistrationNumber == selectedRegNumbers
                join dirPartyPostalAddressView
                    where dirPartyPostalAddressView.PartyLocation == taxRegistration.DirPartyLocation
                        && dirPartyPostalAddressView.Party        == companyInfoRecordId;
        }

        dialogFieldStateId.value(dirPartyPostalAddressView.State);
        assetDepreciableAssetsContract_JP.parmStateId(dirPartyPostalAddressView.State);

        dialogFieldCity.value(dirPartyPostalAddressView.City);
        assetDepreciableAssetsContract_JP.parmCity(dirPartyPostalAddressView.City);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>