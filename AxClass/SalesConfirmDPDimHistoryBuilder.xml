<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmDPDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesConfirmDPDimHistoryBuilder</c> class builds the storage Dimension and the data to be entered to temporary table for the <c>SalesConfirmDP</c> class.
/// </summary>
class SalesConfirmDPDimHistoryBuilder extends SalesPurchDimHistoryBuilder
{
    private CustConfirmJour         custConfirmJour;
    private CustConfirmTrans        custConfirmTrans;
    private boolean                 isProforma;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isDeferPost</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean isDeferPost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustConfirmJour</Name>
				<Source><![CDATA[
    public CustConfirmJour parmCustConfirmJour(CustConfirmJour _custConfirmJour = custConfirmJour)
    {
        custConfirmJour = _custConfirmJour;
        return custConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustConfirmTrans</Name>
				<Source><![CDATA[
    public CustConfirmTrans parmCustConfirmTrans(CustConfirmTrans _custConfirmTrans = custConfirmTrans)
    {
        custConfirmTrans = _custConfirmTrans;
        return custConfirmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProforma</Name>
				<Source><![CDATA[
    public boolean parmIsProforma(boolean _isProforma = isProforma)
    {
        isProforma = _isProforma;
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return custConfirmTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitOfMeasure</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol lineUnitOfMeasure()
    {
        return custConfirmTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantity</Name>
				<Source><![CDATA[
    protected Qty lineQuantity()
    {
        return custConfirmTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForVersion()
    {
        InventReportDimHistory inventReportDimHistory;
        InventDim inventDim;

        while select Qty from inventReportDimHistory
            where inventReportDimHistory.InventTransId        == custConfirmTrans.InventTransId               &&
                    inventReportDimHistory.TransRefId         == custConfirmTrans.ConfirmId                   &&
                    inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::SalesConfirm
            join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId
        {
            this.inventDimPrint(inventReportDimHistory.Qty, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return custConfirmJour.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProformaDimensionStringForStockedProduct</Name>
				<Source><![CDATA[
    protected void buildProformaDimensionStringForStockedProduct()
    {
        InventQty qtyRemain = custConfirmTrans.InventQty;

        if (qtyRemain)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            while select inventTransOrigin
                where inventTransOrigin.InventTransId       == custConfirmTrans.InventTransId &&
                        inventTransOrigin.ReferenceCategory == InventTransType::Sales
                join inventTrans
                    order by StatusIssue, InventDimId
                    where inventTrans.InventTransOrigin   == inventTransOrigin.RecId      &&
                            inventTrans.StatusReceipt     == StatusReceipt::None          &&
                            (inventTrans.StatusIssue      == StatusIssue::ReservPhysical  ||
                            inventTrans.StatusIssue       == StatusIssue::ReservOrdered   ||
                            inventTrans.StatusIssue       == StatusIssue::OnOrder)
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
            {
                if (this.mustPrintTransactionQuantity(inventTransOrigin, inventTrans, inventDim))
                {
                    qtyRemain = this.inventDimPrintForTransaction(qtyRemain, inventTrans.Qty, inventDim);

                    if (!qtyRemain)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    protected boolean isProforma()
    {
        return isProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProduct</Name>
				<Source><![CDATA[
    protected boolean isStockedProduct()
    {
        return custConfirmTrans.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesConfirmDPDimHistoryBuilder construct()
    {
        return new SalesConfirmDPDimHistoryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>