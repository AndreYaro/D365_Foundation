<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingEventHandlerBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The batch job to invoke the detailed data event handlers of price change related tables.
/// With this batch job, the data event handlers are converted to async and the failures will be consumed to fallback to a full refresh. 
/// </summary>
internal class RetailPriceChangeTrackingEventHandlerBatch extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    const int RetryMax = 3;

    private DataEventType dataEventType;
    private container senderCon;
    private container originalCon;
    private str methodName;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        dataEventType,
        senderCon,
        originalCon
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    internal void process()
    {
        Common sender = con2Buf(senderCon);
        Common original = con2Buf(originalCon);
        int64 tableId = sender.TableId;
        DataEventArgs e = null;

        switch([tableId, dataEventType])
        {
            case [tableNum(InventTableModule), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingBasePriceEventHandler), staticMethodStr(RetailPriceChangeTrackingBasePriceEventHandler, InventTableModule_onUpdated));
                RetailPriceChangeTrackingBasePriceEventHandler::InventTableModule_onUpdated(sender, original, e);
                break;
            case [tableNum(InventTableModule), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingBasePriceEventHandler), staticMethodStr(RetailPriceChangeTrackingBasePriceEventHandler, InventTableModule_onInserted));
                RetailPriceChangeTrackingBasePriceEventHandler::InventTableModule_onInserted(sender, original, e);
                break;
            case [tableNum(InventTableModule), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingBasePriceEventHandler), staticMethodStr(RetailPriceChangeTrackingBasePriceEventHandler, InventTableModule_onDeleted));
                RetailPriceChangeTrackingBasePriceEventHandler::InventTableModule_onDeleted(sender, original, e);
                break;
            case [tableNum(RetailInventTable), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingBasePriceEventHandler), staticMethodStr(RetailPriceChangeTrackingBasePriceEventHandler, RetailInventTable_onUpdated));
                RetailPriceChangeTrackingBasePriceEventHandler::RetailInventTable_onUpdated(sender, original, e);
                break;

            case [tableNum(RetailDiscountOffer), DataEventType::Updated]:
            case [tableNum(RetailPeriodicDiscount), DataEventType::Updated]: // Price adjustment.
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailPeriodicDiscount_onUpdated));
                RetailPriceChangeTrackingDiscountEventHandler::RetailPeriodicDiscount_onUpdated(sender, original, e);
                break;
            case [tableNum(RetailDiscountOffer), DataEventType::Deleted]:
            case [tableNum(RetailPeriodicDiscount), DataEventType::Deleted]: // Price adjustment.
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailPeriodicDiscount_onDeleted));
                RetailPriceChangeTrackingDiscountEventHandler::RetailPeriodicDiscount_onDeleted(sender, original, e);
                break;
            case [tableNum(RetailPeriodicDiscountLine), DataEventType::Updated]:
            case [tableNum(RetailDiscountLineOffer), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailPeriodicDiscountLine_onUpdated));
                RetailPriceChangeTrackingDiscountEventHandler::RetailPeriodicDiscountLine_onUpdated(sender, original, e);
                break;
            case [tableNum(RetailPeriodicDiscountLine), DataEventType::Inserted]:
            case [tableNum(RetailDiscountLineOffer), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailPeriodicDiscountLine_onInserted));
                RetailPriceChangeTrackingDiscountEventHandler::RetailPeriodicDiscountLine_onInserted(sender, original, e);
                break;
            case [tableNum(RetailPeriodicDiscountLine), DataEventType::Deleted]:
            case [tableNum(RetailDiscountLineOffer), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailPeriodicDiscountLine_onDeleted));
                RetailPriceChangeTrackingDiscountEventHandler::RetailPeriodicDiscountLine_onDeleted(sender, original, e);
                break;
            case [tableNum(RetailGroupMemberLine), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailGroupMemberLine_onUpdated));
                RetailPriceChangeTrackingDiscountEventHandler::RetailGroupMemberLine_onUpdated(sender, original, e);
                break;
            case [tableNum(RetailGroupMemberLine), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailGroupMemberLine_onInserted));
                RetailPriceChangeTrackingDiscountEventHandler::RetailGroupMemberLine_onInserted(sender, original, e);
                break;
            case [tableNum(RetailGroupMemberLine), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingDiscountEventHandler), staticMethodStr(RetailPriceChangeTrackingDiscountEventHandler, RetailGroupMemberLine_onDeleted));
                RetailPriceChangeTrackingDiscountEventHandler::RetailGroupMemberLine_onDeleted(sender, original, e);
                break;

            case [tableNum(RetailChannelTable), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingParametersEventHandler), staticMethodStr(RetailPriceChangeTrackingParametersEventHandler, RetailChannelTable_onUpdated));
                RetailPriceChangeTrackingParametersEventHandler::RetailChannelTable_onUpdated(sender, original, e);
                break;
            case [tableNum(SalesParameters), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingParametersEventHandler), staticMethodStr(RetailPriceChangeTrackingParametersEventHandler, SalesParameters_onUpdated));
                RetailPriceChangeTrackingParametersEventHandler::SalesParameters_onUpdated(sender, original, e);
                break;
            case [tableNum(PriceParameters), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingParametersEventHandler), staticMethodStr(RetailPriceChangeTrackingParametersEventHandler, PriceParameters_onUpdated));
                RetailPriceChangeTrackingParametersEventHandler::PriceParameters_onUpdated(sender, original, e);
                break;

            case [tableNum(RetailDiscountPriceGroup), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailDiscountPriceGroup_onUpdated));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailDiscountPriceGroup_onUpdated(sender, original, e);
                break;
            case [tableNum(RetailDiscountPriceGroup), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailDiscountPriceGroup_onInserted));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailDiscountPriceGroup_onInserted(sender, original, e);
                break;
            case [tableNum(RetailDiscountPriceGroup), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailDiscountPriceGroup_onDeleted));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailDiscountPriceGroup_onDeleted(sender, original, e);
                break;
            case [tableNum(RetailCatalogPriceGroup), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailCatalogPriceGroup_onUpdated));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailCatalogPriceGroup_onUpdated(sender, original, e);
                break;
            case [tableNum(RetailCatalogPriceGroup), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailCatalogPriceGroup_onInserted));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailCatalogPriceGroup_onInserted(sender, original, e);
                break;
            case [tableNum(RetailCatalogPriceGroup), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailCatalogPriceGroup_onDeleted));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailCatalogPriceGroup_onDeleted(sender, original, e);
                break;
            case [tableNum(RetailChannelPriceGroup), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailChannelPriceGroup_onUpdated));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailChannelPriceGroup_onUpdated(sender, original, e);
                break;
            case [tableNum(RetailChannelPriceGroup), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailChannelPriceGroup_onInserted));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailChannelPriceGroup_onInserted(sender, original, e);
                break;
            case [tableNum(RetailChannelPriceGroup), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingPriceGroupEventHandler), staticMethodStr(RetailPriceChangeTrackingPriceGroupEventHandler, RetailChannelPriceGroup_onDeleted));
                RetailPriceChangeTrackingPriceGroupEventHandler::RetailChannelPriceGroup_onDeleted(sender, original, e);
                break;

            case [tableNum(EcoResProductCategory), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, EcoResProductCategory_onUpdated));
                RetailPriceChangeTrackingProductEventHandler::EcoResProductCategory_onUpdated(sender, original, e);
                break;
            case [tableNum(EcoResProductCategory), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, EcoResProductCategory_onInserted));
                RetailPriceChangeTrackingProductEventHandler::EcoResProductCategory_onInserted(sender, original, e);
                break;
            case [tableNum(EcoResProductCategory), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, EcoResProductCategory_onDeleted));
                RetailPriceChangeTrackingProductEventHandler::EcoResProductCategory_onDeleted(sender, original, e);
                break;

            case [tableNum(CatalogProduct), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, CatalogProduct_onUpdated));
                RetailPriceChangeTrackingProductEventHandler::CatalogProduct_onUpdated(sender, original, e);
                break;
            case [tableNum(CatalogProduct), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, CatalogProduct_onInserted));
                RetailPriceChangeTrackingProductEventHandler::CatalogProduct_onInserted(sender, original, e);
                break;
            case [tableNum(CatalogProduct), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, CatalogProduct_onDeleted));
                RetailPriceChangeTrackingProductEventHandler::CatalogProduct_onDeleted(sender, original, e);
                break;

            case [tableNum(PriceDiscTable), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingTradeAgreementEventHandler), staticMethodStr(RetailPriceChangeTrackingTradeAgreementEventHandler, PriceDiscTable_onUpdated));
                RetailPriceChangeTrackingTradeAgreementEventHandler::PriceDiscTable_onUpdated(sender, original, e);
                break;
            case [tableNum(PriceDiscTable), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingTradeAgreementEventHandler), staticMethodStr(RetailPriceChangeTrackingTradeAgreementEventHandler, PriceDiscTable_onInserted));
                RetailPriceChangeTrackingTradeAgreementEventHandler::PriceDiscTable_onInserted(sender, original, e);
                break;
            case [tableNum(PriceDiscTable), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingTradeAgreementEventHandler), staticMethodStr(RetailPriceChangeTrackingTradeAgreementEventHandler, PriceDiscTable_onDeleted));
                RetailPriceChangeTrackingTradeAgreementEventHandler::PriceDiscTable_onDeleted(sender, original, e);
                break;

            case [tableNum(InventDimCombination), DataEventType::Updated]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, InventDimCombination_onUpdated));
                RetailPriceChangeTrackingProductEventHandler::InventDimCombination_onUpdated(sender, original, e);
                break;
            case [tableNum(InventDimCombination), DataEventType::Inserted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, InventDimCombination_onInserted));
                RetailPriceChangeTrackingProductEventHandler::InventDimCombination_onInserted(sender, original, e);
                break;
            case [tableNum(InventDimCombination), DataEventType::Deleted]:
                methodName = strFmt('%1 + %2', classStr(RetailPriceChangeTrackingProductEventHandler), staticMethodStr(RetailPriceChangeTrackingProductEventHandler, InventDimCombination_onDeleted));
                RetailPriceChangeTrackingProductEventHandler::InventDimCombination_onDeleted(sender, original, e);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        System.Exception ex;
        boolean needFullRefresh = false;
        int retryCount = 0;

        try
        {
            this.process();
        }
        catch(Exception::UpdateConflict)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(classStr(RetailPriceChangeTrackingEventHandlerBatch), methodName);
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                // Swallow the exception as we don't want to interrupt the main business scenario. And fall back to trigger full refresh.
                needFullRefresh = true;
            }
        }
        catch(Exception::DuplicateKeyException)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(classStr(RetailPriceChangeTrackingEventHandlerBatch), methodName);
            exceptionTelemetry.addExtendedData('Retry count', int2Str(retryCount));
            exceptionTelemetry.log();

            if (retryCount < RetryMax)
            {
                retryCount++;
                retry;
            }
            else
            {
                // Swallow the exception as we don't want to interrupt the main business scenario. And fall back to trigger full refresh.
                needFullRefresh = true;
            }
        }
        catch(ex)
        {
            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(classStr(RetailPriceChangeTrackingEventHandlerBatch), methodName);
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();

            // Swallow the exception as we don't want to interrupt the main business scenario. And fall back to trigger full refresh.
            needFullRefresh = true;
        }
        finally
        {
            if (needFullRefresh)
            {
                eventSource.EventWritePriceChangeTrackingFullRefresh(
                    'data event handler failure',
                    classStr(RetailPriceChangeTrackingEventHandlerBatch),
                    methodName,
                    '');

                RetailPriceChangeTracking::writeFullRefreshRecord();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceChangeTrackingEventHandlerBatch construct()
    {
        var batch = new RetailPriceChangeTrackingEventHandlerBatch();
        RetailPriceChangeTrackingHelper::setBatchGroup(batch);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailPriceChangeTrackingEventHandlerBatch scheduler = new RetailPriceChangeTrackingEventHandlerBatch();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [SysObsolete('Method deprecated. Please use batchInfo().parmCaption() instead.', false, 17\05\2023)]
    public static ClassDescription description()
    {
        return "@RetailPricing:RetailPriceChangeTrackingEventHandlerBatchLabel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the job must be run in batch.
    /// </summary>
    /// <returns>Always return true.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataEventType</Name>
				<Source><![CDATA[
    public DataEventType parmDataEventType(DataEventType _dataEventType = dataEventType)
    {
        dataEventType = _dataEventType;
        return dataEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSender</Name>
				<Source><![CDATA[
    public container parmSender(container _senderCon = senderCon)
    {
        senderCon = _senderCon;
        return senderCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginal</Name>
				<Source><![CDATA[
    public container parmOriginal(container _originalCon = originalCon)
    {
        originalCon = _originalCon;
        return originalCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailPriceChangeTrackingCategoryBatchTask</c> class
    ///  can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailPriceChangeTrackingCategoryBatchTask</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopTriggeredInstances</Name>
				<Source><![CDATA[
    /// <summary>
    /// stop the triggered instances of this batch jobs.
    /// </summary>
    internal static void stopTriggeredInstances()
    {
        BatchJob batchJob;
        Batch batch;
        int eventHandlerBatchClassNum = classNum(RetailPriceChangeTrackingEventHandlerBatch);

        ttsbegin;

        // Stop means set the status to Hold and clear the recurrence data.
        update_recordset batchJob setting recurrenceData = conNull(), Status = BatchStatus::Hold
            where  batchJob.Status == BatchStatus::Executing
                || batchJob.Status == BatchStatus::Waiting
                || batchJob.Status == BatchStatus::Ready
                || batchJob.Status == BatchStatus::Scheduled
        join batch
            where batch.BatchJobId == batchJob.RecId && batch.ClassNumber == eventHandlerBatchClassNum;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>