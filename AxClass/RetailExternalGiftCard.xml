<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailExternalGiftCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
using RetailSDK=Microsoft.Dynamics.Retail.PaymentSDK.Portable;
using RetailConst=Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants;

/// <summary>
/// The <c>RetailExternalGiftCard</c> class transports the external gift card data.
/// </summary>
public class RetailExternalGiftCard
{
    /// <summary>
    /// Reference to RetailExternalGiftCardTable RecId
    /// </summary>
    public RecId RetailExternalGiftCardRecId;

    /// <summary>
    /// Teference to CreditCardAuthTransTable RecId
    /// </summary>
    public RecId CreditCardAuthTransRecId;

    /// <summary>
    /// The card number for the gift card.
    /// </summary>
    public str CardNumber;

    /// <summary>
    /// The pin for the gift card.
    /// </summary>
    public str Pin;

    /// <summary>
    /// The expiration for the gift card.
    /// </summary>
    public str Expiration;

    /// <summary>
    /// Is the pin required for this gift card.
    /// </summary>
    public boolean RequirePin;

    /// <summary>
    /// Is the expiration date required for this gift card.
    /// </summary>
    public boolean RequireExpirationDate;

    
    /// <summary>
    /// Reference to CreditCardAccountSetup RecId
    /// </summary>
    public CreditCardProcessorsId ActivationProcessorsRecId;

    /// <summary>
    /// Reference to SalesLine RecId
    /// </summary>
    public RecId ActivationSalesLineRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateMCRPaymentCardRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the external gift card payment card request (Like credit card token but with card number).
    /// </summary>
    /// <param name="_mcrCustPaymTable">The reference mcrCustPaymTable.</param>
    /// <returns>The CreditCardPaymentProperties for the call center payment.</returns>
    [Hookable(false)]
    public CreditCardPaymentProperties generateMCRPaymentCardRequest(MCRCustPaymTable _mcrCustPaymTable)
    {
        CreditCardPaymentProperties properties = CreditCardPaymentProperties::construct();

        if (_mcrCustPaymTable.PaymInfoRecId)
        {
            if (_mcrCustPaymTable.isExternalGiftCardPayment())
            {
                RetailExternalGiftCardTable retailExternalGiftCardTable = RetailExternalGiftCardTable::findById(_mcrCustPaymTable.PaymInfoRecId);

                if (retailExternalGiftCardTable)
                {
                    CreditCardAccountSetup creditCardAccountSetup = CreditCardAccountSetup::find(retailExternalGiftCardTable.CreditCardProcessors);

                    properties = this.generatePaymentCardRequest(creditCardAccountSetup);

                }
                else
                {
                    throw error("@Retail:RetailExternalGiftCardTableEntryMissing");
                }
            }
            else
            {
                throw error("@Retail:RetailNotExternalGiftCardUnSupported");
            }
        }
        else
        {
            throw error("@Retail:RetailMissingMCRCustPaymTable");
        }

        return properties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentCardRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the external gift card payment card request (Like credit card token but with card number).
    /// </summary>
    /// <param name="_creditCardAccountSetup">The reference credit card processor.</param>
    /// <returns>The CreditCardPaymentProperties for a payment card request.</returns>
    [Hookable(false)]
    public CreditCardPaymentProperties generatePaymentCardRequest(CreditCardAccountSetup _creditCardAccountSetup)
    {
        CreditCardPaymentProperties properties = CreditCardPaymentProperties::construct();

        if (_creditCardAccountSetup)
        {
            str merchant = _creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(false, '');
            CreditCardPaymentProperties creditCardPaymentProperties = CreditCardPaymentProperties::fromXmlString(merchant);

            CreditCardPaymentProperty property = creditCardPaymentProperties.find(RetailConst.GenericNamespace::get_MerchantAccount(), RetailConst.MerchantAccountProperties::get_ServiceAccountId());
            str serviceId = property ? property.parmStringValue() : '';

            properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_Connector(), RetailConst.ConnectorProperties::get_ConnectorName(), _creditCardAccountSetup.ConnectorName));
            properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_MerchantAccount(), RetailConst.MerchantAccountProperties::get_ServiceAccountId(), serviceId));

            properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_CardType(), RetailSDK.CardType::GiftCard.ToString()));
            properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_CardNumber(), this.CardNumber));

            if (this.Pin != '')
            {
                properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_CardVerificationValue(), this.Pin));
            }

            // Expiration in MMYY format but must be converted to decimal
            if (this.Expiration != '')
            {
                if (strLen(this.Expiration) != 4)
                {
                    throw error("@Retail:RetailGiftCardExpirationNotValid");
                }

                real month = str2Num(subStr(this.Expiration, 1, 2));
                real year = str2Num(subStr(this.Expiration, 3, 2));
                properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_ExpirationMonth(), month));
                properties.add(CreditCardPaymentProperty::newValue(RetailConst.GenericNamespace::get_PaymentCard(), RetailConst.PaymentCardProperties::get_ExpirationYear(), year));
            }
        }
        else
        {
            throw error("@Retail:RetailExternalGiftCardProcessorMissing");
        }

        return properties;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>