<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmEntityCopy_Opportunity</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmEntityCopy_Opportunity extends SmmEntityCopy
{
    DialogField fieldSwotAnalysis;
    DialogField fieldCompetitors;
    DialogField fieldLeads;
    DialogField fieldOpportunities;

    smmOpportunityRelTable  smmOpportunityRelTable, smmOpportunityRelTableCopy;
    smmOpportunityTable     smmOpportunityTable, smmOpportunityTableCopy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyCampaigns</Name>
				<Source><![CDATA[
    // Copy all campaigns related to the entity
    private void copyCampaigns()
    {
        insert_recordset smmOpportunityRelTableCopy (RefTableId, RefRecId, OpportunityId)
            select RefTableId, RefRecId from smmOpportunityRelTable
                where smmOpportunityRelTable.RefTableId == (tablenum(smmCampaignTable)) &&
                      smmOpportunityRelTable.OpportunityId == commonOrig.(fieldId)
            join OpportunityId from smmOpportunityTableCopy
                where smmOpportunityTableCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCompetitors</Name>
				<Source><![CDATA[
    // Copy all competitors related to the entity
    private void copyCompetitors()
    {
        boolean                         winner = NoYes::No;
        smmQuotationCompetitors         smmQuotationCompetitors, smmQuotationCompetitorsCopy;

        insert_recordset smmQuotationCompetitorsCopy (QuotationWinner, Party , RefTableId, RefRecId)
            select winner, Party, RefTableId from smmQuotationCompetitors
                where smmQuotationCompetitors.RefTableId == commonOrig.TableId &&
                      smmQuotationCompetitors.RefRecId == commonOrig.RecId
            join RecId from commonCopy
                where commonCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyLeads</Name>
				<Source><![CDATA[
    // Copy all leads related to the entity
    private void copyLeads()
    {
        insert_recordset smmOpportunityRelTableCopy (RefTableId, RefRecId, OpportunityId)
            select RefTableId, RefRecId from smmOpportunityRelTable
                where smmOpportunityRelTable.RefTableId == (tablenum(smmLeadTable)) &&
                      smmOpportunityRelTable.OpportunityId == commonOrig.(fieldId)
            join OpportunityId from smmOpportunityTableCopy
                where smmOpportunityTableCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyOpportunities</Name>
				<Source><![CDATA[
    // Copy all opportunities related to the entity
    private void copyOpportunities()
    {
        insert_recordset smmOpportunityRelTableCopy (RefTableId, RefRecId, OpportunityId)
            select RefTableId, RefRecId from smmOpportunityRelTable
                where smmOpportunityRelTable.RefTableId == (tablenum(smmOpportunityTable)) &&
                      smmOpportunityRelTable.OpportunityId == commonOrig.(fieldId)
            join OpportunityId from smmOpportunityTableCopy
                where smmOpportunityTableCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjects</Name>
				<Source><![CDATA[
    // Copy all projects related to the entity
    private void copyProjects()
    {
        insert_recordset smmOpportunityRelTableCopy (RefTableId, RefRecId, OpportunityId)
            select RefTableId, RefRecId from smmOpportunityRelTable
                where smmOpportunityRelTable.RefTableId == (tablenum(ProjTable)) &&
                      smmOpportunityRelTable.OpportunityId == commonOrig.(fieldId)
            join OpportunityId from smmOpportunityTableCopy
                where smmOpportunityTableCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRecords</Name>
				<Source><![CDATA[
    // Copy additional records specific for Opportunity
    public void copyRecords()
    {
        super();

        if (includeSwotAnalysis)
        {
            this.copySwotAnalysis();
        }

        if (includeCompetitors)
        {
            this.copyCompetitors();
        }

        if (includeCampaigns)
        {
            this.copyCampaigns();
        }

        if (includeLeads)
        {
            this.copyLeads();
        }

        if (includeOpportunities)
        {
            this.copyOpportunities();
        }

        if (includeProjects)
        {
            this.copyProjects();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySwotAnalysis</Name>
				<Source><![CDATA[
    // Copy all swot analysis related to the entity
    private void copySwotAnalysis()
    {
        smmSwotTable                    smmSwotTable, smmSwotTableCopy;

        insert_recordset smmSwotTableCopy (Product, Type, Note, RefTableId, RefRecId)
            select Product, Type, Note, RefTableId from smmSwotTable
                where smmSwotTable.RefTableId == commonOrig.TableId &&
                      smmSwotTable.RefRecId == commonOrig.RecId
            join RecId from commonCopy
                where commonCopy.RecId == copyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the
    /// <c>RunBaseDialogable</c>interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Object ret;

        ret = super();

        fieldCompetitors        =   dialog.addFieldValue(extendedTypeStr(smmIncludeCompetitors),     includeCompetitors);
        fieldSwotAnalysis       =   dialog.addFieldValue(extendedTypeStr(smmIncludeSwotAnalysis),    includeSwotAnalysis);
        fieldLeads              =   dialog.addFieldValue(extendedTypeStr(smmIncludeLeads),           includeLeads);
        fieldOpportunities      =   dialog.addFieldValue(extendedTypeStr(smmIncludeOpportunities),   includeOpportunities);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmIncludeCompetitors(fieldCompetitors.value());
        this.parmIncludeLeads(fieldLeads.value());
        this.parmIncludeOpportunities(fieldOpportunities.value());
        this.parmIncludeSwotAnalysis(fieldSwotAnalysis.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkRecords</Name>
				<Source><![CDATA[
    // Create a link between the copied and the original record
    public void linkRecords()
    {
        super();

        smmOpportunityRelTable.clear();
        smmOpportunityRelTable.OpportunityId = commonOrig.(fieldId);
        smmOpportunityRelTable.RefTableId = commonCopy.TableId;
        smmOpportunityRelTable.RefRecId = commonCopy.RecId;
        smmOpportunityRelTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommonOrigTable</Name>
				<Source><![CDATA[
    public Common parmCommonOrigTable(Common _commonOrig = commonOrig)
    {
        Common ret;

        ret = super(_commonOrig);

        fieldId = fieldnum(smmOpportunityTable, OpportunityId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFieldId</Name>
				<Source><![CDATA[
    public fieldId processFieldId()
    {
        return fieldnum(smmOpportunityTable,ProcessName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainFields</Name>
				<Source><![CDATA[
    // Set fields that should not be copied from the original record
    public void setMainFields()
    {
        smmOpportunityTable = commonOrig;

        smmOpportunityTableCopy.clear();
        smmOpportunityTableCopy.data(smmOpportunityTable);
        commonCopy.data(commonOrig);
        smmOpportunityTableCopy.OpenedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        smmOpportunityTableCopy.OpenedByWorker = smmUtility::getCurrentContactWorker();
        smmOpportunityTableCopy.Status = smmOpportunityStatus::Active;
        smmOpportunityTableCopy.Party = smmOpportunityTable.Party;
        smmOpportunityTableCopy.OpportunityId = smmParameters::getNumber(smmNumbSeqUsed::OpportunityId);

        // Clear Process name if not active
        if (smmOpportunityTable.ProcessName &&
        !Hierarchy::findByNameType(smmOpportunityTable.ProcessName,HierarchyType::Opportunity,true).IsActive)
        {
            smmOpportunityTableCopy.ProcessName = '';
        }

        if (!smmOpportunityTableCopy.OpportunityId)
        {
            // Number sequence not setup correctly for opportunity. Copy was canceled.
            throw error("@SYS105092");
        }

        commonCopy = smmOpportunityTableCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS105091";    // Copy opportunity
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>