<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaSubscriptionGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SmaSubscriptionGenerator extends SMAGenerator
{
    SMASubscriptionPeriodType   smaSubscriptionPeriodType;
    SMASubscriptionCreate       smaSubscriptionCreate;
    SMASubscriptionTable        smaSubscriptionTable;
    ProjPost                    projPost;
    TransDate                   curInvoicePeriodFrom;
    TransDate                   curInvoicePeriodTo;
    TransDate                   actualStartDate;
    TransDate                   actualEndDate;
    TransDate                   actualErrorEndDate;
    TransDate                   actualErrorStartDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected void action()
    {
        this.createTrans();
        this.infoMessage();
        this.infoMessage("@SYS84243", smaSubscriptionTable.SubscriptionId, this.actualErrorStartDate(), this.actualErrorEndDate(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualEndDate</Name>
				<Source><![CDATA[
    public TransDate actualEndDate(TransDate _actualEndDate = actualEndDate)
    {
        if (_actualEndDate > actualEndDate)
        {
            actualEndDate = _actualEndDate;
        }

        return actualEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualErrorEndDate</Name>
				<Source><![CDATA[
    public TransDate actualErrorEndDate(TransDate _actualErrorEndDate = actualErrorEndDate)
    {
        if (_actualErrorEndDate > actualErrorEndDate)
        {
            actualErrorEndDate = _actualErrorEndDate;
        }

        return actualErrorEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualErrorStartDate</Name>
				<Source><![CDATA[
    public TransDate actualErrorStartDate(TransDate _actualErrorStartDate = actualErrorStartDate)
    {
        if (_actualErrorStartDate < actualErrorStartDate || actualErrorStartDate == dateNull())
        {
            actualErrorStartDate = _actualErrorStartDate;
        }
        return actualErrorStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>actualStartDate</Name>
				<Source><![CDATA[
    public TransDate actualStartDate(TransDate _actualStartDate = actualStartDate)
    {
        if (_actualStartDate < actualStartDate || actualStartDate == dateNull())
        {
            actualStartDate = _actualStartDate;
        }
        return actualStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowZeroSalesprice</Name>
				<Source><![CDATA[
    public boolean allowZeroSalesprice()
    {
        return smaSubscriptionCreate.parmallowZeroSalesPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>curInvoicePeriodFrom</Name>
				<Source><![CDATA[
    public TransDate curInvoicePeriodFrom(TransDate _curInvoicePeriodFrom = curInvoicePeriodFrom)
    {
        curInvoicePeriodFrom = _curInvoicePeriodFrom;
        return curInvoicePeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>curInvoicePeriodTo</Name>
				<Source><![CDATA[
    public TransDate curInvoicePeriodTo(TransDate _curInvoicePeriodTo = curInvoicePeriodTo)
    {
        curInvoicePeriodTo = _curInvoicePeriodTo;
        return curInvoicePeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    public TransDate fromDate()
    {
        if (smaSubscriptionCreate.parmInvoicePeriod())
        {
            return smaSubscriptionCreate.parmProjPeriodFrom();
        }
        else
        {
            return smaSubscriptionCreate.parmStartDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeriodType</Name>
				<Source><![CDATA[
    public SMASubscriptionPeriodType getPeriodType(TransDate _fromdate, TransDate _todate, ProjPeriodId _projPeriodId = smaSubscriptionTable.invoicePeriodCode())
    {
        return SMASubscriptionTable::getPeriodType(_fromdate, _todate, _projPeriodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesprice</Name>
				<Source><![CDATA[
    public Amount getSalesprice(TransDate _subPeriodFrom,
                                TransDate _subPeriodTo,
                                TransDate _invPeriodFrom = this.curInvoicePeriodFrom(),
                                TransDate _invPeriodTo   = this.curInvoicePeriodTo())
    {
        return smaSubscriptionTable.getSalesprice(  smaSubscriptionCreate.parmpctPriceChange(),
                                                    smaSubscriptionCreate.parmGetPriceFrom(),
                                                    _subPeriodFrom,
                                                    _subPeriodTo,
                                                    _invPeriodFrom,
                                                    _invPeriodTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoMessage</Name>
				<Source><![CDATA[
    public void infoMessage(str                 _messageText         = this.messageText(),
                            SMASubscriptionId   _smaSubscriptionId   = smaSubscriptionTable.SubscriptionId,
                            TransDate           _startDate           = this.actualStartDate(),
                            TransDate           _endDate             = this.actualEndDate(),
                            boolean             _error = false)
    {
        if (! _endDate || !_startDate)
        {
            return;
        }

        smaSubscriptionCreate.addToMessageList(strfmt( _messageText, _smaSubscriptionId, date2StrUsr(_startDate, DateFlags::FormatAll), date2StrUsr(_endDate, DateFlags::FormatAll)), _error);
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageText</Name>
				<Source><![CDATA[
    public str messageText()
    {
        // Subscription '%1' created, from start date '%2', to end date %3.
        return "@SYS84230";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SMASubscriptionCreate _smaSubscriptionCreate)
    {
        smaSubscriptionCreate   = _smaSubscriptionCreate;
        smaSubscriptionTable    = SMASubscriptionTable::find(smaSubscriptionCreate.smaSubscriptionId(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesDistributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Distributes the subscription sales price based on funding rule allocation defined.
    /// </summary>
    /// <returns>
    /// A Map
    /// </returns>
    /// <param name="_SalesPrice">
    /// The value sales price.
    /// </param>
    /// <param name="_projRevenueTrans">
    /// The buffer of <c>ProjRevenueTrans</c>
    /// </param>
    private Map createSalesDistributions(AmountCur _SalesPrice, ProjRevenueTrans _projRevenueTrans)
    {
        ProjFundingEngine       projFundingEngine;
        ProjTrans               projTrans;
        Map                     saleDistributions;

        saleDistributions = new Map(Types::Int64, Types::Real);

        projTrans               = ProjTrans::newProjRevenueTrans(_projRevenueTrans);
        projFundingEngine       = ProjFundingEngine::construct(projTrans, 0,  _salesPrice);

        if (projFundingEngine.allocate())
        {
            saleDistributions = projFundingEngine.parmSaleDistributions();
        }
        else
        {
            throw error("@SYS136009");
        }

        return saleDistributions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(   Amount                      _salesPrice,
                                TransDate                   _fromDateSubscribtion,
                                TransDate                   _toDateSubscribtion,
                                SMASubscriptionPeriodType   _periodType          = smaSubscriptionCreate.parmPeriodType())
    {
        
        if (!_salesPrice && !this.allowZeroSalesprice())
        {
            this.actualErrorStartDate(_fromDateSubscribtion);
            this.actualErrorEndDate(_toDateSubscribtion);
        }
        else
        {
            ProjRevenueTrans newCreatedProjRevenueTrans = this.createSubscriptionTransaction(_fromDateSubscribtion, _toDateSubscribtion, _periodType);

            // Creates a sales distribution based funding rule allocation priorities set for a project contract.
            MapEnumerator enumerateMap = new MapEnumerator(this.createSalesDistributions(_salesPrice, newCreatedProjRevenueTrans));

            while (enumerateMap.moveNext())
            {
                if (newCreatedProjRevenueTrans.Qty != 0)
                {
                    _salesPrice = enumerateMap.currentValue()/newCreatedProjRevenueTrans.Qty;
                }
                else
                {
                    // Set Qty value as 1
                    _salesPrice = enumerateMap.currentValue();
                }

                SMASubscriptionTable::createTransSale(newCreatedProjRevenueTrans, _salesPrice, enumerateMap.currentKey());
                smaSubscriptionCreate.addToRecordSortedList(newCreatedProjRevenueTrans);
            }

            this.actualStartDate(_fromDateSubscribtion);
            this.actualEndDate(_toDateSubscribtion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscriptionTransactionBasePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the subscription transaction's base price.
    /// </summary>
    /// <returns>The base price.</returns>
    protected Amount subscriptionTransactionBasePrice()
    {
        switch (smaSubscriptionCreate.parmGetPriceFrom())
        {
            case SMAGetPriceFrom::None:
            case SMAGetPriceFrom::SMAIndex:
                return smaSubscriptionTable.BasePrice;
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscriptionTransactionIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the subscription index for the transaction.
    /// </summary>
    /// <returns>The subscription index.</returns>
    protected SMAIndex subscriptionTransactionIndex()
    {
        switch (smaSubscriptionCreate.parmGetPriceFrom())
        {
            case SMAGetPriceFrom::None:
            case SMAGetPriceFrom::SMAIndex:
                return smaSubscriptionTable.SubscriptionIndex;
        }

        return 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubscriptionTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction that is associated with the subscription.
    /// </summary>
    /// <param name = "_fromDateSubscription">The start date of the subscription.</param>
    /// <param name = "_toDateSubscription">The end date of the subscription.</param>
    /// <param name = "_periodType">The subscription type.</param>
    /// <returns>The created transaction.</returns>
    protected ProjRevenueTrans createSubscriptionTransaction(TransDate                   _fromDateSubscription,
                                                             TransDate                   _toDateSubscription,
                                                             SMASubscriptionPeriodType   _periodType)
    {
        TransTxt transTxt = (smaSubscriptionCreate.parmTransTxt()) ? smaSubscriptionCreate.parmTransTxt() : smaSubscriptionTable.Name;

        return SMASubscriptionTable::createTrans(smaSubscriptionTable.SubscriptionId,
                                                 this.subscriptionTransactionBasePrice(),
                                                 this.subscriptionTransactionIndex(),
                                                 _fromDateSubscription,
                                                 _toDateSubscription,
                                                 _periodType,
                                                 smaSubscriptionCreate.parmpostingDate(),
                                                 transTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDate</Name>
				<Source><![CDATA[
    public void setDate()
    {
        smaSubscriptionTable.StartDate      = smaSubscriptionTable.getStartDate();
        smaSubscriptionTable.LatestEnddate  = smaSubscriptionTable.getLatestEndDate();

        smaSubscriptionTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    public TransDate toDate()
    {
        if (smaSubscriptionCreate.parmInvoicePeriod())
        {
            return smaSubscriptionCreate.parmProjPeriodTo();
        }
        else
        {
            return smaSubscriptionCreate.parmEndDate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SMASubscriptionGenerator construct(SMASubscriptionCreate _smaSubscriptionCreate)
    {
        switch (_smaSubscriptionCreate.parmPeriodType())
        {
            case SMASubscriptionPeriodType::Regular:
                return new SMASubscriptionGenerator_Regular(_smaSubscriptionCreate);

            case SMASubscriptionPeriodType::NonRegular:
                return new SMASubscriptionGenerator_NonRegular(_smaSubscriptionCreate);

            case SMASubscriptionPeriodType::ReductionDays:
                return new SMASubscriptionGenerator_ReductionDays(_smaSubscriptionCreate);

            case SMASubscriptionPeriodType::PriceChange:
                return new SMASubscriptionGenerator_PriceChange(_smaSubscriptionCreate);
        }
        throw error("@SYS84231");
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    public static void generate(SMASubscriptionCreate _smaSubscriptionCreate)
    {
        SMASubscriptionGenerator   smaSubscriptionGenerator = SMASubscriptionGenerator::construct(_smaSubscriptionCreate);
        smaSubscriptionGenerator.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>