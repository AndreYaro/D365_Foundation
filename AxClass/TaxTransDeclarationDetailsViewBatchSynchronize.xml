<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransDeclarationDetailsViewBatchSynchronize</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TaxTransDeclarationDetailsViewBatchSynchronize extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        appl.dbSynchronize(tableNum(TaxTransDeclarationDetailsView), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchJob</Name>
				<Source><![CDATA[
    internal static void createBatchJob()
    {
        if (TaxTransDeclarationDetailsViewBatchSynchronize::doesBatchJobExist())
        {
            throw error(strFmt(
                "@TaxDeclarationDetails:AnotherInstanceOfTheBatchJobScheduled",
                TaxTransDeclarationDetailsViewBatchSynchronize::batchCaption()));
        }

        TaxTransDeclarationDetailsViewBatchSynchronize processingController =
            new TaxTransDeclarationDetailsViewBatchSynchronize(
                classStr(TaxTransDeclarationDetailsViewBatchSynchronize),
                methodStr(TaxTransDeclarationDetailsViewBatchSynchronize, run),
                SysOperationExecutionMode::ScheduledBatch);

        processingController.scheduleBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchCaption</Name>
				<Source><![CDATA[
    internal static BatchCaption batchCaption()
    {
        return strFmt("@TaxDeclarationDetails:SynchronizeView", "@TaxDeclarationDetails:TaxDeclarationDetails");
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleBatch</Name>
				<Source><![CDATA[
    internal void scheduleBatch()
    {
        this.batchInfo().parmCaption(TaxTransDeclarationDetailsViewBatchSynchronize::batchCaption());
        this.batchInfo().parmRetriesOnFailure(1);
        this.batchInfo().parmBatchHeader().parmCaption(TaxTransDeclarationDetailsViewBatchSynchronize::batchCaption());
        this.doBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesBatchJobExist</Name>
				<Source><![CDATA[
    internal static boolean doesBatchJobExist()
    {
        Batch batch;
        BatchJob batchJob;

        select firstonly RecId from batchJob
            where batchJob.DataPartition == getCurrentPartition()
                && (batchJob.Status == BatchStatus::Ready
                    || batchJob.Status == BatchStatus::Waiting
                    || batchJob.Status == BatchStatus::Scheduled
                    || batchJob.Status == BatchStatus::Executing)
        exists join batch
            where batch.ClassNumber == classNum(TaxTransDeclarationDetailsViewBatchSynchronize)
                && batch.DataPartition == batchJob.DataPartition
                && batch.BatchJobId == batchJob.RecId;

        return batchJob.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>