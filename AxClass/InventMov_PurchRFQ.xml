<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_PurchRFQ</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(PurchRFQCaseLine))]
class InventMov_PurchRFQ extends InventMovement
{
    PurchRFQCaseLine    purchRFQCaseLine;

    boolean             physicalTaxCalculated;
    AmountMST           physicalSumTaxMst;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            cacheAccountBalanceSheet = purchRFQCaseLine.accountReceiptLedgerDimension();
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            cacheAccountOperations = purchRFQCaseLine.accountConsumptionLedgerDimension();
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysical</Name>
				<Source><![CDATA[
    public void addRemainPhysical(InventQty  _inventQty)
    {
        // RemainInventPhysical should only be updated for stocked items
        if (purchRFQCaseLine.isStocked())
        {
            purchRFQCaseLine.RemainInventPhysical += _inventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRemainPhysicalUnit</Name>
				<Source><![CDATA[
    public void addRemainPhysicalUnit(UnitQty _qtyUnit)
    {
        purchRFQCaseLine.RemainPurchPhysical += _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookId</Name>
				<Source><![CDATA[
    public AssetBookId assetBookId()
    {
        return purchRFQCaseLine.AssetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetId</Name>
				<Source><![CDATA[
    public AssetId assetId()
    {
        return purchRFQCaseLine.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_Orig)
    {
        boolean ret = true;

        if (_this_Orig && abs(this.transQty())  <  abs(_this_Orig.transQty()) && this.transQty() * _this_Orig.transQty() >= 0 )
        {
            if (_this_Orig.remainPhysicalUnit() == 0 && _this_Orig.remainFinancialUnit() == 0)
            {
                ret = checkFailed("@SYS25508");
            }
        }

        ret = ret && super(_updateNow, _this_Orig);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    public boolean checkUpdatePhysical(InventUpd_Physical _updateNow)
    {
        boolean ok = true;

        if (this.transQtyUnit() == 0)
        {
            ok = checkFailed("@SYS12170");
        }

        ok = super(_updateNow) && ok;
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && purchRFQCaseLine.RecId)
        {
            InventTransOriginPurchRFQCaseLine::writeOriginOwnerRelationship(purchRFQCaseLine.DataAreaId, purchRFQCaseLine.rfqCaseId, purchRFQCaseLine.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (purchRFQCaseLine.RecId)
        {
            InventTransOriginPurchRFQCaseLine::deleteOwnerRelationship(purchRFQCaseLine.DataAreaId, purchRFQCaseLine.rfqCaseId, purchRFQCaseLine.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enteredPcsPrice</Name>
				<Source><![CDATA[
    protected PriceCur enteredPcsPrice()
    {
        return purchRFQCaseLine.PurchPrice / (purchRFQCaseLine.PriceUnit ? purchRFQCaseLine.PriceUnit : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalTax</Name>
				<Source><![CDATA[
    protected AmountMST estimatedPhysicalTax(InventTrans _inventTrans)
    {
        AmountCur       amountCur = 0;
        AmountMST       amountMST = 0;

        PurchRFQCaseTable   purchRFQCaseTable = purchRFQCaseLine.purchRFQCaseTable();

        if (!this.mustBeBookedPhysicalTax())
        {
            return 0;
        }

        if (!purchRFQCaseLine.QtyOrdered)
        {
            return 0;
        }

        return CurrencyExchangeHelper::amount(physicalSumTaxMst * _inventTrans.Qty / purchRFQCaseLine.QtyOrdered);
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the estimated physical value for an inventory transaction.
    /// </summary>
    /// <param name="_inventTrans">
    /// The <c>inventTrans</c> record for which to get the estimated physical value.
    /// </param>
    /// <param name="_inventOnhand">
    /// The <c>InventOnHand</c> object.
    /// </param>
    /// <param name="_updateNow">
    /// The <c>InventUpdate</c> object.
    /// </param>
    /// <returns>
    /// The estimated physical value for the inventory transaction.
    /// </returns>
    protected CostAmount estimatedPhysicalValue(
        InventTrans         _inventTrans,
        InventOnhand        _inventOnhand,
        InventUpdate    _updateNow)
    {
        CostAmount  costAmount;
        AmountMST   lineAmountMSTExclTax;
        boolean     ok;

        if (_inventTrans.Qty >= 0 && purchRFQCaseLine.QtyOrdered > 0 && ! this.inventModelGroup().StandardCost)
        {
            ok = true;

            lineAmountMSTExclTax = purchRFQCaseLine.lineAmountMSTExclTax(_inventTrans.DatePhysical);
        }

        if ( ok && lineAmountMSTExclTax >= 0 )
        {
            costAmount = CurrencyExchangeHelper::amount(_inventTrans.Qty * lineAmountMSTExclTax / purchRFQCaseLine.QtyOrdered);
        }
        else
        {
            costAmount = super(_inventTrans,_inventOnhand, _updateNow);
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedPhysicalValueSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount estimatedPhysicalValueSecCur_RU(
        InventTrans     _inventTrans,
        InventOnhand    _inventOnhand,
        InventUpdate    _updateNow)
    {
        CostAmount  costAmount;
        AmountMST   lineAmountMSTExclTax;
        boolean     ok;

        if (_inventTrans.Qty >= 0 && purchRFQCaseLine.QtyOrdered > 0 && ! this.inventModelGroup().StandardCost)
        {
            ok = true;

            lineAmountMSTExclTax = purchRFQCaseLine.lineAmountMSTExclTax(_inventTrans.DatePhysical);
            lineAmountMSTExclTax = CurrencyExchangeHelper::amountMST2MSTSecond_RU(lineAmountMSTExclTax, _inventTrans.DatePhysical);
        }

        if ( ok && lineAmountMSTExclTax >= 0 )
        {
            costAmount = CurrencyExchangeHelper::amount(_inventTrans.Qty * lineAmountMSTExclTax / purchRFQCaseLine.QtyOrdered, CompanyInfoHelper::secondaryCurrency_RU());
        }
        else
        {
            costAmount = super(_inventTrans, _inventOnhand, _updateNow);
        }

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return purchRFQCaseLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefTransId</Name>
				<Source><![CDATA[
    public InventRefTransId inventRefTransId()
    {
        return purchRFQCaseLine.InventRefTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginPurchRFQCaseLine::findInventTransOriginId(purchRFQCaseLine.DataAreaId, purchRFQCaseLine.rfqCaseId, purchRFQCaseLine.LineNum);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return purchRFQCaseLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(purchRFQCaseLine.InventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedOperations</Name>
				<Source><![CDATA[
    public boolean mustBeBookedOperations()
    {
        return (purchRFQCaseLine.LineItemType == PurchRFQLineItemType::Item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedPhysically()
    {
        if (this.inventModelType().mustAlwaysBeBookedPhysically() || VendParameters::find().PostPackingSlip)
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeUnitControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeUnitControlled()
    {
        return boolean::true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateQuarantineOrder</Name>
				<Source><![CDATA[
    public boolean mustCreateQuarantineOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        PurchRFQCaseLine    _purchRFQCaseLine,
        InventType          _inventType = PurchRFQCaseLineType::construct(_purchRFQCaseLine))
    {
        purchRFQCaseLine = _purchRFQCaseLine;

        super(purchRFQCaseLine,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!purchRFQCaseLine.RecId)
        {
            return null;
        }

        PurchRFQCaseLine purchRFQCaseLine_orig = purchRFQCaseLine.orig();
        //it can be update from "None" to "Item" so it should not look like ItemId is going to be changed
        //in this case update should look like insert of new item
        if (!purchRFQCaseLine_orig.InventTransId)
        {
            return null;
        }

        if (!purchRFQCaseLine_orig.ItemId)
        {
            purchRFQCaseLine_orig.ItemId = purchRFQCaseLine.ItemId;
        }

        return InventMov_PurchRFQ::newFromPurchRFQCaseLine(purchRFQCaseLine_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the CW quantity to remain physical.
    /// </summary>
    /// <param name="_qty">
    /// The CW quantity to add to remain physical.
    /// </param>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
        // PdsCWRemainInventPhysical should only be updated for stocked items
        if (purchRFQCaseLine.isStocked())
        {
            purchRFQCaseLine.PdsCWRemainInventPhysical += _qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CW quantity to remain physical.
    /// </summary>
    /// <returns>
    /// The CW quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return purchRFQCaseLine.PdsCWRemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CW reserve quantity for the movement.
    /// </summary>
    /// <returns>
    /// The CW quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the CW quantity to remain physical
    /// </summary>
    /// <param name="_qty">
    /// The CW Quantity to set.
    /// </param>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
        // PdsCWRemainInventPhysical should only be updated for stocked items
        if (purchRFQCaseLine.isStocked())
        {
            purchRFQCaseLine.PdsCWRemainInventPhysical = _qty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the CW transaction quantity.
    /// </summary>
    /// <param name="_pdsCWQtyInvent">
    /// The CW quantity to set.
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _pdsCWQtyInvent)
    {
        // PdsCWQty should only be updated for stocked items
        if (purchRFQCaseLine.isStocked())
        {
            purchRFQCaseLine.PdsCWQty = _pdsCWQtyInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the CW transaction quantity.
    /// </summary>
    /// <returns>
    /// The CW transaction quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return purchRFQCaseLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::PurchReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOffsetPhysical</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOffsetPhysical()
    {
        return LedgerPostingType::PurchOffsetAccountPckSlp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::PurchConsump;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingStdProfit</Name>
				<Source><![CDATA[
    public LedgerPostingType postingStdProfit()
    {
        return LedgerPostingType::PurchStdProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    InventQty   remainPhysical()
    {
        return purchRFQCaseLine.RemainInventPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
    public UnitQty      remainPhysicalUnit()
    {
        return purchRFQCaseLine.RemainPurchPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        purchRFQCaseLine.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    public boolean setInventRefFields(
        InventRefType           _inventRefType,
        InventRefId             _inventRefId,
        InventTransOriginId     _markingRefInventTransOrigin
        )
    {
        purchRFQCaseLine.ItemRefType         = _inventRefType;
        purchRFQCaseLine.InventRefId         = _inventRefId;
        purchRFQCaseLine.InventRefTransId    = InventTransOrigin::find(_markingRefInventTransOrigin).InventTransId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {
        // RemainInventPhysical should only be updated for stocked items
        if (purchRFQCaseLine.isStocked())
        {
            purchRFQCaseLine.RemainInventPhysical = _inventQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysicalUnit</Name>
				<Source><![CDATA[
    public void setRemainPhysicalUnit(UnitQty _qtyUnit)
    {
        purchRFQCaseLine.RemainPurchPhysical = _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty _qtyInvent)
    {
        // QtyOrdered should only be updated for stocked items
        if (purchRFQCaseLine.isStocked())
        {
            purchRFQCaseLine.QtyOrdered = _qtyInvent;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQtyUnit</Name>
				<Source><![CDATA[
    public void setTransQtyUnit(UnitQty _qtyUnit)
    {
        purchRFQCaseLine.PurchQty = _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return purchRFQCaseLine.ConfirmedDlv? purchRFQCaseLine.ConfirmedDlv : purchRFQCaseLine.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return purchRFQCaseLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    public InventRefType transInventRefType()
    {
        return InventRefType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty  transQty()
    {
        // QtyOrdered should only be used for stocked items.
        if (purchRFQCaseLine.isStocked())
        {
            return purchRFQCaseLine.QtyOrdered;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    public UnitQty transQtyUnit()
    {
        return purchRFQCaseLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {//Always use the RFQ case id as transRefId
        return purchRFQCaseLine.rfqCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return purchRFQCaseLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = false)
    {
        InventUpd_Estimated     estimated = InventUpd_Estimated::newInventMovement(this);

        estimated.updateNow();

        purchRFQCaseLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_PurchRFQ</c> class based on the specified record.
    /// </summary>
    /// <param name="_purchRFQCaseLine">
    ///    The <c>PurchRFQCaseLine</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_PurchRFQ</c> class.
    /// </returns>
    public static InventMov_PurchRFQ newFromPurchRFQCaseLine(PurchRFQCaseLine _purchRFQCaseLine)
    {
        return new InventMov_PurchRFQ(_purchRFQCaseLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
