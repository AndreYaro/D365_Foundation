<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustLedgerTransContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustLedgerTransContract</c> class is the Data Contract class for the <c>CustLedgerTrans</c>
///    SSRS report.
/// </summary>
[
    SysOperationContractProcessingAttribute(classStr(CustLedgerTransUIBuilder)),
    DataContractAttribute
]
public class CustLedgerTransContract implements SysOperationValidatable, SysOperationInitializable
{
    boolean totalsPerLedgerAccount;
    boolean mainAccountsOnly;

    List billingClassification;
    NoYes inclTransWithNoBillingClass;
    boolean showReportingCurrency = true;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data contract values.
    /// </summary>
    public void initialize()
    {
        billingClassification = new List(Types::String);

        if (!CustParameters::isBillingClassificationEnabled())
        {
            billingClassification.addEnd(SysLabel::labelId2String(literalStr("@GLS223107")));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBillingClassification</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('BillingClassification'),
        SysOperationLabelAttribute(literalStr("@SPS371")),
        SysOperationHelpTextAttribute(literalStr("@SPS677")),
        SysOperationDisplayOrderAttribute('0'),
        AifCollectionTypeAttribute('return', Types::String)
    ]
    public List parmBillingClassification(List _billingClassification = billingClassification)
    {
        billingClassification = _billingClassification;
        return billingClassification;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInclTransWithNoBillingClass</Name>
				<Source><![CDATA[
        [
        DataMemberAttribute('InclTransWithNoBillingClass'),
        SysOperationLabelAttribute(literalStr("@SPS691")),
        SysOperationHelpTextAttribute(literalStr("@SPS1009")),
        SysOperationDisplayOrderAttribute('0')
    ]
    public NoYes parmInclTransWithNoBillingClass(NoYes _inclTransWithNoBillingClass = inclTransWithNoBillingClass)
    {
        inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        return inclTransWithNoBillingClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMainAccountsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter mainAccountsOnly.
    /// </summary>
    /// <param name="_mainAccountsOnly">
    /// The new value of the datacontract parameter mainAccountsOnly; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter mainAccountsOnly.
    /// </returns>
    [
        DataMemberAttribute ('MainAccountsOnly'),
        SysOperationLabelAttribute (literalstr("@SYS325919")),
        SysOperationHelpTextAttribute (literalstr("@SYS325919")),
        SysOperationDisplayOrderAttribute('1')
    ]
    public Boolean parmMainAccountsOnly(Boolean _mainAccountsOnly = mainAccountsOnly)
    {
        mainAccountsOnly = _mainAccountsOnly;
        return mainAccountsOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalsPerLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter totalsPerLedgerAccount.
    /// </summary>
    /// <param name="_totalsPerLedgerAccount">
    /// The new value of the datacontract parameter totalsPerLedgerAccount; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter totalsPerLedgerAccount.
    /// </returns>
    [
        DataMemberAttribute ('TotalsPerLedgerAccount'),
        SysOperationLabelAttribute (literalstr("@SYS329989")),
        SysOperationHelpTextAttribute (literalstr("@SYS77970")),
        SysOperationDisplayOrderAttribute('2')
    ]
    public boolean parmTotalsPerLedgerAccount(boolean _totalsPerLedgerAccount = totalsPerLedgerAccount)
    {
        totalsPerLedgerAccount = _totalsPerLedgerAccount;
        return totalsPerLedgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dialog values for errors. The dialog values are handled through the contract.
    /// </summary>
    /// <returns>
    /// False if an error has occured in the dialog values; otherwise true.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!BrazilParameters::isEnabled())
        {
            isValid = CustBillingClassificationReportManager::validate(billingClassification, inclTransWithNoBillingClass);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hidden parameter for reporting currency column visibility.
    /// </summary>
    /// <param name = "_showReportingCurrency">
    /// boolean value.
    /// </param>
    /// <returns>
    /// False if the current ledger's reporting currency is blank or if it is not same as accounting currency.
    /// </returns>
    [
        DataMemberAttribute('ShowReportingCurrency'),
        SysOperationControlVisibilityAttribute(false)
    ]
    public boolean parmShowReportingCurrency(boolean _showReportingCurrency = showReportingCurrency)
    {
        showReportingCurrency = _showReportingCurrency;
        return showReportingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>