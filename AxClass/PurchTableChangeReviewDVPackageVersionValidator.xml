<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTableChangeReviewDVPackageVersionValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk;

/// <summary>
/// The <c>PurchTableChangeReviewDVPackageVersionValidator</c> class is responsible for validating the scm copilot package version and contains the logic required to identify whether the package version supported or not.
/// </summary>
internal class PurchTableChangeReviewDVPackageVersionValidator
{
    private IOrganizationService orgService;

    private const str ScmAnchorSolutionName = "msdyn_SCMAIAppAnchor";
    private const str SolutionEntity = "solution";
    private const str AttributeVersion = "version";
    
    private const str MinimimumRequiredDVPackageVersion = "1.0.0.43";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static PurchTableChangeReviewDVPackageVersionValidator construct(IOrganizationService _orgService)
    {
        if (!_orgService)
        {
            throw error("@SYS22828", funcname());
        }

        PurchTableChangeReviewDVPackageVersionValidator instance = new PurchTableChangeReviewDVPackageVersionValidator();
        instance.orgService = _orgService;

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSCMCopilotDataversePackageCompatible</Name>
				<Source><![CDATA[
	public boolean isSCMCopilotDataversePackageCompatible()
    {  
        EntityCollection solutionCollection = this.getSolutionEntity(ScmAnchorSolutionName);
        
        if(solutionCollection && solutionCollection.Entities && solutionCollection.Entities.Count > 0)
        {
            Entity entity = solutionCollection.Entities.get_Item(0);
            str solutionVersion  = this.getSolutionVersion(entity);

            if (this.isSCMAIPackageVersionCompatible(solutionVersion))
            {
                return true;
            }  
        }
        
        return false;
	}

]]></Source>
			</Method>
			<Method>
				<Name>getSolutionVersion</Name>
				<Source><![CDATA[
    private str getSolutionVersion(Entity _entity)
    {
        AttributeCollection attributeCollection = _entity.Attributes;
        if (attributeCollection.ContainsKey(AttributeVersion))
        {
            return attributeCollection.get_Item(AttributeVersion);
        }

        return '0.0.0.0';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSolutionEntity</Name>
				<Source><![CDATA[
    private EntityCollection getSolutionEntity(str _uniqueName)
    {
        var query = new QueryExpression(SolutionEntity);
        query.ColumnSet = new ColumnSet(true);

        var criteria = query.Criteria;
        criteria.AddCondition("uniquename", ConditionOperator::Equal, _uniqueName);

        return orgService.RetrieveMultiple(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSCMAIPackageVersionCompatible</Name>
				<Source><![CDATA[
    private boolean isSCMAIPackageVersionCompatible(str _version)
    {
        System.Version scmAIVersion = new System.Version(_version);
        System.Version minimumSupportedVersion = new System.Version(MinimimumRequiredDVPackageVersion);

        return scmAIVersion.CompareTo(minimumSupportedVersion) >= 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>