<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttColor_ReqExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttColor_ReqExplosion extends GanttColor
{
    NoYes                           colorChanged;

    GanttColorSchemeReqExplosion    colorScheme;

    // Reference colors
    OLE_Color                       purchColor;

    OLE_Color                       salesColor;

    OLE_Color                       prodColor;
    OLE_Color                       prodLineColor;

    OLE_Color                       kanbanColor;
    OLE_Color                       kanbanLineColor;

    OLE_Color                       safetyInventColor;

    OLE_Color                       inventJournalColor;
    OLE_Color                       inventTransferColor;

    OLE_Color                       itemPOColor;

    OLE_Color                       salesForecastColor;

    OLE_Color                       bompoColor;
    OLE_Color                       bomLineColor;

    OLE_Color                       transferPOColor;
    OLE_Color                       transferDemandColor;

    OLE_Color                       plannedKanbanColor;
    OLE_Color                       plannedKanbanLineColor;

    // Node colors
    OLE_Color                       nodeColor;

    OLE_Color                       marginsColor;

    OLE_Color                       futuresColor;

    OLE_Color                       actionColor;

    #define.version1(1)
    #localmacro.Version1List
        colorScheme,

        // Reference colors
        purchColor,
        prodColor,
        salesColor,
        prodLineColor,
        inventJournalColor,
        safetyInventColor,
        inventTransferColor,
        salesForecastColor,
        BOMPOColor,
        BOMLineColor,
        itemPOColor,
        transferPOColor,
        transferDemandColor,

        // Node colors
        nodeColor,
        marginsColor,
        futuresColor,
        actionColor

    #endmacro

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        colorScheme,

        // Reference colors
        purchColor,
        prodColor,
        salesColor,
        prodLineColor,
        inventJournalColor,
        safetyInventColor,
        inventTransferColor,
        salesForecastColor,
        BOMPOColor,
        BOMLineColor,
        itemPOColor,
        transferPOColor,
        transferDemandColor,
        kanbanColor,
        kanbanLineColor,
        plannedKanbanColor,
        plannedKanbanLineColor,

        // Node colors
        nodeColor,
        marginsColor,
        futuresColor,
        actionColor

    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyChangedValues</Name>
				<Source><![CDATA[
    protected boolean applyChangedValues()
    {
        if (!super())
        {
            return false;
        }

        if (colorChanged)
        {
            GanttData_ReqExplosion ganttData = this.parmGanttClient().parmGanttData();
            ganttData.updateColors();
            this.parmGanttClient().parmGanttVisualization().refresh();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultActionColor</Name>
				<Source><![CDATA[
    public int defaultActionColor()
    {
        return this.rgb2int(#defaultThemeSecondaryColor1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFuturesColor</Name>
				<Source><![CDATA[
    public int defaultFuturesColor()
    {
        return this.rgb2int(#defaultThemeSecondaryColor1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultMarginsColor</Name>
				<Source><![CDATA[
    public int defaultMarginsColor()
    {
        return this.rgb2int(#defaultThemeSecondaryColor1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultNodeColor</Name>
				<Source><![CDATA[
    public int defaultNodeColor()
    {
        return this.rgb2int(#defaultThemeAccent1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase dialog = null, boolean forceOnClient = false)
    {
        FormRun formRun;
        Args    args = new Args(formstr(GanttReqExplosionColor));
        args.caller(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionColor</Name>
				<Source><![CDATA[
    public OLE_Color getActionColor(tableName               _tableName,
                                    RecId                   _recId,
                                    GanttTmpReqExplosion    _ganttTmpReqExplosion = null)
    {
        OLE_Color   color;

        if (prmisdefault(_ganttTmpReqExplosion))
        {
            _ganttTmpReqExplosion = this.parmGanttClient().parmGanttData().getRecordByRecId(_tableName, _recId);
        }

        switch (this.parmColorScheme())
        {
            case GanttColorSchemeReqExplosion::Reference:
                color = this.getNodeColor(_tableName, _recId, _ganttTmpReqExplosion);
                break;

            case GanttColorSchemeReqExplosion::Node:
                color = this.parmActionColor();
                break;
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFuturesColor</Name>
				<Source><![CDATA[
    public OLE_Color getFuturesColor(tableName              _tableName,
                                     RecId                  _recId,
                                     GanttTmpReqExplosion   _ganttTmpReqExplosion = null)
    {
        OLE_Color   color;

        if (prmisdefault(_ganttTmpReqExplosion))
        {
            _ganttTmpReqExplosion = this.parmGanttClient().parmGanttData().getRecordByRecId(_tableName, _recId);
        }

        switch (this.parmColorScheme())
        {
            case GanttColorSchemeReqExplosion::Reference:
                color = this.getNodeColor(_tableName, _recId, _ganttTmpReqExplosion);
                break;

            case GanttColorSchemeReqExplosion::Node:
                color = this.parmFuturesColor();
                break;
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMarginsColor</Name>
				<Source><![CDATA[
    public OLE_Color getMarginsColor(tableName              _tableName,
                                     RecId                  _recId,
                                     GanttTmpReqExplosion   _ganttTmpReqExplosion = null)
    {
        OLE_Color   color;

        if (prmisdefault(_ganttTmpReqExplosion))
        {
            _ganttTmpReqExplosion = this.parmGanttClient().parmGanttData().getRecordByRecId(_tableName, _recId);
        }

        switch (this.parmColorScheme())
        {
            case GanttColorSchemeReqExplosion::Reference:
                color = this.getNodeColor(_tableName, _recId, _ganttTmpReqExplosion);
                break;

            case GanttColorSchemeReqExplosion::Node:
                color = this.parmMarginsColor();
                break;
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeColor</Name>
				<Source><![CDATA[
    public OLE_Color getNodeColor(tableName _tableName,
                                  RecId     _recId,
                                  Common    _record = null)
    {
        GanttTmpReqExplosion    ganttTmpReqExplosion;

        OLE_Color               color;

        if (prmisdefault(_record))
        {
            _record = this.parmGanttClient().parmGanttData().getRecordByRecId(_tableName, _recId);
        }

        ganttTmpReqExplosion = _record;

        switch (this.parmColorScheme())
        {
            case GanttColorSchemeReqExplosion::Reference:
                color = this.getRefNodeColor(ganttTmpReqExplosion);
                break;

            case GanttColorSchemeReqExplosion::Node:
                color = this.parmNodeColor();
                break;
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefNodeColor</Name>
				<Source><![CDATA[
    protected OLE_Color getRefNodeColor(GanttTmpReqExplosion _ganttTmpReqExplosion)
    {
        OLE_Color color;

        switch (_ganttTmpReqExplosion.RefType)
        {
            // Purchase order
            case ReqRefType::Purch                  :
                color = this.parmPurchColor();
                break;

            // Sales order
            case ReqRefType::Sales                  :
                color = this.parmSalesColor();
                break;

            // Production order
            case ReqRefType::Production             :
                color = this.parmProdColor();
                break;

            // Production line
            case ReqRefType::ProdLine               :
                color = this.parmProdLineColor();
                break;

            // Safety stock
            case ReqRefType::SafetyInvent           :
                color = this.parmSafetyInventColor();
                break;

            // Inventory journal
            case ReqRefType::InventJournal          :
                color = this.parmInventJournalColor();
                break;

            // Inventory journal transfer
            case ReqRefType::InventTransfer         :
                color = this.parmInventTransferColor();
                break;

            // Planned purchase order
            case ReqRefType::ItemPlannedOrder       :
                color = this.parmItemPOColor();
                break;

            // Sales forecast
            case ReqRefType::SalesForecast          :
                color = this.parmSalesForecastColor();
                break;

            // Planned production order
            case ReqRefType::BOMPlannedOrder        :
            case ReqRefType::PmfPlannedProdBatch    :
            case ReqRefType::PmfCoProduct           :
                color = this.parmBOMPOColor();
                break;

            // BOM line
            case ReqRefType::BOMLine                :
                color = this.parmBOMLineColor();
                break;

            // Planned transfer order
            case ReqRefType::TransferPlannedOrder   :
                color = this.parmTransferPOColor();
                break;

            // Transfer requirement
            case ReqRefType::TransferDemand         :
                color = this.parmTransferDemandColor();
                break;

            case ReqRefType::Kanban                 :
                color = this.parmKanbanColor();
                break;

            case ReqRefType::KanbanLine             :
                color = this.parmKanbanLineColor();
                break;

            case ReqRefType::PlannedKanban          :
                color = this.parmPlannedKanbanColor();
                break;

            case ReqRefType::PlannedKanbanLine      :
                color = this.parmPlannedKanbanLineColor();
                break;

            case ReqRefType::ConsignmentReplenishmentOrder :
                color = this.parmInventJournalColor();
                break;

            case ReqRefType::None                      :
            case ReqRefType::InventOnHand              :
            case ReqRefType::TransferOrderShip         :
            case ReqRefType::TransferOrderReceive      :
            case ReqRefType::DEL_smmQuotation          :
            case ReqRefType::Quarantine                :
            case ReqRefType::SalesQuotation            :
            case ReqRefType::PmfFormulaLine            :
            case ReqRefType::PdsExpiredBatch           :
            case ReqRefType::PlannedIntercompanyDemand :
            case ReqRefType::Statement                 :
            case ReqRefType::RequisitionLine           :
            case ReqRefType::MCRContinuity             :
                color = this.defaultNodeColor();
                break;

            default                                         :
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.getRefNodeColorDelegate(this, result);
                if (result.hasResult())
                {
                    color = result.result();
                }
                else
                {
                    throw error(strfmt("@SYS89080", _ganttTmpReqExplosion.RefType));
                }        
        }

        return color;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefNodeColorDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to determine if the reference type allows for scheduling start before today.
    /// </summary>
    /// <param name = "_ganttColorReqExplosion">A <c>GanttColor_ReqExplosion</c> instance.</param>
    /// <param name = "_result">Subscribers can use this to provide the result.</param>
    delegate void getRefNodeColorDelegate(
        GanttColor_ReqExplosion _ganttColorReqExplosion,
        EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        this.initParmDefaultColorScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultColorScheme</Name>
				<Source><![CDATA[
    protected void initParmDefaultColorScheme()
    {
        colorScheme = GanttColorSchemeReqExplosion::Theme;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActionColor</Name>
				<Source><![CDATA[
    public OLE_Color parmActionColor(OLE_Color _actionColor = actionColor)
    {
        if (actionColor != _actionColor)
        {
            colorChanged    = NoYes::Yes;
            actionColor     = _actionColor;
        }

        return actionColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMLineColor</Name>
				<Source><![CDATA[
    public OLE_Color parmBOMLineColor(OLE_Color _bomLineColor = bomLineColor)
    {
        if (bomLineColor != _bomLineColor)
        {
            colorChanged    = NoYes::Yes;
            bomLineColor    = _bomLineColor;
        }

        return bomLineColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMPOColor</Name>
				<Source><![CDATA[
    public OLE_Color parmBOMPOColor(OLE_Color _bomPOColor = bomPOColor)
    {
        if (bomPOColor != _bomPOColor)
        {
            colorChanged    = NoYes::Yes;
            bomPOColor      = _bomPOColor;
        }

        return bomPOColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColorScheme</Name>
				<Source><![CDATA[
    public GanttColorSchemeReqExplosion parmColorScheme(GanttColorSchemeReqExplosion _colorScheme = colorScheme)
    {
        if (colorScheme != _colorScheme)
        {
            colorChanged    = NoYes::Yes;
            colorScheme     = _colorScheme;
        }

        return colorScheme;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFuturesColor</Name>
				<Source><![CDATA[
    public OLE_Color parmFuturesColor(OLE_Color _futuresColor = futuresColor)
    {
        if (futuresColor != _futuresColor)
        {
            colorChanged    = NoYes::Yes;
            futuresColor    = _futuresColor;
        }

        return futuresColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttClient</Name>
				<Source><![CDATA[
    public GanttClient parmGanttClient(GanttClient _ganttClient = ganttClient)
    {
        return super(_ganttClient);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventJournalColor</Name>
				<Source><![CDATA[
    public OLE_Color parmInventJournalColor(OLE_Color _inventJournalColor = inventJournalColor)
    {
        if (inventJournalColor != _inventJournalColor)
        {
            colorChanged        = NoYes::Yes;
            inventJournalColor  = _inventJournalColor;
        }

        return inventJournalColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferColor</Name>
				<Source><![CDATA[
    public OLE_Color parmInventTransferColor(OLE_Color _inventTransferColor = inventTransferColor)
    {
        if (inventTransferColor != _inventTransferColor)
        {
            colorChanged        = NoYes::Yes;
            inventTransferColor = _inventTransferColor;
        }

        return inventTransferColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemPOColor</Name>
				<Source><![CDATA[
    public OLE_Color parmItemPOColor(OLE_Color _itemPOColor = itemPOColor)
    {
        if (itemPOColor != _itemPOColor)
        {
            colorChanged    = NoYes::Yes;
            itemPOColor     = _itemPOColor;
        }

        return itemPOColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanColor</Name>
				<Source><![CDATA[
    public OLE_Color parmKanbanColor(OLE_Color _kanbanColor = kanbanColor)
    {
        if (kanbanColor != _kanbanColor)
        {
            colorChanged    = NoYes::Yes;
            kanbanColor     = _kanbanColor;
        }

        return kanbanColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanLineColor</Name>
				<Source><![CDATA[
    public OLE_Color parmKanbanLineColor(OLE_Color _kanbanLineColor = kanbanLineColor)
    {
        if (kanbanLineColor != _kanbanLineColor)
        {
            colorChanged    = NoYes::Yes;
            kanbanLineColor = _kanbanLineColor;
        }

        return kanbanLineColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMarginsColor</Name>
				<Source><![CDATA[
    public OLE_Color parmMarginsColor(OLE_Color _marginsColor = marginsColor)
    {
        if (marginsColor != _marginsColor)
        {
            colorChanged    = NoYes::Yes;
            marginsColor    = _marginsColor;
        }

        return marginsColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeColor</Name>
				<Source><![CDATA[
    public OLE_Color parmNodeColor(OLE_Color _nodeColor = nodeColor)
    {
        if (nodeColor != _nodeColor)
        {
            colorChanged    = NoYes::Yes;
            nodeColor       = _nodeColor;
        }

        return nodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedKanbanColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedKanbanColor(OLE_Color _plannedKanbanColor = plannedKanbanColor)
    {
        if (plannedKanbanColor != _plannedKanbanColor)
        {
            colorChanged        = NoYes::Yes;
            plannedKanbanColor  = _plannedKanbanColor;
        }

        return plannedKanbanColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedKanbanLineColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPlannedKanbanLineColor(OLE_Color _plannedKanbanLineColor = plannedKanbanLineColor)
    {
        if (plannedKanbanLineColor != _plannedKanbanLineColor)
        {
            colorChanged            = NoYes::Yes;
            plannedKanbanLineColor  = _plannedKanbanLineColor;
        }

        return plannedKanbanLineColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdColor(OLE_Color _prodColor = prodColor)
    {
        if (prodColor != _prodColor)
        {
            colorChanged    = NoYes::Yes;
            prodColor       = _prodColor;
        }

        return prodColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdLineColor</Name>
				<Source><![CDATA[
    public OLE_Color parmProdLineColor(OLE_Color _prodLineColor = prodLineColor)
    {
        if (prodLineColor != _prodLineColor)
        {
            colorChanged    = NoYes::Yes;
            prodLineColor   = _prodLineColor;
        }

        return prodLineColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchColor</Name>
				<Source><![CDATA[
    public OLE_Color parmPurchColor(OLE_Color _purchColor = purchColor)
    {
        if (purchColor != _purchColor)
        {
            colorChanged    = NoYes::Yes;
            purchColor      = _purchColor;
        }

        return purchColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSafetyInventColor</Name>
				<Source><![CDATA[
    public OLE_Color parmSafetyInventColor(OLE_Color _safetyInventColor = safetyInventColor)
    {
        if (safetyInventColor != _safetyInventColor)
        {
            colorChanged        = NoYes::Yes;
            safetyInventColor   = _safetyInventColor;
        }

        return safetyInventColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesColor</Name>
				<Source><![CDATA[
    public OLE_Color parmSalesColor(OLE_Color _salesColor = salesColor)
    {
        if (salesColor != _salesColor)
        {
            colorChanged    = NoYes::Yes;
            salesColor      = _salesColor;
        }

        return salesColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesForecastColor</Name>
				<Source><![CDATA[
    public OLE_Color parmSalesForecastColor(OLE_Color _salesForecastColor = salesForecastColor)
    {
        if (salesForecastColor != _salesForecastColor)
        {
            colorChanged        = NoYes::Yes;
            salesForecastColor  = _salesForecastColor;
        }

        return salesForecastColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferDemandColor</Name>
				<Source><![CDATA[
    public OLE_Color parmTransferDemandColor(OLE_Color _transferDemandColor = transferDemandColor)
    {
        if (transferDemandColor != _transferDemandColor)
        {
            colorChanged        = NoYes::Yes;
            transferDemandColor = _transferDemandColor;
        }

        return transferDemandColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferPOColor</Name>
				<Source><![CDATA[
    public OLE_Color parmTransferPOColor(OLE_Color _transferPOColor = transferPOColor)
    {
        if (transferPOColor != _transferPOColor)
        {
            colorChanged    = NoYes::Yes;
            transferPOColor = _transferPOColor;
        }

        return transferPOColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChangedValues</Name>
				<Source><![CDATA[
    protected void resetChangedValues()
    {
        colorChanged    = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColors</Name>
				<Source><![CDATA[
    public void setDefaultColors()
    {
        this.setDefaultColorsReference();
        this.setDefaultColorsNode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColorsNode</Name>
				<Source><![CDATA[
    protected void setDefaultColorsNode()
    {
        nodeColor       = defaultNodeColor;
        marginsColor    = this.defaultMarginsColor();
        futuresColor    = this.defaultFuturesColor();
        actionColor     = this.defaultActionColor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultColorsReference</Name>
				<Source><![CDATA[
    protected void setDefaultColorsReference()
    {
        purchColor          = defaultNodeColor;
        salesColor          = defaultNodeColor;
        prodColor           = defaultNodeColor;
        prodLineColor       = defaultNodeColor;

        safetyInventColor   = defaultNodeColor;

        inventJournalColor  = defaultNodeColor;

        inventTransferColor = defaultNodeColor;

        itemPOColor         = defaultNodeColor;

        salesForecastColor  = defaultNodeColor;

        bomPOColor          = defaultNodeColor;
        bomLineColor        = defaultNodeColor;

        transferPOColor     = defaultNodeColor;
        transferDemandColor = defaultNodeColor;

        kanbanColor             = defaultNodeColor;
        kanbanLineColor         = defaultNodeColor;
        plannedKanbanColor      = defaultNodeColor;
        plannedKanbanLineColor  = defaultNodeColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Integer     version    = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            case #Version1:
                [version, #Version1List] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttColor_ReqExplosion construct()
    {
        return new GanttColor_ReqExplosion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #define.ganttClient('ganttClient')

        GanttClient_ReqExplosion    ganttClient;
        GanttColor_ReqExplosion     ganttColor;

        if (!args || !args.caller())
        {
            throw error(strfmt("@SYS53926", classstr(GanttColor_ReqExplosion)));
        }

        if (args.caller() is FormRun)
        {
            if (!SysFormRun::hasMethod(args.caller(), #ganttClient))
            {
                throw error(strfmt("@SYS73945",args.caller().name(), #ganttClient));
            }

            ganttClient = args.caller().ganttClient();
        }
        else
        {
            ganttClient = args.caller();
        }

        ganttColor = ganttClient.parmGanttColor();

        ganttColor.prompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    public static GanttColor_ReqExplosion newGanttClient(GanttClient_ReqExplosion _ganttClient)
    {
        GanttColor_ReqExplosion ganttColor = GanttColor_ReqExplosion::construct();
        ganttColor.parmGanttClient(_ganttClient);

        return ganttColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>