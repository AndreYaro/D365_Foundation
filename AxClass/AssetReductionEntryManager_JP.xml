<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetReductionEntryManager_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class used to do some calculation related works for asset reduction entry.
/// </summary>
class AssetReductionEntryManager_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetReductionEntryMethodToAssetDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>AssetDocumentType_JP</c> with <c>AssetReductionEntryMethod_JP</c>.
    /// </summary>
    /// <param name="_method">
    /// The instance of <c>AssetReductionEntryMethod_JP</c>.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentType_JP</c>.
    /// </returns>
    public static AssetDocumentType_JP assetReductionEntryMethodToAssetDocType(AssetReductionEntryMethod_JP _method)
    {
        switch (_method)
        {
            case AssetReductionEntryMethod_JP::DirectOff: return AssetDocumentType_JP::AssetReductionEntry_DirectOff;
            case AssetReductionEntryMethod_JP::Reserve:   return AssetDocumentType_JP::AssetReductionEntry_Reserve;
        }
        return AssetDocumentType_JP::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAccumulatedAllocationAmountMst</Name>
				<Source><![CDATA[
/// <summary>
    /// Calculates the accumulated allcation amount in accounting currency in specified date range.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The accumulated Allocation amount in accounting currency.
    /// </returns>
    public static AssetAmount calcAccumulatedAllocationAmountMst(
        AssetDepBookMap_JP    _assetDepBookMap,
        AssetTransDate        _fromDate,
        AssetTransDate        _toDate)
    {
        AssetDepTransMap_JP         assetDepTransMap   = AssetDepTransMap_JP::getEmptyTableBuffer(AssetDepCalculationHelper_JP::determineAssetBookType(_assetDepBookMap.TableId));
        AssetDocumentTrans_JP       assetDocumentTrans;

        if (_fromDate <= _toDate)
        {
            select sum(AmountMST)
                from assetDepTransMap
                where assetDepTransMap.AssetId      == _assetDepBookMap.AssetId
                    && assetDepTransMap.AssetBookId == _assetDepBookMap.AssetBookId
                    && assetDepTransMap.TransDate   >= _fromDate
                    && assetDepTransMap.TransDate   <= _toDate
                    && assetDepTransMap.TransType   == AssetTransType::ReductionEntryReserveAllocation_JP
                exists join assetDocumentTrans
                    where assetDocumentTrans.RefTableId             == assetDepTransMap.TableId
                        && assetDocumentTrans.RefRecId              == assetDepTransMap.RecId;
        }

        return assetDepTransMap.AmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReductionEntryAcqAmountByPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of redcution entry transaction post on specific asset and transaction date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// The assetbook or assetdepbook record
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The base amount for reduction entry acquisition calculation.
    /// </returns>
    public static AssetAmount calcReductionEntryAcqAmountByPeriod(
        AssetDepBookMap_JP _assetDepBookMap,
        TransDate          _fromDate,
        TransDate          _toDate)
    {
        container      conTransaction = conNull();
        Counter        counter;
        AssetAmount    ret;
        AssetTransDate transDate;
        AssetAmount    preAmount;
        AssetAmount    postAmount;

        conTransaction = AssetReductionEntryManager_JP::getReductionEntryTransactionByPeriod(_assetDepBookMap, _fromDate, _toDate);
        for (counter = conLen(conTransaction); counter > 0; counter--)
        {
            [transDate, preAmount, postAmount] = conPeek(conTransaction, counter);
            ret += postAmount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAllocationStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates allocation start date of related fixed assets.
    /// </summary>
    /// <param name="_profile">
    /// The modified asset reduction entry profile.
    /// </param>
    public static void calculateAllocationStartDate(AssetReductionEntryProfile_JP _profile)
    {
        AssetDepBookMap_JP    depBookMap;
        AssetDocumentEntry_JP documentEntry;

        while select AssetId, BookId from documentEntry
            where documentEntry.AssetDocumentTable_JP == _profile.AssetDocumentTable_JP
                && documentEntry.BookId               != ''
                && documentEntry.AssetId              != ''
        {
            depBookMap = AssetDepBookMap_JP::findByAssetIdBookId(documentEntry.AssetId, documentEntry.BookId, true);
            depBookMap.AssetDepBookMap_JP::setAllocationStartDate();
            depBookMap.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGenerateRepaymentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether reduction entry repayment transactions are allowed to generate given assetId and bookId.
    /// </summary>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_fromDepBook">
    /// Whether data is from depreciation book or value model. Optional
    /// </param>
    /// <returns>
    /// True if repayment transactions can be generated. False otherwise.
    /// </returns>
    public static boolean canGenerateRepaymentTrans(
        AssetId              _assetId,
        AssetBookId          _bookId,
        boolean              _fromDepBook = false)
    {
        AssetDocumentEntry_JP           entryTableLoc;
        AssetDocumentTable_JP           documentTableLoc;
        AssetReductionEntryProfile_JP   assetReductionEntryProfileLoc;
        boolean                         ret = true;

        select firstonly *
            from entryTableLoc
            where entryTableLoc.AssetId  == _assetId
                && entryTableLoc.BookId  == _bookId
            join DocumentId, MainType, Type, RecId from documentTableLoc
            where documentTableLoc.MainType == AssetDocumentMainType_JP::ReductionEntry
                && documentTableLoc.RecId   == entryTableLoc.AssetDocumentTable_JP;

        assetReductionEntryProfileLoc = AssetReductionEntryProfile_JP::find(documentTableLoc.DocumentId);

        if (documentTableLoc.MainType != AssetDocumentMainType_JP::ReductionEntry
            || documentTableLoc.Type != AssetDocumentType_JP::AssetReductionEntry_Reserve
            || assetReductionEntryProfileLoc.RepaymentType == AssetReductionEntryRepayType_JP::NotRequired
            || AssetReductionEntryManager_JP::getReductionEntryAmount(_assetId, _bookId, _fromDepBook) == 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTmpDateSumToYearBeginBalanceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert calculated <c>TempDateSum</c> temp table to year begin balance map.
    /// </summary>
    /// <param name="_tmpDateSum">
    /// Temp table with calculated period data.
    /// </param>
    /// <param name="_depInterval">
    /// The asset table interval object.
    /// </param>
    /// <returns>
    /// Map with year begin balance amount.
    /// </returns>
    public static Map convertTmpDateSumToYearBeginBalanceMap(
        TmpDateSum          _tmpDateSum,
        AssetTableInterval  _depInterval)
    {
        TmpDateSum   tmpDateSumLoc;
        Map          beginBalanceMap = new Map(Types::Date, Types::Real);
        TransDate    transDate;

        tmpDateSumLoc.setTmpData(_tmpDateSum);

        while select * from tmpDateSumLoc
        {
            transDate = _depInterval.findFirstDayOfYear(tmpDateSumLoc.TransDate+1);
            if (transDate == (tmpDateSumLoc.TransDate+1))
            {
                beginBalanceMap.insert(transDate, tmpDateSumLoc.Total);
            }
        }

        return beginBalanceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAssetDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the asset document with <c>AssetReductionEntryProfile_JP</c>.
    /// </summary>
    /// <param name="_profile">
    /// The instance of <c>AssetReductionEntryProfile_JP</c>.
    /// </param>
    /// <returns>
    /// The created <c>AssetDocumentTable_JP</c> record.
    /// </returns>
    public static AssetDocumentTable_JP createAssetDocument(AssetReductionEntryProfile_JP _profile)
    {
        AssetDocumentTable_JP  document;

        document.DocumentId = _profile.Profile;
        document.MainType = AssetDocumentMainType_JP::ReductionEntry;
        document.Type = AssetReductionEntryManager_JP::assetReductionEntryMethodToassetDocType(_profile.Method);
        document.Description = _profile.Profile;

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReductionEntryAssetTrans</Name>
				<Source><![CDATA[
    private static AssetTrans createReductionEntryAssetTrans(
        AssetTrans _assetTrans,
        AmountMST _amount,
        AssetTransType _assetTransType,
        LedgerDimensionAccount _ledgerDimension,
        Description _description,
        NoYes _isPriorYear = NoYes::No)
    {
        AssetTrans newAssetTrans = _assetTrans.data();
        newAssetTrans.AmountMST = CurrencyExchangeHelper::amount(_amount);
        newAssetTrans.LedgerDimension = _ledgerDimension;

        if (newAssetTrans.CurrencyCode == Ledger::accountingCurrency())
        {
            newAssetTrans.AmountCur = newAssetTrans.AmountMST;
        }
        else
        {
            newAssetTrans.AmountCur = CurrencyExchangeHelper::curAmount(newAssetTrans.AmountMST, newAssetTrans.CurrencyCode, newAssetTrans.TransDate);
        }

        if (Ledger::reportingCurrency())
        {
            CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), newAssetTrans.TransDate);
            newAssetTrans.ReportingCurrencyAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(newAssetTrans.CurrencyCode, newAssetTrans.AmountCur, true);
        }

        newAssetTrans.TransType = _assetTransType;
        newAssetTrans.IsPriorYear = _isPriorYear;
        newAssetTrans.Txt = _description;
        newAssetTrans.insert();

        if (_assetTransType == AssetTransType::Depreciation
            || _assetTransType == AssetTransType::DepreciationAdj)
        {
            AssetBook assetBook = AssetBook::find(newAssetTrans.AssetId, newAssetTrans.BookId, true);

            if (newAssetTrans.TransDate > assetBook.LastDepreciationDate)
            {
                assetBook.LastDepreciationDate = newAssetTrans.TransDate;
                assetBook.update();
            }
        }

        return newAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReductionEntryTrans</Name>
				<Source><![CDATA[
    private static void createReductionEntryTrans(
        ledgerVoucherObject _ledgerVoucherObject,
        LedgerDimensionDefaultAccount _ledgerDimensionAccount,
        AssetTrans _assetTrans,
        AssetTransType _assetTransType,
        LedgerPostingType _ledgerPostingType,
        AmountCur _amountCur,
        CurrencyExchangeHelper _exchangeRateHelper,
        LedgerVoucher _ledgerVoucher,
        Description _description = '',
        NoYes _isPriorYear = NoYes::No,
        NoYes _isCorrection = NoYes::No)
    {
        AssetTrans newAssetTrans;
        LedgerDimensionAccount ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionAccount, _assetTrans.DefaultDimension);

        if (_assetTransType != AssetTransType::None
            && _ledgerPostingType != LedgerPostingType::LedgerJournal)
        {
            newAssetTrans = AssetReductionEntryManager_JP::createReductionEntryAssetTrans(
                _assetTrans,
                _amountCur,
                _assetTransType,
                ledgerDimensionMerged,
                _description,
                _isPriorYear);
        }

        RefTableId refTableId;
        RefRecId refRecId;
        [refTableId, refRecId]= newAssetTrans ? [newAssetTrans.TableId, newAssetTrans.RecId] : [_assetTrans.TableId, _assetTrans.RecId];

        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            _ledgerVoucherObject,
            _ledgerPostingType,
            ledgerDimensionMerged,
            _assetTrans.CurrencyCode,
            _amountCur,
            _exchangeRateHelper);

        ledgerVoucherTransObject.parmSourceTableId(refTableId);
        ledgerVoucherTransObject.parmSourceRecId(refRecId);
        ledgerVoucherTransObject.parmReasonRefRecID(_assetTrans.ReasonRefRecId);
        ledgerVoucherTransObject.parmIsCorrection(_isCorrection);

        AssetBook assetBook = AssetBook::find(_assetTrans.AssetId, _assetTrans.BookId);
        TransDate exchangeRateDate = assetBook.exchangeRateDate();
        ledgerVoucherTransObject.parmHistoricalExchangeRateDate(exchangeRateDate? exchangeRateDate : _assetTrans.TransDate);

        _ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postReductionEntryAdjustment</Name>
				<Source><![CDATA[
    internal static void postReductionEntryAdjustment(
        AssetTrans _assetTrans,
        AssetTable _assetTable,
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerVoucher _ledgerVoucher,
        ExchRate _exchRate,
        ExchrateSecondary _exchRateSecond,
        AssetDocumentType_JP _assetDocumentType,
        AssetDocumentRecId_JP _assetDocumentEntryRecId,
        AssetAmount _reductionEntryAdjustment,
        AssetAmount _reductionEntryAdjustmentCurrentPeriod)
    {
        if (_reductionEntryAdjustment)
        {
            AssetTransType assetTransTypeLoc;
            AssetDocumentType_JP assetDocumentTypeLoc;
            AssetBook assetBook = AssetBook::find(_assetTrans.AssetId, _assetTrans.BookId);

            // set posting profile transaction type
            if (!FeatureStateProvider::isFeatureEnabled(AssetDirectOffPostingProfileFeature_JP::instance())
                && _assetDocumentType == AssetDocumentType_JP::AssetReductionEntry_DirectOff)
            {
                assetTransTypeLoc = AssetTransType::Depreciation;
                assetDocumentTypeLoc = AssetDocumentType_JP::None;
            }
            else
            {
                assetTransTypeLoc = _assetTrans.TransType;
                assetDocumentTypeLoc = _assetDocumentType;
            }

            // adjustment main account
            LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
            ledgerVoucherObject.parmVoucherCheck(true);

            CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
            exchangeRateHelper.parmExchangeRate1(_exchRate);
            exchangeRateHelper.parmExchangeRate2(_exchRateSecond);

            LedgerDimensionDefaultAccount ledgerDimensionAccount = AssetLedgerAccounts::assetLedgerDimension(
                _assetTable.AssetId,
                _assetTrans.BookId,
                assetTransTypeLoc,
                _assetTrans.PostingProfile,
                assetDocumentTypeLoc);

            AmountCur reductionEntryAmount = CurrencyExchangeHelper::curAmount(
                _reductionEntryAdjustment,
                _assetTrans.CurrencyCode,
                _assetTrans.TransDate);

            AssetReductionEntryManager_JP::createReductionEntryTrans(
                ledgerVoucherObject,
                ledgerDimensionAccount,
                _assetTrans,
                AssetTransType::DepreciationAdj,
                (reductionEntryAmount < 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                -1 * reductionEntryAmount,
                exchangeRateHelper,
                _ledgerVoucher,
                _reductionEntryAdjustmentCurrentPeriod ?
                    "@ApplicationSuite_Localization:ReductionEntryDepreciationAdjustment" :
                    "@ApplicationSuite_Localization:ReductionEntryDepreciationAdjustmentPriorYears",
                _reductionEntryAdjustmentCurrentPeriod ? NoYes::No : NoYes::Yes);

            AmountCur reductionEntryAmountInCurrentPeriod;

            if (_reductionEntryAdjustmentCurrentPeriod)
            {
                 reductionEntryAmountInCurrentPeriod = CurrencyExchangeHelper::curAmount(
                    _reductionEntryAdjustmentCurrentPeriod,
                    _assetTrans.CurrencyCode,
                    _assetTrans.TransDate);

                AssetReductionEntryManager_JP::createReductionEntryTrans(
                    ledgerVoucherObject,
                    ledgerDimensionAccount,
                    _assetTrans,
                    AssetTransType::DepreciationAdj,
                    (reductionEntryAmountInCurrentPeriod < 0 ? any2Enum(LedgerPostingType::FixedAssetsDebit) : any2Enum(LedgerPostingType::FixedAssetsCredit)),
                    -1 * reductionEntryAmountInCurrentPeriod,
                    exchangeRateHelper,
                    _ledgerVoucher,
                    "@ApplicationSuite_Localization:ReductionEntryDepreciationAdjustmentThisYear",
                    NoYes::No);
            }

            AssetReductionEntryProfile_JP reductionEntryProfile;
            AssetDocumentTable_JP assetDocumentTable;
            AssetDocumentEntry_JP assetDocumentEntry;

            select firstOnly Method from reductionEntryProfile
                exists join assetDocumentTable
                    where assetDocumentTable.DocumentId == reductionEntryProfile.Profile
                exists join assetDocumentEntry
                    where assetDocumentEntry.AssetDocumentTable_JP == assetDocumentTable.RecId
                        && assetDocumentEntry.RecId == _assetDocumentEntryRecId;

            boolean updatedReductionEntryCalc = reductionEntryProfile.Method == AssetReductionEntryMethod_JP::DirectOff;

            // adjust offset account
            AmountCur offsetAmount = updatedReductionEntryCalc ? reductionEntryAmountInCurrentPeriod : reductionEntryAmount;

            if (offsetAmount)
            {
                ledgerDimensionAccount = AssetLedgerAccounts::assetOffsetLedgerDimension(
                    _assetTrans.AssetId,
                    _assetTrans.BookId,
                    assetTransTypeLoc,
                    _assetTrans.PostingProfile,
                    false,
                    assetDocumentTypeLoc);

                AssetReductionEntryManager_JP::createReductionEntryTrans(
                    ledgerVoucherObject,
                    ledgerDimensionAccount,
                    _assetTrans,
                    AssetTransType::Depreciation,
                    LedgerPostingType::LedgerJournal,
                    offsetAmount,
                    exchangeRateHelper,
                    _ledgerVoucher);
            }

            if (updatedReductionEntryCalc && reductionEntryAmount)
            {
                //adjust ledger
                AssetReductionEntryManager_JP::createReductionEntryTrans(
                    ledgerVoucherObject,
                    _ledgerJournalTrans.OffsetLedgerDimension,
                    _assetTrans,
                    AssetTransType::None,
                    LedgerPostingType::LedgerJournal,
                    reductionEntryAmount,
                    exchangeRateHelper,
                    _ledgerVoucher,
                    '',
                    NoYes::No,
                    NoYes::Yes);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateRepaymentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate reduction entry repayment related transactions for value model
    /// </summary>
    /// <param name="_assetBook">
    /// The instance of <c>AssetBook</c>.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <param name="_assetJournal">
    /// The instance of <c>AssetJournal</c>.
    /// </param>
    public static void generateRepaymentTrans(
        AssetBook _assetBook,
        TransDate _transDate,
        AssetJournal _assetJournal)
    {
        AssetDocumentEntry_JP           entryTableLoc;
        AssetDocumentTable_JP           documentTableLoc;
        AssetReductionEntryProfile_JP   assetReductionEntryProfileLoc;
        AmountCur                       reductionEntryAmount;
        AmountCur                       reductionEntryAllocation;
        AmountCur                       reductionEntryBalance;
        TransDate                       retentionEndDate;
        AssetTransTypeJournal           existingJournalType;

        select firstonly *
            from entryTableLoc
            where entryTableLoc.AssetId  == _assetBook.AssetId
                && entryTableLoc.BookId  == _assetBook.BookId
            join DocumentId, MainType, Type, RecId from documentTableLoc
            where documentTableLoc.MainType == AssetDocumentMainType_JP::ReductionEntry
                && documentTableLoc.RecId   == entryTableLoc.AssetDocumentTable_JP;

        assetReductionEntryProfileLoc = AssetReductionEntryProfile_JP::find(documentTableLoc.DocumentId);

        retentionEndDate = AssetReductionEntryManager_JP::getRetentionEndDate(_assetBook.AssetId, _assetBook.BookId);
        reductionEntryAllocation = AssetReductionEntryManager_JP::getReductionEntryAllocation(_assetBook.AssetId, _assetBook.BookId);
        reductionEntryAmount = AssetReductionEntryManager_JP::getReductionEntryAmount(_assetBook.AssetId, _assetBook.BookId);
        reductionEntryBalance = reductionEntryAmount - reductionEntryAllocation;

        existingJournalType =  _assetJournal.parmAssetTransTypeJournal();
        // within retention period
        if (retentionEndDate >= _transDate)
        {
            if (assetReductionEntryProfileLoc.RepaymentType == AssetReductionEntryRepayType_JP::Completely)
            {
                _assetJournal.parmAssetTransTypeJournal(AssetTransTypeJournal::ReductionEntryRepayment_JP);
                _assetJournal.createTrans(
                    -reductionEntryAllocation,
                    _assetBook,
                    _transDate,
                    '',
                    0,
                    0,
                    false,
                    0,
                    0,
                    dateNull(),
                    false,
                    false,
                    documentTableLoc.Type,
                    entryTableLoc.RecId);

                _assetJournal.parmAssetTransTypeJournal(AssetTransTypeJournal::ReductionEntryRepaymentSubsidy_JP);
                _assetJournal.createTrans(
                    reductionEntryAmount,
                    _assetBook,
                    _transDate,
                    '',
                    0,
                    0,
                    false,
                    0,
                    0,
                    dateNull(),
                    false,
                    false,
                    documentTableLoc.Type,
                    entryTableLoc.RecId);
            }
            else if (assetReductionEntryProfileLoc.RepaymentType == AssetReductionEntryRepayType_JP::Proportional)
            {
                _assetJournal.parmAssetTransTypeJournal(AssetTransTypeJournal::ReductionEntryRepaymentProportional_JP);
                _assetJournal.createTrans(
                    reductionEntryBalance,
                    _assetBook,
                    _transDate,
                    '',
                    0,
                    0,
                    false,
                    0,
                    0,
                    dateNull(),
                    false,
                    false,
                    documentTableLoc.Type,
                    entryTableLoc.RecId);
            }
        }
        // after retention period
        else
        {
            _assetJournal.parmAssetTransTypeJournal(AssetTransTypeJournal::ReductionEntryRepaymentProportional_JP);
            _assetJournal.createTrans(
                reductionEntryBalance,
                _assetBook,
                _transDate,
                '',
                0,
                0,
                false,
                0,
                0,
                dateNull(),
                false,
                false,
                documentTableLoc.Type,
                entryTableLoc.RecId);
        }

        _assetJournal.parmAssetTransTypeJournal(existingJournalType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetReductionEntryByAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>AssetDocumentEntry_JP</c> with AssetId and BookId.
    /// </summary>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_documentType">
    /// The asset document type. Optional.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentEntry_JP</c> record.
    /// </returns>
    public static AssetDocumentEntry_JP getAssetReductionEntryByAssetBook(
        AssetId              _assetId,
        AssetBookId          _bookId,
        AssetDocumentType_JP _documentType  = AssetDocumentType_JP::None)
    {
        AssetDocumentEntry_JP          entryTable;
        AssetDocumentTable_JP          documentTable;

        if (_documentType == AssetDocumentType_JP::None)
        {
            select firstonly *
                from entryTable
                where entryTable.AssetId  == _assetId
                    && entryTable.BookId  == _bookId
                join RecId from documentTable
                where documentTable.MainType == AssetDocumentMainType_JP::ReductionEntry
                    && documentTable.RecId   == entryTable.AssetDocumentTable_JP;
        }
        else
        {
            select firstonly *
                from entryTable
                where entryTable.AssetId  == _assetId
                    && entryTable.BookId  == _bookId
                join RecId from documentTable
                where documentTable.MainType == AssetDocumentMainType_JP::ReductionEntry
                    && documentTable.Type    == _documentType
                    && documentTable.RecId   == entryTable.AssetDocumentTable_JP;
        }

        if (!entryTable && !AssetDocumentUseBookSpecificEntry_JPFlight::instance().isEnabled())
        {
            select firstonly entryTable
                where entryTable.AssetId  == _assetId
            exists join documentTable
                where documentTable.MainType == AssetDocumentMainType_JP::ReductionEntry
                    && documentTable.RecId == entryTable.AssetDocumentTable_JP
                    && documentTable.Type == AssetDocumentType_JP::AssetReductionEntry_DirectOff;
        }

        return entryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetReductionEntryDocByAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>AssetDocumentReductionEntry_JP</c> with AssetId and BookId.
    /// </summary>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    /// <returns>
    /// The <c>AssetDocumentReductionEntry_JP</c> record.
    /// </returns>
    public static AssetDocumentReductionEntry_JP getAssetReductionEntryDocByAssetBook(
        AssetId       _assetId,
        AssetBookId   _bookId)
    {
        AssetDocumentReductionEntry_JP document;
        AssetDocumentEntry_JP          entryTable;

        entryTable = AssetReductionEntryManager_JP::getAssetReductionEntryByAssetBook(_assetId, _bookId);

        if (entryTable.RecId)
        {
            document = AssetDocument_JP::constructByDocumentEntry(entryTable) as AssetDocumentReductionEntry_JP;
        }

        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostAdjustmentAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and get the post adjustment amount with pre amount, acquisition amount and beginning accumulated depreciation amount.
    /// </summary>
    /// <param name="_preAmount">
    /// The pre amount value.
    /// </param>
    /// <param name="_acquisitionAmount">
    /// The acquisition amount value.
    /// </param>
    /// <param name="_beginningAccumulatedDep">
    /// The beginning accumulated depreciation amount value.
    /// </param>
    /// <returns>
    /// The post adjustment amount.
    /// </returns>
    public static AmountMST getPostAdjustmentAmountMST(
        AmountMST _preAmount,
        AmountMST _acquisitionAmount,
        AmountMST _beginningAccumulatedDep)
    {
        AmountMST ret;

        if (_acquisitionAmount)
        {
            ret = _preAmount * (_acquisitionAmount - _beginningAccumulatedDep) / _acquisitionAmount;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreAdjustmentAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and get the pre adjustment amount with post amount, acquisition amount and beginning accumulated depreciation amount.
    /// </summary>
    /// <param name="_postAmount">
    /// The post amount value.
    /// </param>
    /// <param name="_acquisitionAmount">
    /// The acquisition amount value.
    /// </param>
    /// <param name="_beginningAccumulatedDep">
    /// The beginning accumulated depreciation amount value.
    /// </param>
    /// <returns>
    /// The pre adjustment amount.
    /// </returns>
    public static AmountMST getPreAdjustmentAmountMST(
        AmountMST _postAmount,
        AmountMST _acquisitionAmount,
        AmountMST _beginningAccumulatedDep)
    {
        AmountMST ret;

        if (_acquisitionAmount != _beginningAccumulatedDep)
        {
            ret = _postAmount * _acquisitionAmount / (_acquisitionAmount - _beginningAccumulatedDep);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreAdjustmentAmountMSTbyAsset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and get the pre adjustment amount with AssetDepBookMap, transaction date and post adjustment amount.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// The instance of <c>AssetDepBookMap_JP</c>.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <param name="_postAmount">
    /// The post adjustment amount value.
    /// </param>
    /// <returns>
    /// The pre adjustment amount.
    /// </returns>
    public static AmountMST getPreAdjustmentAmountMSTbyAsset(
        AssetDepBookMap_JP _assetDepBookMap,
        TransDate _transDate,
        AmountMST _postAmount)
    {
        AmountMST ret;
        AmountMST acqAmount;

        AssetDocumentEntry_JP   assetDocumentEntry;
        AssetDocumentTable_JP   assetDocumentTable;
        AssetAmount             beginningBalance;
        AssetTableInterval      assetTableInterval;
        AssetTransDate          firstDayOfCurYear;

        acqAmount = _assetDepBookMap.AcquisitionPrice;

        // add back the reduction entry amount when using direct-off method
        assetDocumentEntry = AssetDocumentEntry_JP::findByAssetIdBookId(_assetDepBookMap.AssetId, _assetDepBookMap.AssetBookId);
        if (assetDocumentEntry)
        {
            assetDocumentTable = AssetDocumentTable_JP::find(assetDocumentEntry.AssetDocumentTable_JP);
            if (assetDocumentTable.Type == AssetDocumentType_JP::AssetReductionEntry_DirectOff)
            {
                acqAmount += abs(_postAmount);
            }

            assetTableInterval = _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(_transDate);
            firstDayOfCurYear = assetTableInterval.findFirstDayOfYear(_transDate);

            beginningBalance = AssetDepTransMap_JP::calcBeginningBalOfAccumulatedDepAmtMst(
                _assetDepBookMap,
                _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(firstDayOfCurYear),
                firstDayOfCurYear);

            ret = AssetReductionEntryManager_JP::getPreAdjustmentAmountMST(_postAmount, acqAmount, beginningBalance);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReductionEntryAcquisitionTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of redcution entry transaction post on specific asset and transaction date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// The assetbook or assetdepbook record
    /// </param>
    /// <param name="_transDate">
    /// The end date.
    /// </param>
    /// <param name="_calcArgs">
    /// The <c>AssetDepCalculationArgs_JP</c> object.
    /// </param>
    /// <returns>
    /// A list of reduction entry post transaction.
    /// </returns>
    public static container getReductionEntryAcquisitionTransaction(
        AssetDepBookMap_JP         _assetDepBookMap,
        TransDate                  _transDate,
        AssetDepCalculationArgs_JP _calcArgs)
    {
        container ret = conNull();
        AssetDocumentEntry_JP               assetDocumentEntry;
        AssetDocumentTrans_JP               assetDocumentTrans;
        AssetDocumentTable_JP               assetDocumentTable;
        AssetDocumentReductionEntryTrans_JP reductionEntryTrans;
        AssetDocumentReductionEntry_Jp      reductionEntryDocument;
        AssetReductionEntryProfile_JP       reductionEntryProfile;
        AssetTableInterval                  assetTableInterval;
        AssetTransDate                      transDate;
        AssetTrans                          depTrans;

        assetTableInterval = _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval();
        reductionEntryDocument = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(_assetDepBookMap.AssetId, _assetDepBookMap.AssetBookId);

        if (reductionEntryDocument)
        {
            reductionEntryProfile = AssetReductionEntryProfile_JP::find(reductionEntryDocument.parmAssetDocumentTable().DocumentId);

            if (_transDate < dateMax())
            {
                if (reductionEntryDocument.parmAssetDocumentTable().Type == AssetDocumentType_JP::AssetReductionEntry_Reserve
                    && reductionEntryProfile.AllocationConvention == AssetReductionEntryConvention_JP::None)
                {
                    transDate = assetTableInterval.startOfPeriod(_transDate)-1;
                }
                else
                {
                    transDate = assetTableInterval.endPeriod(_transDate);
                }
            }
            else
            {
                transDate = _transDate;
            }

            while select PreAmountMST, PostAmountMST from reductionEntryTrans
                order by depTrans.TransDate
                join RecId from assetDocumentTrans
                    where assetDocumentTrans.RecId == reductionEntryTrans.AssetDocumentTrans_JP
                join RecId from assetDocumentEntry
                    where assetDocumentEntry.RecId     == assetDocumentTrans.AssetDocumentEntry_JP
                        &&  assetDocumentEntry.AssetId == _assetDepBookMap.AssetId
                        && assetDocumentEntry.BookId   == _assetDepBookMap.AssetBookId
                join Type from assetDocumentTable
                    where assetDocumentTable.RecId     == assetDocumentEntry.AssetDocumentTable_JP
                        && assetDocumentTable.MainType == AssetDocumentMainType_JP::ReductionEntry
                join TransDate from depTrans
                    where depTrans.TableId     == assetDocumentTrans.RefTableId
                        && depTrans.RecId      == assetDocumentTrans.RefRecId
                        && depTrans.TransDate  <= transDate
                        && (depTrans.TransType == AssetTransType::Acquisition
                            || depTrans.TransType == AssetTransType::ReductionEntryReserve_JP)
            {
                ret += [[depTrans.TransDate, reductionEntryTrans.PreAmountMST, reductionEntryTrans.PostAmountMST]];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReductionEntryAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate accumulated reduction entry allocation amount given assetId and bookId.
    /// </summary>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_fromDepBook">
    /// Whether data is from depreciation book or value model. Optional
    /// </param>
    /// <returns>
    /// The amount of reduction entry allocation amount.
    /// </returns>
    public static AmountCur getReductionEntryAllocation(
        AssetId              _assetId,
        AssetBookId          _bookId,
        boolean              _fromDepBook = false)
    {
        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
        select sum(AmountCur) from assetTransTmp
            where assetTransTmp.AssetId == _assetId
                && assetTransTmp.BookId == _bookId
                && assetTransTmp.TransType == AssetTransType::ReductionEntryReserveAllocation_JP;

        return assetTransTmp.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReductionEntryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate reduction entry reserve amount given assetId and bookId.
    /// </summary>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_fromDepBook">
    /// Whether data is from depreciation book or value model. Optional
    /// </param>
    /// <returns>
    /// The amount of reduction entry reserve amount.
    /// </returns>
    public static AmountCur getReductionEntryAmount(
        AssetId              _assetId,
        AssetBookId          _bookId,
        boolean              _fromDepBook = false)
    {
        AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(_assetId, _bookId);
        select firstOnly AmountCur from assetTransTmp
            where assetTransTmp.AssetId == _assetId
                && assetTransTmp.BookId == _bookId
                && assetTransTmp.TransType == AssetTransType::ReductionEntryReserve_JP;

        return -assetTransTmp.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReductionEntryTransactionByPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of redcution entry transaction post on specific asset and transaction date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// The assetbook or assetdepbook record
    /// </param>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// A list of reduction entry post transaction.
    /// </returns>
    public static container getReductionEntryTransactionByPeriod(
        AssetDepBookMap_JP _assetDepBookMap,
        TransDate          _fromDate,
        TransDate          _toDate)
    {
        container ret = conNull();
        AssetDocumentTrans_JP               assetDocumentTrans;
        AssetDocumentReductionEntryTrans_JP reductionEntryTrans;
        AssetReductionEntryProfile_JP       reductionEntryProfile;
        AssetTableInterval                  assetTableInterval;
        AssetTransDate                      fromDate;
        AssetTransDate                      toDate;
        AssetDocumentReductionEntry_Jp      reductionEntryDocument;
        AssetTrans                          depTrans;

        assetTableInterval = _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval();

        reductionEntryDocument = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(_assetDepBookMap.AssetId, _assetDepBookMap.AssetBookId);

        if (reductionEntryDocument)
        {
            reductionEntryProfile = AssetReductionEntryProfile_JP::find(reductionEntryDocument.parmAssetDocumentTable().DocumentId);

            if (reductionEntryDocument.parmAssetDocumentTable().Type == AssetDocumentType_JP::AssetReductionEntry_Reserve
                && reductionEntryProfile.AllocationConvention == AssetReductionEntryConvention_JP::None)
            {
                fromDate = (_fromDate > dateNull())?assetTableInterval.startOfPeriod(assetTableInterval.startOfPeriod(_fromDate)-1):_fromDate;
                toDate = (_toDate < dateMax())?assetTableInterval.startOfPeriod(_toDate)-1:_toDate;
            }
            else
            {
                fromDate = (_fromDate > dateNull())? assetTableInterval.startOfPeriod(_fromDate):_fromDate;
                toDate   = (_toDate < dateMax())?assetTableInterval.endPeriod(_toDate):_toDate;
            }

            while select PostAmountMST, PreAmountMST from reductionEntryTrans
                order by depTrans.TransDate
                join RecId from assetDocumentTrans
                    where assetDocumentTrans.RecId == reductionEntryTrans.AssetDocumentTrans_JP
                        && assetDocumentTrans.AssetDocumentEntry_JP == reductionEntryDocument.parmAssetDocumentEntry().RecId
                join TransDate from depTrans
                    where depTrans.TableId     == assetDocumentTrans.RefTableId
                        && depTrans.RecId      == assetDocumentTrans.RefRecId
                        && depTrans.TransDate  <= toDate
                        && depTrans.TransDate  >= fromDate
                        && (depTrans.TransType == AssetTransType::Acquisition
                            || depTrans.TransType == AssetTransType::ReductionEntryReserve_JP)
            {
                ret += [[depTrans.TransDate, reductionEntryTrans.PreAmountMST, reductionEntryTrans.PostAmountMST]];
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetentionEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate reduction entry document retention period end date given assetId and bookId.
    /// </summary>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    /// <param name="_fromDepBook">
    /// Whether data is from depreciation book or value model. Optional
    /// </param>
    /// <returns>
    /// The end date of reduction entry document retention period.
    /// </returns>
    public static TransDate getRetentionEndDate(
        AssetId              _assetId,
        AssetBookId          _bookId,
        boolean              _fromDepBook = false)
    {
        AssetDocumentEntry_JP           entryTableLoc;
        AssetDocumentTable_JP           documentTableLoc;
        AssetReductionEntryProfile_JP   assetReductionEntryProfileLoc;
        AssetTrans                      assetTransLoc;
        AssetBook                       assetBookLoc;
        TransDate                       retentionStartDate;
        TransDate                       retentionEndDate;
        int                             periodAmount;

        select firstonly *
            from entryTableLoc
            where entryTableLoc.AssetId  == _assetId
                && entryTableLoc.BookId  == _bookId
            join DocumentId, MainType, RecId from documentTableLoc
            where documentTableLoc.MainType == AssetDocumentMainType_JP::ReductionEntry
                && documentTableLoc.RecId   == entryTableLoc.AssetDocumentTable_JP;

        assetReductionEntryProfileLoc = AssetReductionEntryProfile_JP::find(documentTableLoc.DocumentId);

        switch (assetReductionEntryProfileLoc.RetentionStartFrom)
        {
            case AssetReductionEntryStartFrom_JP::Acquisition:
                select firstOnly TransDate from assetTransLoc
                    where assetTransLoc.AssetId == _assetId
                        && assetTransLoc.BookId == _bookId
                        && assetTransLoc.TransType == AssetTransType::Acquisition;
                retentionStartDate = assetTransLoc.TransDate;
                break;
            case AssetReductionEntryStartFrom_JP::ReductionEntry:
                select firstOnly TransDate from assetTransLoc
                    where assetTransLoc.AssetId == _assetId
                        && assetTransLoc.BookId == _bookId
                        && assetTransLoc.TransType == AssetTransType::ReductionEntryReserve_JP;
                retentionStartDate = assetTransLoc.TransDate;
                break;
            case AssetReductionEntryStartFrom_JP::Depreciation:
                select firstOnly DepreciationStartDate from assetBookLoc
                    where assetBookLoc.AssetId == _assetId
                        && assetBookLoc.BookId == _bookId;
                retentionStartDate = assetBookLoc.DepreciationStartDate;
                break;
        }

        retentionEndDate = retentionStartDate;
        periodAmount = assetReductionEntryProfileLoc.RetentionPeriodAmt;
        switch (assetReductionEntryProfileLoc.RetentionPeriodMeasure)
        {
            case DayWeekMonthQuarterYear::Day:
                retentionEndDate = retentionEndDate + periodAmount;
                break;
            case DayWeekMonthQuarterYear::Week:
                retentionEndDate = retentionEndDate + periodAmount * 7;
                break;
            case DayWeekMonthQuarterYear::Month:
                while (periodAmount > 0)
                {
                    retentionEndDate = nextMth(retentionEndDate);
                    periodAmount--;
                }
                break;
            case DayWeekMonthQuarterYear::Quarter:
                while (periodAmount > 0)
                {
                    retentionEndDate = nextQtr(retentionEndDate);
                    periodAmount--;
                }
                break;
            case DayWeekMonthQuarterYear::Year:
                while (periodAmount > 0)
                {
                    retentionEndDate = nextYr(retentionEndDate);
                    periodAmount--;
                }
                break;
        }

        return retentionEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefReductionEntry</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the "View Detail" functionality for reduction entry document.
    /// </summary>
    /// <param name="_object">
    ///    The caller object where the event is triggered.
    /// </param>
    /// <param name="_assetId">
    /// The instance of <c>AssetId</c>.
    /// </param>
    /// <param name="_bookId">
    /// The instance of <c>AssetBookId</c>.
    /// </param>
    public static void jumpRefReductionEntry(
        Object         _object,
        AssetId        _assetId,
        AssetBookId    _bookId)
    {
        Args    args;
        AssetReductionEntryProfile_JP       reductionEntryProfile;
        AssetDocumentEntry_JP               documentEntry;
        AssetDocumentTable_JP               documentTable;

        // get reduction entry document
        documentEntry = AssetReductionEntryManager_JP::getAssetReductionEntryByAssetBook(_assetId, _bookId);
        if (documentEntry)
        {
            documentTable = AssetDocumentTable_JP::find(documentEntry.AssetDocumentTable_JP);
            reductionEntryProfile =  AssetReductionEntryProfile_JP::find(documentTable.DocumentId);
        }

        // init form
        args = new Args(formStr(AssetReductionEntryProfile_JP));
        if (reductionEntryProfile)
        {
            args.record(reductionEntryProfile);
        }
        args.caller(_object);
        new MenuFunction(menuitemDisplayStr(AssetReductionEntryProfile_JP), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReductionEntryTransPreAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates reduction entry transaction pre adjustment amount.
    /// </summary>
    /// <param name="_depTrans">
    /// The original depreciation transaction.
    /// </param>
    /// <param name="_reductionEntryAdjust">
    /// The adjustment amount.
    /// </param>
    [SysObsolete('This method has been deprecated.', false, 26\11\2021)]
    public static void updateReductionEntryTransPreAdjustment(
        AssetDepTransMap_JP   _depTrans,
        AssetAmount           _reductionEntryAdjust)
    {
        AssetDocumentTrans_JP   documentTrans;
        AssetDocumentEntry_JP   documentEntry;
        AssetDocumentReductionEntryTrans_JP reductionEntryTrans;
        AssetDocumentReductionEntryTable_JP reductionEntryDocument;

        documentTrans = AssetDocumentTrans_JP::findByReference(_depTrans.TableId, _depTrans.RecId);
        documentEntry = AssetDocumentEntry_JP::find(documentTrans.AssetDocumentEntry_JP);

        if (documentTrans
            && documentEntry)
        {
            ttsBegin;
            reductionEntryTrans = AssetDocumentReductionEntryTrans_JP::findByAssetDocumentTrans(documentTrans.RecId, true);
            reductionEntryDocument = AssetDocumentReductionEntryTable_JP::findByDocumentEntry(documentEntry.RecId,true);
            if (reductionEntryTrans
                && reductionEntryDocument)
            {
                reductionEntryTrans.PreAmountMST -= _reductionEntryAdjust;
                reductionEntryTrans.update();

                reductionEntryDocument.PreAmountMST -= _reductionEntryAdjust;
                reductionEntryDocument.update();
            }
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update document id for asset document reduction entry.
    /// </summary>
    /// <param name="_tmpTable">
    /// The temp table used to update reduction entry document.
    /// </param>
    /// <param name="_formDataSource">
    /// The form data source used to update reduction entry document.
    /// </param>
    /// <param name="_templateId">
    /// The specified <c>AssetDocumentReductionEntryTemplateId_JP</c>.
    /// </param>
    /// <param name="_assignToLines">
    /// The assign type used to update document id.
    /// </param>
    public static void updateTemplateId(AssetReductionEntryMassUpdateTmp_JP _tmpTable,
            FormDataSource _formDataSource,
            AssetDocumentReductionEntryTemplateId_JP _templateId,
            AssetReductionEntryDocAssignType_JP _assignToLines)
    {
        AssetDocumentReductionEntry_JP           document;
        AssetReductionEntryMassUpdateTmp_JP      tmpTableLocal;

        int counter = 0;

        if (_assignToLines == AssetReductionEntryDocAssignType_JP::AllLines)
        {
            while select _tmpTable
            {
                if (_tmpTable.DocumentStatus == AssetDocumentReductionEntryStatus_JP::Posted)
                {
                    warning(strFmt("@SYS4006141",
                        _tmpTable.AssetId, _tmpTable.AssetGroup, _tmpTable.AssetBookMergeId));
                    continue;
                }
                document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
                    _tmpTable.AssetId,
                    _tmpTable.AssetBookMergeId);

                _tmpTable.DocumentId = _templateId;
                _tmpTable.update();
                counter++;

                if (document != null)
                {
                    if (_templateId)
                    {
                        document.updateAssetDocumentEntryByDocument(AssetDocumentMainType_JP::ReductionEntry, _templateId);
                    }
                    else
                    {
                        document.deleteAssetDocumentEntry();
                    }
                }
                else
                {
                    if (_templateId)
                    {
                        AssetDocumentReductionEntry_JP::createAssetDocumentEntry(_tmpTable.AssetId, _tmpTable.AssetBookMergeId, _templateId);
                    }
                }
            }
        }
        else if (_assignToLines == AssetReductionEntryDocAssignType_JP::AllLinesWithoutDocuments)
        {
            while select _tmpTable
                where _tmpTable.DocumentId == ''
            {
                if (_tmpTable.DocumentStatus == AssetDocumentReductionEntryStatus_JP::Posted)
                {
                    warning(strFmt("@SYS4006141",
                        _tmpTable.AssetId, _tmpTable.AssetGroup, _tmpTable.AssetBookMergeId));
                    continue;
                }
                document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
                    _tmpTable.AssetId,
                    _tmpTable.AssetBookMergeId);

                if (document == null)
                {
                    if (_templateId)
                    {
                        _tmpTable.DocumentId = _templateId;
                        _tmpTable.update();
                        counter++;
                        AssetDocumentReductionEntry_JP::createAssetDocumentEntry(_tmpTable.AssetId, _tmpTable.AssetBookMergeId, _templateId);
                    }
                }
            }
        }
        else if (_assignToLines == AssetReductionEntryDocAssignType_JP::SelectedLines)
        {
            tmpTableLocal = _formDataSource.getFirst(true);
            while (tmpTableLocal)
            {
                if (tmpTableLocal.DocumentStatus == AssetDocumentReductionEntryStatus_JP::Posted)
                {
                    warning(strFmt("@SYS4006141",
                        tmpTableLocal.AssetId, tmpTableLocal.AssetGroup, tmpTableLocal.AssetBookMergeId));
                }
                else
                {
                    document = AssetReductionEntryManager_JP::getAssetReductionEntryDocByAssetBook(
                        tmpTableLocal.AssetId,
                        tmpTableLocal.AssetBookMergeId);

                    select _tmpTable
                        where _tmpTable.AssetId == tmpTableLocal.AssetId
                            && _tmpTable.AssetBookMergeId == tmpTableLocal.AssetBookMergeId;
                    _tmpTable.DocumentId = _templateId;
                    _tmpTable.update();
                    counter++;

                    if (document != null)
                    {
                        if (_templateId)
                        {
                            document.updateAssetDocumentEntryByDocument(AssetDocumentMainType_JP::ReductionEntry, _templateId);
                        }
                        else
                        {
                            document.deleteAssetDocumentEntry();
                        }
                    }
                    else
                    {
                        if (_templateId)
                        {
                            AssetDocumentReductionEntry_JP::createAssetDocumentEntry(tmpTableLocal.AssetId, tmpTableLocal.AssetBookMergeId, _templateId);
                        }
                    }
                }
                tmpTableLocal = _formDataSource.getNext();
            }
        }

        info(int2str(counter) + ' records updated');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>