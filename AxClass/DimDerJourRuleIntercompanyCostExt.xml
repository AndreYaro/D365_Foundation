<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerJourRuleIntercompanyCostExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Dimension derivation journalizing rule extension for intercompany timesheets transactions.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccJourRuleIntercompanyCost))]
public class DimDerJourRuleIntercompanyCostExt extends DimensionDerivationRuleExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates an allocation list that is based on project or resource setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    /// The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit                     side;
        boolean                         oppositeAccount;
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerDimensionAllocation       ledgerDimensionAllocation;

        side = dimensionDerivationRule.parmAccountingRule().parmSide();
        oppositeAccount = true;

        // Get the Payroll Allocation account from Project Posting (related to the Project that is setup
        changecompany(CompanyInfo::findRecId(dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmLegalEntityRecId()).DataArea)
        {
            ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::PayrollAllocation,
                                            '',
                                            '',
                                            0);
        }

        ledgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(ledgerDimensionDefaultAccount,
                                                                                           dimensionDerivationRule.parmAccountingRule().parmAccountingdistribution().LedgerDimension);

        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                 1,
                                                                                 side,
                                                                                 oppositeAccount);

        _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to dimension derivation rule extension events.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>