<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobType</c> class is the base class for controlling types of kanban jobs.
/// </summary>
/// <remarks>
///  The types of kanban jobs are as follows:
///  <list type="bullet">
///   <item>
///   <description>Process</description>
///   </item>
///   <item>
///   <description>Transfer</description>
///   </item>
///  </list>
///
///  The
///  <c>
///  KanbanJobType
///  </c>
///   class extends the
///  <c>
///  InventType
///  </c>
///   class, because the
///  <c>
///  KanbanJob
///  </c>
///   class variable can own inventory transactions.
/// </remarks>
public abstract class KanbanJobType extends InventType
{
    KanbanJob       kanbanJob;

    InventMovement  wmsGroupingSourceRequirementMovement;
    boolean         cachedGroupingSourceRequirementMovement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate dimension can be changed.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    protected boolean canChangeLicensePlateId()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGetLicensePlateFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the license plate dimension can be set from the kanban card.
    /// </summary>
    /// <returns>
    ///    true if the license plate can be set; otherwise, false.
    /// </returns>
    public boolean canGetLicensePlateFromKanban()
    {
        boolean     result = false;

        if (this.mustBeInventoryControlled())
        {
            InventTable inventTable = kanbanJob.inventTable();

            if (   inventTable
                && WHSInventEnabled::exist(inventTable.ItemId))
            {
                 result = InventDimGroupSetup::newInventTableNoProductDimensions(inventTable).isDimensionActive(fieldNum(InventDim,LicensePlateId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job can have a BOM.
    /// </summary>
    /// <returns>
    ///    true if the job can have a BOM; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveNonDefaultReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban job can have a non-default received quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have a non-default received quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveNonDefaultReceivedQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban job can have the scrap quantity.
    /// </summary>
    /// <returns>
    ///    true if the job can have the scrap quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveScrapQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>KanbanJob</c> table buffer can have a specified status.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    The <c>LeanKanbanJobStatus</c> enumeration value to test.
    /// </param>
    /// <returns>
    ///    true if the <c>KanbanJob</c> table buffer can have the specified status; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns true.
    /// </remarks>
    public boolean canHaveStatus(LeanKanbanJobStatus _leanKanbanJobStatus)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventBeReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a specified inventory transaction can be reserved.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventBeReserved()
    {
        return this.mustBeInventoryControlledIssue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdExpected</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an expected inventory transaction of the <c>KanbanJobType</c> type can be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventUpdExpected()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a financial inventory transaction of the <c>KanbanJobType</c> type can be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventUpdFinancial()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInventUpdPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a physical inventory transaction of the <c>KanbanJobType</c> type can be updated.
    /// </summary>
    /// <returns>
    ///    true if the transaction can be updated; otherwise, false.
    /// </returns>
    public boolean canInventUpdPhysical()
    {
        return this.mustBeInventoryControlled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>KanbanJob</c> record used to instantiate the class instance.
    /// </summary>
    /// <returns>Kanban job record.</returns>
    public KanbanJob parmKanbanJob()
    {
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventDimChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates a possible change in the inventory dimensions of the kanban job.
    /// </summary>
    /// <param name="_origInventDim">
    ///    The original inventory dimensions.
    /// </param>
    /// <param name="_inventDim">
    ///    The new inventory dimensions.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    ///    The inventory dimension group setup; optional.
    /// </param>
    /// <returns>
    ///    true if the dimension change is valid; otherwise, false.
    /// </returns>
    public boolean checkInventDimChange(
        InventDim           _origInventDim,
        InventDim           _inventDim,
        InventDimGroupSetup _inventDimGroupSetup = InventDimGroupSetup::newInventTable(kanbanJob.kanban().inventTable()))
    {
        InventDimParm   inventDimParm;
        boolean         result = true;

        if (this.canChangeLicensePlateId())
        {
            // none of the physical dimensions may change, except for the license plate.
            _inventDimGroupSetup.inventDimParmActivePhysicalInventory(inventDimParm);
            inventDimParm.LicensePlateFlag = NoYes::No;

            if (!InventDim::isInventDimEqual(_origInventDim,_inventDim,inventDimParm.selectedDimFields()))
            {
                result = checkFailed(strFmt("@SYS135861",kanbanJob.kanbanId(),kanbanJob.PlanActivityName));
            }
        }
        else
        {
            if (!InventDim::isInventDimEqualPhysicalDim(_inventDimGroupSetup,_origInventDim,_inventDim))
            {
                result = checkFailed(strFmt("@SYS135861",kanbanJob.kanbanId(),kanbanJob.PlanActivityName));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the inventory movements related to the kanban job.
    /// </summary>
    public abstract void deleteMovement()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWMSOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes output orders related to the <c>kanbanJob</c> record.
    /// </summary>
    /// <returns>
    ///    true if all related output orders were deleted; otherwise, false.
    /// </returns>
    public boolean deleteWMSOrder()
    {
        WMSOrder    wmsOrder;
        boolean     result = true;

        if (kanbanJob.IssueInventTransId)
        {
            ttsbegin;
            while select forupdate wmsOrder
                where wmsOrder.InventTransId    == kanbanJob.IssueInventTransId
                   && (wmsOrder.InventTransType == InventTransType::KanbanJobTransferIssue
                   ||  wmsOrder.InventTransType == InventTransType::KanbanJobWIP)
            {
                result =    result
                         && wmsOrder.validateDelete();

                if (result)
                {
                    wmsOrder.delete();
                }
                else
                {
                    result = checkFailed(strFmt("@SYS322198",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,wmsOrder.OrderId));
                    break;
                }
            }
            ttscommit;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimIds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the inventory dimensions for issue and receipt by merging the item dimensions and
    ///    location dimensions.
    /// </summary>
    /// <param name="_kanban">
    ///    A <c>Kanban</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_issueInventDim">
    ///    A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    /// <param name="_receiptInventDim">
    ///    A <c>InventDim</c> table buffer that is used to initialize the inventory dimensions.
    /// </param>
    public void initInventDimIds(
        Kanban    _kanban,
        InventDim _issueInventDim,
        InventDim _receiptInventDim)
    {
        InventDim   inventDim = _kanban.inventDim();

        kanbanJob.setIssueInventDimId(kanbanJob.mergedInventDimId(inventDim,_issueInventDim));
        kanbanJob.setInventDimId(kanbanJob.mergedInventDimId(inventDim,_receiptInventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExecutable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban job is executable.
    /// </summary>
    /// <param name="_kanban">
    /// The <c>Kanban</c> record to which the kanban job belongs; optional.
    /// </param>
    /// <returns>
    /// A <c>NoYes</c> enumeration value.
    /// </returns>
    public NoYes isExecutable(Kanban _kanban = kanbanJob.kanban())
    {
        KanbanJob   nextKanbanJob = kanbanJob.nextJob();
        NoYes       result        = NoYes::Yes;

        if (kanbanJob.Status == LeanKanbanJobStatus::Completed)
        {
            //completed jobs are no longer active if none of the following is true:
            //- the next job is in status not planned or planned
            //- the job is the last process job of the kanban and the kanban is not emptied
            nextKanbanJob = kanbanJob.nextJob();
            if (   !((nextKanbanJob
                && (nextKanbanJob.Status == LeanKanbanJobStatus::NotPlanned
                ||  nextKanbanJob.Status == LeanKanbanJobStatus::Planned))
                || (kanbanJob.Type       == LeanKanbanJobType::Process
                    &&  !kanbanJob.existLaterJobOfType(LeanKanbanJobType::Process)
                    &&  _kanban.Status       != LeanKanbanStatus::Emptied)))
            {
                result = NoYes::No;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the <c>LedgerTransType</c> enumeration value to use with ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerTransType</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    public abstract LedgerTransType ledgerTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban job must be inventory controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job must be inventory controlled; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Inventory controlled means that ending a kanban job creates inventory transactions.
    /// </remarks>
    public abstract boolean mustBeInventoryControlled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlledIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban job issue must be inventory controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job must be inventory controlled; otherwise, false.
    /// </returns>
    public boolean mustBeInventoryControlledIssue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeInventoryControlledReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban job receipt must be inventory controlled.
    /// </summary>
    /// <returns>
    ///    true if the kanban job must be inventory controlled; otherwise, false.
    /// </returns>
    public boolean mustBeInventoryControlledReceipt()
    {
        boolean         result = kanbanJob.InventTransId != '';

        if (   !result
            && !kanbanJob.RecId)
        {
            PlanActivity planActivity = kanbanJob.planActivity();
            result = planActivity.onHandUpdate(PlanActivityType::Receive);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeTransferMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement for the <c>kanbanJob</c> record is a transfer type movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be a subtype of the <c>InventMov_KanbanJob_Transfer</c> class; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    A transfer type occurs when both sides of a transaction are booked in inventory.
    /// </remarks>
    public boolean mustBeTransferMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWIPIssueMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement for the <c>KanbanJob</c> record is a Work In Progress (WIP)
    ///    issue-type movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be of the <c>InventMov_KanbanJob_WIP</c> type.
    /// </returns>
    /// <remarks>
    ///    A WIP type occurs when only one side of a transaction is booked in inventory.
    /// </remarks>
    public boolean mustBeWIPIssueMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWIPMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the movement for the <c>KanbanJob</c> record is a Work In Progress (WIP) type
    ///    movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be of the <c>InventMov_KanbanJob_WIP</c> type.
    /// </returns>
    /// <remarks>
    ///    A WIP type occurs when only one side of a transaction is booked in inventory.
    /// </remarks>
    public boolean mustBeWIPMovement()
    {
        return    this.mustBeWIPReceiptMovement()
               || this.mustBeWIPIssueMovement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWIPReceiptMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the movement for the <c>KanbanJob</c> record is a Work In Progress (WIP) receipt type
    ///    movement.
    /// </summary>
    /// <returns>
    ///    true if the movement must be of the <c>InventMov_KanbanJob_WIP</c> type.
    /// </returns>
    /// <remarks>
    ///    A WIP type occurs when only one side of a transaction is booked in inventory.
    /// </remarks>
    public boolean mustBeWIPReceiptMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWMSOrderControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an output order must be created for the kanban job.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean mustBeWMSOrderControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustEndUpdateFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban job inventory transactions must be financially updated when it ends.
    /// </summary>
    /// <returns>
    ///    true if the kanban job inventory transactions must be financially updated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean mustEndUpdateFinancial()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHaveKanbanJobIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job must have a <c>KanbanJobIssue</c> record.
    /// </summary>
    /// <returns>
    ///    true if a <c>KanbanJobIssue</c> record is required; otherwise, false.
    /// </returns>
    public boolean mustHaveKanbanJobIssue()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHaveKanbanJobReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban job must have a <c>KanbanJobReceipt</c> record.
    /// </summary>
    /// <returns>
    ///     true if a <c>KanbanJobReceipt</c> record is required; otherwise, false.
    /// </returns>
    public boolean mustHaveKanbanJobReceipt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInventUpdEstimated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an estimated inventory transaction must be updated.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    The method is called from the <c>mustBeUpdatedExpected</c> method on the inventory movement,
    ///    together with a call to the <c>canBeUpdatedEstimated</c> method, which calls the
    ///    <c>canInventUpdExpected</c> method on this class. This makes sure that only inventory controlled
    ///    kanban jobs will return true from the <c>mustBeUpdatedExpected</c> method.
    /// </remarks>
    public boolean mustInventUpdEstimated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanJobType</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    /// The <c>KanbanJob</c> table buffer used to instantiate the class.
    /// </param>
    protected void new(KanbanJob _kanbanJob)
    {
        kanbanJob = _kanbanJob;
        super(kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanJobUpd</c> object and calls its run method.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    /// A <c>KanbanJobStatus</c> table buffer used in the status update.
    /// </param>
    /// <param name="_updateKanban">
    /// A Boolean value that indicates if the parent kanban must be updated when the kanban job is.
    /// </param>
    /// <param name="_kanbanJobStatus">
    /// The caller <c>KanbanJobStatus</c> record.
    /// </param>
    /// <param name="_multi">
    /// A <c>RunbaseRecsMapable</c> object; optional.
    /// </param>
    /// <remarks>
    /// This method is called from a <c>KanbanJobStatus</c> object.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The target status is not allowed for the current kanban job.
    /// </exception>public
    void runStatusReset(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        boolean               _updateKanban,
        KanbanJobStatus       _kanbanJobStatus,
        RunbaseRecsMapable    _multi = null)
    {
        if (this.canHaveStatus(_kanbanJobStatusUpdate.Type))
        {
            KanbanJobUpdReset kanbanJobUpdReset = KanbanJobUpdReset::newParmBuffer(_kanbanJobStatusUpdate,_updateKanban,_kanbanJobStatus);
            kanbanJobUpdReset.run();

            if (_multi)
            {
                _multi.mergeRecs(kanbanJobUpdReset);
            }
        }
        else
        {
            throw error(strFmt("@SYS134358",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_kanbanJobStatusUpdate.Type));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanJobUpd</c> object and calls its run method.
    /// </summary>
    /// <param name="_kanbanJobStatusUpdate">
    /// A <c>KanbanJobStatus</c> table buffer used in the status update.
    /// </param>
    /// <param name="_updateKanban">
    /// A Boolean value that indicates if the parent kanban must be updated when the kanban job is.
    /// </param>
    /// <param name="_kanbanJobStatus">
    /// The caller <c>KanbanJobStatus</c> record.
    /// </param>
    /// <param name="_multi">
    /// A <c>RunbaseRecsMapable</c> object; optional.
    /// </param>
    /// <remarks>
    /// This method is called from a <c>KanbanJobStatus</c> object.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The target status is not allowed for the current kanban job.
    /// </exception>
    public void runStatusUpdate(
        KanbanJobStatusUpdate _kanbanJobStatusUpdate,
        boolean               _updateKanban,
        KanbanJobStatus       _kanbanJobStatus,
        RunbaseRecsMapable    _multi = null)
    {
        if (this.canHaveStatus(_kanbanJobStatusUpdate.Type))
        {
            KanbanJobUpd kanbanJobUpd = KanbanJobUpd::newParmBuffer(_kanbanJobStatusUpdate,_updateKanban,_kanbanJobStatus);
            kanbanJobUpd.run();

            if (_multi)
            {
                _multi.mergeRecs(kanbanJobUpd);
            }
        }
        else
        {
            throw error(strFmt("@SYS134358",kanbanJob.kanbanId(),kanbanJob.PlanActivityName,_kanbanJobStatusUpdate.Type));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>KanbanJob</c> inventory transaction ids as required.
    /// </summary>
    /// <remarks>
    /// The base class method is abstract and must be overwritten in all derived classes.
    /// </remarks>
    public abstract void setInventTransIds()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the <c>SysModule</c> enumeration value to use with ledger postings.
    /// </summary>
    /// <returns>
    ///    A <c>SysModule</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    The base class method is abstract.
    /// </remarks>
    public abstract SysModule sysModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban job is updated.
    /// </summary>
    public void updating()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban job record has been updated.
    /// </summary>
    /// <param name="_kanbanJobOrig">
    /// The original kanban job which is updated.
    /// </param>
    public void updated(KanbanJob _kanbanJobOrig)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the kanban with changes in the kanban job.
    /// </summary>
    public void updateKanban()
    {
        if (   kanbanJob.ExpectedDateTime != kanbanJob.orig().ExpectedDateTime
            && !kanbanJob.existLaterJob())
        {
            ttsbegin;
            Kanban kanban = Kanban::find(kanbanJob.Kanban,true);
            kanban.ExpectedDateTime = kanbanJob.ExpectedDateTime;
            kanban.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the picking list with changes in the kanban job.
    /// </summary>
    /// <param name="_forceRecreate">
    /// A boolean specifying whether the picking list should be recreated independently of the changes
    /// in the kanban job.
    /// </param>
    /// <param name="_kanbanType">
    /// The type of the kanban that the current kanban job belongs to.
    /// </param>
    public void updateKanbanJobPickingList(
        boolean     _forceRecreate  = false,
        KanbanType  _kanbanType     = kanbanJob.kanban().type()
        )
    {
        KanbanJobPickingList    kanbanJobPickingList;

        ttsbegin;
        if (   _forceRecreate
            ||
               (kanbanJob.QuantityOrdered != kanbanJob.orig().QuantityOrdered
            && !kanbanJob.existPreviousJob())
           )
        {
            if (   _kanbanType && _kanbanType.canReplaceBom())
            {
                //delete current picking list
                delete_from kanbanJobPickingList
                    where kanbanJobPickingList.Kanban == kanbanJob.Kanban;

                //create new picking list
                KanbanJobPickingListCreate::newStandardFromKanban(kanbanJob).runOperation();
            }
        }
        else if (kanbanJob.DueDateTime != kanbanJob.orig().DueDateTime
                 || kanbanJob.ExpectedDateTime != kanbanJob.orig().ExpectedDateTime
                 )
        {
            TransDateTime jobMaterialDateTime = KanbanDateCalculation::newKanbanJob(kanbanJob).jobMaterialDateTime(kanbanJob);
            KanbanJobPickingList::setMaterialDateTimeInRecordset(kanbanJob.RecId, jobMaterialDateTime);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsGroupingSourceRequirementMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates an inventory movement for the grouping source requirement.
    /// </summary>
    /// <returns>
    ///    A <c>InventoryMovement</c> class instance; otherwise, null.
    /// </returns>
    public InventMovement wmsGroupingSourceRequirementMovement()
    {
        if (   !wmsGroupingSourceRequirementMovement
            || !cachedGroupingSourceRequirementMovement)
        {
            cachedGroupingSourceRequirementMovement         = true;
            KanbanSourceRequirement kanbanSourceRequirement = KanbanSourceRequirement::findKanban(kanbanJob.Kanban);
            wmsGroupingSourceRequirementMovement            = kanbanSourceRequirement.parentSourceRequirementMovement();
        }

        return wmsGroupingSourceRequirementMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanJobType</c> class.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    The <c>KanbanJob</c> table buffer used to initialize the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanJobType</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified value is not a <c>LeanKanbanJobType</c> enumeration value.
    /// </exception>
    public static KanbanJobType construct(KanbanJob _kanbanJob)
    {
        LeanKanbanJobTypeFactoryAttribute attr = new LeanKanbanJobTypeFactoryAttribute(_kanbanJob.Type);
        KanbanJobType kanbanJobType = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(KanbanJobType), attr);

        if (!kanbanJobType)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        
        kanbanJobType.kanbanJob = _kanbanJob;

        return kanbanJobType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>