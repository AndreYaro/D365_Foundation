<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineType_ProjectItemReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SalesLineTypeFactoryAttribute(SalesType::ItemReq, NoYes::Yes)]
class       SalesLineType_ProjectItemReq
extends     SalesLineType_Project
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the sales line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    boolean canBeInvoiced()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateParameters</Name>
				<Source><![CDATA[
    public boolean checkUpdateParameters(boolean _dropInvent, Common _childBuffer)
    {
        boolean ret = super(_dropInvent, _childBuffer);

        if (_dropInvent && this.resetInventoryQuantityWhenUpdating())
        {
            ret = checkFailed("@SCM:SalesLineUpdateItemReqQuantityResetUpdate");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInventoryQuantityWhenUpdating</Name>
				<Source><![CDATA[
    private boolean resetInventoryQuantityWhenUpdating()
    {
        boolean ret = false;

        SalesLine salesLine_Orig = salesLine.orig();

        if (((salesLine.SalesId              != salesLine_Orig.SalesId)   ||
             (salesLine.ProjId               != salesLine_Orig.ProjId && ProjParameters::find().CreateItemReqForPO == NoYes::No))       &&
             (salesLine.RemainSalesPhysical  != 0                         ||
              salesLine.RemainInventPhysical != 0))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    public void inserting()
    {
        if (!salesLine.ProjFundingSource
            && salesLine.projTable().hasMultipleFundingSourcesWithItemReqMultFundSourcesFeatureEnabled())
        {
            throw error("@Proj:ProjItemRequirementEntityErrorMessage");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    public void deleted()
    {
        super();

        if (salesLine.SalesId)
        {
            SalesTable localSalesTable = SalesTable::find(salesLine.SalesId, true);

            if (localSalesTable.numberOfLines() == 0)
            {
                localSalesTable.delete();
            }
        }

        if (salesLine.ServiceOrderId)
        {
            SMAPreServiceOrderLine::deleteLine(salesLine.ServiceOrderId, salesLine.ProjTransId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeliveryDateControl</Name>
				<Source><![CDATA[
    boolean doDeliveryDateControl()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesLine</c> record by using the <c>SalesCategory</c> value.
    /// </summary>
    /// <param name="_salesCategory">
    /// The <c>SalesCategory</c> value from which to initialize the sales line.
    /// </param>
    /// <param name="_name">
    /// The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(SalesCategory _salesCategory, ItemFreeTxt _name)
    {
        super(_salesCategory, _name);

        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the sales line with the specified <c>InventTable</c> record.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record on which to base the sales line.
    /// </param>
    /// <param name="_resetPrice">
    /// A Boolean value that specifies whether to reset the price; optional.
    /// </param>
    /// <param name="_matchingAgreement">
    /// The record ID of the agreement header that is associated with the sales order. Used for the
    /// automatic association with an agreement line.
    /// </param>
    /// <param name="_performVariantValidation">
    /// A Boolean value that indicates whether product variant validation should be performed and pass before executing variant specific defaulting; optional.
    /// </param>
    void initFromInventTable(InventTable _inventTable, boolean _resetPrice = true, AgreementHeaderRecId _matchingAgreement = 0, boolean _performVariantValidation = false)
    {
        super(_inventTable, _resetPrice, _matchingAgreement, _performVariantValidation);

        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    void initFromSalesTable(SalesTable  _salesTable, boolean _ignoreInventDim = false)
    {
        ProjTable  projTable = _salesTable.projTable();

        super(_salesTable, _ignoreInventDim);

        salesLine.DefaultDimension = salesLine.copyDimension(projTable.DefaultDimension,this.dimensionCopy());
        salesLine.TaxGroup  = ProjParameters::taxGroupInvoice(projTable.ProjId);

        if (!ProjValProjCategorySetUp::checkProjCategory(salesLine.ProjId,salesLine.ProjCategoryId))
        {
            salesLine.ProjCategoryId = '';
        }

        salesLine.setProjLinePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        SalesTable salesTableLoc = salesLine.salesTable();
        if (!salesLine.ProjFundingSource 
            && salesLine.SalesId 
            && salesTableLoc.FundingSource
            && ProjItemRequirementMultipleFundingSourcesFeatureHelper::isFeatureEnabled())
        {
            salesLine.ProjFundingSource = salesLine.salesTable().FundingSource;
            salesLine.initFromSalesTable(salesTableLoc);
        }

        salesLine.CurrencyCode               = salesLine.projTable().currencyId();
        salesLine.ShippingDateRequested      = InventOrderEntryDeadlineTable::effectiveOrderDate('','');

        salesLine.LineDisc                   = 0;
        salesLine.LinePercent                = 0;
        salesLine.SalesMarkup                = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAllowed</Name>
				<Source><![CDATA[
    public boolean markupAllowed()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeRegistered</Name>
				<Source><![CDATA[
    boolean  mayPickingListBeRegistered()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayPickingListBeUpdated()
    {
        if (salesLine.Blocked)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPackingSlipBeUpdated</Name>
				<Source><![CDATA[
    boolean mayProjectPackingSlipBeUpdated()
    {
        if (salesLine.Blocked)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayProjectPickingListBeUpdated</Name>
				<Source><![CDATA[
    boolean mayProjectPickingListBeUpdated()
    {
        if (salesLine.Blocked)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustConfirmDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the requested dates must be confirmed.
    /// </summary>
    /// <param name="_strategy">
    /// A <c>SalesConfirmDatesStrategy</c> object that contains specific logic to set confirmed dates.
    /// </param>
    /// <returns>
    /// True if the dates must be confirmed; otherwise, false.
    /// </returns>
    public boolean mustConfirmDates(SalesConfirmDatesStrategy   _strategy)
    {
        if (   _strategy
            && salesLine.SalesStatus == SalesStatus::Backorder)
        {
            return _strategy.mustSetConfirmedDates(salesLine);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetProjAdjustRefInventTrans</Name>
				<Source><![CDATA[
    public boolean mustSetProjAdjustRefInventTrans(InvoiceId _invoiceId = '')
    {
        return true;     // Always must set projAdjustRefId when using an ItemRequirement
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQtyAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to update the <c>SalesQty</c> field.
    /// </summary>
    /// <returns>
    /// true if the field must be updated; otherwise, false.
    /// </returns>
    boolean salesQtyAllowEdit()
    {
        boolean ok = super();

        if (ok && salesLine.isLinkedToProdConsumed())
        {
            ok = checkFailed("@SYS123268");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    public void updating()
    {
        if (this.resetInventoryQuantityWhenUpdating())
        {
            SalesQty    salesQty    = salesLine.RemainSalesPhysical;
            InventQty   inventQty   = salesLine.RemainInventPhysical;
            
            salesLine.RemainSalesPhysical   = 0;
            salesLine.RemainInventPhysical  = 0;

            if (salesLine.SalesId != salesLine.orig().SalesId)
            {
                salesLine.LineCreationSequenceNumber = salesLine.nextLineCreationSequence();
            }          

            salesLine.update();
            salesLine.RemainSalesPhysical   = salesQty;
            salesLine.RemainInventPhysical  = inventQty;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete(boolean _interCompanyForce = false,boolean _mcrCancel = false)
    {
        boolean ret = super(_interCompanyForce, _mcrCancel);

        if (ret && salesLine.isLinkedToProdConsumed())
        {
            ret = checkFailed("@SYS122590");
        }

        if (ret && salesLine.isLinkedToConfirmedPurchOrder())
        {
            ret = checkFailed(strFmt("@Proj:DeleteSalesOrderErrorConfirmedPO", salesLine.InventRefId));
        }

        // The cancelled sales order deletion is not allowed when a linked purhchase order is in open order or received state.
        if (ret && salesLine.SalesStatus == SalesStatus::Canceled)
        {
            boolean isLinkedToPO;
            PurchId purchId;

            [isLinkedToPO, purchId] = SalesLine::isLinkedProjectPOStatusOpenOrReceived(salesLine);

            if (isLinkedToPO)
            {
                ret = checkFailed(strFmt("@Proj:DeleteSalesOrderErrorItemReqPO", purchId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite(boolean _skipCreditLimitCheck = false)
    {
        boolean     ret;
        ProjTable   projTable;
        boolean     ctrlProjItemReq = true;

        if (salesLine.ProjId)
        {
            // For performance reasons only make DB call with valid ProjID
            projTable   = ProjTable::find(salesLine.ProjId);
            ctrlProjItemReq = projTable.status().ctrlProjItemReq();
        }

        if (ctrlProjItemReq)
        {
            ret = super(_skipCreditLimitCheck);

            if (!salesLine.ProjLinePropertyId)
            {
                ret = checkFailed("@SYS70031");
            }
        }

        if (! ctrlProjItemReq)
        {
            if (projTable.Header == true)
            {
                // Header Project
                ret = checkFailed(strFmt("@SYS96612",projTable.ProjId));
            }
            else if (! projTable.type().custAccount())
            {
                // No customer account on project
                ret = checkFailed("@SYS98240");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of the <c>SalesLineType_ProjectItemReq</c> class for the provided sales order line record.
    /// </summary>
    /// <param name = "_salesLine">Sales order line record.</param>
    /// <returns>An instance of <c>SalesLineType_ProjectItemReq</c> class.</returns>
    public static SalesLineType_ProjectItemReq newFromSalesLine(SalesLine _salesLine)
    {
        return new SalesLineType_ProjectItemReq(_salesLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>