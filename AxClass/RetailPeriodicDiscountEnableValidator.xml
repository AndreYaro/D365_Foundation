<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPeriodicDiscountEnableValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates whether periodic discount can be enabled.
/// </summary>
public final class RetailPeriodicDiscountEnableValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateEnableDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if discount can be enabled.
    /// </summary>
    /// <param name = "_discount">RetailPeriodicDiscount buffer.</param>
    /// <param name = "_retailPeriodicDiscountDs">RetailPeriodicDiscount form data source.</param>
    /// <returns>True if the validation passes; otherwise, false.</returns>
    [Wrappable(false)]
    public static boolean validateEnableDiscount(
        RetailPeriodicDiscount _discount,
        FormDataSource _retailPeriodicDiscountDs)
    {
        _discount.deleteValidationLogs();

        if (RetailPricingLengthyDiscountValidationInBatchFlight::instance().isEnabled() &&
            RetailPeriodicDiscountEnableValidator::isLengthyEnableValidationExpected(_discount))
        {
            ttsbegin;
            _discount.selectForUpdate(true);
            _discount.Status = RetailDisabledEnabled::Disabled; // Disable the discount till validation is done.
            _discount.ValidationStatus = RetailPricingValidationStatus::Validating;
            _discount.update();
            ttscommit;

            if (_retailPeriodicDiscountDs)
            {
                _retailPeriodicDiscountDs.reread();
            }

            // Create batch task
            RetailPeriodicDiscountEnableValidationJob task =
                new RetailPeriodicDiscountEnableValidationJob();

            task.parmDiscountId(_discount.RecId);
            task.batchInfo().parmCaption(RetailPeriodicDiscountEnableValidator::getBatchJobCaption(_discount));
            task.batchInfo().parmBatchExecute(true);
            task.batchInfo().doBatch();

            info(strFmt(
                "@RetailPricing:DiscountEnableValidationBatchMessage",
                RetailPeriodicDiscountEnableValidator::getBatchJobCaption(_discount)));
            return true; // Allow current data to be saved.
        }
        else
        {
            boolean ret = _discount.validateEnable();
            
            if (ret)
            {
                _discount.ValidationStatus = RetailPricingValidationStatus::Validated;
            }
            else
            {
                // Since the validation fails, it will revert all fields to previous value so update the previous value to failed as well.
                _discount.orig().ValidationStatus =  RetailPricingValidationStatus::Failed;
                _discount.ValidationStatus = RetailPricingValidationStatus::Failed;
            }

            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLengthyEnableValidationExpected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether lengthy validation is expected for discount enable.
    /// </summary>
    /// <param name = "_discount">RetailPeriodicDiscount buffer.</param>
    /// <returns>True if lengthy validation is expected; otherwise, false.</returns>
    internal static boolean isLengthyEnableValidationExpected(
        RetailPeriodicDiscount _discount)
    {
        RetailPeriodicDiscountLine discountLine;
        select count(RecId) from discountLine
            where discountLine.OfferId == _discount.OfferId;

        if (discountLine.RecId > RetailPeriodicDiscountEnableValidator::getMaxNumOfDiscountLinesForSyncValidation())
        {
            if (_discount.PeriodicDiscountType ==
                RetailDiscountOfferTypeBase::DiscountOfferLineQuantityLimit)
            {
                return true;
            }

            select count(RecId) from discountLine
                where discountLine.OfferId == _discount.OfferId
                && discountLine.LineType == RetailDiscountLineIncludeExcludeTypeBase::Exclude;
        
            if (discountLine)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumOfDiscountLinesForSyncValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get maximum number of discount lines above which the validation may go async.
    /// </summary>
    /// <returns>Maximum number of discount lines above which the validation may go async.</returns>
    [Wrappable(true), Replaceable(false)]
    public static int getMaxNumOfDiscountLinesForSyncValidation()
    {
        // Expects to run for > 10 seconds. The expected duration is O(N2), N being number of lines.
        return 2000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchJobCaption</Name>
				<Source><![CDATA[
    internal static str getBatchJobCaption(RetailPeriodicDiscount _discount)
    {
        return strFmt("@RetailPricing:DiscountEnableValidationBatchCaption", _discount.OfferId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>