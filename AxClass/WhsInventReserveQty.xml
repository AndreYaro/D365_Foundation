<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventReserveQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WHSInventReserveQty</c> class provides WHS specific on-hand quantities.
/// </summary>
class WhsInventReserveQty implements InventIAvailability, PdsCWInventIAvailability
{
    #WHSReservationHierarchy

    boolean needsCalculating;

    InventTable                     inventTable;
    InventDim                       inventDimCriteria;
    InventDimParm                   inventDimParm;
    WHSReservationHierarchyLevel    level;

    WHSInventReserveQtyCalculator   calculator;

    InventSum                       inventSum; // never refer to this field directly. use this.inventSum()
    WHSInventReserve                whsInventReserveAggr;
    WHSInventReserve                whsInventReserveLevel;
    WHSReservationHierarchyLevel    upperLevelOfMinimumCalculation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total quantity available for reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// The quantity includes both physical and ordered goods that are available for reservation.
    /// </remarks>
    public InventQtyAvailOrdered availOrdered()
    {
        this.calculate();
        
        return whsInventReserveAggr.AvailOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total quantity available for reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    /// <remarks>
    /// The quantity includes both physical and ordered goods that are available for reservation.
    /// </remarks>
    [Hookable(false)]
    public PdsCWAvailOrdered pdsCWAvailOrdered()
    {
        this.calculate();

        return whsInventReserveAggr.CWAvailOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyAvailPhysical availPhysical()
    {
        this.calculate();

        return whsInventReserveAggr.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWAvailPhysical pdsCWAvailPhysical()
    {
        this.calculate();
            
        return whsInventReserveAggr.CWAvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availPhysicalLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation on the requested level.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyAvailPhysical availPhysicalLevel()
    {
        this.calculate();

        return whsInventReserveLevel.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailPhysicalLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation on the requested level.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWAvailPhysical pdsCWAvailPhysicalLevel()
    {
        this.calculate();
            
        return whsInventReserveLevel.CWAvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_reserveOnOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation; optional.
    /// </param>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQty availReservation(NoYes _reserveOnOrdered = NoYes::Yes)
    {
        return _reserveOnOrdered ? this.availOrdered() : this.availPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_reserveOnOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation; optional.
    /// </param>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWAvailReservation pdsCWAvailReservation(NoYes _reserveOnOrdered = NoYes::Yes)
    {
        return _reserveOnOrdered ? this.pdsCWAvailOrdered() : this.pdsCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>availTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    public InventQtyAvailOrdered availTotal()
    {
        this.calculate();

        return whsInventReserveAggr.AvailOrdered - this.inventSum().OnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAvailTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    [Hookable(false)]
    public PdsCWAvailOrdered pdsCWAvailTotal()
    {
        this.calculate();
            
        return whsInventReserveAggr.CWAvailOrdered - this.inventSum().PdsCWOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate()
    {
        if (!needsCalculating)
        {
            return;
        }

        calculator = WHSInventReserveQtyCalculator::newFromParms(
                        this.parmInventTable(),
                        this.parmInventDimCriteria(),
                        this.parmInventDimParm());
        calculator.parmUpperLevelOfMinimumCalculation(this.parmUpperLevelOfMinimumCalculation());

        whsInventReserveAggr = calculator.whsInventReserveAggr();
        whsInventReserveLevel = calculator.whsInventReserveLevel();

        needsCalculating = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSum</Name>
				<Source><![CDATA[
    private InventSum inventSum()
    {
        if (!inventSum.ItemId)
        {
            this.calculate();
            inventSum = calculator.inventSum();
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        needsCalculating = true;
        upperLevelOfMinimumCalculation = #ITEMHIERARCHYLEVEL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyOrdered ordered()
    {
        this.calculate();

        return whsInventReserveLevel.AvailOrdered + whsInventReserveLevel.ReservOrdered - whsInventReserveLevel.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWOrdered pdsCWOrdered()
    {
        this.calculate();
            
        return whsInventReserveLevel.CWAvailOrdered + whsInventReserveLevel.CWReservOrdered - whsInventReserveLevel.CWAvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    public inventQtyOrderedSum orderedSum()
    {
        return this.ordered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWOrderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    [Hookable(false)]
    public PdsCWOrdered pdsCWOrderedSum()
    {
        return this.pdsCWOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        if (inventDimCriteria != _inventDimCriteria
            && !InventDim::isInventDimEqual(inventDimCriteria, _inventDimCriteria))
        {
            needsCalculating = true;
        }

        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        if (inventDimParm != _inventDimParm
            && !InventDimParm::isInventDimParmEqual(inventDimParm, _inventDimParm))
        {
            needsCalculating = true;
        }

        inventDimParm = _inventDimParm;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSum</Name>
				<Source><![CDATA[
    public InventSum parmInventSum(InventSum _inventSum = inventSum)
    {
        inventSum = _inventSum;

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        if (inventTable != _inventTable
            || inventTable.ItemId != _inventTable.ItemId)
        {
            needsCalculating = true;
        }

        inventTable = _inventTable;

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservOrdered reservOrdered()
    {
        this.calculate();

        return whsInventReserveLevel.ReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWReservOrdered pdsCWReservOrdered()
    {
        this.calculate();

        return whsInventReserveLevel.CWReservOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservPhysical reservPhysical()
    {
        this.calculate();

        return whsInventReserveLevel.ReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the catch weight unit.
    /// </returns>
    [Hookable(false)]
    public PdsCWReservPhysical pdsCWReservPhysical()
    {
        this.calculate();
            
        return whsInventReserveLevel.CWReservPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInventReserveQty construct()
    {
        return new WHSInventReserveQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new instance of <c>WHSInventReserveQty</c> initialized with the given parameters.
    /// </summary>
    /// <param name="_inventTable">
    ///     <c>InventTable</c> record to use.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///     <c>InventDim</c> criteria for the calculations.
    /// </param>
    /// <param name="_inventDimParm">
    ///     <c>InventDimParm</c> criteria for the calculations.
    /// </param>
    /// <param name="_inventSum">
    ///     <c>InventSum</c> supplying non-WHS specific quantities.
    /// </param>
    /// <returns>
    ///     New instance of the <c>WHSInventReserveQty</c> class.
    /// </returns>
    public static  WHSInventReserveQty newFromParms(
        InventTable                     _inventTable,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParm = _inventDimCriteria.toDimParm(),
        InventSum                       _inventSum = null)
    {
        WHSInventReserveQty ret = WHSInventReserveQty::construct();

        ret.parmInventTable(_inventTable);
        ret.parmInventDimCriteria(_inventDimCriteria);
        ret.parmInventDimParm(_inventDimParm);
        ret.parmInventSum(_inventSum);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpperLevelOfMinimumCalculation</Name>
				<Source><![CDATA[
    public WHSReservationHierarchyLevel parmUpperLevelOfMinimumCalculation(WHSReservationHierarchyLevel _upperLevelOfMinimumCalculation = upperLevelOfMinimumCalculation)
    {
        if (upperLevelOfMinimumCalculation != _upperLevelOfMinimumCalculation)
        {
            needsCalculating = true;
        }

        upperLevelOfMinimumCalculation = _upperLevelOfMinimumCalculation;

        return upperLevelOfMinimumCalculation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>