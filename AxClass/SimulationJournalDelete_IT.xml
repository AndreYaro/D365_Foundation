<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SimulationJournalDelete_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class deletes or reopen ledger journal.
/// </summary>
public class SimulationJournalDelete_IT extends SimulationJournalUpdate_IT implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDialogControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds parameters to dialog.
    /// </summary>
    public void addDialogControls()
    {
        dialogVerbose = dialog.addFieldValue(enumStr(NoYes), verbose, "@ExtendedItallianLocalization:VerboseOutput","@ExtendedItallianLocalization:ShowDetailedOutput");
        dialogVerbose.value(verbose);

        dialogReopen = dialog.addFieldValue(enumStr(NoYes), reopen, "@ExtendedItallianLocalization:Reopen","@ExtendedItallianLocalization:SimulationJournalReopenedHelpText");
        dialogReopen.value(verbose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        verbose = dialogVerbose.value();
        reopen = dialogReopen.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        this.buildQuery();
        verbose = true;
        reopen = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performJourAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes or reopen ledger journal depending on parameters.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The ledger journal header record.</param>
    /// <exception>Throws error if update was unsuccessful.</exception>
    protected void performJourAction(LedgerJournalTable _ledgerJournalTable)
    {
        if (_ledgerJournalTable)
        {
            try
            {
                if (reopen)
                {
                    if (_ledgerJournalTable.SimulationPosted_IT && !_ledgerJournalTable.Posted)
                    {
                        SimulationJournalReOpen_IT simulationJournalReOpen = simulationJournalReOpen_IT::construct(_ledgerJournalTable.JournalNum);
                        simulationJournalReOpen.runOperation();
                    }
                    if (verbose)
                    {
                        info (strfmt("@ExtendedItallianLocalization:JournalReopened", _ledgerJournalTable.JournalNum));
                    }
                }
                else
                {
                    LedgerJournalTrans ledgerJournalTrans;

                    while select forupdate ledgerJournalTrans
                        where ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
                    {
                        ledgerJournalTrans.delete(true);

                        if (verbose)
                        {
                            info (strfmt("@ExtendedItallianLocalization:SimulationTransactionOnVoucherRemoved", ledgerJournalTrans.Voucher));
                        }
                    }

                    LedgerJournalTable ledgerJournalTableLocal;

                    while select forupdate ledgerJournalTableLocal
                        where ledgerJournalTableLocal.JournalNum == _ledgerJournalTable.JournalNum
                    {
                        ledgerJournalTableLocal.delete();
                    }

                    if (verbose)
                    {
                        info (strfmt("@ExtendedItallianLocalization:JournalDeleted", _ledgerJournalTable.JournalNum));
                    }
                }
            }
            catch (Exception::Error)
            {
                throw error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@ExtendedItallianLocalization:DeleteReopenSimulationJournals";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SimulationJournalDelete_IT simulationJournalDelete = new SimulationJournalDelete_IT();
        simulationJournalDelete.batchInfo().parmBatchExecute(true);

        if (simulationJournalDelete.prompt())
        {
            simulationJournalDelete.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>