<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveResume</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransArchiveResume extends RunBaseBatch implements BatchRetryable
{
    InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventTransArchiveProcessHistoryTable
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransArchiveProcessHistoryTable</Name>
				<Source><![CDATA[
    public inventTransArchiveProcessHistoryTable parmInventTransArchiveProcessHistoryTable(
        InventTransArchiveProcessHistoryTable _inventTransArchiveProcessHistoryTable = inventTransArchiveProcessHistoryTable)
    {
        inventTransArchiveProcessHistoryTable = _inventTransArchiveProcessHistoryTable;

        return inventTransArchiveProcessHistoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resumes an archiving of inventory transactions.
    /// </summary>
    public void run()
    {
        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(classStr(InventTransArchiveResume));
        using (var activityContext = logger.inventTransArchiveResume().logMeasure(funcName()))
        {
            if (InventTransArchiveService::existsAnotherInventTransArchivingJobRunning(this.parmCurrentBatch().RecId))
            {
                throw error("@SCM:AnotherTransArchivingNotFinishedV2");
            }

            if (InventTransArchivingReverse::existsAnotherInventTransArchivingReverseJobRunning())
            {
                throw error("@SCM:AnotherTransArchivingReverseNotFinishedV2");
            }

            inventTransArchiveProcessHistoryTable = InventTransArchiveProcessHistoryTable::findBySessionId(inventTransArchiveProcessHistoryTable.SessionId, true);
       
            // Regenerate archive tasks in resuming stage if archiving process failed to generate archive tasks
            if (!InventTransArchiveTask::exists(inventTransArchiveProcessHistoryTable.SessionId))
            {
                InventTransArchiveService::prepareInventTransArchivingTasks(
                                inventTransArchiveProcessHistoryTable.SessionId,
                                inventTransArchiveProcessHistoryTable.FromDateOfClosedPeriod,
                                inventTransArchiveProcessHistoryTable.EndDateOfClosedPeriod);
            }

            if (InventTransArchiveTask::existsNotAssignedBundleId(inventTransArchiveProcessHistoryTable.SessionId))
            {
                InventTransArchiveTaskBundleHelper::createAndAssignBundle(
                    inventTransArchiveProcessHistoryTable.SessionId,
                    inventTransArchiveProcessHistoryTable.BundleSize);
            }

            ttsbegin;

            boolean resumeArchiving;
            if (inventTransArchiveProcessHistoryTable.StopRunning == NoYes::Yes)
            {
                this.updateArchivingProcessRecord();
                resumeArchiving = true;
            }

            ttscommit;

            if (resumeArchiving)
            {
                Batch batch = BatchHeader::getCurrentBatchTask();

                if (!batch)
                {
                    throw error("@DataExpTool:ErrMsg_BatchJobSelect_1");
                }

                BatchHeader batchHeader = BatchHeader::construct(batch.BatchJobId);

                if (!batchHeader)
                {
                    throw error("@DataExpTool:ErrMsg_BatchHeaderSelect_1");
                }

                InventTransArchiveTaskBatchManager inventTransArchiveTaskBatchManager = InventTransArchiveTaskBatchManager::newFromBatchParameters(batchHeader, batch);
                inventTransArchiveTaskBatchManager.createArchiveBatchTasks(inventTransArchiveProcessHistoryTable.SessionId);
            }
            else
            {
                error("@SYS18447");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetArchiveTaskState</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted. Inventory transaction consolidation is using bundle by default.', false, 20\4\2024)]
    protected void resetArchiveTaskState()
    {
        InventTransArchiveTask inventTransArchiveTask;

        ttsbegin;
        update_recordset inventTransArchiveTask
            setting InventTransArchiveState = InventTransArchiveState::Waiting
            where   inventTransArchiveTask.SessionId == inventTransArchiveProcessHistoryTable.SessionId &&
                    inventTransArchiveTask.InventTransArchiveState == InventTransArchiveState::Processing;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateArchivingProcessRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>InventTransArchiveProcessHistoryTable</c> record with information that the archiving has been resumed.
    /// </summary>
    protected void updateArchivingProcessRecord()
    {
        ttsbegin;
        inventTransArchiveProcessHistoryTable = InventTransArchiveProcessHistoryTable::findBySessionId(inventTransArchiveProcessHistoryTable.SessionId, true);
        inventTransArchiveProcessHistoryTable.StopRunning = NoYes::No;
        inventTransArchiveProcessHistoryTable.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventTransArchiveResume construct()
    {
        return new InventTransArchiveResume();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        if (InventTransArchiveFeatureHelper::isFeatureEnabled())
        {
            return "@SCM:ResumeInventTransArchivingV2";
        }

        return "@SCM:ResumeInventTransArchiving";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        if (InventTransArchiveService::existsAnotherInventTransArchivingJobRunning())
        {
            throw error("@SCM:AnotherTransArchivingNotFinishedV2");
        }

        if (InventTransArchivingReverse::existsAnotherInventTransArchivingReverseJobRunning())
        {
            throw error("@SCM:AnotherTransArchivingReverseNotFinishedV2");
        }

        if (args.dataset() == tableNum(InventTransArchiveProcessHistoryTable))
        {
            InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable = args.record();

            if (inventTransArchiveProcessHistoryTable.existsReverseJob())
            {
                throw error("@SCM:ReverseArchivingJobCannotBeResumedV2");
            }

            InventTransArchiveResume inventTransArchiveResume = InventTransArchiveResume::construct();
            inventTransArchiveResume.getLast();
            inventTransArchiveResume.parmInventTransArchiveProcessHistoryTable(args.record());

            if (inventTransArchiveResume.prompt())
            { 
                inventTransArchiveResume.runOperation();
            }           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>