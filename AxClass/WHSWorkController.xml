<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWorkController</c> class is the controller class for the
///    <c>WHSWork</c> report.
/// </summary>
class WHSWorkController extends SrsReportRunController implements BatchRetryable
{
    private static const str CurUserIdParameterName = 'CurrentUserId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the report query ranges based on caller.
    /// </summary>
    protected void prePromptModifyContract()
    {
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));

        SrsReportRdlDataContract rdlContract = this.parmReportContract().parmRdlContract();
        if (rdlContract.parameterExists(WHSWorkController::CurUserIdParameterName))
        {
            rdlContract.getParameter(WHSWorkController::CurUserIdParameterName).setValueTyped(curUserId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the report query ranges based on caller.
    /// </summary>
    /// <param name="_query">
    /// The hold the <c>Query</c> object of the report.
    /// </param>
    public void setRanges(Query _query)
    {
        WHSWorkTable            workTable;
        str                     range;

        if (this.parmArgs()
        &&  this.parmArgs().caller()
        &&  this.parmArgs().dataset() == tableNum(WHSWorkTable))
        {
            FormDataSource workTableDS = FormDataUtil::getFormDataSource(this.parmArgs().record());

            if (_query && workTableDS)
            {
                // build range
                for (workTable = workTableDS.getFirst(true) ? workTableDS.getFirst(true) : workTableDS.cursor();
                     workTable;
                     workTable = workTableDS.getNext())
                {
                    range = range == '' ? workTable.WorkId : range + ',' + workTable.WorkId;
                }

                if (range)
                {
                    QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(WHSWorkTable));

                    // check for QueryBuildDataSource
                    if (queryBuildDataSource)
                    {
                        // find the range, if it's not found add it
                        SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WHSWorkTable, WorkId)).value(range);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSWorkController   controller = new WHSWorkController();

        controller.parmReportName(ssrsReportStr(WHSWork, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>