<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingLineCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustAgingLineCalculation</c> class calculates the aging line balances for customer.
/// </summary>
internal class CustAgingLineCalculation
{
    TransDate balanceAsOfDate;
    NoYes payments;
    NoYes printReversed;
    NoYes details;
    CustVendReportName agingBucket;
    ForwardBackwardPrinting direction;
    NoYes excludeZeroBalance;
    NoYes excludeNegativeBalance;
    boolean updateCollectionsStatus;
    TransDate agingDate;
    List multiBillingClassification;
    NoYes inclTransWithNoBillingClass;
    DateTransactionDuedate agedBy;

    Map lineToCounterMap;
    CustVendAgingPeriodScaleTmp agingPeriodScaleTmp;
    int agingBucketCount;
    //Scale end which is not dateMax
    TransDate scaleEnd;
    TransDate scaleStart;
    boolean isScaleEndDateMax;
    boolean isScaleStartDateNull;

    CustVendTransAging customersVendors;
    CustAgingLineProcessingTmp custAgingLineProcessingTmp;
    CustVendAgingCalculatedTmp agingCalculatedTmp;
    CustTmpAccountsum custTmpAccountSum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
            DateTransactionDuedate _agedBy,
            PositiveDays _interval,
            TransDate _balanceAsOfDate,
            TransDate _agingDate,
            NoYes _payments,
            DayMonth _period,
            ForwardBackwardPrinting _direction,
            CustVendReportName _agingBucket,
            NoYes _printReversed,
            NoYes _details,
            List _multiBillingClassification = null,
            NoYes _inclTransWithNoBillingClass = NoYes::No,
            NoYes _excludeZeroBalance = NoYes::No,
            NoYes _excludeNegativeBalance = NoYes::No,
            boolean _updateCollectionsStatus = true)
    {
        agedBy = _agedBy;
        balanceAsOfDate = _balanceAsOfDate;
        payments = _payments;
        printReversed = _printReversed;
        details = _details;
        agingBucket = _agingBucket;
        direction = _direction;
        excludeZeroBalance = _excludeZeroBalance;
        excludeNegativeBalance = _excludeNegativeBalance;
        updateCollectionsStatus = _updateCollectionsStatus;
        agingDate = _agingDate;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            multiBillingClassification = _multiBillingClassification;
            inclTransWithNoBillingClass = _inclTransWithNoBillingClass;
        }

        lineToCounterMap = new Map(Types::Real, Types::Integer);

        if (agingBucket)
        {
            agingPeriodScaleTmp = CustVendAgingPeriodScaleTmp::calcFromAgingPeriodDefinition(agingBucket, _agingDate);
            // filling in description and aging indicator
            this.insertAgingBucket(agingBucket);
        }
        else
        {
            agingPeriodScaleTmp = CustVendAgingPeriodScaleTmp::calcFromStartDateAndInterval(_interval, _agingDate, _period, direction);
        }

        agingBucketCount = CustVendAgingPeriodScaleTmp::getBucketCount(agingPeriodScaleTmp) + 1;

        this.populateAgingScaleStartEnd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAgingBucket</Name>
				<Source><![CDATA[
    private void insertAgingBucket(CustVendReportName _agingBucket)
    {
        StatRepIntervalLine line;
        Counter counter = 2;

        while select LineNum from line
            order by LineNum desc
            where line.Name == _agingBucket
        {
            lineToCounterMap.insert(line.LineNum, counter);
            counter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAgingScaleStartEnd</Name>
				<Source><![CDATA[
    private void populateAgingScaleStartEnd()
    {
        select maxOf(TransDate) from agingPeriodScaleTmp;
        scaleEnd = agingPeriodScaleTmp.TransDate;

        if (scaleEnd == dateMax())
        {
            select maxOf(TransDate) from agingPeriodScaleTmp where agingPeriodScaleTmp.TransDate != dateMax();
            scaleEnd = agingPeriodScaleTmp.TransDate;
            isScaleEndDateMax = true;
        }

        select minOf(TransDate) from agingPeriodScaleTmp;
        scaleStart = agingPeriodScaleTmp.TransDate;

        if (scaleStart == dateNull())
        {
            select minOf(TransDate) from agingPeriodScaleTmp where agingPeriodScaleTmp.TransDate != dateNull();
            scaleStart = agingPeriodScaleTmp.TransDate;
            isScaleStartDateNull = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the aging calculation.
    /// </summary>
    internal void calculateDetails(CustVendTable _custTable)
    {
        //Empty the temp table buffers
        this.emptyTempTableBuffers();

        // reads customers data using specified query and inserts AccountNum, Name, Group to the CustVendTransAging table buffer
        this.populateCustomerVendors(_custTable);

        //Select open transactions to process and populate custAgingLineProcessingTmp table buffer. And also update the transDate based on agedBy.
        this.selectOpenTransactions();

        //Assign aging bucket to the transactions in custAgingLineProcessingTmp table buffer and then update transDate to null value.
        this.updateBucketNumberToProcessingTmp();

        //Populate agingCalculatedTmp table buffer with the sum of Amount, AmountCur, AmountReporting for each AccountNum, CurrencyCode, BucketNumber, TransDate.
        this.populateAgingCalculatedTmp();

        //Insert the calculated aging buckets into the custTmpAccountSum table buffer.
        this.insertIntoTmpAccountSum(); 

        //Update collections status when updateCollectionsStatus is set to true.
        //Remove whole block when flight is deprecated, as collections status is updated in aging snapshot when flight is enabled.
        if (updateCollectionsStatus && !CustDisputeHistoryAutomationAvoidTempDbLeakFlight::instance().isEnabled())
        {
            CustDisputeHistoryAutomationAging::updateCollectionsStatus(customersVendors, agingDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyTempTableBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Empty temp table buffers used in aging calculation.
    /// </summary>
    private void emptyTempTableBuffers()
    {
        delete_from customersVendors;
        delete_from custAgingLineProcessingTmp;
        delete_from agingCalculatedTmp;
        delete_from custTmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustomerVendors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>CustVendTransAging</c> table buffer with the customer or vendor data.
    /// </summary>
    private void populateCustomerVendors(CustTable _custTable)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsCustTable = query.addDataSource(tableNum(CustTable));
        qbdsCustTable.addRange(fieldNum(CustTable, AccountNum)).value(queryValue(_custTable.AccountNum));

        QueryBuildFieldList fields =  qbdsCustTable.fields();
        fields.dynamic(NoYes::No);
        fields.clearFieldList();
        fields.addField(fieldName2Id(tableNum(CustTable), fieldStr(CustTable, AccountNum)));
        fields.addField(fieldName2Id(tableNum(CustTable), fieldStr(CustTable, CustGroup)));

        Map insertRecordsetMap = new Map(Types::String, Types::Container);

        insertRecordsetMap.insert(fieldStr(CustVendTransAging, AccountNum), [qbdsCustTable.uniqueId(), fieldStr(CustTable, AccountNum)]);
        insertRecordsetMap.insert(fieldStr(CustVendTransAging, GroupId), [qbdsCustTable.uniqueId(), fieldStr(CustTable, CustGroup)]);

        QueryBuildDataSource qbdsDirParty = qbdsCustTable.addDataSource(tableNum(DirPartyTable));
        qbdsDirParty.addLink(fieldNum(CustTable, Party), fieldNum(DirPartyTable,RecId));
        qbdsDirParty.fetchMode(QueryFetchMode::One2One);
        qbdsDirParty.fields().dynamic(NoYes::No);
        qbdsDirParty.fields().clearFieldList();
        qbdsDirParty.fields().addField(fieldName2Id(tableNum(DirPartyTable), fieldStr(DirPartyTable, Name)));

        insertRecordsetMap.insert(fieldStr(CustVendTransAging, Name), [qbdsDirParty.uniqueId(), fieldStr(DirPartyTable, Name)]);

        Query::insert_recordset(customersVendors, insertRecordsetMap, query);

    }

]]></Source>
			</Method>
			<Method>
				<Name>selectOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>CustAgingLineProcessingTmp</c> table buffer with the open transactions for customers in the <c>customersVendors</c> table buffer.
    /// </summary>
    private void selectOpenTransactions()
    {
        CustTrans custTrans;
        CustTransOpen custTransOpen;

        insert_recordset custAgingLineProcessingTmp
                (AccountNum, CurrencyCode, TransDate, TransRecId, Amount, AmountCur, AmountReporting, TransOpenRecId)
            select AccountNum from customersVendors
                join CurrencyCode, TransDate, RecId from custTrans
                    where customersVendors.AccountNum == custTrans.AccountNum
                      && custTrans.TransDate <= balanceAsOfDate
                      && (!custTrans.Closed || custTrans.Closed >= balanceAsOfDate)
                join AmountMST, AmountCur, ReportingCurrencyAmount, RecId from custTransOpen
                    where custTransOpen.RefRecId == custTrans.RecId
                       && CustTransOpen.TransDate <= balanceAsOfDate;

        this.updateTransDateBasedOnAgedBy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDateBasedOnAgedBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>TransDate</c> field in the <c>CustAgingLineProcessingTmp</c> table buffer based on the <c>AgedBy</c> parameter.
    /// </summary>
    private void updateTransDateBasedOnAgedBy()
    {
        switch (agedBy)
        {
            case DateTransactionDuedate::DueDate:

                CustTransOpen custTransOpen;

                update_recordSet custAgingLineProcessingTmp
                    setting
                        TransDate = custTransOpen.DueDate
                    join custTransOpen
                        where custAgingLineProcessingTmp.TransOpenRecId == custTransOpen.RecId
                            && custTransOpen.TransDate <= balanceAsOfDate
                            && custTransOpen.DueDate > dateNull();
                break;

            case DateTransactionDuedate::DocumentDate:

                CustTrans custTrans;

                update_recordSet custAgingLineProcessingTmp
                    setting
                        TransDate = custTrans.DocumentDate
                    join custTrans
                        where custAgingLineProcessingTmp.TransRecId == custTrans.RecId
                                && custTrans.TransDate <= balanceAsOfDate
                                && (!custTrans.Closed || custTrans.Closed >= balanceAsOfDate)
                                && custTrans.DocumentDate > dateNull();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBucketNumberToProcessingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign bucke number to the transactions in the <c>CustAgingLineProcessingTmp</c> table buffer based on the <c>TransDate</c> field in the <c>CustAgingLineProcessingTmp</c> table.
    /// </summary>
    private void updateBucketNumberToProcessingTmp()
    {
        update_recordSet custAgingLineProcessingTmp
            setting
                BucketNumber = agingPeriodScaleTmp.BucketNumber
            join agingPeriodScaleTmp
                where custAgingLineProcessingTmp.TransDate == agingPeriodScaleTmp.TransDate;

        if (isScaleEndDateMax)
        {
            update_recordSet custAgingLineProcessingTmp
                setting
                    BucketNumber = agingBucketCount - 1
                where custAgingLineProcessingTmp.TransDate > scaleEnd;
        }

        if (isScaleStartDateNull)
        {
            update_recordSet custAgingLineProcessingTmp
                setting
                    BucketNumber = 1
                where custAgingLineProcessingTmp.TransDate < scaleStart;
        }
        
        //Aging snapshot do not need details, hence updating the transDate to null value after bucket number is assigned.
        update_recordSet custAgingLineProcessingTmp
                setting
                    TransDate = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAgingCalculatedTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>CustVendAgingCalculatedTmp</c> table buffer with the sum of Amount, AmountCur, AmountReporting for each AccountNum, CurrencyCode, BucketNumber, TransDate.
    /// </summary>
    private void populateAgingCalculatedTmp()
    {
        insert_recordset agingCalculatedTmp
                (Amount, AmountCur, AmountReporting, AccountNum, CurrencyCode, BucketNumber, TransDate, Txt)
            select sum(Amount),
                   sum(AmountCur),
                   sum(AmountReporting),
                   AccountNum,
                   CurrencyCode,
                   BucketNumber,
                   TransDate
                from custAgingLineProcessingTmp
                    group by AccountNum, CurrencyCode, BucketNumber, TransDate
            join Name from customersVendors
                group by Name
                where customersVendors.AccountNum == custAgingLineProcessingTmp.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmpAccountSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the calculated aging buckets into the <c>CustTmpAccountSum</c> table buffer.
    /// </summary>
    private void insertIntoTmpAccountSum()
    {
        MapEnumerator bucketMapEnumerator = this.buildBucketToBalanceFieldsMap().getBucketMapEnumerator();

        if (direction == ForwardBackwardPrinting::Backward || agingBucket == '')
        {
            update_recordSet agingCalculatedTmp
                setting
                    BucketNumber = agingBucketCount - agingCalculatedTmp.BucketNumber
                where agingCalculatedTmp.BucketNumber != 0;
        }

        CustTmpAccountSumBuilder::insertCustAccountsFromCustVendAgingCalculation(custTmpAccountSum, agingCalculatedTmp, customersVendors);
        CustTmpAccountSumBuilder tmpAccountBuilder = CustTmpAccountSumBuilder::construct();

        while (bucketMapEnumerator.moveNext())
        {
            SysDaUpdateObject updateObject = tmpAccountBuilder.buildCustTmpAccountSumQueryForAging(
                custTmpAccountSum,
                '',
                agingCalculatedTmp,
                bucketMapEnumerator.currentValue() as CustVendBalanceListBalanceFieldsParameters,
                bucketMapEnumerator.currentKey(),
                true,
                true,
                true);

            ttsbegin;
            new SysDaUpdateStatement().update(updateObject);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildBucketToBalanceFieldsMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the contract that maps aging buckets to their corresponding fields in the <c>CustTmpAccountSum</c> table buffer.
    /// </summary>
    /// <returns>The <c>CustVendBalanceListBucketToBalanceFieldReturn</c> instance with the map of bucket to fields.</returns>
    private final CustVendBalanceListBucketToBalanceFieldReturn buildBucketToBalanceFieldsMap()
    {
        CustVendBalanceListBucketToBalanceFieldReturn bucketsToFields = CustVendBalanceListBucketToBalanceFieldReturn::construct();

        bucketsToFields.addBucket(1,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance02),
                fieldNum(CustTmpAccountSum, Balance02Cur),
                fieldNum(CustTmpAccountSum, Balance02ReportingCurrency)));

        bucketsToFields.addBucket(2,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance03),
                fieldNum(CustTmpAccountSum, Balance03Cur),
                fieldNum(CustTmpAccountSum, Balance03ReportingCurrency)));
        
        bucketsToFields.addBucket(3,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance04),
                fieldNum(CustTmpAccountSum, Balance04Cur),
                fieldNum(CustTmpAccountSum, Balance04ReportingCurrency)));

        bucketsToFields.addBucket(4,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance05),
                fieldNum(CustTmpAccountSum, Balance05Cur),
                fieldNum(CustTmpAccountSum, Balance05ReportingCurrency)));

        bucketsToFields.addBucket(5,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance06),
                fieldNum(CustTmpAccountSum, Balance06Cur),
                fieldNum(CustTmpAccountSum, Balance06ReportingCurrency)));

        bucketsToFields.addBucket(6,
            this.constructCustVendBalanceListBalanceFieldsParameters(fieldNum(CustTmpAccountSum, Balance07),
                fieldNum(CustTmpAccountSum, Balance07Cur),
                fieldNum(CustTmpAccountSum, Balance07ReportingCurrency)));

        return bucketsToFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCustVendBalanceListBalanceFieldsParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the contract that maps aging buckets to their corresponding fields in the <c>CustTmpAccountSum</c> table buffer.
    /// </summary>
    /// <returns>The <c>CustVendBalanceListBucketToBalanceFieldReturn</c> instance with the map of bucket to fields.</returns>
    private CustVendBalanceListBalanceFieldsParameters constructCustVendBalanceListBalanceFieldsParameters(FieldId _balanceAmountMSTField, FieldId _balanceAmountCurField, FieldId _balanceReportingAmountField)
    {
        CustVendBalanceListBalanceFieldsParameters param = CustVendBalanceListBalanceFieldsParameters::construct();
        param.balanceMSTField = _balanceAmountMSTField;
        param.balanceCurField = _balanceAmountCurField;
        param.balanceReportingCurrencyField = _balanceReportingAmountField;

        return param;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecificSourceCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves specific currency values for the given currency code.
    /// </summary>
    /// <param name = "_accountNum">Customer or vendor.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_isSourceCurrency">Currency code is source currency.</param>
    /// <returns>The currency amounts in a container.</returns>
    /// <remarks> This method will use accounting currency values if <c>_isSourceCurrency</c> is true and only return balances
    /// from using the <c>_currencyCode</c>. If source currency is false then it will return balances as ledger currency
    /// for all currency codes other than the <c>_currencyCode</c> value.</remarks>
    internal container getSpecificSourceCurrency(AccountNum _accountNum, CurrencyCode _currencyCode, boolean _isSourceCurrency)
    {
        if (_isSourceCurrency)
        {
            select sum(Balance02Cur),
                sum(Balance03Cur),
                sum(Balance04Cur),
                sum(Balance05Cur),
                sum(Balance06Cur),
                sum(Balance07Cur)
            from custTmpAccountSum
            where custTmpAccountSum.AccountNum == _accountNum
                && custTmpAccountSum.CurrencyCode == _currencyCode;

            return [custTmpAccountSum.Balance02Cur, custTmpAccountSum.Balance03Cur, custTmpAccountSum.Balance04Cur, custTmpAccountSum.Balance05Cur, custTmpAccountSum.Balance06Cur, custTmpAccountSum.Balance07Cur];
        }
        else
        {
            select sum(Balance02),
                    sum(Balance03),
                    sum(Balance04),
                    sum(Balance05),
                    sum(Balance06),
                    sum(Balance07)
            from custTmpAccountSum
            where custTmpAccountSum.AccountNum == _accountNum
                && custTmpAccountSum.CurrencyCode != _currencyCode;

            return [custTmpAccountSum.Balance02, custTmpAccountSum.Balance03, custTmpAccountSum.Balance04, custTmpAccountSum.Balance05, custTmpAccountSum.Balance06, custTmpAccountSum.Balance07];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBalancesReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves all aging bucket balances in reporting currency for an account.
    /// </summary>
    /// <param name = "_accountNum">A customer or vendor, required.</param>
    /// <param name = "_currencyCode">The currency code.</param>
    /// <param name = "_isSourceReportingCurrency">Currency code is source currency.</param>
    /// <returns>The currency amounts in a container.</returns>
    /// <remarks> This method will use reporting currency values if <c>_isSourceCurrency</c> is true and only return balances in reporting currency
    /// from using the <c>_currencyCode</c>. If source currency is false then it will return balances as ledger currency
    /// for all currency codes other than the <c>_currencyCode</c> value.</remarks>
    internal container getBalancesReportingCurrency(AccountNum _accountNum, CurrencyCode _currencyCode, boolean _isSourceReportingCurrency)
    {
        if (_isSourceReportingCurrency)
        {
            select sum(Balance02ReportingCurrency),
                sum(Balance03ReportingCurrency),
                sum(Balance04ReportingCurrency),
                sum(Balance05ReportingCurrency),
                sum(Balance06ReportingCurrency),
                sum(Balance07ReportingCurrency)
            from custTmpAccountSum
            where custTmpAccountSum.AccountNum == _accountNum
                && custTmpAccountSum.CurrencyCode != _currencyCode;

            return [custTmpAccountSum.Balance02ReportingCurrency, custTmpAccountSum.Balance03ReportingCurrency, custTmpAccountSum.Balance04ReportingCurrency, custTmpAccountSum.Balance05ReportingCurrency, custTmpAccountSum.Balance06ReportingCurrency, custTmpAccountSum.Balance07ReportingCurrency];
        
        }
        else
        {
            select sum(Balance02Cur),
                sum(Balance03Cur),
                sum(Balance04Cur),
                sum(Balance05Cur),
                sum(Balance06Cur),
                sum(Balance07Cur)
            from custTmpAccountSum
            where custTmpAccountSum.AccountNum == _accountNum
                && custTmpAccountSum.CurrencyCode == _currencyCode;

            return [custTmpAccountSum.Balance02Cur, custTmpAccountSum.Balance03Cur, custTmpAccountSum.Balance04Cur, custTmpAccountSum.Balance05Cur, custTmpAccountSum.Balance06Cur, custTmpAccountSum.Balance07Cur];
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositionByLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the aging bucket position based on the <c>StatRepIntervalLine</c> table line number.
    /// </summary>
    /// <param name="_statRepIntervalLineNum">
    ///    The line number of the record in the <c>StatRepIntervaleLine</c> table.
    /// </param>
    /// <returns>
    ///    The position of the specified aging bucket.
    /// </returns>
    internal CustAgingLinePosition getPositionByLineNum(LineNum _statRepIntervalLineNum)
    {
        // The first entry in the lineToCounterMap map is reserved for a running total of
        // all open transactions so we need to remove that "offset".
        return lineToCounterMap.lookup(_statRepIntervalLineNum) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTempTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Explicitly releases temp tables used in this class.
    /// </summary>
    /// <remarks>
    ///    Aging calculations create temp tables which are not released in a timely fashion.
    ///    The <c>releaseTempTables</c> method should to be called immediately after an aging calculations is completed and the results consumed.
    /// </remarks>
    internal void releaseTempTables()
    {
        customersVendors.dispose();
        custAgingLineProcessingTmp.dispose();
        agingCalculatedTmp.dispose();
        custTmpAccountSum.dispose();
        agingPeriodScaleTmp.dispose();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>