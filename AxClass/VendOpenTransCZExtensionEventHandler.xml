<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOpenTransCZExtensionEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>VendOpenTransCZExtensionEventHandler</c> provides static event subscription handlers for <c>VendOpenTrans</c> form.
/// </summary>
internal final class VendOpenTransCZExtensionEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getOriginatorRecord</Name>
				<Source><![CDATA[
    private static Common getOriginatorRecord(FormRun _senderForm)
    {
        Common ret;
        var settlementForm = _senderForm as SettlementWriteOffIFormInterface;

        if (settlementForm != null)
        {
            ret = settlementForm.getOriginator();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginatorTableId</Name>
				<Source><![CDATA[
    private static RefTableId getOriginatorTableId(FormRun _senderForm)
    {
        var settlementForm = _senderForm as SettlementWriteOffIFormInterface;

        return settlementForm != null ? settlementForm.getOriginator().TableId : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseSalesTaxAmountsTabPageDisplayed</Name>
				<Source><![CDATA[
    private static boolean isReverseSalesTaxAmountsTabPageDisplayed(FormRun _senderForm)
    {
        boolean ret = false;

        if (FeatureStateProvider::isFeatureEnabled(CustVendAdjustTaxAmountsForReversingPrepaymentFeature_CZ::instance()))
        {
            RefTableId originatorTableId = VendOpenTransCZExtensionEventHandler::getOriginatorTableId(_senderForm);

            if (originatorTableId == tableNum(LedgerJournalTrans))
            {
                LedgerJournalTrans originatorLedgerJournalTrans = VendOpenTransCZExtensionEventHandler::getOriginatorRecord(_senderForm);
                ret = LedgerJournalTrans::isVendorInvoice(originatorLedgerJournalTrans);
            }
            else if (originatorTableId == tableNum(VendTable))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendOpenTrans_Post_init</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(VendOpenTrans), formMethodStr(VendOpenTrans, init))]
    public static void VendOpenTrans_Post_init(XppPrePostArgs _args)
    {
        FormRun senderForm = _args.getThis();
        FormDataSource vendTransOpenDataSource = senderForm.dataSource(tableStr(VendTransOpen));
        FormTabPageControl reverseSalesTaxAmountsTabPage = senderForm.design().controlName(formControlStr(VendOpenTrans, ReverseSalesTaxAmounts));

        reverseSalesTaxAmountsTabPage.visible(VendOpenTransCZExtensionEventHandler::isReverseSalesTaxAmountsTabPageDisplayed(senderForm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertSetToStr</Name>
				<Source><![CDATA[
    private static str convertSetToStr(Set _recIds, str _defaultValue = '')
    {
        const str Delimiter = ',';

        str ret;
        var i = _recIds.getEnumerator();

        while (i.moveNext())
        {
            if (ret)
            {
                ret += Delimiter;
            }
            ret += SysQuery::value(i.current());
        }
        if (!ret)
        {
            ret = _defaultValue;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrepaymentVendTransIds</Name>
				<Source><![CDATA[
    private static str getPrepaymentVendTransIds(Common _refRecord)
    {
        var vendTransRecIds = new Set(Types::Int64);

        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        SpecTrans specTrans;

        while select RecId from vendTrans
            where vendTrans.Prepayment == NoYes::Yes
            exists join vendTransOpen
                where vendTrans.RecId == vendTransOpen.RefRecId
            exists join specTrans
                where specTrans.SpecCompany == _refRecord.DataAreaId
                    && specTrans.SpecTableId == _refRecord.TableId
                    && specTrans.SpecRecId == _refRecord.RecId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
        {
            vendTransRecIds.add(vendTrans.RecId);
        }

        return VendOpenTransCZExtensionEventHandler::convertSetToStr(vendTransRecIds, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTransInvoiceVoucher</Name>
				<Source><![CDATA[
    private static str getLedgerJournalTransInvoiceVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTableInvoicesVouchers</Name>
				<Source><![CDATA[
    private static str getVendTableInvoicesVouchers(VendTable _vendTable)
    {
        Set vouchers = new Set(Types::String);
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        SpecTrans specTrans;

        while select Voucher from vendTrans
            where vendTrans.Invoice != ''
                && vendTrans.AccountNum == _vendTable.AccountNum
            exists join vendTransOpen
                where vendTrans.RecId == vendTransOpen.RefRecId
            exists join specTrans
                where  specTrans.SpecCompany == _vendTable.DataAreaId
                    && specTrans.SpecTableId == _vendTable.TableId
                    && specTrans.SpecRecId == _vendTable.RecId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
        {
            vouchers.add(vendTrans.Voucher);
        }

        return VendOpenTransCZExtensionEventHandler::convertSetToStr(vouchers);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTransDate</Name>
				<Source><![CDATA[
    private static str getLedgerJournalTransDate(LedgerJournalTrans _ledgerJournalTrans)
    {
        return SysQuery::value(_ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTableInvoicesTransDates</Name>
				<Source><![CDATA[
    private static str getVendTableInvoicesTransDates(VendTable _vendTable)
    {
        Set transDates = new Set(Types::Date);
        VendTransOpen vendTransOpen;
        VendTrans vendTrans;
        SpecTrans specTrans;

        while select TransDate from vendTrans
            where vendTrans.Invoice != ''
                && vendTrans.AccountNum == _vendTable.AccountNum
            exists join vendTransOpen
                where vendTrans.RecId == vendTransOpen.RefRecId
            exists join specTrans
                where  specTrans.SpecCompany == _vendTable.DataAreaId
                    && specTrans.SpecTableId == _vendTable.TableId
                    && specTrans.SpecRecId == _vendTable.RecId
                    && specTrans.RefRecId == vendTransOpen.RecId
                    && specTrans.RefCompany == vendTransOpen.DataAreaId
                    && specTrans.RefTableId == vendTransOpen.TableId
        {
            transDates.add(vendTrans.TransDate);
        }

        return VendOpenTransCZExtensionEventHandler::convertSetToStr(transDates);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicesVouchers</Name>
				<Source><![CDATA[
    private static str getInvoicesVouchers(Common _refRecord)
    {
        str ret;

        switch (_refRecord.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ret = VendOpenTransCZExtensionEventHandler::getLedgerJournalTransInvoiceVoucher(_refRecord);
                break;

            case tableNum(VendTable):
                ret = VendOpenTransCZExtensionEventHandler::getVendTableInvoicesVouchers(_refRecord);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoicesTransDates</Name>
				<Source><![CDATA[
    private static str getInvoicesTransDates(Common _refRecord)
    {
        str ret;

        switch (_refRecord.TableId)
        {
            case tableNum(LedgerJournalTrans):
                ret = VendOpenTransCZExtensionEventHandler::getLedgerJournalTransDate(_refRecord);
                break;

            case tableNum(VendTable):
                ret = VendOpenTransCZExtensionEventHandler::getVendTableInvoicesTransDates(_refRecord);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendOpenTrans_Post_updateDesignDynamic</Name>
				<Source><![CDATA[
    [PostHandlerFor(formStr(VendOpenTrans), formMethodStr(VendOpenTrans, updateDesignDynamic))]
    public static void VendOpenTrans_Post_updateDesignDynamic(XppPrePostArgs _args)
    {
        VendOpenTransCZExtensionEventHandler::updateVendTaxAmountsForReversingPrepaymentQuery(_args.getThis());
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendTaxAmountsForReversingPrepaymentQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds and executes the query.
    /// </summary>
    /// <param name = "_form">A <c>FormRun</c> instance.</param>
    public static void updateVendTaxAmountsForReversingPrepaymentQuery(FormRun _form)
    {
        if (VendOpenTransCZExtensionEventHandler::isReverseSalesTaxAmountsTabPageDisplayed(_form))
        {
            FormDataSource vendTaxAmountDataSource = _form.dataSource(tableStr(VendTaxAmountsForReversingPrepaymentTable_CZ));
            QueryBuildDataSource qbds = vendTaxAmountDataSource.query().dataSourceTable(tableNum(VendTaxAmountsForReversingPrepaymentTable_CZ));
            qbds.clearDynalinks();

            QueryBuildRange qbrPrepaymentVendTrans = findOrCreateRange_W(qbds, fieldNum(VendTaxAmountsForReversingPrepaymentTable_CZ, PrepaymentVendTrans));
            qbrPrepaymentVendTrans.value(VendOpenTransCZExtensionEventHandler::getPrepaymentVendTransIds(VendOpenTransCZExtensionEventHandler::getOriginatorRecord(_form)));
            qbrPrepaymentVendTrans.status(RangeStatus::Locked);

            QueryBuildRange qbrInvoiceVoucher = findOrCreateRange_W(qbds, fieldNum(VendTaxAmountsForReversingPrepaymentTable_CZ, InvoiceTransVoucher));
            qbrInvoiceVoucher.value(VendOpenTransCZExtensionEventHandler::getInvoicesVouchers(VendOpenTransCZExtensionEventHandler::getOriginatorRecord(_form)));
            qbrInvoiceVoucher.status(RangeStatus::Locked);

            QueryBuildRange qbrInvoiceTransDate = findOrCreateRange_W(qbds, fieldNum(VendTaxAmountsForReversingPrepaymentTable_CZ, InvoiceTransDate));
            qbrInvoiceTransDate.value(VendOpenTransCZExtensionEventHandler::getInvoicesTransDates(VendOpenTransCZExtensionEventHandler::getOriginatorRecord(_form)));
            qbrInvoiceTransDate.status(RangeStatus::Locked);

            vendTaxAmountDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecalculateReverseSalesTaxAmountsButton_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(VendOpenTrans, RecalculateReverseSalesTaxAmountsButton), FormControlEventType::Clicked)]
    public static void RecalculateReverseSalesTaxAmountsButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        var senderFormAsManagerHost = _sender.formRun() as ICustVendOpenTransManagerHost;

        if (senderFormAsManagerHost != null && senderFormAsManagerHost.getCustVendOpenTransManager() != null)
        {
            senderFormAsManagerHost.getCustVendOpenTransManager().fillVendTaxAmountsForReversingPrepaymentTable_CZ();

            FormRun senderForm = _sender.formRun();
            FormDataSource vendTaxAmountDataSource = senderForm.dataSource(tableStr(VendTaxAmountsForReversingPrepaymentTable_CZ));

            vendTaxAmountDataSource.research(true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>