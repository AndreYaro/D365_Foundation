<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustmentUpdate_PostAsync</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the asynchrounous version of ProjAdjustmentUpdate_Post. Runs the posting routine for adjusted transactions
/// </summary>
public class ProjAdjustmentUpdate_PostAsync
{
    private static Map tableUserFields = new Map(Types::Integer, Types::Container);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processAdjustmentBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer records from all temp tables related to adjustments to "InProcess" tables that will be used during async posting
    /// </summary>
    /// <param name = "_processId">Process Id of the posting task that was executed from the form</param>
    /// <param name = "_tmpProjAdjustmentCreate">TmpProjAdjustmentCreate buffer that was created from the adjustments form</param>
    /// <param name = "_tmpProjAdjustmentCreateCost">TmpProjAdjustmentCreateCost buffer that was created from the adjustments form</param>
    /// <param name = "_tmpProjAdjustmentCreateSale">TmpProjAdjustmentCreateSale buffer that was created from the adjustments form</param>
    /// <param name = "_tmpProjAdjustment">TmpProjAdjustment buffer that was created from the adjustments form</param>
    /// <param name = "_tmpProjAdjustmentCost">TmpProjAdjustmentCost buffer that was created from the adjustments form</param>
    /// <param name = "_tmpProjAdjustmentSale">TmpProjAdjustmentSale buffer that was created from the adjustments form</param>
    public static void processAdjustmentBeforePosting(guid _processId,
                                                      TmpProjAdjustmentCreate     _tmpProjAdjustmentCreate,
                                                      TmpProjAdjustmentCreateCost _tmpProjAdjustmentCreateCost,
                                                      TmpProjAdjustmentCreateSale _tmpProjAdjustmentCreateSale,
                                                      TmpProjAdjustment           _tmpProjAdjustment,
                                                      TmpProjAdjustmentCost       _tmpProjAdjustmentCost,
                                                      TmpProjAdjustmentSale       _tmpProjAdjustmentSale)
    {
        ProjAdjustmentInProcess             projAdjustment;
        ProjAdjustmentCostInProcess         projAdjustmentCost;
        ProjAdjustmentSaleInProcess         projAdjustmentSale;
        ProjAdjustmentCreateInProcess       projAdjustmentCreate;
        ProjAdjustmentCreateCostInProcess   projAdjustmentCreateCost;
        ProjAdjustmentCreateSaleInProcess   projAdjustmentCreateSale;

        RecordInsertList adjustmentCreateCostRil = new RecordInsertList(tableNum(ProjAdjustmentCreateCostInProcess));
        RecordInsertList adjustmentCreateSaleRil = new RecordInsertList(tableNum(ProjAdjustmentCreateSaleInProcess));
        
        while select _tmpProjAdjustmentCreate
            where _tmpProjAdjustmentCreate.TransID == _tmpProjAdjustment.TransId
        {
            projAdjustmentCreate.clear();            
            ProjAdjustmentUpdate_PostAsync::buffer2buffer(_tmpProjAdjustmentCreate, projAdjustmentCreate);
            projAdjustmentCreate.ProcessId = _processId;
            projAdjustmentCreate.doInsert();

            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(_tmpProjAdjustmentCreate, projAdjustmentCreate);
            }

            while select _tmpProjAdjustmentCreateCost
                where _tmpProjAdjustmentCreateCost.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projAdjustmentCreateCost.clear();
                ProjAdjustmentUpdate_PostAsync::buffer2buffer(_tmpProjAdjustmentCreateCost, projAdjustmentCreateCost);
                projAdjustmentCreateCost.RefRecId = projAdjustmentCreate.RecId;
                projAdjustmentCreateCost.ProcessId = _processId;
                adjustmentCreateCostRil.add(projAdjustmentCreateCost);
            }

            while select _tmpProjAdjustmentCreateSale
                where _tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projAdjustmentCreateSale.clear();
                ProjAdjustmentUpdate_PostAsync::buffer2buffer(_tmpProjAdjustmentCreateSale, projAdjustmentCreateSale);
                projAdjustmentCreateSale.RefRecId = projAdjustmentCreate.RecId;
                projAdjustmentCreateSale.ProcessId = _processId;
                adjustmentCreateSaleRil.add(projAdjustmentCreateSale);
            }
        }

        adjustmentCreateCostRil.insertDatabase();
        adjustmentCreateSaleRil.insertDatabase();

        RecordInsertList adjustmentCostRil = new RecordInsertList(tableNum(ProjAdjustmentCostInProcess));
        RecordInsertList adjustmentSaleRil = new RecordInsertList(tableNum(ProjAdjustmentSaleInProcess));

        ProjAdjustmentUpdate_PostAsync::buffer2buffer(_tmpProjAdjustment, projAdjustment);
        projAdjustment.ProcessId = _processId;
        projAdjustment.doInsert();

        while select _tmpProjAdjustmentCost
                where _tmpProjAdjustmentCost.TransId == _tmpProjAdjustment.TransId
        {
            projAdjustmentCost.clear();
            ProjAdjustmentUpdate_PostAsync::buffer2buffer(_tmpProjAdjustmentCost, projAdjustmentCost);
            projAdjustmentCost.ProcessId = _processId;
            adjustmentCostRil.add(projAdjustmentCost);
        }

        while select _tmpProjAdjustmentSale
                where _tmpProjAdjustmentSale.TransId == _tmpProjAdjustment.TransId
        {
            projAdjustmentSale.clear();
            ProjAdjustmentUpdate_PostAsync::buffer2buffer(_tmpProjAdjustmentSale, projAdjustmentSale);
            projAdjustmentSale.ProcessId = _processId;
            adjustmentSaleRil.add(projAdjustmentSale);
        }

        adjustmentCostRil.insertDatabase();
        adjustmentSaleRil.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToFieldListProjAdjustmentInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding the source table fields to the fieldslist.
    /// </summary>
    /// <param name = "_fieldList">
    /// A <c>QueryBuildFieldList</c> instance.
    /// </param>
    protected static void addToFieldListProjAdjustmentInProcess(QueryBuildFieldList _fieldList)
    {
        _fieldList.dynamic(QueryFieldListDynamic::No);
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ActivityNumber));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, AdjustCorrection));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, Adjusted));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, AdjustmentType));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, AssessableValue_IN));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, CategoryId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, CurrencyId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, CurrencyId1));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, CurrencyIdCost));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, DefaultDimension));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, FromTime));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, InventDimid));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, InventTransId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, IsIntercompany));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ItemAdjustVersion));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ItemId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ItemType));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, LedgerDimension));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, LinePropertyId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, MaximumRetailPrice_IN));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, Module));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, Origin));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, OriginCost));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, PackingSlipId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ProjAdjustRefid));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ProjId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ProjIdentId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ProjIdentResource));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ProjIdentWorker));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, PSAIndirectComponentGroup));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, PSAModelId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, PSATransRecId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, PSATransTableId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, Qty));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, QtyToBeInvoiced));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, Resource));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ResourceCategory));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SalesUnit));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SMABasePrice));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SMAEnddate));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SMAIndex));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SMAStartDate));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SMASubscriptionId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, SMASubscriptionPeriodType));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TaxGroupId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TaxGroupId1));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TaxInventVATCommodityCodeId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TaxItemGroupId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TCSGroup_IN));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TDSGroup_IN));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TotalCostAmountCur));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TotalSalesAmountCur));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, ToTime));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TransDate));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TransDateAdjustment));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, TransId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, txt));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, VoucherJournal));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, RefTableId));
        _fieldList.addField(fieldNum(ProjAdjustmentInProcess, RefRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMappingProjAdjustmentInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert from target <c>ProjAdjustmentInProcess</c> to destination <c>TmpProjAdjustment</c> buffer.
    /// </summary>
    /// <param name = "_query">
    /// Query used to get fieldList and datasource.
    /// </param>
    /// <returns>
    /// Returns map with fields.
    /// </returns>
    protected static Map addDestinationFieldToFieldMappingProjAdjustmentInProcess(Query _query)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);
        QueryBuildDataSource sourceQueryBuildDataSource = _query.dataSourceTable(tableNum(ProjAdjustmentInProcess));
        int dataSourceId = sourceQueryBuildDataSource.uniqueId();

        _query.clearAllFields();
        QueryBuildFieldList fieldList = sourceQueryBuildDataSource.fields();

        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ActivityNumber),fieldStr(TmpProjAdjustment, ActivityNumber));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, AdjustCorrection), fieldStr(TmpProjAdjustment, AdjustCorrection));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, Adjusted), fieldStr(TmpProjAdjustment, Adjusted));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, AdjustmentType), fieldStr(TmpProjAdjustment, AdjustmentType));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, AssessableValue_IN), fieldStr(TmpProjAdjustment, AssessableValue_IN));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, CategoryId), fieldStr(TmpProjAdjustment, CategoryId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, CurrencyId), fieldStr(TmpProjAdjustment, CurrencyId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, CurrencyId1), fieldStr(TmpProjAdjustment, CurrencyId1));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, CurrencyIdCost), fieldStr(TmpProjAdjustment, CurrencyIdCost));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, DefaultDimension), fieldStr(TmpProjAdjustment, DefaultDimension));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, FromTime), fieldStr(TmpProjAdjustment, FromTime));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, InventDimid), fieldStr(TmpProjAdjustment, InventDimid));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, InventTransId), fieldStr(TmpProjAdjustment, InventTransId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, IsIntercompany), fieldStr(TmpProjAdjustment, IsIntercompany));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ItemAdjustVersion), fieldStr(TmpProjAdjustment, ItemAdjustVersion));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ItemId), fieldStr(TmpProjAdjustment, ItemId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ItemType), fieldStr(TmpProjAdjustment, ItemType));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, LedgerDimension), fieldStr(TmpProjAdjustment, LedgerDimension));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, LinePropertyId), fieldStr(TmpProjAdjustment, LinePropertyId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, MaximumRetailPrice_IN), fieldStr(TmpProjAdjustment, MaximumRetailPrice_IN));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, Module), fieldStr(TmpProjAdjustment, Module));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, Origin), fieldStr(TmpProjAdjustment, Origin));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, OriginCost), fieldStr(TmpProjAdjustment, OriginCost));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, PackingSlipId), fieldStr(TmpProjAdjustment, PackingSlipId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ProjAdjustRefid), fieldStr(TmpProjAdjustment, ProjAdjustRefid));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ProjId), fieldStr(TmpProjAdjustment, ProjId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ProjIdentId), fieldStr(TmpProjAdjustment, ProjIdentId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ProjIdentResource), fieldStr(TmpProjAdjustment, ProjIdentResource));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ProjIdentWorker), fieldStr(TmpProjAdjustment, ProjIdentWorker));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, PSAIndirectComponentGroup), fieldStr(TmpProjAdjustment, PSAIndirectComponentGroup));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, PSAModelId), fieldStr(TmpProjAdjustment, PSAModelId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, PSATransRecId), fieldStr(TmpProjAdjustment, PSATransRecId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, PSATransTableId), fieldStr(TmpProjAdjustment, PSATransTableId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, Qty), fieldStr(TmpProjAdjustment, Qty));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, QtyToBeInvoiced), fieldStr(TmpProjAdjustment, QtyToBeInvoiced));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, Resource), fieldStr(TmpProjAdjustment, Resource));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ResourceCategory), fieldStr(TmpProjAdjustment, ResourceCategory));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SalesUnit), fieldStr(TmpProjAdjustment, SalesUnit));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SMABasePrice), fieldStr(TmpProjAdjustment, SMABasePrice));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SMAEnddate), fieldStr(TmpProjAdjustment, SMAEnddate));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SMAIndex), fieldStr(TmpProjAdjustment, SMAIndex));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SMAStartDate), fieldStr(TmpProjAdjustment, SMAStartDate));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SMASubscriptionId), fieldStr(TmpProjAdjustment, SMASubscriptionId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, SMASubscriptionPeriodType), fieldStr(TmpProjAdjustment, SMASubscriptionPeriodType));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TaxGroupId), fieldStr(TmpProjAdjustment, TaxGroupId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TaxGroupId1), fieldStr(TmpProjAdjustment, TaxGroupId1));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TaxInventVATCommodityCodeId), fieldStr(TmpProjAdjustment, TaxInventVATCommodityCodeId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TaxItemGroupId), fieldStr(TmpProjAdjustment, TaxItemGroupId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TCSGroup_IN), fieldStr(TmpProjAdjustment, TCSGroup_IN));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TDSGroup_IN), fieldStr(TmpProjAdjustment, TDSGroup_IN));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TotalCostAmountCur), fieldStr(TmpProjAdjustment, TotalCostAmountCur));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TotalSalesAmountCur), fieldStr(TmpProjAdjustment, TotalSalesAmountCur));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, ToTime), fieldStr(TmpProjAdjustment, ToTime));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TransDate), fieldStr(TmpProjAdjustment, TransDate));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TransDateAdjustment), fieldStr(TmpProjAdjustment, TransDateAdjustment));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, TransId), fieldStr(TmpProjAdjustment, TransId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, txt), fieldStr(TmpProjAdjustment, txt));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, VoucherJournal), fieldStr(TmpProjAdjustment, VoucherJournal));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, RefTableId), fieldStr(TmpProjAdjustment, RefTableId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentInProcess, RefRecId), fieldStr(TmpProjAdjustment, RefRecId));

        fieldList.dynamic(QueryFieldListDynamic::No);

        return targetToSourceMap;

    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Destination field to Field Mapping.
        /// </summary>
        /// <param name = "_fieldList">The field list where the field will be added.</param>
        /// <param name = "_tableId">The tableId for the field being added.</param>
        /// <param name = "_fieldMapping">The field Mapping where the field will be added.</param>
        /// <param name = "_dataSourceUniqueId">The unique Id for the data source.</param>
        /// <param name = "_sourceFieldName">The data source field name being added.</param>
        /// <param name = "_destinationFieldName">The Target field name where the field will be added.</param>
    protected static void addDestinationFieldToFieldMapping(
        QueryBuildFieldList _fieldList,
        int _tableId,
        Map _fieldMapping,
        int _dataSourceUniqueId,
        FieldName _sourceFieldName,
        FieldName _destinationFieldName)
    {
        _fieldList = _fieldList.addField(fieldName2Id(_tableId, _sourceFieldName));
        _fieldMapping.insert(_destinationFieldName, [_dataSourceUniqueId, _sourceFieldName]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToFieldListProjAdjustmentCostInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding the source table fields to the fieldslist.
    /// </summary>
    /// <param name = "_fieldList">
    /// A <c>QueryBuildFieldList</c> instance.
    /// </param>
    protected static void addToFieldListProjAdjustmentCostInProcess(QueryBuildFieldList _fieldList)
    {
        _fieldList.dynamic(QueryFieldListDynamic::No);
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, CostPrice));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, CostRefRecId));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, DefaultDimension));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, FundingSource));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, LedgerStatusCost));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, LineAmount));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, TransId));
        _fieldList.addField(fieldNum(ProjAdjustmentCostInProcess, TransStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMappingProjAdjustmentCostInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert from target <c>ProjAdjustmentCostInProcess</c> to destination <c>TmpProjAdjustmentCost</c> buffer.
    /// </summary>
    /// <param name = "_query">
    /// Query used to get fieldList and datasource.
    /// </param>
    /// <returns>
    /// Returns map with fields.
    /// </returns>
    protected static Map addDestinationFieldToFieldMappingProjAdjustmentCostInProcess(Query _query)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);
        QueryBuildDataSource sourceQueryBuildDataSource = _query.dataSourceTable(tableNum(ProjAdjustmentCostInProcess));
        int dataSourceId = sourceQueryBuildDataSource.uniqueId();

        _query.clearAllFields();
        QueryBuildFieldList fieldList = sourceQueryBuildDataSource.fields();
     
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, CostPrice), fieldStr(TmpProjAdjustmentCost, CostPrice));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, CostRefRecId), fieldStr(TmpProjAdjustmentCost, CostRefRecId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, DefaultDimension), fieldStr(TmpProjAdjustmentCost, DefaultDimension));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, FundingSource), fieldStr(TmpProjAdjustmentCost, FundingSource));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, LedgerStatusCost), fieldStr(TmpProjAdjustmentCost, LedgerStatusCost));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, LineAmount), fieldStr(TmpProjAdjustmentCost, LineAmount));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, TransId), fieldStr(TmpProjAdjustmentCost, TransId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentCostInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentCostInProcess, TransStatus), fieldStr(TmpProjAdjustmentCost, TransStatus));

        fieldList.dynamic(QueryFieldListDynamic::No);

        return targetToSourceMap;


    }

]]></Source>
			</Method>
			<Method>
				<Name>addToFieldListProjAdjustmentSaleInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adding the source table fields to the fieldslist.
    /// </summary>
    /// <param name = "_fieldList">
    /// A <c>QueryBuildFieldList</c> instance.
    /// </param>
    protected static void addToFieldListProjAdjustmentSaleInProcess(QueryBuildFieldList _fieldList)
    {
        _fieldList.dynamic(QueryFieldListDynamic::No);
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, DefaultDimension));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, FundingSource));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, LedgerSalesAmountMST));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, LedgerSalesPosted));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, LineAmount));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, SaleRefRecId));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, SalesPrice));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, TransId));
        _fieldList.addField(fieldNum(ProjAdjustmentSaleInProcess, TransStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDestinationFieldToFieldMappingProjAdjustmentSaleInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes field mapping to do a set-based insert from target <c>ProjAdjustmentSaleInProcess</c> to destination <c>TmpProjAdjustmentSale</c> buffer.
    /// </summary>
    /// <param name = "_query">
    /// Query used to get fieldList and datasource.
    /// </param>
    /// <returns>
    /// Returns map with fields.
    /// </returns>
    protected static Map addDestinationFieldToFieldMappingProjAdjustmentSaleInProcess(Query _query)
    {
        Map targetToSourceMap = new Map(Types::String, Types::Container);
        QueryBuildDataSource sourceQueryBuildDataSource = _query.dataSourceTable(tableNum(ProjAdjustmentSaleInProcess));
        int dataSourceId = sourceQueryBuildDataSource.uniqueId();

        _query.clearAllFields();
        QueryBuildFieldList fieldList = sourceQueryBuildDataSource.fields();

        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, DefaultDimension),fieldStr(TmpProjAdjustmentSale, DefaultDimension));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, FundingSource), fieldStr(TmpProjAdjustmentSale, FundingSource));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, LedgerSalesAmountMST),fieldStr(TmpProjAdjustmentSale, LedgerSalesAmountMST));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, LedgerSalesPosted), fieldStr(TmpProjAdjustmentSale, LedgerSalesPosted));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, LineAmount),fieldStr(TmpProjAdjustmentSale, LineAmount));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, SaleRefRecId), fieldStr(TmpProjAdjustmentSale, SaleRefRecId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, SalesPrice),fieldStr(TmpProjAdjustmentSale, SalesPrice));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, TransId), fieldStr(TmpProjAdjustmentSale, TransId));
        ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMapping(fieldList, tableNum(ProjAdjustmentSaleInProcess), targetToSourceMap, dataSourceId,fieldStr(ProjAdjustmentSaleInProcess, TransStatus), fieldStr(TmpProjAdjustmentSale, TransStatus));

        fieldList.dynamic(QueryFieldListDynamic::No);

        return targetToSourceMap;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryFormTabelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fieldlsist to be used for a set-based insert.
    /// </summary>
    /// <param name = "_tableId">
    /// Based on this table ID, the query run object are initialised.
    /// </param>
    /// <param name = "_processId">
    /// Process Id of the posting task that was executed from the form.
    /// </param>
    /// <returns>
    /// The query object.
    /// </returns>
    protected static Query getQueryFormTabelId(TableId _tableId, guid _processId)
    {
        Query query = new Query();
        QueryBuildDataSource qbds;
        QueryBuildFieldList fieldList;

        switch (_tableId)
        {
            case tableNum(ProjAdjustmentInProcess):
                qbds = query.addDataSource(_tableId);
                qbds.addRange(fieldNum(ProjAdjustmentInProcess, ProcessId)).value(queryValue(_processId));
                fieldList = qbds.fields();
                ProjAdjustmentUpdate_PostAsync::addToFieldListProjAdjustmentInProcess(fieldList);
                break;
            case tablenum(ProjAdjustmentCostInProcess):
                qbds = query.addDataSource(_tableId);
                qbds.addRange(fieldNum(ProjAdjustmentCostInProcess, ProcessId)).value(queryValue(_processId));
                fieldList = qbds.fields();
                ProjAdjustmentUpdate_PostAsync::addToFieldListProjAdjustmentCostInProcess(fieldList);
                break;
            case tablenum(ProjAdjustmentSaleInProcess):
                qbds = query.addDataSource(_tableId);
                qbds.addRange(fieldNum(ProjAdjustmentSaleInProcess, ProcessId)).value(queryValue(_processId));
                fieldList = qbds.fields();
                ProjAdjustmentUpdate_PostAsync::addToFieldListProjAdjustmentSaleInProcess(fieldList);
                break;
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the selected transactions to be adjusted.
    /// </summary>
    /// <param name = "_processId">Process Id of the posting task that was executed from the form.</param>
    public static void postAsync(guid _processId)
    {
        ProjAdjustmentInProcess             projAdjustment;
        ProjAdjustmentCostInProcess         projAdjustmentCost;
        ProjAdjustmentSaleInProcess         projAdjustmentSale;
        ProjAdjustmentCreateInProcess       projAdjustmentCreate;
        ProjAdjustmentCreateCostInProcess   projAdjustmentCreateCost;
        ProjAdjustmentCreateSaleInProcess   projAdjustmentCreateSale;

        TmpProjAdjustment                   tmpProjAdjustment;
        TmpProjAdjustmentCost               tmpProjAdjustmentCost;
        TmpProjAdjustmentSale               tmpProjAdjustmentSale;

        TmpProjAdjustmentCreate             tmpProjAdjustmentCreate;
        TmpProjAdjustmentCreateCost         tmpProjAdjustmentCreateCost;
        TmpProjAdjustmentCreateSale         tmpProjAdjustmentCreateSale;
        
        ttsbegin;

        Query  query = ProjAdjustmentUpdate_PostAsync::getQueryFormTabelId(tablenum(ProjAdjustmentInProcess), _processId);
        Map searchResultMap = ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMappingProjAdjustmentInProcess(query);
        Query::insert_recordset(tmpProjAdjustment, searchResultMap, query);

        Query  queryForCost = ProjAdjustmentUpdate_PostAsync::getQueryFormTabelId(tablenum(ProjAdjustmentCostInProcess), _processId);
        Map costSearchResultMap = ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMappingProjAdjustmentCostInProcess(queryForCost);
        Query::insert_recordset(tmpProjAdjustmentCost, costSearchResultMap, queryForCost);

        Query  queryForSale = ProjAdjustmentUpdate_PostAsync::getQueryFormTabelId(tablenum(ProjAdjustmentSaleInProcess), _processId);
        Map saleSearchResultMap = ProjAdjustmentUpdate_PostAsync::addDestinationFieldToFieldMappingProjAdjustmentSaleInProcess(queryForSale);
        Query::insert_recordset(tmpProjAdjustmentSale, saleSearchResultMap, queryForSale);

        // For Create Adjustment Temp Tables, we need to recreate the records row by row since the referecence recId is needed by the Cost/Sales temp tables
        while select projAdjustmentCreate
        {
            tmpProjAdjustmentCreate.clear();
            ProjAdjustmentUpdate_PostAsync::buffer2buffer(projAdjustmentCreate, tmpProjAdjustmentCreate);
            tmpProjAdjustmentCreate.insert();

            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(projAdjustmentCreate, tmpProjAdjustmentCreate);
            }

            while select projAdjustmentCreateCost where projAdjustmentCreateCost.RefRecId == projAdjustmentCreate.RecId
            {
                tmpProjAdjustmentCreateCost.clear();
                ProjAdjustmentUpdate_PostAsync::buffer2buffer(projAdjustmentCreateCost, tmpProjAdjustmentCreateCost);
                tmpProjAdjustmentCreateCost.RefRecId = tmpProjAdjustmentCreate.RecId;
                tmpProjAdjustmentCreateCost.insert();
            }

            while select projAdjustmentCreateSale where projAdjustmentCreateSale.RefRecId == projAdjustmentCreate.RecId
            {
                tmpProjAdjustmentCreateSale.clear();
                ProjAdjustmentUpdate_PostAsync::buffer2buffer(projAdjustmentCreateSale, tmpProjAdjustmentCreateSale);
                tmpProjAdjustmentCreateSale.RefRecId = tmpProjAdjustmentCreate.RecId;
                tmpProjAdjustmentCreateSale.insert();
            }
        }

        ProjAdjustmentUpdate projAdjustmentUpdate = new ProjAdjustmentUpdate_Post();

        projAdjustmentUpdate.parmPost(NoYes::Yes);
        projAdjustmentUpdate.setTmpProjAdjustment(tmpProjAdjustment);
        projAdjustmentUpdate.setTmpProjAdjustmentCost(tmpProjAdjustmentCost);
        projAdjustmentUpdate.setTmpProjAdjustmentSale(tmpProjAdjustmentSale);
        projAdjustmentUpdate.setTmpProjAdjustmentCreate(tmpProjAdjustmentCreate);
        projAdjustmentUpdate.setTmpProjAdjustmentCreateCost(tmpProjAdjustmentCreateCost);
        projAdjustmentUpdate.setTmpProjAdjustmentCreateSale(tmpProjAdjustmentCreateSale);
        projAdjustmentUpdate.run(null);

        projAdjustmentUpdate.ledgerVoucherTransEnd();

        delete_from projAdjustment where projAdjustment.ProcessId == _processId;
        delete_from projAdjustmentCost where projAdjustmentCost.ProcessId == _processId;
        delete_from projAdjustmentSale where projAdjustmentSale.ProcessId == _processId;
        delete_from projAdjustmentCreate where projAdjustmentCreate.ProcessId == _processId;
        delete_from projAdjustmentCreateCost where projAdjustmentCreateCost.ProcessId == _processId;
        delete_from projAdjustmentCreateSale where projAdjustmentCreateSale.ProcessId == _processId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asynchronous method for posting adjustments
    /// </summary>
    /// <param name = "params">Container that contains the Guid for process id</param>
    public static void runPostAsync(container params)
    {
        if (params == conNull())
        {
            return;
        }

        guid processId;
        [processId] = params;
        ProjAdjustmentUpdate_PostAsync::postAsync(processId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer2buffer</Name>
				<Source><![CDATA[
    private static void buffer2buffer(Common _source, Common _target)
    {
        Map sourceFields = new Map(Types::String, Types::Int64);
        Map targetFields = new Map(Types::String, Types::Int64);

        sourceFields = ProjAdjustmentUpdate_PostAsync::getUserFields(_source);
        targetFields = ProjAdjustmentUpdate_PostAsync::getUserFields(_target);

        MapEnumerator enumSource = sourceFields.getEnumerator();
        while (enumSource.moveNext())
        {
            if (targetFields.exists(enumSource.currentKey()))
            {
                _target.(targetFields.lookup(enumSource.currentKey())) = _source.(enumSource.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map that includes all fields from the table that are not marked as System fields
    /// </summary>
    private static Map getUserFields(Common _table)
    {
        const TableScope scope = TableScope::CurrentTableOnly;

        Map userFields = new Map(Types::String, Types::Int64);

        if (tableUserFields.exists(_table.TableId))
        {
            userFields = Map::create(tableUserFields.lookup(_table.TableId));
        }
        else
        {
            DictTable dictTable = new DictTable(_table.TableId);
            FieldId fieldId = dictTable.fieldNext(0, scope);

            while (fieldId && ! isSysId(fieldId))
            {
                userFields.insert(dictTable.fieldName(fieldId), fieldId);
                fieldId = dictTable.fieldNext(fieldId, scope);
            }
            tableUserFields.insert(_table.TableId, userFields.pack());
        }

        return userFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAsyncResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Async callback
    /// </summary>
    /// <param name = "taskResult">Result of async Project adjustment posting</param>
    public static void processAsyncResult(AsyncTaskResult taskResult)
    {
        container returnValue;
        System.Exception exception;

        if (taskResult != null)
        {
            returnValue = taskResult.getResult();

            exception = taskResult.getException();

            if (ClrInterop::isNull(exception))
            {
                info(con2Str(returnValue));
            }
            else
            {
                error(exception.Message);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAdjustmentsCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the adjustments posting cache.
    /// </summary>
    /// <param name = "_processId">Process Id of the an adjusment posting</param>
    public static void clearAdjustmentsCache(guid _processId)
    {
        ProjAdjustmentInProcess projAdjustment;
        ProjAdjustmentCostInProcess projAdjustmentCost;
        ProjAdjustmentSaleInProcess projAdjustmentSale;
        ProjAdjustmentCreateInProcess projAdjustmentCreate;
        ProjAdjustmentCreateCostInProcess projAdjustmentCreateCost;
        ProjAdjustmentCreateSaleInProcess projAdjustmentCreateSale;

        delete_from projAdjustment where projAdjustment.ProcessId == _processId;
        delete_from projAdjustmentCost where projAdjustmentCost.ProcessId == _processId;
        delete_from projAdjustmentSale where projAdjustmentSale.ProcessId == _processId;
        delete_from projAdjustmentCreate where projAdjustmentCreate.ProcessId == _processId;
        delete_from projAdjustmentCreateCost where projAdjustmentCreateCost.ProcessId == _processId;
        delete_from projAdjustmentCreateSale where projAdjustmentCreateSale.ProcessId == _processId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>