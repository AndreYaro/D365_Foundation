<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMIdLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMIdLookup</c> form
/// </summary>
class PmfFormCtrl_BOMIdLookup
    extends PmfFormCtrl
{
    BOMTable     bomTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQueryPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the <c>buildQuery</c> method of the form
    /// </summary>
    /// <param name="_q">
    /// The query that has been built
    /// </param>
    /// <remarks>
    /// Add a filter for the BOM or Formula
    /// </remarks>
    public void buildQueryPost(Query _q)
    {
        QueryBuildDataSource    qB;

        if (this.isPmfEnabled())
        {
            qB = _q.dataSourceTable(tablenum(BOMTable));
            qB.addRange(fieldnum(BOMTable, PmfBOMFormula)).value(
                queryValue(
                    this.isFormulaEnabled()
                        ? PmfBOMFormula::Formula
                        : PmfBOMFormula::BOM));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called after the form is initialized
    /// </summary>
    /// <remarks>
    /// The method initializes the button manager for several controls on the form
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Throws an exception, if the form run has not been set for the class
    /// </exception>
    public void initPost()
    {
        super();

        this.updateBOMNumControlsLabel();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMNumControlsLabel</Name>
				<Source><![CDATA[
    private void updateBOMNumControlsLabel()
    {
        this.updateBOMNumControlLabelForFormula(formRun.design().controlName(formcontrolstr(BOMIdLookup, BOMTableAll_BOMNum)));
        this.updateBOMNumControlLabelForFormula(formRun.design().controlName(formcontrolstr(BOMIdLookup, BOMTableGroup_BOMNum)));
        this.updateBOMNumControlLabelForFormula(formRun.design().controlName(formcontrolstr(BOMIdLookup, BOMTableSite_BOMNum)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMNumControlLabelForFormula</Name>
				<Source><![CDATA[
    private void updateBOMNumControlLabelForFormula(FormStringControl _formControl)
    {
        if (this.isFormulaEnabled())
        {
            _formControl.label("@SCM:FormulaIdField");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMIdLookup, ctrlTabPageSite)),
            methodstr(PmfFormCtrl_BOMIdLookup, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO2116");

        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMIdLookup, SiteGrid)),
            formRun.design().controlName(formcontrolstr(BOMIdLookup, BOMTableSite_BOMNum)),
            methodstr(PmfFormCtrl_BOMIdLookup, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1115");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMIdLookup, ctrlTabPageGroup)),
            methodstr(PmfFormCtrl_BOMIdLookup, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO180");

        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMIdLookup, GroupGrid)),
            formRun.design().controlName(formcontrolstr(BOMIdLookup, BOMTableGroup_BOMNum)),
            methodstr(PmfFormCtrl_BOMIdLookup, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1115");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMIdLookup, ctrlTabPageAll)),
            methodstr(PmfFormCtrl_BOMIdLookup, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO179");

        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMIdLookup, AllGrid)),
            formRun.design().controlName(formcontrolstr(BOMIdLookup, BOMTableAll_BOMNum)),
            methodstr(PmfFormCtrl_BOMIdLookup, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1115");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        Common              common = this.callerBuffer();
        boolean             ret = false;

        switch (common.TableId)
        {
            case tablenum(InventTable) :
                InventTable callerInventTable = common;
                if (callerInventTable.isFormulaAllowed())
                {
                    ret = true;
                }
                break;
                  
            case tableNum(TmpSysQuery) :
                TmpSysQuery callerTmpSysQuery = common;
                if (this.isTmpSysQueryCallerReferencingFormulaEntity(callerTmpSysQuery))
                {
                    ret = true;
                }
                break;
            
            default:

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTmpSysQueryCallerReferencingFormulaEntity</Name>
				<Source><![CDATA[
    private boolean isTmpSysQueryCallerReferencingFormulaEntity(TmpSysQuery _callerTmpSysQuery)
    {
        return _callerTmpSysQuery.table_id == tableNum(PmfFormulaLineV2Entity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaByProductEntity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaByProductV2Entity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaCoProductEntity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaCoProductV2Entity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaLineConsumptionIntervalEntity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaLineConsumptionIntervalV2Entity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaLineEntity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaVersionEntity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaVersionV2Entity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaHeaderEntity)
            || _callerTmpSysQuery.table_id == tableNum(PmfFormulaVersionDocumentAttachmentEntity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOMTable))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMIdLookup construct()
    {
        return new PmfFormCtrl_BOMIdLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMIdLookup newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMIdLookup::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>