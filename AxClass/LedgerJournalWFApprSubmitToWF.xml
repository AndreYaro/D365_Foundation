<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalWFApprSubmitToWF</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalWFApprSubmitToWF</c> class supports the clicked event from a workflow common
///    control Submit action button on the <c>LedgerJournalTable</c> form.
/// </summary>
public class LedgerJournalWFApprSubmitToWF
{
    Args args;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    protected Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendBankAccountForVendDisbursementWF</Name>
				<Source><![CDATA[
    private boolean validateVendBankAccountForVendDisbursementWF(LedgerJournalName _ledgerJournalName, LedgerJournalId _journalNum)
    {
        if (WorkflowTable::findSequenceNumber(_ledgerJournalName.Configuration).TemplateName == workflowTypeStr(VendDisbursementTemplate))
        {
            LedgerJournalTrans ledgerJournalTrans;

            while select ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == _journalNum
                    && ledgerJournalTrans.CustVendBankAccountId != ''
            {
                if (!VendBankAccount::checkBankAccountIsActiveForDate(
                    ledgerJournalTrans.parmAccount(),
                    ledgerJournalTrans.CustVendBankAccountId,
                    ledgerJournalTrans.TransDate,
                    ledgerJournalTrans.Company))
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box to use for submitting a journal workflow.
    /// </summary>
    protected void run()
    {
        RecId recId = args.record().RecId;
        LedgerJournalTable ledgerJournalTable = args.record();
        LedgerJournalName ledgerJournalName = ledgerJournalTable.ledgerJournalName();

        if (args.record().TableId != tableNum(LedgerJournalTable) || recId == 0)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        if (!this.validateVendBankAccountForVendDisbursementWF(ledgerJournalName, ledgerJournalTable.JournalNum))
        {
            return;
        }

        if (ledgerJournalName.RecId != 0 && ledgerJournalName.checkWorkflowApprovalEnabled())
        {
            // The journal does support workflow approvals.
            // Capture any comments/notes attached to the submission.
            WorkflowSubmitDialog workflowSubmitDialog = WorkflowSubmitDialog::construct(args.caller().getActiveWorkflowConfiguration());
            workflowSubmitDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
            workflowSubmitDialog.run();

            LedgerJournalTrans ledgerJournalTrans;
            LedgerJournalTrans_Asset ledgerJournalTrans_Asset;
            
            while select RecId from ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::Assets
                    && ledgerJournalTrans.ReasonRefRecID == 0
                    join TransType from ledgerJournalTrans_Asset
                        where ledgerJournalTrans_Asset.RefRecId == ledgerJournalTrans.RecId
            {
                if (ledgerJournalTrans && AssetParameters::transTypeRequiresValidation(ledgerJournalTrans_Asset.TransType))
                {
                    // The Reason code required.
                    throw error(strFmt("@SYS110217", "@SYS111246"));
                }
            }
            // Throwing an error message if the reference was changed after the submit dialog box opens and before click on submit button
            if (recId != ledgerJournalTable.RecId && workflowSubmitDialog.parmIsClosedOK())
            {
                throw error(strFmt("@SYS111653", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
            }

            if (workflowSubmitDialog.parmIsClosedOK()
                && ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::NotSubmitted)
            {
                WorkflowComment comment = workflowSubmitDialog.parmWorkflowComment();

                try
                {
                    ttsbegin;
                    // Start the workflow.
                    // This process does not record the WorkflowCorrelationId.
                    // Create a new workflow from the workflow template used on the workflow configuration associated to the journal's journal name.
                    Workflow::activateFromWorkflowSequenceNumber(ledgerJournalName.Configuration, recId, comment, NoYes::No);

                    // Set the workflow status to Submitted.
                    LedgerJournalWFApprovalStatusManager::submitFromForm(ledgerJournalTable);
                    ttscommit;
                }
                catch (Exception::Error)
                {
                    throw error(strFmt("@SYS111653", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                }
            }
        }
        else
        {
            try
            {
                // The journal does not support workflow approvals.
                // Reset the workflow status to "None" because the journal is no longer workflow enabled.
                LedgerJournalWFApprovalStatusManager::noneFromForm(ledgerJournalTable);

                // Notify the user that the journal's workflow status has been reset to "None".
                info("@SYS111654");
            }
            catch (Exception::Error)
            {
                throw error(strFmt("@SYS111655", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
            }
        }

        // Make the form refresh its common workflow UI controls.
        args.caller().updateWorkflowControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the workflow dialog run event.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        if (BudgetControlAccountingJournalProcessor::isLedgerBudgetCheckRequiredForLedgerJournalTable(args.record().RecId))
        {
            // Check budget prior to prompting the submit dialog to allow users to cancel their submission action.
            BudgetControlAccountingJournalProcessor::submitLedgerJournalTableToCheckBudget(args.record().RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a workflow approval supported journal to the workflow engine and
    /// updates the workflow status of the journal.
    /// </summary>
    /// <param name="_args">
    /// An Args object provided by the caller.
    /// </param>
    /// <remarks>
    /// The method is only used to create a new workflow running instance for a
    /// workflow support financial journal from a MSDAX client context.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Method has not been called correctly.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Journal cannot be submitted to workflow.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Journal's workflow status could not be updated.
    /// </exception>
    public static void main(Args _args)
    {
        LedgerJournalWFApprSubmitToWF journalWFApprSubmit = new LedgerJournalWFApprSubmitToWF();

        journalWFApprSubmit.parmArgs(_args);
        journalWFApprSubmit.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>