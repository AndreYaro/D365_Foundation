<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceOverridesDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Data;
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// The <c>RetailPriceOverridesDataProvider</c> class is the data provider
/// for retail price overrides report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailReportParametersDataContract))]
class RetailPriceOverridesDataProvider extends RetailSrsReportDataProviderBase
{
    RetailPriceOverridesReportTable      table;
    RetailReportParametersDataContract  dc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(RetailPriceOverridesReportTable))]
    public RetailPriceOverridesReportTable getTable()
    {
        select table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the report.
    /// </summary>
    public void processReport()
    {
        dc = this.parmDataContract();
        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query and insert data into temp table.
    /// </summary>
    void populateData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailPriceOverridesReportView));

            //// Add fields.
            qds.addSelectionFieldWithAlias('transDate', fieldNum(RetailPriceOverridesReportView, transDate));
            qds.addSelectionFieldWithAlias('transactionId', fieldNum(RetailPriceOverridesReportView, transactionId));
            qds.addSelectionFieldWithAlias('itemId', fieldNum(RetailPriceOverridesReportView, itemId));
            qds.addSelectionFieldWithAlias('productName', fieldNum(RetailPriceOverridesReportView, productName));
            qds.addSelectionFieldWithAlias('qty', fieldNum(RetailPriceOverridesReportView, qty));
            qds.addSelectionFieldWithAlias('overrideTotal', fieldNum(RetailPriceOverridesReportView, overrideTotal));
            qds.addSelectionFieldWithAlias('overridePercentage', fieldNum(RetailPriceOverridesReportView, overridePercentage));
            qds.addSelectionFieldWithAlias('originalPrice', fieldNum(RetailPriceOverridesReportView, originalPrice));
            qds.addSelectionFieldWithAlias('price', fieldNum(RetailPriceOverridesReportView, price));
            qds.addSelectionFieldWithAlias('employeeId', fieldNum(RetailPriceOverridesReportView, employeeId));
            qds.addSelectionFieldWithAlias('employeeName', fieldNum(RetailPriceOverridesReportView, employeeName));

            //Add ranges.
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailPriceOverridesReportView, transDate));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(dc.parmFromDate(), dc.parmToDate(), fieldStr(RetailPriceOverridesReportView, transDate)));
            
            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(qds, fieldNum(RetailPriceOverridesReportView, Channel));

            //Build Mappings
            Map m = this.getMappings();

            // run the query and insert the query results into the form datasource
            QueryRun::runAndPopulate(q, table, m);

            this.ClearChannelFilterTable();
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMappings</Name>
				<Source><![CDATA[
    private Map getMappings()
    {
        Map m = new Map(Types::String, Types::String);
        m.insert('transDate', fieldStr(RetailPriceOverridesReportTable, transDate));
        m.insert('transactionId', fieldStr(RetailPriceOverridesReportTable, transactionId));
        m.insert('itemId', fieldStr(RetailPriceOverridesReportTable, itemId));
        m.insert('productName', fieldStr(RetailPriceOverridesReportTable, productName));
        m.insert('qty', fieldStr(RetailPriceOverridesReportTable, qty));
        m.insert('overrideTotal', fieldStr(RetailPriceOverridesReportTable, overrideTotal));
        m.insert('overridePercentage', fieldStr(RetailPriceOverridesReportTable, overridePercentage));
        m.insert('originalPrice', fieldStr(RetailPriceOverridesReportTable, originalPrice));
        m.insert('price', fieldStr(RetailPriceOverridesReportTable, overridePrice));
        m.insert('employeeId', fieldStr(RetailPriceOverridesReportTable, employeeId));
        m.insert('employeeName', fieldStr(RetailPriceOverridesReportTable, employeeName));

        return m;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>