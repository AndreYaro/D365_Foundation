<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementsAutomationCriteriaFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerSettlementsAutomationCriteriaFormInteraction</c> class handles all form level interaction for ledger settlements automations.
/// </summary>
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'LedgerSettlementsAutomation')]
[Export(identifierStr(Dynamics.AX.Application.LedgerSettlementsAutomationCriteriaFormInteraction))]
internal class LedgerSettlementsAutomationCriteriaFormInteraction
{
    protected LedgerSettlementsAutomationCriteriaFormState formState;

    internal LedgerSettlementsAutomationCriteria automationCriteria;
    internal LedgerSettlementsAutomationCriteria automationCriteriaExistingSeriesCached;
    private SysQueryRun sysQueryRun;
    private boolean isInitialized;
    private readonly boolean isFinTagConfigurationSet = FinTagConfiguration::isFinTagConfigurationSet(curExt());
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromFormState</Name>
				<Source><![CDATA[
    internal static LedgerSettlementsAutomationCriteriaFormInteraction constructFromFormState(
        ProcessScheduleTypeName _typeName,
        LedgerSettlementsAutomationCriteriaFormState _formState)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(extendedTypeStr(ProcessScheduleTypeName), _typeName);

        LedgerSettlementsAutomationCriteriaFormInteraction automationCriteriaForm =
            SysPluginFactory::Instance('Dynamics.AX.Application', classStr(LedgerSettlementsAutomationCriteriaFormInteraction), metadataCollection) as LedgerSettlementsAutomationCriteriaFormInteraction;
        
        automationCriteriaForm.initialize(_formState);

        return automationCriteriaForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(LedgerSettlementsAutomationCriteriaFormState _formState)
    {
        this.formState = _formState;

        this.enforceCriteriaRecordExistence();
        this.registerEventOverrides();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enforceCriteriaRecordExistence</Name>
				<Source><![CDATA[
    private void enforceCriteriaRecordExistence()
    {
        ProcessScheduleSchedulingContract formStateContract = formState.getProcessScheduleSchedulingContract();
        if (!isInitialized && !formStateContract.parmIsCreation())
        {
            if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Series)
            {
                if (this.findAutomationCriteriaRecordForSeries(formStateContract.getProcessScheduleSeriesData()).RecId == 0)
                {
                    throw error("@GeneralLedger:LedgerSettlementsAutomationSeriesNotFound");
                }
            }
            else
            {
                if (this.findAutomationCriteriaRecordForOccurrence(formStateContract.getProcessScheduleOccurrenceData()).RecId == 0)
                {
                    throw error("@GeneralLedger:LedgerSettlementsAutomationOccurrenceNotFound");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        return (this.validateFinancialDimensionsCriteriaSelection()
            && this.validateMainAccountsCriteriaSelection()
            && this.validateFinancialTagsCriteriaSelection());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialDimensionsCriteriaSelection</Name>
				<Source><![CDATA[
    private boolean validateFinancialDimensionsCriteriaSelection()
    {
        boolean isFinancialDimensionsSelectionValid = true;
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

        LedgerSettlementsAutomationDimensionsListPanel ledgerDimensionsListPanel = formStateControls.ledgerDimensionsListPanel;
        if (formStateControls.matchCriteriaFinancialDimensionsControl.value())
        {
            if (ledgerDimensionsListPanel.selectionCount() == 0)
            {
                isFinancialDimensionsSelectionValid = checkfailed("@GeneralLedger:LedgerSettlementsAutomationValidateDimensionSelection");
            }
        }
        return isFinancialDimensionsSelectionValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMainAccountsCriteriaSelection</Name>
				<Source><![CDATA[
    private boolean validateMainAccountsCriteriaSelection()
    {
        boolean isMainAccountsSelectionValid = true;
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

        LedgerSettlementsAutomationMainAccountsListPanel mainAccountsListPanel = formStateControls.mainAccountsListPanel;
        if (mainAccountsListPanel.selectionCount() == 0)
        {
            isMainAccountsSelectionValid = checkfailed("@GeneralLedger:LedgerSettlementsAutomationValidateMainAccountsSelection");
        }
        return isMainAccountsSelectionValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFinancialTagsCriteriaSelection</Name>
				<Source><![CDATA[
    private boolean validateFinancialTagsCriteriaSelection()
    {
        boolean isFinancialTagsSelectionValid = true;

        if (isFinTagConfigurationSet)
        {
            LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

            LedgerSettlementsAutomationFinancialTagsListPanel financialTagsListPanel = formStateControls.financialTagsListPanel;
            if (formStateControls.matchCriteriaFinancialTagsControl.value())
            {
                if (financialTagsListPanel.selectionCount() == 0)
                {
                    isFinancialTagsSelectionValid = checkfailed("@GeneralLedger:LedgerSettlementsAutomationValidateFinancialTagsSelection");
                }
            }
        }
        return isFinancialTagsSelectionValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    internal void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingContract)
    {
        this.setScheduleSeries(_schedulingContract.getProcessScheduleSeriesData().getSeriesRecId());
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    internal void updateScheduleSeries()
    {
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingContract)
    {
        this.setScheduleOccurrence(_schedulingContract.getProcessScheduleOccurrenceData().getOccurrenceRecId());
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void updateScheduledOccurrence()
    {
        this.writeToDataSource(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToDataSource</Name>
				<Source><![CDATA[
    private void writeToDataSource(boolean _skipSelectionChecks=false)
    {
        if ((_skipSelectionChecks)
            || (this.validateFinancialDimensionsCriteriaSelection())
            || (this.validateMainAccountsCriteriaSelection())
            || (this.validateFinancialTagsCriteriaSelection()))
        {
            LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

            ttsbegin;

            LedgerSettlementsAutomationMainAccountsListPanel mainAccountsListPanel = formStateControls.mainAccountsListPanel;
            LedgerSettlementsAutomationDimensionsListPanel ledgerDimensionsListPanel = formStateControls.ledgerDimensionsListPanel;
            LedgerSettlementsAutomationFinancialTagsListPanel financialTagsListPanel = formStateControls.financialTagsListPanel;

            FormDataSource dataSource = formStateControls.automationCriteriaLS_ds;
            dataSource.write();
            RefRecId criteriaRecId = dataSource.cursor().RecId;

            ledgerDimensionsListPanel.commitSelectionToDatabase(criteriaRecId);
            mainAccountsListPanel.commitSelectionToDatabase(criteriaRecId);
            financialTagsListPanel.commitSelectionToDatabase(criteriaRecId);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the existing automation criteria record from the given <c>ProcessScheduleSeries</c> table buffer.
    /// </summary>
    /// <param name = "_processScheduleSeries">
    /// The <c>ProcessScheduleSeries</c> table buffer holding the reference to an existing series.
    /// </param>
    /// <returns>
    /// A table buffer containing an existing automation criteria record.
    /// </returns>
    protected Common findAutomationCriteriaRecordForSeries(ProcessScheduleSeriesData _processScheduleSeries)
    {
        if (automationCriteria.RecId == 0)
        {
            automationCriteria = LedgerSettlementsAutomationCriteria::findByScheduleSeries(_processScheduleSeries.getSeriesRecId());
        }

        return automationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the existing automation criteria record from the given <c>ProcessScheduleOccurrence</c> table buffer.
    /// </summary>
    /// <param name = "_processScheduleOccurrence">
    /// The <c>ProcessScheduleOccurrence</c> table buffer holding the reference to an existing series.
    /// </param>
    /// <returns>
    /// A table buffer containing an existing automation criteria record.
    /// </returns>
    protected Common findAutomationCriteriaRecordForOccurrence(ProcessScheduleOccurrenceData _processScheduleOccurrence)
    {
        if (automationCriteria.RecId == 0)
        {
            automationCriteria = LedgerSettlementsAutomationCriteria::findByScheduleOccurrence(_processScheduleOccurrence.getOccurrenceRecId());
        }

        return automationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field that references the <c>ScheduleSeries</c> table.
    /// </summary>
    /// <param name = "_processScheduleSeries">
    /// The <c>RecId</c> value of the <c>ScheduleSeries</c> table to be referenced.
    /// </param>
    protected void setScheduleSeries(RecId _processScheduleSeries)
    {
        this.getCurrentCriteria().ProcessScheduleSeries = _processScheduleSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field that references the <c>ScheduleOccurrence</c> table.
    /// </summary>
    /// <param name = "_processScheduleOccurrence">
    /// The <c>RecId</c> value of the <c>ScheduleOccurrence</c> table to be referenced.
    /// </param>
    protected void setScheduleOccurrence(RecId _processScheduleOccurrence)
    {
        this.getCurrentCriteria().ProcessScheduleOccurrence = _processScheduleOccurrence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOccurrenceFromSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults all criteria values of a new occurrence from the saved series.
    /// </summary>
    protected void defaultOccurrenceFromSeries()
    {
        LedgerSettlementsAutomationCriteria automationCriteriaExistingSeries = this.findExistingCriteriaFromSeries();

        if (automationCriteriaExistingSeries.RecId != 0)
        {
            LedgerSettlementsAutomationCriteria currentCriteria = this.getCurrentCriteria();
        
            currentCriteria.MainAccount = automationCriteriaExistingSeries.MainAccount;
            currentCriteria.PostingLayer = automationCriteriaExistingSeries.PostingLayer;
            currentCriteria.DebitandCreditAmounts = automationCriteriaExistingSeries.DebitandCreditAmounts;
            currentCriteria.PostingType = automationCriteriaExistingSeries.PostingType;
            currentCriteria.FinancialDimensions = automationCriteriaExistingSeries.FinancialDimensions;
            currentCriteria.Tags = automationCriteriaExistingSeries.Tags;
            currentCriteria.DateTolerance = automationCriteriaExistingSeries.DateTolerance;
            currentCriteria.DateToleranceDays = automationCriteriaExistingSeries.DateToleranceDays;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventOverrides</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers form control event overrides.
    /// </summary>
    [Wrappable(false)]
    protected void registerEventOverrides()
    {
        this.registerAutomationCriteriaDataSourceOverrides();
        this.registerDateToleranceCriteriaOverride();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAutomationCriteriaDataSourceOverrides</Name>
				<Source><![CDATA[
    private void registerAutomationCriteriaDataSourceOverrides()
    {
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

        FormDataSource automationCriteria_ds = formStateControls.automationCriteriaLS_ds;
        automationCriteria_ds.registerOverrideMethod(
            methodStr(FormDataSource, executeQuery),
            methodStr(LedgerSettlementsAutomationCriteriaFormInteraction, automationCriteriaDataSourceExecuteQuery),
            this);

        automationCriteria_ds.registerOverrideMethod(
            methodStr(FormDataSource, leaveRecord),
            methodStr(LedgerSettlementsAutomationCriteriaFormInteraction, automationCriteriaDataSourceLeaveRecord),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceExecuteQuery</Name>
				<Source><![CDATA[
    private void automationCriteriaDataSourceExecuteQuery(FormDataSource _formDataSource)
    {
        if (!isInitialized)
        {
            ProcessScheduleSchedulingContract formStateContract = formState.getProcessScheduleSchedulingContract();
            _formDataSource.executeQuery();

            // If we are a new record and not modifying an existing record, then create a new record.
            if (formStateContract.parmIsCreation())
            {
                _formDataSource.create();

                // If we are creating an occurrence record, and it's coming from an already created Series,
                // then we need to hydrate the form controls with values from the series.
                if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Occurrence
                    && formStateContract.getProcessScheduleSeriesData().getSeriesRecId() != 0)
                {
                    this.defaultOccurrenceFromSeries();
                }
            }
            else
            {
                if (formStateContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Series)
                {
                    _formDataSource.positionToRecord(this.findAutomationCriteriaRecordForSeries(formStateContract.getProcessScheduleSeriesData()));
                }
                else
                {
                    _formDataSource.positionToRecord(this.findAutomationCriteriaRecordForOccurrence(formStateContract.getProcessScheduleOccurrenceData()));
                }
            }

            this.setControlState(); //set controls based on values returned.  From here, hide/show the tabs.

            isInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets necessary form control state.
    /// </summary>
    protected void setControlState()
    {
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

        LedgerSettlementsAutomationDimensionsListPanel ledgerDimensionsListPanel;
        FormCheckBoxControl matchCriteriaMainAccountControl = formStateControls.matchCriteriaMainAccountControl;
        matchCriteriaMainAccountControl.enabled(false);

        FormCheckBoxControl matchCriteriaPostingLayerControl = formStateControls.matchCriteriaPostingLayerControl;
        matchCriteriaPostingLayerControl.enabled(false);

        FormComboBoxControl matchCriteriaDebitandCreditAmounts = formStateControls.matchCriteriaDebitandCreditAmounts;
        matchCriteriaDebitandCreditAmounts.enabled(false);
        matchCriteriaDebitandCreditAmounts.visible(false);

        FormCheckBoxControl matchFinancialDimensionsControl = formStateControls.matchCriteriaFinancialDimensionsControl;
        FormTabPageControl financialDimensionsTabControl = formStateControls.financialDimensionsTabControl;
        LedgerSettlementsAutomationCriteriaFormInteraction::setFinancialDimensionsTab(matchFinancialDimensionsControl, financialDimensionsTabControl, ledgerDimensionsListPanel);

        FormTabPageControl mainAccountsTabControl = formStateControls.mainAccountsTabControl;
        LedgerSettlementsAutomationCriteriaFormInteraction::setMainAccountsTab(mainAccountsTabControl);
        
        FormCheckBoxControl matchCriteriaDateToleranceCriteria = formStateControls.matchCriteriaDateTolerance;
        FormIntControl matchCriteriaDateToleranceDays = formStateControls.matchCriteriaDateToleranceDays;
        matchCriteriaDateToleranceDays.enabled(matchCriteriaDateToleranceCriteria.value());

        LedgerSettlementsAutomationFinancialTagsListPanel financialTagsListPanel;
        FormCheckBoxControl matchCriteriaFinancialTagsControl = formStateControls.matchCriteriaFinancialTagsControl;
        matchCriteriaFinancialTagsControl.enabled(isFinTagConfigurationSet);
        matchCriteriaFinancialTagsControl.visible(isFinTagConfigurationSet);
        FormTabPageControl financialTagsTabControl = formStateControls.financialTagsTabControl;
        LedgerSettlementsAutomationCriteriaFormInteraction::setFinancialTagsTab(matchCriteriaFinancialTagsControl, financialTagsTabControl, financialTagsListPanel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDateToleranceCriteriaOverride</Name>
				<Source><![CDATA[
    private void registerDateToleranceCriteriaOverride()
    {
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

        FormCheckBoxControl matchCriteriaDateToleranceCriteria = formStateControls.matchCriteriaDateTolerance;
        matchCriteriaDateToleranceCriteria.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(LedgerSettlementsAutomationCriteriaFormInteraction, useDateToleranceDaysModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDateToleranceDaysModified</Name>
				<Source><![CDATA[
    private boolean useDateToleranceDaysModified(FormCheckBoxControl _matchCriteriaDateToleranceCriteria)
    {
        boolean ret = _matchCriteriaDateToleranceCriteria.modified();

        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();
        FormIntControl matchCriteriaDateToleranceDays = formStateControls.matchCriteriaDateToleranceDays;

        matchCriteriaDateToleranceDays.enabled(_matchCriteriaDateToleranceCriteria.checked());
        this.getCurrentCriteria().DateToleranceDays = 0;

        if (_matchCriteriaDateToleranceCriteria.checked())
        {
            this.getCurrentCriteria().DateToleranceDays = 30;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainAccountsTab</Name>
				<Source><![CDATA[
    internal static void setMainAccountsTab(
        FormTabPageControl _mainAccountsTabControl)
    {
        _mainAccountsTabControl.visible(true);
        _mainAccountsTabControl.expand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinancialDimensionsTab</Name>
				<Source><![CDATA[
    internal static void setFinancialDimensionsTab(
        FormCheckBoxControl _matchFinancialDimensionsControl,
        FormTabPageControl _financialDimensionsTabControl,
        LedgerSettlementsAutomationDimensionsListPanel _ledgerDimensionsListPanel)
    {
        if (_matchFinancialDimensionsControl.checked())
        {
            _financialDimensionsTabControl.visible(true);
            _financialDimensionsTabControl.expand();
        }
        else
        {
            _financialDimensionsTabControl.visible(false);
            if (_ledgerDimensionsListPanel)
            {
                _ledgerDimensionsListPanel.removeAllSelected();
            }
            _financialDimensionsTabControl.collapse();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinancialTagsTab</Name>
				<Source><![CDATA[
    internal static void setFinancialTagsTab(
        FormCheckBoxControl _matchCriteriaFinancialTagsControl,
        FormTabPageControl _financialTagsTabControl,
        LedgerSettlementsAutomationFinancialTagsListPanel _financialTagsListPanel)
    {
        if (FinTagConfiguration::isFinTagConfigurationSet(curExt()))
        {
            if (_matchCriteriaFinancialTagsControl.checked())
            {
                _financialTagsTabControl.visible(true);
                _financialTagsTabControl.expand();
            }
            else
            {
                _financialTagsTabControl.visible(false);
                if (_financialTagsListPanel)
                {
                    _financialTagsListPanel.removeAllSelected();
                }
                _financialTagsTabControl.collapse();
            }
        }
        else
        {
            _financialTagsTabControl.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceLeaveRecord</Name>
				<Source><![CDATA[
    private boolean automationCriteriaDataSourceLeaveRecord(FormDataSource _formDataSource)
    {
        // Return true and do not call super(), so leaving the data source forces a save event to occur.
        // This is deferred to later in order to properly support transactional integrity with the process automation framework.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceSelectionChanged</Name>
				<Source><![CDATA[
    private boolean automationCriteriaDataSourceSelectionChanged(FormDataSource _formDataSource)
    {
        // Return true and do not call super(), so leaving the data source forces a save event to occur.
        // This is deferred to later in order to properly support transactional integrity with the process automation framework.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySelectButtonClicked</Name>
				<Source><![CDATA[
    private void querySelectButtonClicked(FormFunctionButtonControl _queryButton)
    {
        SysQueryRun sysQueryRunLocal = this.getSysQueryRun();
        
        if (sysQueryRunLocal)
        {
            if (sysQueryRunLocal.prompt())
            {
                formState.setWorkingLedgerSettlementsQuery(sysQueryRunLocal.query());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysQueryRun</Name>
				<Source><![CDATA[
    private SysQueryRun getSysQueryRun()
    {
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();

        Query queryLocal = formState.getWorkingLedgerSettlementsQuery();

        sysQueryRun = new SysQueryRun(queryLocal);
        sysQueryRun.promptLoadLastUsedQuery(true);
        sysQueryRun.promptAllowSave(false);
        sysQueryRun.promptShowSorting(false);
        sysQueryRun.promptSaveQueryPrUser(false);
        sysQueryRun.promptAllowAddDataSource(true);
        sysQueryRun.promptAllowAddRange(QueryAllowAdd::AllFields);
        sysQueryRun.userUpdate(formStateControls.automationCriteriaLS_ds.canEdit());

        return sysQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentCriteria</Name>
				<Source><![CDATA[
    internal LedgerSettlementsAutomationCriteria getCurrentCriteria()
    {
        LedgerSettlementsAutomationCriteriaControls formStateControls = formState.getLedgerSettlementsAutomationCriteriaControls();
        return formStateControls.automationCriteriaLS_ds.cursor() as LedgerSettlementsAutomationCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExistingCriteriaFromSeries</Name>
				<Source><![CDATA[
    internal LedgerSettlementsAutomationCriteria findExistingCriteriaFromSeries()
    {
        ProcessScheduleSchedulingContract initialSchedulingContract = this.formState.getProcessScheduleSchedulingContract();
        if (automationCriteriaExistingSeriesCached.RecId == 0)
        {
           automationCriteriaExistingSeriesCached = LedgerSettlementsAutomationCriteria::findByScheduleSeries(initialSchedulingContract.getProcessScheduleSeriesData().getSeriesRecId());
        }

        return automationCriteriaExistingSeriesCached;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>