<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanSchedulePlanningPeriod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanSchedulePlanningPeriod</c> class provides daily and weekly precision for planning period
///    logical access to the working calendar.
/// </summary>
/// <remarks>
///    This class assumes that the lean planning period, which is in days or weeks, does not vary after it
///    is initialized.
/// </remarks>
class LeanSchedulePlanningPeriod
{
    #TimeConstants

    CalendarId                  calendarId;
    LeanPlanningPeriodType      leanPlanningPeriodType;
    LeanProdFlowModelType       leanProdFlowModelType;
    LeanCapacityValidFromDate   leanCapacityValidFromDate;
    LeanCapacityValidToDate     leanCapacityValidToDate;
    int                         numDaysInPeriod;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        calendarId,
        leanPlanningPeriodType,
        leanProdFlowModelType,
        numDaysInPeriod,
        leanCapacityValidFromDate,
        leanCapacityValidToDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPlanningPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the start date of the next planning period, which does not include closed periods.
    /// </summary>
    /// <param name="_startPeriodDate">
    ///    A date that marks the beginning of the current planning period.
    /// </param>
    /// <returns>
    ///    The company time zone date that marks the start of the next planning period.
    /// </returns>
    public KanbanJobSchedulePlannedPeriod nextPlanningPeriod(KanbanJobSchedulePlannedPeriod _startPeriodDate)
    {
        // Ensure that we are at the beginning of a period, or move to it if not
        _startPeriodDate = this.planningPeriodStartDate(_startPeriodDate);

        // Move to the immediate next planning period to avoid finding open dates in the current period
        SchedDate nextPeriodStartDate = _startPeriodDate + numDaysInPeriod;

        // Locate the following open working date (to skip closed periods)
        TransDate nextOpenDate = WorkCalendar::findOpenDateForward(calendarId,nextPeriodStartDate,0,true);

        // Return the planning period start of the working date found (correct offset inside the period, if any)
        return nextOpenDate - ((nextOpenDate - nextPeriodStartDate) mod numDaysInPeriod);   //company TZ
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalendarId</Name>
				<Source><![CDATA[
    public CalendarId parmCalendarId(CalendarId _calendarId = calendarId)
    {
        calendarId = _calendarId;

        return calendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCapacityValidFromDate</Name>
				<Source><![CDATA[
    public LeanCapacityValidFromDate parmLeanCapacityValidFromDate(LeanCapacityValidFromDate _leanCapacityValidFromDate = leanCapacityValidFromDate)
    {
        leanCapacityValidFromDate = _leanCapacityValidFromDate;
        return leanCapacityValidFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCapacityValidToDate</Name>
				<Source><![CDATA[
    public LeanCapacityValidToDate parmLeanCapacityValidToDate(LeanCapacityValidToDate _leanCapacityValidToDate = leanCapacityValidToDate)
    {
        leanCapacityValidToDate = _leanCapacityValidToDate;
        return leanCapacityValidToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanPlanningPeriodType</Name>
				<Source><![CDATA[
    public LeanPlanningPeriodType parmLeanPlanningPeriodType(LeanPlanningPeriodType _leanPlanningPeriodType = leanPlanningPeriodType)
    {
        leanPlanningPeriodType = _leanPlanningPeriodType;

        if (leanPlanningPeriodType == LeanPlanningPeriodTypes::Day)
        {
            numDaysInPeriod = 1;
        }
        else if (leanPlanningPeriodType == LeanPlanningPeriodTypes::Week)
        {
            numDaysInPeriod = #daysPerWeek;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return leanPlanningPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProdFlowModelType</Name>
				<Source><![CDATA[
    public LeanProdFlowModelType parmLeanProdFlowModelType(LeanProdFlowModelType _leanProdFlowModelType = leanProdFlowModelType)
    {
        leanProdFlowModelType = _leanProdFlowModelType;
        return leanProdFlowModelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planningPeriodEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last open date and time of the planning period.
    /// </summary>
    /// <param name="_startPeriodDate">
    ///    A date that marks the start of the current planning period.
    /// </param>
    /// <returns>
    ///    The last open date and time of the planning period.
    /// </returns>
    public utcdatetime planningPeriodEndDateTime(KanbanJobSchedulePlannedPeriod _startPeriodDate)
    {
        // Ensure that we are at the beginning of a period, or move to it if not
        _startPeriodDate = this.planningPeriodStartDate(_startPeriodDate);

        // Gets the last opened date and time of this period by moving to the beginning of the next period
        // and looking backwards
        TransDate nextPeriodDate = this.nextPlanningPeriod(_startPeriodDate);
        TransDateTime toDateTime = DateTimeUtil::newDateTime(nextPeriodDate,0,DateTimeUtil::getCompanyTimeZone());

        if (calendarId)
        {
            toDateTime = WorkCalendar::findOpenDateTimeBackward(calendarId,toDateTime,true);
        }

        return toDateTime;     //UTC
    }

]]></Source>
			</Method>
			<Method>
				<Name>planningPeriodStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the closest planning period that starts at the indicated date.
    /// </summary>
    /// <param name="_startDate">
    ///    A starting date from which to look for an open planning period.
    /// </param>
    /// <returns>
    ///    The start date that uses the company time zone of the closest planning period.
    /// </returns>
    /// <remarks>
    ///    The closest planning period may be the current planning period or the next planning period.
    /// </remarks>
    public KanbanJobSchedulePlannedPeriod planningPeriodStartDate(KanbanJobSchedulePlannedPeriod _startDate)
    {
        KanbanJobSchedulePlannedPeriod periodStartDate = WorkCalendar::findOpenDateForward(calendarId,_startDate,0,true);

        if (leanPlanningPeriodType == LeanPlanningPeriodTypes::Week)
        {
            periodStartDate = LeanSchedulePlanningPeriod::mondayOfWeek(periodStartDate);
        }

        return periodStartDate;     //company TZ
    }

]]></Source>
			</Method>
			<Method>
				<Name>planningPeriodStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first open date and time of the planning period.
    /// </summary>
    /// <param name="_startPeriodDate">
    ///    A date that marks the start of the current planning period.
    /// </param>
    /// <returns>
    ///    The first open date and time of the planning period.
    /// </returns>
    public utcdatetime planningPeriodStartDateTime(KanbanJobSchedulePlannedPeriod _startPeriodDate)
    {
        // Ensure that we are at the beginning of a period, or move to it if not
        _startPeriodDate = this.planningPeriodStartDate(_startPeriodDate);

        // Gets the first opened date and time of this period by looking forward from the beginning of the period.
        TransDateTime fromDateTime = DateTimeUtil::newDateTime(_startPeriodDate,0,DateTimeUtil::getCompanyTimeZone());

        if (calendarId)
        {
            fromDateTime = WorkCalendar::findOpenDateTimeForward(calendarId,fromDateTime,true);
        }

        return fromDateTime;    //UTC
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousPlanningPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the previous planning period start date and skips the closed periods in-between.
    /// </summary>
    /// <param name="_startPeriodDate">
    ///    A date that marks the start of the current planning period.
    /// </param>
    /// <returns>
    ///    A date that marks the start of the previous planning period.
    /// </returns>
    public KanbanJobSchedulePlannedPeriod previousPlanningPeriod(KanbanJobSchedulePlannedPeriod _startPeriodDate)
    {
        timeOfDay   lastTimeOfDay = #secondsPerDay-1;

        // Ensure that we are at the beginning of a period, or move to it if not
        _startPeriodDate = this.planningPeriodStartDate(_startPeriodDate);

        // Look for a previous opened working date.
        SchedDate previousPeriodEndDate = _startPeriodDate - 1;
        TransDate previousOpenDate = WorkCalendar::findOpenDateBackward(calendarId, previousPeriodEndDate, lastTimeOfDay, true);

        // Previous opened working day could fall in the middle of the previous period (adjust to the beginning of it)
        int inPeriodOffset = (_startPeriodDate - previousOpenDate) mod numDaysInPeriod;
        if (inPeriodOffset > 0)
        {
            previousOpenDate = previousOpenDate - (numDaysInPeriod - inPeriodOffset);
        }

        return previousOpenDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static LeanSchedulePlanningPeriod construct()
    {
        return new LeanSchedulePlanningPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPeriodWithOpenJobs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the earliest planning period that has open jobs in the work cell.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    A record ID of a work center resource group.
    /// </param>
    /// <returns>
    ///    The company time zone date that represents the earliest planning period that has open jobs in the
    ///    work cell.
    /// </returns>
    public static KanbanJobSchedulePlannedPeriod firstPeriodWithOpenJobs(WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId)
    {
        KanbanJobSchedule   kanbanJobSchedule;
        KanbanJob           kanbanJob;

        select firstonly PlannedPeriod
            from kanbanJobSchedule
                order by PlannedPeriod
                where kanbanJobSchedule.WorkCell == _wrkCtrResourceGroupRecId
            exists join TableId
                from kanbanJob
                where kanbanJob.RecId  == kanbanJobSchedule.Job
                   && kanbanJob.Status != LeanKanbanJobStatus::Completed;

        return kanbanJobSchedule.PlannedPeriod; //company TZ
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LeanSchedulePlanningPeriod</c> class from a container.
    /// </summary>
    /// <param name="_packedLeanSchedulePlanningPeriod">
    ///    A packed instance of the <c>LeanSchedulePlanningPeriod</c> class in a container.
    /// </param>
    /// <returns>
    ///    The unpacked instance of the <c>LeanSchedulePlanningPeriod</c> class.
    /// </returns>
    public static LeanSchedulePlanningPeriod newFromPackedClass(container _packedLeanSchedulePlanningPeriod)
    {
        if (!_packedLeanSchedulePlanningPeriod)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::construct();
        leanSchedulePlanningPeriod.unpack(_packedLeanSchedulePlanningPeriod);

        return leanSchedulePlanningPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanSchedulePlanningPeriod</c> class.
    /// </summary>
    /// <param name="_leanProdFlowModelType">
    ///     The lean production flow model type.
    /// </param>
    /// <param name="_periodType">
    ///    A planning period type (daily or weekly).
    /// </param>
    /// <param name="_calendarId">
    ///    A calendar identifier.
    /// </param>
    /// <returns>
    ///    The initialized instance of the class.
    /// </returns>
    public static LeanSchedulePlanningPeriod newStandard(
        LeanProdFlowModelType  _leanProdFlowModelType,
        LeanPlanningPeriodType _periodType = LeanPlanningPeriodTypes::Day,
        CalendarId             _calendarId = '')
    {
        LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::construct();

        leanSchedulePlanningPeriod.parmCalendarId(_calendarId);
        leanSchedulePlanningPeriod.parmLeanProdFlowModelType(_leanProdFlowModelType);
        leanSchedulePlanningPeriod.parmLeanPlanningPeriodType(_periodType);

        return leanSchedulePlanningPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWrkCtrResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanSchedulePlanningPeriod</c> class.
    /// </summary>
    /// <param name="_wrkCtrResourceGroupRecId">
    ///    A record ID of a work center resource group.
    /// </param>
    /// <param name="_date">
    ///    A reference company time zone date that indicates the production flow model of the work cell.
    /// </param>
    /// <returns>
    ///    An initialized instance of the <c>LeanSchedulePlanningPeriod</c> class.
    /// </returns>
    public static LeanSchedulePlanningPeriod newWrkCtrResourceGroup(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroupRecId,
        TransDate                   _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))        //company TZ
    {
        if (!_wrkCtrResourceGroupRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // Get the planning period type
        LeanWorkCellCapacity leanWorkCellCapacity = LeanWorkCellCapacity::findForwardForWorkCell(_wrkCtrResourceGroupRecId,_date);
        if (!leanWorkCellCapacity)
        {
            error("@SYS300263");
            return null;
        }
        LeanProductionFlowModel leanProductionFlowModel = LeanProductionFlowModel::find(leanWorkCellCapacity.ProductionFlowModel);
        if (!leanProductionFlowModel)
        {
            error("@SYS300263");
            return null;
        }

        // Get the calendar that applies to the work cell capacity (not mandatory)
        WrkCtrResourceCalendar wrkCtrResourceCalendar = WrkCtrResourceCalendar::findActiveForResourceGroup(_wrkCtrResourceGroupRecId, max(_date, leanWorkCellCapacity.ValidFromDate));

        // Create the class instance
        LeanSchedulePlanningPeriod leanSchedulePlanningPeriod = LeanSchedulePlanningPeriod::newStandard(leanProductionFlowModel.ModelType,
                                                                                                        leanProductionFlowModel.PlanningPeriodType,
                                                                                                        wrkCtrResourceCalendar.CalendarId);
        leanSchedulePlanningPeriod.parmLeanCapacityValidFromDate(leanWorkCellCapacity.ValidFromDate);
        leanSchedulePlanningPeriod.parmLeanCapacityValidToDate(leanWorkCellCapacity.ValidToDate);

        return leanSchedulePlanningPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mondayOfWeek</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Monday of a given week.
    /// </summary>
    /// <param name = "_transDate">The date to work on.</param>
    /// <returns>The Monday of a given week.</returns>
    public static date mondayOfWeek(date _transDate)
    {
        var diff = dayOfWk(_transDate) - 1;
        return _transDate - diff;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
