<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferMultiReceive</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferMultiReceive</c> class handles updates regarding a receipt of transfer orders.
/// </summary>
class InventTransferMultiReceive extends InventTransferMulti implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public FormName formName()
    {
        return formStr(InventTransferParmReceive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventTransferMultiReceive</c> class from a calling
    ///    <c>WMSJournalTable</c> form.
    /// </summary>
    /// <param name="_args">
    ///    An argument that represent the calling form.
    /// </param>
    protected void initFromWMSJournalTable(Args _args)
    {
        Common          common;
        container       packedRecords;

        if (_args && _args.dataset() && FormDataUtil::getFormDataSource(_args.record()))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
            for (common = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : _args.record(); common; common = formDataSource.getNext())
            {
                packedRecords += [common];
            }
        }

        this.unpackClientServerTransfer(InventTransferMultiReceive::initFromWMSJournalTableOnServer(
            this.packClientServerTransfer(),
            packedRecords));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTableInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventTransferMultiReceive</c> class from a container with the
    ///    packed <c>WMSJournalTable</c> records.
    /// </summary>
    /// <param name="_packedRecords">
    ///    A container with a packed set of records.
    /// </param>
    private void initFromWMSJournalTableInternal(container _packedRecords)
    {
        int                         recordCounter;
        WMSJournalTrans             wmsJournalTrans;
        InventTransferParmLine      inventTransferParmLine;
        Map                         transferLineNumMap = new Map(Types::String, Types::Integer); //Key = TransferID, Value = LineNum
        boolean                     hasCreatedParmUpdate = false;

        InventTransferParmTable inventTransferParmTable = this.defaultParmBuffer();
        RunBaseMultiParm::initParm(this); //sets parm id and get's last values from Syslastvalue
        this.parmCalledFromWMS(true);

        inventTransferParmTable.LineNum = 0;

        for (recordCounter = conLen(_packedRecords); recordCounter >= 1; --recordCounter)
        {
            ttsbegin;

            // should only be done once since it is shared by all the ParmBuffers
            if (!hasCreatedParmUpdate)
            {
                this.insertParmUpdate(this.defaultParmUpdate());
                hasCreatedParmUpdate = true;
            }

            WMSJournalTable wmsJournalTable = conPeek(_packedRecords, recordCounter);

            if (wmsJournalTable.InventTransType == InventTransType::TransferOrderReceive &&
                wmsJournalTable.Posted          == NoYes::Yes)
            {
                Counter transferlineNum = 0;
                InventTransferId inventTransferId = '';

                while select InventTransId, InventTransRefId, Qty, PdsCWQty, InventDimId from wmsJournalTrans
                    order by InventTransRefId,InventTransId,InventDimId asc //done to optimize receipt
                    where wmsJournalTrans.JournalId         == wmsJournalTable.JournalId &&
                          wmsJournalTrans.InventTransType   == InventTransType::TransferOrderReceive
                {
                    // Only create new parmtable if order has changed
                    if (inventTransferId != wmsJournalTrans.InventTransRefId)
                    {
                        inventTransferId = wmsJournalTrans.InventTransRefId;

                        // get line numbers for parm lines for current order
                        if (transferLineNumMap.exists(wmsJournalTrans.InventTransRefId))
                        {
                            transferlineNum = transferLineNumMap.lookup(wmsJournalTrans.InventTransRefId);
                        }

                        if (!InventTransferParmTable::exist(inventTransferParmTable.ParmId,wmsJournalTrans.InventTransRefId))
                        {
                            inventTransferParmTable = this.defaultParmBuffer();

                            // this will initialize values but not insert the record
                            this.insert(wmsJournalTable,inventTransferParmTable);
                            inventTransferParmTable.TransferId   = wmsJournalTrans.InventTransRefId;
                            inventTransferParmTable.initWMSArrivalParameters();
                            inventTransferParmTable.insert(false);//dont let this call create lines
                        }
                    }

                    InventTransferLine inventTransferLine = InventTransferLine::findTransIdReceive(wmsJournalTrans.InventTransId);

                    if (inventTransferLine.QtyRemainReceive)
                    {
                        inventTransferParmLine.clear();

                        select forupdate firstonly inventTransferParmLine
                            where inventTransferParmLine.ParmId         == inventTransferParmTable.ParmId   &&
                                  inventTransferParmLine.InventTransId  == wmsJournalTrans.InventTransId    &&
                                  inventTransferParmLine.InventDimId    == wmsJournalTrans.InventDimId      &&
                                  inventTransferParmLine.TransferId     == wmsJournalTrans.InventTransRefId;

                        if (inventTransferParmLine)
                        {
                            inventTransferParmLine.QtyReceiveNow        += wmsJournalTrans.Qty;
                            inventTransferParmLine.PdsCWQtyReceiveNow   += wmsJournalTrans.PdsCWQty;
                            inventTransferParmLine.update();
                        }
                        else
                        {
                            // Create Parm Line
                            inventTransferParmLine.initFromInventTransferLine(inventTransferLine);
                            inventTransferParmLine.InventTransId        = inventTransferLine.InventTransIdReceive;
                            inventTransferParmLine.InventTransIdTransit = inventTransferLine.InventTransIdTransitFrom;
                            inventTransferParmLine.TransferId           = inventTransferLine.TransferId;
                            inventTransferParmLine.ParmId               = inventTransferParmTable.ParmId;
                            inventTransferParmLine.QtyReceiveNow        = wmsJournalTrans.Qty;
                            inventTransferParmLine.PdsCWQtyReceiveNow   = wmsJournalTrans.PdsCWQty;
                            inventTransferParmLine.InventDimId          = wmsJournalTrans.InventDimId;

                            // must be unique
                            transferlineNum++;
                            inventTransferParmLine.LineNum              = transferlineNum;
                            inventTransferParmLine.insert();

                            // store line numbers for parm lines for previuos order
                            transferLineNumMap.insert(wmsJournalTrans.InventTransRefId,transferlineNum);
                        }
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _inventTransferParmTable)
    {
        InventTransferParmTable     inventTransferParmTable = _inventTransferParmTable;
        super(inventTransferParmTable);
        inventTransferParmTable.UpdateType = InventTransferUpdateType::Receive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        IdentifierName ret;

        if (this.parmCalledFromWMS())
        {
            ret = identifierStr(inventTransferMultiReceiveWms);
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUpdateFieldId_RU</Name>
				<Source><![CDATA[
    protected fieldId qtyUpdateFieldId_RU()
    {
        return fieldnum(InventTransferParmLine, QtyReceiveNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        Query   query = super();

        return (query ? query : new QueryRun(queryStr(InventTransferMultiReceive)).query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    Always returns true as this class has been validated to be able to use impersonation
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    public InventTransferPrintDataProvider runUpdate(InventTransferParmTable   _inventTransferParmTable)
    {
        InventTransferUpdReceive inventTransferUpdReceive = InventTransferUpdReceive::newParmBuffer(_inventTransferParmTable);
        inventTransferUpdReceive.run();

        InventTransferPrintDataProviderReceive dataProvider;
        
        if (!isSkipCreatePrintDataProviderFlightEnabled   ||
            _inventTransferParmTable.PrintTransferReceipt)
        {
            dataProvider = InventTransferPrintDataProviderReceive::construct(); 
            dataProvider.parmVoucherId(inventTransferUpdReceive.voucherId());
        }

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransferMultiReceive construct()
    {
        InventTransferMultiReceive inventTransferMultiReceive = new InventTransferMultiReceive();

        return inventTransferMultiReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS78234" + ' - ' + "@SYS77799";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTableOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegates the initialization of an instance of the <c>InventTransferMultiReceive</c> class from a
    ///    calling <c>WMSJournalTable</c> form to the server tier.
    /// </summary>
    /// <param name="_packedClass">
    ///    A container from which to deserialize an instance of a class.
    /// </param>
    /// <param name="_packedRecords">
    ///    A container with a packed set of records.
    /// </param>
    /// <returns>
    ///    A container that contains a serialized current instance of the <c>InventTransferMultiReceive</c>
    ///    class.
    /// </returns>
    private static container initFromWMSJournalTableOnServer(
        container   _packedClass,
        container   _packedRecords)
    {
        InventTransferMultiReceive  inventTransferMultiReceive  = InventTransferMultiReceive::construct();

        inventTransferMultiReceive.unpackClientServerTransfer(_packedClass);
        inventTransferMultiReceive.initFromWMSJournalTableInternal(_packedRecords);

        return inventTransferMultiReceive.packClientServerTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventTransferMultiReceive inventTransferMultiReceive = InventTransferMultiReceive::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(inventTransferMultiReceive.formName(), _args.menuItemName()))
        {
            if (_args && _args.parmEnum() == RunChoose::Run)
            {
                inventTransferMultiReceive.initFromArgs(_args);

                if (! inventTransferMultiReceive.prompt())
                {
                    return;
                }

                inventTransferMultiReceive.runOperation();
                inventTransferMultiReceive.runReports();

                if (inventTransferMultiReceive::shouldRecalculateFormCache(_args))
                {
                    Object formRun = _args.caller();
                    formRun.doFormCache(inventTransferMultiReceive.packRecs());
                }

                // Print product labels from transfer order during receive
                RetailCreateSpecificLabel::PrintLabels(_args, InventTransferStatus::Received, inventTransferMultiReceive.parmId());
            }
            else
            {
                RunBaseMultiParm::runSpecial(_args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventTransferMultiReceive</c> object from the given <c>Args</c> instance.
    /// </summary>
    /// <param name = "_args">
    /// The <c>Args</c> instance to initialize from.
    /// </param>
    protected void initFromArgs(Args _args)
    {
        switch (_args.dataset())
        {
            case tableNum(InventTransferTable)  :
                this.parmCalledFromWMS(false);
                RunBaseMultiParm::initFromForm(this, _args);
                break;

            case tableNum(WMSJournalTable):
                this.initFromWMSJournalTable(_args);
                break;

            default:
                RunBaseMultiParm::initParm(this); //Make sure parmId is set
                this.insertParmUpdate(this.defaultParmUpdate()); //init and insert overall update table for this update
                this.parmCalledFromWMS(false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRecalculateFormCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the local cache on the form should be recalculated.
    /// </summary>
    /// <param name = "_args">
    /// The passed <c>Args</c> object.
    /// </param>
    /// <returns>
    /// true if the local cache on the form should be recalculated; otherwise, false.
    /// </returns>
    protected static boolean shouldRecalculateFormCache(Args _args)
    {
        return _args.dataset() == tableNum(InventTransferTable) && _args.caller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>