<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransAdjustDataMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransAdjustDataMap</c> class holds the adjustments that should be processed in the
///    <c>InventCostProdAdjust</c> class.
/// </summary>
/// <remarks>
///    This class will store the information in a map, using the <c>prodTable</c> as the key and then
///    another map inside holding to a given key an instance of the <c>InventItemCostGroupRollupList</c>
///    class.
/// </remarks>

class InventTransAdjustDataMap
{
    Map                 inventTransAdjustDataMap;

    InventTransId       inventTransId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an adjustment to the class.
    /// </summary>
    /// <param name="_inventTransId">
    ///    The <c>prodId</c> to which the adjustment belongs.
    /// </param>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> for which the adjustment occurs.
    /// </param>
    /// <param name="_costAmount">
    ///    The amount of the adjustment.
    /// </param>
    /// <param name="_itemPriceRecId">
    ///    For standard cost items, the price to which the adjustment belongs; optional.
    /// </param>
    /// <param name="_inventItemCostGroupRollupList">
    ///    The cost broken down for the adjustment; optional.
    /// </param>

    public void add(InventTransId                            _inventTransId,
                    ItemId                                   _itemId,
                    CostAmount                               _costAmount,
                    RecId                                    _itemPriceRecId                 = 0,
                    InventItemCostGroupRollupList            _inventItemCostGroupRollupList  = null)
    {
        Map                             keyAdjustmentMap;
        CostAmount                      keyCostAmount = 0;
        InventItemCostGroupRollupList   keyCostGroupRollupList = null;
        str                             key = InventTransAdjustDataMap::key2String(_itemId, _itemPriceRecId);

        if (_inventTransId)
        {
            if (!inventTransAdjustDataMap.exists(_inventTransId))
            {
                keyAdjustmentMap       = new Map(Types::String, Types::Class);
                keyCostGroupRollupList = InventItemCostGroupRollupList::construct();
            }
            else
            {
                keyAdjustmentMap = inventTransAdjustDataMap.lookup(_inventTransId);
                if (keyAdjustmentMap.exists(key))
                {
                    keyCostGroupRollupList = keyAdjustmentMap.lookup(key);
                    keyCostAmount          = keyCostGroupRollupList.parmCostAmount();
                }
                else
                {
                    keyCostGroupRollupList = InventItemCostGroupRollupList::construct();
                }
            }

            if (_inventItemCostGroupRollupList)
            {
                // I have given a cost Group Rollup list and i need to add it to the list, that is already stored
                keyCostGroupRollupList.summarizeList(_inventItemCostGroupRollupList);
            }

            keyCostGroupRollupList.parmCostAmount(keyCostAmount + _costAmount);

            keyAdjustmentMap.insert(key, keyCostGroupRollupList);
            inventTransAdjustDataMap.insert(_inventTransId, keyAdjustmentMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of elements stored in the production data map.
    /// </summary>
    /// <returns>
    ///    The number of elements stored in the production data map.
    /// </returns>

    public int elements()
    {
        return inventTransAdjustDataMap.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the map enumerator for the production data map.
    /// </summary>
    /// <returns>
    ///    The map enumerator for the production data map.
    /// </returns>

    public MapEnumerator getEnumerator()
    {
        return inventTransAdjustDataMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>productionData</c> map.
    /// </summary>
    /// <remarks>
    ///    The map will be initialized using a record and a Map.
    /// </remarks>

    protected void init()
    {
        // Initialize the map for the production orders
        inventTransAdjustDataMap = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of this class.
    /// </summary>
    /// <remarks>
    ///    This method is protected to make sure that the construct method will be used.
    /// </remarks>

    protected void new()
    {
        // Initialize the recordSortedList
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static InventTransAdjustDataMap construct()
    {
        return new InventTransAdjustDataMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>key2String</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a string key value for an <c>itemID</c> and <c>inventItemPriceRecId</c>.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>itemid</c> that is part of the key.
    /// </param>
    /// <param name="_itemPriceRecId">
    ///    The <c>inventItemPriceRecId</c> that is part of the key.
    /// </param>
    /// <returns>
    ///    A combined key as a string value.
    /// </returns>

    public static str key2String(ItemId       _itemId,
                                 RecId        _itemPriceRecId)
    {
        return int642str(_itemPriceRecId) + '#' + _itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>string2key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Extracts the values from a key string.
    /// </summary>
    /// <param name="_string">
    ///    The string from which the values should be extracted.
    /// </param>
    /// <returns>
    ///    A container that holds the item ID and the <c>inventItemPriceRecId</c>.
    /// </returns>

    public static container string2key(str _string)
    {
        ItemId          itemId;
        RecId           itemPriceRecId;
        str             itemPriceRecIdStr;

        Integer         p1;

        p1                  = strFind(_string,'#',   1,strLen(_string));

        itemPriceRecIdStr   = subStr(_string,   1,p1   -1);
        itemId              = subStr(_string,p1+1,strLen(_string)-p1);

        itemPriceRecId = str2int64(itemPriceRecIdStr);

        return [itemId,itemPriceRecId];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>