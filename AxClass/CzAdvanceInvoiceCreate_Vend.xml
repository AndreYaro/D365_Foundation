<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvanceInvoiceCreate_Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CzAdvanceInvoiceCreate_Vend extends CzAdvanceInvoiceCreate
{
    DialogField updateField;
    PurchUpdate purchUpdate;
    PurchTotals purchTotals;

    #define.CurrentVersion(1)
    #LocalMacro.CurrentList
        percent,
        purchUpdate,
        postingProfile
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTable</Name>
				<Source><![CDATA[
    protected void calcTable(SalesPurchTable _purchTable)
    {
        PurchTable  localPurchTable = _purchTable;

        super(_purchTable);

        purchTotals = PurchTotals::newPurchTable(localPurchTable, purchUpdate);
        purchTotals.calc();

        table.InvoiceAmount = CurrencyExchangeHelper::amount(purchTotals.purchTotalAmount() * percent / 100, table.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        Dialog ret = super();

        updateField         = ret.addFieldValue(enumStr(PurchUpdate),        purchUpdate);

        ret.addGroup("@SYS2952");
        postingProfileField = ret.addFieldValue(extendedTypeStr(VendPostingProfile), postingProfile, "@SYS59471");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        purchUpdate = updateField.value();

        if (purchUpdate != PurchUpdate::All &&
            purchUpdate != PurchUpdate::ReceiveNow)
        {
            ret = checkFailed(strfmt("@SYS73815", purchUpdate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when a <c>SysLastValue</c> record cannot be found when it calls the
    /// <c>SysLastValue.GetLast</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        purchUpdate    = PurchUpdate::All;
        postingProfile = this.postingProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesPurchTable       _salesPurchTable,
                    CzAdvanceInvoiceTable _table,
                    CzAdvanceInvoiceLine  _line,
                    PurchUpdate           _purchUpdate = PurchUpdate::All)
    {
        super(_salesPurchTable, _table, _line);

        purchUpdate = _purchUpdate;

        postingProfile = this.postingProfile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile</Name>
				<Source><![CDATA[
    private PostingProfile postingProfile()
    {
        PostingProfile ret = VendParameters::find().PrepaymentPostingProfile;

        return ret ? ret : VendParameters::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordSortedListLine()
    {
        return purchTotals ? purchTotals.recordListPurchLine() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    protected SalesPurchLine salesPurchLine()
    {
        PurchLine purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineAmount</Name>
				<Source><![CDATA[
    protected Amount salesPurchLineAmount(SalesPurchLine _line)
    {
        return _line.salesPurchLineInterface().calcLineAmount(PurchQuantity::construct(DocumentStatus::Invoice).calcPurchQty(_line, purchUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    protected Tax tax()
    {
        return purchTotals ? purchTotals.tax() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSign</Name>
				<Source><![CDATA[
    protected int taxSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret     = true;

        switch (version)
        {
            case #CurrentVersion :
                [ version, #CurrentList ] = _packedClass;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS108257";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@GLS108362";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineQty</Name>
				<Source><![CDATA[
    protected UnitQty salesPurchLineQty(SalesPurchLine _line)
    {
        return PurchQuantity::construct(DocumentStatus::Invoice).calcPurchQty(_line, purchUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>