<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditableTemplateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailTransactionAuditableTemplateManager</c> class adds the custom Excel spreadsheet that allows editing transactions to "Document templates" list.
/// </summary>
[Wrappable(false)]
internal class RetailTransactionAuditableTemplateManager extends DocuTemplateRegistrationBase
{
    internal const str EditSelectedCashAndCarryTransactionExcelWorkbook = 'EditSelectedCashAndCarryTransactionExcelWorkbook';
    internal const str EditOnlineTransactionExcelWorkbook = 'EditOnlineTransactionExcelWorkbook';
    internal const str EditSelectedAsyncCustomerOrderExcelWorkbook = 'EditSelectedAsyncCustomerOrderExcelWorkbook';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the templates used to edit a single retail transaction.
    /// </summary>
    [Hookable(false)]
    public void registerTemplates()
    {
        this.addTemplate(
            OfficeAppApplicationType::Excel,
            resourceStr(RetailTransactionAuditableWorkbook),
            resourceStr(RetailTransactionAuditableWorkbook),
            "@RetailAudit:EditSingleCashAndCarryTransactionWorkbookDescription",
            "@RetailAudit:EditSingleCashAndCarryTransactionWorkbookLabel",
            NoYes::No,
            NoYes::No,
            NoYes::Yes);

        this.addTemplate(
            OfficeAppApplicationType::Excel,
            resourceStr(RetailTransactionAuditableWorkbookCustomerOrder),
            resourceStr(RetailTransactionAuditableWorkbookCustomerOrder),
            "@RetailAudit:EditSingleAsyncCustomerOrderWorkbookDescription",
            "@RetailAudit:EditSingleAsyncCustomerOrderWorkbookLabel",
            NoYes::No,
            NoYes::No,
            NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailTransactionAuditableWorkbookVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the "cash and carry" Excel workbook should be visible.
    /// </summary>
    /// <param name = "_transactionTable">The transaction record.</param>
    /// <returns>true if the cash and carry workbook should be visible; otherwise, false.</returns>
    public static boolean isRetailTransactionAuditableWorkbookVisible(RetailTransactionTable _transactionTable)
    {
        return _transactionTable.type == RetailTransactionType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailTransactionAuditableWorkbookCustomerOrderVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the "async customer order" Excel workbook should be visible.
    /// </summary>
    /// <param name = "_transactionTable">The transaction record.</param>
    /// <returns>true if the async customer order workbook should be visible; otherwise, false.</returns>
    public static boolean isRetailTransactionAuditableWorkbookCustomerOrderVisible(RetailTransactionTable _transactionTable)
    {
        return _transactionTable.type == RetailTransactionType::AsyncCustomerOrder
            || _transactionTable.type == RetailTransactionType::AsyncCustomerQuote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSimplifiedAuditableWorkbookVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether or not the "online" Excel workbook should be visible.
    /// </summary>
    /// <param name = "_transactionTable">The transaction record.</param>
    /// <returns>true if the online transaction workbook should be visible; otherwise, false.</returns>
    public static boolean isSimplifiedAuditableWorkbookVisible(RetailTransactionTable _transactionTable)
    {
        return _transactionTable.type == RetailTransactionType::PendingSalesOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>