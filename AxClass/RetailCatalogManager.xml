<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCatalogManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
/// <summary>
/// Manages the retail catalog details.
/// </summary>
public class RetailCatalogManager
{
    CatalogRefRecId catalogId;
    utcDateTime channelHierarchyDateTime;
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCatalogProductAttributeValues</Name>
				<Source><![CDATA[
    private void calculateCatalogProductAttributeValues(RetailTmpPubProductAttributeValue _tmpPubProductAttributeValue)
    {
        CatalogProduct catalogProduct;
        CatalogProductInstanceValue catalogProductInstanceValue;

        RetailCatalogInternalOrg retailCatalogInternalOrg;
        RetailCatalogProdInternalOrgInstanceVal retailCatalogProdInternalOrgInstanceVal;

        EcoResTextValueTranslation  ecoResTextValueTranslation;
        EcoResTextValue             ecoResTextValue;
        EcoResBooleanValue          ecoResBooleanValue;
        EcoResDateTimeValue         ecoResDateTimeValue;
        EcoResCurrencyValue         ecoResCurrencyValue;
        EcoResFloatValue            ecoResFloatValue;
        EcoResIntValue              ecoResIntValue;
        EcoResAttributeValue        ecoResAttributeValue;
        
        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        _tmpPubProductAttributeValue.skipDatabaseLog(true);
        _tmpPubProductAttributeValue.skipEvents(true);

        // Populate shared product attribute values
        #RetailInsertPubCatalogProductDblAttrib(TextValue, LanguageId, TextValue, Language, ecoResTextValueTranslation, TextValueTable, ecoResTextValueTranslation.Language)
        #RetailInsertPubCatalogProductAttribute(TextValue, TextValue, ecoResTextValue)
        #RetailInsertPubCatalogProductAttribute(IntValue, BooleanValue, ecoResBooleanValue)
        #RetailInsertPubCatalogProductAttribute(DateTimeValue, DateTimeValue, ecoResDateTimeValue)
        #RetailInsertPubCatalogProductDblAttrib(FloatValue, TextValue, CurrencyValue, CurrencyCode , ecoResCurrencyValue, RecId, '')
        #RetailInsertPubCatalogProductDblAttrib(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, RecId, '')
        #RetailInsertPubCatalogProductDblAttrib(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, RecId, '')

        // Populate internal org specific product attribute values
        #RetailInsertPubCatalogProdIntOrgDblAttri(TextValue, LanguageId, TextValue, Language, ecoResTextValueTranslation, TextValueTable, ecoResTextValueTranslation.Language)
        #RetailInsertPubCatalogProdIntOrgAttrib(TextValue, TextValue, ecoResTextValue)
        #RetailInsertPubCatalogProdIntOrgAttrib(IntValue, BooleanValue, ecoResBooleanValue)
        #RetailInsertPubCatalogProdIntOrgAttrib(DateTimeValue, DateTimeValue, ecoResDateTimeValue)
        #RetailInsertPubCatalogProdIntOrgDblAttri(FloatValue, TextValue, CurrencyValue, CurrencyCode , ecoResCurrencyValue, RecId, '')
        #RetailInsertPubCatalogProdIntOrgDblAttri(FloatValue, UnitOfMeasure, FloatValue, FloatUnitOfMeasure, ecoResFloatValue, RecId, '')
        #RetailInsertPubCatalogProdIntOrgDblAttri(IntValue, UnitOfMeasure, IntValue, IntUnitOfMeasure, ecoResIntValue, RecId, '')

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProductAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate product attribute values.
    /// </summary>
    /// <param name="_tmpPubProductAttributeValue">
    /// Temporary product attribute value.
    /// </param>
    /// <param name="_requiredCheckOnly">
    /// Whether to check required attributes only.
    /// </param>
    /// <remarks>
    /// The product attribute values come from multiple sources.
    /// </remarks>
    public void calculateProductAttributeValues(RetailTmpPubProductAttributeValue _tmpPubProductAttributeValue, boolean _requiredCheckOnly = false)
    {
        RetailTmpCatalogInternalOrgAttribute tmpCatalogInternalOrgAttribute;
        str tmpCatalogInternalOrgAttributePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpCatalogInternalOrgAttribute);

        RetailTmpCatalogProductMaster tmpCatalogProductMaster;

        RetailTmpInternalOrgLanguage tmpInternalOrgLanguage;
        str tmpInternalOrgLanguagePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpInternalOrgLanguage);

        RetailCatalogInternalOrgDefaultLanguage catalogInternalOrgDefaultLanguage;
        RetailCatalogInternalOrgLanguage catalogInternalOrgLanguage;
        RetailCatalogProductIncludeMasterView catalogProductIncludeMaster;
        RetailCatalogInternalOrg catalogInternalOrg;
        RetailProdAttribIntOrgMetadataCollapsed prodAttribIntOrgMetadataCollapsed;

        EcoResDistinctProductVariant distinctProductVariant;

        CatalogProduct catalogProduct;
        CatalogProduct checkCatalogProduct;

        LanguageId sysLanguage = SystemParameters::getSystemLanguageId();

        // Prepare products

        ttsBegin;

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpCatalogProductMaster.skipDatabaseLog(true);
        tmpCatalogProductMaster.skipEvents(true);

        // Clean up for this catalog
        delete_from tmpCatalogProductMaster where tmpCatalogProductMaster.Catalog == catalogId;

        // Insert the product masters that are not explictly added to the catalog but a variant for them is.
        insert_recordset tmpCatalogProductMaster(Catalog, Product)
            select catalogId from catalogProduct
                where catalogProduct.Catalog == catalogId
            join ProductMaster from distinctProductVariant
                group by ProductMaster
                where distinctProductVariant.RecId == catalogProduct.Product
            notexists join checkCatalogProduct
                where checkCatalogProduct.Catalog == catalogId
                    && checkCatalogProduct.Product == distinctProductVariant.ProductMaster;

        // Now RetailCatalogProductIncludeMaster view includes product masters outside of catalog which product variants inside catalog may inherit attribute values from.

        // Prepare attributes

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpCatalogInternalOrgAttribute.skipDatabaseLog(true);
        tmpCatalogInternalOrgAttribute.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpCatalogInternalOrgAttribute;

        // Attributes for all the internal orgs in the catalog
        insert_recordset tmpCatalogInternalOrgAttribute(Catalog, InternalOrganization, Attribute)
            select catalogInternalOrg
                where catalogInternalOrg.Catalog == catalogId
            join catalogId, InternalOrganization, Attribute from prodAttribIntOrgMetadataCollapsed
                where prodAttribIntOrgMetadataCollapsed.ValidFrom <= channelHierarchyDateTime
                    && prodAttribIntOrgMetadataCollapsed.ValidTo >= channelHierarchyDateTime
                    && prodAttribIntOrgMetadataCollapsed.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && (!_requiredCheckOnly || prodAttribIntOrgMetadataCollapsed.IsRequired == NoYes::Yes);

        // Prepare languages

        tmpInternalOrgLanguage.skipDatabaseLog(true);
        tmpInternalOrgLanguage.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpInternalOrgLanguage;

        if (_requiredCheckOnly)
        {
            insert_recordset tmpInternalOrgLanguage(InternalOrganization, LanguageId)
                select InternalOrganization, LanguageId from catalogInternalOrgDefaultLanguage
                    where catalogInternalOrgDefaultLanguage.ValidFrom <= channelHierarchyDateTime
                        && catalogInternalOrgDefaultLanguage.ValidTo >= channelHierarchyDateTime
                        && catalogInternalOrgDefaultLanguage.Catalog == catalogId
                        && catalogInternalOrgDefaultLanguage.LanguageId != sysLanguage;
        }
        else
        {
            insert_recordset tmpInternalOrgLanguage(InternalOrganization, LanguageId)
                select InternalOrganization, LanguageId from catalogInternalOrgLanguage
                    where catalogInternalOrgLanguage.ValidFrom <= channelHierarchyDateTime
                        && catalogInternalOrgLanguage.ValidTo >= channelHierarchyDateTime
                        && catalogInternalOrgLanguage.Catalog == catalogId;
        }

        // Calculate attributes values for required attributes
        this.calculateSelectedProductAttributeValues(_tmpPubProductAttributeValue, catalogProductIncludeMaster, tmpCatalogInternalOrgAttribute, tmpInternalOrgLanguage, _requiredCheckOnly);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSelectedProductAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate product attribute values.
    /// </summary>
    /// <param name="_tmpPubProductAttributeValue">
    /// temp product attribute value.
    /// </param>
    /// <param name="_catalogProductIncludeMaster">
    /// Catalog products including product masters.
    /// </param>
    /// <param name="_tmpCatalogInternalOrgAttribute">
    /// Catalog internal organization attributes.
    /// </param>
    /// <param name="_tmpInternalOrgLanguage">
    /// Internal organization languages.
    /// </param>
    /// <param name="_requiredCheckOnly">
    /// Whether to check required attributes only.
    /// </param>
    /// <param name="_usePublished">
    /// Whether to use published or draft attribute values.
    /// </param>
    /// <remarks>
    /// The product attribute values come from multiple sources.
    /// </remarks>
    public void calculateSelectedProductAttributeValues(
        RetailTmpPubProductAttributeValue _tmpPubProductAttributeValue,
        RetailCatalogProductMap _catalogProductIncludeMaster,
        RetailTmpCatalogInternalOrgAttribute _tmpCatalogInternalOrgAttribute,
        RetailTmpInternalOrgLanguage _tmpInternalOrgLanguage,
        boolean _requiredCheckOnly = false,
        boolean _usePublished = false)
    {
        RetailPubProductAttributeValue pubProductAttributeValue;

        RetailTmpLanguage tmpLanguage;
        str tmpLanguagePhysicalTableName = RetailUtilities::getPhysicalTableName(tmpLanguage);

        RetailTmpPubProductAttributeValue checkTmpPubProductAttributeValue;
        RetailTmpPubProductAttributeValue existingTmpPubProductAttributeValue;

        RetailCatalogProductCategoryAttribute catalogProductCategoryAttribute;
        RetailCatalogProdInternalOrgInstanceVal catalogProdInternalOrgInstanceVal;
        RetailCatProdIntOrgAttribValInherited catProdIntOrgAttribValInherited;
        RetailCatalogInternalOrg catalogInternalOrg;

        RetailIntOrgProdAttribValCollapsed intOrgprodAttribValCollapsed;
        RetailInternalOrgMaxAttribGroupAttrib internalOrgMaxAttribGroupAttrib;

        RetailStandardAttribute standardAttribute;
        RetailNonReferenceAttribute nonReferenceAttribute;

        EcoResAttributeDefaultValue attributeDefaultValue;
        EcoResAttributeDefaultValue attributeReference;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        EcoResAttributeValue attributeValue;
        EcoResReferenceValue referenceValue;
        EcoResProductInstanceValue productInstanceValue;
        EcoResTextValueTranslation textValueTranslation;

        EcoResBooleanValue booleanValue;
        EcoResCurrencyValue currencyValue;
        EcoResDateTimeValue dateTimeValue;
        EcoResFloatValue floatValue;
        EcoResIntValue intValue;
        EcoResTextValue textValue;

        CatalogProductInstanceValue catalogProductInstanceValue;
        utcdatetime stepStartTime, stepEndTime;

        RetailSharedParameters sharedParameters = RetailSharedParameters::find();

        boolean enableSnapshot = catalogId ? (Catalog::find(catalogId).EnableSnapshot == NoYes::Yes) : false;

        // Link physical table
        checkTmpPubProductAttributeValue.linkPhysicalTableInstance(_tmpPubProductAttributeValue);
        existingTmpPubProductAttributeValue.linkPhysicalTableInstance(_tmpPubProductAttributeValue);

        ttsBegin;

        // Ensure set based operations to not be downgraded to record-by-record operations
        tmpLanguage.skipDatabaseLog(true);
        tmpLanguage.skipEvents(true);

        // Remove this once the TempDB bug is fixed. The TempDB table instance is not cleared when it is recylced
        delete_from tmpLanguage;

        // Prepare languages
        insert_recordset tmpLanguage(LanguageId)
            select LanguageId from _tmpInternalOrgLanguage
                group by LanguageId;

        // Ensure set based operations to not be downgraded to record-by-record operations
        _tmpPubProductAttributeValue.skipDatabaseLog(true);
        _tmpPubProductAttributeValue.skipEvents(true);

        if (catalogId && !_usePublished)
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Catalog product internal org values
            insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, Value)
                select Product from _catalogProductIncludeMaster
                    where _catalogProductIncludeMaster.Catalog == catalogId
                join InternalOrganization from catalogProdInternalOrgInstanceVal
                    where catalogProdInternalOrgInstanceVal.CatalogProd == _catalogProductIncludeMaster.CatalogProduct
                join Attribute, Value from attributeValue
                    where attributeValue.InstanceValue == catalogProdInternalOrgInstanceVal.RecId
                join _tmpCatalogInternalOrgAttribute
                    where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                        && _tmpCatalogInternalOrgAttribute.InternalOrganization == catalogProdInternalOrgInstanceVal.InternalOrganization
                        && _tmpCatalogInternalOrgAttribute.Attribute == attributeValue.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog product internal org values');

            stepStartTime = DateTimeUtil::utcNow();

            // Catalog product internal org value of a referenced attribute
            insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, Value)
                select Product from _catalogProductIncludeMaster
                    where _catalogProductIncludeMaster.Catalog == catalogId
                join InternalOrganization from catalogProdInternalOrgInstanceVal
                    where catalogProdInternalOrgInstanceVal.CatalogProd == _catalogProductIncludeMaster.CatalogProduct
                join Attribute from attributeReference
                join referenceValue
                    where referenceValue.RecId == attributeReference.Value
                        && referenceValue.RefTableId == tableNum(EcoResAttribute)
                join Value from attributeValue
                    where attributeValue.InstanceValue == catalogProdInternalOrgInstanceVal.RecId
                        && attributeValue.Attribute == referenceValue.RefRecId
                join _tmpCatalogInternalOrgAttribute
                    where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                        && _tmpCatalogInternalOrgAttribute.InternalOrganization == catalogProdInternalOrgInstanceVal.InternalOrganization
                        && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
                notexists join checkTmpPubProductAttributeValue
                    where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                        && checkTmpPubProductAttributeValue.InternalOrganization == catalogProdInternalOrgInstanceVal.InternalOrganization
                        && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog product internal org value of a referenced attribute');

            stepStartTime = DateTimeUtil::utcNow();

            // Catalog product internal org values inherited from values specified for ancestor internal org in the same catalog.
            insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, Value)
                select Product from _catalogProductIncludeMaster
                    where _catalogProductIncludeMaster.Catalog == catalogId
                join InternalOrganization, Attribute, Value from catProdIntOrgAttribValInherited
                    where catProdIntOrgAttribValInherited.ValidFrom <= channelHierarchyDateTime
                        && catProdIntOrgAttribValInherited.ValidTo >= channelHierarchyDateTime
                        && catProdIntOrgAttribValInherited.CatalogProd == _catalogProductIncludeMaster.CatalogProduct
                join _tmpCatalogInternalOrgAttribute
                    where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                        && _tmpCatalogInternalOrgAttribute.InternalOrganization == catProdIntOrgAttribValInherited.InternalOrganization
                        && _tmpCatalogInternalOrgAttribute.Attribute == catProdIntOrgAttribValInherited.Attribute
                notexists join checkTmpPubProductAttributeValue
                    where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                        && checkTmpPubProductAttributeValue.InternalOrganization == catProdIntOrgAttribValInherited.InternalOrganization
                        && checkTmpPubProductAttributeValue.Attribute == catProdIntOrgAttribValInherited.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog product internal org values inherited from values specified for ancestor internal org in the same catalog.');

            stepStartTime = DateTimeUtil::utcNow();

            // Catalog product internal org values inherited from values specified for ancestor internal org in the same catalog, based on reference value;
            insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, InternalOrganization, Value)
                select Product from _catalogProductIncludeMaster
                    where _catalogProductIncludeMaster.Catalog == catalogId
                join Attribute from attributeReference
                join referenceValue
                    where referenceValue.RecId == attributeReference.Value
                        && referenceValue.RefTableId == tableNum(EcoResAttribute)
                join InternalOrganization, Value from catProdIntOrgAttribValInherited
                    where catProdIntOrgAttribValInherited.ValidFrom <= channelHierarchyDateTime
                        && catProdIntOrgAttribValInherited.ValidTo >= channelHierarchyDateTime
                        && catProdIntOrgAttribValInherited.CatalogProd == _catalogProductIncludeMaster.CatalogProduct
                        && catProdIntOrgAttribValInherited.Attribute == referenceValue.RefRecId
                join _tmpCatalogInternalOrgAttribute
                    where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                        && _tmpCatalogInternalOrgAttribute.InternalOrganization == catProdIntOrgAttribValInherited.InternalOrganization
                        && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
                notexists join checkTmpPubProductAttributeValue
                    where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                        && checkTmpPubProductAttributeValue.InternalOrganization == catProdIntOrgAttribValInherited.InternalOrganization
                        && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog product internal org values inherited from values specified for ancestor internal org in the same catalog, based on reference value.');

            stepStartTime = DateTimeUtil::utcNow();

            // Catalog product values
            insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, Value)
                select Product from _catalogProductIncludeMaster
                    where _catalogProductIncludeMaster.Catalog == catalogId
                join catalogProductInstanceValue
                    where catalogProductInstanceValue.CatalogProduct == _catalogProductIncludeMaster.CatalogProduct
                join Attribute, Value from attributeValue
                    where attributeValue.InstanceValue == catalogProductInstanceValue.RecId
                exists join _tmpCatalogInternalOrgAttribute
                    where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                        && _tmpCatalogInternalOrgAttribute.Attribute == attributeValue.Attribute
                notexists join checkTmpPubProductAttributeValue
                    where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                        && !checkTmpPubProductAttributeValue.InternalOrganization
                        && checkTmpPubProductAttributeValue.Attribute == attributeValue.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog product values');

            stepStartTime = DateTimeUtil::utcNow();

            // Catalog product value of a referenced attribute
            insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, Value)
                select Product from _catalogProductIncludeMaster
                    where _catalogProductIncludeMaster.Catalog == catalogId
                join catalogProductInstanceValue
                    where catalogProductInstanceValue.CatalogProduct == _catalogProductIncludeMaster.CatalogProduct
                join Attribute from attributeReference
                join referenceValue
                    where referenceValue.RecId == attributeReference.Value
                        && referenceValue.RefTableId == tableNum(EcoResAttribute)
                join Value from attributeValue
                    where attributeValue.InstanceValue == catalogProductInstanceValue.RecId
                        && attributeValue.Attribute == referenceValue.RefRecId
                exists join _tmpCatalogInternalOrgAttribute
                    where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                        && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
                notexists join checkTmpPubProductAttributeValue
                    where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                        && !checkTmpPubProductAttributeValue.InternalOrganization
                        && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog product value of a referenced attribute');

            stepStartTime = DateTimeUtil::utcNow();

            // Channel product value
            insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, Value)
                        select Product from _catalogProductIncludeMaster
                            where _catalogProductIncludeMaster.Catalog == catalogId
                        join InternalOrganization, Attribute, Value from intOrgProdAttribValCollapsed
                            where intOrgProdAttribValCollapsed.ValidFrom <= channelHierarchyDateTime
                                && intOrgProdAttribValCollapsed.ValidTo >= channelHierarchyDateTime
                                && intOrgProdAttribValCollapsed.Product == _catalogProductIncludeMaster.Product
                        join _tmpCatalogInternalOrgAttribute
                            where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                                && _tmpCatalogInternalOrgAttribute.InternalOrganization == intOrgProdAttribValCollapsed.InternalOrganization
                                && _tmpCatalogInternalOrgAttribute.Attribute == intOrgProdAttribValCollapsed.Attribute
                        notexists join checkTmpPubProductAttributeValue
                            where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                                && checkTmpPubProductAttributeValue.InternalOrganization == intOrgProdAttribValCollapsed.InternalOrganization
                                && checkTmpPubProductAttributeValue.Attribute == intOrgProdAttribValCollapsed.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Channel product value');

            stepStartTime = DateTimeUtil::utcNow();

            // Channel product value based on reference value.
            insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, InternalOrganization, Value)
                    select Product from _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                    join Attribute from attributeReference
                    join referenceValue
                        where referenceValue.RecId == attributeReference.Value
                            && referenceValue.RefTableId == tableNum(EcoResAttribute)
                    join InternalOrganization, Value from intOrgProdAttribValCollapsed
                        where intOrgProdAttribValCollapsed.ValidFrom <= channelHierarchyDateTime
                            && intOrgProdAttribValCollapsed.ValidTo >= channelHierarchyDateTime
                            && intOrgProdAttribValCollapsed.Product == _catalogProductIncludeMaster.Product
                            && intOrgProdAttribValCollapsed.Attribute == referenceValue.RefRecId
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.InternalOrganization == intOrgProdAttribValCollapsed.InternalOrganization
                            && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
                    notexists join checkTmpPubProductAttributeValue
                        where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                            && checkTmpPubProductAttributeValue.InternalOrganization == intOrgProdAttribValCollapsed.InternalOrganization
                            && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Channel product value based on reference value');
        }

        if (catalogId && _usePublished && enableSnapshot)
            {
                // Use catalog snapshot only

                stepStartTime = DateTimeUtil::utcNow();

                // Product, InternalOrganization, LanguageId
                insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Product, InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && pubProductAttributeValue.InternalOrganization
                    join _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                            && _catalogProductIncludeMaster.Product == pubProductAttributeValue.Product
                    join _tmpInternalOrgLanguage
                        where _tmpInternalOrgLanguage.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpInternalOrgLanguage.LanguageId == pubProductAttributeValue.LanguageId
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Product, InternalOrganization, LanguageId');

                stepStartTime = DateTimeUtil::utcNow();

                // Product, InternalOrganization, !LanguageId
                insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Product, InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && pubProductAttributeValue.InternalOrganization
                            && !pubProductAttributeValue.LanguageId
                    join _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                            && _catalogProductIncludeMaster.Product == pubProductAttributeValue.Product
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Product, InternalOrganization, !LanguageId');

                stepStartTime = DateTimeUtil::utcNow();

                // Product, !InternalOrganization, LanguageId
                insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Product, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && !pubProductAttributeValue.InternalOrganization
                    join _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                            && _catalogProductIncludeMaster.Product == pubProductAttributeValue.Product
                    join tmpLanguage
                        where tmpLanguage.LanguageId == pubProductAttributeValue.LanguageId
                    exists join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Product, !InternalOrganization, LanguageId');

                stepStartTime = DateTimeUtil::utcNow();

                // Product, !InternalOrganization, !LanguageId
                insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Product, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && !pubProductAttributeValue.InternalOrganization
                            && !pubProductAttributeValue.LanguageId
                    join _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                            && _catalogProductIncludeMaster.Product == pubProductAttributeValue.Product
                    exists join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
                eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime));


                stepStartTime = DateTimeUtil::utcNow();

                // !Product, InternalOrganization, LanguageId
                insert_recordSet _tmpPubProductAttributeValue(InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && !pubProductAttributeValue.Product
                            && pubProductAttributeValue.InternalOrganization
                    join _tmpInternalOrgLanguage
                        where _tmpInternalOrgLanguage.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpInternalOrgLanguage.LanguageId == pubProductAttributeValue.LanguageId
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;
                
                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), '!Product, InternalOrganization, LanguageId');

                stepStartTime = DateTimeUtil::utcNow();

                // !Product, InternalOrganization, !LanguageId
                insert_recordSet _tmpPubProductAttributeValue(InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select InternalOrganization, Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && !pubProductAttributeValue.Product
                            && pubProductAttributeValue.InternalOrganization
                            && !pubProductAttributeValue.LanguageId
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;
                
                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), '!Product, InternalOrganization, !LanguageId');

                stepStartTime = DateTimeUtil::utcNow();

                // !Product, !InternalOrganization, LanguageId
                insert_recordSet _tmpPubProductAttributeValue(Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && !pubProductAttributeValue.Product
                            && !pubProductAttributeValue.InternalOrganization
                    join tmpLanguage
                        where tmpLanguage.LanguageId == pubProductAttributeValue.LanguageId
                    exists join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), '!Product, !InternalOrganization, LanguageId');

                stepStartTime = DateTimeUtil::utcNow();

                // !Product, !InternalOrganization, !LanguageId
                insert_recordSet _tmpPubProductAttributeValue(Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Attribute, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && !pubProductAttributeValue.Product
                            && !pubProductAttributeValue.InternalOrganization
                            && !pubProductAttributeValue.LanguageId
                    exists join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                            && _tmpCatalogInternalOrgAttribute.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && _tmpCatalogInternalOrgAttribute.Attribute == pubProductAttributeValue.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), '!Product, !InternalOrganization, !LanguageId');

                ttsCommit;

                return;
            }

        if (_usePublished && !enableSnapshot)
        {
            if (catalogId)
            {
                stepStartTime = DateTimeUtil::utcNow();

                // Catalog published attribute values
                insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Product from _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    join InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == catalogId
                            && pubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                            && (pubProductAttributeValue.InternalOrganization == 0
                                || pubProductAttributeValue.InternalOrganization == _tmpCatalogInternalOrgAttribute.InternalOrganization)
                            && pubProductAttributeValue.Attribute == _tmpCatalogInternalOrgAttribute.Attribute;

                stepEndTime = DateTimeUtil::utcNow();
                eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Catalog published attribute values');
            }
                
                stepStartTime = DateTimeUtil::utcNow();

                // Channel published attribute values
                insert_recordSet _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure)
                    select Product from _catalogProductIncludeMaster
                        where _catalogProductIncludeMaster.Catalog == catalogId
                    join _tmpCatalogInternalOrgAttribute
                        where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    join InternalOrganization, Attribute, LanguageId, DateTimeValue, FloatValue, IntValue, TextValue, UnitOfMeasure from pubProductAttributeValue
                        where pubProductAttributeValue.Catalog == 0
                            && pubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                            && pubProductAttributeValue.InternalOrganization == _tmpCatalogInternalOrgAttribute.InternalOrganization
                            && pubProductAttributeValue.Attribute == _tmpCatalogInternalOrgAttribute.Attribute
                    notexists join checkTmpPubProductAttributeValue
                        where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                            && checkTmpPubProductAttributeValue.InternalOrganization == pubProductAttributeValue.InternalOrganization
                            && checkTmpPubProductAttributeValue.Attribute == pubProductAttributeValue.Attribute
                            && checkTmpPubProductAttributeValue.LanguageId == pubProductAttributeValue.LanguageId;

                stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Channel published attribute values');
            }

        stepStartTime = DateTimeUtil::utcNow();

        // Product values
        insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, Value)
            select Product from _catalogProductIncludeMaster
                where _catalogProductIncludeMaster.Catalog == catalogId
            join productInstanceValue
                where productInstanceValue.Product == _catalogProductIncludeMaster.Product
            join Attribute, Value from attributeValue
                where attributeValue.InstanceValue == productInstanceValue.RecId
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeValue.Attribute
            notexists join checkTmpPubProductAttributeValue
                where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeValue.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Product values');

        stepStartTime = DateTimeUtil::utcNow();

        // Product value of a referenced attribute
        insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, Value)
            select Product from _catalogProductIncludeMaster
                where _catalogProductIncludeMaster.Catalog == catalogId
            join productInstanceValue
                where productInstanceValue.Product == _catalogProductIncludeMaster.Product
            join Attribute from attributeReference
            join referenceValue
                where referenceValue.RecId == attributeReference.Value
                    && referenceValue.RefTableId == tableNum(EcoResAttribute)
            join Value from attributeValue
                where attributeValue.InstanceValue == productInstanceValue.RecId
                    && attributeValue.Attribute == referenceValue.RefRecId
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
            notexists join checkTmpPubProductAttributeValue
                where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Product value of a referenced attribute');

        // Standard property values
        while select StandardAttributeID, Attribute from standardAttribute
            exists join RecId from _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == standardAttribute.Attribute
        {
            this.calculateStandardProperty(_tmpPubProductAttributeValue, _catalogProductIncludeMaster, standardAttribute.StandardAttributeID, standardAttribute.Attribute, tmpLanguage, _requiredCheckOnly);
        }

        // Standard property values of a referenced attribute
        while select StandardAttributeID from standardAttribute
            join RecId from referenceValue
                where referenceValue.RefTableId == tableNum(EcoResAttribute)
                   && referenceValue.RefRecId == standardAttribute.Attribute
            join Attribute from attributeReference
                where attributeReference.Value == referenceValue.RecId
            exists join RecId from _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
        {
            this.calculateStandardProperty(_tmpPubProductAttributeValue, _catalogProductIncludeMaster, standardAttribute.StandardAttributeID, attributeReference.Attribute, tmpLanguage, _requiredCheckOnly);
        }

        stepStartTime = DateTimeUtil::utcNow();

        // Category attribute group default values
        insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, Value)
            select Product from _catalogProductIncludeMaster
                where _catalogProductIncludeMaster.Catalog == catalogId
            join Attribute from catalogProductCategoryAttribute
                where catalogProductCategoryAttribute.Catalog == catalogId
                    && catalogProductCategoryAttribute.Product == _catalogProductIncludeMaster.Product
            join DefaultValue from attributeGroupAttribute
                where attributeGroupAttribute.RecId == catalogProductCategoryAttribute.MaxAttributeGroupAttribute
                    && attributeGroupAttribute.DefaultValue
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == catalogProductCategoryAttribute.Attribute
            notexists join checkTmpPubProductAttributeValue
                where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == catalogProductCategoryAttribute.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Category attribute group default values');

        stepStartTime = DateTimeUtil::utcNow();

        // Category attribute group default value of a referenced attribute
        insert_recordSet _tmpPubProductAttributeValue(Product, Attribute, Value)
            select Product from _catalogProductIncludeMaster
                where _catalogProductIncludeMaster.Catalog == catalogId
            join Attribute from attributeReference
            join referenceValue
                where referenceValue.RecId == attributeReference.Value
                    && referenceValue.RefTableId == tableNum(EcoResAttribute)
            join catalogProductCategoryAttribute
                where catalogProductCategoryAttribute.Catalog == catalogId
                    && catalogProductCategoryAttribute.Product == _catalogProductIncludeMaster.Product
                    && catalogProductCategoryAttribute.Attribute == referenceValue.RefRecId
            join DefaultValue from attributeGroupAttribute
                where attributeGroupAttribute.RecId == catalogProductCategoryAttribute.MaxAttributeGroupAttribute
                    && attributeGroupAttribute.DefaultValue
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
            notexists join checkTmpPubProductAttributeValue
                where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Category attribute group default value of a referenced attribute');

        stepStartTime = DateTimeUtil::utcNow();

        // Channel attribute group default values
        insert_recordSet _tmpPubProductAttributeValue(InternalOrganization, Attribute, Value)
            select InternalOrganization from catalogInternalOrg
                where catalogInternalOrg.Catalog == catalogId
            join Attribute from internalOrgMaxAttribGroupAttrib
                where internalOrgMaxAttribGroupAttrib.ValidFrom <= channelHierarchyDateTime
                    && internalOrgMaxAttribGroupAttrib.ValidTo >= channelHierarchyDateTime
                    && internalOrgMaxAttribGroupAttrib.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && internalOrgMaxAttribGroupAttrib.Modifier == RetailChannelAttributeModifier::Product
            join DefaultValue from attributeGroupAttribute
                where attributeGroupAttribute.RecId == internalOrgMaxAttribGroupAttrib.MaxAttributeGroupAttribute
                    && attributeGroupAttribute.DefaultValue
            join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogInternalOrg.Catalog
                    && _tmpCatalogInternalOrgAttribute.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && _tmpCatalogInternalOrgAttribute.Attribute == internalOrgMaxAttribGroupAttrib.Attribute
            notexists join checkTmpPubProductAttributeValue
                where !checkTmpPubProductAttributeValue.Product
                    && checkTmpPubProductAttributeValue.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == internalOrgMaxAttribGroupAttrib.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Channel attribute group default values');

        stepStartTime = DateTimeUtil::utcNow();

        // Channel attribute group default value of a referenced attribute
        insert_recordSet _tmpPubProductAttributeValue(InternalOrganization, Attribute, Value)
            select InternalOrganization from catalogInternalOrg
                where catalogInternalOrg.Catalog == catalogId
            join Attribute from attributeReference
            join referenceValue
                where referenceValue.RecId == attributeReference.Value
                    && referenceValue.RefTableId == tableNum(EcoResAttribute)
            join internalOrgMaxAttribGroupAttrib
                where internalOrgMaxAttribGroupAttrib.ValidFrom <= channelHierarchyDateTime
                    && internalOrgMaxAttribGroupAttrib.ValidTo >= channelHierarchyDateTime
                    && internalOrgMaxAttribGroupAttrib.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && internalOrgMaxAttribGroupAttrib.Modifier == RetailChannelAttributeModifier::Product
                    && internalOrgMaxAttribGroupAttrib.Attribute == referenceValue.RefRecId
            join DefaultValue from attributeGroupAttribute
                where attributeGroupAttribute.RecId == internalOrgMaxAttribGroupAttrib.MaxAttributeGroupAttribute
                    && attributeGroupAttribute.DefaultValue
            join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogInternalOrg.Catalog
                    && _tmpCatalogInternalOrgAttribute.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
            notexists join checkTmpPubProductAttributeValue
                where !checkTmpPubProductAttributeValue.Product
                    && checkTmpPubProductAttributeValue.InternalOrganization == catalogInternalOrg.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Channel attribute group default value of a referenced attribute');

        stepStartTime = DateTimeUtil::utcNow();

        // Default attribute group default values
        insert_recordSet _tmpPubProductAttributeValue(Attribute, Value)
            select Attribute, DefaultValue from attributeGroupAttribute
                where attributeGroupAttribute.AttributeGroup == sharedParameters.ProductDefaultAttributeGroup
                    && attributeGroupAttribute.DefaultValue
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeGroupAttribute.Attribute
            notexists join checkTmpPubProductAttributeValue
                where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeGroupAttribute.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Default attribute group default values');

        stepStartTime = DateTimeUtil::utcNow();

        // Default attribute group default value of a referenced attribute
        insert_recordSet _tmpPubProductAttributeValue(Attribute, Value)
            select Attribute from attributeReference
            join referenceValue
                where referenceValue.RecId == attributeReference.Value
                    && referenceValue.RefTableId == tableNum(EcoResAttribute)
            join DefaultValue from attributeGroupAttribute
                where attributeGroupAttribute.AttributeGroup == sharedParameters.ProductDefaultAttributeGroup
                    && attributeGroupAttribute.Attribute == referenceValue.RefRecId
                    && attributeGroupAttribute.DefaultValue
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
            notexists join checkTmpPubProductAttributeValue
                where checkTmpPubProductAttributeValue.Product == _catalogProductIncludeMaster.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Default attribute group default value of a referenced attribute');

        stepStartTime = DateTimeUtil::utcNow();

        // Attribute default values
        insert_recordSet _tmpPubProductAttributeValue(Attribute, Value)
            select Attribute, Value from attributeDefaultValue
            join nonReferenceAttribute
                where nonReferenceAttribute.Attribute == attributeDefaultValue.Attribute
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeDefaultValue.Attribute
            notexists join checkTmpPubProductAttributeValue
                where !checkTmpPubProductAttributeValue.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeDefaultValue.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Attribute default values');

        stepStartTime = DateTimeUtil::utcNow();

        // Attribute default value of a referenced attribute
        insert_recordSet _tmpPubProductAttributeValue(Attribute, Value)
            select Attribute from attributeReference
            join referenceValue
                where referenceValue.RecId == attributeReference.Value
                    && referenceValue.RefTableId == tableNum(EcoResAttribute)
            join Value from attributeDefaultValue
                where attributeDefaultValue.Attribute == referenceValue.RefRecId
            exists join _tmpCatalogInternalOrgAttribute
                where _tmpCatalogInternalOrgAttribute.Catalog == catalogId
                    && _tmpCatalogInternalOrgAttribute.Attribute == attributeReference.Attribute
            notexists join checkTmpPubProductAttributeValue
                where !checkTmpPubProductAttributeValue.Product
                    && !checkTmpPubProductAttributeValue.InternalOrganization
                    && checkTmpPubProductAttributeValue.Attribute == attributeReference.Attribute;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Attribute default value of a referenced attribute');

        // Actual values
        if (!_requiredCheckOnly)
        {
            stepStartTime = DateTimeUtil::utcNow();

            update_recordSet _tmpPubProductAttributeValue
                setting IntValue = booleanValue.BooleanValue
                join booleanValue
                    where booleanValue.RecId == _tmpPubProductAttributeValue.Value;

            update_recordSet _tmpPubProductAttributeValue
                setting FloatValue = currencyValue.CurrencyValue, textValue = currencyValue.CurrencyCode
                join currencyValue
                    where currencyValue.RecId == _tmpPubProductAttributeValue.Value;

            update_recordSet _tmpPubProductAttributeValue
                setting DateTimeValue = dateTimeValue.DateTimeValue
                join dateTimeValue
                    where dateTimeValue.RecId == _tmpPubProductAttributeValue.Value;

            update_recordSet _tmpPubProductAttributeValue
                setting FloatValue = floatValue.FloatValue, UnitOfMeasure = floatValue.FloatUnitOfMeasure
                join floatValue
                    where floatValue.RecId == _tmpPubProductAttributeValue.Value;

            update_recordSet _tmpPubProductAttributeValue
                setting IntValue = intValue.IntValue, UnitOfMeasure = intValue.IntUnitOfMeasure
                join intValue
                    where intValue.RecId == _tmpPubProductAttributeValue.Value;

            update_recordSet _tmpPubProductAttributeValue
                setting TextValue = textValue.TextValue
                join textValue
                    where textValue.RecId == _tmpPubProductAttributeValue.Value;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Actual values');
        }

        // Translations
        if (_requiredCheckOnly)
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Insert languages for internal org specific attribute values
            insert_recordset _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, Value, LanguageId)
                select Product, InternalOrganization, Attribute, Value from existingTmpPubProductAttributeValue
                join LanguageId from _tmpInternalOrgLanguage
                    where _tmpInternalOrgLanguage.InternalOrganization == existingTmpPubProductAttributeValue.InternalOrganization
                join textValueTranslation
                    where textValueTranslation.TextValueTable == existingTmpPubProductAttributeValue.Value
                        && textValueTranslation.Language == _tmpInternalOrgLanguage.LanguageId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert languages for internal org specific attribute values');

            stepStartTime = DateTimeUtil::utcNow();

            // Insert languages for non internal org specific attribute values
            insert_recordset _tmpPubProductAttributeValue(Product, Attribute, Value, LanguageId)
                select Product, Attribute, Value from existingTmpPubProductAttributeValue
                    where !existingTmpPubProductAttributeValue.InternalOrganization
                join LanguageId from tmpLanguage
                join textValueTranslation
                    where textValueTranslation.TextValueTable == existingTmpPubProductAttributeValue.Value
                        && textValueTranslation.Language == tmpLanguage.LanguageId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert languages for non internal org specific attribute values');
        }
        else
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Insert translations for internal org specific attribute values
            insert_recordset _tmpPubProductAttributeValue(Product, InternalOrganization, Attribute, Value, LanguageId, TextValue)
                select Product, InternalOrganization, Attribute, Value from existingTmpPubProductAttributeValue
                    where existingTmpPubProductAttributeValue.InternalOrganization
                join LanguageId from _tmpInternalOrgLanguage
                    where _tmpInternalOrgLanguage.InternalOrganization == existingTmpPubProductAttributeValue.InternalOrganization
                join TextValue from textValueTranslation
                    where textValueTranslation.TextValueTable == existingTmpPubProductAttributeValue.Value
                        && textValueTranslation.Language == _tmpInternalOrgLanguage.LanguageId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert translations for internal org specific attribute values');

            stepStartTime = DateTimeUtil::utcNow();

            // Insert translations for non internal org specific attribute values
            insert_recordset _tmpPubProductAttributeValue(Product, Attribute, Value, LanguageId, TextValue)
                select Product, Attribute, Value from existingTmpPubProductAttributeValue
                    where !existingTmpPubProductAttributeValue.InternalOrganization
                join LanguageId from tmpLanguage
                join TextValue from textValueTranslation
                    where textValueTranslation.TextValueTable == existingTmpPubProductAttributeValue.Value
                        && textValueTranslation.Language == tmpLanguage.LanguageId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerCalSelectedProductAttributeValuesTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert translations for non internal org specific attribute values');
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStandardProperty</Name>
				<Source><![CDATA[
    private void calculateStandardProperty(RetailTmpPubProductAttributeValue _tmpPubProductAttributeValue, RetailCatalogProductMap _catalogProductIncludeMaster, RetailStandardAttributeID _standardAttributeID, RefRecId _attributeRecId, RetailTmpLanguage _tmpLanguage, boolean _requiredCheckOnly = false)
    {
        RetailTmpPubProductAttributeValue checkTmpPubProductAttributeValue;

        EcoResProduct ecoResProduct;
        EcoResProductTranslation ecoResProductTranslation;
        EcoResProductVariantColor ecoResProductVariantColor;
        EcoResProductVariantSize ecoResProductVariantSize;
        EcoResProductVariantStyle ecoResProductVariantStyle;
        EcoResProductVariantConfiguration ecoResProductVariantConfig;
        EcoResColor ecoResColor;
        EcoResSize ecoResSize;
        EcoResStyle ecoResStyle;
        EcoResConfiguration ecoResConfig;

        LanguageId sysLanguage = SystemParameters::getSystemLanguageId();

        // Ensure set based operations to not be downgraded to record-by-record operations
        _tmpPubProductAttributeValue.skipDatabaseLog(true);
        _tmpPubProductAttributeValue.skipEvents(true);

        // Link physical table
        checkTmpPubProductAttributeValue.linkPhysicalTableInstance(_tmpPubProductAttributeValue);

        switch (_standardAttributeID)
        {
            case RetailStandardAttributeID::ProductNumber:
                #RetailInsertStandardProperty(DisplayProductNumber)
                break;

            case RetailStandardAttributeID::SearchName:
                #RetailInsertStandardProperty(SearchName)
                break;

            case RetailStandardAttributeID::ProductName:
                #RetailInsertStandardPropertyTranslation(Name)
                break;

            case RetailStandardAttributeID::Description:
                #RetailInsertStandardPropertyTranslation(Description)
                break;

            case RetailStandardAttributeID::Color:
                #RetailInsertStandardPropertyVariantDim(ecoResProductVariantColor, ecoResColor, Color)
                break;

            case RetailStandardAttributeID::Style:
                #RetailInsertStandardPropertyVariantDim(ecoResProductVariantStyle, ecoResStyle, Style)
                break;

            case RetailStandardAttributeID::Size:
                #RetailInsertStandardPropertyVariantDim(ecoResProductVariantSize, ecoResSize, Size)
                break;

            case RetailStandardAttributeID::Config:
                #RetailInsertStandardPropertyVariantDim(ecoResProductVariantConfig, ecoResConfig, Configuration)
                break;

            case RetailStandardAttributeID::None:
                break;

            default:
                this.calculateStandardPropertyDelegate(_tmpPubProductAttributeValue, _catalogProductIncludeMaster, _standardAttributeID, _attributeRecId, _tmpLanguage, _requiredCheckOnly);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStandardPropertyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate to calculate standard property value.
    /// </summary>
    /// <param name = "_tmpPubProductAttributeValue">Temp product attribute value.</param>
    /// <param name = "_catalogProductIncludeMaster">Catalog products including product masters.</param>
    /// <param name = "_standardAttributeID">Identifier of the standard attribute.</param>
    /// <param name = "_attributeRecId">The attribute's record id.</param>
    /// <param name = "_tmpLanguage">Internal organization language.</param>
    /// <param name = "_requiredCheckOnly">Whether to check required attributes only.</param>
    delegate void calculateStandardPropertyDelegate(RetailTmpPubProductAttributeValue _tmpPubProductAttributeValue, 
        RetailCatalogProductMap _catalogProductIncludeMaster, 
        RetailStandardAttributeID _standardAttributeID, 
        RefRecId _attributeRecId, 
        RetailTmpLanguage _tmpLanguage, 
        boolean _requiredCheckOnly)
    {
        // Subscriber will provide proper implementation to this method
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSnapshot</Name>
				<Source><![CDATA[
    private boolean enableSnapshot()
    {
        Catalog catalog = catalog::find(catalogId);

        return catalog.EnableSnapshot;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        channelHierarchyDateTime = DateTimeUtil::utcNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCatalogId</Name>
				<Source><![CDATA[
    private CatalogRefRecId parmCatalogId(CatalogRefRecId _catalogId = catalogId)
    {
        catalogId = _catalogId;

        return catalogId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChannelHierarchyDateTime</Name>
				<Source><![CDATA[
    private utcDateTime parmChannelHierarchyDateTime(utcDateTime _channelHierarchyDateTime = channelHierarchyDateTime)
    {
        channelHierarchyDateTime = _channelHierarchyDateTime;
        return channelHierarchyDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publish</Name>
				<Source><![CDATA[
    private void publish(RetailCatalogPublishingType publishType = RetailCatalogPublishingType::Incremental)
    {
        boolean isMultipleCatalogFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ChannelMultipleCatalogsFeature::instance());
        Catalog catalogLocal = catalog::find(catalogId);

        ttsBegin;

        if (publishType == RetailCatalogPublishingType::Full)
        {
            this.retract();
        }

        this.publishCatalog();
        this.publishCatalogTranslation();
        this.publishCatalogInternalOrg();
        this.publishCatalogProduct();
        // When Catalog is B2C, publish catalog product categories from Channel Navigation hierarchy,
        // When Catalog is B2B, publish catalog product categories from Catalog Navigation hierarchy,
        if (catalogLocal.CatalogTarget == RetailCatalogTarget::B2C)
        {
            this.publishB2CCatalogProductCategory();
        }
        else
        {
            this.publishB2BCatalogProductCategory();
        }
        this.publishCatalogProductRelation();
        this.publishCatalogProductAttributeValue();
        this.publishCatalogPriceGroup();
        this.updateListingCount(publishType);

        if (isMultipleCatalogFeatureEnabled)
        {
            this.publishCatalogEcoResCategory();
            this.publishCatalogEcoResCategoryTranslation();
            this.publishCatalogCategoryAttributes();
            this.publishCatalogProductAttributeMetadata();
        }

        this.setCatalogProductStatus();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalog</Name>
				<Source><![CDATA[
    private void publishCatalog()
    {
        Catalog catalog;
        RetailPubCatalog retailPubCatalog;
        RetailPubCatalog checkRetailPubCatalog;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalog.skipDatabaseLog(true);
        retailPubCatalog.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from retailPubCatalog
            where retailPubCatalog.Origin == catalogId
            notexists join catalog
                where catalog.RecId == retailPubCatalog.Origin;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), "Delete published records if the origins are deleted");

        // For N-1 backward compatibility. Saving truncated data is expected if the size exceeds 8 chars.
        ModifiedBy legacyModifiedByVal = subStr(curUserId(), 1, 8); 

        stepStartTime = DateTimeUtil::utcNow();

        // Update published records when the orgins are changed.
        update_recordset retailPubCatalog
            setting
                OriginRecVersion = catalog.RecVersion,
                Owner = catalog.Owner,
                CategoryHierarchy = catalog.CategoryHierarchy,
                EnableSnapshot = catalog.EnableSnapshot,
                PublishedDateTime = catalog.PublishedDateTime,
                PublishedValidFrom = catalog.PublishedValidFrom,
                PublishedValidTo = catalog.PublishedValidTo,
                State = catalog.State,
                ValidFrom = catalog.ValidFrom,
                ValidTo = catalog.ValidTo,
                ValidFromDateTime = catalog.ValidFromDateTime,
                LegacyModifiedBy = legacyModifiedByVal
            join catalog
                where retailPubCatalog.Origin == catalogId
                    && catalog.RecId == retailPubCatalog.Origin
                    && retailPubCatalog.OriginRecVersion != catalog.RecVersion;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records when the orgins are changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset retailPubCatalog(
            Origin,
            OriginRecVersion,
            EnableSnapshot,
            Owner,
            CategoryHierarchy,
            PublishedDateTime,
            PublishedValidFrom,
            PublishedValidTo,
            State,
            ValidFrom,
            ValidTo,
            ValidFromDateTime,
            LegacyModifiedBy
        )
        select
            RecId,
            RecVersion,
            EnableSnapshot,
            Owner,
            CategoryHierarchy,
            PublishedDateTime,
            PublishedValidFrom,
            PublishedValidTo,
            State,
            ValidFrom,
            ValidTo,
            ValidFromDateTime,
            legacyModifiedByVal
            from catalog
                where catalog.RecId == catalogId
            notExists join checkRetailPubCatalog
                where checkRetailPubCatalog.Origin == catalog.RecId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogEcoResCategory</Name>
				<Source><![CDATA[
    private void publishCatalogEcoResCategory()
    {
        // publish <c>RetailCatalogCategoryAttributes<c>
        RetailPubCatalogEcoResCategory::publishCatalog(catalogId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogEcoResCategoryTranslation</Name>
				<Source><![CDATA[
    private void publishCatalogEcoResCategoryTranslation()
    {
        // publish <c>RetailCatalogCategoryAttributes<c>
        RetailPubCatalogEcoResCategoryTranslation::publishCatalog(catalogId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogCategoryAttributes</Name>
				<Source><![CDATA[
    private void publishCatalogCategoryAttributes()
    {
        // publish <c>RetailCatalogCategoryAttributes<c>
        RetailPubRetailCatalogCategoryAttribute::publishCatalogCategoryAttributes(catalogId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogProductAttributeMetadata</Name>
				<Source><![CDATA[
    private void publishCatalogProductAttributeMetadata()
    {
        // publish <c>RetailCatalogCategoryAttributes<c>
        RetailPubProductAttributeCatalogMetadata::publishCatalogAttributeMetadata(catalogId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogInternalOrg</Name>
				<Source><![CDATA[
    private void publishCatalogInternalOrg()
    {
        RetailCatalogInternalOrg retailCatalogInternalOrg;
        RetailPubCatalogInternalOrg retailPubCatalogInternalOrg;
        RetailPubCatalogInternalOrg checkRetailPubCatalogInternalOrg;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogInternalOrg.skipDatabaseLog(true);
        retailPubCatalogInternalOrg.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from retailPubCatalogInternalOrg
            where retailPubCatalogInternalOrg.Catalog == catalogId
            notexists join retailCatalogInternalOrg
                where retailCatalogInternalOrg.RecId == retailPubCatalogInternalOrg.Origin;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogInternalOrgTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted.');

        stepStartTime = DateTimeUtil::utcNow();

        // Update published records if the orgins are changed.
        update_recordset retailPubCatalogInternalOrg
            setting
                OriginRecVersion = retailCatalogInternalOrg.RecVersion,
                InternalOrganization = retailCatalogInternalOrg.InternalOrganization
            join retailCatalogInternalOrg
                where retailPubCatalogInternalOrg.Catalog == catalogId
                    && retailCatalogInternalOrg.RecId == retailPubCatalogInternalOrg.Origin
                    && retailCatalogInternalOrg.RecVersion != retailPubCatalogInternalOrg.OriginRecVersion;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogInternalOrgTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed.');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset retailPubCatalogInternalOrg(
            Origin,
            OriginRecVersion,
            Catalog,
            InternalOrganization
        )
        select
            RecId,
            RecVersion,
            Catalog,
            InternalOrganization
            from retailCatalogInternalOrg
                where retailCatalogInternalOrg.Catalog == catalogId
            notExists join checkRetailPubCatalogInternalOrg
                where checkRetailPubCatalogInternalOrg.Origin == retailCatalogInternalOrg.RecId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogInternalOrgTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist.');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogPriceGroup</Name>
				<Source><![CDATA[
    private void publishCatalogPriceGroup()
    {
        RetailCatalogPriceGroup catalogPriceGroup;
        RetailPubRetailCatalogPriceGroup retailPubCatalogPriceGroup;
        RetailPubRetailCatalogPriceGroup checkRetailPubCatalogPriceGroup;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogPriceGroup.skipDatabaseLog(true);
        retailPubCatalogPriceGroup.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from retailPubCatalogPriceGroup
            where retailPubCatalogPriceGroup.Catalog == catalogId
            notexists join catalogPriceGroup
                where catalogPriceGroup.RecId == retailPubCatalogPriceGroup.Origin;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogPriceGroupTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

        stepStartTime = DateTimeUtil::utcNow();

        // Update published records if the orgins are changed.
        update_recordset retailPubCatalogPriceGroup
            setting
                OriginRecVersion = catalogPriceGroup.RecVersion,
                PriceDiscGroup = catalogPriceGroup.PriceDiscGroup
            join catalogPriceGroup
                where retailPubCatalogPriceGroup.Catalog == catalogId
                    && catalogPriceGroup.RecId == retailPubCatalogPriceGroup.Origin
                    && catalogPriceGroup.RecVersion != retailPubCatalogPriceGroup.OriginRecVersion;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogPriceGroupTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset retailPubCatalogPriceGroup(
            Origin,
            OriginRecVersion,
            Catalog,
            PriceDiscGroup
        )
        select
            RecId,
            RecVersion,
            Catalog,
            PriceDiscGroup
            from catalogPriceGroup
                where catalogPriceGroup.Catalog == catalogId
            notExists join checkRetailPubCatalogPriceGroup
                where checkRetailPubCatalogPriceGroup.Origin == catalogPriceGroup.RecId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogPriceGroupTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogProduct</Name>
				<Source><![CDATA[
    private void publishCatalogProduct()
    {
        CatalogProduct catalogProduct;
        RetailPubCatalogProduct retailPubCatalogProduct;
        RetailPubCatalogProduct checkRetailPubCatalogProduct;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProduct.skipDatabaseLog(true);
        retailPubCatalogProduct.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from retailPubCatalogProduct
            where retailPubCatalogProduct.Catalog == catalogId
            notexists join catalogProduct
                where catalogProduct.RecId == retailPubCatalogProduct.Origin;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogProductTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

        stepStartTime = DateTimeUtil::utcNow();

        // Update published records if the orgins are changed.
        update_recordset retailPubCatalogProduct
            setting
                OriginRecVersion = catalogProduct.RecVersion,
                Product = catalogProduct.Product,
                UseHierarchy = catalogProduct.UseHierarchy
            join catalogProduct
                where retailPubCatalogProduct.Catalog == catalogId
                    && catalogProduct.RecId == retailPubCatalogProduct.Origin
                    && catalogProduct.RecVersion != retailPubCatalogProduct.OriginRecVersion;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogProductTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset retailPubCatalogProduct(
            Origin,
            OriginRecVersion,
            Catalog,
            Product,
            UseHierarchy
        )
        select
            RecId,
            RecVersion,
            Catalog,
            Product,
            UseHierarchy
            from catalogProduct
                where catalogProduct.Catalog == catalogId
            notExists join checkRetailPubCatalogProduct
                where checkRetailPubCatalogProduct.Origin == catalogProduct.RecId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogProductTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogProductAttributeValue</Name>
				<Source><![CDATA[
    private void publishCatalogProductAttributeValue()
    {
        RetailTmpPubProductAttributeValue retailTmpPubProductAttributeValue;
        str retailTmpPubProductAttributeValuePhysicalTableName = RetailUtilities::getPhysicalTableName(retailTmpPubProductAttributeValue);

        RetailPubProductAttributeValue retailPubProductAttributeValue;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailTmpPubProductAttributeValue.skipDatabaseLog(true);
        retailTmpPubProductAttributeValue.skipEvents(true);

        // delete the records if they do not exist in temporary table.
        delete_from retailTmpPubProductAttributeValue;

        // Calculate product attribute values
        if (this.enableSnapshot())
        {
            this.calculateProductAttributeValues(retailTmpPubProductAttributeValue);
        }
        else
        {
            this.calculateCatalogProductAttributeValues(retailTmpPubProductAttributeValue);
        }

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubProductAttributeValue.skipDatabaseLog(true);
        retailPubProductAttributeValue.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // delete the records if they do not exist in temporary table.
        delete_from retailPubProductAttributeValue
            where retailPubProductAttributeValue.Catalog == catalogId
            notexists join retailTmpPubProductAttributeValue
                where retailTmpPubProductAttributeValue.Product == retailPubProductAttributeValue.Product
                    && retailTmpPubProductAttributeValue.Attribute == retailPubProductAttributeValue.Attribute
                    && retailTmpPubProductAttributeValue.InternalOrganization == retailPubProductAttributeValue.InternalOrganization
                    && retailTmpPubProductAttributeValue.LanguageId == retailPubProductAttributeValue.LanguageId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogProdAttributeValTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'delete the records if they do not exist in temporary table');

        stepStartTime = DateTimeUtil::utcNow();

        // Update RetailPubProductAttributeValue if anything has changed.
        update_recordset retailPubProductAttributeValue
        setting
            DateTimeValue = retailTmpPubProductAttributeValue.DateTimeValue,
            FloatValue = retailTmpPubProductAttributeValue.FloatValue,
            IntValue = retailTmpPubProductAttributeValue.IntValue,
            TextValue = retailTmpPubProductAttributeValue.TextValue,
            UnitOfMeasure = retailTmpPubProductAttributeValue.UnitOfMeasure
            where retailPubProductAttributeValue.Catalog == catalogId
        join retailTmpPubProductAttributeValue
            where retailTmpPubProductAttributeValue.Product == retailPubProductAttributeValue.Product
                && retailTmpPubProductAttributeValue.Attribute == retailPubProductAttributeValue.Attribute
                && retailTmpPubProductAttributeValue.InternalOrganization == retailPubProductAttributeValue.InternalOrganization
                && retailTmpPubProductAttributeValue.LanguageId == retailPubProductAttributeValue.LanguageId
                && (retailTmpPubProductAttributeValue.DateTimeValue != retailPubProductAttributeValue.DateTimeValue
                    || retailTmpPubProductAttributeValue.FloatValue != retailPubProductAttributeValue.FloatValue
                    || retailTmpPubProductAttributeValue.IntValue != retailPubProductAttributeValue.IntValue
                    || retailTmpPubProductAttributeValue.TextValue != retailPubProductAttributeValue.TextValue
                    || retailTmpPubProductAttributeValue.UnitOfMeasure != retailPubProductAttributeValue.UnitOfMeasure);

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogProdAttributeValTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update RetailPubProductAttributeValue if anything has changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert the records from RetailTmpPubProductAttributeValue to RetailPubProductAttributeValue table.
        insert_recordset retailPubProductAttributeValue(
            Attribute, Catalog, DateTimeValue, FloatValue, InternalOrganization, IntValue, LanguageId, Product, TextValue, UnitOfMeasure)
            select
                Attribute, catalogId, DateTimeValue, FloatValue, InternalOrganization, IntValue, LanguageId, Product, TextValue, UnitOfMeasure
                from retailTmpPubProductAttributeValue
            notexists join retailPubProductAttributeValue
                where retailPubProductAttributeValue.Product == retailTmpPubProductAttributeValue.Product
                    && retailPubProductAttributeValue.Attribute == retailTmpPubProductAttributeValue.Attribute
                    && retailPubProductAttributeValue.InternalOrganization == retailTmpPubProductAttributeValue.InternalOrganization
                    && retailPubProductAttributeValue.Catalog == catalogId
                    && retailPubProductAttributeValue.LanguageId == retailTmpPubProductAttributeValue.LanguageId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishCatalogProdAttributeValTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert the records from RetailTmpPubProductAttributeValue to RetailPubProductAttributeValue table');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishB2CCatalogProductCategory</Name>
				<Source><![CDATA[
    private void publishB2CCatalogProductCategory()
    {
        Catalog catalogLocal;
        CatalogProduct catalogProduct;
        CatalogProductCategory catalogProductCategory;
        RetailPubCatalogProductCategory retailPubCatalogProductCategory;
        RetailPubCatalogProductCategory checkRetailPubCatalogProductCategory;
        RetailCatalogProductCategoryAllCurrent catalogProductCategoryAllCurrent;
        EcoResCategoryHierarchy categoryHierarchy;
        EcoResCategory  ecoResCategory;
        CatalogProductExcludeIncludeType catalogProductExcludeIncludeType = CatalogProductExcludeIncludeType::Include;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProductCategory.skipDatabaseLog(true);
        retailPubCatalogProductCategory.skipEvents(true);

        if (this.enableSnapshot())
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Delete non-snapshot
            delete_from retailPubCatalogProductCategory
                where retailPubCatalogProductCategory.Origin
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete non-snapshot');

            stepStartTime = DateTimeUtil::utcNow();

            // Delete published records if the origins are deleted.
            delete_from retailPubCatalogProductCategory
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct
                notexists join catalogProductCategoryAllCurrent
                    where catalogProductCategoryAllCurrent.Catalog == catalogId
                        && catalogProductCategoryAllCurrent.Product == catalogProduct.Product
                        && catalogProductCategoryAllCurrent.Category == retailPubCatalogProductCategory.Category;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');
            
            stepStartTime = DateTimeUtil::utcNow();

            // Update published records if the orgins are changed.
            update_recordset retailPubCatalogProductCategory
                setting
                    CategoryHierarchy = categoryHierarchy.RecId
                join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct
                join catalogProductCategoryAllCurrent
                    where catalogProductCategoryAllCurrent.Catalog == catalogId
                        && catalogProductCategoryAllCurrent.Product == catalogProduct.Product
                        && catalogProductCategoryAllCurrent.Category == retailPubCatalogProductCategory.Category
                        && catalogProductCategoryAllCurrent.CategoryHierarchy != retailPubCatalogProductCategory.CategoryHierarchy
                join categoryHierarchy
                    where categoryHierarchy.RecId == catalogProductCategoryAllCurrent.CategoryHierarchy;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed.');

            stepStartTime = DateTimeUtil::utcNow();

            // Insert published records from the origins if not already exist.
            insert_recordset retailPubCatalogProductCategory(
                Category,
                CategoryHierarchy,
                IncludeExcludeType,
                CatalogProduct
            )
            select
                Category,
                CategoryHierarchy,
                catalogProductExcludeIncludeType
                from catalogProductCategoryAllCurrent
                    where catalogProductCategoryAllCurrent.Catalog == catalogId
                join RecId from catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.Product == catalogProductCategoryAllCurrent.Product
                join ecoResCategory
                    where ecoResCategory.RecId == catalogProductCategoryAllCurrent.Category
                        && ecoResCategory.IsActive
                notExists join checkRetailPubCatalogProductCategory
                    where checkRetailPubCatalogProductCategory.CatalogProduct == catalogProduct.RecId
                        && checkRetailPubCatalogProductCategory.Category == catalogProductCategoryAllCurrent.Category;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');
        }
        else
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Delete snapshot
            delete_from retailPubCatalogProductCategory
                where !retailPubCatalogProductCategory.Origin
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete snapshot');

            stepStartTime = DateTimeUtil::utcNow();

            // Delete published records if the origins are deleted.
            delete_from retailPubCatalogProductCategory
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct
                notexists join catalogProductCategory
                    where catalogProductCategory.RecId == retailPubCatalogProductCategory.Origin;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

            stepStartTime = DateTimeUtil::utcNow();

            // Update published records if the orgins are changed.
            update_recordset retailPubCatalogProductCategory
                setting
                    OriginRecVersion = catalogProductCategory.RecVersion,
                    Category = catalogProductCategory.Category,
                    CategoryHierarchy = catalogProductCategory.CategoryHierarchy,
                    IncludeExcludeType = catalogProductCategory.IncludeExcludeType
                join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct
                join catalogProductCategory
                    where catalogProductCategory.RecId == retailPubCatalogProductCategory.Origin
                        && catalogProductCategory.RecVersion != retailPubCatalogProductCategory.OriginRecVersion;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

            stepStartTime = DateTimeUtil::utcNow();

            // Insert published records from the origins if not already exist.
            insert_recordset retailPubCatalogProductCategory(
                Origin,
                OriginRecVersion,
                CatalogProduct,
                Category,
                CategoryHierarchy,
                IncludeExcludeType
            )
            select
                RecId,
                RecVersion,
                CatalogProduct,
                Category,
                CategoryHierarchy,
                IncludeExcludeType
                from catalogProductCategory
                join ecoResCategory
                    where ecoResCategory.RecId == catalogProductCategory.Category
                        && ecoResCategory.IsActive
                join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == catalogProductCategory.CatalogProduct
                notExists join checkRetailPubCatalogProductCategory
                    where checkRetailPubCatalogProductCategory.Origin == catalogProductCategory.RecId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishB2cCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishB2BCatalogProductCategory</Name>
				<Source><![CDATA[
    private void publishB2BCatalogProductCategory()
    {
        CatalogProduct catalogProduct;
        CatalogProductCategory catalogProductCategory;
        RetailPubCatalogProductCategory retailPubCatalogProductCategory;
        RetailPubCatalogProductCategory checkRetailPubCatalogProductCategory;
        RetailB2BCatalogProductCategoryAllCurrent catalogB2BProductCategoryAllCurrent;
        EcoResCategoryHierarchy categoryHierarchy;
        EcoResCategory  ecoResCategory;
        CatalogProductExcludeIncludeType catalogProductExcludeIncludeType = CatalogProductExcludeIncludeType::Include;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProductCategory.skipDatabaseLog(true);
        retailPubCatalogProductCategory.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // Delete non-snapshot
        delete_from retailPubCatalogProductCategory
            exists join catalogProduct
                where catalogProduct.Catalog == catalogId
                    && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishB2bCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete non-snapshot');

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from retailPubCatalogProductCategory
            exists join catalogProduct
                where catalogProduct.Catalog == catalogId
                    && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct
            notexists join catalogB2BProductCategoryAllCurrent
                where catalogB2BProductCategoryAllCurrent.Catalog == catalogId
                    && catalogB2BProductCategoryAllCurrent.Product == catalogProduct.Product
                    && catalogB2BProductCategoryAllCurrent.Category == retailPubCatalogProductCategory.Category;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishB2bCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

        stepStartTime = DateTimeUtil::utcNow();

        // Update published records if the orgins are changed.
        update_recordset retailPubCatalogProductCategory
            setting
                CategoryHierarchy = categoryHierarchy.RecId
            join catalogProduct
                where catalogProduct.Catalog == catalogId
                    && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct
            join catalogB2BProductCategoryAllCurrent
                where catalogB2BProductCategoryAllCurrent.Catalog == catalogId
                    && catalogB2BProductCategoryAllCurrent.Product == catalogProduct.Product
                    && catalogB2BProductCategoryAllCurrent.Category == retailPubCatalogProductCategory.Category
                    && catalogB2BProductCategoryAllCurrent.CategoryHierarchy != retailPubCatalogProductCategory.CategoryHierarchy
            join categoryHierarchy
                where categoryHierarchy.RecId == catalogB2BProductCategoryAllCurrent.CategoryHierarchy;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishB2bCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset retailPubCatalogProductCategory(
            Category,
            CategoryHierarchy,
            IncludeExcludeType,
            CatalogProduct
        )
        select
            Category,
            CategoryHierarchy,
            catalogProductExcludeIncludeType
            from catalogB2BProductCategoryAllCurrent
                where catalogB2BProductCategoryAllCurrent.Catalog == catalogId
            join RecId from catalogProduct
                where catalogProduct.Catalog == catalogId
                    && catalogProduct.Product == catalogB2BProductCategoryAllCurrent.Product
            join ecoResCategory
                where ecoResCategory.RecId == catalogB2BProductCategoryAllCurrent.Category
                    && ecoResCategory.IsActive
            notExists join checkRetailPubCatalogProductCategory
                where checkRetailPubCatalogProductCategory.CatalogProduct == catalogProduct.RecId
                    && checkRetailPubCatalogProductCategory.Category == catalogB2BProductCategoryAllCurrent.Category;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerPublishB2bCatalogTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogProductRelation</Name>
				<Source><![CDATA[
    private void publishCatalogProductRelation()
    {
        CatalogProduct catalogProduct;
        EcoResProductRelationTable productRelation;
        RetailPubCatalogProductRelation retailPubCatalogProductRelation;
        RetailPubCatalogProductRelation checkRetailPubCatalogProductRelation;
        RetailCatalogProductRelationExclusion catalogProductRelationExclusion;
        RetailPubCatalogProductRelationExclusion retailPubCatalogProductRelationExclusion;
        RetailPubCatalogProductRelationExclusion checkRetailPubCatalogProductRelationExclusion;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProductRelation.skipDatabaseLog(true);
        retailPubCatalogProductRelation.skipEvents(true);
        retailPubCatalogProductRelationExclusion.skipDatabaseLog(true);
        retailPubCatalogProductRelationExclusion.skipEvents(true);

        if (this.enableSnapshot())
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Delete non-snapshot
            delete_from retailPubCatalogProductRelationExclusion
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelationExclusion.CatalogProduct;

            // Delete published records if the origins are deleted.
            delete_from retailPubCatalogProductRelation
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelation.CatalogProduct
                notexists join productRelation
                    where productRelation.RecId == retailPubCatalogProductRelation.Origin;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete non-snapshot');

            stepStartTime = DateTimeUtil::utcNow();

            // Update published records if the orgins are changed.
            update_recordset retailPubCatalogProductRelation
                setting
                    OriginRecVersion = productRelation.RecVersion,
                    RelatedProduct = productRelation.Product2,
                    ProductRelationType = productRelation.ProductRelationType
                join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelation.CatalogProduct
                join productRelation
                    where productRelation.RecId == retailPubCatalogProductRelation.Origin
                        && productRelation.RecVersion != retailPubCatalogProductRelation.OriginRecVersion;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

            stepStartTime = DateTimeUtil::utcNow();

            // Insert published records from the origins if not already exist.
            insert_recordset retailPubCatalogProductRelation(
                Origin,
                OriginRecVersion,
                RelatedProduct,
                ProductRelationType,
                CatalogProduct
            )
            select
                RecId,
                RecVersion,
                Product2,
                ProductRelationType
                from productRelation
                join RecId from catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.Product == productRelation.Product1
                notExists join checkRetailPubCatalogProductRelation
                    where checkRetailPubCatalogProductRelation.CatalogProduct == catalogProduct.RecId
                        && checkRetailPubCatalogProductRelation.Origin == productRelation.RecId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');

            stepStartTime = DateTimeUtil::utcNow();

            // Delete published records if excluded.
            delete_from retailPubCatalogProductRelation
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelation.CatalogProduct
                exists join catalogProductRelationExclusion
                    where catalogProductRelationExclusion.CatalogProduct == retailPubCatalogProductRelation.CatalogProduct
                        && catalogProductRelationExclusion.ProductRelation == retailPubCatalogProductRelation.Origin;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if excluded.');
        }
        else
        {
            stepStartTime = DateTimeUtil::utcNow();

            // Delete snapshot
            delete_from retailPubCatalogProductRelation
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelation.CatalogProduct;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete snapshot');

            stepStartTime = DateTimeUtil::utcNow();

            // Delete published records if the origins are deleted.
            delete_from retailPubCatalogProductRelationExclusion
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelationExclusion.CatalogProduct
                notexists join catalogProductRelationExclusion
                    where catalogProductRelationExclusion.RecId == retailPubCatalogProductRelationExclusion.Origin;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

            stepStartTime = DateTimeUtil::utcNow();

            // Update published records if the orgins are changed.
            update_recordset retailPubCatalogProductRelationExclusion
                setting
                    OriginRecVersion = catalogProductRelationExclusion.RecVersion,
                    ProductRelation = catalogProductRelationExclusion.ProductRelation
                join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == retailPubCatalogProductRelationExclusion.CatalogProduct
                join catalogProductRelationExclusion
                    where catalogProductRelationExclusion.RecId == retailPubCatalogProductRelationExclusion.Origin
                        && catalogProductRelationExclusion.RecVersion != retailPubCatalogProductRelationExclusion.OriginRecVersion;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed');

            stepStartTime = DateTimeUtil::utcNow();

            // Insert published records from the origins if not already exist.
            insert_recordset retailPubCatalogProductRelationExclusion(
                Origin,
                OriginRecVersion,
                CatalogProduct,
                ProductRelation
            )
            select
                RecId,
                RecVersion,
                CatalogProduct,
                ProductRelation
                from catalogProductRelationExclusion
                exists join catalogProduct
                    where catalogProduct.Catalog == catalogId
                        && catalogProduct.RecId == catalogProductRelationExclusion.CatalogProduct
                notExists join checkRetailPubCatalogProductRelationExclusion
                    where checkRetailPubCatalogProductRelationExclusion.Origin == catalogProductRelationExclusion.RecId;

            stepEndTime = DateTimeUtil::utcNow();
            eventSource.EventWriteRetailCatalogManagerPublishCatalogProductRelationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist');
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>publishCatalogTranslation</Name>
				<Source><![CDATA[
    private void publishCatalogTranslation()
    {
        RetailPubCatalogTranslation retailPubCatalogTranslation, checkRetailPubCatalogTranslation;
        CatalogTranslation  catalogTranslation;
        utcdatetime stepStartTime, stepEndTime;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogTranslation.skipDatabaseLog(true);
        retailPubCatalogTranslation.skipEvents(true);

        stepStartTime = DateTimeUtil::utcNow();

        // Delete published records if the origins are deleted.
        delete_from retailPubCatalogTranslation
            where retailPubCatalogTranslation.Catalog == catalogId
            notexists join catalogTranslation
                where catalogTranslation.RecId == retailPubCatalogTranslation.Origin;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerpublishCatalogTranslationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Delete published records if the origins are deleted');

        stepStartTime = DateTimeUtil::utcNow();

        // Update published records if the orgins are changed.
        update_recordset retailPubCatalogTranslation
            setting
                OriginRecVersion = catalogTranslation.RecVersion,
                FriendlyName = catalogTranslation.FriendlyName,
                Description = catalogTranslation.Description,
                Language = catalogTranslation.Language,
                Image = catalogTranslation.Image
            join catalogTranslation
                where retailPubCatalogTranslation.Catalog == catalogId
                    && catalogTranslation.RecId == retailPubCatalogTranslation.Origin
                    && catalogTranslation.RecVersion != retailPubCatalogTranslation.OriginRecVersion;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerpublishCatalogTranslationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Update published records if the orgins are changed.');

        stepStartTime = DateTimeUtil::utcNow();

        // Insert published records from the origins if not already exist.
        insert_recordset retailPubCatalogTranslation(
            Origin,
            OriginRecVersion,
            Catalog,
            FriendlyName,
            Description,
            Language,
            Image
        )
        select
            RecId,
            RecVersion,
            Catalog,
            FriendlyName,
            Description,
            Language,
            Image
            from catalogTranslation
                where catalogTranslation.Catalog == catalogId
            notExists join checkRetailPubCatalogTranslation
                where checkRetailPubCatalogTranslation.Origin == catalogTranslation.RecId;

        stepEndTime = DateTimeUtil::utcNow();
        eventSource.EventWriteRetailCatalogManagerpublishCatalogTranslationTimeStamp(stepStartTime, stepEndTime, DateTimeUtil::getDifference(stependTime, stepStartTime), 'Insert published records from the origins if not already exist.');

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retract</Name>
				<Source><![CDATA[
    private void retract()
    {
        CatalogProduct catalogProduct;
        RetailPubCatalog retailPubCatalog;
        RetailPubCatalogTranslation retailPubCatalogTranslation;
        RetailPubCatalogInternalOrg retailPubCatalogInternalOrg;
        RetailPubCatalogProduct retailPubCatalogProduct;
        RetailPubProductAttributeValue retailPubProductAttributeValue;
        RetailPubCatalogProductCategory retailPubCatalogProductCategory;
        RetailPubCatalogProductRelationExclusion retailPubCatalogProductRelationExclusion;
        RetailPubRetailCatalogPriceGroup retailPubCatalogPriceGroup;
        RetailPubRetailCatalogCategoryAttribute retailPubRetailCatalogCategoryAttribute;
        RetailPubProductAttributeCatalogMetadata retailPubProductAttributeCatalogMetadata;

        ttsBegin;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalog.skipDatabaseLog(true);
        retailPubCatalog.skipEvents(true);

        delete_from retailPubCatalog where retailPubCatalog.Origin == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogTranslation.skipDatabaseLog(true);
        retailPubCatalogTranslation.skipEvents(true);

        delete_from retailPubCatalogTranslation where retailPubCatalogTranslation.Catalog == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogInternalOrg.skipDatabaseLog(true);
        retailPubCatalogInternalOrg.skipEvents(true);

        delete_from retailPubCatalogInternalOrg where retailPubCatalogInternalOrg.Catalog == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProduct.skipDatabaseLog(true);
        retailPubCatalogProduct.skipEvents(true);

        delete_from retailPubCatalogProduct where retailPubCatalogProduct.Catalog == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubProductAttributeValue.skipDatabaseLog(true);
        retailPubProductAttributeValue.skipEvents(true);

        delete_from retailPubProductAttributeValue where retailPubProductAttributeValue.Catalog == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProductCategory.skipDatabaseLog(true);
        retailPubCatalogProductCategory.skipEvents(true);

        delete_from retailPubCatalogProductCategory
            exists join catalogProduct
                where catalogProduct.Catalog == catalogId
                    && catalogProduct.RecId == retailPubCatalogProductCategory.CatalogProduct;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogProductRelationExclusion.skipDatabaseLog(true);
        retailPubCatalogProductRelationExclusion.skipEvents(true);

        delete_from retailPubCatalogProductRelationExclusion
            exists join catalogProduct
                where catalogProduct.Catalog == catalogId
                    && catalogProduct.RecId == retailPubCatalogProductRelationExclusion.CatalogProduct;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubCatalogPriceGroup.skipDatabaseLog(true);
        retailPubCatalogPriceGroup.skipEvents(true);

        delete_from retailPubCatalogPriceGroup where retailPubCatalogPriceGroup.Catalog == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubRetailCatalogCategoryAttribute.skipDatabaseLog(true);
        retailPubRetailCatalogCategoryAttribute.skipEvents(true);

        delete_from retailPubRetailCatalogCategoryAttribute where retailPubRetailCatalogCategoryAttribute.HostCatalog == catalogId;

        // Ensure set based operations are not downgraded to record-by-record operations
        retailPubProductAttributeCatalogMetadata.skipDatabaseLog(true);
        retailPubProductAttributeCatalogMetadata.skipEvents(true);

        delete_from retailPubProductAttributeCatalogMetadata where retailPubProductAttributeCatalogMetadata.HostCatalog == catalogId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatalogProductStatus</Name>
				<Source><![CDATA[
    private void setCatalogProductStatus()
    {
        RetailCatalogProductStatus catalogProductStatus;

        update_recordSet catalogProductStatus
            setting HasUnpublishedChange = NoYes::No
            where catalogProductStatus.Catalog == catalogId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update channel with catalog changes.
    /// </summary>
    /// <param name="publishType">
    /// The type of publishing: incremental or full.
    /// </param>
    public void updateChannel(RetailCatalogPublishingType publishType = RetailCatalogPublishingType::Incremental)
    {
        Catalog catalog = catalog::find(catalogId);

        if (!catalog)
        {
            this.retract();
            return;
        }

        switch (catalog.State)
        {
            case CatalogState::Published:
                this.publish(publishType);
                break;

            case CatalogState::Deleted:
            case CatalogState::Expired:
            case CatalogState::Retracted:
                this.retract();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateListingCount</Name>
				<Source><![CDATA[
    private void updateListingCount(RetailCatalogPublishingType publishType)
    {
        RetailCatalogInternalOrg    retailCatalogInternalOrg;
        RetailTmpCatalogIntOrgPublishSummary retailTmpCatalogIntOrgPublishSummary;
        RetailOnlineChannelTable    retailOnlineChannelTable;
        RetailInternalOrganization  retailInternalOrganization;
        RetailCatalogParentProduct catalogParentProduct;
        int64   listingCount, productCount;

        select count(RecId) from catalogParentProduct
                    where catalogParentProduct.Catalog == catalogId;
        productCount = catalogParentProduct.RecId;

        while select ProductNewCount, ProductUpdateCount, ProductDeleteCount, CatalogInternalOrg, RecId from retailTmpCatalogIntOrgPublishSummary
            where retailTmpCatalogIntOrgPublishSummary.Catalog == catalogId
            join retailCatalogInternalOrg
                where retailCatalogInternalOrg.RecId == retailTmpCatalogIntOrgPublishSummary.CatalogInternalOrg
            join InternalOrganization from retailInternalOrganization
                where retailInternalOrganization.RecId == retailCatalogInternalOrg.InternalOrganization
            join RecId from retailOnlineChannelTable
                where retailOnlineChannelTable.OMOperatingUnitID == retailInternalOrganization.InternalOrganization
        {
            if (publishType == RetailCatalogPublishingType::Full)
            {
                listingCount = productCount + retailTmpCatalogIntOrgPublishSummary.ProductDeleteCount;
            }
            else
            {
                listingCount = retailTmpCatalogIntOrgPublishSummary.ProductNewCount +
                                retailTmpCatalogIntOrgPublishSummary.ProductUpdateCount +
                                retailTmpCatalogIntOrgPublishSummary.ProductDeleteCount;
            }

            if (retailCatalogInternalOrg)
            {
                retailCatalogInternalOrg.selectForUpdate(true);
                retailCatalogInternalOrg.ListingCount = listingCount;
                retailCatalogInternalOrg.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new insatnce of the class <c>RetailCatalogManager</c>.
    /// </summary>
    /// <returns>
    /// A new instance of <c>RetailCatalogManager</c> class.
    /// </returns>
    public static RetailCatalogManager construct()
    {
        return new RetailCatalogManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCatalogId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new insatnce of the class <c>RetailCatalogManager</c>.
    /// </summary>
    /// <param name="_catalogId">
    /// The value of CatalogRefRecId.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailCatalogManager</c> class.
    /// </returns>
    public static RetailCatalogManager newCatalogId(CatalogRefRecId _catalogId)
    {
        RetailCatalogManager retailCatalogManager = RetailCatalogManager::construct();
        retailCatalogManager.parmCatalogId(_catalogId);
        retailCatalogManager.parmChannelHierarchyDateTime(Catalog::getChannelHierarchyDateTime(_catalogId));
        return retailCatalogManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>