<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineSalesParmLineImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>SalesParmLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(SalesParmLine))]
public class TaxModelDocLineSalesParmLineImpl extends TaxModelDocLineSalesLineImpl
{
    SalesParmTable salesParmTable;
    SalesParmLine  salesParmLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction posting date.
    /// </summary>
    /// <returns>
    /// The sales order parm transaction posting date.
    /// </returns>
    public Date getDeliveryDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    public TableId getDocumentLineMainTableId()
    {
        return salesParmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    public RecId getDocumentLineMainTableRecId()
    {
        return salesParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        return salesParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return salesParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        if (salesCalcTax)
        {
            return  salesCalcTax.transQty();
        }
        else
        {
            return salesParmLine.DeliverNow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPackingSlip</Name>
				<Source><![CDATA[
    private CustPackingSlipTrans getRelatedPackingSlip()
    {
        SalesParmSubLine        salesParmSubLine;
        CustPackingSlipTrans    custPackingSlipTrans;

        select firstOnly RecId, deliveryDate from custPackingSlipTrans
            join RecId from salesParmSubLine
                where custPackingSlipTrans.RecId == salesParmSubLine.JournalRefRecId
                    && salesParmSubLine.JournalRefTableId == tableNum(CustPackingSlipTrans)
                    && salesParmSubLine.LineRefRecId == salesParmLine.RecId;

        return custPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        salesParmLine = _documentLineMap;
        salesParmTable = salesParmLine.salesParmTable();

        super(salesParmLine.salesLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoice</Name>
				<Source><![CDATA[
    private boolean isInvoice()
    {
        return salesParmTable.salesParmUpdate().DocumentStatus == DocumentStatus::Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        return this.isInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxable document type.
    /// </summary>
    /// <returns>The taxable document type.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getTaxableDocumentType()
    {
        TaxableDocumentDescriptor taxableDocumentDescriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(salesParmTable);

        TaxableDocumentType taxableDocumentType = TaxableDocumentType::findByInterfaceName(taxableDocumentDescriptor.getSourceTaxableDocumentType());

        return taxableDocumentType.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return salesParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return salesParmTable.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>