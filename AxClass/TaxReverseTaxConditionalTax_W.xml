<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReverseTaxConditionalTax_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxReverseTaxConditionalTax_W extends TaxReverseTaxCustVendSettle_RU
{
    protected readonly boolean conditionalTaxSettleReverseByCustVendPostingLogImproveFeature = FeatureStateProvider::isFeatureEnabled(ConditionalTaxSettleReverseByCustVendPostingLogImproveFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findListOfOriginalTaxTranses</Name>
				<Source><![CDATA[
    private TmpRecIdFilter findListOfOriginalTaxTranses(CustVendTransPostingLogRecId_RU  _logRecID = 0)
    {
        TaxTrans_RU taxTrans_RU;
        TaxTrans_W taxTrans_W;
        TmpRecIdFilter recIdFilter;

        insert_recordset recIdFilter(RefRecId)
            select CustVendTransPostingLogTaxOrigin_W from taxTrans_W
                exists join taxTrans_RU
                    where taxTrans_RU.TaxTrans == taxTrans_W.TaxTrans
                    && taxTrans_ru.CustVendTransPostingLog_RU == _logRecID;
        return recIdFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransToReverseQueryRun</Name>
				<Source><![CDATA[
    private QueryRun getTaxTransToReverseQueryRun(
        Voucher _originalvoucher,
        TransDate _originalTransDate,
        CustVendTransPostingLogRecId_RU _logRecID)
    {
        Query query = new Query(queryStr(TaxReverseTaxConditionalTax_W));

        QueryBuildDataSource qbdsTaxTrans = query.dataSourceTable(tableNum(TaxTrans));
        findOrCreateRange_W(qbdsTaxTrans, fieldNum(TaxTrans, Voucher)).value(_originalvoucher);
        findOrCreateRange_W(qbdsTaxTrans, fieldNum(TaxTrans, TransDate)).value(queryValue(_originalTransDate));

        TmpRecIdFilter recIdFilter = this.findListOfOriginalTaxTranses(_logRecID ? _logRecID : custVendTransPostingLog_RU);

        select firstonly RecId from recIdFilter;
        boolean originalTaxTransLinkExists = recIdFilter.RecId != 0;

        if (originalTaxTransLinkExists)
        {
            QueryBuildDataSource qbds = qbdsTaxTrans.addDataSource(tableNum(TaxTrans_W));
            qbds.relations(false);
            qbds.addLink(fieldNum(TaxTrans, RecId), fieldNum(TaxTrans_W, TaxTrans));
            qbds.joinMode(JoinMode::ExistsJoin);

            qbds = qbds.addDataSource(tableNum(TmpRecIdFilter));
            qbds.relations(false);
            qbds.addLink(fieldNum(TaxTrans_W, CustVendTransPostingLogTaxOrigin_W), fieldNum(TmpRecIdFilter, RefRecId));
            qbds.joinMode(JoinMode::ExistsJoin);
        }

        QueryRun qr = new QueryRun(query);

        if (originalTaxTransLinkExists)
        {
            qr.setRecord(recIdFilter);
        }

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndInsertTaxes</Name>
				<Source><![CDATA[
    public TaxAmount calcAndInsertTaxes(Voucher   _originalvoucher,
                                        TransDate _originalTransDate,
                                        CustVendTransPostingLogRecId_RU    _logRecID = 0)
    {
        TaxAmount taxAmount;

        ttsbegin;

        if (conditionalTaxSettleReverseByCustVendPostingLogImproveFeature)
        {
            QueryRun qr = this.getTaxTransToReverseQueryRun(
                _originalvoucher,
                _originalTransDate,
                _logRecID ? _logRecID : custVendTransPostingLog_RU);

            while (qr.next())
            {
                TaxTrans taxTrans = qr.get(tableNum(TaxTrans));
                TaxTransLedgerDimensionView_RU taxTransLedgerDimension = qr.get(tableNum(TaxTransLedgerDimensionView_RU), 1);
                TaxTransLedgerDimensionView_RU taxTransTransactionLineAccountLedgerDimension = qr.get(tableNum(TaxTransLedgerDimensionView_RU), 4);
                TaxTransLedgerDimensionView_RU taxTransUseTaxLedgerDimension = qr.get(tableNum(TaxTransLedgerDimensionView_RU), 3);
                TaxTransLedgerDimensionView_RU taxTransOffsetLedgerDimension = qr.get(tableNum(TaxTransLedgerDimensionView_RU), 2);

                taxAmount += this.createTaxWorkTrans(
                    taxTrans,
                    taxTransLedgerDimension,
                    taxTransTransactionLineAccountLedgerDimension,
                    taxTransUseTaxLedgerDimension,
                    taxTransOffsetLedgerDimension
                    );
            }
        }
        else
        {
            TaxTrans taxTrans;
            TaxTransLedgerDimensionView_RU taxTransLedgerDimension;
            TaxTransLedgerDimensionView_RU taxTransOffsetLedgerDimension;
            TaxTransLedgerDimensionView_RU taxTransUseTaxLedgerDimension;
            TaxTransLedgerDimensionView_RU taxTransTransactionLineAccountLedgerDimension;

            while select
                  sum (TaxAmount),
                  sum (TaxAmountCur),
                  sum (TaxAmountRep),
                  sum (SourceTaxAmountCur),
                  sum (TaxBaseAmount),
                  sum (TaxBaseAmountCur),
                  sum (TaxBaseAmountRep),
                  sum (SourceBaseAmountCur),
                  sum (SourceRegulateAmountCur),
                  sum (TaxBaseQty),
                  sum (TaxInCostPrice),
                  sum (TaxInCostPriceMST),
                  sum (TaxInCostPriceCur),
                  sum (TaxInCostPriceRep),
                  sum (TaxInCostPriceRegulated)
              from taxTrans
              group by TaxCode, TaxDirection, CurrencyCode,
                      SourceCurrencyCode, TaxAutogenerated, euroTriangulation, Source, TaxGroup, TaxItemGroup, ExemptTax,
                      TaxOrigin, SourceRecId
              where taxTrans.Voucher   == _originalvoucher   &&
                    taxTrans.TransDate == _originalTransDate &&
                    taxTrans.ExemptTax == NoYes::No          &&
                   (taxTrans.TaxOrigin == TaxOrigin::Payment ||
                    taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
              outer join LedgerDimension from taxTransLedgerDimension group by LedgerDimension
                  where taxTransLedgerDimension.TaxTrans                == taxTrans.RecId &&
                        taxTransLedgerDimension.TaxTransRelationship    == TaxTransRelationshipType::Tax
              outer join LedgerDimension from taxTransOffsetLedgerDimension group by LedgerDimension
                  where taxTransOffsetLedgerDimension.TaxTrans                == taxTrans.RecId &&
                        taxTransOffsetLedgerDimension.TaxTransRelationship    == TaxTransRelationshipType::Offset_RU
              outer join LedgerDimension from taxTransUseTaxLedgerDimension group by LedgerDimension
                  where taxTransUseTaxLedgerDimension.TaxTrans                == taxTrans.RecId &&
                        taxTransUseTaxLedgerDimension.TaxTransRelationship    == TaxTransRelationshipType::UseTaxPayable
              outer join LedgerDimension from taxTransTransactionLineAccountLedgerDimension group by LedgerDimension
                  where taxTransTransactionLineAccountLedgerDimension.TaxTrans                == taxTrans.RecId &&
                        taxTransTransactionLineAccountLedgerDimension.TaxTransRelationship    == TaxTransRelationshipType::TransactionLineAccount
            {
                taxAmount += this.createTaxWorkTrans(
                    taxTrans,
                    taxTransLedgerDimension,
                    taxTransTransactionLineAccountLedgerDimension,
                    taxTransUseTaxLedgerDimension,
                    taxTransOffsetLedgerDimension
                    );
            }
        }

        ttscommit;

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxWorkTrans</Name>
				<Source><![CDATA[
    private TaxAmount createTaxWorkTrans(
        TaxTrans _TaxTrans,
        TaxTransLedgerDimensionView_RU _taxTransLedgerDimension,
        TaxTransLedgerDimensionView_RU _taxTransTransactionLineAccountLedgerDimension,
        TaxTransLedgerDimensionView_RU _taxTransUseTaxLedgerDimension,
        TaxTransLedgerDimensionView_RU _taxTransOffsetLedgerDimension)
    {
        sourceCurrencyCode = _taxTrans.SourceCurrencyCode;
        triangulation = _taxTrans.euroTriangulation;

        taxWorkTrans.clear();
        taxWorkTrans.HeadingRecId             = headingRecId;
        taxWorkTrans.SourceTableId            = this.sourceTableId();
        taxWorkTrans.SourceRecId              = _taxTrans.SourceRecId;
        taxWorkTrans.TaxCode                  = _taxTrans.TaxCode;
        taxWorkTrans.TaxGroup                 = _taxTrans.TaxGroup;
        taxWorkTrans.TaxItemGroup             = _taxTrans.TaxItemGroup;

        if (sourceSet)
        {
            taxWorkTrans.Source                     = source;
        }
        else
        {
            taxWorkTrans.Source                   = _taxTrans.Source;
        }

        taxWorkTrans.Voucher                  = voucher;
        taxWorkTrans.TransDate                = taxDate;
        taxWorkTrans.CalculationDate          = taxDate;
        taxWorkTrans.TaxDirection             = _taxTrans.TaxDirection;
        taxWorkTrans.CurrencyCode             = _taxTrans.CurrencyCode;
        taxWorkTrans.SourceCurrencyCode       = sourceCurrencyCode;
        taxWorkTrans.TaxAutogenerated         = _taxTrans.TaxAutogenerated;
        taxWorkTrans.euroTriangulation        = _taxTrans.euroTriangulation;
        taxWorkTrans.TaxAmount                = -_taxTrans.TaxAmount;
        taxWorkTrans.TaxAmountCur             = -_taxTrans.TaxAmountCur;
        taxWorkTrans.TaxAmountRep             = -_taxTrans.TaxAmountRep;
        taxWorkTrans.TaxBaseAmount            = -_taxTrans.TaxBaseAmount;
        taxWorkTrans.TaxBaseAmountCur         = -_taxTrans.TaxBaseAmountCur;
        taxWorkTrans.TaxBaseAmountRep         = -_taxTrans.TaxBaseAmountRep;
        taxWorkTrans.TaxInCostPrice           = -_taxTrans.TaxInCostPrice;
        taxWorkTrans.TaxInCostPriceMST        = -_taxTrans.TaxInCostPriceMST;
        taxWorkTrans.TaxInCostPriceCur        = -_taxTrans.TaxInCostPriceCur;
        taxWorkTrans.TaxInCostPriceRep        = -_taxTrans.TaxInCostPriceRep;
        taxWorkTrans.TaxInCostPriceRegulated  = -_taxTrans.TaxInCostPriceRegulated;
        taxWorkTrans.SourceTaxAmountCur       = -_taxTrans.SourceTaxAmountCur;
        taxWorkTrans.SourceBaseAmountCur      = -_taxTrans.SourceBaseAmountCur;
        taxWorkTrans.SourceRegulateAmountCur  = -_taxTrans.SourceRegulateAmountCur;
        taxWorkTrans.TaxBaseQty               = -_taxTrans.TaxBaseQty;

        taxWorkTrans.TaxReports               = NoYes::Yes;
        taxWorkTrans.ExemptTax                = NoYes::No;
        taxWorkTrans.TaxAutogenerated         = _taxTrans.TaxAutogenerated;
        taxWorkTrans.TaxOrigin                = _taxTrans.TaxOrigin;
        taxWorkTrans.HeadingTableId           = _taxTrans.HeadingTableId;

        taxWorkTrans.LedgerDimension                = _taxTransLedgerDimension.LedgerDimension;
        taxWorkTrans.OperationLedgerDimension       = _taxTransTransactionLineAccountLedgerDimension.LedgerDimension;
        taxWorkTrans.TaxOffsetUseTaxLedgerDimension = _taxTransUseTaxLedgerDimension.LedgerDimension;
        taxWorkTrans.OffsetLedgerDimension_RU       = _taxTransOffsetLedgerDimension.LedgerDimension;

        taxWorkTrans.insert();

        return this.taxAmount(taxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    public void saveAndPost(LedgerPostingController _ledgerPostingController, boolean _posting = true)
    {
        TaxTrans               taxTrans;
        TaxAmountCur           taxAmountCur;
        TaxAmountCur           taxInCostPrice;
        TaxAmountCur           taxAmount;
        int                    idx;
        LedgerDimensionAccount      transactionLineDimension;
        CurrencyExchangeHelper      exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::current());

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        ttsbegin;

        while select
            sum(TaxBaseAmount),
            sum(TaxBaseAmountCur),
            sum(TaxBaseQty),
            sum(TaxAmount),
            sum(TaxAmountCur),
            sum(TaxInCostPrice),
            sum(TaxInCostPriceMST),
            sum(TaxInCostPriceCur),
            sum(SourceTaxAmountCur),
            sum(SourceBaseAmountCur),
            sum(SourceRegulateAmountCur),
            sum(TaxInCostPriceRegulated)
        from taxWorkTrans
        group by Voucher, TransDate, InventTransId, TaxCode, CurrencyCode, TaxDirection, ExemptTax, TaxOrigin,
                Source, SourceCurrencyCode, TaxAutogenerated, TaxReports,
                LedgerDimension, OperationLedgerDimension, TaxOffsetUseTaxLedgerDimension, OffsetLedgerDimension_RU,
                TaxRefId, TaxGroup, TaxItemGroup, euroTriangulation,
                SourceRecId
        where taxWorkTrans.HeadingRecId  == headingRecId
        {
            if (!exchRatesSet)
            {
                if (taxWorkTrans.SourceBaseAmountCur)
                {
                    exchRate = taxWorkTrans.TaxBaseAmount * 100 / taxWorkTrans.SourceBaseAmountCur;
                    triangulation = NoYes::No;
                }
                else
                    if (taxWorkTrans.SourceTaxAmountCur || taxWorkTrans.SourceBaseAmountCurRegulated)
                    {
                        taxAmount = taxWorkTrans.SourceBaseAmountCurRegulated ? taxWorkTrans.SourceBaseAmountCurRegulated : taxWorkTrans.SourceTaxAmountCur;
                        exchRate = taxWorkTrans.TaxBaseAmount * 100 / taxAmount;
                        triangulation = NoYes::No;
                    }
                    else
                    {
                        exchRate = 0;
                        triangulation = taxWorkTrans.euroTriangulation;
                    }
            }
            if (taxWorkTrans.SourceTaxAmountCur      ||
                taxWorkTrans.SourceBaseAmountCur     ||
                taxWorkTrans.SourceRegulateAmountCur ||
                taxWorkTrans.TaxBaseQty)
            {
                taxTrans.clear();
                this.initFromTaxWorkTrans(taxTrans, taxWorkTrans, this.taxOrigin(taxWorkTrans.TaxOrigin));

                if (taxRegulationExist)
                    taxTrans.TaxAutogenerated = NoYes::No;
                taxTrans.euroTriangulation = triangulation;
                taxTrans.Voucher           = voucher;
                taxTrans.JournalNum        = this.journalNum();
                if (!taxTrans.TaxAutogenerated)
                {
                    taxAmountCur = taxTrans.SourceRegulateAmountCur;
                    taxInCostPrice = taxTrans.TaxInCostPriceRegulated;
                    this.taxAmountRegulation(taxTrans,taxTrans.SourceRegulateAmountCur);
                    this.taxInCostPriceReporting(taxTrans, taxTrans.TaxInCostPriceRegulated);
                }
                else
                {
                    taxAmountCur           = taxTrans.SourceTaxAmountCur;
                    taxInCostPrice         = taxTrans.TaxInCostPrice;
                }

                this.initTaxTrans(taxTrans, _ledgerPostingController.getJournal().parmVoucherSeriesCode());

                taxTrans.insert();

                if (taxWorkTrans.ExemptTax == NoYes::No && taxAmountCur)
                {
                    sourceCurrencyCode = taxTrans.SourceCurrencyCode;
                    _ledgerPostingController.getReference().lastTransTxt(transTxt);

                   exchangeRateHelper.parmExchangeRate1(exchRate);
                   exchangeRateHelper.parmExchangeDate(taxTrans.TransDate);

                   this.post(_ledgerPostingController, taxTrans, taxAmountCur, taxInCostPrice, exchangeRateHelper,
                             taxWorkTrans.LedgerDimension,
                             taxWorkTrans.OperationLedgerDimension,
                             taxWorkTrans.TaxOffsetUseTaxLedgerDimension,
                             LedgerDetailLevel::AsDefault,
                             null,
                             taxWorkTrans.OffsetLedgerDimension_RU
                             );
                }
            }
            transactionLineDimension = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(taxTrans.RecId, TaxTransRelationshipType::TransactionLineAccount);
            idx = conFind(conLedgerDimension, transactionLineDimension);
            if (! idx)
            {
                conLedgerDimension      += transactionLineDimension;
                conSourceBaseAmountCur  += taxTrans.SourceBaseAmountCur;
            }
            else
                conSourceBaseAmountCur   = conPoke(conSourceBaseAmountCur,
                                                  idx,
                                                  conPeek(conSourceBaseAmountCur, idx) + taxTrans.SourceBaseAmountCur);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>