<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineApprovalsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchLineApprovalsEventHandler</c> class is used as event handler for the purchase order
///    line workflow.
/// </summary>
/// <remarks>
///    This class implements the <c>WorkflowStartedEventHandler</c>,
///    <c>WorkflowElementCompletedEventHandler</c>, <c>WorkflowElementCanceledEventHandler</c>,
///    <c>WorkflowElementReturnedEventHandler</c>, <c>WorkflowElemChangeRequestedEventHandler</c>, and
///    <c>WorkflowElementDeniedEventHandler</c> interfaces and handles the updates that are needed when
///    the different workflow event has ended.
/// </remarks>
class
    PurchLineApprovalsEventHandler
implements
    WorkflowElementStartedEventHandler,
    WorkflowElementCompletedEventHandler,
    WorkflowElementCanceledEventHandler,
    WorkflowElementReturnedEventHandler,
    WorkflowElemChangeRequestedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>WorkflowState</c> field on the <c>PurchLine</c> table to not submitted.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the approval is canceled.
    /// </remarks>
    public void  canceled(WorkflowElementEventArgs  _workflowElementEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::NotSubmitted);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>WorkflowState</c> field on the <c>PurchLine</c> table to change requested.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when a change is requested.
    /// </remarks>
    public void  changeRequested(WorkflowElementEventArgs  _workflowElementEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::ChangeRequest, NoYes::Yes);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>WorkflowState</c> field on the <c>PurchLine</c> table to completed.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the approval is completed.
    /// </remarks>
    public void  completed(WorkflowElementEventArgs  _workflowElementEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::Approved);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>WorkflowState</c> field on the <c>PurchLine</c> table to returned.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the approval is returned.
    /// </remarks>
    public void  returned(WorkflowElementEventArgs  _workflowElementEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::Returned);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>WorkflowState</c> field on the <c>PurchLine</c> table to pending approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the approval is started.
    /// </remarks>
    public void  started(WorkflowElementEventArgs  _workflowElementEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::PendingApproval);

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>