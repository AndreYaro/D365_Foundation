<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCdxFeatureControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Retail.CommerceDataExchange;
using Microsoft.Dynamics.Retail.CommerceDataExchange.AsyncClient.Business;

/// <summary>
/// The <c>RetailCDXFeatureControl</c> class is used to control CDX related feature flags.
/// </summary>
internal class RetailCDXFeatureControl
{
    // ax side feature control parameters
    internal const str DisableLegacySasTimeoutConfigurationFlightingKey      = 'CDX_DISABLE_LEGACY_SAS_TIMEOUT_CONFIGURATION';
    internal const str EnableRetailInventDimSHA1HashTableLegacyFlightingKey  = 'CDX_ENABLE_RETAILINVENTDIMSHA1HASHTABLELEGACY';
    internal const str DownloadSessionsMaxResultSizeKey                      = 'CDX_OVERRIDE_GETDOWNLOADSESSIONSMAXRESULTSIZE';
    internal const str DisableDataGroupSelectionForNewOfflineSupportKey      = 'CDX_DISABLE_DATAGROUPSELECTIONFORNEWOFFLINESUPPORT';
    internal const str EnableCacheBasedQueryKey                              = 'CDX_ENABLE_CACHEBASEDQUERY';
    internal const str EnablePackageGenerationOrderByUniqueClusteredIndexKey = 'CDX_ENABLE_PACKAGEGENERATION_ORDERBY_UNIQUECLUSTEREDINDEX';
    internal const str EnableDateFilterKey                                   = 'CDX_ENABLE_DATEFILTER';
    internal const str EnableDownloadSessionDependencyEnforcementKey         = 'CDX_ENABLE_DOWNLOAD_SESSION_DEPENDENCY_ENFORCEMENT';
    internal const str DisableForceScheduleInBatchKey                        = 'CDX_DISABLE_FORCESCHEDULEINBATCH';
    internal const str DisableCancelingOldUploadSessionsReplacedByRerun      = 'CDX_DISABLE_CANCELING_UPLOADSESSIONS_REPLACEDBY_RERUN';
    internal const str EnableDelayedOfflineDownloadSessionCreationKey        = 'CDX_ENABLE_DELAYED_OFFLINE_DOWNLOAD_SESSION_CREATION';
    internal const str DisablePurgeUnusedUploadPath                          = 'CDX_DISABLE_PURGE_UNUSED_UPLOADPATH';
    internal const str UnusedUploadPathRetentionDays                         = 'CDX_UNUSED_UPLOADPATH_RETENTION_DAYS';
    internal const str DisableChangeTrackingByRange                          = 'CDX_DISABLE_CHANGE_TRACKING_BY_RANGE';
    internal const str DisableSkipExecutionWhenSameJobAlreadyInProgressKey   = 'CDX_DISABLE_SKIP_EXECUTION_WHEN_SAME_JOB_ALREADY_INPROGRESS';
    internal const str DisableTableEventsDuringUploadJob                     = 'CDX_DISABLE_TABLE_EVENTS_DURING_UPLOAD_JOB';
    internal const str EnablePurgeRetailOfflineTerminalStateData             = 'CDX_ENABLE_PURGE_RETAIL_OFFLINE_TERMINAL_STATEDATA';
    internal const str DisableRtsSessionOptimization                         = 'CDX_DISABLE_RTS_SESSION_OPTIMIZATION';
    internal const str DisableSkipExecutionWhenSameUploadSessionAlreadyInProgressKey = 'CDX_DISABLE_SKIP_EXECUTION_WHEN_SAME_UPLOAD_SESSION_ALREADY_INPROGRESS';
    internal const str DisableCheckOfUniqueIndexFielMappingExtensionKey      = 'CDX_DISABLE_UNIQUEINDEX_FIELDMAPPING_EXTENSION_PREVENTION';
    internal const str DisableDisplayUploadSessionWarningMessagesV2Key       = 'CDX_DISABLE_DISPLAY_UPLOAD_SESSION_WARNING_MESSAGE_V2';
    internal const str MaxNumberOfUploadProcessingBatchTasksAllowedKey       = 'CDX_MAX_NUMBER_OF_UPLOADPROCESSING_BATCHTASKS_ALLOWED';
    
    // client side feature control parameters.
    internal const str EnableMergeOnUniqueClusteredIndexKey                 = 'CDX_ENABLE_MERGE_ON_UNIQUE_CLUSTERED_INDEX';
    internal const str EnableOnlineIndexRebuildingKey                       = 'CDX_ENABLE_ONLINE_INDEX_REBUILDING';
    internal const str EnablePreDeltaSyncTableIndexDisablingKey             = 'CDX_ENABLE_PREDELTASYNC_TABLEINDEX_DISABLING';
    internal const str EnablePreFullSyncTableIndexDisablingKey              = 'CDX_ENABLE_PREFULLSYNC_TABLEINDEX_DISABLING';
    internal const str EnableRebuildTableClusteredIndexAfterDelete          = 'CDX_ENABLE_REBUILD_TABLECLUSTEREDINDEX_AFTER_DELETE';
    internal const str RowCountThresholdForTableIndexDisablingKey           = 'CDX_ROWCOUNT_THRESHOLD_FOR_TABLEINDEX_DISABLING';
    internal const str EnableDoubleBufferBasedFullsyncKey                   = 'CDX_ENABLE_DOUBLE_BUFFER_BASED_FULLSYNC';
    internal const str EnableDoubleBufferBasedFullsyncForOnlineKey          = 'CDX_ENABLE_DOUBLE_BUFFER_BASED_FULLSYNC_FOR_ONLINE';
    internal const str EnableDoubleBufferBasedFullsyncForExtTableKey        = 'CDX_ENABLE_DOUBLE_BUFFER_BASED_FULLSYNC_FOR_EXT_TABLE';
    internal const str RowsAffectedThresholdForDoubleBufferBasedFullSyncKey = 'CDX_ROWSAFFECTED_THRESHOLD_FOR_DOUBLE_BUFFER_BASED_FULL_SYNC';
    internal const str DisableCheckUserPermissionDuringCdxExecutionKey      = 'CDX_DISABLE_CHECK_USER_PERMISSION_DURING_CDX_EXECUTION';
    internal const str DisableMatchSubjobToFieldCaseWithFromFieldKey        = 'CDX_DISABLE_MATCH_SUBJOB_FROMFIELD_CASE_WITH_TOFIELD';
    internal const str EnableOnPremCsuIndexCompressionKey                   = 'CDX_ENABLE_ONPREM_CSU_INDEX_COMPRESSION';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>retailInventDimSHA1HashTableLegacyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the <c>RetailInventDimSHA1HashTableLegacy</c> population is enabled.
    /// </summary>
    /// <returns>
    /// True if <c>RetailInventDimSHA1HashTableLegacy</c> population is enabled; otherwise, false.
    /// </returns>
    internal static boolean retailInventDimSHA1HashTableLegacyEnabled()
    {
        return RetailFeatureControl::isSharedFeatureFlightKeySet(EnableRetailInventDimSHA1HashTableLegacyFlightingKey, funcName(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDownloadSessionsMaxResultSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum number of download sessions that can be returned to the CDX clients.
    /// </summary>
    /// <returns>The value indicating the maximum number of download sessions that can be returned to the CDX clients.</returns>
    internal static int getDownloadSessionsMaxResultSize()
    {
        int downloadSessionsMaxResultSize = 0;
        str value = RetailFeatureControl::getSharedFeatureFlightKeyValue(DownloadSessionsMaxResultSizeKey);

        if (isInteger(value))
        {
            downloadSessionsMaxResultSize = str2Int(value);
        }

        // Set the downloadSessionsMaxResultSize to the default limit if it is 0.
        downloadSessionsMaxResultSize = (downloadSessionsMaxResultSize > 0) ? downloadSessionsMaxResultSize : RetailCDXConstants::GetDownloadSessionsMaxResultSize;

        return downloadSessionsMaxResultSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataGroupSelectionForNewOfflineSupportDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not select data group when enabling offline is disabled.
    /// </summary>
    /// <returns>
    /// True if select data group when enabling offline is disabled; otherwise, false.
    /// </returns>
    internal static boolean isDataGroupSelectionForNewOfflineSupportDisabled()
    {
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableDataGroupSelectionForNewOfflineSupportKey, funcName(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCacheBasedQueryEnabledPerChannelSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the cache based query is enabled and generated.
    /// </summary>
    /// <param name = "_channelSchemaRecID">Channel schema rec ID.</param>
    /// <returns>
    /// True if cache based query is enabled and generated; otherwise, false.
    /// </returns>
    internal static boolean isCacheBasedQueryEnabledPerChannelSchema(RefRecId _channelSchemaRecID)
    {
        boolean isCacheBasedQueryEnabled = RetailFeatureControl::isSharedFeatureFlightKeySet(EnableCacheBasedQueryKey, funcName(), true);

        if (isCacheBasedQueryEnabled && !RetailCDXFeatureControl::isCacheBasedQueryInitializedForChannelSchema(_channelSchemaRecID))
        {
            RetailConnChannelSchema channelSchema;
            select channelSchema where channelSchema.RecId == _channelSchemaRecID;

            ApplicationEventSource::EventWriteCDXGenerateQueriesForCacheBasedQueryFeature(channelSchema.SchemaName);

            ttsbegin;
            // if the data needed for the cache based query feature is not available generate the queries on the fly.
            RetailCDXCodeGen::generate(_channelSchemaRecID);
            ttscommit;
        }

        return isCacheBasedQueryEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCacheBasedQueryInitializedForChannelSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the 'commerce scheduler initializer' is already executed and has generated all scheduler data set 
    /// required for running cache based data sync operation is already available or not.
    /// </summary>
    /// <param name = "_channelSchemaRecId">The channel schema record Id.</param>
    /// <returns>True if all required scheduler queries and setting required for enabling cache based data sync are already available; false otherwise.</returns>
    private static boolean isCacheBasedQueryInitializedForChannelSchema(RefRecId _channelSchemaRecId)
    {
        RetailCDXChangeTrackingQueue retailCDXChangeTrackingQueue;

        // the IsForCacheBasedQuery column is added as part of the implementation to enable cache based delta sync.
        // if we have a row in the RetailCDXChangeTrackingQueue table it means the commerce scheduler initializer has run and 
        // the required data setting for enabling cache based sync are already available in the system.
        select firstonly RecId from retailCDXChangeTrackingQueue
            where retailCDXChangeTrackingQueue.RetailConnChannelSchema == _channelSchemaRecId &&
            retailCDXChangeTrackingQueue.IsForCacheBasedQuery == NoYes::Yes;

        return retailCDXChangeTrackingQueue.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPackageGenerationOrderByUniqueClusteredIndexEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the order by unique clustered index when writing data to csv file is enabled.
    /// </summary>
    /// <returns>
    /// True if order by clustered index is enabled; otherwise, false.
    /// </returns>
    internal static boolean isPackageGenerationOrderByUniqueClusteredIndexEnabled()
    {
        boolean defaultValue = RetailCdxPackageGenerationOrderByUniqueClusteredIndexFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(EnablePackageGenerationOrderByUniqueClusteredIndexKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFeatureControlList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of CDX related shared configuration parameters.
    /// </summary>
    /// <returns>The list of CDX related shared configuration parameters.</returns>
    internal static List getFeatureControlList()
    {
        List cdxFeatureControlList = new List(Types::Class);
        
        RetailSharedConfigurationParameters sharedConfigurationParameters;

        const str cdxFeatureFlightKeyPrefix = 'CDX_*';

        while select sharedConfigurationParameters
            where sharedConfigurationParameters.Name like cdxFeatureFlightKeyPrefix
        {
            cdxFeatureControlList.addEnd(new RetailCDXFeatureControlParameter(sharedConfigurationParameters.Name, sharedConfigurationParameters.Value));
        }

        RetailConnParameters retailConnParams = RetailConnParameters::find(false);

        if (retailConnParams.EnableOnPremCsuIndexCompression)
        {
            cdxFeatureControlList.addEnd(new RetailCDXFeatureControlParameter(EnableOnPremCsuIndexCompressionKey, '1'));
        }

        return cdxFeatureControlList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSynchLibraryFeatureControlParameters</Name>
				<Source><![CDATA[
    internal static void initializeSynchLibraryFeatureControlParameters()
    {
        List featureControls = RetailCdxFeatureControl::getFeatureControlList();
        Set featureControlsToDisable = new Set(Types::String);

        featureControlsToDisable.add(RetailCdxFeatureControl::EnableDoubleBufferBasedFullsyncKey);
        featureControlsToDisable.add(RetailCdxFeatureControl::EnableDoubleBufferBasedFullsyncForOnlineKey);
        featureControlsToDisable.add(RetailCdxFeatureControl::EnableDoubleBufferBasedFullsyncForExtTableKey);
        featureControlsToDisable.add(RetailCdxFeatureControl::RowsAffectedThresholdForDoubleBufferBasedFullSyncKey);

        ListIterator iterator = new ListIterator(featureControls);

        // To disable double buffer on IaaS deployments
        while (iterator.more())
        {
            RetailCDXFeatureControlParameter value = iterator.value();
            if (featureControlsToDisable.in(value.name()))
            {
                featureControlsToDisable.remove(value.name());
                value.value('0');
            }
            iterator.next();
        }

        SetEnumerator doubleEnumerator = featureControlsToDisable.getEnumerator();
        while (doubleEnumerator.moveNext())
        {
            featureControls.addEnd(new RetailCDXFeatureControlParameter(doubleEnumerator.current(), '0'));
        }

        FeatureControlParameter[] featureControlParameterList;
        featureControlParameterList = new FeatureControlParameter[featureControls.elements()]();

        int i = 0;

        ListEnumerator featureControlEnumerator = featureControls.getEnumerator();
        while (featureControlEnumerator.moveNext())
        {
            RetailCDXFeatureControlParameter featureParam = featureControlEnumerator.current();
            featureControlParameterList.SetValue(new FeatureControlParameter(featureParam.Name(), featureParam.Value()), i);
            i++;
        }

        // initializes the feature control list to be used by the synchLibrary.
        FeatureControlManager::InitializeFeatureControlData(featureControlParameterList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateFilterEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the date filter is enabled and generated.
    /// </summary>
    /// <returns>
    /// True if date filter is enabled and generated; otherwise, false.
    /// </returns>
    internal static boolean isDateFilterEnabled()
    {
        boolean defaultValue = RetailCdxDateFilterFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(EnableDateFilterKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForceScheduleInBatchDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not force schedule in batch is disabled.
    /// </summary>
    /// <returns>
    /// True if force schedule in batch is disabled; otherwise, false.
    /// </returns>
    internal static boolean isForceScheduleInBatchDisabled()
    {
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableForceScheduleInBatchKey, funcName(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDownloadSessionDependencyEnforcementEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the download session dependency enforcement feature is enabled or not.
    /// </summary>
    /// <returns>
    /// True if the download session dependency enforcement feature is enabled; otherwise, false.
    /// </returns>
    internal static boolean isDownloadSessionDependencyEnforcementEnabled()
    {
        boolean defaultValue = RetailCdxDownloadSessionDependencyEnforcementFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(EnableDownloadSessionDependencyEnforcementKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCancelingOldUploadSessionsReplacedByRerunDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling cancellation of previous upload sessions which are replaced by a newer rerun upload session, that contains a superset of the data contained in the previous upload sessions.
    /// </summary>
    /// <returns>
    /// True if the feature which cancels older upload sessions which are replaced by a rerun session is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsCancelingOldUploadSessionsReplacedByRerunDisabled()
    {
        boolean defaultValue = !RetailCdxCancelingOldUploadSessionsReplacedByRerunFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableCancelingOldUploadSessionsReplacedByRerun, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSkipExecutionWhenSameJobAlreadyInProgressDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether the execution of a scheduler job on a data group is skipped if another instance of the same scheduler job is already running on the same data group.
    /// </summary>
    /// <returns>
    /// True if the feature is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsSkipExecutionWhenSameJobAlreadyInProgressDisabled()
    {
        boolean defaultValue = !RetailCdxSkipExecutionWhenSameJobAlreadyInProgressFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableSkipExecutionWhenSameJobAlreadyInProgressKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDelayedOfflineDownloadSessionCreationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the delayed creation of initial download sessions is enabled.
    /// </summary>
    /// <returns>
    /// True if the delayed creation of initial download sessions for MPOS Device with offline support is enabled; otherwise, false.
    /// </returns>
    internal static boolean isDelayedOfflineDownloadSessionCreationEnabled()
    {
        boolean defaultValue = RetailCdxDelayedOfflineDownloadSessionCreationFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(EnableDelayedOfflineDownloadSessionCreationKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPurgeUnusedUploadPathDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling purging unused upload paths.
    /// </summary>
    /// <returns>
    /// True if the feature which purges unused upload paths is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsPurgeUnusedUploadPathDisabled()
    {
        boolean defaultValue = !RetailCdxPurgeUnusedUploadPathFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisablePurgeUnusedUploadPath, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsPurgeRetailOfflineTerminalStateDataEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling purging retail offline terminal state data.
    /// </summary>
    /// <returns>
    /// True if the feature which purges retail offline terminal state data is enabled; otherwise, false.
    /// </returns>
    internal static boolean IsPurgeRetailOfflineTerminalStateDataEnabled()
    {
        boolean defaultValue = RetailCdxPurgeRetailOfflineTerminalStateDataFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(EnablePurgeRetailOfflineTerminalStateData, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnusedUploadPathRetentionDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets purging unused upload paths retention days.
    /// </summary>
    /// <returns>
    /// The value indicating the retention days for unused upload paths.
    /// </returns>
    internal static int getUnusedUploadPathRetentionDays()
    {
        int rententionDays = 0;
        str value = RetailFeatureControl::getSharedFeatureFlightKeyValue(UnusedUploadPathRetentionDays);

        if (isInteger(value))
        {
            rententionDays = str2Int(value);
        }

        rententionDays = (rententionDays > 0) ? rententionDays : 2;

        return rententionDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeTrackingByRangeDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling change tracking by range.
    /// </summary>
    /// <returns>
    /// True if the feature change tracking by range is disabled; otherwise, false.
    /// </returns>
    internal static boolean isChangeTrackingByRangeDisabled()
    {
        boolean defaultValue = !RetailCdxChangeTrackingByRangeFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableChangeTrackingByRange, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableEventsDuringUploadJobDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag to control calling table events while running upload jobs
    /// </summary>
    /// <returns>
    /// True if the feature executing table events while running upload jobs is disabled; otherwise, false.
    /// </returns>
    internal static boolean isTableEventsDuringUploadJobDisabled()
    {
        boolean defaultValue = !RetailCdxTableEventsDuringUploadJobFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableTableEventsDuringUploadJob, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsRtsSessionOptimizationDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag to control RTS session optimization.
    /// </summary>
    /// <returns>
    /// True if the optimization should not be used (legasy routine without optimization will be used), otherwise false.
    /// </returns>
    internal static boolean IsRtsSessionOptimizationDisabled()
    {
        boolean defaultValue = false; // if the key is not present in the system, RTS session optimization will be used.
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableRtsSessionOptimization, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsSkipExecutionWhenSameUploadSessionAlreadyInProgressDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether the execution of a upload job is skipped if another instance of the same session is already running.
    /// </summary>
    /// <returns>
    /// True if the feature is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsSkipExecutionWhenSameUploadSessionAlreadyInProgressDisabled()
    {
        boolean defaultValue = !RetailCdxSkipExecutionWhenSameUploadSessionAlreadyInProgressFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableSkipExecutionWhenSameUploadSessionAlreadyInProgressKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCheckUserPermissionDuringCdxExecutionDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether the access check will be performed or skipped .
    /// </summary>
    /// <returns>
    /// True if the user access check feature is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsCheckUserPermissionDuringCdxExecutionDisabled()
    {
        boolean defaultValue = true; // if key is present in the system this feature will be disabled, thus disabled by default.
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableCheckUserPermissionDuringCdxExecutionKey , funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsUniqueIndexFieldMappingExtensionPreventionDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether the execution of a upload job is skipped if another instance of the same session is already running.
    /// </summary>
    /// <returns>
    /// True if the feature is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsUniqueIndexFieldMappingExtensionPreventionDisabled()
    {
        boolean defaultValue = !RetailCdxCheckOfUniqueIndexFieldMappingExtensionFlight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableCheckOfUniqueIndexFielMappingExtensionKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsMatchSubjobToFieldCaseWithFromFieldDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling subjob To Fields in same case letters.
    /// </summary>
    /// <returns>
    /// True if the feature is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsMatchSubjobToFieldCaseWithFromFieldDisabled()
    {
        boolean defaultValue = false; // if key is not present in the system this feature will be enabled by default.
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableMatchSubjobToFieldCaseWithFromFieldKey, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsDisplayUploadSessionWarningMessagesDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling the warning messages in the Upload sessions form.
    /// </summary>
    /// <returns>
    /// True if the feature is disabled; otherwise, false.
    /// </returns>
    internal static boolean IsDisplayUploadSessionWarningMessagesDisabled()
    {
        boolean defaultValue = !RetailCdxDisplayUploadSessionWarningMessagesV2Flight::instance().isEnabled();
        return RetailFeatureControl::isSharedFeatureFlightKeySet(DisableDisplayUploadSessionWarningMessagesV2Key, funcName(), defaultValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxNumberOfUploadProcessingBatchTasksAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum number of batch tasks allowed to be created during upload session parallel processing.
    /// </summary>
    /// <returns>
    /// The value indicating the maximum of batch tasks allowed to be created.
    /// </returns>
    /// <remarks>
    /// If a positive number is not specified in the configuration, the maximum number of batch tasks will be set to the default value of 8.
    /// The number of batch tasks created may be less than the value provided in the configuration depending on
    /// the total available AOS threads and the number of sessions being processed. 
    /// </remarks>
    internal static int getMaxNumberOfUploadProcessingBatchTasksAllowed()
    {
        int MaxNumberOfUploadProcessingBatchTasksAllowed = 8;
        str value = RetailFeatureControl::getSharedFeatureFlightKeyValue(MaxNumberOfUploadProcessingBatchTasksAllowedKey);

        if (isInteger(value))
        {
            MaxNumberOfUploadProcessingBatchTasksAllowed = str2Int(value);
        }

        if (MaxNumberOfUploadProcessingBatchTasksAllowed <= 0)
        {
            MaxNumberOfUploadProcessingBatchTasksAllowed = 8;
        }

        return MaxNumberOfUploadProcessingBatchTasksAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOptimizedPropagationEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether or not the commerce data exchange propagated optimization feature is enabled.
    /// </summary>
    /// <returns>
    /// True if the commerce data exchange propagated optimization feature is enabled; otherwise, false.
    /// </returns>
    internal static boolean isOptimizedPropagationEnabled()
    {
        return RetailCDXOptimizedPropagationFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsCrossCompanySetBasedOperationOnTempTableEnabled</Name>
				<Source><![CDATA[
    internal static boolean IsCrossCompanySetBasedOperationOnTempTableEnabled()
    {
        boolean isCrossCompanySetBasedOperationOnTempTableEnabled = false;

        if (RetailCDXCrossCompanySetBasedOperationOnTempTableFlight::instance().isEnabled())
        {
            SysGlobalConfiguration sysGlobalConfiguration;
            select firstonly RecId, Value from sysGlobalConfiguration
                    where sysGlobalConfiguration.Name == 'VOLATILE_ISCROSSCOMPANYSETBASEDOPERATIONONTEMPDBTABLEENABLED';
            if (sysGlobalConfiguration.RecId)
            {
                isCrossCompanySetBasedOperationOnTempTableEnabled = (sysGlobalConfiguration.Value == 'true') ? true : str2Int(sysGlobalConfiguration.Value);
            }
        }

        return isCrossCompanySetBasedOperationOnTempTableEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCacheBasedFullSyncQueryForceOrderEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether force order option should be added to the cache based full sync query.
    /// </summary>
    /// <returns>
    /// True if the feature that adds force order option to the cache based full sync query is enabled; otherwise, false.
    /// </returns>
    internal static boolean isCacheBasedFullSyncQueryForceOrderEnabled()
    {
        return RetailCDXDataFilterQueryJoinOrderOptimizationFlight::instance().isEnabled() &&
               RetailCDXCacheBasedFullSyncQueryForceOrderFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPropagationQueryForceOrderEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether force order option should be added to the delta sync propagation queries.
    /// </summary>
    /// <returns>
    /// True if the feature that adds force order option to the delta sync propagation queries is enabled; otherwise, false.
    /// </returns>
    internal static boolean isPropagationQueryForceOrderEnabled()
    {
        return RetailCDXDataFilterQueryJoinOrderOptimizationFlight::instance().isEnabled() &&
               RetailCDXDataFilterPropagationQueryForceOrderFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNodeLevelChangeSelectorQueryForceOrderEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Feature flag controlling whether force order option should be added to the delta sync node level change selector queries.
    /// </summary>
    /// <returns>
    /// True if the feature that adds force order option to the delta sync node level change selector queries is enabled; otherwise, false.
    /// </returns>
    internal static boolean isNodeLevelChangeSelectorQueryForceOrderEnabled()
    {
        return RetailCDXDataFilterQueryJoinOrderOptimizationFlight::instance().isEnabled() &&
               RetailCDXNodeLevelChangeSelectorQueryForceOrderFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>