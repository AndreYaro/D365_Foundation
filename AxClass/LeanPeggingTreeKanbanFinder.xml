<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanPeggingTreeKanbanFinder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Finds a sub-node of type Kanban.
/// </summary>
/// <remarks>
/// Utilizes a breadth-first search traverser.
/// </remarks>
class LeanPeggingTreeKanbanFinder
{
    ReqPeggingTreeTraverser traverser;
    ReqPeggingTreeNode      foundNode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>LeanPeggingTreeKanbanFinder</c> class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        if (!traverser)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        traverser.NodeVisited += eventhandler(this.onNodeVisited);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onNodeVisited</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines an event that is raised when the tree node is visited.
    /// </summary>
    /// <param name="sender">
    /// The sender object of the event.
    /// </param>
    /// <param name="_args">
    /// The event arguments.
    /// </param>
    /// <remarks>
    /// Using the event arguments, the traversal could be stopped.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void onNodeVisited(ReqPeggingTreeTraverser sender, ReqPeggingTreeEventArgs _args)
    {
        ReqPeggingTreeNode currNode = _args.parmCurrentNode();

        if (LeanPeggedEventType::Kanban == currNode.eventType())
        {
            foundNode = currNode;
            _args.parmStopTraversing(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFoundNode</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReqPeggingTreeNode parmFoundNode(ReqPeggingTreeNode _foundNode = foundNode)
    {
        foundNode = _foundNode;

        return foundNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTraverser</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public ReqPeggingTreeTraverser parmTraverser(ReqPeggingTreeTraverser _traverser = traverser)
    {
        traverser = _traverser;

        return traverser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the traversal of the tree.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        traverser.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanPeggingTreeKanbanFinder construct()
    {
        return new LeanPeggingTreeKanbanFinder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LeanPeggingTreeKanbanFinder</c> class.
    /// </summary>
    /// <param name="_peggingTree">
    /// The tree to be traversed.
    /// </param>
    /// <param name="_startingNode">
    /// The starting node.
    /// </param>
    /// <returns>
    /// An instance of the <c>LeanPeggingTreeKanbanFinder</c> class.
    /// </returns>
    /// <remarks>
    /// This is the default constructor for the <c>LeanPeggingTreeKanbanFinder</c> class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanPeggingTreeKanbanFinder newStandard(ReqPeggingTree _peggingTree, ReqPeggingTreeNode _startingNode)
    {
        ReqPeggingTreeTraverser         traverser = ReqPeggingTreeTraverser::newStandard(_peggingTree,
                                                                                         _startingNode);
        LeanPeggingTreeKanbanFinder     result = LeanPeggingTreeKanbanFinder::construct();
        result.parmTraverser(traverser);
        result.init();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>