<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDimensionSetBasedResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetDimensionSetBasedResolver
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resolveForLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a set-based resolution of asset dimensions for existing <c>LedgerJournalTrans</c> records.
    /// </summary>
    /// <remarks>
    /// Uses the <c>AssetId</c> field on the <c>LedgerJournalTrans_Asset</c> record for the resolve.  This method
    /// is limited to resolving for the current company only supports the primary <c>LedgerDimension</c> on <c>LedgerJournalTrans</c>.
    /// </remarks>
    public static void resolveForLedgerJournalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        ExtendedDataTypeName datatype = extendedTypeStr(DimensionDynamicAccount);
        DimensionDataEntitySFKCacheTmp cacheTmp;

        // Get the list of unique AssetId's to resolve.
        while select RecId from ledgerJournalTrans
            where ledgerJournalTrans.LedgerDimension == 0
            join Company, AssetId from ledgerJournalTransAsset
                group by ledgerJournalTransAsset.Company, ledgerJournalTransAsset.AssetId
                where ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                   && ledgerJournalTransAsset.AssetId != ''
        {
            cacheTmp.IntegrationString = ledgerJournalTransAsset.AssetId;
            cacheTmp.HierarchyType = DimensionHierarchyType::FixedAsset;
            cacheTmp.EnumValue = enum2int(LedgerJournalACType::FixedAssets);
            cacheTmp.ExtendedDataType = datatype;
            cacheTmp.ResolvedReference = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(cacheTmp.IntegrationString, LedgerJournalACType::FixedAssets);
            cacheTmp.insert();
        }

        ledgerJournalTrans.skipDatabaseLog(true);
        ledgerJournalTrans.skipDataMethods(true);
        ledgerJournalTrans.skipEvents(true);
        ledgerJournalTrans.skipAosValidation(true);

        update_recordset ledgerJournalTrans
            setting LedgerDimension = cacheTmp.ResolvedReference
                where ledgerJournalTrans.LedgerDimension == 0
                   && ledgerJournalTrans.Company == curExt()
            join ledgerJournalTransAsset
                where ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                   && ledgerJournalTransAsset.AssetId != ''
            join cacheTmp
                where cacheTmp.IntegrationString == ledgerJournalTransAsset.AssetId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>