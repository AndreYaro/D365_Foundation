<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventTransArchiveUIBuilder</c> class is customizing the UI for inventory transaction archive functionality,
///     so as to display the lookups for "from date" and "to date".
/// </summary>
public class InventTransArchiveUIBuilder extends SysOperationAutomaticUIBuilder
{
    private FormControlName fromDateFieldName;
    private FormControlName toDateFieldName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>lookupClosedPeriodFromDate</Name>
				<Source><![CDATA[
    private void lookupClosedPeriodFromDate(FormDateControl _control)
    {
        this.lookupClosedPeriodDate(_control, _control.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClosedPeriodToDate</Name>
				<Source><![CDATA[
    private void lookupClosedPeriodToDate(FormDateControl _control)
    {
        this.lookupClosedPeriodDate(_control, _control.dateValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClosedPeriodDate</Name>
				<Source><![CDATA[
    private void lookupClosedPeriodDate(FormDateControl _control, TransDate _transDate)
    {        
        FiscalCalendar fiscalCalendar = FiscalCalendar::find(Ledger::fiscalCalendar(CompanyInfo::current()));

        if (fiscalCalendar.RecId)
        {
            SysTableLookup sysTableLookup = SysTablelookup::newParameters(tableNum(FiscalCalendarPeriod), _control, true);
            Query          query = new Query();

            // Add ranges to only show fiscal calendar periods for the specified date
            QueryBuildDataSource queryBuildFiscalCalendarPeriod = query.addDataSource(tableNum(FiscalCalendarPeriod));
            queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, FiscalCalendar)).value(SysQuery::value(fiscalCalendar.RecId));
           
            if (_transDate)
            {
                FiscalCalendarPeriod fiscalCalendarPeriod = FiscalCalendarPeriod::findPeriodByCalendarDate(fiscalCalendar.RecId, _transDate);

                if (_control.name() == fromDateFieldName)
                {
                    // Get the closing period after from date
                    queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, StartDate)).value(
                        SysQuery::range(fiscalCalendarPeriod.StartDate ? fiscalCalendarPeriod.StartDate : _transDate,
                            dateMax()));
                }

                if (_control.name() == toDateFieldName)
                {
                    // Get the closing period before to date
                    queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, EndDate)).value(
                        SysQuery::range(dateNull(),
                            fiscalCalendarPeriod.EndDate ? fiscalCalendarPeriod.EndDate : _transDate));
                }
            }

            queryBuildFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));

            // Add range to only return closing periods
            QueryBuildDataSource queryBuildLedgerFiscalCalendarPeriod = queryBuildFiscalCalendarPeriod.addDataSource(tableNum(LedgerFiscalCalendarPeriod));
            queryBuildLedgerFiscalCalendarPeriod.joinMode(JoinMode::ExistsJoin);
            queryBuildLedgerFiscalCalendarPeriod.relations(true);

            queryBuildLedgerFiscalCalendarPeriod.addRange(fieldNum(LedgerFiscalCalendarPeriod, Status)).value(SysQuery::value(FiscalPeriodStatus::Closed));
            queryBuildLedgerFiscalCalendarPeriod.addRange(fieldNum(LedgerFiscalCalendarPeriod, Status)).value(SysQuery::value(FiscalPeriodStatus::OnHold));

            queryBuildLedgerFiscalCalendarPeriod.addRange(fieldNum(LedgerFiscalCalendarPeriod, Ledger)).value(SysQuery::value(Ledger::current()));

            // Sort by StartDate
            queryBuildFiscalCalendarPeriod.addSortField(fieldNum(FiscalCalendarPeriod, StartDate));
           
             // Specify fields to show on the lookup
            if (_control.name() == fromDateFieldName)
            {
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate));
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));
            }
            else
            {
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, EndDate));
                sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, StartDate)); 
            }
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Name));
            sysTableLookup.addLookupfield(fieldNum(FiscalCalendarPeriod, Type)); 

            sysTableLookup.parmQuery(query);

            sysTableLookup.performFormLookup();
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers override methods for dialog controls and handles lookup functioinality.
    /// </summary>
    public void postBuild()
    {
        DialogField fromDateField;
        DialogField toDateField;
        DialogField bundleSizeField;

        super();

        fromDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventTransArchiveContract, parmFromDate));
        toDateField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventTransArchiveContract, parmToDate));
        bundleSizeField = this.bindInfo().getDialogField(this.dataContractObject(), methodStr(InventTransArchiveContract, parmBundleSize));

        fromDateFieldName = fromDateField.name();
        toDateFieldName = toDateField.name();

        fromDateField.registerOverrideMethod(methodStr(FormDateControl, lookup), methodStr(InventTransArchiveUIBuilder, lookupClosedPeriodFromDate), this);
        toDateField.registerOverrideMethod(methodStr(FormDateControl, lookup), methodStr(InventTransArchiveUIBuilder, lookupClosedPeriodToDate), this);

        fromDateField.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(InventTransArchiveUIBuilder, fromToDateModified), this);
        toDateField.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(InventTransArchiveUIBuilder, fromToDateModified), this);

        bundleSizeField.registerOverrideMethod(methodStr(FormIntControl, modified), methodStr(InventTransArchiveUIBuilder, bundleSizeModified), this);
        bundleSizeField.visible(InventTransArchiveUIBundleSizeFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromToDateModified</Name>
				<Source><![CDATA[
    public boolean fromToDateModified(FormDateControl _formDateControl)
    {
        boolean ret = _formDateControl.modified();

        if (ret && _formDateControl.dateValue() != dateNull())
        {
            FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(CompanyInfoHelper::fiscalCalendarRecId(), _formDateControl.dateValue(), FiscalPeriodType::Operating);
            if (_formDateControl.name() == fromDateFieldName)
            {
                _formDateControl.dateValue(fiscalCalendarPeriod.StartDate);
            }

            if (_formDateControl.name() == toDateFieldName)
            {
                _formDateControl.dateValue(fiscalCalendarPeriod.EndDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundleSizeModified</Name>
				<Source><![CDATA[
    public boolean bundleSizeModified(FormIntControl _formIntControl)
    {
        boolean ret = _formIntControl.modified();

        if (ret && _formIntControl.value() <= 0)
        {
            _formIntControl.value(InventTransArchiveTaskBundleHelper::defaultBundleSize);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>