<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocDirTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocDirTableForm</c> class contains the business logic of the <c>WHSLocDirTable</c> form.
/// </summary>
public class WHSLocDirTableForm
{
    private int maxSeq;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkEnableRoundUpToHandlingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the RoundUpToHandlingUnit control should be enabled.
    /// </summary>
    /// <param name = "_activeWHSLocDirLine">The active buffer.</param>
    /// <returns>true if the field can be enabled; otherwise, false.</returns>
    public boolean checkEnableRoundUpToHandlingUnit(WHSLocDirLine _activeWHSLocDirLine)
    {
        if (!_activeWHSLocDirLine.RestrictByUOM)
        {
            return false;
        }

        WHSLocDirTable locDirTable = WHSLocDirTable::findByRecId(_activeWHSLocDirLine.RefRecId);

        return locDirTable.isRestrictingUnitQuantityCalculationRoundUpAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnableImmediateReplenishmentTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if immediate replenishment template ID field should be visible to the user.
    /// </summary>
    /// <param name = "_activeLocDirTable">The active record of <c>WHSLocDirTable</c>.</param>
    /// <returns>true if the field should be visible and enabled; otherwise, false.</returns>
    public boolean checkEnableImmediateReplenishmentTemplateId(WHSLocDirTable _activeLocDirTable)
    {
        if (_activeLocDirTable &&
            _activeLocDirTable.isImmediateReplenishmentSupported())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplenishmentAllowed</Name>
				<Source><![CDATA[
    private boolean isReplenishmentAllowed(WHSWorkTransType _workTransType)
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isReplenishmentAllowed();

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationStockingLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check location stocking limit in case stratedy "Round up to full LP" or "Round up to the full LP and FEFO batch" is choosen on replenishment pick.
    /// </summary>
    /// <param name = "_locDirTable">Location directive.</param>
    /// <param name = "_locDirAction">Location directive action.</param>
    [Hookable(false)]
    internal void validateLocationStockingLimit(WHSLocDirTable _locDirTable, WHSLocDirAction _locDirAction)
    {
        if (_locDirTable.WorkTransType      == WHSWorkTransType::Replenishment
            && _locDirTable.WorkType        == WHSWorkType::Pick
            && (_locDirAction.LocDirStrategy    == WHSLocDirStrategy::LPLocate
                || _locDirAction.LocDirStrategy == WHSLocDirStrategy::LPLocateAndFEFOBatch))
        {
            if (WHSLocationLimitForm::existLocationLimit(_locDirTable.InventLocationId))
            {
                warning(strFmt("@WAX:ReplenishmentStrategyWithStockingLimitWarning", "@WAX4230", "@WAX4231"));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonCopy_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Copies a location directive when Copy button is clicked.
	/// </summary>
	/// <param name="_whsWorkDirTable">
	/// The location directive record to be copied.
	/// </param>
    /// <returns>
    /// The copied location directive.
    /// </returns>
    WHSLocDirTable buttonCopy_clicked(WHSLocDirTable _whsWorkDirTable)
    {
        return this.copyWithWhsLocDirCopyDialog(_whsWorkDirTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyWithWhsLocDirCopyDialog</Name>
				<Source><![CDATA[
    private WHSLocDirTable copyWithWhsLocDirCopyDialog(WHSLocDirTable _whsWorkDirTable)
    {
        Args args = new Args();
        args.name(formStr(WHSLocDirCopyDialog));
        args.record(_whsWorkDirTable);

        FormRun locDirCopyDialog = classfactory.formRunClass(args);
        locDirCopyDialog.init();
        locDirCopyDialog.run();
        locDirCopyDialog.wait();
        
        WHSLocDirTable locationDirectiveCopy = locDirCopyDialog.locationDirectiveCopy();
        return locationDirectiveCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWHSWarehouses</Name>
				<Source><![CDATA[
    private void lookupWHSWarehouses(FormStringControl _ctrl)
    {
        InventLocation::lookupWHSWarehouses(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumDownLine</Name>
				<Source><![CDATA[
  	/// <summary>
	/// Moves location directive line one step down.
	/// </summary>
	/// <param name="_locDirLineDS">
	/// Form data source that contains selected line.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    void setNumDownLine(FormDataSource _locDirLineDS)
    {
        WHSLocDirLine locDirLineLocal = _locDirLineDS.cursor();
        locDirLineLocal               = locDirLineLocal.sortingNoArrange(false);

        _locDirLineDS.executeQuery();
        _locDirLineDS.positionToRecord(locDirLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumDownLocation</Name>
				<Source><![CDATA[
	/// <summary>
	/// Moves location directive one step down.
	/// </summary>
	/// <param name="_whsLocDirTableDS">
	/// Form data source that contains selected line.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    void setNumDownLocation(FormDataSource _whsLocDirTableDS)
    {
        WHSLocDirTable locDirTableLocal = _whsLocDirTableDS.cursor();
        locDirTableLocal                = locDirTableLocal.sortingNoArrange(false);

        _whsLocDirTableDS.executeQuery();
        _whsLocDirTableDS.positionToRecord(locDirTableLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumDownLocDirAction</Name>
				<Source><![CDATA[
	/// <summary>
	/// Moves location directive action record one step down in the form.
	/// </summary>
	/// <param name="_whsLocDirAction">
	/// Location directive action record to be moved.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    void setNumDownLocDirAction(WHSLocDirAction _whsLocDirAction)
    {
        if (!_whsLocDirAction.LocDirName)
        {
            warning("@WAX3095");
            return;
        }

        int desiredNum = _whsLocDirAction.LocSeqNum + 1;
        WHSFormHelper::moveRecordIntoSequence(_whsLocDirAction, desiredNum, fieldStr(WHSLocDirAction, LocSeqNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumUpLine</Name>
				<Source><![CDATA[
	/// <summary>
	/// Moves location directive line one step up.
	/// </summary>
	/// <param name="_locDirLineDS">
	/// Form data source that contains selected line.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    void setNumUpLine(FormDataSource _locDirLineDS)
    {
        WHSLocDirLine locDirLineLocal = _locDirLineDS.cursor();
        locDirLineLocal               = locDirLineLocal.sortingNoArrange(true);

        _locDirLineDS.executeQuery();
        _locDirLineDS.positionToRecord(locDirLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumUpLocation</Name>
				<Source><![CDATA[
	/// <summary>
	/// Moves location directive one step up.
	/// </summary>
	/// <param name="_whsLocDirTableDS">
	/// Form data source that contains selected line.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    void setNumUpLocation(FormDataSource _whsLocDirTableDS)
    {
        WHSLocDirTable locDirTableLocal = _whsLocDirTableDS.cursor();
        locDirTableLocal                = locDirTableLocal.sortingNoArrange(true);

        _whsLocDirTableDS.executeQuery();
        _whsLocDirTableDS.positionToRecord(locDirTableLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNumUpLocDirAction</Name>
				<Source><![CDATA[
	/// <summary>
	/// Moves location directive action record one step up in the form.
	/// </summary>
	/// <param name="_whsLocDirAction">
	/// Location directive action record to be moved.
    /// </param>
    [SysObsolete('Use WHSSequenceNumberMoverForm for Move up/down buttons logic', false, 13\09\2022)]
    void setNumUpLocDirAction(WHSLocDirAction _whsLocDirAction)
    {
        if (!_whsLocDirAction.LocDirName)
        {
            warning("@WAX3095");
            return;
        }

        int desiredNum = max(1, _whsLocDirAction.LocSeqNum - 1);
        WHSFormHelper::moveRecordIntoSequence(_whsLocDirAction, desiredNum, fieldStr(WHSLocDirAction, LocSeqNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocDirAction_initValue</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initializes <c>WHSLocDirAction</c> record with location directives query and sequence number.
	/// </summary>
	/// <param name="_whsLocDirTable">
	/// The location directive that action is bound to.
	/// </param>
	/// <param name="_whsLocDirAction">
	/// The <c>WHSLocDirAction</c> record that is initialized.
	/// </param>
	/// <returns>
	/// Location directive query of the action.
	/// </returns>
    WHSLocDirQuery whsLocDirAction_initValue(WHSLocDirTable _whsLocDirTable,
        WHSLocDirAction _whsLocDirAction)
    {
        WHSLocDirAction  locDirAction;

        _whsLocDirAction.initLocationQuery(_whsLocDirTable.RecId);

        select firstonly locDirAction order by locDirAction.LocSeqNum desc
            where locDirAction.RefRecId == _whsLocDirAction.RefRecId;
        _whsLocDirAction.LocSeqNum = locDirAction.LocSeqNum + 1 ;

        return _whsLocDirAction.LocDirQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocDirLine_initValue</Name>
				<Source><![CDATA[
    WHSLocSeqNum whsLocDirLine_initValue(WHSLocDirLine _whsLocDirLine)
    {
        if (maxSeq == 0)
        {
            WHSLocDirLine  locDirLine;

            select maxof(LocSeqNum) from locDirLine
                where locDirLine.RefRecId == _whsLocDirLine.RefRecId;

            maxSeq = locDirLine.LocSeqNum;
        }

        maxSeq++;

        return maxSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearLocDirLineMaxSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the maximum sequence number of the location directive line records to zero.
    /// If a new line will be created the maximum sequence number will be calculated again.
    /// </summary>
    public void clearLocDirLineMaxSeq()
    {
        maxSeq = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLocDirTable_initValue</Name>
				<Source><![CDATA[
	/// <summary>
	/// Initializes a <c>WHSLocDirTable</c> record.
	/// </summary>
	/// <param name="_whsLocDirTable">
	/// The record to be initialized.
	/// </param>
	/// <returns>
	/// Sequence number set to the record.
	/// </returns>
    WHSLocSeqNum whsLocDirTable_initValue(WHSLocDirTable _whsLocDirTable)
    {
        WHSLocDirTable  locDirTable;

        select firstOnly LocSeqNum, MultiSKU, WorkTransType from locDirTable
            order by locDirTable.LocSeqNum desc
            where locDirTable.WorkTransType == _whsLocDirTable.WorkTransType;

        _whsLocDirTable.LocSeqNum = locDirTable.LocSeqNum + 1;

        _whsLocDirTable.initQueryFromWorkTransType(_whsLocDirTable.WorkTransType, _whsLocDirTable.MultiSKU);

        return locDirTable.LocSeqNum + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeWHSLocDirAction</Name>
				<Source><![CDATA[
	/// <summary>
	/// Updates query of the location directive action record.
	/// </summary>
	/// <param name="_whsLocDirAction">
	/// Location directive action record to be updated.
	/// </param>
	/// <param name="_query">
	/// Query to be set to location directive record.
	/// </param>
    void writeWHSLocDirAction(WHSLocDirAction _whsLocDirAction, WHSLocDirQuery _query)
    {
        _whsLocDirAction.LocDirQuery = _query;

        if (_whsLocDirAction.UseDimOfInventSum == WHSLocDirActionQueryUseDimOfInventSum::Unknown
            && WHSLocDirAction::useInventoryDimensionOfInventSum())
        {
            QueryRun queryRun = new QueryRun(_query);

            if (queryRun
                && WHSLocDirAction::useInventoryDimensionOfInventSumQuery(queryRun.query()))
            {
                _whsLocDirAction.UseDimOfInventSum = WHSLocDirActionQueryUseDimOfInventSum::Yes;
            }
        }

        _whsLocDirAction.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDispositionCodeEnabledState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable the disposition code based on the applicable disposition code
    /// </summary>
    public void setDispositionCodeEnabledState(FormDataSource _whsLocDirTable_ds)
    {
        WHSLocDirTable whsLocDirTable = _whsLocDirTable_ds.cursor() as WHSLocDirTable;

        if (whsLocDirTable.ApplicableDispositionCodeRule == WHSApplicableDispositionCodeRule::ExactMatch)
        {
            _whsLocDirTable_ds.object(fieldnum(WHSLocDirTable, DispositionCode)).enabled(true);
        }
        else if(whsLocDirTable.ApplicableDispositionCodeRule == WHSApplicableDispositionCodeRule::AnyDispositionCode)
        {
            _whsLocDirTable_ds.object(fieldnum(WHSLocDirTable, DispositionCode)).enabled(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>