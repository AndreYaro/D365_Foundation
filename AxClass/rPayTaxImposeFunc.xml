<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayTaxImposeFunc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements folder functor to calculate tax based on employee tax state.
/// </summary>
class rPayTaxImposeFunc implements IRPayTaxCalcFunctor
{
    RPayTaxCalcState        calcState;
    RPayTaxCalcContext      calcContext;
    RPayEmplTax             emplTax;
    RPayTaxIncomeGroupTable incomeGroupTable;
    RPayTaxEmplTrans        taxTransCalc;
    RPayTaxEmplSum          taxSumCalc;

    Query                   taxSumQ, payTransQ, taxTransQ;
    QueryBuildDataSource    qbdsSum, qbdsPayTrans, qbdsTaxTrans;

    QueryBuildRange         qbrTaxSumPayPeriod, qbrTaxSumCorPeriod, qbrTaxSumEmplId,
                            qbrTaxSumSource, qbrTaxSumGroupCode;
    QueryBuildRange         qbrPayTransPayPeriod, qbrPayTransCorPeriod, qbrPayTransEmplId,
                            qbrPayTransIncomeCode, qbrPayTransFamily, qbrPayTransFund;

    ReportPeriod_RU         payPeriodCurrent, payPeriodFrom, corPeriodPrev, corPeriodFrom;

    RecId                   taxSumCalcRecId;

    Map                     childrenList;
    Counter                 childCount;
    Set                     calcDeductionRel;

    RPayAmount              dedTotalAmount2Refund;

    #localmacro.ChildValue
        relativeRecId,
        calculate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>apply</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies arguments and context.
    /// </summary>
    /// <param name="_args">
    /// The arguments.
    /// </param>
    /// <param name="_context">
    /// The context.
    /// </param>
    /// <returns>
    /// The <c>Object</c> with calculation state.
    /// </returns>
    public Object apply(anytype _args, Object _context)
    {
        RPayTaxCalcFoldContract foldContract;
        Object obj;

        Debug::assert(typeOf(_args) == Types::Class);

        obj = _args;
        foldContract = obj as RPayTaxCalcFoldContract;

        Debug::assert(foldContract != null);

        calcState = foldContract.parmCalcState();

        calcContext = _context as RPayTaxCalcContext;
        Debug::assert(calcContext != null);

        emplTax = foldContract.parmListItem();

        if (year(calcState.parmPrevPayPeriod()) < year(emplTax.parmPayPeriod()))
        {
            calcState.resetInterChngYearData();
        }

        this.initFun();
        this.calc();

        calcState.parmPrevPayPeriod(emplTax.parmPayPeriod());

        return calcState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the calculation.
    /// </summary>
    protected void calc()
    {
        RPayTaxEmplSum taxSumYTD, taxSumCurrent;
        RPayAmount amountReverse;

        while select incomeGroupTable
                order by RpayTaxIncomeGroupCode
                where incomeGroupTable.EmplTaxStatus == emplTax.taxStatus()
        {
            taxSumCalcRecId = 0;

            taxSumYTD.data(this.taxBaseDedYTD());
            taxSumCurrent.data(this.taxBaseDed());

            if (taxSumCalcRecId)
            {
                this.calcTaxAmount(taxSumYTD, taxSumCurrent);
            }
            else
            {
                //nothing to impose but create zero based record as pay trans exist that potentially means full amount was reversed
                amountReverse = this.incomeTransAmount(emplTax.parmPayPeriod(),
                                                       emplTax.parmPayPeriod(),
                                                       payPeriodCurrent,
                                                       payPeriodCurrent,
                                                       incomeGroupTable.Fund);
                if (amountReverse)
                {
                    this.findOrCreateTaxSumCalc();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the deduction.
    /// </summary>
    /// <param name="_deductionTable">
    /// The deduction, discount, and relief codes table record.
    /// </param>
    /// <param name="_incomeCurPeriodAmount">
    /// The current amount for the period.
    /// </param>
    /// <param name="_incomeCode">
    /// The income code.
    /// </param>
    /// <param name="_familyRecId">
    /// The relative table record reference.
    /// </param>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    protected RPayAmount calcDeduction(RPayTaxDeductionTable    _deductionTable,
                                       RPayAmount               _incomeCurPeriodAmount,
                                       RpayTaxIncomeCode        _incomeCode  = 0,
                                       RHRMFamilyRecId          _familyRecId = 0)
    {
        RPayTaxEmplDeduction    taxEmplDeduction;
        RPayAmount              dedAmount;

        taxEmplDeduction = RPayTaxEmplDeduction::construct(_deductionTable, emplTax, _incomeCode, _familyRecId);

        if (_deductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Standard)
        {
            if (_deductionTable.RpayPeriodFrequence == RPayRatePeriodFrequency::Month && !emplTax.isEmployed())
            {
                return 0;
            }
            else
            {
                dedAmount = this.calcDeductionStandard(taxEmplDeduction, _familyRecId);
            }
        }
        else
        {
            dedAmount = this.calcDeductionOther(taxEmplDeduction, _incomeCode, _incomeCurPeriodAmount, _familyRecId);
        }

        if (dedAmount && _deductionTable.TaxRefundAllowed)
        {
            dedTotalAmount2Refund += dedAmount;
        }

        return dedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductionOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates other deductions.
    /// </summary>
    /// <param name="_taxEmplDeduction">
    /// The <c>RPayTaxEmplDeduction</c> class instance.
    /// </param>
    /// <param name="_incomeCode">
    /// The income code.
    /// </param>
    /// <param name="_incomeCurPeriodAmount">
    /// The current period amount.
    /// </param>
    /// <param name="_familyRecId">
    /// The relative table record reference.
    /// </param>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    protected RPayAmount calcDeductionOther(RPayTaxEmplDeduction _taxEmplDeduction, RpayTaxIncomeCode _incomeCode, RPayAmount _incomeCurPeriodAmount, RHRMFamilyRecId _familyRecId = 0)
    {
        RPayTaxEmplSum   taxEmplSum;
        RPayTaxEmplTrans taxEmplTrans;

        RPayAmount yearIncomeAmount,
                   dedRightAmount,
                   yearIncomeAmountClear,
                   deductionAmount,
                   dedRightAmountNotRealized,
                   prevYearsStoredIncome,
                   prevYearsStoredDed,
                   prevYearsSessionIncome;

        if (_taxEmplDeduction.deductionTable().RpayPeriodFrequence == RPayRatePeriodFrequency::None ||
            _taxEmplDeduction.deductionTable().RpayPeriodFrequence == RPayRatePeriodFrequency::Unlimeted)
        {
            //calculate stored amounts before calculation session start date
            select sum(Amount), sum(Deduction) from taxEmplTrans
                where taxEmplTrans.RpayTaxIncDedCode        == _incomeCode                                               &&
                        taxEmplTrans.RpayTaxDeductionCode   == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode   &&
                        taxEmplTrans.RpayTaxType            == RpayTaxType::Income                                       &&
                        (taxEmplTrans.FamilyRecId           == _familyRecId || !_familyRecId)
                    exists join taxEmplSum
                        where   taxEmplSum.RecId           == taxEmplTrans.TaxSumRecId                        &&
                                taxEmplSum.EmplId          == emplTax.parmEmplId()                            &&
                                taxEmplSum.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                                taxEmplSum.CorrectedPeriod <= _taxEmplDeduction.ariseEndDate()                &&
                                taxEmplSum.PayPeriod       <  emplTax.parmSessionStartDate()                  &&
                                taxEmplSum.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

            prevYearsStoredIncome = taxEmplTrans.Amount;
            prevYearsStoredDed    = taxEmplTrans.Deduction;

            //calculate income amount already calculated in current session in previous year
            select sum(Amount) from taxTransCalc
                where taxTransCalc.RpayTaxIncDedCode        == _incomeCode                                              &&
                        taxTransCalc.RpayTaxDeductionCode   == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode  &&
                        taxTransCalc.RpayTaxType            == RpayTaxType::Income                                      &&
                       (taxTransCalc.FamilyRecId            == _familyRecId || !_familyRecId)                           &&
                        taxTransCalc.Manual                 == false
                    exists join taxSumCalc
                        where   taxSumCalc.RecId           == taxTransCalc.TaxSumRecId                        &&
                                taxSumCalc.EmplId          == emplTax.parmEmplId()                            &&
                                taxSumCalc.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                                taxSumCalc.CorrectedPeriod <  corPeriodFrom                                   &&
                                taxSumCalc.PayPeriod       <= payPeriodCurrent                                &&
                                taxSumCalc.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

            prevYearsSessionIncome = taxTransCalc.Amount;
        }

        //calc year income & deductions
        select sum(Amount), sum(Deduction) from taxTransCalc
            where taxTransCalc.RpayTaxIncDedCode        == _incomeCode                                              &&
                    taxTransCalc.RpayTaxDeductionCode   == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode  &&
                    taxTransCalc.RpayTaxType            == RpayTaxType::Income                                      &&
                   (taxTransCalc.FamilyRecId            == _familyRecId || !_familyRecId)
                exists join taxSumCalc
                    where taxSumCalc.RecId             == taxTransCalc.TaxSumRecId                        &&
                            taxSumCalc.EmplId          == emplTax.parmEmplId()                            &&
                            taxSumCalc.CorrectedPeriod >= corPeriodFrom                                   &&
                            taxSumCalc.CorrectedPeriod <  emplTax.parmPayPeriod()                         &&
                            taxSumCalc.PayPeriod       <= payPeriodCurrent                                &&
                            taxSumCalc.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

        yearIncomeAmount            = taxTransCalc.Amount + _incomeCurPeriodAmount;
        yearIncomeAmountClear       = yearIncomeAmount - taxTransCalc.Deduction;
        dedRightAmountNotRealized   = calcState.removeDeductionAmountNotRealized(_taxEmplDeduction.deductionTable().RpayTaxDeductionCode);
        dedRightAmount              = _taxEmplDeduction.calcAmountOfRight(yearIncomeAmount + prevYearsStoredIncome + prevYearsSessionIncome) + dedRightAmountNotRealized;

        if (dedRightAmount > 0)
        {
            //calculate used deduction in current year
            select sum(Deduction) from taxTransCalc
                where taxTransCalc.RpayTaxIncDedCode        == _incomeCode                                              &&
                        taxTransCalc.RpayTaxDeductionCode   == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode  &&
                        taxTransCalc.RpayTaxType            == RpayTaxType::Income                                      &&
                       (taxTransCalc.FamilyRecId            == _familyRecId || !_familyRecId)                           &&
                        taxTransCalc.Manual                 == false
                    exists join taxSumCalc
                        where   taxSumCalc.RecId           == taxTransCalc.TaxSumRecId                        &&
                                taxSumCalc.EmplId          == emplTax.parmEmplId()                            &&
                                taxSumCalc.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                                taxSumCalc.CorrectedPeriod <= _taxEmplDeduction.ariseEndDate()                &&
                                taxSumCalc.PayPeriod       <= payPeriodCurrent                                &&
                                taxSumCalc.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

            select sum(Deduction) from taxEmplTrans
                where taxEmplTrans.RpayTaxIncDedCode        == _incomeCode                                               &&
                        taxEmplTrans.RpayTaxDeductionCode   == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode   &&
                        taxEmplTrans.RpayTaxType            == RpayTaxType::Income                                       &&
                       (taxEmplTrans.FamilyRecId            == _familyRecId || !_familyRecId)                            &&
                        taxEmplTrans.Manual                 == true
                    exists join taxEmplSum
                        where   taxEmplSum.RecId           == taxEmplTrans.TaxSumRecId                        &&
                                taxEmplSum.EmplId          == emplTax.parmEmplId()                            &&
                                taxEmplSum.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                                taxEmplSum.CorrectedPeriod <= _taxEmplDeduction.ariseEndDate()                &&
                                taxEmplSum.PayPeriod       <= payPeriodCurrent                                &&
                                taxEmplSum.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

            dedRightAmount -= taxTransCalc.Deduction + prevYearsStoredDed + taxEmplTrans.Deduction;

            if (dedRightAmount > 0)
            {
                if (yearIncomeAmountClear > 0)
                {
                    deductionAmount = min(dedRightAmount, yearIncomeAmountClear);
                }

                this.storeDeductionRightNotRealized(_taxEmplDeduction, dedRightAmount, deductionAmount);
            }
        }

        return deductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductionStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates standard deductions.
    /// </summary>
    /// <param name="_taxEmplDeduction">
    /// The <c>RPayTaxEmplDeduction</c> class instance.
    /// </param>
    /// <param name="_familyRecId">
    /// The relative table record reference.
    /// </param>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    protected RPayAmount calcDeductionStandard(RPayTaxEmplDeduction _taxEmplDeduction, RHRMFamilyRecId _familyRecId = 0)
    {
        RPayTaxEmplSum   taxEmplSum;
        RPayTaxEmplTrans taxEmplTrans;
        RPayAmount yearIncomeAmount,
                   dedRightAmount,
                   yearIncomeAmountClear,
                   deductionAmount,
                   dedRightAmountNotRealized,
                   yearIncomeAmountNotOwn,
                   deductionUsed;

        //calc year income & other deductions
        select sum(Amount), sum(Deduction) from taxTransCalc
            where   taxTransCalc.RpayTaxType            == RpayTaxType::Income                            //&&
                   //(taxTransCalc.FamilyRecId            == _familyRecId || !_familyRecId)
                exists join taxSumCalc
                    where taxSumCalc.RecId             == taxTransCalc.TaxSumRecId                        &&
                            taxSumCalc.EmplId          == emplTax.parmEmplId()                            &&
                            taxSumCalc.CorrectedPeriod >= corPeriodFrom                                   &&
                            taxSumCalc.CorrectedPeriod <= emplTax.parmPayPeriod()                         &&
                            taxSumCalc.PayPeriod       <= payPeriodCurrent                                &&
                            taxSumCalc.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

        yearIncomeAmount      = taxTransCalc.Amount;
        yearIncomeAmountClear = yearIncomeAmount - taxTransCalc.Deduction;

        //calc not own income
        select sum(Amount), sum(Deduction) from taxEmplTrans
            where   taxEmplTrans.RpayTaxType            == RpayTaxType::Income                       &&
                    taxEmplTrans.Manual                 == true
                   //(taxTransCalc.FamilyRecId            == _familyRecId || !_familyRecId)
                exists join taxEmplSum
                    where taxEmplSum.RecId             == taxEmplTrans.TaxSumRecId                        &&
                            taxEmplSum.EmplId          == emplTax.parmEmplId()                            &&
                            taxEmplSum.CorrectedPeriod >= corPeriodFrom                                   &&
                            taxEmplSum.CorrectedPeriod <= emplTax.parmPayPeriod()                         &&
                            taxEmplSum.PayPeriod       <= payPeriodCurrent                                &&
                            taxEmplSum.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

        yearIncomeAmountNotOwn = taxEmplTrans.Amount;

        //calc applied early standard deductions
        select sum(Amount) from taxTransCalc
            where   taxTransCalc.RpayTaxType           == RpayTaxType::Deduction                          //&&
                   //(taxTransCalc.FamilyRecId           == _familyRecId || !_familyRecId)
                exists join taxSumCalc
                    where taxSumCalc.RecId             == taxTransCalc.TaxSumRecId                        &&
                            taxSumCalc.EmplId          == emplTax.parmEmplId()                            &&
                            taxSumCalc.CorrectedPeriod >= corPeriodFrom                                   &&
                            taxSumCalc.CorrectedPeriod <= emplTax.parmPayPeriod()                         &&
                            taxSumCalc.PayPeriod       <= payPeriodCurrent                                &&
                            taxSumCalc.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

        yearIncomeAmountClear       -= taxTransCalc.Amount;
        dedRightAmountNotRealized   = calcState.removeDeductionAmountNotRealized(_taxEmplDeduction.deductionTable().RpayTaxDeductionCode);
        dedRightAmount              = _taxEmplDeduction.calcAmountOfRight(yearIncomeAmount + yearIncomeAmountNotOwn) + dedRightAmountNotRealized;

        //calculate used deduction
        select sum(Amount) from taxTransCalc
            where taxTransCalc.RpayTaxIncDedCode        == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode  &&
                    taxTransCalc.RpayTaxType            == RpayTaxType::Deduction                                   &&
                   (taxTransCalc.FamilyRecId            == _familyRecId || !_familyRecId)                           &&
                    taxTransCalc.Manual                 == false
                exists join taxSumCalc
                    where   taxSumCalc.RecId           == taxTransCalc.TaxSumRecId                        &&
                            taxSumCalc.EmplId          == emplTax.parmEmplId()                            &&
                            taxSumCalc.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                            taxSumCalc.CorrectedPeriod <= _taxEmplDeduction.ariseEndDate()                &&
                            taxSumCalc.PayPeriod       <= payPeriodCurrent                                &&
                            taxSumCalc.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

        deductionUsed = taxTransCalc.Amount;

        select sum(Amount) from taxEmplTrans
            where taxEmplTrans.RpayTaxIncDedCode        == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode  &&
                    taxEmplTrans.RpayTaxType            == RpayTaxType::Deduction                                   &&
                   (taxEmplTrans.FamilyRecId            == _familyRecId || !_familyRecId)                           &&
                    taxEmplTrans.Manual                 == true
                exists join taxEmplSum
                    where   taxEmplSum.RecId           == taxEmplTrans.TaxSumRecId                        &&
                            taxEmplSum.EmplId          == emplTax.parmEmplId()                            &&
                            taxEmplSum.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                            taxEmplSum.CorrectedPeriod <= _taxEmplDeduction.ariseEndDate()                &&
                            taxEmplSum.PayPeriod       <= payPeriodCurrent                                &&
                            taxEmplSum.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

        deductionUsed += taxEmplTrans.Amount;

        if (_taxEmplDeduction.deductionTable().RpayPeriodFrequence == RPayRatePeriodFrequency::None ||
            _taxEmplDeduction.deductionTable().RpayPeriodFrequence == RPayRatePeriodFrequency::Unlimeted)
        {
            //calculate stored amounts before start tax calculation period
            select sum(Amount) from taxEmplTrans
                where taxEmplTrans.RpayTaxIncDedCode        == _taxEmplDeduction.deductionTable().RpayTaxDeductionCode  &&
                        taxEmplTrans.RpayTaxType            == RpayTaxType::Deduction                                   &&
                       (taxEmplTrans.FamilyRecId            == _familyRecId || !_familyRecId)
                    exists join taxEmplSum
                        where   taxEmplSum.RecId           == taxEmplTrans.TaxSumRecId                        &&
                                taxEmplSum.EmplId          == emplTax.parmEmplId()                            &&
                                taxEmplSum.CorrectedPeriod >= _taxEmplDeduction.ariseStartDate()              &&
                                taxEmplSum.CorrectedPeriod <= _taxEmplDeduction.ariseEndDate()                &&
                                taxEmplSum.PayPeriod       <  emplTax.parmStartDateTax()                      &&
                                taxEmplSum.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode;

            deductionUsed += taxEmplTrans.Amount;
        }

        dedRightAmount -= deductionUsed;

        if (dedRightAmount > 0)
        {
            if (yearIncomeAmountClear > 0)
            {
                deductionAmount = min(dedRightAmount, yearIncomeAmountClear);
            }

            this.storeDeductionRightNotRealized(_taxEmplDeduction, dedRightAmount, deductionAmount);
        }

        return deductionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductionStandardRelatives</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates standard deductions for relatives.
    /// </summary>
    /// <param name="_taxDeductionTable">
    /// The <c>RPayTaxDeductionTable</c> class instance.
    /// </param>
    /// <returns>
    /// The deduction amount.
    /// </returns>
    protected RPayAmount calcDeductionStandardRelatives(RPayTaxDeductionTable _taxDeductionTable)
    {
        RPayTaxDeductionTable     taxDeductionTableLocal; //use local deduction variable to calculate

        RefRecId        relativeRecId;
        MapEnumerator   childMapEnumerator;

        RPayAmount dedAmount, dedAmountTotal;
        boolean childNumState, calculate;

        void calcLineDeduction()
        {
            emplTax.parmChildCount(childCount);
            dedAmount = this.calcDeduction(taxDeductionTableLocal, 0, 0, relativeRecId);

            if (dedAmount != 0)
            {
                this.writeCalcTaxTrans(taxDeductionTableLocal.RpayTaxDeductionCode, RpayTaxType::Deduction, dedAmount, 0, 0, relativeRecId);

                dedAmountTotal += dedAmount;
            }
        }

        if (!childrenList || childrenList.empty())
        {
            return 0;
        }

        //already calculated deduction
        if (calcDeductionRel.in(_taxDeductionTable.RpayTaxDeductionCode))
        {
            return 0;
        }

        childCount = 0;
        childMapEnumerator = childrenList.getEnumerator();
        calcDeductionRel.add(_taxDeductionTable.RpayTaxDeductionCode);

        while (childMapEnumerator.moveNext())
        {
            [#ChildValue] = childMapEnumerator.currentValue();

            childNumState = false;

            while select taxDeductionTableLocal
                order by RpayTaxDeductionCode
                where taxDeductionTableLocal.RpayTaxDeductionType == _taxDeductionTable.RpayTaxDeductionType &&
                      taxDeductionTableLocal.RpayPeriodFrequence  == _taxDeductionTable.RpayPeriodFrequence  &&
                      taxDeductionTableLocal.ActOnRelative
            {
                if (calculate)
                {
                    calcLineDeduction();
                }

                childNumState = childNumState || dedAmount > 0 || calcContext.taxParameters().CalcRelativeByPerson;
                calcDeductionRel.add(taxDeductionTableLocal.RpayTaxDeductionCode);

                if (dedAmount)
                {
                    dedAmount = 0;
                }
            }

            childCount += childNumState ? 1 : 0;
        }

        return dedAmountTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDeductionStandardSequenced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates standard deductions sequenced.
    /// </summary>
    /// <param name="_unlimited">
    /// If true uses deduction, discount, and relief codes with unlimited Period of validity.
    /// </param>
    protected void calcDeductionStandardSequenced(boolean _unlimited)
    {
        RPayTaxDeductionTable deductionTable;
        RPayAmount dedAmount;

        childCount = 0;
        emplTax.parmChildCount(childCount);

        if (_unlimited)
        {
            select deductionTable
                order by RpayPeriodFrequence, RpayTaxDeductionCode
                where deductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Standard &&
                        deductionTable.RpayPeriodFrequence  == RPayRatePeriodFrequency::Unlimeted;
        }
        else
        {
            select deductionTable
                order by RpayPeriodFrequence, RpayTaxDeductionCode
                where deductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Standard &&
                        deductionTable.RpayPeriodFrequence  != RPayRatePeriodFrequency::Unlimeted;
        }

        while (deductionTable)
        {
            if (calcDeductionRel.in(deductionTable.RpayTaxDeductionCode))
            {
                next deductionTable;
                continue;
            }

            if (deductionTable.ActOnRelative)
            {
                dedAmount = this.calcDeductionStandardRelatives(deductionTable);
            }
            else
            {
                dedAmount = this.calcDeduction(deductionTable, 0);

                if (dedAmount)
                {
                    this.writeCalcTaxTrans(deductionTable.RpayTaxDeductionCode, RpayTaxType::Deduction, dedAmount);
                }
            }

            next deductionTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcIncomeTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates income tax code.
    /// </summary>
    /// <param name="_incomeTable">
    /// The income codes table record.
    /// </param>
    /// <param name="_deductionTable">
    /// The deduction, discount, and relief codes table record.
    /// </param>
    /// <param name="_familyRecId">
    /// The relative table record reference.
    /// </param>
    protected void calcIncomeTaxCode(RPayTaxIncomeTable _incomeTable, RPayTaxDeductionTable _deductionTable, RHRMFamilyRecId _familyRecId = 0)
    {
        RPayAmount              dedAmount,
                                incomeAmountPeriod;
        RpayTaxDeductionOther   otherDeductionCode;

        incomeAmountPeriod = this.incomeTransAmount(emplTax.parmPayPeriod(),
                                                    emplTax.parmPayPeriod(),
                                                    payPeriodFrom,
                                                    payPeriodCurrent,
                                                    incomeGroupTable.Fund,
                                                    _incomeTable.RpayTaxIncomeCode,
                                                    _familyRecId);

        if (_deductionTable && incomeGroupTable.OtherDeductions && _deductionTable.RpayTaxDeductionType == RpayTaxDeductionType::Other)
        {
            dedAmount = this.calcDeduction(_deductionTable, incomeAmountPeriod, _incomeTable.RpayTaxIncomeCode, _familyRecId);
            otherDeductionCode  = dedAmount ? _deductionTable.RpayTaxDeductionCode : 0;
        }

        if (dedAmount || incomeAmountPeriod)
        {
            this.writeCalcTaxTrans(_incomeTable.RpayTaxIncomeCode, RpayTaxType::Income, incomeAmountPeriod, otherDeductionCode, dedAmount, _familyRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the income tax amount.
    /// </summary>
    /// <param name="_taxSumYTD">
    /// The year-to-date income tax calculation table record.
    /// </param>
    /// <param name="_taxSumCurrent">
    /// The current income tax calculation table record.
    /// </param>
    protected void calcTaxAmount(RPayTaxEmplSum _taxSumYTD, RPayTaxEmplSum _taxSumCurrent)
    {
        Percent    taxPct;
        RPayAmount taxAmount, taxBaseFull, taxAmountWithoutRefund, taxAmount2Refund;

        taxBaseFull = _taxSumYTD.IncomeAmount     - _taxSumYTD.DeductionOtherAmount     - _taxSumYTD.DeductionStandardAmount +
                      _taxSumCurrent.IncomeAmount - _taxSumCurrent.DeductionOtherAmount - _taxSumCurrent.DeductionStandardAmount;

        if (taxBaseFull < 0)
        {
            checkFailed("@RUP3474");
            taxBaseFull = 0;
        }

        taxPct    = emplTax.taxGroup2RateValue(incomeGroupTable) / 100;
        taxAmount = round(taxBaseFull * taxPct, calcContext.taxParameters().TaxRound) - _taxSumYTD.AddTaxAmount;

        if (dedTotalAmount2Refund && calcContext.taxParameters().ReimbursementType == RPayTaxReimbursementType::ReckoningTax)
        {
            taxAmountWithoutRefund  = round((taxBaseFull + dedTotalAmount2Refund) * taxPct, calcContext.taxParameters().TaxRound) - _taxSumYTD.AddTaxAmount;
            taxAmount2Refund        = taxAmountWithoutRefund - taxAmount;
            calcState.addTaxAmount2Refund(incomeGroupTable.RpayTaxIncomeGroupCode,
                                          emplTax.parmPayPeriod(),
                                          emplTax.parmBranchId(),
                                          taxAmount2Refund);
        }

        if (taxAmount)
        {
            select taxSumCalc
                where taxSumCalc.RecId == taxSumCalcRecId;

            taxSumCalc.AddTaxAmount = taxAmount;
            taxSumCalc.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides accessebility to external variables from functor.
    /// </summary>
    /// <param name="_closure">
    /// The closure.
    /// </param>
    public void closure(anytype _closure)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateTaxSumCalc</Name>
				<Source><![CDATA[
        private RecId findOrCreateTaxSumCalc()
    {
        if (taxSumCalcRecId == 0)
        {
            taxSumCalcRecId = this.writeCalcTaxSum();
        }

        return taxSumCalcRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>incomeTransAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// The income
    /// </summary>
    /// <param name="_corPeriodStartDate">
    /// The corrective start date.
    /// </param>
    /// <param name="_corPeriodEndDate">
    /// The corrective end date.
    /// </param>
    /// <param name="_payPeriodStartDate">
    /// The payment period start date.
    /// </param>
    /// <param name="_payPeriodEndDate">
    /// The payment period end date.
    /// </param>
    /// <param name="_fund">
    /// Gets the amount of income by fund from <c>RPayTrans</c> table.
    /// </param>
    /// <param name="_taxIncomeCode">
    /// The income code
    /// </param>
    /// <param name="_familyRecId">
    /// The relative table record reference.
    /// </param>
    /// <returns>
    /// The income transaction amount.
    /// </returns>
    public RPayAmount incomeTransAmount(RPayCorrectedPeriod      _corPeriodStartDate,
                                        RPayCorrectedPeriod      _corPeriodEndDate,
                                        StartDate                _payPeriodStartDate,
                                        EndDate                  _payPeriodEndDate,
                                        RPayCounterUnit          _fund,
                                        RpayTaxIncomeCode        _taxIncomeCode = 0,
                                        RHRMFamilyRecId          _familyRecId = 0)
    {
        QueryRun  qrPayTrans;
        RPayTrans payTrans;

        qbrPayTransEmplId.value(queryValue(emplTax.parmEmplId()));
        qbrPayTransFund.value(queryValue(_fund));
        qbrPayTransFamily.value(_familyRecId ? queryValue(_familyRecId) : SysQuery::valueUnlimited());
        qbrPayTransIncomeCode.value(_taxIncomeCode ? queryValue(_taxIncomeCode) : SysQuery::valueUnlimited());
        qbrPayTransPayPeriod.value(SysQuery::range(_payPeriodStartDate, _payPeriodEndDate));
        qbrPayTransCorPeriod.value(SysQuery::range(_corPeriodStartDate, _corPeriodEndDate));

        qrPayTrans = new QueryRun(payTransQ);
        qrPayTrans.next();
        payTrans = qrPayTrans.get(tableNum(RPayTrans));

        return payTrans.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplChildList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes employee childs list.
    /// </summary>
    protected void initEmplChildList()
    {
        RHRMVirtualNetworkFamily    rhrmVirtualNetworkFamily;
        Map                         extKeyMap; //map is used to support duplicate keys in childList
        TransDate                   effectiveDate;
        RPayRateCallContext         rateContext;

        RefRecId relativeRecId;
        boolean  calculate;
        Counter  extKey;

        extKeyMap    = new Map(Types::Container, Types::Integer);
        childrenList = new Map(Types::Container, Types::Container);

        while select * from rhrmVirtualNetworkFamily
            where (rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                   rhrmVirtualNetworkFamily.Relatives == RHRMRelationship::Daughter) &&
                   rhrmVirtualNetworkFamily.ApplyDeduction                           &&
                   rhrmVirtualNetworkFamily.DeductionTypeKey                         &&
                   rhrmVirtualNetworkFamily.PersonnelNumber == emplTax.personId()
        {
            if ((endmth(rhrmVirtualNetworkFamily.TaxDeductionTerminationDate) < emplTax.parmPayPeriod()) &&
                 rhrmVirtualNetworkFamily.TaxDeductionTerminationDate)
            {
                calculate = false;
            }
            else
            {
                rateContext = RPayRateCallContext::construct(emplTax.parmPayPeriod(), emplTax.parmEmplId());
                rateContext.parmPersonId(emplTax.personId());
                calculate = any2int(RPayRateTable::find(rhrmVirtualNetworkFamily.ApplyDeduction).getValue(rateContext));
            }

            if (calculate == false)
            {
                if (calcContext.taxParameters().CalcRelativeByPerson == NoYes::No)
                {
                    continue;
                }
            }

            effectiveDate = rhrmVirtualNetworkFamily.AdoptionDate ? rhrmVirtualNetworkFamily.AdoptionDate
                                                                  : rhrmVirtualNetworkFamily.BirthDate;

            if (effectiveDate <= emplTax.parmPayPeriod())
            {
                extKey = 0;
                if (extKeyMap.exists([effectiveDate, rhrmVirtualNetworkFamily.BirthTime]))
                {
                    extKey = extKeyMap.lookup([effectiveDate, rhrmVirtualNetworkFamily.BirthTime]);
                }

                relativeRecId = rhrmVirtualNetworkFamily.RecId;
                childrenList.insert([effectiveDate, rhrmVirtualNetworkFamily.BirthTime, extKey], [#ChildValue]);
                extKey++;
                extKeyMap.insert([effectiveDate, rhrmVirtualNetworkFamily.BirthTime], extKey);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes functor.
    /// </summary>
    protected void initFun()
    {
        payPeriodCurrent = calcContext.parmPayPeriodOpen();
        corPeriodPrev    = endmth(prevMth(emplTax.parmPayPeriod()));
        payPeriodFrom    = dateStartYr(emplTax.parmPayPeriod());
        corPeriodFrom    = dateStartYr(emplTax.parmPayPeriod());
        taxSumCalc       = calcState.taxEmplSumTmp();
        taxTransCalc     = calcState.taxEmplTransTmp();
        calcDeductionRel = new Set(Types::Integer);

        this.initSumQuery();

        if (year(calcState.parmPrevPayPeriod()) < year(emplTax.parmPayPeriod()))
        {
            calcState.resetInterChngYearData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSumQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes income tax calculation query.
    /// </summary>
    protected void initSumQuery()
    {
        QueryBuildDataSource qbdsPayTable, qbdsFundMember, qbdsEmplTable;

        //RPayTaxEmplSum
        taxSumQ = new Query();
        qbdsSum = taxSumQ.addDataSource(tableNum(RPayTaxEmplSum));

        qbdsSum.addSelectionField(fieldNum(RPayTaxEmplSum, AddTaxAmount), SelectionField::Sum);
        qbdsSum.addSelectionField(fieldNum(RPayTaxEmplSum, IncomeAmount), SelectionField::Sum);
        qbdsSum.addSelectionField(fieldNum(RPayTaxEmplSum, DeductionOtherAmount), SelectionField::Sum);
        qbdsSum.addSelectionField(fieldNum(RPayTaxEmplSum, DeductionStandardAmount), SelectionField::Sum);
        qbdsSum.addSelectionField(fieldNum(RPayTaxEmplSum, PayrollRedemptionAmount), SelectionField::Sum);

        qbrTaxSumPayPeriod = findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, PayPeriod));
        qbrTaxSumCorPeriod = findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, CorrectedPeriod));
        qbrTaxSumEmplId    = findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, EmplId));
        qbrTaxSumSource    = findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, Source));
        qbrTaxSumGroupCode = findOrCreateRange_W(qbdsSum, fieldNum(RPayTaxEmplSum, RpayTaxIncomeGroupCode));

        //RPayTrans
        payTransQ    = new Query();
        qbdsPayTrans = payTransQ.addDataSource(tableNum(RPayTrans));

        qbdsPayTrans.addSelectionField(fieldNum(RPayTrans, Amount), SelectionField::Sum);

        qbrPayTransPayPeriod = findOrCreateRange_W(qbdsPayTrans, fieldNum(RPayTrans, PayPeriod));
        qbrPayTransCorPeriod = findOrCreateRange_W(qbdsPayTrans, fieldNum(RPayTrans, CorrectedPeriod));
        qbrPayTransFamily    = findOrCreateRange_W(qbdsPayTrans, fieldNum(RPayTrans, FamilyRecId));

        qbdsPayTable = qbdsPayTrans.addDataSource(tableNum(RPayTable));
        qbdsPayTable.addLink(fieldNum(RPayTrans, PayCtype), fieldNum(RPayTable, PayCtype));
        qbdsPayTable.joinMode(JoinMode::ExistsJoin);

        qbrPayTransIncomeCode = findOrCreateRange_W(qbdsPayTable, fieldNum(RPayTable, RpayTaxIncomeCode));

        qbdsFundMember = qbdsPayTable.addDataSource(tableNum(RPayFundMember));
        qbdsFundMember.addLink(fieldNum(RPayTable, PayCtype), fieldNum(RPayFundMember, PayCostType));
        qbdsFundMember.joinMode(JoinMode::ExistsJoin);

        qbrPayTransFund = findOrCreateRange_W(qbdsFundMember, fieldNum(RPayFundMember, CounterUnit));

        qbdsEmplTable = qbdsPayTrans.addDataSource(tableNum(RHRMEmplTable));
        qbdsEmplTable.addLink(fieldNum(RPayTrans, Emplid), fieldNum(RHRMEmplTable, EmployeeId));
        qbdsEmplTable.joinMode(JoinMode::ExistsJoin);

        qbrPayTransEmplId = findOrCreateRange_W(qbdsEmplTable, fieldNum(RHRMEmplTable, PayMainEmplId));

        //RPayTaxEmplTrans
        taxTransQ    = new Query();
        qbdsTaxTrans = taxTransQ.addDataSource(tableNum(RPayTaxEmplTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeDeductionRightNotRealized</Name>
				<Source><![CDATA[
        private void storeDeductionRightNotRealized(RPayTaxEmplDeduction _taxEmplDeduction, RPayAmount _deductionAmountRightCurrent, RPayAmount _deductionAmount)
    {
        if (_taxEmplDeduction.deductionTable().RpayPeriodFrequence == RPayRatePeriodFrequency::Month && _deductionAmountRightCurrent > _deductionAmount)
        {
            calcState.insertDeductionAmountNotRealized(_taxEmplDeduction.deductionTable().RpayTaxDeductionCode,
                                                       _deductionAmountRightCurrent - _deductionAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumEmplTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the income tax calculation table record by period, employee id and group rate code.
    /// </summary>
    /// <param name="_payPeriodStart">
    /// The period start.
    /// </param>
    /// <param name="_payPeriodEnd">
    /// The period end.
    /// </param>
    /// <param name="_corPeriodStart">
    /// The corrective period start.
    /// </param>
    /// <param name="_corPeriodEnd">
    /// The corrective period end.
    /// </param>
    /// <param name="_buffer">
    /// The tax calculation table record to start fetching from if specified.
    /// </param>
    /// <returns>
    /// The <c>RPayTaxEmplSum</c> table record.
    /// </returns>
    protected RPayTaxEmplSum sumEmplTaxAmount(StartDate _payPeriodStart, EndDate _payPeriodEnd, StartDate _corPeriodStart, EndDate _corPeriodEnd, RPayTaxEmplSum _buffer = null)
    {
        RPayTaxEmplSum taxEmplSum;
        QueryRun qrTaxSum;

        qbrTaxSumPayPeriod.value(SysQuery::range(_payPeriodStart, _payPeriodEnd));
        qbrTaxSumCorPeriod.value(SysQuery::range(_corPeriodStart, _corPeriodEnd)); //from start year to calculated period
        qbrTaxSumEmplId.value(queryValue(emplTax.parmEmplId()));
        qbrTaxSumSource.value(queryValue(NoYes::No));
        qbrTaxSumGroupCode.value(queryValue(incomeGroupTable.RpayTaxIncomeGroupCode));

        qrTaxSum = new QueryRun(taxSumQ);

        if (_buffer)
        {
            qrTaxSum.setCursor(_buffer);
        }

        qrTaxSum.next();
        taxEmplSum = qrTaxSum.get(taxEmplSum.TableId);

        return taxEmplSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseDed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the income tax base for deduction.
    /// </summary>
    /// <returns>
    /// The <c>RPayTaxEmplSum</c> table record.
    /// </returns>
    protected RPayTaxEmplSum taxBaseDed()
    {
        RPayTaxIncomeTable          incomeTable;
        RPayTaxDeductionTable       deductionTable;
        RPayFundMember              fundMember;
        RPayTable                   payTable;
        RHRMVirtualNetworkFamily    virtualNetworkFamily;

        dedTotalAmount2Refund = 0;

        while select RpayTaxIncomeCode, RpayTaxDeductionCode from incomeTable
            order by RpayTaxIncomeCode
            exists join payTable
                where payTable.RpayTaxIncomeCode == incomeTable.RpayTaxIncomeCode
                exists join fundMember
                    where fundMember.PayCostType == payTable.PayCtype
                       && fundMember.CounterUnit == incomeGroupTable.Fund
        {
            deductionTable = RPayTaxDeductionTable::find(incomeTable.RpayTaxDeductionCode);

            if (deductionTable && deductionTable.ActOnRelative)
            {
                while select RecId, KinName from virtualNetworkFamily
                    where (virtualNetworkFamily.Relatives == RHRMRelationship::Son ||
                           virtualNetworkFamily.Relatives == RHRMRelationship::Daughter) &&
                           virtualNetworkFamily.PersonnelNumber == emplTax.personId()
                {
                    this.calcIncomeTaxCode(incomeTable, deductionTable, virtualNetworkFamily.RecId);
                }
            }
            else
            {
                this.calcIncomeTaxCode(incomeTable, deductionTable);
            }
        }

        if (incomeGroupTable.StandardDeductions)
        {
            this.initEmplChildList();
            this.calcDeductionStandardSequenced(false);
            this.calcDeductionStandardSequenced(true);
        }

        this.updateEmplSumCalc();

        return taxSumCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseDedYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the year-to-date income tax base for deduction.
    /// </summary>
    /// <returns>
    /// The <c>RPayTaxEmplSum</c> table record.
    /// </returns>
    protected RPayTaxEmplSum taxBaseDedYTD()
    {
        return this.sumEmplTaxAmount(payPeriodFrom, payPeriodCurrent, corPeriodFrom, corPeriodPrev, taxSumCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplSumCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>RPayTaxEmplSum</c> table record.
    /// </summary>
    protected void updateEmplSumCalc()
    {
        if (taxSumCalcRecId)
        {
            select taxSumCalc
                where taxSumCalc.RecId == taxSumCalcRecId;

            select sum(Amount), sum(Deduction) from taxTransCalc
                where  taxTransCalc.TaxSumRecId == taxSumCalc.RecId
                    && taxTransCalc.RpayTaxType == RpayTaxType::Income;

            taxSumCalc.IncomeAmount         = taxTransCalc.Amount;
            taxSumCalc.DeductionOtherAmount = taxTransCalc.Deduction;

            select sum(Amount) from taxTransCalc
                where  taxTransCalc.TaxSumRecId == taxSumCalc.RecId
                    && taxTransCalc.RpayTaxType == RpayTaxType::Deduction;

            taxSumCalc.DeductionStandardAmount = taxTransCalc.Amount;
            taxSumCalc.update();
        }
        else
        {
            taxSumCalc.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCalcTaxSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts values to <c>RPayTaxEmplSum</c> table record.
    /// </summary>
    /// <returns>
    /// The reference to inserted record.
    /// </returns>
    protected RecId writeCalcTaxSum()
    {
        taxSumCalc.clear();
        taxSumCalc.PayPeriod                = payPeriodCurrent;
        taxSumCalc.CorrectedPeriod          = emplTax.parmPayPeriod();
        taxSumCalc.EmplId                   = emplTax.parmEmplId();
        taxSumCalc.RpayTaxIncomeGroupCode   = incomeGroupTable.RpayTaxIncomeGroupCode;
        taxSumCalc.BranchId                 = emplTax.parmBranchId();
        taxSumCalc.TaxRateCode              = emplTax.taxGroup2Rate(incomeGroupTable);
        taxSumCalc.insert();

        return taxSumCalc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCalcTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts values to <c>RPayTaxEmplTrans</c> table record.
    /// </summary>
    /// <param name="_incDedCode">
    /// The income/deduction number.
    /// </param>
    /// <param name="_taxType">
    /// The income/deduction type.
    /// </param>
    /// <param name="_incDedAmount">
    /// The amount.
    /// </param>
    /// <param name="_deductionCode">
    /// The deduction code.
    /// </param>
    /// <param name="_deduction">
    /// The deduction amount.
    /// </param>
    /// <param name="_familyRecId">
    /// The relative table record reference.
    /// </param>
    protected void writeCalcTaxTrans(RpayTaxIncDedCode      _incDedCode,
                                     RpayTaxType            _taxType,
                                     RPayAmount             _incDedAmount,
                                     RpayTaxDeductionCode   _deductionCode  = 0,
                                     RPayAmount             _deduction      = 0,
                                     RHRMFamilyRecId        _familyRecId    = 0)
    {
        taxTransCalc.clear();
        taxTransCalc.TaxSumRecId            = this.findOrCreateTaxSumCalc();
        taxTransCalc.RpayTaxIncDedCode      = _incDedCode;
        taxTransCalc.RpayTaxType            = _taxType;
        taxTransCalc.Amount                 = _incDedAmount;
        taxTransCalc.RpayTaxDeductionCode   = _deductionCode;
        taxTransCalc.Deduction              = _deduction;
        taxTransCalc.FamilyRecId            = _familyRecId;
        taxTransCalc.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>