<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGenerateRouteTableAndVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates a route and route version.
/// </summary>
class PcGenerateRouteTableAndVersion
{
    PCValidationNumberSequence validationNumberSequence;

    List generatedRouteTableRecords;
    List generatedRouteVersionRecords;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>approveGeneratedRoutes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Approves the generated operation routes.
    /// </summary>
    /// <param name="_approver">
    /// The approver of the product configuration model.
    /// </param>
    public void approveGeneratedRoutes(BOMRouteApprover _approver)
    {
        RouteTable        routeTable;
        RouteVersion      routeVersion;
        ListEnumerator  le;

        le = generatedRouteTableRecords.getEnumerator();

        ttsBegin;

        while (le.moveNext())
        {
            routeTable = le.current();
            // a reread is needed here because the insertion of Route operations will update record
            routeTable.updateRoute(false);
            routeTable.reread();
            routeTable.Approver = _approver;
            routeTable.Approved = NoYes::Yes;
            routeTable.doUpdate();
        }

        le = generatedRouteVersionRecords.getEnumerator();

        while (le.moveNext())
        {
            routeVersion = le.current();
            routeVersion.Approver = _approver;
            routeVersion.Approved = NoYes::Yes;
            routeVersion.Active   = NoYes::Yes;
            routeVersion.doUpdate();
        }

        // create lists, this code may be called again, if price or ship date is calculated before the configuration is accepted
        this.initializeRecordCollections();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new route and a route version for the specified component.
    /// </summary>
    /// <param name="_routeId">
    /// Deprecated: The ID of the route to assign.
    /// </param>
    /// <param name="_inventDim">
    /// The dimension to attach.
    /// </param>
    /// <param name="_productModelName">
    /// The name of the product model.
    /// </param>
    /// <param name="_componentName">
    /// The name of the component or sub-component.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the item that is associated with the version.
    /// </param>
    /// <returns>
    /// The ID of the route that was assigned.
    /// </returns>
    /// <remarks>
    /// Routes are approved during validation.
    /// </remarks>
    public RouteTable generate(
        RouteId             _routeId,
        InventDim           _inventDim,
        PCName              _productModelName,
        EcoResCategoryName  _componentName,
        ItemId              _itemId)
    {
        RouteVersion    routeVersion;
        RouteTable      routeTable;

        ttsbegin;
        routeTable.RouteId      = validationNumberSequence.getNewRouteIdBasedOnNumberSequence();
        routeTable.Name         = strFmt("@SYS76681", "@SYS40230" , _productModelName , _componentName);
        routeTable.ItemGroupId  = InventTable::find(_itemId).itemGroupId();
        routeTable.CheckRoute   = NoYes::Yes;
        routeTable.insert();

        generatedRouteTableRecords.addEnd(routeTable);

        routeVersion.RouteId        = routeTable.RouteId;
        routeVersion.ItemId         = _itemId;
        routeVersion.initFromRouteTable(routeTable);
        routeVersion.InventDimId    = _inventDim.InventDimId;
        routeVersion.insert();

        generatedRouteVersionRecords.addEnd(routeVersion);
        ttscommit;

        return routeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRecordCollections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized record collections.
    /// </summary>
    protected void initializeRecordCollections()
    {
        generatedRouteTableRecords    = new List(Types::Record);
        generatedRouteVersionRecords  = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        validationNumberSequence = PCValidationNumberSequence::construct();

        this.initializeRecordCollections();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidationNumberSequence</Name>
				<Source><![CDATA[
        public PCValidationNumberSequence parmValidationNumberSequence(PCValidationNumberSequence _validationNumberSequence = validationNumberSequence)
    {
        validationNumberSequence = _validationNumberSequence;

        return validationNumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCGenerateRouteTableAndVersion construct()
    {
        return new PCGenerateRouteTableAndVersion();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>