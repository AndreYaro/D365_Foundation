<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccJourRuleProjAdvancedJournalExtendedPriceTaxMeasure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class implements the GST tax accounting journalizing rule for project advanced journal source document.
/// </summary>
[
    SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::TaxMeasure),
    SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::TaxMeasureComponent),
    SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity, MonetaryAmount::TaxMeasureNonRecoverable)
]
internal final class AccJourRuleProjAdvancedJournalExtendedPriceTaxMeasure extends AccountingJournalizingRule
{
    private TaxMeasureSourceDocumentSublineItem taxMeasureSourceDocumentSublineItem;
    private ProjAdvancedJournalLine projAdvancedJournalLine;
    private LedgerDimensionDefaultAccount ledgerDimensionDefaultAcc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting journalization rule
    /// </summary>
    protected void initialize()
    {
        if (sourceDocumentLineItem is TaxMeasureSourceDocumentSublineItem)
        {
            taxMeasureSourceDocumentSublineItem = sourceDocumentLineItem as TaxMeasureSourceDocumentSublineItem;
        }

        SourceDocumentLine origSourceDocumentLine = SourceDocumentLine::findTopParentSourceDocumentLine(sourceDocumentLineItem.parmSourceDocumentLine().RecId);
        projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(origSourceDocumentLine.RecId);

        this.parmLedgerDimensionDefaultAccount(projAdvancedJournalLine.getLedgerDimensionDefaultAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType ledgerPostingType;

        TaxAccountingProvider taxAccountingProvider = taxMeasureSourceDocumentSublineItem.parmJournalizationAccountingProvider();
        switch (taxAccountingProvider)
        {
            case TaxAccountingProvider::Party:
                ledgerPostingType = projAdvancedJournalLine.getLedgerPostingTypeForPartyTaxProvider();
                break;

            case TaxAccountingProvider::Inventory:
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;

            case TaxAccountingProvider::Tax,
                TaxAccountingProvider::Ledger:
                ledgerPostingType = taxMeasureSourceDocumentSublineItem.parmJournalizationLedgerPostingType();
                break;
        }
        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side = taxMeasureSourceDocumentSublineItem.parmDistributionSide();
        // Needs to reverse side for Credit note / return order scenario
        if (accountingDistribution.TransactionCurrencyAmount >= 0)
        {
            if (side == DebitCredit::Debit)
            {
                side = DebitCredit::Credit;
            }
            else
            {
                side = DebitCredit::Debit;
            }
        }

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LedgerDimensionDefaultAccount _ledgerDimensionDefaultAcc = ledgerDimensionDefaultAcc)
    {
        ledgerDimensionDefaultAcc = _ledgerDimensionDefaultAcc;
        return ledgerDimensionDefaultAcc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>