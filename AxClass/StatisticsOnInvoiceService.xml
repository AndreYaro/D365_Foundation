<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatisticsOnInvoiceService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>StatisticsOnInvoiceService</c> class calculates the statistics on invoices.
/// </summary>
public class StatisticsOnInvoiceService extends SysOperationServiceBase
{
    protected const LedgerJournalACType VendType = LedgerJournalACType::Vend;
    protected const TableId VendTransTableId = tableNum(VendTrans);
    protected const TableId VendInvoiceJourTableId = tableNum(VendInvoiceJour);

    protected RefRecId currentSession;
    protected StatisticsOnInvoiceJour jour;
    protected StatisticsOnInvoicePaymentSchedule paymentSchedule;

    protected VendSettlement vendSettlement;
    protected VendSettlement vendSettlementPayment;
    protected VendTrans vendTransInvoice, vendTransPayment;
    protected VendTransOpen vendTransOpenInvoice;
    protected VendInvoiceJour vendInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the statistics.
    /// </summary>
    /// <param name = "_contract">
    /// The parameters for the calculation.
    /// </param>
    public void calc(StatisticsOnInvoiceDataContract _contract)
    {
        ttsbegin;

        this.cleanupStatistics(_contract);

        this.insertStatisticsOnInvoiceSession(_contract);
        this.insertStatisticsOnInvoiceJour(_contract);
        this.insertStatisticsOnInvoicePaymentSchedule(_contract);
        this.insertStatisticsOnInvoicePaymentScheduleBalanceOnDueDate();

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFR]))
        {
            this.insertStatisticsOnInvoicePaymentAccountEntry();
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            this.updateFromPlVendCorrectJour();
        }

        ttscommit;

        this.postValidate();
        this.outputResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputResults</Name>
				<Source><![CDATA[
    protected void outputResults()
    {
        select count(RecId) from jour
            where jour.Session == currentSession;
        info(strFmt("@StatisticsOnInvoice:StatisticsUpdated", jour.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupStatistics</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected void cleanupStatistics(StatisticsOnInvoiceDataContract _contract)
    {
        VendTable vendTable;
        TransDate dateFrom = _contract.parmDateFrom();
        TransDate dateTo = _contract.parmDateTo();
        container postingProfiles = this.postingProfiles(_contract);
        container vendGroupIds = this.vendGroupIds(_contract);

        for (int profileIdx = 1; profileIdx <= conLen(postingProfiles); profileIdx++)
        {
            PostingProfile profile = conPeek(postingProfiles, profileIdx);

            for (int groupIdsIdx = 1; groupIdsIdx <= conLen(vendGroupIds); groupIdsIdx++)
            {
                VendGroupId vendGroupId = conPeek(vendGroupIds, groupIdsIdx);

                // intentionally no vendSettlement.CanBeReversed
                delete_from jour
                    where jour.TransTableId == VendTransTableId
                exists join vendTransInvoice
                    where vendTransInvoice.RecId == jour.TransRecId
                        && (vendTransInvoice.TransType == LedgerTransType::Vend
                            || vendTransInvoice.TransType == LedgerTransType::Purch
                            || vendTransInvoice.TransType == LedgerTransType::GeneralJournal)
                        && (!profile || vendTransInvoice.PostingProfile == profile)
                exists join vendTable
                    where vendTable.AccountNum == jour.InvoiceAccount
                        && (!vendGroupId || vendTable.VendGroup == vendGroupId)
                exists join vendSettlement
                    where vendSettlement.TransRecId == vendTransInvoice.RecId
                        && ((vendSettlement.TransDate >= dateFrom && vendSettlement.TransDate <= dateTo)
                            || (vendSettlement.DueDate >= dateFrom && vendSettlement.DueDate <= dateTo))
                exists join vendTransPayment
                    where vendTransPayment.RecId == vendSettlement.OffsetRecid
                        && (vendTransPayment.TransType == LedgerTransType::Payment
                            // Compensation
                            || vendTransPayment.TransType == LedgerTransType::None);
            }
        }

        delete_from paymentSchedule
        notexists join jour
            where jour.RecId == paymentSchedule.InvoiceJour;

        StatisticsOnInvoicePaymentScheduleInvoiceAmount invoiceAmount;
        delete_from invoiceAmount
        notexists join paymentSchedule
            where paymentSchedule.RecId == invoiceAmount.PaymentSchedule;

        StatisticsOnInvoicePaymentScheduleBalanceOnDueDate balanceOnDueDate;
        delete_from balanceOnDueDate
        notexists join paymentSchedule
            where paymentSchedule.RecId == balanceOnDueDate.PaymentSchedule;

        StatisticsOnInvoicePaymentAccountEntry paymentAccountEntry;
        delete_from paymentAccountEntry
        notexists join paymentSchedule
            where paymentSchedule.RecId == paymentAccountEntry.PaymentSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfiles</Name>
				<Source><![CDATA[
    protected container postingProfiles(StatisticsOnInvoiceDataContract _contract)
    {
        PostingProfileMultiSelection postingProfilesStr = _contract.parmPostingProfiles();

        if (StatisticsOnInvoiceSplitStringFlight::instance().isEnabled())
        {
            if (postingProfilesStr)
            {
                List postingProfilesList = strSplit(postingProfilesStr, ';');
                return list2Con(postingProfilesList);
            }
            else
            {
                return [''];
            }
        }

        return postingProfilesStr ? str2con(postingProfilesStr, ';') : [''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendGroupIds</Name>
				<Source><![CDATA[
    protected container vendGroupIds(StatisticsOnInvoiceDataContract _contract)
    {
        VendGroupIdMultiSelection vendGroupIdsStr = _contract.parmVendGroupIds();

        if (StatisticsOnInvoiceSplitStringFlight::instance().isEnabled())
        {
            if (vendGroupIdsStr)
            {
                List vendGroupIdList = strSplit(vendGroupIdsStr, ';');
                return list2Con(vendGroupIdList);
            }
            else
            {
                return [''];
            }
        }

        return vendGroupIdsStr ? str2con(vendGroupIdsStr, ';') : [''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceSession</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected void insertStatisticsOnInvoiceSession(StatisticsOnInvoiceDataContract _contract)
    {
        StatisticsOnInvoiceSession statisticsOnInvoiceSession;
        statisticsOnInvoiceSession.DateFrom = _contract.parmDateFrom();
        statisticsOnInvoiceSession.DateTo = _contract.parmDateTo();
        statisticsOnInvoiceSession.insert();

        currentSession = statisticsOnInvoiceSession.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoiceJour</c> records.
    /// </summary>
    /// <param name = "_contract">The parameters for the calculation.</param>
    [Replaceable(true)]
    protected void insertStatisticsOnInvoiceJour(StatisticsOnInvoiceDataContract _contract)
    {
        TransDate dateFrom = _contract.parmDateFrom();
        TransDate dateTo = _contract.parmDateTo();
        container postingProfiles = this.postingProfiles(_contract);
        container vendGroupIds = this.vendGroupIds(_contract);

        for (int profileIdx = 1; profileIdx <= conLen(postingProfiles); profileIdx++)
        {
            PostingProfile profile = conPeek(postingProfiles, profileIdx);

            for (int groupIdsIdx = 1; groupIdsIdx <= conLen(vendGroupIds); groupIdsIdx++)
            {
                VendGroupId vendGroupId = conPeek(vendGroupIds, groupIdsIdx);

                this.insertStatisticsOnInvoiceJourInternal(dateFrom, dateTo, profile, vendGroupId);

                this.insertStatisticsOnInvoiceJourVoucherChanged(dateFrom, dateTo, profile, vendGroupId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoicePaymentSchedule</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected void insertStatisticsOnInvoicePaymentSchedule(StatisticsOnInvoiceDataContract _contract)
    {
        TransDate dateFrom = _contract.parmDateFrom();
        TransDate dateTo = _contract.parmDateTo();

        insert_recordset paymentSchedule
            (
            Session
            , InvoiceJour
            , DueDate
            , TransDate
            , PaymentAmountTransactional
            , PaymentAmountAccounting
            )
        select
            currentSession
            , RecId
            from jour
            where jour.Session == currentSession
        join
            DueDate
            , TransDate
            , sum(SettleAmountCur)
            , sum(SettleAmountMST)
            from vendSettlement
            group by jour.RecId, vendSettlement.DueDate, vendSettlement.TransDate
            where vendSettlement.TransRecId == jour.TransRecId
                && ((vendSettlement.TransDate >= dateFrom && vendSettlement.TransDate <= dateTo)
                    || (vendSettlement.DueDate >= dateFrom && vendSettlement.DueDate <= dateTo))
                && vendSettlement.CanBeReversed
            exists join vendTransPayment
                where vendTransPayment.RecId == vendSettlement.OffsetRecid
                    && (vendTransPayment.TransType == LedgerTransType::Payment
                        // Compensation
                        || vendTransPayment.TransType == LedgerTransType::None);

        // add Due date(s) that reside in open transactions
        StatisticsOnInvoicePaymentSchedule paymentScheduleExisting;

        insert_recordset paymentSchedule
            (
            Session
            , InvoiceJour
            , DueDate
            )
        select
            currentSession
            , RecId
            from jour
            where jour.Session == currentSession
        join
            DueDate
            from vendTransOpenInvoice
            group by jour.RecId, vendTransOpenInvoice.DueDate
            where vendTransOpenInvoice.RefRecId == jour.TransRecId
        notexists join paymentScheduleExisting
            where paymentScheduleExisting.InvoiceJour == jour.RecId
                && paymentScheduleExisting.DueDate == vendTransOpenInvoice.DueDate;

        StatisticsOnInvoicePaymentScheduleInvoiceAmount invoiceAmount;

        insert_recordset invoiceAmount
            (
            PaymentSchedule
            , AmountTransactional
            , AmountAccounting
            )
        select RecId
            from paymentSchedule
            where paymentSchedule.Session == currentSession
        join
            sum(AmountCur)
            , sum(AmountMST)
            from vendTransOpenInvoice
            group by paymentSchedule.RecId
            where vendTransOpenInvoice.DueDate == paymentSchedule.DueDate
        exists join jour
            where jour.Session == currentSession
                && jour.RecId == paymentSchedule.InvoiceJour
                && jour.TransRecId == vendTransOpenInvoice.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoicePaymentScheduleBalanceOnDueDate</Name>
				<Source><![CDATA[
    [Replaceable(true)]
    protected void insertStatisticsOnInvoicePaymentScheduleBalanceOnDueDate()
    {
        RecordInsertList balanceOnDueDateInsertList = new RecordInsertList(tableNum(StatisticsOnInvoicePaymentScheduleBalanceOnDueDate));

        RefRecId invoiceJour;
        StatisticsOnInvoicePaymentScheduleBalanceOnDueDate balanceOnDueDate;
        StatisticsOnInvoicePaymentScheduleInvoiceAmount invoiceAmount;

        while select paymentSchedule
            order by InvoiceJour, DueDate asc
            where paymentSchedule.Session == currentSession
        join jour
            where jour.RecId == paymentSchedule.InvoiceJour
        outer join invoiceAmount
            where invoiceAmount.PaymentSchedule == paymentSchedule.RecId
        {
            if (invoiceJour != paymentSchedule.InvoiceJour)
            {
                invoiceJour = paymentSchedule.InvoiceJour;
                balanceOnDueDate.AmountAccounting = jour.AmountAccounting + jour.ExchAdjustment;
                balanceOnDueDate.AmountTransactional = jour.AmountTransactional;
            }

            balanceOnDueDate.PaymentSchedule = paymentSchedule.RecId;
            balanceOnDueDate.AmountAccounting -= paymentSchedule.PaymentAmountAccounting;
            balanceOnDueDate.AmountTransactional -= paymentSchedule.PaymentAmountTransactional;

            balanceOnDueDateInsertList.add(balanceOnDueDate);
        }

        balanceOnDueDateInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoicePaymentAccountEntry</Name>
				<Source><![CDATA[
    [Replaceable(true)]
     protected void insertStatisticsOnInvoicePaymentAccountEntry()
    {
        Amount minAbs(Amount _value1, Amount _value2)
        {
            return (abs(_value1) < abs(_value2)) ? _value1 : _value2;
        }

        void applyFraction(
            StatisticsOnInvoicePaymentAccountEntry _paymentAccountEntry,
            FieldId _amountFieldToUpdate,
            FieldId _taxFieldToUpdate,
            Amount _invoiceAmount,
            amount _paymentAmount,
            CurrencyCode _invoiceAmountCurrency,
            Amount _amountToAllocate,
            Amount _amountTotal,
            Amount _taxToAllocate,
            Amount _taxTotal)
        {
            if (!_invoiceAmount)
            {
                return;
            }

            _paymentAccountEntry.(_amountFieldToUpdate) =
                minAbs(_amountToAllocate,
                    CurrencyExchangeHelper::amount(_amountTotal * _paymentAmount / _invoiceAmount, _invoiceAmountCurrency));

            _paymentAccountEntry.(_taxFieldToUpdate) =
                minAbs(_taxToAllocate,
                    CurrencyExchangeHelper::amount(_taxTotal * _paymentAmount / _invoiceAmount, _invoiceAmountCurrency));
        }

        RecordInsertList paymentAccountEntryList = new RecordInsertList(tableNum(StatisticsOnInvoicePaymentAccountEntry));

        while select jour
            where jour.Session == currentSession
        {
            select count(RecId) from paymentSchedule
                where paymentSchedule.InvoiceJour == jour.RecId;
            int64 paymentCnt = paymentSchedule.RecId;
            if (!paymentCnt)
            {
                continue;
            }

            Map allocationMap = new Map(Types::Int64, Types::Container);

            GeneralJournalAccountEntry generalJournalAccountEntry;
            MainAccount mainAccount;
            TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
            TaxTrans taxTrans;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

            while select AccountingCurrencyAmount, TransactionCurrencyAmount, ReportingCurrencyAmount from generalJournalAccountEntry
            join MainAccountId from mainAccount
                where mainAccount.RecId == generalJournalAccountEntry.MainAccount
            exists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                    && subledgerVoucherGeneralJournalEntry.Voucher == jour.InvoiceVoucher
                    && subledgerVoucherGeneralJournalEntry.AccountingDate == jour.InvoiceDate
                    && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == curExt()
            {
                select sum(TaxAmount), sum(SourceTaxAmountCur) from taxTrans
                    where taxTrans.SourceRecId
                        && taxTrans.TaxDirection != TaxDirection::UseTax
                exists join taxTransGeneralJournalAccountEntry
                    where taxTransGeneralJournalAccountEntry.TaxTrans == taxTrans.RecId
                        && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                        && taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount;

                // same info is inserted since the first copy is 'total amounts to distribute',
                // the second is 'remaining amounts to distribute' which are the same at the beginning of the distribution
                allocationMap.insert(generalJournalAccountEntry.RecId,
                    [
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    generalJournalAccountEntry.TransactionCurrencyAmount,
                    taxTrans.TaxAmount,
                    taxTrans.SourceTaxAmountCur,
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    generalJournalAccountEntry.TransactionCurrencyAmount,
                    taxTrans.TaxAmount,
                    taxTrans.SourceTaxAmountCur,
                    mainAccount.MainAccountId
                    ]);
            }

            while select paymentSchedule
                order by paymentSchedule.PaymentAmountTransactional desc,
                    paymentSchedule.DueDate asc
                where paymentSchedule.InvoiceJour == jour.RecId
                    && (paymentSchedule.PaymentAmountAccounting || paymentSchedule.PaymentAmountTransactional)
            {
                MapEnumerator allocationEnumerator = allocationMap.getEnumerator();
                while (allocationEnumerator.moveNext())
                {
                    RefRecId gjaeRecId = allocationEnumerator.currentKey();
                    Amount amountCurTotal, amountMSTTotal;
                    Amount amountCurAlloc, amountMSTAlloc;
                    Amount taxCurTotal, taxMSTTotal;
                    Amount taxCurAlloc, taxMSTAlloc;
                    MainAccountNum mainAccountNum;

                    #localMacro.PackedValues
                        [ amountMSTTotal, amountCurTotal,
                        taxMSTTotal, taxCurTotal,
                        amountMSTAlloc, amountCurAlloc,
                        taxMSTAlloc, taxCurAlloc,
                        mainAccountNum ]
                    #endMacro

                    #PackedValues = allocationEnumerator.currentValue();

                    StatisticsOnInvoicePaymentAccountEntry paymentAccountEntry;
                    paymentAccountEntry.PaymentSchedule = paymentSchedule.RecId;
                    paymentAccountEntry.GeneralJournalAccountEntry = gjaeRecId;
                    paymentAccountEntry.MainAccountNum = mainAccountNum;

                    // invoice is fully paid by one payment in the reporting period
                    if (paymentCnt == 1 && (jour.AmountTransactional == paymentSchedule.PaymentAmountTransactional))
                    {
                        paymentAccountEntry.AmountTransactional = amountCurAlloc;
                        paymentAccountEntry.AmountAccounting = amountMSTAlloc;
                        paymentAccountEntry.TaxAmountTransactional = taxCurAlloc;
                        paymentAccountEntry.TaxAmountAccounting = taxMSTAlloc;
                    }
                    else
                    {
                        applyFraction(
                            paymentAccountEntry,
                            fieldNum(StatisticsOnInvoicePaymentAccountEntry, AmountTransactional),
                            fieldNum(StatisticsOnInvoicePaymentAccountEntry, TaxAmountTransactional),
                            jour.AmountTransactional,
                            paymentSchedule.PaymentAmountTransactional,
                            jour.CurrencyCode,
                            amountCurAlloc,
                            amountCurTotal,
                            taxCurAlloc,
                            taxCurTotal);

                        applyFraction(
                            paymentAccountEntry,
                            fieldNum(StatisticsOnInvoicePaymentAccountEntry, AmountAccounting),
                            fieldNum(StatisticsOnInvoicePaymentAccountEntry, TaxAmountAccounting),
                            jour.AmountAccounting,
                            paymentSchedule.PaymentAmountAccounting,
                            '',
                            amountMSTAlloc,
                            amountMSTTotal,
                            taxMSTAlloc,
                            taxMSTTotal);

                        amountCurAlloc -= paymentAccountEntry.AmountTransactional;
                        amountMSTAlloc -= paymentAccountEntry.AmountAccounting;

                        allocationMap.insert(gjaeRecId, #PackedValues);
                    }

                    paymentAccountEntryList.add(paymentAccountEntry);
                }

                paymentCnt--;
            }
        }

        paymentAccountEntryList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceJourVoucherChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoiceJour</c> records when journal voucher is changed.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_profile">The vendor posting profile.</param>
    /// <param name = "_vendGroupId">The vendor group.</param>
    /// <remarks>
    /// 1. For Invoice approval scenario with different period than invoice and payment new record is created in <c>LedgerJournalVoucherChanged</c> table
    ///    with updated ToVoucher and ToDate fields. So the related <c>VendInvoiceJour</c> is searched by ToVoucher and ToDate fields.
    /// 2. For Ledger accruals scenario several records may be created in <c>LedgerJournalVoucherChanged</c> table.
    ///    There is no related <c>VendInvoiceJour</c> by ToVoucher and ToDate fields. So accraul transactions are skipped.
    /// </remarks>
    private void insertStatisticsOnInvoiceJourVoucherChanged(TransDate _dateFrom, TransDate _dateTo, PostingProfile _profile, VendGroupId _vendGroupId)
    {
        VendTable vendTable;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;

        insert_recordset jour
        (
        Session
        , Type
        , TransTableId
        , TransRecId
        , AmountTransactional
        , AmountAccounting
        , CurrencyCode
        , SettlementAmountTransactional
        , SettlementAmountAccounting
        , PostingProfile
        , DocumentDate
        , ExchAdjustment
        , InvoiceJourTableId
        , InvoiceJourRecId
        , InvoiceAccount
        , InvoiceId
        , InvoiceVoucher
        , InvoiceDate
        , PurchReceiptDate_W
        , VendGroupId
        )
        select
            currentSession
            , VendType
            , VendTransTableId
            , RecId
            , AmountCur
            , AmountMST
            , CurrencyCode
            , SettleAmountCur
            , SettleAmountMST
            , PostingProfile
            , DocumentDate
            , ExchAdjustment
            from vendTransInvoice
            where (vendTransInvoice.TransType == LedgerTransType::Vend || vendTransInvoice.TransType == LedgerTransType::Purch)
                && (!_profile || vendTransInvoice.PostingProfile == _profile)
        join ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.FromVoucher == vendTransInvoice.Voucher
                && ledgerJournalVoucherChanged.FromDate == vendTransInvoice.TransDate
                && ledgerJournalVoucherChanged.JournalNum == vendTransInvoice.JournalNum
                && (ledgerJournalVoucherChanged.FromVoucher != ledgerJournalVoucherChanged.ToVoucher
                    || ledgerJournalVoucherChanged.FromDate != ledgerJournalVoucherChanged.ToDate)
        join firstonly
            VendInvoiceJourTableId
            , RecId
            , InvoiceAccount
            , InvoiceId
            , LedgerVoucher
            , InvoiceDate
            , PurchReceiptDate_W
            from vendInvoiceJour
            where vendInvoiceJour.LedgerVoucher == ledgerJournalVoucherChanged.ToVoucher
                && vendInvoiceJour.InvoiceDate == ledgerJournalVoucherChanged.ToDate
                && vendInvoiceJour.InvoiceAmountMST == -vendTransInvoice.AmountMST
        join
            VendGroup
            from vendTable
            where vendTable.AccountNum == vendInvoiceJour.InvoiceAccount
                && (!_vendGroupId || vendTable.VendGroup == _vendGroupId)
        exists join vendSettlement
            where vendSettlement.TransRecId == vendTransInvoice.RecId
                && ((vendSettlement.TransDate >= _dateFrom && vendSettlement.TransDate <= _dateTo)
                    || (vendSettlement.DueDate >= _dateFrom && vendSettlement.DueDate <= _dateTo))
                && vendSettlement.CanBeReversed
        exists join vendTransPayment
            where vendTransPayment.RecId == vendSettlement.OffsetRecid
                && (vendTransPayment.TransType == LedgerTransType::Payment
                    // Compensation
                    || vendTransPayment.TransType == LedgerTransType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertStatisticsOnInvoiceJourInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>StatisticsOnInvoiceJour</c> records for common case.
    /// </summary>
    /// <param name = "_dateFrom">The period start date.</param>
    /// <param name = "_dateTo">The period end date.</param>
    /// <param name = "_profile">The vendor posting profile.</param>
    /// <param name = "_vendGroupId">The vendor group.</param>
    /// <remarks>
    /// 1. Invoice approval scenario with different period than invoice and payment is not covered here. Anyway for Invoice approval scenario
    ///    new record is created in <c>LedgerJournalVoucherChanged</c> table. FromVoucher and FromDate fields are equal to ToVoucher and ToDate fields.
    ///    So the related <c>VendInvoiceJour</c> is searched by original Voucher and Date from <c>VendTrans</c>.
    /// </remarks>
    private void insertStatisticsOnInvoiceJourInternal(TransDate _dateFrom, TransDate _dateTo, PostingProfile _profile, VendGroupId _vendGroupId)
    {
        VendTable vendTable;

        insert_recordset jour
        (
        Session
        , Type
        , TransTableId
        , TransRecId
        , AmountTransactional
        , AmountAccounting
        , CurrencyCode
        , SettlementAmountTransactional
        , SettlementAmountAccounting
        , PostingProfile
        , DocumentDate
        , ExchAdjustment
        , InvoiceJourTableId
        , InvoiceJourRecId
        , InvoiceAccount
        , InvoiceId
        , InvoiceVoucher
        , InvoiceDate
        , PurchReceiptDate_W
        , InvoiceReceivedDate
        , VendGroupId
        )
        select
            currentSession
            , VendType
            , VendTransTableId
            , RecId
            , AmountCur
            , AmountMST
            , CurrencyCode
            , SettleAmountCur
            , SettleAmountMST
            , PostingProfile
            , DocumentDate
            , ExchAdjustment
            from vendTransInvoice
            where (vendTransInvoice.TransType == LedgerTransType::Vend
                    || vendTransInvoice.TransType == LedgerTransType::Purch
                    || vendTransInvoice.TransType == LedgerTransType::GeneralJournal)
                && (!_profile || vendTransInvoice.PostingProfile == _profile)
        join
            VendInvoiceJourTableId
            , RecId
            , InvoiceAccount
            , InvoiceId
            , LedgerVoucher
            , InvoiceDate
            , PurchReceiptDate_W
            , ReceivedDate
            from vendInvoiceJour
            where vendInvoiceJour.LedgerVoucher == vendTransInvoice.Voucher
                && vendInvoiceJour.InvoiceDate == vendTransInvoice.TransDate
                && (!StatisticsOnInvoiceInsertJourInternalFlight::instance().isEnabled() 
                || vendInvoiceJour.InvoiceAccount == vendTransInvoice.AccountNum)
        join
            VendGroup
            from vendTable
            where vendTable.AccountNum == vendInvoiceJour.InvoiceAccount
                && (!_vendGroupId || vendTable.VendGroup == _vendGroupId)
        exists join vendSettlement
            where vendSettlement.TransRecId == vendTransInvoice.RecId
                && ((vendSettlement.TransDate >= _dateFrom && vendSettlement.TransDate <= _dateTo)
                    || (vendSettlement.DueDate >= _dateFrom && vendSettlement.DueDate <= _dateTo))
                && vendSettlement.CanBeReversed
        exists join vendTransPayment
            where vendTransPayment.RecId == vendSettlement.OffsetRecid
                && (vendTransPayment.TransType == LedgerTransType::Payment
                    // Compensation
                    || vendTransPayment.TransType == LedgerTransType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromPlVendCorrectJour</Name>
				<Source><![CDATA[
    private void updateFromPlVendCorrectJour()
    {
        PlVendCorrectJour vendCorrectJour;

        while select forupdate jour
            where jour.Session == currentSession
        {
            select firstonly DocumentDate
                from vendCorrectJour
                order by RecId desc
                where vendCorrectJour.InvoiceAccount == jour.InvoiceAccount
                    && vendCorrectJour.InvoiceDate == jour.InvoiceDate
                    && vendCorrectJour.InvoiceId == jour.InvoiceId
                    && vendCorrectJour.Posted == NoYes::Yes;

            if (vendCorrectJour && jour.DocumentDate != vendCorrectJour.DocumentDate)
            {
                jour.DocumentDate = vendCorrectJour.DocumentDate;
                jour.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postValidate</Name>
				<Source><![CDATA[
    protected void postValidate()
    {
        StatisticsOnInvoicePaymentAccountEntry paymentAccountEntry;
        while select sum(AmountAccounting), sum(AmountTransactional) from paymentAccountEntry
            group by paymentAccountEntry.PaymentSchedule, jour.InvoiceId, paymentSchedule.TransDate, paymentSchedule.DueDate
        join TransDate, DueDate from paymentSchedule
            where paymentSchedule.RecId == paymentAccountEntry.PaymentSchedule
                && paymentSchedule.Session == currentSession
        join InvoiceId from jour
            where jour.RecId == paymentSchedule.InvoiceJour
        {
            if (paymentAccountEntry.AmountAccounting != 0 || paymentAccountEntry.AmountTransactional != 0)
            {
                warning(strFmt("@StatisticsOnInvoice:PostValidateRoundingIssues", jour.InvoiceId, paymentSchedule.TransDate, paymentSchedule.DueDate));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>