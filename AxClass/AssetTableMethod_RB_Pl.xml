<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_RB_Pl</Name>
	<SourceCode>
		<Declaration><![CDATA[
final public class AssetTableMethod_RB_Pl extends AssetTableMethod_RB
{
    AssetAmount             periodAmount;
    AssetAmount             periodAmountNotCost;// Stores the value of the none cost part of the deprecation amount.
    Amount                  salesScrapValue;
    TransDate               lastSaleScrapDate;
    TransDate               firstDepreciationDate;

    AssetAmount             periodAmountCost;   // Stores the value of the cost part of the deprecation amount.
    AssetAmount             addDepAmountCost;   // Stores the sume of the cost based of the deprecation amounts.
    TransDate               depStartDate;
    AssetAmount             tmpAmountToDepreciate;
    AssetAmount             tmpPrevDepAmount;
    AssetAmount             tmpPrvDepreciationAmount;
    AssetAmount             tmpPrvDepreciationAmountCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountToDepreciate_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the amount to depreciate for Reducing Balance Poland for the given interval.
    /// </summary>
    /// <returns>
    /// The amount to depreciate.
    /// </returns>
    public AssetAmount amountToDepreciate_PL()
    {
        return amountToDepreciate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areDatesInSameYear</Name>
				<Source><![CDATA[
    private boolean areDatesInSameYear(TransDate _firstDate, TransDate _secondDate)
    {
        boolean returnValue;

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            returnValue = FiscalCalendars::areDatesInSameFiscalYear(
                CompanyInfoHelper::fiscalCalendarRecId(),
                _firstDate,
                _firstDate);
        }
        else
        {
            returnValue = (year(_firstDate) == year(_secondDate));
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount to depreciate for reducing balance Poland for the given interval.
    /// </summary>
    /// <returns>
    /// The amount to depreciate.
    /// </returns>
    public AssetAmount calc()
    {
        AssetTransDate              startOfPeriod;
        AssetAmount                 extraordinaryDepAmount;
        TransDate                   transDate;
        AssetDepreciationPercentage factor;
        AssetDepreciationRate_W     assetRate;

        AssetAmount                 deprPrevAmount;         // Keeps track all of the depreciation including the prior years ones.
        AssetAmount                 deprPrevNonCostAmount;  // Keeps track all of the none cost depreciation including the prior years ones.
        boolean                     isFirstYear;
        boolean                     costPart = assetBook.DeprPrevPeriods_PL || assetBook.DeprPrevPriorCost_PL;
        RecId                       calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        TransDate                   prevYearendDate;

        startOfPeriod = deprInterval.startOfPeriod(periodstart);

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();

            this.setAmountToDepreciate();

            if (isReportingCurrencyDepreciation)
            {
                extraordinaryDepAmount = - AssetTrans::amountReportingCurrencyPerDateTranstype(
                    assetBook.AssetId,
                    periodEnd,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation);
            }
            else
            {
                extraordinaryDepAmount = - AssetTrans::amountMSTPerDateTranstype(
                    assetBook.AssetId,
                    periodEnd,
                    assetBook.BookId,
                    AssetTransType::ExtraordinaryDepreciation);
            }

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            // For PL reducing balance, the sale/scrap amounts affects depreciation calculations with the beginning of the next year.
            if (previousDepreciationDate &&
                deprInterval.hasYearChanged(previousDepreciationDate, periodEnd))
            {
                prevYearEndDate = this.getFirstDateOfYear(periodstart) - 1;

                if (isReportingCurrencyDepreciation)
                {
                    salesScrapValue = AssetTrans::getSalesScrapValueReportingCurrency(
                        assetBook.AssetId,
                        assetBook.BookId,
                        depStartDate,
                        prevYearEndDate);
                }
                else
                {
                    salesScrapValue = AssetTrans::getSalesScrapValue(
                        assetBook.AssetId,
                        assetBook.BookId,
                        depStartDate,
                        prevYearEndDate);
                }

                prevDepAmount = this.prvDepreciationAmount(periodstart) + depreciationThisRun + prevDepAmountExternal + salesScrapValue;
                prevPeriods = 0;

                prevDepAmountCost_PL += addDepAmountCost;
                addDepAmountCost = 0;
            }

            restPeriod = ((periodEnd - periodstart + 1)/(periodEnd - startOfPeriod + 1));

            if (calculatePrevPeriods && ! amountToDepreciate)
            {
                prevPeriods += restPeriod;
            }
            else
            {
                // Determine the whole depreciation amount that include cost and none cost based amounts.
                if (deprInterval.assetDepreciationTime(depreciationDate))
                {
                    assetAmount = ((amountToDepreciate - prevDepAmount - extraordinaryDepAmount) * this.percentage() / 100) / deprInterval.assetDepreciationTime(depreciationDate);
                }
                else
                {
                    assetAmount = 0;
                }
                calculatePrevPeriods = false;
            }

            // Reducing balance amounts can be multiplied by a factor specified by the user.
            // Reducing balnace can only be used as primary profile, so primary factor can be used.
            assetRate = AssetDepreciationGroup_W::findRate(assetBook.DepreciationGroupId_W, this.depDate());

            factor = assetRate.Factor ? assetRate.Factor : 1;
            assetAmount = assetBook.roundDepreciationAmount(assetAmount  * this.revaluationFactor() * factor, isReportingCurrencyDepreciation);

            AssetAmount depreciationMin = isReportingCurrencyDepreciation ?
                assetParameters.DepreciationMinReportingCurrency :
                assetParameters.DepreciationMin;

            if (assetAmount < depreciationMin)
            {
                assetAmount = min(depreciationMin, amountToDepreciate - prevDepAmount - extraordinaryDepAmount);
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = deprInterval.endPeriod(periodstart);

            previousDepreciationDate = depreciationDate;

            if (! prevPeriods)
            {
                assetAmount = assetBook.roundDepreciationAmount(assetAmount, isReportingCurrencyDepreciation);
            }

            depreciationThisRun += assetAmount;
        }

        if (!prevPeriods
            && ((this.prvDepreciationAmount(periodstart, true) + depreciationThisRun + prevDepAmountExternal + extraordinaryDepAmount + salesScrapValue) >= amountToDepreciate))
        {
            assetAmount         -= this.prvDepreciationAmount(periodstart, true) +
                                   depreciationThisRun                     +
                                   prevDepAmountExternal                   +
                                   extraordinaryDepAmount                  +
                                   salesScrapValue                         -
                                   amountToDepreciate;
            if (assetAmount < 0)
            {
                assetAmount = 0;
            }
            prevDepAmount        = amountToDepreciate - extraordinaryDepAmount;
            depreciationThisRun  = amountToDepreciate                      -
                                   this.prvDepreciationAmount(periodstart) -
                                   prevDepAmountExternal                   -
                                   extraordinaryDepAmount;
            if (depreciationThisRun < 0)
            {
                depreciationThisRun = 0;
            }

            theEnd = true;

            if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Calendar)
            {
                transDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), depreciationDate);
            }
            else
            {
                transDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, depreciationDate);
            }

            if (isReportingCurrencyDepreciation)
            {
                if (AssetTrans::amountToDepriciateInReportingCurrency(assetBook.AssetId, maxDate(), assetBook.BookId)
                    - AssetTrans::amountToDepriciateInReportingCurrency(assetBook.AssetId, transDate - 1, assetBook.BookId) > 0)
                {
                    theEnd = false;
                }
            }
            else
            {
                if (AssetTrans::amountToDepriciate(assetBook.AssetId, maxDate(), assetBook.BookId)
                    - AssetTrans::amountToDepriciate(assetBook.AssetId, transDate - 1, assetBook.BookId) > 0)
                {
                    theEnd = false;
                }
            }
        }

        AssetAmount costLimit = this.getAmountInCurrency(assetRate.CostLimit_PL);

        // If the none cost information is specified, calculate it and adjust the cost based amount.
        if (amountToDepreciate && costLimit)
        {
            // The prior year amounts are only applied if Date when depreciation was last run/Depreciation run date match the same year as the transaction date.
            isFirstYear = year(this.depDate()) == year(depStartDate);
            AssetAmount deprPrevPeriods = this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL);
            AssetAmount deprPrevPeriodsNonCost = this.getAmountInCurrency(assetBook.DeprPrevPeriodsNonCost_PL);
            deprPrevAmount        = costPart ? (isFirstYear ? this.getAmountInCurrency(assetBook.DeprPrevPriorCost_PL): deprPrevPeriods) : 0;
            deprPrevNonCostAmount = costPart ? (isFirstYear ? this.getAmountInCurrency(assetBook.DeprPrevPriorNonCost_PL): deprPrevPeriodsNonCost) : 0;

            tmpPrevDepAmount = depreciationThisRun + prevDepAmountExternal - assetAmount;

            if (amountToDepreciate - prevDepAmount - extraordinaryDepAmount > 0)
            {
                // Determine the cost based deprecation amount.
                periodAmountCost = assetBook.roundDepreciationAmount(assetAmount * (costLimit - prevDepAmountCost_PL) /
                            (amountToDepreciate - prevDepAmount - extraordinaryDepAmount), isReportingCurrencyDepreciation);

                if (costPart)
                {
                    periodAmountCost = assetBook.roundDepreciationAmount((costLimit - prevDepAmountCost_PL - (deprPrevAmount - deprPrevNonCostAmount))
                                                * this.percentage() / 100 / deprInterval.assetDepreciationTime(depreciationDate), isReportingCurrencyDepreciation);
                }

                periodAmountCost = assetBook.roundDepreciationAmount(periodAmountCost  * this.revaluationFactor() * factor, isReportingCurrencyDepreciation);

                if (tmpAmountToDepreciate - deprPrevAmount != amountToDepreciate &&
                    tmpAmountToDepreciate - tmpPrevDepAmount - extraordinaryDepAmount - tmpPrvDepreciationAmount - deprPrevAmount > 0)
                {
                    if (tmpAmountToDepreciate - tmpPrevDepAmount - extraordinaryDepAmount - tmpPrvDepreciationAmount - deprPrevPeriods)
                    {
                        periodAmountCost = assetBook.roundDepreciationAmount(assetAmount * (costLimit- prevDepAmountCost_PL - addDepAmountCost - tmpPrvDepreciationAmountCost -
                                                (deprPrevPeriods - deprPrevPeriodsNonCost)) /
                                                (tmpAmountToDepreciate - tmpPrevDepAmount - extraordinaryDepAmount - tmpPrvDepreciationAmount - deprPrevPeriods), isReportingCurrencyDepreciation);
                    }
                }
            }

            if (costLimit - prevDepAmountCost_PL - addDepAmountCost - periodAmountCost -
                (deprPrevAmount - deprPrevNonCostAmount) < 0)
            {
                periodAmountCost = costLimit - prevDepAmountCost_PL - addDepAmountCost -
                                   (deprPrevAmount - deprPrevNonCostAmount);
            }

            periodAmountCost = periodAmountCost > 0 ? periodAmountCost : 0;

            periodAmountNotCost = assetAmount - periodAmountCost;

            if (periodAmountNotCost < 0)
            {
                periodAmountNotCost = 0;
            }

            addDepAmountCost += periodAmountCost;
        }

        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDateOfYear</Name>
				<Source><![CDATA[
    private TransDate getFirstDateOfYear(TransDate _assetTransDate)
    {
        TransDate yearStart;

        if (assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            yearStart = LedgerFiscalCalendar::findFirstDayOfYear(CompanyInfoHelper::fiscalCalendarRecId(), _assetTransDate);
        }
        else
        {
            yearStart = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }

        return yearStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        TransDate  transDate = assetBook.LastDepreciationDate ? assetBook.LastDepreciationDate + 1: assetBook.DepreciationStartDate;
        transDate previousYearEndDate;

        super();

        // depStartDate date will be used to determine if the prior years amounts need to be applied during the depreciation.
        depStartDate = assetBook.DepreciationStartDate ? assetBook.DepreciationStartDate : transDate;

        prevDepAmount = this.prvDepreciationAmount(transDate);
        prevDepAmountCost_PL = prevDepAmount - this.prvNonCostDepreciationAmount(transDate);

        // For RB PL the scrap/sales is considered into calculation only in the next next calendar.
        // Thus, the scrap/sales amounts are calculated through the end of the prior year.
        previousYearEndDate = this.getFirstDateOfYear(transDate) - 1;

        if (isReportingCurrencyDepreciation)
        {
            salesScrapValue = AssetTrans::getSalesScrapValueReportingCurrency(assetBook.AssetId, assetBook.BookId, depStartDate, previousYearEndDate);
        }
        else
        {
            salesScrapValue = AssetTrans::getSalesScrapValue(assetBook.AssetId, assetBook.BookId, depStartDate, previousYearEndDate);
        }

        lastSaleScrapDate = previousYearEndDate;

        prevDepAmount += salesScrapValue;

        if (assetBook.Status != AssetStatus::NoAcquisition)
        {
            AssetTransTmp assetTransTmp = AssetCacheManager::getCacheAssetTrans(assetBook.assetId, assetBook.bookId);
            select firstonly TransDate from assetTransTmp
                order by TransDate asc
                where assetTransTmp.AssetId == assetBook.assetId
                    && assetTransTmp.BookId == assetBook.bookId
                    && (assetTransTmp.TransType == AssetTransType::Depreciation
                    || assetTransTmp.TransType == AssetTransType::DepreciationAdj
                    || assetTransTmp.TransType == AssetTransType::ExtraordinaryDepreciation
                    || assetTransTmp.TransType == AssetTransType::AccumulatedDepreciation_PL);

            firstDepreciationDate = assetTransTmp.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        AssetAmount amountToDepriciateMax;
        AssetAmount amountToDepriciateCur;

        if (isReportingCurrencyDepreciation)
        {
            amountToDepriciateMax = AssetTrans::amountToDepriciateInReportingCurrency(assetBook.AssetId, maxDate(), assetBook.BookId);
            amountToDepriciateCur = AssetTrans::amountToDepriciateInReportingCurrency(
                assetBook.AssetId,
                depreciationDate ? prevMth(depreciationDate): depreciationDate,
                assetBook.BookId);
        }
        else
        {
            amountToDepriciateMax = AssetTrans::amountToDepriciate(assetBook.AssetId, maxDate(), assetBook.BookId);
            amountToDepriciateCur = AssetTrans::amountToDepriciate(
                assetBook.AssetId,
                depreciationDate ? prevMth(depreciationDate): depreciationDate,
                assetBook.BookId);
        }

        if (amountToDepriciateMax - amountToDepriciateCur > 0)
        {
            theEnd = false;
        }

        if (!theEnd)
        {
            return super();
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the taxable amount of the depreciation.
    /// </summary>
    /// <returns>
    ///     The taxable amount of the depreciation.
    /// </returns>
    public AssetAmount periodAmountCost_PL()
    {
        return periodAmountCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodAmountNotCost_PL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the non-taxable amount of the depreciation.
    /// </summary>
    /// <returns>
    ///     The non-taxable amount of the depreciation.
    /// </returns>
    public AssetAmount periodAmountNotCost_PL()
    {
        return  periodAmountNotCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the depreciation amount of at the end of the last year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date for which the search will be done.
    /// </param>
    /// <param name="_fixedDate">
    /// If this option is set, the transaction date will be used for the end date of the search.
    /// </param>
    /// <returns>
    /// The amount of the depreciation.
    /// </returns>

    public AssetAmount prvDepreciationAmount(AssetTransDate _assetTransDate, boolean _fixedDate = false)
    {
        AssetTransDate  depYearStart;
        AssetAmount     prvDepreciationAmount;
        RecId           calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (!_fixedDate)
        {
            depYearStart = this.getFirstDateOfYear(_assetTransDate);
        }
        else
        {
            depYearStart = _assetTransDate + 1;
        }

        if (isReportingCurrencyDepreciation)
        {
            prvDepreciationAmount = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj, AssetTransType::DepreciationNotCost_PL],
                dateNull(),
                depYearStart - 1));

            tmpPrvDepreciationAmount = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj, AssetTransType::DepreciationNotCost_PL],
                dateNull(),
                prevMth(_assetTransDate)));

            tmpPrvDepreciationAmountCost = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                dateNull(),
                prevMth(_assetTransDate)));
        }
        else
        {
            prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj, AssetTransType::DepreciationNotCost_PL],
                dateNull(),
                depYearStart - 1));

            tmpPrvDepreciationAmount = -(AssetTrans::amountMSTPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj, AssetTransType::DepreciationNotCost_PL],
                dateNull(),
                prevMth(_assetTransDate)));

            tmpPrvDepreciationAmountCost = -(AssetTrans::amountMSTPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::Depreciation, AssetTransType::DepreciationAdj],
                dateNull(),
                prevMth(_assetTransDate)));
        }

        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prvNonCostDepreciationAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost based Non-Depreciation amount of at the end of the last year.
    /// </summary>
    /// <param name="_assetTransDate">
    /// The transaction date for which the search will be done.
    /// </param>
    /// <returns>
    /// The amount of the depreciation.
    /// </returns>
    private AssetAmount prvNonCostDepreciationAmount(AssetTransDate _assetTransDate)
    {
        AssetTransDate  depYearStart;
        AssetAmount     prvDepreciationAmount;

        depYearStart = _assetTransDate + 1;

        if (isReportingCurrencyDepreciation)
        {
            prvDepreciationAmount = -(AssetTrans::amountReportingCurrencyPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::DepreciationNotCost_PL],
                dateNull(),
                depYearStart - 1));
        }
        else
        {
            prvDepreciationAmount = -(AssetTrans::amountMSTPerDateTransTypes(
                assetBook.AssetId,
                assetBook.BookId,
                [AssetTransType::DepreciationNotCost_PL],
                dateNull(),
                depYearStart - 1));
        }

        return prvDepreciationAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountToDepreciate</Name>
				<Source><![CDATA[
    protected void setAmountToDepreciate(AssetTransDate _assetTransDate = periodEnd)
    {
        date    startFiscalCalendarDate;
        date    endDateWritAdj;

        super ();
        tmpAmountToDepreciate = amountToDepreciate;

        // For reducing balance depreciation methods, WriteUp and WritDown transcations need to be applied
        // in the next fiscal year, not the current year.  The call to supper() returns the writeUp/WriteDown amounts.
        startFiscalCalendarDate = this.getFirstDateOfYear(_assetTransDate);

        if (startFiscalCalendarDate)
        {
            endDateWritAdj = deprInterval.endPeriod(_assetTransDate);

            if (isReportingCurrencyDepreciation)
            {
                amountToDepreciate -= AssetTrans::amountReportingCurrencyPerDateTransTypes(
                    assetBook.AssetId,
                    assetBook.BookId,
                    [AssetTransType::WriteUpAdj, AssetTransType::WriteDownAdj],
                    startFiscalCalendarDate,
                    endDateWritAdj);
            }
            else
            {
                amountToDepreciate -= AssetTrans::amountMSTPerDateTransTypes(
                    assetBook.AssetId,
                    assetBook.BookId,
                    [AssetTransType::WriteUpAdj, AssetTransType::WriteDownAdj],
                    startFiscalCalendarDate,
                    endDateWritAdj);
            }
        }

        // For reducing balance methods with Original Balance values, two number are needed.
        // DeprPrevPriorCost_PL represents the accumulated depreciation amount from the start
        // of deprecation until the last day of a fiscal year in which the asset was depreciated
        // for the whole year.
        // Ex. Deprecation start day is Jan. 1, 2001, the date of the last deprecation period is  March 31, 2004.
        // The day used for the DeprPrevPriorCost_PL is Dec. 31, 2003
        // DeprPrevPeriods_PL represents the total accumulated amount from the start of depreciation
        // until the last period.
        // Consequently, in the first year of deprecation, DeprPrevPriorCost_PL is used as the number represents
        // last fully depreciated amount for the whole year.
        // In the following years, DeprPrevPeriods_PL is used in the calculations as it represents the whole OB
        // Depreciation.

        if (assetBook.DeprPrevPeriods_PL)
        {
            if (assetBook.DeprPrevPriorCost_PL
                && assetBook.DeprPrevPeriods_PL != assetBook.DeprPrevPriorCost_PL)
            {
                // Determine when was the first date of the depreciation
                // If the current transaction is in the first year of deprecation,
                // Depreciation amount before registration of prior years will be used.
                if (this.areDatesInSameYear(firstDepreciationDate ? firstDepreciationDate : assetBook.LastDepreciationDate, _assetTransDate))
                {
                    amountToDepreciate -= this.getAmountInCurrency(assetBook.DeprPrevPriorCost_PL);
                    return;
                }
            }

            amountToDepreciate -= this.getAmountInCurrency(assetBook.DeprPrevPeriods_PL);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>