<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionFocusInitializeBalanceSim_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionFocusInitializeBalanceSim_IT</c> class creates the dimension set balances for simulations.
/// </summary>
public class DimensionFocusInitializeBalanceSim_IT extends DimensionFocusProcessBalanceSim_IT implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the caption of the batch.
    /// </summary>
    /// <returns>
    ///    The caption of the batch.
    /// </returns>
    /// <remarks>
    ///    The caption is also used as the title of the dialog.
    /// </remarks>
    public ClassDescription caption()
    {
        ClassDescription description;
        if (dimensionFocusState == DimensionFocusBalanceInitializationState::NotInitialized)
        {
            description = strFmt("@SYS316756", dimensionFocusName);
        }
        else
        {
            description = strFmt("@SYS320042", dimensionFocusName);
        }
        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dimension set balances.
    /// </summary>
    /// <remarks>
    ///    The dimension set temporary balances are summed.
    /// </remarks>
    protected void createBalance()
    {
        super();
        DimensionFocusBalanceSim_IT balances;
        DimensionFocusBalanceSimTmp_IT balancesTemp = this.createBalanceTemp();

        // create the permanent records from the temp records
        insert_recordset balances (AccountingDate, Ledger, PostingLayer, FiscalCalendarPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo,
            DebitAccountingCurrencyAmount, CreditAccountingCurrencyAmount,
            DebitReportingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo,
            sum(DebitAccountingCurrencyAmount), sum(CreditAccountingCurrencyAmount),
            sum(DebitReportingCurrencyAmount), sum(CreditReportingCurrencyAmount),
            sum(Quantity) from balancesTemp
        group by FocusDimensionHierarchy, FocusLedgerDimension,
            AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            IsSystemGeneratedUltimo
        where balancesTemp.FocusLedgerDimension != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalanceTemp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the temporary dimension set balances for balance initialization.
    /// </summary>
    /// <returns>
    ///    The temporary dimension focus balances.
    /// </returns>
    /// <remarks>
    ///    The general journal account entries are summed.
    /// </remarks>
    protected DimensionFocusBalanceSimTmp_IT createBalanceTemp()
    {
        DimensionFocusBalanceCalculationSimView_IT balanceView;
        DimensionFocusBalanceSimTmp_IT balancesTemp;
        DimensionFocusUnprocessedTransactionsSim_IT unprocessedTrans;

        // Debit + !SysGenUltimo
        NoYes isCreditAmount = NoYes::No;
        NoYes isSysGenUltimo = NoYes::No;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount,
            sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount),
            sum(Quantity) from balanceView
        group by FocusLedgerDimension, FocusDimensionHierarchy,
            AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit
        where balanceView.FocusDimensionHierarchy == dimensionFocusRecId
            && balanceView.FocusLedgerDimension != 0
            && balanceView.IsCredit == NoYes::No
            && (ledgerRecId == 0 || balanceView.Ledger == ledgerRecId)
            && (balanceView.FiscalPeriodType != FiscalPeriodType::Closing
            || balanceView.PostingType != LedgerPostingType::TransferOpeningClosing)
        notexists join unprocessedTrans
            where unprocessedTrans.GeneralJournalEntry == balanceView.GeneralJournalEntry
                && unprocessedTrans.FocusDimensionHierarchy == balanceView.FocusDimensionHierarchy
                && (unprocessedTrans.State == DimensionFocusBalanceCalculationState::Pending
                    || unprocessedTrans.State == DimensionFocusBalanceCalculationState::InProcess);

        // Credit + !SysGenUltimo
        isCreditAmount = NoYes::Yes;
        isSysGenUltimo = NoYes::No;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit,
            CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount,
            sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount),
            sum(Quantity) from balanceView
        group by FocusLedgerDimension, FocusDimensionHierarchy,
            AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit
        where balanceView.FocusDimensionHierarchy == dimensionFocusRecId
            && balanceView.FocusLedgerDimension != 0
            && balanceView.IsCredit == NoYes::Yes
            && (ledgerRecId == 0 || balanceView.Ledger == ledgerRecId)
            && (balanceView.FiscalPeriodType != FiscalPeriodType::Closing
            || balanceView.PostingType != LedgerPostingType::TransferOpeningClosing)
        notexists join unprocessedTrans
            where unprocessedTrans.GeneralJournalEntry == balanceView.GeneralJournalEntry
                && unprocessedTrans.FocusDimensionHierarchy == balanceView.FocusDimensionHierarchy
                && (unprocessedTrans.State == DimensionFocusBalanceCalculationState::Pending
                || unprocessedTrans.State == DimensionFocusBalanceCalculationState::InProcess);

        // Debit + SysGenUltimo
        isCreditAmount = NoYes::No;
        isSysGenUltimo = NoYes::Yes;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit,
            DebitAccountingCurrencyAmount, DebitReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount,
            sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount),
            sum(Quantity) from balanceView
        group by FocusLedgerDimension, FocusDimensionHierarchy,
            AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit
        where balanceView.FocusDimensionHierarchy == dimensionFocusRecId
            && balanceView.FocusLedgerDimension != 0
            && balanceView.IsCredit == NoYes::No
            && (ledgerRecId == 0 || balanceView.Ledger == ledgerRecId)
            && (balanceView.FiscalPeriodType == FiscalPeriodType::Closing
            && balanceView.PostingType == LedgerPostingType::TransferOpeningClosing)
        notexists join unprocessedTrans
            where unprocessedTrans.GeneralJournalEntry == balanceView.GeneralJournalEntry
                && unprocessedTrans.FocusDimensionHierarchy == balanceView.FocusDimensionHierarchy
                && (unprocessedTrans.State == DimensionFocusBalanceCalculationState::Pending
                || unprocessedTrans.State == DimensionFocusBalanceCalculationState::InProcess);

        // Credit + SysGenUltimo
        isCreditAmount = NoYes::Yes;
        isSysGenUltimo = NoYes::Yes;

        insert_recordset balancesTemp (AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            IsSystemGeneratedUltimo, IsCredit,
            CreditAccountingCurrencyAmount, CreditReportingCurrencyAmount,
            Quantity)
        select AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId,
            FocusLedgerDimension, FocusDimensionHierarchy,
            isSysGenUltimo, isCreditAmount,
            sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount),
            sum(Quantity) from balanceView
        group by FocusLedgerDimension, FocusDimensionHierarchy,
            AccountingDate, Ledger, PostingLayer, FiscalPeriodType, SimulationJournalNameId, IsCredit
        where balanceView.FocusDimensionHierarchy == dimensionFocusRecId
            && balanceView.FocusLedgerDimension != 0
            && balanceView.IsCredit == NoYes::Yes
            && (ledgerRecId == 0 || balanceView.Ledger == ledgerRecId)
            && (balanceView.FiscalPeriodType == FiscalPeriodType::Closing
            && balanceView.PostingType == LedgerPostingType::TransferOpeningClosing)
        notexists join unprocessedTrans
            where unprocessedTrans.GeneralJournalEntry == balanceView.GeneralJournalEntry
                && unprocessedTrans.FocusDimensionHierarchy == balanceView.FocusDimensionHierarchy
                && (unprocessedTrans.State == DimensionFocusBalanceCalculationState::Pending
                || unprocessedTrans.State == DimensionFocusBalanceCalculationState::InProcess);

        return balancesTemp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerDimensionReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates ledger dimension references for balance initialization.
    /// </summary>
    /// <remarks>
    ///    The general journal account entries that are not marked as unprocessed are converted to focus
    ///    ledger dimensions.
    /// </remarks>
    protected void createLedgerDimensionReference()
    {
        super();

        DimensionFocusUnprocessedTransactionsSim_IT unprocessedTransSim;
        GeneralJournalAccountEntrySim_IT generalJournalAccountEntrySim;
        GeneralJournalEntrySim_IT generalJournalEntrySim;
        RecordInsertList newLedgerDimensionReferences = new RecordInsertList(tableNum(DimensionFocusLedgerDimensionRefSim_IT));

        while select LedgerDimension from generalJournalAccountEntrySim
                group by generalJournalAccountEntrySim.LedgerDimension
            exists join generalJournalEntrySim
                where generalJournalEntrySim.RecId == generalJournalAccountEntrySim.GeneralJournalEntry
            notexists join unprocessedTransSim
                where unprocessedTransSim.GeneralJournalEntry == generalJournalEntrySim.RecId
                    && unprocessedTransSim.FocusDimensionHierarchy == dimensionFocusRecId
        {
            this.processAccountEntryLedgerDimension(newLedgerDimensionReferences, generalJournalAccountEntrySim.LedgerDimension);
        }

        newLedgerDimensionReferences.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerRecId</Name>
				<Source><![CDATA[
    public LedgerRecId parmLedgerRecId(LedgerRecId _ledgerRecId = ledgerRecId)
    {
        ledgerRecId = _ledgerRecId;
        return ledgerRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes before the primary dimension set processing is started.
    /// </summary>
    /// <returns>
    /// A value that indicates whether dimension set processing should be performed.
    /// </returns>
    /// <remarks>
    /// This method is called inside the database transaction.
    /// </remarks>
    protected boolean preProcess()
    {
        boolean canContinue = super();
        DimensionFocusBalanceSim_IT balance;
        delete_from balance
            where balance.FocusDimensionHierarchy == dimensionFocusRecId
                && (ledgerRecId == 0 || balance.Ledger == ledgerRecId);

        // Any existing DimensionFocusLedgerDimensionReference records are indirectly
        // related to the balance calculation and should not be removed because doing
        // so will only slow down the balance calculation.

        DimensionFocusUnprocessedTransactionsSim_IT::deleteWithState(
            dimensionFocusRecId,
            DimensionFocusBalanceCalculationState::Pending,
            ledgerRecId);

        return canContinue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();

        DimensionFocusInitializeBalanceSim_IT::runInitialization(this.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static DimensionFocusInitializeBalanceSim_IT construct(DimensionHierarchy _dimensionHierarchy, LedgerRecId _ledgerRecId = 0)
    {
        DimensionFocusInitializeBalanceSim_IT initializeBalance = new DimensionFocusInitializeBalanceSim_IT();
        initializeBalance.setDimensionHierarchy(_dimensionHierarchy);
        initializeBalance.parmLedgerRecId(_ledgerRecId);

        return initializeBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFullRebuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuilds the balances of all the initialized dimension sets.
    /// </summary>
    /// <param name="_parentBatchHeader">
    /// The parent batch header; optional.
    /// </param>
    /// <param name="_parentTaskId">
    /// The parent batch task ID; optional.
    /// </param>
    /// <param name="_ledgerRecId">
    /// The ledger to process; optional.
    /// </param>
    /// <remarks>
    /// This will only process initialized dimension sets,
    /// it excludes those that are in process and those that are not initialized.
    /// The caller must save the <c>BatchHeader</c> record.
    /// </remarks>
    public static void processFullRebuild(batchHeader _parentBatchHeader = null, RecId _parentTaskId = 0, LedgerRecId _ledgerRecId = 0)
    {
        DimensionHierarchy dimHierarchy;

        while select dimHierarchy
            where dimHierarchy.StructureType == DimensionHierarchyType::Focus
                && dimHierarchy.FocusState == DimensionFocusBalanceInitializationState::Initialized
        {
            DimensionFocusInitializeBalanceSim_IT dimensionFocusInitializeBalance = DimensionFocusInitializeBalanceSim_IT::construct(dimHierarchy, _ledgerRecId);

            if (_parentBatchHeader)
            {
                BatchInfo batchInfo = dimensionFocusInitializeBalance.batchInfo();
                batchInfo.parmCaption(dimensionFocusInitializeBalance.caption());
                if (_parentTaskId)
                {
                    _parentBatchHeader.addRuntimeTask(dimensionFocusInitializeBalance, _parentTaskId);
                }
                else
                {
                    _parentBatchHeader.addTask(dimensionFocusInitializeBalance);
                }
            }
            else
            {
                dimensionFocusInitializeBalance.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInitialization</Name>
				<Source><![CDATA[
    private static void runInitialization(container _packedClass)
    {
        DimensionFocusInitializeBalanceSim_IT serverBalance = DimensionFocusInitializeBalanceSim_IT::construct(null);
        serverBalance.unpack(_packedClass);
        serverBalance.runInitializationTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInitializationTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization.
    /// </summary>
    public void runInitializationTask()
    {
        #OCCRetryCount

        if (dimensionFocusState == DimensionFocusBalanceInitializationState::InProcess)
        {
            // do nothing if it is already in process
            if (suppressErrors)
            {
                return;
            }
            else
            {
                throw error("@SYS323928");
            }
        }

        boolean isUpdated;

        // Attempt to update the initialization state until it succeeds or the maximum retry count
        // is reached. Do nothing if it fails since the result is that no processing will be done.
        try
        {
            ttsBegin;

            isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                dimensionFocusRecId,
                dimensionFocusState,
                DimensionFocusBalanceInitializationState::InProcess);

            if (!isUpdated)
            {
                // do nothing if the record was not updated
                if (suppressErrors)
                {
                    return;
                }
                else
                {
                    throw error("@SYS323928");
                }
            }

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

        // Attempt to initialize the focus until it succeeds or the maximum retry count is reached.
        // Make sure the initialization state is updated for all paths.
        try
        {
            ttsBegin;

            this.progressInit(this.caption(), 0, #AviFindFile);

            if (dimensionFocusState == DimensionFocusBalanceInitializationState::Initialized)
            {
                // remove for rebuild only
                this.removeAll();
            }

            this.createLedgerDimensionReference();
            this.createBalance();

            isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                dimensionFocusRecId,
                DimensionFocusBalanceInitializationState::InProcess,
                DimensionFocusBalanceInitializationState::Initialized);
            Debug::assert(isUpdated);

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ttsBegin;

                    isUpdated = DimensionHierarchySupportProviderSim_IT::updateStateSim(
                        dimensionFocusRecId,
                        DimensionFocusBalanceInitializationState::InProcess,
                        dimensionFocusState);
                    Debug::assert(isUpdated);

                    ttsCommit;

                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes all dimension focus balance related records.
    /// </summary>
    /// <remarks>
    ///    The result is that balances are ready to be initialized or rebuilt.
    /// </remarks>
    private void removeAll()
    {
        DimensionFocusBalanceSim_IT balanceSim;
        DimensionFocusLedgerDimensionRefSim_IT referenceSim;

        delete_from balanceSim
            where balanceSim.FocusDimensionHierarchy == dimensionFocusRecId;

        delete_from referenceSim
            where referenceSim.FocusDimensionHierarchy == dimensionFocusRecId;

        DimensionFocusUnprocessedTransactionsSim_IT::deleteWithState(dimensionFocusRecId, DimensionFocusBalanceCalculationState::Pending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scheduleProcessFullRebuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the rebuild of all the balance sets that are initialized through scheduled batch.
    /// </summary>
    /// <param name="_ledgerRecId">
    /// The ledger to process; optional.
    /// </param>
    /// <remarks>
    /// This will only process initialized dimension sets,
    /// it excludes those that are in process and those that are not initialized.
    /// </remarks>
    public static void scheduleProcessFullRebuild(LedgerRecId _ledgerRecId = 0)
    {
        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = BatchHeader::construct();
            batchHeader.parmCaption("@SYS319183");
        }

        DimensionFocusInitializeBalanceSim_IT::processFullRebuild(batchHeader, 0, _ledgerRecId);

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>