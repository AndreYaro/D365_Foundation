<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMConsistOf_BOMVersion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PmfFormCtrl_BOMConsistOf_BOMVersion</c> class is the form control handler for the
/// <c>BOMVersion</c> record that is part of the <c>BOMConsistOf</c> form.
/// </summary>
class PmfFormCtrl_BOMConsistOf_BOMVersion
    extends PmfFormCtrl_BOM_BOMVersion
{
    ItemId    callerItemId;
    InventDim inventDim;
    BOM       lineDeleted;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCoByProductsButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>CoByProductsButton</c> button should be enabled.
    /// </summary>
    /// <returns>
    /// true if the button should be enabled; otherwise, false.
    /// </returns>
    public boolean checkCoByProductsButtonEnabled()
    {
        boolean         ret = false;

        if (#PmfEnabled
            && this.bomVersion().RecId)
        {
            ret = !bomVersionInventTable.Phantom;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceActivePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>active</c> event has been processed for the data source.
    /// </summary>
    public void dataSourceActivePost()
    {
        super();

        if (this.isPmfEnabled())
        {
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CoByProducts)).enabled(this.checkCoByProductsButtonEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>delete</c> event for the data source has been processed.
    /// </summary>
    public void dataSourceDeletePost()
    {
        BOMVersion bomVersion = this.bomVersion();

        super();

        if (this.isFormulaEnabled()
            && bomVersion.Approved
            && lineDeleted.RecId
            && lineDeleted.RecId != bom.RecId)
        {
            this.updateDesign();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceDeletePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called before the <c>delete</c> event for the data source will be processed.
    /// </summary>
    public void dataSourceDeletePre()
    {
        lineDeleted.data(bom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>BOMVersion</c> data source has been initialized.
    /// </summary>
    /// <param name="_buffer">
    /// The record buffer that is associated to the data source.
    /// </param>
    public void dataSourceInitPost(Common _buffer)
    {
        Query                   q;
        QueryBuildDataSource    qB;

        super(_buffer);

        if (this.isPmfEnabled())
        {
            q = this.parmFormDataSource().query();
            qB = q.dataSourceTable(tablenum(BOMVersion));

            qB.addRange(
                fieldnum(BOMVersion, PmfTypeId)).value(
                    queryValue(this.isFormulaEnabled()
                                ? PmfBOMFormula::Formula
                                : PmfBOMFormula::BOM));

            this.parmFormDataSource().query(q);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInitValuePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the <c>initValue</c> event of the data source.
    /// </summary>
    /// <param name="_buffer">
    /// The buffer associated with the data source.
    /// </param>
    public void dataSourceInitValuePost(BOMVersion _buffer)
    {
        _buffer.initFromInventTable(InventTable::find(_buffer.ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the lookup for the fields on the <c>BOMVersion</c> record.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field for which to handle the lookup.
    /// </param>
    /// <param name="_formControl">
    /// The form control that initializes the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// An additional filter for the lookup.
    /// </param>
    public void fieldLookup(
        fieldId         _fieldId,
        FormControl     _formControl,
        str             _filterStr)
    {
        boolean handled = false;

        switch (_fieldId)
        {
            case fieldnum(BOMVersion, bomId) :

                handled = true;

                if (this.isFormulaEnabled())
                {
                    if (this.bomVersion().ItemId)
                    {
                        BOMTable::lookupFormulaId(
                            _formControl,
                            InventTable::find(this.bomVersion().ItemId),
                            InventTable::find(this.bomVersion().ItemId).itemGroupId(),
                            this.parmInventDim().InventSiteId);
                    }
                    else
                    {
                        BOMTable::lookupFormulaItemId(
                                    _formControl,
                                    PmfBOMFormula::Formula);
                    }
                }
                else
                {
                    if (this.bomVersion().ItemId)
                    {
                        BOMTable::lookupBOMId(
                            _formControl,
                            InventTable::find(this.bomVersion().ItemId).itemGroupId(),
                            this.parmInventDim().InventSiteId);
                    }
                }

                break;
            case fieldnum(BOMVersion, PmfBulkParent) :
                InventTable::lookupPmfBulkItem(_formControl,
                    this.bomVersion().bomId, this.bomVersion().ItemId);
                break;
            default :
            //break;
        }

        if (!handled)
        {
            super(_fieldId, _formControl, _filterStr);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called after the form element has been initialized.
    /// </summary>
    /// <remarks>
    /// Initializes the form button manager and adjusts various properties for the usage of the form with
    /// formulas.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// The form element has not been set for this class.
    /// </exception>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@SCM:FormulaVersions");
            this.parmFormRun().design().titleDatasource('');
        }

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }

        if (this.isCatchWeightEnabled())
        {
            this.registerPdsCatchWeightCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, VersionButtonGroup)),
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CoByProducts)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, PmfFormulaUnit)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, FormulaDetails_PmfFormulaUnit)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PmfCoByVarAllow)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, FormulaDetails_BOMVersion_PmfCoByVarAllow)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PmfFormulaMultiple)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, FormulaDetails_BOMVersion_PmfFormulaMultiple)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PmfBulkParent)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_PmfBulkParent)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, VersionActionPaneTab)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO85");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMActionPaneTab)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO1017");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, GeneralTab)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO85");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMTab)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@PRO1509");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMConsistOfAction)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Text,
            "@SYS41323");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMGroup)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@SCM:MaintainFormulaCaption");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, VersionButtonGroup)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Caption,
            "@SCM:MaintainFormulaVersionCaption");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, OpenBOMTable)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Text,
            "@PRO1115");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_BOMId)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1115");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_BOMId)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1115");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_BOMId)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO991");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_BOMId)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO991");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_Name)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO992");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_Name)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO992");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_FromDate)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO993");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_FromDate)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO993");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_ToDate)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO994");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_ToDate)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO994");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_FromQty)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1978");
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_FromQty)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Label,
            "@PRO1978");

        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CreateNewButtonGroup)),
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CreateBOMVersion)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Text,
            "@PRO85");

        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CreateNewButtonGroup)),
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CreateBOM)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Text,
            "@SCM:FormulaAndFormulaVersion");
        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CreateNewButtonGroup)),
            formRun.design().controlName(formcontrolstr(BOMConsistOf, CreateBOM)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::HelpText,
            "@PRO240");

        this.registerCtrlRule(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMGroup)),
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMRouteCopyJob)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
            ButtonRuleEffectType::Text,
            "@PRO1480");

        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_FromQty)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isNotCatchWeightVersionItem),
            ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
            formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_FromQty)),
            methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isNotCatchWeightVersionItem),
            ButtonRuleEffectType::AllowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPdsCatchWeightCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPdsCatchWeightCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PdsCWUnit)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, FormulaDetails_BOMVersion_PdsCWUnit)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PdsCWFromQty)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaCatchWeightVersionItem),
                ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, General_BOMVersion_PdsCWFromQty)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaCatchWeightVersionItem),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PmfBatchSize)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isNotCatchWeightVersionItem),
                ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, FormulaDetails_BOMVersion_PmfBatchSize)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isNotCatchWeightVersionItem),
                ButtonRuleEffectType::AllowEdit);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, BOMVersion_PdsCWSize)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaCatchWeightVersionItem),
                ButtonRuleEffectType::AllowEdit);
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMConsistOf, FormulaDetails_BOMVersion_PdsCWSize)),
                methodstr(PmfFormCtrl_BOMConsistOf_BOMVersion, isFormulaCatchWeightVersionItem),
                ButtonRuleEffectType::AllowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightVersionItem</Name>
				<Source><![CDATA[
    public boolean isCatchWeightVersionItem()
    {
        return PdsGlobal::pdsIsCWItem(callerItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaCatchWeightVersionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item is a catch weight enabled item and the version is a formula.
    /// </summary>
    /// <returns>
    /// true if the item is a catch weight enabled item and the version is a formula; otherwise, false.
    /// </returns>
    public boolean isFormulaCatchWeightVersionItem()
    {
        return this.isCatchWeightVersionItem() && this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the version is a formula.
    /// </summary>
    /// <returns>
    /// True if the version is a formula; otherwise false.
    /// </returns>
    public boolean isFormulaEnabled()
    {
        InventTable inventTable = this.callerBuffer();
        if (this.caller() != null)
        {
            if (this.caller().name() == formstr(BOMTable))
            {
                BOM billOfMaterials = this.args().record();
                inventTable = billOfMaterials.inventTable();
            }
        }
        boolean ret = inventTable.isFormulaAllowed();

        ret = ret
            || this.menuItemName() == menuitemdisplaystr(PmfFormulaConsistOf)
            || (this.caller()
                && (this.caller().name() == formstr(BOMConsistOf)
                    || this.caller().name() == formstr(BOMPartOf)
                    || this.caller().name() == formStr(BOMTable))
                && this.caller().pmfIsEnabled());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotCatchWeightVersionItem</Name>
				<Source><![CDATA[
    public boolean isNotCatchWeightVersionItem()
    {
        return !this.isCatchWeightVersionItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PdsCWFormCtrl   cwCtrl;

        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        if (this.isCatchWeightEnabled())
        {
            cwCtrl = PdsCWFormCtrl_Std::construct();

            cwCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(BOMVersion,PmfBatchSize),
                    fieldnum(BOMVersion,PdsCWSize),
                    false],
                    [fieldnum(BOMVersion,FromQty),
                    fieldnum(BOMVersion,PdsCWFromQty),
                    false]]
                ));
            cwCtrl.parmItemFieldId(fieldnum(BOMVersion,ItemId));
            cwCtrl.parmUnitMethodStr(tablemethodstr(BOMVersion, pdsCWUnitId));

            this.addSubFormCtrl(cwCtrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOM</Name>
				<Source><![CDATA[
    public BOM parmBOM(BOM _bom = bom)
    {
        if (!prmisdefault(_bom))
        {
            bom = _bom;
        }

        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        if (!prmisdefault(_inventDim))
        {
            inventDim = _inventDim;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data sources that are that will be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A <c>Common</c> table buffer that belongs to the first data source.
    /// </param>
    /// <param name="_datasources2">
    /// A <c>Common</c> table buffer that belongs to the second data source.
    /// </param>
    /// <param name="_datasources3">
    /// A <c>Common</c> table buffer that belongs to the third data source.
    /// </param>
    /// <param name="_datasources4">
    /// A <c>Common</c> table buffer that belongs to the fourth data source.
    /// </param>
    /// <param name="_datasources5">
    /// A <c>Common</c> table buffer that belongs to the fifth data source.
    /// </param>
    /// <remarks>
    /// Up to 5 data sources can be passed. If the implementation requires more data sources additional
    /// custom methods should be implemented on the rule implementer class. The method is called by the
    /// <c>FormButtonManager</c> class on the rule class implementing the <c>ButtonStateProvider</c>
    /// interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(BOMVersion)
            || _datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.parmInventDim(_datasources2);

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design.
    /// </summary>
    /// <remarks>
    /// Updates the states and visibility of form controls that are based on the type of <c>BOMVersion</c>
    /// record.
    /// </remarks>
    public void updateDesign()
    {
        boolean isFormula       = this.isFormulaEnabled();
        boolean allowEdit       = true;

        if (BOMParameters::find().BlockEditing && this.bomVersion().isApproved())
        {
            allowEdit = false;
        }

        if (this.bomVersion().ItemId)
        {
            callerItemId = this.bomVersion().ItemId;
        }

        super();

        this.visibleDSField(
            fieldnum(BOMVersion, PmfFormulaChangeDate),
            isFormula);

        this.visibleDSField(
            fieldnum(BOMVersion, PmfYieldPct),
            isFormula);

        this.visibleDSField(
            fieldnum(BOMVersion, PmfBatchSize),
            isFormula);

        this.visibleDSField(
            fieldnum(BOMVersion, PdsCWSize),
            isFormula);

        this.visibleDSField(
            fieldnum(BOMVersion, PdsCWFromQty),
            isFormula);

        this.visibleDSField(
            fieldnum(BOMVersion, PmfFormulaVersionCalculation),
            isFormula);

        this.visibleDSField(
            fieldnum(BOMVersion, PmfTotalCostAllocation),
            isFormula);

        if (isFormula)
        {
            this.parmFormDataSource(FormDataUtil::getFormDataSource(buffer)).allowEdit(allowEdit);
        }
        this.parmFormDataSource().refresh();

        this.refreshManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMConsistOf_BOMVersion construct()
    {
        return new PmfFormCtrl_BOMConsistOf_BOMVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element.
    /// </summary>
    /// <param name="_fr">
    /// The form element for which to create the form control handler.
    /// </param>
    /// <returns>
    /// The created form control handler.
    /// </returns>
    public static PmfFormCtrl_BOMConsistOf_BOMVersion newFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_BOMConsistOf_BOMVersion::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerBuffer</Name>
				<Source><![CDATA[
    public Common callerBuffer()
    {
        Common ret = super();

        InventTable callerInventTable;

        if (ret.TableId == tableNum(InventTable))
        {
            callerInventTable = ret;
        }
        else if (ret.TableId == tableNum(InventDimCombination))
        {
            InventDimCombination inventDimCombination = ret;
            callerInventTable = inventDimCombination.inventTable();
        }

        return callerInventTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>