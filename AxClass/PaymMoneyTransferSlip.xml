<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymMoneyTransferSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymMoneyTransferSlip
{
    protected BankAccountTable bankAccountTable;
    protected PaymentStubInvoiceId paymentStubId;
    private PaymId paymentId;
    private NumberSequenceCode numSeqCode;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCheckId</Name>
				<Source><![CDATA[
    public str amountCheckId(AmountCur amount)
    {
        str amountStr = num2Str( amount * 100, -1, 0, 0, 0 );

        return int2Str(Global::modulo10(amountStr, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCheckId_Modulu9710</Name>
				<Source><![CDATA[
    protected str amountCheckId_Modulu9710(AmountCur _paymentAmount)
    {
        const int64 Mod97 = 97;

        // Calculated using ISO 7064 Modulu 97-10 in accordance with documentation fra Danish PBS
        // 1. Remove decimals and add two digits to the amount (example 1345.79 -> 13457900)
        // 2. Divide by 97 and keep the remainder
        // 3. Check digits are (97+1) - the remainder
        int64 adjustedPaymentAmount = any2Int64(_paymentAmount * 10000);
        int64 checkDigit = (Mod97 + 1) - (adjustedPaymentAmount mod Mod97);

        return strRFix(int642Str(checkDigit), 2, '0');
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account number.
    /// </summary>
    /// <returns>The bank account number.</returns>
    public BankAccount bankAccountNum()
    {
        return bankAccountTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId bankAccountId(CompanyBankAccountId _bankAccountId = bankAccountTable.AccountID)
    {
        this.initFromBankAccountTable(_bankAccountId);
        return bankAccountTable.AccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable</Name>
				<Source><![CDATA[
    public BankAccountTable bankAccountTable()
    {
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyRegNum</Name>
				<Source><![CDATA[
    public CompanyRegNum companyRegNum()
    {
        return CompanyInfo::find().RegNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giroType</Name>
				<Source><![CDATA[
    public str giroType()
    {
        str giroType = '';

        switch (paymentStubId)
        {
            case PaymentStub::FIK751,
                PaymentStub::FIK752:
                giroType = '71';
                break;
        }

        return giroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(PaymentStubInvoiceId _paymentStubId)
    {
        paymentId = '';
        paymentStubId = _paymentStubId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankAccountTable</Name>
				<Source><![CDATA[
    public void initFromBankAccountTable(CompanyBankAccountId _bankAccountId)
    {
        bankAccountTable = BankAccountTable::find(_bankAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrField</Name>
				<Source><![CDATA[
    public str ocrField(
        str _invoice_Account,
        str _invoice_Id,
        int _invoiceIdMaxLength)
    {
        #ISOCountryRegionCodes

        str ocrField = '';
        str companyRegNum = this.companyRegNum();

        if ((strlen(companyRegNum) > 11) && (paymentStubId != PaymentStub::BBS)
            && (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]) || paymentStubId != PaymentStub::None)
            && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK]))
        {
            warning("@CashManagement:OCRMaxLength");
            companyRegNum = substr(companyRegNum, 1, 11);
        }

        switch (paymentStubId)
        {
            case PaymentStub::BBS:
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                ocrField = this.paymentId(_invoice_Account, _invoice_Id, _invoiceIdMaxLength);
                break;

            case PaymentStub::None:
            case PaymentStub::QRBill:
                ocrField = this.paymentIdDef(_invoice_account, _invoice_id, _invoiceIdMaxLength);
                break;
        }

        return ocrField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumSeqCode</Name>
				<Source><![CDATA[
    public NumberSequenceCode parmNumSeqCode(NumberSequenceCode _numSeqCode = numSeqCode)
    {
        numSeqCode = _numSeqCode;
        return numSeqCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the payment ID value.
    /// </summary>
    /// <param name = "_invoice_Account">
    ///     The customer invoice account.
    /// </param>
    /// <param name = "_invoice_Id">
    ///     The invoice ID.
    /// </param>
    /// <param name = "_invoiceIdMaxLength">
    ///     The invoice ID max length.
    /// </param>
    /// <returns>
    ///     A string that contains the payment ID value.
    /// </returns>
    public str paymentId(
        str _invoice_Account,
        str _invoice_Id,
        int _invoiceIdMaxLength)
    {
        str invoiceAccount;
        str invoiceId;
        int paymentIdMaxLength;
        BankPaymId_NO custPaymId= new BankPaymId_NO();

        if ((SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO])
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCH]) && CustConfigurablePaymentIdFeature_CH::isEnabled())
            && !paymentId))
        {
            if (BankCustPaymIdTable::findOnAccount(_invoice_account, false, numSeqCode).BlankPaymId)
            {
                return '';
            }

            paymentId = custPaymId.createCustPaymId(_invoice_account, _invoice_Id, false, 0, 0, '', numSeqCode);

            if (paymentId)
            {
                return paymentId;
            }
        }

        // Denmark FIK String example
        // +71<000000000404022+00000000<
        // +71 : Payment type
        // 404022 : Invoice number (right aligned, 14 digits)
        // 2 : Check digit for invoice number (0000000004040222 modulo 10) = 2
        // + : Separator
        // 00000000 : Invoice id (right aligned, 8 digits)
        boolean useUpdatedFIKString = ProjInvoiceFIKStringUpdateFlight_DK::instance().isEnabled();

        if (!paymentId
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoDK])
            && useUpdatedFIKString)
        {
            // Sanitize the invoice account and invoice ID
            invoiceAccount = strFmt('%1', strKeep(_invoice_Account, '0123456789'));
            invoiceId = strFmt('%1', strKeep(_invoice_Id, '0123456789'));

            invoiceId = subStr(invoiceId, strLen(invoiceId), -8);
            
            // Pad with leading zeros
            invoiceAccount = strRFix(invoiceAccount, 14, '0'); // may need bank registration number option in future
            
            while (strLen(invoiceId) < 8)
            {
                invoiceId = '0' + invoiceId;
            }

            str prefix = '+71<';
            invoiceAccount = invoiceAccount + strfmt('%1', Global::modulo10(invoiceAccount, true));
            str suffix = '<';

            paymentId = strfmt('%1%2+%3%4', prefix, invoiceAccount, invoiceId, suffix);

            return paymentId;
        } 
        else if (!paymentId)
        {
            paymentIdMaxLength = this.paymentIdMaxLength();

            invoiceAccount = strFmt('%1', strKeep(_invoice_Account, '0123456789'));
            invoiceId = strFmt('%1', strKeep(_invoice_Id, '0123456789'));

            while (strLen(invoiceId) < _invoiceIdMaxLength)
            {
                invoiceId = '0' + invoiceId;
            }

            paymentId = invoiceAccount + invoiceId;

            if (strLen(paymentId) > paymentIdMaxLength)
            {
                warning(strFmt("@ApplicationSuite_Localization:PaymentIdLengthWithCheckDigitCannotExceed", paymentIdMaxLength + 1));
                paymentId = subStr(paymentId, strLen(paymentId), -paymentIdMaxLength);
            }

            while (strLen(paymentId) < paymentIdMaxLength)
            {
                paymentId = '0' + paymentId;
            }

            paymentId = paymentId + strfmt('%1', Global::modulo10(paymentId, true));
        }

        return paymentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentIdMaxLength</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the maximum length for payment ID.
    /// </summary>
    /// <returns>
    ///     The maximum length of payment ID.
    /// </returns>
    protected int paymentIdMaxLength()
    {
        int paymentIdMaxLength;
        switch (paymentStubId)
        {
            case PaymentStub::FIK751,
                PaymentStub::FIK752:
                    paymentIdMaxLength = 14;
                break;

            case PaymentStub::BBS:
                paymentIdMaxLength = 15;
                break;

            default:
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFI]))
                {
                    paymentIdMaxLength = 19;
                }
                else
                {
                    paymentIdMaxLength = 14;
                }

                break;
        }

        return paymentIdMaxLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentIdDef</Name>
				<Source><![CDATA[
    public str paymentIdDef(str _invoiceAccount, str _invoiceId, int _invoiceIdMaxLength)
    {
        BankPaymId_NO custPaymId = new BankPaymId_NO();

        if (!paymentId)
        {
            if (BankCustPaymIdTable::findOnAccount(_invoiceAccount, false, numSeqCode).BlankPaymId)
            {
                paymentId = '';
            }
            else
            {
                paymentId = custPaymId.createCustPaymId(_invoiceAccount, _invoiceId, false, 0, 0, '', numSeqCode);
            }
        }

        return paymentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PaymMoneyTransferSlip construct( PaymentStub _paymentStub)
    {
        switch (_paymentStub)
        {
            case PaymentStub::None,
                PaymentStub::FIK751,
                PaymentStub::FIK752,
                PaymentStub::QRBill:
                return new PaymMoneyTransferSlip();

            case PaymentStub::BBS:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00004, funcName());
                return new PaymMoneyTransferSlip();

            case PaymentStub::ESR_red_bank,
                PaymentStub::ESR_orange:
                return new PaymMoneyTransferSlip_CH();

            case PaymentStub::BelSMS101,
                PaymentStub::BelSMS102:
                return new PaymMoneyTransferSlip_BE();

            case PaymentStub::Finnish:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00002, funcName());
                return new PaymMoneyTransferSlip_FI();
        }

        throw error(strfmt("@SYS19306", funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentSlip_DK</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for a valid FI-Creditor ID for a payment slip of type FIK 751 or FIK 752.
    /// </summary>
    /// <param name = "_paymentStub">The payment attachment type.</param>
    /// <param name = "_currency">The payment currency.</param>
    /// <returns>
    /// true if the parameters are valid for FIK 751 and FIK 752; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the transaction is in a currency that is not DKK, an error message is displayed. If the
    /// transaction is in a currency other than DKK but still uses FIK 752 and FIK 752, an error message
    /// will be displayed.
    /// </remarks>
    public static boolean checkPaymentSlip_DK(PaymentStub _paymentStub, CurrencyCode _currency)
    {
        boolean ok = true;

        if (_paymentStub == PaymentStub::FIK751 || _paymentStub == PaymentStub::FIK752)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDK00007, funcName());

            ok = !CompanyInfoHelper::checkFICreditorIDEmpty(CompanyInfo::find().fiCreditorID_DK);

            if (_currency != enum2Symbol(enumNum(ISOCurrencyCodes), ISOCurrencyCodes::DKK))
            {
                ok = checkFailed("@SYS314488");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQRIBANOrIBAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retreives company QR-IBAN or IBAN base on the input parameter <paramref name="_paymId"/>.
    /// </summary>
    /// <param name = "_paymId">The Payment Id.</param>
    /// <returns>Company QR-IBAN or IBAN base on the input parameter <paramref name="_paymId"/></returns>
    public BankIBAN getQRIBANOrIBAN(PaymId _paymId)
    {
        return CustQRBillQRCodeCreator_CH::isQRReferenceType(_paymId)
                ? (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, QRIBAN_CH))
                    ? this.bankAccountTable().QRIBAN_CH
                    : "@AccountsReceivable:FiveAsterisk")
                : (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN))
                    ? this.bankAccountTable().IBAN
                    : "@AccountsReceivable:FiveAsterisk");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>