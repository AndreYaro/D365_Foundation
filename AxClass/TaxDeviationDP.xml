<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDeviationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxDeviationDP</c> class declares variables and tables.
/// </summary>
    [
    SRSReportQueryAttribute(queryStr(TaxDeviation)),
    SRSReportParameterAttribute(classStr(TaxDeviationContract))
    ]
    public class TaxDeviationDP extends SRSReportDataProviderPreProcessTempDB
{
    TaxDeviationTmp taxDeviationTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxDeviationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns data from the <c>TaxDeviationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>TaxDeviationTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxDeviationTmp))]
    public TaxDeviationTmp getTaxDeviationTmp()
    {
        select taxDeviationTmp;
        return taxDeviationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        TaxTrans taxTrans;
        boolean insertRecord;
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;
        NoYes isSuccessfulReport;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();
            taxEventSourceLog.TaxReportStart(identifier);
            stopWatch.Start();

            QueryRun queryRun = new QueryRun(this.parmQuery());

            RecordInsertList recordInsertList = new RecordInsertList(taxDeviationTmp.TableId, true, true, true, false, true, taxDeviationTmp);

            TaxDeviationContract contract = this.parmDataContract() as TaxDeviationContract;

            AmountMST deviationValue = contract.parmDeviationValue();
            boolean isDeviationCheckNeeded = contract.parmWithDifference();

            // add relevant results to temporary TempDB table
            while (queryRun.next())
            {
                taxTrans = queryRun.get(tableNum(TaxTrans));

                taxDeviationTmp.clear();

                taxDeviationTmp.TaxAmount = taxTrans.TaxAmount;
                taxDeviationTmp.SourceTaxAmountCur = taxTrans.SourceTaxAmountCur;
                taxDeviationTmp.taxValueFromTaxCode = taxTrans.taxValueFromTaxCode();
                taxDeviationTmp.calculatedTaxValue = taxTrans.calculatedTaxValue();

                if (!isDeviationCheckNeeded
                    || (isDeviationCheckNeeded
                    && taxDeviationTmp.TaxAmount != taxDeviationTmp.SourceTaxAmountCur
                    && abs(taxDeviationTmp.taxValueFromTaxCode - taxDeviationTmp.calculatedTaxValue) > deviationValue))
                {
                    taxDeviationTmp.TransDate = taxTrans.TransDate;
                    taxDeviationTmp.Voucher = taxTrans.Voucher;
                    taxDeviationTmp.Source1 = taxTrans.Source;
                    taxDeviationTmp.TaxCode = taxTrans.TaxCode;
                    taxDeviationTmp.TaxDirection1 = taxTrans.TaxDirection;
                    taxDeviationTmp.TaxBaseAmount = taxTrans.TaxBaseAmount;
                    taxDeviationTmp.sourceName = taxTrans.sourceName();
                    taxDeviationTmp.amountInclTax = taxTrans.amountInclTax();

                    recordInsertList.add(taxDeviationTmp);
                }
            }

            recordInsertList.insertDatabase();
            isSuccessfulReport = NoYes::Yes;
        }
        catch(Exception::Error)
        {
            isSuccessfulReport = NoYes::No;
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            taxEventSourceLog.TaxReportStop(identifier, SysCountryRegionCode::countryInfo(), new MenuFunction(menuItemOutputStr(TaxDeviation), MenuItemType::Output).label(), 'TaxDeviation', isSuccessfulReport, stopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>