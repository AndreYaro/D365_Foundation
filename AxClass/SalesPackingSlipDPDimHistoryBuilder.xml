<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPackingSlipDPDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPackingSlipDPDimHistoryBuilder</c> class builds the storage Dimension and the data to be entered to temporary table for the <c>SalesPackingSlipDP</c> class.
/// </summary>
class SalesPackingSlipDPDimHistoryBuilder extends SalesPurchDimHistoryBuilder
{
    private CustPackingSlipJour     custPackingSlipJour;
    private CustPackingSlipTrans    custPackingSlipTrans;
    private CustPackingSlipVersion  custPackingSlipVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCustPackingSlipTrans</Name>
				<Source><![CDATA[
    public CustPackingSlipTrans parmCustPackingSlipTrans(CustPackingSlipTrans _custPackingSlipTrans = custPackingSlipTrans)
    {
        custPackingSlipTrans = _custPackingSlipTrans;
        return custPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustPackingSlipJour</Name>
				<Source><![CDATA[
    public CustPackingSlipJour parmCustPackingSlipJour(CustPackingSlipJour _custPackingSlipJour = custPackingSlipJour)
    {
        custPackingSlipJour = _custPackingSlipJour;
        return custPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustPackingSlipVersion</Name>
				<Source><![CDATA[
    public CustPackingSlipVersion parmCustPackingSlipVersion(CustPackingSlipVersion _custPackingSlipVersion = custPackingSlipVersion)
    {
        custPackingSlipVersion = _custPackingSlipVersion;
        return custPackingSlipVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return custPackingSlipTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitOfMeasure</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol lineUnitOfMeasure()
    {
        return custPackingSlipTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQuantity</Name>
				<Source><![CDATA[
    protected Qty lineQuantity()
    {
        return custPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForVersion()
    {
        this.printInventDimForCustPackingSlipVersion(custPackingSlipVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventDimForCustPackingSlipVersion</Name>
				<Source><![CDATA[
    private void printInventDimForCustPackingSlipVersion(CustPackingSlipVersion _custPackingSlipVersion)
    {
        InventReportDimHistory inventReportDimHistory;
        InventDim inventDim;

        while select Qty from inventReportDimHistory
            where inventReportDimHistory.TransRefId         == _custPackingSlipVersion.InternalPackingSlipId
                && inventReportDimHistory.InventTransId      == custPackingSlipTrans.InventTransId
                && inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::SalesPackingSlip
            join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId
        {
            this.inventDimPrint(inventReportDimHistory.Qty, inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return custPackingSlipJour.LanguageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProformaDimensionStringForStockedProduct</Name>
				<Source><![CDATA[
    protected void buildProformaDimensionStringForStockedProduct()
    {
        InventQty qtyRemain = custPackingSlipTrans.InventQty;

        if (qtyRemain)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            while select inventTransOrigin
                where inventTransOrigin.InventTransId     == custPackingSlipTrans.InventTransId &&
                        inventTransOrigin.ReferenceCategory == InventTransType::Sales
                join InventDimId, Qty from inventTrans
                    order by StatusIssue, InventDimId
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId              &&
                            (inventTrans.StatusIssue       == StatusIssue::OnOrder                 ||
                            inventTrans.StatusIssue       == StatusIssue::ReservOrdered           ||
                            inventTrans.StatusIssue       == StatusIssue::ReservPhysical          ||
                            inventTrans.StatusIssue       == StatusIssue::Picked)                 &&
                            inventTrans.StatusReceipt     == StatusReceipt::None
                join inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
            {
                if (this.mustPrintTransactionQuantity(inventTransOrigin, inventTrans, inventDim))
                {
                    qtyRemain = this.inventDimPrintForTransaction(qtyRemain, inventTrans.Qty, inventDim);

                    if (!qtyRemain)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    protected boolean isProforma()
    {
        return custPackingSlipJour.isProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockedProduct</Name>
				<Source><![CDATA[
    protected boolean isStockedProduct()
    {
        return custPackingSlipTrans.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionStringForMostRecentVersion</Name>
				<Source><![CDATA[
    protected void buildDimensionStringForMostRecentVersion()
    {
        InventReportDimHistory inventReportDimHistory;
        CustPackingSlipVersion  localCustPackingSlipVersion;
        InventDim inventDim;

        select firstOnly RecId, InternalPackingSlipId from localCustPackingSlipVersion
            order by localCustPackingSlipVersion.VersionDateTime desc
            where localCustPackingSlipVersion.CustPackingSlipJour == custPackingSlipJour.RecId
                && localCustPackingSlipVersion.VersionDateTime     <  custPackingSlipVersion.VersionDateTime
            exists join inventReportDimHistory
                where inventReportDimHistory.TransRefId           == localCustPackingSlipVersion.InternalPackingSlipId
                    && inventReportDimHistory.InventTransId        == custPackingSlipTrans.InventTransId
                    && inventReportDimHistory.TransactionLogType   == InventReportDimHistoryLogType::SalesPackingSlip
            exists join inventDim
                where inventDim.InventDimId == inventReportDimHistory.InventDimId;

        if (localCustPackingSlipVersion.RecId)
        {
            this.printInventDimForCustPackingSlipVersion(localCustPackingSlipVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesPackingSlipDPDimHistoryBuilder construct()
    {
        return new SalesPackingSlipDPDimHistoryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferPost</Name>
				<Source><![CDATA[
    [Hookable(false),
     SysObsolete('Method is obsoleted to support fast print feature. Please file an extensibility request if other access is required.', false, 25\5\2023)]
    protected boolean isDeferPost()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>