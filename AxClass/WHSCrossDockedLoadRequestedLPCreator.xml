<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCrossDockedLoadRequestedLPCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCrossDockedLoadRequestedLPCreator</c> class is responsible for creating requested licenseplates for orders that are used to cross dock the load.
/// </summary>
class WHSCrossDockedLoadRequestedLPCreator
{
    WHSLoadId whsLoadId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createRequestedLPsForSingleTransferOrder</Name>
				<Source><![CDATA[
    private void createRequestedLPsForSingleTransferOrder(InventTransferId _transferId)
    {
        WHSTransferOrderRequestedLPCreator whsTransferOrderRequestedLPCreator = WHSTransferOrderRequestedLPCreator::newFromTransferId(_transferId);

        whsTransferOrderRequestedLPCreator.createRequestedLicensePlates();
    }
]]></Source>
			</Method>
			<Method>
				<Name>createRequestedLPsForXDockTransferOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates requested licenseplates for transfer orders that are used to cross dock the load.
    /// </summary>
    public void createRequestedLPsForXDockTransferOrders()
    {
        WHSLoadLine             whsLoadLine;
        PurchLine               purchLine;
        RetailBuyersPushLine    RetailBuyersPushLine;
        RetailBuyersPushLineQty RetailBuyersPushLineQty;
        InventTransferLine      inventTransferLine;
        RetailPackagePurch      RetailPackagePurch;

        ttsBegin;

        //We are finding all the transfer lines that are being crossdocked and was being created based on PO packages.
        while select inventTransferLine
            group by inventTransferLine.TransferId
        exists join RetailBuyersPushLineQty
            where RetailBuyersPushLineQty.RecId     == inventTransferLine.RetailReplenishRefRecId
            &&    RetailBuyersPushLineQty.tableId   == inventTransferLine.RetailReplenishRefTableId
        exists join RetailBuyersPushLine
            where RetailBuyersPushLine.BuyersPushId == RetailBuyersPushLineQty.BuyersPushId
            &&    RetailBuyersPushLine.LineNum      == RetailBuyersPushLineQty.LineNum
        exists join purchLine
            where purchLine.RecId == RetailBuyersPushLine.RefRecId
        exists join RetailPackagePurch
            where RetailPackagePurch.LineNum == purchLine.RBOPackageLineNum
                && RetailPackagePurch.PurchId    == purchLine.PurchId
                &&  RetailPackagePurch.PackageId == purchLine.RetailPackageId
        exists join whsLoadLine
            where whsLoadLine.LoadId            == this.parmWHSLoadId()
                && whsLoadLine.InventTransId    == purchLine.InventTransId
                && whsLoadLine.InventTransType  == InventTransType::Purch
        {
            this.createRequestedLPsForSingleTransferOrder(inventTransferLine.TransferId);
        }

        ttsCommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmWhsLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmWhsLoadId(WHSLoadId _whsLoadId = whsLoadId)
    {
        whsLoadId = _whsLoadId;

        return whsLoadId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSCrossDockedLoadRequestedLPCreator construct()
    {
        return new WHSCrossDockedLoadRequestedLPCreator();
    }
]]></Source>
			</Method>
			<Method>
				<Name>newFromWHSLoadId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSCrossDockedLoadRequestedLPCreator</c> class based on the parameters.
    /// </summary>
    /// <param name="_whsLoadId">
    /// A load ID.
    /// </param>
    /// <returns>
    /// An instance of the <c>WHSCrossDockedLoadRequestedLPCreator</c> class.
    /// </returns>
    public static WHSCrossDockedLoadRequestedLPCreator newFromWHSLoadId(
        WHSLoadId _whsLoadId)
    {
        WHSCrossDockedLoadRequestedLPCreator whsCrossDockedLoadRequestedLPCreator = WHSCrossDockedLoadRequestedLPCreator::construct();
        whsCrossDockedLoadRequestedLPCreator.parmWhsLoadId(_whsLoadId);

        return whsCrossDockedLoadRequestedLPCreator;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
