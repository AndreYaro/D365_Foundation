<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationLineReconcileDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class of reconciled line for Bank reconciliation ER report.
/// </summary>
public final class BankReconciliationLineReconcileDP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMatchedDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matched company transaction data stored in temporary table for report printing
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The temporary table storing the company transactions information for report printing.</returns>
    [SRSReportDataSet(tableStr(BankReconciliationElectronicReportDocumentTmp)), Hookable(false)]
    public BankReconciliationElectronicReportDocumentTmp getMatchedDocumentTmp(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationElectronicReportDocumentTmp tmpDocument;
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;
        NoYes matched = NoYes::Yes;

        tmpDocument.skipDatabaseLog(true);
        tmpDocument.skipAosValidation(true);
        tmpDocument.skipDataMethods(true);
        tmpDocument.skipEvents(true);

        BankDocumentTable bankDocumentTable;
        BankReconciliationHistoryDetails historyDetails;

        insert_recordset tmpDocument (BankDocumentTableView, BankCurrencyAmount, CorrectionBankCurrencyAmount,
            BankTransType, Reference, TransactionDate,
            DocumentNum, DocumentType, Cancelled, Posted, IsMatched)
            select BankDocumentTable from historyDetails
                where historyDetails.BankReconciliationHeader == _reconciliationHeaderRecId
                join bankDocumentTable
                    where bankDocumentTable.RecId == historyDetails.BankDocumentTable
                join BankCurrencyAmount, CorrectionBankCurrencyAmount,
                    BankTransType, Reference, TransactionDate,
                    DocumentNum, DocumentType, Cancelled, Posted, matched from bankDocumentTableViewResult
                    where bankDocumentTableViewResult.BankDocumentTableRecId == bankDocumentTable.RecId
                join bankReconciliationMatchingItemView
                    where bankReconciliationMatchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId
                        && bankReconciliationMatchingItemView.BankDocumentTable == bankDocumentTableViewResult.BankDocumentTableRecId;

        // For bank clearning, BankAccountTrans is generated when its status is cleared.
        BankReconciliationReportGERUtils::updateBankClearingInfo(tmpDocument);

        // Update transaction date for PDC
        BankReconciliationReportGERUtils::updateTransDateForPDC(tmpDocument, reconciliationHeader);

        return tmpDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedDocumentTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matched company transaction data stored in temporary table for report printing
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The temporary table storing the company transactions information for report printing.</returns>
    [SRSReportDataSet(tableStr(BankReconciliationElectronicReportDocumentTmp)), Hookable(false)]
    public BankReconciliationElectronicReportDocumentTmp getUnmatchedDocumentTmp(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationElectronicReportDocumentTmp tmpDocument;
        BankReconciliationHeader reconciliationHeader = BankReconciliationHeader::find(_reconciliationHeaderRecId);
        BankDocumentTableViewResult bankDocumentTableViewResult;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;
        NoYes matched = NoYes::No;

        tmpDocument.skipDatabaseLog(true);
        tmpDocument.skipAosValidation(true);
        tmpDocument.skipDataMethods(true);
        tmpDocument.skipEvents(true);

        BankDocumentTable bankDocumentTable;
        BankReconciliationHistoryDetails historyDetails;

        insert_recordset tmpDocument (BankDocumentTableView, BankCurrencyAmount, CorrectionBankCurrencyAmount,
            BankTransType, Reference, TransactionDate,
            DocumentNum, DocumentType, Cancelled, Posted, IsMatched)
            select BankDocumentTable from historyDetails
                where historyDetails.BankReconciliationHeader == _reconciliationHeaderRecId
                join bankDocumentTable
                    where bankDocumentTable.RecId == historyDetails.BankDocumentTable
                join BankCurrencyAmount, CorrectionBankCurrencyAmount,
                    BankTransType, Reference, TransactionDate,
                    DocumentNum, DocumentType, Cancelled, Posted, matched from bankDocumentTableViewResult
                    where bankDocumentTableViewResult.BankDocumentTableRecId == bankDocumentTable.RecId
                notexists join bankReconciliationMatchingItemView
                    where bankReconciliationMatchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId
                        && bankReconciliationMatchingItemView.BankDocumentTable == bankDocumentTableViewResult.BankDocumentTableRecId;

        // For bank clearning, BankAccountTrans is generated when its status is cleared.
        BankReconciliationReportGERUtils::updateBankClearingInfo(tmpDocument);

        // Update transaction date for PDC
        BankReconciliationReportGERUtils::updateTransDateForPDC(tmpDocument, reconciliationHeader);

        return tmpDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchedStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the matched bank statement transaction data stored in temporary table for report printing
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The temporary table storing the bank statement information for report printing.</returns>
    [SRSReportDataSet(tableStr(BankReconciliationElectronicReportStatementTmp)), Hookable(false)]
    public BankReconciliationElectronicReportStatementTmp getMatchedStatementTmp(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationElectronicReportStatementTmp tmpStatement;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;
        NoYes matched = NoYes::Yes;

        tmpStatement.skipDatabaseLog(true);
        tmpStatement.skipAosValidation(true);
        tmpStatement.skipDataMethods(true);
        tmpStatement.skipEvents(true);

        BankReconciliationStatementOpenView statementView;
        BankReconciliationHistoryDetails historyDetails;

        insert_recordset tmpStatement (BankStmtISOReportEntry, BankCurrencyAmount, ProprietaryBankTransactionCode, ReferenceNumber, EntryReference,
            BankDocumentNumber, IsNewBankDocument, BankStmtISOAccountStatement, AdditionalEntryInformation, IsMatched)
            select BankISOReportEntryRecId, BankCurrencyAmount, ProprietaryBankTransactionCode, ReferenceNumber, EntryReference,
                BankDocumentNumber, IsNewBankDocument, BankISOAccountStatementRecId, AdditionalEntryInformation, matched
                from statementView
                join historyDetails
                    where historyDetails.BankStmtISOReportEntry == statementView.BankISOReportEntryRecId
                        && historyDetails.BankReconciliationHeader == _reconciliationHeaderRecId
                join bankReconciliationMatchingItemView
                    where bankReconciliationMatchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId
                        && bankReconciliationMatchingItemView.BankStmtISOReportEntry == statementView.BankISOReportEntryRecId;

        // update booking date
        BankReconciliationReportGERUtils::updateBookingDate(tmpStatement);

        return tmpStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmatchedStatementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unmatched bank statement transaction data stored in temporary table for report printing
    /// </summary>
    /// <param name = "_reconciliationHeaderRecId">The RecId of the bank reconciliation header for print</param>
    /// <returns>The temporary table storing the bank statement information for report printing.</returns>
    [SRSReportDataSet(tableStr(BankReconciliationElectronicReportStatementTmp)), Hookable(false)]
    public BankReconciliationElectronicReportStatementTmp getUnmatchedStatementTmp(RecId _reconciliationHeaderRecId)
    {
        BankReconciliationElectronicReportStatementTmp tmpStatement;
        BankReconciliationMatchingItemView bankReconciliationMatchingItemView;
        BankStmtISOReportEntry reportEntry;
        NoYes unMatched = NoYes::No;

        tmpStatement.skipDatabaseLog(true);
        tmpStatement.skipAosValidation(true);
        tmpStatement.skipDataMethods(true);
        tmpStatement.skipEvents(true);

        BankReconciliationStatementOpenView statementView;
        BankReconciliationHistoryDetails historyDetails;

        insert_recordset tmpStatement (BankStmtISOReportEntry, BankCurrencyAmount, ProprietaryBankTransactionCode, ReferenceNumber, EntryReference,
            BankDocumentNumber, IsNewBankDocument, BankStmtISOAccountStatement, AdditionalEntryInformation, IsMatched)
            select BankISOReportEntryRecId, BankCurrencyAmount, ProprietaryBankTransactionCode, ReferenceNumber, EntryReference,
                BankDocumentNumber, IsNewBankDocument, BankISOAccountStatementRecId, AdditionalEntryInformation, unMatched
                from statementView
                join historyDetails
                    where historyDetails.BankStmtISOReportEntry == statementView.BankISOReportEntryRecId
                        && historyDetails.BankReconciliationHeader == _reconciliationHeaderRecId
                notexists join bankReconciliationMatchingItemView
                    where bankReconciliationMatchingItemView.BankReconciliationHeader == _reconciliationHeaderRecId
                        && bankReconciliationMatchingItemView.BankStmtISOReportEntry == statementView.BankISOReportEntryRecId;

        // update booking date
        BankReconciliationReportGERUtils::updateBookingDate(tmpStatement);

        return tmpStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>