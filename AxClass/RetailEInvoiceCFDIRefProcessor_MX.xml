<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceCFDIRefProcessor_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceCFDIRefProcessor_MX</c> class operates with incomplete CFDI UUID references for Retail related EInvoices and transform them to <c>EInvoiceCFDIReference_MX</c> records.
/// </summary>
public abstract class RetailEInvoiceCFDIRefProcessor_MX
{
    private static container ValidEInvoiceSource = [tableNum(RetailStatementJour), tableNum(RetailEInvoiceAggregatedStatement_MX), tableNum(CustInvoiceJour)];
    protected EInvoiceJour_MX eInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>voidDraftReturnEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves EInvoices from Draft to Blank status
    /// </summary>
    /// <param name="_eInvoiceJour">The e-invoice journal.</param>
    /// <remarks>
    /// The procedure fills in available EInvoice refernces and change status of EInvoice to Blank status.
    /// </remarks>
    public static void voidDraftReturnEInvoice(EInvoiceJour_MX _eInvoiceJour)
    {
        if (conFind(ValidEInvoiceSource, _eInvoiceJour.RefTableId)
            && _eInvoiceJour.isReturn == NoYes::Yes
            && _eInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Draft
            && _eInvoiceJour.CFDIMessageStatus == EInvoiceCFDIMessageStatus_MX::Blank)
        {
            RetailEInvoiceCFDIRefProcessor_MX::transferCFDIUUIDToReferences(_eInvoiceJour.RecId);
            RetailEInvoiceCFDIRefProcessor_MX::clearRetailEInvoiceCFDIReference_MX(_eInvoiceJour.REcId);

            _eInvoiceJour.CFDIStatus = EInvoiceCFDIStatus_MX::Blank;
            _eInvoiceJour.CFDIMessageStatus = EInvoiceCFDIMessageStatus_MX::Waiting;
            EInvoiceDocState_MX::construct(_eInvoiceJour).resubmitEInvoice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferCFDIUUIDToReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies completed CFDIUUID references from <c>RetailEInvoiceCFDIReference_MX</c> to <c>EInvoiceCFDIReference_MX</c>.
    /// </summary>
    /// <param name="_targetEInvoiceJour">A reference to <c>EInvoiceJour</c> to limit processed record set; optional.</param>
    public static void transferCFDIUUIDToReferences(RefRecId _targetEInvoiceJour = 0)
    {
        Query query = new Query();

        QueryBuildDataSource invoiceQbds = query.addDataSource(tableNum(RetailEInvoiceCFDIReference_MX));
        invoiceQbds.fields().dynamic(NoYes::No);
        invoiceQbds.fields().clearFieldList();

        invoiceQbds.addGroupByAndSelectionField(fieldNum(RetailEInvoiceCFDIReference_MX, CFDIUUID));
        invoiceQbds.addGroupByAndSelectionField(fieldNum(RetailEInvoiceCFDIReference_MX, ReferenceType));
        invoiceQbds.addGroupByAndSelectionField(fieldNum(RetailEInvoiceCFDIReference_MX, EInvoiceJour));

        invoiceQbds.addRange(fieldNum(RetailEInvoiceCFDIReference_MX, CFDIUUID)).value(SysQuery::valueNotEmptyString());
        if (_targetEInvoiceJour)
        {
            invoiceQbds.addRange(fieldNum(RetailEInvoiceCFDIReference_MX, EInvoiceJour)).value(queryValue(_targetEInvoiceJour));
        }

        QueryBuildDataSource referenceQbds = invoiceQbds.addDataSource(tableNum(EInvoiceJour_MX));
        referenceQbds.fields().dynamic(NoYes::No);
        referenceQbds.fields().clearFieldList();

        referenceQbds.addLink(fieldNum(RetailEInvoiceCFDIReference_MX, EInvoiceJour), fieldNum(EInvoiceJour_MX, RecId));
        referenceQbds.joinMode(JoinMode::ExistsJoin);

        referenceQbds.addRange(fieldNum(EInvoiceJour_MX, RefTableId)).value(con2Str(ValidEInvoiceSource, ','));
        referenceQbds.addRange(fieldNum(EInvoiceJour_MX, CFDIStatus)).value(queryValue(EInvoiceCFDIStatus_MX::Draft));
        referenceQbds.addRange(fieldNum(EInvoiceJour_MX, IsReturn)).value(queryValue(1));

        Map mapping = new Map(Types::String, Types::Container);
        mapping.insert(fieldStr(EInvoiceCFDIReference_MX, CFDIUUID), [invoiceQbds.uniqueId(), fieldStr(RetailEInvoiceCFDIReference_MX, CFDIUUID)]);
        mapping.insert(fieldStr(EInvoiceCFDIReference_MX, ReferenceType), [invoiceQbds.uniqueId(), fieldStr(RetailEInvoiceCFDIReference_MX, ReferenceType)]);
        mapping.insert(fieldStr(EInvoiceCFDIReference_MX, EInvoiceJour_MX), [invoiceQbds.uniqueId(), fieldStr(RetailEInvoiceCFDIReference_MX, EInvoiceJour)]);

        EInvoiceCFDIReference_MX eInvoiceCFDIReference;
        Query::insert_recordset(eInvoiceCFDIReference, mapping, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRetailEInvoiceCFDIReference_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all interim CFDI UUID references from <c>RetailEInvoiceCFDIReference_MX</c> related to a given <c>EInvoiceJour</c>.
    /// </summary>
    /// <param name="_targetEInvoiceJour">
    /// A reference to <c>EInvoiceJour_MX</c> to limit processed record set.
    /// </param>
    protected static void clearRetailEInvoiceCFDIReference_MX(RefRecId _targetEInvoiceJour)
    {
        RetailEInvoiceCFDIReference_MX reference;

        delete_from reference
            where reference.EInvoiceJour == _targetEInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reviseDraftReturnEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves EInvoice that have filled in UUID in references from NotReady to Blank status
    /// </summary>
    /// <param name="_targetEInvoiceJour">
    /// A reference to <c>EInvoiceJour_MX</c> to limit processed record set.
    /// </param>
    /// <remarks>
    /// The procedure tries and checks if EInvoices has references with filled in UUID and
    /// </remarks>
    public static void reviseDraftReturnEInvoice(RefRecId _targetEInvoiceJour = 0)
    {
        EInvoiceJour_MX eInvoiceJour;
        RetailEInvoiceCFDIReference_MX reference;

        while select forUpdate eInvoiceJour
            where eInvoiceJour.CFDIStatus == EInvoiceCFDIStatus_MX::Draft
                && eInvoiceJour.IsReturn
                && (!_targetEInvoiceJour || eInvoiceJour.RecId == _targetEInvoiceJour)
            notexists join reference
                where reference.EInvoiceJour == eInvoiceJour.RecId
                    && !reference.CFDIUUID
        {
            RetailEInvoiceCFDIRefProcessor_MX::voidDraftReturnEInvoice(eInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the <c>RetailEInvoiceCFDIRefProcessor_MX</c> class instance.
    /// </summary>
    /// <param name = "_eInvoiceJour">The e-invoice journal.</param>
    /// <returns>The class instance.</returns>
    public static RetailEInvoiceCFDIRefProcessor_MX construct(EInvoiceJour_MX _eInvoiceJour)
    {
        RetailEInvoiceCFDIRefProcessorAttribute_MX attribute = new RetailEInvoiceCFDIRefProcessorAttribute_MX(tableId2Name(_eInvoiceJour.RefTableId));
        RetailEInvoiceCFDIRefProcessor_MX processor = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RetailEInvoiceCFDIRefProcessor_MX), attribute);

        if (processor)
        {
            processor.initFromEInvoiceJour(_eInvoiceJour);
        }

        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEInvoiceJour</Name>
				<Source><![CDATA[
    public EInvoiceJour_MX parmEInvoiceJour(EInvoiceJour_MX _eInvoiceJour = eInvoiceJour)
    {
        eInvoiceJour = _eInvoiceJour;
 
        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIStatementReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates interim CFDI UUID references. 
    /// </summary>
    public abstract void createCFDIStatementReference()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize internal states from a given <c>EInvoiceJour_MX</c> cursor.
    /// </summary>
    /// <param name = "_eInvoiceJour">The e-invoice journal.</param>
    protected void initFromEInvoiceJour(EInvoiceJour_MX _eInvoiceJour)
    {
        eInvoiceJour = _eInvoiceJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>