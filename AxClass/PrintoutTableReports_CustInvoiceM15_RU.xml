<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintoutTableReports_CustInvoiceM15_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PrintoutTableReports_CustInvoiceM15_RU extends PrintoutTableReports_RU implements BatchRetryable
{
    CustInvoiceJour  invoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNum</Name>
				<Source><![CDATA[
    protected NumberSeq allocateNum(PrintoutTypeTable_RU _type,
                                    InventLocationId     _locationId)
    {
        CustInvoiceJour_RU      custInvoiceJour_RU;
        NumberSeq               ret;
        NumberSequenceGroupId   seqGroup = invoiceJour.NumberSequenceGroup;
        RefRecId                seqId;
        RefRecId                scopeId  = NumberSeqScopeFactory::createDefaultScope().getId();

        switch (_type)
        {
            case PrintoutTypeTable_RU::SalesInvoiceM15 :
                custInvoiceJour_RU = invoiceJour.custInvoiceJour_RU();

                if (seqGroup)
                {
                    seqId = custInvoiceJour_RU.Correct_RU ?
                            NumberSequenceGroupRef::findNaturalKey(
                                SalesParameters::numRefPrintoutJourNum_CustCorrInvM15_RU().NumberSequenceDatatype,
                                scopeId,
                                seqGroup).NumberSequenceId :
                           PrintoutTableReports_CustInvoiceM15_RU::findPrintoutJournalNum_CustInvM15_RU(seqGroup).NumberSequenceId;
                }

                if (!seqId)
                {
                    seqId = custInvoiceJour_RU.Correct_RU ?
                           SalesParameters::numRefPrintoutJourNum_CustCorrInvM15_RU().NumberSequenceId :
                           SalesParameters::numRefPrintoutJournalNum_CustInvM15_RU().NumberSequenceId;
                }
                break;

            default:
                throw error("@GLS106494");
        }

        if (! seqId)
        {
            if (seqGroup)
            {
                error(strFmt("@GLS107008", "@GLS107005", seqGroup));
            }

            throw error(strFmt("@SYS53911", "@GLS107005", "@SYS25196"));
        }

        this.checkNumSeq(NumberSequenceTable::find(seqId).NumberSequence, "@SYS25196", extendedTypeNum(CustInvoiceId_M15_RU));

        ret = NumberSeq::newGetNumFromId(seqId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmMode</Name>
				<Source><![CDATA[
    public void initParmMode()
    {
        this.showQueryDialog(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        switch (common.TableId)
        {
            case tableNum(CustInvoiceJour):
            invoiceJour = common;
                break;
        }

        if (! invoiceJour)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustInvoiceTrans    invoiceTrans;
        InventDim           inventDim;

        PrintoutTable_RU  printoutJournal;

        // create journal
        ttsbegin;

        while select InventLocationId
            from  inventDim
            group by InventLocationId
            where inventDim.InventLocationId
        exists join RecId
            from  invoiceTrans
            where invoiceTrans.InventDimId         == inventDim.InventDimId     &&
                  invoiceTrans.InvoiceId           == invoiceJour.InvoiceId     &&
                  invoiceTrans.InvoiceDate         == invoiceJour.InvoiceDate   &&
                  invoiceTrans.SalesId             == invoiceJour.SalesId       &&
                  invoiceTrans.NumberSequenceGroup == invoiceJour.NumberSequenceGroup
        {
            printoutJournal.clear();
            printoutJournal.JournalType      = PrintoutTypeTable_RU::SalesInvoiceM15;
            printoutJournal.InventLocationId = inventDim.InventLocationId;

            if (invoiceJour.InvoiceId)
            {
                printoutJournal.JournalNum  = this.allocateNum(PrintoutTypeTable_RU::SalesInvoiceM15,
                                                               inventDim.InventLocationId).num();
            }

            printoutJournal.initFromCustVendInvoiceJour(invoiceJour);

            printoutJournal.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS106999";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintoutJournalNum_CustInvM15_RU</Name>
				<Source><![CDATA[
    public static NumberSequenceGroupRef findPrintoutJournalNum_CustInvM15_RU(NumberSequenceGroupId _numberSequenceGroupId,
                                                                              boolean               _update = true)
    {
        return
            NumberSequenceGroupRef::findNaturalKey(NumberSequenceDatatype::findByDatatypeId(extendedtypenum(PrintoutJournalNum_CustInvM15_RU)).RecId,
                                                   NumberSeqScopeFactory::createDefaultScope().getId(true),
                                                   _numberSequenceGroupId,
                                                   _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>