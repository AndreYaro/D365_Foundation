<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventReserveQtyCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>WHSInventReserveQtyCalculator</c> class calculates WHS specific on-hand quantities.
/// </summary>
class WHSInventReserveQtyCalculator
{
    #WHSReservationHierarchy
    boolean                         needsCalculations;
    boolean                         needsInitializeCalculations;
    boolean                         includeDelta;
    CreatedTransactionId            ttsId;
    WHSReservationHierarchyLevel    level;

    InventTable                     inventTable;
    InventDim                       inventDimCriteria;
    InventDimParm                   requestedInventDimParm;
    InventDimParm                   optimizedInventDimParm;
    EcoResProductDimGroupSetup      productDimensions;

    InventSum                       inventSum;
    WHSInventReserve                whsInventReserveAggr;
    WHSInventReserve                whsInventReserveLevel;
    WHSReservationHierarchyLevel    upperLevelOfMinimumCalculation;
    private boolean                 dimensionCriteriaHasGaps;

    private WHSInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSInventReserveQtyCalculator));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpperLevelOfMinimumCalculation</Name>
				<Source><![CDATA[
    public WHSReservationHierarchyLevel parmUpperLevelOfMinimumCalculation(WHSReservationHierarchyLevel _upperLevelOfMinimumCalculation = upperLevelOfMinimumCalculation)
    {
        upperLevelOfMinimumCalculation = _upperLevelOfMinimumCalculation;

        return upperLevelOfMinimumCalculation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate()
    {
        if (!needsCalculations)
        {
            return;
        }

        this.initializeCalculations();

        whsInventReserveAggr  = this.calculateAggr();
        whsInventReserveLevel = this.calculateLevel();

        needsCalculations = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAggr</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateAggr()
    {
        WHSInventReserve whsInventReserve;

        if (dimensionCriteriaHasGaps)
        {
            whsInventReserve = this.calculateAggrUsingSP();
        }
        else
        {
            whsInventReserve = this.calculateAggrUsingXpp();
        }

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAggrUsingSP</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateAggrUsingSP()
    {
        WHSInventReserve whsInventReserve;

        if (level < upperLevelOfMinimumCalculation)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSInventReserveQuantities quantities = WHSOnHandSPHelper::construct().calculateQuantities(
                                                                                    inventTable,
                                                                                    inventDimCriteria,
                                                                                    optimizedInventDimParm,
                                                                                    level,
                                                                                    includeDelta,
                                                                                    ttsId,
                                                                                    upperLevelOfMinimumCalculation);

        whsInventReserve.addFromWHSInventReserveQuantities(quantities);

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAggrUsingXpp</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateAggrUsingXpp()
    {
        WHSInventReserve whsInventReserve;

        WHSInventReserveQuantities quantities = WHSInventOnHand::getAllAvailQuantities(inventTable.ItemId, inventDimCriteria, includeDelta, upperLevelOfMinimumCalculation);

        whsInventReserve.addFromWHSInventReserveQuantities(quantities);

        return whsInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLevel</Name>
				<Source><![CDATA[
    private WHSInventReserve calculateLevel()
    {
        using (var activityContext = this.logger().whsOnHandCalculations().calculateQuantitiesForLevel())
        {
            WHSInventOnHandForLevelCalculator onHandForLevelCalculator = WHSInventOnHandForLevelCalculator::constructFromParameters(inventTable.ItemId, inventDimCriteria, level, includeDelta);

            onHandForLevelCalculator.setInventDimParm(optimizedInventDimParm);
            onHandForLevelCalculator.setDimensionCriteriaHasGaps(dimensionCriteriaHasGaps);
            onHandForLevelCalculator.setIncludeDelta(includeDelta);
            
            return onHandForLevelCalculator.calculateQuantities();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOptimizedInventDimParm</Name>
				<Source><![CDATA[
    private InventDimParm calculateOptimizedInventDimParm(
        InventDim       _requestedInventDimCriteria,
        InventDimParm   _requestedInventDimParm)
    {
        InventDimParm   result;

        result.data(_requestedInventDimParm);

        // To help SQL server pick the most optimal query plan, we want to enable
        // all inactive product dimension flags (thay should have corresponding values in inventDimCriteria empty)
        // and all active product dimension flags that have corresponding values set in inventDimCriteria or were explicitely requested by user
        result.setAllProductDimensions();
        if (productDimensions.anyProductDimensionsActive())
        {
            ListEnumerator le = productDimensions.activeDimensionFields().getEnumerator();
            while (le.moveNext())
            {
                FieldId dimFieldId = le.current();
                FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
                if (inventDimCriteria.(dimFieldId) == ''
                    && requestedInventDimParm.(dimParmFieldId) == NoYes::No)
                {
                    result.(dimParmFieldId) = NoYes::No;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCalculations</Name>
				<Source><![CDATA[
    private void initializeCalculations()
    {
        if (!needsInitializeCalculations)
        {
            return;
        }

        InventUpdateOnhand inventUpdateOnhand = InventUpdateOnhandGlobal::instance().inventUpdateOnhand();
        productDimensions                     = EcoResProductDimGroupSetup::newInventTable(inventTable);
        includeDelta                          = inventUpdateOnhand.mustAddInventSumDeltaOnhand(inventTable.ItemId);
        ttsId                                 = inventUpdateOnhand.ttsId();
        level                                 = WHSReservationHierarchyInventDimUtil::deepestLevelFromInventDimParm(
                                                      WHSReservationHierarchyProvider::construct()
                                                          .getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp),
                                                      requestedInventDimParm);
        optimizedInventDimParm = this.calculateOptimizedInventDimParm(inventDimCriteria, requestedInventDimParm);

        dimensionCriteriaHasGaps = this.calculateDimensionCriteriaHasGaps();

        needsInitializeCalculations = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSum</Name>
				<Source><![CDATA[
    public InventSum inventSum()
    {
        if (!inventSum.ItemId)
        {
            this.initializeCalculations();
            inventSum = InventSum::findSumQty(inventTable.ItemId, inventDimCriteria, optimizedInventDimParm);
        }

        return inventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDimensionCriteriaHasGaps</Name>
				<Source><![CDATA[
    private boolean calculateDimensionCriteriaHasGaps()
    {
        InventDimParm gapCheckDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveAndIncludingLevel(inventTable, level);

        boolean hasDimensionGap = !inventDimCriteria.allInventDimParmFieldsHaveValues(gapCheckDimParm, gapCheckDimParm.selectedDimFields());

        return hasDimensionGap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        InventTable     _inventTable,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        needsCalculations = true;
        needsInitializeCalculations = true;
        upperLevelOfMinimumCalculation = #ITEMHIERARCHYLEVEL;

        inventTable.data(_inventTable);
        requestedInventDimParm.data(_inventDimParm);
        inventDimCriteria.data(_inventDimCriteria);

        // We might include additional InventDimParm flags as and optimization
        // so we need to make sure corresponding InventDim fields are empty.
        inventDimCriteria.clearNotSelectedDim(_inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInventReserveAggr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the aggregated reserved quantity.
    /// </summary>
    /// <returns>The aggregated reserved quantity.</returns>
    public WHSInventReserve whsInventReserveAggr()
    {
        this.calculate();

        return whsInventReserveAggr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInventReserveLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the reservation level.
    /// </summary>
    /// <returns>The reservation level.</returns>
    public WHSInventReserve whsInventReserveLevel()
    {
        this.calculate();

        return whsInventReserveLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new instance of <c>WHSInventReserveQtyCalculator</c> initialized with the given parameters.
    /// </summary>
    /// <param name = "_inventTable"><c>InventTable</c> record to use.</param>
    /// <param name = "_inventDimCriteria"><c>InventDim</c> criteria for the calculations.</param>
    /// <param name = "_inventDimCriteriaParm"><c>InventDimParm</c> criteria for the calculations.</param>
    /// <returns>New instance of the <c>WHSInventReserveQtyCalculator</c>. class</returns>
    public static WHSInventReserveQtyCalculator newFromParms(
        InventTable     _inventTable,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimCriteriaParm)
    {
        return new WHSInventReserveQtyCalculator(_inventTable, _inventDimCriteria, _inventDimCriteriaParm);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>