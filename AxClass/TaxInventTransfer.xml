<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxInventTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxInventTransfer</c> class is the tax calculation class for transfer order.
/// </summary>
public class TaxInventTransfer extends Tax
{
    private InventTransferCalcTax transferCalcTax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAdjustmentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a collection of tax adjustment types that can be used to make tax adjustments.
    /// </summary>
    /// <remarks>
    /// By default, all the transactions that use tax adjustment functions support summary tax adjustment
    /// type.
    /// </remarks>
    protected void addTaxAdjustmentTypes()
    {
        super();

        if (transferCalcTax && transferCalcTax.useDetailsSalesTaxAdjustmentType())
        {
            this.addTaxAdjustmentType(TaxAdjustmentType::Detail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the transaction supports adjusting the calculated base amount when tax is
    /// included in item price and the user adjusts the tax amount.
    /// </summary>
    /// <returns>
    /// true if adjusting the calculated base amount is supported; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes context to with <c>InventTransferCalcTax</c>.
    /// </summary>
    /// <param name="_transferCalcTax">
    /// A <c>InventTransferCalcTax</c> to initialize context.
    /// </param>
    private void init(InventTransferCalcTax _transferCalcTax)
    {
        transferCalcTax = _transferCalcTax;
        headingTableId = transferCalcTax.tableId();
        headingRecId = transferCalcTax.recID();
        taxDate = transferCalcTax.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Builds a <c>TaxInventTransfer</c> initialized with an <c>InventTransferCalcTax</c>.
    /// </summary>
    /// <param name="_transferCalcTax">
    ///  A <c>InventTransferCalcTax</c> to initialize context in an <c>TaxInventTransfer</c>.
    /// </param>
    /// <returns>
    /// An instance of the <c>TaxInventTransfer</c> class.
    /// </returns>
    [Replaceable]
    public static TaxInventTransfer construct(InventTransferCalcTax _transferCalcTax)
    {
        TaxInventTransfer taxTransfer = new TaxInventTransfer();

        taxTransfer.init(_transferCalcTax);

        return taxTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction that is being calculated supports sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    /// <remarks>
    /// By default, the transaction does not support sales tax adjustments.
    /// </remarks>
    public boolean useSalesTaxAdjustments()
    {
        boolean useSalesTaxAdjustment;

        if (transferCalcTax)
        {
            useSalesTaxAdjustment = transferCalcTax.useSalesTaxAdjustments();
        }

        return useSalesTaxAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the taxes for transfer order.
    /// </summary>
    /// <param name = "_updateType">
    /// The invent transfer update type.
    /// </param>
    /// <returns>
    /// The actual tax amount.
    /// </returns>
    public TaxAmount calc(InventTransferUpdateType _updateType)
    {
        if (transferCalcTax.getUpdateType() == InventTransferUpdateType::Shipment)
        {
            taxModuleType = TaxModuleType::TransferOrderShipment;
        }
        else if (transferCalcTax.getUpdateType() == InventTransferUpdateType::Receive)
        {
            taxModuleType = TaxModuleType::TransferOrderReceive;
        }

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Inventory))
        {
            return this.calcUsingTaxIntegration();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegration</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegration()
    {
        TaxIntegrationDocumentObject document;
        if (TaxIntegrationConstructWithSourceRecordInventoryFlight::instance().isEnabled())
        {
            document = TaxIntegrationDocumentObject::constructWithRecord(transferCalcTax.getSource());
        }
        else
        {
            document = TaxIntegrationDocumentObject::construct(
                transferCalcTax.tableId(),
                transferCalcTax.recID());
        }

        TaxIntegrationBusinessProcessDetail taxIntegrationBusinessProcessDetail = this.determineBusinessProcessDetail();
        if (taxIntegrationBusinessProcessDetail == TaxIntegrationBusinessProcessDetail::Shipment
            || taxIntegrationBusinessProcessDetail == TaxIntegrationBusinessProcessDetail::Receive)
        {
            this.setFieldsForLegacyTax();
            this.setFieldsForTaxIntegrationDocumentObject(
                document,
                taxIntegrationBusinessProcessDetail);
        }
        else
        {
            return 0;
        }

        TaxIntegrationFacade::calculate(document);
        amountInclTaxMap = document.getAmountIncludingTax();

        if (this.headingTableId() != tableNum(InventTransferTable))
        {
            this.loadTaxAdjustments(amountInclTaxMap);
        }

        return this.totalTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields from legact tax object to tax integration document object.
    /// </summary>
    protected void setFieldsForLegacyTax()
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.parmVatRegData_W(transferCalcTax.vatRegData_W());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for tax integration document object.
    /// </summary>
    /// <param name = "_document">The tax integration document object.</param>
    /// <param name = "_taxIntegrationBusinessProcessDetail">The tax integration business process detail.</param>
    protected void setFieldsForTaxIntegrationDocumentObject(
        TaxIntegrationDocumentObject _document,
        TaxIntegrationBusinessProcessDetail _taxIntegrationBusinessProcessDetail)
    {
        _document.setTransactionDate(this.taxDate);
        _document.setDocumentDate(transferCalcTax.documentDate());
        _document.setInvoiceDate(transferCalcTax.invoiceDate());
        _document.setDeliveryDate(transferCalcTax.deliveryDate());

        _document.setCompany(this.getCompany());
        _document.setHeadingTableId(this.headingTableId());
        _document.setHeadingRecId(this.headingRecId());

        _document.setBusinessProcessDetail(_taxIntegrationBusinessProcessDetail);

        switch (_taxIntegrationBusinessProcessDetail)
        {
            case TaxIntegrationBusinessProcessDetail::Shipment:
                _document.setSign(-1);
                _document.setSource(TaxModuleType::TransferOrderShipment);
                break;
            case TaxIntegrationBusinessProcessDetail::Receive:
                _document.setSign(1);
                _document.setSource(TaxModuleType::TransferOrderReceive);
                break;
            default:
                break;
        }

        _document.setBusinessProcess(TaxIntegrationBusinessProcess::Inventory);
        _document.setPrepaid(this.isPrePayment());

        _document.setEUROTriangulation(this.getTriangulation());

        _document.setLegacyTax(this);
        _document.setShouldSkipDocumentCharge(skipTableMarkup);
        _document.setShouldSkipLineCharge(skipLineMarkup);

    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBusinessProcessDetail</Name>
				<Source><![CDATA[
    private TaxIntegrationBusinessProcessDetail determineBusinessProcessDetail()
    {
        TaxIntegrationBusinessProcessDetail taxIntegrationBusinessProcessDetail;
        if (transferCalcTax.getUpdateType() == InventTransferUpdateType::Shipment)
        {
            taxIntegrationBusinessProcessDetail = TaxIntegrationBusinessProcessDetail::Shipment;
        }
        else if (transferCalcTax.getUpdateType() == InventTransferUpdateType::Receive)
        {
            taxIntegrationBusinessProcessDetail = TaxIntegrationBusinessProcessDetail::Receive;
        }
        else
        {
            taxIntegrationBusinessProcessDetail = TaxIntegrationBusinessProcessDetail::None;
        }
        return taxIntegrationBusinessProcessDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the transaction supports adjusting a single line.
    /// </summary>
    /// <returns>
    /// true if adjusting a single line is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        boolean allowSingleLineAdjustment;

        if (transferCalcTax)
        {
            allowSingleLineAdjustment = transferCalcTax.allowSingleLineAdjustment();
        }

        return allowSingleLineAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a transaction.
    /// </summary>
    /// <param name="_amountInclTax">
    /// A collection of transaction amounts that include tax amounts.
    /// </param>
    protected void loadTaxAdjustments(Map _amountInclTax)
    {
        TaxCalculationAdjustment taxCalculationAdjustment;
        TmpTaxWorkTrans tmpTaxWorkTransLocal;

        if (this.allowSingleLineAdjustment())
        {
            tmpTaxWorkTransLocal.setTmpData(taxWorkTrans);
            while select SourceTableId, SourceRecId, DataAreaId from tmpTaxWorkTransLocal
                group by tmpTaxWorkTransLocal.SourceTableId, tmpTaxWorkTransLocal.SourceRecId, tmpTaxWorkTransLocal.DataAreaId
                where tmpTaxWorkTransLocal.HeadingTableId == headingTableId
                    && tmpTaxWorkTransLocal.HeadingRecId == headingRecId
            {
                this.loadPerLineTaxAdjustments(tmpTaxWorkTransLocal.DataAreaId, tmpTaxWorkTransLocal.SourceTableId, tmpTaxWorkTransLocal.SourceRecId, _amountInclTax);
            }
        }

        if (this.useSalesTaxAdjustments())
        {
            taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);

            if (taxCalculationAdjustment)
            {
                taxCalculationAdjustment.parmLineAmountIncludesTax(transferCalcTax.isTaxIncluded());
                taxCalculationAdjustment.parmAmountInclTaxMap(_amountInclTax);
                taxCalculationAdjustment.loadTaxAdjustments();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPerLineTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads tax adjustments that are adjusting taxes for a specific line.
    /// </summary>
    /// <param name="_companyId">
    /// A value that specifies whether a tax adjustment can be located in another company. If they can, the
    /// current company and passed in company will be checked for adjustments.
    /// </param>
    /// <param name="_sourceTableId">
    /// The table ID of the transaction line.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the transaction line.
    /// </param>
    /// <param name="_amountInclTax">
    /// A collection of transaction amounts that include tax amounts.
    /// </param>
    protected void loadPerLineTaxAdjustments(SelectableDataArea _companyId, RefTableId _sourceTableId, RefRecId _sourceRecId, Map _amountInclTax)
    {
        TaxCalculationAdjustment taxCalculationAdjustment;

        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        taxCalculationAdjustment.parmLineAmountIncludesTax(transferCalcTax.isTaxIncluded());
        taxCalculationAdjustment.parmAmountInclTaxMap(_amountInclTax);
        taxCalculationAdjustment.parmHeadingTableId(_sourceTableId);
        taxCalculationAdjustment.parmHeadingRecId(_sourceRecId);
        taxCalculationAdjustment.loadTaxAdjustments(_companyId, _sourceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSourceBaseAmount</Name>
				<Source><![CDATA[
    private void adjustSourceBaseAmount(Map _amountInclTax, Map _amountExclTax)
    {
        RefRecId adjustRecId[];
        RefTableId adjustedTableId[];
        AmountCur pennyDiff[];
        Counter counter;
        Counter counterMax;

        while select sum(SourceTaxAmountCur)
            from taxWorkTrans
            group by SourceTableId, SourceRecId, SourceCurrencyCode
            where (
                taxWorkTrans.SourceTableId == this.sourceTableId()
                || taxWorkTrans.SourceTableId == tableNum(MarkupTrans))
                && taxWorkTrans.TaxDirection != TaxDirection::UseTax
                && taxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed
        {
            if (taxWorkTrans.SourceTaxAmountCur
                && _amountInclTax.exists(this.taxWorkTransSource(taxWorkTrans))
                && _amountExclTax.exists(this.taxWorkTransSource(taxWorkTrans)))
            {
                _amountInclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(_amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));
                _amountExclTax.insert(this.taxWorkTransSource(taxWorkTrans), CurrencyExchangeHelper::amount(_amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)), sourceCurrencyCode));
                    
                if ((_amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) + taxWorkTrans.SourceTaxAmountCur) != _amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans)))
                {
                    counterMax++;
                    adjustRecId[counterMax] = taxWorkTrans.SourceRecId;
                    adjustedTableId[counterMax] = taxWorkTrans.SourceTableId;
                    pennyDiff[counterMax] =
                        _amountExclTax.lookup(this.taxWorkTransSource(taxWorkTrans)) +
                        taxWorkTrans.SourceTaxAmountCur -
                        _amountInclTax.lookup(this.taxWorkTransSource(taxWorkTrans));
                }
            }
        }
        if (counterMax)
        {
            for (counter = 1; counter <= counterMax; counter++)
            {
                this.adjustPennyDiff(pennyDiff[counter], adjustedTableId[counter], adjustRecId[counter]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ledger dimensions for the <c>TmpTaxWorkTrans</c> record.
    /// </summary>
    /// <param name="_taxWorkTrans">
    ///    The <c>TmpTaxWorkTrans</c> table buffer.
    /// </param>
    /// <param name="_taxTable">
    ///    The <c>TaxTable</c> table buffer.
    /// </param>
    /// <param name="_dimensionDefault">
    ///    The default dimensions.
    /// </param>
    /// <param name="_operationLedgerDimension">
    ///    The default operation ledger dimension.
    /// </param>
    protected void setLedgerDimensions(TmpTaxWorkTrans _taxWorkTrans, TaxTable _taxTable, DimensionDefault _dimensionDefault, LedgerDimensionAccount _operationLedgerDimension)
    {
        TaxLedgerAccountGroup           taxLedgerAccountGroup;
        LedgerDimensionDefaultAccount   defaultOffsetAccount;

        super(_taxWorkTrans, _taxTable, _dimensionDefault, _operationLedgerDimension);

        if (_taxWorkTrans.ExemptTax == NoYes::No)
        {
            changecompany(this.getCompany())
            {
                taxLedgerAccountGroup   = TaxLedgerAccountGroup::find(_taxTable.TaxAccountGroup);

                if (_taxWorkTrans.TaxDirection == TaxDirection::IncomingTax || _taxWorkTrans.TaxDirection == TaxDirection::OutgoingTax)
                {
                    defaultOffsetAccount = taxLedgerAccountGroup.TaxInterimTransitLedgerDimension;
                }

                if (defaultOffsetAccount != 0)
                {
                    _taxWorkTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultOffsetAccount, _dimensionDefault);
                }

                if (DimensionAttributeValueCombination::find(_operationLedgerDimension).LedgerDimensionType == LedgerDimensionType::DefaultAccount)
                {
                    _taxWorkTrans.OperationLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_operationLedgerDimension, _dimensionDefault);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves and posts the tax transaction.
    /// </summary>
    /// <param name = "_ledgerPostingController">The instance of <c>LedgerPostingController</c>.</param>
    public void saveAndPost(LedgerPostingController _ledgerPostingController)
    {
        this.initLedgerPosting(_ledgerPostingController);

        super(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(
        LedgerPostingController _ledgerPostingController,
        TaxTrans _taxTrans,
        TaxAmount _taxAmount,
        TaxAmount _chargeAmount,
        CurrencyExchangeHelper _exchRateHelper,
        LedgerDimensionAccount _ledgerDimension,
        LedgerDimensionAccount _operationLedgerDimension,
        LedgerDimensionAccount _taxOffsetUseTaxLedgerDimension,
        LedgerDetailLevel _ledgerDetailLevel  = LedgerDetailLevel::AsDefault,
        ProjLedger _projLedger = null,
        LedgerDimensionAccount _offsetLedgerDimension = 0,
        AmountMSTSecondary _amountMSTSecondary = 0)
    {
        super(_ledgerPostingController,
            _taxTrans,
            _taxAmount,
            _chargeAmount,
            _exchRateHelper,
            _ledgerDimension,
            _operationLedgerDimension,
            _taxOffsetUseTaxLedgerDimension,
            _ledgerDetailLevel,
            _projLedger,
            _offsetLedgerDimension,
            _amountMSTSecondary);

        if (this.taxWorkTrans.OffsetLedgerDimension)
        {
            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                _ledgerPostingController.getReference(),
                LedgerPostingType::TransferInterim_IN,
                this.taxWorkTrans.OffsetLedgerDimension,
                _taxTrans.SourceCurrencyCode,
                -1 * _taxAmount,
                _exchRateHelper);

            ledgerVoucherTransObject.parmLedgerDetailLevel(_ledgerDetailLevel);
            _ledgerPostingController.addTrans(ledgerVoucherTransObject);

            if (!this.isTaxIncomingPost(_taxTrans))
            {
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    _ledgerPostingController.getReference(),
                    LedgerPostingType::Tax,
                    _operationLedgerDimension,
                    _taxTrans.SourceCurrencyCode,
                    _chargeAmount,
                    _exchRateHelper);

                if (_taxTrans)
                {
                    // TaxTrans will not exist in the case where a transaction is only being validated,
                    // and in that case the tax trans relationship should not be created
                    ledgerVoucherTransObject.addTaxTransRelationship(_taxTrans.RecId,
                        TaxTransRelationshipType::TaxInCostPrice,
                        curext(),
                        ledgerVoucherTransObject.parmAccountingCurrencyAmount(),
                        ledgerVoucherTransObject.parmTransactionCurrencyAmount());
                }

                ledgerVoucherTransObject.parmLedgerDetailLevel(_ledgerDetailLevel);
                _ledgerPostingController.addTrans(ledgerVoucherTransObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetVATDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine whether vatDueDate_W should be set for tax transaction.
    /// </summary>
    /// <param name = "_taxTrans">Input tax transaction.</param>
    /// <returns> true if vatDueDate_W should be set for tax transaction; otherwise, false.</returns>
    protected boolean shouldSetVATDueDate_W(VATRegData_W _taxTrans)
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled()
            // there is no place for user to specify a VAT due date, set blank
            && SysDictField::isFieldMapped(tableStr(VATRegData_W), tableId2Name(_taxTrans.TableId), fieldStr(VATRegData_W, TaxGroup))
            && TaxGroupHeading::find(_taxTrans.TaxGroup).FillVATDueDate_W != FillVATDueDate_W::Manually)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>